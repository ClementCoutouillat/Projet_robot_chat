
projet_systemelec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e024  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800e0e0  0800e0e0  0001e0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e840  0800e840  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  0800e840  0800e840  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e840  0800e840  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e840  0800e840  0001e840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e844  0800e844  0001e844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800e848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000250  0800ea98  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800ea98  000207c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b46  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033d1  00000000  00000000  00034e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  000381d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce7  00000000  00000000  00039270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189e0  00000000  00000000  00039f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175bf  00000000  00000000  00052937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000907de  00000000  00000000  00069ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050dc  00000000  00000000  000fa6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ff7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000250 	.word	0x20000250
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800e0c4 	.word	0x0800e0c4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000254 	.word	0x20000254
 80000fc:	0800e0c4 	.word	0x0800e0c4

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fe9d 	bl	8002188 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fded 	bl	8002038 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe8f 	bl	8002188 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fe85 	bl	8002188 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fe15 	bl	80020bc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fe0b 	bl	80020bc <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fbc9 	bl	8000c54 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb55 	bl	8000b7c <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fbbb 	bl	8000c54 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fbb1 	bl	8000c54 <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb61 	bl	8000bc8 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb57 	bl	8000bc8 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffb5 	bl	80004a0 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f002 fce9 	bl	8002f14 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f002 f942 	bl	80027d4 <__aeabi_dsub>
 8000550:	f002 fce0 	bl	8002f14 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__aeabi_d2lz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0005      	movs	r5, r0
 8000568:	000c      	movs	r4, r1
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f7ff ff77 	bl	8000464 <__aeabi_dcmplt>
 8000576:	2800      	cmp	r0, #0
 8000578:	d108      	bne.n	800058c <__aeabi_d2lz+0x28>
 800057a:	0028      	movs	r0, r5
 800057c:	0021      	movs	r1, r4
 800057e:	f000 f80f 	bl	80005a0 <__aeabi_d2ulz>
 8000582:	0002      	movs	r2, r0
 8000584:	000b      	movs	r3, r1
 8000586:	0010      	movs	r0, r2
 8000588:	0019      	movs	r1, r3
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	18e1      	adds	r1, r4, r3
 8000592:	0028      	movs	r0, r5
 8000594:	f000 f804 	bl	80005a0 <__aeabi_d2ulz>
 8000598:	2300      	movs	r3, #0
 800059a:	4242      	negs	r2, r0
 800059c:	418b      	sbcs	r3, r1
 800059e:	e7f2      	b.n	8000586 <__aeabi_d2lz+0x22>

080005a0 <__aeabi_d2ulz>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <__aeabi_d2ulz+0x34>)
 80005a6:	000d      	movs	r5, r1
 80005a8:	0004      	movs	r4, r0
 80005aa:	f001 fe51 	bl	8002250 <__aeabi_dmul>
 80005ae:	f7ff ffbb 	bl	8000528 <__aeabi_d2uiz>
 80005b2:	0006      	movs	r6, r0
 80005b4:	f002 fd14 	bl	8002fe0 <__aeabi_ui2d>
 80005b8:	2200      	movs	r2, #0
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <__aeabi_d2ulz+0x38>)
 80005bc:	f001 fe48 	bl	8002250 <__aeabi_dmul>
 80005c0:	0002      	movs	r2, r0
 80005c2:	000b      	movs	r3, r1
 80005c4:	0020      	movs	r0, r4
 80005c6:	0029      	movs	r1, r5
 80005c8:	f002 f904 	bl	80027d4 <__aeabi_dsub>
 80005cc:	f7ff ffac 	bl	8000528 <__aeabi_d2uiz>
 80005d0:	0031      	movs	r1, r6
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	3df00000 	.word	0x3df00000
 80005d8:	41f00000 	.word	0x41f00000

080005dc <__aeabi_l2d>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0006      	movs	r6, r0
 80005e0:	0008      	movs	r0, r1
 80005e2:	f002 fccd 	bl	8002f80 <__aeabi_i2d>
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_l2d+0x28>)
 80005ea:	f001 fe31 	bl	8002250 <__aeabi_dmul>
 80005ee:	000d      	movs	r5, r1
 80005f0:	0004      	movs	r4, r0
 80005f2:	0030      	movs	r0, r6
 80005f4:	f002 fcf4 	bl	8002fe0 <__aeabi_ui2d>
 80005f8:	002b      	movs	r3, r5
 80005fa:	0022      	movs	r2, r4
 80005fc:	f000 fece 	bl	800139c <__aeabi_dadd>
 8000600:	bd70      	pop	{r4, r5, r6, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41f00000 	.word	0x41f00000

08000608 <__aeabi_fadd>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	4647      	mov	r7, r8
 800060c:	46ce      	mov	lr, r9
 800060e:	024a      	lsls	r2, r1, #9
 8000610:	0243      	lsls	r3, r0, #9
 8000612:	0045      	lsls	r5, r0, #1
 8000614:	0fc4      	lsrs	r4, r0, #31
 8000616:	0a50      	lsrs	r0, r2, #9
 8000618:	4680      	mov	r8, r0
 800061a:	0048      	lsls	r0, r1, #1
 800061c:	0a5b      	lsrs	r3, r3, #9
 800061e:	0e00      	lsrs	r0, r0, #24
 8000620:	0992      	lsrs	r2, r2, #6
 8000622:	4694      	mov	ip, r2
 8000624:	b580      	push	{r7, lr}
 8000626:	001e      	movs	r6, r3
 8000628:	4681      	mov	r9, r0
 800062a:	0002      	movs	r2, r0
 800062c:	0e2d      	lsrs	r5, r5, #24
 800062e:	00df      	lsls	r7, r3, #3
 8000630:	0fc9      	lsrs	r1, r1, #31
 8000632:	428c      	cmp	r4, r1
 8000634:	d024      	beq.n	8000680 <__aeabi_fadd+0x78>
 8000636:	1a28      	subs	r0, r5, r0
 8000638:	2800      	cmp	r0, #0
 800063a:	dd0e      	ble.n	800065a <__aeabi_fadd+0x52>
 800063c:	2a00      	cmp	r2, #0
 800063e:	d13e      	bne.n	80006be <__aeabi_fadd+0xb6>
 8000640:	4662      	mov	r2, ip
 8000642:	2a00      	cmp	r2, #0
 8000644:	d100      	bne.n	8000648 <__aeabi_fadd+0x40>
 8000646:	e0fd      	b.n	8000844 <__aeabi_fadd+0x23c>
 8000648:	1e42      	subs	r2, r0, #1
 800064a:	2801      	cmp	r0, #1
 800064c:	d100      	bne.n	8000650 <__aeabi_fadd+0x48>
 800064e:	e137      	b.n	80008c0 <__aeabi_fadd+0x2b8>
 8000650:	28ff      	cmp	r0, #255	; 0xff
 8000652:	d100      	bne.n	8000656 <__aeabi_fadd+0x4e>
 8000654:	e0a9      	b.n	80007aa <__aeabi_fadd+0x1a2>
 8000656:	0010      	movs	r0, r2
 8000658:	e039      	b.n	80006ce <__aeabi_fadd+0xc6>
 800065a:	2800      	cmp	r0, #0
 800065c:	d063      	beq.n	8000726 <__aeabi_fadd+0x11e>
 800065e:	464b      	mov	r3, r9
 8000660:	1b52      	subs	r2, r2, r5
 8000662:	2d00      	cmp	r5, #0
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x60>
 8000666:	e0e0      	b.n	800082a <__aeabi_fadd+0x222>
 8000668:	2f00      	cmp	r7, #0
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x66>
 800066c:	e0ce      	b.n	800080c <__aeabi_fadd+0x204>
 800066e:	1e53      	subs	r3, r2, #1
 8000670:	2a01      	cmp	r2, #1
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x6e>
 8000674:	e155      	b.n	8000922 <__aeabi_fadd+0x31a>
 8000676:	2aff      	cmp	r2, #255	; 0xff
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x74>
 800067a:	e094      	b.n	80007a6 <__aeabi_fadd+0x19e>
 800067c:	001a      	movs	r2, r3
 800067e:	e0d9      	b.n	8000834 <__aeabi_fadd+0x22c>
 8000680:	1a2a      	subs	r2, r5, r0
 8000682:	2a00      	cmp	r2, #0
 8000684:	dc00      	bgt.n	8000688 <__aeabi_fadd+0x80>
 8000686:	e099      	b.n	80007bc <__aeabi_fadd+0x1b4>
 8000688:	2800      	cmp	r0, #0
 800068a:	d062      	beq.n	8000752 <__aeabi_fadd+0x14a>
 800068c:	2dff      	cmp	r5, #255	; 0xff
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x8a>
 8000690:	e08b      	b.n	80007aa <__aeabi_fadd+0x1a2>
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	4661      	mov	r1, ip
 8000696:	04db      	lsls	r3, r3, #19
 8000698:	4319      	orrs	r1, r3
 800069a:	468c      	mov	ip, r1
 800069c:	2a1b      	cmp	r2, #27
 800069e:	dc00      	bgt.n	80006a2 <__aeabi_fadd+0x9a>
 80006a0:	e0d2      	b.n	8000848 <__aeabi_fadd+0x240>
 80006a2:	2301      	movs	r3, #1
 80006a4:	19db      	adds	r3, r3, r7
 80006a6:	015a      	lsls	r2, r3, #5
 80006a8:	d56a      	bpl.n	8000780 <__aeabi_fadd+0x178>
 80006aa:	3501      	adds	r5, #1
 80006ac:	2dff      	cmp	r5, #255	; 0xff
 80006ae:	d05b      	beq.n	8000768 <__aeabi_fadd+0x160>
 80006b0:	2201      	movs	r2, #1
 80006b2:	49a3      	ldr	r1, [pc, #652]	; (8000940 <__aeabi_fadd+0x338>)
 80006b4:	401a      	ands	r2, r3
 80006b6:	085b      	lsrs	r3, r3, #1
 80006b8:	400b      	ands	r3, r1
 80006ba:	4313      	orrs	r3, r2
 80006bc:	e01c      	b.n	80006f8 <__aeabi_fadd+0xf0>
 80006be:	2dff      	cmp	r5, #255	; 0xff
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0xbc>
 80006c2:	e072      	b.n	80007aa <__aeabi_fadd+0x1a2>
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	4662      	mov	r2, ip
 80006c8:	04db      	lsls	r3, r3, #19
 80006ca:	431a      	orrs	r2, r3
 80006cc:	4694      	mov	ip, r2
 80006ce:	281b      	cmp	r0, #27
 80006d0:	dc00      	bgt.n	80006d4 <__aeabi_fadd+0xcc>
 80006d2:	e090      	b.n	80007f6 <__aeabi_fadd+0x1ee>
 80006d4:	2301      	movs	r3, #1
 80006d6:	1afb      	subs	r3, r7, r3
 80006d8:	015a      	lsls	r2, r3, #5
 80006da:	d551      	bpl.n	8000780 <__aeabi_fadd+0x178>
 80006dc:	019b      	lsls	r3, r3, #6
 80006de:	099e      	lsrs	r6, r3, #6
 80006e0:	0030      	movs	r0, r6
 80006e2:	f002 fd71 	bl	80031c8 <__clzsi2>
 80006e6:	0033      	movs	r3, r6
 80006e8:	3805      	subs	r0, #5
 80006ea:	4083      	lsls	r3, r0
 80006ec:	4285      	cmp	r5, r0
 80006ee:	dc00      	bgt.n	80006f2 <__aeabi_fadd+0xea>
 80006f0:	e075      	b.n	80007de <__aeabi_fadd+0x1d6>
 80006f2:	4a94      	ldr	r2, [pc, #592]	; (8000944 <__aeabi_fadd+0x33c>)
 80006f4:	1a2d      	subs	r5, r5, r0
 80006f6:	4013      	ands	r3, r2
 80006f8:	075a      	lsls	r2, r3, #29
 80006fa:	d004      	beq.n	8000706 <__aeabi_fadd+0xfe>
 80006fc:	220f      	movs	r2, #15
 80006fe:	401a      	ands	r2, r3
 8000700:	2a04      	cmp	r2, #4
 8000702:	d000      	beq.n	8000706 <__aeabi_fadd+0xfe>
 8000704:	3304      	adds	r3, #4
 8000706:	015a      	lsls	r2, r3, #5
 8000708:	d53c      	bpl.n	8000784 <__aeabi_fadd+0x17c>
 800070a:	1c68      	adds	r0, r5, #1
 800070c:	2dfe      	cmp	r5, #254	; 0xfe
 800070e:	d02b      	beq.n	8000768 <__aeabi_fadd+0x160>
 8000710:	019b      	lsls	r3, r3, #6
 8000712:	0a5e      	lsrs	r6, r3, #9
 8000714:	b2c0      	uxtb	r0, r0
 8000716:	05c0      	lsls	r0, r0, #23
 8000718:	4330      	orrs	r0, r6
 800071a:	07e4      	lsls	r4, r4, #31
 800071c:	4320      	orrs	r0, r4
 800071e:	bcc0      	pop	{r6, r7}
 8000720:	46b9      	mov	r9, r7
 8000722:	46b0      	mov	r8, r6
 8000724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000726:	20fe      	movs	r0, #254	; 0xfe
 8000728:	1c6a      	adds	r2, r5, #1
 800072a:	4210      	tst	r0, r2
 800072c:	d172      	bne.n	8000814 <__aeabi_fadd+0x20c>
 800072e:	2d00      	cmp	r5, #0
 8000730:	d000      	beq.n	8000734 <__aeabi_fadd+0x12c>
 8000732:	e0ae      	b.n	8000892 <__aeabi_fadd+0x28a>
 8000734:	2f00      	cmp	r7, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x132>
 8000738:	e0ec      	b.n	8000914 <__aeabi_fadd+0x30c>
 800073a:	4663      	mov	r3, ip
 800073c:	2000      	movs	r0, #0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0e9      	beq.n	8000716 <__aeabi_fadd+0x10e>
 8000742:	1afb      	subs	r3, r7, r3
 8000744:	015a      	lsls	r2, r3, #5
 8000746:	d400      	bmi.n	800074a <__aeabi_fadd+0x142>
 8000748:	e0f3      	b.n	8000932 <__aeabi_fadd+0x32a>
 800074a:	4663      	mov	r3, ip
 800074c:	000c      	movs	r4, r1
 800074e:	1bdb      	subs	r3, r3, r7
 8000750:	e7d2      	b.n	80006f8 <__aeabi_fadd+0xf0>
 8000752:	4661      	mov	r1, ip
 8000754:	2900      	cmp	r1, #0
 8000756:	d05b      	beq.n	8000810 <__aeabi_fadd+0x208>
 8000758:	1e51      	subs	r1, r2, #1
 800075a:	2a01      	cmp	r2, #1
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x158>
 800075e:	e0a7      	b.n	80008b0 <__aeabi_fadd+0x2a8>
 8000760:	2aff      	cmp	r2, #255	; 0xff
 8000762:	d022      	beq.n	80007aa <__aeabi_fadd+0x1a2>
 8000764:	000a      	movs	r2, r1
 8000766:	e799      	b.n	800069c <__aeabi_fadd+0x94>
 8000768:	20ff      	movs	r0, #255	; 0xff
 800076a:	2600      	movs	r6, #0
 800076c:	e7d3      	b.n	8000716 <__aeabi_fadd+0x10e>
 800076e:	21fe      	movs	r1, #254	; 0xfe
 8000770:	1c6a      	adds	r2, r5, #1
 8000772:	4211      	tst	r1, r2
 8000774:	d073      	beq.n	800085e <__aeabi_fadd+0x256>
 8000776:	2aff      	cmp	r2, #255	; 0xff
 8000778:	d0f6      	beq.n	8000768 <__aeabi_fadd+0x160>
 800077a:	0015      	movs	r5, r2
 800077c:	4467      	add	r7, ip
 800077e:	087b      	lsrs	r3, r7, #1
 8000780:	075a      	lsls	r2, r3, #29
 8000782:	d1bb      	bne.n	80006fc <__aeabi_fadd+0xf4>
 8000784:	08db      	lsrs	r3, r3, #3
 8000786:	2dff      	cmp	r5, #255	; 0xff
 8000788:	d00f      	beq.n	80007aa <__aeabi_fadd+0x1a2>
 800078a:	025b      	lsls	r3, r3, #9
 800078c:	0a5e      	lsrs	r6, r3, #9
 800078e:	b2e8      	uxtb	r0, r5
 8000790:	e7c1      	b.n	8000716 <__aeabi_fadd+0x10e>
 8000792:	4662      	mov	r2, ip
 8000794:	2a00      	cmp	r2, #0
 8000796:	d008      	beq.n	80007aa <__aeabi_fadd+0x1a2>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	03d2      	lsls	r2, r2, #15
 800079c:	4213      	tst	r3, r2
 800079e:	d004      	beq.n	80007aa <__aeabi_fadd+0x1a2>
 80007a0:	4640      	mov	r0, r8
 80007a2:	4210      	tst	r0, r2
 80007a4:	d101      	bne.n	80007aa <__aeabi_fadd+0x1a2>
 80007a6:	000c      	movs	r4, r1
 80007a8:	4643      	mov	r3, r8
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d0dc      	beq.n	8000768 <__aeabi_fadd+0x160>
 80007ae:	2680      	movs	r6, #128	; 0x80
 80007b0:	03f6      	lsls	r6, r6, #15
 80007b2:	431e      	orrs	r6, r3
 80007b4:	0276      	lsls	r6, r6, #9
 80007b6:	20ff      	movs	r0, #255	; 0xff
 80007b8:	0a76      	lsrs	r6, r6, #9
 80007ba:	e7ac      	b.n	8000716 <__aeabi_fadd+0x10e>
 80007bc:	2a00      	cmp	r2, #0
 80007be:	d0d6      	beq.n	800076e <__aeabi_fadd+0x166>
 80007c0:	1b42      	subs	r2, r0, r5
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d05c      	beq.n	8000880 <__aeabi_fadd+0x278>
 80007c6:	28ff      	cmp	r0, #255	; 0xff
 80007c8:	d0ee      	beq.n	80007a8 <__aeabi_fadd+0x1a0>
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	04db      	lsls	r3, r3, #19
 80007ce:	431f      	orrs	r7, r3
 80007d0:	2a1b      	cmp	r2, #27
 80007d2:	dc00      	bgt.n	80007d6 <__aeabi_fadd+0x1ce>
 80007d4:	e082      	b.n	80008dc <__aeabi_fadd+0x2d4>
 80007d6:	2301      	movs	r3, #1
 80007d8:	464d      	mov	r5, r9
 80007da:	4463      	add	r3, ip
 80007dc:	e763      	b.n	80006a6 <__aeabi_fadd+0x9e>
 80007de:	2220      	movs	r2, #32
 80007e0:	1b40      	subs	r0, r0, r5
 80007e2:	3001      	adds	r0, #1
 80007e4:	1a12      	subs	r2, r2, r0
 80007e6:	0019      	movs	r1, r3
 80007e8:	4093      	lsls	r3, r2
 80007ea:	40c1      	lsrs	r1, r0
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	4193      	sbcs	r3, r2
 80007f0:	2500      	movs	r5, #0
 80007f2:	430b      	orrs	r3, r1
 80007f4:	e780      	b.n	80006f8 <__aeabi_fadd+0xf0>
 80007f6:	2320      	movs	r3, #32
 80007f8:	4661      	mov	r1, ip
 80007fa:	1a1b      	subs	r3, r3, r0
 80007fc:	4099      	lsls	r1, r3
 80007fe:	4662      	mov	r2, ip
 8000800:	000b      	movs	r3, r1
 8000802:	40c2      	lsrs	r2, r0
 8000804:	1e59      	subs	r1, r3, #1
 8000806:	418b      	sbcs	r3, r1
 8000808:	4313      	orrs	r3, r2
 800080a:	e764      	b.n	80006d6 <__aeabi_fadd+0xce>
 800080c:	000c      	movs	r4, r1
 800080e:	4643      	mov	r3, r8
 8000810:	0015      	movs	r5, r2
 8000812:	e7b8      	b.n	8000786 <__aeabi_fadd+0x17e>
 8000814:	4663      	mov	r3, ip
 8000816:	1afe      	subs	r6, r7, r3
 8000818:	0173      	lsls	r3, r6, #5
 800081a:	d445      	bmi.n	80008a8 <__aeabi_fadd+0x2a0>
 800081c:	2e00      	cmp	r6, #0
 800081e:	d000      	beq.n	8000822 <__aeabi_fadd+0x21a>
 8000820:	e75e      	b.n	80006e0 <__aeabi_fadd+0xd8>
 8000822:	2400      	movs	r4, #0
 8000824:	2000      	movs	r0, #0
 8000826:	2600      	movs	r6, #0
 8000828:	e775      	b.n	8000716 <__aeabi_fadd+0x10e>
 800082a:	2bff      	cmp	r3, #255	; 0xff
 800082c:	d0bb      	beq.n	80007a6 <__aeabi_fadd+0x19e>
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	04db      	lsls	r3, r3, #19
 8000832:	431f      	orrs	r7, r3
 8000834:	2a1b      	cmp	r2, #27
 8000836:	dd47      	ble.n	80008c8 <__aeabi_fadd+0x2c0>
 8000838:	2301      	movs	r3, #1
 800083a:	4662      	mov	r2, ip
 800083c:	000c      	movs	r4, r1
 800083e:	464d      	mov	r5, r9
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	e749      	b.n	80006d8 <__aeabi_fadd+0xd0>
 8000844:	0005      	movs	r5, r0
 8000846:	e79e      	b.n	8000786 <__aeabi_fadd+0x17e>
 8000848:	4661      	mov	r1, ip
 800084a:	2320      	movs	r3, #32
 800084c:	40d1      	lsrs	r1, r2
 800084e:	1a9b      	subs	r3, r3, r2
 8000850:	4662      	mov	r2, ip
 8000852:	409a      	lsls	r2, r3
 8000854:	0013      	movs	r3, r2
 8000856:	1e5a      	subs	r2, r3, #1
 8000858:	4193      	sbcs	r3, r2
 800085a:	430b      	orrs	r3, r1
 800085c:	e722      	b.n	80006a4 <__aeabi_fadd+0x9c>
 800085e:	2d00      	cmp	r5, #0
 8000860:	d146      	bne.n	80008f0 <__aeabi_fadd+0x2e8>
 8000862:	2f00      	cmp	r7, #0
 8000864:	d062      	beq.n	800092c <__aeabi_fadd+0x324>
 8000866:	4663      	mov	r3, ip
 8000868:	2000      	movs	r0, #0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x268>
 800086e:	e752      	b.n	8000716 <__aeabi_fadd+0x10e>
 8000870:	003b      	movs	r3, r7
 8000872:	4463      	add	r3, ip
 8000874:	015a      	lsls	r2, r3, #5
 8000876:	d583      	bpl.n	8000780 <__aeabi_fadd+0x178>
 8000878:	4a32      	ldr	r2, [pc, #200]	; (8000944 <__aeabi_fadd+0x33c>)
 800087a:	3501      	adds	r5, #1
 800087c:	4013      	ands	r3, r2
 800087e:	e77f      	b.n	8000780 <__aeabi_fadd+0x178>
 8000880:	2f00      	cmp	r7, #0
 8000882:	d0c4      	beq.n	800080e <__aeabi_fadd+0x206>
 8000884:	1e53      	subs	r3, r2, #1
 8000886:	2a01      	cmp	r2, #1
 8000888:	d012      	beq.n	80008b0 <__aeabi_fadd+0x2a8>
 800088a:	2aff      	cmp	r2, #255	; 0xff
 800088c:	d08c      	beq.n	80007a8 <__aeabi_fadd+0x1a0>
 800088e:	001a      	movs	r2, r3
 8000890:	e79e      	b.n	80007d0 <__aeabi_fadd+0x1c8>
 8000892:	2f00      	cmp	r7, #0
 8000894:	d000      	beq.n	8000898 <__aeabi_fadd+0x290>
 8000896:	e77c      	b.n	8000792 <__aeabi_fadd+0x18a>
 8000898:	4663      	mov	r3, ip
 800089a:	2b00      	cmp	r3, #0
 800089c:	d183      	bne.n	80007a6 <__aeabi_fadd+0x19e>
 800089e:	2680      	movs	r6, #128	; 0x80
 80008a0:	2400      	movs	r4, #0
 80008a2:	20ff      	movs	r0, #255	; 0xff
 80008a4:	03f6      	lsls	r6, r6, #15
 80008a6:	e736      	b.n	8000716 <__aeabi_fadd+0x10e>
 80008a8:	4663      	mov	r3, ip
 80008aa:	000c      	movs	r4, r1
 80008ac:	1bde      	subs	r6, r3, r7
 80008ae:	e717      	b.n	80006e0 <__aeabi_fadd+0xd8>
 80008b0:	003b      	movs	r3, r7
 80008b2:	4463      	add	r3, ip
 80008b4:	2501      	movs	r5, #1
 80008b6:	015a      	lsls	r2, r3, #5
 80008b8:	d400      	bmi.n	80008bc <__aeabi_fadd+0x2b4>
 80008ba:	e761      	b.n	8000780 <__aeabi_fadd+0x178>
 80008bc:	2502      	movs	r5, #2
 80008be:	e6f7      	b.n	80006b0 <__aeabi_fadd+0xa8>
 80008c0:	4663      	mov	r3, ip
 80008c2:	2501      	movs	r5, #1
 80008c4:	1afb      	subs	r3, r7, r3
 80008c6:	e707      	b.n	80006d8 <__aeabi_fadd+0xd0>
 80008c8:	2320      	movs	r3, #32
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	0038      	movs	r0, r7
 80008ce:	409f      	lsls	r7, r3
 80008d0:	003b      	movs	r3, r7
 80008d2:	40d0      	lsrs	r0, r2
 80008d4:	1e5a      	subs	r2, r3, #1
 80008d6:	4193      	sbcs	r3, r2
 80008d8:	4303      	orrs	r3, r0
 80008da:	e7ae      	b.n	800083a <__aeabi_fadd+0x232>
 80008dc:	2320      	movs	r3, #32
 80008de:	1a9b      	subs	r3, r3, r2
 80008e0:	0039      	movs	r1, r7
 80008e2:	409f      	lsls	r7, r3
 80008e4:	003b      	movs	r3, r7
 80008e6:	40d1      	lsrs	r1, r2
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	4193      	sbcs	r3, r2
 80008ec:	430b      	orrs	r3, r1
 80008ee:	e773      	b.n	80007d8 <__aeabi_fadd+0x1d0>
 80008f0:	2f00      	cmp	r7, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x2ee>
 80008f4:	e758      	b.n	80007a8 <__aeabi_fadd+0x1a0>
 80008f6:	4662      	mov	r2, ip
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x2f6>
 80008fc:	e755      	b.n	80007aa <__aeabi_fadd+0x1a2>
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4213      	tst	r3, r2
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x300>
 8000906:	e750      	b.n	80007aa <__aeabi_fadd+0x1a2>
 8000908:	4641      	mov	r1, r8
 800090a:	4211      	tst	r1, r2
 800090c:	d000      	beq.n	8000910 <__aeabi_fadd+0x308>
 800090e:	e74c      	b.n	80007aa <__aeabi_fadd+0x1a2>
 8000910:	4643      	mov	r3, r8
 8000912:	e74a      	b.n	80007aa <__aeabi_fadd+0x1a2>
 8000914:	4663      	mov	r3, ip
 8000916:	2b00      	cmp	r3, #0
 8000918:	d083      	beq.n	8000822 <__aeabi_fadd+0x21a>
 800091a:	000c      	movs	r4, r1
 800091c:	4646      	mov	r6, r8
 800091e:	2000      	movs	r0, #0
 8000920:	e6f9      	b.n	8000716 <__aeabi_fadd+0x10e>
 8000922:	4663      	mov	r3, ip
 8000924:	000c      	movs	r4, r1
 8000926:	1bdb      	subs	r3, r3, r7
 8000928:	3501      	adds	r5, #1
 800092a:	e6d5      	b.n	80006d8 <__aeabi_fadd+0xd0>
 800092c:	4646      	mov	r6, r8
 800092e:	2000      	movs	r0, #0
 8000930:	e6f1      	b.n	8000716 <__aeabi_fadd+0x10e>
 8000932:	2b00      	cmp	r3, #0
 8000934:	d000      	beq.n	8000938 <__aeabi_fadd+0x330>
 8000936:	e723      	b.n	8000780 <__aeabi_fadd+0x178>
 8000938:	2400      	movs	r4, #0
 800093a:	2600      	movs	r6, #0
 800093c:	e6eb      	b.n	8000716 <__aeabi_fadd+0x10e>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	7dffffff 	.word	0x7dffffff
 8000944:	fbffffff 	.word	0xfbffffff

08000948 <__aeabi_fdiv>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	464f      	mov	r7, r9
 800094c:	4646      	mov	r6, r8
 800094e:	46d6      	mov	lr, sl
 8000950:	0245      	lsls	r5, r0, #9
 8000952:	b5c0      	push	{r6, r7, lr}
 8000954:	0047      	lsls	r7, r0, #1
 8000956:	1c0c      	adds	r4, r1, #0
 8000958:	0a6d      	lsrs	r5, r5, #9
 800095a:	0e3f      	lsrs	r7, r7, #24
 800095c:	0fc6      	lsrs	r6, r0, #31
 800095e:	2f00      	cmp	r7, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fdiv+0x1c>
 8000962:	e06f      	b.n	8000a44 <__aeabi_fdiv+0xfc>
 8000964:	2fff      	cmp	r7, #255	; 0xff
 8000966:	d100      	bne.n	800096a <__aeabi_fdiv+0x22>
 8000968:	e074      	b.n	8000a54 <__aeabi_fdiv+0x10c>
 800096a:	2300      	movs	r3, #0
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	4699      	mov	r9, r3
 8000970:	469a      	mov	sl, r3
 8000972:	00ed      	lsls	r5, r5, #3
 8000974:	04d2      	lsls	r2, r2, #19
 8000976:	4315      	orrs	r5, r2
 8000978:	3f7f      	subs	r7, #127	; 0x7f
 800097a:	0263      	lsls	r3, r4, #9
 800097c:	0a5b      	lsrs	r3, r3, #9
 800097e:	4698      	mov	r8, r3
 8000980:	0063      	lsls	r3, r4, #1
 8000982:	0e1b      	lsrs	r3, r3, #24
 8000984:	0fe4      	lsrs	r4, r4, #31
 8000986:	2b00      	cmp	r3, #0
 8000988:	d04d      	beq.n	8000a26 <__aeabi_fdiv+0xde>
 800098a:	2bff      	cmp	r3, #255	; 0xff
 800098c:	d045      	beq.n	8000a1a <__aeabi_fdiv+0xd2>
 800098e:	4642      	mov	r2, r8
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	00d2      	lsls	r2, r2, #3
 8000994:	04c9      	lsls	r1, r1, #19
 8000996:	4311      	orrs	r1, r2
 8000998:	4688      	mov	r8, r1
 800099a:	2200      	movs	r2, #0
 800099c:	3b7f      	subs	r3, #127	; 0x7f
 800099e:	0031      	movs	r1, r6
 80009a0:	1aff      	subs	r7, r7, r3
 80009a2:	464b      	mov	r3, r9
 80009a4:	4061      	eors	r1, r4
 80009a6:	b2c9      	uxtb	r1, r1
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d900      	bls.n	80009ae <__aeabi_fdiv+0x66>
 80009ac:	e0b8      	b.n	8000b20 <__aeabi_fdiv+0x1d8>
 80009ae:	4870      	ldr	r0, [pc, #448]	; (8000b70 <__aeabi_fdiv+0x228>)
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	58c3      	ldr	r3, [r0, r3]
 80009b4:	469f      	mov	pc, r3
 80009b6:	2300      	movs	r3, #0
 80009b8:	4698      	mov	r8, r3
 80009ba:	0026      	movs	r6, r4
 80009bc:	4645      	mov	r5, r8
 80009be:	4692      	mov	sl, r2
 80009c0:	4653      	mov	r3, sl
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fdiv+0x80>
 80009c6:	e08d      	b.n	8000ae4 <__aeabi_fdiv+0x19c>
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d100      	bne.n	80009ce <__aeabi_fdiv+0x86>
 80009cc:	e0a1      	b.n	8000b12 <__aeabi_fdiv+0x1ca>
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d018      	beq.n	8000a04 <__aeabi_fdiv+0xbc>
 80009d2:	003b      	movs	r3, r7
 80009d4:	337f      	adds	r3, #127	; 0x7f
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dd6d      	ble.n	8000ab6 <__aeabi_fdiv+0x16e>
 80009da:	076a      	lsls	r2, r5, #29
 80009dc:	d004      	beq.n	80009e8 <__aeabi_fdiv+0xa0>
 80009de:	220f      	movs	r2, #15
 80009e0:	402a      	ands	r2, r5
 80009e2:	2a04      	cmp	r2, #4
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fdiv+0xa0>
 80009e6:	3504      	adds	r5, #4
 80009e8:	012a      	lsls	r2, r5, #4
 80009ea:	d503      	bpl.n	80009f4 <__aeabi_fdiv+0xac>
 80009ec:	4b61      	ldr	r3, [pc, #388]	; (8000b74 <__aeabi_fdiv+0x22c>)
 80009ee:	401d      	ands	r5, r3
 80009f0:	003b      	movs	r3, r7
 80009f2:	3380      	adds	r3, #128	; 0x80
 80009f4:	2bfe      	cmp	r3, #254	; 0xfe
 80009f6:	dd00      	ble.n	80009fa <__aeabi_fdiv+0xb2>
 80009f8:	e074      	b.n	8000ae4 <__aeabi_fdiv+0x19c>
 80009fa:	01aa      	lsls	r2, r5, #6
 80009fc:	0a52      	lsrs	r2, r2, #9
 80009fe:	b2d8      	uxtb	r0, r3
 8000a00:	e002      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000a02:	000e      	movs	r6, r1
 8000a04:	2000      	movs	r0, #0
 8000a06:	2200      	movs	r2, #0
 8000a08:	05c0      	lsls	r0, r0, #23
 8000a0a:	07f6      	lsls	r6, r6, #31
 8000a0c:	4310      	orrs	r0, r2
 8000a0e:	4330      	orrs	r0, r6
 8000a10:	bce0      	pop	{r5, r6, r7}
 8000a12:	46ba      	mov	sl, r7
 8000a14:	46b1      	mov	r9, r6
 8000a16:	46a8      	mov	r8, r5
 8000a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d13f      	bne.n	8000aa0 <__aeabi_fdiv+0x158>
 8000a20:	2202      	movs	r2, #2
 8000a22:	3fff      	subs	r7, #255	; 0xff
 8000a24:	e003      	b.n	8000a2e <__aeabi_fdiv+0xe6>
 8000a26:	4643      	mov	r3, r8
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12d      	bne.n	8000a88 <__aeabi_fdiv+0x140>
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	0031      	movs	r1, r6
 8000a30:	464b      	mov	r3, r9
 8000a32:	4061      	eors	r1, r4
 8000a34:	b2c9      	uxtb	r1, r1
 8000a36:	4313      	orrs	r3, r2
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d838      	bhi.n	8000aae <__aeabi_fdiv+0x166>
 8000a3c:	484e      	ldr	r0, [pc, #312]	; (8000b78 <__aeabi_fdiv+0x230>)
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	58c3      	ldr	r3, [r0, r3]
 8000a42:	469f      	mov	pc, r3
 8000a44:	2d00      	cmp	r5, #0
 8000a46:	d113      	bne.n	8000a70 <__aeabi_fdiv+0x128>
 8000a48:	2304      	movs	r3, #4
 8000a4a:	4699      	mov	r9, r3
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	2700      	movs	r7, #0
 8000a50:	469a      	mov	sl, r3
 8000a52:	e792      	b.n	800097a <__aeabi_fdiv+0x32>
 8000a54:	2d00      	cmp	r5, #0
 8000a56:	d105      	bne.n	8000a64 <__aeabi_fdiv+0x11c>
 8000a58:	2308      	movs	r3, #8
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b06      	subs	r3, #6
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e78a      	b.n	800097a <__aeabi_fdiv+0x32>
 8000a64:	230c      	movs	r3, #12
 8000a66:	4699      	mov	r9, r3
 8000a68:	3b09      	subs	r3, #9
 8000a6a:	27ff      	movs	r7, #255	; 0xff
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	e784      	b.n	800097a <__aeabi_fdiv+0x32>
 8000a70:	0028      	movs	r0, r5
 8000a72:	f002 fba9 	bl	80031c8 <__clzsi2>
 8000a76:	2776      	movs	r7, #118	; 0x76
 8000a78:	1f43      	subs	r3, r0, #5
 8000a7a:	409d      	lsls	r5, r3
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	427f      	negs	r7, r7
 8000a80:	4699      	mov	r9, r3
 8000a82:	469a      	mov	sl, r3
 8000a84:	1a3f      	subs	r7, r7, r0
 8000a86:	e778      	b.n	800097a <__aeabi_fdiv+0x32>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	f002 fb9d 	bl	80031c8 <__clzsi2>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	1f43      	subs	r3, r0, #5
 8000a92:	409a      	lsls	r2, r3
 8000a94:	2376      	movs	r3, #118	; 0x76
 8000a96:	425b      	negs	r3, r3
 8000a98:	4690      	mov	r8, r2
 8000a9a:	1a1b      	subs	r3, r3, r0
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	e77e      	b.n	800099e <__aeabi_fdiv+0x56>
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	464a      	mov	r2, r9
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	4691      	mov	r9, r2
 8000aa8:	33fc      	adds	r3, #252	; 0xfc
 8000aaa:	2203      	movs	r2, #3
 8000aac:	e777      	b.n	800099e <__aeabi_fdiv+0x56>
 8000aae:	000e      	movs	r6, r1
 8000ab0:	20ff      	movs	r0, #255	; 0xff
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	e7a8      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	2b1b      	cmp	r3, #27
 8000abc:	dca2      	bgt.n	8000a04 <__aeabi_fdiv+0xbc>
 8000abe:	379e      	adds	r7, #158	; 0x9e
 8000ac0:	002a      	movs	r2, r5
 8000ac2:	40bd      	lsls	r5, r7
 8000ac4:	40da      	lsrs	r2, r3
 8000ac6:	1e6b      	subs	r3, r5, #1
 8000ac8:	419d      	sbcs	r5, r3
 8000aca:	4315      	orrs	r5, r2
 8000acc:	076a      	lsls	r2, r5, #29
 8000ace:	d004      	beq.n	8000ada <__aeabi_fdiv+0x192>
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	402a      	ands	r2, r5
 8000ad4:	2a04      	cmp	r2, #4
 8000ad6:	d000      	beq.n	8000ada <__aeabi_fdiv+0x192>
 8000ad8:	3504      	adds	r5, #4
 8000ada:	016a      	lsls	r2, r5, #5
 8000adc:	d544      	bpl.n	8000b68 <__aeabi_fdiv+0x220>
 8000ade:	2001      	movs	r0, #1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	e791      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000ae4:	20ff      	movs	r0, #255	; 0xff
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	e78e      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	2600      	movs	r6, #0
 8000aee:	20ff      	movs	r0, #255	; 0xff
 8000af0:	03d2      	lsls	r2, r2, #15
 8000af2:	e789      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000af4:	2300      	movs	r3, #0
 8000af6:	4698      	mov	r8, r3
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	03d2      	lsls	r2, r2, #15
 8000afc:	4215      	tst	r5, r2
 8000afe:	d008      	beq.n	8000b12 <__aeabi_fdiv+0x1ca>
 8000b00:	4643      	mov	r3, r8
 8000b02:	4213      	tst	r3, r2
 8000b04:	d105      	bne.n	8000b12 <__aeabi_fdiv+0x1ca>
 8000b06:	431a      	orrs	r2, r3
 8000b08:	0252      	lsls	r2, r2, #9
 8000b0a:	0026      	movs	r6, r4
 8000b0c:	20ff      	movs	r0, #255	; 0xff
 8000b0e:	0a52      	lsrs	r2, r2, #9
 8000b10:	e77a      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	03d2      	lsls	r2, r2, #15
 8000b16:	432a      	orrs	r2, r5
 8000b18:	0252      	lsls	r2, r2, #9
 8000b1a:	20ff      	movs	r0, #255	; 0xff
 8000b1c:	0a52      	lsrs	r2, r2, #9
 8000b1e:	e773      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000b20:	4642      	mov	r2, r8
 8000b22:	016b      	lsls	r3, r5, #5
 8000b24:	0155      	lsls	r5, r2, #5
 8000b26:	42ab      	cmp	r3, r5
 8000b28:	d21a      	bcs.n	8000b60 <__aeabi_fdiv+0x218>
 8000b2a:	201b      	movs	r0, #27
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	3f01      	subs	r7, #1
 8000b30:	2601      	movs	r6, #1
 8000b32:	001c      	movs	r4, r3
 8000b34:	0052      	lsls	r2, r2, #1
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	db01      	blt.n	8000b40 <__aeabi_fdiv+0x1f8>
 8000b3c:	429d      	cmp	r5, r3
 8000b3e:	d801      	bhi.n	8000b44 <__aeabi_fdiv+0x1fc>
 8000b40:	1b5b      	subs	r3, r3, r5
 8000b42:	4332      	orrs	r2, r6
 8000b44:	3801      	subs	r0, #1
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d1f3      	bne.n	8000b32 <__aeabi_fdiv+0x1ea>
 8000b4a:	1e58      	subs	r0, r3, #1
 8000b4c:	4183      	sbcs	r3, r0
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	001d      	movs	r5, r3
 8000b52:	003b      	movs	r3, r7
 8000b54:	337f      	adds	r3, #127	; 0x7f
 8000b56:	000e      	movs	r6, r1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dd00      	ble.n	8000b5e <__aeabi_fdiv+0x216>
 8000b5c:	e73d      	b.n	80009da <__aeabi_fdiv+0x92>
 8000b5e:	e7aa      	b.n	8000ab6 <__aeabi_fdiv+0x16e>
 8000b60:	201a      	movs	r0, #26
 8000b62:	2201      	movs	r2, #1
 8000b64:	1b5b      	subs	r3, r3, r5
 8000b66:	e7e3      	b.n	8000b30 <__aeabi_fdiv+0x1e8>
 8000b68:	01aa      	lsls	r2, r5, #6
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	0a52      	lsrs	r2, r2, #9
 8000b6e:	e74b      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000b70:	0800e224 	.word	0x0800e224
 8000b74:	f7ffffff 	.word	0xf7ffffff
 8000b78:	0800e264 	.word	0x0800e264

08000b7c <__eqsf2>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0245      	lsls	r5, r0, #9
 8000b82:	024e      	lsls	r6, r1, #9
 8000b84:	004c      	lsls	r4, r1, #1
 8000b86:	0fc3      	lsrs	r3, r0, #31
 8000b88:	0a6d      	lsrs	r5, r5, #9
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	0e12      	lsrs	r2, r2, #24
 8000b8e:	0a76      	lsrs	r6, r6, #9
 8000b90:	0e24      	lsrs	r4, r4, #24
 8000b92:	0fc9      	lsrs	r1, r1, #31
 8000b94:	2aff      	cmp	r2, #255	; 0xff
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x2a>
 8000b98:	2cff      	cmp	r4, #255	; 0xff
 8000b9a:	d003      	beq.n	8000ba4 <__eqsf2+0x28>
 8000b9c:	42a2      	cmp	r2, r4
 8000b9e:	d101      	bne.n	8000ba4 <__eqsf2+0x28>
 8000ba0:	42b5      	cmp	r5, r6
 8000ba2:	d006      	beq.n	8000bb2 <__eqsf2+0x36>
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d1fc      	bne.n	8000ba4 <__eqsf2+0x28>
 8000baa:	2cff      	cmp	r4, #255	; 0xff
 8000bac:	d1fa      	bne.n	8000ba4 <__eqsf2+0x28>
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d1f8      	bne.n	8000ba4 <__eqsf2+0x28>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d006      	beq.n	8000bc4 <__eqsf2+0x48>
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d1f3      	bne.n	8000ba4 <__eqsf2+0x28>
 8000bbc:	0028      	movs	r0, r5
 8000bbe:	1e43      	subs	r3, r0, #1
 8000bc0:	4198      	sbcs	r0, r3
 8000bc2:	e7ef      	b.n	8000ba4 <__eqsf2+0x28>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	e7ed      	b.n	8000ba4 <__eqsf2+0x28>

08000bc8 <__gesf2>:
 8000bc8:	b570      	push	{r4, r5, r6, lr}
 8000bca:	0042      	lsls	r2, r0, #1
 8000bcc:	0245      	lsls	r5, r0, #9
 8000bce:	024e      	lsls	r6, r1, #9
 8000bd0:	004c      	lsls	r4, r1, #1
 8000bd2:	0fc3      	lsrs	r3, r0, #31
 8000bd4:	0a6d      	lsrs	r5, r5, #9
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	0a76      	lsrs	r6, r6, #9
 8000bda:	0e24      	lsrs	r4, r4, #24
 8000bdc:	0fc8      	lsrs	r0, r1, #31
 8000bde:	2aff      	cmp	r2, #255	; 0xff
 8000be0:	d01b      	beq.n	8000c1a <__gesf2+0x52>
 8000be2:	2cff      	cmp	r4, #255	; 0xff
 8000be4:	d00e      	beq.n	8000c04 <__gesf2+0x3c>
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	d11b      	bne.n	8000c22 <__gesf2+0x5a>
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d101      	bne.n	8000bf2 <__gesf2+0x2a>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d01c      	beq.n	8000c2c <__gesf2+0x64>
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	d00c      	beq.n	8000c10 <__gesf2+0x48>
 8000bf6:	4283      	cmp	r3, r0
 8000bf8:	d01c      	beq.n	8000c34 <__gesf2+0x6c>
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	1e58      	subs	r0, r3, #1
 8000bfe:	4008      	ands	r0, r1
 8000c00:	3801      	subs	r0, #1
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d122      	bne.n	8000c4e <__gesf2+0x86>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	d1f4      	bne.n	8000bf6 <__gesf2+0x2e>
 8000c0c:	2d00      	cmp	r5, #0
 8000c0e:	d1f2      	bne.n	8000bf6 <__gesf2+0x2e>
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d1f6      	bne.n	8000c02 <__gesf2+0x3a>
 8000c14:	2001      	movs	r0, #1
 8000c16:	4240      	negs	r0, r0
 8000c18:	e7f3      	b.n	8000c02 <__gesf2+0x3a>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d117      	bne.n	8000c4e <__gesf2+0x86>
 8000c1e:	2cff      	cmp	r4, #255	; 0xff
 8000c20:	d0f0      	beq.n	8000c04 <__gesf2+0x3c>
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d1e7      	bne.n	8000bf6 <__gesf2+0x2e>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d1e5      	bne.n	8000bf6 <__gesf2+0x2e>
 8000c2a:	e7e6      	b.n	8000bfa <__gesf2+0x32>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d0e7      	beq.n	8000c02 <__gesf2+0x3a>
 8000c32:	e7e2      	b.n	8000bfa <__gesf2+0x32>
 8000c34:	42a2      	cmp	r2, r4
 8000c36:	dc05      	bgt.n	8000c44 <__gesf2+0x7c>
 8000c38:	dbea      	blt.n	8000c10 <__gesf2+0x48>
 8000c3a:	42b5      	cmp	r5, r6
 8000c3c:	d802      	bhi.n	8000c44 <__gesf2+0x7c>
 8000c3e:	d3e7      	bcc.n	8000c10 <__gesf2+0x48>
 8000c40:	2000      	movs	r0, #0
 8000c42:	e7de      	b.n	8000c02 <__gesf2+0x3a>
 8000c44:	4243      	negs	r3, r0
 8000c46:	4158      	adcs	r0, r3
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	3801      	subs	r0, #1
 8000c4c:	e7d9      	b.n	8000c02 <__gesf2+0x3a>
 8000c4e:	2002      	movs	r0, #2
 8000c50:	4240      	negs	r0, r0
 8000c52:	e7d6      	b.n	8000c02 <__gesf2+0x3a>

08000c54 <__lesf2>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	0042      	lsls	r2, r0, #1
 8000c58:	0245      	lsls	r5, r0, #9
 8000c5a:	024e      	lsls	r6, r1, #9
 8000c5c:	004c      	lsls	r4, r1, #1
 8000c5e:	0fc3      	lsrs	r3, r0, #31
 8000c60:	0a6d      	lsrs	r5, r5, #9
 8000c62:	0e12      	lsrs	r2, r2, #24
 8000c64:	0a76      	lsrs	r6, r6, #9
 8000c66:	0e24      	lsrs	r4, r4, #24
 8000c68:	0fc8      	lsrs	r0, r1, #31
 8000c6a:	2aff      	cmp	r2, #255	; 0xff
 8000c6c:	d00b      	beq.n	8000c86 <__lesf2+0x32>
 8000c6e:	2cff      	cmp	r4, #255	; 0xff
 8000c70:	d00d      	beq.n	8000c8e <__lesf2+0x3a>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d11f      	bne.n	8000cb6 <__lesf2+0x62>
 8000c76:	2c00      	cmp	r4, #0
 8000c78:	d116      	bne.n	8000ca8 <__lesf2+0x54>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d114      	bne.n	8000ca8 <__lesf2+0x54>
 8000c7e:	2000      	movs	r0, #0
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d010      	beq.n	8000ca6 <__lesf2+0x52>
 8000c84:	e009      	b.n	8000c9a <__lesf2+0x46>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d10c      	bne.n	8000ca4 <__lesf2+0x50>
 8000c8a:	2cff      	cmp	r4, #255	; 0xff
 8000c8c:	d113      	bne.n	8000cb6 <__lesf2+0x62>
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d108      	bne.n	8000ca4 <__lesf2+0x50>
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	d008      	beq.n	8000ca8 <__lesf2+0x54>
 8000c96:	4283      	cmp	r3, r0
 8000c98:	d012      	beq.n	8000cc0 <__lesf2+0x6c>
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	1e58      	subs	r0, r3, #1
 8000c9e:	4008      	ands	r0, r1
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e000      	b.n	8000ca6 <__lesf2+0x52>
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d1f4      	bne.n	8000c96 <__lesf2+0x42>
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d1fa      	bne.n	8000ca6 <__lesf2+0x52>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	e7f7      	b.n	8000ca6 <__lesf2+0x52>
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	d1ed      	bne.n	8000c96 <__lesf2+0x42>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d1eb      	bne.n	8000c96 <__lesf2+0x42>
 8000cbe:	e7ec      	b.n	8000c9a <__lesf2+0x46>
 8000cc0:	42a2      	cmp	r2, r4
 8000cc2:	dc05      	bgt.n	8000cd0 <__lesf2+0x7c>
 8000cc4:	dbf2      	blt.n	8000cac <__lesf2+0x58>
 8000cc6:	42b5      	cmp	r5, r6
 8000cc8:	d802      	bhi.n	8000cd0 <__lesf2+0x7c>
 8000cca:	d3ef      	bcc.n	8000cac <__lesf2+0x58>
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e7ea      	b.n	8000ca6 <__lesf2+0x52>
 8000cd0:	4243      	negs	r3, r0
 8000cd2:	4158      	adcs	r0, r3
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	e7e5      	b.n	8000ca6 <__lesf2+0x52>
 8000cda:	46c0      	nop			; (mov r8, r8)

08000cdc <__aeabi_fmul>:
 8000cdc:	0243      	lsls	r3, r0, #9
 8000cde:	0a5b      	lsrs	r3, r3, #9
 8000ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce2:	464f      	mov	r7, r9
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	46d6      	mov	lr, sl
 8000cea:	0fc3      	lsrs	r3, r0, #31
 8000cec:	0045      	lsls	r5, r0, #1
 8000cee:	4698      	mov	r8, r3
 8000cf0:	b5c0      	push	{r6, r7, lr}
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	1c0f      	adds	r7, r1, #0
 8000cf6:	0e2d      	lsrs	r5, r5, #24
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fmul+0x20>
 8000cfa:	e0cb      	b.n	8000e94 <__aeabi_fmul+0x1b8>
 8000cfc:	2dff      	cmp	r5, #255	; 0xff
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_fmul+0x26>
 8000d00:	e0cf      	b.n	8000ea2 <__aeabi_fmul+0x1c6>
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	04d2      	lsls	r2, r2, #19
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	4691      	mov	r9, r2
 8000d0e:	2600      	movs	r6, #0
 8000d10:	469a      	mov	sl, r3
 8000d12:	3d7f      	subs	r5, #127	; 0x7f
 8000d14:	027c      	lsls	r4, r7, #9
 8000d16:	007b      	lsls	r3, r7, #1
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0fff      	lsrs	r7, r7, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_fmul+0x48>
 8000d22:	e0a9      	b.n	8000e78 <__aeabi_fmul+0x19c>
 8000d24:	2bff      	cmp	r3, #255	; 0xff
 8000d26:	d011      	beq.n	8000d4c <__aeabi_fmul+0x70>
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	00e4      	lsls	r4, r4, #3
 8000d2c:	04d2      	lsls	r2, r2, #19
 8000d2e:	4314      	orrs	r4, r2
 8000d30:	4642      	mov	r2, r8
 8000d32:	3b7f      	subs	r3, #127	; 0x7f
 8000d34:	195b      	adds	r3, r3, r5
 8000d36:	407a      	eors	r2, r7
 8000d38:	2000      	movs	r0, #0
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	1c5d      	adds	r5, r3, #1
 8000d3e:	2e0a      	cmp	r6, #10
 8000d40:	dd13      	ble.n	8000d6a <__aeabi_fmul+0x8e>
 8000d42:	003a      	movs	r2, r7
 8000d44:	2e0b      	cmp	r6, #11
 8000d46:	d047      	beq.n	8000dd8 <__aeabi_fmul+0xfc>
 8000d48:	4647      	mov	r7, r8
 8000d4a:	e03f      	b.n	8000dcc <__aeabi_fmul+0xf0>
 8000d4c:	002b      	movs	r3, r5
 8000d4e:	33ff      	adds	r3, #255	; 0xff
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d11e      	bne.n	8000d92 <__aeabi_fmul+0xb6>
 8000d54:	2202      	movs	r2, #2
 8000d56:	4316      	orrs	r6, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	3501      	adds	r5, #1
 8000d5c:	407a      	eors	r2, r7
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	35ff      	adds	r5, #255	; 0xff
 8000d62:	2e0a      	cmp	r6, #10
 8000d64:	dd00      	ble.n	8000d68 <__aeabi_fmul+0x8c>
 8000d66:	e0e4      	b.n	8000f32 <__aeabi_fmul+0x256>
 8000d68:	2002      	movs	r0, #2
 8000d6a:	2e02      	cmp	r6, #2
 8000d6c:	dc1c      	bgt.n	8000da8 <__aeabi_fmul+0xcc>
 8000d6e:	3e01      	subs	r6, #1
 8000d70:	2e01      	cmp	r6, #1
 8000d72:	d842      	bhi.n	8000dfa <__aeabi_fmul+0x11e>
 8000d74:	2802      	cmp	r0, #2
 8000d76:	d03d      	beq.n	8000df4 <__aeabi_fmul+0x118>
 8000d78:	2801      	cmp	r0, #1
 8000d7a:	d166      	bne.n	8000e4a <__aeabi_fmul+0x16e>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	05c0      	lsls	r0, r0, #23
 8000d82:	4308      	orrs	r0, r1
 8000d84:	07d2      	lsls	r2, r2, #31
 8000d86:	4310      	orrs	r0, r2
 8000d88:	bce0      	pop	{r5, r6, r7}
 8000d8a:	46ba      	mov	sl, r7
 8000d8c:	46b1      	mov	r9, r6
 8000d8e:	46a8      	mov	r8, r5
 8000d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d92:	2203      	movs	r2, #3
 8000d94:	4316      	orrs	r6, r2
 8000d96:	4642      	mov	r2, r8
 8000d98:	3501      	adds	r5, #1
 8000d9a:	407a      	eors	r2, r7
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	35ff      	adds	r5, #255	; 0xff
 8000da0:	2e0a      	cmp	r6, #10
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_fmul+0xca>
 8000da4:	e0e4      	b.n	8000f70 <__aeabi_fmul+0x294>
 8000da6:	2003      	movs	r0, #3
 8000da8:	2101      	movs	r1, #1
 8000daa:	40b1      	lsls	r1, r6
 8000dac:	26a6      	movs	r6, #166	; 0xa6
 8000dae:	00f6      	lsls	r6, r6, #3
 8000db0:	4231      	tst	r1, r6
 8000db2:	d10a      	bne.n	8000dca <__aeabi_fmul+0xee>
 8000db4:	2690      	movs	r6, #144	; 0x90
 8000db6:	00b6      	lsls	r6, r6, #2
 8000db8:	4231      	tst	r1, r6
 8000dba:	d116      	bne.n	8000dea <__aeabi_fmul+0x10e>
 8000dbc:	3eb9      	subs	r6, #185	; 0xb9
 8000dbe:	3eff      	subs	r6, #255	; 0xff
 8000dc0:	420e      	tst	r6, r1
 8000dc2:	d01a      	beq.n	8000dfa <__aeabi_fmul+0x11e>
 8000dc4:	46a1      	mov	r9, r4
 8000dc6:	4682      	mov	sl, r0
 8000dc8:	e000      	b.n	8000dcc <__aeabi_fmul+0xf0>
 8000dca:	0017      	movs	r7, r2
 8000dcc:	4653      	mov	r3, sl
 8000dce:	003a      	movs	r2, r7
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d00f      	beq.n	8000df4 <__aeabi_fmul+0x118>
 8000dd4:	464c      	mov	r4, r9
 8000dd6:	4650      	mov	r0, sl
 8000dd8:	2803      	cmp	r0, #3
 8000dda:	d1cd      	bne.n	8000d78 <__aeabi_fmul+0x9c>
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	03c9      	lsls	r1, r1, #15
 8000de0:	4321      	orrs	r1, r4
 8000de2:	0249      	lsls	r1, r1, #9
 8000de4:	20ff      	movs	r0, #255	; 0xff
 8000de6:	0a49      	lsrs	r1, r1, #9
 8000de8:	e7ca      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	2200      	movs	r2, #0
 8000dee:	20ff      	movs	r0, #255	; 0xff
 8000df0:	03c9      	lsls	r1, r1, #15
 8000df2:	e7c5      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000df4:	20ff      	movs	r0, #255	; 0xff
 8000df6:	2100      	movs	r1, #0
 8000df8:	e7c2      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000dfa:	0c20      	lsrs	r0, r4, #16
 8000dfc:	4649      	mov	r1, r9
 8000dfe:	0424      	lsls	r4, r4, #16
 8000e00:	0c24      	lsrs	r4, r4, #16
 8000e02:	0027      	movs	r7, r4
 8000e04:	0c0e      	lsrs	r6, r1, #16
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	0c09      	lsrs	r1, r1, #16
 8000e0a:	4374      	muls	r4, r6
 8000e0c:	434f      	muls	r7, r1
 8000e0e:	4346      	muls	r6, r0
 8000e10:	4348      	muls	r0, r1
 8000e12:	0c39      	lsrs	r1, r7, #16
 8000e14:	1900      	adds	r0, r0, r4
 8000e16:	1809      	adds	r1, r1, r0
 8000e18:	428c      	cmp	r4, r1
 8000e1a:	d903      	bls.n	8000e24 <__aeabi_fmul+0x148>
 8000e1c:	2080      	movs	r0, #128	; 0x80
 8000e1e:	0240      	lsls	r0, r0, #9
 8000e20:	4684      	mov	ip, r0
 8000e22:	4466      	add	r6, ip
 8000e24:	043f      	lsls	r7, r7, #16
 8000e26:	0408      	lsls	r0, r1, #16
 8000e28:	0c3f      	lsrs	r7, r7, #16
 8000e2a:	19c0      	adds	r0, r0, r7
 8000e2c:	0184      	lsls	r4, r0, #6
 8000e2e:	1e67      	subs	r7, r4, #1
 8000e30:	41bc      	sbcs	r4, r7
 8000e32:	0c09      	lsrs	r1, r1, #16
 8000e34:	0e80      	lsrs	r0, r0, #26
 8000e36:	1989      	adds	r1, r1, r6
 8000e38:	4304      	orrs	r4, r0
 8000e3a:	0189      	lsls	r1, r1, #6
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	0109      	lsls	r1, r1, #4
 8000e40:	d571      	bpl.n	8000f26 <__aeabi_fmul+0x24a>
 8000e42:	2301      	movs	r3, #1
 8000e44:	0861      	lsrs	r1, r4, #1
 8000e46:	401c      	ands	r4, r3
 8000e48:	430c      	orrs	r4, r1
 8000e4a:	002b      	movs	r3, r5
 8000e4c:	337f      	adds	r3, #127	; 0x7f
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	dd51      	ble.n	8000ef6 <__aeabi_fmul+0x21a>
 8000e52:	0761      	lsls	r1, r4, #29
 8000e54:	d004      	beq.n	8000e60 <__aeabi_fmul+0x184>
 8000e56:	210f      	movs	r1, #15
 8000e58:	4021      	ands	r1, r4
 8000e5a:	2904      	cmp	r1, #4
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fmul+0x184>
 8000e5e:	3404      	adds	r4, #4
 8000e60:	0121      	lsls	r1, r4, #4
 8000e62:	d503      	bpl.n	8000e6c <__aeabi_fmul+0x190>
 8000e64:	4b43      	ldr	r3, [pc, #268]	; (8000f74 <__aeabi_fmul+0x298>)
 8000e66:	401c      	ands	r4, r3
 8000e68:	002b      	movs	r3, r5
 8000e6a:	3380      	adds	r3, #128	; 0x80
 8000e6c:	2bfe      	cmp	r3, #254	; 0xfe
 8000e6e:	dcc1      	bgt.n	8000df4 <__aeabi_fmul+0x118>
 8000e70:	01a1      	lsls	r1, r4, #6
 8000e72:	0a49      	lsrs	r1, r1, #9
 8000e74:	b2d8      	uxtb	r0, r3
 8000e76:	e783      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000e78:	2c00      	cmp	r4, #0
 8000e7a:	d12c      	bne.n	8000ed6 <__aeabi_fmul+0x1fa>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4642      	mov	r2, r8
 8000e80:	431e      	orrs	r6, r3
 8000e82:	002b      	movs	r3, r5
 8000e84:	407a      	eors	r2, r7
 8000e86:	2001      	movs	r0, #1
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	1c5d      	adds	r5, r3, #1
 8000e8c:	2e0a      	cmp	r6, #10
 8000e8e:	dd00      	ble.n	8000e92 <__aeabi_fmul+0x1b6>
 8000e90:	e757      	b.n	8000d42 <__aeabi_fmul+0x66>
 8000e92:	e76a      	b.n	8000d6a <__aeabi_fmul+0x8e>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d110      	bne.n	8000eba <__aeabi_fmul+0x1de>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	2604      	movs	r6, #4
 8000e9c:	2500      	movs	r5, #0
 8000e9e:	469a      	mov	sl, r3
 8000ea0:	e738      	b.n	8000d14 <__aeabi_fmul+0x38>
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d104      	bne.n	8000eb0 <__aeabi_fmul+0x1d4>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	2608      	movs	r6, #8
 8000eaa:	25ff      	movs	r5, #255	; 0xff
 8000eac:	469a      	mov	sl, r3
 8000eae:	e731      	b.n	8000d14 <__aeabi_fmul+0x38>
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	260c      	movs	r6, #12
 8000eb4:	25ff      	movs	r5, #255	; 0xff
 8000eb6:	469a      	mov	sl, r3
 8000eb8:	e72c      	b.n	8000d14 <__aeabi_fmul+0x38>
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f002 f984 	bl	80031c8 <__clzsi2>
 8000ec0:	464a      	mov	r2, r9
 8000ec2:	1f43      	subs	r3, r0, #5
 8000ec4:	2576      	movs	r5, #118	; 0x76
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	426d      	negs	r5, r5
 8000ecc:	4691      	mov	r9, r2
 8000ece:	2600      	movs	r6, #0
 8000ed0:	469a      	mov	sl, r3
 8000ed2:	1a2d      	subs	r5, r5, r0
 8000ed4:	e71e      	b.n	8000d14 <__aeabi_fmul+0x38>
 8000ed6:	0020      	movs	r0, r4
 8000ed8:	f002 f976 	bl	80031c8 <__clzsi2>
 8000edc:	4642      	mov	r2, r8
 8000ede:	1f43      	subs	r3, r0, #5
 8000ee0:	409c      	lsls	r4, r3
 8000ee2:	1a2b      	subs	r3, r5, r0
 8000ee4:	3b76      	subs	r3, #118	; 0x76
 8000ee6:	407a      	eors	r2, r7
 8000ee8:	2000      	movs	r0, #0
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	1c5d      	adds	r5, r3, #1
 8000eee:	2e0a      	cmp	r6, #10
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x218>
 8000ef2:	e726      	b.n	8000d42 <__aeabi_fmul+0x66>
 8000ef4:	e739      	b.n	8000d6a <__aeabi_fmul+0x8e>
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	2b1b      	cmp	r3, #27
 8000efc:	dd00      	ble.n	8000f00 <__aeabi_fmul+0x224>
 8000efe:	e73d      	b.n	8000d7c <__aeabi_fmul+0xa0>
 8000f00:	359e      	adds	r5, #158	; 0x9e
 8000f02:	0021      	movs	r1, r4
 8000f04:	40ac      	lsls	r4, r5
 8000f06:	40d9      	lsrs	r1, r3
 8000f08:	1e63      	subs	r3, r4, #1
 8000f0a:	419c      	sbcs	r4, r3
 8000f0c:	4321      	orrs	r1, r4
 8000f0e:	074b      	lsls	r3, r1, #29
 8000f10:	d004      	beq.n	8000f1c <__aeabi_fmul+0x240>
 8000f12:	230f      	movs	r3, #15
 8000f14:	400b      	ands	r3, r1
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d000      	beq.n	8000f1c <__aeabi_fmul+0x240>
 8000f1a:	3104      	adds	r1, #4
 8000f1c:	014b      	lsls	r3, r1, #5
 8000f1e:	d504      	bpl.n	8000f2a <__aeabi_fmul+0x24e>
 8000f20:	2001      	movs	r0, #1
 8000f22:	2100      	movs	r1, #0
 8000f24:	e72c      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000f26:	001d      	movs	r5, r3
 8000f28:	e78f      	b.n	8000e4a <__aeabi_fmul+0x16e>
 8000f2a:	0189      	lsls	r1, r1, #6
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	e726      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000f32:	2302      	movs	r3, #2
 8000f34:	2e0f      	cmp	r6, #15
 8000f36:	d10c      	bne.n	8000f52 <__aeabi_fmul+0x276>
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	464b      	mov	r3, r9
 8000f3c:	03c9      	lsls	r1, r1, #15
 8000f3e:	420b      	tst	r3, r1
 8000f40:	d00d      	beq.n	8000f5e <__aeabi_fmul+0x282>
 8000f42:	420c      	tst	r4, r1
 8000f44:	d10b      	bne.n	8000f5e <__aeabi_fmul+0x282>
 8000f46:	4321      	orrs	r1, r4
 8000f48:	0249      	lsls	r1, r1, #9
 8000f4a:	003a      	movs	r2, r7
 8000f4c:	20ff      	movs	r0, #255	; 0xff
 8000f4e:	0a49      	lsrs	r1, r1, #9
 8000f50:	e716      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000f52:	2e0b      	cmp	r6, #11
 8000f54:	d000      	beq.n	8000f58 <__aeabi_fmul+0x27c>
 8000f56:	e6f7      	b.n	8000d48 <__aeabi_fmul+0x6c>
 8000f58:	46a1      	mov	r9, r4
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	e736      	b.n	8000dcc <__aeabi_fmul+0xf0>
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	464b      	mov	r3, r9
 8000f62:	03c9      	lsls	r1, r1, #15
 8000f64:	4319      	orrs	r1, r3
 8000f66:	0249      	lsls	r1, r1, #9
 8000f68:	4642      	mov	r2, r8
 8000f6a:	20ff      	movs	r0, #255	; 0xff
 8000f6c:	0a49      	lsrs	r1, r1, #9
 8000f6e:	e707      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000f70:	2303      	movs	r3, #3
 8000f72:	e7df      	b.n	8000f34 <__aeabi_fmul+0x258>
 8000f74:	f7ffffff 	.word	0xf7ffffff

08000f78 <__aeabi_fsub>:
 8000f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7a:	46c6      	mov	lr, r8
 8000f7c:	0243      	lsls	r3, r0, #9
 8000f7e:	0a5b      	lsrs	r3, r3, #9
 8000f80:	0045      	lsls	r5, r0, #1
 8000f82:	00da      	lsls	r2, r3, #3
 8000f84:	0fc4      	lsrs	r4, r0, #31
 8000f86:	0248      	lsls	r0, r1, #9
 8000f88:	004f      	lsls	r7, r1, #1
 8000f8a:	4694      	mov	ip, r2
 8000f8c:	0a42      	lsrs	r2, r0, #9
 8000f8e:	001e      	movs	r6, r3
 8000f90:	4690      	mov	r8, r2
 8000f92:	b500      	push	{lr}
 8000f94:	0e2d      	lsrs	r5, r5, #24
 8000f96:	0e3f      	lsrs	r7, r7, #24
 8000f98:	0fc9      	lsrs	r1, r1, #31
 8000f9a:	0980      	lsrs	r0, r0, #6
 8000f9c:	2fff      	cmp	r7, #255	; 0xff
 8000f9e:	d059      	beq.n	8001054 <__aeabi_fsub+0xdc>
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4051      	eors	r1, r2
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d039      	beq.n	800101c <__aeabi_fsub+0xa4>
 8000fa8:	1bea      	subs	r2, r5, r7
 8000faa:	2a00      	cmp	r2, #0
 8000fac:	dd58      	ble.n	8001060 <__aeabi_fsub+0xe8>
 8000fae:	2f00      	cmp	r7, #0
 8000fb0:	d068      	beq.n	8001084 <__aeabi_fsub+0x10c>
 8000fb2:	2dff      	cmp	r5, #255	; 0xff
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0x40>
 8000fb6:	e0d1      	b.n	800115c <__aeabi_fsub+0x1e4>
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	04db      	lsls	r3, r3, #19
 8000fbc:	4318      	orrs	r0, r3
 8000fbe:	2a1b      	cmp	r2, #27
 8000fc0:	dc00      	bgt.n	8000fc4 <__aeabi_fsub+0x4c>
 8000fc2:	e0e3      	b.n	800118c <__aeabi_fsub+0x214>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4662      	mov	r2, ip
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	015a      	lsls	r2, r3, #5
 8000fcc:	d400      	bmi.n	8000fd0 <__aeabi_fsub+0x58>
 8000fce:	e0ac      	b.n	800112a <__aeabi_fsub+0x1b2>
 8000fd0:	019b      	lsls	r3, r3, #6
 8000fd2:	099e      	lsrs	r6, r3, #6
 8000fd4:	0030      	movs	r0, r6
 8000fd6:	f002 f8f7 	bl	80031c8 <__clzsi2>
 8000fda:	0033      	movs	r3, r6
 8000fdc:	3805      	subs	r0, #5
 8000fde:	4083      	lsls	r3, r0
 8000fe0:	4285      	cmp	r5, r0
 8000fe2:	dc00      	bgt.n	8000fe6 <__aeabi_fsub+0x6e>
 8000fe4:	e0c6      	b.n	8001174 <__aeabi_fsub+0x1fc>
 8000fe6:	4ab2      	ldr	r2, [pc, #712]	; (80012b0 <__aeabi_fsub+0x338>)
 8000fe8:	1a2d      	subs	r5, r5, r0
 8000fea:	4013      	ands	r3, r2
 8000fec:	075a      	lsls	r2, r3, #29
 8000fee:	d004      	beq.n	8000ffa <__aeabi_fsub+0x82>
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	2a04      	cmp	r2, #4
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_fsub+0x82>
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	015a      	lsls	r2, r3, #5
 8000ffc:	d400      	bmi.n	8001000 <__aeabi_fsub+0x88>
 8000ffe:	e097      	b.n	8001130 <__aeabi_fsub+0x1b8>
 8001000:	1c6a      	adds	r2, r5, #1
 8001002:	2dfe      	cmp	r5, #254	; 0xfe
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x90>
 8001006:	e084      	b.n	8001112 <__aeabi_fsub+0x19a>
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	0a5e      	lsrs	r6, r3, #9
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	05d0      	lsls	r0, r2, #23
 8001010:	4330      	orrs	r0, r6
 8001012:	07e4      	lsls	r4, r4, #31
 8001014:	4320      	orrs	r0, r4
 8001016:	bc80      	pop	{r7}
 8001018:	46b8      	mov	r8, r7
 800101a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101c:	1bea      	subs	r2, r5, r7
 800101e:	2a00      	cmp	r2, #0
 8001020:	dd41      	ble.n	80010a6 <__aeabi_fsub+0x12e>
 8001022:	2f00      	cmp	r7, #0
 8001024:	d06b      	beq.n	80010fe <__aeabi_fsub+0x186>
 8001026:	2dff      	cmp	r5, #255	; 0xff
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0xb4>
 800102a:	e097      	b.n	800115c <__aeabi_fsub+0x1e4>
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	04db      	lsls	r3, r3, #19
 8001030:	4318      	orrs	r0, r3
 8001032:	2a1b      	cmp	r2, #27
 8001034:	dc00      	bgt.n	8001038 <__aeabi_fsub+0xc0>
 8001036:	e0cc      	b.n	80011d2 <__aeabi_fsub+0x25a>
 8001038:	2301      	movs	r3, #1
 800103a:	4463      	add	r3, ip
 800103c:	015a      	lsls	r2, r3, #5
 800103e:	d574      	bpl.n	800112a <__aeabi_fsub+0x1b2>
 8001040:	3501      	adds	r5, #1
 8001042:	2dff      	cmp	r5, #255	; 0xff
 8001044:	d065      	beq.n	8001112 <__aeabi_fsub+0x19a>
 8001046:	2201      	movs	r2, #1
 8001048:	499a      	ldr	r1, [pc, #616]	; (80012b4 <__aeabi_fsub+0x33c>)
 800104a:	401a      	ands	r2, r3
 800104c:	085b      	lsrs	r3, r3, #1
 800104e:	400b      	ands	r3, r1
 8001050:	4313      	orrs	r3, r2
 8001052:	e7cb      	b.n	8000fec <__aeabi_fsub+0x74>
 8001054:	2800      	cmp	r0, #0
 8001056:	d01f      	beq.n	8001098 <__aeabi_fsub+0x120>
 8001058:	428c      	cmp	r4, r1
 800105a:	d022      	beq.n	80010a2 <__aeabi_fsub+0x12a>
 800105c:	002a      	movs	r2, r5
 800105e:	3aff      	subs	r2, #255	; 0xff
 8001060:	2a00      	cmp	r2, #0
 8001062:	d035      	beq.n	80010d0 <__aeabi_fsub+0x158>
 8001064:	1b7a      	subs	r2, r7, r5
 8001066:	2d00      	cmp	r5, #0
 8001068:	d000      	beq.n	800106c <__aeabi_fsub+0xf4>
 800106a:	e099      	b.n	80011a0 <__aeabi_fsub+0x228>
 800106c:	4663      	mov	r3, ip
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_fsub+0xfc>
 8001072:	e0dd      	b.n	8001230 <__aeabi_fsub+0x2b8>
 8001074:	1e53      	subs	r3, r2, #1
 8001076:	2a01      	cmp	r2, #1
 8001078:	d100      	bne.n	800107c <__aeabi_fsub+0x104>
 800107a:	e105      	b.n	8001288 <__aeabi_fsub+0x310>
 800107c:	2aff      	cmp	r2, #255	; 0xff
 800107e:	d06b      	beq.n	8001158 <__aeabi_fsub+0x1e0>
 8001080:	001a      	movs	r2, r3
 8001082:	e094      	b.n	80011ae <__aeabi_fsub+0x236>
 8001084:	2800      	cmp	r0, #0
 8001086:	d073      	beq.n	8001170 <__aeabi_fsub+0x1f8>
 8001088:	1e51      	subs	r1, r2, #1
 800108a:	2a01      	cmp	r2, #1
 800108c:	d100      	bne.n	8001090 <__aeabi_fsub+0x118>
 800108e:	e0df      	b.n	8001250 <__aeabi_fsub+0x2d8>
 8001090:	2aff      	cmp	r2, #255	; 0xff
 8001092:	d063      	beq.n	800115c <__aeabi_fsub+0x1e4>
 8001094:	000a      	movs	r2, r1
 8001096:	e792      	b.n	8000fbe <__aeabi_fsub+0x46>
 8001098:	2201      	movs	r2, #1
 800109a:	4051      	eors	r1, r2
 800109c:	42a1      	cmp	r1, r4
 800109e:	d000      	beq.n	80010a2 <__aeabi_fsub+0x12a>
 80010a0:	e782      	b.n	8000fa8 <__aeabi_fsub+0x30>
 80010a2:	002a      	movs	r2, r5
 80010a4:	3aff      	subs	r2, #255	; 0xff
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d036      	beq.n	8001118 <__aeabi_fsub+0x1a0>
 80010aa:	1b7a      	subs	r2, r7, r5
 80010ac:	2d00      	cmp	r5, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_fsub+0x13a>
 80010b0:	e0aa      	b.n	8001208 <__aeabi_fsub+0x290>
 80010b2:	2fff      	cmp	r7, #255	; 0xff
 80010b4:	d100      	bne.n	80010b8 <__aeabi_fsub+0x140>
 80010b6:	e0da      	b.n	800126e <__aeabi_fsub+0x2f6>
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	4661      	mov	r1, ip
 80010bc:	04db      	lsls	r3, r3, #19
 80010be:	4319      	orrs	r1, r3
 80010c0:	468c      	mov	ip, r1
 80010c2:	2a1b      	cmp	r2, #27
 80010c4:	dc00      	bgt.n	80010c8 <__aeabi_fsub+0x150>
 80010c6:	e0d4      	b.n	8001272 <__aeabi_fsub+0x2fa>
 80010c8:	2301      	movs	r3, #1
 80010ca:	003d      	movs	r5, r7
 80010cc:	181b      	adds	r3, r3, r0
 80010ce:	e7b5      	b.n	800103c <__aeabi_fsub+0xc4>
 80010d0:	27fe      	movs	r7, #254	; 0xfe
 80010d2:	1c6a      	adds	r2, r5, #1
 80010d4:	4217      	tst	r7, r2
 80010d6:	d171      	bne.n	80011bc <__aeabi_fsub+0x244>
 80010d8:	2d00      	cmp	r5, #0
 80010da:	d000      	beq.n	80010de <__aeabi_fsub+0x166>
 80010dc:	e09e      	b.n	800121c <__aeabi_fsub+0x2a4>
 80010de:	4663      	mov	r3, ip
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fsub+0x16e>
 80010e4:	e0d5      	b.n	8001292 <__aeabi_fsub+0x31a>
 80010e6:	2200      	movs	r2, #0
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x176>
 80010ec:	e78f      	b.n	800100e <__aeabi_fsub+0x96>
 80010ee:	1a1b      	subs	r3, r3, r0
 80010f0:	015e      	lsls	r6, r3, #5
 80010f2:	d400      	bmi.n	80010f6 <__aeabi_fsub+0x17e>
 80010f4:	e0d6      	b.n	80012a4 <__aeabi_fsub+0x32c>
 80010f6:	4663      	mov	r3, ip
 80010f8:	000c      	movs	r4, r1
 80010fa:	1ac3      	subs	r3, r0, r3
 80010fc:	e776      	b.n	8000fec <__aeabi_fsub+0x74>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d036      	beq.n	8001170 <__aeabi_fsub+0x1f8>
 8001102:	1e51      	subs	r1, r2, #1
 8001104:	2a01      	cmp	r2, #1
 8001106:	d100      	bne.n	800110a <__aeabi_fsub+0x192>
 8001108:	e09a      	b.n	8001240 <__aeabi_fsub+0x2c8>
 800110a:	2aff      	cmp	r2, #255	; 0xff
 800110c:	d026      	beq.n	800115c <__aeabi_fsub+0x1e4>
 800110e:	000a      	movs	r2, r1
 8001110:	e78f      	b.n	8001032 <__aeabi_fsub+0xba>
 8001112:	22ff      	movs	r2, #255	; 0xff
 8001114:	2600      	movs	r6, #0
 8001116:	e77a      	b.n	800100e <__aeabi_fsub+0x96>
 8001118:	27fe      	movs	r7, #254	; 0xfe
 800111a:	1c6a      	adds	r2, r5, #1
 800111c:	4217      	tst	r7, r2
 800111e:	d062      	beq.n	80011e6 <__aeabi_fsub+0x26e>
 8001120:	2aff      	cmp	r2, #255	; 0xff
 8001122:	d0f6      	beq.n	8001112 <__aeabi_fsub+0x19a>
 8001124:	0015      	movs	r5, r2
 8001126:	4460      	add	r0, ip
 8001128:	0843      	lsrs	r3, r0, #1
 800112a:	075a      	lsls	r2, r3, #29
 800112c:	d000      	beq.n	8001130 <__aeabi_fsub+0x1b8>
 800112e:	e75f      	b.n	8000ff0 <__aeabi_fsub+0x78>
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	2dff      	cmp	r5, #255	; 0xff
 8001134:	d012      	beq.n	800115c <__aeabi_fsub+0x1e4>
 8001136:	025b      	lsls	r3, r3, #9
 8001138:	0a5e      	lsrs	r6, r3, #9
 800113a:	b2ea      	uxtb	r2, r5
 800113c:	e767      	b.n	800100e <__aeabi_fsub+0x96>
 800113e:	4662      	mov	r2, ip
 8001140:	2a00      	cmp	r2, #0
 8001142:	d100      	bne.n	8001146 <__aeabi_fsub+0x1ce>
 8001144:	e093      	b.n	800126e <__aeabi_fsub+0x2f6>
 8001146:	2800      	cmp	r0, #0
 8001148:	d008      	beq.n	800115c <__aeabi_fsub+0x1e4>
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	03d2      	lsls	r2, r2, #15
 800114e:	4213      	tst	r3, r2
 8001150:	d004      	beq.n	800115c <__aeabi_fsub+0x1e4>
 8001152:	4640      	mov	r0, r8
 8001154:	4210      	tst	r0, r2
 8001156:	d101      	bne.n	800115c <__aeabi_fsub+0x1e4>
 8001158:	000c      	movs	r4, r1
 800115a:	4643      	mov	r3, r8
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0d8      	beq.n	8001112 <__aeabi_fsub+0x19a>
 8001160:	2680      	movs	r6, #128	; 0x80
 8001162:	03f6      	lsls	r6, r6, #15
 8001164:	431e      	orrs	r6, r3
 8001166:	0276      	lsls	r6, r6, #9
 8001168:	22ff      	movs	r2, #255	; 0xff
 800116a:	0a76      	lsrs	r6, r6, #9
 800116c:	e74f      	b.n	800100e <__aeabi_fsub+0x96>
 800116e:	4643      	mov	r3, r8
 8001170:	0015      	movs	r5, r2
 8001172:	e7de      	b.n	8001132 <__aeabi_fsub+0x1ba>
 8001174:	2220      	movs	r2, #32
 8001176:	1b40      	subs	r0, r0, r5
 8001178:	3001      	adds	r0, #1
 800117a:	1a12      	subs	r2, r2, r0
 800117c:	0019      	movs	r1, r3
 800117e:	4093      	lsls	r3, r2
 8001180:	40c1      	lsrs	r1, r0
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	4193      	sbcs	r3, r2
 8001186:	2500      	movs	r5, #0
 8001188:	430b      	orrs	r3, r1
 800118a:	e72f      	b.n	8000fec <__aeabi_fsub+0x74>
 800118c:	2320      	movs	r3, #32
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	0001      	movs	r1, r0
 8001192:	4098      	lsls	r0, r3
 8001194:	0003      	movs	r3, r0
 8001196:	40d1      	lsrs	r1, r2
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	4193      	sbcs	r3, r2
 800119c:	430b      	orrs	r3, r1
 800119e:	e712      	b.n	8000fc6 <__aeabi_fsub+0x4e>
 80011a0:	2fff      	cmp	r7, #255	; 0xff
 80011a2:	d0d9      	beq.n	8001158 <__aeabi_fsub+0x1e0>
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	4664      	mov	r4, ip
 80011a8:	04db      	lsls	r3, r3, #19
 80011aa:	431c      	orrs	r4, r3
 80011ac:	46a4      	mov	ip, r4
 80011ae:	2a1b      	cmp	r2, #27
 80011b0:	dd52      	ble.n	8001258 <__aeabi_fsub+0x2e0>
 80011b2:	2301      	movs	r3, #1
 80011b4:	000c      	movs	r4, r1
 80011b6:	003d      	movs	r5, r7
 80011b8:	1ac3      	subs	r3, r0, r3
 80011ba:	e706      	b.n	8000fca <__aeabi_fsub+0x52>
 80011bc:	4663      	mov	r3, ip
 80011be:	1a1e      	subs	r6, r3, r0
 80011c0:	0173      	lsls	r3, r6, #5
 80011c2:	d439      	bmi.n	8001238 <__aeabi_fsub+0x2c0>
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d000      	beq.n	80011ca <__aeabi_fsub+0x252>
 80011c8:	e704      	b.n	8000fd4 <__aeabi_fsub+0x5c>
 80011ca:	2400      	movs	r4, #0
 80011cc:	2200      	movs	r2, #0
 80011ce:	2600      	movs	r6, #0
 80011d0:	e71d      	b.n	800100e <__aeabi_fsub+0x96>
 80011d2:	2320      	movs	r3, #32
 80011d4:	1a9b      	subs	r3, r3, r2
 80011d6:	0001      	movs	r1, r0
 80011d8:	4098      	lsls	r0, r3
 80011da:	0003      	movs	r3, r0
 80011dc:	40d1      	lsrs	r1, r2
 80011de:	1e5a      	subs	r2, r3, #1
 80011e0:	4193      	sbcs	r3, r2
 80011e2:	430b      	orrs	r3, r1
 80011e4:	e729      	b.n	800103a <__aeabi_fsub+0xc2>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d1a9      	bne.n	800113e <__aeabi_fsub+0x1c6>
 80011ea:	4663      	mov	r3, ip
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d056      	beq.n	800129e <__aeabi_fsub+0x326>
 80011f0:	2200      	movs	r2, #0
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_fsub+0x280>
 80011f6:	e70a      	b.n	800100e <__aeabi_fsub+0x96>
 80011f8:	0003      	movs	r3, r0
 80011fa:	4463      	add	r3, ip
 80011fc:	015a      	lsls	r2, r3, #5
 80011fe:	d594      	bpl.n	800112a <__aeabi_fsub+0x1b2>
 8001200:	4a2b      	ldr	r2, [pc, #172]	; (80012b0 <__aeabi_fsub+0x338>)
 8001202:	3501      	adds	r5, #1
 8001204:	4013      	ands	r3, r2
 8001206:	e790      	b.n	800112a <__aeabi_fsub+0x1b2>
 8001208:	4663      	mov	r3, ip
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0af      	beq.n	800116e <__aeabi_fsub+0x1f6>
 800120e:	1e53      	subs	r3, r2, #1
 8001210:	2a01      	cmp	r2, #1
 8001212:	d015      	beq.n	8001240 <__aeabi_fsub+0x2c8>
 8001214:	2aff      	cmp	r2, #255	; 0xff
 8001216:	d02a      	beq.n	800126e <__aeabi_fsub+0x2f6>
 8001218:	001a      	movs	r2, r3
 800121a:	e752      	b.n	80010c2 <__aeabi_fsub+0x14a>
 800121c:	4662      	mov	r2, ip
 800121e:	2a00      	cmp	r2, #0
 8001220:	d191      	bne.n	8001146 <__aeabi_fsub+0x1ce>
 8001222:	2800      	cmp	r0, #0
 8001224:	d198      	bne.n	8001158 <__aeabi_fsub+0x1e0>
 8001226:	2680      	movs	r6, #128	; 0x80
 8001228:	2400      	movs	r4, #0
 800122a:	22ff      	movs	r2, #255	; 0xff
 800122c:	03f6      	lsls	r6, r6, #15
 800122e:	e6ee      	b.n	800100e <__aeabi_fsub+0x96>
 8001230:	000c      	movs	r4, r1
 8001232:	4643      	mov	r3, r8
 8001234:	0015      	movs	r5, r2
 8001236:	e77c      	b.n	8001132 <__aeabi_fsub+0x1ba>
 8001238:	4663      	mov	r3, ip
 800123a:	000c      	movs	r4, r1
 800123c:	1ac6      	subs	r6, r0, r3
 800123e:	e6c9      	b.n	8000fd4 <__aeabi_fsub+0x5c>
 8001240:	0003      	movs	r3, r0
 8001242:	4463      	add	r3, ip
 8001244:	2501      	movs	r5, #1
 8001246:	015a      	lsls	r2, r3, #5
 8001248:	d400      	bmi.n	800124c <__aeabi_fsub+0x2d4>
 800124a:	e76e      	b.n	800112a <__aeabi_fsub+0x1b2>
 800124c:	2502      	movs	r5, #2
 800124e:	e6fa      	b.n	8001046 <__aeabi_fsub+0xce>
 8001250:	4663      	mov	r3, ip
 8001252:	2501      	movs	r5, #1
 8001254:	1a1b      	subs	r3, r3, r0
 8001256:	e6b8      	b.n	8000fca <__aeabi_fsub+0x52>
 8001258:	4664      	mov	r4, ip
 800125a:	2320      	movs	r3, #32
 800125c:	40d4      	lsrs	r4, r2
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	4662      	mov	r2, ip
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	1e5a      	subs	r2, r3, #1
 8001268:	4193      	sbcs	r3, r2
 800126a:	4323      	orrs	r3, r4
 800126c:	e7a2      	b.n	80011b4 <__aeabi_fsub+0x23c>
 800126e:	4643      	mov	r3, r8
 8001270:	e774      	b.n	800115c <__aeabi_fsub+0x1e4>
 8001272:	4661      	mov	r1, ip
 8001274:	2320      	movs	r3, #32
 8001276:	40d1      	lsrs	r1, r2
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	4662      	mov	r2, ip
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	4193      	sbcs	r3, r2
 8001284:	430b      	orrs	r3, r1
 8001286:	e720      	b.n	80010ca <__aeabi_fsub+0x152>
 8001288:	4663      	mov	r3, ip
 800128a:	000c      	movs	r4, r1
 800128c:	2501      	movs	r5, #1
 800128e:	1ac3      	subs	r3, r0, r3
 8001290:	e69b      	b.n	8000fca <__aeabi_fsub+0x52>
 8001292:	2800      	cmp	r0, #0
 8001294:	d099      	beq.n	80011ca <__aeabi_fsub+0x252>
 8001296:	000c      	movs	r4, r1
 8001298:	4646      	mov	r6, r8
 800129a:	2200      	movs	r2, #0
 800129c:	e6b7      	b.n	800100e <__aeabi_fsub+0x96>
 800129e:	4646      	mov	r6, r8
 80012a0:	2200      	movs	r2, #0
 80012a2:	e6b4      	b.n	800100e <__aeabi_fsub+0x96>
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d000      	beq.n	80012aa <__aeabi_fsub+0x332>
 80012a8:	e73f      	b.n	800112a <__aeabi_fsub+0x1b2>
 80012aa:	2400      	movs	r4, #0
 80012ac:	2600      	movs	r6, #0
 80012ae:	e6ae      	b.n	800100e <__aeabi_fsub+0x96>
 80012b0:	fbffffff 	.word	0xfbffffff
 80012b4:	7dffffff 	.word	0x7dffffff

080012b8 <__aeabi_f2iz>:
 80012b8:	0241      	lsls	r1, r0, #9
 80012ba:	0042      	lsls	r2, r0, #1
 80012bc:	0fc3      	lsrs	r3, r0, #31
 80012be:	0a49      	lsrs	r1, r1, #9
 80012c0:	2000      	movs	r0, #0
 80012c2:	0e12      	lsrs	r2, r2, #24
 80012c4:	2a7e      	cmp	r2, #126	; 0x7e
 80012c6:	dd03      	ble.n	80012d0 <__aeabi_f2iz+0x18>
 80012c8:	2a9d      	cmp	r2, #157	; 0x9d
 80012ca:	dd02      	ble.n	80012d2 <__aeabi_f2iz+0x1a>
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <__aeabi_f2iz+0x3c>)
 80012ce:	1898      	adds	r0, r3, r2
 80012d0:	4770      	bx	lr
 80012d2:	2080      	movs	r0, #128	; 0x80
 80012d4:	0400      	lsls	r0, r0, #16
 80012d6:	4301      	orrs	r1, r0
 80012d8:	2a95      	cmp	r2, #149	; 0x95
 80012da:	dc07      	bgt.n	80012ec <__aeabi_f2iz+0x34>
 80012dc:	2096      	movs	r0, #150	; 0x96
 80012de:	1a82      	subs	r2, r0, r2
 80012e0:	40d1      	lsrs	r1, r2
 80012e2:	4248      	negs	r0, r1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f3      	bne.n	80012d0 <__aeabi_f2iz+0x18>
 80012e8:	0008      	movs	r0, r1
 80012ea:	e7f1      	b.n	80012d0 <__aeabi_f2iz+0x18>
 80012ec:	3a96      	subs	r2, #150	; 0x96
 80012ee:	4091      	lsls	r1, r2
 80012f0:	e7f7      	b.n	80012e2 <__aeabi_f2iz+0x2a>
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	7fffffff 	.word	0x7fffffff

080012f8 <__aeabi_i2f>:
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d013      	beq.n	8001326 <__aeabi_i2f+0x2e>
 80012fe:	17c3      	asrs	r3, r0, #31
 8001300:	18c5      	adds	r5, r0, r3
 8001302:	405d      	eors	r5, r3
 8001304:	0fc4      	lsrs	r4, r0, #31
 8001306:	0028      	movs	r0, r5
 8001308:	f001 ff5e 	bl	80031c8 <__clzsi2>
 800130c:	239e      	movs	r3, #158	; 0x9e
 800130e:	0001      	movs	r1, r0
 8001310:	1a1b      	subs	r3, r3, r0
 8001312:	2b96      	cmp	r3, #150	; 0x96
 8001314:	dc0f      	bgt.n	8001336 <__aeabi_i2f+0x3e>
 8001316:	2808      	cmp	r0, #8
 8001318:	d031      	beq.n	800137e <__aeabi_i2f+0x86>
 800131a:	3908      	subs	r1, #8
 800131c:	408d      	lsls	r5, r1
 800131e:	026d      	lsls	r5, r5, #9
 8001320:	0a6d      	lsrs	r5, r5, #9
 8001322:	b2d8      	uxtb	r0, r3
 8001324:	e002      	b.n	800132c <__aeabi_i2f+0x34>
 8001326:	2400      	movs	r4, #0
 8001328:	2000      	movs	r0, #0
 800132a:	2500      	movs	r5, #0
 800132c:	05c0      	lsls	r0, r0, #23
 800132e:	4328      	orrs	r0, r5
 8001330:	07e4      	lsls	r4, r4, #31
 8001332:	4320      	orrs	r0, r4
 8001334:	bd70      	pop	{r4, r5, r6, pc}
 8001336:	2b99      	cmp	r3, #153	; 0x99
 8001338:	dd0c      	ble.n	8001354 <__aeabi_i2f+0x5c>
 800133a:	2205      	movs	r2, #5
 800133c:	1a12      	subs	r2, r2, r0
 800133e:	0028      	movs	r0, r5
 8001340:	40d0      	lsrs	r0, r2
 8001342:	0002      	movs	r2, r0
 8001344:	0008      	movs	r0, r1
 8001346:	301b      	adds	r0, #27
 8001348:	4085      	lsls	r5, r0
 800134a:	0028      	movs	r0, r5
 800134c:	1e45      	subs	r5, r0, #1
 800134e:	41a8      	sbcs	r0, r5
 8001350:	4302      	orrs	r2, r0
 8001352:	0015      	movs	r5, r2
 8001354:	2905      	cmp	r1, #5
 8001356:	dc16      	bgt.n	8001386 <__aeabi_i2f+0x8e>
 8001358:	002a      	movs	r2, r5
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <__aeabi_i2f+0xa0>)
 800135c:	4002      	ands	r2, r0
 800135e:	076e      	lsls	r6, r5, #29
 8001360:	d009      	beq.n	8001376 <__aeabi_i2f+0x7e>
 8001362:	260f      	movs	r6, #15
 8001364:	4035      	ands	r5, r6
 8001366:	2d04      	cmp	r5, #4
 8001368:	d005      	beq.n	8001376 <__aeabi_i2f+0x7e>
 800136a:	3204      	adds	r2, #4
 800136c:	0155      	lsls	r5, r2, #5
 800136e:	d502      	bpl.n	8001376 <__aeabi_i2f+0x7e>
 8001370:	239f      	movs	r3, #159	; 0x9f
 8001372:	4002      	ands	r2, r0
 8001374:	1a5b      	subs	r3, r3, r1
 8001376:	0192      	lsls	r2, r2, #6
 8001378:	0a55      	lsrs	r5, r2, #9
 800137a:	b2d8      	uxtb	r0, r3
 800137c:	e7d6      	b.n	800132c <__aeabi_i2f+0x34>
 800137e:	026d      	lsls	r5, r5, #9
 8001380:	2096      	movs	r0, #150	; 0x96
 8001382:	0a6d      	lsrs	r5, r5, #9
 8001384:	e7d2      	b.n	800132c <__aeabi_i2f+0x34>
 8001386:	1f4a      	subs	r2, r1, #5
 8001388:	4095      	lsls	r5, r2
 800138a:	002a      	movs	r2, r5
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <__aeabi_i2f+0xa0>)
 800138e:	4002      	ands	r2, r0
 8001390:	076e      	lsls	r6, r5, #29
 8001392:	d0f0      	beq.n	8001376 <__aeabi_i2f+0x7e>
 8001394:	e7e5      	b.n	8001362 <__aeabi_i2f+0x6a>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	fbffffff 	.word	0xfbffffff

0800139c <__aeabi_dadd>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	464f      	mov	r7, r9
 80013a0:	4646      	mov	r6, r8
 80013a2:	46d6      	mov	lr, sl
 80013a4:	0004      	movs	r4, r0
 80013a6:	b5c0      	push	{r6, r7, lr}
 80013a8:	001f      	movs	r7, r3
 80013aa:	030b      	lsls	r3, r1, #12
 80013ac:	0010      	movs	r0, r2
 80013ae:	004e      	lsls	r6, r1, #1
 80013b0:	0a5b      	lsrs	r3, r3, #9
 80013b2:	0fcd      	lsrs	r5, r1, #31
 80013b4:	0f61      	lsrs	r1, r4, #29
 80013b6:	007a      	lsls	r2, r7, #1
 80013b8:	4319      	orrs	r1, r3
 80013ba:	00e3      	lsls	r3, r4, #3
 80013bc:	033c      	lsls	r4, r7, #12
 80013be:	0fff      	lsrs	r7, r7, #31
 80013c0:	46bc      	mov	ip, r7
 80013c2:	0a64      	lsrs	r4, r4, #9
 80013c4:	0f47      	lsrs	r7, r0, #29
 80013c6:	4327      	orrs	r7, r4
 80013c8:	0d76      	lsrs	r6, r6, #21
 80013ca:	0d52      	lsrs	r2, r2, #21
 80013cc:	00c0      	lsls	r0, r0, #3
 80013ce:	46b9      	mov	r9, r7
 80013d0:	4680      	mov	r8, r0
 80013d2:	1ab7      	subs	r7, r6, r2
 80013d4:	4565      	cmp	r5, ip
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x3e>
 80013d8:	e09b      	b.n	8001512 <__aeabi_dadd+0x176>
 80013da:	2f00      	cmp	r7, #0
 80013dc:	dc00      	bgt.n	80013e0 <__aeabi_dadd+0x44>
 80013de:	e084      	b.n	80014ea <__aeabi_dadd+0x14e>
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x4a>
 80013e4:	e0be      	b.n	8001564 <__aeabi_dadd+0x1c8>
 80013e6:	4ac8      	ldr	r2, [pc, #800]	; (8001708 <__aeabi_dadd+0x36c>)
 80013e8:	4296      	cmp	r6, r2
 80013ea:	d100      	bne.n	80013ee <__aeabi_dadd+0x52>
 80013ec:	e124      	b.n	8001638 <__aeabi_dadd+0x29c>
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	464c      	mov	r4, r9
 80013f2:	0412      	lsls	r2, r2, #16
 80013f4:	4314      	orrs	r4, r2
 80013f6:	46a1      	mov	r9, r4
 80013f8:	2f38      	cmp	r7, #56	; 0x38
 80013fa:	dd00      	ble.n	80013fe <__aeabi_dadd+0x62>
 80013fc:	e167      	b.n	80016ce <__aeabi_dadd+0x332>
 80013fe:	2f1f      	cmp	r7, #31
 8001400:	dd00      	ble.n	8001404 <__aeabi_dadd+0x68>
 8001402:	e1d6      	b.n	80017b2 <__aeabi_dadd+0x416>
 8001404:	2220      	movs	r2, #32
 8001406:	464c      	mov	r4, r9
 8001408:	1bd2      	subs	r2, r2, r7
 800140a:	4094      	lsls	r4, r2
 800140c:	46a2      	mov	sl, r4
 800140e:	4644      	mov	r4, r8
 8001410:	40fc      	lsrs	r4, r7
 8001412:	0020      	movs	r0, r4
 8001414:	4654      	mov	r4, sl
 8001416:	4304      	orrs	r4, r0
 8001418:	4640      	mov	r0, r8
 800141a:	4090      	lsls	r0, r2
 800141c:	1e42      	subs	r2, r0, #1
 800141e:	4190      	sbcs	r0, r2
 8001420:	464a      	mov	r2, r9
 8001422:	40fa      	lsrs	r2, r7
 8001424:	4304      	orrs	r4, r0
 8001426:	1a89      	subs	r1, r1, r2
 8001428:	1b1c      	subs	r4, r3, r4
 800142a:	42a3      	cmp	r3, r4
 800142c:	4192      	sbcs	r2, r2
 800142e:	4252      	negs	r2, r2
 8001430:	1a8b      	subs	r3, r1, r2
 8001432:	469a      	mov	sl, r3
 8001434:	4653      	mov	r3, sl
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	d400      	bmi.n	800143c <__aeabi_dadd+0xa0>
 800143a:	e0d4      	b.n	80015e6 <__aeabi_dadd+0x24a>
 800143c:	4653      	mov	r3, sl
 800143e:	025a      	lsls	r2, r3, #9
 8001440:	0a53      	lsrs	r3, r2, #9
 8001442:	469a      	mov	sl, r3
 8001444:	4653      	mov	r3, sl
 8001446:	2b00      	cmp	r3, #0
 8001448:	d100      	bne.n	800144c <__aeabi_dadd+0xb0>
 800144a:	e104      	b.n	8001656 <__aeabi_dadd+0x2ba>
 800144c:	4650      	mov	r0, sl
 800144e:	f001 febb 	bl	80031c8 <__clzsi2>
 8001452:	0003      	movs	r3, r0
 8001454:	3b08      	subs	r3, #8
 8001456:	2220      	movs	r2, #32
 8001458:	0020      	movs	r0, r4
 800145a:	1ad2      	subs	r2, r2, r3
 800145c:	4651      	mov	r1, sl
 800145e:	40d0      	lsrs	r0, r2
 8001460:	4099      	lsls	r1, r3
 8001462:	0002      	movs	r2, r0
 8001464:	409c      	lsls	r4, r3
 8001466:	430a      	orrs	r2, r1
 8001468:	42b3      	cmp	r3, r6
 800146a:	da00      	bge.n	800146e <__aeabi_dadd+0xd2>
 800146c:	e102      	b.n	8001674 <__aeabi_dadd+0x2d8>
 800146e:	1b9b      	subs	r3, r3, r6
 8001470:	1c59      	adds	r1, r3, #1
 8001472:	291f      	cmp	r1, #31
 8001474:	dd00      	ble.n	8001478 <__aeabi_dadd+0xdc>
 8001476:	e0a7      	b.n	80015c8 <__aeabi_dadd+0x22c>
 8001478:	2320      	movs	r3, #32
 800147a:	0010      	movs	r0, r2
 800147c:	0026      	movs	r6, r4
 800147e:	1a5b      	subs	r3, r3, r1
 8001480:	409c      	lsls	r4, r3
 8001482:	4098      	lsls	r0, r3
 8001484:	40ce      	lsrs	r6, r1
 8001486:	40ca      	lsrs	r2, r1
 8001488:	1e63      	subs	r3, r4, #1
 800148a:	419c      	sbcs	r4, r3
 800148c:	4330      	orrs	r0, r6
 800148e:	4692      	mov	sl, r2
 8001490:	2600      	movs	r6, #0
 8001492:	4304      	orrs	r4, r0
 8001494:	0763      	lsls	r3, r4, #29
 8001496:	d009      	beq.n	80014ac <__aeabi_dadd+0x110>
 8001498:	230f      	movs	r3, #15
 800149a:	4023      	ands	r3, r4
 800149c:	2b04      	cmp	r3, #4
 800149e:	d005      	beq.n	80014ac <__aeabi_dadd+0x110>
 80014a0:	1d23      	adds	r3, r4, #4
 80014a2:	42a3      	cmp	r3, r4
 80014a4:	41a4      	sbcs	r4, r4
 80014a6:	4264      	negs	r4, r4
 80014a8:	44a2      	add	sl, r4
 80014aa:	001c      	movs	r4, r3
 80014ac:	4653      	mov	r3, sl
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	d400      	bmi.n	80014b4 <__aeabi_dadd+0x118>
 80014b2:	e09b      	b.n	80015ec <__aeabi_dadd+0x250>
 80014b4:	4b94      	ldr	r3, [pc, #592]	; (8001708 <__aeabi_dadd+0x36c>)
 80014b6:	3601      	adds	r6, #1
 80014b8:	429e      	cmp	r6, r3
 80014ba:	d100      	bne.n	80014be <__aeabi_dadd+0x122>
 80014bc:	e0b8      	b.n	8001630 <__aeabi_dadd+0x294>
 80014be:	4653      	mov	r3, sl
 80014c0:	4992      	ldr	r1, [pc, #584]	; (800170c <__aeabi_dadd+0x370>)
 80014c2:	08e4      	lsrs	r4, r4, #3
 80014c4:	400b      	ands	r3, r1
 80014c6:	0019      	movs	r1, r3
 80014c8:	075b      	lsls	r3, r3, #29
 80014ca:	4323      	orrs	r3, r4
 80014cc:	0572      	lsls	r2, r6, #21
 80014ce:	024c      	lsls	r4, r1, #9
 80014d0:	0b24      	lsrs	r4, r4, #12
 80014d2:	0d52      	lsrs	r2, r2, #21
 80014d4:	0512      	lsls	r2, r2, #20
 80014d6:	07ed      	lsls	r5, r5, #31
 80014d8:	4322      	orrs	r2, r4
 80014da:	432a      	orrs	r2, r5
 80014dc:	0018      	movs	r0, r3
 80014de:	0011      	movs	r1, r2
 80014e0:	bce0      	pop	{r5, r6, r7}
 80014e2:	46ba      	mov	sl, r7
 80014e4:	46b1      	mov	r9, r6
 80014e6:	46a8      	mov	r8, r5
 80014e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ea:	2f00      	cmp	r7, #0
 80014ec:	d048      	beq.n	8001580 <__aeabi_dadd+0x1e4>
 80014ee:	1b97      	subs	r7, r2, r6
 80014f0:	2e00      	cmp	r6, #0
 80014f2:	d000      	beq.n	80014f6 <__aeabi_dadd+0x15a>
 80014f4:	e10e      	b.n	8001714 <__aeabi_dadd+0x378>
 80014f6:	000c      	movs	r4, r1
 80014f8:	431c      	orrs	r4, r3
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x162>
 80014fc:	e1b7      	b.n	800186e <__aeabi_dadd+0x4d2>
 80014fe:	1e7c      	subs	r4, r7, #1
 8001500:	2f01      	cmp	r7, #1
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x16a>
 8001504:	e226      	b.n	8001954 <__aeabi_dadd+0x5b8>
 8001506:	4d80      	ldr	r5, [pc, #512]	; (8001708 <__aeabi_dadd+0x36c>)
 8001508:	42af      	cmp	r7, r5
 800150a:	d100      	bne.n	800150e <__aeabi_dadd+0x172>
 800150c:	e1d5      	b.n	80018ba <__aeabi_dadd+0x51e>
 800150e:	0027      	movs	r7, r4
 8001510:	e107      	b.n	8001722 <__aeabi_dadd+0x386>
 8001512:	2f00      	cmp	r7, #0
 8001514:	dc00      	bgt.n	8001518 <__aeabi_dadd+0x17c>
 8001516:	e0b2      	b.n	800167e <__aeabi_dadd+0x2e2>
 8001518:	2a00      	cmp	r2, #0
 800151a:	d047      	beq.n	80015ac <__aeabi_dadd+0x210>
 800151c:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <__aeabi_dadd+0x36c>)
 800151e:	4296      	cmp	r6, r2
 8001520:	d100      	bne.n	8001524 <__aeabi_dadd+0x188>
 8001522:	e089      	b.n	8001638 <__aeabi_dadd+0x29c>
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	464c      	mov	r4, r9
 8001528:	0412      	lsls	r2, r2, #16
 800152a:	4314      	orrs	r4, r2
 800152c:	46a1      	mov	r9, r4
 800152e:	2f38      	cmp	r7, #56	; 0x38
 8001530:	dc6b      	bgt.n	800160a <__aeabi_dadd+0x26e>
 8001532:	2f1f      	cmp	r7, #31
 8001534:	dc00      	bgt.n	8001538 <__aeabi_dadd+0x19c>
 8001536:	e16e      	b.n	8001816 <__aeabi_dadd+0x47a>
 8001538:	003a      	movs	r2, r7
 800153a:	4648      	mov	r0, r9
 800153c:	3a20      	subs	r2, #32
 800153e:	40d0      	lsrs	r0, r2
 8001540:	4684      	mov	ip, r0
 8001542:	2f20      	cmp	r7, #32
 8001544:	d007      	beq.n	8001556 <__aeabi_dadd+0x1ba>
 8001546:	2240      	movs	r2, #64	; 0x40
 8001548:	4648      	mov	r0, r9
 800154a:	1bd2      	subs	r2, r2, r7
 800154c:	4090      	lsls	r0, r2
 800154e:	0002      	movs	r2, r0
 8001550:	4640      	mov	r0, r8
 8001552:	4310      	orrs	r0, r2
 8001554:	4680      	mov	r8, r0
 8001556:	4640      	mov	r0, r8
 8001558:	1e42      	subs	r2, r0, #1
 800155a:	4190      	sbcs	r0, r2
 800155c:	4662      	mov	r2, ip
 800155e:	0004      	movs	r4, r0
 8001560:	4314      	orrs	r4, r2
 8001562:	e057      	b.n	8001614 <__aeabi_dadd+0x278>
 8001564:	464a      	mov	r2, r9
 8001566:	4302      	orrs	r2, r0
 8001568:	d100      	bne.n	800156c <__aeabi_dadd+0x1d0>
 800156a:	e103      	b.n	8001774 <__aeabi_dadd+0x3d8>
 800156c:	1e7a      	subs	r2, r7, #1
 800156e:	2f01      	cmp	r7, #1
 8001570:	d100      	bne.n	8001574 <__aeabi_dadd+0x1d8>
 8001572:	e193      	b.n	800189c <__aeabi_dadd+0x500>
 8001574:	4c64      	ldr	r4, [pc, #400]	; (8001708 <__aeabi_dadd+0x36c>)
 8001576:	42a7      	cmp	r7, r4
 8001578:	d100      	bne.n	800157c <__aeabi_dadd+0x1e0>
 800157a:	e18a      	b.n	8001892 <__aeabi_dadd+0x4f6>
 800157c:	0017      	movs	r7, r2
 800157e:	e73b      	b.n	80013f8 <__aeabi_dadd+0x5c>
 8001580:	4c63      	ldr	r4, [pc, #396]	; (8001710 <__aeabi_dadd+0x374>)
 8001582:	1c72      	adds	r2, r6, #1
 8001584:	4222      	tst	r2, r4
 8001586:	d000      	beq.n	800158a <__aeabi_dadd+0x1ee>
 8001588:	e0e0      	b.n	800174c <__aeabi_dadd+0x3b0>
 800158a:	000a      	movs	r2, r1
 800158c:	431a      	orrs	r2, r3
 800158e:	2e00      	cmp	r6, #0
 8001590:	d000      	beq.n	8001594 <__aeabi_dadd+0x1f8>
 8001592:	e174      	b.n	800187e <__aeabi_dadd+0x4e2>
 8001594:	2a00      	cmp	r2, #0
 8001596:	d100      	bne.n	800159a <__aeabi_dadd+0x1fe>
 8001598:	e1d0      	b.n	800193c <__aeabi_dadd+0x5a0>
 800159a:	464a      	mov	r2, r9
 800159c:	4302      	orrs	r2, r0
 800159e:	d000      	beq.n	80015a2 <__aeabi_dadd+0x206>
 80015a0:	e1e3      	b.n	800196a <__aeabi_dadd+0x5ce>
 80015a2:	074a      	lsls	r2, r1, #29
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	08c9      	lsrs	r1, r1, #3
 80015aa:	e029      	b.n	8001600 <__aeabi_dadd+0x264>
 80015ac:	464a      	mov	r2, r9
 80015ae:	4302      	orrs	r2, r0
 80015b0:	d100      	bne.n	80015b4 <__aeabi_dadd+0x218>
 80015b2:	e17d      	b.n	80018b0 <__aeabi_dadd+0x514>
 80015b4:	1e7a      	subs	r2, r7, #1
 80015b6:	2f01      	cmp	r7, #1
 80015b8:	d100      	bne.n	80015bc <__aeabi_dadd+0x220>
 80015ba:	e0e0      	b.n	800177e <__aeabi_dadd+0x3e2>
 80015bc:	4c52      	ldr	r4, [pc, #328]	; (8001708 <__aeabi_dadd+0x36c>)
 80015be:	42a7      	cmp	r7, r4
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x228>
 80015c2:	e166      	b.n	8001892 <__aeabi_dadd+0x4f6>
 80015c4:	0017      	movs	r7, r2
 80015c6:	e7b2      	b.n	800152e <__aeabi_dadd+0x192>
 80015c8:	0010      	movs	r0, r2
 80015ca:	3b1f      	subs	r3, #31
 80015cc:	40d8      	lsrs	r0, r3
 80015ce:	2920      	cmp	r1, #32
 80015d0:	d003      	beq.n	80015da <__aeabi_dadd+0x23e>
 80015d2:	2340      	movs	r3, #64	; 0x40
 80015d4:	1a5b      	subs	r3, r3, r1
 80015d6:	409a      	lsls	r2, r3
 80015d8:	4314      	orrs	r4, r2
 80015da:	1e63      	subs	r3, r4, #1
 80015dc:	419c      	sbcs	r4, r3
 80015de:	2300      	movs	r3, #0
 80015e0:	2600      	movs	r6, #0
 80015e2:	469a      	mov	sl, r3
 80015e4:	4304      	orrs	r4, r0
 80015e6:	0763      	lsls	r3, r4, #29
 80015e8:	d000      	beq.n	80015ec <__aeabi_dadd+0x250>
 80015ea:	e755      	b.n	8001498 <__aeabi_dadd+0xfc>
 80015ec:	4652      	mov	r2, sl
 80015ee:	08e3      	lsrs	r3, r4, #3
 80015f0:	0752      	lsls	r2, r2, #29
 80015f2:	4313      	orrs	r3, r2
 80015f4:	4652      	mov	r2, sl
 80015f6:	0037      	movs	r7, r6
 80015f8:	08d1      	lsrs	r1, r2, #3
 80015fa:	4a43      	ldr	r2, [pc, #268]	; (8001708 <__aeabi_dadd+0x36c>)
 80015fc:	4297      	cmp	r7, r2
 80015fe:	d01f      	beq.n	8001640 <__aeabi_dadd+0x2a4>
 8001600:	0309      	lsls	r1, r1, #12
 8001602:	057a      	lsls	r2, r7, #21
 8001604:	0b0c      	lsrs	r4, r1, #12
 8001606:	0d52      	lsrs	r2, r2, #21
 8001608:	e764      	b.n	80014d4 <__aeabi_dadd+0x138>
 800160a:	4642      	mov	r2, r8
 800160c:	464c      	mov	r4, r9
 800160e:	4314      	orrs	r4, r2
 8001610:	1e62      	subs	r2, r4, #1
 8001612:	4194      	sbcs	r4, r2
 8001614:	18e4      	adds	r4, r4, r3
 8001616:	429c      	cmp	r4, r3
 8001618:	4192      	sbcs	r2, r2
 800161a:	4252      	negs	r2, r2
 800161c:	4692      	mov	sl, r2
 800161e:	448a      	add	sl, r1
 8001620:	4653      	mov	r3, sl
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	d5df      	bpl.n	80015e6 <__aeabi_dadd+0x24a>
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <__aeabi_dadd+0x36c>)
 8001628:	3601      	adds	r6, #1
 800162a:	429e      	cmp	r6, r3
 800162c:	d000      	beq.n	8001630 <__aeabi_dadd+0x294>
 800162e:	e0b3      	b.n	8001798 <__aeabi_dadd+0x3fc>
 8001630:	0032      	movs	r2, r6
 8001632:	2400      	movs	r4, #0
 8001634:	2300      	movs	r3, #0
 8001636:	e74d      	b.n	80014d4 <__aeabi_dadd+0x138>
 8001638:	074a      	lsls	r2, r1, #29
 800163a:	08db      	lsrs	r3, r3, #3
 800163c:	4313      	orrs	r3, r2
 800163e:	08c9      	lsrs	r1, r1, #3
 8001640:	001a      	movs	r2, r3
 8001642:	430a      	orrs	r2, r1
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x2ac>
 8001646:	e200      	b.n	8001a4a <__aeabi_dadd+0x6ae>
 8001648:	2480      	movs	r4, #128	; 0x80
 800164a:	0324      	lsls	r4, r4, #12
 800164c:	430c      	orrs	r4, r1
 800164e:	0324      	lsls	r4, r4, #12
 8001650:	4a2d      	ldr	r2, [pc, #180]	; (8001708 <__aeabi_dadd+0x36c>)
 8001652:	0b24      	lsrs	r4, r4, #12
 8001654:	e73e      	b.n	80014d4 <__aeabi_dadd+0x138>
 8001656:	0020      	movs	r0, r4
 8001658:	f001 fdb6 	bl	80031c8 <__clzsi2>
 800165c:	0003      	movs	r3, r0
 800165e:	3318      	adds	r3, #24
 8001660:	2b1f      	cmp	r3, #31
 8001662:	dc00      	bgt.n	8001666 <__aeabi_dadd+0x2ca>
 8001664:	e6f7      	b.n	8001456 <__aeabi_dadd+0xba>
 8001666:	0022      	movs	r2, r4
 8001668:	3808      	subs	r0, #8
 800166a:	4082      	lsls	r2, r0
 800166c:	2400      	movs	r4, #0
 800166e:	42b3      	cmp	r3, r6
 8001670:	db00      	blt.n	8001674 <__aeabi_dadd+0x2d8>
 8001672:	e6fc      	b.n	800146e <__aeabi_dadd+0xd2>
 8001674:	1af6      	subs	r6, r6, r3
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <__aeabi_dadd+0x370>)
 8001678:	401a      	ands	r2, r3
 800167a:	4692      	mov	sl, r2
 800167c:	e70a      	b.n	8001494 <__aeabi_dadd+0xf8>
 800167e:	2f00      	cmp	r7, #0
 8001680:	d02b      	beq.n	80016da <__aeabi_dadd+0x33e>
 8001682:	1b97      	subs	r7, r2, r6
 8001684:	2e00      	cmp	r6, #0
 8001686:	d100      	bne.n	800168a <__aeabi_dadd+0x2ee>
 8001688:	e0b8      	b.n	80017fc <__aeabi_dadd+0x460>
 800168a:	4c1f      	ldr	r4, [pc, #124]	; (8001708 <__aeabi_dadd+0x36c>)
 800168c:	42a2      	cmp	r2, r4
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x2f6>
 8001690:	e11c      	b.n	80018cc <__aeabi_dadd+0x530>
 8001692:	2480      	movs	r4, #128	; 0x80
 8001694:	0424      	lsls	r4, r4, #16
 8001696:	4321      	orrs	r1, r4
 8001698:	2f38      	cmp	r7, #56	; 0x38
 800169a:	dd00      	ble.n	800169e <__aeabi_dadd+0x302>
 800169c:	e11e      	b.n	80018dc <__aeabi_dadd+0x540>
 800169e:	2f1f      	cmp	r7, #31
 80016a0:	dd00      	ble.n	80016a4 <__aeabi_dadd+0x308>
 80016a2:	e19e      	b.n	80019e2 <__aeabi_dadd+0x646>
 80016a4:	2620      	movs	r6, #32
 80016a6:	000c      	movs	r4, r1
 80016a8:	1bf6      	subs	r6, r6, r7
 80016aa:	0018      	movs	r0, r3
 80016ac:	40b3      	lsls	r3, r6
 80016ae:	40b4      	lsls	r4, r6
 80016b0:	40f8      	lsrs	r0, r7
 80016b2:	1e5e      	subs	r6, r3, #1
 80016b4:	41b3      	sbcs	r3, r6
 80016b6:	40f9      	lsrs	r1, r7
 80016b8:	4304      	orrs	r4, r0
 80016ba:	431c      	orrs	r4, r3
 80016bc:	4489      	add	r9, r1
 80016be:	4444      	add	r4, r8
 80016c0:	4544      	cmp	r4, r8
 80016c2:	419b      	sbcs	r3, r3
 80016c4:	425b      	negs	r3, r3
 80016c6:	444b      	add	r3, r9
 80016c8:	469a      	mov	sl, r3
 80016ca:	0016      	movs	r6, r2
 80016cc:	e7a8      	b.n	8001620 <__aeabi_dadd+0x284>
 80016ce:	4642      	mov	r2, r8
 80016d0:	464c      	mov	r4, r9
 80016d2:	4314      	orrs	r4, r2
 80016d4:	1e62      	subs	r2, r4, #1
 80016d6:	4194      	sbcs	r4, r2
 80016d8:	e6a6      	b.n	8001428 <__aeabi_dadd+0x8c>
 80016da:	4c0d      	ldr	r4, [pc, #52]	; (8001710 <__aeabi_dadd+0x374>)
 80016dc:	1c72      	adds	r2, r6, #1
 80016de:	4222      	tst	r2, r4
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dadd+0x348>
 80016e2:	e0a8      	b.n	8001836 <__aeabi_dadd+0x49a>
 80016e4:	000a      	movs	r2, r1
 80016e6:	431a      	orrs	r2, r3
 80016e8:	2e00      	cmp	r6, #0
 80016ea:	d000      	beq.n	80016ee <__aeabi_dadd+0x352>
 80016ec:	e10a      	b.n	8001904 <__aeabi_dadd+0x568>
 80016ee:	2a00      	cmp	r2, #0
 80016f0:	d100      	bne.n	80016f4 <__aeabi_dadd+0x358>
 80016f2:	e15e      	b.n	80019b2 <__aeabi_dadd+0x616>
 80016f4:	464a      	mov	r2, r9
 80016f6:	4302      	orrs	r2, r0
 80016f8:	d000      	beq.n	80016fc <__aeabi_dadd+0x360>
 80016fa:	e161      	b.n	80019c0 <__aeabi_dadd+0x624>
 80016fc:	074a      	lsls	r2, r1, #29
 80016fe:	08db      	lsrs	r3, r3, #3
 8001700:	4313      	orrs	r3, r2
 8001702:	08c9      	lsrs	r1, r1, #3
 8001704:	e77c      	b.n	8001600 <__aeabi_dadd+0x264>
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	000007ff 	.word	0x000007ff
 800170c:	ff7fffff 	.word	0xff7fffff
 8001710:	000007fe 	.word	0x000007fe
 8001714:	4ccf      	ldr	r4, [pc, #828]	; (8001a54 <__aeabi_dadd+0x6b8>)
 8001716:	42a2      	cmp	r2, r4
 8001718:	d100      	bne.n	800171c <__aeabi_dadd+0x380>
 800171a:	e0ce      	b.n	80018ba <__aeabi_dadd+0x51e>
 800171c:	2480      	movs	r4, #128	; 0x80
 800171e:	0424      	lsls	r4, r4, #16
 8001720:	4321      	orrs	r1, r4
 8001722:	2f38      	cmp	r7, #56	; 0x38
 8001724:	dc5b      	bgt.n	80017de <__aeabi_dadd+0x442>
 8001726:	2f1f      	cmp	r7, #31
 8001728:	dd00      	ble.n	800172c <__aeabi_dadd+0x390>
 800172a:	e0dc      	b.n	80018e6 <__aeabi_dadd+0x54a>
 800172c:	2520      	movs	r5, #32
 800172e:	000c      	movs	r4, r1
 8001730:	1bed      	subs	r5, r5, r7
 8001732:	001e      	movs	r6, r3
 8001734:	40ab      	lsls	r3, r5
 8001736:	40ac      	lsls	r4, r5
 8001738:	40fe      	lsrs	r6, r7
 800173a:	1e5d      	subs	r5, r3, #1
 800173c:	41ab      	sbcs	r3, r5
 800173e:	4334      	orrs	r4, r6
 8001740:	40f9      	lsrs	r1, r7
 8001742:	431c      	orrs	r4, r3
 8001744:	464b      	mov	r3, r9
 8001746:	1a5b      	subs	r3, r3, r1
 8001748:	4699      	mov	r9, r3
 800174a:	e04c      	b.n	80017e6 <__aeabi_dadd+0x44a>
 800174c:	464a      	mov	r2, r9
 800174e:	1a1c      	subs	r4, r3, r0
 8001750:	1a88      	subs	r0, r1, r2
 8001752:	42a3      	cmp	r3, r4
 8001754:	4192      	sbcs	r2, r2
 8001756:	4252      	negs	r2, r2
 8001758:	4692      	mov	sl, r2
 800175a:	0002      	movs	r2, r0
 800175c:	4650      	mov	r0, sl
 800175e:	1a12      	subs	r2, r2, r0
 8001760:	4692      	mov	sl, r2
 8001762:	0212      	lsls	r2, r2, #8
 8001764:	d478      	bmi.n	8001858 <__aeabi_dadd+0x4bc>
 8001766:	4653      	mov	r3, sl
 8001768:	4323      	orrs	r3, r4
 800176a:	d000      	beq.n	800176e <__aeabi_dadd+0x3d2>
 800176c:	e66a      	b.n	8001444 <__aeabi_dadd+0xa8>
 800176e:	2100      	movs	r1, #0
 8001770:	2500      	movs	r5, #0
 8001772:	e745      	b.n	8001600 <__aeabi_dadd+0x264>
 8001774:	074a      	lsls	r2, r1, #29
 8001776:	08db      	lsrs	r3, r3, #3
 8001778:	4313      	orrs	r3, r2
 800177a:	08c9      	lsrs	r1, r1, #3
 800177c:	e73d      	b.n	80015fa <__aeabi_dadd+0x25e>
 800177e:	181c      	adds	r4, r3, r0
 8001780:	429c      	cmp	r4, r3
 8001782:	419b      	sbcs	r3, r3
 8001784:	4449      	add	r1, r9
 8001786:	468a      	mov	sl, r1
 8001788:	425b      	negs	r3, r3
 800178a:	449a      	add	sl, r3
 800178c:	4653      	mov	r3, sl
 800178e:	2601      	movs	r6, #1
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	d400      	bmi.n	8001796 <__aeabi_dadd+0x3fa>
 8001794:	e727      	b.n	80015e6 <__aeabi_dadd+0x24a>
 8001796:	2602      	movs	r6, #2
 8001798:	4652      	mov	r2, sl
 800179a:	4baf      	ldr	r3, [pc, #700]	; (8001a58 <__aeabi_dadd+0x6bc>)
 800179c:	2101      	movs	r1, #1
 800179e:	401a      	ands	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	4021      	ands	r1, r4
 80017a4:	0862      	lsrs	r2, r4, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	07dc      	lsls	r4, r3, #31
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	469a      	mov	sl, r3
 80017ae:	4314      	orrs	r4, r2
 80017b0:	e670      	b.n	8001494 <__aeabi_dadd+0xf8>
 80017b2:	003a      	movs	r2, r7
 80017b4:	464c      	mov	r4, r9
 80017b6:	3a20      	subs	r2, #32
 80017b8:	40d4      	lsrs	r4, r2
 80017ba:	46a4      	mov	ip, r4
 80017bc:	2f20      	cmp	r7, #32
 80017be:	d007      	beq.n	80017d0 <__aeabi_dadd+0x434>
 80017c0:	2240      	movs	r2, #64	; 0x40
 80017c2:	4648      	mov	r0, r9
 80017c4:	1bd2      	subs	r2, r2, r7
 80017c6:	4090      	lsls	r0, r2
 80017c8:	0002      	movs	r2, r0
 80017ca:	4640      	mov	r0, r8
 80017cc:	4310      	orrs	r0, r2
 80017ce:	4680      	mov	r8, r0
 80017d0:	4640      	mov	r0, r8
 80017d2:	1e42      	subs	r2, r0, #1
 80017d4:	4190      	sbcs	r0, r2
 80017d6:	4662      	mov	r2, ip
 80017d8:	0004      	movs	r4, r0
 80017da:	4314      	orrs	r4, r2
 80017dc:	e624      	b.n	8001428 <__aeabi_dadd+0x8c>
 80017de:	4319      	orrs	r1, r3
 80017e0:	000c      	movs	r4, r1
 80017e2:	1e63      	subs	r3, r4, #1
 80017e4:	419c      	sbcs	r4, r3
 80017e6:	4643      	mov	r3, r8
 80017e8:	1b1c      	subs	r4, r3, r4
 80017ea:	45a0      	cmp	r8, r4
 80017ec:	419b      	sbcs	r3, r3
 80017ee:	4649      	mov	r1, r9
 80017f0:	425b      	negs	r3, r3
 80017f2:	1acb      	subs	r3, r1, r3
 80017f4:	469a      	mov	sl, r3
 80017f6:	4665      	mov	r5, ip
 80017f8:	0016      	movs	r6, r2
 80017fa:	e61b      	b.n	8001434 <__aeabi_dadd+0x98>
 80017fc:	000c      	movs	r4, r1
 80017fe:	431c      	orrs	r4, r3
 8001800:	d100      	bne.n	8001804 <__aeabi_dadd+0x468>
 8001802:	e0c7      	b.n	8001994 <__aeabi_dadd+0x5f8>
 8001804:	1e7c      	subs	r4, r7, #1
 8001806:	2f01      	cmp	r7, #1
 8001808:	d100      	bne.n	800180c <__aeabi_dadd+0x470>
 800180a:	e0f9      	b.n	8001a00 <__aeabi_dadd+0x664>
 800180c:	4e91      	ldr	r6, [pc, #580]	; (8001a54 <__aeabi_dadd+0x6b8>)
 800180e:	42b7      	cmp	r7, r6
 8001810:	d05c      	beq.n	80018cc <__aeabi_dadd+0x530>
 8001812:	0027      	movs	r7, r4
 8001814:	e740      	b.n	8001698 <__aeabi_dadd+0x2fc>
 8001816:	2220      	movs	r2, #32
 8001818:	464c      	mov	r4, r9
 800181a:	4640      	mov	r0, r8
 800181c:	1bd2      	subs	r2, r2, r7
 800181e:	4094      	lsls	r4, r2
 8001820:	40f8      	lsrs	r0, r7
 8001822:	4304      	orrs	r4, r0
 8001824:	4640      	mov	r0, r8
 8001826:	4090      	lsls	r0, r2
 8001828:	1e42      	subs	r2, r0, #1
 800182a:	4190      	sbcs	r0, r2
 800182c:	464a      	mov	r2, r9
 800182e:	40fa      	lsrs	r2, r7
 8001830:	4304      	orrs	r4, r0
 8001832:	1889      	adds	r1, r1, r2
 8001834:	e6ee      	b.n	8001614 <__aeabi_dadd+0x278>
 8001836:	4c87      	ldr	r4, [pc, #540]	; (8001a54 <__aeabi_dadd+0x6b8>)
 8001838:	42a2      	cmp	r2, r4
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x4a2>
 800183c:	e6f9      	b.n	8001632 <__aeabi_dadd+0x296>
 800183e:	1818      	adds	r0, r3, r0
 8001840:	4298      	cmp	r0, r3
 8001842:	419b      	sbcs	r3, r3
 8001844:	4449      	add	r1, r9
 8001846:	425b      	negs	r3, r3
 8001848:	18cb      	adds	r3, r1, r3
 800184a:	07dc      	lsls	r4, r3, #31
 800184c:	0840      	lsrs	r0, r0, #1
 800184e:	085b      	lsrs	r3, r3, #1
 8001850:	469a      	mov	sl, r3
 8001852:	0016      	movs	r6, r2
 8001854:	4304      	orrs	r4, r0
 8001856:	e6c6      	b.n	80015e6 <__aeabi_dadd+0x24a>
 8001858:	4642      	mov	r2, r8
 800185a:	1ad4      	subs	r4, r2, r3
 800185c:	45a0      	cmp	r8, r4
 800185e:	4180      	sbcs	r0, r0
 8001860:	464b      	mov	r3, r9
 8001862:	4240      	negs	r0, r0
 8001864:	1a59      	subs	r1, r3, r1
 8001866:	1a0b      	subs	r3, r1, r0
 8001868:	469a      	mov	sl, r3
 800186a:	4665      	mov	r5, ip
 800186c:	e5ea      	b.n	8001444 <__aeabi_dadd+0xa8>
 800186e:	464b      	mov	r3, r9
 8001870:	464a      	mov	r2, r9
 8001872:	08c0      	lsrs	r0, r0, #3
 8001874:	075b      	lsls	r3, r3, #29
 8001876:	4665      	mov	r5, ip
 8001878:	4303      	orrs	r3, r0
 800187a:	08d1      	lsrs	r1, r2, #3
 800187c:	e6bd      	b.n	80015fa <__aeabi_dadd+0x25e>
 800187e:	2a00      	cmp	r2, #0
 8001880:	d000      	beq.n	8001884 <__aeabi_dadd+0x4e8>
 8001882:	e08e      	b.n	80019a2 <__aeabi_dadd+0x606>
 8001884:	464b      	mov	r3, r9
 8001886:	4303      	orrs	r3, r0
 8001888:	d117      	bne.n	80018ba <__aeabi_dadd+0x51e>
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	2500      	movs	r5, #0
 800188e:	0309      	lsls	r1, r1, #12
 8001890:	e6da      	b.n	8001648 <__aeabi_dadd+0x2ac>
 8001892:	074a      	lsls	r2, r1, #29
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	4313      	orrs	r3, r2
 8001898:	08c9      	lsrs	r1, r1, #3
 800189a:	e6d1      	b.n	8001640 <__aeabi_dadd+0x2a4>
 800189c:	1a1c      	subs	r4, r3, r0
 800189e:	464a      	mov	r2, r9
 80018a0:	42a3      	cmp	r3, r4
 80018a2:	419b      	sbcs	r3, r3
 80018a4:	1a89      	subs	r1, r1, r2
 80018a6:	425b      	negs	r3, r3
 80018a8:	1acb      	subs	r3, r1, r3
 80018aa:	469a      	mov	sl, r3
 80018ac:	2601      	movs	r6, #1
 80018ae:	e5c1      	b.n	8001434 <__aeabi_dadd+0x98>
 80018b0:	074a      	lsls	r2, r1, #29
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	08c9      	lsrs	r1, r1, #3
 80018b8:	e69f      	b.n	80015fa <__aeabi_dadd+0x25e>
 80018ba:	4643      	mov	r3, r8
 80018bc:	08d8      	lsrs	r0, r3, #3
 80018be:	464b      	mov	r3, r9
 80018c0:	464a      	mov	r2, r9
 80018c2:	075b      	lsls	r3, r3, #29
 80018c4:	4665      	mov	r5, ip
 80018c6:	4303      	orrs	r3, r0
 80018c8:	08d1      	lsrs	r1, r2, #3
 80018ca:	e6b9      	b.n	8001640 <__aeabi_dadd+0x2a4>
 80018cc:	4643      	mov	r3, r8
 80018ce:	08d8      	lsrs	r0, r3, #3
 80018d0:	464b      	mov	r3, r9
 80018d2:	464a      	mov	r2, r9
 80018d4:	075b      	lsls	r3, r3, #29
 80018d6:	4303      	orrs	r3, r0
 80018d8:	08d1      	lsrs	r1, r2, #3
 80018da:	e6b1      	b.n	8001640 <__aeabi_dadd+0x2a4>
 80018dc:	4319      	orrs	r1, r3
 80018de:	000c      	movs	r4, r1
 80018e0:	1e63      	subs	r3, r4, #1
 80018e2:	419c      	sbcs	r4, r3
 80018e4:	e6eb      	b.n	80016be <__aeabi_dadd+0x322>
 80018e6:	003c      	movs	r4, r7
 80018e8:	000d      	movs	r5, r1
 80018ea:	3c20      	subs	r4, #32
 80018ec:	40e5      	lsrs	r5, r4
 80018ee:	2f20      	cmp	r7, #32
 80018f0:	d003      	beq.n	80018fa <__aeabi_dadd+0x55e>
 80018f2:	2440      	movs	r4, #64	; 0x40
 80018f4:	1be4      	subs	r4, r4, r7
 80018f6:	40a1      	lsls	r1, r4
 80018f8:	430b      	orrs	r3, r1
 80018fa:	001c      	movs	r4, r3
 80018fc:	1e63      	subs	r3, r4, #1
 80018fe:	419c      	sbcs	r4, r3
 8001900:	432c      	orrs	r4, r5
 8001902:	e770      	b.n	80017e6 <__aeabi_dadd+0x44a>
 8001904:	2a00      	cmp	r2, #0
 8001906:	d0e1      	beq.n	80018cc <__aeabi_dadd+0x530>
 8001908:	464a      	mov	r2, r9
 800190a:	4302      	orrs	r2, r0
 800190c:	d0c1      	beq.n	8001892 <__aeabi_dadd+0x4f6>
 800190e:	074a      	lsls	r2, r1, #29
 8001910:	08db      	lsrs	r3, r3, #3
 8001912:	4313      	orrs	r3, r2
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	08c9      	lsrs	r1, r1, #3
 8001918:	0312      	lsls	r2, r2, #12
 800191a:	4211      	tst	r1, r2
 800191c:	d008      	beq.n	8001930 <__aeabi_dadd+0x594>
 800191e:	4648      	mov	r0, r9
 8001920:	08c4      	lsrs	r4, r0, #3
 8001922:	4214      	tst	r4, r2
 8001924:	d104      	bne.n	8001930 <__aeabi_dadd+0x594>
 8001926:	4643      	mov	r3, r8
 8001928:	0021      	movs	r1, r4
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	0742      	lsls	r2, r0, #29
 800192e:	4313      	orrs	r3, r2
 8001930:	0f5a      	lsrs	r2, r3, #29
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	0752      	lsls	r2, r2, #29
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	e681      	b.n	8001640 <__aeabi_dadd+0x2a4>
 800193c:	464b      	mov	r3, r9
 800193e:	4303      	orrs	r3, r0
 8001940:	d100      	bne.n	8001944 <__aeabi_dadd+0x5a8>
 8001942:	e714      	b.n	800176e <__aeabi_dadd+0x3d2>
 8001944:	464b      	mov	r3, r9
 8001946:	464a      	mov	r2, r9
 8001948:	08c0      	lsrs	r0, r0, #3
 800194a:	075b      	lsls	r3, r3, #29
 800194c:	4665      	mov	r5, ip
 800194e:	4303      	orrs	r3, r0
 8001950:	08d1      	lsrs	r1, r2, #3
 8001952:	e655      	b.n	8001600 <__aeabi_dadd+0x264>
 8001954:	1ac4      	subs	r4, r0, r3
 8001956:	45a0      	cmp	r8, r4
 8001958:	4180      	sbcs	r0, r0
 800195a:	464b      	mov	r3, r9
 800195c:	4240      	negs	r0, r0
 800195e:	1a59      	subs	r1, r3, r1
 8001960:	1a0b      	subs	r3, r1, r0
 8001962:	469a      	mov	sl, r3
 8001964:	4665      	mov	r5, ip
 8001966:	2601      	movs	r6, #1
 8001968:	e564      	b.n	8001434 <__aeabi_dadd+0x98>
 800196a:	1a1c      	subs	r4, r3, r0
 800196c:	464a      	mov	r2, r9
 800196e:	42a3      	cmp	r3, r4
 8001970:	4180      	sbcs	r0, r0
 8001972:	1a8a      	subs	r2, r1, r2
 8001974:	4240      	negs	r0, r0
 8001976:	1a12      	subs	r2, r2, r0
 8001978:	4692      	mov	sl, r2
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	d549      	bpl.n	8001a12 <__aeabi_dadd+0x676>
 800197e:	4642      	mov	r2, r8
 8001980:	1ad4      	subs	r4, r2, r3
 8001982:	45a0      	cmp	r8, r4
 8001984:	4180      	sbcs	r0, r0
 8001986:	464b      	mov	r3, r9
 8001988:	4240      	negs	r0, r0
 800198a:	1a59      	subs	r1, r3, r1
 800198c:	1a0b      	subs	r3, r1, r0
 800198e:	469a      	mov	sl, r3
 8001990:	4665      	mov	r5, ip
 8001992:	e57f      	b.n	8001494 <__aeabi_dadd+0xf8>
 8001994:	464b      	mov	r3, r9
 8001996:	464a      	mov	r2, r9
 8001998:	08c0      	lsrs	r0, r0, #3
 800199a:	075b      	lsls	r3, r3, #29
 800199c:	4303      	orrs	r3, r0
 800199e:	08d1      	lsrs	r1, r2, #3
 80019a0:	e62b      	b.n	80015fa <__aeabi_dadd+0x25e>
 80019a2:	464a      	mov	r2, r9
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	4302      	orrs	r2, r0
 80019a8:	d138      	bne.n	8001a1c <__aeabi_dadd+0x680>
 80019aa:	074a      	lsls	r2, r1, #29
 80019ac:	4313      	orrs	r3, r2
 80019ae:	08c9      	lsrs	r1, r1, #3
 80019b0:	e646      	b.n	8001640 <__aeabi_dadd+0x2a4>
 80019b2:	464b      	mov	r3, r9
 80019b4:	464a      	mov	r2, r9
 80019b6:	08c0      	lsrs	r0, r0, #3
 80019b8:	075b      	lsls	r3, r3, #29
 80019ba:	4303      	orrs	r3, r0
 80019bc:	08d1      	lsrs	r1, r2, #3
 80019be:	e61f      	b.n	8001600 <__aeabi_dadd+0x264>
 80019c0:	181c      	adds	r4, r3, r0
 80019c2:	429c      	cmp	r4, r3
 80019c4:	419b      	sbcs	r3, r3
 80019c6:	4449      	add	r1, r9
 80019c8:	468a      	mov	sl, r1
 80019ca:	425b      	negs	r3, r3
 80019cc:	449a      	add	sl, r3
 80019ce:	4653      	mov	r3, sl
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	d400      	bmi.n	80019d6 <__aeabi_dadd+0x63a>
 80019d4:	e607      	b.n	80015e6 <__aeabi_dadd+0x24a>
 80019d6:	4652      	mov	r2, sl
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <__aeabi_dadd+0x6bc>)
 80019da:	2601      	movs	r6, #1
 80019dc:	401a      	ands	r2, r3
 80019de:	4692      	mov	sl, r2
 80019e0:	e601      	b.n	80015e6 <__aeabi_dadd+0x24a>
 80019e2:	003c      	movs	r4, r7
 80019e4:	000e      	movs	r6, r1
 80019e6:	3c20      	subs	r4, #32
 80019e8:	40e6      	lsrs	r6, r4
 80019ea:	2f20      	cmp	r7, #32
 80019ec:	d003      	beq.n	80019f6 <__aeabi_dadd+0x65a>
 80019ee:	2440      	movs	r4, #64	; 0x40
 80019f0:	1be4      	subs	r4, r4, r7
 80019f2:	40a1      	lsls	r1, r4
 80019f4:	430b      	orrs	r3, r1
 80019f6:	001c      	movs	r4, r3
 80019f8:	1e63      	subs	r3, r4, #1
 80019fa:	419c      	sbcs	r4, r3
 80019fc:	4334      	orrs	r4, r6
 80019fe:	e65e      	b.n	80016be <__aeabi_dadd+0x322>
 8001a00:	4443      	add	r3, r8
 8001a02:	4283      	cmp	r3, r0
 8001a04:	4180      	sbcs	r0, r0
 8001a06:	4449      	add	r1, r9
 8001a08:	468a      	mov	sl, r1
 8001a0a:	4240      	negs	r0, r0
 8001a0c:	001c      	movs	r4, r3
 8001a0e:	4482      	add	sl, r0
 8001a10:	e6bc      	b.n	800178c <__aeabi_dadd+0x3f0>
 8001a12:	4653      	mov	r3, sl
 8001a14:	4323      	orrs	r3, r4
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dadd+0x67e>
 8001a18:	e6a9      	b.n	800176e <__aeabi_dadd+0x3d2>
 8001a1a:	e5e4      	b.n	80015e6 <__aeabi_dadd+0x24a>
 8001a1c:	074a      	lsls	r2, r1, #29
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	08c9      	lsrs	r1, r1, #3
 8001a24:	0312      	lsls	r2, r2, #12
 8001a26:	4211      	tst	r1, r2
 8001a28:	d009      	beq.n	8001a3e <__aeabi_dadd+0x6a2>
 8001a2a:	4648      	mov	r0, r9
 8001a2c:	08c4      	lsrs	r4, r0, #3
 8001a2e:	4214      	tst	r4, r2
 8001a30:	d105      	bne.n	8001a3e <__aeabi_dadd+0x6a2>
 8001a32:	4643      	mov	r3, r8
 8001a34:	4665      	mov	r5, ip
 8001a36:	0021      	movs	r1, r4
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	0742      	lsls	r2, r0, #29
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	0f5a      	lsrs	r2, r3, #29
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	08db      	lsrs	r3, r3, #3
 8001a44:	0752      	lsls	r2, r2, #29
 8001a46:	4313      	orrs	r3, r2
 8001a48:	e5fa      	b.n	8001640 <__aeabi_dadd+0x2a4>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	4a01      	ldr	r2, [pc, #4]	; (8001a54 <__aeabi_dadd+0x6b8>)
 8001a4e:	001c      	movs	r4, r3
 8001a50:	e540      	b.n	80014d4 <__aeabi_dadd+0x138>
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	000007ff 	.word	0x000007ff
 8001a58:	ff7fffff 	.word	0xff7fffff

08001a5c <__aeabi_ddiv>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	4657      	mov	r7, sl
 8001a60:	464e      	mov	r6, r9
 8001a62:	4645      	mov	r5, r8
 8001a64:	46de      	mov	lr, fp
 8001a66:	b5e0      	push	{r5, r6, r7, lr}
 8001a68:	030c      	lsls	r4, r1, #12
 8001a6a:	001f      	movs	r7, r3
 8001a6c:	004b      	lsls	r3, r1, #1
 8001a6e:	4681      	mov	r9, r0
 8001a70:	4692      	mov	sl, r2
 8001a72:	0005      	movs	r5, r0
 8001a74:	b085      	sub	sp, #20
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	0d5b      	lsrs	r3, r3, #21
 8001a7a:	0fce      	lsrs	r6, r1, #31
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d100      	bne.n	8001a82 <__aeabi_ddiv+0x26>
 8001a80:	e152      	b.n	8001d28 <__aeabi_ddiv+0x2cc>
 8001a82:	4ad2      	ldr	r2, [pc, #840]	; (8001dcc <__aeabi_ddiv+0x370>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d100      	bne.n	8001a8a <__aeabi_ddiv+0x2e>
 8001a88:	e16e      	b.n	8001d68 <__aeabi_ddiv+0x30c>
 8001a8a:	0f42      	lsrs	r2, r0, #29
 8001a8c:	00e4      	lsls	r4, r4, #3
 8001a8e:	4314      	orrs	r4, r2
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	0412      	lsls	r2, r2, #16
 8001a94:	4322      	orrs	r2, r4
 8001a96:	4690      	mov	r8, r2
 8001a98:	4acd      	ldr	r2, [pc, #820]	; (8001dd0 <__aeabi_ddiv+0x374>)
 8001a9a:	00c5      	lsls	r5, r0, #3
 8001a9c:	4693      	mov	fp, r2
 8001a9e:	449b      	add	fp, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	4699      	mov	r9, r3
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	033c      	lsls	r4, r7, #12
 8001aa8:	007b      	lsls	r3, r7, #1
 8001aaa:	4650      	mov	r0, sl
 8001aac:	0b24      	lsrs	r4, r4, #12
 8001aae:	0d5b      	lsrs	r3, r3, #21
 8001ab0:	0fff      	lsrs	r7, r7, #31
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_ddiv+0x5c>
 8001ab6:	e11a      	b.n	8001cee <__aeabi_ddiv+0x292>
 8001ab8:	4ac4      	ldr	r2, [pc, #784]	; (8001dcc <__aeabi_ddiv+0x370>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_ddiv+0x64>
 8001abe:	e15e      	b.n	8001d7e <__aeabi_ddiv+0x322>
 8001ac0:	0f42      	lsrs	r2, r0, #29
 8001ac2:	00e4      	lsls	r4, r4, #3
 8001ac4:	4322      	orrs	r2, r4
 8001ac6:	2480      	movs	r4, #128	; 0x80
 8001ac8:	0424      	lsls	r4, r4, #16
 8001aca:	4314      	orrs	r4, r2
 8001acc:	4ac0      	ldr	r2, [pc, #768]	; (8001dd0 <__aeabi_ddiv+0x374>)
 8001ace:	00c1      	lsls	r1, r0, #3
 8001ad0:	4694      	mov	ip, r2
 8001ad2:	465a      	mov	r2, fp
 8001ad4:	4463      	add	r3, ip
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	469b      	mov	fp, r3
 8001ada:	2000      	movs	r0, #0
 8001adc:	0033      	movs	r3, r6
 8001ade:	407b      	eors	r3, r7
 8001ae0:	469a      	mov	sl, r3
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d827      	bhi.n	8001b38 <__aeabi_ddiv+0xdc>
 8001ae8:	4aba      	ldr	r2, [pc, #744]	; (8001dd4 <__aeabi_ddiv+0x378>)
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	58d3      	ldr	r3, [r2, r3]
 8001aee:	469f      	mov	pc, r3
 8001af0:	46b2      	mov	sl, r6
 8001af2:	9b00      	ldr	r3, [sp, #0]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d016      	beq.n	8001b26 <__aeabi_ddiv+0xca>
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d100      	bne.n	8001afe <__aeabi_ddiv+0xa2>
 8001afc:	e287      	b.n	800200e <__aeabi_ddiv+0x5b2>
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d000      	beq.n	8001b04 <__aeabi_ddiv+0xa8>
 8001b02:	e0d5      	b.n	8001cb0 <__aeabi_ddiv+0x254>
 8001b04:	2300      	movs	r3, #0
 8001b06:	2200      	movs	r2, #0
 8001b08:	2500      	movs	r5, #0
 8001b0a:	051b      	lsls	r3, r3, #20
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	4652      	mov	r2, sl
 8001b10:	07d2      	lsls	r2, r2, #31
 8001b12:	4313      	orrs	r3, r2
 8001b14:	0028      	movs	r0, r5
 8001b16:	0019      	movs	r1, r3
 8001b18:	b005      	add	sp, #20
 8001b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b1c:	46bb      	mov	fp, r7
 8001b1e:	46b2      	mov	sl, r6
 8001b20:	46a9      	mov	r9, r5
 8001b22:	46a0      	mov	r8, r4
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b26:	2200      	movs	r2, #0
 8001b28:	2500      	movs	r5, #0
 8001b2a:	4ba8      	ldr	r3, [pc, #672]	; (8001dcc <__aeabi_ddiv+0x370>)
 8001b2c:	e7ed      	b.n	8001b0a <__aeabi_ddiv+0xae>
 8001b2e:	46ba      	mov	sl, r7
 8001b30:	46a0      	mov	r8, r4
 8001b32:	000d      	movs	r5, r1
 8001b34:	9000      	str	r0, [sp, #0]
 8001b36:	e7dc      	b.n	8001af2 <__aeabi_ddiv+0x96>
 8001b38:	4544      	cmp	r4, r8
 8001b3a:	d200      	bcs.n	8001b3e <__aeabi_ddiv+0xe2>
 8001b3c:	e1c4      	b.n	8001ec8 <__aeabi_ddiv+0x46c>
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_ddiv+0xe6>
 8001b40:	e1bf      	b.n	8001ec2 <__aeabi_ddiv+0x466>
 8001b42:	2301      	movs	r3, #1
 8001b44:	425b      	negs	r3, r3
 8001b46:	469c      	mov	ip, r3
 8001b48:	002e      	movs	r6, r5
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	2500      	movs	r5, #0
 8001b4e:	44e3      	add	fp, ip
 8001b50:	0223      	lsls	r3, r4, #8
 8001b52:	0e0c      	lsrs	r4, r1, #24
 8001b54:	431c      	orrs	r4, r3
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	4699      	mov	r9, r3
 8001b5a:	0423      	lsls	r3, r4, #16
 8001b5c:	020a      	lsls	r2, r1, #8
 8001b5e:	0c1f      	lsrs	r7, r3, #16
 8001b60:	4649      	mov	r1, r9
 8001b62:	9200      	str	r2, [sp, #0]
 8001b64:	9701      	str	r7, [sp, #4]
 8001b66:	f7fe fb77 	bl	8000258 <__aeabi_uidivmod>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	437a      	muls	r2, r7
 8001b6e:	040b      	lsls	r3, r1, #16
 8001b70:	0c31      	lsrs	r1, r6, #16
 8001b72:	4680      	mov	r8, r0
 8001b74:	4319      	orrs	r1, r3
 8001b76:	428a      	cmp	r2, r1
 8001b78:	d907      	bls.n	8001b8a <__aeabi_ddiv+0x12e>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	425b      	negs	r3, r3
 8001b7e:	469c      	mov	ip, r3
 8001b80:	1909      	adds	r1, r1, r4
 8001b82:	44e0      	add	r8, ip
 8001b84:	428c      	cmp	r4, r1
 8001b86:	d800      	bhi.n	8001b8a <__aeabi_ddiv+0x12e>
 8001b88:	e201      	b.n	8001f8e <__aeabi_ddiv+0x532>
 8001b8a:	1a88      	subs	r0, r1, r2
 8001b8c:	4649      	mov	r1, r9
 8001b8e:	f7fe fb63 	bl	8000258 <__aeabi_uidivmod>
 8001b92:	9a01      	ldr	r2, [sp, #4]
 8001b94:	0436      	lsls	r6, r6, #16
 8001b96:	4342      	muls	r2, r0
 8001b98:	0409      	lsls	r1, r1, #16
 8001b9a:	0c36      	lsrs	r6, r6, #16
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	430e      	orrs	r6, r1
 8001ba0:	42b2      	cmp	r2, r6
 8001ba2:	d904      	bls.n	8001bae <__aeabi_ddiv+0x152>
 8001ba4:	1936      	adds	r6, r6, r4
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	42b4      	cmp	r4, r6
 8001baa:	d800      	bhi.n	8001bae <__aeabi_ddiv+0x152>
 8001bac:	e1e9      	b.n	8001f82 <__aeabi_ddiv+0x526>
 8001bae:	1ab0      	subs	r0, r6, r2
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	9e00      	ldr	r6, [sp, #0]
 8001bb4:	0412      	lsls	r2, r2, #16
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	0c33      	lsrs	r3, r6, #16
 8001bba:	001f      	movs	r7, r3
 8001bbc:	0c11      	lsrs	r1, r2, #16
 8001bbe:	4690      	mov	r8, r2
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	0413      	lsls	r3, r2, #16
 8001bc4:	0432      	lsls	r2, r6, #16
 8001bc6:	0c16      	lsrs	r6, r2, #16
 8001bc8:	0032      	movs	r2, r6
 8001bca:	0c1b      	lsrs	r3, r3, #16
 8001bcc:	435a      	muls	r2, r3
 8001bce:	9603      	str	r6, [sp, #12]
 8001bd0:	437b      	muls	r3, r7
 8001bd2:	434e      	muls	r6, r1
 8001bd4:	4379      	muls	r1, r7
 8001bd6:	0c17      	lsrs	r7, r2, #16
 8001bd8:	46bc      	mov	ip, r7
 8001bda:	199b      	adds	r3, r3, r6
 8001bdc:	4463      	add	r3, ip
 8001bde:	429e      	cmp	r6, r3
 8001be0:	d903      	bls.n	8001bea <__aeabi_ddiv+0x18e>
 8001be2:	2680      	movs	r6, #128	; 0x80
 8001be4:	0276      	lsls	r6, r6, #9
 8001be6:	46b4      	mov	ip, r6
 8001be8:	4461      	add	r1, ip
 8001bea:	0c1e      	lsrs	r6, r3, #16
 8001bec:	1871      	adds	r1, r6, r1
 8001bee:	0416      	lsls	r6, r2, #16
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	0c36      	lsrs	r6, r6, #16
 8001bf4:	199e      	adds	r6, r3, r6
 8001bf6:	4288      	cmp	r0, r1
 8001bf8:	d302      	bcc.n	8001c00 <__aeabi_ddiv+0x1a4>
 8001bfa:	d112      	bne.n	8001c22 <__aeabi_ddiv+0x1c6>
 8001bfc:	42b5      	cmp	r5, r6
 8001bfe:	d210      	bcs.n	8001c22 <__aeabi_ddiv+0x1c6>
 8001c00:	4643      	mov	r3, r8
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	9b00      	ldr	r3, [sp, #0]
 8001c06:	469c      	mov	ip, r3
 8001c08:	4465      	add	r5, ip
 8001c0a:	001f      	movs	r7, r3
 8001c0c:	429d      	cmp	r5, r3
 8001c0e:	419b      	sbcs	r3, r3
 8001c10:	425b      	negs	r3, r3
 8001c12:	191b      	adds	r3, r3, r4
 8001c14:	18c0      	adds	r0, r0, r3
 8001c16:	4284      	cmp	r4, r0
 8001c18:	d200      	bcs.n	8001c1c <__aeabi_ddiv+0x1c0>
 8001c1a:	e19e      	b.n	8001f5a <__aeabi_ddiv+0x4fe>
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_ddiv+0x1c4>
 8001c1e:	e199      	b.n	8001f54 <__aeabi_ddiv+0x4f8>
 8001c20:	4690      	mov	r8, r2
 8001c22:	1bae      	subs	r6, r5, r6
 8001c24:	42b5      	cmp	r5, r6
 8001c26:	41ad      	sbcs	r5, r5
 8001c28:	1a40      	subs	r0, r0, r1
 8001c2a:	426d      	negs	r5, r5
 8001c2c:	1b40      	subs	r0, r0, r5
 8001c2e:	4284      	cmp	r4, r0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_ddiv+0x1d8>
 8001c32:	e1d2      	b.n	8001fda <__aeabi_ddiv+0x57e>
 8001c34:	4649      	mov	r1, r9
 8001c36:	f7fe fb0f 	bl	8000258 <__aeabi_uidivmod>
 8001c3a:	9a01      	ldr	r2, [sp, #4]
 8001c3c:	040b      	lsls	r3, r1, #16
 8001c3e:	4342      	muls	r2, r0
 8001c40:	0c31      	lsrs	r1, r6, #16
 8001c42:	0005      	movs	r5, r0
 8001c44:	4319      	orrs	r1, r3
 8001c46:	428a      	cmp	r2, r1
 8001c48:	d900      	bls.n	8001c4c <__aeabi_ddiv+0x1f0>
 8001c4a:	e16c      	b.n	8001f26 <__aeabi_ddiv+0x4ca>
 8001c4c:	1a88      	subs	r0, r1, r2
 8001c4e:	4649      	mov	r1, r9
 8001c50:	f7fe fb02 	bl	8000258 <__aeabi_uidivmod>
 8001c54:	9a01      	ldr	r2, [sp, #4]
 8001c56:	0436      	lsls	r6, r6, #16
 8001c58:	4342      	muls	r2, r0
 8001c5a:	0409      	lsls	r1, r1, #16
 8001c5c:	0c36      	lsrs	r6, r6, #16
 8001c5e:	0003      	movs	r3, r0
 8001c60:	430e      	orrs	r6, r1
 8001c62:	42b2      	cmp	r2, r6
 8001c64:	d900      	bls.n	8001c68 <__aeabi_ddiv+0x20c>
 8001c66:	e153      	b.n	8001f10 <__aeabi_ddiv+0x4b4>
 8001c68:	9803      	ldr	r0, [sp, #12]
 8001c6a:	1ab6      	subs	r6, r6, r2
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	042d      	lsls	r5, r5, #16
 8001c70:	431d      	orrs	r5, r3
 8001c72:	9f02      	ldr	r7, [sp, #8]
 8001c74:	042b      	lsls	r3, r5, #16
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	435a      	muls	r2, r3
 8001c7a:	437b      	muls	r3, r7
 8001c7c:	469c      	mov	ip, r3
 8001c7e:	0c29      	lsrs	r1, r5, #16
 8001c80:	4348      	muls	r0, r1
 8001c82:	0c13      	lsrs	r3, r2, #16
 8001c84:	4484      	add	ip, r0
 8001c86:	4463      	add	r3, ip
 8001c88:	4379      	muls	r1, r7
 8001c8a:	4298      	cmp	r0, r3
 8001c8c:	d903      	bls.n	8001c96 <__aeabi_ddiv+0x23a>
 8001c8e:	2080      	movs	r0, #128	; 0x80
 8001c90:	0240      	lsls	r0, r0, #9
 8001c92:	4684      	mov	ip, r0
 8001c94:	4461      	add	r1, ip
 8001c96:	0c18      	lsrs	r0, r3, #16
 8001c98:	0412      	lsls	r2, r2, #16
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	0c12      	lsrs	r2, r2, #16
 8001c9e:	1840      	adds	r0, r0, r1
 8001ca0:	189b      	adds	r3, r3, r2
 8001ca2:	4286      	cmp	r6, r0
 8001ca4:	d200      	bcs.n	8001ca8 <__aeabi_ddiv+0x24c>
 8001ca6:	e100      	b.n	8001eaa <__aeabi_ddiv+0x44e>
 8001ca8:	d100      	bne.n	8001cac <__aeabi_ddiv+0x250>
 8001caa:	e0fb      	b.n	8001ea4 <__aeabi_ddiv+0x448>
 8001cac:	2301      	movs	r3, #1
 8001cae:	431d      	orrs	r5, r3
 8001cb0:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <__aeabi_ddiv+0x37c>)
 8001cb2:	445b      	add	r3, fp
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	dc00      	bgt.n	8001cba <__aeabi_ddiv+0x25e>
 8001cb8:	e0aa      	b.n	8001e10 <__aeabi_ddiv+0x3b4>
 8001cba:	076a      	lsls	r2, r5, #29
 8001cbc:	d000      	beq.n	8001cc0 <__aeabi_ddiv+0x264>
 8001cbe:	e13d      	b.n	8001f3c <__aeabi_ddiv+0x4e0>
 8001cc0:	08e9      	lsrs	r1, r5, #3
 8001cc2:	4642      	mov	r2, r8
 8001cc4:	01d2      	lsls	r2, r2, #7
 8001cc6:	d506      	bpl.n	8001cd6 <__aeabi_ddiv+0x27a>
 8001cc8:	4642      	mov	r2, r8
 8001cca:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <__aeabi_ddiv+0x380>)
 8001ccc:	401a      	ands	r2, r3
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	4690      	mov	r8, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	445b      	add	r3, fp
 8001cd6:	4a42      	ldr	r2, [pc, #264]	; (8001de0 <__aeabi_ddiv+0x384>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	dd00      	ble.n	8001cde <__aeabi_ddiv+0x282>
 8001cdc:	e723      	b.n	8001b26 <__aeabi_ddiv+0xca>
 8001cde:	4642      	mov	r2, r8
 8001ce0:	055b      	lsls	r3, r3, #21
 8001ce2:	0755      	lsls	r5, r2, #29
 8001ce4:	0252      	lsls	r2, r2, #9
 8001ce6:	430d      	orrs	r5, r1
 8001ce8:	0b12      	lsrs	r2, r2, #12
 8001cea:	0d5b      	lsrs	r3, r3, #21
 8001cec:	e70d      	b.n	8001b0a <__aeabi_ddiv+0xae>
 8001cee:	4651      	mov	r1, sl
 8001cf0:	4321      	orrs	r1, r4
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_ddiv+0x29a>
 8001cf4:	e07c      	b.n	8001df0 <__aeabi_ddiv+0x394>
 8001cf6:	2c00      	cmp	r4, #0
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_ddiv+0x2a0>
 8001cfa:	e0fb      	b.n	8001ef4 <__aeabi_ddiv+0x498>
 8001cfc:	0020      	movs	r0, r4
 8001cfe:	f001 fa63 	bl	80031c8 <__clzsi2>
 8001d02:	0002      	movs	r2, r0
 8001d04:	3a0b      	subs	r2, #11
 8001d06:	231d      	movs	r3, #29
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	4652      	mov	r2, sl
 8001d0c:	0001      	movs	r1, r0
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	4653      	mov	r3, sl
 8001d12:	3908      	subs	r1, #8
 8001d14:	408b      	lsls	r3, r1
 8001d16:	408c      	lsls	r4, r1
 8001d18:	0019      	movs	r1, r3
 8001d1a:	4314      	orrs	r4, r2
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <__aeabi_ddiv+0x388>)
 8001d1e:	4458      	add	r0, fp
 8001d20:	469b      	mov	fp, r3
 8001d22:	4483      	add	fp, r0
 8001d24:	2000      	movs	r0, #0
 8001d26:	e6d9      	b.n	8001adc <__aeabi_ddiv+0x80>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	4698      	mov	r8, r3
 8001d2e:	d044      	beq.n	8001dba <__aeabi_ddiv+0x35e>
 8001d30:	2c00      	cmp	r4, #0
 8001d32:	d100      	bne.n	8001d36 <__aeabi_ddiv+0x2da>
 8001d34:	e0cf      	b.n	8001ed6 <__aeabi_ddiv+0x47a>
 8001d36:	0020      	movs	r0, r4
 8001d38:	f001 fa46 	bl	80031c8 <__clzsi2>
 8001d3c:	0001      	movs	r1, r0
 8001d3e:	0002      	movs	r2, r0
 8001d40:	390b      	subs	r1, #11
 8001d42:	231d      	movs	r3, #29
 8001d44:	1a5b      	subs	r3, r3, r1
 8001d46:	4649      	mov	r1, r9
 8001d48:	0010      	movs	r0, r2
 8001d4a:	40d9      	lsrs	r1, r3
 8001d4c:	3808      	subs	r0, #8
 8001d4e:	4084      	lsls	r4, r0
 8001d50:	000b      	movs	r3, r1
 8001d52:	464d      	mov	r5, r9
 8001d54:	4323      	orrs	r3, r4
 8001d56:	4698      	mov	r8, r3
 8001d58:	4085      	lsls	r5, r0
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <__aeabi_ddiv+0x38c>)
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	469b      	mov	fp, r3
 8001d60:	2300      	movs	r3, #0
 8001d62:	4699      	mov	r9, r3
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	e69e      	b.n	8001aa6 <__aeabi_ddiv+0x4a>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	4322      	orrs	r2, r4
 8001d6c:	4690      	mov	r8, r2
 8001d6e:	d11d      	bne.n	8001dac <__aeabi_ddiv+0x350>
 8001d70:	2208      	movs	r2, #8
 8001d72:	469b      	mov	fp, r3
 8001d74:	2302      	movs	r3, #2
 8001d76:	2500      	movs	r5, #0
 8001d78:	4691      	mov	r9, r2
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	e693      	b.n	8001aa6 <__aeabi_ddiv+0x4a>
 8001d7e:	4651      	mov	r1, sl
 8001d80:	4321      	orrs	r1, r4
 8001d82:	d109      	bne.n	8001d98 <__aeabi_ddiv+0x33c>
 8001d84:	2302      	movs	r3, #2
 8001d86:	464a      	mov	r2, r9
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <__aeabi_ddiv+0x390>)
 8001d8c:	4691      	mov	r9, r2
 8001d8e:	469c      	mov	ip, r3
 8001d90:	2400      	movs	r4, #0
 8001d92:	2002      	movs	r0, #2
 8001d94:	44e3      	add	fp, ip
 8001d96:	e6a1      	b.n	8001adc <__aeabi_ddiv+0x80>
 8001d98:	2303      	movs	r3, #3
 8001d9a:	464a      	mov	r2, r9
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <__aeabi_ddiv+0x390>)
 8001da0:	4691      	mov	r9, r2
 8001da2:	469c      	mov	ip, r3
 8001da4:	4651      	mov	r1, sl
 8001da6:	2003      	movs	r0, #3
 8001da8:	44e3      	add	fp, ip
 8001daa:	e697      	b.n	8001adc <__aeabi_ddiv+0x80>
 8001dac:	220c      	movs	r2, #12
 8001dae:	469b      	mov	fp, r3
 8001db0:	2303      	movs	r3, #3
 8001db2:	46a0      	mov	r8, r4
 8001db4:	4691      	mov	r9, r2
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	e675      	b.n	8001aa6 <__aeabi_ddiv+0x4a>
 8001dba:	2304      	movs	r3, #4
 8001dbc:	4699      	mov	r9, r3
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	469b      	mov	fp, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	2500      	movs	r5, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	e66d      	b.n	8001aa6 <__aeabi_ddiv+0x4a>
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	000007ff 	.word	0x000007ff
 8001dd0:	fffffc01 	.word	0xfffffc01
 8001dd4:	0800e2a4 	.word	0x0800e2a4
 8001dd8:	000003ff 	.word	0x000003ff
 8001ddc:	feffffff 	.word	0xfeffffff
 8001de0:	000007fe 	.word	0x000007fe
 8001de4:	000003f3 	.word	0x000003f3
 8001de8:	fffffc0d 	.word	0xfffffc0d
 8001dec:	fffff801 	.word	0xfffff801
 8001df0:	464a      	mov	r2, r9
 8001df2:	2301      	movs	r3, #1
 8001df4:	431a      	orrs	r2, r3
 8001df6:	4691      	mov	r9, r2
 8001df8:	2400      	movs	r4, #0
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	e66e      	b.n	8001adc <__aeabi_ddiv+0x80>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	469a      	mov	sl, r3
 8001e04:	2500      	movs	r5, #0
 8001e06:	4b88      	ldr	r3, [pc, #544]	; (8002028 <__aeabi_ddiv+0x5cc>)
 8001e08:	0312      	lsls	r2, r2, #12
 8001e0a:	e67e      	b.n	8001b0a <__aeabi_ddiv+0xae>
 8001e0c:	2501      	movs	r5, #1
 8001e0e:	426d      	negs	r5, r5
 8001e10:	2201      	movs	r2, #1
 8001e12:	1ad2      	subs	r2, r2, r3
 8001e14:	2a38      	cmp	r2, #56	; 0x38
 8001e16:	dd00      	ble.n	8001e1a <__aeabi_ddiv+0x3be>
 8001e18:	e674      	b.n	8001b04 <__aeabi_ddiv+0xa8>
 8001e1a:	2a1f      	cmp	r2, #31
 8001e1c:	dc00      	bgt.n	8001e20 <__aeabi_ddiv+0x3c4>
 8001e1e:	e0bd      	b.n	8001f9c <__aeabi_ddiv+0x540>
 8001e20:	211f      	movs	r1, #31
 8001e22:	4249      	negs	r1, r1
 8001e24:	1acb      	subs	r3, r1, r3
 8001e26:	4641      	mov	r1, r8
 8001e28:	40d9      	lsrs	r1, r3
 8001e2a:	000b      	movs	r3, r1
 8001e2c:	2a20      	cmp	r2, #32
 8001e2e:	d004      	beq.n	8001e3a <__aeabi_ddiv+0x3de>
 8001e30:	4641      	mov	r1, r8
 8001e32:	4a7e      	ldr	r2, [pc, #504]	; (800202c <__aeabi_ddiv+0x5d0>)
 8001e34:	445a      	add	r2, fp
 8001e36:	4091      	lsls	r1, r2
 8001e38:	430d      	orrs	r5, r1
 8001e3a:	0029      	movs	r1, r5
 8001e3c:	1e4a      	subs	r2, r1, #1
 8001e3e:	4191      	sbcs	r1, r2
 8001e40:	4319      	orrs	r1, r3
 8001e42:	2307      	movs	r3, #7
 8001e44:	001d      	movs	r5, r3
 8001e46:	2200      	movs	r2, #0
 8001e48:	400d      	ands	r5, r1
 8001e4a:	420b      	tst	r3, r1
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_ddiv+0x3f4>
 8001e4e:	e0d0      	b.n	8001ff2 <__aeabi_ddiv+0x596>
 8001e50:	220f      	movs	r2, #15
 8001e52:	2300      	movs	r3, #0
 8001e54:	400a      	ands	r2, r1
 8001e56:	2a04      	cmp	r2, #4
 8001e58:	d100      	bne.n	8001e5c <__aeabi_ddiv+0x400>
 8001e5a:	e0c7      	b.n	8001fec <__aeabi_ddiv+0x590>
 8001e5c:	1d0a      	adds	r2, r1, #4
 8001e5e:	428a      	cmp	r2, r1
 8001e60:	4189      	sbcs	r1, r1
 8001e62:	4249      	negs	r1, r1
 8001e64:	185b      	adds	r3, r3, r1
 8001e66:	0011      	movs	r1, r2
 8001e68:	021a      	lsls	r2, r3, #8
 8001e6a:	d400      	bmi.n	8001e6e <__aeabi_ddiv+0x412>
 8001e6c:	e0be      	b.n	8001fec <__aeabi_ddiv+0x590>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	2200      	movs	r2, #0
 8001e72:	2500      	movs	r5, #0
 8001e74:	e649      	b.n	8001b0a <__aeabi_ddiv+0xae>
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	4643      	mov	r3, r8
 8001e7a:	0312      	lsls	r2, r2, #12
 8001e7c:	4213      	tst	r3, r2
 8001e7e:	d008      	beq.n	8001e92 <__aeabi_ddiv+0x436>
 8001e80:	4214      	tst	r4, r2
 8001e82:	d106      	bne.n	8001e92 <__aeabi_ddiv+0x436>
 8001e84:	4322      	orrs	r2, r4
 8001e86:	0312      	lsls	r2, r2, #12
 8001e88:	46ba      	mov	sl, r7
 8001e8a:	000d      	movs	r5, r1
 8001e8c:	4b66      	ldr	r3, [pc, #408]	; (8002028 <__aeabi_ddiv+0x5cc>)
 8001e8e:	0b12      	lsrs	r2, r2, #12
 8001e90:	e63b      	b.n	8001b0a <__aeabi_ddiv+0xae>
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	4643      	mov	r3, r8
 8001e96:	0312      	lsls	r2, r2, #12
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	0312      	lsls	r2, r2, #12
 8001e9c:	46b2      	mov	sl, r6
 8001e9e:	4b62      	ldr	r3, [pc, #392]	; (8002028 <__aeabi_ddiv+0x5cc>)
 8001ea0:	0b12      	lsrs	r2, r2, #12
 8001ea2:	e632      	b.n	8001b0a <__aeabi_ddiv+0xae>
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_ddiv+0x44e>
 8001ea8:	e702      	b.n	8001cb0 <__aeabi_ddiv+0x254>
 8001eaa:	19a6      	adds	r6, r4, r6
 8001eac:	1e6a      	subs	r2, r5, #1
 8001eae:	42a6      	cmp	r6, r4
 8001eb0:	d200      	bcs.n	8001eb4 <__aeabi_ddiv+0x458>
 8001eb2:	e089      	b.n	8001fc8 <__aeabi_ddiv+0x56c>
 8001eb4:	4286      	cmp	r6, r0
 8001eb6:	d200      	bcs.n	8001eba <__aeabi_ddiv+0x45e>
 8001eb8:	e09f      	b.n	8001ffa <__aeabi_ddiv+0x59e>
 8001eba:	d100      	bne.n	8001ebe <__aeabi_ddiv+0x462>
 8001ebc:	e0af      	b.n	800201e <__aeabi_ddiv+0x5c2>
 8001ebe:	0015      	movs	r5, r2
 8001ec0:	e6f4      	b.n	8001cac <__aeabi_ddiv+0x250>
 8001ec2:	42a9      	cmp	r1, r5
 8001ec4:	d900      	bls.n	8001ec8 <__aeabi_ddiv+0x46c>
 8001ec6:	e63c      	b.n	8001b42 <__aeabi_ddiv+0xe6>
 8001ec8:	4643      	mov	r3, r8
 8001eca:	07de      	lsls	r6, r3, #31
 8001ecc:	0858      	lsrs	r0, r3, #1
 8001ece:	086b      	lsrs	r3, r5, #1
 8001ed0:	431e      	orrs	r6, r3
 8001ed2:	07ed      	lsls	r5, r5, #31
 8001ed4:	e63c      	b.n	8001b50 <__aeabi_ddiv+0xf4>
 8001ed6:	f001 f977 	bl	80031c8 <__clzsi2>
 8001eda:	0001      	movs	r1, r0
 8001edc:	0002      	movs	r2, r0
 8001ede:	3115      	adds	r1, #21
 8001ee0:	3220      	adds	r2, #32
 8001ee2:	291c      	cmp	r1, #28
 8001ee4:	dc00      	bgt.n	8001ee8 <__aeabi_ddiv+0x48c>
 8001ee6:	e72c      	b.n	8001d42 <__aeabi_ddiv+0x2e6>
 8001ee8:	464b      	mov	r3, r9
 8001eea:	3808      	subs	r0, #8
 8001eec:	4083      	lsls	r3, r0
 8001eee:	2500      	movs	r5, #0
 8001ef0:	4698      	mov	r8, r3
 8001ef2:	e732      	b.n	8001d5a <__aeabi_ddiv+0x2fe>
 8001ef4:	f001 f968 	bl	80031c8 <__clzsi2>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	001a      	movs	r2, r3
 8001efc:	3215      	adds	r2, #21
 8001efe:	3020      	adds	r0, #32
 8001f00:	2a1c      	cmp	r2, #28
 8001f02:	dc00      	bgt.n	8001f06 <__aeabi_ddiv+0x4aa>
 8001f04:	e6ff      	b.n	8001d06 <__aeabi_ddiv+0x2aa>
 8001f06:	4654      	mov	r4, sl
 8001f08:	3b08      	subs	r3, #8
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	409c      	lsls	r4, r3
 8001f0e:	e705      	b.n	8001d1c <__aeabi_ddiv+0x2c0>
 8001f10:	1936      	adds	r6, r6, r4
 8001f12:	3b01      	subs	r3, #1
 8001f14:	42b4      	cmp	r4, r6
 8001f16:	d900      	bls.n	8001f1a <__aeabi_ddiv+0x4be>
 8001f18:	e6a6      	b.n	8001c68 <__aeabi_ddiv+0x20c>
 8001f1a:	42b2      	cmp	r2, r6
 8001f1c:	d800      	bhi.n	8001f20 <__aeabi_ddiv+0x4c4>
 8001f1e:	e6a3      	b.n	8001c68 <__aeabi_ddiv+0x20c>
 8001f20:	1e83      	subs	r3, r0, #2
 8001f22:	1936      	adds	r6, r6, r4
 8001f24:	e6a0      	b.n	8001c68 <__aeabi_ddiv+0x20c>
 8001f26:	1909      	adds	r1, r1, r4
 8001f28:	3d01      	subs	r5, #1
 8001f2a:	428c      	cmp	r4, r1
 8001f2c:	d900      	bls.n	8001f30 <__aeabi_ddiv+0x4d4>
 8001f2e:	e68d      	b.n	8001c4c <__aeabi_ddiv+0x1f0>
 8001f30:	428a      	cmp	r2, r1
 8001f32:	d800      	bhi.n	8001f36 <__aeabi_ddiv+0x4da>
 8001f34:	e68a      	b.n	8001c4c <__aeabi_ddiv+0x1f0>
 8001f36:	1e85      	subs	r5, r0, #2
 8001f38:	1909      	adds	r1, r1, r4
 8001f3a:	e687      	b.n	8001c4c <__aeabi_ddiv+0x1f0>
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	402a      	ands	r2, r5
 8001f40:	2a04      	cmp	r2, #4
 8001f42:	d100      	bne.n	8001f46 <__aeabi_ddiv+0x4ea>
 8001f44:	e6bc      	b.n	8001cc0 <__aeabi_ddiv+0x264>
 8001f46:	1d29      	adds	r1, r5, #4
 8001f48:	42a9      	cmp	r1, r5
 8001f4a:	41ad      	sbcs	r5, r5
 8001f4c:	426d      	negs	r5, r5
 8001f4e:	08c9      	lsrs	r1, r1, #3
 8001f50:	44a8      	add	r8, r5
 8001f52:	e6b6      	b.n	8001cc2 <__aeabi_ddiv+0x266>
 8001f54:	42af      	cmp	r7, r5
 8001f56:	d900      	bls.n	8001f5a <__aeabi_ddiv+0x4fe>
 8001f58:	e662      	b.n	8001c20 <__aeabi_ddiv+0x1c4>
 8001f5a:	4281      	cmp	r1, r0
 8001f5c:	d804      	bhi.n	8001f68 <__aeabi_ddiv+0x50c>
 8001f5e:	d000      	beq.n	8001f62 <__aeabi_ddiv+0x506>
 8001f60:	e65e      	b.n	8001c20 <__aeabi_ddiv+0x1c4>
 8001f62:	42ae      	cmp	r6, r5
 8001f64:	d800      	bhi.n	8001f68 <__aeabi_ddiv+0x50c>
 8001f66:	e65b      	b.n	8001c20 <__aeabi_ddiv+0x1c4>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	425b      	negs	r3, r3
 8001f6c:	469c      	mov	ip, r3
 8001f6e:	9b00      	ldr	r3, [sp, #0]
 8001f70:	44e0      	add	r8, ip
 8001f72:	469c      	mov	ip, r3
 8001f74:	4465      	add	r5, ip
 8001f76:	429d      	cmp	r5, r3
 8001f78:	419b      	sbcs	r3, r3
 8001f7a:	425b      	negs	r3, r3
 8001f7c:	191b      	adds	r3, r3, r4
 8001f7e:	18c0      	adds	r0, r0, r3
 8001f80:	e64f      	b.n	8001c22 <__aeabi_ddiv+0x1c6>
 8001f82:	42b2      	cmp	r2, r6
 8001f84:	d800      	bhi.n	8001f88 <__aeabi_ddiv+0x52c>
 8001f86:	e612      	b.n	8001bae <__aeabi_ddiv+0x152>
 8001f88:	1e83      	subs	r3, r0, #2
 8001f8a:	1936      	adds	r6, r6, r4
 8001f8c:	e60f      	b.n	8001bae <__aeabi_ddiv+0x152>
 8001f8e:	428a      	cmp	r2, r1
 8001f90:	d800      	bhi.n	8001f94 <__aeabi_ddiv+0x538>
 8001f92:	e5fa      	b.n	8001b8a <__aeabi_ddiv+0x12e>
 8001f94:	1e83      	subs	r3, r0, #2
 8001f96:	4698      	mov	r8, r3
 8001f98:	1909      	adds	r1, r1, r4
 8001f9a:	e5f6      	b.n	8001b8a <__aeabi_ddiv+0x12e>
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <__aeabi_ddiv+0x5d4>)
 8001f9e:	0028      	movs	r0, r5
 8001fa0:	445b      	add	r3, fp
 8001fa2:	4641      	mov	r1, r8
 8001fa4:	409d      	lsls	r5, r3
 8001fa6:	4099      	lsls	r1, r3
 8001fa8:	40d0      	lsrs	r0, r2
 8001faa:	1e6b      	subs	r3, r5, #1
 8001fac:	419d      	sbcs	r5, r3
 8001fae:	4643      	mov	r3, r8
 8001fb0:	4301      	orrs	r1, r0
 8001fb2:	4329      	orrs	r1, r5
 8001fb4:	40d3      	lsrs	r3, r2
 8001fb6:	074a      	lsls	r2, r1, #29
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_ddiv+0x560>
 8001fba:	e755      	b.n	8001e68 <__aeabi_ddiv+0x40c>
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	2a04      	cmp	r2, #4
 8001fc2:	d000      	beq.n	8001fc6 <__aeabi_ddiv+0x56a>
 8001fc4:	e74a      	b.n	8001e5c <__aeabi_ddiv+0x400>
 8001fc6:	e74f      	b.n	8001e68 <__aeabi_ddiv+0x40c>
 8001fc8:	0015      	movs	r5, r2
 8001fca:	4286      	cmp	r6, r0
 8001fcc:	d000      	beq.n	8001fd0 <__aeabi_ddiv+0x574>
 8001fce:	e66d      	b.n	8001cac <__aeabi_ddiv+0x250>
 8001fd0:	9a00      	ldr	r2, [sp, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_ddiv+0x57c>
 8001fd6:	e669      	b.n	8001cac <__aeabi_ddiv+0x250>
 8001fd8:	e66a      	b.n	8001cb0 <__aeabi_ddiv+0x254>
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <__aeabi_ddiv+0x5d8>)
 8001fdc:	445b      	add	r3, fp
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	dc00      	bgt.n	8001fe4 <__aeabi_ddiv+0x588>
 8001fe2:	e713      	b.n	8001e0c <__aeabi_ddiv+0x3b0>
 8001fe4:	2501      	movs	r5, #1
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	44a8      	add	r8, r5
 8001fea:	e66a      	b.n	8001cc2 <__aeabi_ddiv+0x266>
 8001fec:	075d      	lsls	r5, r3, #29
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	0b1a      	lsrs	r2, r3, #12
 8001ff2:	08c9      	lsrs	r1, r1, #3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	430d      	orrs	r5, r1
 8001ff8:	e587      	b.n	8001b0a <__aeabi_ddiv+0xae>
 8001ffa:	9900      	ldr	r1, [sp, #0]
 8001ffc:	3d02      	subs	r5, #2
 8001ffe:	004a      	lsls	r2, r1, #1
 8002000:	428a      	cmp	r2, r1
 8002002:	41bf      	sbcs	r7, r7
 8002004:	427f      	negs	r7, r7
 8002006:	193f      	adds	r7, r7, r4
 8002008:	19f6      	adds	r6, r6, r7
 800200a:	9200      	str	r2, [sp, #0]
 800200c:	e7dd      	b.n	8001fca <__aeabi_ddiv+0x56e>
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	4643      	mov	r3, r8
 8002012:	0312      	lsls	r2, r2, #12
 8002014:	431a      	orrs	r2, r3
 8002016:	0312      	lsls	r2, r2, #12
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <__aeabi_ddiv+0x5cc>)
 800201a:	0b12      	lsrs	r2, r2, #12
 800201c:	e575      	b.n	8001b0a <__aeabi_ddiv+0xae>
 800201e:	9900      	ldr	r1, [sp, #0]
 8002020:	4299      	cmp	r1, r3
 8002022:	d3ea      	bcc.n	8001ffa <__aeabi_ddiv+0x59e>
 8002024:	0015      	movs	r5, r2
 8002026:	e7d3      	b.n	8001fd0 <__aeabi_ddiv+0x574>
 8002028:	000007ff 	.word	0x000007ff
 800202c:	0000043e 	.word	0x0000043e
 8002030:	0000041e 	.word	0x0000041e
 8002034:	000003ff 	.word	0x000003ff

08002038 <__eqdf2>:
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	464e      	mov	r6, r9
 800203c:	4645      	mov	r5, r8
 800203e:	46de      	mov	lr, fp
 8002040:	4657      	mov	r7, sl
 8002042:	4690      	mov	r8, r2
 8002044:	b5e0      	push	{r5, r6, r7, lr}
 8002046:	0017      	movs	r7, r2
 8002048:	031a      	lsls	r2, r3, #12
 800204a:	0b12      	lsrs	r2, r2, #12
 800204c:	0005      	movs	r5, r0
 800204e:	4684      	mov	ip, r0
 8002050:	4819      	ldr	r0, [pc, #100]	; (80020b8 <__eqdf2+0x80>)
 8002052:	030e      	lsls	r6, r1, #12
 8002054:	004c      	lsls	r4, r1, #1
 8002056:	4691      	mov	r9, r2
 8002058:	005a      	lsls	r2, r3, #1
 800205a:	0fdb      	lsrs	r3, r3, #31
 800205c:	469b      	mov	fp, r3
 800205e:	0b36      	lsrs	r6, r6, #12
 8002060:	0d64      	lsrs	r4, r4, #21
 8002062:	0fc9      	lsrs	r1, r1, #31
 8002064:	0d52      	lsrs	r2, r2, #21
 8002066:	4284      	cmp	r4, r0
 8002068:	d019      	beq.n	800209e <__eqdf2+0x66>
 800206a:	4282      	cmp	r2, r0
 800206c:	d010      	beq.n	8002090 <__eqdf2+0x58>
 800206e:	2001      	movs	r0, #1
 8002070:	4294      	cmp	r4, r2
 8002072:	d10e      	bne.n	8002092 <__eqdf2+0x5a>
 8002074:	454e      	cmp	r6, r9
 8002076:	d10c      	bne.n	8002092 <__eqdf2+0x5a>
 8002078:	2001      	movs	r0, #1
 800207a:	45c4      	cmp	ip, r8
 800207c:	d109      	bne.n	8002092 <__eqdf2+0x5a>
 800207e:	4559      	cmp	r1, fp
 8002080:	d017      	beq.n	80020b2 <__eqdf2+0x7a>
 8002082:	2c00      	cmp	r4, #0
 8002084:	d105      	bne.n	8002092 <__eqdf2+0x5a>
 8002086:	0030      	movs	r0, r6
 8002088:	4328      	orrs	r0, r5
 800208a:	1e43      	subs	r3, r0, #1
 800208c:	4198      	sbcs	r0, r3
 800208e:	e000      	b.n	8002092 <__eqdf2+0x5a>
 8002090:	2001      	movs	r0, #1
 8002092:	bcf0      	pop	{r4, r5, r6, r7}
 8002094:	46bb      	mov	fp, r7
 8002096:	46b2      	mov	sl, r6
 8002098:	46a9      	mov	r9, r5
 800209a:	46a0      	mov	r8, r4
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209e:	0033      	movs	r3, r6
 80020a0:	2001      	movs	r0, #1
 80020a2:	432b      	orrs	r3, r5
 80020a4:	d1f5      	bne.n	8002092 <__eqdf2+0x5a>
 80020a6:	42a2      	cmp	r2, r4
 80020a8:	d1f3      	bne.n	8002092 <__eqdf2+0x5a>
 80020aa:	464b      	mov	r3, r9
 80020ac:	433b      	orrs	r3, r7
 80020ae:	d1f0      	bne.n	8002092 <__eqdf2+0x5a>
 80020b0:	e7e2      	b.n	8002078 <__eqdf2+0x40>
 80020b2:	2000      	movs	r0, #0
 80020b4:	e7ed      	b.n	8002092 <__eqdf2+0x5a>
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	000007ff 	.word	0x000007ff

080020bc <__gedf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	4647      	mov	r7, r8
 80020c0:	46ce      	mov	lr, r9
 80020c2:	0004      	movs	r4, r0
 80020c4:	0018      	movs	r0, r3
 80020c6:	0016      	movs	r6, r2
 80020c8:	031b      	lsls	r3, r3, #12
 80020ca:	0b1b      	lsrs	r3, r3, #12
 80020cc:	4d2d      	ldr	r5, [pc, #180]	; (8002184 <__gedf2+0xc8>)
 80020ce:	004a      	lsls	r2, r1, #1
 80020d0:	4699      	mov	r9, r3
 80020d2:	b580      	push	{r7, lr}
 80020d4:	0043      	lsls	r3, r0, #1
 80020d6:	030f      	lsls	r7, r1, #12
 80020d8:	46a4      	mov	ip, r4
 80020da:	46b0      	mov	r8, r6
 80020dc:	0b3f      	lsrs	r7, r7, #12
 80020de:	0d52      	lsrs	r2, r2, #21
 80020e0:	0fc9      	lsrs	r1, r1, #31
 80020e2:	0d5b      	lsrs	r3, r3, #21
 80020e4:	0fc0      	lsrs	r0, r0, #31
 80020e6:	42aa      	cmp	r2, r5
 80020e8:	d021      	beq.n	800212e <__gedf2+0x72>
 80020ea:	42ab      	cmp	r3, r5
 80020ec:	d013      	beq.n	8002116 <__gedf2+0x5a>
 80020ee:	2a00      	cmp	r2, #0
 80020f0:	d122      	bne.n	8002138 <__gedf2+0x7c>
 80020f2:	433c      	orrs	r4, r7
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <__gedf2+0x42>
 80020f8:	464d      	mov	r5, r9
 80020fa:	432e      	orrs	r6, r5
 80020fc:	d022      	beq.n	8002144 <__gedf2+0x88>
 80020fe:	2c00      	cmp	r4, #0
 8002100:	d010      	beq.n	8002124 <__gedf2+0x68>
 8002102:	4281      	cmp	r1, r0
 8002104:	d022      	beq.n	800214c <__gedf2+0x90>
 8002106:	2002      	movs	r0, #2
 8002108:	3901      	subs	r1, #1
 800210a:	4008      	ands	r0, r1
 800210c:	3801      	subs	r0, #1
 800210e:	bcc0      	pop	{r6, r7}
 8002110:	46b9      	mov	r9, r7
 8002112:	46b0      	mov	r8, r6
 8002114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002116:	464d      	mov	r5, r9
 8002118:	432e      	orrs	r6, r5
 800211a:	d129      	bne.n	8002170 <__gedf2+0xb4>
 800211c:	2a00      	cmp	r2, #0
 800211e:	d1f0      	bne.n	8002102 <__gedf2+0x46>
 8002120:	433c      	orrs	r4, r7
 8002122:	d1ee      	bne.n	8002102 <__gedf2+0x46>
 8002124:	2800      	cmp	r0, #0
 8002126:	d1f2      	bne.n	800210e <__gedf2+0x52>
 8002128:	2001      	movs	r0, #1
 800212a:	4240      	negs	r0, r0
 800212c:	e7ef      	b.n	800210e <__gedf2+0x52>
 800212e:	003d      	movs	r5, r7
 8002130:	4325      	orrs	r5, r4
 8002132:	d11d      	bne.n	8002170 <__gedf2+0xb4>
 8002134:	4293      	cmp	r3, r2
 8002136:	d0ee      	beq.n	8002116 <__gedf2+0x5a>
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e2      	bne.n	8002102 <__gedf2+0x46>
 800213c:	464c      	mov	r4, r9
 800213e:	4326      	orrs	r6, r4
 8002140:	d1df      	bne.n	8002102 <__gedf2+0x46>
 8002142:	e7e0      	b.n	8002106 <__gedf2+0x4a>
 8002144:	2000      	movs	r0, #0
 8002146:	2c00      	cmp	r4, #0
 8002148:	d0e1      	beq.n	800210e <__gedf2+0x52>
 800214a:	e7dc      	b.n	8002106 <__gedf2+0x4a>
 800214c:	429a      	cmp	r2, r3
 800214e:	dc0a      	bgt.n	8002166 <__gedf2+0xaa>
 8002150:	dbe8      	blt.n	8002124 <__gedf2+0x68>
 8002152:	454f      	cmp	r7, r9
 8002154:	d8d7      	bhi.n	8002106 <__gedf2+0x4a>
 8002156:	d00e      	beq.n	8002176 <__gedf2+0xba>
 8002158:	2000      	movs	r0, #0
 800215a:	454f      	cmp	r7, r9
 800215c:	d2d7      	bcs.n	800210e <__gedf2+0x52>
 800215e:	2900      	cmp	r1, #0
 8002160:	d0e2      	beq.n	8002128 <__gedf2+0x6c>
 8002162:	0008      	movs	r0, r1
 8002164:	e7d3      	b.n	800210e <__gedf2+0x52>
 8002166:	4243      	negs	r3, r0
 8002168:	4158      	adcs	r0, r3
 800216a:	0040      	lsls	r0, r0, #1
 800216c:	3801      	subs	r0, #1
 800216e:	e7ce      	b.n	800210e <__gedf2+0x52>
 8002170:	2002      	movs	r0, #2
 8002172:	4240      	negs	r0, r0
 8002174:	e7cb      	b.n	800210e <__gedf2+0x52>
 8002176:	45c4      	cmp	ip, r8
 8002178:	d8c5      	bhi.n	8002106 <__gedf2+0x4a>
 800217a:	2000      	movs	r0, #0
 800217c:	45c4      	cmp	ip, r8
 800217e:	d2c6      	bcs.n	800210e <__gedf2+0x52>
 8002180:	e7ed      	b.n	800215e <__gedf2+0xa2>
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	000007ff 	.word	0x000007ff

08002188 <__ledf2>:
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	4647      	mov	r7, r8
 800218c:	46ce      	mov	lr, r9
 800218e:	0004      	movs	r4, r0
 8002190:	0018      	movs	r0, r3
 8002192:	0016      	movs	r6, r2
 8002194:	031b      	lsls	r3, r3, #12
 8002196:	0b1b      	lsrs	r3, r3, #12
 8002198:	4d2c      	ldr	r5, [pc, #176]	; (800224c <__ledf2+0xc4>)
 800219a:	004a      	lsls	r2, r1, #1
 800219c:	4699      	mov	r9, r3
 800219e:	b580      	push	{r7, lr}
 80021a0:	0043      	lsls	r3, r0, #1
 80021a2:	030f      	lsls	r7, r1, #12
 80021a4:	46a4      	mov	ip, r4
 80021a6:	46b0      	mov	r8, r6
 80021a8:	0b3f      	lsrs	r7, r7, #12
 80021aa:	0d52      	lsrs	r2, r2, #21
 80021ac:	0fc9      	lsrs	r1, r1, #31
 80021ae:	0d5b      	lsrs	r3, r3, #21
 80021b0:	0fc0      	lsrs	r0, r0, #31
 80021b2:	42aa      	cmp	r2, r5
 80021b4:	d00d      	beq.n	80021d2 <__ledf2+0x4a>
 80021b6:	42ab      	cmp	r3, r5
 80021b8:	d010      	beq.n	80021dc <__ledf2+0x54>
 80021ba:	2a00      	cmp	r2, #0
 80021bc:	d127      	bne.n	800220e <__ledf2+0x86>
 80021be:	433c      	orrs	r4, r7
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d111      	bne.n	80021e8 <__ledf2+0x60>
 80021c4:	464d      	mov	r5, r9
 80021c6:	432e      	orrs	r6, r5
 80021c8:	d10e      	bne.n	80021e8 <__ledf2+0x60>
 80021ca:	2000      	movs	r0, #0
 80021cc:	2c00      	cmp	r4, #0
 80021ce:	d015      	beq.n	80021fc <__ledf2+0x74>
 80021d0:	e00e      	b.n	80021f0 <__ledf2+0x68>
 80021d2:	003d      	movs	r5, r7
 80021d4:	4325      	orrs	r5, r4
 80021d6:	d110      	bne.n	80021fa <__ledf2+0x72>
 80021d8:	4293      	cmp	r3, r2
 80021da:	d118      	bne.n	800220e <__ledf2+0x86>
 80021dc:	464d      	mov	r5, r9
 80021de:	432e      	orrs	r6, r5
 80021e0:	d10b      	bne.n	80021fa <__ledf2+0x72>
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	d102      	bne.n	80021ec <__ledf2+0x64>
 80021e6:	433c      	orrs	r4, r7
 80021e8:	2c00      	cmp	r4, #0
 80021ea:	d00b      	beq.n	8002204 <__ledf2+0x7c>
 80021ec:	4281      	cmp	r1, r0
 80021ee:	d014      	beq.n	800221a <__ledf2+0x92>
 80021f0:	2002      	movs	r0, #2
 80021f2:	3901      	subs	r1, #1
 80021f4:	4008      	ands	r0, r1
 80021f6:	3801      	subs	r0, #1
 80021f8:	e000      	b.n	80021fc <__ledf2+0x74>
 80021fa:	2002      	movs	r0, #2
 80021fc:	bcc0      	pop	{r6, r7}
 80021fe:	46b9      	mov	r9, r7
 8002200:	46b0      	mov	r8, r6
 8002202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002204:	2800      	cmp	r0, #0
 8002206:	d1f9      	bne.n	80021fc <__ledf2+0x74>
 8002208:	2001      	movs	r0, #1
 800220a:	4240      	negs	r0, r0
 800220c:	e7f6      	b.n	80021fc <__ledf2+0x74>
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ec      	bne.n	80021ec <__ledf2+0x64>
 8002212:	464c      	mov	r4, r9
 8002214:	4326      	orrs	r6, r4
 8002216:	d1e9      	bne.n	80021ec <__ledf2+0x64>
 8002218:	e7ea      	b.n	80021f0 <__ledf2+0x68>
 800221a:	429a      	cmp	r2, r3
 800221c:	dd04      	ble.n	8002228 <__ledf2+0xa0>
 800221e:	4243      	negs	r3, r0
 8002220:	4158      	adcs	r0, r3
 8002222:	0040      	lsls	r0, r0, #1
 8002224:	3801      	subs	r0, #1
 8002226:	e7e9      	b.n	80021fc <__ledf2+0x74>
 8002228:	429a      	cmp	r2, r3
 800222a:	dbeb      	blt.n	8002204 <__ledf2+0x7c>
 800222c:	454f      	cmp	r7, r9
 800222e:	d8df      	bhi.n	80021f0 <__ledf2+0x68>
 8002230:	d006      	beq.n	8002240 <__ledf2+0xb8>
 8002232:	2000      	movs	r0, #0
 8002234:	454f      	cmp	r7, r9
 8002236:	d2e1      	bcs.n	80021fc <__ledf2+0x74>
 8002238:	2900      	cmp	r1, #0
 800223a:	d0e5      	beq.n	8002208 <__ledf2+0x80>
 800223c:	0008      	movs	r0, r1
 800223e:	e7dd      	b.n	80021fc <__ledf2+0x74>
 8002240:	45c4      	cmp	ip, r8
 8002242:	d8d5      	bhi.n	80021f0 <__ledf2+0x68>
 8002244:	2000      	movs	r0, #0
 8002246:	45c4      	cmp	ip, r8
 8002248:	d2d8      	bcs.n	80021fc <__ledf2+0x74>
 800224a:	e7f5      	b.n	8002238 <__ledf2+0xb0>
 800224c:	000007ff 	.word	0x000007ff

08002250 <__aeabi_dmul>:
 8002250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002252:	4645      	mov	r5, r8
 8002254:	46de      	mov	lr, fp
 8002256:	4657      	mov	r7, sl
 8002258:	464e      	mov	r6, r9
 800225a:	b5e0      	push	{r5, r6, r7, lr}
 800225c:	001f      	movs	r7, r3
 800225e:	030b      	lsls	r3, r1, #12
 8002260:	0b1b      	lsrs	r3, r3, #12
 8002262:	469b      	mov	fp, r3
 8002264:	004d      	lsls	r5, r1, #1
 8002266:	0fcb      	lsrs	r3, r1, #31
 8002268:	0004      	movs	r4, r0
 800226a:	4691      	mov	r9, r2
 800226c:	4698      	mov	r8, r3
 800226e:	b087      	sub	sp, #28
 8002270:	0d6d      	lsrs	r5, r5, #21
 8002272:	d100      	bne.n	8002276 <__aeabi_dmul+0x26>
 8002274:	e1cd      	b.n	8002612 <__aeabi_dmul+0x3c2>
 8002276:	4bce      	ldr	r3, [pc, #824]	; (80025b0 <__aeabi_dmul+0x360>)
 8002278:	429d      	cmp	r5, r3
 800227a:	d100      	bne.n	800227e <__aeabi_dmul+0x2e>
 800227c:	e1e9      	b.n	8002652 <__aeabi_dmul+0x402>
 800227e:	465a      	mov	r2, fp
 8002280:	0f43      	lsrs	r3, r0, #29
 8002282:	00d2      	lsls	r2, r2, #3
 8002284:	4313      	orrs	r3, r2
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	0412      	lsls	r2, r2, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	00c3      	lsls	r3, r0, #3
 800228e:	469a      	mov	sl, r3
 8002290:	4bc8      	ldr	r3, [pc, #800]	; (80025b4 <__aeabi_dmul+0x364>)
 8002292:	4693      	mov	fp, r2
 8002294:	469c      	mov	ip, r3
 8002296:	2300      	movs	r3, #0
 8002298:	2600      	movs	r6, #0
 800229a:	4465      	add	r5, ip
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	033c      	lsls	r4, r7, #12
 80022a0:	007b      	lsls	r3, r7, #1
 80022a2:	4648      	mov	r0, r9
 80022a4:	0b24      	lsrs	r4, r4, #12
 80022a6:	0d5b      	lsrs	r3, r3, #21
 80022a8:	0fff      	lsrs	r7, r7, #31
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dmul+0x60>
 80022ae:	e189      	b.n	80025c4 <__aeabi_dmul+0x374>
 80022b0:	4abf      	ldr	r2, [pc, #764]	; (80025b0 <__aeabi_dmul+0x360>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d019      	beq.n	80022ea <__aeabi_dmul+0x9a>
 80022b6:	0f42      	lsrs	r2, r0, #29
 80022b8:	00e4      	lsls	r4, r4, #3
 80022ba:	4322      	orrs	r2, r4
 80022bc:	2480      	movs	r4, #128	; 0x80
 80022be:	0424      	lsls	r4, r4, #16
 80022c0:	4314      	orrs	r4, r2
 80022c2:	4abc      	ldr	r2, [pc, #752]	; (80025b4 <__aeabi_dmul+0x364>)
 80022c4:	2100      	movs	r1, #0
 80022c6:	4694      	mov	ip, r2
 80022c8:	4642      	mov	r2, r8
 80022ca:	4463      	add	r3, ip
 80022cc:	195b      	adds	r3, r3, r5
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	9b01      	ldr	r3, [sp, #4]
 80022d2:	407a      	eors	r2, r7
 80022d4:	3301      	adds	r3, #1
 80022d6:	00c0      	lsls	r0, r0, #3
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	2e0a      	cmp	r6, #10
 80022de:	dd1c      	ble.n	800231a <__aeabi_dmul+0xca>
 80022e0:	003a      	movs	r2, r7
 80022e2:	2e0b      	cmp	r6, #11
 80022e4:	d05e      	beq.n	80023a4 <__aeabi_dmul+0x154>
 80022e6:	4647      	mov	r7, r8
 80022e8:	e056      	b.n	8002398 <__aeabi_dmul+0x148>
 80022ea:	4649      	mov	r1, r9
 80022ec:	4bb0      	ldr	r3, [pc, #704]	; (80025b0 <__aeabi_dmul+0x360>)
 80022ee:	4321      	orrs	r1, r4
 80022f0:	18eb      	adds	r3, r5, r3
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	2900      	cmp	r1, #0
 80022f6:	d12a      	bne.n	800234e <__aeabi_dmul+0xfe>
 80022f8:	2080      	movs	r0, #128	; 0x80
 80022fa:	2202      	movs	r2, #2
 80022fc:	0100      	lsls	r0, r0, #4
 80022fe:	002b      	movs	r3, r5
 8002300:	4684      	mov	ip, r0
 8002302:	4316      	orrs	r6, r2
 8002304:	4642      	mov	r2, r8
 8002306:	4463      	add	r3, ip
 8002308:	407a      	eors	r2, r7
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	9302      	str	r3, [sp, #8]
 800230e:	2e0a      	cmp	r6, #10
 8002310:	dd00      	ble.n	8002314 <__aeabi_dmul+0xc4>
 8002312:	e231      	b.n	8002778 <__aeabi_dmul+0x528>
 8002314:	2000      	movs	r0, #0
 8002316:	2400      	movs	r4, #0
 8002318:	2102      	movs	r1, #2
 800231a:	2e02      	cmp	r6, #2
 800231c:	dc26      	bgt.n	800236c <__aeabi_dmul+0x11c>
 800231e:	3e01      	subs	r6, #1
 8002320:	2e01      	cmp	r6, #1
 8002322:	d852      	bhi.n	80023ca <__aeabi_dmul+0x17a>
 8002324:	2902      	cmp	r1, #2
 8002326:	d04c      	beq.n	80023c2 <__aeabi_dmul+0x172>
 8002328:	2901      	cmp	r1, #1
 800232a:	d000      	beq.n	800232e <__aeabi_dmul+0xde>
 800232c:	e118      	b.n	8002560 <__aeabi_dmul+0x310>
 800232e:	2300      	movs	r3, #0
 8002330:	2400      	movs	r4, #0
 8002332:	2500      	movs	r5, #0
 8002334:	051b      	lsls	r3, r3, #20
 8002336:	4323      	orrs	r3, r4
 8002338:	07d2      	lsls	r2, r2, #31
 800233a:	4313      	orrs	r3, r2
 800233c:	0028      	movs	r0, r5
 800233e:	0019      	movs	r1, r3
 8002340:	b007      	add	sp, #28
 8002342:	bcf0      	pop	{r4, r5, r6, r7}
 8002344:	46bb      	mov	fp, r7
 8002346:	46b2      	mov	sl, r6
 8002348:	46a9      	mov	r9, r5
 800234a:	46a0      	mov	r8, r4
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	2203      	movs	r2, #3
 8002352:	0109      	lsls	r1, r1, #4
 8002354:	002b      	movs	r3, r5
 8002356:	468c      	mov	ip, r1
 8002358:	4316      	orrs	r6, r2
 800235a:	4642      	mov	r2, r8
 800235c:	4463      	add	r3, ip
 800235e:	407a      	eors	r2, r7
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	9302      	str	r3, [sp, #8]
 8002364:	2e0a      	cmp	r6, #10
 8002366:	dd00      	ble.n	800236a <__aeabi_dmul+0x11a>
 8002368:	e228      	b.n	80027bc <__aeabi_dmul+0x56c>
 800236a:	2103      	movs	r1, #3
 800236c:	2501      	movs	r5, #1
 800236e:	40b5      	lsls	r5, r6
 8002370:	46ac      	mov	ip, r5
 8002372:	26a6      	movs	r6, #166	; 0xa6
 8002374:	4663      	mov	r3, ip
 8002376:	00f6      	lsls	r6, r6, #3
 8002378:	4035      	ands	r5, r6
 800237a:	4233      	tst	r3, r6
 800237c:	d10b      	bne.n	8002396 <__aeabi_dmul+0x146>
 800237e:	2690      	movs	r6, #144	; 0x90
 8002380:	00b6      	lsls	r6, r6, #2
 8002382:	4233      	tst	r3, r6
 8002384:	d118      	bne.n	80023b8 <__aeabi_dmul+0x168>
 8002386:	3eb9      	subs	r6, #185	; 0xb9
 8002388:	3eff      	subs	r6, #255	; 0xff
 800238a:	421e      	tst	r6, r3
 800238c:	d01d      	beq.n	80023ca <__aeabi_dmul+0x17a>
 800238e:	46a3      	mov	fp, r4
 8002390:	4682      	mov	sl, r0
 8002392:	9100      	str	r1, [sp, #0]
 8002394:	e000      	b.n	8002398 <__aeabi_dmul+0x148>
 8002396:	0017      	movs	r7, r2
 8002398:	9900      	ldr	r1, [sp, #0]
 800239a:	003a      	movs	r2, r7
 800239c:	2902      	cmp	r1, #2
 800239e:	d010      	beq.n	80023c2 <__aeabi_dmul+0x172>
 80023a0:	465c      	mov	r4, fp
 80023a2:	4650      	mov	r0, sl
 80023a4:	2903      	cmp	r1, #3
 80023a6:	d1bf      	bne.n	8002328 <__aeabi_dmul+0xd8>
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	031b      	lsls	r3, r3, #12
 80023ac:	431c      	orrs	r4, r3
 80023ae:	0324      	lsls	r4, r4, #12
 80023b0:	0005      	movs	r5, r0
 80023b2:	4b7f      	ldr	r3, [pc, #508]	; (80025b0 <__aeabi_dmul+0x360>)
 80023b4:	0b24      	lsrs	r4, r4, #12
 80023b6:	e7bd      	b.n	8002334 <__aeabi_dmul+0xe4>
 80023b8:	2480      	movs	r4, #128	; 0x80
 80023ba:	2200      	movs	r2, #0
 80023bc:	4b7c      	ldr	r3, [pc, #496]	; (80025b0 <__aeabi_dmul+0x360>)
 80023be:	0324      	lsls	r4, r4, #12
 80023c0:	e7b8      	b.n	8002334 <__aeabi_dmul+0xe4>
 80023c2:	2400      	movs	r4, #0
 80023c4:	2500      	movs	r5, #0
 80023c6:	4b7a      	ldr	r3, [pc, #488]	; (80025b0 <__aeabi_dmul+0x360>)
 80023c8:	e7b4      	b.n	8002334 <__aeabi_dmul+0xe4>
 80023ca:	4653      	mov	r3, sl
 80023cc:	041e      	lsls	r6, r3, #16
 80023ce:	0c36      	lsrs	r6, r6, #16
 80023d0:	0c1f      	lsrs	r7, r3, #16
 80023d2:	0033      	movs	r3, r6
 80023d4:	0c01      	lsrs	r1, r0, #16
 80023d6:	0400      	lsls	r0, r0, #16
 80023d8:	0c00      	lsrs	r0, r0, #16
 80023da:	4343      	muls	r3, r0
 80023dc:	4698      	mov	r8, r3
 80023de:	0003      	movs	r3, r0
 80023e0:	437b      	muls	r3, r7
 80023e2:	4699      	mov	r9, r3
 80023e4:	0033      	movs	r3, r6
 80023e6:	434b      	muls	r3, r1
 80023e8:	469c      	mov	ip, r3
 80023ea:	4643      	mov	r3, r8
 80023ec:	000d      	movs	r5, r1
 80023ee:	0c1b      	lsrs	r3, r3, #16
 80023f0:	469a      	mov	sl, r3
 80023f2:	437d      	muls	r5, r7
 80023f4:	44cc      	add	ip, r9
 80023f6:	44d4      	add	ip, sl
 80023f8:	9500      	str	r5, [sp, #0]
 80023fa:	45e1      	cmp	r9, ip
 80023fc:	d904      	bls.n	8002408 <__aeabi_dmul+0x1b8>
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	025b      	lsls	r3, r3, #9
 8002402:	4699      	mov	r9, r3
 8002404:	444d      	add	r5, r9
 8002406:	9500      	str	r5, [sp, #0]
 8002408:	4663      	mov	r3, ip
 800240a:	0c1b      	lsrs	r3, r3, #16
 800240c:	001d      	movs	r5, r3
 800240e:	4663      	mov	r3, ip
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	469c      	mov	ip, r3
 8002414:	4643      	mov	r3, r8
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	4698      	mov	r8, r3
 800241c:	4663      	mov	r3, ip
 800241e:	4443      	add	r3, r8
 8002420:	9303      	str	r3, [sp, #12]
 8002422:	0c23      	lsrs	r3, r4, #16
 8002424:	4698      	mov	r8, r3
 8002426:	0033      	movs	r3, r6
 8002428:	0424      	lsls	r4, r4, #16
 800242a:	0c24      	lsrs	r4, r4, #16
 800242c:	4363      	muls	r3, r4
 800242e:	469c      	mov	ip, r3
 8002430:	0023      	movs	r3, r4
 8002432:	437b      	muls	r3, r7
 8002434:	4699      	mov	r9, r3
 8002436:	4643      	mov	r3, r8
 8002438:	435e      	muls	r6, r3
 800243a:	435f      	muls	r7, r3
 800243c:	444e      	add	r6, r9
 800243e:	4663      	mov	r3, ip
 8002440:	46b2      	mov	sl, r6
 8002442:	0c1e      	lsrs	r6, r3, #16
 8002444:	4456      	add	r6, sl
 8002446:	45b1      	cmp	r9, r6
 8002448:	d903      	bls.n	8002452 <__aeabi_dmul+0x202>
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	025b      	lsls	r3, r3, #9
 800244e:	4699      	mov	r9, r3
 8002450:	444f      	add	r7, r9
 8002452:	0c33      	lsrs	r3, r6, #16
 8002454:	4699      	mov	r9, r3
 8002456:	003b      	movs	r3, r7
 8002458:	444b      	add	r3, r9
 800245a:	9305      	str	r3, [sp, #20]
 800245c:	4663      	mov	r3, ip
 800245e:	46ac      	mov	ip, r5
 8002460:	041f      	lsls	r7, r3, #16
 8002462:	0c3f      	lsrs	r7, r7, #16
 8002464:	0436      	lsls	r6, r6, #16
 8002466:	19f6      	adds	r6, r6, r7
 8002468:	44b4      	add	ip, r6
 800246a:	4663      	mov	r3, ip
 800246c:	9304      	str	r3, [sp, #16]
 800246e:	465b      	mov	r3, fp
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	469c      	mov	ip, r3
 8002474:	465b      	mov	r3, fp
 8002476:	041f      	lsls	r7, r3, #16
 8002478:	0c3f      	lsrs	r7, r7, #16
 800247a:	003b      	movs	r3, r7
 800247c:	4343      	muls	r3, r0
 800247e:	4699      	mov	r9, r3
 8002480:	4663      	mov	r3, ip
 8002482:	4343      	muls	r3, r0
 8002484:	469a      	mov	sl, r3
 8002486:	464b      	mov	r3, r9
 8002488:	4660      	mov	r0, ip
 800248a:	0c1b      	lsrs	r3, r3, #16
 800248c:	469b      	mov	fp, r3
 800248e:	4348      	muls	r0, r1
 8002490:	4379      	muls	r1, r7
 8002492:	4451      	add	r1, sl
 8002494:	4459      	add	r1, fp
 8002496:	458a      	cmp	sl, r1
 8002498:	d903      	bls.n	80024a2 <__aeabi_dmul+0x252>
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	025b      	lsls	r3, r3, #9
 800249e:	469a      	mov	sl, r3
 80024a0:	4450      	add	r0, sl
 80024a2:	0c0b      	lsrs	r3, r1, #16
 80024a4:	469a      	mov	sl, r3
 80024a6:	464b      	mov	r3, r9
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	4699      	mov	r9, r3
 80024ae:	003b      	movs	r3, r7
 80024b0:	4363      	muls	r3, r4
 80024b2:	0409      	lsls	r1, r1, #16
 80024b4:	4645      	mov	r5, r8
 80024b6:	4449      	add	r1, r9
 80024b8:	4699      	mov	r9, r3
 80024ba:	4663      	mov	r3, ip
 80024bc:	435c      	muls	r4, r3
 80024be:	436b      	muls	r3, r5
 80024c0:	469c      	mov	ip, r3
 80024c2:	464b      	mov	r3, r9
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	4698      	mov	r8, r3
 80024c8:	436f      	muls	r7, r5
 80024ca:	193f      	adds	r7, r7, r4
 80024cc:	4447      	add	r7, r8
 80024ce:	4450      	add	r0, sl
 80024d0:	42bc      	cmp	r4, r7
 80024d2:	d903      	bls.n	80024dc <__aeabi_dmul+0x28c>
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	025b      	lsls	r3, r3, #9
 80024d8:	4698      	mov	r8, r3
 80024da:	44c4      	add	ip, r8
 80024dc:	9b04      	ldr	r3, [sp, #16]
 80024de:	9d00      	ldr	r5, [sp, #0]
 80024e0:	4698      	mov	r8, r3
 80024e2:	4445      	add	r5, r8
 80024e4:	42b5      	cmp	r5, r6
 80024e6:	41b6      	sbcs	r6, r6
 80024e8:	4273      	negs	r3, r6
 80024ea:	4698      	mov	r8, r3
 80024ec:	464b      	mov	r3, r9
 80024ee:	041e      	lsls	r6, r3, #16
 80024f0:	9b05      	ldr	r3, [sp, #20]
 80024f2:	043c      	lsls	r4, r7, #16
 80024f4:	4699      	mov	r9, r3
 80024f6:	0c36      	lsrs	r6, r6, #16
 80024f8:	19a4      	adds	r4, r4, r6
 80024fa:	444c      	add	r4, r9
 80024fc:	46a1      	mov	r9, r4
 80024fe:	4683      	mov	fp, r0
 8002500:	186e      	adds	r6, r5, r1
 8002502:	44c1      	add	r9, r8
 8002504:	428e      	cmp	r6, r1
 8002506:	4189      	sbcs	r1, r1
 8002508:	44cb      	add	fp, r9
 800250a:	465d      	mov	r5, fp
 800250c:	4249      	negs	r1, r1
 800250e:	186d      	adds	r5, r5, r1
 8002510:	429c      	cmp	r4, r3
 8002512:	41a4      	sbcs	r4, r4
 8002514:	45c1      	cmp	r9, r8
 8002516:	419b      	sbcs	r3, r3
 8002518:	4583      	cmp	fp, r0
 800251a:	4180      	sbcs	r0, r0
 800251c:	428d      	cmp	r5, r1
 800251e:	4189      	sbcs	r1, r1
 8002520:	425b      	negs	r3, r3
 8002522:	4264      	negs	r4, r4
 8002524:	431c      	orrs	r4, r3
 8002526:	4240      	negs	r0, r0
 8002528:	9b03      	ldr	r3, [sp, #12]
 800252a:	4249      	negs	r1, r1
 800252c:	4301      	orrs	r1, r0
 800252e:	0270      	lsls	r0, r6, #9
 8002530:	0c3f      	lsrs	r7, r7, #16
 8002532:	4318      	orrs	r0, r3
 8002534:	19e4      	adds	r4, r4, r7
 8002536:	1e47      	subs	r7, r0, #1
 8002538:	41b8      	sbcs	r0, r7
 800253a:	1864      	adds	r4, r4, r1
 800253c:	4464      	add	r4, ip
 800253e:	0df6      	lsrs	r6, r6, #23
 8002540:	0261      	lsls	r1, r4, #9
 8002542:	4330      	orrs	r0, r6
 8002544:	0dec      	lsrs	r4, r5, #23
 8002546:	026e      	lsls	r6, r5, #9
 8002548:	430c      	orrs	r4, r1
 800254a:	4330      	orrs	r0, r6
 800254c:	01c9      	lsls	r1, r1, #7
 800254e:	d400      	bmi.n	8002552 <__aeabi_dmul+0x302>
 8002550:	e0f1      	b.n	8002736 <__aeabi_dmul+0x4e6>
 8002552:	2101      	movs	r1, #1
 8002554:	0843      	lsrs	r3, r0, #1
 8002556:	4001      	ands	r1, r0
 8002558:	430b      	orrs	r3, r1
 800255a:	07e0      	lsls	r0, r4, #31
 800255c:	4318      	orrs	r0, r3
 800255e:	0864      	lsrs	r4, r4, #1
 8002560:	4915      	ldr	r1, [pc, #84]	; (80025b8 <__aeabi_dmul+0x368>)
 8002562:	9b02      	ldr	r3, [sp, #8]
 8002564:	468c      	mov	ip, r1
 8002566:	4463      	add	r3, ip
 8002568:	2b00      	cmp	r3, #0
 800256a:	dc00      	bgt.n	800256e <__aeabi_dmul+0x31e>
 800256c:	e097      	b.n	800269e <__aeabi_dmul+0x44e>
 800256e:	0741      	lsls	r1, r0, #29
 8002570:	d009      	beq.n	8002586 <__aeabi_dmul+0x336>
 8002572:	210f      	movs	r1, #15
 8002574:	4001      	ands	r1, r0
 8002576:	2904      	cmp	r1, #4
 8002578:	d005      	beq.n	8002586 <__aeabi_dmul+0x336>
 800257a:	1d01      	adds	r1, r0, #4
 800257c:	4281      	cmp	r1, r0
 800257e:	4180      	sbcs	r0, r0
 8002580:	4240      	negs	r0, r0
 8002582:	1824      	adds	r4, r4, r0
 8002584:	0008      	movs	r0, r1
 8002586:	01e1      	lsls	r1, r4, #7
 8002588:	d506      	bpl.n	8002598 <__aeabi_dmul+0x348>
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	00c9      	lsls	r1, r1, #3
 800258e:	468c      	mov	ip, r1
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <__aeabi_dmul+0x36c>)
 8002592:	401c      	ands	r4, r3
 8002594:	9b02      	ldr	r3, [sp, #8]
 8002596:	4463      	add	r3, ip
 8002598:	4909      	ldr	r1, [pc, #36]	; (80025c0 <__aeabi_dmul+0x370>)
 800259a:	428b      	cmp	r3, r1
 800259c:	dd00      	ble.n	80025a0 <__aeabi_dmul+0x350>
 800259e:	e710      	b.n	80023c2 <__aeabi_dmul+0x172>
 80025a0:	0761      	lsls	r1, r4, #29
 80025a2:	08c5      	lsrs	r5, r0, #3
 80025a4:	0264      	lsls	r4, r4, #9
 80025a6:	055b      	lsls	r3, r3, #21
 80025a8:	430d      	orrs	r5, r1
 80025aa:	0b24      	lsrs	r4, r4, #12
 80025ac:	0d5b      	lsrs	r3, r3, #21
 80025ae:	e6c1      	b.n	8002334 <__aeabi_dmul+0xe4>
 80025b0:	000007ff 	.word	0x000007ff
 80025b4:	fffffc01 	.word	0xfffffc01
 80025b8:	000003ff 	.word	0x000003ff
 80025bc:	feffffff 	.word	0xfeffffff
 80025c0:	000007fe 	.word	0x000007fe
 80025c4:	464b      	mov	r3, r9
 80025c6:	4323      	orrs	r3, r4
 80025c8:	d059      	beq.n	800267e <__aeabi_dmul+0x42e>
 80025ca:	2c00      	cmp	r4, #0
 80025cc:	d100      	bne.n	80025d0 <__aeabi_dmul+0x380>
 80025ce:	e0a3      	b.n	8002718 <__aeabi_dmul+0x4c8>
 80025d0:	0020      	movs	r0, r4
 80025d2:	f000 fdf9 	bl	80031c8 <__clzsi2>
 80025d6:	0001      	movs	r1, r0
 80025d8:	0003      	movs	r3, r0
 80025da:	390b      	subs	r1, #11
 80025dc:	221d      	movs	r2, #29
 80025de:	1a52      	subs	r2, r2, r1
 80025e0:	4649      	mov	r1, r9
 80025e2:	0018      	movs	r0, r3
 80025e4:	40d1      	lsrs	r1, r2
 80025e6:	464a      	mov	r2, r9
 80025e8:	3808      	subs	r0, #8
 80025ea:	4082      	lsls	r2, r0
 80025ec:	4084      	lsls	r4, r0
 80025ee:	0010      	movs	r0, r2
 80025f0:	430c      	orrs	r4, r1
 80025f2:	4a74      	ldr	r2, [pc, #464]	; (80027c4 <__aeabi_dmul+0x574>)
 80025f4:	1aeb      	subs	r3, r5, r3
 80025f6:	4694      	mov	ip, r2
 80025f8:	4642      	mov	r2, r8
 80025fa:	4463      	add	r3, ip
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	407a      	eors	r2, r7
 8002602:	3301      	adds	r3, #1
 8002604:	2100      	movs	r1, #0
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	9302      	str	r3, [sp, #8]
 800260a:	2e0a      	cmp	r6, #10
 800260c:	dd00      	ble.n	8002610 <__aeabi_dmul+0x3c0>
 800260e:	e667      	b.n	80022e0 <__aeabi_dmul+0x90>
 8002610:	e683      	b.n	800231a <__aeabi_dmul+0xca>
 8002612:	465b      	mov	r3, fp
 8002614:	4303      	orrs	r3, r0
 8002616:	469a      	mov	sl, r3
 8002618:	d02a      	beq.n	8002670 <__aeabi_dmul+0x420>
 800261a:	465b      	mov	r3, fp
 800261c:	2b00      	cmp	r3, #0
 800261e:	d06d      	beq.n	80026fc <__aeabi_dmul+0x4ac>
 8002620:	4658      	mov	r0, fp
 8002622:	f000 fdd1 	bl	80031c8 <__clzsi2>
 8002626:	0001      	movs	r1, r0
 8002628:	0003      	movs	r3, r0
 800262a:	390b      	subs	r1, #11
 800262c:	221d      	movs	r2, #29
 800262e:	1a52      	subs	r2, r2, r1
 8002630:	0021      	movs	r1, r4
 8002632:	0018      	movs	r0, r3
 8002634:	465d      	mov	r5, fp
 8002636:	40d1      	lsrs	r1, r2
 8002638:	3808      	subs	r0, #8
 800263a:	4085      	lsls	r5, r0
 800263c:	000a      	movs	r2, r1
 800263e:	4084      	lsls	r4, r0
 8002640:	432a      	orrs	r2, r5
 8002642:	4693      	mov	fp, r2
 8002644:	46a2      	mov	sl, r4
 8002646:	4d5f      	ldr	r5, [pc, #380]	; (80027c4 <__aeabi_dmul+0x574>)
 8002648:	2600      	movs	r6, #0
 800264a:	1aed      	subs	r5, r5, r3
 800264c:	2300      	movs	r3, #0
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	e625      	b.n	800229e <__aeabi_dmul+0x4e>
 8002652:	465b      	mov	r3, fp
 8002654:	4303      	orrs	r3, r0
 8002656:	469a      	mov	sl, r3
 8002658:	d105      	bne.n	8002666 <__aeabi_dmul+0x416>
 800265a:	2300      	movs	r3, #0
 800265c:	469b      	mov	fp, r3
 800265e:	3302      	adds	r3, #2
 8002660:	2608      	movs	r6, #8
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	e61b      	b.n	800229e <__aeabi_dmul+0x4e>
 8002666:	2303      	movs	r3, #3
 8002668:	4682      	mov	sl, r0
 800266a:	260c      	movs	r6, #12
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	e616      	b.n	800229e <__aeabi_dmul+0x4e>
 8002670:	2300      	movs	r3, #0
 8002672:	469b      	mov	fp, r3
 8002674:	3301      	adds	r3, #1
 8002676:	2604      	movs	r6, #4
 8002678:	2500      	movs	r5, #0
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	e60f      	b.n	800229e <__aeabi_dmul+0x4e>
 800267e:	4642      	mov	r2, r8
 8002680:	3301      	adds	r3, #1
 8002682:	9501      	str	r5, [sp, #4]
 8002684:	431e      	orrs	r6, r3
 8002686:	9b01      	ldr	r3, [sp, #4]
 8002688:	407a      	eors	r2, r7
 800268a:	3301      	adds	r3, #1
 800268c:	2400      	movs	r4, #0
 800268e:	2000      	movs	r0, #0
 8002690:	2101      	movs	r1, #1
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	9302      	str	r3, [sp, #8]
 8002696:	2e0a      	cmp	r6, #10
 8002698:	dd00      	ble.n	800269c <__aeabi_dmul+0x44c>
 800269a:	e621      	b.n	80022e0 <__aeabi_dmul+0x90>
 800269c:	e63d      	b.n	800231a <__aeabi_dmul+0xca>
 800269e:	2101      	movs	r1, #1
 80026a0:	1ac9      	subs	r1, r1, r3
 80026a2:	2938      	cmp	r1, #56	; 0x38
 80026a4:	dd00      	ble.n	80026a8 <__aeabi_dmul+0x458>
 80026a6:	e642      	b.n	800232e <__aeabi_dmul+0xde>
 80026a8:	291f      	cmp	r1, #31
 80026aa:	dd47      	ble.n	800273c <__aeabi_dmul+0x4ec>
 80026ac:	261f      	movs	r6, #31
 80026ae:	0025      	movs	r5, r4
 80026b0:	4276      	negs	r6, r6
 80026b2:	1af3      	subs	r3, r6, r3
 80026b4:	40dd      	lsrs	r5, r3
 80026b6:	002b      	movs	r3, r5
 80026b8:	2920      	cmp	r1, #32
 80026ba:	d005      	beq.n	80026c8 <__aeabi_dmul+0x478>
 80026bc:	4942      	ldr	r1, [pc, #264]	; (80027c8 <__aeabi_dmul+0x578>)
 80026be:	9d02      	ldr	r5, [sp, #8]
 80026c0:	468c      	mov	ip, r1
 80026c2:	4465      	add	r5, ip
 80026c4:	40ac      	lsls	r4, r5
 80026c6:	4320      	orrs	r0, r4
 80026c8:	1e41      	subs	r1, r0, #1
 80026ca:	4188      	sbcs	r0, r1
 80026cc:	4318      	orrs	r0, r3
 80026ce:	2307      	movs	r3, #7
 80026d0:	001d      	movs	r5, r3
 80026d2:	2400      	movs	r4, #0
 80026d4:	4005      	ands	r5, r0
 80026d6:	4203      	tst	r3, r0
 80026d8:	d04a      	beq.n	8002770 <__aeabi_dmul+0x520>
 80026da:	230f      	movs	r3, #15
 80026dc:	2400      	movs	r4, #0
 80026de:	4003      	ands	r3, r0
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d042      	beq.n	800276a <__aeabi_dmul+0x51a>
 80026e4:	1d03      	adds	r3, r0, #4
 80026e6:	4283      	cmp	r3, r0
 80026e8:	4180      	sbcs	r0, r0
 80026ea:	4240      	negs	r0, r0
 80026ec:	1824      	adds	r4, r4, r0
 80026ee:	0018      	movs	r0, r3
 80026f0:	0223      	lsls	r3, r4, #8
 80026f2:	d53a      	bpl.n	800276a <__aeabi_dmul+0x51a>
 80026f4:	2301      	movs	r3, #1
 80026f6:	2400      	movs	r4, #0
 80026f8:	2500      	movs	r5, #0
 80026fa:	e61b      	b.n	8002334 <__aeabi_dmul+0xe4>
 80026fc:	f000 fd64 	bl	80031c8 <__clzsi2>
 8002700:	0001      	movs	r1, r0
 8002702:	0003      	movs	r3, r0
 8002704:	3115      	adds	r1, #21
 8002706:	3320      	adds	r3, #32
 8002708:	291c      	cmp	r1, #28
 800270a:	dd8f      	ble.n	800262c <__aeabi_dmul+0x3dc>
 800270c:	3808      	subs	r0, #8
 800270e:	2200      	movs	r2, #0
 8002710:	4084      	lsls	r4, r0
 8002712:	4692      	mov	sl, r2
 8002714:	46a3      	mov	fp, r4
 8002716:	e796      	b.n	8002646 <__aeabi_dmul+0x3f6>
 8002718:	f000 fd56 	bl	80031c8 <__clzsi2>
 800271c:	0001      	movs	r1, r0
 800271e:	0003      	movs	r3, r0
 8002720:	3115      	adds	r1, #21
 8002722:	3320      	adds	r3, #32
 8002724:	291c      	cmp	r1, #28
 8002726:	dc00      	bgt.n	800272a <__aeabi_dmul+0x4da>
 8002728:	e758      	b.n	80025dc <__aeabi_dmul+0x38c>
 800272a:	0002      	movs	r2, r0
 800272c:	464c      	mov	r4, r9
 800272e:	3a08      	subs	r2, #8
 8002730:	2000      	movs	r0, #0
 8002732:	4094      	lsls	r4, r2
 8002734:	e75d      	b.n	80025f2 <__aeabi_dmul+0x3a2>
 8002736:	9b01      	ldr	r3, [sp, #4]
 8002738:	9302      	str	r3, [sp, #8]
 800273a:	e711      	b.n	8002560 <__aeabi_dmul+0x310>
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <__aeabi_dmul+0x57c>)
 800273e:	0026      	movs	r6, r4
 8002740:	469c      	mov	ip, r3
 8002742:	0003      	movs	r3, r0
 8002744:	9d02      	ldr	r5, [sp, #8]
 8002746:	40cb      	lsrs	r3, r1
 8002748:	4465      	add	r5, ip
 800274a:	40ae      	lsls	r6, r5
 800274c:	431e      	orrs	r6, r3
 800274e:	0003      	movs	r3, r0
 8002750:	40ab      	lsls	r3, r5
 8002752:	1e58      	subs	r0, r3, #1
 8002754:	4183      	sbcs	r3, r0
 8002756:	0030      	movs	r0, r6
 8002758:	4318      	orrs	r0, r3
 800275a:	40cc      	lsrs	r4, r1
 800275c:	0743      	lsls	r3, r0, #29
 800275e:	d0c7      	beq.n	80026f0 <__aeabi_dmul+0x4a0>
 8002760:	230f      	movs	r3, #15
 8002762:	4003      	ands	r3, r0
 8002764:	2b04      	cmp	r3, #4
 8002766:	d1bd      	bne.n	80026e4 <__aeabi_dmul+0x494>
 8002768:	e7c2      	b.n	80026f0 <__aeabi_dmul+0x4a0>
 800276a:	0765      	lsls	r5, r4, #29
 800276c:	0264      	lsls	r4, r4, #9
 800276e:	0b24      	lsrs	r4, r4, #12
 8002770:	08c0      	lsrs	r0, r0, #3
 8002772:	2300      	movs	r3, #0
 8002774:	4305      	orrs	r5, r0
 8002776:	e5dd      	b.n	8002334 <__aeabi_dmul+0xe4>
 8002778:	2500      	movs	r5, #0
 800277a:	2302      	movs	r3, #2
 800277c:	2e0f      	cmp	r6, #15
 800277e:	d10c      	bne.n	800279a <__aeabi_dmul+0x54a>
 8002780:	2480      	movs	r4, #128	; 0x80
 8002782:	465b      	mov	r3, fp
 8002784:	0324      	lsls	r4, r4, #12
 8002786:	4223      	tst	r3, r4
 8002788:	d00e      	beq.n	80027a8 <__aeabi_dmul+0x558>
 800278a:	4221      	tst	r1, r4
 800278c:	d10c      	bne.n	80027a8 <__aeabi_dmul+0x558>
 800278e:	430c      	orrs	r4, r1
 8002790:	0324      	lsls	r4, r4, #12
 8002792:	003a      	movs	r2, r7
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <__aeabi_dmul+0x580>)
 8002796:	0b24      	lsrs	r4, r4, #12
 8002798:	e5cc      	b.n	8002334 <__aeabi_dmul+0xe4>
 800279a:	2e0b      	cmp	r6, #11
 800279c:	d000      	beq.n	80027a0 <__aeabi_dmul+0x550>
 800279e:	e5a2      	b.n	80022e6 <__aeabi_dmul+0x96>
 80027a0:	468b      	mov	fp, r1
 80027a2:	46aa      	mov	sl, r5
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	e5f7      	b.n	8002398 <__aeabi_dmul+0x148>
 80027a8:	2480      	movs	r4, #128	; 0x80
 80027aa:	465b      	mov	r3, fp
 80027ac:	0324      	lsls	r4, r4, #12
 80027ae:	431c      	orrs	r4, r3
 80027b0:	0324      	lsls	r4, r4, #12
 80027b2:	4642      	mov	r2, r8
 80027b4:	4655      	mov	r5, sl
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <__aeabi_dmul+0x580>)
 80027b8:	0b24      	lsrs	r4, r4, #12
 80027ba:	e5bb      	b.n	8002334 <__aeabi_dmul+0xe4>
 80027bc:	464d      	mov	r5, r9
 80027be:	0021      	movs	r1, r4
 80027c0:	2303      	movs	r3, #3
 80027c2:	e7db      	b.n	800277c <__aeabi_dmul+0x52c>
 80027c4:	fffffc0d 	.word	0xfffffc0d
 80027c8:	0000043e 	.word	0x0000043e
 80027cc:	0000041e 	.word	0x0000041e
 80027d0:	000007ff 	.word	0x000007ff

080027d4 <__aeabi_dsub>:
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d6:	4657      	mov	r7, sl
 80027d8:	464e      	mov	r6, r9
 80027da:	4645      	mov	r5, r8
 80027dc:	46de      	mov	lr, fp
 80027de:	b5e0      	push	{r5, r6, r7, lr}
 80027e0:	000d      	movs	r5, r1
 80027e2:	0004      	movs	r4, r0
 80027e4:	0019      	movs	r1, r3
 80027e6:	0010      	movs	r0, r2
 80027e8:	032b      	lsls	r3, r5, #12
 80027ea:	0a5b      	lsrs	r3, r3, #9
 80027ec:	0f62      	lsrs	r2, r4, #29
 80027ee:	431a      	orrs	r2, r3
 80027f0:	00e3      	lsls	r3, r4, #3
 80027f2:	030c      	lsls	r4, r1, #12
 80027f4:	0a64      	lsrs	r4, r4, #9
 80027f6:	0f47      	lsrs	r7, r0, #29
 80027f8:	4327      	orrs	r7, r4
 80027fa:	4cd0      	ldr	r4, [pc, #832]	; (8002b3c <__aeabi_dsub+0x368>)
 80027fc:	006e      	lsls	r6, r5, #1
 80027fe:	4691      	mov	r9, r2
 8002800:	b083      	sub	sp, #12
 8002802:	004a      	lsls	r2, r1, #1
 8002804:	00c0      	lsls	r0, r0, #3
 8002806:	4698      	mov	r8, r3
 8002808:	46a2      	mov	sl, r4
 800280a:	0d76      	lsrs	r6, r6, #21
 800280c:	0fed      	lsrs	r5, r5, #31
 800280e:	0d52      	lsrs	r2, r2, #21
 8002810:	0fc9      	lsrs	r1, r1, #31
 8002812:	9001      	str	r0, [sp, #4]
 8002814:	42a2      	cmp	r2, r4
 8002816:	d100      	bne.n	800281a <__aeabi_dsub+0x46>
 8002818:	e0b9      	b.n	800298e <__aeabi_dsub+0x1ba>
 800281a:	2401      	movs	r4, #1
 800281c:	4061      	eors	r1, r4
 800281e:	468b      	mov	fp, r1
 8002820:	428d      	cmp	r5, r1
 8002822:	d100      	bne.n	8002826 <__aeabi_dsub+0x52>
 8002824:	e08d      	b.n	8002942 <__aeabi_dsub+0x16e>
 8002826:	1ab4      	subs	r4, r6, r2
 8002828:	46a4      	mov	ip, r4
 800282a:	2c00      	cmp	r4, #0
 800282c:	dc00      	bgt.n	8002830 <__aeabi_dsub+0x5c>
 800282e:	e0b7      	b.n	80029a0 <__aeabi_dsub+0x1cc>
 8002830:	2a00      	cmp	r2, #0
 8002832:	d100      	bne.n	8002836 <__aeabi_dsub+0x62>
 8002834:	e0cb      	b.n	80029ce <__aeabi_dsub+0x1fa>
 8002836:	4ac1      	ldr	r2, [pc, #772]	; (8002b3c <__aeabi_dsub+0x368>)
 8002838:	4296      	cmp	r6, r2
 800283a:	d100      	bne.n	800283e <__aeabi_dsub+0x6a>
 800283c:	e186      	b.n	8002b4c <__aeabi_dsub+0x378>
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	0412      	lsls	r2, r2, #16
 8002842:	4317      	orrs	r7, r2
 8002844:	4662      	mov	r2, ip
 8002846:	2a38      	cmp	r2, #56	; 0x38
 8002848:	dd00      	ble.n	800284c <__aeabi_dsub+0x78>
 800284a:	e1a4      	b.n	8002b96 <__aeabi_dsub+0x3c2>
 800284c:	2a1f      	cmp	r2, #31
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0x7e>
 8002850:	e21d      	b.n	8002c8e <__aeabi_dsub+0x4ba>
 8002852:	4661      	mov	r1, ip
 8002854:	2220      	movs	r2, #32
 8002856:	003c      	movs	r4, r7
 8002858:	1a52      	subs	r2, r2, r1
 800285a:	0001      	movs	r1, r0
 800285c:	4090      	lsls	r0, r2
 800285e:	4094      	lsls	r4, r2
 8002860:	1e42      	subs	r2, r0, #1
 8002862:	4190      	sbcs	r0, r2
 8002864:	4662      	mov	r2, ip
 8002866:	46a0      	mov	r8, r4
 8002868:	4664      	mov	r4, ip
 800286a:	40d7      	lsrs	r7, r2
 800286c:	464a      	mov	r2, r9
 800286e:	40e1      	lsrs	r1, r4
 8002870:	4644      	mov	r4, r8
 8002872:	1bd2      	subs	r2, r2, r7
 8002874:	4691      	mov	r9, r2
 8002876:	430c      	orrs	r4, r1
 8002878:	4304      	orrs	r4, r0
 800287a:	1b1c      	subs	r4, r3, r4
 800287c:	42a3      	cmp	r3, r4
 800287e:	4192      	sbcs	r2, r2
 8002880:	464b      	mov	r3, r9
 8002882:	4252      	negs	r2, r2
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	469a      	mov	sl, r3
 8002888:	4653      	mov	r3, sl
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	d400      	bmi.n	8002890 <__aeabi_dsub+0xbc>
 800288e:	e12b      	b.n	8002ae8 <__aeabi_dsub+0x314>
 8002890:	4653      	mov	r3, sl
 8002892:	025a      	lsls	r2, r3, #9
 8002894:	0a53      	lsrs	r3, r2, #9
 8002896:	469a      	mov	sl, r3
 8002898:	4653      	mov	r3, sl
 800289a:	2b00      	cmp	r3, #0
 800289c:	d100      	bne.n	80028a0 <__aeabi_dsub+0xcc>
 800289e:	e166      	b.n	8002b6e <__aeabi_dsub+0x39a>
 80028a0:	4650      	mov	r0, sl
 80028a2:	f000 fc91 	bl	80031c8 <__clzsi2>
 80028a6:	0003      	movs	r3, r0
 80028a8:	3b08      	subs	r3, #8
 80028aa:	2220      	movs	r2, #32
 80028ac:	0020      	movs	r0, r4
 80028ae:	1ad2      	subs	r2, r2, r3
 80028b0:	4651      	mov	r1, sl
 80028b2:	40d0      	lsrs	r0, r2
 80028b4:	4099      	lsls	r1, r3
 80028b6:	0002      	movs	r2, r0
 80028b8:	409c      	lsls	r4, r3
 80028ba:	430a      	orrs	r2, r1
 80028bc:	429e      	cmp	r6, r3
 80028be:	dd00      	ble.n	80028c2 <__aeabi_dsub+0xee>
 80028c0:	e164      	b.n	8002b8c <__aeabi_dsub+0x3b8>
 80028c2:	1b9b      	subs	r3, r3, r6
 80028c4:	1c59      	adds	r1, r3, #1
 80028c6:	291f      	cmp	r1, #31
 80028c8:	dd00      	ble.n	80028cc <__aeabi_dsub+0xf8>
 80028ca:	e0fe      	b.n	8002aca <__aeabi_dsub+0x2f6>
 80028cc:	2320      	movs	r3, #32
 80028ce:	0010      	movs	r0, r2
 80028d0:	0026      	movs	r6, r4
 80028d2:	1a5b      	subs	r3, r3, r1
 80028d4:	409c      	lsls	r4, r3
 80028d6:	4098      	lsls	r0, r3
 80028d8:	40ce      	lsrs	r6, r1
 80028da:	40ca      	lsrs	r2, r1
 80028dc:	1e63      	subs	r3, r4, #1
 80028de:	419c      	sbcs	r4, r3
 80028e0:	4330      	orrs	r0, r6
 80028e2:	4692      	mov	sl, r2
 80028e4:	2600      	movs	r6, #0
 80028e6:	4304      	orrs	r4, r0
 80028e8:	0763      	lsls	r3, r4, #29
 80028ea:	d009      	beq.n	8002900 <__aeabi_dsub+0x12c>
 80028ec:	230f      	movs	r3, #15
 80028ee:	4023      	ands	r3, r4
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d005      	beq.n	8002900 <__aeabi_dsub+0x12c>
 80028f4:	1d23      	adds	r3, r4, #4
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	41a4      	sbcs	r4, r4
 80028fa:	4264      	negs	r4, r4
 80028fc:	44a2      	add	sl, r4
 80028fe:	001c      	movs	r4, r3
 8002900:	4653      	mov	r3, sl
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	d400      	bmi.n	8002908 <__aeabi_dsub+0x134>
 8002906:	e0f2      	b.n	8002aee <__aeabi_dsub+0x31a>
 8002908:	4b8c      	ldr	r3, [pc, #560]	; (8002b3c <__aeabi_dsub+0x368>)
 800290a:	3601      	adds	r6, #1
 800290c:	429e      	cmp	r6, r3
 800290e:	d100      	bne.n	8002912 <__aeabi_dsub+0x13e>
 8002910:	e10f      	b.n	8002b32 <__aeabi_dsub+0x35e>
 8002912:	4653      	mov	r3, sl
 8002914:	498a      	ldr	r1, [pc, #552]	; (8002b40 <__aeabi_dsub+0x36c>)
 8002916:	08e4      	lsrs	r4, r4, #3
 8002918:	400b      	ands	r3, r1
 800291a:	0019      	movs	r1, r3
 800291c:	075b      	lsls	r3, r3, #29
 800291e:	4323      	orrs	r3, r4
 8002920:	0572      	lsls	r2, r6, #21
 8002922:	024c      	lsls	r4, r1, #9
 8002924:	0b24      	lsrs	r4, r4, #12
 8002926:	0d52      	lsrs	r2, r2, #21
 8002928:	0512      	lsls	r2, r2, #20
 800292a:	4322      	orrs	r2, r4
 800292c:	07ed      	lsls	r5, r5, #31
 800292e:	432a      	orrs	r2, r5
 8002930:	0018      	movs	r0, r3
 8002932:	0011      	movs	r1, r2
 8002934:	b003      	add	sp, #12
 8002936:	bcf0      	pop	{r4, r5, r6, r7}
 8002938:	46bb      	mov	fp, r7
 800293a:	46b2      	mov	sl, r6
 800293c:	46a9      	mov	r9, r5
 800293e:	46a0      	mov	r8, r4
 8002940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002942:	1ab4      	subs	r4, r6, r2
 8002944:	46a4      	mov	ip, r4
 8002946:	2c00      	cmp	r4, #0
 8002948:	dd59      	ble.n	80029fe <__aeabi_dsub+0x22a>
 800294a:	2a00      	cmp	r2, #0
 800294c:	d100      	bne.n	8002950 <__aeabi_dsub+0x17c>
 800294e:	e0b0      	b.n	8002ab2 <__aeabi_dsub+0x2de>
 8002950:	4556      	cmp	r6, sl
 8002952:	d100      	bne.n	8002956 <__aeabi_dsub+0x182>
 8002954:	e0fa      	b.n	8002b4c <__aeabi_dsub+0x378>
 8002956:	2280      	movs	r2, #128	; 0x80
 8002958:	0412      	lsls	r2, r2, #16
 800295a:	4317      	orrs	r7, r2
 800295c:	4662      	mov	r2, ip
 800295e:	2a38      	cmp	r2, #56	; 0x38
 8002960:	dd00      	ble.n	8002964 <__aeabi_dsub+0x190>
 8002962:	e0d4      	b.n	8002b0e <__aeabi_dsub+0x33a>
 8002964:	2a1f      	cmp	r2, #31
 8002966:	dc00      	bgt.n	800296a <__aeabi_dsub+0x196>
 8002968:	e1c0      	b.n	8002cec <__aeabi_dsub+0x518>
 800296a:	0039      	movs	r1, r7
 800296c:	3a20      	subs	r2, #32
 800296e:	40d1      	lsrs	r1, r2
 8002970:	4662      	mov	r2, ip
 8002972:	2a20      	cmp	r2, #32
 8002974:	d006      	beq.n	8002984 <__aeabi_dsub+0x1b0>
 8002976:	4664      	mov	r4, ip
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	1b12      	subs	r2, r2, r4
 800297c:	003c      	movs	r4, r7
 800297e:	4094      	lsls	r4, r2
 8002980:	4304      	orrs	r4, r0
 8002982:	9401      	str	r4, [sp, #4]
 8002984:	9c01      	ldr	r4, [sp, #4]
 8002986:	1e62      	subs	r2, r4, #1
 8002988:	4194      	sbcs	r4, r2
 800298a:	430c      	orrs	r4, r1
 800298c:	e0c3      	b.n	8002b16 <__aeabi_dsub+0x342>
 800298e:	003c      	movs	r4, r7
 8002990:	4304      	orrs	r4, r0
 8002992:	d02b      	beq.n	80029ec <__aeabi_dsub+0x218>
 8002994:	468b      	mov	fp, r1
 8002996:	428d      	cmp	r5, r1
 8002998:	d02e      	beq.n	80029f8 <__aeabi_dsub+0x224>
 800299a:	4c6a      	ldr	r4, [pc, #424]	; (8002b44 <__aeabi_dsub+0x370>)
 800299c:	46a4      	mov	ip, r4
 800299e:	44b4      	add	ip, r6
 80029a0:	4664      	mov	r4, ip
 80029a2:	2c00      	cmp	r4, #0
 80029a4:	d05f      	beq.n	8002a66 <__aeabi_dsub+0x292>
 80029a6:	1b94      	subs	r4, r2, r6
 80029a8:	46a4      	mov	ip, r4
 80029aa:	2e00      	cmp	r6, #0
 80029ac:	d000      	beq.n	80029b0 <__aeabi_dsub+0x1dc>
 80029ae:	e120      	b.n	8002bf2 <__aeabi_dsub+0x41e>
 80029b0:	464c      	mov	r4, r9
 80029b2:	431c      	orrs	r4, r3
 80029b4:	d100      	bne.n	80029b8 <__aeabi_dsub+0x1e4>
 80029b6:	e1c7      	b.n	8002d48 <__aeabi_dsub+0x574>
 80029b8:	4661      	mov	r1, ip
 80029ba:	1e4c      	subs	r4, r1, #1
 80029bc:	2901      	cmp	r1, #1
 80029be:	d100      	bne.n	80029c2 <__aeabi_dsub+0x1ee>
 80029c0:	e223      	b.n	8002e0a <__aeabi_dsub+0x636>
 80029c2:	4d5e      	ldr	r5, [pc, #376]	; (8002b3c <__aeabi_dsub+0x368>)
 80029c4:	45ac      	cmp	ip, r5
 80029c6:	d100      	bne.n	80029ca <__aeabi_dsub+0x1f6>
 80029c8:	e1d8      	b.n	8002d7c <__aeabi_dsub+0x5a8>
 80029ca:	46a4      	mov	ip, r4
 80029cc:	e11a      	b.n	8002c04 <__aeabi_dsub+0x430>
 80029ce:	003a      	movs	r2, r7
 80029d0:	4302      	orrs	r2, r0
 80029d2:	d100      	bne.n	80029d6 <__aeabi_dsub+0x202>
 80029d4:	e0e4      	b.n	8002ba0 <__aeabi_dsub+0x3cc>
 80029d6:	0022      	movs	r2, r4
 80029d8:	3a01      	subs	r2, #1
 80029da:	2c01      	cmp	r4, #1
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x20c>
 80029de:	e1c3      	b.n	8002d68 <__aeabi_dsub+0x594>
 80029e0:	4956      	ldr	r1, [pc, #344]	; (8002b3c <__aeabi_dsub+0x368>)
 80029e2:	428c      	cmp	r4, r1
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x214>
 80029e6:	e0b1      	b.n	8002b4c <__aeabi_dsub+0x378>
 80029e8:	4694      	mov	ip, r2
 80029ea:	e72b      	b.n	8002844 <__aeabi_dsub+0x70>
 80029ec:	2401      	movs	r4, #1
 80029ee:	4061      	eors	r1, r4
 80029f0:	468b      	mov	fp, r1
 80029f2:	428d      	cmp	r5, r1
 80029f4:	d000      	beq.n	80029f8 <__aeabi_dsub+0x224>
 80029f6:	e716      	b.n	8002826 <__aeabi_dsub+0x52>
 80029f8:	4952      	ldr	r1, [pc, #328]	; (8002b44 <__aeabi_dsub+0x370>)
 80029fa:	468c      	mov	ip, r1
 80029fc:	44b4      	add	ip, r6
 80029fe:	4664      	mov	r4, ip
 8002a00:	2c00      	cmp	r4, #0
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dsub+0x232>
 8002a04:	e0d3      	b.n	8002bae <__aeabi_dsub+0x3da>
 8002a06:	1b91      	subs	r1, r2, r6
 8002a08:	468c      	mov	ip, r1
 8002a0a:	2e00      	cmp	r6, #0
 8002a0c:	d100      	bne.n	8002a10 <__aeabi_dsub+0x23c>
 8002a0e:	e15e      	b.n	8002cce <__aeabi_dsub+0x4fa>
 8002a10:	494a      	ldr	r1, [pc, #296]	; (8002b3c <__aeabi_dsub+0x368>)
 8002a12:	428a      	cmp	r2, r1
 8002a14:	d100      	bne.n	8002a18 <__aeabi_dsub+0x244>
 8002a16:	e1be      	b.n	8002d96 <__aeabi_dsub+0x5c2>
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	464c      	mov	r4, r9
 8002a1c:	0409      	lsls	r1, r1, #16
 8002a1e:	430c      	orrs	r4, r1
 8002a20:	46a1      	mov	r9, r4
 8002a22:	4661      	mov	r1, ip
 8002a24:	2938      	cmp	r1, #56	; 0x38
 8002a26:	dd00      	ble.n	8002a2a <__aeabi_dsub+0x256>
 8002a28:	e1ba      	b.n	8002da0 <__aeabi_dsub+0x5cc>
 8002a2a:	291f      	cmp	r1, #31
 8002a2c:	dd00      	ble.n	8002a30 <__aeabi_dsub+0x25c>
 8002a2e:	e227      	b.n	8002e80 <__aeabi_dsub+0x6ac>
 8002a30:	2420      	movs	r4, #32
 8002a32:	1a64      	subs	r4, r4, r1
 8002a34:	4649      	mov	r1, r9
 8002a36:	40a1      	lsls	r1, r4
 8002a38:	001e      	movs	r6, r3
 8002a3a:	4688      	mov	r8, r1
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	40a3      	lsls	r3, r4
 8002a40:	40ce      	lsrs	r6, r1
 8002a42:	4641      	mov	r1, r8
 8002a44:	1e5c      	subs	r4, r3, #1
 8002a46:	41a3      	sbcs	r3, r4
 8002a48:	4331      	orrs	r1, r6
 8002a4a:	4319      	orrs	r1, r3
 8002a4c:	000c      	movs	r4, r1
 8002a4e:	4663      	mov	r3, ip
 8002a50:	4649      	mov	r1, r9
 8002a52:	40d9      	lsrs	r1, r3
 8002a54:	187f      	adds	r7, r7, r1
 8002a56:	1824      	adds	r4, r4, r0
 8002a58:	4284      	cmp	r4, r0
 8002a5a:	419b      	sbcs	r3, r3
 8002a5c:	425b      	negs	r3, r3
 8002a5e:	469a      	mov	sl, r3
 8002a60:	0016      	movs	r6, r2
 8002a62:	44ba      	add	sl, r7
 8002a64:	e05d      	b.n	8002b22 <__aeabi_dsub+0x34e>
 8002a66:	4c38      	ldr	r4, [pc, #224]	; (8002b48 <__aeabi_dsub+0x374>)
 8002a68:	1c72      	adds	r2, r6, #1
 8002a6a:	4222      	tst	r2, r4
 8002a6c:	d000      	beq.n	8002a70 <__aeabi_dsub+0x29c>
 8002a6e:	e0df      	b.n	8002c30 <__aeabi_dsub+0x45c>
 8002a70:	464a      	mov	r2, r9
 8002a72:	431a      	orrs	r2, r3
 8002a74:	2e00      	cmp	r6, #0
 8002a76:	d000      	beq.n	8002a7a <__aeabi_dsub+0x2a6>
 8002a78:	e15c      	b.n	8002d34 <__aeabi_dsub+0x560>
 8002a7a:	2a00      	cmp	r2, #0
 8002a7c:	d100      	bne.n	8002a80 <__aeabi_dsub+0x2ac>
 8002a7e:	e1cf      	b.n	8002e20 <__aeabi_dsub+0x64c>
 8002a80:	003a      	movs	r2, r7
 8002a82:	4302      	orrs	r2, r0
 8002a84:	d100      	bne.n	8002a88 <__aeabi_dsub+0x2b4>
 8002a86:	e17f      	b.n	8002d88 <__aeabi_dsub+0x5b4>
 8002a88:	1a1c      	subs	r4, r3, r0
 8002a8a:	464a      	mov	r2, r9
 8002a8c:	42a3      	cmp	r3, r4
 8002a8e:	4189      	sbcs	r1, r1
 8002a90:	1bd2      	subs	r2, r2, r7
 8002a92:	4249      	negs	r1, r1
 8002a94:	1a52      	subs	r2, r2, r1
 8002a96:	4692      	mov	sl, r2
 8002a98:	0212      	lsls	r2, r2, #8
 8002a9a:	d400      	bmi.n	8002a9e <__aeabi_dsub+0x2ca>
 8002a9c:	e20a      	b.n	8002eb4 <__aeabi_dsub+0x6e0>
 8002a9e:	1ac4      	subs	r4, r0, r3
 8002aa0:	42a0      	cmp	r0, r4
 8002aa2:	4180      	sbcs	r0, r0
 8002aa4:	464b      	mov	r3, r9
 8002aa6:	4240      	negs	r0, r0
 8002aa8:	1aff      	subs	r7, r7, r3
 8002aaa:	1a3b      	subs	r3, r7, r0
 8002aac:	469a      	mov	sl, r3
 8002aae:	465d      	mov	r5, fp
 8002ab0:	e71a      	b.n	80028e8 <__aeabi_dsub+0x114>
 8002ab2:	003a      	movs	r2, r7
 8002ab4:	4302      	orrs	r2, r0
 8002ab6:	d073      	beq.n	8002ba0 <__aeabi_dsub+0x3cc>
 8002ab8:	0022      	movs	r2, r4
 8002aba:	3a01      	subs	r2, #1
 8002abc:	2c01      	cmp	r4, #1
 8002abe:	d100      	bne.n	8002ac2 <__aeabi_dsub+0x2ee>
 8002ac0:	e0cb      	b.n	8002c5a <__aeabi_dsub+0x486>
 8002ac2:	4554      	cmp	r4, sl
 8002ac4:	d042      	beq.n	8002b4c <__aeabi_dsub+0x378>
 8002ac6:	4694      	mov	ip, r2
 8002ac8:	e748      	b.n	800295c <__aeabi_dsub+0x188>
 8002aca:	0010      	movs	r0, r2
 8002acc:	3b1f      	subs	r3, #31
 8002ace:	40d8      	lsrs	r0, r3
 8002ad0:	2920      	cmp	r1, #32
 8002ad2:	d003      	beq.n	8002adc <__aeabi_dsub+0x308>
 8002ad4:	2340      	movs	r3, #64	; 0x40
 8002ad6:	1a5b      	subs	r3, r3, r1
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	4314      	orrs	r4, r2
 8002adc:	1e63      	subs	r3, r4, #1
 8002ade:	419c      	sbcs	r4, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	469a      	mov	sl, r3
 8002ae6:	4304      	orrs	r4, r0
 8002ae8:	0763      	lsls	r3, r4, #29
 8002aea:	d000      	beq.n	8002aee <__aeabi_dsub+0x31a>
 8002aec:	e6fe      	b.n	80028ec <__aeabi_dsub+0x118>
 8002aee:	4652      	mov	r2, sl
 8002af0:	08e3      	lsrs	r3, r4, #3
 8002af2:	0752      	lsls	r2, r2, #29
 8002af4:	4313      	orrs	r3, r2
 8002af6:	4652      	mov	r2, sl
 8002af8:	46b4      	mov	ip, r6
 8002afa:	08d2      	lsrs	r2, r2, #3
 8002afc:	490f      	ldr	r1, [pc, #60]	; (8002b3c <__aeabi_dsub+0x368>)
 8002afe:	458c      	cmp	ip, r1
 8002b00:	d02a      	beq.n	8002b58 <__aeabi_dsub+0x384>
 8002b02:	0312      	lsls	r2, r2, #12
 8002b04:	0b14      	lsrs	r4, r2, #12
 8002b06:	4662      	mov	r2, ip
 8002b08:	0552      	lsls	r2, r2, #21
 8002b0a:	0d52      	lsrs	r2, r2, #21
 8002b0c:	e70c      	b.n	8002928 <__aeabi_dsub+0x154>
 8002b0e:	003c      	movs	r4, r7
 8002b10:	4304      	orrs	r4, r0
 8002b12:	1e62      	subs	r2, r4, #1
 8002b14:	4194      	sbcs	r4, r2
 8002b16:	18e4      	adds	r4, r4, r3
 8002b18:	429c      	cmp	r4, r3
 8002b1a:	4192      	sbcs	r2, r2
 8002b1c:	4252      	negs	r2, r2
 8002b1e:	444a      	add	r2, r9
 8002b20:	4692      	mov	sl, r2
 8002b22:	4653      	mov	r3, sl
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	d5df      	bpl.n	8002ae8 <__aeabi_dsub+0x314>
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <__aeabi_dsub+0x368>)
 8002b2a:	3601      	adds	r6, #1
 8002b2c:	429e      	cmp	r6, r3
 8002b2e:	d000      	beq.n	8002b32 <__aeabi_dsub+0x35e>
 8002b30:	e0a0      	b.n	8002c74 <__aeabi_dsub+0x4a0>
 8002b32:	0032      	movs	r2, r6
 8002b34:	2400      	movs	r4, #0
 8002b36:	2300      	movs	r3, #0
 8002b38:	e6f6      	b.n	8002928 <__aeabi_dsub+0x154>
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	000007ff 	.word	0x000007ff
 8002b40:	ff7fffff 	.word	0xff7fffff
 8002b44:	fffff801 	.word	0xfffff801
 8002b48:	000007fe 	.word	0x000007fe
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	464a      	mov	r2, r9
 8002b50:	0752      	lsls	r2, r2, #29
 8002b52:	4313      	orrs	r3, r2
 8002b54:	464a      	mov	r2, r9
 8002b56:	08d2      	lsrs	r2, r2, #3
 8002b58:	0019      	movs	r1, r3
 8002b5a:	4311      	orrs	r1, r2
 8002b5c:	d100      	bne.n	8002b60 <__aeabi_dsub+0x38c>
 8002b5e:	e1b5      	b.n	8002ecc <__aeabi_dsub+0x6f8>
 8002b60:	2480      	movs	r4, #128	; 0x80
 8002b62:	0324      	lsls	r4, r4, #12
 8002b64:	4314      	orrs	r4, r2
 8002b66:	0324      	lsls	r4, r4, #12
 8002b68:	4ad5      	ldr	r2, [pc, #852]	; (8002ec0 <__aeabi_dsub+0x6ec>)
 8002b6a:	0b24      	lsrs	r4, r4, #12
 8002b6c:	e6dc      	b.n	8002928 <__aeabi_dsub+0x154>
 8002b6e:	0020      	movs	r0, r4
 8002b70:	f000 fb2a 	bl	80031c8 <__clzsi2>
 8002b74:	0003      	movs	r3, r0
 8002b76:	3318      	adds	r3, #24
 8002b78:	2b1f      	cmp	r3, #31
 8002b7a:	dc00      	bgt.n	8002b7e <__aeabi_dsub+0x3aa>
 8002b7c:	e695      	b.n	80028aa <__aeabi_dsub+0xd6>
 8002b7e:	0022      	movs	r2, r4
 8002b80:	3808      	subs	r0, #8
 8002b82:	4082      	lsls	r2, r0
 8002b84:	2400      	movs	r4, #0
 8002b86:	429e      	cmp	r6, r3
 8002b88:	dc00      	bgt.n	8002b8c <__aeabi_dsub+0x3b8>
 8002b8a:	e69a      	b.n	80028c2 <__aeabi_dsub+0xee>
 8002b8c:	1af6      	subs	r6, r6, r3
 8002b8e:	4bcd      	ldr	r3, [pc, #820]	; (8002ec4 <__aeabi_dsub+0x6f0>)
 8002b90:	401a      	ands	r2, r3
 8002b92:	4692      	mov	sl, r2
 8002b94:	e6a8      	b.n	80028e8 <__aeabi_dsub+0x114>
 8002b96:	003c      	movs	r4, r7
 8002b98:	4304      	orrs	r4, r0
 8002b9a:	1e62      	subs	r2, r4, #1
 8002b9c:	4194      	sbcs	r4, r2
 8002b9e:	e66c      	b.n	800287a <__aeabi_dsub+0xa6>
 8002ba0:	464a      	mov	r2, r9
 8002ba2:	08db      	lsrs	r3, r3, #3
 8002ba4:	0752      	lsls	r2, r2, #29
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	464a      	mov	r2, r9
 8002baa:	08d2      	lsrs	r2, r2, #3
 8002bac:	e7a6      	b.n	8002afc <__aeabi_dsub+0x328>
 8002bae:	4cc6      	ldr	r4, [pc, #792]	; (8002ec8 <__aeabi_dsub+0x6f4>)
 8002bb0:	1c72      	adds	r2, r6, #1
 8002bb2:	4222      	tst	r2, r4
 8002bb4:	d000      	beq.n	8002bb8 <__aeabi_dsub+0x3e4>
 8002bb6:	e0ac      	b.n	8002d12 <__aeabi_dsub+0x53e>
 8002bb8:	464a      	mov	r2, r9
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	2e00      	cmp	r6, #0
 8002bbe:	d000      	beq.n	8002bc2 <__aeabi_dsub+0x3ee>
 8002bc0:	e105      	b.n	8002dce <__aeabi_dsub+0x5fa>
 8002bc2:	2a00      	cmp	r2, #0
 8002bc4:	d100      	bne.n	8002bc8 <__aeabi_dsub+0x3f4>
 8002bc6:	e156      	b.n	8002e76 <__aeabi_dsub+0x6a2>
 8002bc8:	003a      	movs	r2, r7
 8002bca:	4302      	orrs	r2, r0
 8002bcc:	d100      	bne.n	8002bd0 <__aeabi_dsub+0x3fc>
 8002bce:	e0db      	b.n	8002d88 <__aeabi_dsub+0x5b4>
 8002bd0:	181c      	adds	r4, r3, r0
 8002bd2:	429c      	cmp	r4, r3
 8002bd4:	419b      	sbcs	r3, r3
 8002bd6:	444f      	add	r7, r9
 8002bd8:	46ba      	mov	sl, r7
 8002bda:	425b      	negs	r3, r3
 8002bdc:	449a      	add	sl, r3
 8002bde:	4653      	mov	r3, sl
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	d400      	bmi.n	8002be6 <__aeabi_dsub+0x412>
 8002be4:	e780      	b.n	8002ae8 <__aeabi_dsub+0x314>
 8002be6:	4652      	mov	r2, sl
 8002be8:	4bb6      	ldr	r3, [pc, #728]	; (8002ec4 <__aeabi_dsub+0x6f0>)
 8002bea:	2601      	movs	r6, #1
 8002bec:	401a      	ands	r2, r3
 8002bee:	4692      	mov	sl, r2
 8002bf0:	e77a      	b.n	8002ae8 <__aeabi_dsub+0x314>
 8002bf2:	4cb3      	ldr	r4, [pc, #716]	; (8002ec0 <__aeabi_dsub+0x6ec>)
 8002bf4:	42a2      	cmp	r2, r4
 8002bf6:	d100      	bne.n	8002bfa <__aeabi_dsub+0x426>
 8002bf8:	e0c0      	b.n	8002d7c <__aeabi_dsub+0x5a8>
 8002bfa:	2480      	movs	r4, #128	; 0x80
 8002bfc:	464d      	mov	r5, r9
 8002bfe:	0424      	lsls	r4, r4, #16
 8002c00:	4325      	orrs	r5, r4
 8002c02:	46a9      	mov	r9, r5
 8002c04:	4664      	mov	r4, ip
 8002c06:	2c38      	cmp	r4, #56	; 0x38
 8002c08:	dc53      	bgt.n	8002cb2 <__aeabi_dsub+0x4de>
 8002c0a:	4661      	mov	r1, ip
 8002c0c:	2c1f      	cmp	r4, #31
 8002c0e:	dd00      	ble.n	8002c12 <__aeabi_dsub+0x43e>
 8002c10:	e0cd      	b.n	8002dae <__aeabi_dsub+0x5da>
 8002c12:	2520      	movs	r5, #32
 8002c14:	001e      	movs	r6, r3
 8002c16:	1b2d      	subs	r5, r5, r4
 8002c18:	464c      	mov	r4, r9
 8002c1a:	40ab      	lsls	r3, r5
 8002c1c:	40ac      	lsls	r4, r5
 8002c1e:	40ce      	lsrs	r6, r1
 8002c20:	1e5d      	subs	r5, r3, #1
 8002c22:	41ab      	sbcs	r3, r5
 8002c24:	4334      	orrs	r4, r6
 8002c26:	4323      	orrs	r3, r4
 8002c28:	464c      	mov	r4, r9
 8002c2a:	40cc      	lsrs	r4, r1
 8002c2c:	1b3f      	subs	r7, r7, r4
 8002c2e:	e045      	b.n	8002cbc <__aeabi_dsub+0x4e8>
 8002c30:	464a      	mov	r2, r9
 8002c32:	1a1c      	subs	r4, r3, r0
 8002c34:	1bd1      	subs	r1, r2, r7
 8002c36:	42a3      	cmp	r3, r4
 8002c38:	4192      	sbcs	r2, r2
 8002c3a:	4252      	negs	r2, r2
 8002c3c:	4692      	mov	sl, r2
 8002c3e:	000a      	movs	r2, r1
 8002c40:	4651      	mov	r1, sl
 8002c42:	1a52      	subs	r2, r2, r1
 8002c44:	4692      	mov	sl, r2
 8002c46:	0212      	lsls	r2, r2, #8
 8002c48:	d500      	bpl.n	8002c4c <__aeabi_dsub+0x478>
 8002c4a:	e083      	b.n	8002d54 <__aeabi_dsub+0x580>
 8002c4c:	4653      	mov	r3, sl
 8002c4e:	4323      	orrs	r3, r4
 8002c50:	d000      	beq.n	8002c54 <__aeabi_dsub+0x480>
 8002c52:	e621      	b.n	8002898 <__aeabi_dsub+0xc4>
 8002c54:	2200      	movs	r2, #0
 8002c56:	2500      	movs	r5, #0
 8002c58:	e753      	b.n	8002b02 <__aeabi_dsub+0x32e>
 8002c5a:	181c      	adds	r4, r3, r0
 8002c5c:	429c      	cmp	r4, r3
 8002c5e:	419b      	sbcs	r3, r3
 8002c60:	444f      	add	r7, r9
 8002c62:	46ba      	mov	sl, r7
 8002c64:	425b      	negs	r3, r3
 8002c66:	449a      	add	sl, r3
 8002c68:	4653      	mov	r3, sl
 8002c6a:	2601      	movs	r6, #1
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	d400      	bmi.n	8002c72 <__aeabi_dsub+0x49e>
 8002c70:	e73a      	b.n	8002ae8 <__aeabi_dsub+0x314>
 8002c72:	2602      	movs	r6, #2
 8002c74:	4652      	mov	r2, sl
 8002c76:	4b93      	ldr	r3, [pc, #588]	; (8002ec4 <__aeabi_dsub+0x6f0>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	0013      	movs	r3, r2
 8002c7e:	4021      	ands	r1, r4
 8002c80:	0862      	lsrs	r2, r4, #1
 8002c82:	430a      	orrs	r2, r1
 8002c84:	07dc      	lsls	r4, r3, #31
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	469a      	mov	sl, r3
 8002c8a:	4314      	orrs	r4, r2
 8002c8c:	e62c      	b.n	80028e8 <__aeabi_dsub+0x114>
 8002c8e:	0039      	movs	r1, r7
 8002c90:	3a20      	subs	r2, #32
 8002c92:	40d1      	lsrs	r1, r2
 8002c94:	4662      	mov	r2, ip
 8002c96:	2a20      	cmp	r2, #32
 8002c98:	d006      	beq.n	8002ca8 <__aeabi_dsub+0x4d4>
 8002c9a:	4664      	mov	r4, ip
 8002c9c:	2240      	movs	r2, #64	; 0x40
 8002c9e:	1b12      	subs	r2, r2, r4
 8002ca0:	003c      	movs	r4, r7
 8002ca2:	4094      	lsls	r4, r2
 8002ca4:	4304      	orrs	r4, r0
 8002ca6:	9401      	str	r4, [sp, #4]
 8002ca8:	9c01      	ldr	r4, [sp, #4]
 8002caa:	1e62      	subs	r2, r4, #1
 8002cac:	4194      	sbcs	r4, r2
 8002cae:	430c      	orrs	r4, r1
 8002cb0:	e5e3      	b.n	800287a <__aeabi_dsub+0xa6>
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	4319      	orrs	r1, r3
 8002cb6:	000b      	movs	r3, r1
 8002cb8:	1e5c      	subs	r4, r3, #1
 8002cba:	41a3      	sbcs	r3, r4
 8002cbc:	1ac4      	subs	r4, r0, r3
 8002cbe:	42a0      	cmp	r0, r4
 8002cc0:	419b      	sbcs	r3, r3
 8002cc2:	425b      	negs	r3, r3
 8002cc4:	1afb      	subs	r3, r7, r3
 8002cc6:	469a      	mov	sl, r3
 8002cc8:	465d      	mov	r5, fp
 8002cca:	0016      	movs	r6, r2
 8002ccc:	e5dc      	b.n	8002888 <__aeabi_dsub+0xb4>
 8002cce:	4649      	mov	r1, r9
 8002cd0:	4319      	orrs	r1, r3
 8002cd2:	d100      	bne.n	8002cd6 <__aeabi_dsub+0x502>
 8002cd4:	e0ae      	b.n	8002e34 <__aeabi_dsub+0x660>
 8002cd6:	4661      	mov	r1, ip
 8002cd8:	4664      	mov	r4, ip
 8002cda:	3901      	subs	r1, #1
 8002cdc:	2c01      	cmp	r4, #1
 8002cde:	d100      	bne.n	8002ce2 <__aeabi_dsub+0x50e>
 8002ce0:	e0e0      	b.n	8002ea4 <__aeabi_dsub+0x6d0>
 8002ce2:	4c77      	ldr	r4, [pc, #476]	; (8002ec0 <__aeabi_dsub+0x6ec>)
 8002ce4:	45a4      	cmp	ip, r4
 8002ce6:	d056      	beq.n	8002d96 <__aeabi_dsub+0x5c2>
 8002ce8:	468c      	mov	ip, r1
 8002cea:	e69a      	b.n	8002a22 <__aeabi_dsub+0x24e>
 8002cec:	4661      	mov	r1, ip
 8002cee:	2220      	movs	r2, #32
 8002cf0:	003c      	movs	r4, r7
 8002cf2:	1a52      	subs	r2, r2, r1
 8002cf4:	4094      	lsls	r4, r2
 8002cf6:	0001      	movs	r1, r0
 8002cf8:	4090      	lsls	r0, r2
 8002cfa:	46a0      	mov	r8, r4
 8002cfc:	4664      	mov	r4, ip
 8002cfe:	1e42      	subs	r2, r0, #1
 8002d00:	4190      	sbcs	r0, r2
 8002d02:	4662      	mov	r2, ip
 8002d04:	40e1      	lsrs	r1, r4
 8002d06:	4644      	mov	r4, r8
 8002d08:	40d7      	lsrs	r7, r2
 8002d0a:	430c      	orrs	r4, r1
 8002d0c:	4304      	orrs	r4, r0
 8002d0e:	44b9      	add	r9, r7
 8002d10:	e701      	b.n	8002b16 <__aeabi_dsub+0x342>
 8002d12:	496b      	ldr	r1, [pc, #428]	; (8002ec0 <__aeabi_dsub+0x6ec>)
 8002d14:	428a      	cmp	r2, r1
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x546>
 8002d18:	e70c      	b.n	8002b34 <__aeabi_dsub+0x360>
 8002d1a:	1818      	adds	r0, r3, r0
 8002d1c:	4298      	cmp	r0, r3
 8002d1e:	419b      	sbcs	r3, r3
 8002d20:	444f      	add	r7, r9
 8002d22:	425b      	negs	r3, r3
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	07dc      	lsls	r4, r3, #31
 8002d28:	0840      	lsrs	r0, r0, #1
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	469a      	mov	sl, r3
 8002d2e:	0016      	movs	r6, r2
 8002d30:	4304      	orrs	r4, r0
 8002d32:	e6d9      	b.n	8002ae8 <__aeabi_dsub+0x314>
 8002d34:	2a00      	cmp	r2, #0
 8002d36:	d000      	beq.n	8002d3a <__aeabi_dsub+0x566>
 8002d38:	e081      	b.n	8002e3e <__aeabi_dsub+0x66a>
 8002d3a:	003b      	movs	r3, r7
 8002d3c:	4303      	orrs	r3, r0
 8002d3e:	d11d      	bne.n	8002d7c <__aeabi_dsub+0x5a8>
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	2500      	movs	r5, #0
 8002d44:	0312      	lsls	r2, r2, #12
 8002d46:	e70b      	b.n	8002b60 <__aeabi_dsub+0x38c>
 8002d48:	08c0      	lsrs	r0, r0, #3
 8002d4a:	077b      	lsls	r3, r7, #29
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	4303      	orrs	r3, r0
 8002d50:	08fa      	lsrs	r2, r7, #3
 8002d52:	e6d3      	b.n	8002afc <__aeabi_dsub+0x328>
 8002d54:	1ac4      	subs	r4, r0, r3
 8002d56:	42a0      	cmp	r0, r4
 8002d58:	4180      	sbcs	r0, r0
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	4240      	negs	r0, r0
 8002d5e:	1aff      	subs	r7, r7, r3
 8002d60:	1a3b      	subs	r3, r7, r0
 8002d62:	469a      	mov	sl, r3
 8002d64:	465d      	mov	r5, fp
 8002d66:	e597      	b.n	8002898 <__aeabi_dsub+0xc4>
 8002d68:	1a1c      	subs	r4, r3, r0
 8002d6a:	464a      	mov	r2, r9
 8002d6c:	42a3      	cmp	r3, r4
 8002d6e:	419b      	sbcs	r3, r3
 8002d70:	1bd7      	subs	r7, r2, r7
 8002d72:	425b      	negs	r3, r3
 8002d74:	1afb      	subs	r3, r7, r3
 8002d76:	469a      	mov	sl, r3
 8002d78:	2601      	movs	r6, #1
 8002d7a:	e585      	b.n	8002888 <__aeabi_dsub+0xb4>
 8002d7c:	08c0      	lsrs	r0, r0, #3
 8002d7e:	077b      	lsls	r3, r7, #29
 8002d80:	465d      	mov	r5, fp
 8002d82:	4303      	orrs	r3, r0
 8002d84:	08fa      	lsrs	r2, r7, #3
 8002d86:	e6e7      	b.n	8002b58 <__aeabi_dsub+0x384>
 8002d88:	464a      	mov	r2, r9
 8002d8a:	08db      	lsrs	r3, r3, #3
 8002d8c:	0752      	lsls	r2, r2, #29
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	464a      	mov	r2, r9
 8002d92:	08d2      	lsrs	r2, r2, #3
 8002d94:	e6b5      	b.n	8002b02 <__aeabi_dsub+0x32e>
 8002d96:	08c0      	lsrs	r0, r0, #3
 8002d98:	077b      	lsls	r3, r7, #29
 8002d9a:	4303      	orrs	r3, r0
 8002d9c:	08fa      	lsrs	r2, r7, #3
 8002d9e:	e6db      	b.n	8002b58 <__aeabi_dsub+0x384>
 8002da0:	4649      	mov	r1, r9
 8002da2:	4319      	orrs	r1, r3
 8002da4:	000b      	movs	r3, r1
 8002da6:	1e59      	subs	r1, r3, #1
 8002da8:	418b      	sbcs	r3, r1
 8002daa:	001c      	movs	r4, r3
 8002dac:	e653      	b.n	8002a56 <__aeabi_dsub+0x282>
 8002dae:	464d      	mov	r5, r9
 8002db0:	3c20      	subs	r4, #32
 8002db2:	40e5      	lsrs	r5, r4
 8002db4:	2920      	cmp	r1, #32
 8002db6:	d005      	beq.n	8002dc4 <__aeabi_dsub+0x5f0>
 8002db8:	2440      	movs	r4, #64	; 0x40
 8002dba:	1a64      	subs	r4, r4, r1
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	40a1      	lsls	r1, r4
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	4698      	mov	r8, r3
 8002dc4:	4643      	mov	r3, r8
 8002dc6:	1e5c      	subs	r4, r3, #1
 8002dc8:	41a3      	sbcs	r3, r4
 8002dca:	432b      	orrs	r3, r5
 8002dcc:	e776      	b.n	8002cbc <__aeabi_dsub+0x4e8>
 8002dce:	2a00      	cmp	r2, #0
 8002dd0:	d0e1      	beq.n	8002d96 <__aeabi_dsub+0x5c2>
 8002dd2:	003a      	movs	r2, r7
 8002dd4:	08db      	lsrs	r3, r3, #3
 8002dd6:	4302      	orrs	r2, r0
 8002dd8:	d100      	bne.n	8002ddc <__aeabi_dsub+0x608>
 8002dda:	e6b8      	b.n	8002b4e <__aeabi_dsub+0x37a>
 8002ddc:	464a      	mov	r2, r9
 8002dde:	0752      	lsls	r2, r2, #29
 8002de0:	2480      	movs	r4, #128	; 0x80
 8002de2:	4313      	orrs	r3, r2
 8002de4:	464a      	mov	r2, r9
 8002de6:	0324      	lsls	r4, r4, #12
 8002de8:	08d2      	lsrs	r2, r2, #3
 8002dea:	4222      	tst	r2, r4
 8002dec:	d007      	beq.n	8002dfe <__aeabi_dsub+0x62a>
 8002dee:	08fe      	lsrs	r6, r7, #3
 8002df0:	4226      	tst	r6, r4
 8002df2:	d104      	bne.n	8002dfe <__aeabi_dsub+0x62a>
 8002df4:	465d      	mov	r5, fp
 8002df6:	0032      	movs	r2, r6
 8002df8:	08c3      	lsrs	r3, r0, #3
 8002dfa:	077f      	lsls	r7, r7, #29
 8002dfc:	433b      	orrs	r3, r7
 8002dfe:	0f59      	lsrs	r1, r3, #29
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	0749      	lsls	r1, r1, #29
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	430b      	orrs	r3, r1
 8002e08:	e6a6      	b.n	8002b58 <__aeabi_dsub+0x384>
 8002e0a:	1ac4      	subs	r4, r0, r3
 8002e0c:	42a0      	cmp	r0, r4
 8002e0e:	4180      	sbcs	r0, r0
 8002e10:	464b      	mov	r3, r9
 8002e12:	4240      	negs	r0, r0
 8002e14:	1aff      	subs	r7, r7, r3
 8002e16:	1a3b      	subs	r3, r7, r0
 8002e18:	469a      	mov	sl, r3
 8002e1a:	465d      	mov	r5, fp
 8002e1c:	2601      	movs	r6, #1
 8002e1e:	e533      	b.n	8002888 <__aeabi_dsub+0xb4>
 8002e20:	003b      	movs	r3, r7
 8002e22:	4303      	orrs	r3, r0
 8002e24:	d100      	bne.n	8002e28 <__aeabi_dsub+0x654>
 8002e26:	e715      	b.n	8002c54 <__aeabi_dsub+0x480>
 8002e28:	08c0      	lsrs	r0, r0, #3
 8002e2a:	077b      	lsls	r3, r7, #29
 8002e2c:	465d      	mov	r5, fp
 8002e2e:	4303      	orrs	r3, r0
 8002e30:	08fa      	lsrs	r2, r7, #3
 8002e32:	e666      	b.n	8002b02 <__aeabi_dsub+0x32e>
 8002e34:	08c0      	lsrs	r0, r0, #3
 8002e36:	077b      	lsls	r3, r7, #29
 8002e38:	4303      	orrs	r3, r0
 8002e3a:	08fa      	lsrs	r2, r7, #3
 8002e3c:	e65e      	b.n	8002afc <__aeabi_dsub+0x328>
 8002e3e:	003a      	movs	r2, r7
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	4302      	orrs	r2, r0
 8002e44:	d100      	bne.n	8002e48 <__aeabi_dsub+0x674>
 8002e46:	e682      	b.n	8002b4e <__aeabi_dsub+0x37a>
 8002e48:	464a      	mov	r2, r9
 8002e4a:	0752      	lsls	r2, r2, #29
 8002e4c:	2480      	movs	r4, #128	; 0x80
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	464a      	mov	r2, r9
 8002e52:	0324      	lsls	r4, r4, #12
 8002e54:	08d2      	lsrs	r2, r2, #3
 8002e56:	4222      	tst	r2, r4
 8002e58:	d007      	beq.n	8002e6a <__aeabi_dsub+0x696>
 8002e5a:	08fe      	lsrs	r6, r7, #3
 8002e5c:	4226      	tst	r6, r4
 8002e5e:	d104      	bne.n	8002e6a <__aeabi_dsub+0x696>
 8002e60:	465d      	mov	r5, fp
 8002e62:	0032      	movs	r2, r6
 8002e64:	08c3      	lsrs	r3, r0, #3
 8002e66:	077f      	lsls	r7, r7, #29
 8002e68:	433b      	orrs	r3, r7
 8002e6a:	0f59      	lsrs	r1, r3, #29
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	08db      	lsrs	r3, r3, #3
 8002e70:	0749      	lsls	r1, r1, #29
 8002e72:	430b      	orrs	r3, r1
 8002e74:	e670      	b.n	8002b58 <__aeabi_dsub+0x384>
 8002e76:	08c0      	lsrs	r0, r0, #3
 8002e78:	077b      	lsls	r3, r7, #29
 8002e7a:	4303      	orrs	r3, r0
 8002e7c:	08fa      	lsrs	r2, r7, #3
 8002e7e:	e640      	b.n	8002b02 <__aeabi_dsub+0x32e>
 8002e80:	464c      	mov	r4, r9
 8002e82:	3920      	subs	r1, #32
 8002e84:	40cc      	lsrs	r4, r1
 8002e86:	4661      	mov	r1, ip
 8002e88:	2920      	cmp	r1, #32
 8002e8a:	d006      	beq.n	8002e9a <__aeabi_dsub+0x6c6>
 8002e8c:	4666      	mov	r6, ip
 8002e8e:	2140      	movs	r1, #64	; 0x40
 8002e90:	1b89      	subs	r1, r1, r6
 8002e92:	464e      	mov	r6, r9
 8002e94:	408e      	lsls	r6, r1
 8002e96:	4333      	orrs	r3, r6
 8002e98:	4698      	mov	r8, r3
 8002e9a:	4643      	mov	r3, r8
 8002e9c:	1e59      	subs	r1, r3, #1
 8002e9e:	418b      	sbcs	r3, r1
 8002ea0:	431c      	orrs	r4, r3
 8002ea2:	e5d8      	b.n	8002a56 <__aeabi_dsub+0x282>
 8002ea4:	181c      	adds	r4, r3, r0
 8002ea6:	4284      	cmp	r4, r0
 8002ea8:	4180      	sbcs	r0, r0
 8002eaa:	444f      	add	r7, r9
 8002eac:	46ba      	mov	sl, r7
 8002eae:	4240      	negs	r0, r0
 8002eb0:	4482      	add	sl, r0
 8002eb2:	e6d9      	b.n	8002c68 <__aeabi_dsub+0x494>
 8002eb4:	4653      	mov	r3, sl
 8002eb6:	4323      	orrs	r3, r4
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x6e8>
 8002eba:	e6cb      	b.n	8002c54 <__aeabi_dsub+0x480>
 8002ebc:	e614      	b.n	8002ae8 <__aeabi_dsub+0x314>
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	000007ff 	.word	0x000007ff
 8002ec4:	ff7fffff 	.word	0xff7fffff
 8002ec8:	000007fe 	.word	0x000007fe
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4a01      	ldr	r2, [pc, #4]	; (8002ed4 <__aeabi_dsub+0x700>)
 8002ed0:	001c      	movs	r4, r3
 8002ed2:	e529      	b.n	8002928 <__aeabi_dsub+0x154>
 8002ed4:	000007ff 	.word	0x000007ff

08002ed8 <__aeabi_dcmpun>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	0005      	movs	r5, r0
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <__aeabi_dcmpun+0x38>)
 8002ede:	031c      	lsls	r4, r3, #12
 8002ee0:	0016      	movs	r6, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	030a      	lsls	r2, r1, #12
 8002ee6:	0049      	lsls	r1, r1, #1
 8002ee8:	0b12      	lsrs	r2, r2, #12
 8002eea:	0d49      	lsrs	r1, r1, #21
 8002eec:	0b24      	lsrs	r4, r4, #12
 8002eee:	0d5b      	lsrs	r3, r3, #21
 8002ef0:	4281      	cmp	r1, r0
 8002ef2:	d008      	beq.n	8002f06 <__aeabi_dcmpun+0x2e>
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <__aeabi_dcmpun+0x38>)
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d103      	bne.n	8002f04 <__aeabi_dcmpun+0x2c>
 8002efc:	0020      	movs	r0, r4
 8002efe:	4330      	orrs	r0, r6
 8002f00:	1e43      	subs	r3, r0, #1
 8002f02:	4198      	sbcs	r0, r3
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
 8002f06:	2001      	movs	r0, #1
 8002f08:	432a      	orrs	r2, r5
 8002f0a:	d1fb      	bne.n	8002f04 <__aeabi_dcmpun+0x2c>
 8002f0c:	e7f2      	b.n	8002ef4 <__aeabi_dcmpun+0x1c>
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	000007ff 	.word	0x000007ff

08002f14 <__aeabi_d2iz>:
 8002f14:	000a      	movs	r2, r1
 8002f16:	b530      	push	{r4, r5, lr}
 8002f18:	4c13      	ldr	r4, [pc, #76]	; (8002f68 <__aeabi_d2iz+0x54>)
 8002f1a:	0053      	lsls	r3, r2, #1
 8002f1c:	0309      	lsls	r1, r1, #12
 8002f1e:	0005      	movs	r5, r0
 8002f20:	0b09      	lsrs	r1, r1, #12
 8002f22:	2000      	movs	r0, #0
 8002f24:	0d5b      	lsrs	r3, r3, #21
 8002f26:	0fd2      	lsrs	r2, r2, #31
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	dd04      	ble.n	8002f36 <__aeabi_d2iz+0x22>
 8002f2c:	480f      	ldr	r0, [pc, #60]	; (8002f6c <__aeabi_d2iz+0x58>)
 8002f2e:	4283      	cmp	r3, r0
 8002f30:	dd02      	ble.n	8002f38 <__aeabi_d2iz+0x24>
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <__aeabi_d2iz+0x5c>)
 8002f34:	18d0      	adds	r0, r2, r3
 8002f36:	bd30      	pop	{r4, r5, pc}
 8002f38:	2080      	movs	r0, #128	; 0x80
 8002f3a:	0340      	lsls	r0, r0, #13
 8002f3c:	4301      	orrs	r1, r0
 8002f3e:	480d      	ldr	r0, [pc, #52]	; (8002f74 <__aeabi_d2iz+0x60>)
 8002f40:	1ac0      	subs	r0, r0, r3
 8002f42:	281f      	cmp	r0, #31
 8002f44:	dd08      	ble.n	8002f58 <__aeabi_d2iz+0x44>
 8002f46:	480c      	ldr	r0, [pc, #48]	; (8002f78 <__aeabi_d2iz+0x64>)
 8002f48:	1ac3      	subs	r3, r0, r3
 8002f4a:	40d9      	lsrs	r1, r3
 8002f4c:	000b      	movs	r3, r1
 8002f4e:	4258      	negs	r0, r3
 8002f50:	2a00      	cmp	r2, #0
 8002f52:	d1f0      	bne.n	8002f36 <__aeabi_d2iz+0x22>
 8002f54:	0018      	movs	r0, r3
 8002f56:	e7ee      	b.n	8002f36 <__aeabi_d2iz+0x22>
 8002f58:	4c08      	ldr	r4, [pc, #32]	; (8002f7c <__aeabi_d2iz+0x68>)
 8002f5a:	40c5      	lsrs	r5, r0
 8002f5c:	46a4      	mov	ip, r4
 8002f5e:	4463      	add	r3, ip
 8002f60:	4099      	lsls	r1, r3
 8002f62:	000b      	movs	r3, r1
 8002f64:	432b      	orrs	r3, r5
 8002f66:	e7f2      	b.n	8002f4e <__aeabi_d2iz+0x3a>
 8002f68:	000003fe 	.word	0x000003fe
 8002f6c:	0000041d 	.word	0x0000041d
 8002f70:	7fffffff 	.word	0x7fffffff
 8002f74:	00000433 	.word	0x00000433
 8002f78:	00000413 	.word	0x00000413
 8002f7c:	fffffbed 	.word	0xfffffbed

08002f80 <__aeabi_i2d>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d016      	beq.n	8002fb4 <__aeabi_i2d+0x34>
 8002f86:	17c3      	asrs	r3, r0, #31
 8002f88:	18c5      	adds	r5, r0, r3
 8002f8a:	405d      	eors	r5, r3
 8002f8c:	0fc4      	lsrs	r4, r0, #31
 8002f8e:	0028      	movs	r0, r5
 8002f90:	f000 f91a 	bl	80031c8 <__clzsi2>
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <__aeabi_i2d+0x5c>)
 8002f96:	1a1b      	subs	r3, r3, r0
 8002f98:	280a      	cmp	r0, #10
 8002f9a:	dc16      	bgt.n	8002fca <__aeabi_i2d+0x4a>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	002e      	movs	r6, r5
 8002fa0:	3215      	adds	r2, #21
 8002fa2:	4096      	lsls	r6, r2
 8002fa4:	220b      	movs	r2, #11
 8002fa6:	1a12      	subs	r2, r2, r0
 8002fa8:	40d5      	lsrs	r5, r2
 8002faa:	055b      	lsls	r3, r3, #21
 8002fac:	032d      	lsls	r5, r5, #12
 8002fae:	0b2d      	lsrs	r5, r5, #12
 8002fb0:	0d5b      	lsrs	r3, r3, #21
 8002fb2:	e003      	b.n	8002fbc <__aeabi_i2d+0x3c>
 8002fb4:	2400      	movs	r4, #0
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2500      	movs	r5, #0
 8002fba:	2600      	movs	r6, #0
 8002fbc:	051b      	lsls	r3, r3, #20
 8002fbe:	432b      	orrs	r3, r5
 8002fc0:	07e4      	lsls	r4, r4, #31
 8002fc2:	4323      	orrs	r3, r4
 8002fc4:	0030      	movs	r0, r6
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
 8002fca:	380b      	subs	r0, #11
 8002fcc:	4085      	lsls	r5, r0
 8002fce:	055b      	lsls	r3, r3, #21
 8002fd0:	032d      	lsls	r5, r5, #12
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	0b2d      	lsrs	r5, r5, #12
 8002fd6:	0d5b      	lsrs	r3, r3, #21
 8002fd8:	e7f0      	b.n	8002fbc <__aeabi_i2d+0x3c>
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	0000041e 	.word	0x0000041e

08002fe0 <__aeabi_ui2d>:
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	1e04      	subs	r4, r0, #0
 8002fe4:	d010      	beq.n	8003008 <__aeabi_ui2d+0x28>
 8002fe6:	f000 f8ef 	bl	80031c8 <__clzsi2>
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <__aeabi_ui2d+0x48>)
 8002fec:	1a1b      	subs	r3, r3, r0
 8002fee:	280a      	cmp	r0, #10
 8002ff0:	dc11      	bgt.n	8003016 <__aeabi_ui2d+0x36>
 8002ff2:	220b      	movs	r2, #11
 8002ff4:	0021      	movs	r1, r4
 8002ff6:	1a12      	subs	r2, r2, r0
 8002ff8:	40d1      	lsrs	r1, r2
 8002ffa:	3015      	adds	r0, #21
 8002ffc:	030a      	lsls	r2, r1, #12
 8002ffe:	055b      	lsls	r3, r3, #21
 8003000:	4084      	lsls	r4, r0
 8003002:	0b12      	lsrs	r2, r2, #12
 8003004:	0d5b      	lsrs	r3, r3, #21
 8003006:	e001      	b.n	800300c <__aeabi_ui2d+0x2c>
 8003008:	2300      	movs	r3, #0
 800300a:	2200      	movs	r2, #0
 800300c:	051b      	lsls	r3, r3, #20
 800300e:	4313      	orrs	r3, r2
 8003010:	0020      	movs	r0, r4
 8003012:	0019      	movs	r1, r3
 8003014:	bd10      	pop	{r4, pc}
 8003016:	0022      	movs	r2, r4
 8003018:	380b      	subs	r0, #11
 800301a:	4082      	lsls	r2, r0
 800301c:	055b      	lsls	r3, r3, #21
 800301e:	0312      	lsls	r2, r2, #12
 8003020:	2400      	movs	r4, #0
 8003022:	0b12      	lsrs	r2, r2, #12
 8003024:	0d5b      	lsrs	r3, r3, #21
 8003026:	e7f1      	b.n	800300c <__aeabi_ui2d+0x2c>
 8003028:	0000041e 	.word	0x0000041e

0800302c <__aeabi_f2d>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	0242      	lsls	r2, r0, #9
 8003030:	0043      	lsls	r3, r0, #1
 8003032:	0fc4      	lsrs	r4, r0, #31
 8003034:	20fe      	movs	r0, #254	; 0xfe
 8003036:	0e1b      	lsrs	r3, r3, #24
 8003038:	1c59      	adds	r1, r3, #1
 800303a:	0a55      	lsrs	r5, r2, #9
 800303c:	4208      	tst	r0, r1
 800303e:	d00c      	beq.n	800305a <__aeabi_f2d+0x2e>
 8003040:	21e0      	movs	r1, #224	; 0xe0
 8003042:	0089      	lsls	r1, r1, #2
 8003044:	468c      	mov	ip, r1
 8003046:	076d      	lsls	r5, r5, #29
 8003048:	0b12      	lsrs	r2, r2, #12
 800304a:	4463      	add	r3, ip
 800304c:	051b      	lsls	r3, r3, #20
 800304e:	4313      	orrs	r3, r2
 8003050:	07e4      	lsls	r4, r4, #31
 8003052:	4323      	orrs	r3, r4
 8003054:	0028      	movs	r0, r5
 8003056:	0019      	movs	r1, r3
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	2b00      	cmp	r3, #0
 800305c:	d114      	bne.n	8003088 <__aeabi_f2d+0x5c>
 800305e:	2d00      	cmp	r5, #0
 8003060:	d01b      	beq.n	800309a <__aeabi_f2d+0x6e>
 8003062:	0028      	movs	r0, r5
 8003064:	f000 f8b0 	bl	80031c8 <__clzsi2>
 8003068:	280a      	cmp	r0, #10
 800306a:	dc1c      	bgt.n	80030a6 <__aeabi_f2d+0x7a>
 800306c:	230b      	movs	r3, #11
 800306e:	002a      	movs	r2, r5
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	40da      	lsrs	r2, r3
 8003074:	0003      	movs	r3, r0
 8003076:	3315      	adds	r3, #21
 8003078:	409d      	lsls	r5, r3
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <__aeabi_f2d+0x88>)
 800307c:	0312      	lsls	r2, r2, #12
 800307e:	1a1b      	subs	r3, r3, r0
 8003080:	055b      	lsls	r3, r3, #21
 8003082:	0b12      	lsrs	r2, r2, #12
 8003084:	0d5b      	lsrs	r3, r3, #21
 8003086:	e7e1      	b.n	800304c <__aeabi_f2d+0x20>
 8003088:	2d00      	cmp	r5, #0
 800308a:	d009      	beq.n	80030a0 <__aeabi_f2d+0x74>
 800308c:	0b13      	lsrs	r3, r2, #12
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	0312      	lsls	r2, r2, #12
 8003092:	431a      	orrs	r2, r3
 8003094:	076d      	lsls	r5, r5, #29
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <__aeabi_f2d+0x8c>)
 8003098:	e7d8      	b.n	800304c <__aeabi_f2d+0x20>
 800309a:	2300      	movs	r3, #0
 800309c:	2200      	movs	r2, #0
 800309e:	e7d5      	b.n	800304c <__aeabi_f2d+0x20>
 80030a0:	2200      	movs	r2, #0
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <__aeabi_f2d+0x8c>)
 80030a4:	e7d2      	b.n	800304c <__aeabi_f2d+0x20>
 80030a6:	0003      	movs	r3, r0
 80030a8:	002a      	movs	r2, r5
 80030aa:	3b0b      	subs	r3, #11
 80030ac:	409a      	lsls	r2, r3
 80030ae:	2500      	movs	r5, #0
 80030b0:	e7e3      	b.n	800307a <__aeabi_f2d+0x4e>
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	00000389 	.word	0x00000389
 80030b8:	000007ff 	.word	0x000007ff

080030bc <__aeabi_d2f>:
 80030bc:	0002      	movs	r2, r0
 80030be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c0:	004b      	lsls	r3, r1, #1
 80030c2:	030d      	lsls	r5, r1, #12
 80030c4:	0f40      	lsrs	r0, r0, #29
 80030c6:	0d5b      	lsrs	r3, r3, #21
 80030c8:	0fcc      	lsrs	r4, r1, #31
 80030ca:	0a6d      	lsrs	r5, r5, #9
 80030cc:	493a      	ldr	r1, [pc, #232]	; (80031b8 <__aeabi_d2f+0xfc>)
 80030ce:	4305      	orrs	r5, r0
 80030d0:	1c58      	adds	r0, r3, #1
 80030d2:	00d7      	lsls	r7, r2, #3
 80030d4:	4208      	tst	r0, r1
 80030d6:	d00a      	beq.n	80030ee <__aeabi_d2f+0x32>
 80030d8:	4938      	ldr	r1, [pc, #224]	; (80031bc <__aeabi_d2f+0x100>)
 80030da:	1859      	adds	r1, r3, r1
 80030dc:	29fe      	cmp	r1, #254	; 0xfe
 80030de:	dd16      	ble.n	800310e <__aeabi_d2f+0x52>
 80030e0:	20ff      	movs	r0, #255	; 0xff
 80030e2:	2200      	movs	r2, #0
 80030e4:	05c0      	lsls	r0, r0, #23
 80030e6:	4310      	orrs	r0, r2
 80030e8:	07e4      	lsls	r4, r4, #31
 80030ea:	4320      	orrs	r0, r4
 80030ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <__aeabi_d2f+0x44>
 80030f2:	433d      	orrs	r5, r7
 80030f4:	d026      	beq.n	8003144 <__aeabi_d2f+0x88>
 80030f6:	2205      	movs	r2, #5
 80030f8:	0192      	lsls	r2, r2, #6
 80030fa:	0a52      	lsrs	r2, r2, #9
 80030fc:	b2d8      	uxtb	r0, r3
 80030fe:	e7f1      	b.n	80030e4 <__aeabi_d2f+0x28>
 8003100:	432f      	orrs	r7, r5
 8003102:	d0ed      	beq.n	80030e0 <__aeabi_d2f+0x24>
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	03d2      	lsls	r2, r2, #15
 8003108:	20ff      	movs	r0, #255	; 0xff
 800310a:	432a      	orrs	r2, r5
 800310c:	e7ea      	b.n	80030e4 <__aeabi_d2f+0x28>
 800310e:	2900      	cmp	r1, #0
 8003110:	dd1b      	ble.n	800314a <__aeabi_d2f+0x8e>
 8003112:	0192      	lsls	r2, r2, #6
 8003114:	1e50      	subs	r0, r2, #1
 8003116:	4182      	sbcs	r2, r0
 8003118:	00ed      	lsls	r5, r5, #3
 800311a:	0f7f      	lsrs	r7, r7, #29
 800311c:	432a      	orrs	r2, r5
 800311e:	433a      	orrs	r2, r7
 8003120:	0753      	lsls	r3, r2, #29
 8003122:	d047      	beq.n	80031b4 <__aeabi_d2f+0xf8>
 8003124:	230f      	movs	r3, #15
 8003126:	4013      	ands	r3, r2
 8003128:	2b04      	cmp	r3, #4
 800312a:	d000      	beq.n	800312e <__aeabi_d2f+0x72>
 800312c:	3204      	adds	r2, #4
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	04db      	lsls	r3, r3, #19
 8003132:	4013      	ands	r3, r2
 8003134:	d03e      	beq.n	80031b4 <__aeabi_d2f+0xf8>
 8003136:	1c48      	adds	r0, r1, #1
 8003138:	29fe      	cmp	r1, #254	; 0xfe
 800313a:	d0d1      	beq.n	80030e0 <__aeabi_d2f+0x24>
 800313c:	0192      	lsls	r2, r2, #6
 800313e:	0a52      	lsrs	r2, r2, #9
 8003140:	b2c0      	uxtb	r0, r0
 8003142:	e7cf      	b.n	80030e4 <__aeabi_d2f+0x28>
 8003144:	2000      	movs	r0, #0
 8003146:	2200      	movs	r2, #0
 8003148:	e7cc      	b.n	80030e4 <__aeabi_d2f+0x28>
 800314a:	000a      	movs	r2, r1
 800314c:	3217      	adds	r2, #23
 800314e:	db2f      	blt.n	80031b0 <__aeabi_d2f+0xf4>
 8003150:	2680      	movs	r6, #128	; 0x80
 8003152:	0436      	lsls	r6, r6, #16
 8003154:	432e      	orrs	r6, r5
 8003156:	251e      	movs	r5, #30
 8003158:	1a6d      	subs	r5, r5, r1
 800315a:	2d1f      	cmp	r5, #31
 800315c:	dd11      	ble.n	8003182 <__aeabi_d2f+0xc6>
 800315e:	2202      	movs	r2, #2
 8003160:	4252      	negs	r2, r2
 8003162:	1a52      	subs	r2, r2, r1
 8003164:	0031      	movs	r1, r6
 8003166:	40d1      	lsrs	r1, r2
 8003168:	2d20      	cmp	r5, #32
 800316a:	d004      	beq.n	8003176 <__aeabi_d2f+0xba>
 800316c:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <__aeabi_d2f+0x104>)
 800316e:	4694      	mov	ip, r2
 8003170:	4463      	add	r3, ip
 8003172:	409e      	lsls	r6, r3
 8003174:	4337      	orrs	r7, r6
 8003176:	003a      	movs	r2, r7
 8003178:	1e53      	subs	r3, r2, #1
 800317a:	419a      	sbcs	r2, r3
 800317c:	430a      	orrs	r2, r1
 800317e:	2100      	movs	r1, #0
 8003180:	e7ce      	b.n	8003120 <__aeabi_d2f+0x64>
 8003182:	4a10      	ldr	r2, [pc, #64]	; (80031c4 <__aeabi_d2f+0x108>)
 8003184:	0038      	movs	r0, r7
 8003186:	4694      	mov	ip, r2
 8003188:	4463      	add	r3, ip
 800318a:	4098      	lsls	r0, r3
 800318c:	003a      	movs	r2, r7
 800318e:	1e41      	subs	r1, r0, #1
 8003190:	4188      	sbcs	r0, r1
 8003192:	409e      	lsls	r6, r3
 8003194:	40ea      	lsrs	r2, r5
 8003196:	4330      	orrs	r0, r6
 8003198:	4302      	orrs	r2, r0
 800319a:	2100      	movs	r1, #0
 800319c:	0753      	lsls	r3, r2, #29
 800319e:	d1c1      	bne.n	8003124 <__aeabi_d2f+0x68>
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	0013      	movs	r3, r2
 80031a4:	04c9      	lsls	r1, r1, #19
 80031a6:	2001      	movs	r0, #1
 80031a8:	400b      	ands	r3, r1
 80031aa:	420a      	tst	r2, r1
 80031ac:	d1c6      	bne.n	800313c <__aeabi_d2f+0x80>
 80031ae:	e7a3      	b.n	80030f8 <__aeabi_d2f+0x3c>
 80031b0:	2300      	movs	r3, #0
 80031b2:	e7a0      	b.n	80030f6 <__aeabi_d2f+0x3a>
 80031b4:	000b      	movs	r3, r1
 80031b6:	e79f      	b.n	80030f8 <__aeabi_d2f+0x3c>
 80031b8:	000007fe 	.word	0x000007fe
 80031bc:	fffffc80 	.word	0xfffffc80
 80031c0:	fffffca2 	.word	0xfffffca2
 80031c4:	fffffc82 	.word	0xfffffc82

080031c8 <__clzsi2>:
 80031c8:	211c      	movs	r1, #28
 80031ca:	2301      	movs	r3, #1
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	4298      	cmp	r0, r3
 80031d0:	d301      	bcc.n	80031d6 <__clzsi2+0xe>
 80031d2:	0c00      	lsrs	r0, r0, #16
 80031d4:	3910      	subs	r1, #16
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	4298      	cmp	r0, r3
 80031da:	d301      	bcc.n	80031e0 <__clzsi2+0x18>
 80031dc:	0a00      	lsrs	r0, r0, #8
 80031de:	3908      	subs	r1, #8
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	4298      	cmp	r0, r3
 80031e4:	d301      	bcc.n	80031ea <__clzsi2+0x22>
 80031e6:	0900      	lsrs	r0, r0, #4
 80031e8:	3904      	subs	r1, #4
 80031ea:	a202      	add	r2, pc, #8	; (adr r2, 80031f4 <__clzsi2+0x2c>)
 80031ec:	5c10      	ldrb	r0, [r2, r0]
 80031ee:	1840      	adds	r0, r0, r1
 80031f0:	4770      	bx	lr
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	02020304 	.word	0x02020304
 80031f8:	01010101 	.word	0x01010101
	...

08003204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003204:	b590      	push	{r4, r7, lr}
 8003206:	b08b      	sub	sp, #44	; 0x2c
 8003208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320a:	2414      	movs	r4, #20
 800320c:	193b      	adds	r3, r7, r4
 800320e:	0018      	movs	r0, r3
 8003210:	2314      	movs	r3, #20
 8003212:	001a      	movs	r2, r3
 8003214:	2100      	movs	r1, #0
 8003216:	f008 f971 	bl	800b4fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800321a:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <MX_GPIO_Init+0xcc>)
 800321c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003220:	2104      	movs	r1, #4
 8003222:	430a      	orrs	r2, r1
 8003224:	635a      	str	r2, [r3, #52]	; 0x34
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	2204      	movs	r2, #4
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003236:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003238:	2120      	movs	r1, #32
 800323a:	430a      	orrs	r2, r1
 800323c:	635a      	str	r2, [r3, #52]	; 0x34
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003242:	2220      	movs	r2, #32
 8003244:	4013      	ands	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <MX_GPIO_Init+0xcc>)
 800324c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003250:	2102      	movs	r1, #2
 8003252:	430a      	orrs	r2, r1
 8003254:	635a      	str	r2, [r3, #52]	; 0x34
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	2202      	movs	r2, #2
 800325c:	4013      	ands	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003268:	2101      	movs	r1, #1
 800326a:	430a      	orrs	r2, r1
 800326c:	635a      	str	r2, [r3, #52]	; 0x34
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	2201      	movs	r2, #1
 8003274:	4013      	ands	r3, r2
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <MX_GPIO_Init+0xcc>)
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003280:	2108      	movs	r1, #8
 8003282:	430a      	orrs	r2, r1
 8003284:	635a      	str	r2, [r3, #52]	; 0x34
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <MX_GPIO_Init+0xcc>)
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	2208      	movs	r2, #8
 800328c:	4013      	ands	r3, r2
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8003292:	23e0      	movs	r3, #224	; 0xe0
 8003294:	019b      	lsls	r3, r3, #6
 8003296:	480f      	ldr	r0, [pc, #60]	; (80032d4 <MX_GPIO_Init+0xd0>)
 8003298:	2200      	movs	r2, #0
 800329a:	0019      	movs	r1, r3
 800329c:	f001 fae6 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80032a0:	193b      	adds	r3, r7, r4
 80032a2:	22e0      	movs	r2, #224	; 0xe0
 80032a4:	0192      	lsls	r2, r2, #6
 80032a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a8:	193b      	adds	r3, r7, r4
 80032aa:	2201      	movs	r2, #1
 80032ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	2200      	movs	r2, #0
 80032b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <MX_GPIO_Init+0xd0>)
 80032be:	0019      	movs	r1, r3
 80032c0:	0010      	movs	r0, r2
 80032c2:	f001 f96f 	bl	80045a4 <HAL_GPIO_Init>

}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b00b      	add	sp, #44	; 0x2c
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	40021000 	.word	0x40021000
 80032d4:	50000400 	.word	0x50000400

080032d8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2 , (uint8_t *)&ch, 1, 0xFFFF);
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <__io_putchar+0x20>)
 80032e2:	1d39      	adds	r1, r7, #4
 80032e4:	4805      	ldr	r0, [pc, #20]	; (80032fc <__io_putchar+0x24>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	f003 fd98 	bl	8006e1c <HAL_UART_Transmit>
    return ch;
 80032ec:	687b      	ldr	r3, [r7, #4]
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b002      	add	sp, #8
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	0000ffff 	.word	0x0000ffff
 80032fc:	20000438 	.word	0x20000438

08003300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003304:	f000 ff1e 	bl	8004144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003308:	f000 f850 	bl	80033ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800330c:	f7ff ff7a 	bl	8003204 <MX_GPIO_Init>
  MX_TIM17_Init();
 8003310:	f000 fc22 	bl	8003b58 <MX_TIM17_Init>
  MX_TIM15_Init();
 8003314:	f000 fad4 	bl	80038c0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8003318:	f000 fb96 	bl	8003a48 <MX_TIM16_Init>
  MX_TIM1_Init();
 800331c:	f000 f9c4 	bl	80036a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003320:	f000 fa2c 	bl	800377c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003324:	f000 fe28 	bl	8003f78 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8003328:	f000 fa8c 	bl	8003844 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Shell_Init();
 800332c:	f006 fa64 	bl	80097f8 <Shell_Init>
  PIDInit();
 8003330:	f005 fc78 	bl	8008c24 <PIDInit>
  dcMotorInit();
 8003334:	f005 fe08 	bl	8008f48 <dcMotorInit>
/*  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim7);
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);*/
  HAL_TIM_Base_Start_IT(&htim1);
 8003338:	4b16      	ldr	r3, [pc, #88]	; (8003394 <main+0x94>)
 800333a:	0018      	movs	r0, r3
 800333c:	f002 f95e 	bl	80055fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8003340:	4b15      	ldr	r3, [pc, #84]	; (8003398 <main+0x98>)
 8003342:	0018      	movs	r0, r3
 8003344:	f002 f95a 	bl	80055fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <main+0x9c>)
 800334a:	0018      	movs	r0, r3
 800334c:	f002 f956 	bl	80055fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <main+0x98>)
 8003352:	213c      	movs	r1, #60	; 0x3c
 8003354:	0018      	movs	r0, r3
 8003356:	f002 fc1f 	bl	8005b98 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <main+0x94>)
 800335c:	213c      	movs	r1, #60	; 0x3c
 800335e:	0018      	movs	r0, r3
 8003360:	f002 fc1a 	bl	8005b98 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <main+0xa0>)
 8003366:	2100      	movs	r1, #0
 8003368:	0018      	movs	r0, r3
 800336a:	f002 f9fd 	bl	8005768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <main+0xa4>)
 8003370:	2100      	movs	r1, #0
 8003372:	0018      	movs	r0, r3
 8003374:	f002 f9f8 	bl	8005768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <main+0xa8>)
 800337a:	2104      	movs	r1, #4
 800337c:	0018      	movs	r0, r3
 800337e:	f002 f9f3 	bl	8005768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <main+0xa8>)
 8003384:	2100      	movs	r1, #0
 8003386:	0018      	movs	r0, r3
 8003388:	f002 f9ee 	bl	8005768 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      Shell_Loop();
 800338c:	f006 fa7a 	bl	8009884 <Shell_Loop>
 8003390:	e7fc      	b.n	800338c <main+0x8c>
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	20000270 	.word	0x20000270
 8003398:	200002bc 	.word	0x200002bc
 800339c:	20000308 	.word	0x20000308
 80033a0:	200003ec 	.word	0x200003ec
 80033a4:	200003a0 	.word	0x200003a0
 80033a8:	20000354 	.word	0x20000354

080033ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b093      	sub	sp, #76	; 0x4c
 80033b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033b2:	2414      	movs	r4, #20
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	0018      	movs	r0, r3
 80033b8:	2334      	movs	r3, #52	; 0x34
 80033ba:	001a      	movs	r2, r3
 80033bc:	2100      	movs	r1, #0
 80033be:	f008 f89d 	bl	800b4fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	0018      	movs	r0, r3
 80033c6:	2310      	movs	r3, #16
 80033c8:	001a      	movs	r2, r3
 80033ca:	2100      	movs	r1, #0
 80033cc:	f008 f896 	bl	800b4fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	0018      	movs	r0, r3
 80033d6:	f001 fa81 	bl	80048dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033da:	193b      	adds	r3, r7, r4
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033e0:	193b      	adds	r3, r7, r4
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	0252      	lsls	r2, r2, #9
 80033e6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e8:	0021      	movs	r1, r4
 80033ea:	187b      	adds	r3, r7, r1
 80033ec:	2202      	movs	r2, #2
 80033ee:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	2203      	movs	r2, #3
 80033f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	2200      	movs	r2, #0
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	2208      	movs	r2, #8
 8003400:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003402:	187b      	adds	r3, r7, r1
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	0292      	lsls	r2, r2, #10
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	0592      	lsls	r2, r2, #22
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003412:	187b      	adds	r3, r7, r1
 8003414:	0018      	movs	r0, r3
 8003416:	f001 faad 	bl	8004974 <HAL_RCC_OscConfig>
 800341a:	1e03      	subs	r3, r0, #0
 800341c:	d001      	beq.n	8003422 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800341e:	f000 f819 	bl	8003454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	2202      	movs	r2, #2
 800342c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	2102      	movs	r1, #2
 800343e:	0018      	movs	r0, r3
 8003440:	f001 fda8 	bl	8004f94 <HAL_RCC_ClockConfig>
 8003444:	1e03      	subs	r3, r0, #0
 8003446:	d001      	beq.n	800344c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003448:	f000 f804 	bl	8003454 <Error_Handler>
  }
}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b013      	add	sp, #76	; 0x4c
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003458:	b672      	cpsid	i
}
 800345a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800345c:	e7fe      	b.n	800345c <Error_Handler+0x8>
	...

08003460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_MspInit+0x44>)
 8003468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_MspInit+0x44>)
 800346c:	2101      	movs	r1, #1
 800346e:	430a      	orrs	r2, r1
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_MspInit+0x44>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2201      	movs	r2, #1
 8003478:	4013      	ands	r3, r2
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_MspInit+0x44>)
 8003480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_MspInit+0x44>)
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	0549      	lsls	r1, r1, #21
 8003488:	430a      	orrs	r2, r1
 800348a:	63da      	str	r2, [r3, #60]	; 0x3c
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_MspInit+0x44>)
 800348e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	055b      	lsls	r3, r3, #21
 8003494:	4013      	ands	r3, r2
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b002      	add	sp, #8
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	40021000 	.word	0x40021000

080034a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034ac:	e7fe      	b.n	80034ac <NMI_Handler+0x4>

080034ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b2:	e7fe      	b.n	80034b2 <HardFault_Handler+0x4>

080034b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034cc:	f000 fea4 	bl	8004218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <TIM3_IRQHandler+0x14>)
 80034de:	0018      	movs	r0, r3
 80034e0:	f002 fbfe 	bl	8005ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	200002bc 	.word	0x200002bc

080034f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <TIM7_IRQHandler+0x14>)
 80034f6:	0018      	movs	r0, r3
 80034f8:	f002 fbf2 	bl	8005ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	20000308 	.word	0x20000308

08003508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <USART2_IRQHandler+0x14>)
 800350e:	0018      	movs	r0, r3
 8003510:	f003 fd78 	bl	8007004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	20000438 	.word	0x20000438

08003520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  return 1;
 8003524:	2301      	movs	r3, #1
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_kill>:

int _kill(int pid, int sig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003536:	f008 f8b1 	bl	800b69c <__errno>
 800353a:	0003      	movs	r3, r0
 800353c:	2216      	movs	r2, #22
 800353e:	601a      	str	r2, [r3, #0]
  return -1;
 8003540:	2301      	movs	r3, #1
 8003542:	425b      	negs	r3, r3
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}

0800354c <_exit>:

void _exit (int status)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003554:	2301      	movs	r3, #1
 8003556:	425a      	negs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	0011      	movs	r1, r2
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff ffe5 	bl	800352c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003562:	e7fe      	b.n	8003562 <_exit+0x16>

08003564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	e00a      	b.n	800358c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003576:	e000      	b.n	800357a <_read+0x16>
 8003578:	bf00      	nop
 800357a:	0001      	movs	r1, r0
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	60ba      	str	r2, [r7, #8]
 8003582:	b2ca      	uxtb	r2, r1
 8003584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3301      	adds	r3, #1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	dbf0      	blt.n	8003576 <_read+0x12>
  }

  return len;
 8003594:	687b      	ldr	r3, [r7, #4]
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b006      	add	sp, #24
 800359c:	bd80      	pop	{r7, pc}

0800359e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	e009      	b.n	80035c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	60ba      	str	r2, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7ff fe8d 	bl	80032d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3301      	adds	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	dbf1      	blt.n	80035b0 <_write+0x12>
  }
  return len;
 80035cc:	687b      	ldr	r3, [r7, #4]
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b006      	add	sp, #24
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_close>:

int _close(int file)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035de:	2301      	movs	r3, #1
 80035e0:	425b      	negs	r3, r3
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b002      	add	sp, #8
 80035e8:	bd80      	pop	{r7, pc}

080035ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	0192      	lsls	r2, r2, #6
 80035fa:	605a      	str	r2, [r3, #4]
  return 0;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}

08003606 <_isatty>:

int _isatty(int file)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800360e:	2301      	movs	r3, #1
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b002      	add	sp, #8
 8003616:	bd80      	pop	{r7, pc}

08003618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003624:	2300      	movs	r3, #0
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003638:	4a14      	ldr	r2, [pc, #80]	; (800368c <_sbrk+0x5c>)
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <_sbrk+0x60>)
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <_sbrk+0x64>)
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <_sbrk+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <_sbrk+0x64>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	18d3      	adds	r3, r2, r3
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	429a      	cmp	r2, r3
 800365e:	d207      	bcs.n	8003670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003660:	f008 f81c 	bl	800b69c <__errno>
 8003664:	0003      	movs	r3, r0
 8003666:	220c      	movs	r2, #12
 8003668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800366a:	2301      	movs	r3, #1
 800366c:	425b      	negs	r3, r3
 800366e:	e009      	b.n	8003684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <_sbrk+0x64>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <_sbrk+0x64>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	18d2      	adds	r2, r2, r3
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <_sbrk+0x64>)
 8003680:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b006      	add	sp, #24
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20009000 	.word	0x20009000
 8003690:	00000400 	.word	0x00000400
 8003694:	2000026c 	.word	0x2000026c
 8003698:	200007c8 	.word	0x200007c8

0800369c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b08d      	sub	sp, #52	; 0x34
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036ae:	240c      	movs	r4, #12
 80036b0:	193b      	adds	r3, r7, r4
 80036b2:	0018      	movs	r0, r3
 80036b4:	2324      	movs	r3, #36	; 0x24
 80036b6:	001a      	movs	r2, r3
 80036b8:	2100      	movs	r1, #0
 80036ba:	f007 ff1f 	bl	800b4fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036be:	003b      	movs	r3, r7
 80036c0:	0018      	movs	r0, r3
 80036c2:	230c      	movs	r3, #12
 80036c4:	001a      	movs	r2, r3
 80036c6:	2100      	movs	r1, #0
 80036c8:	f007 ff18 	bl	800b4fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036cc:	4b28      	ldr	r3, [pc, #160]	; (8003770 <MX_TIM1_Init+0xc8>)
 80036ce:	4a29      	ldr	r2, [pc, #164]	; (8003774 <MX_TIM1_Init+0xcc>)
 80036d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80036d2:	4b27      	ldr	r3, [pc, #156]	; (8003770 <MX_TIM1_Init+0xc8>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d8:	4b25      	ldr	r3, [pc, #148]	; (8003770 <MX_TIM1_Init+0xc8>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <MX_TIM1_Init+0xc8>)
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <MX_TIM1_Init+0xd0>)
 80036e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <MX_TIM1_Init+0xc8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036ea:	4b21      	ldr	r3, [pc, #132]	; (8003770 <MX_TIM1_Init+0xc8>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036f0:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <MX_TIM1_Init+0xc8>)
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036f6:	0021      	movs	r1, r4
 80036f8:	187b      	adds	r3, r7, r1
 80036fa:	2203      	movs	r2, #3
 80036fc:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	2200      	movs	r2, #0
 8003702:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003704:	187b      	adds	r3, r7, r1
 8003706:	2201      	movs	r2, #1
 8003708:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800370a:	187b      	adds	r3, r7, r1
 800370c:	2200      	movs	r2, #0
 800370e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2200      	movs	r2, #0
 8003714:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003716:	187b      	adds	r3, r7, r1
 8003718:	2200      	movs	r2, #0
 800371a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800371c:	187b      	adds	r3, r7, r1
 800371e:	2201      	movs	r2, #1
 8003720:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003722:	187b      	adds	r3, r7, r1
 8003724:	2200      	movs	r2, #0
 8003726:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2200      	movs	r2, #0
 800372c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800372e:	187a      	adds	r2, r7, r1
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <MX_TIM1_Init+0xc8>)
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f002 f987 	bl	8005a48 <HAL_TIM_Encoder_Init>
 800373a:	1e03      	subs	r3, r0, #0
 800373c:	d001      	beq.n	8003742 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800373e:	f7ff fe89 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003742:	003b      	movs	r3, r7
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003748:	003b      	movs	r3, r7
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800374e:	003b      	movs	r3, r7
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003754:	003a      	movs	r2, r7
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <MX_TIM1_Init+0xc8>)
 8003758:	0011      	movs	r1, r2
 800375a:	0018      	movs	r0, r3
 800375c:	f003 f9e2 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 8003760:	1e03      	subs	r3, r0, #0
 8003762:	d001      	beq.n	8003768 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003764:	f7ff fe76 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b00d      	add	sp, #52	; 0x34
 800376e:	bd90      	pop	{r4, r7, pc}
 8003770:	20000270 	.word	0x20000270
 8003774:	40012c00 	.word	0x40012c00
 8003778:	0000ffff 	.word	0x0000ffff

0800377c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b08d      	sub	sp, #52	; 0x34
 8003780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003782:	240c      	movs	r4, #12
 8003784:	193b      	adds	r3, r7, r4
 8003786:	0018      	movs	r0, r3
 8003788:	2324      	movs	r3, #36	; 0x24
 800378a:	001a      	movs	r2, r3
 800378c:	2100      	movs	r1, #0
 800378e:	f007 feb5 	bl	800b4fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003792:	003b      	movs	r3, r7
 8003794:	0018      	movs	r0, r3
 8003796:	230c      	movs	r3, #12
 8003798:	001a      	movs	r2, r3
 800379a:	2100      	movs	r1, #0
 800379c:	f007 feae 	bl	800b4fc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <MX_TIM3_Init+0xbc>)
 80037a2:	4a26      	ldr	r2, [pc, #152]	; (800383c <MX_TIM3_Init+0xc0>)
 80037a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <MX_TIM3_Init+0xbc>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ac:	4b22      	ldr	r3, [pc, #136]	; (8003838 <MX_TIM3_Init+0xbc>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80037b2:	4b21      	ldr	r3, [pc, #132]	; (8003838 <MX_TIM3_Init+0xbc>)
 80037b4:	4a22      	ldr	r2, [pc, #136]	; (8003840 <MX_TIM3_Init+0xc4>)
 80037b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b8:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <MX_TIM3_Init+0xbc>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <MX_TIM3_Init+0xbc>)
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037c4:	0021      	movs	r1, r4
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	2203      	movs	r2, #3
 80037ca:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	2200      	movs	r2, #0
 80037d0:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	2201      	movs	r2, #1
 80037d6:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037e4:	187b      	adds	r3, r7, r1
 80037e6:	2200      	movs	r2, #0
 80037e8:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	2201      	movs	r2, #1
 80037ee:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037f0:	187b      	adds	r3, r7, r1
 80037f2:	2200      	movs	r2, #0
 80037f4:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80037f6:	187b      	adds	r3, r7, r1
 80037f8:	2200      	movs	r2, #0
 80037fa:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037fc:	187a      	adds	r2, r7, r1
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <MX_TIM3_Init+0xbc>)
 8003800:	0011      	movs	r1, r2
 8003802:	0018      	movs	r0, r3
 8003804:	f002 f920 	bl	8005a48 <HAL_TIM_Encoder_Init>
 8003808:	1e03      	subs	r3, r0, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800380c:	f7ff fe22 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003810:	003b      	movs	r3, r7
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003816:	003b      	movs	r3, r7
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800381c:	003a      	movs	r2, r7
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <MX_TIM3_Init+0xbc>)
 8003820:	0011      	movs	r1, r2
 8003822:	0018      	movs	r0, r3
 8003824:	f003 f97e 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 8003828:	1e03      	subs	r3, r0, #0
 800382a:	d001      	beq.n	8003830 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800382c:	f7ff fe12 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b00d      	add	sp, #52	; 0x34
 8003836:	bd90      	pop	{r4, r7, pc}
 8003838:	200002bc 	.word	0x200002bc
 800383c:	40000400 	.word	0x40000400
 8003840:	0000ffff 	.word	0x0000ffff

08003844 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	0018      	movs	r0, r3
 800384e:	230c      	movs	r3, #12
 8003850:	001a      	movs	r2, r3
 8003852:	2100      	movs	r1, #0
 8003854:	f007 fe52 	bl	800b4fc <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <MX_TIM7_Init+0x6c>)
 800385a:	4a16      	ldr	r2, [pc, #88]	; (80038b4 <MX_TIM7_Init+0x70>)
 800385c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6400-1;
 800385e:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <MX_TIM7_Init+0x6c>)
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <MX_TIM7_Init+0x74>)
 8003862:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <MX_TIM7_Init+0x6c>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <MX_TIM7_Init+0x6c>)
 800386c:	4a13      	ldr	r2, [pc, #76]	; (80038bc <MX_TIM7_Init+0x78>)
 800386e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <MX_TIM7_Init+0x6c>)
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003876:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <MX_TIM7_Init+0x6c>)
 8003878:	0018      	movs	r0, r3
 800387a:	f001 fe67 	bl	800554c <HAL_TIM_Base_Init>
 800387e:	1e03      	subs	r3, r0, #0
 8003880:	d001      	beq.n	8003886 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003882:	f7ff fde7 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003886:	1d3b      	adds	r3, r7, #4
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800388c:	1d3b      	adds	r3, r7, #4
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003892:	1d3a      	adds	r2, r7, #4
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <MX_TIM7_Init+0x6c>)
 8003896:	0011      	movs	r1, r2
 8003898:	0018      	movs	r0, r3
 800389a:	f003 f943 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 800389e:	1e03      	subs	r3, r0, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80038a2:	f7ff fdd7 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	20000308 	.word	0x20000308
 80038b4:	40001400 	.word	0x40001400
 80038b8:	000018ff 	.word	0x000018ff
 80038bc:	000003e7 	.word	0x000003e7

080038c0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b09c      	sub	sp, #112	; 0x70
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038c6:	2360      	movs	r3, #96	; 0x60
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	0018      	movs	r0, r3
 80038cc:	2310      	movs	r3, #16
 80038ce:	001a      	movs	r2, r3
 80038d0:	2100      	movs	r1, #0
 80038d2:	f007 fe13 	bl	800b4fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d6:	2354      	movs	r3, #84	; 0x54
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	0018      	movs	r0, r3
 80038dc:	230c      	movs	r3, #12
 80038de:	001a      	movs	r2, r3
 80038e0:	2100      	movs	r1, #0
 80038e2:	f007 fe0b 	bl	800b4fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038e6:	2338      	movs	r3, #56	; 0x38
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	0018      	movs	r0, r3
 80038ec:	231c      	movs	r3, #28
 80038ee:	001a      	movs	r2, r3
 80038f0:	2100      	movs	r1, #0
 80038f2:	f007 fe03 	bl	800b4fc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038f6:	1d3b      	adds	r3, r7, #4
 80038f8:	0018      	movs	r0, r3
 80038fa:	2334      	movs	r3, #52	; 0x34
 80038fc:	001a      	movs	r2, r3
 80038fe:	2100      	movs	r1, #0
 8003900:	f007 fdfc 	bl	800b4fc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003904:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <MX_TIM15_Init+0x17c>)
 8003906:	4a4e      	ldr	r2, [pc, #312]	; (8003a40 <MX_TIM15_Init+0x180>)
 8003908:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800390a:	4b4c      	ldr	r3, [pc, #304]	; (8003a3c <MX_TIM15_Init+0x17c>)
 800390c:	2200      	movs	r2, #0
 800390e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003910:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <MX_TIM15_Init+0x17c>)
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2560-1;
 8003916:	4b49      	ldr	r3, [pc, #292]	; (8003a3c <MX_TIM15_Init+0x17c>)
 8003918:	4a4a      	ldr	r2, [pc, #296]	; (8003a44 <MX_TIM15_Init+0x184>)
 800391a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800391c:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <MX_TIM15_Init+0x17c>)
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003922:	4b46      	ldr	r3, [pc, #280]	; (8003a3c <MX_TIM15_Init+0x17c>)
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003928:	4b44      	ldr	r3, [pc, #272]	; (8003a3c <MX_TIM15_Init+0x17c>)
 800392a:	2200      	movs	r2, #0
 800392c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800392e:	4b43      	ldr	r3, [pc, #268]	; (8003a3c <MX_TIM15_Init+0x17c>)
 8003930:	0018      	movs	r0, r3
 8003932:	f001 fe0b 	bl	800554c <HAL_TIM_Base_Init>
 8003936:	1e03      	subs	r3, r0, #0
 8003938:	d001      	beq.n	800393e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800393a:	f7ff fd8b 	bl	8003454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800393e:	2160      	movs	r1, #96	; 0x60
 8003940:	187b      	adds	r3, r7, r1
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	0152      	lsls	r2, r2, #5
 8003946:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003948:	187a      	adds	r2, r7, r1
 800394a:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <MX_TIM15_Init+0x17c>)
 800394c:	0011      	movs	r1, r2
 800394e:	0018      	movs	r0, r3
 8003950:	f002 fbf8 	bl	8006144 <HAL_TIM_ConfigClockSource>
 8003954:	1e03      	subs	r3, r0, #0
 8003956:	d001      	beq.n	800395c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003958:	f7ff fd7c 	bl	8003454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800395c:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <MX_TIM15_Init+0x17c>)
 800395e:	0018      	movs	r0, r3
 8003960:	f001 fea2 	bl	80056a8 <HAL_TIM_PWM_Init>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d001      	beq.n	800396c <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8003968:	f7ff fd74 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800396c:	2154      	movs	r1, #84	; 0x54
 800396e:	187b      	adds	r3, r7, r1
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003974:	187b      	adds	r3, r7, r1
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800397a:	187a      	adds	r2, r7, r1
 800397c:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <MX_TIM15_Init+0x17c>)
 800397e:	0011      	movs	r1, r2
 8003980:	0018      	movs	r0, r3
 8003982:	f003 f8cf 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 8003986:	1e03      	subs	r3, r0, #0
 8003988:	d001      	beq.n	800398e <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800398a:	f7ff fd63 	bl	8003454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800398e:	2138      	movs	r1, #56	; 0x38
 8003990:	187b      	adds	r3, r7, r1
 8003992:	2260      	movs	r2, #96	; 0x60
 8003994:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003996:	187b      	adds	r3, r7, r1
 8003998:	2200      	movs	r2, #0
 800399a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800399c:	187b      	adds	r3, r7, r1
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	2200      	movs	r2, #0
 80039a6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	2200      	movs	r2, #0
 80039b2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039b4:	187b      	adds	r3, r7, r1
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039ba:	1879      	adds	r1, r7, r1
 80039bc:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <MX_TIM15_Init+0x17c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	0018      	movs	r0, r3
 80039c2:	f002 fabf 	bl	8005f44 <HAL_TIM_PWM_ConfigChannel>
 80039c6:	1e03      	subs	r3, r0, #0
 80039c8:	d001      	beq.n	80039ce <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80039ca:	f7ff fd43 	bl	8003454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039ce:	2338      	movs	r3, #56	; 0x38
 80039d0:	18f9      	adds	r1, r7, r3
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <MX_TIM15_Init+0x17c>)
 80039d4:	2204      	movs	r2, #4
 80039d6:	0018      	movs	r0, r3
 80039d8:	f002 fab4 	bl	8005f44 <HAL_TIM_PWM_ConfigChannel>
 80039dc:	1e03      	subs	r3, r0, #0
 80039de:	d001      	beq.n	80039e4 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 80039e0:	f7ff fd38 	bl	8003454 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	2200      	movs	r2, #0
 80039ee:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	2200      	movs	r2, #0
 80039fa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	2200      	movs	r2, #0
 8003a00:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	2280      	movs	r2, #128	; 0x80
 8003a06:	0192      	lsls	r2, r2, #6
 8003a08:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003a16:	1d3a      	adds	r2, r7, #4
 8003a18:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <MX_TIM15_Init+0x17c>)
 8003a1a:	0011      	movs	r1, r2
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f003 f8e9 	bl	8006bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8003a26:	f7ff fd15 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003a2a:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <MX_TIM15_Init+0x17c>)
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 fa0f 	bl	8003e50 <HAL_TIM_MspPostInit>

}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b01c      	add	sp, #112	; 0x70
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	20000354 	.word	0x20000354
 8003a40:	40014000 	.word	0x40014000
 8003a44:	000009ff 	.word	0x000009ff

08003a48 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b094      	sub	sp, #80	; 0x50
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a4e:	2334      	movs	r3, #52	; 0x34
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	0018      	movs	r0, r3
 8003a54:	231c      	movs	r3, #28
 8003a56:	001a      	movs	r2, r3
 8003a58:	2100      	movs	r1, #0
 8003a5a:	f007 fd4f 	bl	800b4fc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a5e:	003b      	movs	r3, r7
 8003a60:	0018      	movs	r0, r3
 8003a62:	2334      	movs	r3, #52	; 0x34
 8003a64:	001a      	movs	r2, r3
 8003a66:	2100      	movs	r1, #0
 8003a68:	f007 fd48 	bl	800b4fc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003a6c:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003a6e:	4a38      	ldr	r2, [pc, #224]	; (8003b50 <MX_TIM16_Init+0x108>)
 8003a70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a78:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2560-1;
 8003a7e:	4b33      	ldr	r3, [pc, #204]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003a80:	4a34      	ldr	r2, [pc, #208]	; (8003b54 <MX_TIM16_Init+0x10c>)
 8003a82:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a84:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003a8a:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a90:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f001 fd57 	bl	800554c <HAL_TIM_Base_Init>
 8003a9e:	1e03      	subs	r3, r0, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003aa2:	f7ff fcd7 	bl	8003454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003aa6:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f001 fdfd 	bl	80056a8 <HAL_TIM_PWM_Init>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003ab2:	f7ff fccf 	bl	8003454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ab6:	2134      	movs	r1, #52	; 0x34
 8003ab8:	187b      	adds	r3, r7, r1
 8003aba:	2260      	movs	r2, #96	; 0x60
 8003abc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	2200      	movs	r2, #0
 8003ace:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	2200      	movs	r2, #0
 8003ada:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	2200      	movs	r2, #0
 8003ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ae2:	1879      	adds	r1, r7, r1
 8003ae4:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f002 fa2b 	bl	8005f44 <HAL_TIM_PWM_ConfigChannel>
 8003aee:	1e03      	subs	r3, r0, #0
 8003af0:	d001      	beq.n	8003af6 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8003af2:	f7ff fcaf 	bl	8003454 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003af6:	003b      	movs	r3, r7
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003afc:	003b      	movs	r3, r7
 8003afe:	2200      	movs	r2, #0
 8003b00:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b02:	003b      	movs	r3, r7
 8003b04:	2200      	movs	r2, #0
 8003b06:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b08:	003b      	movs	r3, r7
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b0e:	003b      	movs	r3, r7
 8003b10:	2200      	movs	r2, #0
 8003b12:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b14:	003b      	movs	r3, r7
 8003b16:	2280      	movs	r2, #128	; 0x80
 8003b18:	0192      	lsls	r2, r2, #6
 8003b1a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b1c:	003b      	movs	r3, r7
 8003b1e:	2200      	movs	r2, #0
 8003b20:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b22:	003b      	movs	r3, r7
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003b28:	003a      	movs	r2, r7
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003b2c:	0011      	movs	r1, r2
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f003 f860 	bl	8006bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b34:	1e03      	subs	r3, r0, #0
 8003b36:	d001      	beq.n	8003b3c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8003b38:	f7ff fc8c 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <MX_TIM16_Init+0x104>)
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f000 f986 	bl	8003e50 <HAL_TIM_MspPostInit>

}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b014      	add	sp, #80	; 0x50
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200003a0 	.word	0x200003a0
 8003b50:	40014400 	.word	0x40014400
 8003b54:	000009ff 	.word	0x000009ff

08003b58 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b094      	sub	sp, #80	; 0x50
 8003b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b5e:	2334      	movs	r3, #52	; 0x34
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	0018      	movs	r0, r3
 8003b64:	231c      	movs	r3, #28
 8003b66:	001a      	movs	r2, r3
 8003b68:	2100      	movs	r1, #0
 8003b6a:	f007 fcc7 	bl	800b4fc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b6e:	003b      	movs	r3, r7
 8003b70:	0018      	movs	r0, r3
 8003b72:	2334      	movs	r3, #52	; 0x34
 8003b74:	001a      	movs	r2, r3
 8003b76:	2100      	movs	r1, #0
 8003b78:	f007 fcc0 	bl	800b4fc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003b7c:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003b7e:	4a38      	ldr	r2, [pc, #224]	; (8003c60 <MX_TIM17_Init+0x108>)
 8003b80:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8003b82:	4b36      	ldr	r3, [pc, #216]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b88:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2560-1;
 8003b8e:	4b33      	ldr	r3, [pc, #204]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003b90:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <MX_TIM17_Init+0x10c>)
 8003b92:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b94:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba0:	4b2e      	ldr	r3, [pc, #184]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f001 fccf 	bl	800554c <HAL_TIM_Base_Init>
 8003bae:	1e03      	subs	r3, r0, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003bb2:	f7ff fc4f 	bl	8003454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003bb6:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f001 fd75 	bl	80056a8 <HAL_TIM_PWM_Init>
 8003bbe:	1e03      	subs	r3, r0, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8003bc2:	f7ff fc47 	bl	8003454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bc6:	2134      	movs	r1, #52	; 0x34
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	2260      	movs	r2, #96	; 0x60
 8003bcc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003bce:	187b      	adds	r3, r7, r1
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	2200      	movs	r2, #0
 8003bde:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	2200      	movs	r2, #0
 8003be4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bec:	187b      	adds	r3, r7, r1
 8003bee:	2200      	movs	r2, #0
 8003bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bf2:	1879      	adds	r1, r7, r1
 8003bf4:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f002 f9a3 	bl	8005f44 <HAL_TIM_PWM_ConfigChannel>
 8003bfe:	1e03      	subs	r3, r0, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003c02:	f7ff fc27 	bl	8003454 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c06:	003b      	movs	r3, r7
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c0c:	003b      	movs	r3, r7
 8003c0e:	2200      	movs	r2, #0
 8003c10:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c12:	003b      	movs	r3, r7
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c18:	003b      	movs	r3, r7
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c1e:	003b      	movs	r3, r7
 8003c20:	2200      	movs	r2, #0
 8003c22:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c24:	003b      	movs	r3, r7
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	0192      	lsls	r2, r2, #6
 8003c2a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003c2c:	003b      	movs	r3, r7
 8003c2e:	2200      	movs	r2, #0
 8003c30:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c32:	003b      	movs	r3, r7
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003c38:	003a      	movs	r2, r7
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f002 ffd8 	bl	8006bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d001      	beq.n	8003c4c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8003c48:	f7ff fc04 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003c4c:	4b03      	ldr	r3, [pc, #12]	; (8003c5c <MX_TIM17_Init+0x104>)
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f8fe 	bl	8003e50 <HAL_TIM_MspPostInit>

}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b014      	add	sp, #80	; 0x50
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	200003ec 	.word	0x200003ec
 8003c60:	40014800 	.word	0x40014800
 8003c64:	000009ff 	.word	0x000009ff

08003c68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b08d      	sub	sp, #52	; 0x34
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	241c      	movs	r4, #28
 8003c72:	193b      	adds	r3, r7, r4
 8003c74:	0018      	movs	r0, r3
 8003c76:	2314      	movs	r3, #20
 8003c78:	001a      	movs	r2, r3
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	f007 fc3e 	bl	800b4fc <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a3a      	ldr	r2, [pc, #232]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x108>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d132      	bne.n	8003cf0 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8e:	4b39      	ldr	r3, [pc, #228]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	0109      	lsls	r1, r1, #4
 8003c94:	430a      	orrs	r2, r1
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca6:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003caa:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003cac:	2101      	movs	r1, #1
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8003cb2:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	4013      	ands	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	22c0      	movs	r2, #192	; 0xc0
 8003cc2:	0092      	lsls	r2, r2, #2
 8003cc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	0021      	movs	r1, r4
 8003cc8:	187b      	adds	r3, r7, r1
 8003cca:	2202      	movs	r2, #2
 8003ccc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	187b      	adds	r3, r7, r1
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd4:	187b      	adds	r3, r7, r1
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003cda:	187b      	adds	r3, r7, r1
 8003cdc:	2202      	movs	r2, #2
 8003cde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce0:	187a      	adds	r2, r7, r1
 8003ce2:	23a0      	movs	r3, #160	; 0xa0
 8003ce4:	05db      	lsls	r3, r3, #23
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f000 fc5b 	bl	80045a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003cee:	e03a      	b.n	8003d66 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(tim_encoderHandle->Instance==TIM3)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a20      	ldr	r2, [pc, #128]	; (8003d78 <HAL_TIM_Encoder_MspInit+0x110>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d135      	bne.n	8003d66 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cfa:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfe:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d00:	2102      	movs	r1, #2
 8003d02:	430a      	orrs	r2, r1
 8003d04:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d06:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d18:	2104      	movs	r1, #4
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	2204      	movs	r2, #4
 8003d24:	4013      	ands	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d2a:	211c      	movs	r1, #28
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	22c0      	movs	r2, #192	; 0xc0
 8003d30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	2202      	movs	r2, #2
 8003d36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	2200      	movs	r2, #0
 8003d42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003d44:	187b      	adds	r3, r7, r1
 8003d46:	2201      	movs	r2, #1
 8003d48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	4a0b      	ldr	r2, [pc, #44]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x114>)
 8003d4e:	0019      	movs	r1, r3
 8003d50:	0010      	movs	r0, r2
 8003d52:	f000 fc27 	bl	80045a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d56:	2200      	movs	r2, #0
 8003d58:	2100      	movs	r1, #0
 8003d5a:	2010      	movs	r0, #16
 8003d5c:	f000 fb24 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d60:	2010      	movs	r0, #16
 8003d62:	f000 fb36 	bl	80043d2 <HAL_NVIC_EnableIRQ>
}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b00d      	add	sp, #52	; 0x34
 8003d6c:	bd90      	pop	{r4, r7, pc}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	50000800 	.word	0x50000800

08003d80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2b      	ldr	r2, [pc, #172]	; (8003e3c <HAL_TIM_Base_MspInit+0xbc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d114      	bne.n	8003dbc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d92:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003d98:	2120      	movs	r1, #32
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d9e:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	2220      	movs	r2, #32
 8003da4:	4013      	ands	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003daa:	2200      	movs	r2, #0
 8003dac:	2100      	movs	r1, #0
 8003dae:	2012      	movs	r0, #18
 8003db0:	f000 fafa 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003db4:	2012      	movs	r0, #18
 8003db6:	f000 fb0c 	bl	80043d2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003dba:	e03a      	b.n	8003e32 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM15)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a20      	ldr	r2, [pc, #128]	; (8003e44 <HAL_TIM_Base_MspInit+0xc4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10e      	bne.n	8003de4 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003dc6:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dca:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	0249      	lsls	r1, r1, #9
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	025b      	lsls	r3, r3, #9
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]
}
 8003de2:	e026      	b.n	8003e32 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_TIM_Base_MspInit+0xc8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10e      	bne.n	8003e0c <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003dee:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003df4:	2180      	movs	r1, #128	; 0x80
 8003df6:	0289      	lsls	r1, r1, #10
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	029b      	lsls	r3, r3, #10
 8003e04:	4013      	ands	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
}
 8003e0a:	e012      	b.n	8003e32 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM17)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <HAL_TIM_Base_MspInit+0xcc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10d      	bne.n	8003e32 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	02c9      	lsls	r1, r1, #11
 8003e20:	430a      	orrs	r2, r1
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_TIM_Base_MspInit+0xc0>)
 8003e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	02db      	lsls	r3, r3, #11
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b006      	add	sp, #24
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	40001400 	.word	0x40001400
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40014000 	.word	0x40014000
 8003e48:	40014400 	.word	0x40014400
 8003e4c:	40014800 	.word	0x40014800

08003e50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b08b      	sub	sp, #44	; 0x2c
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	2414      	movs	r4, #20
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	2314      	movs	r3, #20
 8003e60:	001a      	movs	r2, r3
 8003e62:	2100      	movs	r1, #0
 8003e64:	f007 fb4a 	bl	800b4fc <memset>
  if(timHandle->Instance==TIM15)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <HAL_TIM_MspPostInit+0x110>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d123      	bne.n	8003eba <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e72:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <HAL_TIM_MspPostInit+0x114>)
 8003e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e76:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <HAL_TIM_MspPostInit+0x114>)
 8003e78:	2102      	movs	r1, #2
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e7e:	4b39      	ldr	r3, [pc, #228]	; (8003f64 <HAL_TIM_MspPostInit+0x114>)
 8003e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e82:	2202      	movs	r2, #2
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003e8a:	193b      	adds	r3, r7, r4
 8003e8c:	22c0      	movs	r2, #192	; 0xc0
 8003e8e:	0212      	lsls	r2, r2, #8
 8003e90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e92:	0021      	movs	r1, r4
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	2202      	movs	r2, #2
 8003e98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	187b      	adds	r3, r7, r1
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	2205      	movs	r2, #5
 8003eaa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	4a2e      	ldr	r2, [pc, #184]	; (8003f68 <HAL_TIM_MspPostInit+0x118>)
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	0010      	movs	r0, r2
 8003eb4:	f000 fb76 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003eb8:	e04e      	b.n	8003f58 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM16)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2b      	ldr	r2, [pc, #172]	; (8003f6c <HAL_TIM_MspPostInit+0x11c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d122      	bne.n	8003f0a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ec4:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <HAL_TIM_MspPostInit+0x114>)
 8003ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec8:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <HAL_TIM_MspPostInit+0x114>)
 8003eca:	2108      	movs	r1, #8
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	635a      	str	r2, [r3, #52]	; 0x34
 8003ed0:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_TIM_MspPostInit+0x114>)
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003edc:	2114      	movs	r1, #20
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	2200      	movs	r2, #0
 8003eee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef0:	187b      	adds	r3, r7, r1
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	2202      	movs	r2, #2
 8003efa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_TIM_MspPostInit+0x120>)
 8003f00:	0019      	movs	r1, r3
 8003f02:	0010      	movs	r0, r2
 8003f04:	f000 fb4e 	bl	80045a4 <HAL_GPIO_Init>
}
 8003f08:	e026      	b.n	8003f58 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM17)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <HAL_TIM_MspPostInit+0x124>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d121      	bne.n	8003f58 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <HAL_TIM_MspPostInit+0x114>)
 8003f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_TIM_MspPostInit+0x114>)
 8003f1a:	2108      	movs	r1, #8
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <HAL_TIM_MspPostInit+0x114>)
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	2208      	movs	r2, #8
 8003f26:	4013      	ands	r3, r2
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f2c:	2114      	movs	r1, #20
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2202      	movs	r2, #2
 8003f32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2202      	movs	r2, #2
 8003f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f40:	187b      	adds	r3, r7, r1
 8003f42:	2200      	movs	r2, #0
 8003f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	2202      	movs	r2, #2
 8003f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <HAL_TIM_MspPostInit+0x120>)
 8003f50:	0019      	movs	r1, r3
 8003f52:	0010      	movs	r0, r2
 8003f54:	f000 fb26 	bl	80045a4 <HAL_GPIO_Init>
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b00b      	add	sp, #44	; 0x2c
 8003f5e:	bd90      	pop	{r4, r7, pc}
 8003f60:	40014000 	.word	0x40014000
 8003f64:	40021000 	.word	0x40021000
 8003f68:	50000400 	.word	0x50000400
 8003f6c:	40014400 	.word	0x40014400
 8003f70:	50000c00 	.word	0x50000c00
 8003f74:	40014800 	.word	0x40014800

08003f78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f7c:	4b25      	ldr	r3, [pc, #148]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003f7e:	4a26      	ldr	r2, [pc, #152]	; (8004018 <MX_USART2_UART_Init+0xa0>)
 8003f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003f84:	22e1      	movs	r2, #225	; 0xe1
 8003f86:	0252      	lsls	r2, r2, #9
 8003f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f8a:	4b22      	ldr	r3, [pc, #136]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f90:	4b20      	ldr	r3, [pc, #128]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f96:	4b1f      	ldr	r3, [pc, #124]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fb4:	4b17      	ldr	r3, [pc, #92]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003fc0:	4b14      	ldr	r3, [pc, #80]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003fc2:	2280      	movs	r2, #128	; 0x80
 8003fc4:	0212      	lsls	r2, r2, #8
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fc8:	4b12      	ldr	r3, [pc, #72]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f002 fed0 	bl	8006d70 <HAL_UART_Init>
 8003fd0:	1e03      	subs	r3, r0, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8003fd4:	f7ff fa3e 	bl	8003454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003fda:	2100      	movs	r1, #0
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f004 fd41 	bl	8008a64 <HAL_UARTEx_SetTxFifoThreshold>
 8003fe2:	1e03      	subs	r3, r0, #0
 8003fe4:	d001      	beq.n	8003fea <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8003fe6:	f7ff fa35 	bl	8003454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003fec:	2100      	movs	r1, #0
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f004 fd78 	bl	8008ae4 <HAL_UARTEx_SetRxFifoThreshold>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8003ff8:	f7ff fa2c 	bl	8003454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <MX_USART2_UART_Init+0x9c>)
 8003ffe:	0018      	movs	r0, r3
 8004000:	f004 fcf6 	bl	80089f0 <HAL_UARTEx_DisableFifoMode>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d001      	beq.n	800400c <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8004008:	f7ff fa24 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	20000438 	.word	0x20000438
 8004018:	40004400 	.word	0x40004400

0800401c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b091      	sub	sp, #68	; 0x44
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004024:	232c      	movs	r3, #44	; 0x2c
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	0018      	movs	r0, r3
 800402a:	2314      	movs	r3, #20
 800402c:	001a      	movs	r2, r3
 800402e:	2100      	movs	r1, #0
 8004030:	f007 fa64 	bl	800b4fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004034:	2410      	movs	r4, #16
 8004036:	193b      	adds	r3, r7, r4
 8004038:	0018      	movs	r0, r3
 800403a:	231c      	movs	r3, #28
 800403c:	001a      	movs	r2, r3
 800403e:	2100      	movs	r1, #0
 8004040:	f007 fa5c 	bl	800b4fc <memset>
  if(uartHandle->Instance==USART2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <HAL_UART_MspInit+0xc8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d145      	bne.n	80040da <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800404e:	193b      	adds	r3, r7, r4
 8004050:	2202      	movs	r2, #2
 8004052:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004054:	193b      	adds	r3, r7, r4
 8004056:	2200      	movs	r2, #0
 8004058:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800405a:	193b      	adds	r3, r7, r4
 800405c:	0018      	movs	r0, r3
 800405e:	f001 f941 	bl	80052e4 <HAL_RCCEx_PeriphCLKConfig>
 8004062:	1e03      	subs	r3, r0, #0
 8004064:	d001      	beq.n	800406a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004066:	f7ff f9f5 	bl	8003454 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800406a:	4b1f      	ldr	r3, [pc, #124]	; (80040e8 <HAL_UART_MspInit+0xcc>)
 800406c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <HAL_UART_MspInit+0xcc>)
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	0289      	lsls	r1, r1, #10
 8004074:	430a      	orrs	r2, r1
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c
 8004078:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <HAL_UART_MspInit+0xcc>)
 800407a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	029b      	lsls	r3, r3, #10
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <HAL_UART_MspInit+0xcc>)
 8004088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408a:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <HAL_UART_MspInit+0xcc>)
 800408c:	2108      	movs	r1, #8
 800408e:	430a      	orrs	r2, r1
 8004090:	635a      	str	r2, [r3, #52]	; 0x34
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_UART_MspInit+0xcc>)
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	2208      	movs	r2, #8
 8004098:	4013      	ands	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	2260      	movs	r2, #96	; 0x60
 80040a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	2202      	movs	r2, #2
 80040aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	2200      	movs	r2, #0
 80040b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	2200      	movs	r2, #0
 80040bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040be:	187b      	adds	r3, r7, r1
 80040c0:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <HAL_UART_MspInit+0xd0>)
 80040c2:	0019      	movs	r1, r3
 80040c4:	0010      	movs	r0, r2
 80040c6:	f000 fa6d 	bl	80045a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80040ca:	2200      	movs	r2, #0
 80040cc:	2100      	movs	r1, #0
 80040ce:	201c      	movs	r0, #28
 80040d0:	f000 f96a 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80040d4:	201c      	movs	r0, #28
 80040d6:	f000 f97c 	bl	80043d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b011      	add	sp, #68	; 0x44
 80040e0:	bd90      	pop	{r4, r7, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	40004400 	.word	0x40004400
 80040e8:	40021000 	.word	0x40021000
 80040ec:	50000c00 	.word	0x50000c00

080040f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040f0:	480d      	ldr	r0, [pc, #52]	; (8004128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80040f4:	f7ff fad2 	bl	800369c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040f8:	480c      	ldr	r0, [pc, #48]	; (800412c <LoopForever+0x6>)
  ldr r1, =_edata
 80040fa:	490d      	ldr	r1, [pc, #52]	; (8004130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040fc:	4a0d      	ldr	r2, [pc, #52]	; (8004134 <LoopForever+0xe>)
  movs r3, #0
 80040fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004100:	e002      	b.n	8004108 <LoopCopyDataInit>

08004102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004106:	3304      	adds	r3, #4

08004108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800410a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800410c:	d3f9      	bcc.n	8004102 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004110:	4c0a      	ldr	r4, [pc, #40]	; (800413c <LoopForever+0x16>)
  movs r3, #0
 8004112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004114:	e001      	b.n	800411a <LoopFillZerobss>

08004116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004118:	3204      	adds	r2, #4

0800411a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800411a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800411c:	d3fb      	bcc.n	8004116 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800411e:	f007 fac3 	bl	800b6a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004122:	f7ff f8ed 	bl	8003300 <main>

08004126 <LoopForever>:

LoopForever:
  b LoopForever
 8004126:	e7fe      	b.n	8004126 <LoopForever>
  ldr   r0, =_estack
 8004128:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800412c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004130:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8004134:	0800e848 	.word	0x0800e848
  ldr r2, =_sbss
 8004138:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800413c:	200007c8 	.word	0x200007c8

08004140 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004140:	e7fe      	b.n	8004140 <ADC1_IRQHandler>
	...

08004144 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800414a:	1dfb      	adds	r3, r7, #7
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_Init+0x3c>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <HAL_Init+0x3c>)
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	0049      	lsls	r1, r1, #1
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800415e:	2003      	movs	r0, #3
 8004160:	f000 f810 	bl	8004184 <HAL_InitTick>
 8004164:	1e03      	subs	r3, r0, #0
 8004166:	d003      	beq.n	8004170 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004168:	1dfb      	adds	r3, r7, #7
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e001      	b.n	8004174 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004170:	f7ff f976 	bl	8003460 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004174:	1dfb      	adds	r3, r7, #7
 8004176:	781b      	ldrb	r3, [r3, #0]
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b002      	add	sp, #8
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40022000 	.word	0x40022000

08004184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800418c:	230f      	movs	r3, #15
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <HAL_InitTick+0x88>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02b      	beq.n	80041f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800419c:	4b1c      	ldr	r3, [pc, #112]	; (8004210 <HAL_InitTick+0x8c>)
 800419e:	681c      	ldr	r4, [r3, #0]
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <HAL_InitTick+0x88>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	0019      	movs	r1, r3
 80041a6:	23fa      	movs	r3, #250	; 0xfa
 80041a8:	0098      	lsls	r0, r3, #2
 80041aa:	f7fb ffcf 	bl	800014c <__udivsi3>
 80041ae:	0003      	movs	r3, r0
 80041b0:	0019      	movs	r1, r3
 80041b2:	0020      	movs	r0, r4
 80041b4:	f7fb ffca 	bl	800014c <__udivsi3>
 80041b8:	0003      	movs	r3, r0
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 f919 	bl	80043f2 <HAL_SYSTICK_Config>
 80041c0:	1e03      	subs	r3, r0, #0
 80041c2:	d112      	bne.n	80041ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d80a      	bhi.n	80041e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	2301      	movs	r3, #1
 80041ce:	425b      	negs	r3, r3
 80041d0:	2200      	movs	r2, #0
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 f8e8 	bl	80043a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <HAL_InitTick+0x90>)
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e00d      	b.n	80041fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80041e0:	230f      	movs	r3, #15
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e008      	b.n	80041fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041ea:	230f      	movs	r3, #15
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	2201      	movs	r2, #1
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	e003      	b.n	80041fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041f4:	230f      	movs	r3, #15
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80041fc:	230f      	movs	r3, #15
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	781b      	ldrb	r3, [r3, #0]
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	b005      	add	sp, #20
 8004208:	bd90      	pop	{r4, r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	20000008 	.word	0x20000008
 8004210:	20000000 	.word	0x20000000
 8004214:	20000004 	.word	0x20000004

08004218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_IncTick+0x1c>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	001a      	movs	r2, r3
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_IncTick+0x20>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	18d2      	adds	r2, r2, r3
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <HAL_IncTick+0x20>)
 800422a:	601a      	str	r2, [r3, #0]
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	20000008 	.word	0x20000008
 8004238:	200004cc 	.word	0x200004cc

0800423c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  return uwTick;
 8004240:	4b02      	ldr	r3, [pc, #8]	; (800424c <HAL_GetTick+0x10>)
 8004242:	681b      	ldr	r3, [r3, #0]
}
 8004244:	0018      	movs	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	200004cc 	.word	0x200004cc

08004250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	0002      	movs	r2, r0
 8004258:	1dfb      	adds	r3, r7, #7
 800425a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800425c:	1dfb      	adds	r3, r7, #7
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b7f      	cmp	r3, #127	; 0x7f
 8004262:	d809      	bhi.n	8004278 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004264:	1dfb      	adds	r3, r7, #7
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	001a      	movs	r2, r3
 800426a:	231f      	movs	r3, #31
 800426c:	401a      	ands	r2, r3
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <__NVIC_EnableIRQ+0x30>)
 8004270:	2101      	movs	r1, #1
 8004272:	4091      	lsls	r1, r2
 8004274:	000a      	movs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004278:	46c0      	nop			; (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}
 8004280:	e000e100 	.word	0xe000e100

08004284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	0002      	movs	r2, r0
 800428c:	6039      	str	r1, [r7, #0]
 800428e:	1dfb      	adds	r3, r7, #7
 8004290:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004292:	1dfb      	adds	r3, r7, #7
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b7f      	cmp	r3, #127	; 0x7f
 8004298:	d828      	bhi.n	80042ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800429a:	4a2f      	ldr	r2, [pc, #188]	; (8004358 <__NVIC_SetPriority+0xd4>)
 800429c:	1dfb      	adds	r3, r7, #7
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	33c0      	adds	r3, #192	; 0xc0
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	589b      	ldr	r3, [r3, r2]
 80042aa:	1dfa      	adds	r2, r7, #7
 80042ac:	7812      	ldrb	r2, [r2, #0]
 80042ae:	0011      	movs	r1, r2
 80042b0:	2203      	movs	r2, #3
 80042b2:	400a      	ands	r2, r1
 80042b4:	00d2      	lsls	r2, r2, #3
 80042b6:	21ff      	movs	r1, #255	; 0xff
 80042b8:	4091      	lsls	r1, r2
 80042ba:	000a      	movs	r2, r1
 80042bc:	43d2      	mvns	r2, r2
 80042be:	401a      	ands	r2, r3
 80042c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	22ff      	movs	r2, #255	; 0xff
 80042c8:	401a      	ands	r2, r3
 80042ca:	1dfb      	adds	r3, r7, #7
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	0018      	movs	r0, r3
 80042d0:	2303      	movs	r3, #3
 80042d2:	4003      	ands	r3, r0
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042d8:	481f      	ldr	r0, [pc, #124]	; (8004358 <__NVIC_SetPriority+0xd4>)
 80042da:	1dfb      	adds	r3, r7, #7
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	b25b      	sxtb	r3, r3
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	430a      	orrs	r2, r1
 80042e4:	33c0      	adds	r3, #192	; 0xc0
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80042ea:	e031      	b.n	8004350 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042ec:	4a1b      	ldr	r2, [pc, #108]	; (800435c <__NVIC_SetPriority+0xd8>)
 80042ee:	1dfb      	adds	r3, r7, #7
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	0019      	movs	r1, r3
 80042f4:	230f      	movs	r3, #15
 80042f6:	400b      	ands	r3, r1
 80042f8:	3b08      	subs	r3, #8
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3306      	adds	r3, #6
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	18d3      	adds	r3, r2, r3
 8004302:	3304      	adds	r3, #4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	1dfa      	adds	r2, r7, #7
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	0011      	movs	r1, r2
 800430c:	2203      	movs	r2, #3
 800430e:	400a      	ands	r2, r1
 8004310:	00d2      	lsls	r2, r2, #3
 8004312:	21ff      	movs	r1, #255	; 0xff
 8004314:	4091      	lsls	r1, r2
 8004316:	000a      	movs	r2, r1
 8004318:	43d2      	mvns	r2, r2
 800431a:	401a      	ands	r2, r3
 800431c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	019b      	lsls	r3, r3, #6
 8004322:	22ff      	movs	r2, #255	; 0xff
 8004324:	401a      	ands	r2, r3
 8004326:	1dfb      	adds	r3, r7, #7
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	0018      	movs	r0, r3
 800432c:	2303      	movs	r3, #3
 800432e:	4003      	ands	r3, r0
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004334:	4809      	ldr	r0, [pc, #36]	; (800435c <__NVIC_SetPriority+0xd8>)
 8004336:	1dfb      	adds	r3, r7, #7
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	001c      	movs	r4, r3
 800433c:	230f      	movs	r3, #15
 800433e:	4023      	ands	r3, r4
 8004340:	3b08      	subs	r3, #8
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	430a      	orrs	r2, r1
 8004346:	3306      	adds	r3, #6
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	18c3      	adds	r3, r0, r3
 800434c:	3304      	adds	r3, #4
 800434e:	601a      	str	r2, [r3, #0]
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b003      	add	sp, #12
 8004356:	bd90      	pop	{r4, r7, pc}
 8004358:	e000e100 	.word	0xe000e100
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	1e5a      	subs	r2, r3, #1
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	045b      	lsls	r3, r3, #17
 8004370:	429a      	cmp	r2, r3
 8004372:	d301      	bcc.n	8004378 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004374:	2301      	movs	r3, #1
 8004376:	e010      	b.n	800439a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <SysTick_Config+0x44>)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	3a01      	subs	r2, #1
 800437e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004380:	2301      	movs	r3, #1
 8004382:	425b      	negs	r3, r3
 8004384:	2103      	movs	r1, #3
 8004386:	0018      	movs	r0, r3
 8004388:	f7ff ff7c 	bl	8004284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <SysTick_Config+0x44>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004392:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <SysTick_Config+0x44>)
 8004394:	2207      	movs	r2, #7
 8004396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004398:	2300      	movs	r3, #0
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b002      	add	sp, #8
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	e000e010 	.word	0xe000e010

080043a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	210f      	movs	r1, #15
 80043b4:	187b      	adds	r3, r7, r1
 80043b6:	1c02      	adds	r2, r0, #0
 80043b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	187b      	adds	r3, r7, r1
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	0011      	movs	r1, r2
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7ff ff5d 	bl	8004284 <__NVIC_SetPriority>
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	0002      	movs	r2, r0
 80043da:	1dfb      	adds	r3, r7, #7
 80043dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043de:	1dfb      	adds	r3, r7, #7
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b25b      	sxtb	r3, r3
 80043e4:	0018      	movs	r0, r3
 80043e6:	f7ff ff33 	bl	8004250 <__NVIC_EnableIRQ>
}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b002      	add	sp, #8
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff ffaf 	bl	8004360 <SysTick_Config>
 8004402:	0003      	movs	r3, r0
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e050      	b.n	80044c0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2225      	movs	r2, #37	; 0x25
 8004422:	5c9b      	ldrb	r3, [r3, r2]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d008      	beq.n	800443c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2204      	movs	r2, #4
 800442e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	; 0x24
 8004434:	2100      	movs	r1, #0
 8004436:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e041      	b.n	80044c0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	210e      	movs	r1, #14
 8004448:	438a      	bics	r2, r1
 800444a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	491c      	ldr	r1, [pc, #112]	; (80044c8 <HAL_DMA_Abort+0xbc>)
 8004458:	400a      	ands	r2, r1
 800445a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2101      	movs	r1, #1
 8004468:	438a      	bics	r2, r1
 800446a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800446c:	4b17      	ldr	r3, [pc, #92]	; (80044cc <HAL_DMA_Abort+0xc0>)
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	221c      	movs	r2, #28
 8004476:	4013      	ands	r3, r2
 8004478:	2201      	movs	r2, #1
 800447a:	409a      	lsls	r2, r3
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <HAL_DMA_Abort+0xc0>)
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800448a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00c      	beq.n	80044ae <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449e:	490a      	ldr	r1, [pc, #40]	; (80044c8 <HAL_DMA_Abort+0xbc>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80044ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2225      	movs	r2, #37	; 0x25
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2224      	movs	r2, #36	; 0x24
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	fffffeff 	.word	0xfffffeff
 80044cc:	40020000 	.word	0x40020000

080044d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d8:	210f      	movs	r1, #15
 80044da:	187b      	adds	r3, r7, r1
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2225      	movs	r2, #37	; 0x25
 80044e4:	5c9b      	ldrb	r3, [r3, r2]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d006      	beq.n	80044fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2204      	movs	r2, #4
 80044f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044f2:	187b      	adds	r3, r7, r1
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	e049      	b.n	800458e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	210e      	movs	r1, #14
 8004506:	438a      	bics	r2, r1
 8004508:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	438a      	bics	r2, r1
 8004518:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	491d      	ldr	r1, [pc, #116]	; (800459c <HAL_DMA_Abort_IT+0xcc>)
 8004526:	400a      	ands	r2, r1
 8004528:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800452a:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <HAL_DMA_Abort_IT+0xd0>)
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	221c      	movs	r2, #28
 8004534:	4013      	ands	r3, r2
 8004536:	2201      	movs	r2, #1
 8004538:	409a      	lsls	r2, r3
 800453a:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_DMA_Abort_IT+0xd0>)
 800453c:	430a      	orrs	r2, r1
 800453e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004548:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455c:	490f      	ldr	r1, [pc, #60]	; (800459c <HAL_DMA_Abort_IT+0xcc>)
 800455e:	400a      	ands	r2, r1
 8004560:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800456a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2225      	movs	r2, #37	; 0x25
 8004570:	2101      	movs	r1, #1
 8004572:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	; 0x24
 8004578:	2100      	movs	r1, #0
 800457a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	0010      	movs	r0, r2
 800458c:	4798      	blx	r3
    }
  }
  return status;
 800458e:	230f      	movs	r3, #15
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	781b      	ldrb	r3, [r3, #0]
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b004      	add	sp, #16
 800459a:	bd80      	pop	{r7, pc}
 800459c:	fffffeff 	.word	0xfffffeff
 80045a0:	40020000 	.word	0x40020000

080045a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045b2:	e147      	b.n	8004844 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4091      	lsls	r1, r2
 80045be:	000a      	movs	r2, r1
 80045c0:	4013      	ands	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d100      	bne.n	80045cc <HAL_GPIO_Init+0x28>
 80045ca:	e138      	b.n	800483e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2203      	movs	r2, #3
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d005      	beq.n	80045e4 <HAL_GPIO_Init+0x40>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2203      	movs	r2, #3
 80045de:	4013      	ands	r3, r2
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d130      	bne.n	8004646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	2203      	movs	r2, #3
 80045f0:	409a      	lsls	r2, r3
 80045f2:	0013      	movs	r3, r2
 80045f4:	43da      	mvns	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	409a      	lsls	r2, r3
 8004606:	0013      	movs	r3, r2
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800461a:	2201      	movs	r2, #1
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	409a      	lsls	r2, r3
 8004620:	0013      	movs	r3, r2
 8004622:	43da      	mvns	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	2201      	movs	r2, #1
 8004632:	401a      	ands	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	409a      	lsls	r2, r3
 8004638:	0013      	movs	r3, r2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2203      	movs	r2, #3
 800464c:	4013      	ands	r3, r2
 800464e:	2b03      	cmp	r3, #3
 8004650:	d017      	beq.n	8004682 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	2203      	movs	r2, #3
 800465e:	409a      	lsls	r2, r3
 8004660:	0013      	movs	r3, r2
 8004662:	43da      	mvns	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	0013      	movs	r3, r2
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2203      	movs	r2, #3
 8004688:	4013      	ands	r3, r2
 800468a:	2b02      	cmp	r3, #2
 800468c:	d123      	bne.n	80046d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	08da      	lsrs	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3208      	adds	r2, #8
 8004696:	0092      	lsls	r2, r2, #2
 8004698:	58d3      	ldr	r3, [r2, r3]
 800469a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2207      	movs	r2, #7
 80046a0:	4013      	ands	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	220f      	movs	r2, #15
 80046a6:	409a      	lsls	r2, r3
 80046a8:	0013      	movs	r3, r2
 80046aa:	43da      	mvns	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2107      	movs	r1, #7
 80046ba:	400b      	ands	r3, r1
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	409a      	lsls	r2, r3
 80046c0:	0013      	movs	r3, r2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	08da      	lsrs	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3208      	adds	r2, #8
 80046d0:	0092      	lsls	r2, r2, #2
 80046d2:	6939      	ldr	r1, [r7, #16]
 80046d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	2203      	movs	r2, #3
 80046e2:	409a      	lsls	r2, r3
 80046e4:	0013      	movs	r3, r2
 80046e6:	43da      	mvns	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2203      	movs	r2, #3
 80046f4:	401a      	ands	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	409a      	lsls	r2, r3
 80046fc:	0013      	movs	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	23c0      	movs	r3, #192	; 0xc0
 8004710:	029b      	lsls	r3, r3, #10
 8004712:	4013      	ands	r3, r2
 8004714:	d100      	bne.n	8004718 <HAL_GPIO_Init+0x174>
 8004716:	e092      	b.n	800483e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004718:	4a50      	ldr	r2, [pc, #320]	; (800485c <HAL_GPIO_Init+0x2b8>)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	3318      	adds	r3, #24
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	589b      	ldr	r3, [r3, r2]
 8004724:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2203      	movs	r2, #3
 800472a:	4013      	ands	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	220f      	movs	r2, #15
 8004730:	409a      	lsls	r2, r3
 8004732:	0013      	movs	r3, r2
 8004734:	43da      	mvns	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4013      	ands	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	23a0      	movs	r3, #160	; 0xa0
 8004740:	05db      	lsls	r3, r3, #23
 8004742:	429a      	cmp	r2, r3
 8004744:	d013      	beq.n	800476e <HAL_GPIO_Init+0x1ca>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a45      	ldr	r2, [pc, #276]	; (8004860 <HAL_GPIO_Init+0x2bc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00d      	beq.n	800476a <HAL_GPIO_Init+0x1c6>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a44      	ldr	r2, [pc, #272]	; (8004864 <HAL_GPIO_Init+0x2c0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <HAL_GPIO_Init+0x1c2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a43      	ldr	r2, [pc, #268]	; (8004868 <HAL_GPIO_Init+0x2c4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_GPIO_Init+0x1be>
 800475e:	2303      	movs	r3, #3
 8004760:	e006      	b.n	8004770 <HAL_GPIO_Init+0x1cc>
 8004762:	2305      	movs	r3, #5
 8004764:	e004      	b.n	8004770 <HAL_GPIO_Init+0x1cc>
 8004766:	2302      	movs	r3, #2
 8004768:	e002      	b.n	8004770 <HAL_GPIO_Init+0x1cc>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_GPIO_Init+0x1cc>
 800476e:	2300      	movs	r3, #0
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	2103      	movs	r1, #3
 8004774:	400a      	ands	r2, r1
 8004776:	00d2      	lsls	r2, r2, #3
 8004778:	4093      	lsls	r3, r2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004780:	4936      	ldr	r1, [pc, #216]	; (800485c <HAL_GPIO_Init+0x2b8>)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	3318      	adds	r3, #24
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800478e:	4b33      	ldr	r3, [pc, #204]	; (800485c <HAL_GPIO_Init+0x2b8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	43da      	mvns	r2, r3
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	2380      	movs	r3, #128	; 0x80
 80047a4:	035b      	lsls	r3, r3, #13
 80047a6:	4013      	ands	r3, r2
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047b2:	4b2a      	ldr	r3, [pc, #168]	; (800485c <HAL_GPIO_Init+0x2b8>)
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80047b8:	4b28      	ldr	r3, [pc, #160]	; (800485c <HAL_GPIO_Init+0x2b8>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	43da      	mvns	r2, r3
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4013      	ands	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	039b      	lsls	r3, r3, #14
 80047d0:	4013      	ands	r3, r2
 80047d2:	d003      	beq.n	80047dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047dc:	4b1f      	ldr	r3, [pc, #124]	; (800485c <HAL_GPIO_Init+0x2b8>)
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047e2:	4a1e      	ldr	r2, [pc, #120]	; (800485c <HAL_GPIO_Init+0x2b8>)
 80047e4:	2384      	movs	r3, #132	; 0x84
 80047e6:	58d3      	ldr	r3, [r2, r3]
 80047e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	43da      	mvns	r2, r3
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	029b      	lsls	r3, r3, #10
 80047fc:	4013      	ands	r3, r2
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004808:	4914      	ldr	r1, [pc, #80]	; (800485c <HAL_GPIO_Init+0x2b8>)
 800480a:	2284      	movs	r2, #132	; 0x84
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004810:	4a12      	ldr	r2, [pc, #72]	; (800485c <HAL_GPIO_Init+0x2b8>)
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	58d3      	ldr	r3, [r2, r3]
 8004816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	43da      	mvns	r2, r3
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4013      	ands	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	2380      	movs	r3, #128	; 0x80
 8004828:	025b      	lsls	r3, r3, #9
 800482a:	4013      	ands	r3, r2
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004836:	4909      	ldr	r1, [pc, #36]	; (800485c <HAL_GPIO_Init+0x2b8>)
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	3301      	adds	r3, #1
 8004842:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	40da      	lsrs	r2, r3
 800484c:	1e13      	subs	r3, r2, #0
 800484e:	d000      	beq.n	8004852 <HAL_GPIO_Init+0x2ae>
 8004850:	e6b0      	b.n	80045b4 <HAL_GPIO_Init+0x10>
  }
}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	b006      	add	sp, #24
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021800 	.word	0x40021800
 8004860:	50000400 	.word	0x50000400
 8004864:	50000800 	.word	0x50000800
 8004868:	50000c00 	.word	0x50000c00

0800486c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	0008      	movs	r0, r1
 8004876:	0011      	movs	r1, r2
 8004878:	1cbb      	adds	r3, r7, #2
 800487a:	1c02      	adds	r2, r0, #0
 800487c:	801a      	strh	r2, [r3, #0]
 800487e:	1c7b      	adds	r3, r7, #1
 8004880:	1c0a      	adds	r2, r1, #0
 8004882:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004884:	1c7b      	adds	r3, r7, #1
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800488c:	1cbb      	adds	r3, r7, #2
 800488e:	881a      	ldrh	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004894:	e003      	b.n	800489e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004896:	1cbb      	adds	r3, r7, #2
 8004898:	881a      	ldrh	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b002      	add	sp, #8
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	000a      	movs	r2, r1
 80048b0:	1cbb      	adds	r3, r7, #2
 80048b2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048ba:	1cbb      	adds	r3, r7, #2
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4013      	ands	r3, r2
 80048c2:	041a      	lsls	r2, r3, #16
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	43db      	mvns	r3, r3
 80048c8:	1cb9      	adds	r1, r7, #2
 80048ca:	8809      	ldrh	r1, [r1, #0]
 80048cc:	400b      	ands	r3, r1
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	619a      	str	r2, [r3, #24]
}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b004      	add	sp, #16
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80048e4:	4b19      	ldr	r3, [pc, #100]	; (800494c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a19      	ldr	r2, [pc, #100]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	0019      	movs	r1, r3
 80048ee:	4b17      	ldr	r3, [pc, #92]	; (800494c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d11f      	bne.n	8004940 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004900:	4b14      	ldr	r3, [pc, #80]	; (8004954 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	0013      	movs	r3, r2
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	189b      	adds	r3, r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4912      	ldr	r1, [pc, #72]	; (8004958 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800490e:	0018      	movs	r0, r3
 8004910:	f7fb fc1c 	bl	800014c <__udivsi3>
 8004914:	0003      	movs	r3, r0
 8004916:	3301      	adds	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800491a:	e008      	b.n	800492e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3b01      	subs	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e001      	b.n	800492e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e009      	b.n	8004942 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800492e:	4b07      	ldr	r3, [pc, #28]	; (800494c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	401a      	ands	r2, r3
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	429a      	cmp	r2, r3
 800493e:	d0ed      	beq.n	800491c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b004      	add	sp, #16
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	40007000 	.word	0x40007000
 8004950:	fffff9ff 	.word	0xfffff9ff
 8004954:	20000000 	.word	0x20000000
 8004958:	000f4240 	.word	0x000f4240

0800495c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	23e0      	movs	r3, #224	; 0xe0
 8004966:	01db      	lsls	r3, r3, #7
 8004968:	4013      	ands	r3, r2
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40021000 	.word	0x40021000

08004974 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e2f3      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2201      	movs	r2, #1
 800498c:	4013      	ands	r3, r2
 800498e:	d100      	bne.n	8004992 <HAL_RCC_OscConfig+0x1e>
 8004990:	e07c      	b.n	8004a8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004992:	4bc3      	ldr	r3, [pc, #780]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2238      	movs	r2, #56	; 0x38
 8004998:	4013      	ands	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800499c:	4bc0      	ldr	r3, [pc, #768]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	2203      	movs	r2, #3
 80049a2:	4013      	ands	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d102      	bne.n	80049b2 <HAL_RCC_OscConfig+0x3e>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d002      	beq.n	80049b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4bb9      	ldr	r3, [pc, #740]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	029b      	lsls	r3, r3, #10
 80049c0:	4013      	ands	r3, r2
 80049c2:	d062      	beq.n	8004a8a <HAL_RCC_OscConfig+0x116>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d15e      	bne.n	8004a8a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e2ce      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	025b      	lsls	r3, r3, #9
 80049d8:	429a      	cmp	r2, r3
 80049da:	d107      	bne.n	80049ec <HAL_RCC_OscConfig+0x78>
 80049dc:	4bb0      	ldr	r3, [pc, #704]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4baf      	ldr	r3, [pc, #700]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 80049e2:	2180      	movs	r1, #128	; 0x80
 80049e4:	0249      	lsls	r1, r1, #9
 80049e6:	430a      	orrs	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e020      	b.n	8004a2e <HAL_RCC_OscConfig+0xba>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	23a0      	movs	r3, #160	; 0xa0
 80049f2:	02db      	lsls	r3, r3, #11
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d10e      	bne.n	8004a16 <HAL_RCC_OscConfig+0xa2>
 80049f8:	4ba9      	ldr	r3, [pc, #676]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4ba8      	ldr	r3, [pc, #672]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 80049fe:	2180      	movs	r1, #128	; 0x80
 8004a00:	02c9      	lsls	r1, r1, #11
 8004a02:	430a      	orrs	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	4ba6      	ldr	r3, [pc, #664]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4ba5      	ldr	r3, [pc, #660]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004a0c:	2180      	movs	r1, #128	; 0x80
 8004a0e:	0249      	lsls	r1, r1, #9
 8004a10:	430a      	orrs	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e00b      	b.n	8004a2e <HAL_RCC_OscConfig+0xba>
 8004a16:	4ba2      	ldr	r3, [pc, #648]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4ba1      	ldr	r3, [pc, #644]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004a1c:	49a1      	ldr	r1, [pc, #644]	; (8004ca4 <HAL_RCC_OscConfig+0x330>)
 8004a1e:	400a      	ands	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	4b9f      	ldr	r3, [pc, #636]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b9e      	ldr	r3, [pc, #632]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004a28:	499f      	ldr	r1, [pc, #636]	; (8004ca8 <HAL_RCC_OscConfig+0x334>)
 8004a2a:	400a      	ands	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d014      	beq.n	8004a60 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7ff fc01 	bl	800423c <HAL_GetTick>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a40:	f7ff fbfc 	bl	800423c <HAL_GetTick>
 8004a44:	0002      	movs	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b64      	cmp	r3, #100	; 0x64
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e28d      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a52:	4b93      	ldr	r3, [pc, #588]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	029b      	lsls	r3, r3, #10
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0xcc>
 8004a5e:	e015      	b.n	8004a8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7ff fbec 	bl	800423c <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6a:	f7ff fbe7 	bl	800423c <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b64      	cmp	r3, #100	; 0x64
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e278      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a7c:	4b88      	ldr	r3, [pc, #544]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	029b      	lsls	r3, r3, #10
 8004a84:	4013      	ands	r3, r2
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0xf6>
 8004a88:	e000      	b.n	8004a8c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2202      	movs	r2, #2
 8004a92:	4013      	ands	r3, r2
 8004a94:	d100      	bne.n	8004a98 <HAL_RCC_OscConfig+0x124>
 8004a96:	e099      	b.n	8004bcc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a98:	4b81      	ldr	r3, [pc, #516]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2238      	movs	r2, #56	; 0x38
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa2:	4b7f      	ldr	r3, [pc, #508]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d102      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x144>
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d002      	beq.n	8004abe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d135      	bne.n	8004b2a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004abe:	4b78      	ldr	r3, [pc, #480]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d005      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x162>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e24b      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad6:	4b72      	ldr	r3, [pc, #456]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4a74      	ldr	r2, [pc, #464]	; (8004cac <HAL_RCC_OscConfig+0x338>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	0019      	movs	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	021a      	lsls	r2, r3, #8
 8004ae6:	4b6e      	ldr	r3, [pc, #440]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d112      	bne.n	8004b18 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004af2:	4b6b      	ldr	r3, [pc, #428]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6e      	ldr	r2, [pc, #440]	; (8004cb0 <HAL_RCC_OscConfig+0x33c>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	0019      	movs	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	4b67      	ldr	r3, [pc, #412]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b02:	430a      	orrs	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004b06:	4b66      	ldr	r3, [pc, #408]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	0adb      	lsrs	r3, r3, #11
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	4013      	ands	r3, r2
 8004b10:	4a68      	ldr	r2, [pc, #416]	; (8004cb4 <HAL_RCC_OscConfig+0x340>)
 8004b12:	40da      	lsrs	r2, r3
 8004b14:	4b68      	ldr	r3, [pc, #416]	; (8004cb8 <HAL_RCC_OscConfig+0x344>)
 8004b16:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b18:	4b68      	ldr	r3, [pc, #416]	; (8004cbc <HAL_RCC_OscConfig+0x348>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7ff fb31 	bl	8004184 <HAL_InitTick>
 8004b22:	1e03      	subs	r3, r0, #0
 8004b24:	d051      	beq.n	8004bca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e221      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d030      	beq.n	8004b94 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b32:	4b5b      	ldr	r3, [pc, #364]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a5e      	ldr	r2, [pc, #376]	; (8004cb0 <HAL_RCC_OscConfig+0x33c>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	4b57      	ldr	r3, [pc, #348]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004b46:	4b56      	ldr	r3, [pc, #344]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b55      	ldr	r3, [pc, #340]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b4c:	2180      	movs	r1, #128	; 0x80
 8004b4e:	0049      	lsls	r1, r1, #1
 8004b50:	430a      	orrs	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7ff fb72 	bl	800423c <HAL_GetTick>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7ff fb6d 	bl	800423c <HAL_GetTick>
 8004b62:	0002      	movs	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1fe      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b70:	4b4b      	ldr	r3, [pc, #300]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7c:	4b48      	ldr	r3, [pc, #288]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a4a      	ldr	r2, [pc, #296]	; (8004cac <HAL_RCC_OscConfig+0x338>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	021a      	lsls	r2, r3, #8
 8004b8c:	4b44      	ldr	r3, [pc, #272]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
 8004b92:	e01b      	b.n	8004bcc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004b94:	4b42      	ldr	r3, [pc, #264]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b41      	ldr	r3, [pc, #260]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004b9a:	4949      	ldr	r1, [pc, #292]	; (8004cc0 <HAL_RCC_OscConfig+0x34c>)
 8004b9c:	400a      	ands	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7ff fb4c 	bl	800423c <HAL_GetTick>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004baa:	f7ff fb47 	bl	800423c <HAL_GetTick>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e1d8      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bbc:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d1f0      	bne.n	8004baa <HAL_RCC_OscConfig+0x236>
 8004bc8:	e000      	b.n	8004bcc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d047      	beq.n	8004c66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004bd6:	4b32      	ldr	r3, [pc, #200]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2238      	movs	r2, #56	; 0x38
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b18      	cmp	r3, #24
 8004be0:	d10a      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004be2:	4b2f      	ldr	r3, [pc, #188]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be6:	2202      	movs	r2, #2
 8004be8:	4013      	ands	r3, r2
 8004bea:	d03c      	beq.n	8004c66 <HAL_RCC_OscConfig+0x2f2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d138      	bne.n	8004c66 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e1ba      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d019      	beq.n	8004c34 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c00:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004c02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c04:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004c06:	2101      	movs	r1, #1
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7ff fb16 	bl	800423c <HAL_GetTick>
 8004c10:	0003      	movs	r3, r0
 8004c12:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c16:	f7ff fb11 	bl	800423c <HAL_GetTick>
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e1a2      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d0f1      	beq.n	8004c16 <HAL_RCC_OscConfig+0x2a2>
 8004c32:	e018      	b.n	8004c66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004c36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c38:	4b19      	ldr	r3, [pc, #100]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	438a      	bics	r2, r1
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7ff fafc 	bl	800423c <HAL_GetTick>
 8004c44:	0003      	movs	r3, r0
 8004c46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c4a:	f7ff faf7 	bl	800423c <HAL_GetTick>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e188      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c5c:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c60:	2202      	movs	r2, #2
 8004c62:	4013      	ands	r3, r2
 8004c64:	d1f1      	bne.n	8004c4a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d100      	bne.n	8004c72 <HAL_RCC_OscConfig+0x2fe>
 8004c70:	e0c6      	b.n	8004e00 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c72:	231f      	movs	r3, #31
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2238      	movs	r2, #56	; 0x38
 8004c80:	4013      	ands	r3, r2
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d11e      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_RCC_OscConfig+0x32c>)
 8004c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d100      	bne.n	8004c92 <HAL_RCC_OscConfig+0x31e>
 8004c90:	e0b6      	b.n	8004e00 <HAL_RCC_OscConfig+0x48c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d000      	beq.n	8004c9c <HAL_RCC_OscConfig+0x328>
 8004c9a:	e0b1      	b.n	8004e00 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e166      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	fffeffff 	.word	0xfffeffff
 8004ca8:	fffbffff 	.word	0xfffbffff
 8004cac:	ffff80ff 	.word	0xffff80ff
 8004cb0:	ffffc7ff 	.word	0xffffc7ff
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	20000000 	.word	0x20000000
 8004cbc:	20000004 	.word	0x20000004
 8004cc0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cc4:	4bac      	ldr	r3, [pc, #688]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc8:	2380      	movs	r3, #128	; 0x80
 8004cca:	055b      	lsls	r3, r3, #21
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x360>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x362>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d011      	beq.n	8004cfe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004cda:	4ba7      	ldr	r3, [pc, #668]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cde:	4ba6      	ldr	r3, [pc, #664]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004ce0:	2180      	movs	r1, #128	; 0x80
 8004ce2:	0549      	lsls	r1, r1, #21
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ce8:	4ba3      	ldr	r3, [pc, #652]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	055b      	lsls	r3, r3, #21
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004cf6:	231f      	movs	r3, #31
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cfe:	4b9f      	ldr	r3, [pc, #636]	; (8004f7c <HAL_RCC_OscConfig+0x608>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4013      	ands	r3, r2
 8004d08:	d11a      	bne.n	8004d40 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d0a:	4b9c      	ldr	r3, [pc, #624]	; (8004f7c <HAL_RCC_OscConfig+0x608>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b9b      	ldr	r3, [pc, #620]	; (8004f7c <HAL_RCC_OscConfig+0x608>)
 8004d10:	2180      	movs	r1, #128	; 0x80
 8004d12:	0049      	lsls	r1, r1, #1
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004d18:	f7ff fa90 	bl	800423c <HAL_GetTick>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d22:	f7ff fa8b 	bl	800423c <HAL_GetTick>
 8004d26:	0002      	movs	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e11c      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d34:	4b91      	ldr	r3, [pc, #580]	; (8004f7c <HAL_RCC_OscConfig+0x608>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d106      	bne.n	8004d56 <HAL_RCC_OscConfig+0x3e2>
 8004d48:	4b8b      	ldr	r3, [pc, #556]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004d4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d4c:	4b8a      	ldr	r3, [pc, #552]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004d4e:	2101      	movs	r1, #1
 8004d50:	430a      	orrs	r2, r1
 8004d52:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d54:	e01c      	b.n	8004d90 <HAL_RCC_OscConfig+0x41c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b05      	cmp	r3, #5
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x404>
 8004d5e:	4b86      	ldr	r3, [pc, #536]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004d60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d62:	4b85      	ldr	r3, [pc, #532]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004d64:	2104      	movs	r1, #4
 8004d66:	430a      	orrs	r2, r1
 8004d68:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d6a:	4b83      	ldr	r3, [pc, #524]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004d6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d6e:	4b82      	ldr	r3, [pc, #520]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004d70:	2101      	movs	r1, #1
 8004d72:	430a      	orrs	r2, r1
 8004d74:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d76:	e00b      	b.n	8004d90 <HAL_RCC_OscConfig+0x41c>
 8004d78:	4b7f      	ldr	r3, [pc, #508]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004d7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d7c:	4b7e      	ldr	r3, [pc, #504]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004d7e:	2101      	movs	r1, #1
 8004d80:	438a      	bics	r2, r1
 8004d82:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d84:	4b7c      	ldr	r3, [pc, #496]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004d86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d88:	4b7b      	ldr	r3, [pc, #492]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004d8a:	2104      	movs	r1, #4
 8004d8c:	438a      	bics	r2, r1
 8004d8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d014      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7ff fa50 	bl	800423c <HAL_GetTick>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da0:	e009      	b.n	8004db6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7ff fa4b 	bl	800423c <HAL_GetTick>
 8004da6:	0002      	movs	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	4a74      	ldr	r2, [pc, #464]	; (8004f80 <HAL_RCC_OscConfig+0x60c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e0db      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db6:	4b70      	ldr	r3, [pc, #448]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dba:	2202      	movs	r2, #2
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d0f0      	beq.n	8004da2 <HAL_RCC_OscConfig+0x42e>
 8004dc0:	e013      	b.n	8004dea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7ff fa3b 	bl	800423c <HAL_GetTick>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dca:	e009      	b.n	8004de0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dcc:	f7ff fa36 	bl	800423c <HAL_GetTick>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	4a6a      	ldr	r2, [pc, #424]	; (8004f80 <HAL_RCC_OscConfig+0x60c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e0c6      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004de0:	4b65      	ldr	r3, [pc, #404]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de4:	2202      	movs	r2, #2
 8004de6:	4013      	ands	r3, r2
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004dea:	231f      	movs	r3, #31
 8004dec:	18fb      	adds	r3, r7, r3
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d105      	bne.n	8004e00 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004df4:	4b60      	ldr	r3, [pc, #384]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df8:	4b5f      	ldr	r3, [pc, #380]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004dfa:	4962      	ldr	r1, [pc, #392]	; (8004f84 <HAL_RCC_OscConfig+0x610>)
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d100      	bne.n	8004e0a <HAL_RCC_OscConfig+0x496>
 8004e08:	e0b0      	b.n	8004f6c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e0a:	4b5b      	ldr	r3, [pc, #364]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2238      	movs	r2, #56	; 0x38
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d100      	bne.n	8004e18 <HAL_RCC_OscConfig+0x4a4>
 8004e16:	e078      	b.n	8004f0a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d153      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e20:	4b55      	ldr	r3, [pc, #340]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b54      	ldr	r3, [pc, #336]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004e26:	4958      	ldr	r1, [pc, #352]	; (8004f88 <HAL_RCC_OscConfig+0x614>)
 8004e28:	400a      	ands	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7ff fa06 	bl	800423c <HAL_GetTick>
 8004e30:	0003      	movs	r3, r0
 8004e32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e36:	f7ff fa01 	bl	800423c <HAL_GetTick>
 8004e3a:	0002      	movs	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e092      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e48:	4b4b      	ldr	r3, [pc, #300]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	049b      	lsls	r3, r3, #18
 8004e50:	4013      	ands	r3, r2
 8004e52:	d1f0      	bne.n	8004e36 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e54:	4b48      	ldr	r3, [pc, #288]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a4c      	ldr	r2, [pc, #304]	; (8004f8c <HAL_RCC_OscConfig+0x618>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1a      	ldr	r2, [r3, #32]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	4b3e      	ldr	r3, [pc, #248]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e82:	4b3d      	ldr	r3, [pc, #244]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4b3c      	ldr	r3, [pc, #240]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	0449      	lsls	r1, r1, #17
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004e90:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	4b38      	ldr	r3, [pc, #224]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004e96:	2180      	movs	r1, #128	; 0x80
 8004e98:	0549      	lsls	r1, r1, #21
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9e:	f7ff f9cd 	bl	800423c <HAL_GetTick>
 8004ea2:	0003      	movs	r3, r0
 8004ea4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7ff f9c8 	bl	800423c <HAL_GetTick>
 8004eac:	0002      	movs	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e059      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eba:	4b2f      	ldr	r3, [pc, #188]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	049b      	lsls	r3, r3, #18
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x534>
 8004ec6:	e051      	b.n	8004f6c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec8:	4b2b      	ldr	r3, [pc, #172]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4b2a      	ldr	r3, [pc, #168]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004ece:	492e      	ldr	r1, [pc, #184]	; (8004f88 <HAL_RCC_OscConfig+0x614>)
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7ff f9b2 	bl	800423c <HAL_GetTick>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ede:	f7ff f9ad 	bl	800423c <HAL_GetTick>
 8004ee2:	0002      	movs	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e03e      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ef0:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	049b      	lsls	r3, r3, #18
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d1f0      	bne.n	8004ede <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004efc:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004f02:	4923      	ldr	r1, [pc, #140]	; (8004f90 <HAL_RCC_OscConfig+0x61c>)
 8004f04:	400a      	ands	r2, r1
 8004f06:	60da      	str	r2, [r3, #12]
 8004f08:	e030      	b.n	8004f6c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e02b      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004f16:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <HAL_RCC_OscConfig+0x604>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2203      	movs	r2, #3
 8004f20:	401a      	ands	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d11e      	bne.n	8004f68 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2270      	movs	r2, #112	; 0x70
 8004f2e:	401a      	ands	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d117      	bne.n	8004f68 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	23fe      	movs	r3, #254	; 0xfe
 8004f3c:	01db      	lsls	r3, r3, #7
 8004f3e:	401a      	ands	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d10e      	bne.n	8004f68 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	23f8      	movs	r3, #248	; 0xf8
 8004f4e:	039b      	lsls	r3, r3, #14
 8004f50:	401a      	ands	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d106      	bne.n	8004f68 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	0f5b      	lsrs	r3, r3, #29
 8004f5e:	075a      	lsls	r2, r3, #29
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b008      	add	sp, #32
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	00001388 	.word	0x00001388
 8004f84:	efffffff 	.word	0xefffffff
 8004f88:	feffffff 	.word	0xfeffffff
 8004f8c:	1fc1808c 	.word	0x1fc1808c
 8004f90:	effefffc 	.word	0xeffefffc

08004f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0e9      	b.n	800517c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa8:	4b76      	ldr	r3, [pc, #472]	; (8005184 <HAL_RCC_ClockConfig+0x1f0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2207      	movs	r2, #7
 8004fae:	4013      	ands	r3, r2
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d91e      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb6:	4b73      	ldr	r3, [pc, #460]	; (8005184 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2207      	movs	r2, #7
 8004fbc:	4393      	bics	r3, r2
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	4b70      	ldr	r3, [pc, #448]	; (8005184 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fc8:	f7ff f938 	bl	800423c <HAL_GetTick>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fd0:	e009      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd2:	f7ff f933 	bl	800423c <HAL_GetTick>
 8004fd6:	0002      	movs	r2, r0
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	4a6a      	ldr	r2, [pc, #424]	; (8005188 <HAL_RCC_ClockConfig+0x1f4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e0ca      	b.n	800517c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fe6:	4b67      	ldr	r3, [pc, #412]	; (8005184 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2207      	movs	r2, #7
 8004fec:	4013      	ands	r3, r2
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d1ee      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d015      	beq.n	800502a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2204      	movs	r2, #4
 8005004:	4013      	ands	r3, r2
 8005006:	d006      	beq.n	8005016 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005008:	4b60      	ldr	r3, [pc, #384]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	4b5f      	ldr	r3, [pc, #380]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 800500e:	21e0      	movs	r1, #224	; 0xe0
 8005010:	01c9      	lsls	r1, r1, #7
 8005012:	430a      	orrs	r2, r1
 8005014:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005016:	4b5d      	ldr	r3, [pc, #372]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	4a5d      	ldr	r2, [pc, #372]	; (8005190 <HAL_RCC_ClockConfig+0x1fc>)
 800501c:	4013      	ands	r3, r2
 800501e:	0019      	movs	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	4b59      	ldr	r3, [pc, #356]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2201      	movs	r2, #1
 8005030:	4013      	ands	r3, r2
 8005032:	d057      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d107      	bne.n	800504c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800503c:	4b53      	ldr	r3, [pc, #332]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	029b      	lsls	r3, r3, #10
 8005044:	4013      	ands	r3, r2
 8005046:	d12b      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e097      	b.n	800517c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d107      	bne.n	8005064 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005054:	4b4d      	ldr	r3, [pc, #308]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	049b      	lsls	r3, r3, #18
 800505c:	4013      	ands	r3, r2
 800505e:	d11f      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e08b      	b.n	800517c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d107      	bne.n	800507c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800506c:	4b47      	ldr	r3, [pc, #284]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4013      	ands	r3, r2
 8005076:	d113      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e07f      	b.n	800517c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d106      	bne.n	8005092 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005084:	4b41      	ldr	r3, [pc, #260]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 8005086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005088:	2202      	movs	r2, #2
 800508a:	4013      	ands	r3, r2
 800508c:	d108      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e074      	b.n	800517c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005092:	4b3e      	ldr	r3, [pc, #248]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 8005094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005096:	2202      	movs	r2, #2
 8005098:	4013      	ands	r3, r2
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e06d      	b.n	800517c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050a0:	4b3a      	ldr	r3, [pc, #232]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2207      	movs	r2, #7
 80050a6:	4393      	bics	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	4b37      	ldr	r3, [pc, #220]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 80050b0:	430a      	orrs	r2, r1
 80050b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b4:	f7ff f8c2 	bl	800423c <HAL_GetTick>
 80050b8:	0003      	movs	r3, r0
 80050ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050bc:	e009      	b.n	80050d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050be:	f7ff f8bd 	bl	800423c <HAL_GetTick>
 80050c2:	0002      	movs	r2, r0
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <HAL_RCC_ClockConfig+0x1f4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e054      	b.n	800517c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d2:	4b2e      	ldr	r3, [pc, #184]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2238      	movs	r2, #56	; 0x38
 80050d8:	401a      	ands	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1ec      	bne.n	80050be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050e4:	4b27      	ldr	r3, [pc, #156]	; (8005184 <HAL_RCC_ClockConfig+0x1f0>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2207      	movs	r2, #7
 80050ea:	4013      	ands	r3, r2
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d21e      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <HAL_RCC_ClockConfig+0x1f0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2207      	movs	r2, #7
 80050f8:	4393      	bics	r3, r2
 80050fa:	0019      	movs	r1, r3
 80050fc:	4b21      	ldr	r3, [pc, #132]	; (8005184 <HAL_RCC_ClockConfig+0x1f0>)
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005104:	f7ff f89a 	bl	800423c <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800510c:	e009      	b.n	8005122 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510e:	f7ff f895 	bl	800423c <HAL_GetTick>
 8005112:	0002      	movs	r2, r0
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <HAL_RCC_ClockConfig+0x1f4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e02c      	b.n	800517c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005122:	4b18      	ldr	r3, [pc, #96]	; (8005184 <HAL_RCC_ClockConfig+0x1f0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2207      	movs	r2, #7
 8005128:	4013      	ands	r3, r2
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d1ee      	bne.n	800510e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2204      	movs	r2, #4
 8005136:	4013      	ands	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800513a:	4b14      	ldr	r3, [pc, #80]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	4a15      	ldr	r2, [pc, #84]	; (8005194 <HAL_RCC_ClockConfig+0x200>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	4b10      	ldr	r3, [pc, #64]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 800514a:	430a      	orrs	r2, r1
 800514c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800514e:	f000 f829 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8005152:	0001      	movs	r1, r0
 8005154:	4b0d      	ldr	r3, [pc, #52]	; (800518c <HAL_RCC_ClockConfig+0x1f8>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	0a1b      	lsrs	r3, r3, #8
 800515a:	220f      	movs	r2, #15
 800515c:	401a      	ands	r2, r3
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <HAL_RCC_ClockConfig+0x204>)
 8005160:	0092      	lsls	r2, r2, #2
 8005162:	58d3      	ldr	r3, [r2, r3]
 8005164:	221f      	movs	r2, #31
 8005166:	4013      	ands	r3, r2
 8005168:	000a      	movs	r2, r1
 800516a:	40da      	lsrs	r2, r3
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <HAL_RCC_ClockConfig+0x208>)
 800516e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <HAL_RCC_ClockConfig+0x20c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	0018      	movs	r0, r3
 8005176:	f7ff f805 	bl	8004184 <HAL_InitTick>
 800517a:	0003      	movs	r3, r0
}
 800517c:	0018      	movs	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	b004      	add	sp, #16
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40022000 	.word	0x40022000
 8005188:	00001388 	.word	0x00001388
 800518c:	40021000 	.word	0x40021000
 8005190:	fffff0ff 	.word	0xfffff0ff
 8005194:	ffff8fff 	.word	0xffff8fff
 8005198:	0800e2e4 	.word	0x0800e2e4
 800519c:	20000000 	.word	0x20000000
 80051a0:	20000004 	.word	0x20000004

080051a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051aa:	4b3c      	ldr	r3, [pc, #240]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2238      	movs	r2, #56	; 0x38
 80051b0:	4013      	ands	r3, r2
 80051b2:	d10f      	bne.n	80051d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80051b4:	4b39      	ldr	r3, [pc, #228]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	0adb      	lsrs	r3, r3, #11
 80051ba:	2207      	movs	r2, #7
 80051bc:	4013      	ands	r3, r2
 80051be:	2201      	movs	r2, #1
 80051c0:	409a      	lsls	r2, r3
 80051c2:	0013      	movs	r3, r2
 80051c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	4835      	ldr	r0, [pc, #212]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80051ca:	f7fa ffbf 	bl	800014c <__udivsi3>
 80051ce:	0003      	movs	r3, r0
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e05d      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051d4:	4b31      	ldr	r3, [pc, #196]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2238      	movs	r2, #56	; 0x38
 80051da:	4013      	ands	r3, r2
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d102      	bne.n	80051e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	e054      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051e6:	4b2d      	ldr	r3, [pc, #180]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2238      	movs	r2, #56	; 0x38
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b10      	cmp	r3, #16
 80051f0:	d138      	bne.n	8005264 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80051f2:	4b2a      	ldr	r3, [pc, #168]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	2203      	movs	r2, #3
 80051f8:	4013      	ands	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051fc:	4b27      	ldr	r3, [pc, #156]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	2207      	movs	r2, #7
 8005204:	4013      	ands	r3, r2
 8005206:	3301      	adds	r3, #1
 8005208:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d10d      	bne.n	800522c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4823      	ldr	r0, [pc, #140]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005214:	f7fa ff9a 	bl	800014c <__udivsi3>
 8005218:	0003      	movs	r3, r0
 800521a:	0019      	movs	r1, r3
 800521c:	4b1f      	ldr	r3, [pc, #124]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	227f      	movs	r2, #127	; 0x7f
 8005224:	4013      	ands	r3, r2
 8005226:	434b      	muls	r3, r1
 8005228:	617b      	str	r3, [r7, #20]
        break;
 800522a:	e00d      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	481c      	ldr	r0, [pc, #112]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005230:	f7fa ff8c 	bl	800014c <__udivsi3>
 8005234:	0003      	movs	r3, r0
 8005236:	0019      	movs	r1, r3
 8005238:	4b18      	ldr	r3, [pc, #96]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	227f      	movs	r2, #127	; 0x7f
 8005240:	4013      	ands	r3, r2
 8005242:	434b      	muls	r3, r1
 8005244:	617b      	str	r3, [r7, #20]
        break;
 8005246:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005248:	4b14      	ldr	r3, [pc, #80]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	0f5b      	lsrs	r3, r3, #29
 800524e:	2207      	movs	r2, #7
 8005250:	4013      	ands	r3, r2
 8005252:	3301      	adds	r3, #1
 8005254:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	6978      	ldr	r0, [r7, #20]
 800525a:	f7fa ff77 	bl	800014c <__udivsi3>
 800525e:	0003      	movs	r3, r0
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	e015      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005264:	4b0d      	ldr	r3, [pc, #52]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2238      	movs	r2, #56	; 0x38
 800526a:	4013      	ands	r3, r2
 800526c:	2b20      	cmp	r3, #32
 800526e:	d103      	bne.n	8005278 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e00b      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005278:	4b08      	ldr	r3, [pc, #32]	; (800529c <HAL_RCC_GetSysClockFreq+0xf8>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2238      	movs	r2, #56	; 0x38
 800527e:	4013      	ands	r3, r2
 8005280:	2b18      	cmp	r3, #24
 8005282:	d103      	bne.n	800528c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005284:	23fa      	movs	r3, #250	; 0xfa
 8005286:	01db      	lsls	r3, r3, #7
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	e001      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005290:	693b      	ldr	r3, [r7, #16]
}
 8005292:	0018      	movs	r0, r3
 8005294:	46bd      	mov	sp, r7
 8005296:	b006      	add	sp, #24
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	40021000 	.word	0x40021000
 80052a0:	00f42400 	.word	0x00f42400

080052a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a8:	4b02      	ldr	r3, [pc, #8]	; (80052b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80052aa:	681b      	ldr	r3, [r3, #0]
}
 80052ac:	0018      	movs	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	20000000 	.word	0x20000000

080052b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b8:	b5b0      	push	{r4, r5, r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80052bc:	f7ff fff2 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052c0:	0004      	movs	r4, r0
 80052c2:	f7ff fb4b 	bl	800495c <LL_RCC_GetAPB1Prescaler>
 80052c6:	0003      	movs	r3, r0
 80052c8:	0b1a      	lsrs	r2, r3, #12
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052cc:	0092      	lsls	r2, r2, #2
 80052ce:	58d3      	ldr	r3, [r2, r3]
 80052d0:	221f      	movs	r2, #31
 80052d2:	4013      	ands	r3, r2
 80052d4:	40dc      	lsrs	r4, r3
 80052d6:	0023      	movs	r3, r4
}
 80052d8:	0018      	movs	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	bdb0      	pop	{r4, r5, r7, pc}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	0800e324 	.word	0x0800e324

080052e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80052ec:	2313      	movs	r3, #19
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052f4:	2312      	movs	r3, #18
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	029b      	lsls	r3, r3, #10
 8005304:	4013      	ands	r3, r2
 8005306:	d100      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005308:	e0a3      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530a:	2011      	movs	r0, #17
 800530c:	183b      	adds	r3, r7, r0
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005312:	4b86      	ldr	r3, [pc, #536]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005316:	2380      	movs	r3, #128	; 0x80
 8005318:	055b      	lsls	r3, r3, #21
 800531a:	4013      	ands	r3, r2
 800531c:	d110      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800531e:	4b83      	ldr	r3, [pc, #524]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005322:	4b82      	ldr	r3, [pc, #520]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005324:	2180      	movs	r1, #128	; 0x80
 8005326:	0549      	lsls	r1, r1, #21
 8005328:	430a      	orrs	r2, r1
 800532a:	63da      	str	r2, [r3, #60]	; 0x3c
 800532c:	4b7f      	ldr	r3, [pc, #508]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800532e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	055b      	lsls	r3, r3, #21
 8005334:	4013      	ands	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800533a:	183b      	adds	r3, r7, r0
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005340:	4b7b      	ldr	r3, [pc, #492]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b7a      	ldr	r3, [pc, #488]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005346:	2180      	movs	r1, #128	; 0x80
 8005348:	0049      	lsls	r1, r1, #1
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800534e:	f7fe ff75 	bl	800423c <HAL_GetTick>
 8005352:	0003      	movs	r3, r0
 8005354:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005356:	e00b      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005358:	f7fe ff70 	bl	800423c <HAL_GetTick>
 800535c:	0002      	movs	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d904      	bls.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005366:	2313      	movs	r3, #19
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	2203      	movs	r2, #3
 800536c:	701a      	strb	r2, [r3, #0]
        break;
 800536e:	e005      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005370:	4b6f      	ldr	r3, [pc, #444]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4013      	ands	r3, r2
 800537a:	d0ed      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800537c:	2313      	movs	r3, #19
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d154      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005386:	4b69      	ldr	r3, [pc, #420]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005388:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800538a:	23c0      	movs	r3, #192	; 0xc0
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4013      	ands	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d019      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d014      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053a2:	4b62      	ldr	r3, [pc, #392]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a6:	4a63      	ldr	r2, [pc, #396]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053ac:	4b5f      	ldr	r3, [pc, #380]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053b0:	4b5e      	ldr	r3, [pc, #376]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	0249      	lsls	r1, r1, #9
 80053b6:	430a      	orrs	r2, r1
 80053b8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053ba:	4b5c      	ldr	r3, [pc, #368]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053be:	4b5b      	ldr	r3, [pc, #364]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053c0:	495d      	ldr	r1, [pc, #372]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053c2:	400a      	ands	r2, r1
 80053c4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053c6:	4b59      	ldr	r3, [pc, #356]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2201      	movs	r2, #1
 80053d0:	4013      	ands	r3, r2
 80053d2:	d016      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fe ff32 	bl	800423c <HAL_GetTick>
 80053d8:	0003      	movs	r3, r0
 80053da:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053dc:	e00c      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fe ff2d 	bl	800423c <HAL_GetTick>
 80053e2:	0002      	movs	r2, r0
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	4a54      	ldr	r2, [pc, #336]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d904      	bls.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80053ee:	2313      	movs	r3, #19
 80053f0:	18fb      	adds	r3, r7, r3
 80053f2:	2203      	movs	r2, #3
 80053f4:	701a      	strb	r2, [r3, #0]
            break;
 80053f6:	e004      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f8:	4b4c      	ldr	r3, [pc, #304]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fc:	2202      	movs	r2, #2
 80053fe:	4013      	ands	r3, r2
 8005400:	d0ed      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005402:	2313      	movs	r3, #19
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800540c:	4b47      	ldr	r3, [pc, #284]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800540e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005410:	4a48      	ldr	r2, [pc, #288]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005412:	4013      	ands	r3, r2
 8005414:	0019      	movs	r1, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	4b44      	ldr	r3, [pc, #272]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800541c:	430a      	orrs	r2, r1
 800541e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005420:	e00c      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005422:	2312      	movs	r3, #18
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	2213      	movs	r2, #19
 8005428:	18ba      	adds	r2, r7, r2
 800542a:	7812      	ldrb	r2, [r2, #0]
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e005      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	2312      	movs	r3, #18
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	2213      	movs	r2, #19
 8005436:	18ba      	adds	r2, r7, r2
 8005438:	7812      	ldrb	r2, [r2, #0]
 800543a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800543c:	2311      	movs	r3, #17
 800543e:	18fb      	adds	r3, r7, r3
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d105      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005446:	4b39      	ldr	r3, [pc, #228]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544a:	4b38      	ldr	r3, [pc, #224]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800544c:	493c      	ldr	r1, [pc, #240]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800544e:	400a      	ands	r2, r1
 8005450:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2201      	movs	r2, #1
 8005458:	4013      	ands	r3, r2
 800545a:	d009      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800545c:	4b33      	ldr	r3, [pc, #204]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005460:	2203      	movs	r2, #3
 8005462:	4393      	bics	r3, r2
 8005464:	0019      	movs	r1, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	4b30      	ldr	r3, [pc, #192]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800546c:	430a      	orrs	r2, r1
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2202      	movs	r2, #2
 8005476:	4013      	ands	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800547a:	4b2c      	ldr	r3, [pc, #176]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	220c      	movs	r2, #12
 8005480:	4393      	bics	r3, r2
 8005482:	0019      	movs	r1, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	4b28      	ldr	r3, [pc, #160]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800548a:	430a      	orrs	r2, r1
 800548c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2220      	movs	r2, #32
 8005494:	4013      	ands	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005498:	4b24      	ldr	r3, [pc, #144]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	4a29      	ldr	r2, [pc, #164]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800549e:	4013      	ands	r3, r2
 80054a0:	0019      	movs	r1, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	4b21      	ldr	r3, [pc, #132]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054a8:	430a      	orrs	r2, r1
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	01db      	lsls	r3, r3, #7
 80054b4:	4013      	ands	r3, r2
 80054b6:	d015      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b8:	4b1c      	ldr	r3, [pc, #112]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	0899      	lsrs	r1, r3, #2
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	4b19      	ldr	r3, [pc, #100]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054c6:	430a      	orrs	r2, r1
 80054c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695a      	ldr	r2, [r3, #20]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	05db      	lsls	r3, r3, #23
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d106      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80054d6:	4b15      	ldr	r3, [pc, #84]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054dc:	2180      	movs	r1, #128	; 0x80
 80054de:	0249      	lsls	r1, r1, #9
 80054e0:	430a      	orrs	r2, r1
 80054e2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	4013      	ands	r3, r2
 80054ee:	d016      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f4:	4a14      	ldr	r2, [pc, #80]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005500:	430a      	orrs	r2, r1
 8005502:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	01db      	lsls	r3, r3, #7
 800550c:	429a      	cmp	r2, r3
 800550e:	d106      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	0249      	lsls	r1, r1, #9
 800551a:	430a      	orrs	r2, r1
 800551c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800551e:	2312      	movs	r3, #18
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	781b      	ldrb	r3, [r3, #0]
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b006      	add	sp, #24
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40021000 	.word	0x40021000
 8005530:	40007000 	.word	0x40007000
 8005534:	fffffcff 	.word	0xfffffcff
 8005538:	fffeffff 	.word	0xfffeffff
 800553c:	00001388 	.word	0x00001388
 8005540:	efffffff 	.word	0xefffffff
 8005544:	ffffcfff 	.word	0xffffcfff
 8005548:	ffff3fff 	.word	0xffff3fff

0800554c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e04a      	b.n	80055f4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	223d      	movs	r2, #61	; 0x3d
 8005562:	5c9b      	ldrb	r3, [r3, r2]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d107      	bne.n	800557a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	223c      	movs	r2, #60	; 0x3c
 800556e:	2100      	movs	r1, #0
 8005570:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0018      	movs	r0, r3
 8005576:	f7fe fc03 	bl	8003d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	223d      	movs	r2, #61	; 0x3d
 800557e:	2102      	movs	r1, #2
 8005580:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3304      	adds	r3, #4
 800558a:	0019      	movs	r1, r3
 800558c:	0010      	movs	r0, r2
 800558e:	f000 fecf 	bl	8006330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2248      	movs	r2, #72	; 0x48
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	223e      	movs	r2, #62	; 0x3e
 800559e:	2101      	movs	r1, #1
 80055a0:	5499      	strb	r1, [r3, r2]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	223f      	movs	r2, #63	; 0x3f
 80055a6:	2101      	movs	r1, #1
 80055a8:	5499      	strb	r1, [r3, r2]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2240      	movs	r2, #64	; 0x40
 80055ae:	2101      	movs	r1, #1
 80055b0:	5499      	strb	r1, [r3, r2]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2241      	movs	r2, #65	; 0x41
 80055b6:	2101      	movs	r1, #1
 80055b8:	5499      	strb	r1, [r3, r2]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2242      	movs	r2, #66	; 0x42
 80055be:	2101      	movs	r1, #1
 80055c0:	5499      	strb	r1, [r3, r2]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2243      	movs	r2, #67	; 0x43
 80055c6:	2101      	movs	r1, #1
 80055c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2244      	movs	r2, #68	; 0x44
 80055ce:	2101      	movs	r1, #1
 80055d0:	5499      	strb	r1, [r3, r2]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2245      	movs	r2, #69	; 0x45
 80055d6:	2101      	movs	r1, #1
 80055d8:	5499      	strb	r1, [r3, r2]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2246      	movs	r2, #70	; 0x46
 80055de:	2101      	movs	r1, #1
 80055e0:	5499      	strb	r1, [r3, r2]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2247      	movs	r2, #71	; 0x47
 80055e6:	2101      	movs	r1, #1
 80055e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	223d      	movs	r2, #61	; 0x3d
 80055ee:	2101      	movs	r1, #1
 80055f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b002      	add	sp, #8
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	223d      	movs	r2, #61	; 0x3d
 8005608:	5c9b      	ldrb	r3, [r3, r2]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	d001      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e03c      	b.n	800568e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	223d      	movs	r2, #61	; 0x3d
 8005618:	2102      	movs	r1, #2
 800561a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2101      	movs	r1, #1
 8005628:	430a      	orrs	r2, r1
 800562a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a19      	ldr	r2, [pc, #100]	; (8005698 <HAL_TIM_Base_Start_IT+0x9c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x4e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a18      	ldr	r2, [pc, #96]	; (800569c <HAL_TIM_Base_Start_IT+0xa0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x4e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d116      	bne.n	8005678 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	4a14      	ldr	r2, [pc, #80]	; (80056a4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005652:	4013      	ands	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b06      	cmp	r3, #6
 800565a:	d016      	beq.n	800568a <HAL_TIM_Base_Start_IT+0x8e>
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	025b      	lsls	r3, r3, #9
 8005662:	429a      	cmp	r2, r3
 8005664:	d011      	beq.n	800568a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2101      	movs	r1, #1
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005676:	e008      	b.n	800568a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2101      	movs	r1, #1
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e000      	b.n	800568c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	0018      	movs	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	b004      	add	sp, #16
 8005694:	bd80      	pop	{r7, pc}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	40012c00 	.word	0x40012c00
 800569c:	40000400 	.word	0x40000400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	00010007 	.word	0x00010007

080056a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e04a      	b.n	8005750 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	223d      	movs	r2, #61	; 0x3d
 80056be:	5c9b      	ldrb	r3, [r3, r2]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	223c      	movs	r2, #60	; 0x3c
 80056ca:	2100      	movs	r1, #0
 80056cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f000 f841 	bl	8005758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	223d      	movs	r2, #61	; 0x3d
 80056da:	2102      	movs	r1, #2
 80056dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3304      	adds	r3, #4
 80056e6:	0019      	movs	r1, r3
 80056e8:	0010      	movs	r0, r2
 80056ea:	f000 fe21 	bl	8006330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2248      	movs	r2, #72	; 0x48
 80056f2:	2101      	movs	r1, #1
 80056f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	223e      	movs	r2, #62	; 0x3e
 80056fa:	2101      	movs	r1, #1
 80056fc:	5499      	strb	r1, [r3, r2]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	223f      	movs	r2, #63	; 0x3f
 8005702:	2101      	movs	r1, #1
 8005704:	5499      	strb	r1, [r3, r2]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2240      	movs	r2, #64	; 0x40
 800570a:	2101      	movs	r1, #1
 800570c:	5499      	strb	r1, [r3, r2]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2241      	movs	r2, #65	; 0x41
 8005712:	2101      	movs	r1, #1
 8005714:	5499      	strb	r1, [r3, r2]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2242      	movs	r2, #66	; 0x42
 800571a:	2101      	movs	r1, #1
 800571c:	5499      	strb	r1, [r3, r2]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2243      	movs	r2, #67	; 0x43
 8005722:	2101      	movs	r1, #1
 8005724:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2244      	movs	r2, #68	; 0x44
 800572a:	2101      	movs	r1, #1
 800572c:	5499      	strb	r1, [r3, r2]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2245      	movs	r2, #69	; 0x45
 8005732:	2101      	movs	r1, #1
 8005734:	5499      	strb	r1, [r3, r2]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2246      	movs	r2, #70	; 0x46
 800573a:	2101      	movs	r1, #1
 800573c:	5499      	strb	r1, [r3, r2]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2247      	movs	r2, #71	; 0x47
 8005742:	2101      	movs	r1, #1
 8005744:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	223d      	movs	r2, #61	; 0x3d
 800574a:	2101      	movs	r1, #1
 800574c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	0018      	movs	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	b002      	add	sp, #8
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d108      	bne.n	800578a <HAL_TIM_PWM_Start+0x22>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	223e      	movs	r2, #62	; 0x3e
 800577c:	5c9b      	ldrb	r3, [r3, r2]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	1e5a      	subs	r2, r3, #1
 8005784:	4193      	sbcs	r3, r2
 8005786:	b2db      	uxtb	r3, r3
 8005788:	e037      	b.n	80057fa <HAL_TIM_PWM_Start+0x92>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b04      	cmp	r3, #4
 800578e:	d108      	bne.n	80057a2 <HAL_TIM_PWM_Start+0x3a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	223f      	movs	r2, #63	; 0x3f
 8005794:	5c9b      	ldrb	r3, [r3, r2]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	1e5a      	subs	r2, r3, #1
 800579c:	4193      	sbcs	r3, r2
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	e02b      	b.n	80057fa <HAL_TIM_PWM_Start+0x92>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d108      	bne.n	80057ba <HAL_TIM_PWM_Start+0x52>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2240      	movs	r2, #64	; 0x40
 80057ac:	5c9b      	ldrb	r3, [r3, r2]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	1e5a      	subs	r2, r3, #1
 80057b4:	4193      	sbcs	r3, r2
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	e01f      	b.n	80057fa <HAL_TIM_PWM_Start+0x92>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b0c      	cmp	r3, #12
 80057be:	d108      	bne.n	80057d2 <HAL_TIM_PWM_Start+0x6a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2241      	movs	r2, #65	; 0x41
 80057c4:	5c9b      	ldrb	r3, [r3, r2]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	1e5a      	subs	r2, r3, #1
 80057cc:	4193      	sbcs	r3, r2
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	e013      	b.n	80057fa <HAL_TIM_PWM_Start+0x92>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d108      	bne.n	80057ea <HAL_TIM_PWM_Start+0x82>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2242      	movs	r2, #66	; 0x42
 80057dc:	5c9b      	ldrb	r3, [r3, r2]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	1e5a      	subs	r2, r3, #1
 80057e4:	4193      	sbcs	r3, r2
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e007      	b.n	80057fa <HAL_TIM_PWM_Start+0x92>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2243      	movs	r2, #67	; 0x43
 80057ee:	5c9b      	ldrb	r3, [r3, r2]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	1e5a      	subs	r2, r3, #1
 80057f6:	4193      	sbcs	r3, r2
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e085      	b.n	800590e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Start+0xaa>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	223e      	movs	r2, #62	; 0x3e
 800580c:	2102      	movs	r1, #2
 800580e:	5499      	strb	r1, [r3, r2]
 8005810:	e023      	b.n	800585a <HAL_TIM_PWM_Start+0xf2>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start+0xba>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	223f      	movs	r2, #63	; 0x3f
 800581c:	2102      	movs	r1, #2
 800581e:	5499      	strb	r1, [r3, r2]
 8005820:	e01b      	b.n	800585a <HAL_TIM_PWM_Start+0xf2>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b08      	cmp	r3, #8
 8005826:	d104      	bne.n	8005832 <HAL_TIM_PWM_Start+0xca>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2240      	movs	r2, #64	; 0x40
 800582c:	2102      	movs	r1, #2
 800582e:	5499      	strb	r1, [r3, r2]
 8005830:	e013      	b.n	800585a <HAL_TIM_PWM_Start+0xf2>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b0c      	cmp	r3, #12
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Start+0xda>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2241      	movs	r2, #65	; 0x41
 800583c:	2102      	movs	r1, #2
 800583e:	5499      	strb	r1, [r3, r2]
 8005840:	e00b      	b.n	800585a <HAL_TIM_PWM_Start+0xf2>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b10      	cmp	r3, #16
 8005846:	d104      	bne.n	8005852 <HAL_TIM_PWM_Start+0xea>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2242      	movs	r2, #66	; 0x42
 800584c:	2102      	movs	r1, #2
 800584e:	5499      	strb	r1, [r3, r2]
 8005850:	e003      	b.n	800585a <HAL_TIM_PWM_Start+0xf2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2243      	movs	r2, #67	; 0x43
 8005856:	2102      	movs	r1, #2
 8005858:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	2201      	movs	r2, #1
 8005862:	0018      	movs	r0, r3
 8005864:	f001 f93a 	bl	8006adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <HAL_TIM_PWM_Start+0x1b0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00e      	beq.n	8005890 <HAL_TIM_PWM_Start+0x128>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a29      	ldr	r2, [pc, #164]	; (800591c <HAL_TIM_PWM_Start+0x1b4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d009      	beq.n	8005890 <HAL_TIM_PWM_Start+0x128>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a27      	ldr	r2, [pc, #156]	; (8005920 <HAL_TIM_PWM_Start+0x1b8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <HAL_TIM_PWM_Start+0x128>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a26      	ldr	r2, [pc, #152]	; (8005924 <HAL_TIM_PWM_Start+0x1bc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d101      	bne.n	8005894 <HAL_TIM_PWM_Start+0x12c>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_TIM_PWM_Start+0x12e>
 8005894:	2300      	movs	r3, #0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	0209      	lsls	r1, r1, #8
 80058a8:	430a      	orrs	r2, r1
 80058aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a19      	ldr	r2, [pc, #100]	; (8005918 <HAL_TIM_PWM_Start+0x1b0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d009      	beq.n	80058ca <HAL_TIM_PWM_Start+0x162>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1b      	ldr	r2, [pc, #108]	; (8005928 <HAL_TIM_PWM_Start+0x1c0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_TIM_PWM_Start+0x162>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a15      	ldr	r2, [pc, #84]	; (800591c <HAL_TIM_PWM_Start+0x1b4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d116      	bne.n	80058f8 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a16      	ldr	r2, [pc, #88]	; (800592c <HAL_TIM_PWM_Start+0x1c4>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b06      	cmp	r3, #6
 80058da:	d016      	beq.n	800590a <HAL_TIM_PWM_Start+0x1a2>
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	2380      	movs	r3, #128	; 0x80
 80058e0:	025b      	lsls	r3, r3, #9
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d011      	beq.n	800590a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2101      	movs	r1, #1
 80058f2:	430a      	orrs	r2, r1
 80058f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	e008      	b.n	800590a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2101      	movs	r1, #1
 8005904:	430a      	orrs	r2, r1
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	e000      	b.n	800590c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	0018      	movs	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	b004      	add	sp, #16
 8005914:	bd80      	pop	{r7, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800
 8005928:	40000400 	.word	0x40000400
 800592c:	00010007 	.word	0x00010007

08005930 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	2200      	movs	r2, #0
 8005942:	0018      	movs	r0, r3
 8005944:	f001 f8ca 	bl	8006adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a37      	ldr	r2, [pc, #220]	; (8005a2c <HAL_TIM_PWM_Stop+0xfc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_TIM_PWM_Stop+0x40>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a36      	ldr	r2, [pc, #216]	; (8005a30 <HAL_TIM_PWM_Stop+0x100>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_TIM_PWM_Stop+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a34      	ldr	r2, [pc, #208]	; (8005a34 <HAL_TIM_PWM_Stop+0x104>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIM_PWM_Stop+0x40>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a33      	ldr	r2, [pc, #204]	; (8005a38 <HAL_TIM_PWM_Stop+0x108>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d101      	bne.n	8005974 <HAL_TIM_PWM_Stop+0x44>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <HAL_TIM_PWM_Stop+0x46>
 8005974:	2300      	movs	r3, #0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d013      	beq.n	80059a2 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	4a2e      	ldr	r2, [pc, #184]	; (8005a3c <HAL_TIM_PWM_Stop+0x10c>)
 8005982:	4013      	ands	r3, r2
 8005984:	d10d      	bne.n	80059a2 <HAL_TIM_PWM_Stop+0x72>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	4a2c      	ldr	r2, [pc, #176]	; (8005a40 <HAL_TIM_PWM_Stop+0x110>)
 800598e:	4013      	ands	r3, r2
 8005990:	d107      	bne.n	80059a2 <HAL_TIM_PWM_Stop+0x72>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4929      	ldr	r1, [pc, #164]	; (8005a44 <HAL_TIM_PWM_Stop+0x114>)
 800599e:	400a      	ands	r2, r1
 80059a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	4a24      	ldr	r2, [pc, #144]	; (8005a3c <HAL_TIM_PWM_Stop+0x10c>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	d10d      	bne.n	80059ca <HAL_TIM_PWM_Stop+0x9a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <HAL_TIM_PWM_Stop+0x110>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	d107      	bne.n	80059ca <HAL_TIM_PWM_Stop+0x9a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2101      	movs	r1, #1
 80059c6:	438a      	bics	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <HAL_TIM_PWM_Stop+0xaa>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	223e      	movs	r2, #62	; 0x3e
 80059d4:	2101      	movs	r1, #1
 80059d6:	5499      	strb	r1, [r3, r2]
 80059d8:	e023      	b.n	8005a22 <HAL_TIM_PWM_Stop+0xf2>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Stop+0xba>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	223f      	movs	r2, #63	; 0x3f
 80059e4:	2101      	movs	r1, #1
 80059e6:	5499      	strb	r1, [r3, r2]
 80059e8:	e01b      	b.n	8005a22 <HAL_TIM_PWM_Stop+0xf2>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Stop+0xca>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2240      	movs	r2, #64	; 0x40
 80059f4:	2101      	movs	r1, #1
 80059f6:	5499      	strb	r1, [r3, r2]
 80059f8:	e013      	b.n	8005a22 <HAL_TIM_PWM_Stop+0xf2>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Stop+0xda>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2241      	movs	r2, #65	; 0x41
 8005a04:	2101      	movs	r1, #1
 8005a06:	5499      	strb	r1, [r3, r2]
 8005a08:	e00b      	b.n	8005a22 <HAL_TIM_PWM_Stop+0xf2>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Stop+0xea>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2242      	movs	r2, #66	; 0x42
 8005a14:	2101      	movs	r1, #1
 8005a16:	5499      	strb	r1, [r3, r2]
 8005a18:	e003      	b.n	8005a22 <HAL_TIM_PWM_Stop+0xf2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2243      	movs	r2, #67	; 0x43
 8005a1e:	2101      	movs	r1, #1
 8005a20:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	0018      	movs	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800
 8005a3c:	00001111 	.word	0x00001111
 8005a40:	00000444 	.word	0x00000444
 8005a44:	ffff7fff 	.word	0xffff7fff

08005a48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e090      	b.n	8005b7e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	223d      	movs	r2, #61	; 0x3d
 8005a60:	5c9b      	ldrb	r3, [r3, r2]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d107      	bne.n	8005a78 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	223c      	movs	r2, #60	; 0x3c
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	0018      	movs	r0, r3
 8005a74:	f7fe f8f8 	bl	8003c68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	223d      	movs	r2, #61	; 0x3d
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	493f      	ldr	r1, [pc, #252]	; (8005b88 <HAL_TIM_Encoder_Init+0x140>)
 8005a8c:	400a      	ands	r2, r1
 8005a8e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	0019      	movs	r1, r3
 8005a9a:	0010      	movs	r0, r2
 8005a9c:	f000 fc48 	bl	8006330 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4a31      	ldr	r2, [pc, #196]	; (8005b8c <HAL_TIM_Encoder_Init+0x144>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4a2c      	ldr	r2, [pc, #176]	; (8005b90 <HAL_TIM_Encoder_Init+0x148>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4a2b      	ldr	r2, [pc, #172]	; (8005b94 <HAL_TIM_Encoder_Init+0x14c>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	4313      	orrs	r3, r2
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	011a      	lsls	r2, r3, #4
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	031b      	lsls	r3, r3, #12
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2222      	movs	r2, #34	; 0x22
 8005b16:	4393      	bics	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2288      	movs	r2, #136	; 0x88
 8005b1e:	4393      	bics	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2248      	movs	r2, #72	; 0x48
 8005b50:	2101      	movs	r1, #1
 8005b52:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	223e      	movs	r2, #62	; 0x3e
 8005b58:	2101      	movs	r1, #1
 8005b5a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	223f      	movs	r2, #63	; 0x3f
 8005b60:	2101      	movs	r1, #1
 8005b62:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2244      	movs	r2, #68	; 0x44
 8005b68:	2101      	movs	r1, #1
 8005b6a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2245      	movs	r2, #69	; 0x45
 8005b70:	2101      	movs	r1, #1
 8005b72:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	223d      	movs	r2, #61	; 0x3d
 8005b78:	2101      	movs	r1, #1
 8005b7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b006      	add	sp, #24
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	fffebff8 	.word	0xfffebff8
 8005b8c:	fffffcfc 	.word	0xfffffcfc
 8005b90:	fffff3f3 	.word	0xfffff3f3
 8005b94:	ffff0f0f 	.word	0xffff0f0f

08005b98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ba2:	200f      	movs	r0, #15
 8005ba4:	183b      	adds	r3, r7, r0
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	213e      	movs	r1, #62	; 0x3e
 8005baa:	5c52      	ldrb	r2, [r2, r1]
 8005bac:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005bae:	230e      	movs	r3, #14
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	213f      	movs	r1, #63	; 0x3f
 8005bb6:	5c52      	ldrb	r2, [r2, r1]
 8005bb8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005bba:	240d      	movs	r4, #13
 8005bbc:	193b      	adds	r3, r7, r4
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	2144      	movs	r1, #68	; 0x44
 8005bc2:	5c52      	ldrb	r2, [r2, r1]
 8005bc4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	2145      	movs	r1, #69	; 0x45
 8005bce:	5c52      	ldrb	r2, [r2, r1]
 8005bd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d112      	bne.n	8005bfe <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd8:	183b      	adds	r3, r7, r0
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d103      	bne.n	8005be8 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005be0:	193b      	adds	r3, r7, r4
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d001      	beq.n	8005bec <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e075      	b.n	8005cd8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	223e      	movs	r2, #62	; 0x3e
 8005bf0:	2102      	movs	r1, #2
 8005bf2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2244      	movs	r2, #68	; 0x44
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	5499      	strb	r1, [r3, r2]
 8005bfc:	e03d      	b.n	8005c7a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d114      	bne.n	8005c2e <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c04:	230e      	movs	r3, #14
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d104      	bne.n	8005c18 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c0e:	230c      	movs	r3, #12
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d001      	beq.n	8005c1c <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e05d      	b.n	8005cd8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	223f      	movs	r2, #63	; 0x3f
 8005c20:	2102      	movs	r1, #2
 8005c22:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2245      	movs	r2, #69	; 0x45
 8005c28:	2102      	movs	r1, #2
 8005c2a:	5499      	strb	r1, [r3, r2]
 8005c2c:	e025      	b.n	8005c7a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c2e:	230f      	movs	r3, #15
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d10e      	bne.n	8005c56 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c38:	230e      	movs	r3, #14
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d109      	bne.n	8005c56 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c42:	230d      	movs	r3, #13
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d001      	beq.n	8005c5a <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e03e      	b.n	8005cd8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	223e      	movs	r2, #62	; 0x3e
 8005c5e:	2102      	movs	r1, #2
 8005c60:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	223f      	movs	r2, #63	; 0x3f
 8005c66:	2102      	movs	r1, #2
 8005c68:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2244      	movs	r2, #68	; 0x44
 8005c6e:	2102      	movs	r1, #2
 8005c70:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2245      	movs	r2, #69	; 0x45
 8005c76:	2102      	movs	r1, #2
 8005c78:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_TIM_Encoder_Start+0xf0>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d008      	beq.n	8005c98 <HAL_TIM_Encoder_Start+0x100>
 8005c86:	e00f      	b.n	8005ca8 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	2100      	movs	r1, #0
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 ff23 	bl	8006adc <TIM_CCxChannelCmd>
      break;
 8005c96:	e016      	b.n	8005cc6 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	2104      	movs	r1, #4
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f000 ff1b 	bl	8006adc <TIM_CCxChannelCmd>
      break;
 8005ca6:	e00e      	b.n	8005cc6 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2201      	movs	r2, #1
 8005cae:	2100      	movs	r1, #0
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f000 ff13 	bl	8006adc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	2104      	movs	r1, #4
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f000 ff0c 	bl	8006adc <TIM_CCxChannelCmd>
      break;
 8005cc4:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b005      	add	sp, #20
 8005cde:	bd90      	pop	{r4, r7, pc}

08005ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d124      	bne.n	8005d40 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d11d      	bne.n	8005d40 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2203      	movs	r2, #3
 8005d0a:	4252      	negs	r2, r2
 8005d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	d004      	beq.n	8005d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 faec 	bl	8006300 <HAL_TIM_IC_CaptureCallback>
 8005d28:	e007      	b.n	8005d3a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 fadf 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 faeb 	bl	8006310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2204      	movs	r2, #4
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d125      	bne.n	8005d9a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2204      	movs	r2, #4
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d11e      	bne.n	8005d9a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2205      	movs	r2, #5
 8005d62:	4252      	negs	r2, r2
 8005d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	23c0      	movs	r3, #192	; 0xc0
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4013      	ands	r3, r2
 8005d78:	d004      	beq.n	8005d84 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f000 fabf 	bl	8006300 <HAL_TIM_IC_CaptureCallback>
 8005d82:	e007      	b.n	8005d94 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f000 fab2 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f000 fabe 	bl	8006310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2208      	movs	r2, #8
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d124      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2208      	movs	r2, #8
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d11d      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2209      	movs	r2, #9
 8005dbc:	4252      	negs	r2, r2
 8005dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	2203      	movs	r2, #3
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f000 fa93 	bl	8006300 <HAL_TIM_IC_CaptureCallback>
 8005dda:	e007      	b.n	8005dec <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	0018      	movs	r0, r3
 8005de0:	f000 fa86 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	0018      	movs	r0, r3
 8005de8:	f000 fa92 	bl	8006310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d125      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	2210      	movs	r2, #16
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d11e      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2211      	movs	r2, #17
 8005e14:	4252      	negs	r2, r2
 8005e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	23c0      	movs	r3, #192	; 0xc0
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4013      	ands	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f000 fa66 	bl	8006300 <HAL_TIM_IC_CaptureCallback>
 8005e34:	e007      	b.n	8005e46 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f000 fa59 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f000 fa65 	bl	8006310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2201      	movs	r2, #1
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d10f      	bne.n	8005e7a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d108      	bne.n	8005e7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	4252      	negs	r2, r2
 8005e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	0018      	movs	r0, r3
 8005e76:	f003 fa87 	bl	8009388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2280      	movs	r2, #128	; 0x80
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b80      	cmp	r3, #128	; 0x80
 8005e86:	d10f      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2280      	movs	r2, #128	; 0x80
 8005e90:	4013      	ands	r3, r2
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d108      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2281      	movs	r2, #129	; 0x81
 8005e9c:	4252      	negs	r2, r2
 8005e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f000 ff54 	bl	8006d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	2380      	movs	r3, #128	; 0x80
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	2380      	movs	r3, #128	; 0x80
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d10e      	bne.n	8005eda <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	2280      	movs	r2, #128	; 0x80
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	2b80      	cmp	r3, #128	; 0x80
 8005ec8:	d107      	bne.n	8005eda <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <HAL_TIM_IRQHandler+0x260>)
 8005ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f000 ff43 	bl	8006d60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2240      	movs	r2, #64	; 0x40
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d10f      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	2240      	movs	r2, #64	; 0x40
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d108      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2241      	movs	r2, #65	; 0x41
 8005efc:	4252      	negs	r2, r2
 8005efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 fa0c 	bl	8006320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d10f      	bne.n	8005f36 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d108      	bne.n	8005f36 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2221      	movs	r2, #33	; 0x21
 8005f2a:	4252      	negs	r2, r2
 8005f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	0018      	movs	r0, r3
 8005f32:	f000 ff05 	bl	8006d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b002      	add	sp, #8
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	fffffeff 	.word	0xfffffeff

08005f44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f50:	2317      	movs	r3, #23
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	223c      	movs	r2, #60	; 0x3c
 8005f5c:	5c9b      	ldrb	r3, [r3, r2]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e0e5      	b.n	8006132 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	223c      	movs	r2, #60	; 0x3c
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b14      	cmp	r3, #20
 8005f72:	d900      	bls.n	8005f76 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005f74:	e0d1      	b.n	800611a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	009a      	lsls	r2, r3, #2
 8005f7a:	4b70      	ldr	r3, [pc, #448]	; (800613c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005f7c:	18d3      	adds	r3, r2, r3
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	0011      	movs	r1, r2
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f000 fa46 	bl	800641c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2108      	movs	r1, #8
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2104      	movs	r1, #4
 8005fac:	438a      	bics	r2, r1
 8005fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6999      	ldr	r1, [r3, #24]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	619a      	str	r2, [r3, #24]
      break;
 8005fc2:	e0af      	b.n	8006124 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	0011      	movs	r1, r2
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f000 faaf 	bl	8006530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	699a      	ldr	r2, [r3, #24]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2180      	movs	r1, #128	; 0x80
 8005fde:	0109      	lsls	r1, r1, #4
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4954      	ldr	r1, [pc, #336]	; (8006140 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ff0:	400a      	ands	r2, r1
 8005ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6999      	ldr	r1, [r3, #24]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	021a      	lsls	r2, r3, #8
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	619a      	str	r2, [r3, #24]
      break;
 8006008:	e08c      	b.n	8006124 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	0011      	movs	r1, r2
 8006012:	0018      	movs	r0, r3
 8006014:	f000 fb10 	bl	8006638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69da      	ldr	r2, [r3, #28]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2108      	movs	r1, #8
 8006024:	430a      	orrs	r2, r1
 8006026:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69da      	ldr	r2, [r3, #28]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2104      	movs	r1, #4
 8006034:	438a      	bics	r2, r1
 8006036:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69d9      	ldr	r1, [r3, #28]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	61da      	str	r2, [r3, #28]
      break;
 800604a:	e06b      	b.n	8006124 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	0011      	movs	r1, r2
 8006054:	0018      	movs	r0, r3
 8006056:	f000 fb77 	bl	8006748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2180      	movs	r1, #128	; 0x80
 8006066:	0109      	lsls	r1, r1, #4
 8006068:	430a      	orrs	r2, r1
 800606a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4932      	ldr	r1, [pc, #200]	; (8006140 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006078:	400a      	ands	r2, r1
 800607a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69d9      	ldr	r1, [r3, #28]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	021a      	lsls	r2, r3, #8
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	61da      	str	r2, [r3, #28]
      break;
 8006090:	e048      	b.n	8006124 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	0011      	movs	r1, r2
 800609a:	0018      	movs	r0, r3
 800609c:	f000 fbbe 	bl	800681c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2108      	movs	r1, #8
 80060ac:	430a      	orrs	r2, r1
 80060ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2104      	movs	r1, #4
 80060bc:	438a      	bics	r2, r1
 80060be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060d2:	e027      	b.n	8006124 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	0011      	movs	r1, r2
 80060dc:	0018      	movs	r0, r3
 80060de:	f000 fbfd 	bl	80068dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2180      	movs	r1, #128	; 0x80
 80060ee:	0109      	lsls	r1, r1, #4
 80060f0:	430a      	orrs	r2, r1
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4910      	ldr	r1, [pc, #64]	; (8006140 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006100:	400a      	ands	r2, r1
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	021a      	lsls	r2, r3, #8
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006118:	e004      	b.n	8006124 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800611a:	2317      	movs	r3, #23
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	2201      	movs	r2, #1
 8006120:	701a      	strb	r2, [r3, #0]
      break;
 8006122:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	223c      	movs	r2, #60	; 0x3c
 8006128:	2100      	movs	r1, #0
 800612a:	5499      	strb	r1, [r3, r2]

  return status;
 800612c:	2317      	movs	r3, #23
 800612e:	18fb      	adds	r3, r7, r3
 8006130:	781b      	ldrb	r3, [r3, #0]
}
 8006132:	0018      	movs	r0, r3
 8006134:	46bd      	mov	sp, r7
 8006136:	b006      	add	sp, #24
 8006138:	bd80      	pop	{r7, pc}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	0800e344 	.word	0x0800e344
 8006140:	fffffbff 	.word	0xfffffbff

08006144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800614e:	230f      	movs	r3, #15
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	223c      	movs	r2, #60	; 0x3c
 800615a:	5c9b      	ldrb	r3, [r3, r2]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_TIM_ConfigClockSource+0x20>
 8006160:	2302      	movs	r3, #2
 8006162:	e0bc      	b.n	80062de <HAL_TIM_ConfigClockSource+0x19a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	223c      	movs	r2, #60	; 0x3c
 8006168:	2101      	movs	r1, #1
 800616a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	223d      	movs	r2, #61	; 0x3d
 8006170:	2102      	movs	r1, #2
 8006172:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4a5a      	ldr	r2, [pc, #360]	; (80062e8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006180:	4013      	ands	r3, r2
 8006182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4a59      	ldr	r2, [pc, #356]	; (80062ec <HAL_TIM_ConfigClockSource+0x1a8>)
 8006188:	4013      	ands	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2280      	movs	r2, #128	; 0x80
 800619a:	0192      	lsls	r2, r2, #6
 800619c:	4293      	cmp	r3, r2
 800619e:	d040      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0xde>
 80061a0:	2280      	movs	r2, #128	; 0x80
 80061a2:	0192      	lsls	r2, r2, #6
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d900      	bls.n	80061aa <HAL_TIM_ConfigClockSource+0x66>
 80061a8:	e088      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x178>
 80061aa:	2280      	movs	r2, #128	; 0x80
 80061ac:	0152      	lsls	r2, r2, #5
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d100      	bne.n	80061b4 <HAL_TIM_ConfigClockSource+0x70>
 80061b2:	e088      	b.n	80062c6 <HAL_TIM_ConfigClockSource+0x182>
 80061b4:	2280      	movs	r2, #128	; 0x80
 80061b6:	0152      	lsls	r2, r2, #5
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d900      	bls.n	80061be <HAL_TIM_ConfigClockSource+0x7a>
 80061bc:	e07e      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x178>
 80061be:	2b70      	cmp	r3, #112	; 0x70
 80061c0:	d018      	beq.n	80061f4 <HAL_TIM_ConfigClockSource+0xb0>
 80061c2:	d900      	bls.n	80061c6 <HAL_TIM_ConfigClockSource+0x82>
 80061c4:	e07a      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x178>
 80061c6:	2b60      	cmp	r3, #96	; 0x60
 80061c8:	d04f      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x126>
 80061ca:	d900      	bls.n	80061ce <HAL_TIM_ConfigClockSource+0x8a>
 80061cc:	e076      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x178>
 80061ce:	2b50      	cmp	r3, #80	; 0x50
 80061d0:	d03b      	beq.n	800624a <HAL_TIM_ConfigClockSource+0x106>
 80061d2:	d900      	bls.n	80061d6 <HAL_TIM_ConfigClockSource+0x92>
 80061d4:	e072      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x178>
 80061d6:	2b40      	cmp	r3, #64	; 0x40
 80061d8:	d057      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x146>
 80061da:	d900      	bls.n	80061de <HAL_TIM_ConfigClockSource+0x9a>
 80061dc:	e06e      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x178>
 80061de:	2b30      	cmp	r3, #48	; 0x30
 80061e0:	d063      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x166>
 80061e2:	d86b      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x178>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d060      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x166>
 80061e8:	d868      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x178>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d05d      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x166>
 80061ee:	2b10      	cmp	r3, #16
 80061f0:	d05b      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x166>
 80061f2:	e063      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006204:	f000 fc4a 	bl	8006a9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2277      	movs	r2, #119	; 0x77
 8006214:	4313      	orrs	r3, r2
 8006216:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	609a      	str	r2, [r3, #8]
      break;
 8006220:	e052      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006232:	f000 fc33 	bl	8006a9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2180      	movs	r1, #128	; 0x80
 8006242:	01c9      	lsls	r1, r1, #7
 8006244:	430a      	orrs	r2, r1
 8006246:	609a      	str	r2, [r3, #8]
      break;
 8006248:	e03e      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006256:	001a      	movs	r2, r3
 8006258:	f000 fba4 	bl	80069a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2150      	movs	r1, #80	; 0x50
 8006262:	0018      	movs	r0, r3
 8006264:	f000 fbfe 	bl	8006a64 <TIM_ITRx_SetConfig>
      break;
 8006268:	e02e      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006276:	001a      	movs	r2, r3
 8006278:	f000 fbc2 	bl	8006a00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2160      	movs	r1, #96	; 0x60
 8006282:	0018      	movs	r0, r3
 8006284:	f000 fbee 	bl	8006a64 <TIM_ITRx_SetConfig>
      break;
 8006288:	e01e      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006296:	001a      	movs	r2, r3
 8006298:	f000 fb84 	bl	80069a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2140      	movs	r1, #64	; 0x40
 80062a2:	0018      	movs	r0, r3
 80062a4:	f000 fbde 	bl	8006a64 <TIM_ITRx_SetConfig>
      break;
 80062a8:	e00e      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	0019      	movs	r1, r3
 80062b4:	0010      	movs	r0, r2
 80062b6:	f000 fbd5 	bl	8006a64 <TIM_ITRx_SetConfig>
      break;
 80062ba:	e005      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80062bc:	230f      	movs	r3, #15
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	2201      	movs	r2, #1
 80062c2:	701a      	strb	r2, [r3, #0]
      break;
 80062c4:	e000      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80062c6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	223d      	movs	r2, #61	; 0x3d
 80062cc:	2101      	movs	r1, #1
 80062ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	223c      	movs	r2, #60	; 0x3c
 80062d4:	2100      	movs	r1, #0
 80062d6:	5499      	strb	r1, [r3, r2]

  return status;
 80062d8:	230f      	movs	r3, #15
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	781b      	ldrb	r3, [r3, #0]
}
 80062de:	0018      	movs	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b004      	add	sp, #16
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	ffceff88 	.word	0xffceff88
 80062ec:	ffff00ff 	.word	0xffff00ff

080062f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b002      	add	sp, #8
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b002      	add	sp, #8
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006318:	46c0      	nop			; (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	b002      	add	sp, #8
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006328:	46c0      	nop			; (mov r8, r8)
 800632a:	46bd      	mov	sp, r7
 800632c:	b002      	add	sp, #8
 800632e:	bd80      	pop	{r7, pc}

08006330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a2f      	ldr	r2, [pc, #188]	; (8006400 <TIM_Base_SetConfig+0xd0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d003      	beq.n	8006350 <TIM_Base_SetConfig+0x20>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a2e      	ldr	r2, [pc, #184]	; (8006404 <TIM_Base_SetConfig+0xd4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d108      	bne.n	8006362 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2270      	movs	r2, #112	; 0x70
 8006354:	4393      	bics	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a26      	ldr	r2, [pc, #152]	; (8006400 <TIM_Base_SetConfig+0xd0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d013      	beq.n	8006392 <TIM_Base_SetConfig+0x62>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a25      	ldr	r2, [pc, #148]	; (8006404 <TIM_Base_SetConfig+0xd4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00f      	beq.n	8006392 <TIM_Base_SetConfig+0x62>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a24      	ldr	r2, [pc, #144]	; (8006408 <TIM_Base_SetConfig+0xd8>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00b      	beq.n	8006392 <TIM_Base_SetConfig+0x62>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a23      	ldr	r2, [pc, #140]	; (800640c <TIM_Base_SetConfig+0xdc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d007      	beq.n	8006392 <TIM_Base_SetConfig+0x62>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a22      	ldr	r2, [pc, #136]	; (8006410 <TIM_Base_SetConfig+0xe0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_Base_SetConfig+0x62>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a21      	ldr	r2, [pc, #132]	; (8006414 <TIM_Base_SetConfig+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d108      	bne.n	80063a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a20      	ldr	r2, [pc, #128]	; (8006418 <TIM_Base_SetConfig+0xe8>)
 8006396:	4013      	ands	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	4393      	bics	r3, r2
 80063aa:	001a      	movs	r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a0c      	ldr	r2, [pc, #48]	; (8006400 <TIM_Base_SetConfig+0xd0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00b      	beq.n	80063ea <TIM_Base_SetConfig+0xba>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a0d      	ldr	r2, [pc, #52]	; (800640c <TIM_Base_SetConfig+0xdc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d007      	beq.n	80063ea <TIM_Base_SetConfig+0xba>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a0c      	ldr	r2, [pc, #48]	; (8006410 <TIM_Base_SetConfig+0xe0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_Base_SetConfig+0xba>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a0b      	ldr	r2, [pc, #44]	; (8006414 <TIM_Base_SetConfig+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d103      	bne.n	80063f2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	615a      	str	r2, [r3, #20]
}
 80063f8:	46c0      	nop			; (mov r8, r8)
 80063fa:	46bd      	mov	sp, r7
 80063fc:	b004      	add	sp, #16
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40000400 	.word	0x40000400
 8006408:	40002000 	.word	0x40002000
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800
 8006418:	fffffcff 	.word	0xfffffcff

0800641c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	2201      	movs	r2, #1
 800642c:	4393      	bics	r3, r2
 800642e:	001a      	movs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4a32      	ldr	r2, [pc, #200]	; (8006514 <TIM_OC1_SetConfig+0xf8>)
 800644a:	4013      	ands	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2203      	movs	r2, #3
 8006452:	4393      	bics	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2202      	movs	r2, #2
 8006464:	4393      	bics	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a28      	ldr	r2, [pc, #160]	; (8006518 <TIM_OC1_SetConfig+0xfc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00b      	beq.n	8006492 <TIM_OC1_SetConfig+0x76>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a27      	ldr	r2, [pc, #156]	; (800651c <TIM_OC1_SetConfig+0x100>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <TIM_OC1_SetConfig+0x76>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a26      	ldr	r2, [pc, #152]	; (8006520 <TIM_OC1_SetConfig+0x104>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_OC1_SetConfig+0x76>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a25      	ldr	r2, [pc, #148]	; (8006524 <TIM_OC1_SetConfig+0x108>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d10c      	bne.n	80064ac <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2208      	movs	r2, #8
 8006496:	4393      	bics	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2204      	movs	r2, #4
 80064a8:	4393      	bics	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a1a      	ldr	r2, [pc, #104]	; (8006518 <TIM_OC1_SetConfig+0xfc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00b      	beq.n	80064cc <TIM_OC1_SetConfig+0xb0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a19      	ldr	r2, [pc, #100]	; (800651c <TIM_OC1_SetConfig+0x100>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d007      	beq.n	80064cc <TIM_OC1_SetConfig+0xb0>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a18      	ldr	r2, [pc, #96]	; (8006520 <TIM_OC1_SetConfig+0x104>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC1_SetConfig+0xb0>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a17      	ldr	r2, [pc, #92]	; (8006524 <TIM_OC1_SetConfig+0x108>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d111      	bne.n	80064f0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	4a16      	ldr	r2, [pc, #88]	; (8006528 <TIM_OC1_SetConfig+0x10c>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4a15      	ldr	r2, [pc, #84]	; (800652c <TIM_OC1_SetConfig+0x110>)
 80064d8:	4013      	ands	r3, r2
 80064da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	46bd      	mov	sp, r7
 800650e:	b006      	add	sp, #24
 8006510:	bd80      	pop	{r7, pc}
 8006512:	46c0      	nop			; (mov r8, r8)
 8006514:	fffeff8f 	.word	0xfffeff8f
 8006518:	40012c00 	.word	0x40012c00
 800651c:	40014000 	.word	0x40014000
 8006520:	40014400 	.word	0x40014400
 8006524:	40014800 	.word	0x40014800
 8006528:	fffffeff 	.word	0xfffffeff
 800652c:	fffffdff 	.word	0xfffffdff

08006530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	2210      	movs	r2, #16
 8006540:	4393      	bics	r3, r2
 8006542:	001a      	movs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a2e      	ldr	r2, [pc, #184]	; (8006618 <TIM_OC2_SetConfig+0xe8>)
 800655e:	4013      	ands	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4a2d      	ldr	r2, [pc, #180]	; (800661c <TIM_OC2_SetConfig+0xec>)
 8006566:	4013      	ands	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	021b      	lsls	r3, r3, #8
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2220      	movs	r2, #32
 800657a:	4393      	bics	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a24      	ldr	r2, [pc, #144]	; (8006620 <TIM_OC2_SetConfig+0xf0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d10d      	bne.n	80065ae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2280      	movs	r2, #128	; 0x80
 8006596:	4393      	bics	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2240      	movs	r2, #64	; 0x40
 80065aa:	4393      	bics	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a1b      	ldr	r2, [pc, #108]	; (8006620 <TIM_OC2_SetConfig+0xf0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_OC2_SetConfig+0x9e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a1a      	ldr	r2, [pc, #104]	; (8006624 <TIM_OC2_SetConfig+0xf4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <TIM_OC2_SetConfig+0x9e>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a19      	ldr	r2, [pc, #100]	; (8006628 <TIM_OC2_SetConfig+0xf8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_OC2_SetConfig+0x9e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a18      	ldr	r2, [pc, #96]	; (800662c <TIM_OC2_SetConfig+0xfc>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d113      	bne.n	80065f6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	4a17      	ldr	r2, [pc, #92]	; (8006630 <TIM_OC2_SetConfig+0x100>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4a16      	ldr	r2, [pc, #88]	; (8006634 <TIM_OC2_SetConfig+0x104>)
 80065da:	4013      	ands	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	621a      	str	r2, [r3, #32]
}
 8006610:	46c0      	nop			; (mov r8, r8)
 8006612:	46bd      	mov	sp, r7
 8006614:	b006      	add	sp, #24
 8006616:	bd80      	pop	{r7, pc}
 8006618:	feff8fff 	.word	0xfeff8fff
 800661c:	fffffcff 	.word	0xfffffcff
 8006620:	40012c00 	.word	0x40012c00
 8006624:	40014000 	.word	0x40014000
 8006628:	40014400 	.word	0x40014400
 800662c:	40014800 	.word	0x40014800
 8006630:	fffffbff 	.word	0xfffffbff
 8006634:	fffff7ff 	.word	0xfffff7ff

08006638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	4a35      	ldr	r2, [pc, #212]	; (800671c <TIM_OC3_SetConfig+0xe4>)
 8006648:	401a      	ands	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4a2f      	ldr	r2, [pc, #188]	; (8006720 <TIM_OC3_SetConfig+0xe8>)
 8006664:	4013      	ands	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2203      	movs	r2, #3
 800666c:	4393      	bics	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	4a29      	ldr	r2, [pc, #164]	; (8006724 <TIM_OC3_SetConfig+0xec>)
 800667e:	4013      	ands	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a25      	ldr	r2, [pc, #148]	; (8006728 <TIM_OC3_SetConfig+0xf0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d10d      	bne.n	80066b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	4a24      	ldr	r2, [pc, #144]	; (800672c <TIM_OC3_SetConfig+0xf4>)
 800669a:	4013      	ands	r3, r2
 800669c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	4a20      	ldr	r2, [pc, #128]	; (8006730 <TIM_OC3_SetConfig+0xf8>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <TIM_OC3_SetConfig+0xf0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00b      	beq.n	80066d2 <TIM_OC3_SetConfig+0x9a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1d      	ldr	r2, [pc, #116]	; (8006734 <TIM_OC3_SetConfig+0xfc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d007      	beq.n	80066d2 <TIM_OC3_SetConfig+0x9a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a1c      	ldr	r2, [pc, #112]	; (8006738 <TIM_OC3_SetConfig+0x100>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_OC3_SetConfig+0x9a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a1b      	ldr	r2, [pc, #108]	; (800673c <TIM_OC3_SetConfig+0x104>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d113      	bne.n	80066fa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4a1a      	ldr	r2, [pc, #104]	; (8006740 <TIM_OC3_SetConfig+0x108>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	4a19      	ldr	r2, [pc, #100]	; (8006744 <TIM_OC3_SetConfig+0x10c>)
 80066de:	4013      	ands	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	621a      	str	r2, [r3, #32]
}
 8006714:	46c0      	nop			; (mov r8, r8)
 8006716:	46bd      	mov	sp, r7
 8006718:	b006      	add	sp, #24
 800671a:	bd80      	pop	{r7, pc}
 800671c:	fffffeff 	.word	0xfffffeff
 8006720:	fffeff8f 	.word	0xfffeff8f
 8006724:	fffffdff 	.word	0xfffffdff
 8006728:	40012c00 	.word	0x40012c00
 800672c:	fffff7ff 	.word	0xfffff7ff
 8006730:	fffffbff 	.word	0xfffffbff
 8006734:	40014000 	.word	0x40014000
 8006738:	40014400 	.word	0x40014400
 800673c:	40014800 	.word	0x40014800
 8006740:	ffffefff 	.word	0xffffefff
 8006744:	ffffdfff 	.word	0xffffdfff

08006748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <TIM_OC4_SetConfig+0xb0>)
 8006758:	401a      	ands	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a22      	ldr	r2, [pc, #136]	; (80067fc <TIM_OC4_SetConfig+0xb4>)
 8006774:	4013      	ands	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a21      	ldr	r2, [pc, #132]	; (8006800 <TIM_OC4_SetConfig+0xb8>)
 800677c:	4013      	ands	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <TIM_OC4_SetConfig+0xbc>)
 8006790:	4013      	ands	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	031b      	lsls	r3, r3, #12
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a19      	ldr	r2, [pc, #100]	; (8006808 <TIM_OC4_SetConfig+0xc0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00b      	beq.n	80067c0 <TIM_OC4_SetConfig+0x78>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a18      	ldr	r2, [pc, #96]	; (800680c <TIM_OC4_SetConfig+0xc4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d007      	beq.n	80067c0 <TIM_OC4_SetConfig+0x78>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a17      	ldr	r2, [pc, #92]	; (8006810 <TIM_OC4_SetConfig+0xc8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_OC4_SetConfig+0x78>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a16      	ldr	r2, [pc, #88]	; (8006814 <TIM_OC4_SetConfig+0xcc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d109      	bne.n	80067d4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	4a15      	ldr	r2, [pc, #84]	; (8006818 <TIM_OC4_SetConfig+0xd0>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	019b      	lsls	r3, r3, #6
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	46bd      	mov	sp, r7
 80067f2:	b006      	add	sp, #24
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	ffffefff 	.word	0xffffefff
 80067fc:	feff8fff 	.word	0xfeff8fff
 8006800:	fffffcff 	.word	0xfffffcff
 8006804:	ffffdfff 	.word	0xffffdfff
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400
 8006814:	40014800 	.word	0x40014800
 8006818:	ffffbfff 	.word	0xffffbfff

0800681c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	4a25      	ldr	r2, [pc, #148]	; (80068c0 <TIM_OC5_SetConfig+0xa4>)
 800682c:	401a      	ands	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a1f      	ldr	r2, [pc, #124]	; (80068c4 <TIM_OC5_SetConfig+0xa8>)
 8006848:	4013      	ands	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <TIM_OC5_SetConfig+0xac>)
 800685a:	4013      	ands	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	041b      	lsls	r3, r3, #16
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a17      	ldr	r2, [pc, #92]	; (80068cc <TIM_OC5_SetConfig+0xb0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00b      	beq.n	800688a <TIM_OC5_SetConfig+0x6e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a16      	ldr	r2, [pc, #88]	; (80068d0 <TIM_OC5_SetConfig+0xb4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d007      	beq.n	800688a <TIM_OC5_SetConfig+0x6e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a15      	ldr	r2, [pc, #84]	; (80068d4 <TIM_OC5_SetConfig+0xb8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d003      	beq.n	800688a <TIM_OC5_SetConfig+0x6e>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a14      	ldr	r2, [pc, #80]	; (80068d8 <TIM_OC5_SetConfig+0xbc>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d109      	bne.n	800689e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <TIM_OC5_SetConfig+0xa4>)
 800688e:	4013      	ands	r3, r2
 8006890:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	621a      	str	r2, [r3, #32]
}
 80068b8:	46c0      	nop			; (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b006      	add	sp, #24
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	fffeffff 	.word	0xfffeffff
 80068c4:	fffeff8f 	.word	0xfffeff8f
 80068c8:	fffdffff 	.word	0xfffdffff
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40014400 	.word	0x40014400
 80068d8:	40014800 	.word	0x40014800

080068dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	4a26      	ldr	r2, [pc, #152]	; (8006984 <TIM_OC6_SetConfig+0xa8>)
 80068ec:	401a      	ands	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a20      	ldr	r2, [pc, #128]	; (8006988 <TIM_OC6_SetConfig+0xac>)
 8006908:	4013      	ands	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4a1c      	ldr	r2, [pc, #112]	; (800698c <TIM_OC6_SetConfig+0xb0>)
 800691c:	4013      	ands	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	051b      	lsls	r3, r3, #20
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a18      	ldr	r2, [pc, #96]	; (8006990 <TIM_OC6_SetConfig+0xb4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00b      	beq.n	800694c <TIM_OC6_SetConfig+0x70>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a17      	ldr	r2, [pc, #92]	; (8006994 <TIM_OC6_SetConfig+0xb8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d007      	beq.n	800694c <TIM_OC6_SetConfig+0x70>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a16      	ldr	r2, [pc, #88]	; (8006998 <TIM_OC6_SetConfig+0xbc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_OC6_SetConfig+0x70>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a15      	ldr	r2, [pc, #84]	; (800699c <TIM_OC6_SetConfig+0xc0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d109      	bne.n	8006960 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	4a14      	ldr	r2, [pc, #80]	; (80069a0 <TIM_OC6_SetConfig+0xc4>)
 8006950:	4013      	ands	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	029b      	lsls	r3, r3, #10
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	621a      	str	r2, [r3, #32]
}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	46bd      	mov	sp, r7
 800697e:	b006      	add	sp, #24
 8006980:	bd80      	pop	{r7, pc}
 8006982:	46c0      	nop			; (mov r8, r8)
 8006984:	ffefffff 	.word	0xffefffff
 8006988:	feff8fff 	.word	0xfeff8fff
 800698c:	ffdfffff 	.word	0xffdfffff
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800
 80069a0:	fffbffff 	.word	0xfffbffff

080069a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	2201      	movs	r2, #1
 80069bc:	4393      	bics	r3, r2
 80069be:	001a      	movs	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	22f0      	movs	r2, #240	; 0xf0
 80069ce:	4393      	bics	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	220a      	movs	r2, #10
 80069e0:	4393      	bics	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	621a      	str	r2, [r3, #32]
}
 80069f8:	46c0      	nop			; (mov r8, r8)
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b006      	add	sp, #24
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	2210      	movs	r2, #16
 8006a12:	4393      	bics	r3, r2
 8006a14:	001a      	movs	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	4a0d      	ldr	r2, [pc, #52]	; (8006a60 <TIM_TI2_ConfigInputStage+0x60>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	031b      	lsls	r3, r3, #12
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	22a0      	movs	r2, #160	; 0xa0
 8006a3c:	4393      	bics	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	621a      	str	r2, [r3, #32]
}
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	b006      	add	sp, #24
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	ffff0fff 	.word	0xffff0fff

08006a64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a08      	ldr	r2, [pc, #32]	; (8006a98 <TIM_ITRx_SetConfig+0x34>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	2207      	movs	r2, #7
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	609a      	str	r2, [r3, #8]
}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b004      	add	sp, #16
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	ffcfff8f 	.word	0xffcfff8f

08006a9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	4a09      	ldr	r2, [pc, #36]	; (8006ad8 <TIM_ETR_SetConfig+0x3c>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	021a      	lsls	r2, r3, #8
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	609a      	str	r2, [r3, #8]
}
 8006ad0:	46c0      	nop			; (mov r8, r8)
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b006      	add	sp, #24
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	ffff00ff 	.word	0xffff00ff

08006adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	221f      	movs	r2, #31
 8006aec:	4013      	ands	r3, r2
 8006aee:	2201      	movs	r2, #1
 8006af0:	409a      	lsls	r2, r3
 8006af2:	0013      	movs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	43d2      	mvns	r2, r2
 8006afe:	401a      	ands	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	211f      	movs	r1, #31
 8006b0c:	400b      	ands	r3, r1
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	4099      	lsls	r1, r3
 8006b12:	000b      	movs	r3, r1
 8006b14:	431a      	orrs	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	621a      	str	r2, [r3, #32]
}
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	b006      	add	sp, #24
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	223c      	movs	r2, #60	; 0x3c
 8006b32:	5c9b      	ldrb	r3, [r3, r2]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e04f      	b.n	8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	223c      	movs	r2, #60	; 0x3c
 8006b40:	2101      	movs	r1, #1
 8006b42:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	223d      	movs	r2, #61	; 0x3d
 8006b48:	2102      	movs	r1, #2
 8006b4a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a20      	ldr	r2, [pc, #128]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a1f      	ldr	r2, [pc, #124]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2270      	movs	r2, #112	; 0x70
 8006b7c:	4393      	bics	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a13      	ldr	r2, [pc, #76]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a12      	ldr	r2, [pc, #72]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a11      	ldr	r2, [pc, #68]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d10c      	bne.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2280      	movs	r2, #128	; 0x80
 8006bb4:	4393      	bics	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	223d      	movs	r2, #61	; 0x3d
 8006bce:	2101      	movs	r1, #1
 8006bd0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	223c      	movs	r2, #60	; 0x3c
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	0018      	movs	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b004      	add	sp, #16
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40012c00 	.word	0x40012c00
 8006be8:	ff0fffff 	.word	0xff0fffff
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40014000 	.word	0x40014000

08006bf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	223c      	movs	r2, #60	; 0x3c
 8006c06:	5c9b      	ldrb	r3, [r3, r2]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e079      	b.n	8006d04 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	223c      	movs	r2, #60	; 0x3c
 8006c14:	2101      	movs	r1, #1
 8006c16:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	22ff      	movs	r2, #255	; 0xff
 8006c1c:	4393      	bics	r3, r2
 8006c1e:	001a      	movs	r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4a38      	ldr	r2, [pc, #224]	; (8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006c2c:	401a      	ands	r2, r3
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4a35      	ldr	r2, [pc, #212]	; (8006d10 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006c3a:	401a      	ands	r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4a33      	ldr	r2, [pc, #204]	; (8006d14 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006c48:	401a      	ands	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4a30      	ldr	r2, [pc, #192]	; (8006d18 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006c56:	401a      	ands	r2, r3
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a2e      	ldr	r2, [pc, #184]	; (8006d1c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006c64:	401a      	ands	r2, r3
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a2b      	ldr	r2, [pc, #172]	; (8006d20 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006c72:	401a      	ands	r2, r3
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4a29      	ldr	r2, [pc, #164]	; (8006d24 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006c80:	401a      	ands	r2, r3
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	041b      	lsls	r3, r3, #16
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a25      	ldr	r2, [pc, #148]	; (8006d28 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d106      	bne.n	8006ca4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006c9a:	401a      	ands	r2, r3
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1f      	ldr	r2, [pc, #124]	; (8006d28 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d121      	bne.n	8006cf2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006cb2:	401a      	ands	r2, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	051b      	lsls	r3, r3, #20
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4a1c      	ldr	r2, [pc, #112]	; (8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a1a      	ldr	r2, [pc, #104]	; (8006d38 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006cd0:	401a      	ands	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a12      	ldr	r2, [pc, #72]	; (8006d28 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d106      	bne.n	8006cf2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006ce8:	401a      	ands	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	223c      	movs	r2, #60	; 0x3c
 8006cfe:	2100      	movs	r1, #0
 8006d00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	0018      	movs	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b004      	add	sp, #16
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	fffffcff 	.word	0xfffffcff
 8006d10:	fffffbff 	.word	0xfffffbff
 8006d14:	fffff7ff 	.word	0xfffff7ff
 8006d18:	ffffefff 	.word	0xffffefff
 8006d1c:	ffffdfff 	.word	0xffffdfff
 8006d20:	ffffbfff 	.word	0xffffbfff
 8006d24:	fff0ffff 	.word	0xfff0ffff
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	efffffff 	.word	0xefffffff
 8006d30:	ff0fffff 	.word	0xff0fffff
 8006d34:	feffffff 	.word	0xfeffffff
 8006d38:	fdffffff 	.word	0xfdffffff
 8006d3c:	dfffffff 	.word	0xdfffffff

08006d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d48:	46c0      	nop			; (mov r8, r8)
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b002      	add	sp, #8
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d58:	46c0      	nop			; (mov r8, r8)
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b002      	add	sp, #8
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d68:	46c0      	nop			; (mov r8, r8)
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b002      	add	sp, #8
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e046      	b.n	8006e10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2288      	movs	r2, #136	; 0x88
 8006d86:	589b      	ldr	r3, [r3, r2]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d107      	bne.n	8006d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2284      	movs	r2, #132	; 0x84
 8006d90:	2100      	movs	r1, #0
 8006d92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	0018      	movs	r0, r3
 8006d98:	f7fd f940 	bl	800401c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2288      	movs	r2, #136	; 0x88
 8006da0:	2124      	movs	r1, #36	; 0x24
 8006da2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2101      	movs	r1, #1
 8006db0:	438a      	bics	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	0018      	movs	r0, r3
 8006db8:	f000 fc66 	bl	8007688 <UART_SetConfig>
 8006dbc:	0003      	movs	r3, r0
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e024      	b.n	8006e10 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f000 fdfd 	bl	80079d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	490d      	ldr	r1, [pc, #52]	; (8006e18 <HAL_UART_Init+0xa8>)
 8006de2:	400a      	ands	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	212a      	movs	r1, #42	; 0x2a
 8006df2:	438a      	bics	r2, r1
 8006df4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2101      	movs	r1, #1
 8006e02:	430a      	orrs	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	0018      	movs	r0, r3
 8006e0a:	f000 fe95 	bl	8007b38 <UART_CheckIdleState>
 8006e0e:	0003      	movs	r3, r0
}
 8006e10:	0018      	movs	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b002      	add	sp, #8
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	ffffb7ff 	.word	0xffffb7ff

08006e1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	; 0x28
 8006e20:	af02      	add	r7, sp, #8
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	1dbb      	adds	r3, r7, #6
 8006e2a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2288      	movs	r2, #136	; 0x88
 8006e30:	589b      	ldr	r3, [r3, r2]
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d000      	beq.n	8006e38 <HAL_UART_Transmit+0x1c>
 8006e36:	e088      	b.n	8006f4a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_UART_Transmit+0x2a>
 8006e3e:	1dbb      	adds	r3, r7, #6
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e080      	b.n	8006f4c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	2380      	movs	r3, #128	; 0x80
 8006e50:	015b      	lsls	r3, r3, #5
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d109      	bne.n	8006e6a <HAL_UART_Transmit+0x4e>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d105      	bne.n	8006e6a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2201      	movs	r2, #1
 8006e62:	4013      	ands	r3, r2
 8006e64:	d001      	beq.n	8006e6a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e070      	b.n	8006f4c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2290      	movs	r2, #144	; 0x90
 8006e6e:	2100      	movs	r1, #0
 8006e70:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2288      	movs	r2, #136	; 0x88
 8006e76:	2121      	movs	r1, #33	; 0x21
 8006e78:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e7a:	f7fd f9df 	bl	800423c <HAL_GetTick>
 8006e7e:	0003      	movs	r3, r0
 8006e80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1dba      	adds	r2, r7, #6
 8006e86:	2154      	movs	r1, #84	; 0x54
 8006e88:	8812      	ldrh	r2, [r2, #0]
 8006e8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	1dba      	adds	r2, r7, #6
 8006e90:	2156      	movs	r1, #86	; 0x56
 8006e92:	8812      	ldrh	r2, [r2, #0]
 8006e94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	2380      	movs	r3, #128	; 0x80
 8006e9c:	015b      	lsls	r3, r3, #5
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d108      	bne.n	8006eb4 <HAL_UART_Transmit+0x98>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d104      	bne.n	8006eb4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	e003      	b.n	8006ebc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ebc:	e02c      	b.n	8006f18 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	0013      	movs	r3, r2
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2180      	movs	r1, #128	; 0x80
 8006ecc:	f000 fe82 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8006ed0:	1e03      	subs	r3, r0, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e039      	b.n	8006f4c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10b      	bne.n	8006ef6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	001a      	movs	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	05d2      	lsls	r2, r2, #23
 8006eea:	0dd2      	lsrs	r2, r2, #23
 8006eec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	e007      	b.n	8006f06 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	3301      	adds	r3, #1
 8006f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2256      	movs	r2, #86	; 0x56
 8006f0a:	5a9b      	ldrh	r3, [r3, r2]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b299      	uxth	r1, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2256      	movs	r2, #86	; 0x56
 8006f16:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2256      	movs	r2, #86	; 0x56
 8006f1c:	5a9b      	ldrh	r3, [r3, r2]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1cc      	bne.n	8006ebe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	0013      	movs	r3, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2140      	movs	r1, #64	; 0x40
 8006f32:	f000 fe4f 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8006f36:	1e03      	subs	r3, r0, #0
 8006f38:	d001      	beq.n	8006f3e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e006      	b.n	8006f4c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2288      	movs	r2, #136	; 0x88
 8006f42:	2120      	movs	r1, #32
 8006f44:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e000      	b.n	8006f4c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006f4a:	2302      	movs	r3, #2
  }
}
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b008      	add	sp, #32
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	1dbb      	adds	r3, r7, #6
 8006f60:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	228c      	movs	r2, #140	; 0x8c
 8006f66:	589b      	ldr	r3, [r3, r2]
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d145      	bne.n	8006ff8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_UART_Receive_IT+0x26>
 8006f72:	1dbb      	adds	r3, r7, #6
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e03d      	b.n	8006ffa <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	2380      	movs	r3, #128	; 0x80
 8006f84:	015b      	lsls	r3, r3, #5
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d109      	bne.n	8006f9e <HAL_UART_Receive_IT+0x4a>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d105      	bne.n	8006f9e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2201      	movs	r2, #1
 8006f96:	4013      	ands	r3, r2
 8006f98:	d001      	beq.n	8006f9e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e02d      	b.n	8006ffa <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	2380      	movs	r3, #128	; 0x80
 8006fac:	041b      	lsls	r3, r3, #16
 8006fae:	4013      	ands	r3, r2
 8006fb0:	d019      	beq.n	8006fe6 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8006fb6:	613b      	str	r3, [r7, #16]
  return(result);
 8006fb8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f383 8810 	msr	PRIMASK, r3
}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2180      	movs	r1, #128	; 0x80
 8006fd4:	04c9      	lsls	r1, r1, #19
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f383 8810 	msr	PRIMASK, r3
}
 8006fe4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fe6:	1dbb      	adds	r3, r7, #6
 8006fe8:	881a      	ldrh	r2, [r3, #0]
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f000 feb8 	bl	8007d64 <UART_Start_Receive_IT>
 8006ff4:	0003      	movs	r3, r0
 8006ff6:	e000      	b.n	8006ffa <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006ff8:	2302      	movs	r3, #2
  }
}
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	b008      	add	sp, #32
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007004:	b5b0      	push	{r4, r5, r7, lr}
 8007006:	b0aa      	sub	sp, #168	; 0xa8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	22a4      	movs	r2, #164	; 0xa4
 8007014:	18b9      	adds	r1, r7, r2
 8007016:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	20a0      	movs	r0, #160	; 0xa0
 8007020:	1839      	adds	r1, r7, r0
 8007022:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	249c      	movs	r4, #156	; 0x9c
 800702c:	1939      	adds	r1, r7, r4
 800702e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007030:	0011      	movs	r1, r2
 8007032:	18bb      	adds	r3, r7, r2
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4aa2      	ldr	r2, [pc, #648]	; (80072c0 <HAL_UART_IRQHandler+0x2bc>)
 8007038:	4013      	ands	r3, r2
 800703a:	2298      	movs	r2, #152	; 0x98
 800703c:	18bd      	adds	r5, r7, r2
 800703e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007040:	18bb      	adds	r3, r7, r2
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11a      	bne.n	800707e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007048:	187b      	adds	r3, r7, r1
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2220      	movs	r2, #32
 800704e:	4013      	ands	r3, r2
 8007050:	d015      	beq.n	800707e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007052:	183b      	adds	r3, r7, r0
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2220      	movs	r2, #32
 8007058:	4013      	ands	r3, r2
 800705a:	d105      	bne.n	8007068 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800705c:	193b      	adds	r3, r7, r4
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	2380      	movs	r3, #128	; 0x80
 8007062:	055b      	lsls	r3, r3, #21
 8007064:	4013      	ands	r3, r2
 8007066:	d00a      	beq.n	800707e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800706c:	2b00      	cmp	r3, #0
 800706e:	d100      	bne.n	8007072 <HAL_UART_IRQHandler+0x6e>
 8007070:	e2dc      	b.n	800762c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	0010      	movs	r0, r2
 800707a:	4798      	blx	r3
      }
      return;
 800707c:	e2d6      	b.n	800762c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800707e:	2398      	movs	r3, #152	; 0x98
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d100      	bne.n	800708a <HAL_UART_IRQHandler+0x86>
 8007088:	e122      	b.n	80072d0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800708a:	239c      	movs	r3, #156	; 0x9c
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a8c      	ldr	r2, [pc, #560]	; (80072c4 <HAL_UART_IRQHandler+0x2c0>)
 8007092:	4013      	ands	r3, r2
 8007094:	d106      	bne.n	80070a4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007096:	23a0      	movs	r3, #160	; 0xa0
 8007098:	18fb      	adds	r3, r7, r3
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a8a      	ldr	r2, [pc, #552]	; (80072c8 <HAL_UART_IRQHandler+0x2c4>)
 800709e:	4013      	ands	r3, r2
 80070a0:	d100      	bne.n	80070a4 <HAL_UART_IRQHandler+0xa0>
 80070a2:	e115      	b.n	80072d0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070a4:	23a4      	movs	r3, #164	; 0xa4
 80070a6:	18fb      	adds	r3, r7, r3
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2201      	movs	r2, #1
 80070ac:	4013      	ands	r3, r2
 80070ae:	d012      	beq.n	80070d6 <HAL_UART_IRQHandler+0xd2>
 80070b0:	23a0      	movs	r3, #160	; 0xa0
 80070b2:	18fb      	adds	r3, r7, r3
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	2380      	movs	r3, #128	; 0x80
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	4013      	ands	r3, r2
 80070bc:	d00b      	beq.n	80070d6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2201      	movs	r2, #1
 80070c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2290      	movs	r2, #144	; 0x90
 80070ca:	589b      	ldr	r3, [r3, r2]
 80070cc:	2201      	movs	r2, #1
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2190      	movs	r1, #144	; 0x90
 80070d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070d6:	23a4      	movs	r3, #164	; 0xa4
 80070d8:	18fb      	adds	r3, r7, r3
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2202      	movs	r2, #2
 80070de:	4013      	ands	r3, r2
 80070e0:	d011      	beq.n	8007106 <HAL_UART_IRQHandler+0x102>
 80070e2:	239c      	movs	r3, #156	; 0x9c
 80070e4:	18fb      	adds	r3, r7, r3
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2201      	movs	r2, #1
 80070ea:	4013      	ands	r3, r2
 80070ec:	d00b      	beq.n	8007106 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2202      	movs	r2, #2
 80070f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2290      	movs	r2, #144	; 0x90
 80070fa:	589b      	ldr	r3, [r3, r2]
 80070fc:	2204      	movs	r2, #4
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2190      	movs	r1, #144	; 0x90
 8007104:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007106:	23a4      	movs	r3, #164	; 0xa4
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2204      	movs	r2, #4
 800710e:	4013      	ands	r3, r2
 8007110:	d011      	beq.n	8007136 <HAL_UART_IRQHandler+0x132>
 8007112:	239c      	movs	r3, #156	; 0x9c
 8007114:	18fb      	adds	r3, r7, r3
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2201      	movs	r2, #1
 800711a:	4013      	ands	r3, r2
 800711c:	d00b      	beq.n	8007136 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2204      	movs	r2, #4
 8007124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2290      	movs	r2, #144	; 0x90
 800712a:	589b      	ldr	r3, [r3, r2]
 800712c:	2202      	movs	r2, #2
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2190      	movs	r1, #144	; 0x90
 8007134:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007136:	23a4      	movs	r3, #164	; 0xa4
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2208      	movs	r2, #8
 800713e:	4013      	ands	r3, r2
 8007140:	d017      	beq.n	8007172 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007142:	23a0      	movs	r3, #160	; 0xa0
 8007144:	18fb      	adds	r3, r7, r3
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2220      	movs	r2, #32
 800714a:	4013      	ands	r3, r2
 800714c:	d105      	bne.n	800715a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800714e:	239c      	movs	r3, #156	; 0x9c
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a5b      	ldr	r2, [pc, #364]	; (80072c4 <HAL_UART_IRQHandler+0x2c0>)
 8007156:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007158:	d00b      	beq.n	8007172 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2208      	movs	r2, #8
 8007160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2290      	movs	r2, #144	; 0x90
 8007166:	589b      	ldr	r3, [r3, r2]
 8007168:	2208      	movs	r2, #8
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2190      	movs	r1, #144	; 0x90
 8007170:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007172:	23a4      	movs	r3, #164	; 0xa4
 8007174:	18fb      	adds	r3, r7, r3
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	2380      	movs	r3, #128	; 0x80
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	4013      	ands	r3, r2
 800717e:	d013      	beq.n	80071a8 <HAL_UART_IRQHandler+0x1a4>
 8007180:	23a0      	movs	r3, #160	; 0xa0
 8007182:	18fb      	adds	r3, r7, r3
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	2380      	movs	r3, #128	; 0x80
 8007188:	04db      	lsls	r3, r3, #19
 800718a:	4013      	ands	r3, r2
 800718c:	d00c      	beq.n	80071a8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2280      	movs	r2, #128	; 0x80
 8007194:	0112      	lsls	r2, r2, #4
 8007196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2290      	movs	r2, #144	; 0x90
 800719c:	589b      	ldr	r3, [r3, r2]
 800719e:	2220      	movs	r2, #32
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2190      	movs	r1, #144	; 0x90
 80071a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2290      	movs	r2, #144	; 0x90
 80071ac:	589b      	ldr	r3, [r3, r2]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d100      	bne.n	80071b4 <HAL_UART_IRQHandler+0x1b0>
 80071b2:	e23d      	b.n	8007630 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071b4:	23a4      	movs	r3, #164	; 0xa4
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2220      	movs	r2, #32
 80071bc:	4013      	ands	r3, r2
 80071be:	d015      	beq.n	80071ec <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071c0:	23a0      	movs	r3, #160	; 0xa0
 80071c2:	18fb      	adds	r3, r7, r3
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2220      	movs	r2, #32
 80071c8:	4013      	ands	r3, r2
 80071ca:	d106      	bne.n	80071da <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071cc:	239c      	movs	r3, #156	; 0x9c
 80071ce:	18fb      	adds	r3, r7, r3
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	2380      	movs	r3, #128	; 0x80
 80071d4:	055b      	lsls	r3, r3, #21
 80071d6:	4013      	ands	r3, r2
 80071d8:	d008      	beq.n	80071ec <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	0010      	movs	r0, r2
 80071ea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2290      	movs	r2, #144	; 0x90
 80071f0:	589b      	ldr	r3, [r3, r2]
 80071f2:	2194      	movs	r1, #148	; 0x94
 80071f4:	187a      	adds	r2, r7, r1
 80071f6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	2240      	movs	r2, #64	; 0x40
 8007200:	4013      	ands	r3, r2
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d004      	beq.n	8007210 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007206:	187b      	adds	r3, r7, r1
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2228      	movs	r2, #40	; 0x28
 800720c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800720e:	d04c      	beq.n	80072aa <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	0018      	movs	r0, r3
 8007214:	f000 feca 	bl	8007fac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	2240      	movs	r2, #64	; 0x40
 8007220:	4013      	ands	r3, r2
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d13c      	bne.n	80072a0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007226:	f3ef 8310 	mrs	r3, PRIMASK
 800722a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800722c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800722e:	2090      	movs	r0, #144	; 0x90
 8007230:	183a      	adds	r2, r7, r0
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	2301      	movs	r3, #1
 8007236:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800723a:	f383 8810 	msr	PRIMASK, r3
}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2140      	movs	r1, #64	; 0x40
 800724c:	438a      	bics	r2, r1
 800724e:	609a      	str	r2, [r3, #8]
 8007250:	183b      	adds	r3, r7, r0
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007258:	f383 8810 	msr	PRIMASK, r3
}
 800725c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2280      	movs	r2, #128	; 0x80
 8007262:	589b      	ldr	r3, [r3, r2]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d016      	beq.n	8007296 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2280      	movs	r2, #128	; 0x80
 800726c:	589b      	ldr	r3, [r3, r2]
 800726e:	4a17      	ldr	r2, [pc, #92]	; (80072cc <HAL_UART_IRQHandler+0x2c8>)
 8007270:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2280      	movs	r2, #128	; 0x80
 8007276:	589b      	ldr	r3, [r3, r2]
 8007278:	0018      	movs	r0, r3
 800727a:	f7fd f929 	bl	80044d0 <HAL_DMA_Abort_IT>
 800727e:	1e03      	subs	r3, r0, #0
 8007280:	d01c      	beq.n	80072bc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2280      	movs	r2, #128	; 0x80
 8007286:	589b      	ldr	r3, [r3, r2]
 8007288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	2180      	movs	r1, #128	; 0x80
 800728e:	5852      	ldr	r2, [r2, r1]
 8007290:	0010      	movs	r0, r2
 8007292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	e012      	b.n	80072bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	0018      	movs	r0, r3
 800729a:	f000 f9e1 	bl	8007660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729e:	e00d      	b.n	80072bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	0018      	movs	r0, r3
 80072a4:	f000 f9dc 	bl	8007660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	e008      	b.n	80072bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	0018      	movs	r0, r3
 80072ae:	f000 f9d7 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2290      	movs	r2, #144	; 0x90
 80072b6:	2100      	movs	r1, #0
 80072b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80072ba:	e1b9      	b.n	8007630 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072bc:	46c0      	nop			; (mov r8, r8)
    return;
 80072be:	e1b7      	b.n	8007630 <HAL_UART_IRQHandler+0x62c>
 80072c0:	0000080f 	.word	0x0000080f
 80072c4:	10000001 	.word	0x10000001
 80072c8:	04000120 	.word	0x04000120
 80072cc:	08008079 	.word	0x08008079

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d000      	beq.n	80072da <HAL_UART_IRQHandler+0x2d6>
 80072d8:	e13e      	b.n	8007558 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072da:	23a4      	movs	r3, #164	; 0xa4
 80072dc:	18fb      	adds	r3, r7, r3
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2210      	movs	r2, #16
 80072e2:	4013      	ands	r3, r2
 80072e4:	d100      	bne.n	80072e8 <HAL_UART_IRQHandler+0x2e4>
 80072e6:	e137      	b.n	8007558 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072e8:	23a0      	movs	r3, #160	; 0xa0
 80072ea:	18fb      	adds	r3, r7, r3
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2210      	movs	r2, #16
 80072f0:	4013      	ands	r3, r2
 80072f2:	d100      	bne.n	80072f6 <HAL_UART_IRQHandler+0x2f2>
 80072f4:	e130      	b.n	8007558 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2210      	movs	r2, #16
 80072fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2240      	movs	r2, #64	; 0x40
 8007306:	4013      	ands	r3, r2
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d000      	beq.n	800730e <HAL_UART_IRQHandler+0x30a>
 800730c:	e0a4      	b.n	8007458 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2280      	movs	r2, #128	; 0x80
 8007312:	589b      	ldr	r3, [r3, r2]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	217e      	movs	r1, #126	; 0x7e
 800731a:	187b      	adds	r3, r7, r1
 800731c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800731e:	187b      	adds	r3, r7, r1
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d100      	bne.n	8007328 <HAL_UART_IRQHandler+0x324>
 8007326:	e185      	b.n	8007634 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	225c      	movs	r2, #92	; 0x5c
 800732c:	5a9b      	ldrh	r3, [r3, r2]
 800732e:	187a      	adds	r2, r7, r1
 8007330:	8812      	ldrh	r2, [r2, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d300      	bcc.n	8007338 <HAL_UART_IRQHandler+0x334>
 8007336:	e17d      	b.n	8007634 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	187a      	adds	r2, r7, r1
 800733c:	215e      	movs	r1, #94	; 0x5e
 800733e:	8812      	ldrh	r2, [r2, #0]
 8007340:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2280      	movs	r2, #128	; 0x80
 8007346:	589b      	ldr	r3, [r3, r2]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2220      	movs	r2, #32
 800734e:	4013      	ands	r3, r2
 8007350:	d170      	bne.n	8007434 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007352:	f3ef 8310 	mrs	r3, PRIMASK
 8007356:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800735a:	67bb      	str	r3, [r7, #120]	; 0x78
 800735c:	2301      	movs	r3, #1
 800735e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007362:	f383 8810 	msr	PRIMASK, r3
}
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	49b4      	ldr	r1, [pc, #720]	; (8007644 <HAL_UART_IRQHandler+0x640>)
 8007374:	400a      	ands	r2, r1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	f383 8810 	msr	PRIMASK, r3
}
 8007382:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007384:	f3ef 8310 	mrs	r3, PRIMASK
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800738a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738c:	677b      	str	r3, [r7, #116]	; 0x74
 800738e:	2301      	movs	r3, #1
 8007390:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007394:	f383 8810 	msr	PRIMASK, r3
}
 8007398:	46c0      	nop			; (mov r8, r8)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2101      	movs	r1, #1
 80073a6:	438a      	bics	r2, r1
 80073a8:	609a      	str	r2, [r3, #8]
 80073aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b0:	f383 8810 	msr	PRIMASK, r3
}
 80073b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b6:	f3ef 8310 	mrs	r3, PRIMASK
 80073ba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80073bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073be:	673b      	str	r3, [r7, #112]	; 0x70
 80073c0:	2301      	movs	r3, #1
 80073c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c6:	f383 8810 	msr	PRIMASK, r3
}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689a      	ldr	r2, [r3, #8]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2140      	movs	r1, #64	; 0x40
 80073d8:	438a      	bics	r2, r1
 80073da:	609a      	str	r2, [r3, #8]
 80073dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073de:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e2:	f383 8810 	msr	PRIMASK, r3
}
 80073e6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	228c      	movs	r2, #140	; 0x8c
 80073ec:	2120      	movs	r1, #32
 80073ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f6:	f3ef 8310 	mrs	r3, PRIMASK
 80073fa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80073fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007400:	2301      	movs	r3, #1
 8007402:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007406:	f383 8810 	msr	PRIMASK, r3
}
 800740a:	46c0      	nop			; (mov r8, r8)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2110      	movs	r1, #16
 8007418:	438a      	bics	r2, r1
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007422:	f383 8810 	msr	PRIMASK, r3
}
 8007426:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2280      	movs	r2, #128	; 0x80
 800742c:	589b      	ldr	r3, [r3, r2]
 800742e:	0018      	movs	r0, r3
 8007430:	f7fc ffec 	bl	800440c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	225c      	movs	r2, #92	; 0x5c
 800743e:	5a9a      	ldrh	r2, [r3, r2]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	215e      	movs	r1, #94	; 0x5e
 8007444:	5a5b      	ldrh	r3, [r3, r1]
 8007446:	b29b      	uxth	r3, r3
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	b29a      	uxth	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	0011      	movs	r1, r2
 8007450:	0018      	movs	r0, r3
 8007452:	f000 f90d 	bl	8007670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007456:	e0ed      	b.n	8007634 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	225c      	movs	r2, #92	; 0x5c
 800745c:	5a99      	ldrh	r1, [r3, r2]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	225e      	movs	r2, #94	; 0x5e
 8007462:	5a9b      	ldrh	r3, [r3, r2]
 8007464:	b29a      	uxth	r2, r3
 8007466:	208e      	movs	r0, #142	; 0x8e
 8007468:	183b      	adds	r3, r7, r0
 800746a:	1a8a      	subs	r2, r1, r2
 800746c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	225e      	movs	r2, #94	; 0x5e
 8007472:	5a9b      	ldrh	r3, [r3, r2]
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d100      	bne.n	800747c <HAL_UART_IRQHandler+0x478>
 800747a:	e0dd      	b.n	8007638 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800747c:	183b      	adds	r3, r7, r0
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d100      	bne.n	8007486 <HAL_UART_IRQHandler+0x482>
 8007484:	e0d8      	b.n	8007638 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007486:	f3ef 8310 	mrs	r3, PRIMASK
 800748a:	60fb      	str	r3, [r7, #12]
  return(result);
 800748c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800748e:	2488      	movs	r4, #136	; 0x88
 8007490:	193a      	adds	r2, r7, r4
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	2301      	movs	r3, #1
 8007496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f383 8810 	msr	PRIMASK, r3
}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4967      	ldr	r1, [pc, #412]	; (8007648 <HAL_UART_IRQHandler+0x644>)
 80074ac:	400a      	ands	r2, r1
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	193b      	adds	r3, r7, r4
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f383 8810 	msr	PRIMASK, r3
}
 80074bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074be:	f3ef 8310 	mrs	r3, PRIMASK
 80074c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80074c4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074c6:	2484      	movs	r4, #132	; 0x84
 80074c8:	193a      	adds	r2, r7, r4
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	2301      	movs	r3, #1
 80074ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f383 8810 	msr	PRIMASK, r3
}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	495a      	ldr	r1, [pc, #360]	; (800764c <HAL_UART_IRQHandler+0x648>)
 80074e4:	400a      	ands	r2, r1
 80074e6:	609a      	str	r2, [r3, #8]
 80074e8:	193b      	adds	r3, r7, r4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	f383 8810 	msr	PRIMASK, r3
}
 80074f4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	228c      	movs	r2, #140	; 0x8c
 80074fa:	2120      	movs	r1, #32
 80074fc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800750a:	f3ef 8310 	mrs	r3, PRIMASK
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007512:	2480      	movs	r4, #128	; 0x80
 8007514:	193a      	adds	r2, r7, r4
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	2301      	movs	r3, #1
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	f383 8810 	msr	PRIMASK, r3
}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2110      	movs	r1, #16
 8007530:	438a      	bics	r2, r1
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	193b      	adds	r3, r7, r4
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753c:	f383 8810 	msr	PRIMASK, r3
}
 8007540:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007548:	183b      	adds	r3, r7, r0
 800754a:	881a      	ldrh	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	0011      	movs	r1, r2
 8007550:	0018      	movs	r0, r3
 8007552:	f000 f88d 	bl	8007670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007556:	e06f      	b.n	8007638 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007558:	23a4      	movs	r3, #164	; 0xa4
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	2380      	movs	r3, #128	; 0x80
 8007560:	035b      	lsls	r3, r3, #13
 8007562:	4013      	ands	r3, r2
 8007564:	d010      	beq.n	8007588 <HAL_UART_IRQHandler+0x584>
 8007566:	239c      	movs	r3, #156	; 0x9c
 8007568:	18fb      	adds	r3, r7, r3
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	2380      	movs	r3, #128	; 0x80
 800756e:	03db      	lsls	r3, r3, #15
 8007570:	4013      	ands	r3, r2
 8007572:	d009      	beq.n	8007588 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2280      	movs	r2, #128	; 0x80
 800757a:	0352      	lsls	r2, r2, #13
 800757c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	0018      	movs	r0, r3
 8007582:	f001 fa1d 	bl	80089c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007586:	e05a      	b.n	800763e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007588:	23a4      	movs	r3, #164	; 0xa4
 800758a:	18fb      	adds	r3, r7, r3
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2280      	movs	r2, #128	; 0x80
 8007590:	4013      	ands	r3, r2
 8007592:	d016      	beq.n	80075c2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007594:	23a0      	movs	r3, #160	; 0xa0
 8007596:	18fb      	adds	r3, r7, r3
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2280      	movs	r2, #128	; 0x80
 800759c:	4013      	ands	r3, r2
 800759e:	d106      	bne.n	80075ae <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80075a0:	239c      	movs	r3, #156	; 0x9c
 80075a2:	18fb      	adds	r3, r7, r3
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	041b      	lsls	r3, r3, #16
 80075aa:	4013      	ands	r3, r2
 80075ac:	d009      	beq.n	80075c2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d042      	beq.n	800763c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	0010      	movs	r0, r2
 80075be:	4798      	blx	r3
    }
    return;
 80075c0:	e03c      	b.n	800763c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075c2:	23a4      	movs	r3, #164	; 0xa4
 80075c4:	18fb      	adds	r3, r7, r3
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2240      	movs	r2, #64	; 0x40
 80075ca:	4013      	ands	r3, r2
 80075cc:	d00a      	beq.n	80075e4 <HAL_UART_IRQHandler+0x5e0>
 80075ce:	23a0      	movs	r3, #160	; 0xa0
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2240      	movs	r2, #64	; 0x40
 80075d6:	4013      	ands	r3, r2
 80075d8:	d004      	beq.n	80075e4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	0018      	movs	r0, r3
 80075de:	f000 fd62 	bl	80080a6 <UART_EndTransmit_IT>
    return;
 80075e2:	e02c      	b.n	800763e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80075e4:	23a4      	movs	r3, #164	; 0xa4
 80075e6:	18fb      	adds	r3, r7, r3
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	4013      	ands	r3, r2
 80075f0:	d00b      	beq.n	800760a <HAL_UART_IRQHandler+0x606>
 80075f2:	23a0      	movs	r3, #160	; 0xa0
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	2380      	movs	r3, #128	; 0x80
 80075fa:	05db      	lsls	r3, r3, #23
 80075fc:	4013      	ands	r3, r2
 80075fe:	d004      	beq.n	800760a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	0018      	movs	r0, r3
 8007604:	f001 f9ec 	bl	80089e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007608:	e019      	b.n	800763e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800760a:	23a4      	movs	r3, #164	; 0xa4
 800760c:	18fb      	adds	r3, r7, r3
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	2380      	movs	r3, #128	; 0x80
 8007612:	045b      	lsls	r3, r3, #17
 8007614:	4013      	ands	r3, r2
 8007616:	d012      	beq.n	800763e <HAL_UART_IRQHandler+0x63a>
 8007618:	23a0      	movs	r3, #160	; 0xa0
 800761a:	18fb      	adds	r3, r7, r3
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	da0d      	bge.n	800763e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	0018      	movs	r0, r3
 8007626:	f001 f9d3 	bl	80089d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800762a:	e008      	b.n	800763e <HAL_UART_IRQHandler+0x63a>
      return;
 800762c:	46c0      	nop			; (mov r8, r8)
 800762e:	e006      	b.n	800763e <HAL_UART_IRQHandler+0x63a>
    return;
 8007630:	46c0      	nop			; (mov r8, r8)
 8007632:	e004      	b.n	800763e <HAL_UART_IRQHandler+0x63a>
      return;
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	e002      	b.n	800763e <HAL_UART_IRQHandler+0x63a>
      return;
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	e000      	b.n	800763e <HAL_UART_IRQHandler+0x63a>
    return;
 800763c:	46c0      	nop			; (mov r8, r8)
  }
}
 800763e:	46bd      	mov	sp, r7
 8007640:	b02a      	add	sp, #168	; 0xa8
 8007642:	bdb0      	pop	{r4, r5, r7, pc}
 8007644:	fffffeff 	.word	0xfffffeff
 8007648:	fffffedf 	.word	0xfffffedf
 800764c:	effffffe 	.word	0xeffffffe

08007650 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007658:	46c0      	nop			; (mov r8, r8)
 800765a:	46bd      	mov	sp, r7
 800765c:	b002      	add	sp, #8
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	b002      	add	sp, #8
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	000a      	movs	r2, r1
 800767a:	1cbb      	adds	r3, r7, #2
 800767c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	46bd      	mov	sp, r7
 8007682:	b002      	add	sp, #8
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007690:	231a      	movs	r3, #26
 8007692:	18fb      	adds	r3, r7, r3
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4abc      	ldr	r2, [pc, #752]	; (80079a8 <UART_SetConfig+0x320>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	0019      	movs	r1, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69fa      	ldr	r2, [r7, #28]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4ab7      	ldr	r2, [pc, #732]	; (80079ac <UART_SetConfig+0x324>)
 80076ce:	4013      	ands	r3, r2
 80076d0:	0019      	movs	r1, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4aae      	ldr	r2, [pc, #696]	; (80079b0 <UART_SetConfig+0x328>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	0019      	movs	r1, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	430a      	orrs	r2, r1
 8007702:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	220f      	movs	r2, #15
 800770c:	4393      	bics	r3, r2
 800770e:	0019      	movs	r1, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4aa4      	ldr	r2, [pc, #656]	; (80079b4 <UART_SetConfig+0x32c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d127      	bne.n	8007776 <UART_SetConfig+0xee>
 8007726:	4ba4      	ldr	r3, [pc, #656]	; (80079b8 <UART_SetConfig+0x330>)
 8007728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772a:	2203      	movs	r2, #3
 800772c:	4013      	ands	r3, r2
 800772e:	2b03      	cmp	r3, #3
 8007730:	d017      	beq.n	8007762 <UART_SetConfig+0xda>
 8007732:	d81b      	bhi.n	800776c <UART_SetConfig+0xe4>
 8007734:	2b02      	cmp	r3, #2
 8007736:	d00a      	beq.n	800774e <UART_SetConfig+0xc6>
 8007738:	d818      	bhi.n	800776c <UART_SetConfig+0xe4>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <UART_SetConfig+0xbc>
 800773e:	2b01      	cmp	r3, #1
 8007740:	d00a      	beq.n	8007758 <UART_SetConfig+0xd0>
 8007742:	e013      	b.n	800776c <UART_SetConfig+0xe4>
 8007744:	231b      	movs	r3, #27
 8007746:	18fb      	adds	r3, r7, r3
 8007748:	2200      	movs	r2, #0
 800774a:	701a      	strb	r2, [r3, #0]
 800774c:	e058      	b.n	8007800 <UART_SetConfig+0x178>
 800774e:	231b      	movs	r3, #27
 8007750:	18fb      	adds	r3, r7, r3
 8007752:	2202      	movs	r2, #2
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	e053      	b.n	8007800 <UART_SetConfig+0x178>
 8007758:	231b      	movs	r3, #27
 800775a:	18fb      	adds	r3, r7, r3
 800775c:	2204      	movs	r2, #4
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	e04e      	b.n	8007800 <UART_SetConfig+0x178>
 8007762:	231b      	movs	r3, #27
 8007764:	18fb      	adds	r3, r7, r3
 8007766:	2208      	movs	r2, #8
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e049      	b.n	8007800 <UART_SetConfig+0x178>
 800776c:	231b      	movs	r3, #27
 800776e:	18fb      	adds	r3, r7, r3
 8007770:	2210      	movs	r2, #16
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	e044      	b.n	8007800 <UART_SetConfig+0x178>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a90      	ldr	r2, [pc, #576]	; (80079bc <UART_SetConfig+0x334>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d127      	bne.n	80077d0 <UART_SetConfig+0x148>
 8007780:	4b8d      	ldr	r3, [pc, #564]	; (80079b8 <UART_SetConfig+0x330>)
 8007782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007784:	220c      	movs	r2, #12
 8007786:	4013      	ands	r3, r2
 8007788:	2b0c      	cmp	r3, #12
 800778a:	d017      	beq.n	80077bc <UART_SetConfig+0x134>
 800778c:	d81b      	bhi.n	80077c6 <UART_SetConfig+0x13e>
 800778e:	2b08      	cmp	r3, #8
 8007790:	d00a      	beq.n	80077a8 <UART_SetConfig+0x120>
 8007792:	d818      	bhi.n	80077c6 <UART_SetConfig+0x13e>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <UART_SetConfig+0x116>
 8007798:	2b04      	cmp	r3, #4
 800779a:	d00a      	beq.n	80077b2 <UART_SetConfig+0x12a>
 800779c:	e013      	b.n	80077c6 <UART_SetConfig+0x13e>
 800779e:	231b      	movs	r3, #27
 80077a0:	18fb      	adds	r3, r7, r3
 80077a2:	2200      	movs	r2, #0
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	e02b      	b.n	8007800 <UART_SetConfig+0x178>
 80077a8:	231b      	movs	r3, #27
 80077aa:	18fb      	adds	r3, r7, r3
 80077ac:	2202      	movs	r2, #2
 80077ae:	701a      	strb	r2, [r3, #0]
 80077b0:	e026      	b.n	8007800 <UART_SetConfig+0x178>
 80077b2:	231b      	movs	r3, #27
 80077b4:	18fb      	adds	r3, r7, r3
 80077b6:	2204      	movs	r2, #4
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	e021      	b.n	8007800 <UART_SetConfig+0x178>
 80077bc:	231b      	movs	r3, #27
 80077be:	18fb      	adds	r3, r7, r3
 80077c0:	2208      	movs	r2, #8
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	e01c      	b.n	8007800 <UART_SetConfig+0x178>
 80077c6:	231b      	movs	r3, #27
 80077c8:	18fb      	adds	r3, r7, r3
 80077ca:	2210      	movs	r2, #16
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	e017      	b.n	8007800 <UART_SetConfig+0x178>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a7a      	ldr	r2, [pc, #488]	; (80079c0 <UART_SetConfig+0x338>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d104      	bne.n	80077e4 <UART_SetConfig+0x15c>
 80077da:	231b      	movs	r3, #27
 80077dc:	18fb      	adds	r3, r7, r3
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	e00d      	b.n	8007800 <UART_SetConfig+0x178>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a76      	ldr	r2, [pc, #472]	; (80079c4 <UART_SetConfig+0x33c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d104      	bne.n	80077f8 <UART_SetConfig+0x170>
 80077ee:	231b      	movs	r3, #27
 80077f0:	18fb      	adds	r3, r7, r3
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	e003      	b.n	8007800 <UART_SetConfig+0x178>
 80077f8:	231b      	movs	r3, #27
 80077fa:	18fb      	adds	r3, r7, r3
 80077fc:	2210      	movs	r2, #16
 80077fe:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69da      	ldr	r2, [r3, #28]
 8007804:	2380      	movs	r3, #128	; 0x80
 8007806:	021b      	lsls	r3, r3, #8
 8007808:	429a      	cmp	r2, r3
 800780a:	d000      	beq.n	800780e <UART_SetConfig+0x186>
 800780c:	e065      	b.n	80078da <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800780e:	231b      	movs	r3, #27
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b08      	cmp	r3, #8
 8007816:	d015      	beq.n	8007844 <UART_SetConfig+0x1bc>
 8007818:	dc18      	bgt.n	800784c <UART_SetConfig+0x1c4>
 800781a:	2b04      	cmp	r3, #4
 800781c:	d00d      	beq.n	800783a <UART_SetConfig+0x1b2>
 800781e:	dc15      	bgt.n	800784c <UART_SetConfig+0x1c4>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <UART_SetConfig+0x1a2>
 8007824:	2b02      	cmp	r3, #2
 8007826:	d005      	beq.n	8007834 <UART_SetConfig+0x1ac>
 8007828:	e010      	b.n	800784c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800782a:	f7fd fd45 	bl	80052b8 <HAL_RCC_GetPCLK1Freq>
 800782e:	0003      	movs	r3, r0
 8007830:	617b      	str	r3, [r7, #20]
        break;
 8007832:	e012      	b.n	800785a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007834:	4b64      	ldr	r3, [pc, #400]	; (80079c8 <UART_SetConfig+0x340>)
 8007836:	617b      	str	r3, [r7, #20]
        break;
 8007838:	e00f      	b.n	800785a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800783a:	f7fd fcb3 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 800783e:	0003      	movs	r3, r0
 8007840:	617b      	str	r3, [r7, #20]
        break;
 8007842:	e00a      	b.n	800785a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007844:	2380      	movs	r3, #128	; 0x80
 8007846:	021b      	lsls	r3, r3, #8
 8007848:	617b      	str	r3, [r7, #20]
        break;
 800784a:	e006      	b.n	800785a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007850:	231a      	movs	r3, #26
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	2201      	movs	r2, #1
 8007856:	701a      	strb	r2, [r3, #0]
        break;
 8007858:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d100      	bne.n	8007862 <UART_SetConfig+0x1da>
 8007860:	e08d      	b.n	800797e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007866:	4b59      	ldr	r3, [pc, #356]	; (80079cc <UART_SetConfig+0x344>)
 8007868:	0052      	lsls	r2, r2, #1
 800786a:	5ad3      	ldrh	r3, [r2, r3]
 800786c:	0019      	movs	r1, r3
 800786e:	6978      	ldr	r0, [r7, #20]
 8007870:	f7f8 fc6c 	bl	800014c <__udivsi3>
 8007874:	0003      	movs	r3, r0
 8007876:	005a      	lsls	r2, r3, #1
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	18d2      	adds	r2, r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	0019      	movs	r1, r3
 8007886:	0010      	movs	r0, r2
 8007888:	f7f8 fc60 	bl	800014c <__udivsi3>
 800788c:	0003      	movs	r3, r0
 800788e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b0f      	cmp	r3, #15
 8007894:	d91c      	bls.n	80078d0 <UART_SetConfig+0x248>
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	025b      	lsls	r3, r3, #9
 800789c:	429a      	cmp	r2, r3
 800789e:	d217      	bcs.n	80078d0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	200e      	movs	r0, #14
 80078a6:	183b      	adds	r3, r7, r0
 80078a8:	210f      	movs	r1, #15
 80078aa:	438a      	bics	r2, r1
 80078ac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	085b      	lsrs	r3, r3, #1
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2207      	movs	r2, #7
 80078b6:	4013      	ands	r3, r2
 80078b8:	b299      	uxth	r1, r3
 80078ba:	183b      	adds	r3, r7, r0
 80078bc:	183a      	adds	r2, r7, r0
 80078be:	8812      	ldrh	r2, [r2, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	183a      	adds	r2, r7, r0
 80078ca:	8812      	ldrh	r2, [r2, #0]
 80078cc:	60da      	str	r2, [r3, #12]
 80078ce:	e056      	b.n	800797e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80078d0:	231a      	movs	r3, #26
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	2201      	movs	r2, #1
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	e051      	b.n	800797e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078da:	231b      	movs	r3, #27
 80078dc:	18fb      	adds	r3, r7, r3
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d015      	beq.n	8007910 <UART_SetConfig+0x288>
 80078e4:	dc18      	bgt.n	8007918 <UART_SetConfig+0x290>
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d00d      	beq.n	8007906 <UART_SetConfig+0x27e>
 80078ea:	dc15      	bgt.n	8007918 <UART_SetConfig+0x290>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <UART_SetConfig+0x26e>
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d005      	beq.n	8007900 <UART_SetConfig+0x278>
 80078f4:	e010      	b.n	8007918 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f6:	f7fd fcdf 	bl	80052b8 <HAL_RCC_GetPCLK1Freq>
 80078fa:	0003      	movs	r3, r0
 80078fc:	617b      	str	r3, [r7, #20]
        break;
 80078fe:	e012      	b.n	8007926 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007900:	4b31      	ldr	r3, [pc, #196]	; (80079c8 <UART_SetConfig+0x340>)
 8007902:	617b      	str	r3, [r7, #20]
        break;
 8007904:	e00f      	b.n	8007926 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007906:	f7fd fc4d 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 800790a:	0003      	movs	r3, r0
 800790c:	617b      	str	r3, [r7, #20]
        break;
 800790e:	e00a      	b.n	8007926 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007910:	2380      	movs	r3, #128	; 0x80
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	617b      	str	r3, [r7, #20]
        break;
 8007916:	e006      	b.n	8007926 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800791c:	231a      	movs	r3, #26
 800791e:	18fb      	adds	r3, r7, r3
 8007920:	2201      	movs	r2, #1
 8007922:	701a      	strb	r2, [r3, #0]
        break;
 8007924:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d028      	beq.n	800797e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007930:	4b26      	ldr	r3, [pc, #152]	; (80079cc <UART_SetConfig+0x344>)
 8007932:	0052      	lsls	r2, r2, #1
 8007934:	5ad3      	ldrh	r3, [r2, r3]
 8007936:	0019      	movs	r1, r3
 8007938:	6978      	ldr	r0, [r7, #20]
 800793a:	f7f8 fc07 	bl	800014c <__udivsi3>
 800793e:	0003      	movs	r3, r0
 8007940:	001a      	movs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	085b      	lsrs	r3, r3, #1
 8007948:	18d2      	adds	r2, r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	0019      	movs	r1, r3
 8007950:	0010      	movs	r0, r2
 8007952:	f7f8 fbfb 	bl	800014c <__udivsi3>
 8007956:	0003      	movs	r3, r0
 8007958:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b0f      	cmp	r3, #15
 800795e:	d90a      	bls.n	8007976 <UART_SetConfig+0x2ee>
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	2380      	movs	r3, #128	; 0x80
 8007964:	025b      	lsls	r3, r3, #9
 8007966:	429a      	cmp	r2, r3
 8007968:	d205      	bcs.n	8007976 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	b29a      	uxth	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60da      	str	r2, [r3, #12]
 8007974:	e003      	b.n	800797e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007976:	231a      	movs	r3, #26
 8007978:	18fb      	adds	r3, r7, r3
 800797a:	2201      	movs	r2, #1
 800797c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	226a      	movs	r2, #106	; 0x6a
 8007982:	2101      	movs	r1, #1
 8007984:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2268      	movs	r2, #104	; 0x68
 800798a:	2101      	movs	r1, #1
 800798c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800799a:	231a      	movs	r3, #26
 800799c:	18fb      	adds	r3, r7, r3
 800799e:	781b      	ldrb	r3, [r3, #0]
}
 80079a0:	0018      	movs	r0, r3
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b008      	add	sp, #32
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	cfff69f3 	.word	0xcfff69f3
 80079ac:	ffffcfff 	.word	0xffffcfff
 80079b0:	11fff4ff 	.word	0x11fff4ff
 80079b4:	40013800 	.word	0x40013800
 80079b8:	40021000 	.word	0x40021000
 80079bc:	40004400 	.word	0x40004400
 80079c0:	40004800 	.word	0x40004800
 80079c4:	40004c00 	.word	0x40004c00
 80079c8:	00f42400 	.word	0x00f42400
 80079cc:	0800e398 	.word	0x0800e398

080079d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	2201      	movs	r2, #1
 80079de:	4013      	ands	r3, r2
 80079e0:	d00b      	beq.n	80079fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	4a4a      	ldr	r2, [pc, #296]	; (8007b14 <UART_AdvFeatureConfig+0x144>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	0019      	movs	r1, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fe:	2202      	movs	r2, #2
 8007a00:	4013      	ands	r3, r2
 8007a02:	d00b      	beq.n	8007a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	4a43      	ldr	r2, [pc, #268]	; (8007b18 <UART_AdvFeatureConfig+0x148>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	0019      	movs	r1, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	2204      	movs	r2, #4
 8007a22:	4013      	ands	r3, r2
 8007a24:	d00b      	beq.n	8007a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	4a3b      	ldr	r2, [pc, #236]	; (8007b1c <UART_AdvFeatureConfig+0x14c>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	0019      	movs	r1, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a42:	2208      	movs	r2, #8
 8007a44:	4013      	ands	r3, r2
 8007a46:	d00b      	beq.n	8007a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	4a34      	ldr	r2, [pc, #208]	; (8007b20 <UART_AdvFeatureConfig+0x150>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	0019      	movs	r1, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	2210      	movs	r2, #16
 8007a66:	4013      	ands	r3, r2
 8007a68:	d00b      	beq.n	8007a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	4a2c      	ldr	r2, [pc, #176]	; (8007b24 <UART_AdvFeatureConfig+0x154>)
 8007a72:	4013      	ands	r3, r2
 8007a74:	0019      	movs	r1, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a86:	2220      	movs	r2, #32
 8007a88:	4013      	ands	r3, r2
 8007a8a:	d00b      	beq.n	8007aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	4a25      	ldr	r2, [pc, #148]	; (8007b28 <UART_AdvFeatureConfig+0x158>)
 8007a94:	4013      	ands	r3, r2
 8007a96:	0019      	movs	r1, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	2240      	movs	r2, #64	; 0x40
 8007aaa:	4013      	ands	r3, r2
 8007aac:	d01d      	beq.n	8007aea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4a1d      	ldr	r2, [pc, #116]	; (8007b2c <UART_AdvFeatureConfig+0x15c>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	0019      	movs	r1, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aca:	2380      	movs	r3, #128	; 0x80
 8007acc:	035b      	lsls	r3, r3, #13
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d10b      	bne.n	8007aea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	4a15      	ldr	r2, [pc, #84]	; (8007b30 <UART_AdvFeatureConfig+0x160>)
 8007ada:	4013      	ands	r3, r2
 8007adc:	0019      	movs	r1, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	2280      	movs	r2, #128	; 0x80
 8007af0:	4013      	ands	r3, r2
 8007af2:	d00b      	beq.n	8007b0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	4a0e      	ldr	r2, [pc, #56]	; (8007b34 <UART_AdvFeatureConfig+0x164>)
 8007afc:	4013      	ands	r3, r2
 8007afe:	0019      	movs	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	605a      	str	r2, [r3, #4]
  }
}
 8007b0c:	46c0      	nop			; (mov r8, r8)
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b002      	add	sp, #8
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	fffdffff 	.word	0xfffdffff
 8007b18:	fffeffff 	.word	0xfffeffff
 8007b1c:	fffbffff 	.word	0xfffbffff
 8007b20:	ffff7fff 	.word	0xffff7fff
 8007b24:	ffffefff 	.word	0xffffefff
 8007b28:	ffffdfff 	.word	0xffffdfff
 8007b2c:	ffefffff 	.word	0xffefffff
 8007b30:	ff9fffff 	.word	0xff9fffff
 8007b34:	fff7ffff 	.word	0xfff7ffff

08007b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2290      	movs	r2, #144	; 0x90
 8007b44:	2100      	movs	r1, #0
 8007b46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b48:	f7fc fb78 	bl	800423c <HAL_GetTick>
 8007b4c:	0003      	movs	r3, r0
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2208      	movs	r2, #8
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b08      	cmp	r3, #8
 8007b5c:	d10c      	bne.n	8007b78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2280      	movs	r2, #128	; 0x80
 8007b62:	0391      	lsls	r1, r2, #14
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4a1a      	ldr	r2, [pc, #104]	; (8007bd0 <UART_CheckIdleState+0x98>)
 8007b68:	9200      	str	r2, [sp, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f000 f832 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8007b70:	1e03      	subs	r3, r0, #0
 8007b72:	d001      	beq.n	8007b78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e026      	b.n	8007bc6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2204      	movs	r2, #4
 8007b80:	4013      	ands	r3, r2
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d10c      	bne.n	8007ba0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2280      	movs	r2, #128	; 0x80
 8007b8a:	03d1      	lsls	r1, r2, #15
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	4a10      	ldr	r2, [pc, #64]	; (8007bd0 <UART_CheckIdleState+0x98>)
 8007b90:	9200      	str	r2, [sp, #0]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f000 f81e 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8007b98:	1e03      	subs	r3, r0, #0
 8007b9a:	d001      	beq.n	8007ba0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e012      	b.n	8007bc6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2288      	movs	r2, #136	; 0x88
 8007ba4:	2120      	movs	r1, #32
 8007ba6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	228c      	movs	r2, #140	; 0x8c
 8007bac:	2120      	movs	r1, #32
 8007bae:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2284      	movs	r2, #132	; 0x84
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	b004      	add	sp, #16
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	01ffffff 	.word	0x01ffffff

08007bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b094      	sub	sp, #80	; 0x50
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	1dfb      	adds	r3, r7, #7
 8007be2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be4:	e0a7      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007be8:	3301      	adds	r3, #1
 8007bea:	d100      	bne.n	8007bee <UART_WaitOnFlagUntilTimeout+0x1a>
 8007bec:	e0a3      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bee:	f7fc fb25 	bl	800423c <HAL_GetTick>
 8007bf2:	0002      	movs	r2, r0
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d302      	bcc.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d13f      	bne.n	8007c84 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c04:	f3ef 8310 	mrs	r3, PRIMASK
 8007c08:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c0e:	2301      	movs	r3, #1
 8007c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	f383 8810 	msr	PRIMASK, r3
}
 8007c18:	46c0      	nop			; (mov r8, r8)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	494e      	ldr	r1, [pc, #312]	; (8007d60 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007c26:	400a      	ands	r2, r1
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c2c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	f383 8810 	msr	PRIMASK, r3
}
 8007c34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c36:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c40:	2301      	movs	r3, #1
 8007c42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	f383 8810 	msr	PRIMASK, r3
}
 8007c4a:	46c0      	nop			; (mov r8, r8)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689a      	ldr	r2, [r3, #8]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2101      	movs	r1, #1
 8007c58:	438a      	bics	r2, r1
 8007c5a:	609a      	str	r2, [r3, #8]
 8007c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c62:	f383 8810 	msr	PRIMASK, r3
}
 8007c66:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2288      	movs	r2, #136	; 0x88
 8007c6c:	2120      	movs	r1, #32
 8007c6e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	228c      	movs	r2, #140	; 0x8c
 8007c74:	2120      	movs	r1, #32
 8007c76:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2284      	movs	r2, #132	; 0x84
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e069      	b.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	d052      	beq.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	69da      	ldr	r2, [r3, #28]
 8007c96:	2380      	movs	r3, #128	; 0x80
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	401a      	ands	r2, r3
 8007c9c:	2380      	movs	r3, #128	; 0x80
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d148      	bne.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2280      	movs	r2, #128	; 0x80
 8007caa:	0112      	lsls	r2, r2, #4
 8007cac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cae:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb2:	613b      	str	r3, [r7, #16]
  return(result);
 8007cb4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cb8:	2301      	movs	r3, #1
 8007cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f383 8810 	msr	PRIMASK, r3
}
 8007cc2:	46c0      	nop			; (mov r8, r8)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4924      	ldr	r1, [pc, #144]	; (8007d60 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007cd0:	400a      	ands	r2, r1
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	f383 8810 	msr	PRIMASK, r3
}
 8007cde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ce4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ce6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cea:	2301      	movs	r3, #1
 8007cec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	f383 8810 	msr	PRIMASK, r3
}
 8007cf4:	46c0      	nop			; (mov r8, r8)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2101      	movs	r1, #1
 8007d02:	438a      	bics	r2, r1
 8007d04:	609a      	str	r2, [r3, #8]
 8007d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	f383 8810 	msr	PRIMASK, r3
}
 8007d10:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2288      	movs	r2, #136	; 0x88
 8007d16:	2120      	movs	r1, #32
 8007d18:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	228c      	movs	r2, #140	; 0x8c
 8007d1e:	2120      	movs	r1, #32
 8007d20:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2290      	movs	r2, #144	; 0x90
 8007d26:	2120      	movs	r1, #32
 8007d28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2284      	movs	r2, #132	; 0x84
 8007d2e:	2100      	movs	r1, #0
 8007d30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e010      	b.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	425a      	negs	r2, r3
 8007d46:	4153      	adcs	r3, r2
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	001a      	movs	r2, r3
 8007d4c:	1dfb      	adds	r3, r7, #7
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d100      	bne.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x182>
 8007d54:	e747      	b.n	8007be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	0018      	movs	r0, r3
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	b014      	add	sp, #80	; 0x50
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	fffffe5f 	.word	0xfffffe5f

08007d64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b098      	sub	sp, #96	; 0x60
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	1dbb      	adds	r3, r7, #6
 8007d70:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	1dba      	adds	r2, r7, #6
 8007d7c:	215c      	movs	r1, #92	; 0x5c
 8007d7e:	8812      	ldrh	r2, [r2, #0]
 8007d80:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1dba      	adds	r2, r7, #6
 8007d86:	215e      	movs	r1, #94	; 0x5e
 8007d88:	8812      	ldrh	r2, [r2, #0]
 8007d8a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	2380      	movs	r3, #128	; 0x80
 8007d98:	015b      	lsls	r3, r3, #5
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d10d      	bne.n	8007dba <UART_Start_Receive_IT+0x56>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d104      	bne.n	8007db0 <UART_Start_Receive_IT+0x4c>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2260      	movs	r2, #96	; 0x60
 8007daa:	497b      	ldr	r1, [pc, #492]	; (8007f98 <UART_Start_Receive_IT+0x234>)
 8007dac:	5299      	strh	r1, [r3, r2]
 8007dae:	e02e      	b.n	8007e0e <UART_Start_Receive_IT+0xaa>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2260      	movs	r2, #96	; 0x60
 8007db4:	21ff      	movs	r1, #255	; 0xff
 8007db6:	5299      	strh	r1, [r3, r2]
 8007db8:	e029      	b.n	8007e0e <UART_Start_Receive_IT+0xaa>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10d      	bne.n	8007dde <UART_Start_Receive_IT+0x7a>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <UART_Start_Receive_IT+0x70>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2260      	movs	r2, #96	; 0x60
 8007dce:	21ff      	movs	r1, #255	; 0xff
 8007dd0:	5299      	strh	r1, [r3, r2]
 8007dd2:	e01c      	b.n	8007e0e <UART_Start_Receive_IT+0xaa>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2260      	movs	r2, #96	; 0x60
 8007dd8:	217f      	movs	r1, #127	; 0x7f
 8007dda:	5299      	strh	r1, [r3, r2]
 8007ddc:	e017      	b.n	8007e0e <UART_Start_Receive_IT+0xaa>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	2380      	movs	r3, #128	; 0x80
 8007de4:	055b      	lsls	r3, r3, #21
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d10d      	bne.n	8007e06 <UART_Start_Receive_IT+0xa2>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d104      	bne.n	8007dfc <UART_Start_Receive_IT+0x98>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2260      	movs	r2, #96	; 0x60
 8007df6:	217f      	movs	r1, #127	; 0x7f
 8007df8:	5299      	strh	r1, [r3, r2]
 8007dfa:	e008      	b.n	8007e0e <UART_Start_Receive_IT+0xaa>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2260      	movs	r2, #96	; 0x60
 8007e00:	213f      	movs	r1, #63	; 0x3f
 8007e02:	5299      	strh	r1, [r3, r2]
 8007e04:	e003      	b.n	8007e0e <UART_Start_Receive_IT+0xaa>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2260      	movs	r2, #96	; 0x60
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2290      	movs	r2, #144	; 0x90
 8007e12:	2100      	movs	r1, #0
 8007e14:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	228c      	movs	r2, #140	; 0x8c
 8007e1a:	2122      	movs	r1, #34	; 0x22
 8007e1c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e22:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e28:	2301      	movs	r3, #1
 8007e2a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e2e:	f383 8810 	msr	PRIMASK, r3
}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2101      	movs	r1, #1
 8007e40:	430a      	orrs	r2, r1
 8007e42:	609a      	str	r2, [r3, #8]
 8007e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e46:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e4a:	f383 8810 	msr	PRIMASK, r3
}
 8007e4e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e54:	2380      	movs	r3, #128	; 0x80
 8007e56:	059b      	lsls	r3, r3, #22
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d150      	bne.n	8007efe <UART_Start_Receive_IT+0x19a>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2268      	movs	r2, #104	; 0x68
 8007e60:	5a9b      	ldrh	r3, [r3, r2]
 8007e62:	1dba      	adds	r2, r7, #6
 8007e64:	8812      	ldrh	r2, [r2, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d349      	bcc.n	8007efe <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689a      	ldr	r2, [r3, #8]
 8007e6e:	2380      	movs	r3, #128	; 0x80
 8007e70:	015b      	lsls	r3, r3, #5
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d107      	bne.n	8007e86 <UART_Start_Receive_IT+0x122>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d103      	bne.n	8007e86 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4a46      	ldr	r2, [pc, #280]	; (8007f9c <UART_Start_Receive_IT+0x238>)
 8007e82:	675a      	str	r2, [r3, #116]	; 0x74
 8007e84:	e002      	b.n	8007e8c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4a45      	ldr	r2, [pc, #276]	; (8007fa0 <UART_Start_Receive_IT+0x23c>)
 8007e8a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d019      	beq.n	8007ec8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e94:	f3ef 8310 	mrs	r3, PRIMASK
 8007e98:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	f383 8810 	msr	PRIMASK, r3
}
 8007ea8:	46c0      	nop			; (mov r8, r8)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2180      	movs	r1, #128	; 0x80
 8007eb6:	0049      	lsls	r1, r1, #1
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec2:	f383 8810 	msr	PRIMASK, r3
}
 8007ec6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	f383 8810 	msr	PRIMASK, r3
}
 8007edc:	46c0      	nop			; (mov r8, r8)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2180      	movs	r1, #128	; 0x80
 8007eea:	0549      	lsls	r1, r1, #21
 8007eec:	430a      	orrs	r2, r1
 8007eee:	609a      	str	r2, [r3, #8]
 8007ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ef2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	f383 8810 	msr	PRIMASK, r3
}
 8007efa:	46c0      	nop			; (mov r8, r8)
 8007efc:	e047      	b.n	8007f8e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	2380      	movs	r3, #128	; 0x80
 8007f04:	015b      	lsls	r3, r3, #5
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d107      	bne.n	8007f1a <UART_Start_Receive_IT+0x1b6>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4a23      	ldr	r2, [pc, #140]	; (8007fa4 <UART_Start_Receive_IT+0x240>)
 8007f16:	675a      	str	r2, [r3, #116]	; 0x74
 8007f18:	e002      	b.n	8007f20 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4a22      	ldr	r2, [pc, #136]	; (8007fa8 <UART_Start_Receive_IT+0x244>)
 8007f1e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d019      	beq.n	8007f5c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f28:	f3ef 8310 	mrs	r3, PRIMASK
 8007f2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f2e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f32:	2301      	movs	r3, #1
 8007f34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	f383 8810 	msr	PRIMASK, r3
}
 8007f3c:	46c0      	nop			; (mov r8, r8)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2190      	movs	r1, #144	; 0x90
 8007f4a:	0049      	lsls	r1, r1, #1
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	f383 8810 	msr	PRIMASK, r3
}
 8007f5a:	e018      	b.n	8007f8e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f60:	613b      	str	r3, [r7, #16]
  return(result);
 8007f62:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f64:	653b      	str	r3, [r7, #80]	; 0x50
 8007f66:	2301      	movs	r3, #1
 8007f68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f383 8810 	msr	PRIMASK, r3
}
 8007f70:	46c0      	nop			; (mov r8, r8)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2120      	movs	r1, #32
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	f383 8810 	msr	PRIMASK, r3
}
 8007f8c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	0018      	movs	r0, r3
 8007f92:	46bd      	mov	sp, r7
 8007f94:	b018      	add	sp, #96	; 0x60
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	000001ff 	.word	0x000001ff
 8007f9c:	080086d5 	.word	0x080086d5
 8007fa0:	080083e9 	.word	0x080083e9
 8007fa4:	08008275 	.word	0x08008275
 8007fa8:	08008101 	.word	0x08008101

08007fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08e      	sub	sp, #56	; 0x38
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007fb8:	617b      	str	r3, [r7, #20]
  return(result);
 8007fba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	f383 8810 	msr	PRIMASK, r3
}
 8007fc8:	46c0      	nop			; (mov r8, r8)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4926      	ldr	r1, [pc, #152]	; (8008070 <UART_EndRxTransfer+0xc4>)
 8007fd6:	400a      	ands	r2, r1
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	f383 8810 	msr	PRIMASK, r3
}
 8007fe4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fea:	623b      	str	r3, [r7, #32]
  return(result);
 8007fec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fee:	633b      	str	r3, [r7, #48]	; 0x30
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	f383 8810 	msr	PRIMASK, r3
}
 8007ffa:	46c0      	nop			; (mov r8, r8)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	491b      	ldr	r1, [pc, #108]	; (8008074 <UART_EndRxTransfer+0xc8>)
 8008008:	400a      	ands	r2, r1
 800800a:	609a      	str	r2, [r3, #8]
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	f383 8810 	msr	PRIMASK, r3
}
 8008016:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d118      	bne.n	8008052 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008020:	f3ef 8310 	mrs	r3, PRIMASK
 8008024:	60bb      	str	r3, [r7, #8]
  return(result);
 8008026:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800802a:	2301      	movs	r3, #1
 800802c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f383 8810 	msr	PRIMASK, r3
}
 8008034:	46c0      	nop			; (mov r8, r8)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2110      	movs	r1, #16
 8008042:	438a      	bics	r2, r1
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f383 8810 	msr	PRIMASK, r3
}
 8008050:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	228c      	movs	r2, #140	; 0x8c
 8008056:	2120      	movs	r1, #32
 8008058:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	46bd      	mov	sp, r7
 800806a:	b00e      	add	sp, #56	; 0x38
 800806c:	bd80      	pop	{r7, pc}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	fffffedf 	.word	0xfffffedf
 8008074:	effffffe 	.word	0xeffffffe

08008078 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	225e      	movs	r2, #94	; 0x5e
 800808a:	2100      	movs	r1, #0
 800808c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2256      	movs	r2, #86	; 0x56
 8008092:	2100      	movs	r1, #0
 8008094:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	0018      	movs	r0, r3
 800809a:	f7ff fae1 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800809e:	46c0      	nop			; (mov r8, r8)
 80080a0:	46bd      	mov	sp, r7
 80080a2:	b004      	add	sp, #16
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ae:	f3ef 8310 	mrs	r3, PRIMASK
 80080b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80080b4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	2301      	movs	r3, #1
 80080ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f383 8810 	msr	PRIMASK, r3
}
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2140      	movs	r1, #64	; 0x40
 80080d0:	438a      	bics	r2, r1
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f383 8810 	msr	PRIMASK, r3
}
 80080de:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2288      	movs	r2, #136	; 0x88
 80080e4:	2120      	movs	r1, #32
 80080e6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	0018      	movs	r0, r3
 80080f2:	f7ff faad 	bl	8007650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b006      	add	sp, #24
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b090      	sub	sp, #64	; 0x40
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008108:	203e      	movs	r0, #62	; 0x3e
 800810a:	183b      	adds	r3, r7, r0
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	2160      	movs	r1, #96	; 0x60
 8008110:	5a52      	ldrh	r2, [r2, r1]
 8008112:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	228c      	movs	r2, #140	; 0x8c
 8008118:	589b      	ldr	r3, [r3, r2]
 800811a:	2b22      	cmp	r3, #34	; 0x22
 800811c:	d000      	beq.n	8008120 <UART_RxISR_8BIT+0x20>
 800811e:	e09a      	b.n	8008256 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008126:	213c      	movs	r1, #60	; 0x3c
 8008128:	187b      	adds	r3, r7, r1
 800812a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800812c:	187b      	adds	r3, r7, r1
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	b2da      	uxtb	r2, r3
 8008132:	183b      	adds	r3, r7, r0
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	b2d9      	uxtb	r1, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813c:	400a      	ands	r2, r1
 800813e:	b2d2      	uxtb	r2, r2
 8008140:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	225e      	movs	r2, #94	; 0x5e
 8008150:	5a9b      	ldrh	r3, [r3, r2]
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b299      	uxth	r1, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	225e      	movs	r2, #94	; 0x5e
 800815c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	225e      	movs	r2, #94	; 0x5e
 8008162:	5a9b      	ldrh	r3, [r3, r2]
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d000      	beq.n	800816c <UART_RxISR_8BIT+0x6c>
 800816a:	e07c      	b.n	8008266 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800816c:	f3ef 8310 	mrs	r3, PRIMASK
 8008170:	61bb      	str	r3, [r7, #24]
  return(result);
 8008172:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008174:	63bb      	str	r3, [r7, #56]	; 0x38
 8008176:	2301      	movs	r3, #1
 8008178:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f383 8810 	msr	PRIMASK, r3
}
 8008180:	46c0      	nop			; (mov r8, r8)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4938      	ldr	r1, [pc, #224]	; (8008270 <UART_RxISR_8BIT+0x170>)
 800818e:	400a      	ands	r2, r1
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	f383 8810 	msr	PRIMASK, r3
}
 800819c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800819e:	f3ef 8310 	mrs	r3, PRIMASK
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a6:	637b      	str	r3, [r7, #52]	; 0x34
 80081a8:	2301      	movs	r3, #1
 80081aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	f383 8810 	msr	PRIMASK, r3
}
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2101      	movs	r1, #1
 80081c0:	438a      	bics	r2, r1
 80081c2:	609a      	str	r2, [r3, #8]
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ca:	f383 8810 	msr	PRIMASK, r3
}
 80081ce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	228c      	movs	r2, #140	; 0x8c
 80081d4:	2120      	movs	r1, #32
 80081d6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d12f      	bne.n	800824c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f2:	f3ef 8310 	mrs	r3, PRIMASK
 80081f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80081f8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081fa:	633b      	str	r3, [r7, #48]	; 0x30
 80081fc:	2301      	movs	r3, #1
 80081fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f383 8810 	msr	PRIMASK, r3
}
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2110      	movs	r1, #16
 8008214:	438a      	bics	r2, r1
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f383 8810 	msr	PRIMASK, r3
}
 8008222:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	2210      	movs	r2, #16
 800822c:	4013      	ands	r3, r2
 800822e:	2b10      	cmp	r3, #16
 8008230:	d103      	bne.n	800823a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2210      	movs	r2, #16
 8008238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	225c      	movs	r2, #92	; 0x5c
 800823e:	5a9a      	ldrh	r2, [r3, r2]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	0011      	movs	r1, r2
 8008244:	0018      	movs	r0, r3
 8008246:	f7ff fa13 	bl	8007670 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800824a:	e00c      	b.n	8008266 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	0018      	movs	r0, r3
 8008250:	f001 fbf6 	bl	8009a40 <HAL_UART_RxCpltCallback>
}
 8008254:	e007      	b.n	8008266 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	699a      	ldr	r2, [r3, #24]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2108      	movs	r1, #8
 8008262:	430a      	orrs	r2, r1
 8008264:	619a      	str	r2, [r3, #24]
}
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	46bd      	mov	sp, r7
 800826a:	b010      	add	sp, #64	; 0x40
 800826c:	bd80      	pop	{r7, pc}
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	fffffedf 	.word	0xfffffedf

08008274 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b090      	sub	sp, #64	; 0x40
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800827c:	203e      	movs	r0, #62	; 0x3e
 800827e:	183b      	adds	r3, r7, r0
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	2160      	movs	r1, #96	; 0x60
 8008284:	5a52      	ldrh	r2, [r2, r1]
 8008286:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	228c      	movs	r2, #140	; 0x8c
 800828c:	589b      	ldr	r3, [r3, r2]
 800828e:	2b22      	cmp	r3, #34	; 0x22
 8008290:	d000      	beq.n	8008294 <UART_RxISR_16BIT+0x20>
 8008292:	e09a      	b.n	80083ca <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800829a:	213c      	movs	r1, #60	; 0x3c
 800829c:	187b      	adds	r3, r7, r1
 800829e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a4:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80082a6:	187b      	adds	r3, r7, r1
 80082a8:	183a      	adds	r2, r7, r0
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	8812      	ldrh	r2, [r2, #0]
 80082ae:	4013      	ands	r3, r2
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ba:	1c9a      	adds	r2, r3, #2
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	225e      	movs	r2, #94	; 0x5e
 80082c4:	5a9b      	ldrh	r3, [r3, r2]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	b299      	uxth	r1, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	225e      	movs	r2, #94	; 0x5e
 80082d0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	225e      	movs	r2, #94	; 0x5e
 80082d6:	5a9b      	ldrh	r3, [r3, r2]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d000      	beq.n	80082e0 <UART_RxISR_16BIT+0x6c>
 80082de:	e07c      	b.n	80083da <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082e0:	f3ef 8310 	mrs	r3, PRIMASK
 80082e4:	617b      	str	r3, [r7, #20]
  return(result);
 80082e6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082e8:	637b      	str	r3, [r7, #52]	; 0x34
 80082ea:	2301      	movs	r3, #1
 80082ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	f383 8810 	msr	PRIMASK, r3
}
 80082f4:	46c0      	nop			; (mov r8, r8)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4938      	ldr	r1, [pc, #224]	; (80083e4 <UART_RxISR_16BIT+0x170>)
 8008302:	400a      	ands	r2, r1
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008308:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	f383 8810 	msr	PRIMASK, r3
}
 8008310:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008312:	f3ef 8310 	mrs	r3, PRIMASK
 8008316:	623b      	str	r3, [r7, #32]
  return(result);
 8008318:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831a:	633b      	str	r3, [r7, #48]	; 0x30
 800831c:	2301      	movs	r3, #1
 800831e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	f383 8810 	msr	PRIMASK, r3
}
 8008326:	46c0      	nop			; (mov r8, r8)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2101      	movs	r1, #1
 8008334:	438a      	bics	r2, r1
 8008336:	609a      	str	r2, [r3, #8]
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	f383 8810 	msr	PRIMASK, r3
}
 8008342:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	228c      	movs	r2, #140	; 0x8c
 8008348:	2120      	movs	r1, #32
 800834a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835c:	2b01      	cmp	r3, #1
 800835e:	d12f      	bne.n	80083c0 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008366:	f3ef 8310 	mrs	r3, PRIMASK
 800836a:	60bb      	str	r3, [r7, #8]
  return(result);
 800836c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800836e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008370:	2301      	movs	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f383 8810 	msr	PRIMASK, r3
}
 800837a:	46c0      	nop			; (mov r8, r8)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2110      	movs	r1, #16
 8008388:	438a      	bics	r2, r1
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f383 8810 	msr	PRIMASK, r3
}
 8008396:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	2210      	movs	r2, #16
 80083a0:	4013      	ands	r3, r2
 80083a2:	2b10      	cmp	r3, #16
 80083a4:	d103      	bne.n	80083ae <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2210      	movs	r2, #16
 80083ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	225c      	movs	r2, #92	; 0x5c
 80083b2:	5a9a      	ldrh	r2, [r3, r2]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	0011      	movs	r1, r2
 80083b8:	0018      	movs	r0, r3
 80083ba:	f7ff f959 	bl	8007670 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083be:	e00c      	b.n	80083da <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	0018      	movs	r0, r3
 80083c4:	f001 fb3c 	bl	8009a40 <HAL_UART_RxCpltCallback>
}
 80083c8:	e007      	b.n	80083da <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	699a      	ldr	r2, [r3, #24]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2108      	movs	r1, #8
 80083d6:	430a      	orrs	r2, r1
 80083d8:	619a      	str	r2, [r3, #24]
}
 80083da:	46c0      	nop			; (mov r8, r8)
 80083dc:	46bd      	mov	sp, r7
 80083de:	b010      	add	sp, #64	; 0x40
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	fffffedf 	.word	0xfffffedf

080083e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b09c      	sub	sp, #112	; 0x70
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80083f0:	236a      	movs	r3, #106	; 0x6a
 80083f2:	18fb      	adds	r3, r7, r3
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	2160      	movs	r1, #96	; 0x60
 80083f8:	5a52      	ldrh	r2, [r2, r1]
 80083fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	228c      	movs	r2, #140	; 0x8c
 8008418:	589b      	ldr	r3, [r3, r2]
 800841a:	2b22      	cmp	r3, #34	; 0x22
 800841c:	d000      	beq.n	8008420 <UART_RxISR_8BIT_FIFOEN+0x38>
 800841e:	e144      	b.n	80086aa <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008420:	235e      	movs	r3, #94	; 0x5e
 8008422:	18fb      	adds	r3, r7, r3
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	2168      	movs	r1, #104	; 0x68
 8008428:	5a52      	ldrh	r2, [r2, r1]
 800842a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800842c:	e0eb      	b.n	8008606 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008434:	215c      	movs	r1, #92	; 0x5c
 8008436:	187b      	adds	r3, r7, r1
 8008438:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800843a:	187b      	adds	r3, r7, r1
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b2da      	uxtb	r2, r3
 8008440:	236a      	movs	r3, #106	; 0x6a
 8008442:	18fb      	adds	r3, r7, r3
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b2d9      	uxtb	r1, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844c:	400a      	ands	r2, r1
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	225e      	movs	r2, #94	; 0x5e
 8008460:	5a9b      	ldrh	r3, [r3, r2]
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	b299      	uxth	r1, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	225e      	movs	r2, #94	; 0x5e
 800846c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008478:	2207      	movs	r2, #7
 800847a:	4013      	ands	r3, r2
 800847c:	d049      	beq.n	8008512 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800847e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008480:	2201      	movs	r2, #1
 8008482:	4013      	ands	r3, r2
 8008484:	d010      	beq.n	80084a8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8008486:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008488:	2380      	movs	r3, #128	; 0x80
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	4013      	ands	r3, r2
 800848e:	d00b      	beq.n	80084a8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2201      	movs	r2, #1
 8008496:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2290      	movs	r2, #144	; 0x90
 800849c:	589b      	ldr	r3, [r3, r2]
 800849e:	2201      	movs	r2, #1
 80084a0:	431a      	orrs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2190      	movs	r1, #144	; 0x90
 80084a6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084aa:	2202      	movs	r2, #2
 80084ac:	4013      	ands	r3, r2
 80084ae:	d00f      	beq.n	80084d0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80084b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084b2:	2201      	movs	r2, #1
 80084b4:	4013      	ands	r3, r2
 80084b6:	d00b      	beq.n	80084d0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2202      	movs	r2, #2
 80084be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2290      	movs	r2, #144	; 0x90
 80084c4:	589b      	ldr	r3, [r3, r2]
 80084c6:	2204      	movs	r2, #4
 80084c8:	431a      	orrs	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2190      	movs	r1, #144	; 0x90
 80084ce:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d2:	2204      	movs	r2, #4
 80084d4:	4013      	ands	r3, r2
 80084d6:	d00f      	beq.n	80084f8 <UART_RxISR_8BIT_FIFOEN+0x110>
 80084d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084da:	2201      	movs	r2, #1
 80084dc:	4013      	ands	r3, r2
 80084de:	d00b      	beq.n	80084f8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2204      	movs	r2, #4
 80084e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2290      	movs	r2, #144	; 0x90
 80084ec:	589b      	ldr	r3, [r3, r2]
 80084ee:	2202      	movs	r2, #2
 80084f0:	431a      	orrs	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2190      	movs	r1, #144	; 0x90
 80084f6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2290      	movs	r2, #144	; 0x90
 80084fc:	589b      	ldr	r3, [r3, r2]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	0018      	movs	r0, r3
 8008506:	f7ff f8ab 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2290      	movs	r2, #144	; 0x90
 800850e:	2100      	movs	r1, #0
 8008510:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	225e      	movs	r2, #94	; 0x5e
 8008516:	5a9b      	ldrh	r3, [r3, r2]
 8008518:	b29b      	uxth	r3, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d173      	bne.n	8008606 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800851e:	f3ef 8310 	mrs	r3, PRIMASK
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008526:	65bb      	str	r3, [r7, #88]	; 0x58
 8008528:	2301      	movs	r3, #1
 800852a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	f383 8810 	msr	PRIMASK, r3
}
 8008532:	46c0      	nop			; (mov r8, r8)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4961      	ldr	r1, [pc, #388]	; (80086c4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8008540:	400a      	ands	r2, r1
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854a:	f383 8810 	msr	PRIMASK, r3
}
 800854e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008550:	f3ef 8310 	mrs	r3, PRIMASK
 8008554:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008558:	657b      	str	r3, [r7, #84]	; 0x54
 800855a:	2301      	movs	r3, #1
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800855e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008560:	f383 8810 	msr	PRIMASK, r3
}
 8008564:	46c0      	nop			; (mov r8, r8)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4955      	ldr	r1, [pc, #340]	; (80086c8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8008572:	400a      	ands	r2, r1
 8008574:	609a      	str	r2, [r3, #8]
 8008576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008578:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800857a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800857c:	f383 8810 	msr	PRIMASK, r3
}
 8008580:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	228c      	movs	r2, #140	; 0x8c
 8008586:	2120      	movs	r1, #32
 8008588:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859a:	2b01      	cmp	r3, #1
 800859c:	d12f      	bne.n	80085fe <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a4:	f3ef 8310 	mrs	r3, PRIMASK
 80085a8:	623b      	str	r3, [r7, #32]
  return(result);
 80085aa:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ac:	653b      	str	r3, [r7, #80]	; 0x50
 80085ae:	2301      	movs	r3, #1
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	f383 8810 	msr	PRIMASK, r3
}
 80085b8:	46c0      	nop			; (mov r8, r8)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2110      	movs	r1, #16
 80085c6:	438a      	bics	r2, r1
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	f383 8810 	msr	PRIMASK, r3
}
 80085d4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	2210      	movs	r2, #16
 80085de:	4013      	ands	r3, r2
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d103      	bne.n	80085ec <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2210      	movs	r2, #16
 80085ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	225c      	movs	r2, #92	; 0x5c
 80085f0:	5a9a      	ldrh	r2, [r3, r2]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	0011      	movs	r1, r2
 80085f6:	0018      	movs	r0, r3
 80085f8:	f7ff f83a 	bl	8007670 <HAL_UARTEx_RxEventCallback>
 80085fc:	e003      	b.n	8008606 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	0018      	movs	r0, r3
 8008602:	f001 fa1d 	bl	8009a40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008606:	235e      	movs	r3, #94	; 0x5e
 8008608:	18fb      	adds	r3, r7, r3
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d004      	beq.n	800861a <UART_RxISR_8BIT_FIFOEN+0x232>
 8008610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008612:	2220      	movs	r2, #32
 8008614:	4013      	ands	r3, r2
 8008616:	d000      	beq.n	800861a <UART_RxISR_8BIT_FIFOEN+0x232>
 8008618:	e709      	b.n	800842e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800861a:	204e      	movs	r0, #78	; 0x4e
 800861c:	183b      	adds	r3, r7, r0
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	215e      	movs	r1, #94	; 0x5e
 8008622:	5a52      	ldrh	r2, [r2, r1]
 8008624:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008626:	0001      	movs	r1, r0
 8008628:	187b      	adds	r3, r7, r1
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d044      	beq.n	80086ba <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2268      	movs	r2, #104	; 0x68
 8008634:	5a9b      	ldrh	r3, [r3, r2]
 8008636:	187a      	adds	r2, r7, r1
 8008638:	8812      	ldrh	r2, [r2, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d23d      	bcs.n	80086ba <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800863e:	f3ef 8310 	mrs	r3, PRIMASK
 8008642:	60bb      	str	r3, [r7, #8]
  return(result);
 8008644:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008646:	64bb      	str	r3, [r7, #72]	; 0x48
 8008648:	2301      	movs	r3, #1
 800864a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f383 8810 	msr	PRIMASK, r3
}
 8008652:	46c0      	nop			; (mov r8, r8)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	491b      	ldr	r1, [pc, #108]	; (80086cc <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8008660:	400a      	ands	r2, r1
 8008662:	609a      	str	r2, [r3, #8]
 8008664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f383 8810 	msr	PRIMASK, r3
}
 800866e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a17      	ldr	r2, [pc, #92]	; (80086d0 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8008674:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008676:	f3ef 8310 	mrs	r3, PRIMASK
 800867a:	617b      	str	r3, [r7, #20]
  return(result);
 800867c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800867e:	647b      	str	r3, [r7, #68]	; 0x44
 8008680:	2301      	movs	r3, #1
 8008682:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	f383 8810 	msr	PRIMASK, r3
}
 800868a:	46c0      	nop			; (mov r8, r8)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2120      	movs	r1, #32
 8008698:	430a      	orrs	r2, r1
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800869e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	f383 8810 	msr	PRIMASK, r3
}
 80086a6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086a8:	e007      	b.n	80086ba <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2108      	movs	r1, #8
 80086b6:	430a      	orrs	r2, r1
 80086b8:	619a      	str	r2, [r3, #24]
}
 80086ba:	46c0      	nop			; (mov r8, r8)
 80086bc:	46bd      	mov	sp, r7
 80086be:	b01c      	add	sp, #112	; 0x70
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	fffffeff 	.word	0xfffffeff
 80086c8:	effffffe 	.word	0xeffffffe
 80086cc:	efffffff 	.word	0xefffffff
 80086d0:	08008101 	.word	0x08008101

080086d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b09e      	sub	sp, #120	; 0x78
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80086dc:	2372      	movs	r3, #114	; 0x72
 80086de:	18fb      	adds	r3, r7, r3
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	2160      	movs	r1, #96	; 0x60
 80086e4:	5a52      	ldrh	r2, [r2, r1]
 80086e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	228c      	movs	r2, #140	; 0x8c
 8008704:	589b      	ldr	r3, [r3, r2]
 8008706:	2b22      	cmp	r3, #34	; 0x22
 8008708:	d000      	beq.n	800870c <UART_RxISR_16BIT_FIFOEN+0x38>
 800870a:	e144      	b.n	8008996 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800870c:	2366      	movs	r3, #102	; 0x66
 800870e:	18fb      	adds	r3, r7, r3
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	2168      	movs	r1, #104	; 0x68
 8008714:	5a52      	ldrh	r2, [r2, r1]
 8008716:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008718:	e0eb      	b.n	80088f2 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008720:	2164      	movs	r1, #100	; 0x64
 8008722:	187b      	adds	r3, r7, r1
 8008724:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800872a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800872c:	187b      	adds	r3, r7, r1
 800872e:	2272      	movs	r2, #114	; 0x72
 8008730:	18ba      	adds	r2, r7, r2
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	8812      	ldrh	r2, [r2, #0]
 8008736:	4013      	ands	r3, r2
 8008738:	b29a      	uxth	r2, r3
 800873a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800873c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008742:	1c9a      	adds	r2, r3, #2
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	225e      	movs	r2, #94	; 0x5e
 800874c:	5a9b      	ldrh	r3, [r3, r2]
 800874e:	b29b      	uxth	r3, r3
 8008750:	3b01      	subs	r3, #1
 8008752:	b299      	uxth	r1, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	225e      	movs	r2, #94	; 0x5e
 8008758:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008764:	2207      	movs	r2, #7
 8008766:	4013      	ands	r3, r2
 8008768:	d049      	beq.n	80087fe <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800876a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800876c:	2201      	movs	r2, #1
 800876e:	4013      	ands	r3, r2
 8008770:	d010      	beq.n	8008794 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8008772:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008774:	2380      	movs	r3, #128	; 0x80
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	4013      	ands	r3, r2
 800877a:	d00b      	beq.n	8008794 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2201      	movs	r2, #1
 8008782:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2290      	movs	r2, #144	; 0x90
 8008788:	589b      	ldr	r3, [r3, r2]
 800878a:	2201      	movs	r2, #1
 800878c:	431a      	orrs	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2190      	movs	r1, #144	; 0x90
 8008792:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008796:	2202      	movs	r2, #2
 8008798:	4013      	ands	r3, r2
 800879a:	d00f      	beq.n	80087bc <UART_RxISR_16BIT_FIFOEN+0xe8>
 800879c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800879e:	2201      	movs	r2, #1
 80087a0:	4013      	ands	r3, r2
 80087a2:	d00b      	beq.n	80087bc <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2202      	movs	r2, #2
 80087aa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2290      	movs	r2, #144	; 0x90
 80087b0:	589b      	ldr	r3, [r3, r2]
 80087b2:	2204      	movs	r2, #4
 80087b4:	431a      	orrs	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2190      	movs	r1, #144	; 0x90
 80087ba:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087be:	2204      	movs	r2, #4
 80087c0:	4013      	ands	r3, r2
 80087c2:	d00f      	beq.n	80087e4 <UART_RxISR_16BIT_FIFOEN+0x110>
 80087c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087c6:	2201      	movs	r2, #1
 80087c8:	4013      	ands	r3, r2
 80087ca:	d00b      	beq.n	80087e4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2204      	movs	r2, #4
 80087d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2290      	movs	r2, #144	; 0x90
 80087d8:	589b      	ldr	r3, [r3, r2]
 80087da:	2202      	movs	r2, #2
 80087dc:	431a      	orrs	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2190      	movs	r1, #144	; 0x90
 80087e2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2290      	movs	r2, #144	; 0x90
 80087e8:	589b      	ldr	r3, [r3, r2]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	0018      	movs	r0, r3
 80087f2:	f7fe ff35 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2290      	movs	r2, #144	; 0x90
 80087fa:	2100      	movs	r1, #0
 80087fc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	225e      	movs	r2, #94	; 0x5e
 8008802:	5a9b      	ldrh	r3, [r3, r2]
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d173      	bne.n	80088f2 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800880a:	f3ef 8310 	mrs	r3, PRIMASK
 800880e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008814:	2301      	movs	r3, #1
 8008816:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881a:	f383 8810 	msr	PRIMASK, r3
}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4961      	ldr	r1, [pc, #388]	; (80089b0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800882c:	400a      	ands	r2, r1
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008832:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	f383 8810 	msr	PRIMASK, r3
}
 800883a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800883c:	f3ef 8310 	mrs	r3, PRIMASK
 8008840:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008844:	65bb      	str	r3, [r7, #88]	; 0x58
 8008846:	2301      	movs	r3, #1
 8008848:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800884c:	f383 8810 	msr	PRIMASK, r3
}
 8008850:	46c0      	nop			; (mov r8, r8)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689a      	ldr	r2, [r3, #8]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4955      	ldr	r1, [pc, #340]	; (80089b4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800885e:	400a      	ands	r2, r1
 8008860:	609a      	str	r2, [r3, #8]
 8008862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008864:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008868:	f383 8810 	msr	PRIMASK, r3
}
 800886c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	228c      	movs	r2, #140	; 0x8c
 8008872:	2120      	movs	r1, #32
 8008874:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008886:	2b01      	cmp	r3, #1
 8008888:	d12f      	bne.n	80088ea <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008890:	f3ef 8310 	mrs	r3, PRIMASK
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008898:	657b      	str	r3, [r7, #84]	; 0x54
 800889a:	2301      	movs	r3, #1
 800889c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	f383 8810 	msr	PRIMASK, r3
}
 80088a4:	46c0      	nop			; (mov r8, r8)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2110      	movs	r1, #16
 80088b2:	438a      	bics	r2, r1
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	f383 8810 	msr	PRIMASK, r3
}
 80088c0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	2210      	movs	r2, #16
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b10      	cmp	r3, #16
 80088ce:	d103      	bne.n	80088d8 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2210      	movs	r2, #16
 80088d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	225c      	movs	r2, #92	; 0x5c
 80088dc:	5a9a      	ldrh	r2, [r3, r2]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	0011      	movs	r1, r2
 80088e2:	0018      	movs	r0, r3
 80088e4:	f7fe fec4 	bl	8007670 <HAL_UARTEx_RxEventCallback>
 80088e8:	e003      	b.n	80088f2 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	0018      	movs	r0, r3
 80088ee:	f001 f8a7 	bl	8009a40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088f2:	2366      	movs	r3, #102	; 0x66
 80088f4:	18fb      	adds	r3, r7, r3
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <UART_RxISR_16BIT_FIFOEN+0x232>
 80088fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088fe:	2220      	movs	r2, #32
 8008900:	4013      	ands	r3, r2
 8008902:	d000      	beq.n	8008906 <UART_RxISR_16BIT_FIFOEN+0x232>
 8008904:	e709      	b.n	800871a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008906:	2052      	movs	r0, #82	; 0x52
 8008908:	183b      	adds	r3, r7, r0
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	215e      	movs	r1, #94	; 0x5e
 800890e:	5a52      	ldrh	r2, [r2, r1]
 8008910:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008912:	0001      	movs	r1, r0
 8008914:	187b      	adds	r3, r7, r1
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d044      	beq.n	80089a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2268      	movs	r2, #104	; 0x68
 8008920:	5a9b      	ldrh	r3, [r3, r2]
 8008922:	187a      	adds	r2, r7, r1
 8008924:	8812      	ldrh	r2, [r2, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d23d      	bcs.n	80089a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800892a:	f3ef 8310 	mrs	r3, PRIMASK
 800892e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008930:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008934:	2301      	movs	r3, #1
 8008936:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f383 8810 	msr	PRIMASK, r3
}
 800893e:	46c0      	nop			; (mov r8, r8)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	491b      	ldr	r1, [pc, #108]	; (80089b8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800894c:	400a      	ands	r2, r1
 800894e:	609a      	str	r2, [r3, #8]
 8008950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f383 8810 	msr	PRIMASK, r3
}
 800895a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a17      	ldr	r2, [pc, #92]	; (80089bc <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8008960:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008962:	f3ef 8310 	mrs	r3, PRIMASK
 8008966:	61bb      	str	r3, [r7, #24]
  return(result);
 8008968:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800896a:	64bb      	str	r3, [r7, #72]	; 0x48
 800896c:	2301      	movs	r3, #1
 800896e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f383 8810 	msr	PRIMASK, r3
}
 8008976:	46c0      	nop			; (mov r8, r8)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2120      	movs	r1, #32
 8008984:	430a      	orrs	r2, r1
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800898a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	f383 8810 	msr	PRIMASK, r3
}
 8008992:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008994:	e007      	b.n	80089a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	699a      	ldr	r2, [r3, #24]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2108      	movs	r1, #8
 80089a2:	430a      	orrs	r2, r1
 80089a4:	619a      	str	r2, [r3, #24]
}
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	46bd      	mov	sp, r7
 80089aa:	b01e      	add	sp, #120	; 0x78
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	fffffeff 	.word	0xfffffeff
 80089b4:	effffffe 	.word	0xeffffffe
 80089b8:	efffffff 	.word	0xefffffff
 80089bc:	08008275 	.word	0x08008275

080089c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089c8:	46c0      	nop			; (mov r8, r8)
 80089ca:	46bd      	mov	sp, r7
 80089cc:	b002      	add	sp, #8
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089d8:	46c0      	nop			; (mov r8, r8)
 80089da:	46bd      	mov	sp, r7
 80089dc:	b002      	add	sp, #8
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089e8:	46c0      	nop			; (mov r8, r8)
 80089ea:	46bd      	mov	sp, r7
 80089ec:	b002      	add	sp, #8
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2284      	movs	r2, #132	; 0x84
 80089fc:	5c9b      	ldrb	r3, [r3, r2]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d101      	bne.n	8008a06 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a02:	2302      	movs	r3, #2
 8008a04:	e027      	b.n	8008a56 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2284      	movs	r2, #132	; 0x84
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2288      	movs	r2, #136	; 0x88
 8008a12:	2124      	movs	r1, #36	; 0x24
 8008a14:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2101      	movs	r1, #1
 8008a2a:	438a      	bics	r2, r1
 8008a2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4a0b      	ldr	r2, [pc, #44]	; (8008a60 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008a32:	4013      	ands	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2288      	movs	r2, #136	; 0x88
 8008a48:	2120      	movs	r1, #32
 8008a4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2284      	movs	r2, #132	; 0x84
 8008a50:	2100      	movs	r1, #0
 8008a52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	0018      	movs	r0, r3
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	b004      	add	sp, #16
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	46c0      	nop			; (mov r8, r8)
 8008a60:	dfffffff 	.word	0xdfffffff

08008a64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2284      	movs	r2, #132	; 0x84
 8008a72:	5c9b      	ldrb	r3, [r3, r2]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e02e      	b.n	8008ada <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2284      	movs	r2, #132	; 0x84
 8008a80:	2101      	movs	r1, #1
 8008a82:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2288      	movs	r2, #136	; 0x88
 8008a88:	2124      	movs	r1, #36	; 0x24
 8008a8a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	438a      	bics	r2, r1
 8008aa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	08d9      	lsrs	r1, r3, #3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	0018      	movs	r0, r3
 8008abc:	f000 f854 	bl	8008b68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2288      	movs	r2, #136	; 0x88
 8008acc:	2120      	movs	r1, #32
 8008ace:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2284      	movs	r2, #132	; 0x84
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	0018      	movs	r0, r3
 8008adc:	46bd      	mov	sp, r7
 8008ade:	b004      	add	sp, #16
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2284      	movs	r2, #132	; 0x84
 8008af2:	5c9b      	ldrb	r3, [r3, r2]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e02f      	b.n	8008b5c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2284      	movs	r2, #132	; 0x84
 8008b00:	2101      	movs	r1, #1
 8008b02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2288      	movs	r2, #136	; 0x88
 8008b08:	2124      	movs	r1, #36	; 0x24
 8008b0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2101      	movs	r1, #1
 8008b20:	438a      	bics	r2, r1
 8008b22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	4a0e      	ldr	r2, [pc, #56]	; (8008b64 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	0019      	movs	r1, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	f000 f813 	bl	8008b68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2288      	movs	r2, #136	; 0x88
 8008b4e:	2120      	movs	r1, #32
 8008b50:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2284      	movs	r2, #132	; 0x84
 8008b56:	2100      	movs	r1, #0
 8008b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	0018      	movs	r0, r3
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	b004      	add	sp, #16
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	f1ffffff 	.word	0xf1ffffff

08008b68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d108      	bne.n	8008b8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	226a      	movs	r2, #106	; 0x6a
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2268      	movs	r2, #104	; 0x68
 8008b84:	2101      	movs	r1, #1
 8008b86:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b88:	e043      	b.n	8008c12 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b8a:	260f      	movs	r6, #15
 8008b8c:	19bb      	adds	r3, r7, r6
 8008b8e:	2208      	movs	r2, #8
 8008b90:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b92:	200e      	movs	r0, #14
 8008b94:	183b      	adds	r3, r7, r0
 8008b96:	2208      	movs	r2, #8
 8008b98:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	0e5b      	lsrs	r3, r3, #25
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	240d      	movs	r4, #13
 8008ba6:	193b      	adds	r3, r7, r4
 8008ba8:	2107      	movs	r1, #7
 8008baa:	400a      	ands	r2, r1
 8008bac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	0f5b      	lsrs	r3, r3, #29
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	250c      	movs	r5, #12
 8008bba:	197b      	adds	r3, r7, r5
 8008bbc:	2107      	movs	r1, #7
 8008bbe:	400a      	ands	r2, r1
 8008bc0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bc2:	183b      	adds	r3, r7, r0
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	197a      	adds	r2, r7, r5
 8008bc8:	7812      	ldrb	r2, [r2, #0]
 8008bca:	4914      	ldr	r1, [pc, #80]	; (8008c1c <UARTEx_SetNbDataToProcess+0xb4>)
 8008bcc:	5c8a      	ldrb	r2, [r1, r2]
 8008bce:	435a      	muls	r2, r3
 8008bd0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bd2:	197b      	adds	r3, r7, r5
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	4a12      	ldr	r2, [pc, #72]	; (8008c20 <UARTEx_SetNbDataToProcess+0xb8>)
 8008bd8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bda:	0019      	movs	r1, r3
 8008bdc:	f7f7 fb40 	bl	8000260 <__divsi3>
 8008be0:	0003      	movs	r3, r0
 8008be2:	b299      	uxth	r1, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	226a      	movs	r2, #106	; 0x6a
 8008be8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bea:	19bb      	adds	r3, r7, r6
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	193a      	adds	r2, r7, r4
 8008bf0:	7812      	ldrb	r2, [r2, #0]
 8008bf2:	490a      	ldr	r1, [pc, #40]	; (8008c1c <UARTEx_SetNbDataToProcess+0xb4>)
 8008bf4:	5c8a      	ldrb	r2, [r1, r2]
 8008bf6:	435a      	muls	r2, r3
 8008bf8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bfa:	193b      	adds	r3, r7, r4
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	4a08      	ldr	r2, [pc, #32]	; (8008c20 <UARTEx_SetNbDataToProcess+0xb8>)
 8008c00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c02:	0019      	movs	r1, r3
 8008c04:	f7f7 fb2c 	bl	8000260 <__divsi3>
 8008c08:	0003      	movs	r3, r0
 8008c0a:	b299      	uxth	r1, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2268      	movs	r2, #104	; 0x68
 8008c10:	5299      	strh	r1, [r3, r2]
}
 8008c12:	46c0      	nop			; (mov r8, r8)
 8008c14:	46bd      	mov	sp, r7
 8008c16:	b005      	add	sp, #20
 8008c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	0800e3b0 	.word	0x0800e3b0
 8008c20:	0800e3b8 	.word	0x0800e3b8

08008c24 <PIDInit>:
PIDTypeDef gSpeedPID;
PIDTypeDef gSpeedPID2;
PIDTypeDef gCurrentPID;

void PIDInit(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	af00      	add	r7, sp, #0
    gSpeedPID.SetPoint = 0;    // set the goal speed
 8008c28:	4b1e      	ldr	r3, [pc, #120]	; (8008ca4 <PIDInit+0x80>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]
    gSpeedPID.ActualValue = 0; // set the actual speed
 8008c2e:	4b1d      	ldr	r3, [pc, #116]	; (8008ca4 <PIDInit+0x80>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	605a      	str	r2, [r3, #4]

    gSpeedPID.SumError = 0;  // set the sum error
 8008c34:	4b1b      	ldr	r3, [pc, #108]	; (8008ca4 <PIDInit+0x80>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	609a      	str	r2, [r3, #8]
    gSpeedPID.Error = 0;     // set the current error
 8008c3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ca4 <PIDInit+0x80>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	619a      	str	r2, [r3, #24]
    gSpeedPID.LastError = 0; // set the last error
 8008c40:	4b18      	ldr	r3, [pc, #96]	; (8008ca4 <PIDInit+0x80>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	61da      	str	r2, [r3, #28]
    gSpeedPID.PrevError = 0; // set the previous error
 8008c46:	4b17      	ldr	r3, [pc, #92]	; (8008ca4 <PIDInit+0x80>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	621a      	str	r2, [r3, #32]

    gSpeedPID.Proportion = S_KP; // set the proportion
 8008c4c:	4b15      	ldr	r3, [pc, #84]	; (8008ca4 <PIDInit+0x80>)
 8008c4e:	2282      	movs	r2, #130	; 0x82
 8008c50:	05d2      	lsls	r2, r2, #23
 8008c52:	60da      	str	r2, [r3, #12]
    gSpeedPID.Integral = S_KI;   // set the integral
 8008c54:	4b13      	ldr	r3, [pc, #76]	; (8008ca4 <PIDInit+0x80>)
 8008c56:	4a14      	ldr	r2, [pc, #80]	; (8008ca8 <PIDInit+0x84>)
 8008c58:	611a      	str	r2, [r3, #16]
    gSpeedPID.Derivative = S_KD; // set the derivative
 8008c5a:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <PIDInit+0x80>)
 8008c5c:	22fc      	movs	r2, #252	; 0xfc
 8008c5e:	0592      	lsls	r2, r2, #22
 8008c60:	615a      	str	r2, [r3, #20]

    gSpeedPID2.SetPoint = 0;    // set the goal speed
 8008c62:	4b12      	ldr	r3, [pc, #72]	; (8008cac <PIDInit+0x88>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
    gSpeedPID2.ActualValue = 0; // set the actual speed
 8008c68:	4b10      	ldr	r3, [pc, #64]	; (8008cac <PIDInit+0x88>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	605a      	str	r2, [r3, #4]

    gSpeedPID2.SumError = 0;  // set the sum error
 8008c6e:	4b0f      	ldr	r3, [pc, #60]	; (8008cac <PIDInit+0x88>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	609a      	str	r2, [r3, #8]
    gSpeedPID2.Error = 0;     // set the current error
 8008c74:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <PIDInit+0x88>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	619a      	str	r2, [r3, #24]
    gSpeedPID2.LastError = 0; // set the last error
 8008c7a:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <PIDInit+0x88>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	61da      	str	r2, [r3, #28]
    gSpeedPID2.PrevError = 0; // set the previous error
 8008c80:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <PIDInit+0x88>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	621a      	str	r2, [r3, #32]

    gSpeedPID2.Proportion = S_KP; // set the proportion
 8008c86:	4b09      	ldr	r3, [pc, #36]	; (8008cac <PIDInit+0x88>)
 8008c88:	2282      	movs	r2, #130	; 0x82
 8008c8a:	05d2      	lsls	r2, r2, #23
 8008c8c:	60da      	str	r2, [r3, #12]
    gSpeedPID2.Integral = S_KI;   // set the integral
 8008c8e:	4b07      	ldr	r3, [pc, #28]	; (8008cac <PIDInit+0x88>)
 8008c90:	4a05      	ldr	r2, [pc, #20]	; (8008ca8 <PIDInit+0x84>)
 8008c92:	611a      	str	r2, [r3, #16]
    gSpeedPID2.Derivative = S_KD; // set the derivative
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <PIDInit+0x88>)
 8008c96:	22fc      	movs	r2, #252	; 0xfc
 8008c98:	0592      	lsls	r2, r2, #22
 8008c9a:	615a      	str	r2, [r3, #20]

}
 8008c9c:	46c0      	nop			; (mov r8, r8)
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	46c0      	nop			; (mov r8, r8)
 8008ca4:	200004d0 	.word	0x200004d0
 8008ca8:	3e99999a 	.word	0x3e99999a
 8008cac:	200004f4 	.word	0x200004f4

08008cb0 <setPIDparam>:

void setPIDparam(int argc, char *argv[])
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
    if (argc != 4)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d004      	beq.n	8008cca <setPIDparam+0x1a>
    {
        printf("[ERROR]: Invalid number of argument\r\n");
 8008cc0:	4b1d      	ldr	r3, [pc, #116]	; (8008d38 <setPIDparam+0x88>)
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	f002 faea 	bl	800b29c <puts>
        return;
 8008cc8:	e032      	b.n	8008d30 <setPIDparam+0x80>
    }
    float kp = atof(argv[1]);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f000 ff05 	bl	8009ae0 <atof>
 8008cd6:	0002      	movs	r2, r0
 8008cd8:	000b      	movs	r3, r1
 8008cda:	0010      	movs	r0, r2
 8008cdc:	0019      	movs	r1, r3
 8008cde:	f7fa f9ed 	bl	80030bc <__aeabi_d2f>
 8008ce2:	1c03      	adds	r3, r0, #0
 8008ce4:	617b      	str	r3, [r7, #20]
    float ki = atof(argv[2]);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	3308      	adds	r3, #8
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	0018      	movs	r0, r3
 8008cee:	f000 fef7 	bl	8009ae0 <atof>
 8008cf2:	0002      	movs	r2, r0
 8008cf4:	000b      	movs	r3, r1
 8008cf6:	0010      	movs	r0, r2
 8008cf8:	0019      	movs	r1, r3
 8008cfa:	f7fa f9df 	bl	80030bc <__aeabi_d2f>
 8008cfe:	1c03      	adds	r3, r0, #0
 8008d00:	613b      	str	r3, [r7, #16]
    float kd = atof(argv[3]);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	330c      	adds	r3, #12
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	0018      	movs	r0, r3
 8008d0a:	f000 fee9 	bl	8009ae0 <atof>
 8008d0e:	0002      	movs	r2, r0
 8008d10:	000b      	movs	r3, r1
 8008d12:	0010      	movs	r0, r2
 8008d14:	0019      	movs	r1, r3
 8008d16:	f7fa f9d1 	bl	80030bc <__aeabi_d2f>
 8008d1a:	1c03      	adds	r3, r0, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
    gSpeedPID.Proportion = kp;
 8008d1e:	4b07      	ldr	r3, [pc, #28]	; (8008d3c <setPIDparam+0x8c>)
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	60da      	str	r2, [r3, #12]
    gSpeedPID.Integral = ki;
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <setPIDparam+0x8c>)
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	611a      	str	r2, [r3, #16]
    gSpeedPID.Derivative = kd;
 8008d2a:	4b04      	ldr	r3, [pc, #16]	; (8008d3c <setPIDparam+0x8c>)
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	615a      	str	r2, [r3, #20]
   // printf("[INFO]: Set PID param to kp: %f, ki: %f, kd: %f\r\n", kp, ki, kd);
}
 8008d30:	46bd      	mov	sp, r7
 8008d32:	b006      	add	sp, #24
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	46c0      	nop			; (mov r8, r8)
 8008d38:	0800e0e0 	.word	0x0800e0e0
 8008d3c:	200004d0 	.word	0x200004d0

08008d40 <incrementPIDControl>:

float incrementPIDControl(PIDTypeDef *pid, float feedbackValue)
{
 8008d40:	b5b0      	push	{r4, r5, r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
                        + (pid->Derivative * (pid->Error - 2 * pid->LastError + pid->PrevError)); // derivative term
    pid->PrevError = pid->LastError;                                                              // save the previous error
    pid->LastError = pid->Error;  */                                                                 // save the last error
//（location PID）

    pid->Error = (float)(pid->SetPoint - feedbackValue);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	1c18      	adds	r0, r3, #0
 8008d52:	f7f8 f911 	bl	8000f78 <__aeabi_fsub>
 8008d56:	1c03      	adds	r3, r0, #0
 8008d58:	1c1a      	adds	r2, r3, #0
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	619a      	str	r2, [r3, #24]
    pid->SumError += pid->Error;                                            // calculate the sum error
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	689a      	ldr	r2, [r3, #8]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	1c19      	adds	r1, r3, #0
 8008d68:	1c10      	adds	r0, r2, #0
 8008d6a:	f7f7 fc4d 	bl	8000608 <__aeabi_fadd>
 8008d6e:	1c03      	adds	r3, r0, #0
 8008d70:	1c1a      	adds	r2, r3, #0
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	609a      	str	r2, [r3, #8]
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	1c19      	adds	r1, r3, #0
 8008d80:	1c10      	adds	r0, r2, #0
 8008d82:	f7f7 ffab 	bl	8000cdc <__aeabi_fmul>
 8008d86:	1c03      	adds	r3, r0, #0
 8008d88:	1c1c      	adds	r4, r3, #0
                       + (pid->Integral * pid->SumError)                    // integral term
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	1c19      	adds	r1, r3, #0
 8008d94:	1c10      	adds	r0, r2, #0
 8008d96:	f7f7 ffa1 	bl	8000cdc <__aeabi_fmul>
 8008d9a:	1c03      	adds	r3, r0, #0
 8008d9c:	1c19      	adds	r1, r3, #0
 8008d9e:	1c20      	adds	r0, r4, #0
 8008da0:	f7f7 fc32 	bl	8000608 <__aeabi_fadd>
 8008da4:	1c03      	adds	r3, r0, #0
 8008da6:	1c1d      	adds	r5, r3, #0
                       + (pid->Derivative * (pid->Error - pid->LastError)); // derivative term
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	695c      	ldr	r4, [r3, #20]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699a      	ldr	r2, [r3, #24]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	1c19      	adds	r1, r3, #0
 8008db6:	1c10      	adds	r0, r2, #0
 8008db8:	f7f8 f8de 	bl	8000f78 <__aeabi_fsub>
 8008dbc:	1c03      	adds	r3, r0, #0
 8008dbe:	1c19      	adds	r1, r3, #0
 8008dc0:	1c20      	adds	r0, r4, #0
 8008dc2:	f7f7 ff8b 	bl	8000cdc <__aeabi_fmul>
 8008dc6:	1c03      	adds	r3, r0, #0
 8008dc8:	1c19      	adds	r1, r3, #0
 8008dca:	1c28      	adds	r0, r5, #0
 8008dcc:	f7f7 fc1c 	bl	8000608 <__aeabi_fadd>
 8008dd0:	1c03      	adds	r3, r0, #0
 8008dd2:	1c1a      	adds	r2, r3, #0
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	605a      	str	r2, [r3, #4]
    pid->LastError = pid->Error;                                            // save the last error
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	699a      	ldr	r2, [r3, #24]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	61da      	str	r2, [r3, #28]

   //  printf("[INFO]: pid->ActualValue: %f\n", pid->ActualValue);
    return (float)pid->ActualValue; // return the expected value after PID control calculation
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
}
 8008de4:	1c18      	adds	r0, r3, #0
 8008de6:	46bd      	mov	sp, r7
 8008de8:	b002      	add	sp, #8
 8008dea:	bdb0      	pop	{r4, r5, r7, pc}

08008dec <incrementPIDControl2>:

float incrementPIDControl2(PIDTypeDef *pid, float feedbackValue)
{
 8008dec:	b5b0      	push	{r4, r5, r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
                        + (pid->Derivative * (pid->Error - 2 * pid->LastError + pid->PrevError)); // derivative term
    pid->PrevError = pid->LastError;                                                              // save the previous error
    pid->LastError = pid->Error;  */                                                                 // save the last error
//（location PID）

    pid->Error = (float)(pid->SetPoint - feedbackValue);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	1c18      	adds	r0, r3, #0
 8008dfe:	f7f8 f8bb 	bl	8000f78 <__aeabi_fsub>
 8008e02:	1c03      	adds	r3, r0, #0
 8008e04:	1c1a      	adds	r2, r3, #0
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	619a      	str	r2, [r3, #24]
    pid->SumError += pid->Error;                                            // calculate the sum error
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689a      	ldr	r2, [r3, #8]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	1c19      	adds	r1, r3, #0
 8008e14:	1c10      	adds	r0, r2, #0
 8008e16:	f7f7 fbf7 	bl	8000608 <__aeabi_fadd>
 8008e1a:	1c03      	adds	r3, r0, #0
 8008e1c:	1c1a      	adds	r2, r3, #0
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	609a      	str	r2, [r3, #8]
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	1c19      	adds	r1, r3, #0
 8008e2c:	1c10      	adds	r0, r2, #0
 8008e2e:	f7f7 ff55 	bl	8000cdc <__aeabi_fmul>
 8008e32:	1c03      	adds	r3, r0, #0
 8008e34:	1c1c      	adds	r4, r3, #0
                       + (pid->Integral * pid->SumError)                    // integral term
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	1c19      	adds	r1, r3, #0
 8008e40:	1c10      	adds	r0, r2, #0
 8008e42:	f7f7 ff4b 	bl	8000cdc <__aeabi_fmul>
 8008e46:	1c03      	adds	r3, r0, #0
 8008e48:	1c19      	adds	r1, r3, #0
 8008e4a:	1c20      	adds	r0, r4, #0
 8008e4c:	f7f7 fbdc 	bl	8000608 <__aeabi_fadd>
 8008e50:	1c03      	adds	r3, r0, #0
 8008e52:	1c1d      	adds	r5, r3, #0
                       + (pid->Derivative * (pid->Error - pid->LastError)); // derivative term
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	695c      	ldr	r4, [r3, #20]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	699a      	ldr	r2, [r3, #24]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	1c19      	adds	r1, r3, #0
 8008e62:	1c10      	adds	r0, r2, #0
 8008e64:	f7f8 f888 	bl	8000f78 <__aeabi_fsub>
 8008e68:	1c03      	adds	r3, r0, #0
 8008e6a:	1c19      	adds	r1, r3, #0
 8008e6c:	1c20      	adds	r0, r4, #0
 8008e6e:	f7f7 ff35 	bl	8000cdc <__aeabi_fmul>
 8008e72:	1c03      	adds	r3, r0, #0
 8008e74:	1c19      	adds	r1, r3, #0
 8008e76:	1c28      	adds	r0, r5, #0
 8008e78:	f7f7 fbc6 	bl	8000608 <__aeabi_fadd>
 8008e7c:	1c03      	adds	r3, r0, #0
 8008e7e:	1c1a      	adds	r2, r3, #0
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	605a      	str	r2, [r3, #4]
    pid->LastError = pid->Error;                                            // save the last error
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699a      	ldr	r2, [r3, #24]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	61da      	str	r2, [r3, #28]

   //  printf("[INFO]: pid->ActualValue: %f\n", pid->ActualValue);
    return (float)pid->ActualValue; // return the expected value after PID control calculation
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
}
 8008e90:	1c18      	adds	r0, r3, #0
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b002      	add	sp, #8
 8008e96:	bdb0      	pop	{r4, r5, r7, pc}

08008e98 <stopMotor>:
/**
 * @brief stop the motor by stop the PWM with the command: stop
 *
 */
void stopMotor(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <stopMotor+0x38>)
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7fc fd45 	bl	8005930 <HAL_TIM_PWM_Stop>
   // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <stopMotor+0x38>)
 8008ea8:	2104      	movs	r1, #4
 8008eaa:	0018      	movs	r0, r3
 8008eac:	f7fc fd40 	bl	8005930 <HAL_TIM_PWM_Stop>
   // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8008eb0:	4b08      	ldr	r3, [pc, #32]	; (8008ed4 <stopMotor+0x3c>)
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f7fc fd3b 	bl	8005930 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8008eba:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <stopMotor+0x40>)
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	f7fc fd36 	bl	8005930 <HAL_TIM_PWM_Stop>
    gMotorData.state = MOTOR_STATE_STOP;
 8008ec4:	4b05      	ldr	r3, [pc, #20]	; (8008edc <stopMotor+0x44>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
}
 8008eca:	46c0      	nop			; (mov r8, r8)
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20000354 	.word	0x20000354
 8008ed4:	200003a0 	.word	0x200003a0
 8008ed8:	200003ec 	.word	0x200003ec
 8008edc:	20000530 	.word	0x20000530

08008ee0 <startMotor>:
/**
 * @brief start the motor by start the PWM with the command: start
 *
 */
void startMotor(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8008ee4:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <startMotor+0x34>)
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f7fc fc3d 	bl	8005768 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8008eee:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <startMotor+0x34>)
 8008ef0:	2104      	movs	r1, #4
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	f7fc fc38 	bl	8005768 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8008ef8:	4b07      	ldr	r3, [pc, #28]	; (8008f18 <startMotor+0x38>)
 8008efa:	2100      	movs	r1, #0
 8008efc:	0018      	movs	r0, r3
 8008efe:	f7fc fc33 	bl	8005768 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8008f02:	4b06      	ldr	r3, [pc, #24]	; (8008f1c <startMotor+0x3c>)
 8008f04:	2100      	movs	r1, #0
 8008f06:	0018      	movs	r0, r3
 8008f08:	f7fc fc2e 	bl	8005768 <HAL_TIM_PWM_Start>

}
 8008f0c:	46c0      	nop			; (mov r8, r8)
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	20000354 	.word	0x20000354
 8008f18:	200003a0 	.word	0x200003a0
 8008f1c:	200003ec 	.word	0x200003ec

08008f20 <setSpeed>:
 *
 * @param numberofCmdArg the number of command argument
 * @param cmdArg the command argument
 */
void setSpeed(int numberofCmdArg, char *cmdArg[])
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
    speedProcess(numberofCmdArg, cmdArg);
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	0011      	movs	r1, r2
 8008f30:	0018      	movs	r0, r3
 8008f32:	f000 fc15 	bl	8009760 <speedProcess>
    gMotorData.state = MOTOR_STATE_START;
 8008f36:	4b03      	ldr	r3, [pc, #12]	; (8008f44 <setSpeed+0x24>)
 8008f38:	2201      	movs	r2, #1
 8008f3a:	701a      	strb	r2, [r3, #0]
}
 8008f3c:	46c0      	nop			; (mov r8, r8)
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	b002      	add	sp, #8
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	20000530 	.word	0x20000530

08008f48 <dcMotorInit>:

// founction to init the motor
void dcMotorInit(void)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0
    gencodeSpeed.encode_now = 0;
 8008f4c:	4b1c      	ldr	r3, [pc, #112]	; (8008fc0 <dcMotorInit+0x78>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	605a      	str	r2, [r3, #4]
    gencodeSpeed.encode_old = 0;
 8008f52:	4b1b      	ldr	r3, [pc, #108]	; (8008fc0 <dcMotorInit+0x78>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]
    gencodeSpeed.speed = 0;
 8008f58:	4b19      	ldr	r3, [pc, #100]	; (8008fc0 <dcMotorInit+0x78>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	609a      	str	r2, [r3, #8]
    gMotorData.state = MOTOR_STATE_STOP;
 8008f5e:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <dcMotorInit+0x7c>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	701a      	strb	r2, [r3, #0]
    gMotorData.direction = 1;
 8008f64:	4b17      	ldr	r3, [pc, #92]	; (8008fc4 <dcMotorInit+0x7c>)
 8008f66:	2201      	movs	r2, #1
 8008f68:	705a      	strb	r2, [r3, #1]
    gMotorData.current = 0;
 8008f6a:	4b16      	ldr	r3, [pc, #88]	; (8008fc4 <dcMotorInit+0x7c>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	605a      	str	r2, [r3, #4]
    gMotorData.voltage = 0;
 8008f70:	4b14      	ldr	r3, [pc, #80]	; (8008fc4 <dcMotorInit+0x7c>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	609a      	str	r2, [r3, #8]
    gMotorData.speed = 0;
 8008f76:	4b13      	ldr	r3, [pc, #76]	; (8008fc4 <dcMotorInit+0x7c>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	60da      	str	r2, [r3, #12]
    gMotorData.motorPWM = 0;
 8008f7c:	4b11      	ldr	r3, [pc, #68]	; (8008fc4 <dcMotorInit+0x7c>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	611a      	str	r2, [r3, #16]
    gencodeSpeed2.encode_now = 0;
 8008f82:	4b11      	ldr	r3, [pc, #68]	; (8008fc8 <dcMotorInit+0x80>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	605a      	str	r2, [r3, #4]
    gencodeSpeed2.encode_old = 0;
 8008f88:	4b0f      	ldr	r3, [pc, #60]	; (8008fc8 <dcMotorInit+0x80>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
    gencodeSpeed2.speed = 0;
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <dcMotorInit+0x80>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	609a      	str	r2, [r3, #8]
    gMotorData2.state = MOTOR_STATE_STOP;
 8008f94:	4b0d      	ldr	r3, [pc, #52]	; (8008fcc <dcMotorInit+0x84>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
    gMotorData2.direction = 1;
 8008f9a:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <dcMotorInit+0x84>)
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	705a      	strb	r2, [r3, #1]
    gMotorData2.current = 0;
 8008fa0:	4b0a      	ldr	r3, [pc, #40]	; (8008fcc <dcMotorInit+0x84>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	605a      	str	r2, [r3, #4]
    gMotorData2.voltage = 0;
 8008fa6:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <dcMotorInit+0x84>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	609a      	str	r2, [r3, #8]
    gMotorData2.speed = 0;
 8008fac:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <dcMotorInit+0x84>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	60da      	str	r2, [r3, #12]
    gMotorData2.motorPWM = 0;
 8008fb2:	4b06      	ldr	r3, [pc, #24]	; (8008fcc <dcMotorInit+0x84>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	611a      	str	r2, [r3, #16]
}
 8008fb8:	46c0      	nop			; (mov r8, r8)
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	46c0      	nop			; (mov r8, r8)
 8008fc0:	20000518 	.word	0x20000518
 8008fc4:	20000530 	.word	0x20000530
 8008fc8:	20000524 	.word	0x20000524
 8008fcc:	20000544 	.word	0x20000544

08008fd0 <speedCompute>:
float speedArray2[10] = {0.0};

int32_t speedArrayFilterIndex = 0;
int32_t speedArrayFilterIndex2 = 0;
void speedCompute(int encode_now, uint8_t computePerms)
{
 8008fd0:	b5b0      	push	{r4, r5, r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	000a      	movs	r2, r1
 8008fda:	1cfb      	adds	r3, r7, #3
 8008fdc:	701a      	strb	r2, [r3, #0]
    if (speedComputeCount == computePerms)
 8008fde:	1cfb      	adds	r3, r7, #3
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	4b68      	ldr	r3, [pc, #416]	; (8009184 <speedCompute+0x1b4>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d000      	beq.n	8008fec <speedCompute+0x1c>
 8008fea:	e0c2      	b.n	8009172 <speedCompute+0x1a2>
    {
        gencodeSpeed.encode_now = encode_now;
 8008fec:	4b66      	ldr	r3, [pc, #408]	; (8009188 <speedCompute+0x1b8>)
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	605a      	str	r2, [r3, #4]
   //     printf("now:%d\r\n",gencodeSpeed.encode_now);
  //      printf("gencodeSpeed.encode_old:%d\r\n",gencodeSpeed.encode_old);
        gencodeSpeed.speed = (encode_now - gencodeSpeed.encode_old);
 8008ff2:	4b65      	ldr	r3, [pc, #404]	; (8009188 <speedCompute+0x1b8>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	0018      	movs	r0, r3
 8008ffc:	f7f8 f97c 	bl	80012f8 <__aeabi_i2f>
 8009000:	1c02      	adds	r2, r0, #0
 8009002:	4b61      	ldr	r3, [pc, #388]	; (8009188 <speedCompute+0x1b8>)
 8009004:	609a      	str	r2, [r3, #8]
    //    printf("avant:%f\r\n", gMotorData.speed);
      //  printf("123\n");
//SPEED_COMPUTE_PER_S /  1s
        //calculte speed motor (tour/minute) : g_encode.speed * ((1000 / 100ms) *60 )/44/20  maxspeed （300*2pi/60）  现在是rpm 每分钟
       speedArray[speedArrayFilterIndex++] = (float)(gencodeSpeed.speed * (SPEED_COMPUTE_PER_S /computePerms )* 60  / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RADGEAR_RATIO
 8009006:	4b60      	ldr	r3, [pc, #384]	; (8009188 <speedCompute+0x1b8>)
 8009008:	689c      	ldr	r4, [r3, #8]
 800900a:	1cfb      	adds	r3, r7, #3
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	0019      	movs	r1, r3
 8009010:	200a      	movs	r0, #10
 8009012:	f7f7 f925 	bl	8000260 <__divsi3>
 8009016:	0003      	movs	r3, r0
 8009018:	0018      	movs	r0, r3
 800901a:	f7f8 f96d 	bl	80012f8 <__aeabi_i2f>
 800901e:	1c03      	adds	r3, r0, #0
 8009020:	1c19      	adds	r1, r3, #0
 8009022:	1c20      	adds	r0, r4, #0
 8009024:	f7f7 fe5a 	bl	8000cdc <__aeabi_fmul>
 8009028:	1c03      	adds	r3, r0, #0
 800902a:	4958      	ldr	r1, [pc, #352]	; (800918c <speedCompute+0x1bc>)
 800902c:	1c18      	adds	r0, r3, #0
 800902e:	f7f7 fe55 	bl	8000cdc <__aeabi_fmul>
 8009032:	1c03      	adds	r3, r0, #0
 8009034:	2181      	movs	r1, #129	; 0x81
 8009036:	05c9      	lsls	r1, r1, #23
 8009038:	1c18      	adds	r0, r3, #0
 800903a:	f7f7 fc85 	bl	8000948 <__aeabi_fdiv>
 800903e:	1c03      	adds	r3, r0, #0
 8009040:	4953      	ldr	r1, [pc, #332]	; (8009190 <speedCompute+0x1c0>)
 8009042:	1c18      	adds	r0, r3, #0
 8009044:	f7f7 fc80 	bl	8000948 <__aeabi_fdiv>
 8009048:	1c03      	adds	r3, r0, #0
 800904a:	1c18      	adds	r0, r3, #0
 800904c:	4b51      	ldr	r3, [pc, #324]	; (8009194 <speedCompute+0x1c4>)
 800904e:	681c      	ldr	r4, [r3, #0]
 8009050:	1c62      	adds	r2, r4, #1
 8009052:	4b50      	ldr	r3, [pc, #320]	; (8009194 <speedCompute+0x1c4>)
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	4950      	ldr	r1, [pc, #320]	; (8009198 <speedCompute+0x1c8>)
 8009058:	f7f7 fc76 	bl	8000948 <__aeabi_fdiv>
 800905c:	1c03      	adds	r3, r0, #0
 800905e:	1c19      	adds	r1, r3, #0
 8009060:	4b4e      	ldr	r3, [pc, #312]	; (800919c <speedCompute+0x1cc>)
 8009062:	00a2      	lsls	r2, r4, #2
 8009064:	50d1      	str	r1, [r2, r3]
  //     gMotorData.speed = (float)(gencodeSpeed.speed * (SPEED_COMPUTE_PER_S / computePerms ) / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RAD
      //  printf("speedcompute:%f\r\n", gMotorData.speed);  //gMotorData.speed
        gencodeSpeed.encode_old = gencodeSpeed.encode_now;
 8009066:	4b48      	ldr	r3, [pc, #288]	; (8009188 <speedCompute+0x1b8>)
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	4b47      	ldr	r3, [pc, #284]	; (8009188 <speedCompute+0x1b8>)
 800906c:	601a      	str	r2, [r3, #0]
       //  after 10 times of speed calculation, filter the speed data
        if (speedArrayFilterIndex == 10)
 800906e:	4b49      	ldr	r3, [pc, #292]	; (8009194 <speedCompute+0x1c4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b0a      	cmp	r3, #10
 8009074:	d000      	beq.n	8009078 <speedCompute+0xa8>
 8009076:	e079      	b.n	800916c <speedCompute+0x19c>
        {
            // bubble sort
            float temp = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < 10; i++)
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]
 8009080:	e030      	b.n	80090e4 <speedCompute+0x114>
            {
                for (int j = 0; j < 10 - i - 1; j++)
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	e024      	b.n	80090d2 <speedCompute+0x102>
                {
                    if (speedArray[j] > speedArray[j + 1])
 8009088:	4b44      	ldr	r3, [pc, #272]	; (800919c <speedCompute+0x1cc>)
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	0092      	lsls	r2, r2, #2
 800908e:	58d0      	ldr	r0, [r2, r3]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	4b41      	ldr	r3, [pc, #260]	; (800919c <speedCompute+0x1cc>)
 8009096:	0092      	lsls	r2, r2, #2
 8009098:	58d3      	ldr	r3, [r2, r3]
 800909a:	1c19      	adds	r1, r3, #0
 800909c:	f7f7 fa30 	bl	8000500 <__aeabi_fcmpgt>
 80090a0:	1e03      	subs	r3, r0, #0
 80090a2:	d013      	beq.n	80090cc <speedCompute+0xfc>
                    {
                        temp = speedArray[j];
 80090a4:	4b3d      	ldr	r3, [pc, #244]	; (800919c <speedCompute+0x1cc>)
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	0092      	lsls	r2, r2, #2
 80090aa:	58d3      	ldr	r3, [r2, r3]
 80090ac:	617b      	str	r3, [r7, #20]
                        speedArray[j] = speedArray[j + 1];
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	4b3a      	ldr	r3, [pc, #232]	; (800919c <speedCompute+0x1cc>)
 80090b4:	0092      	lsls	r2, r2, #2
 80090b6:	58d1      	ldr	r1, [r2, r3]
 80090b8:	4b38      	ldr	r3, [pc, #224]	; (800919c <speedCompute+0x1cc>)
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	0092      	lsls	r2, r2, #2
 80090be:	50d1      	str	r1, [r2, r3]
                        speedArray[j + 1] = temp;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	4b35      	ldr	r3, [pc, #212]	; (800919c <speedCompute+0x1cc>)
 80090c6:	0092      	lsls	r2, r2, #2
 80090c8:	6979      	ldr	r1, [r7, #20]
 80090ca:	50d1      	str	r1, [r2, r3]
                for (int j = 0; j < 10 - i - 1; j++)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	2209      	movs	r2, #9
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	429a      	cmp	r2, r3
 80090dc:	dbd4      	blt.n	8009088 <speedCompute+0xb8>
            for (int i = 0; i < 10; i++)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3301      	adds	r3, #1
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	2b09      	cmp	r3, #9
 80090e8:	ddcb      	ble.n	8009082 <speedCompute+0xb2>
                    }
                }
            }

            temp = 0.0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
            // using the middle 6 data to calculate the average value
            for (int i = 2; i < 8; i++)
 80090ee:	2302      	movs	r3, #2
 80090f0:	60bb      	str	r3, [r7, #8]
 80090f2:	e00c      	b.n	800910e <speedCompute+0x13e>
            {
                temp += speedArray[i];
 80090f4:	4b29      	ldr	r3, [pc, #164]	; (800919c <speedCompute+0x1cc>)
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	0092      	lsls	r2, r2, #2
 80090fa:	58d3      	ldr	r3, [r2, r3]
 80090fc:	1c19      	adds	r1, r3, #0
 80090fe:	6978      	ldr	r0, [r7, #20]
 8009100:	f7f7 fa82 	bl	8000608 <__aeabi_fadd>
 8009104:	1c03      	adds	r3, r0, #0
 8009106:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < 8; i++)
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	3301      	adds	r3, #1
 800910c:	60bb      	str	r3, [r7, #8]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b07      	cmp	r3, #7
 8009112:	ddef      	ble.n	80090f4 <speedCompute+0x124>
            }
            // calculate the average value
            temp = temp / 6;
 8009114:	4922      	ldr	r1, [pc, #136]	; (80091a0 <speedCompute+0x1d0>)
 8009116:	6978      	ldr	r0, [r7, #20]
 8009118:	f7f7 fc16 	bl	8000948 <__aeabi_fdiv>
 800911c:	1c03      	adds	r3, r0, #0
 800911e:	617b      	str	r3, [r7, #20]
            // low pass filter
            // Y(n)= qX(n) + (1-q)Y(n-1)
            // X(n) is the current input, Y(n) is the current output, Y(n-1) is the previous output, and q is the filter factor.
            // The larger the q, the stronger the filtering effect, but the slower the response.
            gMotorData.speed = (float)((double)temp * 0.5 + (double)gMotorData.speed * 0.5);
 8009120:	6978      	ldr	r0, [r7, #20]
 8009122:	f7f9 ff83 	bl	800302c <__aeabi_f2d>
 8009126:	2200      	movs	r2, #0
 8009128:	4b1e      	ldr	r3, [pc, #120]	; (80091a4 <speedCompute+0x1d4>)
 800912a:	f7f9 f891 	bl	8002250 <__aeabi_dmul>
 800912e:	0002      	movs	r2, r0
 8009130:	000b      	movs	r3, r1
 8009132:	0014      	movs	r4, r2
 8009134:	001d      	movs	r5, r3
 8009136:	4b1c      	ldr	r3, [pc, #112]	; (80091a8 <speedCompute+0x1d8>)
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	1c18      	adds	r0, r3, #0
 800913c:	f7f9 ff76 	bl	800302c <__aeabi_f2d>
 8009140:	2200      	movs	r2, #0
 8009142:	4b18      	ldr	r3, [pc, #96]	; (80091a4 <speedCompute+0x1d4>)
 8009144:	f7f9 f884 	bl	8002250 <__aeabi_dmul>
 8009148:	0002      	movs	r2, r0
 800914a:	000b      	movs	r3, r1
 800914c:	0020      	movs	r0, r4
 800914e:	0029      	movs	r1, r5
 8009150:	f7f8 f924 	bl	800139c <__aeabi_dadd>
 8009154:	0002      	movs	r2, r0
 8009156:	000b      	movs	r3, r1
 8009158:	0010      	movs	r0, r2
 800915a:	0019      	movs	r1, r3
 800915c:	f7f9 ffae 	bl	80030bc <__aeabi_d2f>
 8009160:	1c02      	adds	r2, r0, #0
 8009162:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <speedCompute+0x1d8>)
 8009164:	60da      	str	r2, [r3, #12]

            speedArrayFilterIndex = 0;
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <speedCompute+0x1c4>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
        }
        speedComputeCount = 0;
 800916c:	4b05      	ldr	r3, [pc, #20]	; (8009184 <speedCompute+0x1b4>)
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
    }
    speedComputeCount++;
 8009172:	4b04      	ldr	r3, [pc, #16]	; (8009184 <speedCompute+0x1b4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	4b02      	ldr	r3, [pc, #8]	; (8009184 <speedCompute+0x1b4>)
 800917a:	601a      	str	r2, [r3, #0]
}
 800917c:	46c0      	nop			; (mov r8, r8)
 800917e:	46bd      	mov	sp, r7
 8009180:	b006      	add	sp, #24
 8009182:	bdb0      	pop	{r4, r5, r7, pc}
 8009184:	2000055c 	.word	0x2000055c
 8009188:	20000518 	.word	0x20000518
 800918c:	42700000 	.word	0x42700000
 8009190:	41300000 	.word	0x41300000
 8009194:	200005b4 	.word	0x200005b4
 8009198:	41a00000 	.word	0x41a00000
 800919c:	20000564 	.word	0x20000564
 80091a0:	40c00000 	.word	0x40c00000
 80091a4:	3fe00000 	.word	0x3fe00000
 80091a8:	20000530 	.word	0x20000530

080091ac <speedCompute2>:


void speedCompute2(int encode_now, uint8_t computePerms)
{
 80091ac:	b5b0      	push	{r4, r5, r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	000a      	movs	r2, r1
 80091b6:	1cfb      	adds	r3, r7, #3
 80091b8:	701a      	strb	r2, [r3, #0]
    if (speedComputeCount2 == computePerms)
 80091ba:	1cfb      	adds	r3, r7, #3
 80091bc:	781a      	ldrb	r2, [r3, #0]
 80091be:	4b68      	ldr	r3, [pc, #416]	; (8009360 <speedCompute2+0x1b4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d000      	beq.n	80091c8 <speedCompute2+0x1c>
 80091c6:	e0c2      	b.n	800934e <speedCompute2+0x1a2>
    {
        gencodeSpeed2.encode_now = encode_now;
 80091c8:	4b66      	ldr	r3, [pc, #408]	; (8009364 <speedCompute2+0x1b8>)
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	605a      	str	r2, [r3, #4]
        gencodeSpeed2.speed = (encode_now - gencodeSpeed2.encode_old);
 80091ce:	4b65      	ldr	r3, [pc, #404]	; (8009364 <speedCompute2+0x1b8>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	0018      	movs	r0, r3
 80091d8:	f7f8 f88e 	bl	80012f8 <__aeabi_i2f>
 80091dc:	1c02      	adds	r2, r0, #0
 80091de:	4b61      	ldr	r3, [pc, #388]	; (8009364 <speedCompute2+0x1b8>)
 80091e0:	609a      	str	r2, [r3, #8]
        //calculte speed motor (tour/minute) : g_encode.speed * ((1000 / 100ms) second )/44/20  maxspeed 15.7rad/s（300*2pi/60）
        //speedArray2[speedArrayFilterIndex2++] = (float)(gencodeSpeed2.speed * (SPEED_COMPUTE_PER_S / computePerms ) * 60 / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RAD
        speedArray2[speedArrayFilterIndex2++] = (float)(gencodeSpeed2.speed * (SPEED_COMPUTE_PER_S /computePerms )* 60  / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RADGEAR_RATIO
 80091e2:	4b60      	ldr	r3, [pc, #384]	; (8009364 <speedCompute2+0x1b8>)
 80091e4:	689c      	ldr	r4, [r3, #8]
 80091e6:	1cfb      	adds	r3, r7, #3
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	0019      	movs	r1, r3
 80091ec:	200a      	movs	r0, #10
 80091ee:	f7f7 f837 	bl	8000260 <__divsi3>
 80091f2:	0003      	movs	r3, r0
 80091f4:	0018      	movs	r0, r3
 80091f6:	f7f8 f87f 	bl	80012f8 <__aeabi_i2f>
 80091fa:	1c03      	adds	r3, r0, #0
 80091fc:	1c19      	adds	r1, r3, #0
 80091fe:	1c20      	adds	r0, r4, #0
 8009200:	f7f7 fd6c 	bl	8000cdc <__aeabi_fmul>
 8009204:	1c03      	adds	r3, r0, #0
 8009206:	4958      	ldr	r1, [pc, #352]	; (8009368 <speedCompute2+0x1bc>)
 8009208:	1c18      	adds	r0, r3, #0
 800920a:	f7f7 fd67 	bl	8000cdc <__aeabi_fmul>
 800920e:	1c03      	adds	r3, r0, #0
 8009210:	2181      	movs	r1, #129	; 0x81
 8009212:	05c9      	lsls	r1, r1, #23
 8009214:	1c18      	adds	r0, r3, #0
 8009216:	f7f7 fb97 	bl	8000948 <__aeabi_fdiv>
 800921a:	1c03      	adds	r3, r0, #0
 800921c:	4953      	ldr	r1, [pc, #332]	; (800936c <speedCompute2+0x1c0>)
 800921e:	1c18      	adds	r0, r3, #0
 8009220:	f7f7 fb92 	bl	8000948 <__aeabi_fdiv>
 8009224:	1c03      	adds	r3, r0, #0
 8009226:	1c18      	adds	r0, r3, #0
 8009228:	4b51      	ldr	r3, [pc, #324]	; (8009370 <speedCompute2+0x1c4>)
 800922a:	681c      	ldr	r4, [r3, #0]
 800922c:	1c62      	adds	r2, r4, #1
 800922e:	4b50      	ldr	r3, [pc, #320]	; (8009370 <speedCompute2+0x1c4>)
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	4950      	ldr	r1, [pc, #320]	; (8009374 <speedCompute2+0x1c8>)
 8009234:	f7f7 fb88 	bl	8000948 <__aeabi_fdiv>
 8009238:	1c03      	adds	r3, r0, #0
 800923a:	1c19      	adds	r1, r3, #0
 800923c:	4b4e      	ldr	r3, [pc, #312]	; (8009378 <speedCompute2+0x1cc>)
 800923e:	00a2      	lsls	r2, r4, #2
 8009240:	50d1      	str	r1, [r2, r3]

        gencodeSpeed2.encode_old = gencodeSpeed2.encode_now;
 8009242:	4b48      	ldr	r3, [pc, #288]	; (8009364 <speedCompute2+0x1b8>)
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	4b47      	ldr	r3, [pc, #284]	; (8009364 <speedCompute2+0x1b8>)
 8009248:	601a      	str	r2, [r3, #0]

        if (speedArrayFilterIndex2 == 10)
 800924a:	4b49      	ldr	r3, [pc, #292]	; (8009370 <speedCompute2+0x1c4>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b0a      	cmp	r3, #10
 8009250:	d000      	beq.n	8009254 <speedCompute2+0xa8>
 8009252:	e079      	b.n	8009348 <speedCompute2+0x19c>
        {
            // bubble sort
            float temp = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < 10; i++)
 8009258:	2300      	movs	r3, #0
 800925a:	613b      	str	r3, [r7, #16]
 800925c:	e030      	b.n	80092c0 <speedCompute2+0x114>
            {
                for (int j = 0; j < 10 - i - 1; j++)
 800925e:	2300      	movs	r3, #0
 8009260:	60fb      	str	r3, [r7, #12]
 8009262:	e024      	b.n	80092ae <speedCompute2+0x102>
                {
                    if (speedArray2[j] > speedArray2[j + 1])
 8009264:	4b44      	ldr	r3, [pc, #272]	; (8009378 <speedCompute2+0x1cc>)
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	0092      	lsls	r2, r2, #2
 800926a:	58d0      	ldr	r0, [r2, r3]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	4b41      	ldr	r3, [pc, #260]	; (8009378 <speedCompute2+0x1cc>)
 8009272:	0092      	lsls	r2, r2, #2
 8009274:	58d3      	ldr	r3, [r2, r3]
 8009276:	1c19      	adds	r1, r3, #0
 8009278:	f7f7 f942 	bl	8000500 <__aeabi_fcmpgt>
 800927c:	1e03      	subs	r3, r0, #0
 800927e:	d013      	beq.n	80092a8 <speedCompute2+0xfc>
                    {
                        temp = speedArray2[j];
 8009280:	4b3d      	ldr	r3, [pc, #244]	; (8009378 <speedCompute2+0x1cc>)
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	0092      	lsls	r2, r2, #2
 8009286:	58d3      	ldr	r3, [r2, r3]
 8009288:	617b      	str	r3, [r7, #20]
                        speedArray2[j] = speedArray2[j + 1];
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	4b3a      	ldr	r3, [pc, #232]	; (8009378 <speedCompute2+0x1cc>)
 8009290:	0092      	lsls	r2, r2, #2
 8009292:	58d1      	ldr	r1, [r2, r3]
 8009294:	4b38      	ldr	r3, [pc, #224]	; (8009378 <speedCompute2+0x1cc>)
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	0092      	lsls	r2, r2, #2
 800929a:	50d1      	str	r1, [r2, r3]
                        speedArray2[j + 1] = temp;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	4b35      	ldr	r3, [pc, #212]	; (8009378 <speedCompute2+0x1cc>)
 80092a2:	0092      	lsls	r2, r2, #2
 80092a4:	6979      	ldr	r1, [r7, #20]
 80092a6:	50d1      	str	r1, [r2, r3]
                for (int j = 0; j < 10 - i - 1; j++)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3301      	adds	r3, #1
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2209      	movs	r2, #9
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	dbd4      	blt.n	8009264 <speedCompute2+0xb8>
            for (int i = 0; i < 10; i++)
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	3301      	adds	r3, #1
 80092be:	613b      	str	r3, [r7, #16]
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	2b09      	cmp	r3, #9
 80092c4:	ddcb      	ble.n	800925e <speedCompute2+0xb2>
                    }
                }
            }

            temp = 0.0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	617b      	str	r3, [r7, #20]
            // using the middle 6 data to calculate the average value
            for (int i = 2; i < 8; i++)
 80092ca:	2302      	movs	r3, #2
 80092cc:	60bb      	str	r3, [r7, #8]
 80092ce:	e00c      	b.n	80092ea <speedCompute2+0x13e>
            {
                temp += speedArray2[i];
 80092d0:	4b29      	ldr	r3, [pc, #164]	; (8009378 <speedCompute2+0x1cc>)
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	0092      	lsls	r2, r2, #2
 80092d6:	58d3      	ldr	r3, [r2, r3]
 80092d8:	1c19      	adds	r1, r3, #0
 80092da:	6978      	ldr	r0, [r7, #20]
 80092dc:	f7f7 f994 	bl	8000608 <__aeabi_fadd>
 80092e0:	1c03      	adds	r3, r0, #0
 80092e2:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < 8; i++)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	3301      	adds	r3, #1
 80092e8:	60bb      	str	r3, [r7, #8]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b07      	cmp	r3, #7
 80092ee:	ddef      	ble.n	80092d0 <speedCompute2+0x124>
            }
            // calculate the average value
            temp = temp / 6;
 80092f0:	4922      	ldr	r1, [pc, #136]	; (800937c <speedCompute2+0x1d0>)
 80092f2:	6978      	ldr	r0, [r7, #20]
 80092f4:	f7f7 fb28 	bl	8000948 <__aeabi_fdiv>
 80092f8:	1c03      	adds	r3, r0, #0
 80092fa:	617b      	str	r3, [r7, #20]
            // low pass filter
            // Y(n)= qX(n) + (1-q)Y(n-1)
            // X(n) is the current input, Y(n) is the current output, Y(n-1) is the previous output, and q is the filter factor.
            // The larger the q, the stronger the filtering effect, but the slower the response.
            gMotorData2.speed = (float)((double)temp * 0.5 + (double)gMotorData2.speed * 0.5);
 80092fc:	6978      	ldr	r0, [r7, #20]
 80092fe:	f7f9 fe95 	bl	800302c <__aeabi_f2d>
 8009302:	2200      	movs	r2, #0
 8009304:	4b1e      	ldr	r3, [pc, #120]	; (8009380 <speedCompute2+0x1d4>)
 8009306:	f7f8 ffa3 	bl	8002250 <__aeabi_dmul>
 800930a:	0002      	movs	r2, r0
 800930c:	000b      	movs	r3, r1
 800930e:	0014      	movs	r4, r2
 8009310:	001d      	movs	r5, r3
 8009312:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <speedCompute2+0x1d8>)
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	1c18      	adds	r0, r3, #0
 8009318:	f7f9 fe88 	bl	800302c <__aeabi_f2d>
 800931c:	2200      	movs	r2, #0
 800931e:	4b18      	ldr	r3, [pc, #96]	; (8009380 <speedCompute2+0x1d4>)
 8009320:	f7f8 ff96 	bl	8002250 <__aeabi_dmul>
 8009324:	0002      	movs	r2, r0
 8009326:	000b      	movs	r3, r1
 8009328:	0020      	movs	r0, r4
 800932a:	0029      	movs	r1, r5
 800932c:	f7f8 f836 	bl	800139c <__aeabi_dadd>
 8009330:	0002      	movs	r2, r0
 8009332:	000b      	movs	r3, r1
 8009334:	0010      	movs	r0, r2
 8009336:	0019      	movs	r1, r3
 8009338:	f7f9 fec0 	bl	80030bc <__aeabi_d2f>
 800933c:	1c02      	adds	r2, r0, #0
 800933e:	4b11      	ldr	r3, [pc, #68]	; (8009384 <speedCompute2+0x1d8>)
 8009340:	60da      	str	r2, [r3, #12]
            speedArrayFilterIndex2 = 0;
 8009342:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <speedCompute2+0x1c4>)
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
        }
        speedComputeCount2 = 0;
 8009348:	4b05      	ldr	r3, [pc, #20]	; (8009360 <speedCompute2+0x1b4>)
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
    }
    speedComputeCount2++;
 800934e:	4b04      	ldr	r3, [pc, #16]	; (8009360 <speedCompute2+0x1b4>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	4b02      	ldr	r3, [pc, #8]	; (8009360 <speedCompute2+0x1b4>)
 8009356:	601a      	str	r2, [r3, #0]
}
 8009358:	46c0      	nop			; (mov r8, r8)
 800935a:	46bd      	mov	sp, r7
 800935c:	b006      	add	sp, #24
 800935e:	bdb0      	pop	{r4, r5, r7, pc}
 8009360:	20000560 	.word	0x20000560
 8009364:	20000524 	.word	0x20000524
 8009368:	42700000 	.word	0x42700000
 800936c:	41300000 	.word	0x41300000
 8009370:	200005b8 	.word	0x200005b8
 8009374:	41a00000 	.word	0x41a00000
 8009378:	2000058c 	.word	0x2000058c
 800937c:	40c00000 	.word	0x40c00000
 8009380:	3fe00000 	.word	0x3fe00000
 8009384:	20000544 	.word	0x20000544

08009388 <HAL_TIM_PeriodElapsedCallback>:

//pc6 pc7 timer3  motor 1
//timer1 motor2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)   //encooder compter  motor 1
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a51      	ldr	r2, [pc, #324]	; (80094dc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d122      	bne.n	80093e0 <HAL_TIM_PeriodElapsedCallback+0x58>
    {
        /* Determine the current counter counting direction */
        if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2210      	movs	r2, #16
 80093a2:	4013      	ands	r3, r2
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d10d      	bne.n	80093c4 <HAL_TIM_PeriodElapsedCallback+0x3c>
            /* underflow, count down */
        { Encoder_Overflow_Count--;
 80093a8:	4b4d      	ldr	r3, [pc, #308]	; (80094e0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	4b4b      	ldr	r3, [pc, #300]	; (80094e0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80093b2:	801a      	strh	r2, [r3, #0]
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //vert
 80093b4:	2380      	movs	r3, #128	; 0x80
 80093b6:	019b      	lsls	r3, r3, #6
 80093b8:	4a4a      	ldr	r2, [pc, #296]	; (80094e4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80093ba:	0019      	movs	r1, r3
 80093bc:	0010      	movs	r0, r2
 80093be:	f7fb fa72 	bl	80048a6 <HAL_GPIO_TogglePin>
         //  motor_pwm_set( changeSpeedToPWM(gMotorData.motorPWM));
          motor_pwm_set(gMotorData.motorPWM);
          //motor_pwm_set2(gMotorData2.motorPWM);
        }
    }
}
 80093c2:	e086      	b.n	80094d2 <HAL_TIM_PeriodElapsedCallback+0x14a>
            Encoder_Overflow_Count++;
 80093c4:	4b46      	ldr	r3, [pc, #280]	; (80094e0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80093c6:	881b      	ldrh	r3, [r3, #0]
 80093c8:	3301      	adds	r3, #1
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	4b44      	ldr	r3, [pc, #272]	; (80094e0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80093ce:	801a      	strh	r2, [r3, #0]
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12); //orange
 80093d0:	2380      	movs	r3, #128	; 0x80
 80093d2:	015b      	lsls	r3, r3, #5
 80093d4:	4a43      	ldr	r2, [pc, #268]	; (80094e4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80093d6:	0019      	movs	r1, r3
 80093d8:	0010      	movs	r0, r2
 80093da:	f7fb fa64 	bl	80048a6 <HAL_GPIO_TogglePin>
}
 80093de:	e078      	b.n	80094d2 <HAL_TIM_PeriodElapsedCallback+0x14a>
    else if (htim->Instance == TIM7)   //every 100ms call the interruption for calculte PID
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a40      	ldr	r2, [pc, #256]	; (80094e8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d000      	beq.n	80093ec <HAL_TIM_PeriodElapsedCallback+0x64>
 80093ea:	e072      	b.n	80094d2 <HAL_TIM_PeriodElapsedCallback+0x14a>
        int encoderValueNow = getEncoderValue();
 80093ec:	f000 f88e 	bl	800950c <getEncoderValue>
 80093f0:	0003      	movs	r3, r0
 80093f2:	60fb      	str	r3, [r7, #12]
        int encoderValueNow2 = getEncoderValue2();
 80093f4:	f000 f8a2 	bl	800953c <getEncoderValue2>
 80093f8:	0003      	movs	r3, r0
 80093fa:	60bb      	str	r3, [r7, #8]
        speedCompute(encoderValueNow, 1);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2101      	movs	r1, #1
 8009400:	0018      	movs	r0, r3
 8009402:	f7ff fde5 	bl	8008fd0 <speedCompute>
        printf("speedcompute:%f\r\n", gMotorData.speed);  //gMotorData.speed*/
 8009406:	4b39      	ldr	r3, [pc, #228]	; (80094ec <HAL_TIM_PeriodElapsedCallback+0x164>)
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	1c18      	adds	r0, r3, #0
 800940c:	f7f9 fe0e 	bl	800302c <__aeabi_f2d>
 8009410:	0002      	movs	r2, r0
 8009412:	000b      	movs	r3, r1
 8009414:	4936      	ldr	r1, [pc, #216]	; (80094f0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8009416:	0008      	movs	r0, r1
 8009418:	f001 feda 	bl	800b1d0 <iprintf>
        speedCompute2(encoderValueNow2, 1);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2101      	movs	r1, #1
 8009420:	0018      	movs	r0, r3
 8009422:	f7ff fec3 	bl	80091ac <speedCompute2>
      printf("speedcompute2:%f\r\n", gMotorData2.speed);  //gMotorData.speed
 8009426:	4b33      	ldr	r3, [pc, #204]	; (80094f4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	1c18      	adds	r0, r3, #0
 800942c:	f7f9 fdfe 	bl	800302c <__aeabi_f2d>
 8009430:	0002      	movs	r2, r0
 8009432:	000b      	movs	r3, r1
 8009434:	4930      	ldr	r1, [pc, #192]	; (80094f8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8009436:	0008      	movs	r0, r1
 8009438:	f001 feca 	bl	800b1d0 <iprintf>
        if (gMotorData.state == MOTOR_STATE_START)  //MOTOR_STATE_START call in setSpeed
 800943c:	4b2b      	ldr	r3, [pc, #172]	; (80094ec <HAL_TIM_PeriodElapsedCallback+0x164>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d146      	bne.n	80094d2 <HAL_TIM_PeriodElapsedCallback+0x14a>
            gMotorData.motorPWM = incrementPIDControl(&gSpeedPID, gMotorData.speed); //gMotorData.speed is set in speedCompute
 8009444:	4b29      	ldr	r3, [pc, #164]	; (80094ec <HAL_TIM_PeriodElapsedCallback+0x164>)
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	4b2c      	ldr	r3, [pc, #176]	; (80094fc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800944a:	1c11      	adds	r1, r2, #0
 800944c:	0018      	movs	r0, r3
 800944e:	f7ff fc77 	bl	8008d40 <incrementPIDControl>
 8009452:	1c02      	adds	r2, r0, #0
 8009454:	4b25      	ldr	r3, [pc, #148]	; (80094ec <HAL_TIM_PeriodElapsedCallback+0x164>)
 8009456:	611a      	str	r2, [r3, #16]
            if(gMotorData.motorPWM >= 2560)                     /* ÏÞËÙ */
 8009458:	4b24      	ldr	r3, [pc, #144]	; (80094ec <HAL_TIM_PeriodElapsedCallback+0x164>)
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	4928      	ldr	r1, [pc, #160]	; (8009500 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800945e:	1c18      	adds	r0, r3, #0
 8009460:	f7f7 f858 	bl	8000514 <__aeabi_fcmpge>
 8009464:	1e03      	subs	r3, r0, #0
 8009466:	d003      	beq.n	8009470 <HAL_TIM_PeriodElapsedCallback+0xe8>
            	gMotorData.motorPWM = 2560;
 8009468:	4b20      	ldr	r3, [pc, #128]	; (80094ec <HAL_TIM_PeriodElapsedCallback+0x164>)
 800946a:	4a25      	ldr	r2, [pc, #148]	; (8009500 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800946c:	611a      	str	r2, [r3, #16]
 800946e:	e00a      	b.n	8009486 <HAL_TIM_PeriodElapsedCallback+0xfe>
            else if (gMotorData.motorPWM <= -2560)
 8009470:	4b1e      	ldr	r3, [pc, #120]	; (80094ec <HAL_TIM_PeriodElapsedCallback+0x164>)
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	4923      	ldr	r1, [pc, #140]	; (8009504 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8009476:	1c18      	adds	r0, r3, #0
 8009478:	f7f7 f838 	bl	80004ec <__aeabi_fcmple>
 800947c:	1e03      	subs	r3, r0, #0
 800947e:	d002      	beq.n	8009486 <HAL_TIM_PeriodElapsedCallback+0xfe>
            	gMotorData.motorPWM = -2560;
 8009480:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <HAL_TIM_PeriodElapsedCallback+0x164>)
 8009482:	4a20      	ldr	r2, [pc, #128]	; (8009504 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8009484:	611a      	str	r2, [r3, #16]
            gMotorData2.motorPWM = incrementPIDControl2(&gSpeedPID2, gMotorData2.speed); //gMotorData.speed is set in speedCompute
 8009486:	4b1b      	ldr	r3, [pc, #108]	; (80094f4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	4b1f      	ldr	r3, [pc, #124]	; (8009508 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800948c:	1c11      	adds	r1, r2, #0
 800948e:	0018      	movs	r0, r3
 8009490:	f7ff fcac 	bl	8008dec <incrementPIDControl2>
 8009494:	1c02      	adds	r2, r0, #0
 8009496:	4b17      	ldr	r3, [pc, #92]	; (80094f4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8009498:	611a      	str	r2, [r3, #16]
            if(gMotorData2.motorPWM >= 2560)                     /* ÏÞËÙ */
 800949a:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	4918      	ldr	r1, [pc, #96]	; (8009500 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80094a0:	1c18      	adds	r0, r3, #0
 80094a2:	f7f7 f837 	bl	8000514 <__aeabi_fcmpge>
 80094a6:	1e03      	subs	r3, r0, #0
 80094a8:	d003      	beq.n	80094b2 <HAL_TIM_PeriodElapsedCallback+0x12a>
            	gMotorData2.motorPWM = 2560;
 80094aa:	4b12      	ldr	r3, [pc, #72]	; (80094f4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80094ac:	4a14      	ldr	r2, [pc, #80]	; (8009500 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80094ae:	611a      	str	r2, [r3, #16]
 80094b0:	e00a      	b.n	80094c8 <HAL_TIM_PeriodElapsedCallback+0x140>
            else if (gMotorData2.motorPWM <= -2560)
 80094b2:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	4913      	ldr	r1, [pc, #76]	; (8009504 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80094b8:	1c18      	adds	r0, r3, #0
 80094ba:	f7f7 f817 	bl	80004ec <__aeabi_fcmple>
 80094be:	1e03      	subs	r3, r0, #0
 80094c0:	d002      	beq.n	80094c8 <HAL_TIM_PeriodElapsedCallback+0x140>
            	gMotorData2.motorPWM = -2560;
 80094c2:	4b0c      	ldr	r3, [pc, #48]	; (80094f4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80094c4:	4a0f      	ldr	r2, [pc, #60]	; (8009504 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80094c6:	611a      	str	r2, [r3, #16]
          motor_pwm_set(gMotorData.motorPWM);
 80094c8:	4b08      	ldr	r3, [pc, #32]	; (80094ec <HAL_TIM_PeriodElapsedCallback+0x164>)
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	1c18      	adds	r0, r3, #0
 80094ce:	f000 f8c7 	bl	8009660 <motor_pwm_set>
}
 80094d2:	46c0      	nop			; (mov r8, r8)
 80094d4:	46bd      	mov	sp, r7
 80094d6:	b004      	add	sp, #16
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	40000400 	.word	0x40000400
 80094e0:	20000558 	.word	0x20000558
 80094e4:	50000400 	.word	0x50000400
 80094e8:	40001400 	.word	0x40001400
 80094ec:	20000530 	.word	0x20000530
 80094f0:	0800e108 	.word	0x0800e108
 80094f4:	20000544 	.word	0x20000544
 80094f8:	0800e11c 	.word	0x0800e11c
 80094fc:	200004d0 	.word	0x200004d0
 8009500:	45200000 	.word	0x45200000
 8009504:	c5200000 	.word	0xc5200000
 8009508:	200004f4 	.word	0x200004f4

0800950c <getEncoderValue>:
 * @brief Get the Current Encoder Count
 *
 * @return uint16_t The current encoder count
 */
int getEncoderValue(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
    int Encoder_Count = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	607b      	str	r3, [r7, #4]
    /* Get the current counter value */
    Encoder_Count = __HAL_TIM_GET_COUNTER(&htim3); //motor 1
 8009516:	4b07      	ldr	r3, [pc, #28]	; (8009534 <getEncoderValue+0x28>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951c:	607b      	str	r3, [r7, #4]
   // printf("Encoder_Count:%d\r\n",Encoder_Count);
    /* Add the overflow count to the counter value */
    Encoder_Count += Encoder_Overflow_Count * 65536;
 800951e:	4b06      	ldr	r3, [pc, #24]	; (8009538 <getEncoderValue+0x2c>)
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	041b      	lsls	r3, r3, #16
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	18d3      	adds	r3, r2, r3
 8009528:	607b      	str	r3, [r7, #4]
    return Encoder_Count;
 800952a:	687b      	ldr	r3, [r7, #4]
}
 800952c:	0018      	movs	r0, r3
 800952e:	46bd      	mov	sp, r7
 8009530:	b002      	add	sp, #8
 8009532:	bd80      	pop	{r7, pc}
 8009534:	200002bc 	.word	0x200002bc
 8009538:	20000558 	.word	0x20000558

0800953c <getEncoderValue2>:

int getEncoderValue2(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
	int Encoder_Count = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	607b      	str	r3, [r7, #4]
    /* Get the current counter value */
    Encoder_Count = __HAL_TIM_GET_COUNTER(&htim1); //motor 2
 8009546:	4b07      	ldr	r3, [pc, #28]	; (8009564 <getEncoderValue2+0x28>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954c:	607b      	str	r3, [r7, #4]
    /* Add the overflow count to the counter value */
    Encoder_Count += Encoder_Overflow_Count2 * 65536;
 800954e:	4b06      	ldr	r3, [pc, #24]	; (8009568 <getEncoderValue2+0x2c>)
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	041b      	lsls	r3, r3, #16
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	18d3      	adds	r3, r2, r3
 8009558:	607b      	str	r3, [r7, #4]
    return Encoder_Count;
 800955a:	687b      	ldr	r3, [r7, #4]
}
 800955c:	0018      	movs	r0, r3
 800955e:	46bd      	mov	sp, r7
 8009560:	b002      	add	sp, #8
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20000270 	.word	0x20000270
 8009568:	2000055a 	.word	0x2000055a

0800956c <dcmotor_dir>:
/**
 * @brief       Motor Direction Control
 * @param       para: 0 Forward, 1 Reverse
 */
void dcmotor_dir(uint8_t para)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	0002      	movs	r2, r0
 8009574:	1dfb      	adds	r3, r7, #7
 8009576:	701a      	strb	r2, [r3, #0]

	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8009578:	4b24      	ldr	r3, [pc, #144]	; (800960c <dcmotor_dir+0xa0>)
 800957a:	2100      	movs	r1, #0
 800957c:	0018      	movs	r0, r3
 800957e:	f7fc f9d7 	bl	8005930 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8009582:	4b23      	ldr	r3, [pc, #140]	; (8009610 <dcmotor_dir+0xa4>)
 8009584:	2104      	movs	r1, #4
 8009586:	0018      	movs	r0, r3
 8009588:	f7fc f9d2 	bl	8005930 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800958c:	4b20      	ldr	r3, [pc, #128]	; (8009610 <dcmotor_dir+0xa4>)
 800958e:	2100      	movs	r1, #0
 8009590:	0018      	movs	r0, r3
 8009592:	f7fc f9cd 	bl	8005930 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8009596:	4b1f      	ldr	r3, [pc, #124]	; (8009614 <dcmotor_dir+0xa8>)
 8009598:	2100      	movs	r1, #0
 800959a:	0018      	movs	r0, r3
 800959c:	f7fc f9c8 	bl	8005930 <HAL_TIM_PWM_Stop>

    if (para == 0)
 80095a0:	1dfb      	adds	r3, r7, #7
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d114      	bne.n	80095d2 <dcmotor_dir+0x66>
    {
        HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80095a8:	4b18      	ldr	r3, [pc, #96]	; (800960c <dcmotor_dir+0xa0>)
 80095aa:	2100      	movs	r1, #0
 80095ac:	0018      	movs	r0, r3
 80095ae:	f7fc f8db 	bl	8005768 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80095b2:	4b18      	ldr	r3, [pc, #96]	; (8009614 <dcmotor_dir+0xa8>)
 80095b4:	2100      	movs	r1, #0
 80095b6:	0018      	movs	r0, r3
 80095b8:	f7fc f9ba 	bl	8005930 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80095bc:	4b14      	ldr	r3, [pc, #80]	; (8009610 <dcmotor_dir+0xa4>)
 80095be:	2104      	movs	r1, #4
 80095c0:	0018      	movs	r0, r3
 80095c2:	f7fc f8d1 	bl	8005768 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80095c6:	4b12      	ldr	r3, [pc, #72]	; (8009610 <dcmotor_dir+0xa4>)
 80095c8:	2100      	movs	r1, #0
 80095ca:	0018      	movs	r0, r3
 80095cc:	f7fc f9b0 	bl	8005930 <HAL_TIM_PWM_Stop>
    	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
        HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
        //  __HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, 300);  //  motor1 reculer
         //__HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_1, 300);  // motor2 reculer
    }
}
 80095d0:	e017      	b.n	8009602 <dcmotor_dir+0x96>
    else if (para == 1)
 80095d2:	1dfb      	adds	r3, r7, #7
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d113      	bne.n	8009602 <dcmotor_dir+0x96>
        HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80095da:	4b0e      	ldr	r3, [pc, #56]	; (8009614 <dcmotor_dir+0xa8>)
 80095dc:	2100      	movs	r1, #0
 80095de:	0018      	movs	r0, r3
 80095e0:	f7fc f8c2 	bl	8005768 <HAL_TIM_PWM_Start>
    	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80095e4:	4b09      	ldr	r3, [pc, #36]	; (800960c <dcmotor_dir+0xa0>)
 80095e6:	2100      	movs	r1, #0
 80095e8:	0018      	movs	r0, r3
 80095ea:	f7fc f9a1 	bl	8005930 <HAL_TIM_PWM_Stop>
    	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 80095ee:	4b08      	ldr	r3, [pc, #32]	; (8009610 <dcmotor_dir+0xa4>)
 80095f0:	2104      	movs	r1, #4
 80095f2:	0018      	movs	r0, r3
 80095f4:	f7fc f99c 	bl	8005930 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80095f8:	4b05      	ldr	r3, [pc, #20]	; (8009610 <dcmotor_dir+0xa4>)
 80095fa:	2100      	movs	r1, #0
 80095fc:	0018      	movs	r0, r3
 80095fe:	f7fc f8b3 	bl	8005768 <HAL_TIM_PWM_Start>
}
 8009602:	46c0      	nop			; (mov r8, r8)
 8009604:	46bd      	mov	sp, r7
 8009606:	b002      	add	sp, #8
 8009608:	bd80      	pop	{r7, pc}
 800960a:	46c0      	nop			; (mov r8, r8)
 800960c:	200003ec 	.word	0x200003ec
 8009610:	20000354 	.word	0x20000354
 8009614:	200003a0 	.word	0x200003a0

08009618 <dcmotor_speed>:
         //__HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_1, 300);  // motor2 reculer
    }
}

void dcmotor_speed(uint16_t para)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	0002      	movs	r2, r0
 8009620:	1dbb      	adds	r3, r7, #6
 8009622:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SetCompare(&htim17 , TIM_CHANNEL_1, para);  //PB9
    __HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_2, para);  //PB15
    __HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, para);  //PB9
    __HAL_TIM_SetCompare(&htim14 , TIM_CHANNEL_1, para);  //PB15
*/
    __HAL_TIM_SetCompare(&htim17 , TIM_CHANNEL_1, para);  //PB9   para为占空比的百分比乘以周期时间
 8009624:	4b0b      	ldr	r3, [pc, #44]	; (8009654 <dcmotor_speed+0x3c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	1dba      	adds	r2, r7, #6
 800962a:	8812      	ldrh	r2, [r2, #0]
 800962c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, para);  //PB15
 800962e:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <dcmotor_speed+0x40>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	1dba      	adds	r2, r7, #6
 8009634:	8812      	ldrh	r2, [r2, #0]
 8009636:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_2, para);  //PB9
 8009638:	4b08      	ldr	r3, [pc, #32]	; (800965c <dcmotor_speed+0x44>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	1dba      	adds	r2, r7, #6
 800963e:	8812      	ldrh	r2, [r2, #0]
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_1, para);  //PB15
 8009642:	4b06      	ldr	r3, [pc, #24]	; (800965c <dcmotor_speed+0x44>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	1dba      	adds	r2, r7, #6
 8009648:	8812      	ldrh	r2, [r2, #0]
 800964a:	635a      	str	r2, [r3, #52]	; 0x34


}
 800964c:	46c0      	nop			; (mov r8, r8)
 800964e:	46bd      	mov	sp, r7
 8009650:	b002      	add	sp, #8
 8009652:	bd80      	pop	{r7, pc}
 8009654:	200003ec 	.word	0x200003ec
 8009658:	200003a0 	.word	0x200003a0
 800965c:	20000354 	.word	0x20000354

08009660 <motor_pwm_set>:

}


void motor_pwm_set(float para)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
    int val = (int)para;
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7f7 fe25 	bl	80012b8 <__aeabi_f2iz>
 800966e:	0003      	movs	r3, r0
 8009670:	60fb      	str	r3, [r7, #12]

    if (val >= 0)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	db08      	blt.n	800968a <motor_pwm_set+0x2a>
    {
        dcmotor_dir(0);
 8009678:	2000      	movs	r0, #0
 800967a:	f7ff ff77 	bl	800956c <dcmotor_dir>
        dcmotor_speed(val);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	b29b      	uxth	r3, r3
 8009682:	0018      	movs	r0, r3
 8009684:	f7ff ffc8 	bl	8009618 <dcmotor_speed>
    else
    {
        dcmotor_dir(1);
        dcmotor_speed(-val);
    }
}
 8009688:	e009      	b.n	800969e <motor_pwm_set+0x3e>
        dcmotor_dir(1);
 800968a:	2001      	movs	r0, #1
 800968c:	f7ff ff6e 	bl	800956c <dcmotor_dir>
        dcmotor_speed(-val);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	b29b      	uxth	r3, r3
 8009694:	425b      	negs	r3, r3
 8009696:	b29b      	uxth	r3, r3
 8009698:	0018      	movs	r0, r3
 800969a:	f7ff ffbd 	bl	8009618 <dcmotor_speed>
}
 800969e:	46c0      	nop			; (mov r8, r8)
 80096a0:	46bd      	mov	sp, r7
 80096a2:	b004      	add	sp, #16
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <isSpeedValid>:
 * @param speedStr  the speed string to check
 * @return true  if the speed is valid
 * @return false  if the speed is not valid
 */
bool isSpeedValid(char *speedStr)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
    int i = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
    // get the direction for speedStr[0] with - or +
    if (speedStr[0] == '-' || speedStr[0] == '+')
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b2d      	cmp	r3, #45	; 0x2d
 80096b8:	d003      	beq.n	80096c2 <isSpeedValid+0x1c>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	2b2b      	cmp	r3, #43	; 0x2b
 80096c0:	d103      	bne.n	80096ca <isSpeedValid+0x24>
    {
        i++;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3301      	adds	r3, #1
 80096c6:	60fb      	str	r3, [r7, #12]
    }
    else
    {
        return false;
    }
    while (speedStr[i] != '\0')
 80096c8:	e012      	b.n	80096f0 <isSpeedValid+0x4a>
        return false;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e017      	b.n	80096fe <isSpeedValid+0x58>
    {
        // if the char is not a number, return false
        if (!(speedStr[i] >= '0' && speedStr[i] <= '9'))
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	18d3      	adds	r3, r2, r3
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	2b2f      	cmp	r3, #47	; 0x2f
 80096d8:	d905      	bls.n	80096e6 <isSpeedValid+0x40>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	18d3      	adds	r3, r2, r3
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b39      	cmp	r3, #57	; 0x39
 80096e4:	d901      	bls.n	80096ea <isSpeedValid+0x44>
        {
            return false;
 80096e6:	2300      	movs	r3, #0
 80096e8:	e009      	b.n	80096fe <isSpeedValid+0x58>
        }
        i++;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3301      	adds	r3, #1
 80096ee:	60fb      	str	r3, [r7, #12]
    while (speedStr[i] != '\0')
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	18d3      	adds	r3, r2, r3
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1e8      	bne.n	80096ce <isSpeedValid+0x28>
    }

    return true;
 80096fc:	2301      	movs	r3, #1
}
 80096fe:	0018      	movs	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	b004      	add	sp, #16
 8009704:	bd80      	pop	{r7, pc}

08009706 <extractSpeed>:
 *
 * @param data  the data to extract the speed
 * @return int  the speed extracted
 */
float extractSpeed(char *data)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
    float speed = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
    int direction = DIRECTION_FORWARD;
 8009712:	2301      	movs	r3, #1
 8009714:	60fb      	str	r3, [r7, #12]
    // if the speed is negative, set the direction to -1,if not, set the direction to 1
    if (data[0] == '-')
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b2d      	cmp	r3, #45	; 0x2d
 800971c:	d103      	bne.n	8009726 <extractSpeed+0x20>
    {
        direction = DIRECTION_BACKWARD;
 800971e:	2301      	movs	r3, #1
 8009720:	425b      	negs	r3, r3
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	e001      	b.n	800972a <extractSpeed+0x24>
    }
    else
    {
        direction = DIRECTION_FORWARD;
 8009726:	2301      	movs	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]
    }
    // change the string speed to int speed without the direction
    speed = atof(&data[1]);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3301      	adds	r3, #1
 800972e:	0018      	movs	r0, r3
 8009730:	f000 f9d6 	bl	8009ae0 <atof>
 8009734:	0002      	movs	r2, r0
 8009736:	000b      	movs	r3, r1
 8009738:	0010      	movs	r0, r2
 800973a:	0019      	movs	r1, r3
 800973c:	f7f9 fcbe 	bl	80030bc <__aeabi_d2f>
 8009740:	1c03      	adds	r3, r0, #0
 8009742:	60bb      	str	r3, [r7, #8]
    // return the speed with the direction
    return (float)speed * direction;
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7f7 fdd7 	bl	80012f8 <__aeabi_i2f>
 800974a:	1c03      	adds	r3, r0, #0
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	1c18      	adds	r0, r3, #0
 8009750:	f7f7 fac4 	bl	8000cdc <__aeabi_fmul>
 8009754:	1c03      	adds	r3, r0, #0
}
 8009756:	1c18      	adds	r0, r3, #0
 8009758:	46bd      	mov	sp, r7
 800975a:	b004      	add	sp, #16
 800975c:	bd80      	pop	{r7, pc}
	...

08009760 <speedProcess>:
    updateCurrentSpeed(updateSpeed);
    printf("[INFO]: Set speed to %d\r\n", updateSpeed);
}

void speedProcess(int numberofCmdArg, char *cmdArg[])
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
    // check if the number of argument is correct
    if (numberofCmdArg != 2)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b02      	cmp	r3, #2
 800976e:	d004      	beq.n	800977a <speedProcess+0x1a>
    {
        printf("[ERROR]: Invalid number of argument\r\n");
 8009770:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <speedProcess+0x84>)
 8009772:	0018      	movs	r0, r3
 8009774:	f001 fd92 	bl	800b29c <puts>
        return;
 8009778:	e031      	b.n	80097de <speedProcess+0x7e>
    }
    // check if the speed is valid
   if (!isSpeedValid(cmdArg[1]))
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	3304      	adds	r3, #4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	0018      	movs	r0, r3
 8009782:	f7ff ff90 	bl	80096a6 <isSpeedValid>
 8009786:	0003      	movs	r3, r0
 8009788:	001a      	movs	r2, r3
 800978a:	2301      	movs	r3, #1
 800978c:	4053      	eors	r3, r2
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b00      	cmp	r3, #0
 8009792:	d004      	beq.n	800979e <speedProcess+0x3e>
    {
        printf("[ERROR]: Invalid speed\r\n");
 8009794:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <speedProcess+0x88>)
 8009796:	0018      	movs	r0, r3
 8009798:	f001 fd80 	bl	800b29c <puts>
        return;
 800979c:	e01f      	b.n	80097de <speedProcess+0x7e>
    }
     gSpeedPID.SetPoint = extractSpeed(cmdArg[1]);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	3304      	adds	r3, #4
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	0018      	movs	r0, r3
 80097a6:	f7ff ffae 	bl	8009706 <extractSpeed>
 80097aa:	1c02      	adds	r2, r0, #0
 80097ac:	4b0f      	ldr	r3, [pc, #60]	; (80097ec <speedProcess+0x8c>)
 80097ae:	601a      	str	r2, [r3, #0]
 //   printf("gSpeedPID.SetPoint dans le extractspeed %f\r\n",gSpeedPID.SetPoint);
    // limit the speed
    if (gSpeedPID.SetPoint > MAX_SPEED)   //MAX_SPEED : 300 tour/minute
 80097b0:	4b0e      	ldr	r3, [pc, #56]	; (80097ec <speedProcess+0x8c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	490e      	ldr	r1, [pc, #56]	; (80097f0 <speedProcess+0x90>)
 80097b6:	1c18      	adds	r0, r3, #0
 80097b8:	f7f6 fea2 	bl	8000500 <__aeabi_fcmpgt>
 80097bc:	1e03      	subs	r3, r0, #0
 80097be:	d003      	beq.n	80097c8 <speedProcess+0x68>
    {
        gSpeedPID.SetPoint = MAX_SPEED;
 80097c0:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <speedProcess+0x8c>)
 80097c2:	4a0b      	ldr	r2, [pc, #44]	; (80097f0 <speedProcess+0x90>)
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	e00a      	b.n	80097de <speedProcess+0x7e>
    }
    else if (gSpeedPID.SetPoint < -MAX_SPEED)
 80097c8:	4b08      	ldr	r3, [pc, #32]	; (80097ec <speedProcess+0x8c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4909      	ldr	r1, [pc, #36]	; (80097f4 <speedProcess+0x94>)
 80097ce:	1c18      	adds	r0, r3, #0
 80097d0:	f7f6 fe82 	bl	80004d8 <__aeabi_fcmplt>
 80097d4:	1e03      	subs	r3, r0, #0
 80097d6:	d002      	beq.n	80097de <speedProcess+0x7e>
    {
        gSpeedPID.SetPoint = -MAX_SPEED;
 80097d8:	4b04      	ldr	r3, [pc, #16]	; (80097ec <speedProcess+0x8c>)
 80097da:	4a06      	ldr	r2, [pc, #24]	; (80097f4 <speedProcess+0x94>)
 80097dc:	601a      	str	r2, [r3, #0]
    else if (gSpeedPID2.SetPoint < -MAX_SPEED)
    {
        gSpeedPID2.SetPoint = -MAX_SPEED;
    }*/

}
 80097de:	46bd      	mov	sp, r7
 80097e0:	b002      	add	sp, #8
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	0800e130 	.word	0x0800e130
 80097e8:	0800e158 	.word	0x0800e158
 80097ec:	200004d0 	.word	0x200004d0
 80097f0:	43960000 	.word	0x43960000
 80097f4:	c3960000 	.word	0xc3960000

080097f8 <Shell_Init>:
int argc = 0;
char *token;
int newCmdReady = 0;

void Shell_Init(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0
    memset(argv, 0, MAX_ARGS * sizeof(char *));
 80097fc:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <Shell_Init+0x70>)
 80097fe:	2224      	movs	r2, #36	; 0x24
 8009800:	2100      	movs	r1, #0
 8009802:	0018      	movs	r0, r3
 8009804:	f001 fe7a 	bl	800b4fc <memset>
    memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 8009808:	4b18      	ldr	r3, [pc, #96]	; (800986c <Shell_Init+0x74>)
 800980a:	2240      	movs	r2, #64	; 0x40
 800980c:	2100      	movs	r1, #0
 800980e:	0018      	movs	r0, r3
 8009810:	f001 fe74 	bl	800b4fc <memset>
 8009814:	4b16      	ldr	r3, [pc, #88]	; (8009870 <Shell_Init+0x78>)
 8009816:	2200      	movs	r2, #0
 8009818:	701a      	strb	r2, [r3, #0]
    memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
    memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 800981a:	4b16      	ldr	r3, [pc, #88]	; (8009874 <Shell_Init+0x7c>)
 800981c:	2240      	movs	r2, #64	; 0x40
 800981e:	2100      	movs	r1, #0
 8009820:	0018      	movs	r0, r3
 8009822:	f001 fe6b 	bl	800b4fc <memset>

    HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8009826:	4912      	ldr	r1, [pc, #72]	; (8009870 <Shell_Init+0x78>)
 8009828:	4b13      	ldr	r3, [pc, #76]	; (8009878 <Shell_Init+0x80>)
 800982a:	2201      	movs	r2, #1
 800982c:	0018      	movs	r0, r3
 800982e:	f7fd fb91 	bl	8006f54 <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8009832:	4b12      	ldr	r3, [pc, #72]	; (800987c <Shell_Init+0x84>)
 8009834:	0018      	movs	r0, r3
 8009836:	f7f6 fc6d 	bl	8000114 <strlen>
 800983a:	0003      	movs	r3, r0
 800983c:	b29a      	uxth	r2, r3
 800983e:	2301      	movs	r3, #1
 8009840:	425b      	negs	r3, r3
 8009842:	490e      	ldr	r1, [pc, #56]	; (800987c <Shell_Init+0x84>)
 8009844:	480c      	ldr	r0, [pc, #48]	; (8009878 <Shell_Init+0x80>)
 8009846:	f7fd fae9 	bl	8006e1c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800984a:	4b0d      	ldr	r3, [pc, #52]	; (8009880 <Shell_Init+0x88>)
 800984c:	0018      	movs	r0, r3
 800984e:	f7f6 fc61 	bl	8000114 <strlen>
 8009852:	0003      	movs	r3, r0
 8009854:	b29a      	uxth	r2, r3
 8009856:	2301      	movs	r3, #1
 8009858:	425b      	negs	r3, r3
 800985a:	4909      	ldr	r1, [pc, #36]	; (8009880 <Shell_Init+0x88>)
 800985c:	4806      	ldr	r0, [pc, #24]	; (8009878 <Shell_Init+0x80>)
 800985e:	f7fd fadd 	bl	8006e1c <HAL_UART_Transmit>
}
 8009862:	46c0      	nop			; (mov r8, r8)
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	2000064c 	.word	0x2000064c
 800986c:	200005c4 	.word	0x200005c4
 8009870:	200005c0 	.word	0x200005c0
 8009874:	20000608 	.word	0x20000608
 8009878:	20000438 	.word	0x20000438
 800987c:	20000028 	.word	0x20000028
 8009880:	2000000c 	.word	0x2000000c

08009884 <Shell_Loop>:

void Shell_Loop(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0

    if (uartRxReceived)
 8009888:	4b58      	ldr	r3, [pc, #352]	; (80099ec <Shell_Loop+0x168>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d049      	beq.n	8009924 <Shell_Loop+0xa0>
    {
        uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "received：%s\r\n", cmdBuffer);
 8009890:	4b57      	ldr	r3, [pc, #348]	; (80099f0 <Shell_Loop+0x16c>)
 8009892:	4a58      	ldr	r2, [pc, #352]	; (80099f4 <Shell_Loop+0x170>)
 8009894:	4858      	ldr	r0, [pc, #352]	; (80099f8 <Shell_Loop+0x174>)
 8009896:	2140      	movs	r1, #64	; 0x40
 8009898:	f001 fd0a 	bl	800b2b0 <sniprintf>
 800989c:	0003      	movs	r3, r0
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	4b56      	ldr	r3, [pc, #344]	; (80099fc <Shell_Loop+0x178>)
 80098a2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80098a4:	4b55      	ldr	r3, [pc, #340]	; (80099fc <Shell_Loop+0x178>)
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	2301      	movs	r3, #1
 80098ac:	425b      	negs	r3, r3
 80098ae:	4952      	ldr	r1, [pc, #328]	; (80099f8 <Shell_Loop+0x174>)
 80098b0:	4853      	ldr	r0, [pc, #332]	; (8009a00 <Shell_Loop+0x17c>)
 80098b2:	f7fd fab3 	bl	8006e1c <HAL_UART_Transmit>
        if (uartRxBuffer[0] == ASCII_CR)
 80098b6:	4b53      	ldr	r3, [pc, #332]	; (8009a04 <Shell_Loop+0x180>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b0d      	cmp	r3, #13
 80098bc:	d106      	bne.n	80098cc <Shell_Loop+0x48>
        {
            cmdBuffer[uartRxCounter - 1] = '\0';
 80098be:	4b52      	ldr	r3, [pc, #328]	; (8009a08 <Shell_Loop+0x184>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	4a4a      	ldr	r2, [pc, #296]	; (80099f0 <Shell_Loop+0x16c>)
 80098c6:	2100      	movs	r1, #0
 80098c8:	54d1      	strb	r1, [r2, r3]
 80098ca:	e005      	b.n	80098d8 <Shell_Loop+0x54>
        }
        else
        {
            cmdBuffer[uartRxCounter] = '\0';
 80098cc:	4b4e      	ldr	r3, [pc, #312]	; (8009a08 <Shell_Loop+0x184>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	001a      	movs	r2, r3
 80098d2:	4b47      	ldr	r3, [pc, #284]	; (80099f0 <Shell_Loop+0x16c>)
 80098d4:	2100      	movs	r1, #0
 80098d6:	5499      	strb	r1, [r3, r2]
        }
        argc = 0;
 80098d8:	4b4c      	ldr	r3, [pc, #304]	; (8009a0c <Shell_Loop+0x188>)
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
        token = strtok(cmdBuffer, " ");
 80098de:	4a4c      	ldr	r2, [pc, #304]	; (8009a10 <Shell_Loop+0x18c>)
 80098e0:	4b43      	ldr	r3, [pc, #268]	; (80099f0 <Shell_Loop+0x16c>)
 80098e2:	0011      	movs	r1, r2
 80098e4:	0018      	movs	r0, r3
 80098e6:	f001 fe23 	bl	800b530 <strtok>
 80098ea:	0002      	movs	r2, r0
 80098ec:	4b49      	ldr	r3, [pc, #292]	; (8009a14 <Shell_Loop+0x190>)
 80098ee:	601a      	str	r2, [r3, #0]

        while (token != NULL)
 80098f0:	e011      	b.n	8009916 <Shell_Loop+0x92>
        {
            argv[argc++] = token;
 80098f2:	4b46      	ldr	r3, [pc, #280]	; (8009a0c <Shell_Loop+0x188>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	1c59      	adds	r1, r3, #1
 80098f8:	4a44      	ldr	r2, [pc, #272]	; (8009a0c <Shell_Loop+0x188>)
 80098fa:	6011      	str	r1, [r2, #0]
 80098fc:	4a45      	ldr	r2, [pc, #276]	; (8009a14 <Shell_Loop+0x190>)
 80098fe:	6811      	ldr	r1, [r2, #0]
 8009900:	4a45      	ldr	r2, [pc, #276]	; (8009a18 <Shell_Loop+0x194>)
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	5099      	str	r1, [r3, r2]
            token = strtok(NULL, " ");
 8009906:	4b42      	ldr	r3, [pc, #264]	; (8009a10 <Shell_Loop+0x18c>)
 8009908:	0019      	movs	r1, r3
 800990a:	2000      	movs	r0, #0
 800990c:	f001 fe10 	bl	800b530 <strtok>
 8009910:	0002      	movs	r2, r0
 8009912:	4b40      	ldr	r3, [pc, #256]	; (8009a14 <Shell_Loop+0x190>)
 8009914:	601a      	str	r2, [r3, #0]
        while (token != NULL)
 8009916:	4b3f      	ldr	r3, [pc, #252]	; (8009a14 <Shell_Loop+0x190>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e9      	bne.n	80098f2 <Shell_Loop+0x6e>
        }
        newCmdReady = 1;
 800991e:	4b3f      	ldr	r3, [pc, #252]	; (8009a1c <Shell_Loop+0x198>)
 8009920:	2201      	movs	r2, #1
 8009922:	601a      	str	r2, [r3, #0]
    }
    if (newCmdReady)
 8009924:	4b3d      	ldr	r3, [pc, #244]	; (8009a1c <Shell_Loop+0x198>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d05b      	beq.n	80099e4 <Shell_Loop+0x160>
    {
        if (!strcmp(argv[0], "start"))
 800992c:	4b3a      	ldr	r3, [pc, #232]	; (8009a18 <Shell_Loop+0x194>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a3b      	ldr	r2, [pc, #236]	; (8009a20 <Shell_Loop+0x19c>)
 8009932:	0011      	movs	r1, r2
 8009934:	0018      	movs	r0, r3
 8009936:	f7f6 fbe3 	bl	8000100 <strcmp>
 800993a:	1e03      	subs	r3, r0, #0
 800993c:	d106      	bne.n	800994c <Shell_Loop+0xc8>
        {
            startMotor();
 800993e:	f7ff facf 	bl	8008ee0 <startMotor>
            printf("[INFO]: Start the motor\r\n");
 8009942:	4b38      	ldr	r3, [pc, #224]	; (8009a24 <Shell_Loop+0x1a0>)
 8009944:	0018      	movs	r0, r3
 8009946:	f001 fca9 	bl	800b29c <puts>
 800994a:	e035      	b.n	80099b8 <Shell_Loop+0x134>
        }
        // detect the stop command
        else if (!strcmp(argv[0], "stop"))
 800994c:	4b32      	ldr	r3, [pc, #200]	; (8009a18 <Shell_Loop+0x194>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a35      	ldr	r2, [pc, #212]	; (8009a28 <Shell_Loop+0x1a4>)
 8009952:	0011      	movs	r1, r2
 8009954:	0018      	movs	r0, r3
 8009956:	f7f6 fbd3 	bl	8000100 <strcmp>
 800995a:	1e03      	subs	r3, r0, #0
 800995c:	d106      	bne.n	800996c <Shell_Loop+0xe8>
        {
            stopMotor();
 800995e:	f7ff fa9b 	bl	8008e98 <stopMotor>
            printf("[INFO]: Stop the motor\r\n");
 8009962:	4b32      	ldr	r3, [pc, #200]	; (8009a2c <Shell_Loop+0x1a8>)
 8009964:	0018      	movs	r0, r3
 8009966:	f001 fc99 	bl	800b29c <puts>
 800996a:	e025      	b.n	80099b8 <Shell_Loop+0x134>
        }
        // detect the speed
        else if (!strcmp(argv[0], "speed"))
 800996c:	4b2a      	ldr	r3, [pc, #168]	; (8009a18 <Shell_Loop+0x194>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a2f      	ldr	r2, [pc, #188]	; (8009a30 <Shell_Loop+0x1ac>)
 8009972:	0011      	movs	r1, r2
 8009974:	0018      	movs	r0, r3
 8009976:	f7f6 fbc3 	bl	8000100 <strcmp>
 800997a:	1e03      	subs	r3, r0, #0
 800997c:	d107      	bne.n	800998e <Shell_Loop+0x10a>
        {
            setSpeed(argc, argv);
 800997e:	4b23      	ldr	r3, [pc, #140]	; (8009a0c <Shell_Loop+0x188>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a25      	ldr	r2, [pc, #148]	; (8009a18 <Shell_Loop+0x194>)
 8009984:	0011      	movs	r1, r2
 8009986:	0018      	movs	r0, r3
 8009988:	f7ff faca 	bl	8008f20 <setSpeed>
 800998c:	e014      	b.n	80099b8 <Shell_Loop+0x134>
        }
        // debug pid kp ki kd
        else if (!strcmp(argv[0], "debug"))
 800998e:	4b22      	ldr	r3, [pc, #136]	; (8009a18 <Shell_Loop+0x194>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a28      	ldr	r2, [pc, #160]	; (8009a34 <Shell_Loop+0x1b0>)
 8009994:	0011      	movs	r1, r2
 8009996:	0018      	movs	r0, r3
 8009998:	f7f6 fbb2 	bl	8000100 <strcmp>
 800999c:	1e03      	subs	r3, r0, #0
 800999e:	d107      	bne.n	80099b0 <Shell_Loop+0x12c>
        {
            setPIDparam(argc, argv);
 80099a0:	4b1a      	ldr	r3, [pc, #104]	; (8009a0c <Shell_Loop+0x188>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a1c      	ldr	r2, [pc, #112]	; (8009a18 <Shell_Loop+0x194>)
 80099a6:	0011      	movs	r1, r2
 80099a8:	0018      	movs	r0, r3
 80099aa:	f7ff f981 	bl	8008cb0 <setPIDparam>
 80099ae:	e003      	b.n	80099b8 <Shell_Loop+0x134>
        }
        else
        {
            printf("[ERROR]: Command not found\r\n");
 80099b0:	4b21      	ldr	r3, [pc, #132]	; (8009a38 <Shell_Loop+0x1b4>)
 80099b2:	0018      	movs	r0, r3
 80099b4:	f001 fc72 	bl	800b29c <puts>
        }
        HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80099b8:	2301      	movs	r3, #1
 80099ba:	425b      	negs	r3, r3
 80099bc:	491f      	ldr	r1, [pc, #124]	; (8009a3c <Shell_Loop+0x1b8>)
 80099be:	4810      	ldr	r0, [pc, #64]	; (8009a00 <Shell_Loop+0x17c>)
 80099c0:	221b      	movs	r2, #27
 80099c2:	f7fd fa2b 	bl	8006e1c <HAL_UART_Transmit>
        newCmdReady = 0;
 80099c6:	4b15      	ldr	r3, [pc, #84]	; (8009a1c <Shell_Loop+0x198>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]
        // reset uartRxReceived flag and counter and cmdBuffer
        uartRxReceived = 0;
 80099cc:	4b07      	ldr	r3, [pc, #28]	; (80099ec <Shell_Loop+0x168>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	701a      	strb	r2, [r3, #0]
        uartRxCounter = 0;
 80099d2:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <Shell_Loop+0x184>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	701a      	strb	r2, [r3, #0]
        memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 80099d8:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <Shell_Loop+0x16c>)
 80099da:	2240      	movs	r2, #64	; 0x40
 80099dc:	2100      	movs	r1, #0
 80099de:	0018      	movs	r0, r3
 80099e0:	f001 fd8c 	bl	800b4fc <memset>
    }
}
 80099e4:	46c0      	nop			; (mov r8, r8)
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	46c0      	nop			; (mov r8, r8)
 80099ec:	200005bc 	.word	0x200005bc
 80099f0:	200005c4 	.word	0x200005c4
 80099f4:	0800e18c 	.word	0x0800e18c
 80099f8:	20000608 	.word	0x20000608
 80099fc:	20000648 	.word	0x20000648
 8009a00:	20000438 	.word	0x20000438
 8009a04:	200005c0 	.word	0x200005c0
 8009a08:	20000604 	.word	0x20000604
 8009a0c:	20000670 	.word	0x20000670
 8009a10:	0800e19c 	.word	0x0800e19c
 8009a14:	20000674 	.word	0x20000674
 8009a18:	2000064c 	.word	0x2000064c
 8009a1c:	20000678 	.word	0x20000678
 8009a20:	0800e1a0 	.word	0x0800e1a0
 8009a24:	0800e1a8 	.word	0x0800e1a8
 8009a28:	0800e1c4 	.word	0x0800e1c4
 8009a2c:	0800e1cc 	.word	0x0800e1cc
 8009a30:	0800e1e4 	.word	0x0800e1e4
 8009a34:	0800e1ec 	.word	0x0800e1ec
 8009a38:	0800e1f4 	.word	0x0800e1f4
 8009a3c:	2000000c 	.word	0x2000000c

08009a40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
    // if receied counter is more than CMD_BUFFER_SIZE, reset counter and cmdBuffer, and print error message
    // else increment counter and continue
    if (uartRxCounter > CMD_BUFFER_SIZE)
 8009a48:	4b1e      	ldr	r3, [pc, #120]	; (8009ac4 <HAL_UART_RxCpltCallback+0x84>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b40      	cmp	r3, #64	; 0x40
 8009a4e:	d919      	bls.n	8009a84 <HAL_UART_RxCpltCallback+0x44>
    {
        uartRxCounter = 0;
 8009a50:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <HAL_UART_RxCpltCallback+0x84>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	701a      	strb	r2, [r3, #0]
        memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(uint8_t));
 8009a56:	4b1c      	ldr	r3, [pc, #112]	; (8009ac8 <HAL_UART_RxCpltCallback+0x88>)
 8009a58:	2240      	movs	r2, #64	; 0x40
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	f001 fd4d 	bl	800b4fc <memset>
        int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Command too long\r\n");
 8009a62:	4a1a      	ldr	r2, [pc, #104]	; (8009acc <HAL_UART_RxCpltCallback+0x8c>)
 8009a64:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <HAL_UART_RxCpltCallback+0x90>)
 8009a66:	2140      	movs	r1, #64	; 0x40
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f001 fc21 	bl	800b2b0 <sniprintf>
 8009a6e:	0003      	movs	r3, r0
 8009a70:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	2301      	movs	r3, #1
 8009a78:	425b      	negs	r3, r3
 8009a7a:	4915      	ldr	r1, [pc, #84]	; (8009ad0 <HAL_UART_RxCpltCallback+0x90>)
 8009a7c:	4815      	ldr	r0, [pc, #84]	; (8009ad4 <HAL_UART_RxCpltCallback+0x94>)
 8009a7e:	f7fd f9cd 	bl	8006e1c <HAL_UART_Transmit>
 8009a82:	e00a      	b.n	8009a9a <HAL_UART_RxCpltCallback+0x5a>
    }
    else
    {
        cmdBuffer[uartRxCounter++] = (char)uartRxBuffer[0];
 8009a84:	4b0f      	ldr	r3, [pc, #60]	; (8009ac4 <HAL_UART_RxCpltCallback+0x84>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	b2d1      	uxtb	r1, r2
 8009a8c:	4a0d      	ldr	r2, [pc, #52]	; (8009ac4 <HAL_UART_RxCpltCallback+0x84>)
 8009a8e:	7011      	strb	r1, [r2, #0]
 8009a90:	001a      	movs	r2, r3
 8009a92:	4b11      	ldr	r3, [pc, #68]	; (8009ad8 <HAL_UART_RxCpltCallback+0x98>)
 8009a94:	7819      	ldrb	r1, [r3, #0]
 8009a96:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <HAL_UART_RxCpltCallback+0x88>)
 8009a98:	5499      	strb	r1, [r3, r2]
    }
    // if received \n or \r, set uartRxReceived flag
    if (uartRxBuffer[0] == ASCII_CR || uartRxBuffer[0] == ASCII_LF)
 8009a9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <HAL_UART_RxCpltCallback+0x98>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b0d      	cmp	r3, #13
 8009aa0:	d003      	beq.n	8009aaa <HAL_UART_RxCpltCallback+0x6a>
 8009aa2:	4b0d      	ldr	r3, [pc, #52]	; (8009ad8 <HAL_UART_RxCpltCallback+0x98>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2b0a      	cmp	r3, #10
 8009aa8:	d102      	bne.n	8009ab0 <HAL_UART_RxCpltCallback+0x70>
    {
        uartRxReceived = 1;
 8009aaa:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <HAL_UART_RxCpltCallback+0x9c>)
 8009aac:	2201      	movs	r2, #1
 8009aae:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8009ab0:	4909      	ldr	r1, [pc, #36]	; (8009ad8 <HAL_UART_RxCpltCallback+0x98>)
 8009ab2:	4b08      	ldr	r3, [pc, #32]	; (8009ad4 <HAL_UART_RxCpltCallback+0x94>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f7fd fa4c 	bl	8006f54 <HAL_UART_Receive_IT>
}
 8009abc:	46c0      	nop			; (mov r8, r8)
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	b004      	add	sp, #16
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20000604 	.word	0x20000604
 8009ac8:	200005c4 	.word	0x200005c4
 8009acc:	0800e210 	.word	0x0800e210
 8009ad0:	20000608 	.word	0x20000608
 8009ad4:	20000438 	.word	0x20000438
 8009ad8:	200005c0 	.word	0x200005c0
 8009adc:	200005bc 	.word	0x200005bc

08009ae0 <atof>:
 8009ae0:	b510      	push	{r4, lr}
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	f000 fe24 	bl	800a730 <strtod>
 8009ae8:	bd10      	pop	{r4, pc}
	...

08009aec <sulp>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	0016      	movs	r6, r2
 8009af0:	000d      	movs	r5, r1
 8009af2:	f003 fcd3 	bl	800d49c <__ulp>
 8009af6:	2e00      	cmp	r6, #0
 8009af8:	d00d      	beq.n	8009b16 <sulp+0x2a>
 8009afa:	236b      	movs	r3, #107	; 0x6b
 8009afc:	006a      	lsls	r2, r5, #1
 8009afe:	0d52      	lsrs	r2, r2, #21
 8009b00:	1a9b      	subs	r3, r3, r2
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	dd07      	ble.n	8009b16 <sulp+0x2a>
 8009b06:	2400      	movs	r4, #0
 8009b08:	4a03      	ldr	r2, [pc, #12]	; (8009b18 <sulp+0x2c>)
 8009b0a:	051b      	lsls	r3, r3, #20
 8009b0c:	189d      	adds	r5, r3, r2
 8009b0e:	002b      	movs	r3, r5
 8009b10:	0022      	movs	r2, r4
 8009b12:	f7f8 fb9d 	bl	8002250 <__aeabi_dmul>
 8009b16:	bd70      	pop	{r4, r5, r6, pc}
 8009b18:	3ff00000 	.word	0x3ff00000

08009b1c <_strtod_l>:
 8009b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1e:	b0a1      	sub	sp, #132	; 0x84
 8009b20:	9219      	str	r2, [sp, #100]	; 0x64
 8009b22:	2200      	movs	r2, #0
 8009b24:	2600      	movs	r6, #0
 8009b26:	2700      	movs	r7, #0
 8009b28:	9004      	str	r0, [sp, #16]
 8009b2a:	9107      	str	r1, [sp, #28]
 8009b2c:	921c      	str	r2, [sp, #112]	; 0x70
 8009b2e:	911b      	str	r1, [sp, #108]	; 0x6c
 8009b30:	780a      	ldrb	r2, [r1, #0]
 8009b32:	2a2b      	cmp	r2, #43	; 0x2b
 8009b34:	d055      	beq.n	8009be2 <_strtod_l+0xc6>
 8009b36:	d841      	bhi.n	8009bbc <_strtod_l+0xa0>
 8009b38:	2a0d      	cmp	r2, #13
 8009b3a:	d83b      	bhi.n	8009bb4 <_strtod_l+0x98>
 8009b3c:	2a08      	cmp	r2, #8
 8009b3e:	d83b      	bhi.n	8009bb8 <_strtod_l+0x9c>
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	d044      	beq.n	8009bce <_strtod_l+0xb2>
 8009b44:	2200      	movs	r2, #0
 8009b46:	920f      	str	r2, [sp, #60]	; 0x3c
 8009b48:	2100      	movs	r1, #0
 8009b4a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009b4c:	9109      	str	r1, [sp, #36]	; 0x24
 8009b4e:	782a      	ldrb	r2, [r5, #0]
 8009b50:	2a30      	cmp	r2, #48	; 0x30
 8009b52:	d000      	beq.n	8009b56 <_strtod_l+0x3a>
 8009b54:	e085      	b.n	8009c62 <_strtod_l+0x146>
 8009b56:	786a      	ldrb	r2, [r5, #1]
 8009b58:	3120      	adds	r1, #32
 8009b5a:	438a      	bics	r2, r1
 8009b5c:	2a58      	cmp	r2, #88	; 0x58
 8009b5e:	d000      	beq.n	8009b62 <_strtod_l+0x46>
 8009b60:	e075      	b.n	8009c4e <_strtod_l+0x132>
 8009b62:	9302      	str	r3, [sp, #8]
 8009b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b66:	4a97      	ldr	r2, [pc, #604]	; (8009dc4 <_strtod_l+0x2a8>)
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	ab1c      	add	r3, sp, #112	; 0x70
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	9804      	ldr	r0, [sp, #16]
 8009b70:	ab1d      	add	r3, sp, #116	; 0x74
 8009b72:	a91b      	add	r1, sp, #108	; 0x6c
 8009b74:	f002 fd4a 	bl	800c60c <__gethex>
 8009b78:	230f      	movs	r3, #15
 8009b7a:	0002      	movs	r2, r0
 8009b7c:	401a      	ands	r2, r3
 8009b7e:	0004      	movs	r4, r0
 8009b80:	9205      	str	r2, [sp, #20]
 8009b82:	4218      	tst	r0, r3
 8009b84:	d005      	beq.n	8009b92 <_strtod_l+0x76>
 8009b86:	2a06      	cmp	r2, #6
 8009b88:	d12d      	bne.n	8009be6 <_strtod_l+0xca>
 8009b8a:	1c6b      	adds	r3, r5, #1
 8009b8c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009b8e:	2300      	movs	r3, #0
 8009b90:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <_strtod_l+0x82>
 8009b98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d01b      	beq.n	8009bdc <_strtod_l+0xc0>
 8009ba4:	2380      	movs	r3, #128	; 0x80
 8009ba6:	0032      	movs	r2, r6
 8009ba8:	061b      	lsls	r3, r3, #24
 8009baa:	18fb      	adds	r3, r7, r3
 8009bac:	0010      	movs	r0, r2
 8009bae:	0019      	movs	r1, r3
 8009bb0:	b021      	add	sp, #132	; 0x84
 8009bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb4:	2a20      	cmp	r2, #32
 8009bb6:	d1c5      	bne.n	8009b44 <_strtod_l+0x28>
 8009bb8:	3101      	adds	r1, #1
 8009bba:	e7b8      	b.n	8009b2e <_strtod_l+0x12>
 8009bbc:	2a2d      	cmp	r2, #45	; 0x2d
 8009bbe:	d1c1      	bne.n	8009b44 <_strtod_l+0x28>
 8009bc0:	3a2c      	subs	r2, #44	; 0x2c
 8009bc2:	920f      	str	r2, [sp, #60]	; 0x3c
 8009bc4:	1c4a      	adds	r2, r1, #1
 8009bc6:	921b      	str	r2, [sp, #108]	; 0x6c
 8009bc8:	784a      	ldrb	r2, [r1, #1]
 8009bca:	2a00      	cmp	r2, #0
 8009bcc:	d1bc      	bne.n	8009b48 <_strtod_l+0x2c>
 8009bce:	9b07      	ldr	r3, [sp, #28]
 8009bd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1dd      	bne.n	8009b98 <_strtod_l+0x7c>
 8009bdc:	0032      	movs	r2, r6
 8009bde:	003b      	movs	r3, r7
 8009be0:	e7e4      	b.n	8009bac <_strtod_l+0x90>
 8009be2:	2200      	movs	r2, #0
 8009be4:	e7ed      	b.n	8009bc2 <_strtod_l+0xa6>
 8009be6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	d007      	beq.n	8009bfc <_strtod_l+0xe0>
 8009bec:	2135      	movs	r1, #53	; 0x35
 8009bee:	a81e      	add	r0, sp, #120	; 0x78
 8009bf0:	f003 fd45 	bl	800d67e <__copybits>
 8009bf4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bf6:	9804      	ldr	r0, [sp, #16]
 8009bf8:	f003 f90e 	bl	800ce18 <_Bfree>
 8009bfc:	9805      	ldr	r0, [sp, #20]
 8009bfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c00:	3801      	subs	r0, #1
 8009c02:	2804      	cmp	r0, #4
 8009c04:	d806      	bhi.n	8009c14 <_strtod_l+0xf8>
 8009c06:	f7f6 fa8d 	bl	8000124 <__gnu_thumb1_case_uqi>
 8009c0a:	0312      	.short	0x0312
 8009c0c:	1e1c      	.short	0x1e1c
 8009c0e:	12          	.byte	0x12
 8009c0f:	00          	.byte	0x00
 8009c10:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009c12:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8009c14:	05e4      	lsls	r4, r4, #23
 8009c16:	d502      	bpl.n	8009c1e <_strtod_l+0x102>
 8009c18:	2380      	movs	r3, #128	; 0x80
 8009c1a:	061b      	lsls	r3, r3, #24
 8009c1c:	431f      	orrs	r7, r3
 8009c1e:	4b6a      	ldr	r3, [pc, #424]	; (8009dc8 <_strtod_l+0x2ac>)
 8009c20:	423b      	tst	r3, r7
 8009c22:	d1b6      	bne.n	8009b92 <_strtod_l+0x76>
 8009c24:	f001 fd3a 	bl	800b69c <__errno>
 8009c28:	2322      	movs	r3, #34	; 0x22
 8009c2a:	6003      	str	r3, [r0, #0]
 8009c2c:	e7b1      	b.n	8009b92 <_strtod_l+0x76>
 8009c2e:	4967      	ldr	r1, [pc, #412]	; (8009dcc <_strtod_l+0x2b0>)
 8009c30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009c32:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009c34:	400a      	ands	r2, r1
 8009c36:	4966      	ldr	r1, [pc, #408]	; (8009dd0 <_strtod_l+0x2b4>)
 8009c38:	185b      	adds	r3, r3, r1
 8009c3a:	051b      	lsls	r3, r3, #20
 8009c3c:	431a      	orrs	r2, r3
 8009c3e:	0017      	movs	r7, r2
 8009c40:	e7e8      	b.n	8009c14 <_strtod_l+0xf8>
 8009c42:	4f61      	ldr	r7, [pc, #388]	; (8009dc8 <_strtod_l+0x2ac>)
 8009c44:	e7e6      	b.n	8009c14 <_strtod_l+0xf8>
 8009c46:	2601      	movs	r6, #1
 8009c48:	4f62      	ldr	r7, [pc, #392]	; (8009dd4 <_strtod_l+0x2b8>)
 8009c4a:	4276      	negs	r6, r6
 8009c4c:	e7e2      	b.n	8009c14 <_strtod_l+0xf8>
 8009c4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c54:	785b      	ldrb	r3, [r3, #1]
 8009c56:	2b30      	cmp	r3, #48	; 0x30
 8009c58:	d0f9      	beq.n	8009c4e <_strtod_l+0x132>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d099      	beq.n	8009b92 <_strtod_l+0x76>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	9309      	str	r3, [sp, #36]	; 0x24
 8009c62:	2500      	movs	r5, #0
 8009c64:	220a      	movs	r2, #10
 8009c66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c68:	950d      	str	r5, [sp, #52]	; 0x34
 8009c6a:	9310      	str	r3, [sp, #64]	; 0x40
 8009c6c:	9508      	str	r5, [sp, #32]
 8009c6e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009c70:	7804      	ldrb	r4, [r0, #0]
 8009c72:	0023      	movs	r3, r4
 8009c74:	3b30      	subs	r3, #48	; 0x30
 8009c76:	b2d9      	uxtb	r1, r3
 8009c78:	2909      	cmp	r1, #9
 8009c7a:	d927      	bls.n	8009ccc <_strtod_l+0x1b0>
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	4956      	ldr	r1, [pc, #344]	; (8009dd8 <_strtod_l+0x2bc>)
 8009c80:	f001 fc44 	bl	800b50c <strncmp>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d031      	beq.n	8009cec <_strtod_l+0x1d0>
 8009c88:	2000      	movs	r0, #0
 8009c8a:	0023      	movs	r3, r4
 8009c8c:	4684      	mov	ip, r0
 8009c8e:	9a08      	ldr	r2, [sp, #32]
 8009c90:	900c      	str	r0, [sp, #48]	; 0x30
 8009c92:	9205      	str	r2, [sp, #20]
 8009c94:	2220      	movs	r2, #32
 8009c96:	0019      	movs	r1, r3
 8009c98:	4391      	bics	r1, r2
 8009c9a:	000a      	movs	r2, r1
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	9106      	str	r1, [sp, #24]
 8009ca0:	2a45      	cmp	r2, #69	; 0x45
 8009ca2:	d000      	beq.n	8009ca6 <_strtod_l+0x18a>
 8009ca4:	e0c2      	b.n	8009e2c <_strtod_l+0x310>
 8009ca6:	9b05      	ldr	r3, [sp, #20]
 8009ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009caa:	4303      	orrs	r3, r0
 8009cac:	4313      	orrs	r3, r2
 8009cae:	428b      	cmp	r3, r1
 8009cb0:	d08d      	beq.n	8009bce <_strtod_l+0xb2>
 8009cb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cb4:	9307      	str	r3, [sp, #28]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cba:	9b07      	ldr	r3, [sp, #28]
 8009cbc:	785b      	ldrb	r3, [r3, #1]
 8009cbe:	2b2b      	cmp	r3, #43	; 0x2b
 8009cc0:	d071      	beq.n	8009da6 <_strtod_l+0x28a>
 8009cc2:	000c      	movs	r4, r1
 8009cc4:	2b2d      	cmp	r3, #45	; 0x2d
 8009cc6:	d174      	bne.n	8009db2 <_strtod_l+0x296>
 8009cc8:	2401      	movs	r4, #1
 8009cca:	e06d      	b.n	8009da8 <_strtod_l+0x28c>
 8009ccc:	9908      	ldr	r1, [sp, #32]
 8009cce:	2908      	cmp	r1, #8
 8009cd0:	dc09      	bgt.n	8009ce6 <_strtod_l+0x1ca>
 8009cd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009cd4:	4351      	muls	r1, r2
 8009cd6:	185b      	adds	r3, r3, r1
 8009cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8009cda:	9b08      	ldr	r3, [sp, #32]
 8009cdc:	3001      	adds	r0, #1
 8009cde:	3301      	adds	r3, #1
 8009ce0:	9308      	str	r3, [sp, #32]
 8009ce2:	901b      	str	r0, [sp, #108]	; 0x6c
 8009ce4:	e7c3      	b.n	8009c6e <_strtod_l+0x152>
 8009ce6:	4355      	muls	r5, r2
 8009ce8:	195d      	adds	r5, r3, r5
 8009cea:	e7f6      	b.n	8009cda <_strtod_l+0x1be>
 8009cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8009cf2:	9a08      	ldr	r2, [sp, #32]
 8009cf4:	785b      	ldrb	r3, [r3, #1]
 8009cf6:	2a00      	cmp	r2, #0
 8009cf8:	d03a      	beq.n	8009d70 <_strtod_l+0x254>
 8009cfa:	900c      	str	r0, [sp, #48]	; 0x30
 8009cfc:	9205      	str	r2, [sp, #20]
 8009cfe:	001a      	movs	r2, r3
 8009d00:	3a30      	subs	r2, #48	; 0x30
 8009d02:	2a09      	cmp	r2, #9
 8009d04:	d912      	bls.n	8009d2c <_strtod_l+0x210>
 8009d06:	2201      	movs	r2, #1
 8009d08:	4694      	mov	ip, r2
 8009d0a:	e7c3      	b.n	8009c94 <_strtod_l+0x178>
 8009d0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d0e:	3001      	adds	r0, #1
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d14:	785b      	ldrb	r3, [r3, #1]
 8009d16:	2b30      	cmp	r3, #48	; 0x30
 8009d18:	d0f8      	beq.n	8009d0c <_strtod_l+0x1f0>
 8009d1a:	001a      	movs	r2, r3
 8009d1c:	3a31      	subs	r2, #49	; 0x31
 8009d1e:	2a08      	cmp	r2, #8
 8009d20:	d83c      	bhi.n	8009d9c <_strtod_l+0x280>
 8009d22:	900c      	str	r0, [sp, #48]	; 0x30
 8009d24:	2000      	movs	r0, #0
 8009d26:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d28:	9005      	str	r0, [sp, #20]
 8009d2a:	9210      	str	r2, [sp, #64]	; 0x40
 8009d2c:	001a      	movs	r2, r3
 8009d2e:	1c41      	adds	r1, r0, #1
 8009d30:	3a30      	subs	r2, #48	; 0x30
 8009d32:	2b30      	cmp	r3, #48	; 0x30
 8009d34:	d016      	beq.n	8009d64 <_strtod_l+0x248>
 8009d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d38:	185b      	adds	r3, r3, r1
 8009d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8009d3c:	9b05      	ldr	r3, [sp, #20]
 8009d3e:	210a      	movs	r1, #10
 8009d40:	469c      	mov	ip, r3
 8009d42:	4484      	add	ip, r0
 8009d44:	4563      	cmp	r3, ip
 8009d46:	d115      	bne.n	8009d74 <_strtod_l+0x258>
 8009d48:	9905      	ldr	r1, [sp, #20]
 8009d4a:	9b05      	ldr	r3, [sp, #20]
 8009d4c:	3101      	adds	r1, #1
 8009d4e:	1809      	adds	r1, r1, r0
 8009d50:	181b      	adds	r3, r3, r0
 8009d52:	9105      	str	r1, [sp, #20]
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	dc19      	bgt.n	8009d8c <_strtod_l+0x270>
 8009d58:	230a      	movs	r3, #10
 8009d5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d5c:	434b      	muls	r3, r1
 8009d5e:	2100      	movs	r1, #0
 8009d60:	18d3      	adds	r3, r2, r3
 8009d62:	930d      	str	r3, [sp, #52]	; 0x34
 8009d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d66:	0008      	movs	r0, r1
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	e7c6      	b.n	8009cfe <_strtod_l+0x1e2>
 8009d70:	9808      	ldr	r0, [sp, #32]
 8009d72:	e7d0      	b.n	8009d16 <_strtod_l+0x1fa>
 8009d74:	1c5c      	adds	r4, r3, #1
 8009d76:	2b08      	cmp	r3, #8
 8009d78:	dc04      	bgt.n	8009d84 <_strtod_l+0x268>
 8009d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d7c:	434b      	muls	r3, r1
 8009d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d80:	0023      	movs	r3, r4
 8009d82:	e7df      	b.n	8009d44 <_strtod_l+0x228>
 8009d84:	2c10      	cmp	r4, #16
 8009d86:	dcfb      	bgt.n	8009d80 <_strtod_l+0x264>
 8009d88:	434d      	muls	r5, r1
 8009d8a:	e7f9      	b.n	8009d80 <_strtod_l+0x264>
 8009d8c:	9b05      	ldr	r3, [sp, #20]
 8009d8e:	2100      	movs	r1, #0
 8009d90:	2b10      	cmp	r3, #16
 8009d92:	dce7      	bgt.n	8009d64 <_strtod_l+0x248>
 8009d94:	230a      	movs	r3, #10
 8009d96:	435d      	muls	r5, r3
 8009d98:	1955      	adds	r5, r2, r5
 8009d9a:	e7e3      	b.n	8009d64 <_strtod_l+0x248>
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	920c      	str	r2, [sp, #48]	; 0x30
 8009da0:	9205      	str	r2, [sp, #20]
 8009da2:	3201      	adds	r2, #1
 8009da4:	e7b0      	b.n	8009d08 <_strtod_l+0x1ec>
 8009da6:	2400      	movs	r4, #0
 8009da8:	9b07      	ldr	r3, [sp, #28]
 8009daa:	3302      	adds	r3, #2
 8009dac:	931b      	str	r3, [sp, #108]	; 0x6c
 8009dae:	9b07      	ldr	r3, [sp, #28]
 8009db0:	789b      	ldrb	r3, [r3, #2]
 8009db2:	001a      	movs	r2, r3
 8009db4:	3a30      	subs	r2, #48	; 0x30
 8009db6:	2a09      	cmp	r2, #9
 8009db8:	d914      	bls.n	8009de4 <_strtod_l+0x2c8>
 8009dba:	9a07      	ldr	r2, [sp, #28]
 8009dbc:	921b      	str	r2, [sp, #108]	; 0x6c
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	e033      	b.n	8009e2a <_strtod_l+0x30e>
 8009dc2:	46c0      	nop			; (mov r8, r8)
 8009dc4:	0800e3c4 	.word	0x0800e3c4
 8009dc8:	7ff00000 	.word	0x7ff00000
 8009dcc:	ffefffff 	.word	0xffefffff
 8009dd0:	00000433 	.word	0x00000433
 8009dd4:	7fffffff 	.word	0x7fffffff
 8009dd8:	0800e3c0 	.word	0x0800e3c0
 8009ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	921b      	str	r2, [sp, #108]	; 0x6c
 8009de2:	785b      	ldrb	r3, [r3, #1]
 8009de4:	2b30      	cmp	r3, #48	; 0x30
 8009de6:	d0f9      	beq.n	8009ddc <_strtod_l+0x2c0>
 8009de8:	2200      	movs	r2, #0
 8009dea:	9206      	str	r2, [sp, #24]
 8009dec:	001a      	movs	r2, r3
 8009dee:	3a31      	subs	r2, #49	; 0x31
 8009df0:	2a08      	cmp	r2, #8
 8009df2:	d81b      	bhi.n	8009e2c <_strtod_l+0x310>
 8009df4:	3b30      	subs	r3, #48	; 0x30
 8009df6:	930e      	str	r3, [sp, #56]	; 0x38
 8009df8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dfa:	9306      	str	r3, [sp, #24]
 8009dfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dfe:	1c59      	adds	r1, r3, #1
 8009e00:	911b      	str	r1, [sp, #108]	; 0x6c
 8009e02:	785b      	ldrb	r3, [r3, #1]
 8009e04:	001a      	movs	r2, r3
 8009e06:	3a30      	subs	r2, #48	; 0x30
 8009e08:	2a09      	cmp	r2, #9
 8009e0a:	d93a      	bls.n	8009e82 <_strtod_l+0x366>
 8009e0c:	9a06      	ldr	r2, [sp, #24]
 8009e0e:	1a8a      	subs	r2, r1, r2
 8009e10:	49b2      	ldr	r1, [pc, #712]	; (800a0dc <_strtod_l+0x5c0>)
 8009e12:	9106      	str	r1, [sp, #24]
 8009e14:	2a08      	cmp	r2, #8
 8009e16:	dc04      	bgt.n	8009e22 <_strtod_l+0x306>
 8009e18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e1a:	9206      	str	r2, [sp, #24]
 8009e1c:	428a      	cmp	r2, r1
 8009e1e:	dd00      	ble.n	8009e22 <_strtod_l+0x306>
 8009e20:	9106      	str	r1, [sp, #24]
 8009e22:	2c00      	cmp	r4, #0
 8009e24:	d002      	beq.n	8009e2c <_strtod_l+0x310>
 8009e26:	9a06      	ldr	r2, [sp, #24]
 8009e28:	4252      	negs	r2, r2
 8009e2a:	9206      	str	r2, [sp, #24]
 8009e2c:	9a05      	ldr	r2, [sp, #20]
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	d14d      	bne.n	8009ece <_strtod_l+0x3b2>
 8009e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e34:	4310      	orrs	r0, r2
 8009e36:	d000      	beq.n	8009e3a <_strtod_l+0x31e>
 8009e38:	e6ab      	b.n	8009b92 <_strtod_l+0x76>
 8009e3a:	4662      	mov	r2, ip
 8009e3c:	2a00      	cmp	r2, #0
 8009e3e:	d000      	beq.n	8009e42 <_strtod_l+0x326>
 8009e40:	e6c5      	b.n	8009bce <_strtod_l+0xb2>
 8009e42:	2b69      	cmp	r3, #105	; 0x69
 8009e44:	d027      	beq.n	8009e96 <_strtod_l+0x37a>
 8009e46:	dc23      	bgt.n	8009e90 <_strtod_l+0x374>
 8009e48:	2b49      	cmp	r3, #73	; 0x49
 8009e4a:	d024      	beq.n	8009e96 <_strtod_l+0x37a>
 8009e4c:	2b4e      	cmp	r3, #78	; 0x4e
 8009e4e:	d000      	beq.n	8009e52 <_strtod_l+0x336>
 8009e50:	e6bd      	b.n	8009bce <_strtod_l+0xb2>
 8009e52:	49a3      	ldr	r1, [pc, #652]	; (800a0e0 <_strtod_l+0x5c4>)
 8009e54:	a81b      	add	r0, sp, #108	; 0x6c
 8009e56:	f002 fe0f 	bl	800ca78 <__match>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d100      	bne.n	8009e60 <_strtod_l+0x344>
 8009e5e:	e6b6      	b.n	8009bce <_strtod_l+0xb2>
 8009e60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b28      	cmp	r3, #40	; 0x28
 8009e66:	d12c      	bne.n	8009ec2 <_strtod_l+0x3a6>
 8009e68:	499e      	ldr	r1, [pc, #632]	; (800a0e4 <_strtod_l+0x5c8>)
 8009e6a:	aa1e      	add	r2, sp, #120	; 0x78
 8009e6c:	a81b      	add	r0, sp, #108	; 0x6c
 8009e6e:	f002 fe17 	bl	800caa0 <__hexnan>
 8009e72:	2805      	cmp	r0, #5
 8009e74:	d125      	bne.n	8009ec2 <_strtod_l+0x3a6>
 8009e76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e78:	4a9b      	ldr	r2, [pc, #620]	; (800a0e8 <_strtod_l+0x5cc>)
 8009e7a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	0017      	movs	r7, r2
 8009e80:	e687      	b.n	8009b92 <_strtod_l+0x76>
 8009e82:	220a      	movs	r2, #10
 8009e84:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e86:	434a      	muls	r2, r1
 8009e88:	18d2      	adds	r2, r2, r3
 8009e8a:	3a30      	subs	r2, #48	; 0x30
 8009e8c:	920e      	str	r2, [sp, #56]	; 0x38
 8009e8e:	e7b5      	b.n	8009dfc <_strtod_l+0x2e0>
 8009e90:	2b6e      	cmp	r3, #110	; 0x6e
 8009e92:	d0de      	beq.n	8009e52 <_strtod_l+0x336>
 8009e94:	e69b      	b.n	8009bce <_strtod_l+0xb2>
 8009e96:	4995      	ldr	r1, [pc, #596]	; (800a0ec <_strtod_l+0x5d0>)
 8009e98:	a81b      	add	r0, sp, #108	; 0x6c
 8009e9a:	f002 fded 	bl	800ca78 <__match>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d100      	bne.n	8009ea4 <_strtod_l+0x388>
 8009ea2:	e694      	b.n	8009bce <_strtod_l+0xb2>
 8009ea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ea6:	4992      	ldr	r1, [pc, #584]	; (800a0f0 <_strtod_l+0x5d4>)
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	a81b      	add	r0, sp, #108	; 0x6c
 8009eac:	931b      	str	r3, [sp, #108]	; 0x6c
 8009eae:	f002 fde3 	bl	800ca78 <__match>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d102      	bne.n	8009ebc <_strtod_l+0x3a0>
 8009eb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009eb8:	3301      	adds	r3, #1
 8009eba:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ebc:	2600      	movs	r6, #0
 8009ebe:	4f8a      	ldr	r7, [pc, #552]	; (800a0e8 <_strtod_l+0x5cc>)
 8009ec0:	e667      	b.n	8009b92 <_strtod_l+0x76>
 8009ec2:	488c      	ldr	r0, [pc, #560]	; (800a0f4 <_strtod_l+0x5d8>)
 8009ec4:	f001 fc2c 	bl	800b720 <nan>
 8009ec8:	0006      	movs	r6, r0
 8009eca:	000f      	movs	r7, r1
 8009ecc:	e661      	b.n	8009b92 <_strtod_l+0x76>
 8009ece:	9b06      	ldr	r3, [sp, #24]
 8009ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed6:	9b08      	ldr	r3, [sp, #32]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <_strtod_l+0x3c4>
 8009edc:	9b05      	ldr	r3, [sp, #20]
 8009ede:	9308      	str	r3, [sp, #32]
 8009ee0:	9c05      	ldr	r4, [sp, #20]
 8009ee2:	2c10      	cmp	r4, #16
 8009ee4:	dd00      	ble.n	8009ee8 <_strtod_l+0x3cc>
 8009ee6:	2410      	movs	r4, #16
 8009ee8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009eea:	f7f9 f879 	bl	8002fe0 <__aeabi_ui2d>
 8009eee:	9b05      	ldr	r3, [sp, #20]
 8009ef0:	0006      	movs	r6, r0
 8009ef2:	000f      	movs	r7, r1
 8009ef4:	2b09      	cmp	r3, #9
 8009ef6:	dd15      	ble.n	8009f24 <_strtod_l+0x408>
 8009ef8:	0022      	movs	r2, r4
 8009efa:	4b7f      	ldr	r3, [pc, #508]	; (800a0f8 <_strtod_l+0x5dc>)
 8009efc:	3a09      	subs	r2, #9
 8009efe:	00d2      	lsls	r2, r2, #3
 8009f00:	189b      	adds	r3, r3, r2
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f7f8 f9a3 	bl	8002250 <__aeabi_dmul>
 8009f0a:	0006      	movs	r6, r0
 8009f0c:	0028      	movs	r0, r5
 8009f0e:	000f      	movs	r7, r1
 8009f10:	f7f9 f866 	bl	8002fe0 <__aeabi_ui2d>
 8009f14:	0002      	movs	r2, r0
 8009f16:	000b      	movs	r3, r1
 8009f18:	0030      	movs	r0, r6
 8009f1a:	0039      	movs	r1, r7
 8009f1c:	f7f7 fa3e 	bl	800139c <__aeabi_dadd>
 8009f20:	0006      	movs	r6, r0
 8009f22:	000f      	movs	r7, r1
 8009f24:	9b05      	ldr	r3, [sp, #20]
 8009f26:	2b0f      	cmp	r3, #15
 8009f28:	dc39      	bgt.n	8009f9e <_strtod_l+0x482>
 8009f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d100      	bne.n	8009f32 <_strtod_l+0x416>
 8009f30:	e62f      	b.n	8009b92 <_strtod_l+0x76>
 8009f32:	dd24      	ble.n	8009f7e <_strtod_l+0x462>
 8009f34:	2b16      	cmp	r3, #22
 8009f36:	dc09      	bgt.n	8009f4c <_strtod_l+0x430>
 8009f38:	496f      	ldr	r1, [pc, #444]	; (800a0f8 <_strtod_l+0x5dc>)
 8009f3a:	00db      	lsls	r3, r3, #3
 8009f3c:	18c9      	adds	r1, r1, r3
 8009f3e:	0032      	movs	r2, r6
 8009f40:	6808      	ldr	r0, [r1, #0]
 8009f42:	6849      	ldr	r1, [r1, #4]
 8009f44:	003b      	movs	r3, r7
 8009f46:	f7f8 f983 	bl	8002250 <__aeabi_dmul>
 8009f4a:	e7bd      	b.n	8009ec8 <_strtod_l+0x3ac>
 8009f4c:	2325      	movs	r3, #37	; 0x25
 8009f4e:	9a05      	ldr	r2, [sp, #20]
 8009f50:	1a9b      	subs	r3, r3, r2
 8009f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f54:	4293      	cmp	r3, r2
 8009f56:	db22      	blt.n	8009f9e <_strtod_l+0x482>
 8009f58:	240f      	movs	r4, #15
 8009f5a:	9b05      	ldr	r3, [sp, #20]
 8009f5c:	4d66      	ldr	r5, [pc, #408]	; (800a0f8 <_strtod_l+0x5dc>)
 8009f5e:	1ae4      	subs	r4, r4, r3
 8009f60:	00e1      	lsls	r1, r4, #3
 8009f62:	1869      	adds	r1, r5, r1
 8009f64:	0032      	movs	r2, r6
 8009f66:	6808      	ldr	r0, [r1, #0]
 8009f68:	6849      	ldr	r1, [r1, #4]
 8009f6a:	003b      	movs	r3, r7
 8009f6c:	f7f8 f970 	bl	8002250 <__aeabi_dmul>
 8009f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f72:	1b1c      	subs	r4, r3, r4
 8009f74:	00e4      	lsls	r4, r4, #3
 8009f76:	192d      	adds	r5, r5, r4
 8009f78:	682a      	ldr	r2, [r5, #0]
 8009f7a:	686b      	ldr	r3, [r5, #4]
 8009f7c:	e7e3      	b.n	8009f46 <_strtod_l+0x42a>
 8009f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f80:	3316      	adds	r3, #22
 8009f82:	db0c      	blt.n	8009f9e <_strtod_l+0x482>
 8009f84:	9906      	ldr	r1, [sp, #24]
 8009f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f88:	4b5b      	ldr	r3, [pc, #364]	; (800a0f8 <_strtod_l+0x5dc>)
 8009f8a:	1a52      	subs	r2, r2, r1
 8009f8c:	00d2      	lsls	r2, r2, #3
 8009f8e:	189b      	adds	r3, r3, r2
 8009f90:	0030      	movs	r0, r6
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	0039      	movs	r1, r7
 8009f98:	f7f7 fd60 	bl	8001a5c <__aeabi_ddiv>
 8009f9c:	e794      	b.n	8009ec8 <_strtod_l+0x3ac>
 8009f9e:	9b05      	ldr	r3, [sp, #20]
 8009fa0:	1b1c      	subs	r4, r3, r4
 8009fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa4:	18e4      	adds	r4, r4, r3
 8009fa6:	2c00      	cmp	r4, #0
 8009fa8:	dd72      	ble.n	800a090 <_strtod_l+0x574>
 8009faa:	220f      	movs	r2, #15
 8009fac:	0023      	movs	r3, r4
 8009fae:	4013      	ands	r3, r2
 8009fb0:	4214      	tst	r4, r2
 8009fb2:	d00a      	beq.n	8009fca <_strtod_l+0x4ae>
 8009fb4:	4950      	ldr	r1, [pc, #320]	; (800a0f8 <_strtod_l+0x5dc>)
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	18c9      	adds	r1, r1, r3
 8009fba:	0032      	movs	r2, r6
 8009fbc:	6808      	ldr	r0, [r1, #0]
 8009fbe:	6849      	ldr	r1, [r1, #4]
 8009fc0:	003b      	movs	r3, r7
 8009fc2:	f7f8 f945 	bl	8002250 <__aeabi_dmul>
 8009fc6:	0006      	movs	r6, r0
 8009fc8:	000f      	movs	r7, r1
 8009fca:	230f      	movs	r3, #15
 8009fcc:	439c      	bics	r4, r3
 8009fce:	d04a      	beq.n	800a066 <_strtod_l+0x54a>
 8009fd0:	3326      	adds	r3, #38	; 0x26
 8009fd2:	33ff      	adds	r3, #255	; 0xff
 8009fd4:	429c      	cmp	r4, r3
 8009fd6:	dd22      	ble.n	800a01e <_strtod_l+0x502>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	9306      	str	r3, [sp, #24]
 8009fde:	930d      	str	r3, [sp, #52]	; 0x34
 8009fe0:	9308      	str	r3, [sp, #32]
 8009fe2:	2322      	movs	r3, #34	; 0x22
 8009fe4:	2600      	movs	r6, #0
 8009fe6:	9a04      	ldr	r2, [sp, #16]
 8009fe8:	4f3f      	ldr	r7, [pc, #252]	; (800a0e8 <_strtod_l+0x5cc>)
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fee:	42b3      	cmp	r3, r6
 8009ff0:	d100      	bne.n	8009ff4 <_strtod_l+0x4d8>
 8009ff2:	e5ce      	b.n	8009b92 <_strtod_l+0x76>
 8009ff4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ff6:	9804      	ldr	r0, [sp, #16]
 8009ff8:	f002 ff0e 	bl	800ce18 <_Bfree>
 8009ffc:	9908      	ldr	r1, [sp, #32]
 8009ffe:	9804      	ldr	r0, [sp, #16]
 800a000:	f002 ff0a 	bl	800ce18 <_Bfree>
 800a004:	9906      	ldr	r1, [sp, #24]
 800a006:	9804      	ldr	r0, [sp, #16]
 800a008:	f002 ff06 	bl	800ce18 <_Bfree>
 800a00c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a00e:	9804      	ldr	r0, [sp, #16]
 800a010:	f002 ff02 	bl	800ce18 <_Bfree>
 800a014:	9905      	ldr	r1, [sp, #20]
 800a016:	9804      	ldr	r0, [sp, #16]
 800a018:	f002 fefe 	bl	800ce18 <_Bfree>
 800a01c:	e5b9      	b.n	8009b92 <_strtod_l+0x76>
 800a01e:	2300      	movs	r3, #0
 800a020:	0030      	movs	r0, r6
 800a022:	0039      	movs	r1, r7
 800a024:	4d35      	ldr	r5, [pc, #212]	; (800a0fc <_strtod_l+0x5e0>)
 800a026:	1124      	asrs	r4, r4, #4
 800a028:	9307      	str	r3, [sp, #28]
 800a02a:	2c01      	cmp	r4, #1
 800a02c:	dc1e      	bgt.n	800a06c <_strtod_l+0x550>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <_strtod_l+0x51a>
 800a032:	0006      	movs	r6, r0
 800a034:	000f      	movs	r7, r1
 800a036:	4b32      	ldr	r3, [pc, #200]	; (800a100 <_strtod_l+0x5e4>)
 800a038:	9a07      	ldr	r2, [sp, #28]
 800a03a:	18ff      	adds	r7, r7, r3
 800a03c:	4b2f      	ldr	r3, [pc, #188]	; (800a0fc <_strtod_l+0x5e0>)
 800a03e:	00d2      	lsls	r2, r2, #3
 800a040:	189d      	adds	r5, r3, r2
 800a042:	6828      	ldr	r0, [r5, #0]
 800a044:	6869      	ldr	r1, [r5, #4]
 800a046:	0032      	movs	r2, r6
 800a048:	003b      	movs	r3, r7
 800a04a:	f7f8 f901 	bl	8002250 <__aeabi_dmul>
 800a04e:	4b26      	ldr	r3, [pc, #152]	; (800a0e8 <_strtod_l+0x5cc>)
 800a050:	4a2c      	ldr	r2, [pc, #176]	; (800a104 <_strtod_l+0x5e8>)
 800a052:	0006      	movs	r6, r0
 800a054:	400b      	ands	r3, r1
 800a056:	4293      	cmp	r3, r2
 800a058:	d8be      	bhi.n	8009fd8 <_strtod_l+0x4bc>
 800a05a:	4a2b      	ldr	r2, [pc, #172]	; (800a108 <_strtod_l+0x5ec>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d913      	bls.n	800a088 <_strtod_l+0x56c>
 800a060:	2601      	movs	r6, #1
 800a062:	4f2a      	ldr	r7, [pc, #168]	; (800a10c <_strtod_l+0x5f0>)
 800a064:	4276      	negs	r6, r6
 800a066:	2300      	movs	r3, #0
 800a068:	9307      	str	r3, [sp, #28]
 800a06a:	e088      	b.n	800a17e <_strtod_l+0x662>
 800a06c:	2201      	movs	r2, #1
 800a06e:	4214      	tst	r4, r2
 800a070:	d004      	beq.n	800a07c <_strtod_l+0x560>
 800a072:	682a      	ldr	r2, [r5, #0]
 800a074:	686b      	ldr	r3, [r5, #4]
 800a076:	f7f8 f8eb 	bl	8002250 <__aeabi_dmul>
 800a07a:	2301      	movs	r3, #1
 800a07c:	9a07      	ldr	r2, [sp, #28]
 800a07e:	1064      	asrs	r4, r4, #1
 800a080:	3201      	adds	r2, #1
 800a082:	9207      	str	r2, [sp, #28]
 800a084:	3508      	adds	r5, #8
 800a086:	e7d0      	b.n	800a02a <_strtod_l+0x50e>
 800a088:	23d4      	movs	r3, #212	; 0xd4
 800a08a:	049b      	lsls	r3, r3, #18
 800a08c:	18cf      	adds	r7, r1, r3
 800a08e:	e7ea      	b.n	800a066 <_strtod_l+0x54a>
 800a090:	2c00      	cmp	r4, #0
 800a092:	d0e8      	beq.n	800a066 <_strtod_l+0x54a>
 800a094:	4264      	negs	r4, r4
 800a096:	230f      	movs	r3, #15
 800a098:	0022      	movs	r2, r4
 800a09a:	401a      	ands	r2, r3
 800a09c:	421c      	tst	r4, r3
 800a09e:	d00a      	beq.n	800a0b6 <_strtod_l+0x59a>
 800a0a0:	4b15      	ldr	r3, [pc, #84]	; (800a0f8 <_strtod_l+0x5dc>)
 800a0a2:	00d2      	lsls	r2, r2, #3
 800a0a4:	189b      	adds	r3, r3, r2
 800a0a6:	0030      	movs	r0, r6
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	0039      	movs	r1, r7
 800a0ae:	f7f7 fcd5 	bl	8001a5c <__aeabi_ddiv>
 800a0b2:	0006      	movs	r6, r0
 800a0b4:	000f      	movs	r7, r1
 800a0b6:	1124      	asrs	r4, r4, #4
 800a0b8:	d0d5      	beq.n	800a066 <_strtod_l+0x54a>
 800a0ba:	2c1f      	cmp	r4, #31
 800a0bc:	dd28      	ble.n	800a110 <_strtod_l+0x5f4>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9305      	str	r3, [sp, #20]
 800a0c2:	9306      	str	r3, [sp, #24]
 800a0c4:	930d      	str	r3, [sp, #52]	; 0x34
 800a0c6:	9308      	str	r3, [sp, #32]
 800a0c8:	2322      	movs	r3, #34	; 0x22
 800a0ca:	9a04      	ldr	r2, [sp, #16]
 800a0cc:	2600      	movs	r6, #0
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0d2:	2700      	movs	r7, #0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d18d      	bne.n	8009ff4 <_strtod_l+0x4d8>
 800a0d8:	e55b      	b.n	8009b92 <_strtod_l+0x76>
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	00004e1f 	.word	0x00004e1f
 800a0e0:	0800e425 	.word	0x0800e425
 800a0e4:	0800e3d8 	.word	0x0800e3d8
 800a0e8:	7ff00000 	.word	0x7ff00000
 800a0ec:	0800e41d 	.word	0x0800e41d
 800a0f0:	0800e504 	.word	0x0800e504
 800a0f4:	0800e500 	.word	0x0800e500
 800a0f8:	0800e658 	.word	0x0800e658
 800a0fc:	0800e630 	.word	0x0800e630
 800a100:	fcb00000 	.word	0xfcb00000
 800a104:	7ca00000 	.word	0x7ca00000
 800a108:	7c900000 	.word	0x7c900000
 800a10c:	7fefffff 	.word	0x7fefffff
 800a110:	2310      	movs	r3, #16
 800a112:	0022      	movs	r2, r4
 800a114:	401a      	ands	r2, r3
 800a116:	9207      	str	r2, [sp, #28]
 800a118:	421c      	tst	r4, r3
 800a11a:	d001      	beq.n	800a120 <_strtod_l+0x604>
 800a11c:	335a      	adds	r3, #90	; 0x5a
 800a11e:	9307      	str	r3, [sp, #28]
 800a120:	0030      	movs	r0, r6
 800a122:	0039      	movs	r1, r7
 800a124:	2300      	movs	r3, #0
 800a126:	4dc4      	ldr	r5, [pc, #784]	; (800a438 <_strtod_l+0x91c>)
 800a128:	2201      	movs	r2, #1
 800a12a:	4214      	tst	r4, r2
 800a12c:	d004      	beq.n	800a138 <_strtod_l+0x61c>
 800a12e:	682a      	ldr	r2, [r5, #0]
 800a130:	686b      	ldr	r3, [r5, #4]
 800a132:	f7f8 f88d 	bl	8002250 <__aeabi_dmul>
 800a136:	2301      	movs	r3, #1
 800a138:	1064      	asrs	r4, r4, #1
 800a13a:	3508      	adds	r5, #8
 800a13c:	2c00      	cmp	r4, #0
 800a13e:	d1f3      	bne.n	800a128 <_strtod_l+0x60c>
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <_strtod_l+0x62c>
 800a144:	0006      	movs	r6, r0
 800a146:	000f      	movs	r7, r1
 800a148:	9b07      	ldr	r3, [sp, #28]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00f      	beq.n	800a16e <_strtod_l+0x652>
 800a14e:	236b      	movs	r3, #107	; 0x6b
 800a150:	007a      	lsls	r2, r7, #1
 800a152:	0d52      	lsrs	r2, r2, #21
 800a154:	0039      	movs	r1, r7
 800a156:	1a9b      	subs	r3, r3, r2
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dd08      	ble.n	800a16e <_strtod_l+0x652>
 800a15c:	2b1f      	cmp	r3, #31
 800a15e:	dc00      	bgt.n	800a162 <_strtod_l+0x646>
 800a160:	e121      	b.n	800a3a6 <_strtod_l+0x88a>
 800a162:	2600      	movs	r6, #0
 800a164:	2b34      	cmp	r3, #52	; 0x34
 800a166:	dc00      	bgt.n	800a16a <_strtod_l+0x64e>
 800a168:	e116      	b.n	800a398 <_strtod_l+0x87c>
 800a16a:	27dc      	movs	r7, #220	; 0xdc
 800a16c:	04bf      	lsls	r7, r7, #18
 800a16e:	2200      	movs	r2, #0
 800a170:	2300      	movs	r3, #0
 800a172:	0030      	movs	r0, r6
 800a174:	0039      	movs	r1, r7
 800a176:	f7f6 f96f 	bl	8000458 <__aeabi_dcmpeq>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d19f      	bne.n	800a0be <_strtod_l+0x5a2>
 800a17e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a180:	9a08      	ldr	r2, [sp, #32]
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a186:	9b05      	ldr	r3, [sp, #20]
 800a188:	9804      	ldr	r0, [sp, #16]
 800a18a:	f002 fead 	bl	800cee8 <__s2b>
 800a18e:	900d      	str	r0, [sp, #52]	; 0x34
 800a190:	2800      	cmp	r0, #0
 800a192:	d100      	bne.n	800a196 <_strtod_l+0x67a>
 800a194:	e720      	b.n	8009fd8 <_strtod_l+0x4bc>
 800a196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a198:	9906      	ldr	r1, [sp, #24]
 800a19a:	17da      	asrs	r2, r3, #31
 800a19c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a19e:	1a5b      	subs	r3, r3, r1
 800a1a0:	401a      	ands	r2, r3
 800a1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a4:	9215      	str	r2, [sp, #84]	; 0x54
 800a1a6:	43db      	mvns	r3, r3
 800a1a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1aa:	17db      	asrs	r3, r3, #31
 800a1ac:	401a      	ands	r2, r3
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9218      	str	r2, [sp, #96]	; 0x60
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	9306      	str	r3, [sp, #24]
 800a1b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1b8:	9804      	ldr	r0, [sp, #16]
 800a1ba:	6859      	ldr	r1, [r3, #4]
 800a1bc:	f002 fde8 	bl	800cd90 <_Balloc>
 800a1c0:	9008      	str	r0, [sp, #32]
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d100      	bne.n	800a1c8 <_strtod_l+0x6ac>
 800a1c6:	e70c      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a1c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ca:	300c      	adds	r0, #12
 800a1cc:	0019      	movs	r1, r3
 800a1ce:	691a      	ldr	r2, [r3, #16]
 800a1d0:	310c      	adds	r1, #12
 800a1d2:	3202      	adds	r2, #2
 800a1d4:	0092      	lsls	r2, r2, #2
 800a1d6:	f001 fa99 	bl	800b70c <memcpy>
 800a1da:	ab1e      	add	r3, sp, #120	; 0x78
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	ab1d      	add	r3, sp, #116	; 0x74
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	0032      	movs	r2, r6
 800a1e4:	003b      	movs	r3, r7
 800a1e6:	9804      	ldr	r0, [sp, #16]
 800a1e8:	9610      	str	r6, [sp, #64]	; 0x40
 800a1ea:	9711      	str	r7, [sp, #68]	; 0x44
 800a1ec:	f003 f9be 	bl	800d56c <__d2b>
 800a1f0:	901c      	str	r0, [sp, #112]	; 0x70
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d100      	bne.n	800a1f8 <_strtod_l+0x6dc>
 800a1f6:	e6f4      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	9804      	ldr	r0, [sp, #16]
 800a1fc:	f002 ff08 	bl	800d010 <__i2b>
 800a200:	9006      	str	r0, [sp, #24]
 800a202:	2800      	cmp	r0, #0
 800a204:	d100      	bne.n	800a208 <_strtod_l+0x6ec>
 800a206:	e6ec      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a208:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a20a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a20c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a20e:	1ad4      	subs	r4, r2, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	db01      	blt.n	800a218 <_strtod_l+0x6fc>
 800a214:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a216:	195d      	adds	r5, r3, r5
 800a218:	9907      	ldr	r1, [sp, #28]
 800a21a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a21c:	1a5b      	subs	r3, r3, r1
 800a21e:	2136      	movs	r1, #54	; 0x36
 800a220:	189b      	adds	r3, r3, r2
 800a222:	1a8a      	subs	r2, r1, r2
 800a224:	4985      	ldr	r1, [pc, #532]	; (800a43c <_strtod_l+0x920>)
 800a226:	2001      	movs	r0, #1
 800a228:	468c      	mov	ip, r1
 800a22a:	2100      	movs	r1, #0
 800a22c:	3b01      	subs	r3, #1
 800a22e:	9114      	str	r1, [sp, #80]	; 0x50
 800a230:	9012      	str	r0, [sp, #72]	; 0x48
 800a232:	4563      	cmp	r3, ip
 800a234:	da07      	bge.n	800a246 <_strtod_l+0x72a>
 800a236:	4661      	mov	r1, ip
 800a238:	1ac9      	subs	r1, r1, r3
 800a23a:	1a52      	subs	r2, r2, r1
 800a23c:	291f      	cmp	r1, #31
 800a23e:	dd00      	ble.n	800a242 <_strtod_l+0x726>
 800a240:	e0b6      	b.n	800a3b0 <_strtod_l+0x894>
 800a242:	4088      	lsls	r0, r1
 800a244:	9012      	str	r0, [sp, #72]	; 0x48
 800a246:	18ab      	adds	r3, r5, r2
 800a248:	930c      	str	r3, [sp, #48]	; 0x30
 800a24a:	18a4      	adds	r4, r4, r2
 800a24c:	9b07      	ldr	r3, [sp, #28]
 800a24e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a250:	191c      	adds	r4, r3, r4
 800a252:	002b      	movs	r3, r5
 800a254:	4295      	cmp	r5, r2
 800a256:	dd00      	ble.n	800a25a <_strtod_l+0x73e>
 800a258:	0013      	movs	r3, r2
 800a25a:	42a3      	cmp	r3, r4
 800a25c:	dd00      	ble.n	800a260 <_strtod_l+0x744>
 800a25e:	0023      	movs	r3, r4
 800a260:	2b00      	cmp	r3, #0
 800a262:	dd04      	ble.n	800a26e <_strtod_l+0x752>
 800a264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a266:	1ae4      	subs	r4, r4, r3
 800a268:	1ad2      	subs	r2, r2, r3
 800a26a:	920c      	str	r2, [sp, #48]	; 0x30
 800a26c:	1aed      	subs	r5, r5, r3
 800a26e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a270:	2b00      	cmp	r3, #0
 800a272:	dd17      	ble.n	800a2a4 <_strtod_l+0x788>
 800a274:	001a      	movs	r2, r3
 800a276:	9906      	ldr	r1, [sp, #24]
 800a278:	9804      	ldr	r0, [sp, #16]
 800a27a:	f002 ff91 	bl	800d1a0 <__pow5mult>
 800a27e:	9006      	str	r0, [sp, #24]
 800a280:	2800      	cmp	r0, #0
 800a282:	d100      	bne.n	800a286 <_strtod_l+0x76a>
 800a284:	e6ad      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a286:	0001      	movs	r1, r0
 800a288:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a28a:	9804      	ldr	r0, [sp, #16]
 800a28c:	f002 fed8 	bl	800d040 <__multiply>
 800a290:	900e      	str	r0, [sp, #56]	; 0x38
 800a292:	2800      	cmp	r0, #0
 800a294:	d100      	bne.n	800a298 <_strtod_l+0x77c>
 800a296:	e6a4      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a298:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a29a:	9804      	ldr	r0, [sp, #16]
 800a29c:	f002 fdbc 	bl	800ce18 <_Bfree>
 800a2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a2:	931c      	str	r3, [sp, #112]	; 0x70
 800a2a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	dd00      	ble.n	800a2ac <_strtod_l+0x790>
 800a2aa:	e087      	b.n	800a3bc <_strtod_l+0x8a0>
 800a2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dd08      	ble.n	800a2c4 <_strtod_l+0x7a8>
 800a2b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a2b4:	9908      	ldr	r1, [sp, #32]
 800a2b6:	9804      	ldr	r0, [sp, #16]
 800a2b8:	f002 ff72 	bl	800d1a0 <__pow5mult>
 800a2bc:	9008      	str	r0, [sp, #32]
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d100      	bne.n	800a2c4 <_strtod_l+0x7a8>
 800a2c2:	e68e      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a2c4:	2c00      	cmp	r4, #0
 800a2c6:	dd08      	ble.n	800a2da <_strtod_l+0x7be>
 800a2c8:	0022      	movs	r2, r4
 800a2ca:	9908      	ldr	r1, [sp, #32]
 800a2cc:	9804      	ldr	r0, [sp, #16]
 800a2ce:	f002 ffc3 	bl	800d258 <__lshift>
 800a2d2:	9008      	str	r0, [sp, #32]
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d100      	bne.n	800a2da <_strtod_l+0x7be>
 800a2d8:	e683      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a2da:	2d00      	cmp	r5, #0
 800a2dc:	dd08      	ble.n	800a2f0 <_strtod_l+0x7d4>
 800a2de:	002a      	movs	r2, r5
 800a2e0:	9906      	ldr	r1, [sp, #24]
 800a2e2:	9804      	ldr	r0, [sp, #16]
 800a2e4:	f002 ffb8 	bl	800d258 <__lshift>
 800a2e8:	9006      	str	r0, [sp, #24]
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d100      	bne.n	800a2f0 <_strtod_l+0x7d4>
 800a2ee:	e678      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a2f0:	9a08      	ldr	r2, [sp, #32]
 800a2f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a2f4:	9804      	ldr	r0, [sp, #16]
 800a2f6:	f003 f839 	bl	800d36c <__mdiff>
 800a2fa:	9005      	str	r0, [sp, #20]
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d100      	bne.n	800a302 <_strtod_l+0x7e6>
 800a300:	e66f      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a302:	2200      	movs	r2, #0
 800a304:	68c3      	ldr	r3, [r0, #12]
 800a306:	9906      	ldr	r1, [sp, #24]
 800a308:	60c2      	str	r2, [r0, #12]
 800a30a:	930c      	str	r3, [sp, #48]	; 0x30
 800a30c:	f003 f812 	bl	800d334 <__mcmp>
 800a310:	2800      	cmp	r0, #0
 800a312:	da5d      	bge.n	800a3d0 <_strtod_l+0x8b4>
 800a314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a316:	4333      	orrs	r3, r6
 800a318:	d000      	beq.n	800a31c <_strtod_l+0x800>
 800a31a:	e088      	b.n	800a42e <_strtod_l+0x912>
 800a31c:	033b      	lsls	r3, r7, #12
 800a31e:	d000      	beq.n	800a322 <_strtod_l+0x806>
 800a320:	e085      	b.n	800a42e <_strtod_l+0x912>
 800a322:	22d6      	movs	r2, #214	; 0xd6
 800a324:	4b46      	ldr	r3, [pc, #280]	; (800a440 <_strtod_l+0x924>)
 800a326:	04d2      	lsls	r2, r2, #19
 800a328:	403b      	ands	r3, r7
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d97f      	bls.n	800a42e <_strtod_l+0x912>
 800a32e:	9b05      	ldr	r3, [sp, #20]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d103      	bne.n	800a33e <_strtod_l+0x822>
 800a336:	9b05      	ldr	r3, [sp, #20]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	dd77      	ble.n	800a42e <_strtod_l+0x912>
 800a33e:	9905      	ldr	r1, [sp, #20]
 800a340:	2201      	movs	r2, #1
 800a342:	9804      	ldr	r0, [sp, #16]
 800a344:	f002 ff88 	bl	800d258 <__lshift>
 800a348:	9906      	ldr	r1, [sp, #24]
 800a34a:	9005      	str	r0, [sp, #20]
 800a34c:	f002 fff2 	bl	800d334 <__mcmp>
 800a350:	2800      	cmp	r0, #0
 800a352:	dd6c      	ble.n	800a42e <_strtod_l+0x912>
 800a354:	9907      	ldr	r1, [sp, #28]
 800a356:	003b      	movs	r3, r7
 800a358:	4a39      	ldr	r2, [pc, #228]	; (800a440 <_strtod_l+0x924>)
 800a35a:	2900      	cmp	r1, #0
 800a35c:	d100      	bne.n	800a360 <_strtod_l+0x844>
 800a35e:	e094      	b.n	800a48a <_strtod_l+0x96e>
 800a360:	0011      	movs	r1, r2
 800a362:	20d6      	movs	r0, #214	; 0xd6
 800a364:	4039      	ands	r1, r7
 800a366:	04c0      	lsls	r0, r0, #19
 800a368:	4281      	cmp	r1, r0
 800a36a:	dd00      	ble.n	800a36e <_strtod_l+0x852>
 800a36c:	e08d      	b.n	800a48a <_strtod_l+0x96e>
 800a36e:	23dc      	movs	r3, #220	; 0xdc
 800a370:	049b      	lsls	r3, r3, #18
 800a372:	4299      	cmp	r1, r3
 800a374:	dc00      	bgt.n	800a378 <_strtod_l+0x85c>
 800a376:	e6a7      	b.n	800a0c8 <_strtod_l+0x5ac>
 800a378:	0030      	movs	r0, r6
 800a37a:	0039      	movs	r1, r7
 800a37c:	4b31      	ldr	r3, [pc, #196]	; (800a444 <_strtod_l+0x928>)
 800a37e:	2200      	movs	r2, #0
 800a380:	f7f7 ff66 	bl	8002250 <__aeabi_dmul>
 800a384:	4b2e      	ldr	r3, [pc, #184]	; (800a440 <_strtod_l+0x924>)
 800a386:	0006      	movs	r6, r0
 800a388:	000f      	movs	r7, r1
 800a38a:	420b      	tst	r3, r1
 800a38c:	d000      	beq.n	800a390 <_strtod_l+0x874>
 800a38e:	e631      	b.n	8009ff4 <_strtod_l+0x4d8>
 800a390:	2322      	movs	r3, #34	; 0x22
 800a392:	9a04      	ldr	r2, [sp, #16]
 800a394:	6013      	str	r3, [r2, #0]
 800a396:	e62d      	b.n	8009ff4 <_strtod_l+0x4d8>
 800a398:	234b      	movs	r3, #75	; 0x4b
 800a39a:	1a9a      	subs	r2, r3, r2
 800a39c:	3b4c      	subs	r3, #76	; 0x4c
 800a39e:	4093      	lsls	r3, r2
 800a3a0:	4019      	ands	r1, r3
 800a3a2:	000f      	movs	r7, r1
 800a3a4:	e6e3      	b.n	800a16e <_strtod_l+0x652>
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	4252      	negs	r2, r2
 800a3aa:	409a      	lsls	r2, r3
 800a3ac:	4016      	ands	r6, r2
 800a3ae:	e6de      	b.n	800a16e <_strtod_l+0x652>
 800a3b0:	4925      	ldr	r1, [pc, #148]	; (800a448 <_strtod_l+0x92c>)
 800a3b2:	1acb      	subs	r3, r1, r3
 800a3b4:	0001      	movs	r1, r0
 800a3b6:	4099      	lsls	r1, r3
 800a3b8:	9114      	str	r1, [sp, #80]	; 0x50
 800a3ba:	e743      	b.n	800a244 <_strtod_l+0x728>
 800a3bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3be:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3c0:	9804      	ldr	r0, [sp, #16]
 800a3c2:	f002 ff49 	bl	800d258 <__lshift>
 800a3c6:	901c      	str	r0, [sp, #112]	; 0x70
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d000      	beq.n	800a3ce <_strtod_l+0x8b2>
 800a3cc:	e76e      	b.n	800a2ac <_strtod_l+0x790>
 800a3ce:	e608      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a3d0:	970e      	str	r7, [sp, #56]	; 0x38
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d177      	bne.n	800a4c6 <_strtod_l+0x9aa>
 800a3d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3d8:	033b      	lsls	r3, r7, #12
 800a3da:	0b1b      	lsrs	r3, r3, #12
 800a3dc:	2a00      	cmp	r2, #0
 800a3de:	d039      	beq.n	800a454 <_strtod_l+0x938>
 800a3e0:	4a1a      	ldr	r2, [pc, #104]	; (800a44c <_strtod_l+0x930>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d139      	bne.n	800a45a <_strtod_l+0x93e>
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	9b07      	ldr	r3, [sp, #28]
 800a3ea:	4249      	negs	r1, r1
 800a3ec:	0032      	movs	r2, r6
 800a3ee:	0008      	movs	r0, r1
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00b      	beq.n	800a40c <_strtod_l+0x8f0>
 800a3f4:	24d4      	movs	r4, #212	; 0xd4
 800a3f6:	4b12      	ldr	r3, [pc, #72]	; (800a440 <_strtod_l+0x924>)
 800a3f8:	0008      	movs	r0, r1
 800a3fa:	403b      	ands	r3, r7
 800a3fc:	04e4      	lsls	r4, r4, #19
 800a3fe:	42a3      	cmp	r3, r4
 800a400:	d804      	bhi.n	800a40c <_strtod_l+0x8f0>
 800a402:	306c      	adds	r0, #108	; 0x6c
 800a404:	0d1b      	lsrs	r3, r3, #20
 800a406:	1ac3      	subs	r3, r0, r3
 800a408:	4099      	lsls	r1, r3
 800a40a:	0008      	movs	r0, r1
 800a40c:	4282      	cmp	r2, r0
 800a40e:	d124      	bne.n	800a45a <_strtod_l+0x93e>
 800a410:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <_strtod_l+0x934>)
 800a412:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a414:	4299      	cmp	r1, r3
 800a416:	d102      	bne.n	800a41e <_strtod_l+0x902>
 800a418:	3201      	adds	r2, #1
 800a41a:	d100      	bne.n	800a41e <_strtod_l+0x902>
 800a41c:	e5e1      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a41e:	4b08      	ldr	r3, [pc, #32]	; (800a440 <_strtod_l+0x924>)
 800a420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a422:	2600      	movs	r6, #0
 800a424:	401a      	ands	r2, r3
 800a426:	0013      	movs	r3, r2
 800a428:	2280      	movs	r2, #128	; 0x80
 800a42a:	0352      	lsls	r2, r2, #13
 800a42c:	189f      	adds	r7, r3, r2
 800a42e:	9b07      	ldr	r3, [sp, #28]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1a1      	bne.n	800a378 <_strtod_l+0x85c>
 800a434:	e5de      	b.n	8009ff4 <_strtod_l+0x4d8>
 800a436:	46c0      	nop			; (mov r8, r8)
 800a438:	0800e3f0 	.word	0x0800e3f0
 800a43c:	fffffc02 	.word	0xfffffc02
 800a440:	7ff00000 	.word	0x7ff00000
 800a444:	39500000 	.word	0x39500000
 800a448:	fffffbe2 	.word	0xfffffbe2
 800a44c:	000fffff 	.word	0x000fffff
 800a450:	7fefffff 	.word	0x7fefffff
 800a454:	4333      	orrs	r3, r6
 800a456:	d100      	bne.n	800a45a <_strtod_l+0x93e>
 800a458:	e77c      	b.n	800a354 <_strtod_l+0x838>
 800a45a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d01d      	beq.n	800a49c <_strtod_l+0x980>
 800a460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a462:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a464:	4213      	tst	r3, r2
 800a466:	d0e2      	beq.n	800a42e <_strtod_l+0x912>
 800a468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a46a:	0030      	movs	r0, r6
 800a46c:	0039      	movs	r1, r7
 800a46e:	9a07      	ldr	r2, [sp, #28]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d017      	beq.n	800a4a4 <_strtod_l+0x988>
 800a474:	f7ff fb3a 	bl	8009aec <sulp>
 800a478:	0002      	movs	r2, r0
 800a47a:	000b      	movs	r3, r1
 800a47c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a47e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a480:	f7f6 ff8c 	bl	800139c <__aeabi_dadd>
 800a484:	0006      	movs	r6, r0
 800a486:	000f      	movs	r7, r1
 800a488:	e7d1      	b.n	800a42e <_strtod_l+0x912>
 800a48a:	2601      	movs	r6, #1
 800a48c:	4013      	ands	r3, r2
 800a48e:	4a98      	ldr	r2, [pc, #608]	; (800a6f0 <_strtod_l+0xbd4>)
 800a490:	4276      	negs	r6, r6
 800a492:	189b      	adds	r3, r3, r2
 800a494:	4a97      	ldr	r2, [pc, #604]	; (800a6f4 <_strtod_l+0xbd8>)
 800a496:	431a      	orrs	r2, r3
 800a498:	0017      	movs	r7, r2
 800a49a:	e7c8      	b.n	800a42e <_strtod_l+0x912>
 800a49c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a49e:	4233      	tst	r3, r6
 800a4a0:	d0c5      	beq.n	800a42e <_strtod_l+0x912>
 800a4a2:	e7e1      	b.n	800a468 <_strtod_l+0x94c>
 800a4a4:	f7ff fb22 	bl	8009aec <sulp>
 800a4a8:	0002      	movs	r2, r0
 800a4aa:	000b      	movs	r3, r1
 800a4ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a4ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a4b0:	f7f8 f990 	bl	80027d4 <__aeabi_dsub>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	0006      	movs	r6, r0
 800a4ba:	000f      	movs	r7, r1
 800a4bc:	f7f5 ffcc 	bl	8000458 <__aeabi_dcmpeq>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d0b4      	beq.n	800a42e <_strtod_l+0x912>
 800a4c4:	e600      	b.n	800a0c8 <_strtod_l+0x5ac>
 800a4c6:	9906      	ldr	r1, [sp, #24]
 800a4c8:	9805      	ldr	r0, [sp, #20]
 800a4ca:	f003 f8af 	bl	800d62c <__ratio>
 800a4ce:	2380      	movs	r3, #128	; 0x80
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	05db      	lsls	r3, r3, #23
 800a4d4:	0004      	movs	r4, r0
 800a4d6:	000d      	movs	r5, r1
 800a4d8:	f7f5 ffce 	bl	8000478 <__aeabi_dcmple>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d06d      	beq.n	800a5bc <_strtod_l+0xaa0>
 800a4e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d000      	beq.n	800a4e8 <_strtod_l+0x9cc>
 800a4e6:	e07e      	b.n	800a5e6 <_strtod_l+0xaca>
 800a4e8:	2e00      	cmp	r6, #0
 800a4ea:	d158      	bne.n	800a59e <_strtod_l+0xa82>
 800a4ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4ee:	031b      	lsls	r3, r3, #12
 800a4f0:	d000      	beq.n	800a4f4 <_strtod_l+0x9d8>
 800a4f2:	e07f      	b.n	800a5f4 <_strtod_l+0xad8>
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	0020      	movs	r0, r4
 800a4f8:	0029      	movs	r1, r5
 800a4fa:	4b7f      	ldr	r3, [pc, #508]	; (800a6f8 <_strtod_l+0xbdc>)
 800a4fc:	f7f5 ffb2 	bl	8000464 <__aeabi_dcmplt>
 800a500:	2800      	cmp	r0, #0
 800a502:	d158      	bne.n	800a5b6 <_strtod_l+0xa9a>
 800a504:	0020      	movs	r0, r4
 800a506:	0029      	movs	r1, r5
 800a508:	2200      	movs	r2, #0
 800a50a:	4b7c      	ldr	r3, [pc, #496]	; (800a6fc <_strtod_l+0xbe0>)
 800a50c:	f7f7 fea0 	bl	8002250 <__aeabi_dmul>
 800a510:	0004      	movs	r4, r0
 800a512:	000d      	movs	r5, r1
 800a514:	2380      	movs	r3, #128	; 0x80
 800a516:	061b      	lsls	r3, r3, #24
 800a518:	940a      	str	r4, [sp, #40]	; 0x28
 800a51a:	18eb      	adds	r3, r5, r3
 800a51c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a51e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a522:	9212      	str	r2, [sp, #72]	; 0x48
 800a524:	9313      	str	r3, [sp, #76]	; 0x4c
 800a526:	4a76      	ldr	r2, [pc, #472]	; (800a700 <_strtod_l+0xbe4>)
 800a528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a52a:	4013      	ands	r3, r2
 800a52c:	9314      	str	r3, [sp, #80]	; 0x50
 800a52e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a530:	4b74      	ldr	r3, [pc, #464]	; (800a704 <_strtod_l+0xbe8>)
 800a532:	429a      	cmp	r2, r3
 800a534:	d000      	beq.n	800a538 <_strtod_l+0xa1c>
 800a536:	e091      	b.n	800a65c <_strtod_l+0xb40>
 800a538:	4a73      	ldr	r2, [pc, #460]	; (800a708 <_strtod_l+0xbec>)
 800a53a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a53c:	4694      	mov	ip, r2
 800a53e:	4463      	add	r3, ip
 800a540:	001f      	movs	r7, r3
 800a542:	0030      	movs	r0, r6
 800a544:	0019      	movs	r1, r3
 800a546:	f002 ffa9 	bl	800d49c <__ulp>
 800a54a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a54c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a54e:	f7f7 fe7f 	bl	8002250 <__aeabi_dmul>
 800a552:	0032      	movs	r2, r6
 800a554:	003b      	movs	r3, r7
 800a556:	f7f6 ff21 	bl	800139c <__aeabi_dadd>
 800a55a:	4a69      	ldr	r2, [pc, #420]	; (800a700 <_strtod_l+0xbe4>)
 800a55c:	4b6b      	ldr	r3, [pc, #428]	; (800a70c <_strtod_l+0xbf0>)
 800a55e:	0006      	movs	r6, r0
 800a560:	400a      	ands	r2, r1
 800a562:	429a      	cmp	r2, r3
 800a564:	d949      	bls.n	800a5fa <_strtod_l+0xade>
 800a566:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a568:	4b69      	ldr	r3, [pc, #420]	; (800a710 <_strtod_l+0xbf4>)
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d103      	bne.n	800a576 <_strtod_l+0xa5a>
 800a56e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a570:	3301      	adds	r3, #1
 800a572:	d100      	bne.n	800a576 <_strtod_l+0xa5a>
 800a574:	e535      	b.n	8009fe2 <_strtod_l+0x4c6>
 800a576:	2601      	movs	r6, #1
 800a578:	4f65      	ldr	r7, [pc, #404]	; (800a710 <_strtod_l+0xbf4>)
 800a57a:	4276      	negs	r6, r6
 800a57c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a57e:	9804      	ldr	r0, [sp, #16]
 800a580:	f002 fc4a 	bl	800ce18 <_Bfree>
 800a584:	9908      	ldr	r1, [sp, #32]
 800a586:	9804      	ldr	r0, [sp, #16]
 800a588:	f002 fc46 	bl	800ce18 <_Bfree>
 800a58c:	9906      	ldr	r1, [sp, #24]
 800a58e:	9804      	ldr	r0, [sp, #16]
 800a590:	f002 fc42 	bl	800ce18 <_Bfree>
 800a594:	9905      	ldr	r1, [sp, #20]
 800a596:	9804      	ldr	r0, [sp, #16]
 800a598:	f002 fc3e 	bl	800ce18 <_Bfree>
 800a59c:	e60b      	b.n	800a1b6 <_strtod_l+0x69a>
 800a59e:	2e01      	cmp	r6, #1
 800a5a0:	d103      	bne.n	800a5aa <_strtod_l+0xa8e>
 800a5a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d100      	bne.n	800a5aa <_strtod_l+0xa8e>
 800a5a8:	e58e      	b.n	800a0c8 <_strtod_l+0x5ac>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4c59      	ldr	r4, [pc, #356]	; (800a714 <_strtod_l+0xbf8>)
 800a5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a5b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800a5b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a5b4:	e01c      	b.n	800a5f0 <_strtod_l+0xad4>
 800a5b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a5b8:	4d50      	ldr	r5, [pc, #320]	; (800a6fc <_strtod_l+0xbe0>)
 800a5ba:	e7ab      	b.n	800a514 <_strtod_l+0x9f8>
 800a5bc:	2200      	movs	r2, #0
 800a5be:	0020      	movs	r0, r4
 800a5c0:	0029      	movs	r1, r5
 800a5c2:	4b4e      	ldr	r3, [pc, #312]	; (800a6fc <_strtod_l+0xbe0>)
 800a5c4:	f7f7 fe44 	bl	8002250 <__aeabi_dmul>
 800a5c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5ca:	0004      	movs	r4, r0
 800a5cc:	000b      	movs	r3, r1
 800a5ce:	000d      	movs	r5, r1
 800a5d0:	2a00      	cmp	r2, #0
 800a5d2:	d104      	bne.n	800a5de <_strtod_l+0xac2>
 800a5d4:	2280      	movs	r2, #128	; 0x80
 800a5d6:	0612      	lsls	r2, r2, #24
 800a5d8:	900a      	str	r0, [sp, #40]	; 0x28
 800a5da:	188b      	adds	r3, r1, r2
 800a5dc:	e79e      	b.n	800a51c <_strtod_l+0xa00>
 800a5de:	0002      	movs	r2, r0
 800a5e0:	920a      	str	r2, [sp, #40]	; 0x28
 800a5e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5e4:	e79b      	b.n	800a51e <_strtod_l+0xa02>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	4c43      	ldr	r4, [pc, #268]	; (800a6f8 <_strtod_l+0xbdc>)
 800a5ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a5ec:	940b      	str	r4, [sp, #44]	; 0x2c
 800a5ee:	2400      	movs	r4, #0
 800a5f0:	4d41      	ldr	r5, [pc, #260]	; (800a6f8 <_strtod_l+0xbdc>)
 800a5f2:	e794      	b.n	800a51e <_strtod_l+0xa02>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	4c47      	ldr	r4, [pc, #284]	; (800a714 <_strtod_l+0xbf8>)
 800a5f8:	e7f7      	b.n	800a5ea <_strtod_l+0xace>
 800a5fa:	23d4      	movs	r3, #212	; 0xd4
 800a5fc:	049b      	lsls	r3, r3, #18
 800a5fe:	18cf      	adds	r7, r1, r3
 800a600:	9b07      	ldr	r3, [sp, #28]
 800a602:	970e      	str	r7, [sp, #56]	; 0x38
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1b9      	bne.n	800a57c <_strtod_l+0xa60>
 800a608:	4b3d      	ldr	r3, [pc, #244]	; (800a700 <_strtod_l+0xbe4>)
 800a60a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a60c:	403b      	ands	r3, r7
 800a60e:	429a      	cmp	r2, r3
 800a610:	d1b4      	bne.n	800a57c <_strtod_l+0xa60>
 800a612:	0020      	movs	r0, r4
 800a614:	0029      	movs	r1, r5
 800a616:	f7f5 ffa5 	bl	8000564 <__aeabi_d2lz>
 800a61a:	f7f5 ffdf 	bl	80005dc <__aeabi_l2d>
 800a61e:	0002      	movs	r2, r0
 800a620:	000b      	movs	r3, r1
 800a622:	0020      	movs	r0, r4
 800a624:	0029      	movs	r1, r5
 800a626:	f7f8 f8d5 	bl	80027d4 <__aeabi_dsub>
 800a62a:	033b      	lsls	r3, r7, #12
 800a62c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a62e:	0b1b      	lsrs	r3, r3, #12
 800a630:	4333      	orrs	r3, r6
 800a632:	4313      	orrs	r3, r2
 800a634:	0004      	movs	r4, r0
 800a636:	000d      	movs	r5, r1
 800a638:	4a37      	ldr	r2, [pc, #220]	; (800a718 <_strtod_l+0xbfc>)
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d054      	beq.n	800a6e8 <_strtod_l+0xbcc>
 800a63e:	4b37      	ldr	r3, [pc, #220]	; (800a71c <_strtod_l+0xc00>)
 800a640:	f7f5 ff10 	bl	8000464 <__aeabi_dcmplt>
 800a644:	2800      	cmp	r0, #0
 800a646:	d000      	beq.n	800a64a <_strtod_l+0xb2e>
 800a648:	e4d4      	b.n	8009ff4 <_strtod_l+0x4d8>
 800a64a:	0020      	movs	r0, r4
 800a64c:	0029      	movs	r1, r5
 800a64e:	4a34      	ldr	r2, [pc, #208]	; (800a720 <_strtod_l+0xc04>)
 800a650:	4b2a      	ldr	r3, [pc, #168]	; (800a6fc <_strtod_l+0xbe0>)
 800a652:	f7f5 ff1b 	bl	800048c <__aeabi_dcmpgt>
 800a656:	2800      	cmp	r0, #0
 800a658:	d090      	beq.n	800a57c <_strtod_l+0xa60>
 800a65a:	e4cb      	b.n	8009ff4 <_strtod_l+0x4d8>
 800a65c:	9b07      	ldr	r3, [sp, #28]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d02b      	beq.n	800a6ba <_strtod_l+0xb9e>
 800a662:	23d4      	movs	r3, #212	; 0xd4
 800a664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a666:	04db      	lsls	r3, r3, #19
 800a668:	429a      	cmp	r2, r3
 800a66a:	d826      	bhi.n	800a6ba <_strtod_l+0xb9e>
 800a66c:	0020      	movs	r0, r4
 800a66e:	0029      	movs	r1, r5
 800a670:	4a2c      	ldr	r2, [pc, #176]	; (800a724 <_strtod_l+0xc08>)
 800a672:	4b2d      	ldr	r3, [pc, #180]	; (800a728 <_strtod_l+0xc0c>)
 800a674:	f7f5 ff00 	bl	8000478 <__aeabi_dcmple>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d017      	beq.n	800a6ac <_strtod_l+0xb90>
 800a67c:	0020      	movs	r0, r4
 800a67e:	0029      	movs	r1, r5
 800a680:	f7f5 ff52 	bl	8000528 <__aeabi_d2uiz>
 800a684:	2800      	cmp	r0, #0
 800a686:	d100      	bne.n	800a68a <_strtod_l+0xb6e>
 800a688:	3001      	adds	r0, #1
 800a68a:	f7f8 fca9 	bl	8002fe0 <__aeabi_ui2d>
 800a68e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a690:	0004      	movs	r4, r0
 800a692:	000b      	movs	r3, r1
 800a694:	000d      	movs	r5, r1
 800a696:	2a00      	cmp	r2, #0
 800a698:	d122      	bne.n	800a6e0 <_strtod_l+0xbc4>
 800a69a:	2280      	movs	r2, #128	; 0x80
 800a69c:	0612      	lsls	r2, r2, #24
 800a69e:	188b      	adds	r3, r1, r2
 800a6a0:	9016      	str	r0, [sp, #88]	; 0x58
 800a6a2:	9317      	str	r3, [sp, #92]	; 0x5c
 800a6a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a6a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6a8:	9212      	str	r2, [sp, #72]	; 0x48
 800a6aa:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6ac:	22d6      	movs	r2, #214	; 0xd6
 800a6ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6b0:	04d2      	lsls	r2, r2, #19
 800a6b2:	189b      	adds	r3, r3, r2
 800a6b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6b6:	1a9b      	subs	r3, r3, r2
 800a6b8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a6bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a6be:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a6c0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a6c2:	f002 feeb 	bl	800d49c <__ulp>
 800a6c6:	0002      	movs	r2, r0
 800a6c8:	000b      	movs	r3, r1
 800a6ca:	0030      	movs	r0, r6
 800a6cc:	0039      	movs	r1, r7
 800a6ce:	f7f7 fdbf 	bl	8002250 <__aeabi_dmul>
 800a6d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6d6:	f7f6 fe61 	bl	800139c <__aeabi_dadd>
 800a6da:	0006      	movs	r6, r0
 800a6dc:	000f      	movs	r7, r1
 800a6de:	e78f      	b.n	800a600 <_strtod_l+0xae4>
 800a6e0:	0002      	movs	r2, r0
 800a6e2:	9216      	str	r2, [sp, #88]	; 0x58
 800a6e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a6e6:	e7dd      	b.n	800a6a4 <_strtod_l+0xb88>
 800a6e8:	4b10      	ldr	r3, [pc, #64]	; (800a72c <_strtod_l+0xc10>)
 800a6ea:	f7f5 febb 	bl	8000464 <__aeabi_dcmplt>
 800a6ee:	e7b2      	b.n	800a656 <_strtod_l+0xb3a>
 800a6f0:	fff00000 	.word	0xfff00000
 800a6f4:	000fffff 	.word	0x000fffff
 800a6f8:	3ff00000 	.word	0x3ff00000
 800a6fc:	3fe00000 	.word	0x3fe00000
 800a700:	7ff00000 	.word	0x7ff00000
 800a704:	7fe00000 	.word	0x7fe00000
 800a708:	fcb00000 	.word	0xfcb00000
 800a70c:	7c9fffff 	.word	0x7c9fffff
 800a710:	7fefffff 	.word	0x7fefffff
 800a714:	bff00000 	.word	0xbff00000
 800a718:	94a03595 	.word	0x94a03595
 800a71c:	3fdfffff 	.word	0x3fdfffff
 800a720:	35afe535 	.word	0x35afe535
 800a724:	ffc00000 	.word	0xffc00000
 800a728:	41dfffff 	.word	0x41dfffff
 800a72c:	3fcfffff 	.word	0x3fcfffff

0800a730 <strtod>:
 800a730:	b510      	push	{r4, lr}
 800a732:	4c04      	ldr	r4, [pc, #16]	; (800a744 <strtod+0x14>)
 800a734:	000a      	movs	r2, r1
 800a736:	0001      	movs	r1, r0
 800a738:	4b03      	ldr	r3, [pc, #12]	; (800a748 <strtod+0x18>)
 800a73a:	6820      	ldr	r0, [r4, #0]
 800a73c:	f7ff f9ee 	bl	8009b1c <_strtod_l>
 800a740:	bd10      	pop	{r4, pc}
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	2000024c 	.word	0x2000024c
 800a748:	20000094 	.word	0x20000094

0800a74c <__cvt>:
 800a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74e:	001e      	movs	r6, r3
 800a750:	2300      	movs	r3, #0
 800a752:	0014      	movs	r4, r2
 800a754:	b08b      	sub	sp, #44	; 0x2c
 800a756:	429e      	cmp	r6, r3
 800a758:	da04      	bge.n	800a764 <__cvt+0x18>
 800a75a:	2180      	movs	r1, #128	; 0x80
 800a75c:	0609      	lsls	r1, r1, #24
 800a75e:	1873      	adds	r3, r6, r1
 800a760:	001e      	movs	r6, r3
 800a762:	232d      	movs	r3, #45	; 0x2d
 800a764:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a766:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a768:	7013      	strb	r3, [r2, #0]
 800a76a:	2320      	movs	r3, #32
 800a76c:	2203      	movs	r2, #3
 800a76e:	439f      	bics	r7, r3
 800a770:	2f46      	cmp	r7, #70	; 0x46
 800a772:	d007      	beq.n	800a784 <__cvt+0x38>
 800a774:	003b      	movs	r3, r7
 800a776:	3b45      	subs	r3, #69	; 0x45
 800a778:	4259      	negs	r1, r3
 800a77a:	414b      	adcs	r3, r1
 800a77c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a77e:	3a01      	subs	r2, #1
 800a780:	18cb      	adds	r3, r1, r3
 800a782:	9310      	str	r3, [sp, #64]	; 0x40
 800a784:	ab09      	add	r3, sp, #36	; 0x24
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	ab08      	add	r3, sp, #32
 800a78a:	9303      	str	r3, [sp, #12]
 800a78c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a78e:	9200      	str	r2, [sp, #0]
 800a790:	9302      	str	r3, [sp, #8]
 800a792:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a794:	0022      	movs	r2, r4
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	0033      	movs	r3, r6
 800a79a:	f001 f875 	bl	800b888 <_dtoa_r>
 800a79e:	0005      	movs	r5, r0
 800a7a0:	2f47      	cmp	r7, #71	; 0x47
 800a7a2:	d102      	bne.n	800a7aa <__cvt+0x5e>
 800a7a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7a6:	07db      	lsls	r3, r3, #31
 800a7a8:	d528      	bpl.n	800a7fc <__cvt+0xb0>
 800a7aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7ac:	18eb      	adds	r3, r5, r3
 800a7ae:	9307      	str	r3, [sp, #28]
 800a7b0:	2f46      	cmp	r7, #70	; 0x46
 800a7b2:	d114      	bne.n	800a7de <__cvt+0x92>
 800a7b4:	782b      	ldrb	r3, [r5, #0]
 800a7b6:	2b30      	cmp	r3, #48	; 0x30
 800a7b8:	d10c      	bne.n	800a7d4 <__cvt+0x88>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	0020      	movs	r0, r4
 800a7c0:	0031      	movs	r1, r6
 800a7c2:	f7f5 fe49 	bl	8000458 <__aeabi_dcmpeq>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d104      	bne.n	800a7d4 <__cvt+0x88>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a7ce:	1a9b      	subs	r3, r3, r2
 800a7d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7d6:	9a07      	ldr	r2, [sp, #28]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	18d3      	adds	r3, r2, r3
 800a7dc:	9307      	str	r3, [sp, #28]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	0020      	movs	r0, r4
 800a7e4:	0031      	movs	r1, r6
 800a7e6:	f7f5 fe37 	bl	8000458 <__aeabi_dcmpeq>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d001      	beq.n	800a7f2 <__cvt+0xa6>
 800a7ee:	9b07      	ldr	r3, [sp, #28]
 800a7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f2:	2230      	movs	r2, #48	; 0x30
 800a7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f6:	9907      	ldr	r1, [sp, #28]
 800a7f8:	428b      	cmp	r3, r1
 800a7fa:	d306      	bcc.n	800a80a <__cvt+0xbe>
 800a7fc:	0028      	movs	r0, r5
 800a7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a800:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a802:	1b5b      	subs	r3, r3, r5
 800a804:	6013      	str	r3, [r2, #0]
 800a806:	b00b      	add	sp, #44	; 0x2c
 800a808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a80a:	1c59      	adds	r1, r3, #1
 800a80c:	9109      	str	r1, [sp, #36]	; 0x24
 800a80e:	701a      	strb	r2, [r3, #0]
 800a810:	e7f0      	b.n	800a7f4 <__cvt+0xa8>

0800a812 <__exponent>:
 800a812:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a814:	1c83      	adds	r3, r0, #2
 800a816:	b087      	sub	sp, #28
 800a818:	9303      	str	r3, [sp, #12]
 800a81a:	0005      	movs	r5, r0
 800a81c:	000c      	movs	r4, r1
 800a81e:	232b      	movs	r3, #43	; 0x2b
 800a820:	7002      	strb	r2, [r0, #0]
 800a822:	2900      	cmp	r1, #0
 800a824:	da01      	bge.n	800a82a <__exponent+0x18>
 800a826:	424c      	negs	r4, r1
 800a828:	3302      	adds	r3, #2
 800a82a:	706b      	strb	r3, [r5, #1]
 800a82c:	2c09      	cmp	r4, #9
 800a82e:	dd2f      	ble.n	800a890 <__exponent+0x7e>
 800a830:	270a      	movs	r7, #10
 800a832:	ab04      	add	r3, sp, #16
 800a834:	1dde      	adds	r6, r3, #7
 800a836:	0020      	movs	r0, r4
 800a838:	0039      	movs	r1, r7
 800a83a:	9601      	str	r6, [sp, #4]
 800a83c:	f7f5 fdf6 	bl	800042c <__aeabi_idivmod>
 800a840:	3e01      	subs	r6, #1
 800a842:	3130      	adds	r1, #48	; 0x30
 800a844:	0020      	movs	r0, r4
 800a846:	7031      	strb	r1, [r6, #0]
 800a848:	0039      	movs	r1, r7
 800a84a:	9402      	str	r4, [sp, #8]
 800a84c:	f7f5 fd08 	bl	8000260 <__divsi3>
 800a850:	9b02      	ldr	r3, [sp, #8]
 800a852:	0004      	movs	r4, r0
 800a854:	2b63      	cmp	r3, #99	; 0x63
 800a856:	dcee      	bgt.n	800a836 <__exponent+0x24>
 800a858:	9b01      	ldr	r3, [sp, #4]
 800a85a:	3430      	adds	r4, #48	; 0x30
 800a85c:	1e9a      	subs	r2, r3, #2
 800a85e:	0013      	movs	r3, r2
 800a860:	9903      	ldr	r1, [sp, #12]
 800a862:	7014      	strb	r4, [r2, #0]
 800a864:	a804      	add	r0, sp, #16
 800a866:	3007      	adds	r0, #7
 800a868:	4298      	cmp	r0, r3
 800a86a:	d80c      	bhi.n	800a886 <__exponent+0x74>
 800a86c:	2300      	movs	r3, #0
 800a86e:	4282      	cmp	r2, r0
 800a870:	d804      	bhi.n	800a87c <__exponent+0x6a>
 800a872:	aa04      	add	r2, sp, #16
 800a874:	3309      	adds	r3, #9
 800a876:	189b      	adds	r3, r3, r2
 800a878:	9a01      	ldr	r2, [sp, #4]
 800a87a:	1a9b      	subs	r3, r3, r2
 800a87c:	9a03      	ldr	r2, [sp, #12]
 800a87e:	18d3      	adds	r3, r2, r3
 800a880:	1b58      	subs	r0, r3, r5
 800a882:	b007      	add	sp, #28
 800a884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a886:	7818      	ldrb	r0, [r3, #0]
 800a888:	3301      	adds	r3, #1
 800a88a:	7008      	strb	r0, [r1, #0]
 800a88c:	3101      	adds	r1, #1
 800a88e:	e7e9      	b.n	800a864 <__exponent+0x52>
 800a890:	2330      	movs	r3, #48	; 0x30
 800a892:	3430      	adds	r4, #48	; 0x30
 800a894:	70ab      	strb	r3, [r5, #2]
 800a896:	70ec      	strb	r4, [r5, #3]
 800a898:	1d2b      	adds	r3, r5, #4
 800a89a:	e7f1      	b.n	800a880 <__exponent+0x6e>

0800a89c <_printf_float>:
 800a89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89e:	b095      	sub	sp, #84	; 0x54
 800a8a0:	000c      	movs	r4, r1
 800a8a2:	9208      	str	r2, [sp, #32]
 800a8a4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a8a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a8:	0007      	movs	r7, r0
 800a8aa:	f000 fea5 	bl	800b5f8 <_localeconv_r>
 800a8ae:	6803      	ldr	r3, [r0, #0]
 800a8b0:	0018      	movs	r0, r3
 800a8b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8b4:	f7f5 fc2e 	bl	8000114 <strlen>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9312      	str	r3, [sp, #72]	; 0x48
 800a8bc:	7e23      	ldrb	r3, [r4, #24]
 800a8be:	2207      	movs	r2, #7
 800a8c0:	930a      	str	r3, [sp, #40]	; 0x28
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	900d      	str	r0, [sp, #52]	; 0x34
 800a8c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8ca:	682b      	ldr	r3, [r5, #0]
 800a8cc:	05c9      	lsls	r1, r1, #23
 800a8ce:	d547      	bpl.n	800a960 <_printf_float+0xc4>
 800a8d0:	189b      	adds	r3, r3, r2
 800a8d2:	4393      	bics	r3, r2
 800a8d4:	001a      	movs	r2, r3
 800a8d6:	3208      	adds	r2, #8
 800a8d8:	602a      	str	r2, [r5, #0]
 800a8da:	681e      	ldr	r6, [r3, #0]
 800a8dc:	685d      	ldr	r5, [r3, #4]
 800a8de:	0032      	movs	r2, r6
 800a8e0:	002b      	movs	r3, r5
 800a8e2:	64a2      	str	r2, [r4, #72]	; 0x48
 800a8e4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	006b      	lsls	r3, r5, #1
 800a8ea:	085b      	lsrs	r3, r3, #1
 800a8ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a8ee:	0030      	movs	r0, r6
 800a8f0:	4bab      	ldr	r3, [pc, #684]	; (800aba0 <_printf_float+0x304>)
 800a8f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a8f4:	4252      	negs	r2, r2
 800a8f6:	f7f8 faef 	bl	8002ed8 <__aeabi_dcmpun>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d132      	bne.n	800a964 <_printf_float+0xc8>
 800a8fe:	2201      	movs	r2, #1
 800a900:	0030      	movs	r0, r6
 800a902:	4ba7      	ldr	r3, [pc, #668]	; (800aba0 <_printf_float+0x304>)
 800a904:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a906:	4252      	negs	r2, r2
 800a908:	f7f5 fdb6 	bl	8000478 <__aeabi_dcmple>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d129      	bne.n	800a964 <_printf_float+0xc8>
 800a910:	2200      	movs	r2, #0
 800a912:	2300      	movs	r3, #0
 800a914:	0030      	movs	r0, r6
 800a916:	0029      	movs	r1, r5
 800a918:	f7f5 fda4 	bl	8000464 <__aeabi_dcmplt>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d003      	beq.n	800a928 <_printf_float+0x8c>
 800a920:	0023      	movs	r3, r4
 800a922:	222d      	movs	r2, #45	; 0x2d
 800a924:	3343      	adds	r3, #67	; 0x43
 800a926:	701a      	strb	r2, [r3, #0]
 800a928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a92a:	4d9e      	ldr	r5, [pc, #632]	; (800aba4 <_printf_float+0x308>)
 800a92c:	2b47      	cmp	r3, #71	; 0x47
 800a92e:	d900      	bls.n	800a932 <_printf_float+0x96>
 800a930:	4d9d      	ldr	r5, [pc, #628]	; (800aba8 <_printf_float+0x30c>)
 800a932:	2303      	movs	r3, #3
 800a934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a936:	6123      	str	r3, [r4, #16]
 800a938:	3301      	adds	r3, #1
 800a93a:	439a      	bics	r2, r3
 800a93c:	2300      	movs	r3, #0
 800a93e:	6022      	str	r2, [r4, #0]
 800a940:	930b      	str	r3, [sp, #44]	; 0x2c
 800a942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a944:	0021      	movs	r1, r4
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	0038      	movs	r0, r7
 800a94a:	9b08      	ldr	r3, [sp, #32]
 800a94c:	aa13      	add	r2, sp, #76	; 0x4c
 800a94e:	f000 f9fb 	bl	800ad48 <_printf_common>
 800a952:	3001      	adds	r0, #1
 800a954:	d000      	beq.n	800a958 <_printf_float+0xbc>
 800a956:	e0a3      	b.n	800aaa0 <_printf_float+0x204>
 800a958:	2001      	movs	r0, #1
 800a95a:	4240      	negs	r0, r0
 800a95c:	b015      	add	sp, #84	; 0x54
 800a95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a960:	3307      	adds	r3, #7
 800a962:	e7b6      	b.n	800a8d2 <_printf_float+0x36>
 800a964:	0032      	movs	r2, r6
 800a966:	002b      	movs	r3, r5
 800a968:	0030      	movs	r0, r6
 800a96a:	0029      	movs	r1, r5
 800a96c:	f7f8 fab4 	bl	8002ed8 <__aeabi_dcmpun>
 800a970:	2800      	cmp	r0, #0
 800a972:	d00b      	beq.n	800a98c <_printf_float+0xf0>
 800a974:	2d00      	cmp	r5, #0
 800a976:	da03      	bge.n	800a980 <_printf_float+0xe4>
 800a978:	0023      	movs	r3, r4
 800a97a:	222d      	movs	r2, #45	; 0x2d
 800a97c:	3343      	adds	r3, #67	; 0x43
 800a97e:	701a      	strb	r2, [r3, #0]
 800a980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a982:	4d8a      	ldr	r5, [pc, #552]	; (800abac <_printf_float+0x310>)
 800a984:	2b47      	cmp	r3, #71	; 0x47
 800a986:	d9d4      	bls.n	800a932 <_printf_float+0x96>
 800a988:	4d89      	ldr	r5, [pc, #548]	; (800abb0 <_printf_float+0x314>)
 800a98a:	e7d2      	b.n	800a932 <_printf_float+0x96>
 800a98c:	2220      	movs	r2, #32
 800a98e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a990:	6863      	ldr	r3, [r4, #4]
 800a992:	4391      	bics	r1, r2
 800a994:	910e      	str	r1, [sp, #56]	; 0x38
 800a996:	1c5a      	adds	r2, r3, #1
 800a998:	d14a      	bne.n	800aa30 <_printf_float+0x194>
 800a99a:	3307      	adds	r3, #7
 800a99c:	6063      	str	r3, [r4, #4]
 800a99e:	2380      	movs	r3, #128	; 0x80
 800a9a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	9206      	str	r2, [sp, #24]
 800a9aa:	aa12      	add	r2, sp, #72	; 0x48
 800a9ac:	9205      	str	r2, [sp, #20]
 800a9ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	9204      	str	r2, [sp, #16]
 800a9b4:	aa11      	add	r2, sp, #68	; 0x44
 800a9b6:	9203      	str	r2, [sp, #12]
 800a9b8:	2223      	movs	r2, #35	; 0x23
 800a9ba:	a908      	add	r1, sp, #32
 800a9bc:	9301      	str	r3, [sp, #4]
 800a9be:	6863      	ldr	r3, [r4, #4]
 800a9c0:	1852      	adds	r2, r2, r1
 800a9c2:	9202      	str	r2, [sp, #8]
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	0032      	movs	r2, r6
 800a9c8:	002b      	movs	r3, r5
 800a9ca:	0038      	movs	r0, r7
 800a9cc:	f7ff febe 	bl	800a74c <__cvt>
 800a9d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9d2:	0005      	movs	r5, r0
 800a9d4:	2b47      	cmp	r3, #71	; 0x47
 800a9d6:	d109      	bne.n	800a9ec <_printf_float+0x150>
 800a9d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9da:	1cda      	adds	r2, r3, #3
 800a9dc:	db02      	blt.n	800a9e4 <_printf_float+0x148>
 800a9de:	6862      	ldr	r2, [r4, #4]
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	dd49      	ble.n	800aa78 <_printf_float+0x1dc>
 800a9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e6:	3b02      	subs	r3, #2
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a9f0:	2b65      	cmp	r3, #101	; 0x65
 800a9f2:	d824      	bhi.n	800aa3e <_printf_float+0x1a2>
 800a9f4:	0020      	movs	r0, r4
 800a9f6:	001a      	movs	r2, r3
 800a9f8:	3901      	subs	r1, #1
 800a9fa:	3050      	adds	r0, #80	; 0x50
 800a9fc:	9111      	str	r1, [sp, #68]	; 0x44
 800a9fe:	f7ff ff08 	bl	800a812 <__exponent>
 800aa02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa04:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa06:	1813      	adds	r3, r2, r0
 800aa08:	6123      	str	r3, [r4, #16]
 800aa0a:	2a01      	cmp	r2, #1
 800aa0c:	dc02      	bgt.n	800aa14 <_printf_float+0x178>
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	07d2      	lsls	r2, r2, #31
 800aa12:	d501      	bpl.n	800aa18 <_printf_float+0x17c>
 800aa14:	3301      	adds	r3, #1
 800aa16:	6123      	str	r3, [r4, #16]
 800aa18:	2323      	movs	r3, #35	; 0x23
 800aa1a:	aa08      	add	r2, sp, #32
 800aa1c:	189b      	adds	r3, r3, r2
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d100      	bne.n	800aa26 <_printf_float+0x18a>
 800aa24:	e78d      	b.n	800a942 <_printf_float+0xa6>
 800aa26:	0023      	movs	r3, r4
 800aa28:	222d      	movs	r2, #45	; 0x2d
 800aa2a:	3343      	adds	r3, #67	; 0x43
 800aa2c:	701a      	strb	r2, [r3, #0]
 800aa2e:	e788      	b.n	800a942 <_printf_float+0xa6>
 800aa30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa32:	2a47      	cmp	r2, #71	; 0x47
 800aa34:	d1b3      	bne.n	800a99e <_printf_float+0x102>
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1b1      	bne.n	800a99e <_printf_float+0x102>
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	e7ae      	b.n	800a99c <_printf_float+0x100>
 800aa3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa40:	2b66      	cmp	r3, #102	; 0x66
 800aa42:	d11b      	bne.n	800aa7c <_printf_float+0x1e0>
 800aa44:	6863      	ldr	r3, [r4, #4]
 800aa46:	2900      	cmp	r1, #0
 800aa48:	dd09      	ble.n	800aa5e <_printf_float+0x1c2>
 800aa4a:	6121      	str	r1, [r4, #16]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d102      	bne.n	800aa56 <_printf_float+0x1ba>
 800aa50:	6822      	ldr	r2, [r4, #0]
 800aa52:	07d2      	lsls	r2, r2, #31
 800aa54:	d50b      	bpl.n	800aa6e <_printf_float+0x1d2>
 800aa56:	3301      	adds	r3, #1
 800aa58:	185b      	adds	r3, r3, r1
 800aa5a:	6123      	str	r3, [r4, #16]
 800aa5c:	e007      	b.n	800aa6e <_printf_float+0x1d2>
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d103      	bne.n	800aa6a <_printf_float+0x1ce>
 800aa62:	2201      	movs	r2, #1
 800aa64:	6821      	ldr	r1, [r4, #0]
 800aa66:	4211      	tst	r1, r2
 800aa68:	d000      	beq.n	800aa6c <_printf_float+0x1d0>
 800aa6a:	1c9a      	adds	r2, r3, #2
 800aa6c:	6122      	str	r2, [r4, #16]
 800aa6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa70:	65a3      	str	r3, [r4, #88]	; 0x58
 800aa72:	2300      	movs	r3, #0
 800aa74:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa76:	e7cf      	b.n	800aa18 <_printf_float+0x17c>
 800aa78:	2367      	movs	r3, #103	; 0x67
 800aa7a:	930a      	str	r3, [sp, #40]	; 0x28
 800aa7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa80:	4299      	cmp	r1, r3
 800aa82:	db06      	blt.n	800aa92 <_printf_float+0x1f6>
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	6121      	str	r1, [r4, #16]
 800aa88:	07db      	lsls	r3, r3, #31
 800aa8a:	d5f0      	bpl.n	800aa6e <_printf_float+0x1d2>
 800aa8c:	3101      	adds	r1, #1
 800aa8e:	6121      	str	r1, [r4, #16]
 800aa90:	e7ed      	b.n	800aa6e <_printf_float+0x1d2>
 800aa92:	2201      	movs	r2, #1
 800aa94:	2900      	cmp	r1, #0
 800aa96:	dc01      	bgt.n	800aa9c <_printf_float+0x200>
 800aa98:	1892      	adds	r2, r2, r2
 800aa9a:	1a52      	subs	r2, r2, r1
 800aa9c:	189b      	adds	r3, r3, r2
 800aa9e:	e7dc      	b.n	800aa5a <_printf_float+0x1be>
 800aaa0:	6822      	ldr	r2, [r4, #0]
 800aaa2:	0553      	lsls	r3, r2, #21
 800aaa4:	d408      	bmi.n	800aab8 <_printf_float+0x21c>
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	002a      	movs	r2, r5
 800aaaa:	0038      	movs	r0, r7
 800aaac:	9908      	ldr	r1, [sp, #32]
 800aaae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aab0:	47a8      	blx	r5
 800aab2:	3001      	adds	r0, #1
 800aab4:	d12a      	bne.n	800ab0c <_printf_float+0x270>
 800aab6:	e74f      	b.n	800a958 <_printf_float+0xbc>
 800aab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaba:	2b65      	cmp	r3, #101	; 0x65
 800aabc:	d800      	bhi.n	800aac0 <_printf_float+0x224>
 800aabe:	e0ec      	b.n	800ac9a <_printf_float+0x3fe>
 800aac0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800aac2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800aac4:	2200      	movs	r2, #0
 800aac6:	2300      	movs	r3, #0
 800aac8:	f7f5 fcc6 	bl	8000458 <__aeabi_dcmpeq>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d034      	beq.n	800ab3a <_printf_float+0x29e>
 800aad0:	2301      	movs	r3, #1
 800aad2:	0038      	movs	r0, r7
 800aad4:	4a37      	ldr	r2, [pc, #220]	; (800abb4 <_printf_float+0x318>)
 800aad6:	9908      	ldr	r1, [sp, #32]
 800aad8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aada:	47a8      	blx	r5
 800aadc:	3001      	adds	r0, #1
 800aade:	d100      	bne.n	800aae2 <_printf_float+0x246>
 800aae0:	e73a      	b.n	800a958 <_printf_float+0xbc>
 800aae2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aae6:	429a      	cmp	r2, r3
 800aae8:	db02      	blt.n	800aaf0 <_printf_float+0x254>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	07db      	lsls	r3, r3, #31
 800aaee:	d50d      	bpl.n	800ab0c <_printf_float+0x270>
 800aaf0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aaf2:	0038      	movs	r0, r7
 800aaf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaf8:	9908      	ldr	r1, [sp, #32]
 800aafa:	47a8      	blx	r5
 800aafc:	2500      	movs	r5, #0
 800aafe:	3001      	adds	r0, #1
 800ab00:	d100      	bne.n	800ab04 <_printf_float+0x268>
 800ab02:	e729      	b.n	800a958 <_printf_float+0xbc>
 800ab04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab06:	3b01      	subs	r3, #1
 800ab08:	42ab      	cmp	r3, r5
 800ab0a:	dc0a      	bgt.n	800ab22 <_printf_float+0x286>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	079b      	lsls	r3, r3, #30
 800ab10:	d500      	bpl.n	800ab14 <_printf_float+0x278>
 800ab12:	e116      	b.n	800ad42 <_printf_float+0x4a6>
 800ab14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab16:	68e0      	ldr	r0, [r4, #12]
 800ab18:	4298      	cmp	r0, r3
 800ab1a:	db00      	blt.n	800ab1e <_printf_float+0x282>
 800ab1c:	e71e      	b.n	800a95c <_printf_float+0xc0>
 800ab1e:	0018      	movs	r0, r3
 800ab20:	e71c      	b.n	800a95c <_printf_float+0xc0>
 800ab22:	0022      	movs	r2, r4
 800ab24:	2301      	movs	r3, #1
 800ab26:	0038      	movs	r0, r7
 800ab28:	9908      	ldr	r1, [sp, #32]
 800ab2a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ab2c:	321a      	adds	r2, #26
 800ab2e:	47b0      	blx	r6
 800ab30:	3001      	adds	r0, #1
 800ab32:	d100      	bne.n	800ab36 <_printf_float+0x29a>
 800ab34:	e710      	b.n	800a958 <_printf_float+0xbc>
 800ab36:	3501      	adds	r5, #1
 800ab38:	e7e4      	b.n	800ab04 <_printf_float+0x268>
 800ab3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dc3b      	bgt.n	800abb8 <_printf_float+0x31c>
 800ab40:	2301      	movs	r3, #1
 800ab42:	0038      	movs	r0, r7
 800ab44:	4a1b      	ldr	r2, [pc, #108]	; (800abb4 <_printf_float+0x318>)
 800ab46:	9908      	ldr	r1, [sp, #32]
 800ab48:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ab4a:	47b0      	blx	r6
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	d100      	bne.n	800ab52 <_printf_float+0x2b6>
 800ab50:	e702      	b.n	800a958 <_printf_float+0xbc>
 800ab52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab56:	4313      	orrs	r3, r2
 800ab58:	d102      	bne.n	800ab60 <_printf_float+0x2c4>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	07db      	lsls	r3, r3, #31
 800ab5e:	d5d5      	bpl.n	800ab0c <_printf_float+0x270>
 800ab60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab62:	0038      	movs	r0, r7
 800ab64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab66:	9908      	ldr	r1, [sp, #32]
 800ab68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ab6a:	47b0      	blx	r6
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d100      	bne.n	800ab74 <_printf_float+0x2d8>
 800ab72:	e6f1      	b.n	800a958 <_printf_float+0xbc>
 800ab74:	930a      	str	r3, [sp, #40]	; 0x28
 800ab76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab7a:	425b      	negs	r3, r3
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	dc01      	bgt.n	800ab84 <_printf_float+0x2e8>
 800ab80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab82:	e791      	b.n	800aaa8 <_printf_float+0x20c>
 800ab84:	0022      	movs	r2, r4
 800ab86:	2301      	movs	r3, #1
 800ab88:	0038      	movs	r0, r7
 800ab8a:	9908      	ldr	r1, [sp, #32]
 800ab8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ab8e:	321a      	adds	r2, #26
 800ab90:	47b0      	blx	r6
 800ab92:	3001      	adds	r0, #1
 800ab94:	d100      	bne.n	800ab98 <_printf_float+0x2fc>
 800ab96:	e6df      	b.n	800a958 <_printf_float+0xbc>
 800ab98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	e7ea      	b.n	800ab74 <_printf_float+0x2d8>
 800ab9e:	46c0      	nop			; (mov r8, r8)
 800aba0:	7fefffff 	.word	0x7fefffff
 800aba4:	0800e418 	.word	0x0800e418
 800aba8:	0800e41c 	.word	0x0800e41c
 800abac:	0800e420 	.word	0x0800e420
 800abb0:	0800e424 	.word	0x0800e424
 800abb4:	0800e428 	.word	0x0800e428
 800abb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800abba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abbc:	920a      	str	r2, [sp, #40]	; 0x28
 800abbe:	429a      	cmp	r2, r3
 800abc0:	dd00      	ble.n	800abc4 <_printf_float+0x328>
 800abc2:	930a      	str	r3, [sp, #40]	; 0x28
 800abc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	dc3d      	bgt.n	800ac46 <_printf_float+0x3aa>
 800abca:	2300      	movs	r3, #0
 800abcc:	930e      	str	r3, [sp, #56]	; 0x38
 800abce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd0:	43db      	mvns	r3, r3
 800abd2:	17db      	asrs	r3, r3, #31
 800abd4:	930f      	str	r3, [sp, #60]	; 0x3c
 800abd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abda:	930b      	str	r3, [sp, #44]	; 0x2c
 800abdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abde:	4013      	ands	r3, r2
 800abe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abe6:	4293      	cmp	r3, r2
 800abe8:	dc36      	bgt.n	800ac58 <_printf_float+0x3bc>
 800abea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800abec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abee:	429a      	cmp	r2, r3
 800abf0:	db40      	blt.n	800ac74 <_printf_float+0x3d8>
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	07db      	lsls	r3, r3, #31
 800abf6:	d43d      	bmi.n	800ac74 <_printf_float+0x3d8>
 800abf8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800abfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800abfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abfe:	1af3      	subs	r3, r6, r3
 800ac00:	1ab6      	subs	r6, r6, r2
 800ac02:	429e      	cmp	r6, r3
 800ac04:	dd00      	ble.n	800ac08 <_printf_float+0x36c>
 800ac06:	001e      	movs	r6, r3
 800ac08:	2e00      	cmp	r6, #0
 800ac0a:	dc3c      	bgt.n	800ac86 <_printf_float+0x3ea>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac10:	43f3      	mvns	r3, r6
 800ac12:	17db      	asrs	r3, r3, #31
 800ac14:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ac18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac1a:	1a9b      	subs	r3, r3, r2
 800ac1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac1e:	4032      	ands	r2, r6
 800ac20:	1a9b      	subs	r3, r3, r2
 800ac22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac24:	4293      	cmp	r3, r2
 800ac26:	dc00      	bgt.n	800ac2a <_printf_float+0x38e>
 800ac28:	e770      	b.n	800ab0c <_printf_float+0x270>
 800ac2a:	0022      	movs	r2, r4
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	0038      	movs	r0, r7
 800ac30:	9908      	ldr	r1, [sp, #32]
 800ac32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ac34:	321a      	adds	r2, #26
 800ac36:	47a8      	blx	r5
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d100      	bne.n	800ac3e <_printf_float+0x3a2>
 800ac3c:	e68c      	b.n	800a958 <_printf_float+0xbc>
 800ac3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac40:	3301      	adds	r3, #1
 800ac42:	930a      	str	r3, [sp, #40]	; 0x28
 800ac44:	e7e7      	b.n	800ac16 <_printf_float+0x37a>
 800ac46:	002a      	movs	r2, r5
 800ac48:	0038      	movs	r0, r7
 800ac4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac4c:	9908      	ldr	r1, [sp, #32]
 800ac4e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ac50:	47b0      	blx	r6
 800ac52:	3001      	adds	r0, #1
 800ac54:	d1b9      	bne.n	800abca <_printf_float+0x32e>
 800ac56:	e67f      	b.n	800a958 <_printf_float+0xbc>
 800ac58:	0022      	movs	r2, r4
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	0038      	movs	r0, r7
 800ac5e:	9908      	ldr	r1, [sp, #32]
 800ac60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ac62:	321a      	adds	r2, #26
 800ac64:	47b0      	blx	r6
 800ac66:	3001      	adds	r0, #1
 800ac68:	d100      	bne.n	800ac6c <_printf_float+0x3d0>
 800ac6a:	e675      	b.n	800a958 <_printf_float+0xbc>
 800ac6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac6e:	3301      	adds	r3, #1
 800ac70:	930e      	str	r3, [sp, #56]	; 0x38
 800ac72:	e7b0      	b.n	800abd6 <_printf_float+0x33a>
 800ac74:	0038      	movs	r0, r7
 800ac76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac7a:	9908      	ldr	r1, [sp, #32]
 800ac7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ac7e:	47b0      	blx	r6
 800ac80:	3001      	adds	r0, #1
 800ac82:	d1b9      	bne.n	800abf8 <_printf_float+0x35c>
 800ac84:	e668      	b.n	800a958 <_printf_float+0xbc>
 800ac86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac88:	0038      	movs	r0, r7
 800ac8a:	18ea      	adds	r2, r5, r3
 800ac8c:	9908      	ldr	r1, [sp, #32]
 800ac8e:	0033      	movs	r3, r6
 800ac90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ac92:	47a8      	blx	r5
 800ac94:	3001      	adds	r0, #1
 800ac96:	d1b9      	bne.n	800ac0c <_printf_float+0x370>
 800ac98:	e65e      	b.n	800a958 <_printf_float+0xbc>
 800ac9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	dc02      	bgt.n	800aca6 <_printf_float+0x40a>
 800aca0:	2301      	movs	r3, #1
 800aca2:	421a      	tst	r2, r3
 800aca4:	d03a      	beq.n	800ad1c <_printf_float+0x480>
 800aca6:	2301      	movs	r3, #1
 800aca8:	002a      	movs	r2, r5
 800acaa:	0038      	movs	r0, r7
 800acac:	9908      	ldr	r1, [sp, #32]
 800acae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800acb0:	47b0      	blx	r6
 800acb2:	3001      	adds	r0, #1
 800acb4:	d100      	bne.n	800acb8 <_printf_float+0x41c>
 800acb6:	e64f      	b.n	800a958 <_printf_float+0xbc>
 800acb8:	0038      	movs	r0, r7
 800acba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acbe:	9908      	ldr	r1, [sp, #32]
 800acc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800acc2:	47b0      	blx	r6
 800acc4:	3001      	adds	r0, #1
 800acc6:	d100      	bne.n	800acca <_printf_float+0x42e>
 800acc8:	e646      	b.n	800a958 <_printf_float+0xbc>
 800acca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800accc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800acce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acd0:	2200      	movs	r2, #0
 800acd2:	001e      	movs	r6, r3
 800acd4:	2300      	movs	r3, #0
 800acd6:	f7f5 fbbf 	bl	8000458 <__aeabi_dcmpeq>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d11c      	bne.n	800ad18 <_printf_float+0x47c>
 800acde:	0033      	movs	r3, r6
 800ace0:	1c6a      	adds	r2, r5, #1
 800ace2:	3b01      	subs	r3, #1
 800ace4:	0038      	movs	r0, r7
 800ace6:	9908      	ldr	r1, [sp, #32]
 800ace8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800acea:	47a8      	blx	r5
 800acec:	3001      	adds	r0, #1
 800acee:	d10f      	bne.n	800ad10 <_printf_float+0x474>
 800acf0:	e632      	b.n	800a958 <_printf_float+0xbc>
 800acf2:	0022      	movs	r2, r4
 800acf4:	2301      	movs	r3, #1
 800acf6:	0038      	movs	r0, r7
 800acf8:	9908      	ldr	r1, [sp, #32]
 800acfa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800acfc:	321a      	adds	r2, #26
 800acfe:	47b0      	blx	r6
 800ad00:	3001      	adds	r0, #1
 800ad02:	d100      	bne.n	800ad06 <_printf_float+0x46a>
 800ad04:	e628      	b.n	800a958 <_printf_float+0xbc>
 800ad06:	3501      	adds	r5, #1
 800ad08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	42ab      	cmp	r3, r5
 800ad0e:	dcf0      	bgt.n	800acf2 <_printf_float+0x456>
 800ad10:	0022      	movs	r2, r4
 800ad12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad14:	3250      	adds	r2, #80	; 0x50
 800ad16:	e6c8      	b.n	800aaaa <_printf_float+0x20e>
 800ad18:	2500      	movs	r5, #0
 800ad1a:	e7f5      	b.n	800ad08 <_printf_float+0x46c>
 800ad1c:	002a      	movs	r2, r5
 800ad1e:	e7e1      	b.n	800ace4 <_printf_float+0x448>
 800ad20:	0022      	movs	r2, r4
 800ad22:	2301      	movs	r3, #1
 800ad24:	0038      	movs	r0, r7
 800ad26:	9908      	ldr	r1, [sp, #32]
 800ad28:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ad2a:	3219      	adds	r2, #25
 800ad2c:	47b0      	blx	r6
 800ad2e:	3001      	adds	r0, #1
 800ad30:	d100      	bne.n	800ad34 <_printf_float+0x498>
 800ad32:	e611      	b.n	800a958 <_printf_float+0xbc>
 800ad34:	3501      	adds	r5, #1
 800ad36:	68e3      	ldr	r3, [r4, #12]
 800ad38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad3a:	1a9b      	subs	r3, r3, r2
 800ad3c:	42ab      	cmp	r3, r5
 800ad3e:	dcef      	bgt.n	800ad20 <_printf_float+0x484>
 800ad40:	e6e8      	b.n	800ab14 <_printf_float+0x278>
 800ad42:	2500      	movs	r5, #0
 800ad44:	e7f7      	b.n	800ad36 <_printf_float+0x49a>
 800ad46:	46c0      	nop			; (mov r8, r8)

0800ad48 <_printf_common>:
 800ad48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad4a:	0016      	movs	r6, r2
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	688a      	ldr	r2, [r1, #8]
 800ad50:	690b      	ldr	r3, [r1, #16]
 800ad52:	000c      	movs	r4, r1
 800ad54:	9000      	str	r0, [sp, #0]
 800ad56:	4293      	cmp	r3, r2
 800ad58:	da00      	bge.n	800ad5c <_printf_common+0x14>
 800ad5a:	0013      	movs	r3, r2
 800ad5c:	0022      	movs	r2, r4
 800ad5e:	6033      	str	r3, [r6, #0]
 800ad60:	3243      	adds	r2, #67	; 0x43
 800ad62:	7812      	ldrb	r2, [r2, #0]
 800ad64:	2a00      	cmp	r2, #0
 800ad66:	d001      	beq.n	800ad6c <_printf_common+0x24>
 800ad68:	3301      	adds	r3, #1
 800ad6a:	6033      	str	r3, [r6, #0]
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	069b      	lsls	r3, r3, #26
 800ad70:	d502      	bpl.n	800ad78 <_printf_common+0x30>
 800ad72:	6833      	ldr	r3, [r6, #0]
 800ad74:	3302      	adds	r3, #2
 800ad76:	6033      	str	r3, [r6, #0]
 800ad78:	6822      	ldr	r2, [r4, #0]
 800ad7a:	2306      	movs	r3, #6
 800ad7c:	0015      	movs	r5, r2
 800ad7e:	401d      	ands	r5, r3
 800ad80:	421a      	tst	r2, r3
 800ad82:	d027      	beq.n	800add4 <_printf_common+0x8c>
 800ad84:	0023      	movs	r3, r4
 800ad86:	3343      	adds	r3, #67	; 0x43
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	1e5a      	subs	r2, r3, #1
 800ad8c:	4193      	sbcs	r3, r2
 800ad8e:	6822      	ldr	r2, [r4, #0]
 800ad90:	0692      	lsls	r2, r2, #26
 800ad92:	d430      	bmi.n	800adf6 <_printf_common+0xae>
 800ad94:	0022      	movs	r2, r4
 800ad96:	9901      	ldr	r1, [sp, #4]
 800ad98:	9800      	ldr	r0, [sp, #0]
 800ad9a:	9d08      	ldr	r5, [sp, #32]
 800ad9c:	3243      	adds	r2, #67	; 0x43
 800ad9e:	47a8      	blx	r5
 800ada0:	3001      	adds	r0, #1
 800ada2:	d025      	beq.n	800adf0 <_printf_common+0xa8>
 800ada4:	2206      	movs	r2, #6
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	2500      	movs	r5, #0
 800adaa:	4013      	ands	r3, r2
 800adac:	2b04      	cmp	r3, #4
 800adae:	d105      	bne.n	800adbc <_printf_common+0x74>
 800adb0:	6833      	ldr	r3, [r6, #0]
 800adb2:	68e5      	ldr	r5, [r4, #12]
 800adb4:	1aed      	subs	r5, r5, r3
 800adb6:	43eb      	mvns	r3, r5
 800adb8:	17db      	asrs	r3, r3, #31
 800adba:	401d      	ands	r5, r3
 800adbc:	68a3      	ldr	r3, [r4, #8]
 800adbe:	6922      	ldr	r2, [r4, #16]
 800adc0:	4293      	cmp	r3, r2
 800adc2:	dd01      	ble.n	800adc8 <_printf_common+0x80>
 800adc4:	1a9b      	subs	r3, r3, r2
 800adc6:	18ed      	adds	r5, r5, r3
 800adc8:	2600      	movs	r6, #0
 800adca:	42b5      	cmp	r5, r6
 800adcc:	d120      	bne.n	800ae10 <_printf_common+0xc8>
 800adce:	2000      	movs	r0, #0
 800add0:	e010      	b.n	800adf4 <_printf_common+0xac>
 800add2:	3501      	adds	r5, #1
 800add4:	68e3      	ldr	r3, [r4, #12]
 800add6:	6832      	ldr	r2, [r6, #0]
 800add8:	1a9b      	subs	r3, r3, r2
 800adda:	42ab      	cmp	r3, r5
 800addc:	ddd2      	ble.n	800ad84 <_printf_common+0x3c>
 800adde:	0022      	movs	r2, r4
 800ade0:	2301      	movs	r3, #1
 800ade2:	9901      	ldr	r1, [sp, #4]
 800ade4:	9800      	ldr	r0, [sp, #0]
 800ade6:	9f08      	ldr	r7, [sp, #32]
 800ade8:	3219      	adds	r2, #25
 800adea:	47b8      	blx	r7
 800adec:	3001      	adds	r0, #1
 800adee:	d1f0      	bne.n	800add2 <_printf_common+0x8a>
 800adf0:	2001      	movs	r0, #1
 800adf2:	4240      	negs	r0, r0
 800adf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adf6:	2030      	movs	r0, #48	; 0x30
 800adf8:	18e1      	adds	r1, r4, r3
 800adfa:	3143      	adds	r1, #67	; 0x43
 800adfc:	7008      	strb	r0, [r1, #0]
 800adfe:	0021      	movs	r1, r4
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	3145      	adds	r1, #69	; 0x45
 800ae04:	7809      	ldrb	r1, [r1, #0]
 800ae06:	18a2      	adds	r2, r4, r2
 800ae08:	3243      	adds	r2, #67	; 0x43
 800ae0a:	3302      	adds	r3, #2
 800ae0c:	7011      	strb	r1, [r2, #0]
 800ae0e:	e7c1      	b.n	800ad94 <_printf_common+0x4c>
 800ae10:	0022      	movs	r2, r4
 800ae12:	2301      	movs	r3, #1
 800ae14:	9901      	ldr	r1, [sp, #4]
 800ae16:	9800      	ldr	r0, [sp, #0]
 800ae18:	9f08      	ldr	r7, [sp, #32]
 800ae1a:	321a      	adds	r2, #26
 800ae1c:	47b8      	blx	r7
 800ae1e:	3001      	adds	r0, #1
 800ae20:	d0e6      	beq.n	800adf0 <_printf_common+0xa8>
 800ae22:	3601      	adds	r6, #1
 800ae24:	e7d1      	b.n	800adca <_printf_common+0x82>
	...

0800ae28 <_printf_i>:
 800ae28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae2a:	b08b      	sub	sp, #44	; 0x2c
 800ae2c:	9206      	str	r2, [sp, #24]
 800ae2e:	000a      	movs	r2, r1
 800ae30:	3243      	adds	r2, #67	; 0x43
 800ae32:	9307      	str	r3, [sp, #28]
 800ae34:	9005      	str	r0, [sp, #20]
 800ae36:	9204      	str	r2, [sp, #16]
 800ae38:	7e0a      	ldrb	r2, [r1, #24]
 800ae3a:	000c      	movs	r4, r1
 800ae3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae3e:	2a78      	cmp	r2, #120	; 0x78
 800ae40:	d809      	bhi.n	800ae56 <_printf_i+0x2e>
 800ae42:	2a62      	cmp	r2, #98	; 0x62
 800ae44:	d80b      	bhi.n	800ae5e <_printf_i+0x36>
 800ae46:	2a00      	cmp	r2, #0
 800ae48:	d100      	bne.n	800ae4c <_printf_i+0x24>
 800ae4a:	e0be      	b.n	800afca <_printf_i+0x1a2>
 800ae4c:	497c      	ldr	r1, [pc, #496]	; (800b040 <_printf_i+0x218>)
 800ae4e:	9103      	str	r1, [sp, #12]
 800ae50:	2a58      	cmp	r2, #88	; 0x58
 800ae52:	d100      	bne.n	800ae56 <_printf_i+0x2e>
 800ae54:	e093      	b.n	800af7e <_printf_i+0x156>
 800ae56:	0026      	movs	r6, r4
 800ae58:	3642      	adds	r6, #66	; 0x42
 800ae5a:	7032      	strb	r2, [r6, #0]
 800ae5c:	e022      	b.n	800aea4 <_printf_i+0x7c>
 800ae5e:	0010      	movs	r0, r2
 800ae60:	3863      	subs	r0, #99	; 0x63
 800ae62:	2815      	cmp	r0, #21
 800ae64:	d8f7      	bhi.n	800ae56 <_printf_i+0x2e>
 800ae66:	f7f5 f967 	bl	8000138 <__gnu_thumb1_case_shi>
 800ae6a:	0016      	.short	0x0016
 800ae6c:	fff6001f 	.word	0xfff6001f
 800ae70:	fff6fff6 	.word	0xfff6fff6
 800ae74:	001ffff6 	.word	0x001ffff6
 800ae78:	fff6fff6 	.word	0xfff6fff6
 800ae7c:	fff6fff6 	.word	0xfff6fff6
 800ae80:	003600a3 	.word	0x003600a3
 800ae84:	fff60083 	.word	0xfff60083
 800ae88:	00b4fff6 	.word	0x00b4fff6
 800ae8c:	0036fff6 	.word	0x0036fff6
 800ae90:	fff6fff6 	.word	0xfff6fff6
 800ae94:	0087      	.short	0x0087
 800ae96:	0026      	movs	r6, r4
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	3642      	adds	r6, #66	; 0x42
 800ae9c:	1d11      	adds	r1, r2, #4
 800ae9e:	6019      	str	r1, [r3, #0]
 800aea0:	6813      	ldr	r3, [r2, #0]
 800aea2:	7033      	strb	r3, [r6, #0]
 800aea4:	2301      	movs	r3, #1
 800aea6:	e0a2      	b.n	800afee <_printf_i+0x1c6>
 800aea8:	6818      	ldr	r0, [r3, #0]
 800aeaa:	6809      	ldr	r1, [r1, #0]
 800aeac:	1d02      	adds	r2, r0, #4
 800aeae:	060d      	lsls	r5, r1, #24
 800aeb0:	d50b      	bpl.n	800aeca <_printf_i+0xa2>
 800aeb2:	6805      	ldr	r5, [r0, #0]
 800aeb4:	601a      	str	r2, [r3, #0]
 800aeb6:	2d00      	cmp	r5, #0
 800aeb8:	da03      	bge.n	800aec2 <_printf_i+0x9a>
 800aeba:	232d      	movs	r3, #45	; 0x2d
 800aebc:	9a04      	ldr	r2, [sp, #16]
 800aebe:	426d      	negs	r5, r5
 800aec0:	7013      	strb	r3, [r2, #0]
 800aec2:	4b5f      	ldr	r3, [pc, #380]	; (800b040 <_printf_i+0x218>)
 800aec4:	270a      	movs	r7, #10
 800aec6:	9303      	str	r3, [sp, #12]
 800aec8:	e01b      	b.n	800af02 <_printf_i+0xda>
 800aeca:	6805      	ldr	r5, [r0, #0]
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	0649      	lsls	r1, r1, #25
 800aed0:	d5f1      	bpl.n	800aeb6 <_printf_i+0x8e>
 800aed2:	b22d      	sxth	r5, r5
 800aed4:	e7ef      	b.n	800aeb6 <_printf_i+0x8e>
 800aed6:	680d      	ldr	r5, [r1, #0]
 800aed8:	6819      	ldr	r1, [r3, #0]
 800aeda:	1d08      	adds	r0, r1, #4
 800aedc:	6018      	str	r0, [r3, #0]
 800aede:	062e      	lsls	r6, r5, #24
 800aee0:	d501      	bpl.n	800aee6 <_printf_i+0xbe>
 800aee2:	680d      	ldr	r5, [r1, #0]
 800aee4:	e003      	b.n	800aeee <_printf_i+0xc6>
 800aee6:	066d      	lsls	r5, r5, #25
 800aee8:	d5fb      	bpl.n	800aee2 <_printf_i+0xba>
 800aeea:	680d      	ldr	r5, [r1, #0]
 800aeec:	b2ad      	uxth	r5, r5
 800aeee:	4b54      	ldr	r3, [pc, #336]	; (800b040 <_printf_i+0x218>)
 800aef0:	2708      	movs	r7, #8
 800aef2:	9303      	str	r3, [sp, #12]
 800aef4:	2a6f      	cmp	r2, #111	; 0x6f
 800aef6:	d000      	beq.n	800aefa <_printf_i+0xd2>
 800aef8:	3702      	adds	r7, #2
 800aefa:	0023      	movs	r3, r4
 800aefc:	2200      	movs	r2, #0
 800aefe:	3343      	adds	r3, #67	; 0x43
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	6863      	ldr	r3, [r4, #4]
 800af04:	60a3      	str	r3, [r4, #8]
 800af06:	2b00      	cmp	r3, #0
 800af08:	db03      	blt.n	800af12 <_printf_i+0xea>
 800af0a:	2104      	movs	r1, #4
 800af0c:	6822      	ldr	r2, [r4, #0]
 800af0e:	438a      	bics	r2, r1
 800af10:	6022      	str	r2, [r4, #0]
 800af12:	2d00      	cmp	r5, #0
 800af14:	d102      	bne.n	800af1c <_printf_i+0xf4>
 800af16:	9e04      	ldr	r6, [sp, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00c      	beq.n	800af36 <_printf_i+0x10e>
 800af1c:	9e04      	ldr	r6, [sp, #16]
 800af1e:	0028      	movs	r0, r5
 800af20:	0039      	movs	r1, r7
 800af22:	f7f5 f999 	bl	8000258 <__aeabi_uidivmod>
 800af26:	9b03      	ldr	r3, [sp, #12]
 800af28:	3e01      	subs	r6, #1
 800af2a:	5c5b      	ldrb	r3, [r3, r1]
 800af2c:	7033      	strb	r3, [r6, #0]
 800af2e:	002b      	movs	r3, r5
 800af30:	0005      	movs	r5, r0
 800af32:	429f      	cmp	r7, r3
 800af34:	d9f3      	bls.n	800af1e <_printf_i+0xf6>
 800af36:	2f08      	cmp	r7, #8
 800af38:	d109      	bne.n	800af4e <_printf_i+0x126>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	07db      	lsls	r3, r3, #31
 800af3e:	d506      	bpl.n	800af4e <_printf_i+0x126>
 800af40:	6862      	ldr	r2, [r4, #4]
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	429a      	cmp	r2, r3
 800af46:	dc02      	bgt.n	800af4e <_printf_i+0x126>
 800af48:	2330      	movs	r3, #48	; 0x30
 800af4a:	3e01      	subs	r6, #1
 800af4c:	7033      	strb	r3, [r6, #0]
 800af4e:	9b04      	ldr	r3, [sp, #16]
 800af50:	1b9b      	subs	r3, r3, r6
 800af52:	6123      	str	r3, [r4, #16]
 800af54:	9b07      	ldr	r3, [sp, #28]
 800af56:	0021      	movs	r1, r4
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	9805      	ldr	r0, [sp, #20]
 800af5c:	9b06      	ldr	r3, [sp, #24]
 800af5e:	aa09      	add	r2, sp, #36	; 0x24
 800af60:	f7ff fef2 	bl	800ad48 <_printf_common>
 800af64:	3001      	adds	r0, #1
 800af66:	d147      	bne.n	800aff8 <_printf_i+0x1d0>
 800af68:	2001      	movs	r0, #1
 800af6a:	4240      	negs	r0, r0
 800af6c:	b00b      	add	sp, #44	; 0x2c
 800af6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af70:	2220      	movs	r2, #32
 800af72:	6809      	ldr	r1, [r1, #0]
 800af74:	430a      	orrs	r2, r1
 800af76:	6022      	str	r2, [r4, #0]
 800af78:	2278      	movs	r2, #120	; 0x78
 800af7a:	4932      	ldr	r1, [pc, #200]	; (800b044 <_printf_i+0x21c>)
 800af7c:	9103      	str	r1, [sp, #12]
 800af7e:	0021      	movs	r1, r4
 800af80:	3145      	adds	r1, #69	; 0x45
 800af82:	700a      	strb	r2, [r1, #0]
 800af84:	6819      	ldr	r1, [r3, #0]
 800af86:	6822      	ldr	r2, [r4, #0]
 800af88:	c920      	ldmia	r1!, {r5}
 800af8a:	0610      	lsls	r0, r2, #24
 800af8c:	d402      	bmi.n	800af94 <_printf_i+0x16c>
 800af8e:	0650      	lsls	r0, r2, #25
 800af90:	d500      	bpl.n	800af94 <_printf_i+0x16c>
 800af92:	b2ad      	uxth	r5, r5
 800af94:	6019      	str	r1, [r3, #0]
 800af96:	07d3      	lsls	r3, r2, #31
 800af98:	d502      	bpl.n	800afa0 <_printf_i+0x178>
 800af9a:	2320      	movs	r3, #32
 800af9c:	4313      	orrs	r3, r2
 800af9e:	6023      	str	r3, [r4, #0]
 800afa0:	2710      	movs	r7, #16
 800afa2:	2d00      	cmp	r5, #0
 800afa4:	d1a9      	bne.n	800aefa <_printf_i+0xd2>
 800afa6:	2220      	movs	r2, #32
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	4393      	bics	r3, r2
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	e7a4      	b.n	800aefa <_printf_i+0xd2>
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	680d      	ldr	r5, [r1, #0]
 800afb4:	1d10      	adds	r0, r2, #4
 800afb6:	6949      	ldr	r1, [r1, #20]
 800afb8:	6018      	str	r0, [r3, #0]
 800afba:	6813      	ldr	r3, [r2, #0]
 800afbc:	062e      	lsls	r6, r5, #24
 800afbe:	d501      	bpl.n	800afc4 <_printf_i+0x19c>
 800afc0:	6019      	str	r1, [r3, #0]
 800afc2:	e002      	b.n	800afca <_printf_i+0x1a2>
 800afc4:	066d      	lsls	r5, r5, #25
 800afc6:	d5fb      	bpl.n	800afc0 <_printf_i+0x198>
 800afc8:	8019      	strh	r1, [r3, #0]
 800afca:	2300      	movs	r3, #0
 800afcc:	9e04      	ldr	r6, [sp, #16]
 800afce:	6123      	str	r3, [r4, #16]
 800afd0:	e7c0      	b.n	800af54 <_printf_i+0x12c>
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	1d11      	adds	r1, r2, #4
 800afd6:	6019      	str	r1, [r3, #0]
 800afd8:	6816      	ldr	r6, [r2, #0]
 800afda:	2100      	movs	r1, #0
 800afdc:	0030      	movs	r0, r6
 800afde:	6862      	ldr	r2, [r4, #4]
 800afe0:	f000 fb89 	bl	800b6f6 <memchr>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d001      	beq.n	800afec <_printf_i+0x1c4>
 800afe8:	1b80      	subs	r0, r0, r6
 800afea:	6060      	str	r0, [r4, #4]
 800afec:	6863      	ldr	r3, [r4, #4]
 800afee:	6123      	str	r3, [r4, #16]
 800aff0:	2300      	movs	r3, #0
 800aff2:	9a04      	ldr	r2, [sp, #16]
 800aff4:	7013      	strb	r3, [r2, #0]
 800aff6:	e7ad      	b.n	800af54 <_printf_i+0x12c>
 800aff8:	0032      	movs	r2, r6
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	9906      	ldr	r1, [sp, #24]
 800affe:	9805      	ldr	r0, [sp, #20]
 800b000:	9d07      	ldr	r5, [sp, #28]
 800b002:	47a8      	blx	r5
 800b004:	3001      	adds	r0, #1
 800b006:	d0af      	beq.n	800af68 <_printf_i+0x140>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	079b      	lsls	r3, r3, #30
 800b00c:	d415      	bmi.n	800b03a <_printf_i+0x212>
 800b00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b010:	68e0      	ldr	r0, [r4, #12]
 800b012:	4298      	cmp	r0, r3
 800b014:	daaa      	bge.n	800af6c <_printf_i+0x144>
 800b016:	0018      	movs	r0, r3
 800b018:	e7a8      	b.n	800af6c <_printf_i+0x144>
 800b01a:	0022      	movs	r2, r4
 800b01c:	2301      	movs	r3, #1
 800b01e:	9906      	ldr	r1, [sp, #24]
 800b020:	9805      	ldr	r0, [sp, #20]
 800b022:	9e07      	ldr	r6, [sp, #28]
 800b024:	3219      	adds	r2, #25
 800b026:	47b0      	blx	r6
 800b028:	3001      	adds	r0, #1
 800b02a:	d09d      	beq.n	800af68 <_printf_i+0x140>
 800b02c:	3501      	adds	r5, #1
 800b02e:	68e3      	ldr	r3, [r4, #12]
 800b030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b032:	1a9b      	subs	r3, r3, r2
 800b034:	42ab      	cmp	r3, r5
 800b036:	dcf0      	bgt.n	800b01a <_printf_i+0x1f2>
 800b038:	e7e9      	b.n	800b00e <_printf_i+0x1e6>
 800b03a:	2500      	movs	r5, #0
 800b03c:	e7f7      	b.n	800b02e <_printf_i+0x206>
 800b03e:	46c0      	nop			; (mov r8, r8)
 800b040:	0800e42a 	.word	0x0800e42a
 800b044:	0800e43b 	.word	0x0800e43b

0800b048 <std>:
 800b048:	2300      	movs	r3, #0
 800b04a:	b510      	push	{r4, lr}
 800b04c:	0004      	movs	r4, r0
 800b04e:	6003      	str	r3, [r0, #0]
 800b050:	6043      	str	r3, [r0, #4]
 800b052:	6083      	str	r3, [r0, #8]
 800b054:	8181      	strh	r1, [r0, #12]
 800b056:	6643      	str	r3, [r0, #100]	; 0x64
 800b058:	81c2      	strh	r2, [r0, #14]
 800b05a:	6103      	str	r3, [r0, #16]
 800b05c:	6143      	str	r3, [r0, #20]
 800b05e:	6183      	str	r3, [r0, #24]
 800b060:	0019      	movs	r1, r3
 800b062:	2208      	movs	r2, #8
 800b064:	305c      	adds	r0, #92	; 0x5c
 800b066:	f000 fa49 	bl	800b4fc <memset>
 800b06a:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <std+0x50>)
 800b06c:	6224      	str	r4, [r4, #32]
 800b06e:	6263      	str	r3, [r4, #36]	; 0x24
 800b070:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <std+0x54>)
 800b072:	62a3      	str	r3, [r4, #40]	; 0x28
 800b074:	4b0a      	ldr	r3, [pc, #40]	; (800b0a0 <std+0x58>)
 800b076:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b078:	4b0a      	ldr	r3, [pc, #40]	; (800b0a4 <std+0x5c>)
 800b07a:	6323      	str	r3, [r4, #48]	; 0x30
 800b07c:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <std+0x60>)
 800b07e:	429c      	cmp	r4, r3
 800b080:	d005      	beq.n	800b08e <std+0x46>
 800b082:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <std+0x64>)
 800b084:	429c      	cmp	r4, r3
 800b086:	d002      	beq.n	800b08e <std+0x46>
 800b088:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <std+0x68>)
 800b08a:	429c      	cmp	r4, r3
 800b08c:	d103      	bne.n	800b096 <std+0x4e>
 800b08e:	0020      	movs	r0, r4
 800b090:	3058      	adds	r0, #88	; 0x58
 800b092:	f000 fb2d 	bl	800b6f0 <__retarget_lock_init_recursive>
 800b096:	bd10      	pop	{r4, pc}
 800b098:	0800b319 	.word	0x0800b319
 800b09c:	0800b341 	.word	0x0800b341
 800b0a0:	0800b379 	.word	0x0800b379
 800b0a4:	0800b3a5 	.word	0x0800b3a5
 800b0a8:	2000067c 	.word	0x2000067c
 800b0ac:	200006e4 	.word	0x200006e4
 800b0b0:	2000074c 	.word	0x2000074c

0800b0b4 <stdio_exit_handler>:
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	4a03      	ldr	r2, [pc, #12]	; (800b0c4 <stdio_exit_handler+0x10>)
 800b0b8:	4903      	ldr	r1, [pc, #12]	; (800b0c8 <stdio_exit_handler+0x14>)
 800b0ba:	4804      	ldr	r0, [pc, #16]	; (800b0cc <stdio_exit_handler+0x18>)
 800b0bc:	f000 f86c 	bl	800b198 <_fwalk_sglue>
 800b0c0:	bd10      	pop	{r4, pc}
 800b0c2:	46c0      	nop			; (mov r8, r8)
 800b0c4:	20000088 	.word	0x20000088
 800b0c8:	0800dd81 	.word	0x0800dd81
 800b0cc:	20000200 	.word	0x20000200

0800b0d0 <cleanup_stdio>:
 800b0d0:	6841      	ldr	r1, [r0, #4]
 800b0d2:	4b0b      	ldr	r3, [pc, #44]	; (800b100 <cleanup_stdio+0x30>)
 800b0d4:	b510      	push	{r4, lr}
 800b0d6:	0004      	movs	r4, r0
 800b0d8:	4299      	cmp	r1, r3
 800b0da:	d001      	beq.n	800b0e0 <cleanup_stdio+0x10>
 800b0dc:	f002 fe50 	bl	800dd80 <_fflush_r>
 800b0e0:	68a1      	ldr	r1, [r4, #8]
 800b0e2:	4b08      	ldr	r3, [pc, #32]	; (800b104 <cleanup_stdio+0x34>)
 800b0e4:	4299      	cmp	r1, r3
 800b0e6:	d002      	beq.n	800b0ee <cleanup_stdio+0x1e>
 800b0e8:	0020      	movs	r0, r4
 800b0ea:	f002 fe49 	bl	800dd80 <_fflush_r>
 800b0ee:	68e1      	ldr	r1, [r4, #12]
 800b0f0:	4b05      	ldr	r3, [pc, #20]	; (800b108 <cleanup_stdio+0x38>)
 800b0f2:	4299      	cmp	r1, r3
 800b0f4:	d002      	beq.n	800b0fc <cleanup_stdio+0x2c>
 800b0f6:	0020      	movs	r0, r4
 800b0f8:	f002 fe42 	bl	800dd80 <_fflush_r>
 800b0fc:	bd10      	pop	{r4, pc}
 800b0fe:	46c0      	nop			; (mov r8, r8)
 800b100:	2000067c 	.word	0x2000067c
 800b104:	200006e4 	.word	0x200006e4
 800b108:	2000074c 	.word	0x2000074c

0800b10c <global_stdio_init.part.0>:
 800b10c:	b510      	push	{r4, lr}
 800b10e:	4b09      	ldr	r3, [pc, #36]	; (800b134 <global_stdio_init.part.0+0x28>)
 800b110:	4a09      	ldr	r2, [pc, #36]	; (800b138 <global_stdio_init.part.0+0x2c>)
 800b112:	2104      	movs	r1, #4
 800b114:	601a      	str	r2, [r3, #0]
 800b116:	4809      	ldr	r0, [pc, #36]	; (800b13c <global_stdio_init.part.0+0x30>)
 800b118:	2200      	movs	r2, #0
 800b11a:	f7ff ff95 	bl	800b048 <std>
 800b11e:	2201      	movs	r2, #1
 800b120:	2109      	movs	r1, #9
 800b122:	4807      	ldr	r0, [pc, #28]	; (800b140 <global_stdio_init.part.0+0x34>)
 800b124:	f7ff ff90 	bl	800b048 <std>
 800b128:	2202      	movs	r2, #2
 800b12a:	2112      	movs	r1, #18
 800b12c:	4805      	ldr	r0, [pc, #20]	; (800b144 <global_stdio_init.part.0+0x38>)
 800b12e:	f7ff ff8b 	bl	800b048 <std>
 800b132:	bd10      	pop	{r4, pc}
 800b134:	200007b4 	.word	0x200007b4
 800b138:	0800b0b5 	.word	0x0800b0b5
 800b13c:	2000067c 	.word	0x2000067c
 800b140:	200006e4 	.word	0x200006e4
 800b144:	2000074c 	.word	0x2000074c

0800b148 <__sfp_lock_acquire>:
 800b148:	b510      	push	{r4, lr}
 800b14a:	4802      	ldr	r0, [pc, #8]	; (800b154 <__sfp_lock_acquire+0xc>)
 800b14c:	f000 fad1 	bl	800b6f2 <__retarget_lock_acquire_recursive>
 800b150:	bd10      	pop	{r4, pc}
 800b152:	46c0      	nop			; (mov r8, r8)
 800b154:	200007bd 	.word	0x200007bd

0800b158 <__sfp_lock_release>:
 800b158:	b510      	push	{r4, lr}
 800b15a:	4802      	ldr	r0, [pc, #8]	; (800b164 <__sfp_lock_release+0xc>)
 800b15c:	f000 faca 	bl	800b6f4 <__retarget_lock_release_recursive>
 800b160:	bd10      	pop	{r4, pc}
 800b162:	46c0      	nop			; (mov r8, r8)
 800b164:	200007bd 	.word	0x200007bd

0800b168 <__sinit>:
 800b168:	b510      	push	{r4, lr}
 800b16a:	0004      	movs	r4, r0
 800b16c:	f7ff ffec 	bl	800b148 <__sfp_lock_acquire>
 800b170:	6a23      	ldr	r3, [r4, #32]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <__sinit+0x14>
 800b176:	f7ff ffef 	bl	800b158 <__sfp_lock_release>
 800b17a:	bd10      	pop	{r4, pc}
 800b17c:	4b04      	ldr	r3, [pc, #16]	; (800b190 <__sinit+0x28>)
 800b17e:	6223      	str	r3, [r4, #32]
 800b180:	4b04      	ldr	r3, [pc, #16]	; (800b194 <__sinit+0x2c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1f6      	bne.n	800b176 <__sinit+0xe>
 800b188:	f7ff ffc0 	bl	800b10c <global_stdio_init.part.0>
 800b18c:	e7f3      	b.n	800b176 <__sinit+0xe>
 800b18e:	46c0      	nop			; (mov r8, r8)
 800b190:	0800b0d1 	.word	0x0800b0d1
 800b194:	200007b4 	.word	0x200007b4

0800b198 <_fwalk_sglue>:
 800b198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b19a:	0014      	movs	r4, r2
 800b19c:	2600      	movs	r6, #0
 800b19e:	9000      	str	r0, [sp, #0]
 800b1a0:	9101      	str	r1, [sp, #4]
 800b1a2:	68a5      	ldr	r5, [r4, #8]
 800b1a4:	6867      	ldr	r7, [r4, #4]
 800b1a6:	3f01      	subs	r7, #1
 800b1a8:	d504      	bpl.n	800b1b4 <_fwalk_sglue+0x1c>
 800b1aa:	6824      	ldr	r4, [r4, #0]
 800b1ac:	2c00      	cmp	r4, #0
 800b1ae:	d1f8      	bne.n	800b1a2 <_fwalk_sglue+0xa>
 800b1b0:	0030      	movs	r0, r6
 800b1b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1b4:	89ab      	ldrh	r3, [r5, #12]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d908      	bls.n	800b1cc <_fwalk_sglue+0x34>
 800b1ba:	220e      	movs	r2, #14
 800b1bc:	5eab      	ldrsh	r3, [r5, r2]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	d004      	beq.n	800b1cc <_fwalk_sglue+0x34>
 800b1c2:	0029      	movs	r1, r5
 800b1c4:	9800      	ldr	r0, [sp, #0]
 800b1c6:	9b01      	ldr	r3, [sp, #4]
 800b1c8:	4798      	blx	r3
 800b1ca:	4306      	orrs	r6, r0
 800b1cc:	3568      	adds	r5, #104	; 0x68
 800b1ce:	e7ea      	b.n	800b1a6 <_fwalk_sglue+0xe>

0800b1d0 <iprintf>:
 800b1d0:	b40f      	push	{r0, r1, r2, r3}
 800b1d2:	b507      	push	{r0, r1, r2, lr}
 800b1d4:	4905      	ldr	r1, [pc, #20]	; (800b1ec <iprintf+0x1c>)
 800b1d6:	ab04      	add	r3, sp, #16
 800b1d8:	6808      	ldr	r0, [r1, #0]
 800b1da:	cb04      	ldmia	r3!, {r2}
 800b1dc:	6881      	ldr	r1, [r0, #8]
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	f002 fc28 	bl	800da34 <_vfiprintf_r>
 800b1e4:	b003      	add	sp, #12
 800b1e6:	bc08      	pop	{r3}
 800b1e8:	b004      	add	sp, #16
 800b1ea:	4718      	bx	r3
 800b1ec:	2000024c 	.word	0x2000024c

0800b1f0 <_puts_r>:
 800b1f0:	6a03      	ldr	r3, [r0, #32]
 800b1f2:	b570      	push	{r4, r5, r6, lr}
 800b1f4:	0005      	movs	r5, r0
 800b1f6:	000e      	movs	r6, r1
 800b1f8:	6884      	ldr	r4, [r0, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <_puts_r+0x12>
 800b1fe:	f7ff ffb3 	bl	800b168 <__sinit>
 800b202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b204:	07db      	lsls	r3, r3, #31
 800b206:	d405      	bmi.n	800b214 <_puts_r+0x24>
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	059b      	lsls	r3, r3, #22
 800b20c:	d402      	bmi.n	800b214 <_puts_r+0x24>
 800b20e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b210:	f000 fa6f 	bl	800b6f2 <__retarget_lock_acquire_recursive>
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	071b      	lsls	r3, r3, #28
 800b218:	d502      	bpl.n	800b220 <_puts_r+0x30>
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d11f      	bne.n	800b260 <_puts_r+0x70>
 800b220:	0021      	movs	r1, r4
 800b222:	0028      	movs	r0, r5
 800b224:	f000 f906 	bl	800b434 <__swsetup_r>
 800b228:	2800      	cmp	r0, #0
 800b22a:	d019      	beq.n	800b260 <_puts_r+0x70>
 800b22c:	2501      	movs	r5, #1
 800b22e:	426d      	negs	r5, r5
 800b230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b232:	07db      	lsls	r3, r3, #31
 800b234:	d405      	bmi.n	800b242 <_puts_r+0x52>
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	059b      	lsls	r3, r3, #22
 800b23a:	d402      	bmi.n	800b242 <_puts_r+0x52>
 800b23c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b23e:	f000 fa59 	bl	800b6f4 <__retarget_lock_release_recursive>
 800b242:	0028      	movs	r0, r5
 800b244:	bd70      	pop	{r4, r5, r6, pc}
 800b246:	3601      	adds	r6, #1
 800b248:	60a3      	str	r3, [r4, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	da04      	bge.n	800b258 <_puts_r+0x68>
 800b24e:	69a2      	ldr	r2, [r4, #24]
 800b250:	429a      	cmp	r2, r3
 800b252:	dc16      	bgt.n	800b282 <_puts_r+0x92>
 800b254:	290a      	cmp	r1, #10
 800b256:	d014      	beq.n	800b282 <_puts_r+0x92>
 800b258:	6823      	ldr	r3, [r4, #0]
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	6022      	str	r2, [r4, #0]
 800b25e:	7019      	strb	r1, [r3, #0]
 800b260:	68a3      	ldr	r3, [r4, #8]
 800b262:	7831      	ldrb	r1, [r6, #0]
 800b264:	3b01      	subs	r3, #1
 800b266:	2900      	cmp	r1, #0
 800b268:	d1ed      	bne.n	800b246 <_puts_r+0x56>
 800b26a:	60a3      	str	r3, [r4, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	da0f      	bge.n	800b290 <_puts_r+0xa0>
 800b270:	0028      	movs	r0, r5
 800b272:	0022      	movs	r2, r4
 800b274:	310a      	adds	r1, #10
 800b276:	f000 f89b 	bl	800b3b0 <__swbuf_r>
 800b27a:	250a      	movs	r5, #10
 800b27c:	3001      	adds	r0, #1
 800b27e:	d1d7      	bne.n	800b230 <_puts_r+0x40>
 800b280:	e7d4      	b.n	800b22c <_puts_r+0x3c>
 800b282:	0022      	movs	r2, r4
 800b284:	0028      	movs	r0, r5
 800b286:	f000 f893 	bl	800b3b0 <__swbuf_r>
 800b28a:	3001      	adds	r0, #1
 800b28c:	d1e8      	bne.n	800b260 <_puts_r+0x70>
 800b28e:	e7cd      	b.n	800b22c <_puts_r+0x3c>
 800b290:	250a      	movs	r5, #10
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	1c5a      	adds	r2, r3, #1
 800b296:	6022      	str	r2, [r4, #0]
 800b298:	701d      	strb	r5, [r3, #0]
 800b29a:	e7c9      	b.n	800b230 <_puts_r+0x40>

0800b29c <puts>:
 800b29c:	b510      	push	{r4, lr}
 800b29e:	4b03      	ldr	r3, [pc, #12]	; (800b2ac <puts+0x10>)
 800b2a0:	0001      	movs	r1, r0
 800b2a2:	6818      	ldr	r0, [r3, #0]
 800b2a4:	f7ff ffa4 	bl	800b1f0 <_puts_r>
 800b2a8:	bd10      	pop	{r4, pc}
 800b2aa:	46c0      	nop			; (mov r8, r8)
 800b2ac:	2000024c 	.word	0x2000024c

0800b2b0 <sniprintf>:
 800b2b0:	b40c      	push	{r2, r3}
 800b2b2:	b530      	push	{r4, r5, lr}
 800b2b4:	4b17      	ldr	r3, [pc, #92]	; (800b314 <sniprintf+0x64>)
 800b2b6:	000c      	movs	r4, r1
 800b2b8:	681d      	ldr	r5, [r3, #0]
 800b2ba:	b09d      	sub	sp, #116	; 0x74
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	da08      	bge.n	800b2d2 <sniprintf+0x22>
 800b2c0:	238b      	movs	r3, #139	; 0x8b
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	602b      	str	r3, [r5, #0]
 800b2c6:	4240      	negs	r0, r0
 800b2c8:	b01d      	add	sp, #116	; 0x74
 800b2ca:	bc30      	pop	{r4, r5}
 800b2cc:	bc08      	pop	{r3}
 800b2ce:	b002      	add	sp, #8
 800b2d0:	4718      	bx	r3
 800b2d2:	2382      	movs	r3, #130	; 0x82
 800b2d4:	466a      	mov	r2, sp
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	8293      	strh	r3, [r2, #20]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	9002      	str	r0, [sp, #8]
 800b2de:	9006      	str	r0, [sp, #24]
 800b2e0:	4299      	cmp	r1, r3
 800b2e2:	d000      	beq.n	800b2e6 <sniprintf+0x36>
 800b2e4:	1e4b      	subs	r3, r1, #1
 800b2e6:	9304      	str	r3, [sp, #16]
 800b2e8:	9307      	str	r3, [sp, #28]
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	466a      	mov	r2, sp
 800b2ee:	425b      	negs	r3, r3
 800b2f0:	82d3      	strh	r3, [r2, #22]
 800b2f2:	0028      	movs	r0, r5
 800b2f4:	ab21      	add	r3, sp, #132	; 0x84
 800b2f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b2f8:	a902      	add	r1, sp, #8
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	f002 fa72 	bl	800d7e4 <_svfiprintf_r>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	da01      	bge.n	800b308 <sniprintf+0x58>
 800b304:	238b      	movs	r3, #139	; 0x8b
 800b306:	602b      	str	r3, [r5, #0]
 800b308:	2c00      	cmp	r4, #0
 800b30a:	d0dd      	beq.n	800b2c8 <sniprintf+0x18>
 800b30c:	2200      	movs	r2, #0
 800b30e:	9b02      	ldr	r3, [sp, #8]
 800b310:	701a      	strb	r2, [r3, #0]
 800b312:	e7d9      	b.n	800b2c8 <sniprintf+0x18>
 800b314:	2000024c 	.word	0x2000024c

0800b318 <__sread>:
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	000c      	movs	r4, r1
 800b31c:	250e      	movs	r5, #14
 800b31e:	5f49      	ldrsh	r1, [r1, r5]
 800b320:	f000 f994 	bl	800b64c <_read_r>
 800b324:	2800      	cmp	r0, #0
 800b326:	db03      	blt.n	800b330 <__sread+0x18>
 800b328:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b32a:	181b      	adds	r3, r3, r0
 800b32c:	6563      	str	r3, [r4, #84]	; 0x54
 800b32e:	bd70      	pop	{r4, r5, r6, pc}
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	4a02      	ldr	r2, [pc, #8]	; (800b33c <__sread+0x24>)
 800b334:	4013      	ands	r3, r2
 800b336:	81a3      	strh	r3, [r4, #12]
 800b338:	e7f9      	b.n	800b32e <__sread+0x16>
 800b33a:	46c0      	nop			; (mov r8, r8)
 800b33c:	ffffefff 	.word	0xffffefff

0800b340 <__swrite>:
 800b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b342:	001f      	movs	r7, r3
 800b344:	898b      	ldrh	r3, [r1, #12]
 800b346:	0005      	movs	r5, r0
 800b348:	000c      	movs	r4, r1
 800b34a:	0016      	movs	r6, r2
 800b34c:	05db      	lsls	r3, r3, #23
 800b34e:	d505      	bpl.n	800b35c <__swrite+0x1c>
 800b350:	230e      	movs	r3, #14
 800b352:	5ec9      	ldrsh	r1, [r1, r3]
 800b354:	2200      	movs	r2, #0
 800b356:	2302      	movs	r3, #2
 800b358:	f000 f964 	bl	800b624 <_lseek_r>
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	4a05      	ldr	r2, [pc, #20]	; (800b374 <__swrite+0x34>)
 800b360:	0028      	movs	r0, r5
 800b362:	4013      	ands	r3, r2
 800b364:	81a3      	strh	r3, [r4, #12]
 800b366:	0032      	movs	r2, r6
 800b368:	230e      	movs	r3, #14
 800b36a:	5ee1      	ldrsh	r1, [r4, r3]
 800b36c:	003b      	movs	r3, r7
 800b36e:	f000 f981 	bl	800b674 <_write_r>
 800b372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b374:	ffffefff 	.word	0xffffefff

0800b378 <__sseek>:
 800b378:	b570      	push	{r4, r5, r6, lr}
 800b37a:	000c      	movs	r4, r1
 800b37c:	250e      	movs	r5, #14
 800b37e:	5f49      	ldrsh	r1, [r1, r5]
 800b380:	f000 f950 	bl	800b624 <_lseek_r>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	1c42      	adds	r2, r0, #1
 800b388:	d103      	bne.n	800b392 <__sseek+0x1a>
 800b38a:	4a05      	ldr	r2, [pc, #20]	; (800b3a0 <__sseek+0x28>)
 800b38c:	4013      	ands	r3, r2
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	bd70      	pop	{r4, r5, r6, pc}
 800b392:	2280      	movs	r2, #128	; 0x80
 800b394:	0152      	lsls	r2, r2, #5
 800b396:	4313      	orrs	r3, r2
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	6560      	str	r0, [r4, #84]	; 0x54
 800b39c:	e7f8      	b.n	800b390 <__sseek+0x18>
 800b39e:	46c0      	nop			; (mov r8, r8)
 800b3a0:	ffffefff 	.word	0xffffefff

0800b3a4 <__sclose>:
 800b3a4:	b510      	push	{r4, lr}
 800b3a6:	230e      	movs	r3, #14
 800b3a8:	5ec9      	ldrsh	r1, [r1, r3]
 800b3aa:	f000 f929 	bl	800b600 <_close_r>
 800b3ae:	bd10      	pop	{r4, pc}

0800b3b0 <__swbuf_r>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	0006      	movs	r6, r0
 800b3b4:	000d      	movs	r5, r1
 800b3b6:	0014      	movs	r4, r2
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d004      	beq.n	800b3c6 <__swbuf_r+0x16>
 800b3bc:	6a03      	ldr	r3, [r0, #32]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d101      	bne.n	800b3c6 <__swbuf_r+0x16>
 800b3c2:	f7ff fed1 	bl	800b168 <__sinit>
 800b3c6:	69a3      	ldr	r3, [r4, #24]
 800b3c8:	60a3      	str	r3, [r4, #8]
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	071b      	lsls	r3, r3, #28
 800b3ce:	d528      	bpl.n	800b422 <__swbuf_r+0x72>
 800b3d0:	6923      	ldr	r3, [r4, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d025      	beq.n	800b422 <__swbuf_r+0x72>
 800b3d6:	6923      	ldr	r3, [r4, #16]
 800b3d8:	6820      	ldr	r0, [r4, #0]
 800b3da:	b2ef      	uxtb	r7, r5
 800b3dc:	1ac0      	subs	r0, r0, r3
 800b3de:	6963      	ldr	r3, [r4, #20]
 800b3e0:	b2ed      	uxtb	r5, r5
 800b3e2:	4283      	cmp	r3, r0
 800b3e4:	dc05      	bgt.n	800b3f2 <__swbuf_r+0x42>
 800b3e6:	0021      	movs	r1, r4
 800b3e8:	0030      	movs	r0, r6
 800b3ea:	f002 fcc9 	bl	800dd80 <_fflush_r>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d11d      	bne.n	800b42e <__swbuf_r+0x7e>
 800b3f2:	68a3      	ldr	r3, [r4, #8]
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	60a3      	str	r3, [r4, #8]
 800b3fa:	6823      	ldr	r3, [r4, #0]
 800b3fc:	1c5a      	adds	r2, r3, #1
 800b3fe:	6022      	str	r2, [r4, #0]
 800b400:	701f      	strb	r7, [r3, #0]
 800b402:	6963      	ldr	r3, [r4, #20]
 800b404:	4283      	cmp	r3, r0
 800b406:	d004      	beq.n	800b412 <__swbuf_r+0x62>
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	07db      	lsls	r3, r3, #31
 800b40c:	d507      	bpl.n	800b41e <__swbuf_r+0x6e>
 800b40e:	2d0a      	cmp	r5, #10
 800b410:	d105      	bne.n	800b41e <__swbuf_r+0x6e>
 800b412:	0021      	movs	r1, r4
 800b414:	0030      	movs	r0, r6
 800b416:	f002 fcb3 	bl	800dd80 <_fflush_r>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d107      	bne.n	800b42e <__swbuf_r+0x7e>
 800b41e:	0028      	movs	r0, r5
 800b420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b422:	0021      	movs	r1, r4
 800b424:	0030      	movs	r0, r6
 800b426:	f000 f805 	bl	800b434 <__swsetup_r>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d0d3      	beq.n	800b3d6 <__swbuf_r+0x26>
 800b42e:	2501      	movs	r5, #1
 800b430:	426d      	negs	r5, r5
 800b432:	e7f4      	b.n	800b41e <__swbuf_r+0x6e>

0800b434 <__swsetup_r>:
 800b434:	4b30      	ldr	r3, [pc, #192]	; (800b4f8 <__swsetup_r+0xc4>)
 800b436:	b570      	push	{r4, r5, r6, lr}
 800b438:	0005      	movs	r5, r0
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	000c      	movs	r4, r1
 800b43e:	2800      	cmp	r0, #0
 800b440:	d004      	beq.n	800b44c <__swsetup_r+0x18>
 800b442:	6a03      	ldr	r3, [r0, #32]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <__swsetup_r+0x18>
 800b448:	f7ff fe8e 	bl	800b168 <__sinit>
 800b44c:	230c      	movs	r3, #12
 800b44e:	5ee2      	ldrsh	r2, [r4, r3]
 800b450:	b293      	uxth	r3, r2
 800b452:	0711      	lsls	r1, r2, #28
 800b454:	d423      	bmi.n	800b49e <__swsetup_r+0x6a>
 800b456:	06d9      	lsls	r1, r3, #27
 800b458:	d407      	bmi.n	800b46a <__swsetup_r+0x36>
 800b45a:	2309      	movs	r3, #9
 800b45c:	2001      	movs	r0, #1
 800b45e:	602b      	str	r3, [r5, #0]
 800b460:	3337      	adds	r3, #55	; 0x37
 800b462:	4313      	orrs	r3, r2
 800b464:	81a3      	strh	r3, [r4, #12]
 800b466:	4240      	negs	r0, r0
 800b468:	bd70      	pop	{r4, r5, r6, pc}
 800b46a:	075b      	lsls	r3, r3, #29
 800b46c:	d513      	bpl.n	800b496 <__swsetup_r+0x62>
 800b46e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b470:	2900      	cmp	r1, #0
 800b472:	d008      	beq.n	800b486 <__swsetup_r+0x52>
 800b474:	0023      	movs	r3, r4
 800b476:	3344      	adds	r3, #68	; 0x44
 800b478:	4299      	cmp	r1, r3
 800b47a:	d002      	beq.n	800b482 <__swsetup_r+0x4e>
 800b47c:	0028      	movs	r0, r5
 800b47e:	f001 f811 	bl	800c4a4 <_free_r>
 800b482:	2300      	movs	r3, #0
 800b484:	6363      	str	r3, [r4, #52]	; 0x34
 800b486:	2224      	movs	r2, #36	; 0x24
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	4393      	bics	r3, r2
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	2300      	movs	r3, #0
 800b490:	6063      	str	r3, [r4, #4]
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	2308      	movs	r3, #8
 800b498:	89a2      	ldrh	r2, [r4, #12]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10b      	bne.n	800b4bc <__swsetup_r+0x88>
 800b4a4:	21a0      	movs	r1, #160	; 0xa0
 800b4a6:	2280      	movs	r2, #128	; 0x80
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	0089      	lsls	r1, r1, #2
 800b4ac:	0092      	lsls	r2, r2, #2
 800b4ae:	400b      	ands	r3, r1
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d003      	beq.n	800b4bc <__swsetup_r+0x88>
 800b4b4:	0021      	movs	r1, r4
 800b4b6:	0028      	movs	r0, r5
 800b4b8:	f002 fcc6 	bl	800de48 <__smakebuf_r>
 800b4bc:	220c      	movs	r2, #12
 800b4be:	5ea3      	ldrsh	r3, [r4, r2]
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	001a      	movs	r2, r3
 800b4c4:	b299      	uxth	r1, r3
 800b4c6:	4002      	ands	r2, r0
 800b4c8:	4203      	tst	r3, r0
 800b4ca:	d00f      	beq.n	800b4ec <__swsetup_r+0xb8>
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	60a2      	str	r2, [r4, #8]
 800b4d0:	6962      	ldr	r2, [r4, #20]
 800b4d2:	4252      	negs	r2, r2
 800b4d4:	61a2      	str	r2, [r4, #24]
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	6922      	ldr	r2, [r4, #16]
 800b4da:	4282      	cmp	r2, r0
 800b4dc:	d1c4      	bne.n	800b468 <__swsetup_r+0x34>
 800b4de:	0609      	lsls	r1, r1, #24
 800b4e0:	d5c2      	bpl.n	800b468 <__swsetup_r+0x34>
 800b4e2:	2240      	movs	r2, #64	; 0x40
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	3801      	subs	r0, #1
 800b4ea:	e7bd      	b.n	800b468 <__swsetup_r+0x34>
 800b4ec:	0788      	lsls	r0, r1, #30
 800b4ee:	d400      	bmi.n	800b4f2 <__swsetup_r+0xbe>
 800b4f0:	6962      	ldr	r2, [r4, #20]
 800b4f2:	60a2      	str	r2, [r4, #8]
 800b4f4:	e7ef      	b.n	800b4d6 <__swsetup_r+0xa2>
 800b4f6:	46c0      	nop			; (mov r8, r8)
 800b4f8:	2000024c 	.word	0x2000024c

0800b4fc <memset>:
 800b4fc:	0003      	movs	r3, r0
 800b4fe:	1882      	adds	r2, r0, r2
 800b500:	4293      	cmp	r3, r2
 800b502:	d100      	bne.n	800b506 <memset+0xa>
 800b504:	4770      	bx	lr
 800b506:	7019      	strb	r1, [r3, #0]
 800b508:	3301      	adds	r3, #1
 800b50a:	e7f9      	b.n	800b500 <memset+0x4>

0800b50c <strncmp>:
 800b50c:	b530      	push	{r4, r5, lr}
 800b50e:	0005      	movs	r5, r0
 800b510:	1e10      	subs	r0, r2, #0
 800b512:	d00b      	beq.n	800b52c <strncmp+0x20>
 800b514:	2400      	movs	r4, #0
 800b516:	3a01      	subs	r2, #1
 800b518:	5d2b      	ldrb	r3, [r5, r4]
 800b51a:	5d08      	ldrb	r0, [r1, r4]
 800b51c:	4283      	cmp	r3, r0
 800b51e:	d104      	bne.n	800b52a <strncmp+0x1e>
 800b520:	42a2      	cmp	r2, r4
 800b522:	d002      	beq.n	800b52a <strncmp+0x1e>
 800b524:	3401      	adds	r4, #1
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1f6      	bne.n	800b518 <strncmp+0xc>
 800b52a:	1a18      	subs	r0, r3, r0
 800b52c:	bd30      	pop	{r4, r5, pc}
	...

0800b530 <strtok>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	4b16      	ldr	r3, [pc, #88]	; (800b58c <strtok+0x5c>)
 800b534:	0005      	movs	r5, r0
 800b536:	681f      	ldr	r7, [r3, #0]
 800b538:	000e      	movs	r6, r1
 800b53a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800b53c:	2c00      	cmp	r4, #0
 800b53e:	d11d      	bne.n	800b57c <strtok+0x4c>
 800b540:	2050      	movs	r0, #80	; 0x50
 800b542:	f001 fb55 	bl	800cbf0 <malloc>
 800b546:	1e02      	subs	r2, r0, #0
 800b548:	6478      	str	r0, [r7, #68]	; 0x44
 800b54a:	d104      	bne.n	800b556 <strtok+0x26>
 800b54c:	215b      	movs	r1, #91	; 0x5b
 800b54e:	4b10      	ldr	r3, [pc, #64]	; (800b590 <strtok+0x60>)
 800b550:	4810      	ldr	r0, [pc, #64]	; (800b594 <strtok+0x64>)
 800b552:	f000 f8eb 	bl	800b72c <__assert_func>
 800b556:	6004      	str	r4, [r0, #0]
 800b558:	6044      	str	r4, [r0, #4]
 800b55a:	6084      	str	r4, [r0, #8]
 800b55c:	60c4      	str	r4, [r0, #12]
 800b55e:	6104      	str	r4, [r0, #16]
 800b560:	6144      	str	r4, [r0, #20]
 800b562:	6184      	str	r4, [r0, #24]
 800b564:	6284      	str	r4, [r0, #40]	; 0x28
 800b566:	62c4      	str	r4, [r0, #44]	; 0x2c
 800b568:	6304      	str	r4, [r0, #48]	; 0x30
 800b56a:	6344      	str	r4, [r0, #52]	; 0x34
 800b56c:	6384      	str	r4, [r0, #56]	; 0x38
 800b56e:	63c4      	str	r4, [r0, #60]	; 0x3c
 800b570:	6404      	str	r4, [r0, #64]	; 0x40
 800b572:	6444      	str	r4, [r0, #68]	; 0x44
 800b574:	6484      	str	r4, [r0, #72]	; 0x48
 800b576:	64c4      	str	r4, [r0, #76]	; 0x4c
 800b578:	7704      	strb	r4, [r0, #28]
 800b57a:	6244      	str	r4, [r0, #36]	; 0x24
 800b57c:	0031      	movs	r1, r6
 800b57e:	0028      	movs	r0, r5
 800b580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b582:	2301      	movs	r3, #1
 800b584:	f000 f808 	bl	800b598 <__strtok_r>
 800b588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b58a:	46c0      	nop			; (mov r8, r8)
 800b58c:	2000024c 	.word	0x2000024c
 800b590:	0800e44c 	.word	0x0800e44c
 800b594:	0800e463 	.word	0x0800e463

0800b598 <__strtok_r>:
 800b598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d102      	bne.n	800b5a4 <__strtok_r+0xc>
 800b59e:	6810      	ldr	r0, [r2, #0]
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d013      	beq.n	800b5cc <__strtok_r+0x34>
 800b5a4:	0004      	movs	r4, r0
 800b5a6:	0020      	movs	r0, r4
 800b5a8:	000e      	movs	r6, r1
 800b5aa:	7805      	ldrb	r5, [r0, #0]
 800b5ac:	3401      	adds	r4, #1
 800b5ae:	7837      	ldrb	r7, [r6, #0]
 800b5b0:	2f00      	cmp	r7, #0
 800b5b2:	d104      	bne.n	800b5be <__strtok_r+0x26>
 800b5b4:	2d00      	cmp	r5, #0
 800b5b6:	d10f      	bne.n	800b5d8 <__strtok_r+0x40>
 800b5b8:	0028      	movs	r0, r5
 800b5ba:	6015      	str	r5, [r2, #0]
 800b5bc:	e006      	b.n	800b5cc <__strtok_r+0x34>
 800b5be:	3601      	adds	r6, #1
 800b5c0:	42bd      	cmp	r5, r7
 800b5c2:	d1f4      	bne.n	800b5ae <__strtok_r+0x16>
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1ee      	bne.n	800b5a6 <__strtok_r+0xe>
 800b5c8:	6014      	str	r4, [r2, #0]
 800b5ca:	7003      	strb	r3, [r0, #0]
 800b5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ce:	002f      	movs	r7, r5
 800b5d0:	e00f      	b.n	800b5f2 <__strtok_r+0x5a>
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	2e00      	cmp	r6, #0
 800b5d6:	d104      	bne.n	800b5e2 <__strtok_r+0x4a>
 800b5d8:	0023      	movs	r3, r4
 800b5da:	3401      	adds	r4, #1
 800b5dc:	781d      	ldrb	r5, [r3, #0]
 800b5de:	0027      	movs	r7, r4
 800b5e0:	000b      	movs	r3, r1
 800b5e2:	781e      	ldrb	r6, [r3, #0]
 800b5e4:	42b5      	cmp	r5, r6
 800b5e6:	d1f4      	bne.n	800b5d2 <__strtok_r+0x3a>
 800b5e8:	2d00      	cmp	r5, #0
 800b5ea:	d0f0      	beq.n	800b5ce <__strtok_r+0x36>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	3c01      	subs	r4, #1
 800b5f0:	7023      	strb	r3, [r4, #0]
 800b5f2:	6017      	str	r7, [r2, #0]
 800b5f4:	e7ea      	b.n	800b5cc <__strtok_r+0x34>
	...

0800b5f8 <_localeconv_r>:
 800b5f8:	4800      	ldr	r0, [pc, #0]	; (800b5fc <_localeconv_r+0x4>)
 800b5fa:	4770      	bx	lr
 800b5fc:	20000184 	.word	0x20000184

0800b600 <_close_r>:
 800b600:	2300      	movs	r3, #0
 800b602:	b570      	push	{r4, r5, r6, lr}
 800b604:	4d06      	ldr	r5, [pc, #24]	; (800b620 <_close_r+0x20>)
 800b606:	0004      	movs	r4, r0
 800b608:	0008      	movs	r0, r1
 800b60a:	602b      	str	r3, [r5, #0]
 800b60c:	f7f7 ffe3 	bl	80035d6 <_close>
 800b610:	1c43      	adds	r3, r0, #1
 800b612:	d103      	bne.n	800b61c <_close_r+0x1c>
 800b614:	682b      	ldr	r3, [r5, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d000      	beq.n	800b61c <_close_r+0x1c>
 800b61a:	6023      	str	r3, [r4, #0]
 800b61c:	bd70      	pop	{r4, r5, r6, pc}
 800b61e:	46c0      	nop			; (mov r8, r8)
 800b620:	200007b8 	.word	0x200007b8

0800b624 <_lseek_r>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	0004      	movs	r4, r0
 800b628:	0008      	movs	r0, r1
 800b62a:	0011      	movs	r1, r2
 800b62c:	001a      	movs	r2, r3
 800b62e:	2300      	movs	r3, #0
 800b630:	4d05      	ldr	r5, [pc, #20]	; (800b648 <_lseek_r+0x24>)
 800b632:	602b      	str	r3, [r5, #0]
 800b634:	f7f7 fff0 	bl	8003618 <_lseek>
 800b638:	1c43      	adds	r3, r0, #1
 800b63a:	d103      	bne.n	800b644 <_lseek_r+0x20>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d000      	beq.n	800b644 <_lseek_r+0x20>
 800b642:	6023      	str	r3, [r4, #0]
 800b644:	bd70      	pop	{r4, r5, r6, pc}
 800b646:	46c0      	nop			; (mov r8, r8)
 800b648:	200007b8 	.word	0x200007b8

0800b64c <_read_r>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	0004      	movs	r4, r0
 800b650:	0008      	movs	r0, r1
 800b652:	0011      	movs	r1, r2
 800b654:	001a      	movs	r2, r3
 800b656:	2300      	movs	r3, #0
 800b658:	4d05      	ldr	r5, [pc, #20]	; (800b670 <_read_r+0x24>)
 800b65a:	602b      	str	r3, [r5, #0]
 800b65c:	f7f7 ff82 	bl	8003564 <_read>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d103      	bne.n	800b66c <_read_r+0x20>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d000      	beq.n	800b66c <_read_r+0x20>
 800b66a:	6023      	str	r3, [r4, #0]
 800b66c:	bd70      	pop	{r4, r5, r6, pc}
 800b66e:	46c0      	nop			; (mov r8, r8)
 800b670:	200007b8 	.word	0x200007b8

0800b674 <_write_r>:
 800b674:	b570      	push	{r4, r5, r6, lr}
 800b676:	0004      	movs	r4, r0
 800b678:	0008      	movs	r0, r1
 800b67a:	0011      	movs	r1, r2
 800b67c:	001a      	movs	r2, r3
 800b67e:	2300      	movs	r3, #0
 800b680:	4d05      	ldr	r5, [pc, #20]	; (800b698 <_write_r+0x24>)
 800b682:	602b      	str	r3, [r5, #0]
 800b684:	f7f7 ff8b 	bl	800359e <_write>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d103      	bne.n	800b694 <_write_r+0x20>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d000      	beq.n	800b694 <_write_r+0x20>
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	bd70      	pop	{r4, r5, r6, pc}
 800b696:	46c0      	nop			; (mov r8, r8)
 800b698:	200007b8 	.word	0x200007b8

0800b69c <__errno>:
 800b69c:	4b01      	ldr	r3, [pc, #4]	; (800b6a4 <__errno+0x8>)
 800b69e:	6818      	ldr	r0, [r3, #0]
 800b6a0:	4770      	bx	lr
 800b6a2:	46c0      	nop			; (mov r8, r8)
 800b6a4:	2000024c 	.word	0x2000024c

0800b6a8 <__libc_init_array>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	2600      	movs	r6, #0
 800b6ac:	4c0c      	ldr	r4, [pc, #48]	; (800b6e0 <__libc_init_array+0x38>)
 800b6ae:	4d0d      	ldr	r5, [pc, #52]	; (800b6e4 <__libc_init_array+0x3c>)
 800b6b0:	1b64      	subs	r4, r4, r5
 800b6b2:	10a4      	asrs	r4, r4, #2
 800b6b4:	42a6      	cmp	r6, r4
 800b6b6:	d109      	bne.n	800b6cc <__libc_init_array+0x24>
 800b6b8:	2600      	movs	r6, #0
 800b6ba:	f002 fd03 	bl	800e0c4 <_init>
 800b6be:	4c0a      	ldr	r4, [pc, #40]	; (800b6e8 <__libc_init_array+0x40>)
 800b6c0:	4d0a      	ldr	r5, [pc, #40]	; (800b6ec <__libc_init_array+0x44>)
 800b6c2:	1b64      	subs	r4, r4, r5
 800b6c4:	10a4      	asrs	r4, r4, #2
 800b6c6:	42a6      	cmp	r6, r4
 800b6c8:	d105      	bne.n	800b6d6 <__libc_init_array+0x2e>
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	00b3      	lsls	r3, r6, #2
 800b6ce:	58eb      	ldr	r3, [r5, r3]
 800b6d0:	4798      	blx	r3
 800b6d2:	3601      	adds	r6, #1
 800b6d4:	e7ee      	b.n	800b6b4 <__libc_init_array+0xc>
 800b6d6:	00b3      	lsls	r3, r6, #2
 800b6d8:	58eb      	ldr	r3, [r5, r3]
 800b6da:	4798      	blx	r3
 800b6dc:	3601      	adds	r6, #1
 800b6de:	e7f2      	b.n	800b6c6 <__libc_init_array+0x1e>
 800b6e0:	0800e840 	.word	0x0800e840
 800b6e4:	0800e840 	.word	0x0800e840
 800b6e8:	0800e844 	.word	0x0800e844
 800b6ec:	0800e840 	.word	0x0800e840

0800b6f0 <__retarget_lock_init_recursive>:
 800b6f0:	4770      	bx	lr

0800b6f2 <__retarget_lock_acquire_recursive>:
 800b6f2:	4770      	bx	lr

0800b6f4 <__retarget_lock_release_recursive>:
 800b6f4:	4770      	bx	lr

0800b6f6 <memchr>:
 800b6f6:	b2c9      	uxtb	r1, r1
 800b6f8:	1882      	adds	r2, r0, r2
 800b6fa:	4290      	cmp	r0, r2
 800b6fc:	d101      	bne.n	800b702 <memchr+0xc>
 800b6fe:	2000      	movs	r0, #0
 800b700:	4770      	bx	lr
 800b702:	7803      	ldrb	r3, [r0, #0]
 800b704:	428b      	cmp	r3, r1
 800b706:	d0fb      	beq.n	800b700 <memchr+0xa>
 800b708:	3001      	adds	r0, #1
 800b70a:	e7f6      	b.n	800b6fa <memchr+0x4>

0800b70c <memcpy>:
 800b70c:	2300      	movs	r3, #0
 800b70e:	b510      	push	{r4, lr}
 800b710:	429a      	cmp	r2, r3
 800b712:	d100      	bne.n	800b716 <memcpy+0xa>
 800b714:	bd10      	pop	{r4, pc}
 800b716:	5ccc      	ldrb	r4, [r1, r3]
 800b718:	54c4      	strb	r4, [r0, r3]
 800b71a:	3301      	adds	r3, #1
 800b71c:	e7f8      	b.n	800b710 <memcpy+0x4>
	...

0800b720 <nan>:
 800b720:	2000      	movs	r0, #0
 800b722:	4901      	ldr	r1, [pc, #4]	; (800b728 <nan+0x8>)
 800b724:	4770      	bx	lr
 800b726:	46c0      	nop			; (mov r8, r8)
 800b728:	7ff80000 	.word	0x7ff80000

0800b72c <__assert_func>:
 800b72c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b72e:	0014      	movs	r4, r2
 800b730:	001a      	movs	r2, r3
 800b732:	4b09      	ldr	r3, [pc, #36]	; (800b758 <__assert_func+0x2c>)
 800b734:	0005      	movs	r5, r0
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	000e      	movs	r6, r1
 800b73a:	68d8      	ldr	r0, [r3, #12]
 800b73c:	4b07      	ldr	r3, [pc, #28]	; (800b75c <__assert_func+0x30>)
 800b73e:	2c00      	cmp	r4, #0
 800b740:	d101      	bne.n	800b746 <__assert_func+0x1a>
 800b742:	4b07      	ldr	r3, [pc, #28]	; (800b760 <__assert_func+0x34>)
 800b744:	001c      	movs	r4, r3
 800b746:	4907      	ldr	r1, [pc, #28]	; (800b764 <__assert_func+0x38>)
 800b748:	9301      	str	r3, [sp, #4]
 800b74a:	9402      	str	r4, [sp, #8]
 800b74c:	002b      	movs	r3, r5
 800b74e:	9600      	str	r6, [sp, #0]
 800b750:	f002 fb42 	bl	800ddd8 <fiprintf>
 800b754:	f002 fc00 	bl	800df58 <abort>
 800b758:	2000024c 	.word	0x2000024c
 800b75c:	0800e4c5 	.word	0x0800e4c5
 800b760:	0800e500 	.word	0x0800e500
 800b764:	0800e4d2 	.word	0x0800e4d2

0800b768 <quorem>:
 800b768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b76a:	6902      	ldr	r2, [r0, #16]
 800b76c:	690b      	ldr	r3, [r1, #16]
 800b76e:	b089      	sub	sp, #36	; 0x24
 800b770:	0007      	movs	r7, r0
 800b772:	9104      	str	r1, [sp, #16]
 800b774:	2000      	movs	r0, #0
 800b776:	429a      	cmp	r2, r3
 800b778:	db69      	blt.n	800b84e <quorem+0xe6>
 800b77a:	3b01      	subs	r3, #1
 800b77c:	009c      	lsls	r4, r3, #2
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	000b      	movs	r3, r1
 800b782:	3314      	adds	r3, #20
 800b784:	9306      	str	r3, [sp, #24]
 800b786:	191b      	adds	r3, r3, r4
 800b788:	9305      	str	r3, [sp, #20]
 800b78a:	003b      	movs	r3, r7
 800b78c:	3314      	adds	r3, #20
 800b78e:	9303      	str	r3, [sp, #12]
 800b790:	191c      	adds	r4, r3, r4
 800b792:	9b05      	ldr	r3, [sp, #20]
 800b794:	6826      	ldr	r6, [r4, #0]
 800b796:	681d      	ldr	r5, [r3, #0]
 800b798:	0030      	movs	r0, r6
 800b79a:	3501      	adds	r5, #1
 800b79c:	0029      	movs	r1, r5
 800b79e:	f7f4 fcd5 	bl	800014c <__udivsi3>
 800b7a2:	9002      	str	r0, [sp, #8]
 800b7a4:	42ae      	cmp	r6, r5
 800b7a6:	d329      	bcc.n	800b7fc <quorem+0x94>
 800b7a8:	9b06      	ldr	r3, [sp, #24]
 800b7aa:	2600      	movs	r6, #0
 800b7ac:	469c      	mov	ip, r3
 800b7ae:	9d03      	ldr	r5, [sp, #12]
 800b7b0:	9606      	str	r6, [sp, #24]
 800b7b2:	4662      	mov	r2, ip
 800b7b4:	ca08      	ldmia	r2!, {r3}
 800b7b6:	6828      	ldr	r0, [r5, #0]
 800b7b8:	4694      	mov	ip, r2
 800b7ba:	9a02      	ldr	r2, [sp, #8]
 800b7bc:	b299      	uxth	r1, r3
 800b7be:	4351      	muls	r1, r2
 800b7c0:	0c1b      	lsrs	r3, r3, #16
 800b7c2:	4353      	muls	r3, r2
 800b7c4:	1989      	adds	r1, r1, r6
 800b7c6:	0c0a      	lsrs	r2, r1, #16
 800b7c8:	189b      	adds	r3, r3, r2
 800b7ca:	9307      	str	r3, [sp, #28]
 800b7cc:	0c1e      	lsrs	r6, r3, #16
 800b7ce:	9b06      	ldr	r3, [sp, #24]
 800b7d0:	b282      	uxth	r2, r0
 800b7d2:	18d2      	adds	r2, r2, r3
 800b7d4:	466b      	mov	r3, sp
 800b7d6:	b289      	uxth	r1, r1
 800b7d8:	8b9b      	ldrh	r3, [r3, #28]
 800b7da:	1a52      	subs	r2, r2, r1
 800b7dc:	0c01      	lsrs	r1, r0, #16
 800b7de:	1ac9      	subs	r1, r1, r3
 800b7e0:	1413      	asrs	r3, r2, #16
 800b7e2:	18cb      	adds	r3, r1, r3
 800b7e4:	1419      	asrs	r1, r3, #16
 800b7e6:	b292      	uxth	r2, r2
 800b7e8:	041b      	lsls	r3, r3, #16
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	c508      	stmia	r5!, {r3}
 800b7ee:	9b05      	ldr	r3, [sp, #20]
 800b7f0:	9106      	str	r1, [sp, #24]
 800b7f2:	4563      	cmp	r3, ip
 800b7f4:	d2dd      	bcs.n	800b7b2 <quorem+0x4a>
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d030      	beq.n	800b85e <quorem+0xf6>
 800b7fc:	0038      	movs	r0, r7
 800b7fe:	9904      	ldr	r1, [sp, #16]
 800b800:	f001 fd98 	bl	800d334 <__mcmp>
 800b804:	2800      	cmp	r0, #0
 800b806:	db21      	blt.n	800b84c <quorem+0xe4>
 800b808:	0038      	movs	r0, r7
 800b80a:	2600      	movs	r6, #0
 800b80c:	9b02      	ldr	r3, [sp, #8]
 800b80e:	9c04      	ldr	r4, [sp, #16]
 800b810:	3301      	adds	r3, #1
 800b812:	9302      	str	r3, [sp, #8]
 800b814:	3014      	adds	r0, #20
 800b816:	3414      	adds	r4, #20
 800b818:	6803      	ldr	r3, [r0, #0]
 800b81a:	cc02      	ldmia	r4!, {r1}
 800b81c:	b29d      	uxth	r5, r3
 800b81e:	19ad      	adds	r5, r5, r6
 800b820:	b28a      	uxth	r2, r1
 800b822:	1aaa      	subs	r2, r5, r2
 800b824:	0c09      	lsrs	r1, r1, #16
 800b826:	0c1b      	lsrs	r3, r3, #16
 800b828:	1a5b      	subs	r3, r3, r1
 800b82a:	1411      	asrs	r1, r2, #16
 800b82c:	185b      	adds	r3, r3, r1
 800b82e:	141e      	asrs	r6, r3, #16
 800b830:	b292      	uxth	r2, r2
 800b832:	041b      	lsls	r3, r3, #16
 800b834:	4313      	orrs	r3, r2
 800b836:	c008      	stmia	r0!, {r3}
 800b838:	9b05      	ldr	r3, [sp, #20]
 800b83a:	42a3      	cmp	r3, r4
 800b83c:	d2ec      	bcs.n	800b818 <quorem+0xb0>
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	9a03      	ldr	r2, [sp, #12]
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	18d3      	adds	r3, r2, r3
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	2a00      	cmp	r2, #0
 800b84a:	d015      	beq.n	800b878 <quorem+0x110>
 800b84c:	9802      	ldr	r0, [sp, #8]
 800b84e:	b009      	add	sp, #36	; 0x24
 800b850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d106      	bne.n	800b866 <quorem+0xfe>
 800b858:	9b01      	ldr	r3, [sp, #4]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	9b03      	ldr	r3, [sp, #12]
 800b860:	3c04      	subs	r4, #4
 800b862:	42a3      	cmp	r3, r4
 800b864:	d3f5      	bcc.n	800b852 <quorem+0xea>
 800b866:	9b01      	ldr	r3, [sp, #4]
 800b868:	613b      	str	r3, [r7, #16]
 800b86a:	e7c7      	b.n	800b7fc <quorem+0x94>
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	2a00      	cmp	r2, #0
 800b870:	d106      	bne.n	800b880 <quorem+0x118>
 800b872:	9a01      	ldr	r2, [sp, #4]
 800b874:	3a01      	subs	r2, #1
 800b876:	9201      	str	r2, [sp, #4]
 800b878:	9a03      	ldr	r2, [sp, #12]
 800b87a:	3b04      	subs	r3, #4
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d3f5      	bcc.n	800b86c <quorem+0x104>
 800b880:	9b01      	ldr	r3, [sp, #4]
 800b882:	613b      	str	r3, [r7, #16]
 800b884:	e7e2      	b.n	800b84c <quorem+0xe4>
	...

0800b888 <_dtoa_r>:
 800b888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b88a:	0014      	movs	r4, r2
 800b88c:	001d      	movs	r5, r3
 800b88e:	69c6      	ldr	r6, [r0, #28]
 800b890:	b09d      	sub	sp, #116	; 0x74
 800b892:	9408      	str	r4, [sp, #32]
 800b894:	9509      	str	r5, [sp, #36]	; 0x24
 800b896:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800b898:	9004      	str	r0, [sp, #16]
 800b89a:	2e00      	cmp	r6, #0
 800b89c:	d10f      	bne.n	800b8be <_dtoa_r+0x36>
 800b89e:	2010      	movs	r0, #16
 800b8a0:	f001 f9a6 	bl	800cbf0 <malloc>
 800b8a4:	9b04      	ldr	r3, [sp, #16]
 800b8a6:	1e02      	subs	r2, r0, #0
 800b8a8:	61d8      	str	r0, [r3, #28]
 800b8aa:	d104      	bne.n	800b8b6 <_dtoa_r+0x2e>
 800b8ac:	21ef      	movs	r1, #239	; 0xef
 800b8ae:	4bc6      	ldr	r3, [pc, #792]	; (800bbc8 <_dtoa_r+0x340>)
 800b8b0:	48c6      	ldr	r0, [pc, #792]	; (800bbcc <_dtoa_r+0x344>)
 800b8b2:	f7ff ff3b 	bl	800b72c <__assert_func>
 800b8b6:	6046      	str	r6, [r0, #4]
 800b8b8:	6086      	str	r6, [r0, #8]
 800b8ba:	6006      	str	r6, [r0, #0]
 800b8bc:	60c6      	str	r6, [r0, #12]
 800b8be:	9b04      	ldr	r3, [sp, #16]
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	6819      	ldr	r1, [r3, #0]
 800b8c4:	2900      	cmp	r1, #0
 800b8c6:	d00b      	beq.n	800b8e0 <_dtoa_r+0x58>
 800b8c8:	685a      	ldr	r2, [r3, #4]
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	4093      	lsls	r3, r2
 800b8ce:	604a      	str	r2, [r1, #4]
 800b8d0:	608b      	str	r3, [r1, #8]
 800b8d2:	9804      	ldr	r0, [sp, #16]
 800b8d4:	f001 faa0 	bl	800ce18 <_Bfree>
 800b8d8:	2200      	movs	r2, #0
 800b8da:	9b04      	ldr	r3, [sp, #16]
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	601a      	str	r2, [r3, #0]
 800b8e0:	2d00      	cmp	r5, #0
 800b8e2:	da1e      	bge.n	800b922 <_dtoa_r+0x9a>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	006b      	lsls	r3, r5, #1
 800b8ea:	085b      	lsrs	r3, r3, #1
 800b8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b8f0:	4bb7      	ldr	r3, [pc, #732]	; (800bbd0 <_dtoa_r+0x348>)
 800b8f2:	4ab7      	ldr	r2, [pc, #732]	; (800bbd0 <_dtoa_r+0x348>)
 800b8f4:	403b      	ands	r3, r7
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d116      	bne.n	800b928 <_dtoa_r+0xa0>
 800b8fa:	4bb6      	ldr	r3, [pc, #728]	; (800bbd4 <_dtoa_r+0x34c>)
 800b8fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b8fe:	6013      	str	r3, [r2, #0]
 800b900:	033b      	lsls	r3, r7, #12
 800b902:	0b1b      	lsrs	r3, r3, #12
 800b904:	4323      	orrs	r3, r4
 800b906:	d101      	bne.n	800b90c <_dtoa_r+0x84>
 800b908:	f000 fdb5 	bl	800c476 <_dtoa_r+0xbee>
 800b90c:	4bb2      	ldr	r3, [pc, #712]	; (800bbd8 <_dtoa_r+0x350>)
 800b90e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b910:	9306      	str	r3, [sp, #24]
 800b912:	2a00      	cmp	r2, #0
 800b914:	d002      	beq.n	800b91c <_dtoa_r+0x94>
 800b916:	4bb1      	ldr	r3, [pc, #708]	; (800bbdc <_dtoa_r+0x354>)
 800b918:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b91a:	6013      	str	r3, [r2, #0]
 800b91c:	9806      	ldr	r0, [sp, #24]
 800b91e:	b01d      	add	sp, #116	; 0x74
 800b920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b922:	2300      	movs	r3, #0
 800b924:	603b      	str	r3, [r7, #0]
 800b926:	e7e2      	b.n	800b8ee <_dtoa_r+0x66>
 800b928:	9a08      	ldr	r2, [sp, #32]
 800b92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b92c:	9210      	str	r2, [sp, #64]	; 0x40
 800b92e:	9311      	str	r3, [sp, #68]	; 0x44
 800b930:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b932:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b934:	2200      	movs	r2, #0
 800b936:	2300      	movs	r3, #0
 800b938:	f7f4 fd8e 	bl	8000458 <__aeabi_dcmpeq>
 800b93c:	1e06      	subs	r6, r0, #0
 800b93e:	d009      	beq.n	800b954 <_dtoa_r+0xcc>
 800b940:	2301      	movs	r3, #1
 800b942:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b944:	6013      	str	r3, [r2, #0]
 800b946:	4ba6      	ldr	r3, [pc, #664]	; (800bbe0 <_dtoa_r+0x358>)
 800b948:	9306      	str	r3, [sp, #24]
 800b94a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d0e5      	beq.n	800b91c <_dtoa_r+0x94>
 800b950:	4ba4      	ldr	r3, [pc, #656]	; (800bbe4 <_dtoa_r+0x35c>)
 800b952:	e7e1      	b.n	800b918 <_dtoa_r+0x90>
 800b954:	ab1a      	add	r3, sp, #104	; 0x68
 800b956:	9301      	str	r3, [sp, #4]
 800b958:	ab1b      	add	r3, sp, #108	; 0x6c
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	9804      	ldr	r0, [sp, #16]
 800b95e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b962:	f001 fe03 	bl	800d56c <__d2b>
 800b966:	007a      	lsls	r2, r7, #1
 800b968:	9005      	str	r0, [sp, #20]
 800b96a:	0d52      	lsrs	r2, r2, #21
 800b96c:	d100      	bne.n	800b970 <_dtoa_r+0xe8>
 800b96e:	e07b      	b.n	800ba68 <_dtoa_r+0x1e0>
 800b970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b972:	9617      	str	r6, [sp, #92]	; 0x5c
 800b974:	0319      	lsls	r1, r3, #12
 800b976:	4b9c      	ldr	r3, [pc, #624]	; (800bbe8 <_dtoa_r+0x360>)
 800b978:	0b09      	lsrs	r1, r1, #12
 800b97a:	430b      	orrs	r3, r1
 800b97c:	499b      	ldr	r1, [pc, #620]	; (800bbec <_dtoa_r+0x364>)
 800b97e:	1857      	adds	r7, r2, r1
 800b980:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b982:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b984:	0019      	movs	r1, r3
 800b986:	2200      	movs	r2, #0
 800b988:	4b99      	ldr	r3, [pc, #612]	; (800bbf0 <_dtoa_r+0x368>)
 800b98a:	f7f6 ff23 	bl	80027d4 <__aeabi_dsub>
 800b98e:	4a99      	ldr	r2, [pc, #612]	; (800bbf4 <_dtoa_r+0x36c>)
 800b990:	4b99      	ldr	r3, [pc, #612]	; (800bbf8 <_dtoa_r+0x370>)
 800b992:	f7f6 fc5d 	bl	8002250 <__aeabi_dmul>
 800b996:	4a99      	ldr	r2, [pc, #612]	; (800bbfc <_dtoa_r+0x374>)
 800b998:	4b99      	ldr	r3, [pc, #612]	; (800bc00 <_dtoa_r+0x378>)
 800b99a:	f7f5 fcff 	bl	800139c <__aeabi_dadd>
 800b99e:	0004      	movs	r4, r0
 800b9a0:	0038      	movs	r0, r7
 800b9a2:	000d      	movs	r5, r1
 800b9a4:	f7f7 faec 	bl	8002f80 <__aeabi_i2d>
 800b9a8:	4a96      	ldr	r2, [pc, #600]	; (800bc04 <_dtoa_r+0x37c>)
 800b9aa:	4b97      	ldr	r3, [pc, #604]	; (800bc08 <_dtoa_r+0x380>)
 800b9ac:	f7f6 fc50 	bl	8002250 <__aeabi_dmul>
 800b9b0:	0002      	movs	r2, r0
 800b9b2:	000b      	movs	r3, r1
 800b9b4:	0020      	movs	r0, r4
 800b9b6:	0029      	movs	r1, r5
 800b9b8:	f7f5 fcf0 	bl	800139c <__aeabi_dadd>
 800b9bc:	0004      	movs	r4, r0
 800b9be:	000d      	movs	r5, r1
 800b9c0:	f7f7 faa8 	bl	8002f14 <__aeabi_d2iz>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	9003      	str	r0, [sp, #12]
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	0020      	movs	r0, r4
 800b9cc:	0029      	movs	r1, r5
 800b9ce:	f7f4 fd49 	bl	8000464 <__aeabi_dcmplt>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d00b      	beq.n	800b9ee <_dtoa_r+0x166>
 800b9d6:	9803      	ldr	r0, [sp, #12]
 800b9d8:	f7f7 fad2 	bl	8002f80 <__aeabi_i2d>
 800b9dc:	002b      	movs	r3, r5
 800b9de:	0022      	movs	r2, r4
 800b9e0:	f7f4 fd3a 	bl	8000458 <__aeabi_dcmpeq>
 800b9e4:	4243      	negs	r3, r0
 800b9e6:	4158      	adcs	r0, r3
 800b9e8:	9b03      	ldr	r3, [sp, #12]
 800b9ea:	1a1b      	subs	r3, r3, r0
 800b9ec:	9303      	str	r3, [sp, #12]
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	9316      	str	r3, [sp, #88]	; 0x58
 800b9f2:	9b03      	ldr	r3, [sp, #12]
 800b9f4:	2b16      	cmp	r3, #22
 800b9f6:	d810      	bhi.n	800ba1a <_dtoa_r+0x192>
 800b9f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b9fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b9fc:	9a03      	ldr	r2, [sp, #12]
 800b9fe:	4b83      	ldr	r3, [pc, #524]	; (800bc0c <_dtoa_r+0x384>)
 800ba00:	00d2      	lsls	r2, r2, #3
 800ba02:	189b      	adds	r3, r3, r2
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	f7f4 fd2c 	bl	8000464 <__aeabi_dcmplt>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d047      	beq.n	800baa0 <_dtoa_r+0x218>
 800ba10:	9b03      	ldr	r3, [sp, #12]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	9303      	str	r3, [sp, #12]
 800ba16:	2300      	movs	r3, #0
 800ba18:	9316      	str	r3, [sp, #88]	; 0x58
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ba1e:	920a      	str	r2, [sp, #40]	; 0x28
 800ba20:	1bdb      	subs	r3, r3, r7
 800ba22:	1e5a      	subs	r2, r3, #1
 800ba24:	d53e      	bpl.n	800baa4 <_dtoa_r+0x21c>
 800ba26:	2201      	movs	r2, #1
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	930c      	str	r3, [sp, #48]	; 0x30
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	db38      	blt.n	800baa8 <_dtoa_r+0x220>
 800ba36:	9a03      	ldr	r2, [sp, #12]
 800ba38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba3a:	4694      	mov	ip, r2
 800ba3c:	4463      	add	r3, ip
 800ba3e:	930c      	str	r3, [sp, #48]	; 0x30
 800ba40:	2300      	movs	r3, #0
 800ba42:	9213      	str	r2, [sp, #76]	; 0x4c
 800ba44:	930d      	str	r3, [sp, #52]	; 0x34
 800ba46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba48:	2401      	movs	r4, #1
 800ba4a:	2b09      	cmp	r3, #9
 800ba4c:	d867      	bhi.n	800bb1e <_dtoa_r+0x296>
 800ba4e:	2b05      	cmp	r3, #5
 800ba50:	dd02      	ble.n	800ba58 <_dtoa_r+0x1d0>
 800ba52:	2400      	movs	r4, #0
 800ba54:	3b04      	subs	r3, #4
 800ba56:	9322      	str	r3, [sp, #136]	; 0x88
 800ba58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba5a:	1e98      	subs	r0, r3, #2
 800ba5c:	2803      	cmp	r0, #3
 800ba5e:	d867      	bhi.n	800bb30 <_dtoa_r+0x2a8>
 800ba60:	f7f4 fb60 	bl	8000124 <__gnu_thumb1_case_uqi>
 800ba64:	5b383a2b 	.word	0x5b383a2b
 800ba68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba6a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ba6c:	18f6      	adds	r6, r6, r3
 800ba6e:	4b68      	ldr	r3, [pc, #416]	; (800bc10 <_dtoa_r+0x388>)
 800ba70:	18f2      	adds	r2, r6, r3
 800ba72:	2a20      	cmp	r2, #32
 800ba74:	dd0f      	ble.n	800ba96 <_dtoa_r+0x20e>
 800ba76:	2340      	movs	r3, #64	; 0x40
 800ba78:	1a9b      	subs	r3, r3, r2
 800ba7a:	409f      	lsls	r7, r3
 800ba7c:	4b65      	ldr	r3, [pc, #404]	; (800bc14 <_dtoa_r+0x38c>)
 800ba7e:	0038      	movs	r0, r7
 800ba80:	18f3      	adds	r3, r6, r3
 800ba82:	40dc      	lsrs	r4, r3
 800ba84:	4320      	orrs	r0, r4
 800ba86:	f7f7 faab 	bl	8002fe0 <__aeabi_ui2d>
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	4b62      	ldr	r3, [pc, #392]	; (800bc18 <_dtoa_r+0x390>)
 800ba8e:	1e77      	subs	r7, r6, #1
 800ba90:	18cb      	adds	r3, r1, r3
 800ba92:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba94:	e776      	b.n	800b984 <_dtoa_r+0xfc>
 800ba96:	2320      	movs	r3, #32
 800ba98:	0020      	movs	r0, r4
 800ba9a:	1a9b      	subs	r3, r3, r2
 800ba9c:	4098      	lsls	r0, r3
 800ba9e:	e7f2      	b.n	800ba86 <_dtoa_r+0x1fe>
 800baa0:	9016      	str	r0, [sp, #88]	; 0x58
 800baa2:	e7ba      	b.n	800ba1a <_dtoa_r+0x192>
 800baa4:	920c      	str	r2, [sp, #48]	; 0x30
 800baa6:	e7c3      	b.n	800ba30 <_dtoa_r+0x1a8>
 800baa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baaa:	9a03      	ldr	r2, [sp, #12]
 800baac:	1a9b      	subs	r3, r3, r2
 800baae:	930a      	str	r3, [sp, #40]	; 0x28
 800bab0:	4253      	negs	r3, r2
 800bab2:	930d      	str	r3, [sp, #52]	; 0x34
 800bab4:	2300      	movs	r3, #0
 800bab6:	9313      	str	r3, [sp, #76]	; 0x4c
 800bab8:	e7c5      	b.n	800ba46 <_dtoa_r+0x1be>
 800baba:	2300      	movs	r3, #0
 800babc:	930f      	str	r3, [sp, #60]	; 0x3c
 800babe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bac0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bac2:	9307      	str	r3, [sp, #28]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	dc13      	bgt.n	800baf0 <_dtoa_r+0x268>
 800bac8:	2301      	movs	r3, #1
 800baca:	001a      	movs	r2, r3
 800bacc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bace:	9307      	str	r3, [sp, #28]
 800bad0:	9223      	str	r2, [sp, #140]	; 0x8c
 800bad2:	e00d      	b.n	800baf0 <_dtoa_r+0x268>
 800bad4:	2301      	movs	r3, #1
 800bad6:	e7f1      	b.n	800babc <_dtoa_r+0x234>
 800bad8:	2300      	movs	r3, #0
 800bada:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800badc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bade:	4694      	mov	ip, r2
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	4463      	add	r3, ip
 800bae4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bae6:	3301      	adds	r3, #1
 800bae8:	9307      	str	r3, [sp, #28]
 800baea:	2b00      	cmp	r3, #0
 800baec:	dc00      	bgt.n	800baf0 <_dtoa_r+0x268>
 800baee:	2301      	movs	r3, #1
 800baf0:	9a04      	ldr	r2, [sp, #16]
 800baf2:	2100      	movs	r1, #0
 800baf4:	69d0      	ldr	r0, [r2, #28]
 800baf6:	2204      	movs	r2, #4
 800baf8:	0015      	movs	r5, r2
 800bafa:	3514      	adds	r5, #20
 800bafc:	429d      	cmp	r5, r3
 800bafe:	d91b      	bls.n	800bb38 <_dtoa_r+0x2b0>
 800bb00:	6041      	str	r1, [r0, #4]
 800bb02:	9804      	ldr	r0, [sp, #16]
 800bb04:	f001 f944 	bl	800cd90 <_Balloc>
 800bb08:	9006      	str	r0, [sp, #24]
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d117      	bne.n	800bb3e <_dtoa_r+0x2b6>
 800bb0e:	21b0      	movs	r1, #176	; 0xb0
 800bb10:	4b42      	ldr	r3, [pc, #264]	; (800bc1c <_dtoa_r+0x394>)
 800bb12:	482e      	ldr	r0, [pc, #184]	; (800bbcc <_dtoa_r+0x344>)
 800bb14:	9a06      	ldr	r2, [sp, #24]
 800bb16:	31ff      	adds	r1, #255	; 0xff
 800bb18:	e6cb      	b.n	800b8b2 <_dtoa_r+0x2a>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e7dd      	b.n	800bada <_dtoa_r+0x252>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	940f      	str	r4, [sp, #60]	; 0x3c
 800bb22:	9322      	str	r3, [sp, #136]	; 0x88
 800bb24:	3b01      	subs	r3, #1
 800bb26:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb28:	9307      	str	r3, [sp, #28]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	3313      	adds	r3, #19
 800bb2e:	e7cf      	b.n	800bad0 <_dtoa_r+0x248>
 800bb30:	2301      	movs	r3, #1
 800bb32:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb34:	3b02      	subs	r3, #2
 800bb36:	e7f6      	b.n	800bb26 <_dtoa_r+0x29e>
 800bb38:	3101      	adds	r1, #1
 800bb3a:	0052      	lsls	r2, r2, #1
 800bb3c:	e7dc      	b.n	800baf8 <_dtoa_r+0x270>
 800bb3e:	9b04      	ldr	r3, [sp, #16]
 800bb40:	9a06      	ldr	r2, [sp, #24]
 800bb42:	69db      	ldr	r3, [r3, #28]
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	9b07      	ldr	r3, [sp, #28]
 800bb48:	2b0e      	cmp	r3, #14
 800bb4a:	d900      	bls.n	800bb4e <_dtoa_r+0x2c6>
 800bb4c:	e0e5      	b.n	800bd1a <_dtoa_r+0x492>
 800bb4e:	2c00      	cmp	r4, #0
 800bb50:	d100      	bne.n	800bb54 <_dtoa_r+0x2cc>
 800bb52:	e0e2      	b.n	800bd1a <_dtoa_r+0x492>
 800bb54:	9b03      	ldr	r3, [sp, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	dd64      	ble.n	800bc24 <_dtoa_r+0x39c>
 800bb5a:	210f      	movs	r1, #15
 800bb5c:	9a03      	ldr	r2, [sp, #12]
 800bb5e:	4b2b      	ldr	r3, [pc, #172]	; (800bc0c <_dtoa_r+0x384>)
 800bb60:	400a      	ands	r2, r1
 800bb62:	00d2      	lsls	r2, r2, #3
 800bb64:	189b      	adds	r3, r3, r2
 800bb66:	681e      	ldr	r6, [r3, #0]
 800bb68:	685f      	ldr	r7, [r3, #4]
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	2402      	movs	r4, #2
 800bb6e:	111d      	asrs	r5, r3, #4
 800bb70:	05db      	lsls	r3, r3, #23
 800bb72:	d50a      	bpl.n	800bb8a <_dtoa_r+0x302>
 800bb74:	4b2a      	ldr	r3, [pc, #168]	; (800bc20 <_dtoa_r+0x398>)
 800bb76:	400d      	ands	r5, r1
 800bb78:	6a1a      	ldr	r2, [r3, #32]
 800bb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb80:	f7f5 ff6c 	bl	8001a5c <__aeabi_ddiv>
 800bb84:	9008      	str	r0, [sp, #32]
 800bb86:	9109      	str	r1, [sp, #36]	; 0x24
 800bb88:	3401      	adds	r4, #1
 800bb8a:	4b25      	ldr	r3, [pc, #148]	; (800bc20 <_dtoa_r+0x398>)
 800bb8c:	930e      	str	r3, [sp, #56]	; 0x38
 800bb8e:	2d00      	cmp	r5, #0
 800bb90:	d108      	bne.n	800bba4 <_dtoa_r+0x31c>
 800bb92:	9808      	ldr	r0, [sp, #32]
 800bb94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb96:	0032      	movs	r2, r6
 800bb98:	003b      	movs	r3, r7
 800bb9a:	f7f5 ff5f 	bl	8001a5c <__aeabi_ddiv>
 800bb9e:	9008      	str	r0, [sp, #32]
 800bba0:	9109      	str	r1, [sp, #36]	; 0x24
 800bba2:	e05a      	b.n	800bc5a <_dtoa_r+0x3d2>
 800bba4:	2301      	movs	r3, #1
 800bba6:	421d      	tst	r5, r3
 800bba8:	d009      	beq.n	800bbbe <_dtoa_r+0x336>
 800bbaa:	18e4      	adds	r4, r4, r3
 800bbac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbae:	0030      	movs	r0, r6
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	0039      	movs	r1, r7
 800bbb6:	f7f6 fb4b 	bl	8002250 <__aeabi_dmul>
 800bbba:	0006      	movs	r6, r0
 800bbbc:	000f      	movs	r7, r1
 800bbbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbc0:	106d      	asrs	r5, r5, #1
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	e7e2      	b.n	800bb8c <_dtoa_r+0x304>
 800bbc6:	46c0      	nop			; (mov r8, r8)
 800bbc8:	0800e44c 	.word	0x0800e44c
 800bbcc:	0800e50e 	.word	0x0800e50e
 800bbd0:	7ff00000 	.word	0x7ff00000
 800bbd4:	0000270f 	.word	0x0000270f
 800bbd8:	0800e50a 	.word	0x0800e50a
 800bbdc:	0800e50d 	.word	0x0800e50d
 800bbe0:	0800e428 	.word	0x0800e428
 800bbe4:	0800e429 	.word	0x0800e429
 800bbe8:	3ff00000 	.word	0x3ff00000
 800bbec:	fffffc01 	.word	0xfffffc01
 800bbf0:	3ff80000 	.word	0x3ff80000
 800bbf4:	636f4361 	.word	0x636f4361
 800bbf8:	3fd287a7 	.word	0x3fd287a7
 800bbfc:	8b60c8b3 	.word	0x8b60c8b3
 800bc00:	3fc68a28 	.word	0x3fc68a28
 800bc04:	509f79fb 	.word	0x509f79fb
 800bc08:	3fd34413 	.word	0x3fd34413
 800bc0c:	0800e658 	.word	0x0800e658
 800bc10:	00000432 	.word	0x00000432
 800bc14:	00000412 	.word	0x00000412
 800bc18:	fe100000 	.word	0xfe100000
 800bc1c:	0800e566 	.word	0x0800e566
 800bc20:	0800e630 	.word	0x0800e630
 800bc24:	9b03      	ldr	r3, [sp, #12]
 800bc26:	2402      	movs	r4, #2
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d016      	beq.n	800bc5a <_dtoa_r+0x3d2>
 800bc2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bc2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc30:	220f      	movs	r2, #15
 800bc32:	425d      	negs	r5, r3
 800bc34:	402a      	ands	r2, r5
 800bc36:	4bdd      	ldr	r3, [pc, #884]	; (800bfac <_dtoa_r+0x724>)
 800bc38:	00d2      	lsls	r2, r2, #3
 800bc3a:	189b      	adds	r3, r3, r2
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	f7f6 fb06 	bl	8002250 <__aeabi_dmul>
 800bc44:	2701      	movs	r7, #1
 800bc46:	2300      	movs	r3, #0
 800bc48:	9008      	str	r0, [sp, #32]
 800bc4a:	9109      	str	r1, [sp, #36]	; 0x24
 800bc4c:	4ed8      	ldr	r6, [pc, #864]	; (800bfb0 <_dtoa_r+0x728>)
 800bc4e:	112d      	asrs	r5, r5, #4
 800bc50:	2d00      	cmp	r5, #0
 800bc52:	d000      	beq.n	800bc56 <_dtoa_r+0x3ce>
 800bc54:	e091      	b.n	800bd7a <_dtoa_r+0x4f2>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1a1      	bne.n	800bb9e <_dtoa_r+0x316>
 800bc5a:	9e08      	ldr	r6, [sp, #32]
 800bc5c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d100      	bne.n	800bc66 <_dtoa_r+0x3de>
 800bc64:	e094      	b.n	800bd90 <_dtoa_r+0x508>
 800bc66:	2200      	movs	r2, #0
 800bc68:	0030      	movs	r0, r6
 800bc6a:	0039      	movs	r1, r7
 800bc6c:	4bd1      	ldr	r3, [pc, #836]	; (800bfb4 <_dtoa_r+0x72c>)
 800bc6e:	f7f4 fbf9 	bl	8000464 <__aeabi_dcmplt>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d100      	bne.n	800bc78 <_dtoa_r+0x3f0>
 800bc76:	e08b      	b.n	800bd90 <_dtoa_r+0x508>
 800bc78:	9b07      	ldr	r3, [sp, #28]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d100      	bne.n	800bc80 <_dtoa_r+0x3f8>
 800bc7e:	e087      	b.n	800bd90 <_dtoa_r+0x508>
 800bc80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	dd45      	ble.n	800bd12 <_dtoa_r+0x48a>
 800bc86:	9b03      	ldr	r3, [sp, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	930e      	str	r3, [sp, #56]	; 0x38
 800bc8e:	0030      	movs	r0, r6
 800bc90:	4bc9      	ldr	r3, [pc, #804]	; (800bfb8 <_dtoa_r+0x730>)
 800bc92:	0039      	movs	r1, r7
 800bc94:	f7f6 fadc 	bl	8002250 <__aeabi_dmul>
 800bc98:	9008      	str	r0, [sp, #32]
 800bc9a:	9109      	str	r1, [sp, #36]	; 0x24
 800bc9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc9e:	3401      	adds	r4, #1
 800bca0:	0020      	movs	r0, r4
 800bca2:	9e08      	ldr	r6, [sp, #32]
 800bca4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bca6:	9312      	str	r3, [sp, #72]	; 0x48
 800bca8:	f7f7 f96a 	bl	8002f80 <__aeabi_i2d>
 800bcac:	0032      	movs	r2, r6
 800bcae:	003b      	movs	r3, r7
 800bcb0:	f7f6 face 	bl	8002250 <__aeabi_dmul>
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	4bc1      	ldr	r3, [pc, #772]	; (800bfbc <_dtoa_r+0x734>)
 800bcb8:	f7f5 fb70 	bl	800139c <__aeabi_dadd>
 800bcbc:	4ac0      	ldr	r2, [pc, #768]	; (800bfc0 <_dtoa_r+0x738>)
 800bcbe:	9014      	str	r0, [sp, #80]	; 0x50
 800bcc0:	9115      	str	r1, [sp, #84]	; 0x54
 800bcc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcc4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800bcc6:	4694      	mov	ip, r2
 800bcc8:	9308      	str	r3, [sp, #32]
 800bcca:	9409      	str	r4, [sp, #36]	; 0x24
 800bccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcce:	4463      	add	r3, ip
 800bcd0:	9318      	str	r3, [sp, #96]	; 0x60
 800bcd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d15e      	bne.n	800bd98 <_dtoa_r+0x510>
 800bcda:	2200      	movs	r2, #0
 800bcdc:	4bb9      	ldr	r3, [pc, #740]	; (800bfc4 <_dtoa_r+0x73c>)
 800bcde:	0030      	movs	r0, r6
 800bce0:	0039      	movs	r1, r7
 800bce2:	f7f6 fd77 	bl	80027d4 <__aeabi_dsub>
 800bce6:	9a08      	ldr	r2, [sp, #32]
 800bce8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bcea:	0004      	movs	r4, r0
 800bcec:	000d      	movs	r5, r1
 800bcee:	f7f4 fbcd 	bl	800048c <__aeabi_dcmpgt>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d000      	beq.n	800bcf8 <_dtoa_r+0x470>
 800bcf6:	e2b3      	b.n	800c260 <_dtoa_r+0x9d8>
 800bcf8:	48b3      	ldr	r0, [pc, #716]	; (800bfc8 <_dtoa_r+0x740>)
 800bcfa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bcfc:	4684      	mov	ip, r0
 800bcfe:	4461      	add	r1, ip
 800bd00:	000b      	movs	r3, r1
 800bd02:	0020      	movs	r0, r4
 800bd04:	0029      	movs	r1, r5
 800bd06:	9a08      	ldr	r2, [sp, #32]
 800bd08:	f7f4 fbac 	bl	8000464 <__aeabi_dcmplt>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d000      	beq.n	800bd12 <_dtoa_r+0x48a>
 800bd10:	e2a3      	b.n	800c25a <_dtoa_r+0x9d2>
 800bd12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd14:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800bd16:	9308      	str	r3, [sp, #32]
 800bd18:	9409      	str	r4, [sp, #36]	; 0x24
 800bd1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	da00      	bge.n	800bd22 <_dtoa_r+0x49a>
 800bd20:	e179      	b.n	800c016 <_dtoa_r+0x78e>
 800bd22:	9a03      	ldr	r2, [sp, #12]
 800bd24:	2a0e      	cmp	r2, #14
 800bd26:	dd00      	ble.n	800bd2a <_dtoa_r+0x4a2>
 800bd28:	e175      	b.n	800c016 <_dtoa_r+0x78e>
 800bd2a:	4ba0      	ldr	r3, [pc, #640]	; (800bfac <_dtoa_r+0x724>)
 800bd2c:	00d2      	lsls	r2, r2, #3
 800bd2e:	189b      	adds	r3, r3, r2
 800bd30:	681e      	ldr	r6, [r3, #0]
 800bd32:	685f      	ldr	r7, [r3, #4]
 800bd34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	db00      	blt.n	800bd3c <_dtoa_r+0x4b4>
 800bd3a:	e0e5      	b.n	800bf08 <_dtoa_r+0x680>
 800bd3c:	9b07      	ldr	r3, [sp, #28]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	dd00      	ble.n	800bd44 <_dtoa_r+0x4bc>
 800bd42:	e0e1      	b.n	800bf08 <_dtoa_r+0x680>
 800bd44:	d000      	beq.n	800bd48 <_dtoa_r+0x4c0>
 800bd46:	e288      	b.n	800c25a <_dtoa_r+0x9d2>
 800bd48:	2200      	movs	r2, #0
 800bd4a:	0030      	movs	r0, r6
 800bd4c:	0039      	movs	r1, r7
 800bd4e:	4b9d      	ldr	r3, [pc, #628]	; (800bfc4 <_dtoa_r+0x73c>)
 800bd50:	f7f6 fa7e 	bl	8002250 <__aeabi_dmul>
 800bd54:	9a08      	ldr	r2, [sp, #32]
 800bd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd58:	f7f4 fba2 	bl	80004a0 <__aeabi_dcmpge>
 800bd5c:	9e07      	ldr	r6, [sp, #28]
 800bd5e:	0037      	movs	r7, r6
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d000      	beq.n	800bd66 <_dtoa_r+0x4de>
 800bd64:	e25f      	b.n	800c226 <_dtoa_r+0x99e>
 800bd66:	9b06      	ldr	r3, [sp, #24]
 800bd68:	9a06      	ldr	r2, [sp, #24]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	9308      	str	r3, [sp, #32]
 800bd6e:	2331      	movs	r3, #49	; 0x31
 800bd70:	7013      	strb	r3, [r2, #0]
 800bd72:	9b03      	ldr	r3, [sp, #12]
 800bd74:	3301      	adds	r3, #1
 800bd76:	9303      	str	r3, [sp, #12]
 800bd78:	e25a      	b.n	800c230 <_dtoa_r+0x9a8>
 800bd7a:	423d      	tst	r5, r7
 800bd7c:	d005      	beq.n	800bd8a <_dtoa_r+0x502>
 800bd7e:	6832      	ldr	r2, [r6, #0]
 800bd80:	6873      	ldr	r3, [r6, #4]
 800bd82:	f7f6 fa65 	bl	8002250 <__aeabi_dmul>
 800bd86:	003b      	movs	r3, r7
 800bd88:	3401      	adds	r4, #1
 800bd8a:	106d      	asrs	r5, r5, #1
 800bd8c:	3608      	adds	r6, #8
 800bd8e:	e75f      	b.n	800bc50 <_dtoa_r+0x3c8>
 800bd90:	9b03      	ldr	r3, [sp, #12]
 800bd92:	930e      	str	r3, [sp, #56]	; 0x38
 800bd94:	9b07      	ldr	r3, [sp, #28]
 800bd96:	e783      	b.n	800bca0 <_dtoa_r+0x418>
 800bd98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd9a:	4b84      	ldr	r3, [pc, #528]	; (800bfac <_dtoa_r+0x724>)
 800bd9c:	3a01      	subs	r2, #1
 800bd9e:	00d2      	lsls	r2, r2, #3
 800bda0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bda2:	189b      	adds	r3, r3, r2
 800bda4:	9c08      	ldr	r4, [sp, #32]
 800bda6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	2900      	cmp	r1, #0
 800bdae:	d051      	beq.n	800be54 <_dtoa_r+0x5cc>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	4986      	ldr	r1, [pc, #536]	; (800bfcc <_dtoa_r+0x744>)
 800bdb4:	f7f5 fe52 	bl	8001a5c <__aeabi_ddiv>
 800bdb8:	0022      	movs	r2, r4
 800bdba:	002b      	movs	r3, r5
 800bdbc:	f7f6 fd0a 	bl	80027d4 <__aeabi_dsub>
 800bdc0:	9a06      	ldr	r2, [sp, #24]
 800bdc2:	0004      	movs	r4, r0
 800bdc4:	4694      	mov	ip, r2
 800bdc6:	000d      	movs	r5, r1
 800bdc8:	9b06      	ldr	r3, [sp, #24]
 800bdca:	9314      	str	r3, [sp, #80]	; 0x50
 800bdcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdce:	4463      	add	r3, ip
 800bdd0:	9318      	str	r3, [sp, #96]	; 0x60
 800bdd2:	0039      	movs	r1, r7
 800bdd4:	0030      	movs	r0, r6
 800bdd6:	f7f7 f89d 	bl	8002f14 <__aeabi_d2iz>
 800bdda:	9012      	str	r0, [sp, #72]	; 0x48
 800bddc:	f7f7 f8d0 	bl	8002f80 <__aeabi_i2d>
 800bde0:	0002      	movs	r2, r0
 800bde2:	000b      	movs	r3, r1
 800bde4:	0030      	movs	r0, r6
 800bde6:	0039      	movs	r1, r7
 800bde8:	f7f6 fcf4 	bl	80027d4 <__aeabi_dsub>
 800bdec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	9308      	str	r3, [sp, #32]
 800bdf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdf6:	0006      	movs	r6, r0
 800bdf8:	3330      	adds	r3, #48	; 0x30
 800bdfa:	7013      	strb	r3, [r2, #0]
 800bdfc:	0022      	movs	r2, r4
 800bdfe:	002b      	movs	r3, r5
 800be00:	000f      	movs	r7, r1
 800be02:	f7f4 fb2f 	bl	8000464 <__aeabi_dcmplt>
 800be06:	2800      	cmp	r0, #0
 800be08:	d174      	bne.n	800bef4 <_dtoa_r+0x66c>
 800be0a:	0032      	movs	r2, r6
 800be0c:	003b      	movs	r3, r7
 800be0e:	2000      	movs	r0, #0
 800be10:	4968      	ldr	r1, [pc, #416]	; (800bfb4 <_dtoa_r+0x72c>)
 800be12:	f7f6 fcdf 	bl	80027d4 <__aeabi_dsub>
 800be16:	0022      	movs	r2, r4
 800be18:	002b      	movs	r3, r5
 800be1a:	f7f4 fb23 	bl	8000464 <__aeabi_dcmplt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d000      	beq.n	800be24 <_dtoa_r+0x59c>
 800be22:	e0d7      	b.n	800bfd4 <_dtoa_r+0x74c>
 800be24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800be26:	9a08      	ldr	r2, [sp, #32]
 800be28:	4293      	cmp	r3, r2
 800be2a:	d100      	bne.n	800be2e <_dtoa_r+0x5a6>
 800be2c:	e771      	b.n	800bd12 <_dtoa_r+0x48a>
 800be2e:	2200      	movs	r2, #0
 800be30:	0020      	movs	r0, r4
 800be32:	0029      	movs	r1, r5
 800be34:	4b60      	ldr	r3, [pc, #384]	; (800bfb8 <_dtoa_r+0x730>)
 800be36:	f7f6 fa0b 	bl	8002250 <__aeabi_dmul>
 800be3a:	4b5f      	ldr	r3, [pc, #380]	; (800bfb8 <_dtoa_r+0x730>)
 800be3c:	0004      	movs	r4, r0
 800be3e:	000d      	movs	r5, r1
 800be40:	0030      	movs	r0, r6
 800be42:	0039      	movs	r1, r7
 800be44:	2200      	movs	r2, #0
 800be46:	f7f6 fa03 	bl	8002250 <__aeabi_dmul>
 800be4a:	9b08      	ldr	r3, [sp, #32]
 800be4c:	0006      	movs	r6, r0
 800be4e:	000f      	movs	r7, r1
 800be50:	9314      	str	r3, [sp, #80]	; 0x50
 800be52:	e7be      	b.n	800bdd2 <_dtoa_r+0x54a>
 800be54:	0020      	movs	r0, r4
 800be56:	0029      	movs	r1, r5
 800be58:	f7f6 f9fa 	bl	8002250 <__aeabi_dmul>
 800be5c:	9a06      	ldr	r2, [sp, #24]
 800be5e:	9b06      	ldr	r3, [sp, #24]
 800be60:	4694      	mov	ip, r2
 800be62:	9308      	str	r3, [sp, #32]
 800be64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be66:	9014      	str	r0, [sp, #80]	; 0x50
 800be68:	9115      	str	r1, [sp, #84]	; 0x54
 800be6a:	4463      	add	r3, ip
 800be6c:	9319      	str	r3, [sp, #100]	; 0x64
 800be6e:	0030      	movs	r0, r6
 800be70:	0039      	movs	r1, r7
 800be72:	f7f7 f84f 	bl	8002f14 <__aeabi_d2iz>
 800be76:	9018      	str	r0, [sp, #96]	; 0x60
 800be78:	f7f7 f882 	bl	8002f80 <__aeabi_i2d>
 800be7c:	0002      	movs	r2, r0
 800be7e:	000b      	movs	r3, r1
 800be80:	0030      	movs	r0, r6
 800be82:	0039      	movs	r1, r7
 800be84:	f7f6 fca6 	bl	80027d4 <__aeabi_dsub>
 800be88:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800be8a:	9b08      	ldr	r3, [sp, #32]
 800be8c:	3630      	adds	r6, #48	; 0x30
 800be8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800be90:	701e      	strb	r6, [r3, #0]
 800be92:	3301      	adds	r3, #1
 800be94:	0004      	movs	r4, r0
 800be96:	000d      	movs	r5, r1
 800be98:	9308      	str	r3, [sp, #32]
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d12d      	bne.n	800befa <_dtoa_r+0x672>
 800be9e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800bea0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bea2:	9a06      	ldr	r2, [sp, #24]
 800bea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bea6:	4694      	mov	ip, r2
 800bea8:	4463      	add	r3, ip
 800beaa:	2200      	movs	r2, #0
 800beac:	9308      	str	r3, [sp, #32]
 800beae:	4b47      	ldr	r3, [pc, #284]	; (800bfcc <_dtoa_r+0x744>)
 800beb0:	f7f5 fa74 	bl	800139c <__aeabi_dadd>
 800beb4:	0002      	movs	r2, r0
 800beb6:	000b      	movs	r3, r1
 800beb8:	0020      	movs	r0, r4
 800beba:	0029      	movs	r1, r5
 800bebc:	f7f4 fae6 	bl	800048c <__aeabi_dcmpgt>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d000      	beq.n	800bec6 <_dtoa_r+0x63e>
 800bec4:	e086      	b.n	800bfd4 <_dtoa_r+0x74c>
 800bec6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800beca:	2000      	movs	r0, #0
 800becc:	493f      	ldr	r1, [pc, #252]	; (800bfcc <_dtoa_r+0x744>)
 800bece:	f7f6 fc81 	bl	80027d4 <__aeabi_dsub>
 800bed2:	0002      	movs	r2, r0
 800bed4:	000b      	movs	r3, r1
 800bed6:	0020      	movs	r0, r4
 800bed8:	0029      	movs	r1, r5
 800beda:	f7f4 fac3 	bl	8000464 <__aeabi_dcmplt>
 800bede:	2800      	cmp	r0, #0
 800bee0:	d100      	bne.n	800bee4 <_dtoa_r+0x65c>
 800bee2:	e716      	b.n	800bd12 <_dtoa_r+0x48a>
 800bee4:	9b08      	ldr	r3, [sp, #32]
 800bee6:	001a      	movs	r2, r3
 800bee8:	3a01      	subs	r2, #1
 800beea:	9208      	str	r2, [sp, #32]
 800beec:	7812      	ldrb	r2, [r2, #0]
 800beee:	2a30      	cmp	r2, #48	; 0x30
 800bef0:	d0f8      	beq.n	800bee4 <_dtoa_r+0x65c>
 800bef2:	9308      	str	r3, [sp, #32]
 800bef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bef6:	9303      	str	r3, [sp, #12]
 800bef8:	e046      	b.n	800bf88 <_dtoa_r+0x700>
 800befa:	2200      	movs	r2, #0
 800befc:	4b2e      	ldr	r3, [pc, #184]	; (800bfb8 <_dtoa_r+0x730>)
 800befe:	f7f6 f9a7 	bl	8002250 <__aeabi_dmul>
 800bf02:	0006      	movs	r6, r0
 800bf04:	000f      	movs	r7, r1
 800bf06:	e7b2      	b.n	800be6e <_dtoa_r+0x5e6>
 800bf08:	9b06      	ldr	r3, [sp, #24]
 800bf0a:	9a06      	ldr	r2, [sp, #24]
 800bf0c:	930a      	str	r3, [sp, #40]	; 0x28
 800bf0e:	9b07      	ldr	r3, [sp, #28]
 800bf10:	9c08      	ldr	r4, [sp, #32]
 800bf12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bf14:	3b01      	subs	r3, #1
 800bf16:	189b      	adds	r3, r3, r2
 800bf18:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf1a:	0032      	movs	r2, r6
 800bf1c:	003b      	movs	r3, r7
 800bf1e:	0020      	movs	r0, r4
 800bf20:	0029      	movs	r1, r5
 800bf22:	f7f5 fd9b 	bl	8001a5c <__aeabi_ddiv>
 800bf26:	f7f6 fff5 	bl	8002f14 <__aeabi_d2iz>
 800bf2a:	9007      	str	r0, [sp, #28]
 800bf2c:	f7f7 f828 	bl	8002f80 <__aeabi_i2d>
 800bf30:	0032      	movs	r2, r6
 800bf32:	003b      	movs	r3, r7
 800bf34:	f7f6 f98c 	bl	8002250 <__aeabi_dmul>
 800bf38:	0002      	movs	r2, r0
 800bf3a:	000b      	movs	r3, r1
 800bf3c:	0020      	movs	r0, r4
 800bf3e:	0029      	movs	r1, r5
 800bf40:	f7f6 fc48 	bl	80027d4 <__aeabi_dsub>
 800bf44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf46:	001a      	movs	r2, r3
 800bf48:	3201      	adds	r2, #1
 800bf4a:	920a      	str	r2, [sp, #40]	; 0x28
 800bf4c:	9208      	str	r2, [sp, #32]
 800bf4e:	9a07      	ldr	r2, [sp, #28]
 800bf50:	3230      	adds	r2, #48	; 0x30
 800bf52:	701a      	strb	r2, [r3, #0]
 800bf54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d14f      	bne.n	800bffa <_dtoa_r+0x772>
 800bf5a:	0002      	movs	r2, r0
 800bf5c:	000b      	movs	r3, r1
 800bf5e:	f7f5 fa1d 	bl	800139c <__aeabi_dadd>
 800bf62:	0032      	movs	r2, r6
 800bf64:	003b      	movs	r3, r7
 800bf66:	0004      	movs	r4, r0
 800bf68:	000d      	movs	r5, r1
 800bf6a:	f7f4 fa8f 	bl	800048c <__aeabi_dcmpgt>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d12e      	bne.n	800bfd0 <_dtoa_r+0x748>
 800bf72:	0032      	movs	r2, r6
 800bf74:	003b      	movs	r3, r7
 800bf76:	0020      	movs	r0, r4
 800bf78:	0029      	movs	r1, r5
 800bf7a:	f7f4 fa6d 	bl	8000458 <__aeabi_dcmpeq>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d002      	beq.n	800bf88 <_dtoa_r+0x700>
 800bf82:	9b07      	ldr	r3, [sp, #28]
 800bf84:	07de      	lsls	r6, r3, #31
 800bf86:	d423      	bmi.n	800bfd0 <_dtoa_r+0x748>
 800bf88:	9905      	ldr	r1, [sp, #20]
 800bf8a:	9804      	ldr	r0, [sp, #16]
 800bf8c:	f000 ff44 	bl	800ce18 <_Bfree>
 800bf90:	2300      	movs	r3, #0
 800bf92:	9a08      	ldr	r2, [sp, #32]
 800bf94:	7013      	strb	r3, [r2, #0]
 800bf96:	9b03      	ldr	r3, [sp, #12]
 800bf98:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	6013      	str	r3, [r2, #0]
 800bf9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d100      	bne.n	800bfa6 <_dtoa_r+0x71e>
 800bfa4:	e4ba      	b.n	800b91c <_dtoa_r+0x94>
 800bfa6:	9a08      	ldr	r2, [sp, #32]
 800bfa8:	601a      	str	r2, [r3, #0]
 800bfaa:	e4b7      	b.n	800b91c <_dtoa_r+0x94>
 800bfac:	0800e658 	.word	0x0800e658
 800bfb0:	0800e630 	.word	0x0800e630
 800bfb4:	3ff00000 	.word	0x3ff00000
 800bfb8:	40240000 	.word	0x40240000
 800bfbc:	401c0000 	.word	0x401c0000
 800bfc0:	fcc00000 	.word	0xfcc00000
 800bfc4:	40140000 	.word	0x40140000
 800bfc8:	7cc00000 	.word	0x7cc00000
 800bfcc:	3fe00000 	.word	0x3fe00000
 800bfd0:	9b03      	ldr	r3, [sp, #12]
 800bfd2:	930e      	str	r3, [sp, #56]	; 0x38
 800bfd4:	9b08      	ldr	r3, [sp, #32]
 800bfd6:	9308      	str	r3, [sp, #32]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	781a      	ldrb	r2, [r3, #0]
 800bfdc:	2a39      	cmp	r2, #57	; 0x39
 800bfde:	d108      	bne.n	800bff2 <_dtoa_r+0x76a>
 800bfe0:	9a06      	ldr	r2, [sp, #24]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d1f7      	bne.n	800bfd6 <_dtoa_r+0x74e>
 800bfe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfe8:	9906      	ldr	r1, [sp, #24]
 800bfea:	3201      	adds	r2, #1
 800bfec:	920e      	str	r2, [sp, #56]	; 0x38
 800bfee:	2230      	movs	r2, #48	; 0x30
 800bff0:	700a      	strb	r2, [r1, #0]
 800bff2:	781a      	ldrb	r2, [r3, #0]
 800bff4:	3201      	adds	r2, #1
 800bff6:	701a      	strb	r2, [r3, #0]
 800bff8:	e77c      	b.n	800bef4 <_dtoa_r+0x66c>
 800bffa:	2200      	movs	r2, #0
 800bffc:	4ba9      	ldr	r3, [pc, #676]	; (800c2a4 <_dtoa_r+0xa1c>)
 800bffe:	f7f6 f927 	bl	8002250 <__aeabi_dmul>
 800c002:	2200      	movs	r2, #0
 800c004:	2300      	movs	r3, #0
 800c006:	0004      	movs	r4, r0
 800c008:	000d      	movs	r5, r1
 800c00a:	f7f4 fa25 	bl	8000458 <__aeabi_dcmpeq>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d100      	bne.n	800c014 <_dtoa_r+0x78c>
 800c012:	e782      	b.n	800bf1a <_dtoa_r+0x692>
 800c014:	e7b8      	b.n	800bf88 <_dtoa_r+0x700>
 800c016:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800c018:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c01a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c01c:	2f00      	cmp	r7, #0
 800c01e:	d012      	beq.n	800c046 <_dtoa_r+0x7be>
 800c020:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c022:	2a01      	cmp	r2, #1
 800c024:	dc6e      	bgt.n	800c104 <_dtoa_r+0x87c>
 800c026:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c028:	2a00      	cmp	r2, #0
 800c02a:	d065      	beq.n	800c0f8 <_dtoa_r+0x870>
 800c02c:	4a9e      	ldr	r2, [pc, #632]	; (800c2a8 <_dtoa_r+0xa20>)
 800c02e:	189b      	adds	r3, r3, r2
 800c030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c032:	2101      	movs	r1, #1
 800c034:	18d2      	adds	r2, r2, r3
 800c036:	920a      	str	r2, [sp, #40]	; 0x28
 800c038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c03a:	9804      	ldr	r0, [sp, #16]
 800c03c:	18d3      	adds	r3, r2, r3
 800c03e:	930c      	str	r3, [sp, #48]	; 0x30
 800c040:	f000 ffe6 	bl	800d010 <__i2b>
 800c044:	0007      	movs	r7, r0
 800c046:	2c00      	cmp	r4, #0
 800c048:	d00e      	beq.n	800c068 <_dtoa_r+0x7e0>
 800c04a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dd0b      	ble.n	800c068 <_dtoa_r+0x7e0>
 800c050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c052:	0023      	movs	r3, r4
 800c054:	4294      	cmp	r4, r2
 800c056:	dd00      	ble.n	800c05a <_dtoa_r+0x7d2>
 800c058:	0013      	movs	r3, r2
 800c05a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c05c:	1ae4      	subs	r4, r4, r3
 800c05e:	1ad2      	subs	r2, r2, r3
 800c060:	920a      	str	r2, [sp, #40]	; 0x28
 800c062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	930c      	str	r3, [sp, #48]	; 0x30
 800c068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d01e      	beq.n	800c0ac <_dtoa_r+0x824>
 800c06e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c070:	2b00      	cmp	r3, #0
 800c072:	d05c      	beq.n	800c12e <_dtoa_r+0x8a6>
 800c074:	2d00      	cmp	r5, #0
 800c076:	dd10      	ble.n	800c09a <_dtoa_r+0x812>
 800c078:	0039      	movs	r1, r7
 800c07a:	002a      	movs	r2, r5
 800c07c:	9804      	ldr	r0, [sp, #16]
 800c07e:	f001 f88f 	bl	800d1a0 <__pow5mult>
 800c082:	9a05      	ldr	r2, [sp, #20]
 800c084:	0001      	movs	r1, r0
 800c086:	0007      	movs	r7, r0
 800c088:	9804      	ldr	r0, [sp, #16]
 800c08a:	f000 ffd9 	bl	800d040 <__multiply>
 800c08e:	0006      	movs	r6, r0
 800c090:	9905      	ldr	r1, [sp, #20]
 800c092:	9804      	ldr	r0, [sp, #16]
 800c094:	f000 fec0 	bl	800ce18 <_Bfree>
 800c098:	9605      	str	r6, [sp, #20]
 800c09a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c09c:	1b5a      	subs	r2, r3, r5
 800c09e:	42ab      	cmp	r3, r5
 800c0a0:	d004      	beq.n	800c0ac <_dtoa_r+0x824>
 800c0a2:	9905      	ldr	r1, [sp, #20]
 800c0a4:	9804      	ldr	r0, [sp, #16]
 800c0a6:	f001 f87b 	bl	800d1a0 <__pow5mult>
 800c0aa:	9005      	str	r0, [sp, #20]
 800c0ac:	2101      	movs	r1, #1
 800c0ae:	9804      	ldr	r0, [sp, #16]
 800c0b0:	f000 ffae 	bl	800d010 <__i2b>
 800c0b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0b6:	0006      	movs	r6, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	dd3a      	ble.n	800c132 <_dtoa_r+0x8aa>
 800c0bc:	001a      	movs	r2, r3
 800c0be:	0001      	movs	r1, r0
 800c0c0:	9804      	ldr	r0, [sp, #16]
 800c0c2:	f001 f86d 	bl	800d1a0 <__pow5mult>
 800c0c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0c8:	0006      	movs	r6, r0
 800c0ca:	2500      	movs	r5, #0
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	dc38      	bgt.n	800c142 <_dtoa_r+0x8ba>
 800c0d0:	2500      	movs	r5, #0
 800c0d2:	9b08      	ldr	r3, [sp, #32]
 800c0d4:	42ab      	cmp	r3, r5
 800c0d6:	d130      	bne.n	800c13a <_dtoa_r+0x8b2>
 800c0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0da:	031b      	lsls	r3, r3, #12
 800c0dc:	42ab      	cmp	r3, r5
 800c0de:	d12c      	bne.n	800c13a <_dtoa_r+0x8b2>
 800c0e0:	4b72      	ldr	r3, [pc, #456]	; (800c2ac <_dtoa_r+0xa24>)
 800c0e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0e4:	4213      	tst	r3, r2
 800c0e6:	d028      	beq.n	800c13a <_dtoa_r+0x8b2>
 800c0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ea:	3501      	adds	r5, #1
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	930c      	str	r3, [sp, #48]	; 0x30
 800c0f6:	e020      	b.n	800c13a <_dtoa_r+0x8b2>
 800c0f8:	2336      	movs	r3, #54	; 0x36
 800c0fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c0fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c0fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c100:	1a9b      	subs	r3, r3, r2
 800c102:	e795      	b.n	800c030 <_dtoa_r+0x7a8>
 800c104:	9b07      	ldr	r3, [sp, #28]
 800c106:	1e5d      	subs	r5, r3, #1
 800c108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c10a:	42ab      	cmp	r3, r5
 800c10c:	db07      	blt.n	800c11e <_dtoa_r+0x896>
 800c10e:	1b5d      	subs	r5, r3, r5
 800c110:	9b07      	ldr	r3, [sp, #28]
 800c112:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c114:	2b00      	cmp	r3, #0
 800c116:	da8b      	bge.n	800c030 <_dtoa_r+0x7a8>
 800c118:	1ae4      	subs	r4, r4, r3
 800c11a:	2300      	movs	r3, #0
 800c11c:	e788      	b.n	800c030 <_dtoa_r+0x7a8>
 800c11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c120:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c122:	1aeb      	subs	r3, r5, r3
 800c124:	18d3      	adds	r3, r2, r3
 800c126:	950d      	str	r5, [sp, #52]	; 0x34
 800c128:	9313      	str	r3, [sp, #76]	; 0x4c
 800c12a:	2500      	movs	r5, #0
 800c12c:	e7f0      	b.n	800c110 <_dtoa_r+0x888>
 800c12e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c130:	e7b7      	b.n	800c0a2 <_dtoa_r+0x81a>
 800c132:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c134:	2500      	movs	r5, #0
 800c136:	2b01      	cmp	r3, #1
 800c138:	ddca      	ble.n	800c0d0 <_dtoa_r+0x848>
 800c13a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c13c:	2001      	movs	r0, #1
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d008      	beq.n	800c154 <_dtoa_r+0x8cc>
 800c142:	6933      	ldr	r3, [r6, #16]
 800c144:	3303      	adds	r3, #3
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	18f3      	adds	r3, r6, r3
 800c14a:	6858      	ldr	r0, [r3, #4]
 800c14c:	f000 ff18 	bl	800cf80 <__hi0bits>
 800c150:	2320      	movs	r3, #32
 800c152:	1a18      	subs	r0, r3, r0
 800c154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c156:	1818      	adds	r0, r3, r0
 800c158:	0002      	movs	r2, r0
 800c15a:	231f      	movs	r3, #31
 800c15c:	401a      	ands	r2, r3
 800c15e:	4218      	tst	r0, r3
 800c160:	d047      	beq.n	800c1f2 <_dtoa_r+0x96a>
 800c162:	3301      	adds	r3, #1
 800c164:	1a9b      	subs	r3, r3, r2
 800c166:	2b04      	cmp	r3, #4
 800c168:	dd3f      	ble.n	800c1ea <_dtoa_r+0x962>
 800c16a:	231c      	movs	r3, #28
 800c16c:	1a9b      	subs	r3, r3, r2
 800c16e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c170:	18e4      	adds	r4, r4, r3
 800c172:	18d2      	adds	r2, r2, r3
 800c174:	920a      	str	r2, [sp, #40]	; 0x28
 800c176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c178:	18d3      	adds	r3, r2, r3
 800c17a:	930c      	str	r3, [sp, #48]	; 0x30
 800c17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c17e:	2b00      	cmp	r3, #0
 800c180:	dd05      	ble.n	800c18e <_dtoa_r+0x906>
 800c182:	001a      	movs	r2, r3
 800c184:	9905      	ldr	r1, [sp, #20]
 800c186:	9804      	ldr	r0, [sp, #16]
 800c188:	f001 f866 	bl	800d258 <__lshift>
 800c18c:	9005      	str	r0, [sp, #20]
 800c18e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c190:	2b00      	cmp	r3, #0
 800c192:	dd05      	ble.n	800c1a0 <_dtoa_r+0x918>
 800c194:	0031      	movs	r1, r6
 800c196:	001a      	movs	r2, r3
 800c198:	9804      	ldr	r0, [sp, #16]
 800c19a:	f001 f85d 	bl	800d258 <__lshift>
 800c19e:	0006      	movs	r6, r0
 800c1a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d027      	beq.n	800c1f6 <_dtoa_r+0x96e>
 800c1a6:	0031      	movs	r1, r6
 800c1a8:	9805      	ldr	r0, [sp, #20]
 800c1aa:	f001 f8c3 	bl	800d334 <__mcmp>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	da21      	bge.n	800c1f6 <_dtoa_r+0x96e>
 800c1b2:	9b03      	ldr	r3, [sp, #12]
 800c1b4:	220a      	movs	r2, #10
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	9303      	str	r3, [sp, #12]
 800c1ba:	9905      	ldr	r1, [sp, #20]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	9804      	ldr	r0, [sp, #16]
 800c1c0:	f000 fe4e 	bl	800ce60 <__multadd>
 800c1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1c6:	9005      	str	r0, [sp, #20]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d100      	bne.n	800c1ce <_dtoa_r+0x946>
 800c1cc:	e15d      	b.n	800c48a <_dtoa_r+0xc02>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	0039      	movs	r1, r7
 800c1d2:	220a      	movs	r2, #10
 800c1d4:	9804      	ldr	r0, [sp, #16]
 800c1d6:	f000 fe43 	bl	800ce60 <__multadd>
 800c1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1dc:	0007      	movs	r7, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	dc49      	bgt.n	800c276 <_dtoa_r+0x9ee>
 800c1e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	dc0e      	bgt.n	800c206 <_dtoa_r+0x97e>
 800c1e8:	e045      	b.n	800c276 <_dtoa_r+0x9ee>
 800c1ea:	2b04      	cmp	r3, #4
 800c1ec:	d0c6      	beq.n	800c17c <_dtoa_r+0x8f4>
 800c1ee:	331c      	adds	r3, #28
 800c1f0:	e7bd      	b.n	800c16e <_dtoa_r+0x8e6>
 800c1f2:	0013      	movs	r3, r2
 800c1f4:	e7fb      	b.n	800c1ee <_dtoa_r+0x966>
 800c1f6:	9b07      	ldr	r3, [sp, #28]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	dc36      	bgt.n	800c26a <_dtoa_r+0x9e2>
 800c1fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	dd33      	ble.n	800c26a <_dtoa_r+0x9e2>
 800c202:	9b07      	ldr	r3, [sp, #28]
 800c204:	930b      	str	r3, [sp, #44]	; 0x2c
 800c206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10c      	bne.n	800c226 <_dtoa_r+0x99e>
 800c20c:	0031      	movs	r1, r6
 800c20e:	2205      	movs	r2, #5
 800c210:	9804      	ldr	r0, [sp, #16]
 800c212:	f000 fe25 	bl	800ce60 <__multadd>
 800c216:	0006      	movs	r6, r0
 800c218:	0001      	movs	r1, r0
 800c21a:	9805      	ldr	r0, [sp, #20]
 800c21c:	f001 f88a 	bl	800d334 <__mcmp>
 800c220:	2800      	cmp	r0, #0
 800c222:	dd00      	ble.n	800c226 <_dtoa_r+0x99e>
 800c224:	e59f      	b.n	800bd66 <_dtoa_r+0x4de>
 800c226:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c228:	43db      	mvns	r3, r3
 800c22a:	9303      	str	r3, [sp, #12]
 800c22c:	9b06      	ldr	r3, [sp, #24]
 800c22e:	9308      	str	r3, [sp, #32]
 800c230:	2500      	movs	r5, #0
 800c232:	0031      	movs	r1, r6
 800c234:	9804      	ldr	r0, [sp, #16]
 800c236:	f000 fdef 	bl	800ce18 <_Bfree>
 800c23a:	2f00      	cmp	r7, #0
 800c23c:	d100      	bne.n	800c240 <_dtoa_r+0x9b8>
 800c23e:	e6a3      	b.n	800bf88 <_dtoa_r+0x700>
 800c240:	2d00      	cmp	r5, #0
 800c242:	d005      	beq.n	800c250 <_dtoa_r+0x9c8>
 800c244:	42bd      	cmp	r5, r7
 800c246:	d003      	beq.n	800c250 <_dtoa_r+0x9c8>
 800c248:	0029      	movs	r1, r5
 800c24a:	9804      	ldr	r0, [sp, #16]
 800c24c:	f000 fde4 	bl	800ce18 <_Bfree>
 800c250:	0039      	movs	r1, r7
 800c252:	9804      	ldr	r0, [sp, #16]
 800c254:	f000 fde0 	bl	800ce18 <_Bfree>
 800c258:	e696      	b.n	800bf88 <_dtoa_r+0x700>
 800c25a:	2600      	movs	r6, #0
 800c25c:	0037      	movs	r7, r6
 800c25e:	e7e2      	b.n	800c226 <_dtoa_r+0x99e>
 800c260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c262:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c264:	9303      	str	r3, [sp, #12]
 800c266:	0037      	movs	r7, r6
 800c268:	e57d      	b.n	800bd66 <_dtoa_r+0x4de>
 800c26a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d100      	bne.n	800c272 <_dtoa_r+0x9ea>
 800c270:	e0c3      	b.n	800c3fa <_dtoa_r+0xb72>
 800c272:	9b07      	ldr	r3, [sp, #28]
 800c274:	930b      	str	r3, [sp, #44]	; 0x2c
 800c276:	2c00      	cmp	r4, #0
 800c278:	dd05      	ble.n	800c286 <_dtoa_r+0x9fe>
 800c27a:	0039      	movs	r1, r7
 800c27c:	0022      	movs	r2, r4
 800c27e:	9804      	ldr	r0, [sp, #16]
 800c280:	f000 ffea 	bl	800d258 <__lshift>
 800c284:	0007      	movs	r7, r0
 800c286:	0038      	movs	r0, r7
 800c288:	2d00      	cmp	r5, #0
 800c28a:	d024      	beq.n	800c2d6 <_dtoa_r+0xa4e>
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	9804      	ldr	r0, [sp, #16]
 800c290:	f000 fd7e 	bl	800cd90 <_Balloc>
 800c294:	1e04      	subs	r4, r0, #0
 800c296:	d111      	bne.n	800c2bc <_dtoa_r+0xa34>
 800c298:	0022      	movs	r2, r4
 800c29a:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <_dtoa_r+0xa28>)
 800c29c:	4805      	ldr	r0, [pc, #20]	; (800c2b4 <_dtoa_r+0xa2c>)
 800c29e:	4906      	ldr	r1, [pc, #24]	; (800c2b8 <_dtoa_r+0xa30>)
 800c2a0:	f7ff fb07 	bl	800b8b2 <_dtoa_r+0x2a>
 800c2a4:	40240000 	.word	0x40240000
 800c2a8:	00000433 	.word	0x00000433
 800c2ac:	7ff00000 	.word	0x7ff00000
 800c2b0:	0800e566 	.word	0x0800e566
 800c2b4:	0800e50e 	.word	0x0800e50e
 800c2b8:	000002ef 	.word	0x000002ef
 800c2bc:	0039      	movs	r1, r7
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	310c      	adds	r1, #12
 800c2c2:	3202      	adds	r2, #2
 800c2c4:	0092      	lsls	r2, r2, #2
 800c2c6:	300c      	adds	r0, #12
 800c2c8:	f7ff fa20 	bl	800b70c <memcpy>
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	0021      	movs	r1, r4
 800c2d0:	9804      	ldr	r0, [sp, #16]
 800c2d2:	f000 ffc1 	bl	800d258 <__lshift>
 800c2d6:	9b06      	ldr	r3, [sp, #24]
 800c2d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2da:	9307      	str	r3, [sp, #28]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	189b      	adds	r3, r3, r2
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	003d      	movs	r5, r7
 800c2e4:	0007      	movs	r7, r0
 800c2e6:	930e      	str	r3, [sp, #56]	; 0x38
 800c2e8:	9b08      	ldr	r3, [sp, #32]
 800c2ea:	4013      	ands	r3, r2
 800c2ec:	930d      	str	r3, [sp, #52]	; 0x34
 800c2ee:	0031      	movs	r1, r6
 800c2f0:	9805      	ldr	r0, [sp, #20]
 800c2f2:	f7ff fa39 	bl	800b768 <quorem>
 800c2f6:	0029      	movs	r1, r5
 800c2f8:	0004      	movs	r4, r0
 800c2fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800c2fc:	9805      	ldr	r0, [sp, #20]
 800c2fe:	f001 f819 	bl	800d334 <__mcmp>
 800c302:	003a      	movs	r2, r7
 800c304:	900c      	str	r0, [sp, #48]	; 0x30
 800c306:	0031      	movs	r1, r6
 800c308:	9804      	ldr	r0, [sp, #16]
 800c30a:	f001 f82f 	bl	800d36c <__mdiff>
 800c30e:	2201      	movs	r2, #1
 800c310:	68c3      	ldr	r3, [r0, #12]
 800c312:	3430      	adds	r4, #48	; 0x30
 800c314:	9008      	str	r0, [sp, #32]
 800c316:	920a      	str	r2, [sp, #40]	; 0x28
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d104      	bne.n	800c326 <_dtoa_r+0xa9e>
 800c31c:	0001      	movs	r1, r0
 800c31e:	9805      	ldr	r0, [sp, #20]
 800c320:	f001 f808 	bl	800d334 <__mcmp>
 800c324:	900a      	str	r0, [sp, #40]	; 0x28
 800c326:	9908      	ldr	r1, [sp, #32]
 800c328:	9804      	ldr	r0, [sp, #16]
 800c32a:	f000 fd75 	bl	800ce18 <_Bfree>
 800c32e:	9b07      	ldr	r3, [sp, #28]
 800c330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c332:	3301      	adds	r3, #1
 800c334:	9308      	str	r3, [sp, #32]
 800c336:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c338:	4313      	orrs	r3, r2
 800c33a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c33c:	4313      	orrs	r3, r2
 800c33e:	d109      	bne.n	800c354 <_dtoa_r+0xacc>
 800c340:	2c39      	cmp	r4, #57	; 0x39
 800c342:	d022      	beq.n	800c38a <_dtoa_r+0xb02>
 800c344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c346:	2b00      	cmp	r3, #0
 800c348:	dd01      	ble.n	800c34e <_dtoa_r+0xac6>
 800c34a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c34c:	3431      	adds	r4, #49	; 0x31
 800c34e:	9b07      	ldr	r3, [sp, #28]
 800c350:	701c      	strb	r4, [r3, #0]
 800c352:	e76e      	b.n	800c232 <_dtoa_r+0x9aa>
 800c354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c356:	2b00      	cmp	r3, #0
 800c358:	db04      	blt.n	800c364 <_dtoa_r+0xadc>
 800c35a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c35c:	4313      	orrs	r3, r2
 800c35e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c360:	4313      	orrs	r3, r2
 800c362:	d11e      	bne.n	800c3a2 <_dtoa_r+0xb1a>
 800c364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c366:	2b00      	cmp	r3, #0
 800c368:	ddf1      	ble.n	800c34e <_dtoa_r+0xac6>
 800c36a:	9905      	ldr	r1, [sp, #20]
 800c36c:	2201      	movs	r2, #1
 800c36e:	9804      	ldr	r0, [sp, #16]
 800c370:	f000 ff72 	bl	800d258 <__lshift>
 800c374:	0031      	movs	r1, r6
 800c376:	9005      	str	r0, [sp, #20]
 800c378:	f000 ffdc 	bl	800d334 <__mcmp>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	dc02      	bgt.n	800c386 <_dtoa_r+0xafe>
 800c380:	d1e5      	bne.n	800c34e <_dtoa_r+0xac6>
 800c382:	07e3      	lsls	r3, r4, #31
 800c384:	d5e3      	bpl.n	800c34e <_dtoa_r+0xac6>
 800c386:	2c39      	cmp	r4, #57	; 0x39
 800c388:	d1df      	bne.n	800c34a <_dtoa_r+0xac2>
 800c38a:	2339      	movs	r3, #57	; 0x39
 800c38c:	9a07      	ldr	r2, [sp, #28]
 800c38e:	7013      	strb	r3, [r2, #0]
 800c390:	9b08      	ldr	r3, [sp, #32]
 800c392:	9308      	str	r3, [sp, #32]
 800c394:	3b01      	subs	r3, #1
 800c396:	781a      	ldrb	r2, [r3, #0]
 800c398:	2a39      	cmp	r2, #57	; 0x39
 800c39a:	d063      	beq.n	800c464 <_dtoa_r+0xbdc>
 800c39c:	3201      	adds	r2, #1
 800c39e:	701a      	strb	r2, [r3, #0]
 800c3a0:	e747      	b.n	800c232 <_dtoa_r+0x9aa>
 800c3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	dd03      	ble.n	800c3b0 <_dtoa_r+0xb28>
 800c3a8:	2c39      	cmp	r4, #57	; 0x39
 800c3aa:	d0ee      	beq.n	800c38a <_dtoa_r+0xb02>
 800c3ac:	3401      	adds	r4, #1
 800c3ae:	e7ce      	b.n	800c34e <_dtoa_r+0xac6>
 800c3b0:	9b07      	ldr	r3, [sp, #28]
 800c3b2:	9a07      	ldr	r2, [sp, #28]
 800c3b4:	701c      	strb	r4, [r3, #0]
 800c3b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d03e      	beq.n	800c43a <_dtoa_r+0xbb2>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	220a      	movs	r2, #10
 800c3c0:	9905      	ldr	r1, [sp, #20]
 800c3c2:	9804      	ldr	r0, [sp, #16]
 800c3c4:	f000 fd4c 	bl	800ce60 <__multadd>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	9005      	str	r0, [sp, #20]
 800c3cc:	220a      	movs	r2, #10
 800c3ce:	0029      	movs	r1, r5
 800c3d0:	9804      	ldr	r0, [sp, #16]
 800c3d2:	42bd      	cmp	r5, r7
 800c3d4:	d106      	bne.n	800c3e4 <_dtoa_r+0xb5c>
 800c3d6:	f000 fd43 	bl	800ce60 <__multadd>
 800c3da:	0005      	movs	r5, r0
 800c3dc:	0007      	movs	r7, r0
 800c3de:	9b08      	ldr	r3, [sp, #32]
 800c3e0:	9307      	str	r3, [sp, #28]
 800c3e2:	e784      	b.n	800c2ee <_dtoa_r+0xa66>
 800c3e4:	f000 fd3c 	bl	800ce60 <__multadd>
 800c3e8:	0039      	movs	r1, r7
 800c3ea:	0005      	movs	r5, r0
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	220a      	movs	r2, #10
 800c3f0:	9804      	ldr	r0, [sp, #16]
 800c3f2:	f000 fd35 	bl	800ce60 <__multadd>
 800c3f6:	0007      	movs	r7, r0
 800c3f8:	e7f1      	b.n	800c3de <_dtoa_r+0xb56>
 800c3fa:	9b07      	ldr	r3, [sp, #28]
 800c3fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3fe:	2500      	movs	r5, #0
 800c400:	0031      	movs	r1, r6
 800c402:	9805      	ldr	r0, [sp, #20]
 800c404:	f7ff f9b0 	bl	800b768 <quorem>
 800c408:	9b06      	ldr	r3, [sp, #24]
 800c40a:	3030      	adds	r0, #48	; 0x30
 800c40c:	5558      	strb	r0, [r3, r5]
 800c40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c410:	3501      	adds	r5, #1
 800c412:	0004      	movs	r4, r0
 800c414:	42ab      	cmp	r3, r5
 800c416:	dd07      	ble.n	800c428 <_dtoa_r+0xba0>
 800c418:	2300      	movs	r3, #0
 800c41a:	220a      	movs	r2, #10
 800c41c:	9905      	ldr	r1, [sp, #20]
 800c41e:	9804      	ldr	r0, [sp, #16]
 800c420:	f000 fd1e 	bl	800ce60 <__multadd>
 800c424:	9005      	str	r0, [sp, #20]
 800c426:	e7eb      	b.n	800c400 <_dtoa_r+0xb78>
 800c428:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c42a:	2301      	movs	r3, #1
 800c42c:	2a00      	cmp	r2, #0
 800c42e:	dd00      	ble.n	800c432 <_dtoa_r+0xbaa>
 800c430:	0013      	movs	r3, r2
 800c432:	2500      	movs	r5, #0
 800c434:	9a06      	ldr	r2, [sp, #24]
 800c436:	18d3      	adds	r3, r2, r3
 800c438:	9308      	str	r3, [sp, #32]
 800c43a:	9905      	ldr	r1, [sp, #20]
 800c43c:	2201      	movs	r2, #1
 800c43e:	9804      	ldr	r0, [sp, #16]
 800c440:	f000 ff0a 	bl	800d258 <__lshift>
 800c444:	0031      	movs	r1, r6
 800c446:	9005      	str	r0, [sp, #20]
 800c448:	f000 ff74 	bl	800d334 <__mcmp>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	dc9f      	bgt.n	800c390 <_dtoa_r+0xb08>
 800c450:	d101      	bne.n	800c456 <_dtoa_r+0xbce>
 800c452:	07e4      	lsls	r4, r4, #31
 800c454:	d49c      	bmi.n	800c390 <_dtoa_r+0xb08>
 800c456:	9b08      	ldr	r3, [sp, #32]
 800c458:	9308      	str	r3, [sp, #32]
 800c45a:	3b01      	subs	r3, #1
 800c45c:	781a      	ldrb	r2, [r3, #0]
 800c45e:	2a30      	cmp	r2, #48	; 0x30
 800c460:	d0fa      	beq.n	800c458 <_dtoa_r+0xbd0>
 800c462:	e6e6      	b.n	800c232 <_dtoa_r+0x9aa>
 800c464:	9a06      	ldr	r2, [sp, #24]
 800c466:	429a      	cmp	r2, r3
 800c468:	d193      	bne.n	800c392 <_dtoa_r+0xb0a>
 800c46a:	9b03      	ldr	r3, [sp, #12]
 800c46c:	3301      	adds	r3, #1
 800c46e:	9303      	str	r3, [sp, #12]
 800c470:	2331      	movs	r3, #49	; 0x31
 800c472:	7013      	strb	r3, [r2, #0]
 800c474:	e6dd      	b.n	800c232 <_dtoa_r+0x9aa>
 800c476:	4b09      	ldr	r3, [pc, #36]	; (800c49c <_dtoa_r+0xc14>)
 800c478:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c47a:	9306      	str	r3, [sp, #24]
 800c47c:	4b08      	ldr	r3, [pc, #32]	; (800c4a0 <_dtoa_r+0xc18>)
 800c47e:	2a00      	cmp	r2, #0
 800c480:	d001      	beq.n	800c486 <_dtoa_r+0xbfe>
 800c482:	f7ff fa49 	bl	800b918 <_dtoa_r+0x90>
 800c486:	f7ff fa49 	bl	800b91c <_dtoa_r+0x94>
 800c48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	dcb6      	bgt.n	800c3fe <_dtoa_r+0xb76>
 800c490:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c492:	2b02      	cmp	r3, #2
 800c494:	dd00      	ble.n	800c498 <_dtoa_r+0xc10>
 800c496:	e6b6      	b.n	800c206 <_dtoa_r+0x97e>
 800c498:	e7b1      	b.n	800c3fe <_dtoa_r+0xb76>
 800c49a:	46c0      	nop			; (mov r8, r8)
 800c49c:	0800e501 	.word	0x0800e501
 800c4a0:	0800e509 	.word	0x0800e509

0800c4a4 <_free_r>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	0005      	movs	r5, r0
 800c4a8:	2900      	cmp	r1, #0
 800c4aa:	d010      	beq.n	800c4ce <_free_r+0x2a>
 800c4ac:	1f0c      	subs	r4, r1, #4
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	da00      	bge.n	800c4b6 <_free_r+0x12>
 800c4b4:	18e4      	adds	r4, r4, r3
 800c4b6:	0028      	movs	r0, r5
 800c4b8:	f000 fc5a 	bl	800cd70 <__malloc_lock>
 800c4bc:	4a1d      	ldr	r2, [pc, #116]	; (800c534 <_free_r+0x90>)
 800c4be:	6813      	ldr	r3, [r2, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d105      	bne.n	800c4d0 <_free_r+0x2c>
 800c4c4:	6063      	str	r3, [r4, #4]
 800c4c6:	6014      	str	r4, [r2, #0]
 800c4c8:	0028      	movs	r0, r5
 800c4ca:	f000 fc59 	bl	800cd80 <__malloc_unlock>
 800c4ce:	bd70      	pop	{r4, r5, r6, pc}
 800c4d0:	42a3      	cmp	r3, r4
 800c4d2:	d908      	bls.n	800c4e6 <_free_r+0x42>
 800c4d4:	6820      	ldr	r0, [r4, #0]
 800c4d6:	1821      	adds	r1, r4, r0
 800c4d8:	428b      	cmp	r3, r1
 800c4da:	d1f3      	bne.n	800c4c4 <_free_r+0x20>
 800c4dc:	6819      	ldr	r1, [r3, #0]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	1809      	adds	r1, r1, r0
 800c4e2:	6021      	str	r1, [r4, #0]
 800c4e4:	e7ee      	b.n	800c4c4 <_free_r+0x20>
 800c4e6:	001a      	movs	r2, r3
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <_free_r+0x4e>
 800c4ee:	42a3      	cmp	r3, r4
 800c4f0:	d9f9      	bls.n	800c4e6 <_free_r+0x42>
 800c4f2:	6811      	ldr	r1, [r2, #0]
 800c4f4:	1850      	adds	r0, r2, r1
 800c4f6:	42a0      	cmp	r0, r4
 800c4f8:	d10b      	bne.n	800c512 <_free_r+0x6e>
 800c4fa:	6820      	ldr	r0, [r4, #0]
 800c4fc:	1809      	adds	r1, r1, r0
 800c4fe:	1850      	adds	r0, r2, r1
 800c500:	6011      	str	r1, [r2, #0]
 800c502:	4283      	cmp	r3, r0
 800c504:	d1e0      	bne.n	800c4c8 <_free_r+0x24>
 800c506:	6818      	ldr	r0, [r3, #0]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	1841      	adds	r1, r0, r1
 800c50c:	6011      	str	r1, [r2, #0]
 800c50e:	6053      	str	r3, [r2, #4]
 800c510:	e7da      	b.n	800c4c8 <_free_r+0x24>
 800c512:	42a0      	cmp	r0, r4
 800c514:	d902      	bls.n	800c51c <_free_r+0x78>
 800c516:	230c      	movs	r3, #12
 800c518:	602b      	str	r3, [r5, #0]
 800c51a:	e7d5      	b.n	800c4c8 <_free_r+0x24>
 800c51c:	6820      	ldr	r0, [r4, #0]
 800c51e:	1821      	adds	r1, r4, r0
 800c520:	428b      	cmp	r3, r1
 800c522:	d103      	bne.n	800c52c <_free_r+0x88>
 800c524:	6819      	ldr	r1, [r3, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	1809      	adds	r1, r1, r0
 800c52a:	6021      	str	r1, [r4, #0]
 800c52c:	6063      	str	r3, [r4, #4]
 800c52e:	6054      	str	r4, [r2, #4]
 800c530:	e7ca      	b.n	800c4c8 <_free_r+0x24>
 800c532:	46c0      	nop			; (mov r8, r8)
 800c534:	200007c0 	.word	0x200007c0

0800c538 <rshift>:
 800c538:	0002      	movs	r2, r0
 800c53a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c53c:	6904      	ldr	r4, [r0, #16]
 800c53e:	114b      	asrs	r3, r1, #5
 800c540:	b085      	sub	sp, #20
 800c542:	3214      	adds	r2, #20
 800c544:	9302      	str	r3, [sp, #8]
 800c546:	114d      	asrs	r5, r1, #5
 800c548:	0013      	movs	r3, r2
 800c54a:	42ac      	cmp	r4, r5
 800c54c:	dd32      	ble.n	800c5b4 <rshift+0x7c>
 800c54e:	261f      	movs	r6, #31
 800c550:	000f      	movs	r7, r1
 800c552:	114b      	asrs	r3, r1, #5
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	00a5      	lsls	r5, r4, #2
 800c558:	18d3      	adds	r3, r2, r3
 800c55a:	4037      	ands	r7, r6
 800c55c:	1955      	adds	r5, r2, r5
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	9701      	str	r7, [sp, #4]
 800c562:	4231      	tst	r1, r6
 800c564:	d10d      	bne.n	800c582 <rshift+0x4a>
 800c566:	0016      	movs	r6, r2
 800c568:	0019      	movs	r1, r3
 800c56a:	428d      	cmp	r5, r1
 800c56c:	d836      	bhi.n	800c5dc <rshift+0xa4>
 800c56e:	9900      	ldr	r1, [sp, #0]
 800c570:	2300      	movs	r3, #0
 800c572:	3903      	subs	r1, #3
 800c574:	428d      	cmp	r5, r1
 800c576:	d302      	bcc.n	800c57e <rshift+0x46>
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	1ae4      	subs	r4, r4, r3
 800c57c:	00a3      	lsls	r3, r4, #2
 800c57e:	18d3      	adds	r3, r2, r3
 800c580:	e018      	b.n	800c5b4 <rshift+0x7c>
 800c582:	2120      	movs	r1, #32
 800c584:	9e01      	ldr	r6, [sp, #4]
 800c586:	9f01      	ldr	r7, [sp, #4]
 800c588:	1b89      	subs	r1, r1, r6
 800c58a:	9e00      	ldr	r6, [sp, #0]
 800c58c:	9103      	str	r1, [sp, #12]
 800c58e:	ce02      	ldmia	r6!, {r1}
 800c590:	4694      	mov	ip, r2
 800c592:	40f9      	lsrs	r1, r7
 800c594:	42b5      	cmp	r5, r6
 800c596:	d816      	bhi.n	800c5c6 <rshift+0x8e>
 800c598:	9e00      	ldr	r6, [sp, #0]
 800c59a:	2300      	movs	r3, #0
 800c59c:	3601      	adds	r6, #1
 800c59e:	42b5      	cmp	r5, r6
 800c5a0:	d303      	bcc.n	800c5aa <rshift+0x72>
 800c5a2:	9b02      	ldr	r3, [sp, #8]
 800c5a4:	1ae3      	subs	r3, r4, r3
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	3b04      	subs	r3, #4
 800c5aa:	18d3      	adds	r3, r2, r3
 800c5ac:	6019      	str	r1, [r3, #0]
 800c5ae:	2900      	cmp	r1, #0
 800c5b0:	d000      	beq.n	800c5b4 <rshift+0x7c>
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	1a99      	subs	r1, r3, r2
 800c5b6:	1089      	asrs	r1, r1, #2
 800c5b8:	6101      	str	r1, [r0, #16]
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d101      	bne.n	800c5c2 <rshift+0x8a>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	6143      	str	r3, [r0, #20]
 800c5c2:	b005      	add	sp, #20
 800c5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c6:	6837      	ldr	r7, [r6, #0]
 800c5c8:	9b03      	ldr	r3, [sp, #12]
 800c5ca:	409f      	lsls	r7, r3
 800c5cc:	430f      	orrs	r7, r1
 800c5ce:	4661      	mov	r1, ip
 800c5d0:	c180      	stmia	r1!, {r7}
 800c5d2:	468c      	mov	ip, r1
 800c5d4:	9b01      	ldr	r3, [sp, #4]
 800c5d6:	ce02      	ldmia	r6!, {r1}
 800c5d8:	40d9      	lsrs	r1, r3
 800c5da:	e7db      	b.n	800c594 <rshift+0x5c>
 800c5dc:	c980      	ldmia	r1!, {r7}
 800c5de:	c680      	stmia	r6!, {r7}
 800c5e0:	e7c3      	b.n	800c56a <rshift+0x32>

0800c5e2 <__hexdig_fun>:
 800c5e2:	0002      	movs	r2, r0
 800c5e4:	3a30      	subs	r2, #48	; 0x30
 800c5e6:	0003      	movs	r3, r0
 800c5e8:	2a09      	cmp	r2, #9
 800c5ea:	d802      	bhi.n	800c5f2 <__hexdig_fun+0x10>
 800c5ec:	3b20      	subs	r3, #32
 800c5ee:	b2d8      	uxtb	r0, r3
 800c5f0:	4770      	bx	lr
 800c5f2:	0002      	movs	r2, r0
 800c5f4:	3a61      	subs	r2, #97	; 0x61
 800c5f6:	2a05      	cmp	r2, #5
 800c5f8:	d801      	bhi.n	800c5fe <__hexdig_fun+0x1c>
 800c5fa:	3b47      	subs	r3, #71	; 0x47
 800c5fc:	e7f7      	b.n	800c5ee <__hexdig_fun+0xc>
 800c5fe:	001a      	movs	r2, r3
 800c600:	3a41      	subs	r2, #65	; 0x41
 800c602:	2000      	movs	r0, #0
 800c604:	2a05      	cmp	r2, #5
 800c606:	d8f3      	bhi.n	800c5f0 <__hexdig_fun+0xe>
 800c608:	3b27      	subs	r3, #39	; 0x27
 800c60a:	e7f0      	b.n	800c5ee <__hexdig_fun+0xc>

0800c60c <__gethex>:
 800c60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c60e:	b089      	sub	sp, #36	; 0x24
 800c610:	9307      	str	r3, [sp, #28]
 800c612:	2302      	movs	r3, #2
 800c614:	9201      	str	r2, [sp, #4]
 800c616:	680a      	ldr	r2, [r1, #0]
 800c618:	425b      	negs	r3, r3
 800c61a:	9003      	str	r0, [sp, #12]
 800c61c:	9106      	str	r1, [sp, #24]
 800c61e:	1c96      	adds	r6, r2, #2
 800c620:	1a9b      	subs	r3, r3, r2
 800c622:	199a      	adds	r2, r3, r6
 800c624:	9600      	str	r6, [sp, #0]
 800c626:	9205      	str	r2, [sp, #20]
 800c628:	9a00      	ldr	r2, [sp, #0]
 800c62a:	3601      	adds	r6, #1
 800c62c:	7810      	ldrb	r0, [r2, #0]
 800c62e:	2830      	cmp	r0, #48	; 0x30
 800c630:	d0f7      	beq.n	800c622 <__gethex+0x16>
 800c632:	f7ff ffd6 	bl	800c5e2 <__hexdig_fun>
 800c636:	2300      	movs	r3, #0
 800c638:	001d      	movs	r5, r3
 800c63a:	9302      	str	r3, [sp, #8]
 800c63c:	4298      	cmp	r0, r3
 800c63e:	d11d      	bne.n	800c67c <__gethex+0x70>
 800c640:	2201      	movs	r2, #1
 800c642:	49a6      	ldr	r1, [pc, #664]	; (800c8dc <__gethex+0x2d0>)
 800c644:	9800      	ldr	r0, [sp, #0]
 800c646:	f7fe ff61 	bl	800b50c <strncmp>
 800c64a:	0007      	movs	r7, r0
 800c64c:	42a8      	cmp	r0, r5
 800c64e:	d169      	bne.n	800c724 <__gethex+0x118>
 800c650:	9b00      	ldr	r3, [sp, #0]
 800c652:	0034      	movs	r4, r6
 800c654:	7858      	ldrb	r0, [r3, #1]
 800c656:	f7ff ffc4 	bl	800c5e2 <__hexdig_fun>
 800c65a:	2301      	movs	r3, #1
 800c65c:	9302      	str	r3, [sp, #8]
 800c65e:	42a8      	cmp	r0, r5
 800c660:	d02f      	beq.n	800c6c2 <__gethex+0xb6>
 800c662:	9600      	str	r6, [sp, #0]
 800c664:	9b00      	ldr	r3, [sp, #0]
 800c666:	7818      	ldrb	r0, [r3, #0]
 800c668:	2830      	cmp	r0, #48	; 0x30
 800c66a:	d009      	beq.n	800c680 <__gethex+0x74>
 800c66c:	f7ff ffb9 	bl	800c5e2 <__hexdig_fun>
 800c670:	4242      	negs	r2, r0
 800c672:	4142      	adcs	r2, r0
 800c674:	2301      	movs	r3, #1
 800c676:	0035      	movs	r5, r6
 800c678:	9202      	str	r2, [sp, #8]
 800c67a:	9305      	str	r3, [sp, #20]
 800c67c:	9c00      	ldr	r4, [sp, #0]
 800c67e:	e004      	b.n	800c68a <__gethex+0x7e>
 800c680:	9b00      	ldr	r3, [sp, #0]
 800c682:	3301      	adds	r3, #1
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	e7ed      	b.n	800c664 <__gethex+0x58>
 800c688:	3401      	adds	r4, #1
 800c68a:	7820      	ldrb	r0, [r4, #0]
 800c68c:	f7ff ffa9 	bl	800c5e2 <__hexdig_fun>
 800c690:	1e07      	subs	r7, r0, #0
 800c692:	d1f9      	bne.n	800c688 <__gethex+0x7c>
 800c694:	2201      	movs	r2, #1
 800c696:	0020      	movs	r0, r4
 800c698:	4990      	ldr	r1, [pc, #576]	; (800c8dc <__gethex+0x2d0>)
 800c69a:	f7fe ff37 	bl	800b50c <strncmp>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d10d      	bne.n	800c6be <__gethex+0xb2>
 800c6a2:	2d00      	cmp	r5, #0
 800c6a4:	d106      	bne.n	800c6b4 <__gethex+0xa8>
 800c6a6:	3401      	adds	r4, #1
 800c6a8:	0025      	movs	r5, r4
 800c6aa:	7820      	ldrb	r0, [r4, #0]
 800c6ac:	f7ff ff99 	bl	800c5e2 <__hexdig_fun>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d102      	bne.n	800c6ba <__gethex+0xae>
 800c6b4:	1b2d      	subs	r5, r5, r4
 800c6b6:	00af      	lsls	r7, r5, #2
 800c6b8:	e003      	b.n	800c6c2 <__gethex+0xb6>
 800c6ba:	3401      	adds	r4, #1
 800c6bc:	e7f5      	b.n	800c6aa <__gethex+0x9e>
 800c6be:	2d00      	cmp	r5, #0
 800c6c0:	d1f8      	bne.n	800c6b4 <__gethex+0xa8>
 800c6c2:	2220      	movs	r2, #32
 800c6c4:	7823      	ldrb	r3, [r4, #0]
 800c6c6:	0026      	movs	r6, r4
 800c6c8:	4393      	bics	r3, r2
 800c6ca:	2b50      	cmp	r3, #80	; 0x50
 800c6cc:	d11d      	bne.n	800c70a <__gethex+0xfe>
 800c6ce:	7863      	ldrb	r3, [r4, #1]
 800c6d0:	2b2b      	cmp	r3, #43	; 0x2b
 800c6d2:	d02c      	beq.n	800c72e <__gethex+0x122>
 800c6d4:	2b2d      	cmp	r3, #45	; 0x2d
 800c6d6:	d02e      	beq.n	800c736 <__gethex+0x12a>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	1c66      	adds	r6, r4, #1
 800c6dc:	9304      	str	r3, [sp, #16]
 800c6de:	7830      	ldrb	r0, [r6, #0]
 800c6e0:	f7ff ff7f 	bl	800c5e2 <__hexdig_fun>
 800c6e4:	1e43      	subs	r3, r0, #1
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b18      	cmp	r3, #24
 800c6ea:	d82b      	bhi.n	800c744 <__gethex+0x138>
 800c6ec:	3810      	subs	r0, #16
 800c6ee:	0005      	movs	r5, r0
 800c6f0:	7870      	ldrb	r0, [r6, #1]
 800c6f2:	f7ff ff76 	bl	800c5e2 <__hexdig_fun>
 800c6f6:	1e43      	subs	r3, r0, #1
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	3601      	adds	r6, #1
 800c6fc:	2b18      	cmp	r3, #24
 800c6fe:	d91c      	bls.n	800c73a <__gethex+0x12e>
 800c700:	9b04      	ldr	r3, [sp, #16]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d000      	beq.n	800c708 <__gethex+0xfc>
 800c706:	426d      	negs	r5, r5
 800c708:	197f      	adds	r7, r7, r5
 800c70a:	9b06      	ldr	r3, [sp, #24]
 800c70c:	601e      	str	r6, [r3, #0]
 800c70e:	9b02      	ldr	r3, [sp, #8]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d019      	beq.n	800c748 <__gethex+0x13c>
 800c714:	2600      	movs	r6, #0
 800c716:	9b05      	ldr	r3, [sp, #20]
 800c718:	42b3      	cmp	r3, r6
 800c71a:	d100      	bne.n	800c71e <__gethex+0x112>
 800c71c:	3606      	adds	r6, #6
 800c71e:	0030      	movs	r0, r6
 800c720:	b009      	add	sp, #36	; 0x24
 800c722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c724:	2301      	movs	r3, #1
 800c726:	2700      	movs	r7, #0
 800c728:	9c00      	ldr	r4, [sp, #0]
 800c72a:	9302      	str	r3, [sp, #8]
 800c72c:	e7c9      	b.n	800c6c2 <__gethex+0xb6>
 800c72e:	2300      	movs	r3, #0
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	1ca6      	adds	r6, r4, #2
 800c734:	e7d3      	b.n	800c6de <__gethex+0xd2>
 800c736:	2301      	movs	r3, #1
 800c738:	e7fa      	b.n	800c730 <__gethex+0x124>
 800c73a:	230a      	movs	r3, #10
 800c73c:	435d      	muls	r5, r3
 800c73e:	182d      	adds	r5, r5, r0
 800c740:	3d10      	subs	r5, #16
 800c742:	e7d5      	b.n	800c6f0 <__gethex+0xe4>
 800c744:	0026      	movs	r6, r4
 800c746:	e7e0      	b.n	800c70a <__gethex+0xfe>
 800c748:	9b00      	ldr	r3, [sp, #0]
 800c74a:	9902      	ldr	r1, [sp, #8]
 800c74c:	1ae3      	subs	r3, r4, r3
 800c74e:	3b01      	subs	r3, #1
 800c750:	2b07      	cmp	r3, #7
 800c752:	dc0a      	bgt.n	800c76a <__gethex+0x15e>
 800c754:	9803      	ldr	r0, [sp, #12]
 800c756:	f000 fb1b 	bl	800cd90 <_Balloc>
 800c75a:	1e05      	subs	r5, r0, #0
 800c75c:	d108      	bne.n	800c770 <__gethex+0x164>
 800c75e:	002a      	movs	r2, r5
 800c760:	21e4      	movs	r1, #228	; 0xe4
 800c762:	4b5f      	ldr	r3, [pc, #380]	; (800c8e0 <__gethex+0x2d4>)
 800c764:	485f      	ldr	r0, [pc, #380]	; (800c8e4 <__gethex+0x2d8>)
 800c766:	f7fe ffe1 	bl	800b72c <__assert_func>
 800c76a:	3101      	adds	r1, #1
 800c76c:	105b      	asrs	r3, r3, #1
 800c76e:	e7ef      	b.n	800c750 <__gethex+0x144>
 800c770:	0003      	movs	r3, r0
 800c772:	3314      	adds	r3, #20
 800c774:	9302      	str	r3, [sp, #8]
 800c776:	9305      	str	r3, [sp, #20]
 800c778:	2300      	movs	r3, #0
 800c77a:	001e      	movs	r6, r3
 800c77c:	9304      	str	r3, [sp, #16]
 800c77e:	9b00      	ldr	r3, [sp, #0]
 800c780:	42a3      	cmp	r3, r4
 800c782:	d33f      	bcc.n	800c804 <__gethex+0x1f8>
 800c784:	9c05      	ldr	r4, [sp, #20]
 800c786:	9b02      	ldr	r3, [sp, #8]
 800c788:	c440      	stmia	r4!, {r6}
 800c78a:	1ae4      	subs	r4, r4, r3
 800c78c:	10a4      	asrs	r4, r4, #2
 800c78e:	0030      	movs	r0, r6
 800c790:	612c      	str	r4, [r5, #16]
 800c792:	f000 fbf5 	bl	800cf80 <__hi0bits>
 800c796:	9b01      	ldr	r3, [sp, #4]
 800c798:	0164      	lsls	r4, r4, #5
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	1a26      	subs	r6, r4, r0
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	429e      	cmp	r6, r3
 800c7a2:	dd51      	ble.n	800c848 <__gethex+0x23c>
 800c7a4:	1af6      	subs	r6, r6, r3
 800c7a6:	0031      	movs	r1, r6
 800c7a8:	0028      	movs	r0, r5
 800c7aa:	f000 ff89 	bl	800d6c0 <__any_on>
 800c7ae:	1e04      	subs	r4, r0, #0
 800c7b0:	d016      	beq.n	800c7e0 <__gethex+0x1d4>
 800c7b2:	2401      	movs	r4, #1
 800c7b4:	231f      	movs	r3, #31
 800c7b6:	0020      	movs	r0, r4
 800c7b8:	1e72      	subs	r2, r6, #1
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	4098      	lsls	r0, r3
 800c7be:	0003      	movs	r3, r0
 800c7c0:	1151      	asrs	r1, r2, #5
 800c7c2:	9802      	ldr	r0, [sp, #8]
 800c7c4:	0089      	lsls	r1, r1, #2
 800c7c6:	5809      	ldr	r1, [r1, r0]
 800c7c8:	4219      	tst	r1, r3
 800c7ca:	d009      	beq.n	800c7e0 <__gethex+0x1d4>
 800c7cc:	42a2      	cmp	r2, r4
 800c7ce:	dd06      	ble.n	800c7de <__gethex+0x1d2>
 800c7d0:	0028      	movs	r0, r5
 800c7d2:	1eb1      	subs	r1, r6, #2
 800c7d4:	f000 ff74 	bl	800d6c0 <__any_on>
 800c7d8:	3402      	adds	r4, #2
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d100      	bne.n	800c7e0 <__gethex+0x1d4>
 800c7de:	2402      	movs	r4, #2
 800c7e0:	0031      	movs	r1, r6
 800c7e2:	0028      	movs	r0, r5
 800c7e4:	f7ff fea8 	bl	800c538 <rshift>
 800c7e8:	19bf      	adds	r7, r7, r6
 800c7ea:	9b01      	ldr	r3, [sp, #4]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	42bb      	cmp	r3, r7
 800c7f0:	da3a      	bge.n	800c868 <__gethex+0x25c>
 800c7f2:	0029      	movs	r1, r5
 800c7f4:	9803      	ldr	r0, [sp, #12]
 800c7f6:	f000 fb0f 	bl	800ce18 <_Bfree>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7fe:	26a3      	movs	r6, #163	; 0xa3
 800c800:	6013      	str	r3, [r2, #0]
 800c802:	e78c      	b.n	800c71e <__gethex+0x112>
 800c804:	3c01      	subs	r4, #1
 800c806:	7823      	ldrb	r3, [r4, #0]
 800c808:	2b2e      	cmp	r3, #46	; 0x2e
 800c80a:	d012      	beq.n	800c832 <__gethex+0x226>
 800c80c:	9b04      	ldr	r3, [sp, #16]
 800c80e:	2b20      	cmp	r3, #32
 800c810:	d104      	bne.n	800c81c <__gethex+0x210>
 800c812:	9b05      	ldr	r3, [sp, #20]
 800c814:	c340      	stmia	r3!, {r6}
 800c816:	2600      	movs	r6, #0
 800c818:	9305      	str	r3, [sp, #20]
 800c81a:	9604      	str	r6, [sp, #16]
 800c81c:	7820      	ldrb	r0, [r4, #0]
 800c81e:	f7ff fee0 	bl	800c5e2 <__hexdig_fun>
 800c822:	230f      	movs	r3, #15
 800c824:	4018      	ands	r0, r3
 800c826:	9b04      	ldr	r3, [sp, #16]
 800c828:	4098      	lsls	r0, r3
 800c82a:	3304      	adds	r3, #4
 800c82c:	4306      	orrs	r6, r0
 800c82e:	9304      	str	r3, [sp, #16]
 800c830:	e7a5      	b.n	800c77e <__gethex+0x172>
 800c832:	9b00      	ldr	r3, [sp, #0]
 800c834:	42a3      	cmp	r3, r4
 800c836:	d8e9      	bhi.n	800c80c <__gethex+0x200>
 800c838:	2201      	movs	r2, #1
 800c83a:	0020      	movs	r0, r4
 800c83c:	4927      	ldr	r1, [pc, #156]	; (800c8dc <__gethex+0x2d0>)
 800c83e:	f7fe fe65 	bl	800b50c <strncmp>
 800c842:	2800      	cmp	r0, #0
 800c844:	d1e2      	bne.n	800c80c <__gethex+0x200>
 800c846:	e79a      	b.n	800c77e <__gethex+0x172>
 800c848:	9b00      	ldr	r3, [sp, #0]
 800c84a:	2400      	movs	r4, #0
 800c84c:	429e      	cmp	r6, r3
 800c84e:	dacc      	bge.n	800c7ea <__gethex+0x1de>
 800c850:	1b9e      	subs	r6, r3, r6
 800c852:	0029      	movs	r1, r5
 800c854:	0032      	movs	r2, r6
 800c856:	9803      	ldr	r0, [sp, #12]
 800c858:	f000 fcfe 	bl	800d258 <__lshift>
 800c85c:	0003      	movs	r3, r0
 800c85e:	3314      	adds	r3, #20
 800c860:	0005      	movs	r5, r0
 800c862:	1bbf      	subs	r7, r7, r6
 800c864:	9302      	str	r3, [sp, #8]
 800c866:	e7c0      	b.n	800c7ea <__gethex+0x1de>
 800c868:	9b01      	ldr	r3, [sp, #4]
 800c86a:	685e      	ldr	r6, [r3, #4]
 800c86c:	42be      	cmp	r6, r7
 800c86e:	dd70      	ble.n	800c952 <__gethex+0x346>
 800c870:	9b00      	ldr	r3, [sp, #0]
 800c872:	1bf6      	subs	r6, r6, r7
 800c874:	42b3      	cmp	r3, r6
 800c876:	dc37      	bgt.n	800c8e8 <__gethex+0x2dc>
 800c878:	9b01      	ldr	r3, [sp, #4]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d024      	beq.n	800c8ca <__gethex+0x2be>
 800c880:	2b03      	cmp	r3, #3
 800c882:	d026      	beq.n	800c8d2 <__gethex+0x2c6>
 800c884:	2b01      	cmp	r3, #1
 800c886:	d117      	bne.n	800c8b8 <__gethex+0x2ac>
 800c888:	9b00      	ldr	r3, [sp, #0]
 800c88a:	42b3      	cmp	r3, r6
 800c88c:	d114      	bne.n	800c8b8 <__gethex+0x2ac>
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d10b      	bne.n	800c8aa <__gethex+0x29e>
 800c892:	9b01      	ldr	r3, [sp, #4]
 800c894:	9a07      	ldr	r2, [sp, #28]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	2662      	movs	r6, #98	; 0x62
 800c89a:	6013      	str	r3, [r2, #0]
 800c89c:	2301      	movs	r3, #1
 800c89e:	9a02      	ldr	r2, [sp, #8]
 800c8a0:	612b      	str	r3, [r5, #16]
 800c8a2:	6013      	str	r3, [r2, #0]
 800c8a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8a6:	601d      	str	r5, [r3, #0]
 800c8a8:	e739      	b.n	800c71e <__gethex+0x112>
 800c8aa:	9900      	ldr	r1, [sp, #0]
 800c8ac:	0028      	movs	r0, r5
 800c8ae:	3901      	subs	r1, #1
 800c8b0:	f000 ff06 	bl	800d6c0 <__any_on>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d1ec      	bne.n	800c892 <__gethex+0x286>
 800c8b8:	0029      	movs	r1, r5
 800c8ba:	9803      	ldr	r0, [sp, #12]
 800c8bc:	f000 faac 	bl	800ce18 <_Bfree>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8c4:	2650      	movs	r6, #80	; 0x50
 800c8c6:	6013      	str	r3, [r2, #0]
 800c8c8:	e729      	b.n	800c71e <__gethex+0x112>
 800c8ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1f3      	bne.n	800c8b8 <__gethex+0x2ac>
 800c8d0:	e7df      	b.n	800c892 <__gethex+0x286>
 800c8d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1dc      	bne.n	800c892 <__gethex+0x286>
 800c8d8:	e7ee      	b.n	800c8b8 <__gethex+0x2ac>
 800c8da:	46c0      	nop			; (mov r8, r8)
 800c8dc:	0800e3c0 	.word	0x0800e3c0
 800c8e0:	0800e566 	.word	0x0800e566
 800c8e4:	0800e577 	.word	0x0800e577
 800c8e8:	1e77      	subs	r7, r6, #1
 800c8ea:	2c00      	cmp	r4, #0
 800c8ec:	d12f      	bne.n	800c94e <__gethex+0x342>
 800c8ee:	2f00      	cmp	r7, #0
 800c8f0:	d004      	beq.n	800c8fc <__gethex+0x2f0>
 800c8f2:	0039      	movs	r1, r7
 800c8f4:	0028      	movs	r0, r5
 800c8f6:	f000 fee3 	bl	800d6c0 <__any_on>
 800c8fa:	0004      	movs	r4, r0
 800c8fc:	231f      	movs	r3, #31
 800c8fe:	117a      	asrs	r2, r7, #5
 800c900:	401f      	ands	r7, r3
 800c902:	3b1e      	subs	r3, #30
 800c904:	40bb      	lsls	r3, r7
 800c906:	9902      	ldr	r1, [sp, #8]
 800c908:	0092      	lsls	r2, r2, #2
 800c90a:	5852      	ldr	r2, [r2, r1]
 800c90c:	421a      	tst	r2, r3
 800c90e:	d001      	beq.n	800c914 <__gethex+0x308>
 800c910:	2302      	movs	r3, #2
 800c912:	431c      	orrs	r4, r3
 800c914:	9b00      	ldr	r3, [sp, #0]
 800c916:	0031      	movs	r1, r6
 800c918:	1b9b      	subs	r3, r3, r6
 800c91a:	2602      	movs	r6, #2
 800c91c:	0028      	movs	r0, r5
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	f7ff fe0a 	bl	800c538 <rshift>
 800c924:	9b01      	ldr	r3, [sp, #4]
 800c926:	685f      	ldr	r7, [r3, #4]
 800c928:	2c00      	cmp	r4, #0
 800c92a:	d041      	beq.n	800c9b0 <__gethex+0x3a4>
 800c92c:	9b01      	ldr	r3, [sp, #4]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	2b02      	cmp	r3, #2
 800c932:	d010      	beq.n	800c956 <__gethex+0x34a>
 800c934:	2b03      	cmp	r3, #3
 800c936:	d012      	beq.n	800c95e <__gethex+0x352>
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d106      	bne.n	800c94a <__gethex+0x33e>
 800c93c:	07a2      	lsls	r2, r4, #30
 800c93e:	d504      	bpl.n	800c94a <__gethex+0x33e>
 800c940:	9a02      	ldr	r2, [sp, #8]
 800c942:	6812      	ldr	r2, [r2, #0]
 800c944:	4314      	orrs	r4, r2
 800c946:	421c      	tst	r4, r3
 800c948:	d10c      	bne.n	800c964 <__gethex+0x358>
 800c94a:	2310      	movs	r3, #16
 800c94c:	e02f      	b.n	800c9ae <__gethex+0x3a2>
 800c94e:	2401      	movs	r4, #1
 800c950:	e7d4      	b.n	800c8fc <__gethex+0x2f0>
 800c952:	2601      	movs	r6, #1
 800c954:	e7e8      	b.n	800c928 <__gethex+0x31c>
 800c956:	2301      	movs	r3, #1
 800c958:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c95a:	1a9b      	subs	r3, r3, r2
 800c95c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c95e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c960:	2b00      	cmp	r3, #0
 800c962:	d0f2      	beq.n	800c94a <__gethex+0x33e>
 800c964:	692b      	ldr	r3, [r5, #16]
 800c966:	2000      	movs	r0, #0
 800c968:	9302      	str	r3, [sp, #8]
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	9304      	str	r3, [sp, #16]
 800c96e:	002b      	movs	r3, r5
 800c970:	9a04      	ldr	r2, [sp, #16]
 800c972:	3314      	adds	r3, #20
 800c974:	1899      	adds	r1, r3, r2
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	1c54      	adds	r4, r2, #1
 800c97a:	d01e      	beq.n	800c9ba <__gethex+0x3ae>
 800c97c:	3201      	adds	r2, #1
 800c97e:	601a      	str	r2, [r3, #0]
 800c980:	002b      	movs	r3, r5
 800c982:	3314      	adds	r3, #20
 800c984:	2e02      	cmp	r6, #2
 800c986:	d141      	bne.n	800ca0c <__gethex+0x400>
 800c988:	9a01      	ldr	r2, [sp, #4]
 800c98a:	9900      	ldr	r1, [sp, #0]
 800c98c:	6812      	ldr	r2, [r2, #0]
 800c98e:	3a01      	subs	r2, #1
 800c990:	428a      	cmp	r2, r1
 800c992:	d10b      	bne.n	800c9ac <__gethex+0x3a0>
 800c994:	221f      	movs	r2, #31
 800c996:	9800      	ldr	r0, [sp, #0]
 800c998:	1149      	asrs	r1, r1, #5
 800c99a:	4002      	ands	r2, r0
 800c99c:	2001      	movs	r0, #1
 800c99e:	0004      	movs	r4, r0
 800c9a0:	4094      	lsls	r4, r2
 800c9a2:	0089      	lsls	r1, r1, #2
 800c9a4:	58cb      	ldr	r3, [r1, r3]
 800c9a6:	4223      	tst	r3, r4
 800c9a8:	d000      	beq.n	800c9ac <__gethex+0x3a0>
 800c9aa:	2601      	movs	r6, #1
 800c9ac:	2320      	movs	r3, #32
 800c9ae:	431e      	orrs	r6, r3
 800c9b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9b2:	601d      	str	r5, [r3, #0]
 800c9b4:	9b07      	ldr	r3, [sp, #28]
 800c9b6:	601f      	str	r7, [r3, #0]
 800c9b8:	e6b1      	b.n	800c71e <__gethex+0x112>
 800c9ba:	c301      	stmia	r3!, {r0}
 800c9bc:	4299      	cmp	r1, r3
 800c9be:	d8da      	bhi.n	800c976 <__gethex+0x36a>
 800c9c0:	68ab      	ldr	r3, [r5, #8]
 800c9c2:	9a02      	ldr	r2, [sp, #8]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	db18      	blt.n	800c9fa <__gethex+0x3ee>
 800c9c8:	6869      	ldr	r1, [r5, #4]
 800c9ca:	9803      	ldr	r0, [sp, #12]
 800c9cc:	3101      	adds	r1, #1
 800c9ce:	f000 f9df 	bl	800cd90 <_Balloc>
 800c9d2:	1e04      	subs	r4, r0, #0
 800c9d4:	d104      	bne.n	800c9e0 <__gethex+0x3d4>
 800c9d6:	0022      	movs	r2, r4
 800c9d8:	2184      	movs	r1, #132	; 0x84
 800c9da:	4b1c      	ldr	r3, [pc, #112]	; (800ca4c <__gethex+0x440>)
 800c9dc:	481c      	ldr	r0, [pc, #112]	; (800ca50 <__gethex+0x444>)
 800c9de:	e6c2      	b.n	800c766 <__gethex+0x15a>
 800c9e0:	0029      	movs	r1, r5
 800c9e2:	692a      	ldr	r2, [r5, #16]
 800c9e4:	310c      	adds	r1, #12
 800c9e6:	3202      	adds	r2, #2
 800c9e8:	0092      	lsls	r2, r2, #2
 800c9ea:	300c      	adds	r0, #12
 800c9ec:	f7fe fe8e 	bl	800b70c <memcpy>
 800c9f0:	0029      	movs	r1, r5
 800c9f2:	9803      	ldr	r0, [sp, #12]
 800c9f4:	f000 fa10 	bl	800ce18 <_Bfree>
 800c9f8:	0025      	movs	r5, r4
 800c9fa:	692b      	ldr	r3, [r5, #16]
 800c9fc:	1c5a      	adds	r2, r3, #1
 800c9fe:	612a      	str	r2, [r5, #16]
 800ca00:	2201      	movs	r2, #1
 800ca02:	3304      	adds	r3, #4
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	18eb      	adds	r3, r5, r3
 800ca08:	605a      	str	r2, [r3, #4]
 800ca0a:	e7b9      	b.n	800c980 <__gethex+0x374>
 800ca0c:	692a      	ldr	r2, [r5, #16]
 800ca0e:	9902      	ldr	r1, [sp, #8]
 800ca10:	428a      	cmp	r2, r1
 800ca12:	dd09      	ble.n	800ca28 <__gethex+0x41c>
 800ca14:	2101      	movs	r1, #1
 800ca16:	0028      	movs	r0, r5
 800ca18:	f7ff fd8e 	bl	800c538 <rshift>
 800ca1c:	9b01      	ldr	r3, [sp, #4]
 800ca1e:	3701      	adds	r7, #1
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	42bb      	cmp	r3, r7
 800ca24:	dac1      	bge.n	800c9aa <__gethex+0x39e>
 800ca26:	e6e4      	b.n	800c7f2 <__gethex+0x1e6>
 800ca28:	221f      	movs	r2, #31
 800ca2a:	9c00      	ldr	r4, [sp, #0]
 800ca2c:	9900      	ldr	r1, [sp, #0]
 800ca2e:	2601      	movs	r6, #1
 800ca30:	4014      	ands	r4, r2
 800ca32:	4211      	tst	r1, r2
 800ca34:	d0ba      	beq.n	800c9ac <__gethex+0x3a0>
 800ca36:	9a04      	ldr	r2, [sp, #16]
 800ca38:	189b      	adds	r3, r3, r2
 800ca3a:	3b04      	subs	r3, #4
 800ca3c:	6818      	ldr	r0, [r3, #0]
 800ca3e:	f000 fa9f 	bl	800cf80 <__hi0bits>
 800ca42:	2320      	movs	r3, #32
 800ca44:	1b1b      	subs	r3, r3, r4
 800ca46:	4298      	cmp	r0, r3
 800ca48:	dbe4      	blt.n	800ca14 <__gethex+0x408>
 800ca4a:	e7af      	b.n	800c9ac <__gethex+0x3a0>
 800ca4c:	0800e566 	.word	0x0800e566
 800ca50:	0800e577 	.word	0x0800e577

0800ca54 <L_shift>:
 800ca54:	2308      	movs	r3, #8
 800ca56:	b570      	push	{r4, r5, r6, lr}
 800ca58:	2520      	movs	r5, #32
 800ca5a:	1a9a      	subs	r2, r3, r2
 800ca5c:	0092      	lsls	r2, r2, #2
 800ca5e:	1aad      	subs	r5, r5, r2
 800ca60:	6843      	ldr	r3, [r0, #4]
 800ca62:	6804      	ldr	r4, [r0, #0]
 800ca64:	001e      	movs	r6, r3
 800ca66:	40ae      	lsls	r6, r5
 800ca68:	40d3      	lsrs	r3, r2
 800ca6a:	4334      	orrs	r4, r6
 800ca6c:	6004      	str	r4, [r0, #0]
 800ca6e:	6043      	str	r3, [r0, #4]
 800ca70:	3004      	adds	r0, #4
 800ca72:	4288      	cmp	r0, r1
 800ca74:	d3f4      	bcc.n	800ca60 <L_shift+0xc>
 800ca76:	bd70      	pop	{r4, r5, r6, pc}

0800ca78 <__match>:
 800ca78:	b530      	push	{r4, r5, lr}
 800ca7a:	6803      	ldr	r3, [r0, #0]
 800ca7c:	780c      	ldrb	r4, [r1, #0]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	2c00      	cmp	r4, #0
 800ca82:	d102      	bne.n	800ca8a <__match+0x12>
 800ca84:	6003      	str	r3, [r0, #0]
 800ca86:	2001      	movs	r0, #1
 800ca88:	bd30      	pop	{r4, r5, pc}
 800ca8a:	781a      	ldrb	r2, [r3, #0]
 800ca8c:	0015      	movs	r5, r2
 800ca8e:	3d41      	subs	r5, #65	; 0x41
 800ca90:	2d19      	cmp	r5, #25
 800ca92:	d800      	bhi.n	800ca96 <__match+0x1e>
 800ca94:	3220      	adds	r2, #32
 800ca96:	3101      	adds	r1, #1
 800ca98:	42a2      	cmp	r2, r4
 800ca9a:	d0ef      	beq.n	800ca7c <__match+0x4>
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	e7f3      	b.n	800ca88 <__match+0x10>

0800caa0 <__hexnan>:
 800caa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caa2:	680b      	ldr	r3, [r1, #0]
 800caa4:	b08b      	sub	sp, #44	; 0x2c
 800caa6:	9201      	str	r2, [sp, #4]
 800caa8:	9901      	ldr	r1, [sp, #4]
 800caaa:	115a      	asrs	r2, r3, #5
 800caac:	0092      	lsls	r2, r2, #2
 800caae:	188a      	adds	r2, r1, r2
 800cab0:	9202      	str	r2, [sp, #8]
 800cab2:	0019      	movs	r1, r3
 800cab4:	221f      	movs	r2, #31
 800cab6:	4011      	ands	r1, r2
 800cab8:	9008      	str	r0, [sp, #32]
 800caba:	9106      	str	r1, [sp, #24]
 800cabc:	4213      	tst	r3, r2
 800cabe:	d002      	beq.n	800cac6 <__hexnan+0x26>
 800cac0:	9b02      	ldr	r3, [sp, #8]
 800cac2:	3304      	adds	r3, #4
 800cac4:	9302      	str	r3, [sp, #8]
 800cac6:	9b02      	ldr	r3, [sp, #8]
 800cac8:	2500      	movs	r5, #0
 800caca:	1f1f      	subs	r7, r3, #4
 800cacc:	003e      	movs	r6, r7
 800cace:	003c      	movs	r4, r7
 800cad0:	9b08      	ldr	r3, [sp, #32]
 800cad2:	603d      	str	r5, [r7, #0]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	9507      	str	r5, [sp, #28]
 800cad8:	9305      	str	r3, [sp, #20]
 800cada:	9503      	str	r5, [sp, #12]
 800cadc:	9b05      	ldr	r3, [sp, #20]
 800cade:	3301      	adds	r3, #1
 800cae0:	9309      	str	r3, [sp, #36]	; 0x24
 800cae2:	9b05      	ldr	r3, [sp, #20]
 800cae4:	785b      	ldrb	r3, [r3, #1]
 800cae6:	9304      	str	r3, [sp, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d028      	beq.n	800cb3e <__hexnan+0x9e>
 800caec:	9804      	ldr	r0, [sp, #16]
 800caee:	f7ff fd78 	bl	800c5e2 <__hexdig_fun>
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d154      	bne.n	800cba0 <__hexnan+0x100>
 800caf6:	9b04      	ldr	r3, [sp, #16]
 800caf8:	2b20      	cmp	r3, #32
 800cafa:	d819      	bhi.n	800cb30 <__hexnan+0x90>
 800cafc:	9b03      	ldr	r3, [sp, #12]
 800cafe:	9a07      	ldr	r2, [sp, #28]
 800cb00:	4293      	cmp	r3, r2
 800cb02:	dd12      	ble.n	800cb2a <__hexnan+0x8a>
 800cb04:	42b4      	cmp	r4, r6
 800cb06:	d206      	bcs.n	800cb16 <__hexnan+0x76>
 800cb08:	2d07      	cmp	r5, #7
 800cb0a:	dc04      	bgt.n	800cb16 <__hexnan+0x76>
 800cb0c:	002a      	movs	r2, r5
 800cb0e:	0031      	movs	r1, r6
 800cb10:	0020      	movs	r0, r4
 800cb12:	f7ff ff9f 	bl	800ca54 <L_shift>
 800cb16:	9b01      	ldr	r3, [sp, #4]
 800cb18:	2508      	movs	r5, #8
 800cb1a:	429c      	cmp	r4, r3
 800cb1c:	d905      	bls.n	800cb2a <__hexnan+0x8a>
 800cb1e:	1f26      	subs	r6, r4, #4
 800cb20:	2500      	movs	r5, #0
 800cb22:	0034      	movs	r4, r6
 800cb24:	9b03      	ldr	r3, [sp, #12]
 800cb26:	6035      	str	r5, [r6, #0]
 800cb28:	9307      	str	r3, [sp, #28]
 800cb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2c:	9305      	str	r3, [sp, #20]
 800cb2e:	e7d5      	b.n	800cadc <__hexnan+0x3c>
 800cb30:	9b04      	ldr	r3, [sp, #16]
 800cb32:	2b29      	cmp	r3, #41	; 0x29
 800cb34:	d159      	bne.n	800cbea <__hexnan+0x14a>
 800cb36:	9b05      	ldr	r3, [sp, #20]
 800cb38:	9a08      	ldr	r2, [sp, #32]
 800cb3a:	3302      	adds	r3, #2
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	9b03      	ldr	r3, [sp, #12]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d052      	beq.n	800cbea <__hexnan+0x14a>
 800cb44:	42b4      	cmp	r4, r6
 800cb46:	d206      	bcs.n	800cb56 <__hexnan+0xb6>
 800cb48:	2d07      	cmp	r5, #7
 800cb4a:	dc04      	bgt.n	800cb56 <__hexnan+0xb6>
 800cb4c:	002a      	movs	r2, r5
 800cb4e:	0031      	movs	r1, r6
 800cb50:	0020      	movs	r0, r4
 800cb52:	f7ff ff7f 	bl	800ca54 <L_shift>
 800cb56:	9b01      	ldr	r3, [sp, #4]
 800cb58:	429c      	cmp	r4, r3
 800cb5a:	d935      	bls.n	800cbc8 <__hexnan+0x128>
 800cb5c:	001a      	movs	r2, r3
 800cb5e:	0023      	movs	r3, r4
 800cb60:	cb02      	ldmia	r3!, {r1}
 800cb62:	c202      	stmia	r2!, {r1}
 800cb64:	429f      	cmp	r7, r3
 800cb66:	d2fb      	bcs.n	800cb60 <__hexnan+0xc0>
 800cb68:	9b02      	ldr	r3, [sp, #8]
 800cb6a:	1c62      	adds	r2, r4, #1
 800cb6c:	1ed9      	subs	r1, r3, #3
 800cb6e:	2304      	movs	r3, #4
 800cb70:	4291      	cmp	r1, r2
 800cb72:	d305      	bcc.n	800cb80 <__hexnan+0xe0>
 800cb74:	9b02      	ldr	r3, [sp, #8]
 800cb76:	3b04      	subs	r3, #4
 800cb78:	1b1b      	subs	r3, r3, r4
 800cb7a:	089b      	lsrs	r3, r3, #2
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	9a01      	ldr	r2, [sp, #4]
 800cb82:	18d3      	adds	r3, r2, r3
 800cb84:	2200      	movs	r2, #0
 800cb86:	c304      	stmia	r3!, {r2}
 800cb88:	429f      	cmp	r7, r3
 800cb8a:	d2fc      	bcs.n	800cb86 <__hexnan+0xe6>
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d104      	bne.n	800cb9c <__hexnan+0xfc>
 800cb92:	9b01      	ldr	r3, [sp, #4]
 800cb94:	429f      	cmp	r7, r3
 800cb96:	d126      	bne.n	800cbe6 <__hexnan+0x146>
 800cb98:	2301      	movs	r3, #1
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	2005      	movs	r0, #5
 800cb9e:	e025      	b.n	800cbec <__hexnan+0x14c>
 800cba0:	9b03      	ldr	r3, [sp, #12]
 800cba2:	3501      	adds	r5, #1
 800cba4:	3301      	adds	r3, #1
 800cba6:	9303      	str	r3, [sp, #12]
 800cba8:	2d08      	cmp	r5, #8
 800cbaa:	dd06      	ble.n	800cbba <__hexnan+0x11a>
 800cbac:	9b01      	ldr	r3, [sp, #4]
 800cbae:	429c      	cmp	r4, r3
 800cbb0:	d9bb      	bls.n	800cb2a <__hexnan+0x8a>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	2501      	movs	r5, #1
 800cbb6:	3c04      	subs	r4, #4
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	220f      	movs	r2, #15
 800cbbc:	6823      	ldr	r3, [r4, #0]
 800cbbe:	4010      	ands	r0, r2
 800cbc0:	011b      	lsls	r3, r3, #4
 800cbc2:	4303      	orrs	r3, r0
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	e7b0      	b.n	800cb2a <__hexnan+0x8a>
 800cbc8:	9b06      	ldr	r3, [sp, #24]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0de      	beq.n	800cb8c <__hexnan+0xec>
 800cbce:	2320      	movs	r3, #32
 800cbd0:	9a06      	ldr	r2, [sp, #24]
 800cbd2:	9902      	ldr	r1, [sp, #8]
 800cbd4:	1a9b      	subs	r3, r3, r2
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	4252      	negs	r2, r2
 800cbda:	40da      	lsrs	r2, r3
 800cbdc:	3904      	subs	r1, #4
 800cbde:	680b      	ldr	r3, [r1, #0]
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	600b      	str	r3, [r1, #0]
 800cbe4:	e7d2      	b.n	800cb8c <__hexnan+0xec>
 800cbe6:	3f04      	subs	r7, #4
 800cbe8:	e7d0      	b.n	800cb8c <__hexnan+0xec>
 800cbea:	2004      	movs	r0, #4
 800cbec:	b00b      	add	sp, #44	; 0x2c
 800cbee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbf0 <malloc>:
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	4b03      	ldr	r3, [pc, #12]	; (800cc00 <malloc+0x10>)
 800cbf4:	0001      	movs	r1, r0
 800cbf6:	6818      	ldr	r0, [r3, #0]
 800cbf8:	f000 f826 	bl	800cc48 <_malloc_r>
 800cbfc:	bd10      	pop	{r4, pc}
 800cbfe:	46c0      	nop			; (mov r8, r8)
 800cc00:	2000024c 	.word	0x2000024c

0800cc04 <sbrk_aligned>:
 800cc04:	b570      	push	{r4, r5, r6, lr}
 800cc06:	4e0f      	ldr	r6, [pc, #60]	; (800cc44 <sbrk_aligned+0x40>)
 800cc08:	000d      	movs	r5, r1
 800cc0a:	6831      	ldr	r1, [r6, #0]
 800cc0c:	0004      	movs	r4, r0
 800cc0e:	2900      	cmp	r1, #0
 800cc10:	d102      	bne.n	800cc18 <sbrk_aligned+0x14>
 800cc12:	f001 f98f 	bl	800df34 <_sbrk_r>
 800cc16:	6030      	str	r0, [r6, #0]
 800cc18:	0029      	movs	r1, r5
 800cc1a:	0020      	movs	r0, r4
 800cc1c:	f001 f98a 	bl	800df34 <_sbrk_r>
 800cc20:	1c43      	adds	r3, r0, #1
 800cc22:	d00a      	beq.n	800cc3a <sbrk_aligned+0x36>
 800cc24:	2303      	movs	r3, #3
 800cc26:	1cc5      	adds	r5, r0, #3
 800cc28:	439d      	bics	r5, r3
 800cc2a:	42a8      	cmp	r0, r5
 800cc2c:	d007      	beq.n	800cc3e <sbrk_aligned+0x3a>
 800cc2e:	1a29      	subs	r1, r5, r0
 800cc30:	0020      	movs	r0, r4
 800cc32:	f001 f97f 	bl	800df34 <_sbrk_r>
 800cc36:	3001      	adds	r0, #1
 800cc38:	d101      	bne.n	800cc3e <sbrk_aligned+0x3a>
 800cc3a:	2501      	movs	r5, #1
 800cc3c:	426d      	negs	r5, r5
 800cc3e:	0028      	movs	r0, r5
 800cc40:	bd70      	pop	{r4, r5, r6, pc}
 800cc42:	46c0      	nop			; (mov r8, r8)
 800cc44:	200007c4 	.word	0x200007c4

0800cc48 <_malloc_r>:
 800cc48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc4a:	2203      	movs	r2, #3
 800cc4c:	1ccb      	adds	r3, r1, #3
 800cc4e:	4393      	bics	r3, r2
 800cc50:	3308      	adds	r3, #8
 800cc52:	0006      	movs	r6, r0
 800cc54:	001f      	movs	r7, r3
 800cc56:	2b0c      	cmp	r3, #12
 800cc58:	d238      	bcs.n	800cccc <_malloc_r+0x84>
 800cc5a:	270c      	movs	r7, #12
 800cc5c:	42b9      	cmp	r1, r7
 800cc5e:	d837      	bhi.n	800ccd0 <_malloc_r+0x88>
 800cc60:	0030      	movs	r0, r6
 800cc62:	f000 f885 	bl	800cd70 <__malloc_lock>
 800cc66:	4b38      	ldr	r3, [pc, #224]	; (800cd48 <_malloc_r+0x100>)
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	001c      	movs	r4, r3
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	d133      	bne.n	800ccda <_malloc_r+0x92>
 800cc72:	0039      	movs	r1, r7
 800cc74:	0030      	movs	r0, r6
 800cc76:	f7ff ffc5 	bl	800cc04 <sbrk_aligned>
 800cc7a:	0004      	movs	r4, r0
 800cc7c:	1c43      	adds	r3, r0, #1
 800cc7e:	d15e      	bne.n	800cd3e <_malloc_r+0xf6>
 800cc80:	9b00      	ldr	r3, [sp, #0]
 800cc82:	681c      	ldr	r4, [r3, #0]
 800cc84:	0025      	movs	r5, r4
 800cc86:	2d00      	cmp	r5, #0
 800cc88:	d14e      	bne.n	800cd28 <_malloc_r+0xe0>
 800cc8a:	2c00      	cmp	r4, #0
 800cc8c:	d051      	beq.n	800cd32 <_malloc_r+0xea>
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	0029      	movs	r1, r5
 800cc92:	18e3      	adds	r3, r4, r3
 800cc94:	0030      	movs	r0, r6
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	f001 f94c 	bl	800df34 <_sbrk_r>
 800cc9c:	9b01      	ldr	r3, [sp, #4]
 800cc9e:	4283      	cmp	r3, r0
 800cca0:	d147      	bne.n	800cd32 <_malloc_r+0xea>
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	0030      	movs	r0, r6
 800cca6:	1aff      	subs	r7, r7, r3
 800cca8:	0039      	movs	r1, r7
 800ccaa:	f7ff ffab 	bl	800cc04 <sbrk_aligned>
 800ccae:	3001      	adds	r0, #1
 800ccb0:	d03f      	beq.n	800cd32 <_malloc_r+0xea>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	19db      	adds	r3, r3, r7
 800ccb6:	6023      	str	r3, [r4, #0]
 800ccb8:	9b00      	ldr	r3, [sp, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d040      	beq.n	800cd42 <_malloc_r+0xfa>
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	42a2      	cmp	r2, r4
 800ccc4:	d133      	bne.n	800cd2e <_malloc_r+0xe6>
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	605a      	str	r2, [r3, #4]
 800ccca:	e014      	b.n	800ccf6 <_malloc_r+0xae>
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	dac5      	bge.n	800cc5c <_malloc_r+0x14>
 800ccd0:	230c      	movs	r3, #12
 800ccd2:	2500      	movs	r5, #0
 800ccd4:	6033      	str	r3, [r6, #0]
 800ccd6:	0028      	movs	r0, r5
 800ccd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccda:	6821      	ldr	r1, [r4, #0]
 800ccdc:	1bc9      	subs	r1, r1, r7
 800ccde:	d420      	bmi.n	800cd22 <_malloc_r+0xda>
 800cce0:	290b      	cmp	r1, #11
 800cce2:	d918      	bls.n	800cd16 <_malloc_r+0xce>
 800cce4:	19e2      	adds	r2, r4, r7
 800cce6:	6027      	str	r7, [r4, #0]
 800cce8:	42a3      	cmp	r3, r4
 800ccea:	d112      	bne.n	800cd12 <_malloc_r+0xca>
 800ccec:	9b00      	ldr	r3, [sp, #0]
 800ccee:	601a      	str	r2, [r3, #0]
 800ccf0:	6863      	ldr	r3, [r4, #4]
 800ccf2:	6011      	str	r1, [r2, #0]
 800ccf4:	6053      	str	r3, [r2, #4]
 800ccf6:	0030      	movs	r0, r6
 800ccf8:	0025      	movs	r5, r4
 800ccfa:	f000 f841 	bl	800cd80 <__malloc_unlock>
 800ccfe:	2207      	movs	r2, #7
 800cd00:	350b      	adds	r5, #11
 800cd02:	1d23      	adds	r3, r4, #4
 800cd04:	4395      	bics	r5, r2
 800cd06:	1aea      	subs	r2, r5, r3
 800cd08:	429d      	cmp	r5, r3
 800cd0a:	d0e4      	beq.n	800ccd6 <_malloc_r+0x8e>
 800cd0c:	1b5b      	subs	r3, r3, r5
 800cd0e:	50a3      	str	r3, [r4, r2]
 800cd10:	e7e1      	b.n	800ccd6 <_malloc_r+0x8e>
 800cd12:	605a      	str	r2, [r3, #4]
 800cd14:	e7ec      	b.n	800ccf0 <_malloc_r+0xa8>
 800cd16:	6862      	ldr	r2, [r4, #4]
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	d1d5      	bne.n	800ccc8 <_malloc_r+0x80>
 800cd1c:	9b00      	ldr	r3, [sp, #0]
 800cd1e:	601a      	str	r2, [r3, #0]
 800cd20:	e7e9      	b.n	800ccf6 <_malloc_r+0xae>
 800cd22:	0023      	movs	r3, r4
 800cd24:	6864      	ldr	r4, [r4, #4]
 800cd26:	e7a2      	b.n	800cc6e <_malloc_r+0x26>
 800cd28:	002c      	movs	r4, r5
 800cd2a:	686d      	ldr	r5, [r5, #4]
 800cd2c:	e7ab      	b.n	800cc86 <_malloc_r+0x3e>
 800cd2e:	0013      	movs	r3, r2
 800cd30:	e7c4      	b.n	800ccbc <_malloc_r+0x74>
 800cd32:	230c      	movs	r3, #12
 800cd34:	0030      	movs	r0, r6
 800cd36:	6033      	str	r3, [r6, #0]
 800cd38:	f000 f822 	bl	800cd80 <__malloc_unlock>
 800cd3c:	e7cb      	b.n	800ccd6 <_malloc_r+0x8e>
 800cd3e:	6027      	str	r7, [r4, #0]
 800cd40:	e7d9      	b.n	800ccf6 <_malloc_r+0xae>
 800cd42:	605b      	str	r3, [r3, #4]
 800cd44:	deff      	udf	#255	; 0xff
 800cd46:	46c0      	nop			; (mov r8, r8)
 800cd48:	200007c0 	.word	0x200007c0

0800cd4c <__ascii_mbtowc>:
 800cd4c:	b082      	sub	sp, #8
 800cd4e:	2900      	cmp	r1, #0
 800cd50:	d100      	bne.n	800cd54 <__ascii_mbtowc+0x8>
 800cd52:	a901      	add	r1, sp, #4
 800cd54:	1e10      	subs	r0, r2, #0
 800cd56:	d006      	beq.n	800cd66 <__ascii_mbtowc+0x1a>
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d006      	beq.n	800cd6a <__ascii_mbtowc+0x1e>
 800cd5c:	7813      	ldrb	r3, [r2, #0]
 800cd5e:	600b      	str	r3, [r1, #0]
 800cd60:	7810      	ldrb	r0, [r2, #0]
 800cd62:	1e43      	subs	r3, r0, #1
 800cd64:	4198      	sbcs	r0, r3
 800cd66:	b002      	add	sp, #8
 800cd68:	4770      	bx	lr
 800cd6a:	2002      	movs	r0, #2
 800cd6c:	4240      	negs	r0, r0
 800cd6e:	e7fa      	b.n	800cd66 <__ascii_mbtowc+0x1a>

0800cd70 <__malloc_lock>:
 800cd70:	b510      	push	{r4, lr}
 800cd72:	4802      	ldr	r0, [pc, #8]	; (800cd7c <__malloc_lock+0xc>)
 800cd74:	f7fe fcbd 	bl	800b6f2 <__retarget_lock_acquire_recursive>
 800cd78:	bd10      	pop	{r4, pc}
 800cd7a:	46c0      	nop			; (mov r8, r8)
 800cd7c:	200007bc 	.word	0x200007bc

0800cd80 <__malloc_unlock>:
 800cd80:	b510      	push	{r4, lr}
 800cd82:	4802      	ldr	r0, [pc, #8]	; (800cd8c <__malloc_unlock+0xc>)
 800cd84:	f7fe fcb6 	bl	800b6f4 <__retarget_lock_release_recursive>
 800cd88:	bd10      	pop	{r4, pc}
 800cd8a:	46c0      	nop			; (mov r8, r8)
 800cd8c:	200007bc 	.word	0x200007bc

0800cd90 <_Balloc>:
 800cd90:	b570      	push	{r4, r5, r6, lr}
 800cd92:	69c5      	ldr	r5, [r0, #28]
 800cd94:	0006      	movs	r6, r0
 800cd96:	000c      	movs	r4, r1
 800cd98:	2d00      	cmp	r5, #0
 800cd9a:	d10e      	bne.n	800cdba <_Balloc+0x2a>
 800cd9c:	2010      	movs	r0, #16
 800cd9e:	f7ff ff27 	bl	800cbf0 <malloc>
 800cda2:	1e02      	subs	r2, r0, #0
 800cda4:	61f0      	str	r0, [r6, #28]
 800cda6:	d104      	bne.n	800cdb2 <_Balloc+0x22>
 800cda8:	216b      	movs	r1, #107	; 0x6b
 800cdaa:	4b19      	ldr	r3, [pc, #100]	; (800ce10 <_Balloc+0x80>)
 800cdac:	4819      	ldr	r0, [pc, #100]	; (800ce14 <_Balloc+0x84>)
 800cdae:	f7fe fcbd 	bl	800b72c <__assert_func>
 800cdb2:	6045      	str	r5, [r0, #4]
 800cdb4:	6085      	str	r5, [r0, #8]
 800cdb6:	6005      	str	r5, [r0, #0]
 800cdb8:	60c5      	str	r5, [r0, #12]
 800cdba:	69f5      	ldr	r5, [r6, #28]
 800cdbc:	68eb      	ldr	r3, [r5, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d013      	beq.n	800cdea <_Balloc+0x5a>
 800cdc2:	69f3      	ldr	r3, [r6, #28]
 800cdc4:	00a2      	lsls	r2, r4, #2
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	189b      	adds	r3, r3, r2
 800cdca:	6818      	ldr	r0, [r3, #0]
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d118      	bne.n	800ce02 <_Balloc+0x72>
 800cdd0:	2101      	movs	r1, #1
 800cdd2:	000d      	movs	r5, r1
 800cdd4:	40a5      	lsls	r5, r4
 800cdd6:	1d6a      	adds	r2, r5, #5
 800cdd8:	0030      	movs	r0, r6
 800cdda:	0092      	lsls	r2, r2, #2
 800cddc:	f001 f8c3 	bl	800df66 <_calloc_r>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d00c      	beq.n	800cdfe <_Balloc+0x6e>
 800cde4:	6044      	str	r4, [r0, #4]
 800cde6:	6085      	str	r5, [r0, #8]
 800cde8:	e00d      	b.n	800ce06 <_Balloc+0x76>
 800cdea:	2221      	movs	r2, #33	; 0x21
 800cdec:	2104      	movs	r1, #4
 800cdee:	0030      	movs	r0, r6
 800cdf0:	f001 f8b9 	bl	800df66 <_calloc_r>
 800cdf4:	69f3      	ldr	r3, [r6, #28]
 800cdf6:	60e8      	str	r0, [r5, #12]
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1e1      	bne.n	800cdc2 <_Balloc+0x32>
 800cdfe:	2000      	movs	r0, #0
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	6802      	ldr	r2, [r0, #0]
 800ce04:	601a      	str	r2, [r3, #0]
 800ce06:	2300      	movs	r3, #0
 800ce08:	6103      	str	r3, [r0, #16]
 800ce0a:	60c3      	str	r3, [r0, #12]
 800ce0c:	e7f8      	b.n	800ce00 <_Balloc+0x70>
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	0800e44c 	.word	0x0800e44c
 800ce14:	0800e5d7 	.word	0x0800e5d7

0800ce18 <_Bfree>:
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	69c6      	ldr	r6, [r0, #28]
 800ce1c:	0005      	movs	r5, r0
 800ce1e:	000c      	movs	r4, r1
 800ce20:	2e00      	cmp	r6, #0
 800ce22:	d10e      	bne.n	800ce42 <_Bfree+0x2a>
 800ce24:	2010      	movs	r0, #16
 800ce26:	f7ff fee3 	bl	800cbf0 <malloc>
 800ce2a:	1e02      	subs	r2, r0, #0
 800ce2c:	61e8      	str	r0, [r5, #28]
 800ce2e:	d104      	bne.n	800ce3a <_Bfree+0x22>
 800ce30:	218f      	movs	r1, #143	; 0x8f
 800ce32:	4b09      	ldr	r3, [pc, #36]	; (800ce58 <_Bfree+0x40>)
 800ce34:	4809      	ldr	r0, [pc, #36]	; (800ce5c <_Bfree+0x44>)
 800ce36:	f7fe fc79 	bl	800b72c <__assert_func>
 800ce3a:	6046      	str	r6, [r0, #4]
 800ce3c:	6086      	str	r6, [r0, #8]
 800ce3e:	6006      	str	r6, [r0, #0]
 800ce40:	60c6      	str	r6, [r0, #12]
 800ce42:	2c00      	cmp	r4, #0
 800ce44:	d007      	beq.n	800ce56 <_Bfree+0x3e>
 800ce46:	69eb      	ldr	r3, [r5, #28]
 800ce48:	6862      	ldr	r2, [r4, #4]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	0092      	lsls	r2, r2, #2
 800ce4e:	189b      	adds	r3, r3, r2
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	6022      	str	r2, [r4, #0]
 800ce54:	601c      	str	r4, [r3, #0]
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
 800ce58:	0800e44c 	.word	0x0800e44c
 800ce5c:	0800e5d7 	.word	0x0800e5d7

0800ce60 <__multadd>:
 800ce60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce62:	000e      	movs	r6, r1
 800ce64:	9001      	str	r0, [sp, #4]
 800ce66:	000c      	movs	r4, r1
 800ce68:	001d      	movs	r5, r3
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	690f      	ldr	r7, [r1, #16]
 800ce6e:	3614      	adds	r6, #20
 800ce70:	6833      	ldr	r3, [r6, #0]
 800ce72:	3001      	adds	r0, #1
 800ce74:	b299      	uxth	r1, r3
 800ce76:	4351      	muls	r1, r2
 800ce78:	0c1b      	lsrs	r3, r3, #16
 800ce7a:	4353      	muls	r3, r2
 800ce7c:	1949      	adds	r1, r1, r5
 800ce7e:	0c0d      	lsrs	r5, r1, #16
 800ce80:	195b      	adds	r3, r3, r5
 800ce82:	0c1d      	lsrs	r5, r3, #16
 800ce84:	b289      	uxth	r1, r1
 800ce86:	041b      	lsls	r3, r3, #16
 800ce88:	185b      	adds	r3, r3, r1
 800ce8a:	c608      	stmia	r6!, {r3}
 800ce8c:	4287      	cmp	r7, r0
 800ce8e:	dcef      	bgt.n	800ce70 <__multadd+0x10>
 800ce90:	2d00      	cmp	r5, #0
 800ce92:	d022      	beq.n	800ceda <__multadd+0x7a>
 800ce94:	68a3      	ldr	r3, [r4, #8]
 800ce96:	42bb      	cmp	r3, r7
 800ce98:	dc19      	bgt.n	800cece <__multadd+0x6e>
 800ce9a:	6861      	ldr	r1, [r4, #4]
 800ce9c:	9801      	ldr	r0, [sp, #4]
 800ce9e:	3101      	adds	r1, #1
 800cea0:	f7ff ff76 	bl	800cd90 <_Balloc>
 800cea4:	1e06      	subs	r6, r0, #0
 800cea6:	d105      	bne.n	800ceb4 <__multadd+0x54>
 800cea8:	0032      	movs	r2, r6
 800ceaa:	21ba      	movs	r1, #186	; 0xba
 800ceac:	4b0c      	ldr	r3, [pc, #48]	; (800cee0 <__multadd+0x80>)
 800ceae:	480d      	ldr	r0, [pc, #52]	; (800cee4 <__multadd+0x84>)
 800ceb0:	f7fe fc3c 	bl	800b72c <__assert_func>
 800ceb4:	0021      	movs	r1, r4
 800ceb6:	6922      	ldr	r2, [r4, #16]
 800ceb8:	310c      	adds	r1, #12
 800ceba:	3202      	adds	r2, #2
 800cebc:	0092      	lsls	r2, r2, #2
 800cebe:	300c      	adds	r0, #12
 800cec0:	f7fe fc24 	bl	800b70c <memcpy>
 800cec4:	0021      	movs	r1, r4
 800cec6:	9801      	ldr	r0, [sp, #4]
 800cec8:	f7ff ffa6 	bl	800ce18 <_Bfree>
 800cecc:	0034      	movs	r4, r6
 800cece:	1d3b      	adds	r3, r7, #4
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	18e3      	adds	r3, r4, r3
 800ced4:	605d      	str	r5, [r3, #4]
 800ced6:	1c7b      	adds	r3, r7, #1
 800ced8:	6123      	str	r3, [r4, #16]
 800ceda:	0020      	movs	r0, r4
 800cedc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cede:	46c0      	nop			; (mov r8, r8)
 800cee0:	0800e566 	.word	0x0800e566
 800cee4:	0800e5d7 	.word	0x0800e5d7

0800cee8 <__s2b>:
 800cee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceea:	0006      	movs	r6, r0
 800ceec:	0018      	movs	r0, r3
 800ceee:	000c      	movs	r4, r1
 800cef0:	3008      	adds	r0, #8
 800cef2:	2109      	movs	r1, #9
 800cef4:	9301      	str	r3, [sp, #4]
 800cef6:	0015      	movs	r5, r2
 800cef8:	f7f3 f9b2 	bl	8000260 <__divsi3>
 800cefc:	2301      	movs	r3, #1
 800cefe:	2100      	movs	r1, #0
 800cf00:	4283      	cmp	r3, r0
 800cf02:	db0a      	blt.n	800cf1a <__s2b+0x32>
 800cf04:	0030      	movs	r0, r6
 800cf06:	f7ff ff43 	bl	800cd90 <_Balloc>
 800cf0a:	1e01      	subs	r1, r0, #0
 800cf0c:	d108      	bne.n	800cf20 <__s2b+0x38>
 800cf0e:	000a      	movs	r2, r1
 800cf10:	4b19      	ldr	r3, [pc, #100]	; (800cf78 <__s2b+0x90>)
 800cf12:	481a      	ldr	r0, [pc, #104]	; (800cf7c <__s2b+0x94>)
 800cf14:	31d3      	adds	r1, #211	; 0xd3
 800cf16:	f7fe fc09 	bl	800b72c <__assert_func>
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	3101      	adds	r1, #1
 800cf1e:	e7ef      	b.n	800cf00 <__s2b+0x18>
 800cf20:	9b08      	ldr	r3, [sp, #32]
 800cf22:	6143      	str	r3, [r0, #20]
 800cf24:	2301      	movs	r3, #1
 800cf26:	6103      	str	r3, [r0, #16]
 800cf28:	2d09      	cmp	r5, #9
 800cf2a:	dd18      	ble.n	800cf5e <__s2b+0x76>
 800cf2c:	0023      	movs	r3, r4
 800cf2e:	3309      	adds	r3, #9
 800cf30:	001f      	movs	r7, r3
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	1964      	adds	r4, r4, r5
 800cf36:	783b      	ldrb	r3, [r7, #0]
 800cf38:	220a      	movs	r2, #10
 800cf3a:	0030      	movs	r0, r6
 800cf3c:	3b30      	subs	r3, #48	; 0x30
 800cf3e:	f7ff ff8f 	bl	800ce60 <__multadd>
 800cf42:	3701      	adds	r7, #1
 800cf44:	0001      	movs	r1, r0
 800cf46:	42a7      	cmp	r7, r4
 800cf48:	d1f5      	bne.n	800cf36 <__s2b+0x4e>
 800cf4a:	002c      	movs	r4, r5
 800cf4c:	9b00      	ldr	r3, [sp, #0]
 800cf4e:	3c08      	subs	r4, #8
 800cf50:	191c      	adds	r4, r3, r4
 800cf52:	002f      	movs	r7, r5
 800cf54:	9b01      	ldr	r3, [sp, #4]
 800cf56:	429f      	cmp	r7, r3
 800cf58:	db04      	blt.n	800cf64 <__s2b+0x7c>
 800cf5a:	0008      	movs	r0, r1
 800cf5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf5e:	2509      	movs	r5, #9
 800cf60:	340a      	adds	r4, #10
 800cf62:	e7f6      	b.n	800cf52 <__s2b+0x6a>
 800cf64:	1b63      	subs	r3, r4, r5
 800cf66:	5ddb      	ldrb	r3, [r3, r7]
 800cf68:	220a      	movs	r2, #10
 800cf6a:	0030      	movs	r0, r6
 800cf6c:	3b30      	subs	r3, #48	; 0x30
 800cf6e:	f7ff ff77 	bl	800ce60 <__multadd>
 800cf72:	3701      	adds	r7, #1
 800cf74:	0001      	movs	r1, r0
 800cf76:	e7ed      	b.n	800cf54 <__s2b+0x6c>
 800cf78:	0800e566 	.word	0x0800e566
 800cf7c:	0800e5d7 	.word	0x0800e5d7

0800cf80 <__hi0bits>:
 800cf80:	0003      	movs	r3, r0
 800cf82:	0c02      	lsrs	r2, r0, #16
 800cf84:	2000      	movs	r0, #0
 800cf86:	4282      	cmp	r2, r0
 800cf88:	d101      	bne.n	800cf8e <__hi0bits+0xe>
 800cf8a:	041b      	lsls	r3, r3, #16
 800cf8c:	3010      	adds	r0, #16
 800cf8e:	0e1a      	lsrs	r2, r3, #24
 800cf90:	d101      	bne.n	800cf96 <__hi0bits+0x16>
 800cf92:	3008      	adds	r0, #8
 800cf94:	021b      	lsls	r3, r3, #8
 800cf96:	0f1a      	lsrs	r2, r3, #28
 800cf98:	d101      	bne.n	800cf9e <__hi0bits+0x1e>
 800cf9a:	3004      	adds	r0, #4
 800cf9c:	011b      	lsls	r3, r3, #4
 800cf9e:	0f9a      	lsrs	r2, r3, #30
 800cfa0:	d101      	bne.n	800cfa6 <__hi0bits+0x26>
 800cfa2:	3002      	adds	r0, #2
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	db03      	blt.n	800cfb2 <__hi0bits+0x32>
 800cfaa:	3001      	adds	r0, #1
 800cfac:	005b      	lsls	r3, r3, #1
 800cfae:	d400      	bmi.n	800cfb2 <__hi0bits+0x32>
 800cfb0:	2020      	movs	r0, #32
 800cfb2:	4770      	bx	lr

0800cfb4 <__lo0bits>:
 800cfb4:	6803      	ldr	r3, [r0, #0]
 800cfb6:	0001      	movs	r1, r0
 800cfb8:	2207      	movs	r2, #7
 800cfba:	0018      	movs	r0, r3
 800cfbc:	4010      	ands	r0, r2
 800cfbe:	4213      	tst	r3, r2
 800cfc0:	d00d      	beq.n	800cfde <__lo0bits+0x2a>
 800cfc2:	3a06      	subs	r2, #6
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	4213      	tst	r3, r2
 800cfc8:	d105      	bne.n	800cfd6 <__lo0bits+0x22>
 800cfca:	3002      	adds	r0, #2
 800cfcc:	4203      	tst	r3, r0
 800cfce:	d003      	beq.n	800cfd8 <__lo0bits+0x24>
 800cfd0:	40d3      	lsrs	r3, r2
 800cfd2:	0010      	movs	r0, r2
 800cfd4:	600b      	str	r3, [r1, #0]
 800cfd6:	4770      	bx	lr
 800cfd8:	089b      	lsrs	r3, r3, #2
 800cfda:	600b      	str	r3, [r1, #0]
 800cfdc:	e7fb      	b.n	800cfd6 <__lo0bits+0x22>
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	2a00      	cmp	r2, #0
 800cfe2:	d101      	bne.n	800cfe8 <__lo0bits+0x34>
 800cfe4:	2010      	movs	r0, #16
 800cfe6:	0c1b      	lsrs	r3, r3, #16
 800cfe8:	b2da      	uxtb	r2, r3
 800cfea:	2a00      	cmp	r2, #0
 800cfec:	d101      	bne.n	800cff2 <__lo0bits+0x3e>
 800cfee:	3008      	adds	r0, #8
 800cff0:	0a1b      	lsrs	r3, r3, #8
 800cff2:	071a      	lsls	r2, r3, #28
 800cff4:	d101      	bne.n	800cffa <__lo0bits+0x46>
 800cff6:	3004      	adds	r0, #4
 800cff8:	091b      	lsrs	r3, r3, #4
 800cffa:	079a      	lsls	r2, r3, #30
 800cffc:	d101      	bne.n	800d002 <__lo0bits+0x4e>
 800cffe:	3002      	adds	r0, #2
 800d000:	089b      	lsrs	r3, r3, #2
 800d002:	07da      	lsls	r2, r3, #31
 800d004:	d4e9      	bmi.n	800cfda <__lo0bits+0x26>
 800d006:	3001      	adds	r0, #1
 800d008:	085b      	lsrs	r3, r3, #1
 800d00a:	d1e6      	bne.n	800cfda <__lo0bits+0x26>
 800d00c:	2020      	movs	r0, #32
 800d00e:	e7e2      	b.n	800cfd6 <__lo0bits+0x22>

0800d010 <__i2b>:
 800d010:	b510      	push	{r4, lr}
 800d012:	000c      	movs	r4, r1
 800d014:	2101      	movs	r1, #1
 800d016:	f7ff febb 	bl	800cd90 <_Balloc>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d107      	bne.n	800d02e <__i2b+0x1e>
 800d01e:	2146      	movs	r1, #70	; 0x46
 800d020:	4c05      	ldr	r4, [pc, #20]	; (800d038 <__i2b+0x28>)
 800d022:	0002      	movs	r2, r0
 800d024:	4b05      	ldr	r3, [pc, #20]	; (800d03c <__i2b+0x2c>)
 800d026:	0020      	movs	r0, r4
 800d028:	31ff      	adds	r1, #255	; 0xff
 800d02a:	f7fe fb7f 	bl	800b72c <__assert_func>
 800d02e:	2301      	movs	r3, #1
 800d030:	6144      	str	r4, [r0, #20]
 800d032:	6103      	str	r3, [r0, #16]
 800d034:	bd10      	pop	{r4, pc}
 800d036:	46c0      	nop			; (mov r8, r8)
 800d038:	0800e5d7 	.word	0x0800e5d7
 800d03c:	0800e566 	.word	0x0800e566

0800d040 <__multiply>:
 800d040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d042:	0015      	movs	r5, r2
 800d044:	690a      	ldr	r2, [r1, #16]
 800d046:	692b      	ldr	r3, [r5, #16]
 800d048:	000c      	movs	r4, r1
 800d04a:	b08b      	sub	sp, #44	; 0x2c
 800d04c:	429a      	cmp	r2, r3
 800d04e:	da01      	bge.n	800d054 <__multiply+0x14>
 800d050:	002c      	movs	r4, r5
 800d052:	000d      	movs	r5, r1
 800d054:	6927      	ldr	r7, [r4, #16]
 800d056:	692e      	ldr	r6, [r5, #16]
 800d058:	6861      	ldr	r1, [r4, #4]
 800d05a:	19bb      	adds	r3, r7, r6
 800d05c:	9303      	str	r3, [sp, #12]
 800d05e:	68a3      	ldr	r3, [r4, #8]
 800d060:	19ba      	adds	r2, r7, r6
 800d062:	4293      	cmp	r3, r2
 800d064:	da00      	bge.n	800d068 <__multiply+0x28>
 800d066:	3101      	adds	r1, #1
 800d068:	f7ff fe92 	bl	800cd90 <_Balloc>
 800d06c:	9002      	str	r0, [sp, #8]
 800d06e:	2800      	cmp	r0, #0
 800d070:	d106      	bne.n	800d080 <__multiply+0x40>
 800d072:	21b1      	movs	r1, #177	; 0xb1
 800d074:	4b48      	ldr	r3, [pc, #288]	; (800d198 <__multiply+0x158>)
 800d076:	4849      	ldr	r0, [pc, #292]	; (800d19c <__multiply+0x15c>)
 800d078:	9a02      	ldr	r2, [sp, #8]
 800d07a:	0049      	lsls	r1, r1, #1
 800d07c:	f7fe fb56 	bl	800b72c <__assert_func>
 800d080:	9b02      	ldr	r3, [sp, #8]
 800d082:	2200      	movs	r2, #0
 800d084:	3314      	adds	r3, #20
 800d086:	469c      	mov	ip, r3
 800d088:	19bb      	adds	r3, r7, r6
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4463      	add	r3, ip
 800d08e:	9304      	str	r3, [sp, #16]
 800d090:	4663      	mov	r3, ip
 800d092:	9904      	ldr	r1, [sp, #16]
 800d094:	428b      	cmp	r3, r1
 800d096:	d32a      	bcc.n	800d0ee <__multiply+0xae>
 800d098:	0023      	movs	r3, r4
 800d09a:	00bf      	lsls	r7, r7, #2
 800d09c:	3314      	adds	r3, #20
 800d09e:	3514      	adds	r5, #20
 800d0a0:	9308      	str	r3, [sp, #32]
 800d0a2:	00b6      	lsls	r6, r6, #2
 800d0a4:	19db      	adds	r3, r3, r7
 800d0a6:	9305      	str	r3, [sp, #20]
 800d0a8:	19ab      	adds	r3, r5, r6
 800d0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ac:	2304      	movs	r3, #4
 800d0ae:	9306      	str	r3, [sp, #24]
 800d0b0:	0023      	movs	r3, r4
 800d0b2:	9a05      	ldr	r2, [sp, #20]
 800d0b4:	3315      	adds	r3, #21
 800d0b6:	9501      	str	r5, [sp, #4]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d305      	bcc.n	800d0c8 <__multiply+0x88>
 800d0bc:	1b13      	subs	r3, r2, r4
 800d0be:	3b15      	subs	r3, #21
 800d0c0:	089b      	lsrs	r3, r3, #2
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	9306      	str	r3, [sp, #24]
 800d0c8:	9b01      	ldr	r3, [sp, #4]
 800d0ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d310      	bcc.n	800d0f2 <__multiply+0xb2>
 800d0d0:	9b03      	ldr	r3, [sp, #12]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	dd05      	ble.n	800d0e2 <__multiply+0xa2>
 800d0d6:	9b04      	ldr	r3, [sp, #16]
 800d0d8:	3b04      	subs	r3, #4
 800d0da:	9304      	str	r3, [sp, #16]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d056      	beq.n	800d190 <__multiply+0x150>
 800d0e2:	9b02      	ldr	r3, [sp, #8]
 800d0e4:	9a03      	ldr	r2, [sp, #12]
 800d0e6:	0018      	movs	r0, r3
 800d0e8:	611a      	str	r2, [r3, #16]
 800d0ea:	b00b      	add	sp, #44	; 0x2c
 800d0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ee:	c304      	stmia	r3!, {r2}
 800d0f0:	e7cf      	b.n	800d092 <__multiply+0x52>
 800d0f2:	9b01      	ldr	r3, [sp, #4]
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	b280      	uxth	r0, r0
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d01e      	beq.n	800d13a <__multiply+0xfa>
 800d0fc:	4667      	mov	r7, ip
 800d0fe:	2500      	movs	r5, #0
 800d100:	9e08      	ldr	r6, [sp, #32]
 800d102:	ce02      	ldmia	r6!, {r1}
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	9307      	str	r3, [sp, #28]
 800d108:	b28b      	uxth	r3, r1
 800d10a:	4343      	muls	r3, r0
 800d10c:	001a      	movs	r2, r3
 800d10e:	466b      	mov	r3, sp
 800d110:	8b9b      	ldrh	r3, [r3, #28]
 800d112:	18d3      	adds	r3, r2, r3
 800d114:	195b      	adds	r3, r3, r5
 800d116:	0c0d      	lsrs	r5, r1, #16
 800d118:	4345      	muls	r5, r0
 800d11a:	9a07      	ldr	r2, [sp, #28]
 800d11c:	0c11      	lsrs	r1, r2, #16
 800d11e:	1869      	adds	r1, r5, r1
 800d120:	0c1a      	lsrs	r2, r3, #16
 800d122:	188a      	adds	r2, r1, r2
 800d124:	b29b      	uxth	r3, r3
 800d126:	0c15      	lsrs	r5, r2, #16
 800d128:	0412      	lsls	r2, r2, #16
 800d12a:	431a      	orrs	r2, r3
 800d12c:	9b05      	ldr	r3, [sp, #20]
 800d12e:	c704      	stmia	r7!, {r2}
 800d130:	42b3      	cmp	r3, r6
 800d132:	d8e6      	bhi.n	800d102 <__multiply+0xc2>
 800d134:	4663      	mov	r3, ip
 800d136:	9a06      	ldr	r2, [sp, #24]
 800d138:	509d      	str	r5, [r3, r2]
 800d13a:	9b01      	ldr	r3, [sp, #4]
 800d13c:	6818      	ldr	r0, [r3, #0]
 800d13e:	0c00      	lsrs	r0, r0, #16
 800d140:	d020      	beq.n	800d184 <__multiply+0x144>
 800d142:	4663      	mov	r3, ip
 800d144:	0025      	movs	r5, r4
 800d146:	4661      	mov	r1, ip
 800d148:	2700      	movs	r7, #0
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3514      	adds	r5, #20
 800d14e:	682a      	ldr	r2, [r5, #0]
 800d150:	680e      	ldr	r6, [r1, #0]
 800d152:	b292      	uxth	r2, r2
 800d154:	4342      	muls	r2, r0
 800d156:	0c36      	lsrs	r6, r6, #16
 800d158:	1992      	adds	r2, r2, r6
 800d15a:	19d2      	adds	r2, r2, r7
 800d15c:	0416      	lsls	r6, r2, #16
 800d15e:	b29b      	uxth	r3, r3
 800d160:	431e      	orrs	r6, r3
 800d162:	600e      	str	r6, [r1, #0]
 800d164:	cd40      	ldmia	r5!, {r6}
 800d166:	684b      	ldr	r3, [r1, #4]
 800d168:	0c36      	lsrs	r6, r6, #16
 800d16a:	4346      	muls	r6, r0
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	0c12      	lsrs	r2, r2, #16
 800d170:	18f3      	adds	r3, r6, r3
 800d172:	189b      	adds	r3, r3, r2
 800d174:	9a05      	ldr	r2, [sp, #20]
 800d176:	0c1f      	lsrs	r7, r3, #16
 800d178:	3104      	adds	r1, #4
 800d17a:	42aa      	cmp	r2, r5
 800d17c:	d8e7      	bhi.n	800d14e <__multiply+0x10e>
 800d17e:	4662      	mov	r2, ip
 800d180:	9906      	ldr	r1, [sp, #24]
 800d182:	5053      	str	r3, [r2, r1]
 800d184:	9b01      	ldr	r3, [sp, #4]
 800d186:	3304      	adds	r3, #4
 800d188:	9301      	str	r3, [sp, #4]
 800d18a:	2304      	movs	r3, #4
 800d18c:	449c      	add	ip, r3
 800d18e:	e79b      	b.n	800d0c8 <__multiply+0x88>
 800d190:	9b03      	ldr	r3, [sp, #12]
 800d192:	3b01      	subs	r3, #1
 800d194:	9303      	str	r3, [sp, #12]
 800d196:	e79b      	b.n	800d0d0 <__multiply+0x90>
 800d198:	0800e566 	.word	0x0800e566
 800d19c:	0800e5d7 	.word	0x0800e5d7

0800d1a0 <__pow5mult>:
 800d1a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	0015      	movs	r5, r2
 800d1a6:	0007      	movs	r7, r0
 800d1a8:	000e      	movs	r6, r1
 800d1aa:	401a      	ands	r2, r3
 800d1ac:	421d      	tst	r5, r3
 800d1ae:	d008      	beq.n	800d1c2 <__pow5mult+0x22>
 800d1b0:	4925      	ldr	r1, [pc, #148]	; (800d248 <__pow5mult+0xa8>)
 800d1b2:	3a01      	subs	r2, #1
 800d1b4:	0092      	lsls	r2, r2, #2
 800d1b6:	5852      	ldr	r2, [r2, r1]
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	0031      	movs	r1, r6
 800d1bc:	f7ff fe50 	bl	800ce60 <__multadd>
 800d1c0:	0006      	movs	r6, r0
 800d1c2:	10ad      	asrs	r5, r5, #2
 800d1c4:	d03d      	beq.n	800d242 <__pow5mult+0xa2>
 800d1c6:	69fc      	ldr	r4, [r7, #28]
 800d1c8:	2c00      	cmp	r4, #0
 800d1ca:	d10f      	bne.n	800d1ec <__pow5mult+0x4c>
 800d1cc:	2010      	movs	r0, #16
 800d1ce:	f7ff fd0f 	bl	800cbf0 <malloc>
 800d1d2:	1e02      	subs	r2, r0, #0
 800d1d4:	61f8      	str	r0, [r7, #28]
 800d1d6:	d105      	bne.n	800d1e4 <__pow5mult+0x44>
 800d1d8:	21b4      	movs	r1, #180	; 0xb4
 800d1da:	4b1c      	ldr	r3, [pc, #112]	; (800d24c <__pow5mult+0xac>)
 800d1dc:	481c      	ldr	r0, [pc, #112]	; (800d250 <__pow5mult+0xb0>)
 800d1de:	31ff      	adds	r1, #255	; 0xff
 800d1e0:	f7fe faa4 	bl	800b72c <__assert_func>
 800d1e4:	6044      	str	r4, [r0, #4]
 800d1e6:	6084      	str	r4, [r0, #8]
 800d1e8:	6004      	str	r4, [r0, #0]
 800d1ea:	60c4      	str	r4, [r0, #12]
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	689c      	ldr	r4, [r3, #8]
 800d1f0:	9301      	str	r3, [sp, #4]
 800d1f2:	2c00      	cmp	r4, #0
 800d1f4:	d108      	bne.n	800d208 <__pow5mult+0x68>
 800d1f6:	0038      	movs	r0, r7
 800d1f8:	4916      	ldr	r1, [pc, #88]	; (800d254 <__pow5mult+0xb4>)
 800d1fa:	f7ff ff09 	bl	800d010 <__i2b>
 800d1fe:	9b01      	ldr	r3, [sp, #4]
 800d200:	0004      	movs	r4, r0
 800d202:	6098      	str	r0, [r3, #8]
 800d204:	2300      	movs	r3, #0
 800d206:	6003      	str	r3, [r0, #0]
 800d208:	2301      	movs	r3, #1
 800d20a:	421d      	tst	r5, r3
 800d20c:	d00a      	beq.n	800d224 <__pow5mult+0x84>
 800d20e:	0031      	movs	r1, r6
 800d210:	0022      	movs	r2, r4
 800d212:	0038      	movs	r0, r7
 800d214:	f7ff ff14 	bl	800d040 <__multiply>
 800d218:	0031      	movs	r1, r6
 800d21a:	9001      	str	r0, [sp, #4]
 800d21c:	0038      	movs	r0, r7
 800d21e:	f7ff fdfb 	bl	800ce18 <_Bfree>
 800d222:	9e01      	ldr	r6, [sp, #4]
 800d224:	106d      	asrs	r5, r5, #1
 800d226:	d00c      	beq.n	800d242 <__pow5mult+0xa2>
 800d228:	6820      	ldr	r0, [r4, #0]
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d107      	bne.n	800d23e <__pow5mult+0x9e>
 800d22e:	0022      	movs	r2, r4
 800d230:	0021      	movs	r1, r4
 800d232:	0038      	movs	r0, r7
 800d234:	f7ff ff04 	bl	800d040 <__multiply>
 800d238:	2300      	movs	r3, #0
 800d23a:	6020      	str	r0, [r4, #0]
 800d23c:	6003      	str	r3, [r0, #0]
 800d23e:	0004      	movs	r4, r0
 800d240:	e7e2      	b.n	800d208 <__pow5mult+0x68>
 800d242:	0030      	movs	r0, r6
 800d244:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d246:	46c0      	nop			; (mov r8, r8)
 800d248:	0800e720 	.word	0x0800e720
 800d24c:	0800e44c 	.word	0x0800e44c
 800d250:	0800e5d7 	.word	0x0800e5d7
 800d254:	00000271 	.word	0x00000271

0800d258 <__lshift>:
 800d258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d25a:	000c      	movs	r4, r1
 800d25c:	0017      	movs	r7, r2
 800d25e:	6923      	ldr	r3, [r4, #16]
 800d260:	1155      	asrs	r5, r2, #5
 800d262:	b087      	sub	sp, #28
 800d264:	18eb      	adds	r3, r5, r3
 800d266:	9302      	str	r3, [sp, #8]
 800d268:	3301      	adds	r3, #1
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	6849      	ldr	r1, [r1, #4]
 800d26e:	68a3      	ldr	r3, [r4, #8]
 800d270:	9004      	str	r0, [sp, #16]
 800d272:	9a01      	ldr	r2, [sp, #4]
 800d274:	4293      	cmp	r3, r2
 800d276:	db10      	blt.n	800d29a <__lshift+0x42>
 800d278:	9804      	ldr	r0, [sp, #16]
 800d27a:	f7ff fd89 	bl	800cd90 <_Balloc>
 800d27e:	2300      	movs	r3, #0
 800d280:	0002      	movs	r2, r0
 800d282:	0006      	movs	r6, r0
 800d284:	0019      	movs	r1, r3
 800d286:	3214      	adds	r2, #20
 800d288:	4298      	cmp	r0, r3
 800d28a:	d10c      	bne.n	800d2a6 <__lshift+0x4e>
 800d28c:	31df      	adds	r1, #223	; 0xdf
 800d28e:	0032      	movs	r2, r6
 800d290:	4b26      	ldr	r3, [pc, #152]	; (800d32c <__lshift+0xd4>)
 800d292:	4827      	ldr	r0, [pc, #156]	; (800d330 <__lshift+0xd8>)
 800d294:	31ff      	adds	r1, #255	; 0xff
 800d296:	f7fe fa49 	bl	800b72c <__assert_func>
 800d29a:	3101      	adds	r1, #1
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	e7e8      	b.n	800d272 <__lshift+0x1a>
 800d2a0:	0098      	lsls	r0, r3, #2
 800d2a2:	5011      	str	r1, [r2, r0]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	42ab      	cmp	r3, r5
 800d2a8:	dbfa      	blt.n	800d2a0 <__lshift+0x48>
 800d2aa:	43eb      	mvns	r3, r5
 800d2ac:	17db      	asrs	r3, r3, #31
 800d2ae:	401d      	ands	r5, r3
 800d2b0:	211f      	movs	r1, #31
 800d2b2:	0023      	movs	r3, r4
 800d2b4:	0038      	movs	r0, r7
 800d2b6:	00ad      	lsls	r5, r5, #2
 800d2b8:	1955      	adds	r5, r2, r5
 800d2ba:	6922      	ldr	r2, [r4, #16]
 800d2bc:	3314      	adds	r3, #20
 800d2be:	0092      	lsls	r2, r2, #2
 800d2c0:	4008      	ands	r0, r1
 800d2c2:	4684      	mov	ip, r0
 800d2c4:	189a      	adds	r2, r3, r2
 800d2c6:	420f      	tst	r7, r1
 800d2c8:	d02a      	beq.n	800d320 <__lshift+0xc8>
 800d2ca:	3101      	adds	r1, #1
 800d2cc:	1a09      	subs	r1, r1, r0
 800d2ce:	9105      	str	r1, [sp, #20]
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	9503      	str	r5, [sp, #12]
 800d2d4:	4667      	mov	r7, ip
 800d2d6:	6818      	ldr	r0, [r3, #0]
 800d2d8:	40b8      	lsls	r0, r7
 800d2da:	4308      	orrs	r0, r1
 800d2dc:	9903      	ldr	r1, [sp, #12]
 800d2de:	c101      	stmia	r1!, {r0}
 800d2e0:	9103      	str	r1, [sp, #12]
 800d2e2:	9805      	ldr	r0, [sp, #20]
 800d2e4:	cb02      	ldmia	r3!, {r1}
 800d2e6:	40c1      	lsrs	r1, r0
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d8f3      	bhi.n	800d2d4 <__lshift+0x7c>
 800d2ec:	0020      	movs	r0, r4
 800d2ee:	3015      	adds	r0, #21
 800d2f0:	2304      	movs	r3, #4
 800d2f2:	4282      	cmp	r2, r0
 800d2f4:	d304      	bcc.n	800d300 <__lshift+0xa8>
 800d2f6:	1b13      	subs	r3, r2, r4
 800d2f8:	3b15      	subs	r3, #21
 800d2fa:	089b      	lsrs	r3, r3, #2
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	50e9      	str	r1, [r5, r3]
 800d302:	2900      	cmp	r1, #0
 800d304:	d002      	beq.n	800d30c <__lshift+0xb4>
 800d306:	9b02      	ldr	r3, [sp, #8]
 800d308:	3302      	adds	r3, #2
 800d30a:	9301      	str	r3, [sp, #4]
 800d30c:	9b01      	ldr	r3, [sp, #4]
 800d30e:	9804      	ldr	r0, [sp, #16]
 800d310:	3b01      	subs	r3, #1
 800d312:	0021      	movs	r1, r4
 800d314:	6133      	str	r3, [r6, #16]
 800d316:	f7ff fd7f 	bl	800ce18 <_Bfree>
 800d31a:	0030      	movs	r0, r6
 800d31c:	b007      	add	sp, #28
 800d31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d320:	cb02      	ldmia	r3!, {r1}
 800d322:	c502      	stmia	r5!, {r1}
 800d324:	429a      	cmp	r2, r3
 800d326:	d8fb      	bhi.n	800d320 <__lshift+0xc8>
 800d328:	e7f0      	b.n	800d30c <__lshift+0xb4>
 800d32a:	46c0      	nop			; (mov r8, r8)
 800d32c:	0800e566 	.word	0x0800e566
 800d330:	0800e5d7 	.word	0x0800e5d7

0800d334 <__mcmp>:
 800d334:	b530      	push	{r4, r5, lr}
 800d336:	690b      	ldr	r3, [r1, #16]
 800d338:	6904      	ldr	r4, [r0, #16]
 800d33a:	0002      	movs	r2, r0
 800d33c:	1ae0      	subs	r0, r4, r3
 800d33e:	429c      	cmp	r4, r3
 800d340:	d10e      	bne.n	800d360 <__mcmp+0x2c>
 800d342:	3214      	adds	r2, #20
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	3114      	adds	r1, #20
 800d348:	0014      	movs	r4, r2
 800d34a:	18c9      	adds	r1, r1, r3
 800d34c:	18d2      	adds	r2, r2, r3
 800d34e:	3a04      	subs	r2, #4
 800d350:	3904      	subs	r1, #4
 800d352:	6815      	ldr	r5, [r2, #0]
 800d354:	680b      	ldr	r3, [r1, #0]
 800d356:	429d      	cmp	r5, r3
 800d358:	d003      	beq.n	800d362 <__mcmp+0x2e>
 800d35a:	2001      	movs	r0, #1
 800d35c:	429d      	cmp	r5, r3
 800d35e:	d303      	bcc.n	800d368 <__mcmp+0x34>
 800d360:	bd30      	pop	{r4, r5, pc}
 800d362:	4294      	cmp	r4, r2
 800d364:	d3f3      	bcc.n	800d34e <__mcmp+0x1a>
 800d366:	e7fb      	b.n	800d360 <__mcmp+0x2c>
 800d368:	4240      	negs	r0, r0
 800d36a:	e7f9      	b.n	800d360 <__mcmp+0x2c>

0800d36c <__mdiff>:
 800d36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d36e:	000e      	movs	r6, r1
 800d370:	0007      	movs	r7, r0
 800d372:	0011      	movs	r1, r2
 800d374:	0030      	movs	r0, r6
 800d376:	b087      	sub	sp, #28
 800d378:	0014      	movs	r4, r2
 800d37a:	f7ff ffdb 	bl	800d334 <__mcmp>
 800d37e:	1e05      	subs	r5, r0, #0
 800d380:	d110      	bne.n	800d3a4 <__mdiff+0x38>
 800d382:	0001      	movs	r1, r0
 800d384:	0038      	movs	r0, r7
 800d386:	f7ff fd03 	bl	800cd90 <_Balloc>
 800d38a:	1e02      	subs	r2, r0, #0
 800d38c:	d104      	bne.n	800d398 <__mdiff+0x2c>
 800d38e:	4b3f      	ldr	r3, [pc, #252]	; (800d48c <__mdiff+0x120>)
 800d390:	483f      	ldr	r0, [pc, #252]	; (800d490 <__mdiff+0x124>)
 800d392:	4940      	ldr	r1, [pc, #256]	; (800d494 <__mdiff+0x128>)
 800d394:	f7fe f9ca 	bl	800b72c <__assert_func>
 800d398:	2301      	movs	r3, #1
 800d39a:	6145      	str	r5, [r0, #20]
 800d39c:	6103      	str	r3, [r0, #16]
 800d39e:	0010      	movs	r0, r2
 800d3a0:	b007      	add	sp, #28
 800d3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	9301      	str	r3, [sp, #4]
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	db04      	blt.n	800d3b6 <__mdiff+0x4a>
 800d3ac:	0023      	movs	r3, r4
 800d3ae:	0034      	movs	r4, r6
 800d3b0:	001e      	movs	r6, r3
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9301      	str	r3, [sp, #4]
 800d3b6:	0038      	movs	r0, r7
 800d3b8:	6861      	ldr	r1, [r4, #4]
 800d3ba:	f7ff fce9 	bl	800cd90 <_Balloc>
 800d3be:	1e02      	subs	r2, r0, #0
 800d3c0:	d103      	bne.n	800d3ca <__mdiff+0x5e>
 800d3c2:	4b32      	ldr	r3, [pc, #200]	; (800d48c <__mdiff+0x120>)
 800d3c4:	4832      	ldr	r0, [pc, #200]	; (800d490 <__mdiff+0x124>)
 800d3c6:	4934      	ldr	r1, [pc, #208]	; (800d498 <__mdiff+0x12c>)
 800d3c8:	e7e4      	b.n	800d394 <__mdiff+0x28>
 800d3ca:	9b01      	ldr	r3, [sp, #4]
 800d3cc:	2700      	movs	r7, #0
 800d3ce:	60c3      	str	r3, [r0, #12]
 800d3d0:	6920      	ldr	r0, [r4, #16]
 800d3d2:	3414      	adds	r4, #20
 800d3d4:	0083      	lsls	r3, r0, #2
 800d3d6:	18e3      	adds	r3, r4, r3
 800d3d8:	0021      	movs	r1, r4
 800d3da:	9401      	str	r4, [sp, #4]
 800d3dc:	0034      	movs	r4, r6
 800d3de:	9302      	str	r3, [sp, #8]
 800d3e0:	6933      	ldr	r3, [r6, #16]
 800d3e2:	3414      	adds	r4, #20
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	18e3      	adds	r3, r4, r3
 800d3e8:	9303      	str	r3, [sp, #12]
 800d3ea:	0013      	movs	r3, r2
 800d3ec:	3314      	adds	r3, #20
 800d3ee:	469c      	mov	ip, r3
 800d3f0:	9305      	str	r3, [sp, #20]
 800d3f2:	9104      	str	r1, [sp, #16]
 800d3f4:	9b04      	ldr	r3, [sp, #16]
 800d3f6:	cc02      	ldmia	r4!, {r1}
 800d3f8:	cb20      	ldmia	r3!, {r5}
 800d3fa:	9304      	str	r3, [sp, #16]
 800d3fc:	b2ab      	uxth	r3, r5
 800d3fe:	19df      	adds	r7, r3, r7
 800d400:	b28b      	uxth	r3, r1
 800d402:	1afb      	subs	r3, r7, r3
 800d404:	0c09      	lsrs	r1, r1, #16
 800d406:	0c2d      	lsrs	r5, r5, #16
 800d408:	1a6d      	subs	r5, r5, r1
 800d40a:	1419      	asrs	r1, r3, #16
 800d40c:	1869      	adds	r1, r5, r1
 800d40e:	b29b      	uxth	r3, r3
 800d410:	140f      	asrs	r7, r1, #16
 800d412:	0409      	lsls	r1, r1, #16
 800d414:	4319      	orrs	r1, r3
 800d416:	4663      	mov	r3, ip
 800d418:	c302      	stmia	r3!, {r1}
 800d41a:	469c      	mov	ip, r3
 800d41c:	9b03      	ldr	r3, [sp, #12]
 800d41e:	42a3      	cmp	r3, r4
 800d420:	d8e8      	bhi.n	800d3f4 <__mdiff+0x88>
 800d422:	0031      	movs	r1, r6
 800d424:	9c03      	ldr	r4, [sp, #12]
 800d426:	3115      	adds	r1, #21
 800d428:	2304      	movs	r3, #4
 800d42a:	428c      	cmp	r4, r1
 800d42c:	d304      	bcc.n	800d438 <__mdiff+0xcc>
 800d42e:	1ba3      	subs	r3, r4, r6
 800d430:	3b15      	subs	r3, #21
 800d432:	089b      	lsrs	r3, r3, #2
 800d434:	3301      	adds	r3, #1
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	9901      	ldr	r1, [sp, #4]
 800d43a:	18cd      	adds	r5, r1, r3
 800d43c:	9905      	ldr	r1, [sp, #20]
 800d43e:	002e      	movs	r6, r5
 800d440:	18cb      	adds	r3, r1, r3
 800d442:	469c      	mov	ip, r3
 800d444:	9902      	ldr	r1, [sp, #8]
 800d446:	428e      	cmp	r6, r1
 800d448:	d310      	bcc.n	800d46c <__mdiff+0x100>
 800d44a:	9e02      	ldr	r6, [sp, #8]
 800d44c:	1ee9      	subs	r1, r5, #3
 800d44e:	2400      	movs	r4, #0
 800d450:	428e      	cmp	r6, r1
 800d452:	d304      	bcc.n	800d45e <__mdiff+0xf2>
 800d454:	0031      	movs	r1, r6
 800d456:	3103      	adds	r1, #3
 800d458:	1b49      	subs	r1, r1, r5
 800d45a:	0889      	lsrs	r1, r1, #2
 800d45c:	008c      	lsls	r4, r1, #2
 800d45e:	191b      	adds	r3, r3, r4
 800d460:	3b04      	subs	r3, #4
 800d462:	6819      	ldr	r1, [r3, #0]
 800d464:	2900      	cmp	r1, #0
 800d466:	d00f      	beq.n	800d488 <__mdiff+0x11c>
 800d468:	6110      	str	r0, [r2, #16]
 800d46a:	e798      	b.n	800d39e <__mdiff+0x32>
 800d46c:	ce02      	ldmia	r6!, {r1}
 800d46e:	b28c      	uxth	r4, r1
 800d470:	19e4      	adds	r4, r4, r7
 800d472:	0c0f      	lsrs	r7, r1, #16
 800d474:	1421      	asrs	r1, r4, #16
 800d476:	1879      	adds	r1, r7, r1
 800d478:	b2a4      	uxth	r4, r4
 800d47a:	140f      	asrs	r7, r1, #16
 800d47c:	0409      	lsls	r1, r1, #16
 800d47e:	4321      	orrs	r1, r4
 800d480:	4664      	mov	r4, ip
 800d482:	c402      	stmia	r4!, {r1}
 800d484:	46a4      	mov	ip, r4
 800d486:	e7dd      	b.n	800d444 <__mdiff+0xd8>
 800d488:	3801      	subs	r0, #1
 800d48a:	e7e9      	b.n	800d460 <__mdiff+0xf4>
 800d48c:	0800e566 	.word	0x0800e566
 800d490:	0800e5d7 	.word	0x0800e5d7
 800d494:	00000237 	.word	0x00000237
 800d498:	00000245 	.word	0x00000245

0800d49c <__ulp>:
 800d49c:	2000      	movs	r0, #0
 800d49e:	4b0b      	ldr	r3, [pc, #44]	; (800d4cc <__ulp+0x30>)
 800d4a0:	4019      	ands	r1, r3
 800d4a2:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <__ulp+0x34>)
 800d4a4:	18c9      	adds	r1, r1, r3
 800d4a6:	4281      	cmp	r1, r0
 800d4a8:	dc06      	bgt.n	800d4b8 <__ulp+0x1c>
 800d4aa:	4249      	negs	r1, r1
 800d4ac:	150b      	asrs	r3, r1, #20
 800d4ae:	2b13      	cmp	r3, #19
 800d4b0:	dc03      	bgt.n	800d4ba <__ulp+0x1e>
 800d4b2:	2180      	movs	r1, #128	; 0x80
 800d4b4:	0309      	lsls	r1, r1, #12
 800d4b6:	4119      	asrs	r1, r3
 800d4b8:	4770      	bx	lr
 800d4ba:	3b14      	subs	r3, #20
 800d4bc:	2001      	movs	r0, #1
 800d4be:	2b1e      	cmp	r3, #30
 800d4c0:	dc02      	bgt.n	800d4c8 <__ulp+0x2c>
 800d4c2:	2080      	movs	r0, #128	; 0x80
 800d4c4:	0600      	lsls	r0, r0, #24
 800d4c6:	40d8      	lsrs	r0, r3
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	e7f5      	b.n	800d4b8 <__ulp+0x1c>
 800d4cc:	7ff00000 	.word	0x7ff00000
 800d4d0:	fcc00000 	.word	0xfcc00000

0800d4d4 <__b2d>:
 800d4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d6:	0006      	movs	r6, r0
 800d4d8:	6903      	ldr	r3, [r0, #16]
 800d4da:	3614      	adds	r6, #20
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	18f3      	adds	r3, r6, r3
 800d4e0:	1f1d      	subs	r5, r3, #4
 800d4e2:	682c      	ldr	r4, [r5, #0]
 800d4e4:	000f      	movs	r7, r1
 800d4e6:	0020      	movs	r0, r4
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	f7ff fd49 	bl	800cf80 <__hi0bits>
 800d4ee:	2220      	movs	r2, #32
 800d4f0:	1a12      	subs	r2, r2, r0
 800d4f2:	603a      	str	r2, [r7, #0]
 800d4f4:	0003      	movs	r3, r0
 800d4f6:	4a1c      	ldr	r2, [pc, #112]	; (800d568 <__b2d+0x94>)
 800d4f8:	280a      	cmp	r0, #10
 800d4fa:	dc15      	bgt.n	800d528 <__b2d+0x54>
 800d4fc:	210b      	movs	r1, #11
 800d4fe:	0027      	movs	r7, r4
 800d500:	1a09      	subs	r1, r1, r0
 800d502:	40cf      	lsrs	r7, r1
 800d504:	433a      	orrs	r2, r7
 800d506:	468c      	mov	ip, r1
 800d508:	0011      	movs	r1, r2
 800d50a:	2200      	movs	r2, #0
 800d50c:	42ae      	cmp	r6, r5
 800d50e:	d202      	bcs.n	800d516 <__b2d+0x42>
 800d510:	9a01      	ldr	r2, [sp, #4]
 800d512:	3a08      	subs	r2, #8
 800d514:	6812      	ldr	r2, [r2, #0]
 800d516:	3315      	adds	r3, #21
 800d518:	409c      	lsls	r4, r3
 800d51a:	4663      	mov	r3, ip
 800d51c:	0027      	movs	r7, r4
 800d51e:	40da      	lsrs	r2, r3
 800d520:	4317      	orrs	r7, r2
 800d522:	0038      	movs	r0, r7
 800d524:	b003      	add	sp, #12
 800d526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d528:	2700      	movs	r7, #0
 800d52a:	42ae      	cmp	r6, r5
 800d52c:	d202      	bcs.n	800d534 <__b2d+0x60>
 800d52e:	9d01      	ldr	r5, [sp, #4]
 800d530:	3d08      	subs	r5, #8
 800d532:	682f      	ldr	r7, [r5, #0]
 800d534:	210b      	movs	r1, #11
 800d536:	4249      	negs	r1, r1
 800d538:	468c      	mov	ip, r1
 800d53a:	449c      	add	ip, r3
 800d53c:	2b0b      	cmp	r3, #11
 800d53e:	d010      	beq.n	800d562 <__b2d+0x8e>
 800d540:	4661      	mov	r1, ip
 800d542:	2320      	movs	r3, #32
 800d544:	408c      	lsls	r4, r1
 800d546:	1a5b      	subs	r3, r3, r1
 800d548:	0039      	movs	r1, r7
 800d54a:	40d9      	lsrs	r1, r3
 800d54c:	430c      	orrs	r4, r1
 800d54e:	4322      	orrs	r2, r4
 800d550:	0011      	movs	r1, r2
 800d552:	2200      	movs	r2, #0
 800d554:	42b5      	cmp	r5, r6
 800d556:	d901      	bls.n	800d55c <__b2d+0x88>
 800d558:	3d04      	subs	r5, #4
 800d55a:	682a      	ldr	r2, [r5, #0]
 800d55c:	4664      	mov	r4, ip
 800d55e:	40a7      	lsls	r7, r4
 800d560:	e7dd      	b.n	800d51e <__b2d+0x4a>
 800d562:	4322      	orrs	r2, r4
 800d564:	0011      	movs	r1, r2
 800d566:	e7dc      	b.n	800d522 <__b2d+0x4e>
 800d568:	3ff00000 	.word	0x3ff00000

0800d56c <__d2b>:
 800d56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d56e:	2101      	movs	r1, #1
 800d570:	0014      	movs	r4, r2
 800d572:	001d      	movs	r5, r3
 800d574:	9f08      	ldr	r7, [sp, #32]
 800d576:	f7ff fc0b 	bl	800cd90 <_Balloc>
 800d57a:	1e06      	subs	r6, r0, #0
 800d57c:	d105      	bne.n	800d58a <__d2b+0x1e>
 800d57e:	0032      	movs	r2, r6
 800d580:	4b24      	ldr	r3, [pc, #144]	; (800d614 <__d2b+0xa8>)
 800d582:	4825      	ldr	r0, [pc, #148]	; (800d618 <__d2b+0xac>)
 800d584:	4925      	ldr	r1, [pc, #148]	; (800d61c <__d2b+0xb0>)
 800d586:	f7fe f8d1 	bl	800b72c <__assert_func>
 800d58a:	032b      	lsls	r3, r5, #12
 800d58c:	006d      	lsls	r5, r5, #1
 800d58e:	0b1b      	lsrs	r3, r3, #12
 800d590:	0d6d      	lsrs	r5, r5, #21
 800d592:	d125      	bne.n	800d5e0 <__d2b+0x74>
 800d594:	9301      	str	r3, [sp, #4]
 800d596:	2c00      	cmp	r4, #0
 800d598:	d028      	beq.n	800d5ec <__d2b+0x80>
 800d59a:	4668      	mov	r0, sp
 800d59c:	9400      	str	r4, [sp, #0]
 800d59e:	f7ff fd09 	bl	800cfb4 <__lo0bits>
 800d5a2:	9b01      	ldr	r3, [sp, #4]
 800d5a4:	9900      	ldr	r1, [sp, #0]
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d01e      	beq.n	800d5e8 <__d2b+0x7c>
 800d5aa:	2220      	movs	r2, #32
 800d5ac:	001c      	movs	r4, r3
 800d5ae:	1a12      	subs	r2, r2, r0
 800d5b0:	4094      	lsls	r4, r2
 800d5b2:	0022      	movs	r2, r4
 800d5b4:	40c3      	lsrs	r3, r0
 800d5b6:	430a      	orrs	r2, r1
 800d5b8:	6172      	str	r2, [r6, #20]
 800d5ba:	9301      	str	r3, [sp, #4]
 800d5bc:	9c01      	ldr	r4, [sp, #4]
 800d5be:	61b4      	str	r4, [r6, #24]
 800d5c0:	1e63      	subs	r3, r4, #1
 800d5c2:	419c      	sbcs	r4, r3
 800d5c4:	3401      	adds	r4, #1
 800d5c6:	6134      	str	r4, [r6, #16]
 800d5c8:	2d00      	cmp	r5, #0
 800d5ca:	d017      	beq.n	800d5fc <__d2b+0x90>
 800d5cc:	2435      	movs	r4, #53	; 0x35
 800d5ce:	4b14      	ldr	r3, [pc, #80]	; (800d620 <__d2b+0xb4>)
 800d5d0:	18ed      	adds	r5, r5, r3
 800d5d2:	182d      	adds	r5, r5, r0
 800d5d4:	603d      	str	r5, [r7, #0]
 800d5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5d8:	1a24      	subs	r4, r4, r0
 800d5da:	601c      	str	r4, [r3, #0]
 800d5dc:	0030      	movs	r0, r6
 800d5de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5e0:	2280      	movs	r2, #128	; 0x80
 800d5e2:	0352      	lsls	r2, r2, #13
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	e7d5      	b.n	800d594 <__d2b+0x28>
 800d5e8:	6171      	str	r1, [r6, #20]
 800d5ea:	e7e7      	b.n	800d5bc <__d2b+0x50>
 800d5ec:	a801      	add	r0, sp, #4
 800d5ee:	f7ff fce1 	bl	800cfb4 <__lo0bits>
 800d5f2:	9b01      	ldr	r3, [sp, #4]
 800d5f4:	2401      	movs	r4, #1
 800d5f6:	6173      	str	r3, [r6, #20]
 800d5f8:	3020      	adds	r0, #32
 800d5fa:	e7e4      	b.n	800d5c6 <__d2b+0x5a>
 800d5fc:	4b09      	ldr	r3, [pc, #36]	; (800d624 <__d2b+0xb8>)
 800d5fe:	18c0      	adds	r0, r0, r3
 800d600:	4b09      	ldr	r3, [pc, #36]	; (800d628 <__d2b+0xbc>)
 800d602:	6038      	str	r0, [r7, #0]
 800d604:	18e3      	adds	r3, r4, r3
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	18f3      	adds	r3, r6, r3
 800d60a:	6958      	ldr	r0, [r3, #20]
 800d60c:	f7ff fcb8 	bl	800cf80 <__hi0bits>
 800d610:	0164      	lsls	r4, r4, #5
 800d612:	e7e0      	b.n	800d5d6 <__d2b+0x6a>
 800d614:	0800e566 	.word	0x0800e566
 800d618:	0800e5d7 	.word	0x0800e5d7
 800d61c:	0000030f 	.word	0x0000030f
 800d620:	fffffbcd 	.word	0xfffffbcd
 800d624:	fffffbce 	.word	0xfffffbce
 800d628:	3fffffff 	.word	0x3fffffff

0800d62c <__ratio>:
 800d62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d62e:	b087      	sub	sp, #28
 800d630:	000f      	movs	r7, r1
 800d632:	a904      	add	r1, sp, #16
 800d634:	0006      	movs	r6, r0
 800d636:	f7ff ff4d 	bl	800d4d4 <__b2d>
 800d63a:	9000      	str	r0, [sp, #0]
 800d63c:	9101      	str	r1, [sp, #4]
 800d63e:	9c00      	ldr	r4, [sp, #0]
 800d640:	9d01      	ldr	r5, [sp, #4]
 800d642:	0038      	movs	r0, r7
 800d644:	a905      	add	r1, sp, #20
 800d646:	f7ff ff45 	bl	800d4d4 <__b2d>
 800d64a:	9002      	str	r0, [sp, #8]
 800d64c:	9103      	str	r1, [sp, #12]
 800d64e:	9a02      	ldr	r2, [sp, #8]
 800d650:	9b03      	ldr	r3, [sp, #12]
 800d652:	6930      	ldr	r0, [r6, #16]
 800d654:	6939      	ldr	r1, [r7, #16]
 800d656:	9e04      	ldr	r6, [sp, #16]
 800d658:	1a40      	subs	r0, r0, r1
 800d65a:	9905      	ldr	r1, [sp, #20]
 800d65c:	0140      	lsls	r0, r0, #5
 800d65e:	1a71      	subs	r1, r6, r1
 800d660:	1841      	adds	r1, r0, r1
 800d662:	0508      	lsls	r0, r1, #20
 800d664:	2900      	cmp	r1, #0
 800d666:	dd07      	ble.n	800d678 <__ratio+0x4c>
 800d668:	9901      	ldr	r1, [sp, #4]
 800d66a:	1845      	adds	r5, r0, r1
 800d66c:	0020      	movs	r0, r4
 800d66e:	0029      	movs	r1, r5
 800d670:	f7f4 f9f4 	bl	8001a5c <__aeabi_ddiv>
 800d674:	b007      	add	sp, #28
 800d676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d678:	9903      	ldr	r1, [sp, #12]
 800d67a:	1a0b      	subs	r3, r1, r0
 800d67c:	e7f6      	b.n	800d66c <__ratio+0x40>

0800d67e <__copybits>:
 800d67e:	b570      	push	{r4, r5, r6, lr}
 800d680:	0014      	movs	r4, r2
 800d682:	0005      	movs	r5, r0
 800d684:	3901      	subs	r1, #1
 800d686:	6913      	ldr	r3, [r2, #16]
 800d688:	1149      	asrs	r1, r1, #5
 800d68a:	3101      	adds	r1, #1
 800d68c:	0089      	lsls	r1, r1, #2
 800d68e:	3414      	adds	r4, #20
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	1841      	adds	r1, r0, r1
 800d694:	18e3      	adds	r3, r4, r3
 800d696:	42a3      	cmp	r3, r4
 800d698:	d80d      	bhi.n	800d6b6 <__copybits+0x38>
 800d69a:	0014      	movs	r4, r2
 800d69c:	3411      	adds	r4, #17
 800d69e:	2500      	movs	r5, #0
 800d6a0:	429c      	cmp	r4, r3
 800d6a2:	d803      	bhi.n	800d6ac <__copybits+0x2e>
 800d6a4:	1a9b      	subs	r3, r3, r2
 800d6a6:	3b11      	subs	r3, #17
 800d6a8:	089b      	lsrs	r3, r3, #2
 800d6aa:	009d      	lsls	r5, r3, #2
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	1940      	adds	r0, r0, r5
 800d6b0:	4281      	cmp	r1, r0
 800d6b2:	d803      	bhi.n	800d6bc <__copybits+0x3e>
 800d6b4:	bd70      	pop	{r4, r5, r6, pc}
 800d6b6:	cc40      	ldmia	r4!, {r6}
 800d6b8:	c540      	stmia	r5!, {r6}
 800d6ba:	e7ec      	b.n	800d696 <__copybits+0x18>
 800d6bc:	c008      	stmia	r0!, {r3}
 800d6be:	e7f7      	b.n	800d6b0 <__copybits+0x32>

0800d6c0 <__any_on>:
 800d6c0:	0002      	movs	r2, r0
 800d6c2:	6900      	ldr	r0, [r0, #16]
 800d6c4:	b510      	push	{r4, lr}
 800d6c6:	3214      	adds	r2, #20
 800d6c8:	114b      	asrs	r3, r1, #5
 800d6ca:	4298      	cmp	r0, r3
 800d6cc:	db13      	blt.n	800d6f6 <__any_on+0x36>
 800d6ce:	dd0c      	ble.n	800d6ea <__any_on+0x2a>
 800d6d0:	241f      	movs	r4, #31
 800d6d2:	0008      	movs	r0, r1
 800d6d4:	4020      	ands	r0, r4
 800d6d6:	4221      	tst	r1, r4
 800d6d8:	d007      	beq.n	800d6ea <__any_on+0x2a>
 800d6da:	0099      	lsls	r1, r3, #2
 800d6dc:	588c      	ldr	r4, [r1, r2]
 800d6de:	0021      	movs	r1, r4
 800d6e0:	40c1      	lsrs	r1, r0
 800d6e2:	4081      	lsls	r1, r0
 800d6e4:	2001      	movs	r0, #1
 800d6e6:	428c      	cmp	r4, r1
 800d6e8:	d104      	bne.n	800d6f4 <__any_on+0x34>
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	18d3      	adds	r3, r2, r3
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d803      	bhi.n	800d6fa <__any_on+0x3a>
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	bd10      	pop	{r4, pc}
 800d6f6:	0003      	movs	r3, r0
 800d6f8:	e7f7      	b.n	800d6ea <__any_on+0x2a>
 800d6fa:	3b04      	subs	r3, #4
 800d6fc:	6819      	ldr	r1, [r3, #0]
 800d6fe:	2900      	cmp	r1, #0
 800d700:	d0f5      	beq.n	800d6ee <__any_on+0x2e>
 800d702:	2001      	movs	r0, #1
 800d704:	e7f6      	b.n	800d6f4 <__any_on+0x34>

0800d706 <__ascii_wctomb>:
 800d706:	0003      	movs	r3, r0
 800d708:	1e08      	subs	r0, r1, #0
 800d70a:	d005      	beq.n	800d718 <__ascii_wctomb+0x12>
 800d70c:	2aff      	cmp	r2, #255	; 0xff
 800d70e:	d904      	bls.n	800d71a <__ascii_wctomb+0x14>
 800d710:	228a      	movs	r2, #138	; 0x8a
 800d712:	2001      	movs	r0, #1
 800d714:	601a      	str	r2, [r3, #0]
 800d716:	4240      	negs	r0, r0
 800d718:	4770      	bx	lr
 800d71a:	2001      	movs	r0, #1
 800d71c:	700a      	strb	r2, [r1, #0]
 800d71e:	e7fb      	b.n	800d718 <__ascii_wctomb+0x12>

0800d720 <__ssputs_r>:
 800d720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d722:	b085      	sub	sp, #20
 800d724:	9301      	str	r3, [sp, #4]
 800d726:	9203      	str	r2, [sp, #12]
 800d728:	688e      	ldr	r6, [r1, #8]
 800d72a:	9a01      	ldr	r2, [sp, #4]
 800d72c:	0007      	movs	r7, r0
 800d72e:	000c      	movs	r4, r1
 800d730:	680b      	ldr	r3, [r1, #0]
 800d732:	4296      	cmp	r6, r2
 800d734:	d831      	bhi.n	800d79a <__ssputs_r+0x7a>
 800d736:	898a      	ldrh	r2, [r1, #12]
 800d738:	2190      	movs	r1, #144	; 0x90
 800d73a:	00c9      	lsls	r1, r1, #3
 800d73c:	420a      	tst	r2, r1
 800d73e:	d029      	beq.n	800d794 <__ssputs_r+0x74>
 800d740:	2003      	movs	r0, #3
 800d742:	6921      	ldr	r1, [r4, #16]
 800d744:	1a5b      	subs	r3, r3, r1
 800d746:	9302      	str	r3, [sp, #8]
 800d748:	6963      	ldr	r3, [r4, #20]
 800d74a:	4343      	muls	r3, r0
 800d74c:	0fdd      	lsrs	r5, r3, #31
 800d74e:	18ed      	adds	r5, r5, r3
 800d750:	9b01      	ldr	r3, [sp, #4]
 800d752:	9802      	ldr	r0, [sp, #8]
 800d754:	3301      	adds	r3, #1
 800d756:	181b      	adds	r3, r3, r0
 800d758:	106d      	asrs	r5, r5, #1
 800d75a:	42ab      	cmp	r3, r5
 800d75c:	d900      	bls.n	800d760 <__ssputs_r+0x40>
 800d75e:	001d      	movs	r5, r3
 800d760:	0552      	lsls	r2, r2, #21
 800d762:	d529      	bpl.n	800d7b8 <__ssputs_r+0x98>
 800d764:	0029      	movs	r1, r5
 800d766:	0038      	movs	r0, r7
 800d768:	f7ff fa6e 	bl	800cc48 <_malloc_r>
 800d76c:	1e06      	subs	r6, r0, #0
 800d76e:	d02d      	beq.n	800d7cc <__ssputs_r+0xac>
 800d770:	9a02      	ldr	r2, [sp, #8]
 800d772:	6921      	ldr	r1, [r4, #16]
 800d774:	f7fd ffca 	bl	800b70c <memcpy>
 800d778:	89a2      	ldrh	r2, [r4, #12]
 800d77a:	4b19      	ldr	r3, [pc, #100]	; (800d7e0 <__ssputs_r+0xc0>)
 800d77c:	401a      	ands	r2, r3
 800d77e:	2380      	movs	r3, #128	; 0x80
 800d780:	4313      	orrs	r3, r2
 800d782:	81a3      	strh	r3, [r4, #12]
 800d784:	9b02      	ldr	r3, [sp, #8]
 800d786:	6126      	str	r6, [r4, #16]
 800d788:	18f6      	adds	r6, r6, r3
 800d78a:	6026      	str	r6, [r4, #0]
 800d78c:	6165      	str	r5, [r4, #20]
 800d78e:	9e01      	ldr	r6, [sp, #4]
 800d790:	1aed      	subs	r5, r5, r3
 800d792:	60a5      	str	r5, [r4, #8]
 800d794:	9b01      	ldr	r3, [sp, #4]
 800d796:	429e      	cmp	r6, r3
 800d798:	d900      	bls.n	800d79c <__ssputs_r+0x7c>
 800d79a:	9e01      	ldr	r6, [sp, #4]
 800d79c:	0032      	movs	r2, r6
 800d79e:	9903      	ldr	r1, [sp, #12]
 800d7a0:	6820      	ldr	r0, [r4, #0]
 800d7a2:	f000 fb8f 	bl	800dec4 <memmove>
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	68a3      	ldr	r3, [r4, #8]
 800d7aa:	1b9b      	subs	r3, r3, r6
 800d7ac:	60a3      	str	r3, [r4, #8]
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	199b      	adds	r3, r3, r6
 800d7b2:	6023      	str	r3, [r4, #0]
 800d7b4:	b005      	add	sp, #20
 800d7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7b8:	002a      	movs	r2, r5
 800d7ba:	0038      	movs	r0, r7
 800d7bc:	f000 fc00 	bl	800dfc0 <_realloc_r>
 800d7c0:	1e06      	subs	r6, r0, #0
 800d7c2:	d1df      	bne.n	800d784 <__ssputs_r+0x64>
 800d7c4:	0038      	movs	r0, r7
 800d7c6:	6921      	ldr	r1, [r4, #16]
 800d7c8:	f7fe fe6c 	bl	800c4a4 <_free_r>
 800d7cc:	230c      	movs	r3, #12
 800d7ce:	2001      	movs	r0, #1
 800d7d0:	603b      	str	r3, [r7, #0]
 800d7d2:	89a2      	ldrh	r2, [r4, #12]
 800d7d4:	3334      	adds	r3, #52	; 0x34
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	81a3      	strh	r3, [r4, #12]
 800d7da:	4240      	negs	r0, r0
 800d7dc:	e7ea      	b.n	800d7b4 <__ssputs_r+0x94>
 800d7de:	46c0      	nop			; (mov r8, r8)
 800d7e0:	fffffb7f 	.word	0xfffffb7f

0800d7e4 <_svfiprintf_r>:
 800d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7e6:	b0a1      	sub	sp, #132	; 0x84
 800d7e8:	9003      	str	r0, [sp, #12]
 800d7ea:	001d      	movs	r5, r3
 800d7ec:	898b      	ldrh	r3, [r1, #12]
 800d7ee:	000f      	movs	r7, r1
 800d7f0:	0016      	movs	r6, r2
 800d7f2:	061b      	lsls	r3, r3, #24
 800d7f4:	d511      	bpl.n	800d81a <_svfiprintf_r+0x36>
 800d7f6:	690b      	ldr	r3, [r1, #16]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d10e      	bne.n	800d81a <_svfiprintf_r+0x36>
 800d7fc:	2140      	movs	r1, #64	; 0x40
 800d7fe:	f7ff fa23 	bl	800cc48 <_malloc_r>
 800d802:	6038      	str	r0, [r7, #0]
 800d804:	6138      	str	r0, [r7, #16]
 800d806:	2800      	cmp	r0, #0
 800d808:	d105      	bne.n	800d816 <_svfiprintf_r+0x32>
 800d80a:	230c      	movs	r3, #12
 800d80c:	9a03      	ldr	r2, [sp, #12]
 800d80e:	3801      	subs	r0, #1
 800d810:	6013      	str	r3, [r2, #0]
 800d812:	b021      	add	sp, #132	; 0x84
 800d814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d816:	2340      	movs	r3, #64	; 0x40
 800d818:	617b      	str	r3, [r7, #20]
 800d81a:	2300      	movs	r3, #0
 800d81c:	ac08      	add	r4, sp, #32
 800d81e:	6163      	str	r3, [r4, #20]
 800d820:	3320      	adds	r3, #32
 800d822:	7663      	strb	r3, [r4, #25]
 800d824:	3310      	adds	r3, #16
 800d826:	76a3      	strb	r3, [r4, #26]
 800d828:	9507      	str	r5, [sp, #28]
 800d82a:	0035      	movs	r5, r6
 800d82c:	782b      	ldrb	r3, [r5, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d001      	beq.n	800d836 <_svfiprintf_r+0x52>
 800d832:	2b25      	cmp	r3, #37	; 0x25
 800d834:	d148      	bne.n	800d8c8 <_svfiprintf_r+0xe4>
 800d836:	1bab      	subs	r3, r5, r6
 800d838:	9305      	str	r3, [sp, #20]
 800d83a:	42b5      	cmp	r5, r6
 800d83c:	d00b      	beq.n	800d856 <_svfiprintf_r+0x72>
 800d83e:	0032      	movs	r2, r6
 800d840:	0039      	movs	r1, r7
 800d842:	9803      	ldr	r0, [sp, #12]
 800d844:	f7ff ff6c 	bl	800d720 <__ssputs_r>
 800d848:	3001      	adds	r0, #1
 800d84a:	d100      	bne.n	800d84e <_svfiprintf_r+0x6a>
 800d84c:	e0af      	b.n	800d9ae <_svfiprintf_r+0x1ca>
 800d84e:	6963      	ldr	r3, [r4, #20]
 800d850:	9a05      	ldr	r2, [sp, #20]
 800d852:	189b      	adds	r3, r3, r2
 800d854:	6163      	str	r3, [r4, #20]
 800d856:	782b      	ldrb	r3, [r5, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d100      	bne.n	800d85e <_svfiprintf_r+0x7a>
 800d85c:	e0a7      	b.n	800d9ae <_svfiprintf_r+0x1ca>
 800d85e:	2201      	movs	r2, #1
 800d860:	2300      	movs	r3, #0
 800d862:	4252      	negs	r2, r2
 800d864:	6062      	str	r2, [r4, #4]
 800d866:	a904      	add	r1, sp, #16
 800d868:	3254      	adds	r2, #84	; 0x54
 800d86a:	1852      	adds	r2, r2, r1
 800d86c:	1c6e      	adds	r6, r5, #1
 800d86e:	6023      	str	r3, [r4, #0]
 800d870:	60e3      	str	r3, [r4, #12]
 800d872:	60a3      	str	r3, [r4, #8]
 800d874:	7013      	strb	r3, [r2, #0]
 800d876:	65a3      	str	r3, [r4, #88]	; 0x58
 800d878:	4b55      	ldr	r3, [pc, #340]	; (800d9d0 <_svfiprintf_r+0x1ec>)
 800d87a:	2205      	movs	r2, #5
 800d87c:	0018      	movs	r0, r3
 800d87e:	7831      	ldrb	r1, [r6, #0]
 800d880:	9305      	str	r3, [sp, #20]
 800d882:	f7fd ff38 	bl	800b6f6 <memchr>
 800d886:	1c75      	adds	r5, r6, #1
 800d888:	2800      	cmp	r0, #0
 800d88a:	d11f      	bne.n	800d8cc <_svfiprintf_r+0xe8>
 800d88c:	6822      	ldr	r2, [r4, #0]
 800d88e:	06d3      	lsls	r3, r2, #27
 800d890:	d504      	bpl.n	800d89c <_svfiprintf_r+0xb8>
 800d892:	2353      	movs	r3, #83	; 0x53
 800d894:	a904      	add	r1, sp, #16
 800d896:	185b      	adds	r3, r3, r1
 800d898:	2120      	movs	r1, #32
 800d89a:	7019      	strb	r1, [r3, #0]
 800d89c:	0713      	lsls	r3, r2, #28
 800d89e:	d504      	bpl.n	800d8aa <_svfiprintf_r+0xc6>
 800d8a0:	2353      	movs	r3, #83	; 0x53
 800d8a2:	a904      	add	r1, sp, #16
 800d8a4:	185b      	adds	r3, r3, r1
 800d8a6:	212b      	movs	r1, #43	; 0x2b
 800d8a8:	7019      	strb	r1, [r3, #0]
 800d8aa:	7833      	ldrb	r3, [r6, #0]
 800d8ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d8ae:	d016      	beq.n	800d8de <_svfiprintf_r+0xfa>
 800d8b0:	0035      	movs	r5, r6
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	200a      	movs	r0, #10
 800d8b6:	68e3      	ldr	r3, [r4, #12]
 800d8b8:	782a      	ldrb	r2, [r5, #0]
 800d8ba:	1c6e      	adds	r6, r5, #1
 800d8bc:	3a30      	subs	r2, #48	; 0x30
 800d8be:	2a09      	cmp	r2, #9
 800d8c0:	d94e      	bls.n	800d960 <_svfiprintf_r+0x17c>
 800d8c2:	2900      	cmp	r1, #0
 800d8c4:	d111      	bne.n	800d8ea <_svfiprintf_r+0x106>
 800d8c6:	e017      	b.n	800d8f8 <_svfiprintf_r+0x114>
 800d8c8:	3501      	adds	r5, #1
 800d8ca:	e7af      	b.n	800d82c <_svfiprintf_r+0x48>
 800d8cc:	9b05      	ldr	r3, [sp, #20]
 800d8ce:	6822      	ldr	r2, [r4, #0]
 800d8d0:	1ac0      	subs	r0, r0, r3
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	4083      	lsls	r3, r0
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	002e      	movs	r6, r5
 800d8da:	6023      	str	r3, [r4, #0]
 800d8dc:	e7cc      	b.n	800d878 <_svfiprintf_r+0x94>
 800d8de:	9b07      	ldr	r3, [sp, #28]
 800d8e0:	1d19      	adds	r1, r3, #4
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	9107      	str	r1, [sp, #28]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	db01      	blt.n	800d8ee <_svfiprintf_r+0x10a>
 800d8ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8ec:	e004      	b.n	800d8f8 <_svfiprintf_r+0x114>
 800d8ee:	425b      	negs	r3, r3
 800d8f0:	60e3      	str	r3, [r4, #12]
 800d8f2:	2302      	movs	r3, #2
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	6023      	str	r3, [r4, #0]
 800d8f8:	782b      	ldrb	r3, [r5, #0]
 800d8fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d8fc:	d10a      	bne.n	800d914 <_svfiprintf_r+0x130>
 800d8fe:	786b      	ldrb	r3, [r5, #1]
 800d900:	2b2a      	cmp	r3, #42	; 0x2a
 800d902:	d135      	bne.n	800d970 <_svfiprintf_r+0x18c>
 800d904:	9b07      	ldr	r3, [sp, #28]
 800d906:	3502      	adds	r5, #2
 800d908:	1d1a      	adds	r2, r3, #4
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	9207      	str	r2, [sp, #28]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	db2b      	blt.n	800d96a <_svfiprintf_r+0x186>
 800d912:	9309      	str	r3, [sp, #36]	; 0x24
 800d914:	4e2f      	ldr	r6, [pc, #188]	; (800d9d4 <_svfiprintf_r+0x1f0>)
 800d916:	2203      	movs	r2, #3
 800d918:	0030      	movs	r0, r6
 800d91a:	7829      	ldrb	r1, [r5, #0]
 800d91c:	f7fd feeb 	bl	800b6f6 <memchr>
 800d920:	2800      	cmp	r0, #0
 800d922:	d006      	beq.n	800d932 <_svfiprintf_r+0x14e>
 800d924:	2340      	movs	r3, #64	; 0x40
 800d926:	1b80      	subs	r0, r0, r6
 800d928:	4083      	lsls	r3, r0
 800d92a:	6822      	ldr	r2, [r4, #0]
 800d92c:	3501      	adds	r5, #1
 800d92e:	4313      	orrs	r3, r2
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	7829      	ldrb	r1, [r5, #0]
 800d934:	2206      	movs	r2, #6
 800d936:	4828      	ldr	r0, [pc, #160]	; (800d9d8 <_svfiprintf_r+0x1f4>)
 800d938:	1c6e      	adds	r6, r5, #1
 800d93a:	7621      	strb	r1, [r4, #24]
 800d93c:	f7fd fedb 	bl	800b6f6 <memchr>
 800d940:	2800      	cmp	r0, #0
 800d942:	d03c      	beq.n	800d9be <_svfiprintf_r+0x1da>
 800d944:	4b25      	ldr	r3, [pc, #148]	; (800d9dc <_svfiprintf_r+0x1f8>)
 800d946:	2b00      	cmp	r3, #0
 800d948:	d125      	bne.n	800d996 <_svfiprintf_r+0x1b2>
 800d94a:	2207      	movs	r2, #7
 800d94c:	9b07      	ldr	r3, [sp, #28]
 800d94e:	3307      	adds	r3, #7
 800d950:	4393      	bics	r3, r2
 800d952:	3308      	adds	r3, #8
 800d954:	9307      	str	r3, [sp, #28]
 800d956:	6963      	ldr	r3, [r4, #20]
 800d958:	9a04      	ldr	r2, [sp, #16]
 800d95a:	189b      	adds	r3, r3, r2
 800d95c:	6163      	str	r3, [r4, #20]
 800d95e:	e764      	b.n	800d82a <_svfiprintf_r+0x46>
 800d960:	4343      	muls	r3, r0
 800d962:	0035      	movs	r5, r6
 800d964:	2101      	movs	r1, #1
 800d966:	189b      	adds	r3, r3, r2
 800d968:	e7a6      	b.n	800d8b8 <_svfiprintf_r+0xd4>
 800d96a:	2301      	movs	r3, #1
 800d96c:	425b      	negs	r3, r3
 800d96e:	e7d0      	b.n	800d912 <_svfiprintf_r+0x12e>
 800d970:	2300      	movs	r3, #0
 800d972:	200a      	movs	r0, #10
 800d974:	001a      	movs	r2, r3
 800d976:	3501      	adds	r5, #1
 800d978:	6063      	str	r3, [r4, #4]
 800d97a:	7829      	ldrb	r1, [r5, #0]
 800d97c:	1c6e      	adds	r6, r5, #1
 800d97e:	3930      	subs	r1, #48	; 0x30
 800d980:	2909      	cmp	r1, #9
 800d982:	d903      	bls.n	800d98c <_svfiprintf_r+0x1a8>
 800d984:	2b00      	cmp	r3, #0
 800d986:	d0c5      	beq.n	800d914 <_svfiprintf_r+0x130>
 800d988:	9209      	str	r2, [sp, #36]	; 0x24
 800d98a:	e7c3      	b.n	800d914 <_svfiprintf_r+0x130>
 800d98c:	4342      	muls	r2, r0
 800d98e:	0035      	movs	r5, r6
 800d990:	2301      	movs	r3, #1
 800d992:	1852      	adds	r2, r2, r1
 800d994:	e7f1      	b.n	800d97a <_svfiprintf_r+0x196>
 800d996:	aa07      	add	r2, sp, #28
 800d998:	9200      	str	r2, [sp, #0]
 800d99a:	0021      	movs	r1, r4
 800d99c:	003a      	movs	r2, r7
 800d99e:	4b10      	ldr	r3, [pc, #64]	; (800d9e0 <_svfiprintf_r+0x1fc>)
 800d9a0:	9803      	ldr	r0, [sp, #12]
 800d9a2:	f7fc ff7b 	bl	800a89c <_printf_float>
 800d9a6:	9004      	str	r0, [sp, #16]
 800d9a8:	9b04      	ldr	r3, [sp, #16]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	d1d3      	bne.n	800d956 <_svfiprintf_r+0x172>
 800d9ae:	89bb      	ldrh	r3, [r7, #12]
 800d9b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d9b2:	065b      	lsls	r3, r3, #25
 800d9b4:	d400      	bmi.n	800d9b8 <_svfiprintf_r+0x1d4>
 800d9b6:	e72c      	b.n	800d812 <_svfiprintf_r+0x2e>
 800d9b8:	2001      	movs	r0, #1
 800d9ba:	4240      	negs	r0, r0
 800d9bc:	e729      	b.n	800d812 <_svfiprintf_r+0x2e>
 800d9be:	aa07      	add	r2, sp, #28
 800d9c0:	9200      	str	r2, [sp, #0]
 800d9c2:	0021      	movs	r1, r4
 800d9c4:	003a      	movs	r2, r7
 800d9c6:	4b06      	ldr	r3, [pc, #24]	; (800d9e0 <_svfiprintf_r+0x1fc>)
 800d9c8:	9803      	ldr	r0, [sp, #12]
 800d9ca:	f7fd fa2d 	bl	800ae28 <_printf_i>
 800d9ce:	e7ea      	b.n	800d9a6 <_svfiprintf_r+0x1c2>
 800d9d0:	0800e82d 	.word	0x0800e82d
 800d9d4:	0800e833 	.word	0x0800e833
 800d9d8:	0800e837 	.word	0x0800e837
 800d9dc:	0800a89d 	.word	0x0800a89d
 800d9e0:	0800d721 	.word	0x0800d721

0800d9e4 <__sfputc_r>:
 800d9e4:	6893      	ldr	r3, [r2, #8]
 800d9e6:	b510      	push	{r4, lr}
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	6093      	str	r3, [r2, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	da04      	bge.n	800d9fa <__sfputc_r+0x16>
 800d9f0:	6994      	ldr	r4, [r2, #24]
 800d9f2:	42a3      	cmp	r3, r4
 800d9f4:	db07      	blt.n	800da06 <__sfputc_r+0x22>
 800d9f6:	290a      	cmp	r1, #10
 800d9f8:	d005      	beq.n	800da06 <__sfputc_r+0x22>
 800d9fa:	6813      	ldr	r3, [r2, #0]
 800d9fc:	1c58      	adds	r0, r3, #1
 800d9fe:	6010      	str	r0, [r2, #0]
 800da00:	7019      	strb	r1, [r3, #0]
 800da02:	0008      	movs	r0, r1
 800da04:	bd10      	pop	{r4, pc}
 800da06:	f7fd fcd3 	bl	800b3b0 <__swbuf_r>
 800da0a:	0001      	movs	r1, r0
 800da0c:	e7f9      	b.n	800da02 <__sfputc_r+0x1e>

0800da0e <__sfputs_r>:
 800da0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da10:	0006      	movs	r6, r0
 800da12:	000f      	movs	r7, r1
 800da14:	0014      	movs	r4, r2
 800da16:	18d5      	adds	r5, r2, r3
 800da18:	42ac      	cmp	r4, r5
 800da1a:	d101      	bne.n	800da20 <__sfputs_r+0x12>
 800da1c:	2000      	movs	r0, #0
 800da1e:	e007      	b.n	800da30 <__sfputs_r+0x22>
 800da20:	7821      	ldrb	r1, [r4, #0]
 800da22:	003a      	movs	r2, r7
 800da24:	0030      	movs	r0, r6
 800da26:	f7ff ffdd 	bl	800d9e4 <__sfputc_r>
 800da2a:	3401      	adds	r4, #1
 800da2c:	1c43      	adds	r3, r0, #1
 800da2e:	d1f3      	bne.n	800da18 <__sfputs_r+0xa>
 800da30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da34 <_vfiprintf_r>:
 800da34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da36:	b0a1      	sub	sp, #132	; 0x84
 800da38:	000f      	movs	r7, r1
 800da3a:	0015      	movs	r5, r2
 800da3c:	001e      	movs	r6, r3
 800da3e:	9003      	str	r0, [sp, #12]
 800da40:	2800      	cmp	r0, #0
 800da42:	d004      	beq.n	800da4e <_vfiprintf_r+0x1a>
 800da44:	6a03      	ldr	r3, [r0, #32]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <_vfiprintf_r+0x1a>
 800da4a:	f7fd fb8d 	bl	800b168 <__sinit>
 800da4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da50:	07db      	lsls	r3, r3, #31
 800da52:	d405      	bmi.n	800da60 <_vfiprintf_r+0x2c>
 800da54:	89bb      	ldrh	r3, [r7, #12]
 800da56:	059b      	lsls	r3, r3, #22
 800da58:	d402      	bmi.n	800da60 <_vfiprintf_r+0x2c>
 800da5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800da5c:	f7fd fe49 	bl	800b6f2 <__retarget_lock_acquire_recursive>
 800da60:	89bb      	ldrh	r3, [r7, #12]
 800da62:	071b      	lsls	r3, r3, #28
 800da64:	d502      	bpl.n	800da6c <_vfiprintf_r+0x38>
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d113      	bne.n	800da94 <_vfiprintf_r+0x60>
 800da6c:	0039      	movs	r1, r7
 800da6e:	9803      	ldr	r0, [sp, #12]
 800da70:	f7fd fce0 	bl	800b434 <__swsetup_r>
 800da74:	2800      	cmp	r0, #0
 800da76:	d00d      	beq.n	800da94 <_vfiprintf_r+0x60>
 800da78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da7a:	07db      	lsls	r3, r3, #31
 800da7c:	d503      	bpl.n	800da86 <_vfiprintf_r+0x52>
 800da7e:	2001      	movs	r0, #1
 800da80:	4240      	negs	r0, r0
 800da82:	b021      	add	sp, #132	; 0x84
 800da84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da86:	89bb      	ldrh	r3, [r7, #12]
 800da88:	059b      	lsls	r3, r3, #22
 800da8a:	d4f8      	bmi.n	800da7e <_vfiprintf_r+0x4a>
 800da8c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800da8e:	f7fd fe31 	bl	800b6f4 <__retarget_lock_release_recursive>
 800da92:	e7f4      	b.n	800da7e <_vfiprintf_r+0x4a>
 800da94:	2300      	movs	r3, #0
 800da96:	ac08      	add	r4, sp, #32
 800da98:	6163      	str	r3, [r4, #20]
 800da9a:	3320      	adds	r3, #32
 800da9c:	7663      	strb	r3, [r4, #25]
 800da9e:	3310      	adds	r3, #16
 800daa0:	76a3      	strb	r3, [r4, #26]
 800daa2:	9607      	str	r6, [sp, #28]
 800daa4:	002e      	movs	r6, r5
 800daa6:	7833      	ldrb	r3, [r6, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d001      	beq.n	800dab0 <_vfiprintf_r+0x7c>
 800daac:	2b25      	cmp	r3, #37	; 0x25
 800daae:	d148      	bne.n	800db42 <_vfiprintf_r+0x10e>
 800dab0:	1b73      	subs	r3, r6, r5
 800dab2:	9305      	str	r3, [sp, #20]
 800dab4:	42ae      	cmp	r6, r5
 800dab6:	d00b      	beq.n	800dad0 <_vfiprintf_r+0x9c>
 800dab8:	002a      	movs	r2, r5
 800daba:	0039      	movs	r1, r7
 800dabc:	9803      	ldr	r0, [sp, #12]
 800dabe:	f7ff ffa6 	bl	800da0e <__sfputs_r>
 800dac2:	3001      	adds	r0, #1
 800dac4:	d100      	bne.n	800dac8 <_vfiprintf_r+0x94>
 800dac6:	e0af      	b.n	800dc28 <_vfiprintf_r+0x1f4>
 800dac8:	6963      	ldr	r3, [r4, #20]
 800daca:	9a05      	ldr	r2, [sp, #20]
 800dacc:	189b      	adds	r3, r3, r2
 800dace:	6163      	str	r3, [r4, #20]
 800dad0:	7833      	ldrb	r3, [r6, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d100      	bne.n	800dad8 <_vfiprintf_r+0xa4>
 800dad6:	e0a7      	b.n	800dc28 <_vfiprintf_r+0x1f4>
 800dad8:	2201      	movs	r2, #1
 800dada:	2300      	movs	r3, #0
 800dadc:	4252      	negs	r2, r2
 800dade:	6062      	str	r2, [r4, #4]
 800dae0:	a904      	add	r1, sp, #16
 800dae2:	3254      	adds	r2, #84	; 0x54
 800dae4:	1852      	adds	r2, r2, r1
 800dae6:	1c75      	adds	r5, r6, #1
 800dae8:	6023      	str	r3, [r4, #0]
 800daea:	60e3      	str	r3, [r4, #12]
 800daec:	60a3      	str	r3, [r4, #8]
 800daee:	7013      	strb	r3, [r2, #0]
 800daf0:	65a3      	str	r3, [r4, #88]	; 0x58
 800daf2:	4b59      	ldr	r3, [pc, #356]	; (800dc58 <_vfiprintf_r+0x224>)
 800daf4:	2205      	movs	r2, #5
 800daf6:	0018      	movs	r0, r3
 800daf8:	7829      	ldrb	r1, [r5, #0]
 800dafa:	9305      	str	r3, [sp, #20]
 800dafc:	f7fd fdfb 	bl	800b6f6 <memchr>
 800db00:	1c6e      	adds	r6, r5, #1
 800db02:	2800      	cmp	r0, #0
 800db04:	d11f      	bne.n	800db46 <_vfiprintf_r+0x112>
 800db06:	6822      	ldr	r2, [r4, #0]
 800db08:	06d3      	lsls	r3, r2, #27
 800db0a:	d504      	bpl.n	800db16 <_vfiprintf_r+0xe2>
 800db0c:	2353      	movs	r3, #83	; 0x53
 800db0e:	a904      	add	r1, sp, #16
 800db10:	185b      	adds	r3, r3, r1
 800db12:	2120      	movs	r1, #32
 800db14:	7019      	strb	r1, [r3, #0]
 800db16:	0713      	lsls	r3, r2, #28
 800db18:	d504      	bpl.n	800db24 <_vfiprintf_r+0xf0>
 800db1a:	2353      	movs	r3, #83	; 0x53
 800db1c:	a904      	add	r1, sp, #16
 800db1e:	185b      	adds	r3, r3, r1
 800db20:	212b      	movs	r1, #43	; 0x2b
 800db22:	7019      	strb	r1, [r3, #0]
 800db24:	782b      	ldrb	r3, [r5, #0]
 800db26:	2b2a      	cmp	r3, #42	; 0x2a
 800db28:	d016      	beq.n	800db58 <_vfiprintf_r+0x124>
 800db2a:	002e      	movs	r6, r5
 800db2c:	2100      	movs	r1, #0
 800db2e:	200a      	movs	r0, #10
 800db30:	68e3      	ldr	r3, [r4, #12]
 800db32:	7832      	ldrb	r2, [r6, #0]
 800db34:	1c75      	adds	r5, r6, #1
 800db36:	3a30      	subs	r2, #48	; 0x30
 800db38:	2a09      	cmp	r2, #9
 800db3a:	d94e      	bls.n	800dbda <_vfiprintf_r+0x1a6>
 800db3c:	2900      	cmp	r1, #0
 800db3e:	d111      	bne.n	800db64 <_vfiprintf_r+0x130>
 800db40:	e017      	b.n	800db72 <_vfiprintf_r+0x13e>
 800db42:	3601      	adds	r6, #1
 800db44:	e7af      	b.n	800daa6 <_vfiprintf_r+0x72>
 800db46:	9b05      	ldr	r3, [sp, #20]
 800db48:	6822      	ldr	r2, [r4, #0]
 800db4a:	1ac0      	subs	r0, r0, r3
 800db4c:	2301      	movs	r3, #1
 800db4e:	4083      	lsls	r3, r0
 800db50:	4313      	orrs	r3, r2
 800db52:	0035      	movs	r5, r6
 800db54:	6023      	str	r3, [r4, #0]
 800db56:	e7cc      	b.n	800daf2 <_vfiprintf_r+0xbe>
 800db58:	9b07      	ldr	r3, [sp, #28]
 800db5a:	1d19      	adds	r1, r3, #4
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	9107      	str	r1, [sp, #28]
 800db60:	2b00      	cmp	r3, #0
 800db62:	db01      	blt.n	800db68 <_vfiprintf_r+0x134>
 800db64:	930b      	str	r3, [sp, #44]	; 0x2c
 800db66:	e004      	b.n	800db72 <_vfiprintf_r+0x13e>
 800db68:	425b      	negs	r3, r3
 800db6a:	60e3      	str	r3, [r4, #12]
 800db6c:	2302      	movs	r3, #2
 800db6e:	4313      	orrs	r3, r2
 800db70:	6023      	str	r3, [r4, #0]
 800db72:	7833      	ldrb	r3, [r6, #0]
 800db74:	2b2e      	cmp	r3, #46	; 0x2e
 800db76:	d10a      	bne.n	800db8e <_vfiprintf_r+0x15a>
 800db78:	7873      	ldrb	r3, [r6, #1]
 800db7a:	2b2a      	cmp	r3, #42	; 0x2a
 800db7c:	d135      	bne.n	800dbea <_vfiprintf_r+0x1b6>
 800db7e:	9b07      	ldr	r3, [sp, #28]
 800db80:	3602      	adds	r6, #2
 800db82:	1d1a      	adds	r2, r3, #4
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	9207      	str	r2, [sp, #28]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	db2b      	blt.n	800dbe4 <_vfiprintf_r+0x1b0>
 800db8c:	9309      	str	r3, [sp, #36]	; 0x24
 800db8e:	4d33      	ldr	r5, [pc, #204]	; (800dc5c <_vfiprintf_r+0x228>)
 800db90:	2203      	movs	r2, #3
 800db92:	0028      	movs	r0, r5
 800db94:	7831      	ldrb	r1, [r6, #0]
 800db96:	f7fd fdae 	bl	800b6f6 <memchr>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d006      	beq.n	800dbac <_vfiprintf_r+0x178>
 800db9e:	2340      	movs	r3, #64	; 0x40
 800dba0:	1b40      	subs	r0, r0, r5
 800dba2:	4083      	lsls	r3, r0
 800dba4:	6822      	ldr	r2, [r4, #0]
 800dba6:	3601      	adds	r6, #1
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	6023      	str	r3, [r4, #0]
 800dbac:	7831      	ldrb	r1, [r6, #0]
 800dbae:	2206      	movs	r2, #6
 800dbb0:	482b      	ldr	r0, [pc, #172]	; (800dc60 <_vfiprintf_r+0x22c>)
 800dbb2:	1c75      	adds	r5, r6, #1
 800dbb4:	7621      	strb	r1, [r4, #24]
 800dbb6:	f7fd fd9e 	bl	800b6f6 <memchr>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	d043      	beq.n	800dc46 <_vfiprintf_r+0x212>
 800dbbe:	4b29      	ldr	r3, [pc, #164]	; (800dc64 <_vfiprintf_r+0x230>)
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d125      	bne.n	800dc10 <_vfiprintf_r+0x1dc>
 800dbc4:	2207      	movs	r2, #7
 800dbc6:	9b07      	ldr	r3, [sp, #28]
 800dbc8:	3307      	adds	r3, #7
 800dbca:	4393      	bics	r3, r2
 800dbcc:	3308      	adds	r3, #8
 800dbce:	9307      	str	r3, [sp, #28]
 800dbd0:	6963      	ldr	r3, [r4, #20]
 800dbd2:	9a04      	ldr	r2, [sp, #16]
 800dbd4:	189b      	adds	r3, r3, r2
 800dbd6:	6163      	str	r3, [r4, #20]
 800dbd8:	e764      	b.n	800daa4 <_vfiprintf_r+0x70>
 800dbda:	4343      	muls	r3, r0
 800dbdc:	002e      	movs	r6, r5
 800dbde:	2101      	movs	r1, #1
 800dbe0:	189b      	adds	r3, r3, r2
 800dbe2:	e7a6      	b.n	800db32 <_vfiprintf_r+0xfe>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	425b      	negs	r3, r3
 800dbe8:	e7d0      	b.n	800db8c <_vfiprintf_r+0x158>
 800dbea:	2300      	movs	r3, #0
 800dbec:	200a      	movs	r0, #10
 800dbee:	001a      	movs	r2, r3
 800dbf0:	3601      	adds	r6, #1
 800dbf2:	6063      	str	r3, [r4, #4]
 800dbf4:	7831      	ldrb	r1, [r6, #0]
 800dbf6:	1c75      	adds	r5, r6, #1
 800dbf8:	3930      	subs	r1, #48	; 0x30
 800dbfa:	2909      	cmp	r1, #9
 800dbfc:	d903      	bls.n	800dc06 <_vfiprintf_r+0x1d2>
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d0c5      	beq.n	800db8e <_vfiprintf_r+0x15a>
 800dc02:	9209      	str	r2, [sp, #36]	; 0x24
 800dc04:	e7c3      	b.n	800db8e <_vfiprintf_r+0x15a>
 800dc06:	4342      	muls	r2, r0
 800dc08:	002e      	movs	r6, r5
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	1852      	adds	r2, r2, r1
 800dc0e:	e7f1      	b.n	800dbf4 <_vfiprintf_r+0x1c0>
 800dc10:	aa07      	add	r2, sp, #28
 800dc12:	9200      	str	r2, [sp, #0]
 800dc14:	0021      	movs	r1, r4
 800dc16:	003a      	movs	r2, r7
 800dc18:	4b13      	ldr	r3, [pc, #76]	; (800dc68 <_vfiprintf_r+0x234>)
 800dc1a:	9803      	ldr	r0, [sp, #12]
 800dc1c:	f7fc fe3e 	bl	800a89c <_printf_float>
 800dc20:	9004      	str	r0, [sp, #16]
 800dc22:	9b04      	ldr	r3, [sp, #16]
 800dc24:	3301      	adds	r3, #1
 800dc26:	d1d3      	bne.n	800dbd0 <_vfiprintf_r+0x19c>
 800dc28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc2a:	07db      	lsls	r3, r3, #31
 800dc2c:	d405      	bmi.n	800dc3a <_vfiprintf_r+0x206>
 800dc2e:	89bb      	ldrh	r3, [r7, #12]
 800dc30:	059b      	lsls	r3, r3, #22
 800dc32:	d402      	bmi.n	800dc3a <_vfiprintf_r+0x206>
 800dc34:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800dc36:	f7fd fd5d 	bl	800b6f4 <__retarget_lock_release_recursive>
 800dc3a:	89bb      	ldrh	r3, [r7, #12]
 800dc3c:	065b      	lsls	r3, r3, #25
 800dc3e:	d500      	bpl.n	800dc42 <_vfiprintf_r+0x20e>
 800dc40:	e71d      	b.n	800da7e <_vfiprintf_r+0x4a>
 800dc42:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dc44:	e71d      	b.n	800da82 <_vfiprintf_r+0x4e>
 800dc46:	aa07      	add	r2, sp, #28
 800dc48:	9200      	str	r2, [sp, #0]
 800dc4a:	0021      	movs	r1, r4
 800dc4c:	003a      	movs	r2, r7
 800dc4e:	4b06      	ldr	r3, [pc, #24]	; (800dc68 <_vfiprintf_r+0x234>)
 800dc50:	9803      	ldr	r0, [sp, #12]
 800dc52:	f7fd f8e9 	bl	800ae28 <_printf_i>
 800dc56:	e7e3      	b.n	800dc20 <_vfiprintf_r+0x1ec>
 800dc58:	0800e82d 	.word	0x0800e82d
 800dc5c:	0800e833 	.word	0x0800e833
 800dc60:	0800e837 	.word	0x0800e837
 800dc64:	0800a89d 	.word	0x0800a89d
 800dc68:	0800da0f 	.word	0x0800da0f

0800dc6c <__sflush_r>:
 800dc6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc6e:	898b      	ldrh	r3, [r1, #12]
 800dc70:	0005      	movs	r5, r0
 800dc72:	000c      	movs	r4, r1
 800dc74:	071a      	lsls	r2, r3, #28
 800dc76:	d45c      	bmi.n	800dd32 <__sflush_r+0xc6>
 800dc78:	684a      	ldr	r2, [r1, #4]
 800dc7a:	2a00      	cmp	r2, #0
 800dc7c:	dc04      	bgt.n	800dc88 <__sflush_r+0x1c>
 800dc7e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800dc80:	2a00      	cmp	r2, #0
 800dc82:	dc01      	bgt.n	800dc88 <__sflush_r+0x1c>
 800dc84:	2000      	movs	r0, #0
 800dc86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc88:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800dc8a:	2f00      	cmp	r7, #0
 800dc8c:	d0fa      	beq.n	800dc84 <__sflush_r+0x18>
 800dc8e:	2200      	movs	r2, #0
 800dc90:	2080      	movs	r0, #128	; 0x80
 800dc92:	682e      	ldr	r6, [r5, #0]
 800dc94:	602a      	str	r2, [r5, #0]
 800dc96:	001a      	movs	r2, r3
 800dc98:	0140      	lsls	r0, r0, #5
 800dc9a:	6a21      	ldr	r1, [r4, #32]
 800dc9c:	4002      	ands	r2, r0
 800dc9e:	4203      	tst	r3, r0
 800dca0:	d034      	beq.n	800dd0c <__sflush_r+0xa0>
 800dca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dca4:	89a3      	ldrh	r3, [r4, #12]
 800dca6:	075b      	lsls	r3, r3, #29
 800dca8:	d506      	bpl.n	800dcb8 <__sflush_r+0x4c>
 800dcaa:	6863      	ldr	r3, [r4, #4]
 800dcac:	1ac0      	subs	r0, r0, r3
 800dcae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d001      	beq.n	800dcb8 <__sflush_r+0x4c>
 800dcb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcb6:	1ac0      	subs	r0, r0, r3
 800dcb8:	0002      	movs	r2, r0
 800dcba:	2300      	movs	r3, #0
 800dcbc:	0028      	movs	r0, r5
 800dcbe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800dcc0:	6a21      	ldr	r1, [r4, #32]
 800dcc2:	47b8      	blx	r7
 800dcc4:	89a2      	ldrh	r2, [r4, #12]
 800dcc6:	1c43      	adds	r3, r0, #1
 800dcc8:	d106      	bne.n	800dcd8 <__sflush_r+0x6c>
 800dcca:	6829      	ldr	r1, [r5, #0]
 800dccc:	291d      	cmp	r1, #29
 800dcce:	d82c      	bhi.n	800dd2a <__sflush_r+0xbe>
 800dcd0:	4b2a      	ldr	r3, [pc, #168]	; (800dd7c <__sflush_r+0x110>)
 800dcd2:	410b      	asrs	r3, r1
 800dcd4:	07db      	lsls	r3, r3, #31
 800dcd6:	d428      	bmi.n	800dd2a <__sflush_r+0xbe>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	6063      	str	r3, [r4, #4]
 800dcdc:	6923      	ldr	r3, [r4, #16]
 800dcde:	6023      	str	r3, [r4, #0]
 800dce0:	04d2      	lsls	r2, r2, #19
 800dce2:	d505      	bpl.n	800dcf0 <__sflush_r+0x84>
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	d102      	bne.n	800dcee <__sflush_r+0x82>
 800dce8:	682b      	ldr	r3, [r5, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d100      	bne.n	800dcf0 <__sflush_r+0x84>
 800dcee:	6560      	str	r0, [r4, #84]	; 0x54
 800dcf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcf2:	602e      	str	r6, [r5, #0]
 800dcf4:	2900      	cmp	r1, #0
 800dcf6:	d0c5      	beq.n	800dc84 <__sflush_r+0x18>
 800dcf8:	0023      	movs	r3, r4
 800dcfa:	3344      	adds	r3, #68	; 0x44
 800dcfc:	4299      	cmp	r1, r3
 800dcfe:	d002      	beq.n	800dd06 <__sflush_r+0x9a>
 800dd00:	0028      	movs	r0, r5
 800dd02:	f7fe fbcf 	bl	800c4a4 <_free_r>
 800dd06:	2000      	movs	r0, #0
 800dd08:	6360      	str	r0, [r4, #52]	; 0x34
 800dd0a:	e7bc      	b.n	800dc86 <__sflush_r+0x1a>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	0028      	movs	r0, r5
 800dd10:	47b8      	blx	r7
 800dd12:	1c43      	adds	r3, r0, #1
 800dd14:	d1c6      	bne.n	800dca4 <__sflush_r+0x38>
 800dd16:	682b      	ldr	r3, [r5, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0c3      	beq.n	800dca4 <__sflush_r+0x38>
 800dd1c:	2b1d      	cmp	r3, #29
 800dd1e:	d001      	beq.n	800dd24 <__sflush_r+0xb8>
 800dd20:	2b16      	cmp	r3, #22
 800dd22:	d101      	bne.n	800dd28 <__sflush_r+0xbc>
 800dd24:	602e      	str	r6, [r5, #0]
 800dd26:	e7ad      	b.n	800dc84 <__sflush_r+0x18>
 800dd28:	89a2      	ldrh	r2, [r4, #12]
 800dd2a:	2340      	movs	r3, #64	; 0x40
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	81a3      	strh	r3, [r4, #12]
 800dd30:	e7a9      	b.n	800dc86 <__sflush_r+0x1a>
 800dd32:	690e      	ldr	r6, [r1, #16]
 800dd34:	2e00      	cmp	r6, #0
 800dd36:	d0a5      	beq.n	800dc84 <__sflush_r+0x18>
 800dd38:	680f      	ldr	r7, [r1, #0]
 800dd3a:	600e      	str	r6, [r1, #0]
 800dd3c:	1bba      	subs	r2, r7, r6
 800dd3e:	9201      	str	r2, [sp, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	079b      	lsls	r3, r3, #30
 800dd44:	d100      	bne.n	800dd48 <__sflush_r+0xdc>
 800dd46:	694a      	ldr	r2, [r1, #20]
 800dd48:	60a2      	str	r2, [r4, #8]
 800dd4a:	9b01      	ldr	r3, [sp, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	dd99      	ble.n	800dc84 <__sflush_r+0x18>
 800dd50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd52:	0032      	movs	r2, r6
 800dd54:	001f      	movs	r7, r3
 800dd56:	0028      	movs	r0, r5
 800dd58:	9b01      	ldr	r3, [sp, #4]
 800dd5a:	6a21      	ldr	r1, [r4, #32]
 800dd5c:	47b8      	blx	r7
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	dc06      	bgt.n	800dd70 <__sflush_r+0x104>
 800dd62:	2340      	movs	r3, #64	; 0x40
 800dd64:	2001      	movs	r0, #1
 800dd66:	89a2      	ldrh	r2, [r4, #12]
 800dd68:	4240      	negs	r0, r0
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	81a3      	strh	r3, [r4, #12]
 800dd6e:	e78a      	b.n	800dc86 <__sflush_r+0x1a>
 800dd70:	9b01      	ldr	r3, [sp, #4]
 800dd72:	1836      	adds	r6, r6, r0
 800dd74:	1a1b      	subs	r3, r3, r0
 800dd76:	9301      	str	r3, [sp, #4]
 800dd78:	e7e7      	b.n	800dd4a <__sflush_r+0xde>
 800dd7a:	46c0      	nop			; (mov r8, r8)
 800dd7c:	dfbffffe 	.word	0xdfbffffe

0800dd80 <_fflush_r>:
 800dd80:	690b      	ldr	r3, [r1, #16]
 800dd82:	b570      	push	{r4, r5, r6, lr}
 800dd84:	0005      	movs	r5, r0
 800dd86:	000c      	movs	r4, r1
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d102      	bne.n	800dd92 <_fflush_r+0x12>
 800dd8c:	2500      	movs	r5, #0
 800dd8e:	0028      	movs	r0, r5
 800dd90:	bd70      	pop	{r4, r5, r6, pc}
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d004      	beq.n	800dda0 <_fflush_r+0x20>
 800dd96:	6a03      	ldr	r3, [r0, #32]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d101      	bne.n	800dda0 <_fflush_r+0x20>
 800dd9c:	f7fd f9e4 	bl	800b168 <__sinit>
 800dda0:	220c      	movs	r2, #12
 800dda2:	5ea3      	ldrsh	r3, [r4, r2]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d0f1      	beq.n	800dd8c <_fflush_r+0xc>
 800dda8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ddaa:	07d2      	lsls	r2, r2, #31
 800ddac:	d404      	bmi.n	800ddb8 <_fflush_r+0x38>
 800ddae:	059b      	lsls	r3, r3, #22
 800ddb0:	d402      	bmi.n	800ddb8 <_fflush_r+0x38>
 800ddb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddb4:	f7fd fc9d 	bl	800b6f2 <__retarget_lock_acquire_recursive>
 800ddb8:	0028      	movs	r0, r5
 800ddba:	0021      	movs	r1, r4
 800ddbc:	f7ff ff56 	bl	800dc6c <__sflush_r>
 800ddc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddc2:	0005      	movs	r5, r0
 800ddc4:	07db      	lsls	r3, r3, #31
 800ddc6:	d4e2      	bmi.n	800dd8e <_fflush_r+0xe>
 800ddc8:	89a3      	ldrh	r3, [r4, #12]
 800ddca:	059b      	lsls	r3, r3, #22
 800ddcc:	d4df      	bmi.n	800dd8e <_fflush_r+0xe>
 800ddce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddd0:	f7fd fc90 	bl	800b6f4 <__retarget_lock_release_recursive>
 800ddd4:	e7db      	b.n	800dd8e <_fflush_r+0xe>
	...

0800ddd8 <fiprintf>:
 800ddd8:	b40e      	push	{r1, r2, r3}
 800ddda:	b517      	push	{r0, r1, r2, r4, lr}
 800dddc:	4c05      	ldr	r4, [pc, #20]	; (800ddf4 <fiprintf+0x1c>)
 800ddde:	ab05      	add	r3, sp, #20
 800dde0:	cb04      	ldmia	r3!, {r2}
 800dde2:	0001      	movs	r1, r0
 800dde4:	6820      	ldr	r0, [r4, #0]
 800dde6:	9301      	str	r3, [sp, #4]
 800dde8:	f7ff fe24 	bl	800da34 <_vfiprintf_r>
 800ddec:	bc1e      	pop	{r1, r2, r3, r4}
 800ddee:	bc08      	pop	{r3}
 800ddf0:	b003      	add	sp, #12
 800ddf2:	4718      	bx	r3
 800ddf4:	2000024c 	.word	0x2000024c

0800ddf8 <__swhatbuf_r>:
 800ddf8:	b570      	push	{r4, r5, r6, lr}
 800ddfa:	000e      	movs	r6, r1
 800ddfc:	001d      	movs	r5, r3
 800ddfe:	230e      	movs	r3, #14
 800de00:	5ec9      	ldrsh	r1, [r1, r3]
 800de02:	0014      	movs	r4, r2
 800de04:	b096      	sub	sp, #88	; 0x58
 800de06:	2900      	cmp	r1, #0
 800de08:	da0c      	bge.n	800de24 <__swhatbuf_r+0x2c>
 800de0a:	89b2      	ldrh	r2, [r6, #12]
 800de0c:	2380      	movs	r3, #128	; 0x80
 800de0e:	0011      	movs	r1, r2
 800de10:	4019      	ands	r1, r3
 800de12:	421a      	tst	r2, r3
 800de14:	d013      	beq.n	800de3e <__swhatbuf_r+0x46>
 800de16:	2100      	movs	r1, #0
 800de18:	3b40      	subs	r3, #64	; 0x40
 800de1a:	2000      	movs	r0, #0
 800de1c:	6029      	str	r1, [r5, #0]
 800de1e:	6023      	str	r3, [r4, #0]
 800de20:	b016      	add	sp, #88	; 0x58
 800de22:	bd70      	pop	{r4, r5, r6, pc}
 800de24:	466a      	mov	r2, sp
 800de26:	f000 f861 	bl	800deec <_fstat_r>
 800de2a:	2800      	cmp	r0, #0
 800de2c:	dbed      	blt.n	800de0a <__swhatbuf_r+0x12>
 800de2e:	23f0      	movs	r3, #240	; 0xf0
 800de30:	9901      	ldr	r1, [sp, #4]
 800de32:	021b      	lsls	r3, r3, #8
 800de34:	4019      	ands	r1, r3
 800de36:	4b03      	ldr	r3, [pc, #12]	; (800de44 <__swhatbuf_r+0x4c>)
 800de38:	18c9      	adds	r1, r1, r3
 800de3a:	424b      	negs	r3, r1
 800de3c:	4159      	adcs	r1, r3
 800de3e:	2380      	movs	r3, #128	; 0x80
 800de40:	00db      	lsls	r3, r3, #3
 800de42:	e7ea      	b.n	800de1a <__swhatbuf_r+0x22>
 800de44:	ffffe000 	.word	0xffffe000

0800de48 <__smakebuf_r>:
 800de48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de4a:	2602      	movs	r6, #2
 800de4c:	898b      	ldrh	r3, [r1, #12]
 800de4e:	0005      	movs	r5, r0
 800de50:	000c      	movs	r4, r1
 800de52:	4233      	tst	r3, r6
 800de54:	d006      	beq.n	800de64 <__smakebuf_r+0x1c>
 800de56:	0023      	movs	r3, r4
 800de58:	3347      	adds	r3, #71	; 0x47
 800de5a:	6023      	str	r3, [r4, #0]
 800de5c:	6123      	str	r3, [r4, #16]
 800de5e:	2301      	movs	r3, #1
 800de60:	6163      	str	r3, [r4, #20]
 800de62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800de64:	466a      	mov	r2, sp
 800de66:	ab01      	add	r3, sp, #4
 800de68:	f7ff ffc6 	bl	800ddf8 <__swhatbuf_r>
 800de6c:	9900      	ldr	r1, [sp, #0]
 800de6e:	0007      	movs	r7, r0
 800de70:	0028      	movs	r0, r5
 800de72:	f7fe fee9 	bl	800cc48 <_malloc_r>
 800de76:	2800      	cmp	r0, #0
 800de78:	d108      	bne.n	800de8c <__smakebuf_r+0x44>
 800de7a:	220c      	movs	r2, #12
 800de7c:	5ea3      	ldrsh	r3, [r4, r2]
 800de7e:	059a      	lsls	r2, r3, #22
 800de80:	d4ef      	bmi.n	800de62 <__smakebuf_r+0x1a>
 800de82:	2203      	movs	r2, #3
 800de84:	4393      	bics	r3, r2
 800de86:	431e      	orrs	r6, r3
 800de88:	81a6      	strh	r6, [r4, #12]
 800de8a:	e7e4      	b.n	800de56 <__smakebuf_r+0xe>
 800de8c:	2380      	movs	r3, #128	; 0x80
 800de8e:	89a2      	ldrh	r2, [r4, #12]
 800de90:	6020      	str	r0, [r4, #0]
 800de92:	4313      	orrs	r3, r2
 800de94:	81a3      	strh	r3, [r4, #12]
 800de96:	9b00      	ldr	r3, [sp, #0]
 800de98:	6120      	str	r0, [r4, #16]
 800de9a:	6163      	str	r3, [r4, #20]
 800de9c:	9b01      	ldr	r3, [sp, #4]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d00c      	beq.n	800debc <__smakebuf_r+0x74>
 800dea2:	0028      	movs	r0, r5
 800dea4:	230e      	movs	r3, #14
 800dea6:	5ee1      	ldrsh	r1, [r4, r3]
 800dea8:	f000 f832 	bl	800df10 <_isatty_r>
 800deac:	2800      	cmp	r0, #0
 800deae:	d005      	beq.n	800debc <__smakebuf_r+0x74>
 800deb0:	2303      	movs	r3, #3
 800deb2:	89a2      	ldrh	r2, [r4, #12]
 800deb4:	439a      	bics	r2, r3
 800deb6:	3b02      	subs	r3, #2
 800deb8:	4313      	orrs	r3, r2
 800deba:	81a3      	strh	r3, [r4, #12]
 800debc:	89a3      	ldrh	r3, [r4, #12]
 800debe:	433b      	orrs	r3, r7
 800dec0:	81a3      	strh	r3, [r4, #12]
 800dec2:	e7ce      	b.n	800de62 <__smakebuf_r+0x1a>

0800dec4 <memmove>:
 800dec4:	b510      	push	{r4, lr}
 800dec6:	4288      	cmp	r0, r1
 800dec8:	d902      	bls.n	800ded0 <memmove+0xc>
 800deca:	188b      	adds	r3, r1, r2
 800decc:	4298      	cmp	r0, r3
 800dece:	d303      	bcc.n	800ded8 <memmove+0x14>
 800ded0:	2300      	movs	r3, #0
 800ded2:	e007      	b.n	800dee4 <memmove+0x20>
 800ded4:	5c8b      	ldrb	r3, [r1, r2]
 800ded6:	5483      	strb	r3, [r0, r2]
 800ded8:	3a01      	subs	r2, #1
 800deda:	d2fb      	bcs.n	800ded4 <memmove+0x10>
 800dedc:	bd10      	pop	{r4, pc}
 800dede:	5ccc      	ldrb	r4, [r1, r3]
 800dee0:	54c4      	strb	r4, [r0, r3]
 800dee2:	3301      	adds	r3, #1
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d1fa      	bne.n	800dede <memmove+0x1a>
 800dee8:	e7f8      	b.n	800dedc <memmove+0x18>
	...

0800deec <_fstat_r>:
 800deec:	2300      	movs	r3, #0
 800deee:	b570      	push	{r4, r5, r6, lr}
 800def0:	4d06      	ldr	r5, [pc, #24]	; (800df0c <_fstat_r+0x20>)
 800def2:	0004      	movs	r4, r0
 800def4:	0008      	movs	r0, r1
 800def6:	0011      	movs	r1, r2
 800def8:	602b      	str	r3, [r5, #0]
 800defa:	f7f5 fb76 	bl	80035ea <_fstat>
 800defe:	1c43      	adds	r3, r0, #1
 800df00:	d103      	bne.n	800df0a <_fstat_r+0x1e>
 800df02:	682b      	ldr	r3, [r5, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d000      	beq.n	800df0a <_fstat_r+0x1e>
 800df08:	6023      	str	r3, [r4, #0]
 800df0a:	bd70      	pop	{r4, r5, r6, pc}
 800df0c:	200007b8 	.word	0x200007b8

0800df10 <_isatty_r>:
 800df10:	2300      	movs	r3, #0
 800df12:	b570      	push	{r4, r5, r6, lr}
 800df14:	4d06      	ldr	r5, [pc, #24]	; (800df30 <_isatty_r+0x20>)
 800df16:	0004      	movs	r4, r0
 800df18:	0008      	movs	r0, r1
 800df1a:	602b      	str	r3, [r5, #0]
 800df1c:	f7f5 fb73 	bl	8003606 <_isatty>
 800df20:	1c43      	adds	r3, r0, #1
 800df22:	d103      	bne.n	800df2c <_isatty_r+0x1c>
 800df24:	682b      	ldr	r3, [r5, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d000      	beq.n	800df2c <_isatty_r+0x1c>
 800df2a:	6023      	str	r3, [r4, #0]
 800df2c:	bd70      	pop	{r4, r5, r6, pc}
 800df2e:	46c0      	nop			; (mov r8, r8)
 800df30:	200007b8 	.word	0x200007b8

0800df34 <_sbrk_r>:
 800df34:	2300      	movs	r3, #0
 800df36:	b570      	push	{r4, r5, r6, lr}
 800df38:	4d06      	ldr	r5, [pc, #24]	; (800df54 <_sbrk_r+0x20>)
 800df3a:	0004      	movs	r4, r0
 800df3c:	0008      	movs	r0, r1
 800df3e:	602b      	str	r3, [r5, #0]
 800df40:	f7f5 fb76 	bl	8003630 <_sbrk>
 800df44:	1c43      	adds	r3, r0, #1
 800df46:	d103      	bne.n	800df50 <_sbrk_r+0x1c>
 800df48:	682b      	ldr	r3, [r5, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d000      	beq.n	800df50 <_sbrk_r+0x1c>
 800df4e:	6023      	str	r3, [r4, #0]
 800df50:	bd70      	pop	{r4, r5, r6, pc}
 800df52:	46c0      	nop			; (mov r8, r8)
 800df54:	200007b8 	.word	0x200007b8

0800df58 <abort>:
 800df58:	2006      	movs	r0, #6
 800df5a:	b510      	push	{r4, lr}
 800df5c:	f000 f88a 	bl	800e074 <raise>
 800df60:	2001      	movs	r0, #1
 800df62:	f7f5 faf3 	bl	800354c <_exit>

0800df66 <_calloc_r>:
 800df66:	b570      	push	{r4, r5, r6, lr}
 800df68:	0c0b      	lsrs	r3, r1, #16
 800df6a:	0c15      	lsrs	r5, r2, #16
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d11e      	bne.n	800dfae <_calloc_r+0x48>
 800df70:	2d00      	cmp	r5, #0
 800df72:	d10c      	bne.n	800df8e <_calloc_r+0x28>
 800df74:	b289      	uxth	r1, r1
 800df76:	b294      	uxth	r4, r2
 800df78:	434c      	muls	r4, r1
 800df7a:	0021      	movs	r1, r4
 800df7c:	f7fe fe64 	bl	800cc48 <_malloc_r>
 800df80:	1e05      	subs	r5, r0, #0
 800df82:	d01b      	beq.n	800dfbc <_calloc_r+0x56>
 800df84:	0022      	movs	r2, r4
 800df86:	2100      	movs	r1, #0
 800df88:	f7fd fab8 	bl	800b4fc <memset>
 800df8c:	e016      	b.n	800dfbc <_calloc_r+0x56>
 800df8e:	1c2b      	adds	r3, r5, #0
 800df90:	1c0c      	adds	r4, r1, #0
 800df92:	b289      	uxth	r1, r1
 800df94:	b292      	uxth	r2, r2
 800df96:	434a      	muls	r2, r1
 800df98:	b2a1      	uxth	r1, r4
 800df9a:	b29c      	uxth	r4, r3
 800df9c:	434c      	muls	r4, r1
 800df9e:	0c13      	lsrs	r3, r2, #16
 800dfa0:	18e4      	adds	r4, r4, r3
 800dfa2:	0c23      	lsrs	r3, r4, #16
 800dfa4:	d107      	bne.n	800dfb6 <_calloc_r+0x50>
 800dfa6:	0424      	lsls	r4, r4, #16
 800dfa8:	b292      	uxth	r2, r2
 800dfaa:	4314      	orrs	r4, r2
 800dfac:	e7e5      	b.n	800df7a <_calloc_r+0x14>
 800dfae:	2d00      	cmp	r5, #0
 800dfb0:	d101      	bne.n	800dfb6 <_calloc_r+0x50>
 800dfb2:	1c14      	adds	r4, r2, #0
 800dfb4:	e7ed      	b.n	800df92 <_calloc_r+0x2c>
 800dfb6:	230c      	movs	r3, #12
 800dfb8:	2500      	movs	r5, #0
 800dfba:	6003      	str	r3, [r0, #0]
 800dfbc:	0028      	movs	r0, r5
 800dfbe:	bd70      	pop	{r4, r5, r6, pc}

0800dfc0 <_realloc_r>:
 800dfc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfc2:	0007      	movs	r7, r0
 800dfc4:	000e      	movs	r6, r1
 800dfc6:	0014      	movs	r4, r2
 800dfc8:	2900      	cmp	r1, #0
 800dfca:	d105      	bne.n	800dfd8 <_realloc_r+0x18>
 800dfcc:	0011      	movs	r1, r2
 800dfce:	f7fe fe3b 	bl	800cc48 <_malloc_r>
 800dfd2:	0005      	movs	r5, r0
 800dfd4:	0028      	movs	r0, r5
 800dfd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dfd8:	2a00      	cmp	r2, #0
 800dfda:	d103      	bne.n	800dfe4 <_realloc_r+0x24>
 800dfdc:	f7fe fa62 	bl	800c4a4 <_free_r>
 800dfe0:	0025      	movs	r5, r4
 800dfe2:	e7f7      	b.n	800dfd4 <_realloc_r+0x14>
 800dfe4:	f000 f866 	bl	800e0b4 <_malloc_usable_size_r>
 800dfe8:	9001      	str	r0, [sp, #4]
 800dfea:	4284      	cmp	r4, r0
 800dfec:	d803      	bhi.n	800dff6 <_realloc_r+0x36>
 800dfee:	0035      	movs	r5, r6
 800dff0:	0843      	lsrs	r3, r0, #1
 800dff2:	42a3      	cmp	r3, r4
 800dff4:	d3ee      	bcc.n	800dfd4 <_realloc_r+0x14>
 800dff6:	0021      	movs	r1, r4
 800dff8:	0038      	movs	r0, r7
 800dffa:	f7fe fe25 	bl	800cc48 <_malloc_r>
 800dffe:	1e05      	subs	r5, r0, #0
 800e000:	d0e8      	beq.n	800dfd4 <_realloc_r+0x14>
 800e002:	9b01      	ldr	r3, [sp, #4]
 800e004:	0022      	movs	r2, r4
 800e006:	429c      	cmp	r4, r3
 800e008:	d900      	bls.n	800e00c <_realloc_r+0x4c>
 800e00a:	001a      	movs	r2, r3
 800e00c:	0031      	movs	r1, r6
 800e00e:	0028      	movs	r0, r5
 800e010:	f7fd fb7c 	bl	800b70c <memcpy>
 800e014:	0031      	movs	r1, r6
 800e016:	0038      	movs	r0, r7
 800e018:	f7fe fa44 	bl	800c4a4 <_free_r>
 800e01c:	e7da      	b.n	800dfd4 <_realloc_r+0x14>

0800e01e <_raise_r>:
 800e01e:	b570      	push	{r4, r5, r6, lr}
 800e020:	0004      	movs	r4, r0
 800e022:	000d      	movs	r5, r1
 800e024:	291f      	cmp	r1, #31
 800e026:	d904      	bls.n	800e032 <_raise_r+0x14>
 800e028:	2316      	movs	r3, #22
 800e02a:	6003      	str	r3, [r0, #0]
 800e02c:	2001      	movs	r0, #1
 800e02e:	4240      	negs	r0, r0
 800e030:	bd70      	pop	{r4, r5, r6, pc}
 800e032:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e034:	2b00      	cmp	r3, #0
 800e036:	d004      	beq.n	800e042 <_raise_r+0x24>
 800e038:	008a      	lsls	r2, r1, #2
 800e03a:	189b      	adds	r3, r3, r2
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	2a00      	cmp	r2, #0
 800e040:	d108      	bne.n	800e054 <_raise_r+0x36>
 800e042:	0020      	movs	r0, r4
 800e044:	f000 f832 	bl	800e0ac <_getpid_r>
 800e048:	002a      	movs	r2, r5
 800e04a:	0001      	movs	r1, r0
 800e04c:	0020      	movs	r0, r4
 800e04e:	f000 f81b 	bl	800e088 <_kill_r>
 800e052:	e7ed      	b.n	800e030 <_raise_r+0x12>
 800e054:	2000      	movs	r0, #0
 800e056:	2a01      	cmp	r2, #1
 800e058:	d0ea      	beq.n	800e030 <_raise_r+0x12>
 800e05a:	1c51      	adds	r1, r2, #1
 800e05c:	d103      	bne.n	800e066 <_raise_r+0x48>
 800e05e:	2316      	movs	r3, #22
 800e060:	3001      	adds	r0, #1
 800e062:	6023      	str	r3, [r4, #0]
 800e064:	e7e4      	b.n	800e030 <_raise_r+0x12>
 800e066:	2400      	movs	r4, #0
 800e068:	0028      	movs	r0, r5
 800e06a:	601c      	str	r4, [r3, #0]
 800e06c:	4790      	blx	r2
 800e06e:	0020      	movs	r0, r4
 800e070:	e7de      	b.n	800e030 <_raise_r+0x12>
	...

0800e074 <raise>:
 800e074:	b510      	push	{r4, lr}
 800e076:	4b03      	ldr	r3, [pc, #12]	; (800e084 <raise+0x10>)
 800e078:	0001      	movs	r1, r0
 800e07a:	6818      	ldr	r0, [r3, #0]
 800e07c:	f7ff ffcf 	bl	800e01e <_raise_r>
 800e080:	bd10      	pop	{r4, pc}
 800e082:	46c0      	nop			; (mov r8, r8)
 800e084:	2000024c 	.word	0x2000024c

0800e088 <_kill_r>:
 800e088:	2300      	movs	r3, #0
 800e08a:	b570      	push	{r4, r5, r6, lr}
 800e08c:	4d06      	ldr	r5, [pc, #24]	; (800e0a8 <_kill_r+0x20>)
 800e08e:	0004      	movs	r4, r0
 800e090:	0008      	movs	r0, r1
 800e092:	0011      	movs	r1, r2
 800e094:	602b      	str	r3, [r5, #0]
 800e096:	f7f5 fa49 	bl	800352c <_kill>
 800e09a:	1c43      	adds	r3, r0, #1
 800e09c:	d103      	bne.n	800e0a6 <_kill_r+0x1e>
 800e09e:	682b      	ldr	r3, [r5, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d000      	beq.n	800e0a6 <_kill_r+0x1e>
 800e0a4:	6023      	str	r3, [r4, #0]
 800e0a6:	bd70      	pop	{r4, r5, r6, pc}
 800e0a8:	200007b8 	.word	0x200007b8

0800e0ac <_getpid_r>:
 800e0ac:	b510      	push	{r4, lr}
 800e0ae:	f7f5 fa37 	bl	8003520 <_getpid>
 800e0b2:	bd10      	pop	{r4, pc}

0800e0b4 <_malloc_usable_size_r>:
 800e0b4:	1f0b      	subs	r3, r1, #4
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	1f18      	subs	r0, r3, #4
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	da01      	bge.n	800e0c2 <_malloc_usable_size_r+0xe>
 800e0be:	580b      	ldr	r3, [r1, r0]
 800e0c0:	18c0      	adds	r0, r0, r3
 800e0c2:	4770      	bx	lr

0800e0c4 <_init>:
 800e0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0c6:	46c0      	nop			; (mov r8, r8)
 800e0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ca:	bc08      	pop	{r3}
 800e0cc:	469e      	mov	lr, r3
 800e0ce:	4770      	bx	lr

0800e0d0 <_fini>:
 800e0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d2:	46c0      	nop			; (mov r8, r8)
 800e0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0d6:	bc08      	pop	{r3}
 800e0d8:	469e      	mov	lr, r3
 800e0da:	4770      	bx	lr
