
robot_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093fc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009920  08009920  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08009920  08009920  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009920  08009920  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009920  08009920  00019920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009924  08009924  00019924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005918  20000084  080099ac  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000599c  080099ac  0002599c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017aa9  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040b6  00000000  00000000  00037b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  0003bc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e4  00000000  00000000  0003d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a39e  00000000  00000000  0003e314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c7e4  00000000  00000000  000586b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098554  00000000  00000000  00074e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056e4  00000000  00000000  0010d3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00112ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080094a4 	.word	0x080094a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080094a4 	.word	0x080094a4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b087      	sub	sp, #28
 8000420:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4a08      	ldr	r2, [pc, #32]	; (8000448 <MX_FREERTOS_Init+0x2c>)
 8000426:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000428:	c313      	stmia	r3!, {r0, r1, r4}
 800042a:	ca03      	ldmia	r2!, {r0, r1}
 800042c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2100      	movs	r1, #0
 8000432:	0018      	movs	r0, r3
 8000434:	f005 ff07 	bl	8006246 <osThreadCreate>
 8000438:	0002      	movs	r2, r0
 800043a:	4b04      	ldr	r3, [pc, #16]	; (800044c <MX_FREERTOS_Init+0x30>)
 800043c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b007      	add	sp, #28
 8000444:	bd90      	pop	{r4, r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	080094c8 	.word	0x080094c8
 800044c:	200000a0 	.word	0x200000a0

08000450 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000458:	2001      	movs	r0, #1
 800045a:	f005 ff1c 	bl	8006296 <osDelay>
 800045e:	e7fb      	b.n	8000458 <StartDefaultTask+0x8>

08000460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b08b      	sub	sp, #44	; 0x2c
 8000464:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	2414      	movs	r4, #20
 8000468:	193b      	adds	r3, r7, r4
 800046a:	0018      	movs	r0, r3
 800046c:	2314      	movs	r3, #20
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f008 f8bf 	bl	80085f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b42      	ldr	r3, [pc, #264]	; (8000580 <MX_GPIO_Init+0x120>)
 8000478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800047a:	4b41      	ldr	r3, [pc, #260]	; (8000580 <MX_GPIO_Init+0x120>)
 800047c:	2104      	movs	r1, #4
 800047e:	430a      	orrs	r2, r1
 8000480:	635a      	str	r2, [r3, #52]	; 0x34
 8000482:	4b3f      	ldr	r3, [pc, #252]	; (8000580 <MX_GPIO_Init+0x120>)
 8000484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000486:	2204      	movs	r2, #4
 8000488:	4013      	ands	r3, r2
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048e:	4b3c      	ldr	r3, [pc, #240]	; (8000580 <MX_GPIO_Init+0x120>)
 8000490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000492:	4b3b      	ldr	r3, [pc, #236]	; (8000580 <MX_GPIO_Init+0x120>)
 8000494:	2120      	movs	r1, #32
 8000496:	430a      	orrs	r2, r1
 8000498:	635a      	str	r2, [r3, #52]	; 0x34
 800049a:	4b39      	ldr	r3, [pc, #228]	; (8000580 <MX_GPIO_Init+0x120>)
 800049c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049e:	2220      	movs	r2, #32
 80004a0:	4013      	ands	r3, r2
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b36      	ldr	r3, [pc, #216]	; (8000580 <MX_GPIO_Init+0x120>)
 80004a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004aa:	4b35      	ldr	r3, [pc, #212]	; (8000580 <MX_GPIO_Init+0x120>)
 80004ac:	2101      	movs	r1, #1
 80004ae:	430a      	orrs	r2, r1
 80004b0:	635a      	str	r2, [r3, #52]	; 0x34
 80004b2:	4b33      	ldr	r3, [pc, #204]	; (8000580 <MX_GPIO_Init+0x120>)
 80004b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b6:	2201      	movs	r2, #1
 80004b8:	4013      	ands	r3, r2
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004be:	4b30      	ldr	r3, [pc, #192]	; (8000580 <MX_GPIO_Init+0x120>)
 80004c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004c2:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <MX_GPIO_Init+0x120>)
 80004c4:	2102      	movs	r1, #2
 80004c6:	430a      	orrs	r2, r1
 80004c8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ca:	4b2d      	ldr	r3, [pc, #180]	; (8000580 <MX_GPIO_Init+0x120>)
 80004cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ce:	2202      	movs	r2, #2
 80004d0:	4013      	ands	r3, r2
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d6:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <MX_GPIO_Init+0x120>)
 80004d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <MX_GPIO_Init+0x120>)
 80004dc:	2108      	movs	r1, #8
 80004de:	430a      	orrs	r2, r1
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <MX_GPIO_Init+0x120>)
 80004e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e6:	2208      	movs	r2, #8
 80004e8:	4013      	ands	r3, r2
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_ORANGE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80004ee:	23e0      	movs	r3, #224	; 0xe0
 80004f0:	019b      	lsls	r3, r3, #6
 80004f2:	4824      	ldr	r0, [pc, #144]	; (8000584 <MX_GPIO_Init+0x124>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	0019      	movs	r1, r3
 80004f8:	f001 fef0 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_ORANGE_Pin|LED_GREEN_Pin;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	22e0      	movs	r2, #224	; 0xe0
 8000500:	0192      	lsls	r2, r2, #6
 8000502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2201      	movs	r2, #1
 8000508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	193b      	adds	r3, r7, r4
 8000518:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <MX_GPIO_Init+0x124>)
 800051a:	0019      	movs	r1, r3
 800051c:	0010      	movs	r0, r2
 800051e:	f001 fd79 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BORDER_BACK_Pin|BORDER_FRONT_Pin;
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	220c      	movs	r2, #12
 8000528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2288      	movs	r2, #136	; 0x88
 800052e:	0352      	lsls	r2, r2, #13
 8000530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000538:	000c      	movs	r4, r1
 800053a:	187b      	adds	r3, r7, r1
 800053c:	4a12      	ldr	r2, [pc, #72]	; (8000588 <MX_GPIO_Init+0x128>)
 800053e:	0019      	movs	r1, r3
 8000540:	0010      	movs	r0, r2
 8000542:	f001 fd67 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUMPER3_Pin|BUMPER2_Pin|BUMPER1_Pin|BUMPER0_Pin;
 8000546:	0021      	movs	r1, r4
 8000548:	187b      	adds	r3, r7, r1
 800054a:	22f0      	movs	r2, #240	; 0xf0
 800054c:	0092      	lsls	r2, r2, #2
 800054e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055c:	187b      	adds	r3, r7, r1
 800055e:	4a09      	ldr	r2, [pc, #36]	; (8000584 <MX_GPIO_Init+0x124>)
 8000560:	0019      	movs	r1, r3
 8000562:	0010      	movs	r0, r2
 8000564:	f001 fd56 	bl	8002014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2103      	movs	r1, #3
 800056c:	2006      	movs	r0, #6
 800056e:	f001 fc53 	bl	8001e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000572:	2006      	movs	r0, #6
 8000574:	f001 fc65 	bl	8001e42 <HAL_NVIC_EnableIRQ>

}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b00b      	add	sp, #44	; 0x2c
 800057e:	bd90      	pop	{r4, r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	50000400 	.word	0x50000400
 8000588:	50000c00 	.word	0x50000c00

0800058c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000590:	f001 fb10 	bl	8001bb4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000594:	f000 f824 	bl	80005e0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000598:	f7ff ff62 	bl	8000460 <MX_GPIO_Init>
    MX_TIM17_Init();
 800059c:	f000 fc02 	bl	8000da4 <MX_TIM17_Init>
    MX_TIM15_Init();
 80005a0:	f000 fab4 	bl	8000b0c <MX_TIM15_Init>
    MX_TIM16_Init();
 80005a4:	f000 fb76 	bl	8000c94 <MX_TIM16_Init>
    MX_TIM1_Init();
 80005a8:	f000 f9a4 	bl	80008f4 <MX_TIM1_Init>
    MX_TIM3_Init();
 80005ac:	f000 fa0c 	bl	80009c8 <MX_TIM3_Init>
    MX_USART2_UART_Init();
 80005b0:	f000 fe10 	bl	80011d4 <MX_USART2_UART_Init>
    MX_TIM7_Init();
 80005b4:	f000 fa6c 	bl	8000a90 <MX_TIM7_Init>
    MX_USART4_UART_Init();
 80005b8:	f000 fe5e 	bl	8001278 <MX_USART4_UART_Init>
    /* USER CODE BEGIN 2 */
    printf(">>>>>>>>>>>>>>Projet Robot Start<<<<<<<<<<<<<<\r\n");
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <main+0x50>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f007 fee8 	bl	8008394 <puts>
    createShellTask();
 80005c4:	f001 fae0 	bl	8001b88 <createShellTask>
    createLedTask();
 80005c8:	f000 fff2 	bl	80015b0 <createLedTask>
    vTaskStartScheduler();
 80005cc:	f006 fc8c 	bl	8006ee8 <vTaskStartScheduler>
    /* USER CODE END 2 */

    /* Call init function for freertos objects (in freertos.c) */
    MX_FREERTOS_Init();
 80005d0:	f7ff ff24 	bl	800041c <MX_FREERTOS_Init>

    /* Start scheduler */
    osKernelStart();
 80005d4:	f005 fe2f 	bl	8006236 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x4c>
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	080094dc 	.word	0x080094dc

080005e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b093      	sub	sp, #76	; 0x4c
 80005e4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	2414      	movs	r4, #20
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	2334      	movs	r3, #52	; 0x34
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f007 ffff 	bl	80085f4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	0018      	movs	r0, r3
 80005fa:	2310      	movs	r3, #16
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f007 fff8 	bl	80085f4 <memset>

    /** Configure the main internal regulator output voltage
     */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fedd 	bl	80023c8 <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	0252      	lsls	r2, r2, #9
 800061a:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	0021      	movs	r1, r4
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2202      	movs	r2, #2
 8000622:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2203      	movs	r2, #3
 8000628:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLN = 8;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2208      	movs	r2, #8
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	0292      	lsls	r2, r2, #10
 800063c:	62da      	str	r2, [r3, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	0592      	lsls	r2, r2, #22
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	187b      	adds	r3, r7, r1
 8000648:	0018      	movs	r0, r3
 800064a:	f001 ff09 	bl	8002460 <HAL_RCC_OscConfig>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x76>
    {
        Error_Handler();
 8000652:	f000 f819 	bl	8000688 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2207      	movs	r2, #7
 800065a:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2202      	movs	r2, #2
 8000660:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2102      	movs	r1, #2
 8000672:	0018      	movs	r0, r3
 8000674:	f002 fa04 	bl	8002a80 <HAL_RCC_ClockConfig>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xa0>
    {
        Error_Handler();
 800067c:	f000 f804 	bl	8000688 <Error_Handler>
    }
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b013      	add	sp, #76	; 0x4c
 8000686:	bd90      	pop	{r4, r7, pc}

08000688 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	46c0      	nop			; (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_MspInit+0x50>)
 800069c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_MspInit+0x50>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	430a      	orrs	r2, r1
 80006a4:	641a      	str	r2, [r3, #64]	; 0x40
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_MspInit+0x50>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x50>)
 80006b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <HAL_MspInit+0x50>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	0549      	lsls	r1, r1, #21
 80006bc:	430a      	orrs	r2, r1
 80006be:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <HAL_MspInit+0x50>)
 80006c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	055b      	lsls	r3, r3, #21
 80006c8:	4013      	ands	r3, r2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80006ce:	2302      	movs	r3, #2
 80006d0:	425b      	negs	r3, r3
 80006d2:	2200      	movs	r2, #0
 80006d4:	2103      	movs	r1, #3
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fb9e 	bl	8001e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART2 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <__io_putchar+0x20>)
 80006f2:	1d39      	adds	r1, r7, #4
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <__io_putchar+0x24>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	f003 fe80 	bl	80043fc <HAL_UART_Transmit>

    return ch;
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	0018      	movs	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	0000ffff 	.word	0x0000ffff
 800070c:	20000270 	.word	0x20000270

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000720:	f001 fab2 	bl	8001c88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000724:	f006 ff4a 	bl	80075bc <xTaskGetSchedulerState>
 8000728:	0003      	movs	r3, r0
 800072a:	2b01      	cmp	r3, #1
 800072c:	d001      	beq.n	8000732 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800072e:	f007 f9f3 	bl	8007b18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BORDER_BACK_Pin);
 800073c:	2004      	movs	r0, #4
 800073e:	f001 fe05 	bl	800234c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDER_FRONT_Pin);
 8000742:	2008      	movs	r0, #8
 8000744:	f001 fe02 	bl	800234c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fdce 	bl	80032f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	200000a8 	.word	0x200000a8

08000768 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <TIM3_IRQHandler+0x14>)
 800076e:	0018      	movs	r0, r3
 8000770:	f002 fdc2 	bl	80032f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	200000f4 	.word	0x200000f4

08000780 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <TIM7_IRQHandler+0x14>)
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fdb6 	bl	80032f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000140 	.word	0x20000140

08000798 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <USART2_IRQHandler+0x14>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f003 ff20 	bl	80045e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	20000270 	.word	0x20000270

080007b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	e00a      	b.n	80007d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007c2:	e000      	b.n	80007c6 <_read+0x16>
 80007c4:	bf00      	nop
 80007c6:	0001      	movs	r1, r0
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	60ba      	str	r2, [r7, #8]
 80007ce:	b2ca      	uxtb	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dbf0      	blt.n	80007c2 <_read+0x12>
  }

  return len;
 80007e0:	687b      	ldr	r3, [r7, #4]
}
 80007e2:	0018      	movs	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b006      	add	sp, #24
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	e009      	b.n	8000810 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	60ba      	str	r2, [r7, #8]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ff6f 	bl	80006e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf1      	blt.n	80007fc <_write+0x12>
  }
  return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b006      	add	sp, #24
 8000820:	bd80      	pop	{r7, pc}

08000822 <_close>:

int _close(int file)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800082a:	2301      	movs	r3, #1
 800082c:	425b      	negs	r3, r3
}
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	b002      	add	sp, #8
 8000834:	bd80      	pop	{r7, pc}

08000836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	0192      	lsls	r2, r2, #6
 8000846:	605a      	str	r2, [r3, #4]
  return 0;
 8000848:	2300      	movs	r3, #0
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}

08000852 <_isatty>:

int _isatty(int file)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800085a:	2301      	movs	r3, #1
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	b002      	add	sp, #8
 8000862:	bd80      	pop	{r7, pc}

08000864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000870:	2300      	movs	r3, #0
}
 8000872:	0018      	movs	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	b004      	add	sp, #16
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000884:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <_sbrk+0x5c>)
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <_sbrk+0x60>)
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <_sbrk+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <_sbrk+0x64>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <_sbrk+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d207      	bcs.n	80008bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ac:	f007 fef8 	bl	80086a0 <__errno>
 80008b0:	0003      	movs	r3, r0
 80008b2:	220c      	movs	r2, #12
 80008b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	425b      	negs	r3, r3
 80008ba:	e009      	b.n	80008d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	18d2      	adds	r2, r2, r3
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <_sbrk+0x64>)
 80008cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008ce:	68fb      	ldr	r3, [r7, #12]
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b006      	add	sp, #24
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20009000 	.word	0x20009000
 80008dc:	00000400 	.word	0x00000400
 80008e0:	200000a4 	.word	0x200000a4
 80008e4:	200059a0 	.word	0x200059a0

080008e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b08d      	sub	sp, #52	; 0x34
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008fa:	240c      	movs	r4, #12
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	0018      	movs	r0, r3
 8000900:	2324      	movs	r3, #36	; 0x24
 8000902:	001a      	movs	r2, r3
 8000904:	2100      	movs	r1, #0
 8000906:	f007 fe75 	bl	80085f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090a:	003b      	movs	r3, r7
 800090c:	0018      	movs	r0, r3
 800090e:	230c      	movs	r3, #12
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f007 fe6e 	bl	80085f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <MX_TIM1_Init+0xc8>)
 800091a:	4a29      	ldr	r2, [pc, #164]	; (80009c0 <MX_TIM1_Init+0xcc>)
 800091c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <MX_TIM1_Init+0xc8>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <MX_TIM1_Init+0xc8>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <MX_TIM1_Init+0xc8>)
 800092c:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <MX_TIM1_Init+0xd0>)
 800092e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <MX_TIM1_Init+0xc8>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_TIM1_Init+0xc8>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_TIM1_Init+0xc8>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000942:	0021      	movs	r1, r4
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2203      	movs	r2, #3
 8000948:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2201      	movs	r2, #1
 8000954:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2201      	movs	r2, #1
 800096c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800097a:	187a      	adds	r2, r7, r1
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_TIM1_Init+0xc8>)
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f002 fc11 	bl	80031a8 <HAL_TIM_Encoder_Init>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800098a:	f7ff fe7d 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098e:	003b      	movs	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000994:	003b      	movs	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099a:	003b      	movs	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a0:	003a      	movs	r2, r7
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_TIM1_Init+0xc8>)
 80009a4:	0011      	movs	r1, r2
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 fbac 	bl	8004104 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80009b0:	f7ff fe6a 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b00d      	add	sp, #52	; 0x34
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	200000a8 	.word	0x200000a8
 80009c0:	40012c00 	.word	0x40012c00
 80009c4:	0000ffff 	.word	0x0000ffff

080009c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b08d      	sub	sp, #52	; 0x34
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ce:	240c      	movs	r4, #12
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	0018      	movs	r0, r3
 80009d4:	2324      	movs	r3, #36	; 0x24
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f007 fe0b 	bl	80085f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	003b      	movs	r3, r7
 80009e0:	0018      	movs	r0, r3
 80009e2:	230c      	movs	r3, #12
 80009e4:	001a      	movs	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	f007 fe04 	bl	80085f4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <MX_TIM3_Init+0xbc>)
 80009ee:	4a26      	ldr	r2, [pc, #152]	; (8000a88 <MX_TIM3_Init+0xc0>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009f2:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <MX_TIM3_Init+0xbc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_TIM3_Init+0xbc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_TIM3_Init+0xbc>)
 8000a00:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <MX_TIM3_Init+0xc4>)
 8000a02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_TIM3_Init+0xbc>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_TIM3_Init+0xbc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a10:	0021      	movs	r1, r4
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2203      	movs	r2, #3
 8000a16:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2201      	movs	r2, #1
 8000a22:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2201      	movs	r2, #1
 8000a3a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a48:	187a      	adds	r2, r7, r1
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_TIM3_Init+0xbc>)
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 fbaa 	bl	80031a8 <HAL_TIM_Encoder_Init>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a58:	f7ff fe16 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a68:	003a      	movs	r2, r7
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_TIM3_Init+0xbc>)
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f003 fb48 	bl	8004104 <HAL_TIMEx_MasterConfigSynchronization>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000a78:	f7ff fe06 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b00d      	add	sp, #52	; 0x34
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	200000f4 	.word	0x200000f4
 8000a88:	40000400 	.word	0x40000400
 8000a8c:	0000ffff 	.word	0x0000ffff

08000a90 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f007 fda8 	bl	80085f4 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_TIM7_Init+0x6c>)
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <MX_TIM7_Init+0x70>)
 8000aa8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6400-1;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_TIM7_Init+0x6c>)
 8000aac:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <MX_TIM7_Init+0x74>)
 8000aae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_TIM7_Init+0x6c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_TIM7_Init+0x6c>)
 8000ab8:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_TIM7_Init+0x78>)
 8000aba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_TIM7_Init+0x6c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_TIM7_Init+0x6c>)
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 fab7 	bl	8003038 <HAL_TIM_Base_Init>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000ace:	f7ff fddb 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ade:	1d3a      	adds	r2, r7, #4
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_TIM7_Init+0x6c>)
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f003 fb0d 	bl	8004104 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000aee:	f7ff fdcb 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b004      	add	sp, #16
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	20000140 	.word	0x20000140
 8000b00:	40001400 	.word	0x40001400
 8000b04:	000018ff 	.word	0x000018ff
 8000b08:	0000270f 	.word	0x0000270f

08000b0c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09c      	sub	sp, #112	; 0x70
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	2360      	movs	r3, #96	; 0x60
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	0018      	movs	r0, r3
 8000b18:	2310      	movs	r3, #16
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f007 fd69 	bl	80085f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b22:	2354      	movs	r3, #84	; 0x54
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	0018      	movs	r0, r3
 8000b28:	230c      	movs	r3, #12
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	f007 fd61 	bl	80085f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b32:	2338      	movs	r3, #56	; 0x38
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	0018      	movs	r0, r3
 8000b38:	231c      	movs	r3, #28
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f007 fd59 	bl	80085f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	0018      	movs	r0, r3
 8000b46:	2334      	movs	r3, #52	; 0x34
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f007 fd52 	bl	80085f4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b50:	4b4d      	ldr	r3, [pc, #308]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000b52:	4a4e      	ldr	r2, [pc, #312]	; (8000c8c <MX_TIM15_Init+0x180>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000b56:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2560-1;
 8000b62:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000b64:	4a4a      	ldr	r2, [pc, #296]	; (8000c90 <MX_TIM15_Init+0x184>)
 8000b66:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b47      	ldr	r3, [pc, #284]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b6e:	4b46      	ldr	r3, [pc, #280]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b74:	4b44      	ldr	r3, [pc, #272]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000b7a:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f002 fa5b 	bl	8003038 <HAL_TIM_Base_Init>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000b86:	f7ff fd7f 	bl	8000688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8a:	2160      	movs	r1, #96	; 0x60
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	0152      	lsls	r2, r2, #5
 8000b92:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000b94:	187a      	adds	r2, r7, r1
 8000b96:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f002 fdde 	bl	800375c <HAL_TIM_ConfigClockSource>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000ba4:	f7ff fd70 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000ba8:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f002 fa9c 	bl	80030e8 <HAL_TIM_PWM_Init>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000bb4:	f7ff fd68 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb8:	2154      	movs	r1, #84	; 0x54
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000bc6:	187a      	adds	r2, r7, r1
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000bca:	0011      	movs	r1, r2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f003 fa99 	bl	8004104 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000bd6:	f7ff fd57 	bl	8000688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bda:	2138      	movs	r1, #56	; 0x38
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2260      	movs	r2, #96	; 0x60
 8000be0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c06:	1879      	adds	r1, r7, r1
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f002 fca5 	bl	800355c <HAL_TIM_PWM_ConfigChannel>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000c16:	f7ff fd37 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1a:	2338      	movs	r3, #56	; 0x38
 8000c1c:	18f9      	adds	r1, r7, r3
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000c20:	2204      	movs	r2, #4
 8000c22:	0018      	movs	r0, r3
 8000c24:	f002 fc9a 	bl	800355c <HAL_TIM_PWM_ConfigChannel>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8000c2c:	f7ff fd2c 	bl	8000688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	0192      	lsls	r2, r2, #6
 8000c54:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000c62:	1d3a      	adds	r2, r7, #4
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f003 fab3 	bl	80041d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8000c72:	f7ff fd09 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <MX_TIM15_Init+0x17c>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fa17 	bl	80010ac <HAL_TIM_MspPostInit>

}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b01c      	add	sp, #112	; 0x70
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	2000018c 	.word	0x2000018c
 8000c8c:	40014000 	.word	0x40014000
 8000c90:	000009ff 	.word	0x000009ff

08000c94 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	; 0x50
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9a:	2334      	movs	r3, #52	; 0x34
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	231c      	movs	r3, #28
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f007 fca5 	bl	80085f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000caa:	003b      	movs	r3, r7
 8000cac:	0018      	movs	r0, r3
 8000cae:	2334      	movs	r3, #52	; 0x34
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f007 fc9e 	bl	80085f4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000cb8:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000cba:	4a38      	ldr	r2, [pc, #224]	; (8000d9c <MX_TIM16_Init+0x108>)
 8000cbc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000cbe:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b34      	ldr	r3, [pc, #208]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2560-1;
 8000cca:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000ccc:	4a34      	ldr	r2, [pc, #208]	; (8000da0 <MX_TIM16_Init+0x10c>)
 8000cce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000cd6:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f002 f9a7 	bl	8003038 <HAL_TIM_Base_Init>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000cee:	f7ff fccb 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000cf2:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f002 f9f7 	bl	80030e8 <HAL_TIM_PWM_Init>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000cfe:	f7ff fcc3 	bl	8000688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d02:	2134      	movs	r1, #52	; 0x34
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2260      	movs	r2, #96	; 0x60
 8000d08:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	0018      	movs	r0, r3
 8000d36:	f002 fc11 	bl	800355c <HAL_TIM_PWM_ConfigChannel>
 8000d3a:	1e03      	subs	r3, r0, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000d3e:	f7ff fca3 	bl	8000688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d42:	003b      	movs	r3, r7
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d48:	003b      	movs	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d4e:	003b      	movs	r3, r7
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d54:	003b      	movs	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d60:	003b      	movs	r3, r7
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	0192      	lsls	r2, r2, #6
 8000d66:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d68:	003b      	movs	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d6e:	003b      	movs	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000d74:	003a      	movs	r2, r7
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f003 fa2a 	bl	80041d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000d84:	f7ff fc80 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <MX_TIM16_Init+0x104>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 f98e 	bl	80010ac <HAL_TIM_MspPostInit>

}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b014      	add	sp, #80	; 0x50
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200001d8 	.word	0x200001d8
 8000d9c:	40014400 	.word	0x40014400
 8000da0:	000009ff 	.word	0x000009ff

08000da4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000daa:	2334      	movs	r3, #52	; 0x34
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	0018      	movs	r0, r3
 8000db0:	231c      	movs	r3, #28
 8000db2:	001a      	movs	r2, r3
 8000db4:	2100      	movs	r1, #0
 8000db6:	f007 fc1d 	bl	80085f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dba:	003b      	movs	r3, r7
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	2334      	movs	r3, #52	; 0x34
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	f007 fc16 	bl	80085f4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000dca:	4a38      	ldr	r2, [pc, #224]	; (8000eac <MX_TIM17_Init+0x108>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2560-1;
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000ddc:	4a34      	ldr	r2, [pc, #208]	; (8000eb0 <MX_TIM17_Init+0x10c>)
 8000dde:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f002 f91f 	bl	8003038 <HAL_TIM_Base_Init>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000dfe:	f7ff fc43 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000e02:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000e04:	0018      	movs	r0, r3
 8000e06:	f002 f96f 	bl	80030e8 <HAL_TIM_PWM_Init>
 8000e0a:	1e03      	subs	r3, r0, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f7ff fc3b 	bl	8000688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e12:	2134      	movs	r1, #52	; 0x34
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2260      	movs	r2, #96	; 0x60
 8000e18:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3e:	1879      	adds	r1, r7, r1
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	0018      	movs	r0, r3
 8000e46:	f002 fb89 	bl	800355c <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	1e03      	subs	r3, r0, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000e4e:	f7ff fc1b 	bl	8000688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e52:	003b      	movs	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e58:	003b      	movs	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e70:	003b      	movs	r3, r7
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	0192      	lsls	r2, r2, #6
 8000e76:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e84:	003a      	movs	r2, r7
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f003 f9a2 	bl	80041d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8000e94:	f7ff fbf8 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <MX_TIM17_Init+0x104>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f906 	bl	80010ac <HAL_TIM_MspPostInit>

}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b014      	add	sp, #80	; 0x50
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000224 	.word	0x20000224
 8000eac:	40014800 	.word	0x40014800
 8000eb0:	000009ff 	.word	0x000009ff

08000eb4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b08d      	sub	sp, #52	; 0x34
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	241c      	movs	r4, #28
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2314      	movs	r3, #20
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f007 fb94 	bl	80085f4 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a3e      	ldr	r2, [pc, #248]	; (8000fcc <HAL_TIM_Encoder_MspInit+0x118>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d13a      	bne.n	8000f4c <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eda:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	0109      	lsls	r1, r1, #4
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee4:	4b3a      	ldr	r3, [pc, #232]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef6:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	430a      	orrs	r2, r1
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f02:	2201      	movs	r2, #1
 8000f04:	4013      	ands	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	22c0      	movs	r2, #192	; 0xc0
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	0021      	movs	r1, r4
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2202      	movs	r2, #2
 8000f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2202      	movs	r2, #2
 8000f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	187a      	adds	r2, r7, r1
 8000f2e:	23a0      	movs	r3, #160	; 0xa0
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f001 f86d 	bl	8002014 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 3, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	200d      	movs	r0, #13
 8000f40:	f000 ff6a 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000f44:	200d      	movs	r0, #13
 8000f46:	f000 ff7c 	bl	8001e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f4a:	e03a      	b.n	8000fc2 <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a20      	ldr	r2, [pc, #128]	; (8000fd4 <HAL_TIM_Encoder_MspInit+0x120>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d135      	bne.n	8000fc2 <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f66:	2202      	movs	r2, #2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f74:	2104      	movs	r1, #4
 8000f76:	430a      	orrs	r2, r1
 8000f78:	635a      	str	r2, [r3, #52]	; 0x34
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7e:	2204      	movs	r2, #4
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f86:	211c      	movs	r1, #28
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	22c0      	movs	r2, #192	; 0xc0
 8000f8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2202      	movs	r2, #2
 8000f92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000faa:	0019      	movs	r1, r3
 8000fac:	0010      	movs	r0, r2
 8000fae:	f001 f831 	bl	8002014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	2010      	movs	r0, #16
 8000fb8:	f000 ff2e 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fbc:	2010      	movs	r0, #16
 8000fbe:	f000 ff40 	bl	8001e42 <HAL_NVIC_EnableIRQ>
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b00d      	add	sp, #52	; 0x34
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	40012c00 	.word	0x40012c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40000400 	.word	0x40000400
 8000fd8:	50000800 	.word	0x50000800

08000fdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a2b      	ldr	r2, [pc, #172]	; (8001098 <HAL_TIM_Base_MspInit+0xbc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d114      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 8000ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 8000ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffe:	2220      	movs	r2, #32
 8001000:	4013      	ands	r3, r2
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2103      	movs	r1, #3
 800100a:	2012      	movs	r0, #18
 800100c:	f000 ff04 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001010:	2012      	movs	r0, #18
 8001012:	f000 ff16 	bl	8001e42 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001016:	e03a      	b.n	800108e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM15)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <HAL_TIM_Base_MspInit+0xc4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d10e      	bne.n	8001040 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 8001024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0249      	lsls	r1, r1, #9
 800102c:	430a      	orrs	r2, r1
 800102e:	641a      	str	r2, [r3, #64]	; 0x40
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 8001032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	025b      	lsls	r3, r3, #9
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
}
 800103e:	e026      	b.n	800108e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_TIM_Base_MspInit+0xc8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10e      	bne.n	8001068 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 800104c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	0289      	lsls	r1, r1, #10
 8001054:	430a      	orrs	r2, r1
 8001056:	641a      	str	r2, [r3, #64]	; 0x40
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 800105a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	029b      	lsls	r3, r3, #10
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
}
 8001066:	e012      	b.n	800108e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM17)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_TIM_Base_MspInit+0xcc>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d10d      	bne.n	800108e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 8001074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	02c9      	lsls	r1, r1, #11
 800107c:	430a      	orrs	r2, r1
 800107e:	641a      	str	r2, [r3, #64]	; 0x40
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_TIM_Base_MspInit+0xc0>)
 8001082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	02db      	lsls	r3, r3, #11
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b006      	add	sp, #24
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	40001400 	.word	0x40001400
 800109c:	40021000 	.word	0x40021000
 80010a0:	40014000 	.word	0x40014000
 80010a4:	40014400 	.word	0x40014400
 80010a8:	40014800 	.word	0x40014800

080010ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b08b      	sub	sp, #44	; 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	2414      	movs	r4, #20
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	0018      	movs	r0, r3
 80010ba:	2314      	movs	r3, #20
 80010bc:	001a      	movs	r2, r3
 80010be:	2100      	movs	r1, #0
 80010c0:	f007 fa98 	bl	80085f4 <memset>
  if(timHandle->Instance==TIM15)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <HAL_TIM_MspPostInit+0x110>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d123      	bne.n	8001116 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <HAL_TIM_MspPostInit+0x114>)
 80010d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <HAL_TIM_MspPostInit+0x114>)
 80010d4:	2102      	movs	r1, #2
 80010d6:	430a      	orrs	r2, r1
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
 80010da:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <HAL_TIM_MspPostInit+0x114>)
 80010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010de:	2202      	movs	r2, #2
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	22c0      	movs	r2, #192	; 0xc0
 80010ea:	0212      	lsls	r2, r2, #8
 80010ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	0021      	movs	r1, r4
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2202      	movs	r2, #2
 80010f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2205      	movs	r2, #5
 8001106:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	187b      	adds	r3, r7, r1
 800110a:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <HAL_TIM_MspPostInit+0x118>)
 800110c:	0019      	movs	r1, r3
 800110e:	0010      	movs	r0, r2
 8001110:	f000 ff80 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001114:	e04e      	b.n	80011b4 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM16)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a2b      	ldr	r2, [pc, #172]	; (80011c8 <HAL_TIM_MspPostInit+0x11c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d122      	bne.n	8001166 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_TIM_MspPostInit+0x114>)
 8001122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_TIM_MspPostInit+0x114>)
 8001126:	2108      	movs	r1, #8
 8001128:	430a      	orrs	r2, r1
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_TIM_MspPostInit+0x114>)
 800112e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001130:	2208      	movs	r2, #8
 8001132:	4013      	ands	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001138:	2114      	movs	r1, #20
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2202      	movs	r2, #2
 8001144:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2202      	movs	r2, #2
 8001156:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001158:	187b      	adds	r3, r7, r1
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <HAL_TIM_MspPostInit+0x120>)
 800115c:	0019      	movs	r1, r3
 800115e:	0010      	movs	r0, r2
 8001160:	f000 ff58 	bl	8002014 <HAL_GPIO_Init>
}
 8001164:	e026      	b.n	80011b4 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM17)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_TIM_MspPostInit+0x124>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d121      	bne.n	80011b4 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_TIM_MspPostInit+0x114>)
 8001172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_TIM_MspPostInit+0x114>)
 8001176:	2108      	movs	r1, #8
 8001178:	430a      	orrs	r2, r1
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_TIM_MspPostInit+0x114>)
 800117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001180:	2208      	movs	r2, #8
 8001182:	4013      	ands	r3, r2
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001188:	2114      	movs	r1, #20
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2202      	movs	r2, #2
 800118e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2202      	movs	r2, #2
 8001194:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2202      	movs	r2, #2
 80011a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_TIM_MspPostInit+0x120>)
 80011ac:	0019      	movs	r1, r3
 80011ae:	0010      	movs	r0, r2
 80011b0:	f000 ff30 	bl	8002014 <HAL_GPIO_Init>
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b00b      	add	sp, #44	; 0x2c
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	40014000 	.word	0x40014000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	50000400 	.word	0x50000400
 80011c8:	40014400 	.word	0x40014400
 80011cc:	50000c00 	.word	0x50000c00
 80011d0:	40014800 	.word	0x40014800

080011d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart4;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <MX_USART2_UART_Init+0xa0>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 80011e0:	22e1      	movs	r2, #225	; 0xe1
 80011e2:	0252      	lsls	r2, r2, #9
 80011e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 8001218:	2208      	movs	r2, #8
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	0212      	lsls	r2, r2, #8
 8001222:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 8001226:	0018      	movs	r0, r3
 8001228:	f003 f892 	bl	8004350 <HAL_UART_Init>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d001      	beq.n	8001234 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8001230:	f7ff fa2a 	bl	8000688 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 8001236:	2100      	movs	r1, #0
 8001238:	0018      	movs	r0, r3
 800123a:	f004 ff03 	bl	8006044 <HAL_UARTEx_SetTxFifoThreshold>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d001      	beq.n	8001246 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8001242:	f7ff fa21 	bl	8000688 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 8001248:	2100      	movs	r1, #0
 800124a:	0018      	movs	r0, r3
 800124c:	f004 ff3a 	bl	80060c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8001254:	f7ff fa18 	bl	8000688 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <MX_USART2_UART_Init+0x9c>)
 800125a:	0018      	movs	r0, r3
 800125c:	f004 feb8 	bl	8005fd0 <HAL_UARTEx_DisableFifoMode>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d001      	beq.n	8001268 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8001264:	f7ff fa10 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000270 	.word	0x20000270
 8001274:	40004400 	.word	0x40004400

08001278 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <MX_USART4_UART_Init+0x64>)
 8001280:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 8001284:	22fa      	movs	r2, #250	; 0xfa
 8001286:	0252      	lsls	r2, r2, #9
 8001288:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <MX_USART4_UART_Init+0x60>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f003 f844 	bl	8004350 <HAL_UART_Init>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 80012cc:	f7ff f9dc 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	20000304 	.word	0x20000304
 80012dc:	40004c00 	.word	0x40004c00

080012e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b093      	sub	sp, #76	; 0x4c
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	2334      	movs	r3, #52	; 0x34
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	0018      	movs	r0, r3
 80012ee:	2314      	movs	r3, #20
 80012f0:	001a      	movs	r2, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	f007 f97e 	bl	80085f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f8:	2418      	movs	r4, #24
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	0018      	movs	r0, r3
 80012fe:	231c      	movs	r3, #28
 8001300:	001a      	movs	r2, r3
 8001302:	2100      	movs	r1, #0
 8001304:	f007 f976 	bl	80085f4 <memset>
  if(uartHandle->Instance==USART2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a41      	ldr	r2, [pc, #260]	; (8001414 <HAL_UART_MspInit+0x134>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d146      	bne.n	80013a0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001312:	193b      	adds	r3, r7, r4
 8001314:	2202      	movs	r2, #2
 8001316:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001318:	193b      	adds	r3, r7, r4
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131e:	193b      	adds	r3, r7, r4
 8001320:	0018      	movs	r0, r3
 8001322:	f001 fd55 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d001      	beq.n	800132e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800132a:	f7ff f9ad 	bl	8000688 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <HAL_UART_MspInit+0x138>)
 8001330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <HAL_UART_MspInit+0x138>)
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0289      	lsls	r1, r1, #10
 8001338:	430a      	orrs	r2, r1
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_UART_MspInit+0x138>)
 800133e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	029b      	lsls	r3, r3, #10
 8001344:	4013      	ands	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <HAL_UART_MspInit+0x138>)
 800134c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <HAL_UART_MspInit+0x138>)
 8001350:	2108      	movs	r1, #8
 8001352:	430a      	orrs	r2, r1
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_UART_MspInit+0x138>)
 8001358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135a:	2208      	movs	r2, #8
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001362:	2134      	movs	r1, #52	; 0x34
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2260      	movs	r2, #96	; 0x60
 8001368:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2202      	movs	r2, #2
 800136e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001382:	187b      	adds	r3, r7, r1
 8001384:	4a25      	ldr	r2, [pc, #148]	; (800141c <HAL_UART_MspInit+0x13c>)
 8001386:	0019      	movs	r1, r3
 8001388:	0010      	movs	r0, r2
 800138a:	f000 fe43 	bl	8002014 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2103      	movs	r1, #3
 8001392:	201c      	movs	r0, #28
 8001394:	f000 fd40 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001398:	201c      	movs	r0, #28
 800139a:	f000 fd52 	bl	8001e42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800139e:	e035      	b.n	800140c <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART4)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_UART_MspInit+0x140>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d130      	bne.n	800140c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART4_CLK_ENABLE();
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_UART_MspInit+0x138>)
 80013ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_UART_MspInit+0x138>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0309      	lsls	r1, r1, #12
 80013b4:	430a      	orrs	r2, r1
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_UART_MspInit+0x138>)
 80013ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	031b      	lsls	r3, r3, #12
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_UART_MspInit+0x138>)
 80013c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_UART_MspInit+0x138>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_UART_MspInit+0x138>)
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d6:	2201      	movs	r2, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_TX_Pin|LIDAR_RX_Pin;
 80013de:	2134      	movs	r1, #52	; 0x34
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2203      	movs	r2, #3
 80013e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2202      	movs	r2, #2
 80013ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2204      	movs	r2, #4
 80013fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	187a      	adds	r2, r7, r1
 8001400:	23a0      	movs	r3, #160	; 0xa0
 8001402:	05db      	lsls	r3, r3, #23
 8001404:	0011      	movs	r1, r2
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fe04 	bl	8002014 <HAL_GPIO_Init>
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b013      	add	sp, #76	; 0x4c
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	40004400 	.word	0x40004400
 8001418:	40021000 	.word	0x40021000
 800141c:	50000c00 	.word	0x50000c00
 8001420:	40004c00 	.word	0x40004c00

08001424 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001426:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001428:	f7ff fa5e 	bl	80008e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <LoopForever+0x6>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	; (8001464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <LoopForever+0xe>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	; (8001470 <LoopForever+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001452:	f007 f92b 	bl	80086ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001456:	f7ff f899 	bl	800058c <main>

0800145a <LoopForever>:

LoopForever:
  b LoopForever
 800145a:	e7fe      	b.n	800145a <LoopForever>
  ldr   r0, =_estack
 800145c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001468:	08009928 	.word	0x08009928
  ldr r2, =_sbss
 800146c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001470:	2000599c 	.word	0x2000599c

08001474 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_IRQHandler>
	...

08001478 <LedTask>:
static SemaphoreHandle_t ledStartSemaphore = NULL;
static uint32_t blinkingPeriod = 1000; // LED blinking period in ms
static bool ledOn = false;             // LED control variable

void LedTask(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

    if (xSemaphoreTake(ledStartSemaphore, portMAX_DELAY) == pdTRUE)
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <LedTask+0x6c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	4252      	negs	r2, r2
 8001488:	0011      	movs	r1, r2
 800148a:	0018      	movs	r0, r3
 800148c:	f005 f98d 	bl	80067aa <xQueueSemaphoreTake>
 8001490:	0003      	movs	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d11e      	bne.n	80014d4 <LedTask+0x5c>
    {
        while (1)
        {
            if (ledOn)
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <LedTask+0x70>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0fb      	beq.n	8001496 <LedTask+0x1e>
            {
                HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <LedTask+0x74>)
 80014a4:	0019      	movs	r1, r3
 80014a6:	0010      	movs	r0, r2
 80014a8:	f000 ff35 	bl	8002316 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	019b      	lsls	r3, r3, #6
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <LedTask+0x74>)
 80014b2:	0019      	movs	r1, r3
 80014b4:	0010      	movs	r0, r2
 80014b6:	f000 ff2e 	bl	8002316 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	015b      	lsls	r3, r3, #5
 80014be:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <LedTask+0x74>)
 80014c0:	0019      	movs	r1, r3
 80014c2:	0010      	movs	r0, r2
 80014c4:	f000 ff27 	bl	8002316 <HAL_GPIO_TogglePin>
                vTaskDelay(blinkingPeriod);
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <LedTask+0x78>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f005 fce5 	bl	8006e9c <vTaskDelay>
            if (ledOn)
 80014d2:	e7e0      	b.n	8001496 <LedTask+0x1e>
            }
        }
    }
    vTaskDelete(NULL);
 80014d4:	2000      	movs	r0, #0
 80014d6:	f005 fc7d 	bl	8006dd4 <vTaskDelete>
}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	20000398 	.word	0x20000398
 80014e8:	2000039c 	.word	0x2000039c
 80014ec:	50000400 	.word	0x50000400
 80014f0:	20000004 	.word	0x20000004

080014f4 <led>:

int led(h_shell_t *h_shell, int argc, char **argv)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
    if (argc != 2)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d00e      	beq.n	8001524 <led+0x30>
    {
        printf("[ERROR]: Usage: l <period>,The default period is 1000ms\r\n");
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <led+0x9c>)
 8001508:	0018      	movs	r0, r3
 800150a:	f006 ff43 	bl	8008394 <puts>
        printf("[ERROR]: Usage: l on,Turn on the LED\r\n");
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <led+0xa0>)
 8001510:	0018      	movs	r0, r3
 8001512:	f006 ff3f 	bl	8008394 <puts>
        printf("[ERROR]: Usage: l off,Turn off the LED\r\n");
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <led+0xa4>)
 8001518:	0018      	movs	r0, r3
 800151a:	f006 ff3b 	bl	8008394 <puts>
        return -1; // parameter error
 800151e:	2301      	movs	r3, #1
 8001520:	425b      	negs	r3, r3
 8001522:	e030      	b.n	8001586 <led+0x92>
    }

    // compare the parameter with "on" or "off" or <period>
    if (strcmp(argv[1], "on") == 0)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3304      	adds	r3, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <led+0xa8>)
 800152c:	0011      	movs	r1, r2
 800152e:	0018      	movs	r0, r3
 8001530:	f7fe fdea 	bl	8000108 <strcmp>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d10a      	bne.n	800154e <led+0x5a>
    {
        xSemaphoreGive(ledStartSemaphore); // give semaphore to start LED blinking
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <led+0xac>)
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	2300      	movs	r3, #0
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	f005 f809 	bl	8006558 <xQueueGenericSend>
        ledOn = true;                      // turn on LED
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <led+0xb0>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	e01a      	b.n	8001584 <led+0x90>
    }
    else if (strcmp(argv[1], "off") == 0)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3304      	adds	r3, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <led+0xb4>)
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f7fe fdd5 	bl	8000108 <strcmp>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d103      	bne.n	800156a <led+0x76>
    {
        ledOn = false; // turn off LED
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <led+0xb0>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	e00c      	b.n	8001584 <led+0x90>
    }
    else
    {
        int32_t inputPeriod = strtoul(argv[1], NULL, 10); // convert string to unsigned long
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3304      	adds	r3, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	220a      	movs	r2, #10
 8001572:	2100      	movs	r1, #0
 8001574:	0018      	movs	r0, r3
 8001576:	f006 fdd7 	bl	8008128 <strtoul>
 800157a:	0003      	movs	r3, r0
 800157c:	617b      	str	r3, [r7, #20]
        if (blinkingPeriod >= 0)
        {
            blinkingPeriod = inputPeriod;
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <led+0xb8>)
 8001582:	601a      	str	r2, [r3, #0]
        }
    }
    return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b006      	add	sp, #24
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	0800950c 	.word	0x0800950c
 8001594:	08009548 	.word	0x08009548
 8001598:	08009570 	.word	0x08009570
 800159c:	08009598 	.word	0x08009598
 80015a0:	20000398 	.word	0x20000398
 80015a4:	2000039c 	.word	0x2000039c
 80015a8:	0800959c 	.word	0x0800959c
 80015ac:	20000004 	.word	0x20000004

080015b0 <createLedTask>:

void createLedTask(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af02      	add	r7, sp, #8
    ledStartSemaphore = xSemaphoreCreateBinary();
 80015b6:	2203      	movs	r2, #3
 80015b8:	2100      	movs	r1, #0
 80015ba:	2001      	movs	r0, #1
 80015bc:	f004 ff7c 	bl	80064b8 <xQueueGenericCreate>
 80015c0:	0002      	movs	r2, r0
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <createLedTask+0x4c>)
 80015c4:	601a      	str	r2, [r3, #0]
    if (ledStartSemaphore == NULL)
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <createLedTask+0x4c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d104      	bne.n	80015d8 <createLedTask+0x28>
    {
        printf("[ERROR]: Semaphore create failed.\r\n");
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <createLedTask+0x50>)
 80015d0:	0018      	movs	r0, r3
 80015d2:	f006 fedf 	bl	8008394 <puts>
    else
    {
        printf("[INFO]: LED Semaphore create success.\r\n");
        xTaskCreate(LedTask, "LedTask", 128, NULL, 1, NULL);
    }
}
 80015d6:	e00d      	b.n	80015f4 <createLedTask+0x44>
        printf("[INFO]: LED Semaphore create success.\r\n");
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <createLedTask+0x54>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f006 feda 	bl	8008394 <puts>
        xTaskCreate(LedTask, "LedTask", 128, NULL, 1, NULL);
 80015e0:	4909      	ldr	r1, [pc, #36]	; (8001608 <createLedTask+0x58>)
 80015e2:	480a      	ldr	r0, [pc, #40]	; (800160c <createLedTask+0x5c>)
 80015e4:	2300      	movs	r3, #0
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	2301      	movs	r3, #1
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	f005 fac2 	bl	8006b78 <xTaskCreate>
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	20000398 	.word	0x20000398
 8001600:	080095a0 	.word	0x080095a0
 8001604:	080095c4 	.word	0x080095c4
 8001608:	080095ec 	.word	0x080095ec
 800160c:	08001479 	.word	0x08001479

08001610 <drv_uart_init>:
#include "drv_uart.h"

static SemaphoreHandle_t sem_uart_read = NULL;

int drv_uart_init()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    sem_uart_read = xSemaphoreCreateBinary();
 8001614:	2203      	movs	r2, #3
 8001616:	2100      	movs	r1, #0
 8001618:	2001      	movs	r0, #1
 800161a:	f004 ff4d 	bl	80064b8 <xQueueGenericCreate>
 800161e:	0002      	movs	r2, r0
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <drv_uart_init+0x3c>)
 8001622:	601a      	str	r2, [r3, #0]
    if (sem_uart_read == NULL)
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <drv_uart_init+0x3c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d106      	bne.n	800163a <drv_uart_init+0x2a>
    {
        printf("[ERROR]: Semaphore create failed.\r\n"); // TODO: handle error
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <drv_uart_init+0x40>)
 800162e:	0018      	movs	r0, r3
 8001630:	f006 feb0 	bl	8008394 <puts>
        return -1;
 8001634:	2301      	movs	r3, #1
 8001636:	425b      	negs	r3, r3
 8001638:	e004      	b.n	8001644 <drv_uart_init+0x34>
    }
    else
    {
        printf("[INFO]: Semaphore create success.\r\n");
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <drv_uart_init+0x44>)
 800163c:	0018      	movs	r0, r3
 800163e:	f006 fea9 	bl	8008394 <puts>
    }
    return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	200003a0 	.word	0x200003a0
 8001650:	080095f4 	.word	0x080095f4
 8001654:	08009618 	.word	0x08009618

08001658 <shell_uart_receive_irq_cb>:

void shell_uart_receive_irq_cb(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
    BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]

    xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <shell_uart_receive_irq_cb+0x30>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1d3a      	adds	r2, r7, #4
 8001668:	0011      	movs	r1, r2
 800166a:	0018      	movs	r0, r3
 800166c:	f005 f838 	bl	80066e0 <xQueueGiveFromISR>

    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <shell_uart_receive_irq_cb+0x26>
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <shell_uart_receive_irq_cb+0x34>)
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	0552      	lsls	r2, r2, #21
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	200003a0 	.word	0x200003a0
 800168c:	e000ed04 	.word	0xe000ed04

08001690 <drv_uart_receive>:

uint8_t drv_uart_receive(char *str, uint16_t size)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	000a      	movs	r2, r1
 800169a:	1cbb      	adds	r3, r7, #2
 800169c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t *)(str), 1);
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <drv_uart_receive+0x38>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	0018      	movs	r0, r3
 80016a6:	f002 ff45 	bl	8004534 <HAL_UART_Receive_IT>
    xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <drv_uart_receive+0x3c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2201      	movs	r2, #1
 80016b0:	4252      	negs	r2, r2
 80016b2:	0011      	movs	r1, r2
 80016b4:	0018      	movs	r0, r3
 80016b6:	f005 f878 	bl	80067aa <xQueueSemaphoreTake>
    return size;
 80016ba:	1cbb      	adds	r3, r7, #2
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000270 	.word	0x20000270
 80016cc:	200003a0 	.word	0x200003a0

080016d0 <drv_uart_transmit>:

uint8_t drv_uart_transmit(char *str, uint16_t size)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	000a      	movs	r2, r1
 80016da:	1cbb      	adds	r3, r7, #2
 80016dc:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&UART_DEVICE, (uint8_t *)str, size, HAL_MAX_DELAY);
 80016de:	2301      	movs	r3, #1
 80016e0:	425c      	negs	r4, r3
 80016e2:	1cbb      	adds	r3, r7, #2
 80016e4:	881a      	ldrh	r2, [r3, #0]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <drv_uart_transmit+0x30>)
 80016ea:	0023      	movs	r3, r4
 80016ec:	f002 fe86 	bl	80043fc <HAL_UART_Transmit>
    return size;
 80016f0:	1cbb      	adds	r3, r7, #2
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
}
 80016f6:	0018      	movs	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b003      	add	sp, #12
 80016fc:	bd90      	pop	{r4, r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	20000270 	.word	0x20000270

08001704 <HAL_UART_RxCpltCallback>:

// uart interrupt callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART_NAME)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_UART_RxCpltCallback+0x20>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_UART_RxCpltCallback+0x16>
    {
        shell_uart_receive_irq_cb();
 8001716:	f7ff ff9f 	bl	8001658 <shell_uart_receive_irq_cb>
    }
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	40004400 	.word	0x40004400

08001728 <sh_help>:

#include <stdio.h>
#include "cmsis_os.h"

static int sh_help(h_shell_t *h_shell, int argc, char **argv)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af02      	add	r7, sp, #8
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
    int i;
    for (i = 0; i < h_shell->shell_func_list_size; i++)
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e02e      	b.n	8001798 <sh_help+0x70>
    {
        int size;
        size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->shell_func_list[i].c, h_shell->shell_func_list[i].description);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	22c1      	movs	r2, #193	; 0xc1
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	1898      	adds	r0, r3, r2
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	0013      	movs	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	189b      	adds	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	18cb      	adds	r3, r1, r3
 8001750:	3304      	adds	r3, #4
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	001c      	movs	r4, r3
 8001756:	68f9      	ldr	r1, [r7, #12]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	0013      	movs	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	189b      	adds	r3, r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	18cb      	adds	r3, r1, r3
 8001764:	330c      	adds	r3, #12
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a10      	ldr	r2, [pc, #64]	; (80017ac <sh_help+0x84>)
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	0023      	movs	r3, r4
 800176e:	2128      	movs	r1, #40	; 0x28
 8001770:	f006 fe1a 	bl	80083a8 <sniprintf>
 8001774:	0003      	movs	r3, r0
 8001776:	613b      	str	r3, [r7, #16]
        h_shell->drv.transmit(h_shell->print_buffer, size);
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	23d5      	movs	r3, #213	; 0xd5
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	58d2      	ldr	r2, [r2, r3]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	21c1      	movs	r1, #193	; 0xc1
 8001784:	0089      	lsls	r1, r1, #2
 8001786:	468c      	mov	ip, r1
 8001788:	4463      	add	r3, ip
 800178a:	6939      	ldr	r1, [r7, #16]
 800178c:	b289      	uxth	r1, r1
 800178e:	0018      	movs	r0, r3
 8001790:	4790      	blx	r2
    for (i = 0; i < h_shell->shell_func_list_size; i++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbcb      	blt.n	800173a <sh_help+0x12>
    }

    return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b007      	add	sp, #28
 80017aa:	bd90      	pop	{r4, r7, pc}
 80017ac:	0800963c 	.word	0x0800963c

080017b0 <shell_init>:

int shell_init(h_shell_t *h_shell)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    int size = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
    h_shell->shell_func_list_size = 0;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
    size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	22c1      	movs	r2, #193	; 0xc1
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4694      	mov	ip, r2
 80017ca:	4463      	add	r3, ip
 80017cc:	4a0f      	ldr	r2, [pc, #60]	; (800180c <shell_init+0x5c>)
 80017ce:	2128      	movs	r1, #40	; 0x28
 80017d0:	0018      	movs	r0, r3
 80017d2:	f006 fde9 	bl	80083a8 <sniprintf>
 80017d6:	0003      	movs	r3, r0
 80017d8:	60fb      	str	r3, [r7, #12]
    h_shell->drv.transmit(h_shell->print_buffer, size);
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	23d5      	movs	r3, #213	; 0xd5
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	58d2      	ldr	r2, [r2, r3]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	21c1      	movs	r1, #193	; 0xc1
 80017e6:	0089      	lsls	r1, r1, #2
 80017e8:	468c      	mov	ip, r1
 80017ea:	4463      	add	r3, ip
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	b289      	uxth	r1, r1
 80017f0:	0018      	movs	r0, r3
 80017f2:	4790      	blx	r2

    shell_add(h_shell, 'h', sh_help, "Help");
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <shell_init+0x60>)
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <shell_init+0x64>)
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	2168      	movs	r1, #104	; 0x68
 80017fc:	f000 f80c 	bl	8001818 <shell_add>
    return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	0018      	movs	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	b004      	add	sp, #16
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	08009648 	.word	0x08009648
 8001810:	08009670 	.word	0x08009670
 8001814:	08001729 	.word	0x08001729

08001818 <shell_add>:

int shell_add(h_shell_t *h_shell, char c, shell_func_pointer_t pfunc, char *description)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	200b      	movs	r0, #11
 8001826:	183b      	adds	r3, r7, r0
 8001828:	1c0a      	adds	r2, r1, #0
 800182a:	701a      	strb	r2, [r3, #0]
    if (h_shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b3f      	cmp	r3, #63	; 0x3f
 8001832:	dc28      	bgt.n	8001886 <shell_add+0x6e>
    {
        h_shell->shell_func_list[h_shell->shell_func_list_size].c = c;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	0013      	movs	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	189b      	adds	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	18cb      	adds	r3, r1, r3
 8001844:	3304      	adds	r3, #4
 8001846:	183a      	adds	r2, r7, r0
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	701a      	strb	r2, [r3, #0]
        h_shell->shell_func_list[h_shell->shell_func_list_size].pfunc = pfunc;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	0013      	movs	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	189b      	adds	r3, r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	18cb      	adds	r3, r1, r3
 800185c:	3308      	adds	r3, #8
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]
        h_shell->shell_func_list[h_shell->shell_func_list_size].description = description;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	0013      	movs	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	189b      	adds	r3, r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	18cb      	adds	r3, r1, r3
 8001872:	330c      	adds	r3, #12
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	601a      	str	r2, [r3, #0]
        h_shell->shell_func_list_size++;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	601a      	str	r2, [r3, #0]
        return 0;
 8001882:	2300      	movs	r3, #0
 8001884:	e001      	b.n	800188a <shell_add+0x72>
    }

    return -1;
 8001886:	2301      	movs	r3, #1
 8001888:	425b      	negs	r3, r3
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b004      	add	sp, #16
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <shell_exec>:

static int shell_exec(h_shell_t *h_shell, char *buf)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b090      	sub	sp, #64	; 0x40
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
    int i;

    char c = buf[0];
 800189e:	2333      	movs	r3, #51	; 0x33
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	7812      	ldrb	r2, [r2, #0]
 80018a6:	701a      	strb	r2, [r3, #0]

    int argc;
    char *argv[ARGC_MAX];
    char *p;

    for (i = 0; i < h_shell->shell_func_list_size; i++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ac:	e043      	b.n	8001936 <shell_exec+0xa2>
    {
        if (h_shell->shell_func_list[i].c == c)
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018b2:	0013      	movs	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	189b      	adds	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	18cb      	adds	r3, r1, r3
 80018bc:	3304      	adds	r3, #4
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2233      	movs	r2, #51	; 0x33
 80018c2:	18ba      	adds	r2, r7, r2
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d132      	bne.n	8001930 <shell_exec+0x9c>
        {
            argc = 1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
            argv[0] = buf;
 80018ce:	230c      	movs	r3, #12
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	601a      	str	r2, [r3, #0]

            for (p = buf; *p != '\0' && argc < ARGC_MAX; p++)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
 80018da:	e012      	b.n	8001902 <shell_exec+0x6e>
            {
                if (*p == ' ')
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d10b      	bne.n	80018fc <shell_exec+0x68>
                {
                    *p = '\0';
 80018e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
                    argv[argc++] = p + 1;
 80018ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80018f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018f2:	1c51      	adds	r1, r2, #1
 80018f4:	220c      	movs	r2, #12
 80018f6:	18ba      	adds	r2, r7, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	5099      	str	r1, [r3, r2]
            for (p = buf; *p != '\0' && argc < ARGC_MAX; p++)
 80018fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fe:	3301      	adds	r3, #1
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
 8001902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <shell_exec+0x7c>
 800190a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800190c:	2b07      	cmp	r3, #7
 800190e:	dde5      	ble.n	80018dc <shell_exec+0x48>
                }
            }

            return h_shell->shell_func_list[i].pfunc(h_shell, argc, argv);
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001914:	0013      	movs	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	189b      	adds	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	18cb      	adds	r3, r1, r3
 800191e:	3308      	adds	r3, #8
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	220c      	movs	r2, #12
 8001924:	18ba      	adds	r2, r7, r2
 8001926:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	4798      	blx	r3
 800192c:	0003      	movs	r3, r0
 800192e:	e023      	b.n	8001978 <shell_exec+0xe4>
    for (i = 0; i < h_shell->shell_func_list_size; i++)
 8001930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001932:	3301      	adds	r3, #1
 8001934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800193c:	429a      	cmp	r2, r3
 800193e:	dbb6      	blt.n	80018ae <shell_exec+0x1a>
        }
    }

    int size;
    size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	22c1      	movs	r2, #193	; 0xc1
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	1898      	adds	r0, r3, r2
 8001948:	2333      	movs	r3, #51	; 0x33
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <shell_exec+0xec>)
 8001950:	2128      	movs	r1, #40	; 0x28
 8001952:	f006 fd29 	bl	80083a8 <sniprintf>
 8001956:	0003      	movs	r3, r0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    h_shell->drv.transmit(h_shell->print_buffer, size);
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	23d5      	movs	r3, #213	; 0xd5
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	58d2      	ldr	r2, [r2, r3]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	21c1      	movs	r1, #193	; 0xc1
 8001966:	0089      	lsls	r1, r1, #2
 8001968:	468c      	mov	ip, r1
 800196a:	4463      	add	r3, ip
 800196c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800196e:	b289      	uxth	r1, r1
 8001970:	0018      	movs	r0, r3
 8001972:	4790      	blx	r2
    return -1;
 8001974:	2301      	movs	r3, #1
 8001976:	425b      	negs	r3, r3
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b010      	add	sp, #64	; 0x40
 800197e:	bd80      	pop	{r7, pc}
 8001980:	08009678 	.word	0x08009678

08001984 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "[INPUT]>>>>>> ";

void shell_run(h_shell_t *h_shell)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    int reading = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
    int pos = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]

    while (1)
    {
        h_shell->drv.transmit(prompt, sizeof(prompt));
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	23d5      	movs	r3, #213	; 0xd5
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	58d3      	ldr	r3, [r2, r3]
 800199c:	4a39      	ldr	r2, [pc, #228]	; (8001a84 <shell_run+0x100>)
 800199e:	210f      	movs	r1, #15
 80019a0:	0010      	movs	r0, r2
 80019a2:	4798      	blx	r3
        reading = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]

        while (reading)
 80019a8:	e05f      	b.n	8001a6a <shell_run+0xe6>
        {
            char c;
            h_shell->drv.receive(&c, 1);
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	23d6      	movs	r3, #214	; 0xd6
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	58d3      	ldr	r3, [r2, r3]
 80019b2:	240b      	movs	r4, #11
 80019b4:	193a      	adds	r2, r7, r4
 80019b6:	2101      	movs	r1, #1
 80019b8:	0010      	movs	r0, r2
 80019ba:	4798      	blx	r3
            int size;

            switch (c)
 80019bc:	193b      	adds	r3, r7, r4
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d029      	beq.n	8001a18 <shell_run+0x94>
 80019c4:	2b0d      	cmp	r3, #13
 80019c6:	d136      	bne.n	8001a36 <shell_run+0xb2>
            {
            // process RETURN key
            case '\r':
                // case '\n':
                size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	22c1      	movs	r2, #193	; 0xc1
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4694      	mov	ip, r2
 80019d0:	4463      	add	r3, ip
 80019d2:	4a2d      	ldr	r2, [pc, #180]	; (8001a88 <shell_run+0x104>)
 80019d4:	2128      	movs	r1, #40	; 0x28
 80019d6:	0018      	movs	r0, r3
 80019d8:	f006 fce6 	bl	80083a8 <sniprintf>
 80019dc:	0003      	movs	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]
                h_shell->drv.transmit(h_shell->print_buffer, size);
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	23d5      	movs	r3, #213	; 0xd5
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	58d2      	ldr	r2, [r2, r3]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	21c1      	movs	r1, #193	; 0xc1
 80019ec:	0089      	lsls	r1, r1, #2
 80019ee:	468c      	mov	ip, r1
 80019f0:	4463      	add	r3, ip
 80019f2:	68f9      	ldr	r1, [r7, #12]
 80019f4:	b289      	uxth	r1, r1
 80019f6:	0018      	movs	r0, r3
 80019f8:	4790      	blx	r2
                h_shell->cmd_buffer[pos++] = 0; // add \0 char at end of string
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	613a      	str	r2, [r7, #16]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	22cb      	movs	r2, #203	; 0xcb
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	18cb      	adds	r3, r1, r3
 8001a08:	189b      	adds	r3, r3, r2
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
                reading = 0;                    // exit read loop
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
                pos = 0;                        // reset buffer
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
                break;
 8001a16:	e028      	b.n	8001a6a <shell_run+0xe6>
                // backspace
            case '\b':
                if (pos > 0)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dd24      	ble.n	8001a68 <shell_run+0xe4>
                {          // is there a char to delete?
                    pos--; // remove it in buffer
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	613b      	str	r3, [r7, #16]

                    h_shell->drv.transmit(backspace, 3); // delete the char on the terminal
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	23d5      	movs	r3, #213	; 0xd5
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	58d3      	ldr	r3, [r2, r3]
 8001a2c:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <shell_run+0x108>)
 8001a2e:	2103      	movs	r1, #3
 8001a30:	0010      	movs	r0, r2
 8001a32:	4798      	blx	r3
                }
                break;
 8001a34:	e018      	b.n	8001a68 <shell_run+0xe4>
                // other characters
            default:
                // only store characters if buffer has space
                if (pos < BUFFER_SIZE)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b27      	cmp	r3, #39	; 0x27
 8001a3a:	dc16      	bgt.n	8001a6a <shell_run+0xe6>
                {
                    h_shell->drv.transmit(&c, 1);
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	23d5      	movs	r3, #213	; 0xd5
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	58d3      	ldr	r3, [r2, r3]
 8001a44:	240b      	movs	r4, #11
 8001a46:	193a      	adds	r2, r7, r4
 8001a48:	2101      	movs	r1, #1
 8001a4a:	0010      	movs	r0, r2
 8001a4c:	4798      	blx	r3
                    h_shell->cmd_buffer[pos++] = c; // store
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	613a      	str	r2, [r7, #16]
 8001a54:	193a      	adds	r2, r7, r4
 8001a56:	7810      	ldrb	r0, [r2, #0]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	22cb      	movs	r2, #203	; 0xcb
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	18cb      	adds	r3, r1, r3
 8001a60:	189b      	adds	r3, r3, r2
 8001a62:	1c02      	adds	r2, r0, #0
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e000      	b.n	8001a6a <shell_run+0xe6>
                break;
 8001a68:	46c0      	nop			; (mov r8, r8)
        while (reading)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d19c      	bne.n	80019aa <shell_run+0x26>
                }
            }
        }
        shell_exec(h_shell, h_shell->cmd_buffer);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	22cb      	movs	r2, #203	; 0xcb
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	189a      	adds	r2, r3, r2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff ff09 	bl	8001894 <shell_exec>
        h_shell->drv.transmit(prompt, sizeof(prompt));
 8001a82:	e787      	b.n	8001994 <shell_run+0x10>
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	08009690 	.word	0x08009690
 8001a8c:	20000008 	.word	0x20000008

08001a90 <add>:
// #include "sensorSpam.h"

h_shell_t h_shell;
// add two parameters from the shell
int add(h_shell_t *h_shell, int argc, char **argv)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
    int a, b;
    if (argc != 3)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d006      	beq.n	8001ab0 <add+0x20>
    {
        printf("[INFO]: Usage: add a b\r\n");
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <add+0x5c>)
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f006 fc75 	bl	8008394 <puts>
        return -1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	425b      	negs	r3, r3
 8001aae:	e018      	b.n	8001ae2 <add+0x52>
    }
    a = atoi(argv[1]);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f006 fa1c 	bl	8007ef4 <atoi>
 8001abc:	0003      	movs	r3, r0
 8001abe:	617b      	str	r3, [r7, #20]
    b = atoi(argv[2]);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f006 fa14 	bl	8007ef4 <atoi>
 8001acc:	0003      	movs	r3, r0
 8001ace:	613b      	str	r3, [r7, #16]
    printf("%d + %d = %d\r\n", a, b, a + b);
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	18d3      	adds	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <add+0x60>)
 8001adc:	f006 fbf4 	bl	80082c8 <iprintf>
    return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b006      	add	sp, #24
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	08009694 	.word	0x08009694
 8001af0:	080096ac 	.word	0x080096ac

08001af4 <registerShellCommands>:

void registerShellCommands(h_shell_t *h_shell)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

    shell_add(h_shell, 'l', led, "Control LED blinking");
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <registerShellCommands+0x28>)
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <registerShellCommands+0x2c>)
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	216c      	movs	r1, #108	; 0x6c
 8001b04:	f7ff fe88 	bl	8001818 <shell_add>
    // shell_add(h_shell, 's', spam, "Send spam message on serial");
    shell_add(h_shell, 'a', add, "Add two numbers");
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <registerShellCommands+0x30>)
 8001b0a:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <registerShellCommands+0x34>)
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	2161      	movs	r1, #97	; 0x61
 8001b10:	f7ff fe82 	bl	8001818 <shell_add>
}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	080096bc 	.word	0x080096bc
 8001b20:	080014f5 	.word	0x080014f5
 8001b24:	080096d4 	.word	0x080096d4
 8001b28:	08001a91 	.word	0x08001a91

08001b2c <task_shell>:

void task_shell(void *argument)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    shell_drv_t drv_uart;
    drv_uart.transmit = drv_uart_transmit;
 8001b34:	2108      	movs	r1, #8
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <task_shell+0x4c>)
 8001b3a:	601a      	str	r2, [r3, #0]
    drv_uart.receive = drv_uart_receive;
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <task_shell+0x50>)
 8001b40:	605a      	str	r2, [r3, #4]
    h_shell.drv = drv_uart;
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <task_shell+0x54>)
 8001b44:	23d5      	movs	r3, #213	; 0xd5
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	1879      	adds	r1, r7, r1
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	ca03      	ldmia	r2!, {r0, r1}
 8001b50:	c303      	stmia	r3!, {r0, r1}
    drv_uart_init();
 8001b52:	f7ff fd5d 	bl	8001610 <drv_uart_init>
    shell_init(&h_shell);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <task_shell+0x54>)
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff fe29 	bl	80017b0 <shell_init>
    registerShellCommands(&h_shell);
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <task_shell+0x54>)
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff ffc7 	bl	8001af4 <registerShellCommands>
    printf("[INFO]: Shell init done\r\n");
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <task_shell+0x58>)
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f006 fc13 	bl	8008394 <puts>
    while (1)
    {
        shell_run(&h_shell);
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <task_shell+0x54>)
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff ff07 	bl	8001984 <shell_run>
 8001b76:	e7fa      	b.n	8001b6e <task_shell+0x42>
 8001b78:	080016d1 	.word	0x080016d1
 8001b7c:	08001691 	.word	0x08001691
 8001b80:	200003a4 	.word	0x200003a4
 8001b84:	080096e4 	.word	0x080096e4

08001b88 <createShellTask>:
    }
}

void createShellTask(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af02      	add	r7, sp, #8
    xTaskCreate(task_shell, "shell", 512, NULL, 1, NULL);
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	009a      	lsls	r2, r3, #2
 8001b92:	4906      	ldr	r1, [pc, #24]	; (8001bac <createShellTask+0x24>)
 8001b94:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <createShellTask+0x28>)
 8001b96:	2300      	movs	r3, #0
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f004 ffea 	bl	8006b78 <xTaskCreate>
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	08009700 	.word	0x08009700
 8001bb0:	08001b2d 	.word	0x08001b2d

08001bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_Init+0x3c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_Init+0x3c>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	0049      	lsls	r1, r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bce:	2003      	movs	r0, #3
 8001bd0:	f000 f810 	bl	8001bf4 <HAL_InitTick>
 8001bd4:	1e03      	subs	r3, r0, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001bd8:	1dfb      	adds	r3, r7, #7
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	e001      	b.n	8001be4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7fe fd58 	bl	8000694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	781b      	ldrb	r3, [r3, #0]
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfc:	230f      	movs	r3, #15
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_InitTick+0x88>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02b      	beq.n	8001c64 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_InitTick+0x8c>)
 8001c0e:	681c      	ldr	r4, [r3, #0]
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_InitTick+0x88>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	0019      	movs	r1, r3
 8001c16:	23fa      	movs	r3, #250	; 0xfa
 8001c18:	0098      	lsls	r0, r3, #2
 8001c1a:	f7fe fa89 	bl	8000130 <__udivsi3>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	0019      	movs	r1, r3
 8001c22:	0020      	movs	r0, r4
 8001c24:	f7fe fa84 	bl	8000130 <__udivsi3>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f000 f919 	bl	8001e62 <HAL_SYSTICK_Config>
 8001c30:	1e03      	subs	r3, r0, #0
 8001c32:	d112      	bne.n	8001c5a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d80a      	bhi.n	8001c50 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	425b      	negs	r3, r3
 8001c40:	2200      	movs	r2, #0
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 f8e8 	bl	8001e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_InitTick+0x90>)
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e00d      	b.n	8001c6c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c50:	230f      	movs	r3, #15
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	e008      	b.n	8001c6c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c5a:	230f      	movs	r3, #15
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e003      	b.n	8001c6c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	781b      	ldrb	r3, [r3, #0]
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b005      	add	sp, #20
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	20000020 	.word	0x20000020
 8001c80:	20000000 	.word	0x20000000
 8001c84:	2000001c 	.word	0x2000001c

08001c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_IncTick+0x1c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	001a      	movs	r2, r3
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_IncTick+0x20>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	18d2      	adds	r2, r2, r3
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_IncTick+0x20>)
 8001c9a:	601a      	str	r2, [r3, #0]
}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	20000020 	.word	0x20000020
 8001ca8:	20000700 	.word	0x20000700

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b02      	ldr	r3, [pc, #8]	; (8001cbc <HAL_GetTick+0x10>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	20000700 	.word	0x20000700

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	1dfb      	adds	r3, r7, #7
 8001cca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8001cd2:	d809      	bhi.n	8001ce8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	001a      	movs	r2, r3
 8001cda:	231f      	movs	r3, #31
 8001cdc:	401a      	ands	r2, r3
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <__NVIC_EnableIRQ+0x30>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4091      	lsls	r1, r2
 8001ce4:	000a      	movs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	1dfb      	adds	r3, r7, #7
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b7f      	cmp	r3, #127	; 0x7f
 8001d08:	d828      	bhi.n	8001d5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d0a:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <__NVIC_SetPriority+0xd4>)
 8001d0c:	1dfb      	adds	r3, r7, #7
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	b25b      	sxtb	r3, r3
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	33c0      	adds	r3, #192	; 0xc0
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	589b      	ldr	r3, [r3, r2]
 8001d1a:	1dfa      	adds	r2, r7, #7
 8001d1c:	7812      	ldrb	r2, [r2, #0]
 8001d1e:	0011      	movs	r1, r2
 8001d20:	2203      	movs	r2, #3
 8001d22:	400a      	ands	r2, r1
 8001d24:	00d2      	lsls	r2, r2, #3
 8001d26:	21ff      	movs	r1, #255	; 0xff
 8001d28:	4091      	lsls	r1, r2
 8001d2a:	000a      	movs	r2, r1
 8001d2c:	43d2      	mvns	r2, r2
 8001d2e:	401a      	ands	r2, r3
 8001d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	22ff      	movs	r2, #255	; 0xff
 8001d38:	401a      	ands	r2, r3
 8001d3a:	1dfb      	adds	r3, r7, #7
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	2303      	movs	r3, #3
 8001d42:	4003      	ands	r3, r0
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d48:	481f      	ldr	r0, [pc, #124]	; (8001dc8 <__NVIC_SetPriority+0xd4>)
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	430a      	orrs	r2, r1
 8001d54:	33c0      	adds	r3, #192	; 0xc0
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d5a:	e031      	b.n	8001dc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <__NVIC_SetPriority+0xd8>)
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	0019      	movs	r1, r3
 8001d64:	230f      	movs	r3, #15
 8001d66:	400b      	ands	r3, r1
 8001d68:	3b08      	subs	r3, #8
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3306      	adds	r3, #6
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	18d3      	adds	r3, r2, r3
 8001d72:	3304      	adds	r3, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1dfa      	adds	r2, r7, #7
 8001d78:	7812      	ldrb	r2, [r2, #0]
 8001d7a:	0011      	movs	r1, r2
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	400a      	ands	r2, r1
 8001d80:	00d2      	lsls	r2, r2, #3
 8001d82:	21ff      	movs	r1, #255	; 0xff
 8001d84:	4091      	lsls	r1, r2
 8001d86:	000a      	movs	r2, r1
 8001d88:	43d2      	mvns	r2, r2
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	22ff      	movs	r2, #255	; 0xff
 8001d94:	401a      	ands	r2, r3
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	4003      	ands	r3, r0
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001da4:	4809      	ldr	r0, [pc, #36]	; (8001dcc <__NVIC_SetPriority+0xd8>)
 8001da6:	1dfb      	adds	r3, r7, #7
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	001c      	movs	r4, r3
 8001dac:	230f      	movs	r3, #15
 8001dae:	4023      	ands	r3, r4
 8001db0:	3b08      	subs	r3, #8
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	430a      	orrs	r2, r1
 8001db6:	3306      	adds	r3, #6
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	18c3      	adds	r3, r0, r3
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b003      	add	sp, #12
 8001dc6:	bd90      	pop	{r4, r7, pc}
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	1e5a      	subs	r2, r3, #1
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	045b      	lsls	r3, r3, #17
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d301      	bcc.n	8001de8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de4:	2301      	movs	r3, #1
 8001de6:	e010      	b.n	8001e0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <SysTick_Config+0x44>)
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	3a01      	subs	r2, #1
 8001dee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df0:	2301      	movs	r3, #1
 8001df2:	425b      	negs	r3, r3
 8001df4:	2103      	movs	r1, #3
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7ff ff7c 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SysTick_Config+0x44>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SysTick_Config+0x44>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b002      	add	sp, #8
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	210f      	movs	r1, #15
 8001e24:	187b      	adds	r3, r7, r1
 8001e26:	1c02      	adds	r2, r0, #0
 8001e28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	0011      	movs	r1, r2
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff ff5d 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	0002      	movs	r2, r0
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4e:	1dfb      	adds	r3, r7, #7
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b25b      	sxtb	r3, r3
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff ff33 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b002      	add	sp, #8
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff ffaf 	bl	8001dd0 <SysTick_Config>
 8001e72:	0003      	movs	r3, r0
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e050      	b.n	8001f30 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2225      	movs	r2, #37	; 0x25
 8001e92:	5c9b      	ldrb	r3, [r3, r2]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d008      	beq.n	8001eac <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2224      	movs	r2, #36	; 0x24
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e041      	b.n	8001f30 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	210e      	movs	r1, #14
 8001eb8:	438a      	bics	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	491c      	ldr	r1, [pc, #112]	; (8001f38 <HAL_DMA_Abort+0xbc>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	438a      	bics	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_DMA_Abort+0xc0>)
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	221c      	movs	r2, #28
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2201      	movs	r2, #1
 8001eea:	409a      	lsls	r2, r3
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_DMA_Abort+0xc0>)
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001efa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0e:	490a      	ldr	r1, [pc, #40]	; (8001f38 <HAL_DMA_Abort+0xbc>)
 8001f10:	400a      	ands	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001f1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2225      	movs	r2, #37	; 0x25
 8001f22:	2101      	movs	r1, #1
 8001f24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2224      	movs	r2, #36	; 0x24
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b002      	add	sp, #8
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	fffffeff 	.word	0xfffffeff
 8001f3c:	40020000 	.word	0x40020000

08001f40 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f48:	210f      	movs	r1, #15
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2225      	movs	r2, #37	; 0x25
 8001f54:	5c9b      	ldrb	r3, [r3, r2]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d006      	beq.n	8001f6a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e049      	b.n	8001ffe <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	210e      	movs	r1, #14
 8001f76:	438a      	bics	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	438a      	bics	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	491d      	ldr	r1, [pc, #116]	; (800200c <HAL_DMA_Abort_IT+0xcc>)
 8001f96:	400a      	ands	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_DMA_Abort_IT+0xd0>)
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	221c      	movs	r2, #28
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_DMA_Abort_IT+0xd0>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fb8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00c      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fcc:	490f      	ldr	r1, [pc, #60]	; (800200c <HAL_DMA_Abort_IT+0xcc>)
 8001fce:	400a      	ands	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001fda:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2225      	movs	r2, #37	; 0x25
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	2100      	movs	r1, #0
 8001fea:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	0010      	movs	r0, r2
 8001ffc:	4798      	blx	r3
    }
  }
  return status;
 8001ffe:	230f      	movs	r3, #15
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	781b      	ldrb	r3, [r3, #0]
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b004      	add	sp, #16
 800200a:	bd80      	pop	{r7, pc}
 800200c:	fffffeff 	.word	0xfffffeff
 8002010:	40020000 	.word	0x40020000

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002022:	e147      	b.n	80022b4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4091      	lsls	r1, r2
 800202e:	000a      	movs	r2, r1
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d100      	bne.n	800203c <HAL_GPIO_Init+0x28>
 800203a:	e138      	b.n	80022ae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2203      	movs	r2, #3
 8002042:	4013      	ands	r3, r2
 8002044:	2b01      	cmp	r3, #1
 8002046:	d005      	beq.n	8002054 <HAL_GPIO_Init+0x40>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2203      	movs	r2, #3
 800204e:	4013      	ands	r3, r2
 8002050:	2b02      	cmp	r3, #2
 8002052:	d130      	bne.n	80020b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	409a      	lsls	r2, r3
 8002062:	0013      	movs	r3, r2
 8002064:	43da      	mvns	r2, r3
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	409a      	lsls	r2, r3
 8002076:	0013      	movs	r3, r2
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800208a:	2201      	movs	r2, #1
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
 8002090:	0013      	movs	r3, r2
 8002092:	43da      	mvns	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	2201      	movs	r2, #1
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	4013      	ands	r3, r2
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d017      	beq.n	80020f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	409a      	lsls	r2, r3
 80020d0:	0013      	movs	r3, r2
 80020d2:	43da      	mvns	r2, r3
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	409a      	lsls	r2, r3
 80020e4:	0013      	movs	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2203      	movs	r2, #3
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d123      	bne.n	8002146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	58d3      	ldr	r3, [r2, r3]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2207      	movs	r2, #7
 8002110:	4013      	ands	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	409a      	lsls	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	43da      	mvns	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2107      	movs	r1, #7
 800212a:	400b      	ands	r3, r1
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	6939      	ldr	r1, [r7, #16]
 8002144:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	409a      	lsls	r2, r3
 8002154:	0013      	movs	r3, r2
 8002156:	43da      	mvns	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2203      	movs	r2, #3
 8002164:	401a      	ands	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	23c0      	movs	r3, #192	; 0xc0
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	4013      	ands	r3, r2
 8002184:	d100      	bne.n	8002188 <HAL_GPIO_Init+0x174>
 8002186:	e092      	b.n	80022ae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002188:	4a50      	ldr	r2, [pc, #320]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3318      	adds	r3, #24
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	589b      	ldr	r3, [r3, r2]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2203      	movs	r2, #3
 800219a:	4013      	ands	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	220f      	movs	r2, #15
 80021a0:	409a      	lsls	r2, r3
 80021a2:	0013      	movs	r3, r2
 80021a4:	43da      	mvns	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	23a0      	movs	r3, #160	; 0xa0
 80021b0:	05db      	lsls	r3, r3, #23
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d013      	beq.n	80021de <HAL_GPIO_Init+0x1ca>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a45      	ldr	r2, [pc, #276]	; (80022d0 <HAL_GPIO_Init+0x2bc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00d      	beq.n	80021da <HAL_GPIO_Init+0x1c6>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a44      	ldr	r2, [pc, #272]	; (80022d4 <HAL_GPIO_Init+0x2c0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <HAL_GPIO_Init+0x1c2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a43      	ldr	r2, [pc, #268]	; (80022d8 <HAL_GPIO_Init+0x2c4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d101      	bne.n	80021d2 <HAL_GPIO_Init+0x1be>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x1cc>
 80021d2:	2305      	movs	r3, #5
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x1cc>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x1cc>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x1cc>
 80021de:	2300      	movs	r3, #0
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	2103      	movs	r1, #3
 80021e4:	400a      	ands	r2, r1
 80021e6:	00d2      	lsls	r2, r2, #3
 80021e8:	4093      	lsls	r3, r2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021f0:	4936      	ldr	r1, [pc, #216]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3318      	adds	r3, #24
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43da      	mvns	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	035b      	lsls	r3, r3, #13
 8002216:	4013      	ands	r3, r2
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43da      	mvns	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	039b      	lsls	r3, r3, #14
 8002240:	4013      	ands	r3, r2
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002252:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 8002254:	2384      	movs	r3, #132	; 0x84
 8002256:	58d3      	ldr	r3, [r2, r3]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43da      	mvns	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	029b      	lsls	r3, r3, #10
 800226c:	4013      	ands	r3, r2
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002278:	4914      	ldr	r1, [pc, #80]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 800227a:	2284      	movs	r2, #132	; 0x84
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	58d3      	ldr	r3, [r2, r3]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43da      	mvns	r2, r3
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	4013      	ands	r3, r2
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022a6:	4909      	ldr	r1, [pc, #36]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	40da      	lsrs	r2, r3
 80022bc:	1e13      	subs	r3, r2, #0
 80022be:	d000      	beq.n	80022c2 <HAL_GPIO_Init+0x2ae>
 80022c0:	e6b0      	b.n	8002024 <HAL_GPIO_Init+0x10>
  }
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b006      	add	sp, #24
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021800 	.word	0x40021800
 80022d0:	50000400 	.word	0x50000400
 80022d4:	50000800 	.word	0x50000800
 80022d8:	50000c00 	.word	0x50000c00

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	0008      	movs	r0, r1
 80022e6:	0011      	movs	r1, r2
 80022e8:	1cbb      	adds	r3, r7, #2
 80022ea:	1c02      	adds	r2, r0, #0
 80022ec:	801a      	strh	r2, [r3, #0]
 80022ee:	1c7b      	adds	r3, r7, #1
 80022f0:	1c0a      	adds	r2, r1, #0
 80022f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f4:	1c7b      	adds	r3, r7, #1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d004      	beq.n	8002306 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022fc:	1cbb      	adds	r3, r7, #2
 80022fe:	881a      	ldrh	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002304:	e003      	b.n	800230e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002306:	1cbb      	adds	r3, r7, #2
 8002308:	881a      	ldrh	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	000a      	movs	r2, r1
 8002320:	1cbb      	adds	r3, r7, #2
 8002322:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800232a:	1cbb      	adds	r3, r7, #2
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4013      	ands	r3, r2
 8002332:	041a      	lsls	r2, r3, #16
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	43db      	mvns	r3, r3
 8002338:	1cb9      	adds	r1, r7, #2
 800233a:	8809      	ldrh	r1, [r1, #0]
 800233c:	400b      	ands	r3, r1
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b004      	add	sp, #16
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	0002      	movs	r2, r0
 8002354:	1dbb      	adds	r3, r7, #6
 8002356:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	1dba      	adds	r2, r7, #6
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	4013      	ands	r3, r2
 8002362:	d008      	beq.n	8002376 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002366:	1dba      	adds	r2, r7, #6
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800236c:	1dbb      	adds	r3, r7, #6
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f815 	bl	80023a0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	1dba      	adds	r2, r7, #6
 800237c:	8812      	ldrh	r2, [r2, #0]
 800237e:	4013      	ands	r3, r2
 8002380:	d008      	beq.n	8002394 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002384:	1dba      	adds	r2, r7, #6
 8002386:	8812      	ldrh	r2, [r2, #0]
 8002388:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800238a:	1dbb      	adds	r3, r7, #6
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	0018      	movs	r0, r3
 8002390:	f000 f810 	bl	80023b4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021800 	.word	0x40021800

080023a0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	0002      	movs	r2, r0
 80023a8:	1dbb      	adds	r3, r7, #6
 80023aa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	0002      	movs	r2, r0
 80023bc:	1dbb      	adds	r3, r7, #6
 80023be:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a19      	ldr	r2, [pc, #100]	; (800243c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d11f      	bne.n	800242c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	0013      	movs	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	189b      	adds	r3, r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4912      	ldr	r1, [pc, #72]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80023fa:	0018      	movs	r0, r3
 80023fc:	f7fd fe98 	bl	8000130 <__udivsi3>
 8002400:	0003      	movs	r3, r0
 8002402:	3301      	adds	r3, #1
 8002404:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002406:	e008      	b.n	800241a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3b01      	subs	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e001      	b.n	800241a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e009      	b.n	800242e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	401a      	ands	r2, r3
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	429a      	cmp	r2, r3
 800242a:	d0ed      	beq.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b004      	add	sp, #16
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40007000 	.word	0x40007000
 800243c:	fffff9ff 	.word	0xfffff9ff
 8002440:	20000000 	.word	0x20000000
 8002444:	000f4240 	.word	0x000f4240

08002448 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <LL_RCC_GetAPB1Prescaler+0x14>)
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	23e0      	movs	r3, #224	; 0xe0
 8002452:	01db      	lsls	r3, r3, #7
 8002454:	4013      	ands	r3, r2
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e2f3      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2201      	movs	r2, #1
 8002478:	4013      	ands	r3, r2
 800247a:	d100      	bne.n	800247e <HAL_RCC_OscConfig+0x1e>
 800247c:	e07c      	b.n	8002578 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247e:	4bc3      	ldr	r3, [pc, #780]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2238      	movs	r2, #56	; 0x38
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002488:	4bc0      	ldr	r3, [pc, #768]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2203      	movs	r2, #3
 800248e:	4013      	ands	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b10      	cmp	r3, #16
 8002496:	d102      	bne.n	800249e <HAL_RCC_OscConfig+0x3e>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d002      	beq.n	80024a4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d10b      	bne.n	80024bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	4bb9      	ldr	r3, [pc, #740]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	029b      	lsls	r3, r3, #10
 80024ac:	4013      	ands	r3, r2
 80024ae:	d062      	beq.n	8002576 <HAL_RCC_OscConfig+0x116>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d15e      	bne.n	8002576 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e2ce      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	025b      	lsls	r3, r3, #9
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_OscConfig+0x78>
 80024c8:	4bb0      	ldr	r3, [pc, #704]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4baf      	ldr	r3, [pc, #700]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	0249      	lsls	r1, r1, #9
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e020      	b.n	800251a <HAL_RCC_OscConfig+0xba>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	23a0      	movs	r3, #160	; 0xa0
 80024de:	02db      	lsls	r3, r3, #11
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d10e      	bne.n	8002502 <HAL_RCC_OscConfig+0xa2>
 80024e4:	4ba9      	ldr	r3, [pc, #676]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4ba8      	ldr	r3, [pc, #672]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	02c9      	lsls	r1, r1, #11
 80024ee:	430a      	orrs	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	4ba6      	ldr	r3, [pc, #664]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4ba5      	ldr	r3, [pc, #660]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0249      	lsls	r1, r1, #9
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e00b      	b.n	800251a <HAL_RCC_OscConfig+0xba>
 8002502:	4ba2      	ldr	r3, [pc, #648]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4ba1      	ldr	r3, [pc, #644]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002508:	49a1      	ldr	r1, [pc, #644]	; (8002790 <HAL_RCC_OscConfig+0x330>)
 800250a:	400a      	ands	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	4b9f      	ldr	r3, [pc, #636]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b9e      	ldr	r3, [pc, #632]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002514:	499f      	ldr	r1, [pc, #636]	; (8002794 <HAL_RCC_OscConfig+0x334>)
 8002516:	400a      	ands	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d014      	beq.n	800254c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7ff fbc3 	bl	8001cac <HAL_GetTick>
 8002526:	0003      	movs	r3, r0
 8002528:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7ff fbbe 	bl	8001cac <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e28d      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253e:	4b93      	ldr	r3, [pc, #588]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	029b      	lsls	r3, r3, #10
 8002546:	4013      	ands	r3, r2
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0xcc>
 800254a:	e015      	b.n	8002578 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7ff fbae 	bl	8001cac <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002556:	f7ff fba9 	bl	8001cac <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	; 0x64
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e278      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002568:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	029b      	lsls	r3, r3, #10
 8002570:	4013      	ands	r3, r2
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0xf6>
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002576:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2202      	movs	r2, #2
 800257e:	4013      	ands	r3, r2
 8002580:	d100      	bne.n	8002584 <HAL_RCC_OscConfig+0x124>
 8002582:	e099      	b.n	80026b8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002584:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2238      	movs	r2, #56	; 0x38
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800258e:	4b7f      	ldr	r3, [pc, #508]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2203      	movs	r2, #3
 8002594:	4013      	ands	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b10      	cmp	r3, #16
 800259c:	d102      	bne.n	80025a4 <HAL_RCC_OscConfig+0x144>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d002      	beq.n	80025aa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d135      	bne.n	8002616 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025aa:	4b78      	ldr	r3, [pc, #480]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4013      	ands	r3, r2
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x162>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e24b      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b72      	ldr	r3, [pc, #456]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a74      	ldr	r2, [pc, #464]	; (8002798 <HAL_RCC_OscConfig+0x338>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	021a      	lsls	r2, r3, #8
 80025d2:	4b6e      	ldr	r3, [pc, #440]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80025d4:	430a      	orrs	r2, r1
 80025d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d112      	bne.n	8002604 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025de:	4b6b      	ldr	r3, [pc, #428]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6e      	ldr	r2, [pc, #440]	; (800279c <HAL_RCC_OscConfig+0x33c>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025f2:	4b66      	ldr	r3, [pc, #408]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0adb      	lsrs	r3, r3, #11
 80025f8:	2207      	movs	r2, #7
 80025fa:	4013      	ands	r3, r2
 80025fc:	4a68      	ldr	r2, [pc, #416]	; (80027a0 <HAL_RCC_OscConfig+0x340>)
 80025fe:	40da      	lsrs	r2, r3
 8002600:	4b68      	ldr	r3, [pc, #416]	; (80027a4 <HAL_RCC_OscConfig+0x344>)
 8002602:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002604:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_OscConfig+0x348>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0018      	movs	r0, r3
 800260a:	f7ff faf3 	bl	8001bf4 <HAL_InitTick>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d051      	beq.n	80026b6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e221      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d030      	beq.n	8002680 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800261e:	4b5b      	ldr	r3, [pc, #364]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a5e      	ldr	r2, [pc, #376]	; (800279c <HAL_RCC_OscConfig+0x33c>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	4b57      	ldr	r3, [pc, #348]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 800262e:	430a      	orrs	r2, r1
 8002630:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002632:	4b56      	ldr	r3, [pc, #344]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b55      	ldr	r3, [pc, #340]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	0049      	lsls	r1, r1, #1
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7ff fb34 	bl	8001cac <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264a:	f7ff fb2f 	bl	8001cac <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1fe      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800265c:	4b4b      	ldr	r3, [pc, #300]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4013      	ands	r3, r2
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b48      	ldr	r3, [pc, #288]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a4a      	ldr	r2, [pc, #296]	; (8002798 <HAL_RCC_OscConfig+0x338>)
 800266e:	4013      	ands	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	021a      	lsls	r2, r3, #8
 8002678:	4b44      	ldr	r3, [pc, #272]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	e01b      	b.n	80026b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002680:	4b42      	ldr	r3, [pc, #264]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002686:	4949      	ldr	r1, [pc, #292]	; (80027ac <HAL_RCC_OscConfig+0x34c>)
 8002688:	400a      	ands	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7ff fb0e 	bl	8001cac <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002696:	f7ff fb09 	bl	8001cac <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e1d8      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a8:	4b38      	ldr	r3, [pc, #224]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4013      	ands	r3, r2
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x236>
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2208      	movs	r2, #8
 80026be:	4013      	ands	r3, r2
 80026c0:	d047      	beq.n	8002752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026c2:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2238      	movs	r2, #56	; 0x38
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b18      	cmp	r3, #24
 80026cc:	d10a      	bne.n	80026e4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80026ce:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	2202      	movs	r2, #2
 80026d4:	4013      	ands	r3, r2
 80026d6:	d03c      	beq.n	8002752 <HAL_RCC_OscConfig+0x2f2>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d138      	bne.n	8002752 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e1ba      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d019      	beq.n	8002720 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80026ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026f0:	4b26      	ldr	r3, [pc, #152]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 80026f2:	2101      	movs	r1, #1
 80026f4:	430a      	orrs	r2, r1
 80026f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7ff fad8 	bl	8001cac <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002702:	f7ff fad3 	bl	8001cac <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1a2      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002718:	2202      	movs	r2, #2
 800271a:	4013      	ands	r3, r2
 800271c:	d0f1      	beq.n	8002702 <HAL_RCC_OscConfig+0x2a2>
 800271e:	e018      	b.n	8002752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002722:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002726:	2101      	movs	r1, #1
 8002728:	438a      	bics	r2, r1
 800272a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7ff fabe 	bl	8001cac <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002736:	f7ff fab9 	bl	8001cac <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e188      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 800274a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274c:	2202      	movs	r2, #2
 800274e:	4013      	ands	r3, r2
 8002750:	d1f1      	bne.n	8002736 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2204      	movs	r2, #4
 8002758:	4013      	ands	r3, r2
 800275a:	d100      	bne.n	800275e <HAL_RCC_OscConfig+0x2fe>
 800275c:	e0c6      	b.n	80028ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275e:	231f      	movs	r3, #31
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2238      	movs	r2, #56	; 0x38
 800276c:	4013      	ands	r3, r2
 800276e:	2b20      	cmp	r3, #32
 8002770:	d11e      	bne.n	80027b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_OscConfig+0x32c>)
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	2202      	movs	r2, #2
 8002778:	4013      	ands	r3, r2
 800277a:	d100      	bne.n	800277e <HAL_RCC_OscConfig+0x31e>
 800277c:	e0b6      	b.n	80028ec <HAL_RCC_OscConfig+0x48c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d000      	beq.n	8002788 <HAL_RCC_OscConfig+0x328>
 8002786:	e0b1      	b.n	80028ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e166      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
 800278c:	40021000 	.word	0x40021000
 8002790:	fffeffff 	.word	0xfffeffff
 8002794:	fffbffff 	.word	0xfffbffff
 8002798:	ffff80ff 	.word	0xffff80ff
 800279c:	ffffc7ff 	.word	0xffffc7ff
 80027a0:	00f42400 	.word	0x00f42400
 80027a4:	20000000 	.word	0x20000000
 80027a8:	2000001c 	.word	0x2000001c
 80027ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027b0:	4bac      	ldr	r3, [pc, #688]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80027b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	055b      	lsls	r3, r3, #21
 80027b8:	4013      	ands	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_OscConfig+0x360>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x362>
 80027c0:	2300      	movs	r3, #0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d011      	beq.n	80027ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4ba7      	ldr	r3, [pc, #668]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80027c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ca:	4ba6      	ldr	r3, [pc, #664]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	0549      	lsls	r1, r1, #21
 80027d0:	430a      	orrs	r2, r1
 80027d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027d4:	4ba3      	ldr	r3, [pc, #652]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80027d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	055b      	lsls	r3, r3, #21
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80027e2:	231f      	movs	r3, #31
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ea:	4b9f      	ldr	r3, [pc, #636]	; (8002a68 <HAL_RCC_OscConfig+0x608>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4013      	ands	r3, r2
 80027f4:	d11a      	bne.n	800282c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f6:	4b9c      	ldr	r3, [pc, #624]	; (8002a68 <HAL_RCC_OscConfig+0x608>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b9b      	ldr	r3, [pc, #620]	; (8002a68 <HAL_RCC_OscConfig+0x608>)
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	0049      	lsls	r1, r1, #1
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002804:	f7ff fa52 	bl	8001cac <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7ff fa4d 	bl	8001cac <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e11c      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002820:	4b91      	ldr	r3, [pc, #580]	; (8002a68 <HAL_RCC_OscConfig+0x608>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4013      	ands	r3, r2
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x3e2>
 8002834:	4b8b      	ldr	r3, [pc, #556]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002836:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002838:	4b8a      	ldr	r3, [pc, #552]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 800283a:	2101      	movs	r1, #1
 800283c:	430a      	orrs	r2, r1
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002840:	e01c      	b.n	800287c <HAL_RCC_OscConfig+0x41c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b05      	cmp	r3, #5
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x404>
 800284a:	4b86      	ldr	r3, [pc, #536]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 800284c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800284e:	4b85      	ldr	r3, [pc, #532]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002850:	2104      	movs	r1, #4
 8002852:	430a      	orrs	r2, r1
 8002854:	65da      	str	r2, [r3, #92]	; 0x5c
 8002856:	4b83      	ldr	r3, [pc, #524]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800285a:	4b82      	ldr	r3, [pc, #520]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 800285c:	2101      	movs	r1, #1
 800285e:	430a      	orrs	r2, r1
 8002860:	65da      	str	r2, [r3, #92]	; 0x5c
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0x41c>
 8002864:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002866:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002868:	4b7e      	ldr	r3, [pc, #504]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 800286a:	2101      	movs	r1, #1
 800286c:	438a      	bics	r2, r1
 800286e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002870:	4b7c      	ldr	r3, [pc, #496]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002872:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002874:	4b7b      	ldr	r3, [pc, #492]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002876:	2104      	movs	r1, #4
 8002878:	438a      	bics	r2, r1
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d014      	beq.n	80028ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7ff fa12 	bl	8001cac <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288c:	e009      	b.n	80028a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7ff fa0d 	bl	8001cac <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	4a74      	ldr	r2, [pc, #464]	; (8002a6c <HAL_RCC_OscConfig+0x60c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0db      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	4b70      	ldr	r3, [pc, #448]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	2202      	movs	r2, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x42e>
 80028ac:	e013      	b.n	80028d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7ff f9fd 	bl	8001cac <HAL_GetTick>
 80028b2:	0003      	movs	r3, r0
 80028b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b6:	e009      	b.n	80028cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7ff f9f8 	bl	8001cac <HAL_GetTick>
 80028bc:	0002      	movs	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	4a6a      	ldr	r2, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x60c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e0c6      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028cc:	4b65      	ldr	r3, [pc, #404]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2202      	movs	r2, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80028d6:	231f      	movs	r3, #31
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80028e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028e4:	4b5f      	ldr	r3, [pc, #380]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80028e6:	4962      	ldr	r1, [pc, #392]	; (8002a70 <HAL_RCC_OscConfig+0x610>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d100      	bne.n	80028f6 <HAL_RCC_OscConfig+0x496>
 80028f4:	e0b0      	b.n	8002a58 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f6:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2238      	movs	r2, #56	; 0x38
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d100      	bne.n	8002904 <HAL_RCC_OscConfig+0x4a4>
 8002902:	e078      	b.n	80029f6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d153      	bne.n	80029b4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290c:	4b55      	ldr	r3, [pc, #340]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b54      	ldr	r3, [pc, #336]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002912:	4958      	ldr	r1, [pc, #352]	; (8002a74 <HAL_RCC_OscConfig+0x614>)
 8002914:	400a      	ands	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7ff f9c8 	bl	8001cac <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7ff f9c3 	bl	8001cac <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e092      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002934:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	049b      	lsls	r3, r3, #18
 800293c:	4013      	ands	r3, r2
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002940:	4b48      	ldr	r3, [pc, #288]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a4c      	ldr	r2, [pc, #304]	; (8002a78 <HAL_RCC_OscConfig+0x618>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	431a      	orrs	r2, r3
 8002968:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 800296a:	430a      	orrs	r2, r1
 800296c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800296e:	4b3d      	ldr	r3, [pc, #244]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	0449      	lsls	r1, r1, #17
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800297c:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	0549      	lsls	r1, r1, #21
 8002986:	430a      	orrs	r2, r1
 8002988:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7ff f98f 	bl	8001cac <HAL_GetTick>
 800298e:	0003      	movs	r3, r0
 8002990:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7ff f98a 	bl	8001cac <HAL_GetTick>
 8002998:	0002      	movs	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e059      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a6:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	049b      	lsls	r3, r3, #18
 80029ae:	4013      	ands	r3, r2
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x534>
 80029b2:	e051      	b.n	8002a58 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b4:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80029ba:	492e      	ldr	r1, [pc, #184]	; (8002a74 <HAL_RCC_OscConfig+0x614>)
 80029bc:	400a      	ands	r2, r1
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7ff f974 	bl	8001cac <HAL_GetTick>
 80029c4:	0003      	movs	r3, r0
 80029c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ca:	f7ff f96f 	bl	8001cac <HAL_GetTick>
 80029ce:	0002      	movs	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e03e      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	049b      	lsls	r3, r3, #18
 80029e4:	4013      	ands	r3, r2
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 80029ee:	4923      	ldr	r1, [pc, #140]	; (8002a7c <HAL_RCC_OscConfig+0x61c>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	e030      	b.n	8002a58 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e02b      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002a02:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <HAL_RCC_OscConfig+0x604>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d11e      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2270      	movs	r2, #112	; 0x70
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d117      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	23fe      	movs	r3, #254	; 0xfe
 8002a28:	01db      	lsls	r3, r3, #7
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d10e      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	23f8      	movs	r3, #248	; 0xf8
 8002a3a:	039b      	lsls	r3, r3, #14
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	0f5b      	lsrs	r3, r3, #29
 8002a4a:	075a      	lsls	r2, r3, #29
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b008      	add	sp, #32
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40007000 	.word	0x40007000
 8002a6c:	00001388 	.word	0x00001388
 8002a70:	efffffff 	.word	0xefffffff
 8002a74:	feffffff 	.word	0xfeffffff
 8002a78:	1fc1808c 	.word	0x1fc1808c
 8002a7c:	effefffc 	.word	0xeffefffc

08002a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0e9      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a94:	4b76      	ldr	r3, [pc, #472]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2207      	movs	r2, #7
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d91e      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b73      	ldr	r3, [pc, #460]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	4393      	bics	r3, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ab4:	f7ff f8fa 	bl	8001cac <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002abc:	e009      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abe:	f7ff f8f5 	bl	8001cac <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	4a6a      	ldr	r2, [pc, #424]	; (8002c74 <HAL_RCC_ClockConfig+0x1f4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0ca      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ad2:	4b67      	ldr	r3, [pc, #412]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	4013      	ands	r3, r2
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1ee      	bne.n	8002abe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d015      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2204      	movs	r2, #4
 8002af0:	4013      	ands	r3, r2
 8002af2:	d006      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002af4:	4b60      	ldr	r3, [pc, #384]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002afa:	21e0      	movs	r1, #224	; 0xe0
 8002afc:	01c9      	lsls	r1, r1, #7
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b02:	4b5d      	ldr	r3, [pc, #372]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4a5d      	ldr	r2, [pc, #372]	; (8002c7c <HAL_RCC_ClockConfig+0x1fc>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d057      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b28:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	029b      	lsls	r3, r3, #10
 8002b30:	4013      	ands	r3, r2
 8002b32:	d12b      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e097      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b40:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	049b      	lsls	r3, r3, #18
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d11f      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e08b      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d107      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4013      	ands	r3, r2
 8002b62:	d113      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e07f      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b70:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b74:	2202      	movs	r2, #2
 8002b76:	4013      	ands	r3, r2
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e074      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7e:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e06d      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b8c:	4b3a      	ldr	r3, [pc, #232]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2207      	movs	r2, #7
 8002b92:	4393      	bics	r3, r2
 8002b94:	0019      	movs	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba0:	f7ff f884 	bl	8001cac <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba8:	e009      	b.n	8002bbe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002baa:	f7ff f87f 	bl	8001cac <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <HAL_RCC_ClockConfig+0x1f4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e054      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2238      	movs	r2, #56	; 0x38
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1ec      	bne.n	8002baa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d21e      	bcs.n	8002c1c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2207      	movs	r2, #7
 8002be4:	4393      	bics	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bf0:	f7ff f85c 	bl	8001cac <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfa:	f7ff f857 	bl	8001cac <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	4a1b      	ldr	r2, [pc, #108]	; (8002c74 <HAL_RCC_ClockConfig+0x1f4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e02c      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2207      	movs	r2, #7
 8002c14:	4013      	ands	r3, r2
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1ee      	bne.n	8002bfa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2204      	movs	r2, #4
 8002c22:	4013      	ands	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <HAL_RCC_ClockConfig+0x200>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	0019      	movs	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c3a:	f000 f829 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c3e:	0001      	movs	r1, r0
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	220f      	movs	r2, #15
 8002c48:	401a      	ands	r2, r3
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <HAL_RCC_ClockConfig+0x204>)
 8002c4c:	0092      	lsls	r2, r2, #2
 8002c4e:	58d3      	ldr	r3, [r2, r3]
 8002c50:	221f      	movs	r2, #31
 8002c52:	4013      	ands	r3, r2
 8002c54:	000a      	movs	r2, r1
 8002c56:	40da      	lsrs	r2, r3
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x208>)
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_ClockConfig+0x20c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7fe ffc7 	bl	8001bf4 <HAL_InitTick>
 8002c66:	0003      	movs	r3, r0
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b004      	add	sp, #16
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40022000 	.word	0x40022000
 8002c74:	00001388 	.word	0x00001388
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	fffff0ff 	.word	0xfffff0ff
 8002c80:	ffff8fff 	.word	0xffff8fff
 8002c84:	08009710 	.word	0x08009710
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	2000001c 	.word	0x2000001c

08002c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c96:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2238      	movs	r2, #56	; 0x38
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d10f      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ca0:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0adb      	lsrs	r3, r3, #11
 8002ca6:	2207      	movs	r2, #7
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2201      	movs	r2, #1
 8002cac:	409a      	lsls	r2, r3
 8002cae:	0013      	movs	r3, r2
 8002cb0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002cb2:	6839      	ldr	r1, [r7, #0]
 8002cb4:	4835      	ldr	r0, [pc, #212]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cb6:	f7fd fa3b 	bl	8000130 <__udivsi3>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	e05d      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2238      	movs	r2, #56	; 0x38
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d102      	bne.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ccc:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	e054      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2238      	movs	r2, #56	; 0x38
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d138      	bne.n	8002d50 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002cde:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce8:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	2207      	movs	r2, #7
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	4823      	ldr	r0, [pc, #140]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d00:	f7fd fa16 	bl	8000130 <__udivsi3>
 8002d04:	0003      	movs	r3, r0
 8002d06:	0019      	movs	r1, r3
 8002d08:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	227f      	movs	r2, #127	; 0x7f
 8002d10:	4013      	ands	r3, r2
 8002d12:	434b      	muls	r3, r1
 8002d14:	617b      	str	r3, [r7, #20]
        break;
 8002d16:	e00d      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	481c      	ldr	r0, [pc, #112]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d1c:	f7fd fa08 	bl	8000130 <__udivsi3>
 8002d20:	0003      	movs	r3, r0
 8002d22:	0019      	movs	r1, r3
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	227f      	movs	r2, #127	; 0x7f
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	434b      	muls	r3, r1
 8002d30:	617b      	str	r3, [r7, #20]
        break;
 8002d32:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d34:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	0f5b      	lsrs	r3, r3, #29
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	3301      	adds	r3, #1
 8002d40:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	6978      	ldr	r0, [r7, #20]
 8002d46:	f7fd f9f3 	bl	8000130 <__udivsi3>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	e015      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d50:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2238      	movs	r2, #56	; 0x38
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d103      	bne.n	8002d64 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2238      	movs	r2, #56	; 0x38
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b18      	cmp	r3, #24
 8002d6e:	d103      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d70:	23fa      	movs	r3, #250	; 0xfa
 8002d72:	01db      	lsls	r3, r3, #7
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	e001      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d7c:	693b      	ldr	r3, [r7, #16]
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b006      	add	sp, #24
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	00f42400 	.word	0x00f42400

08002d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b02      	ldr	r3, [pc, #8]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000000 	.word	0x20000000

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b5b0      	push	{r4, r5, r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002da8:	f7ff fff2 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dac:	0004      	movs	r4, r0
 8002dae:	f7ff fb4b 	bl	8002448 <LL_RCC_GetAPB1Prescaler>
 8002db2:	0003      	movs	r3, r0
 8002db4:	0b1a      	lsrs	r2, r3, #12
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002db8:	0092      	lsls	r2, r2, #2
 8002dba:	58d3      	ldr	r3, [r2, r3]
 8002dbc:	221f      	movs	r2, #31
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	40dc      	lsrs	r4, r3
 8002dc2:	0023      	movs	r3, r4
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	08009750 	.word	0x08009750

08002dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002dd8:	2313      	movs	r3, #19
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002de0:	2312      	movs	r3, #18
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	4013      	ands	r3, r2
 8002df2:	d100      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002df4:	e0a3      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df6:	2011      	movs	r0, #17
 8002df8:	183b      	adds	r3, r7, r0
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b86      	ldr	r3, [pc, #536]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	055b      	lsls	r3, r3, #21
 8002e06:	4013      	ands	r3, r2
 8002e08:	d110      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	4b83      	ldr	r3, [pc, #524]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e0e:	4b82      	ldr	r3, [pc, #520]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	0549      	lsls	r1, r1, #21
 8002e14:	430a      	orrs	r2, r1
 8002e16:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e18:	4b7f      	ldr	r3, [pc, #508]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	055b      	lsls	r3, r3, #21
 8002e20:	4013      	ands	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	183b      	adds	r3, r7, r0
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2c:	4b7b      	ldr	r3, [pc, #492]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b7a      	ldr	r3, [pc, #488]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	0049      	lsls	r1, r1, #1
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e3a:	f7fe ff37 	bl	8001cac <HAL_GetTick>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e42:	e00b      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e44:	f7fe ff32 	bl	8001cac <HAL_GetTick>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d904      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e52:	2313      	movs	r3, #19
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2203      	movs	r2, #3
 8002e58:	701a      	strb	r2, [r3, #0]
        break;
 8002e5a:	e005      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e5c:	4b6f      	ldr	r3, [pc, #444]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4013      	ands	r3, r2
 8002e66:	d0ed      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e68:	2313      	movs	r3, #19
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d154      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e72:	4b69      	ldr	r3, [pc, #420]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e76:	23c0      	movs	r3, #192	; 0xc0
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d019      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d014      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e8e:	4b62      	ldr	r3, [pc, #392]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	4a63      	ldr	r2, [pc, #396]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e98:	4b5f      	ldr	r3, [pc, #380]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e9c:	4b5e      	ldr	r3, [pc, #376]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	0249      	lsls	r1, r1, #9
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea6:	4b5c      	ldr	r3, [pc, #368]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002eaa:	4b5b      	ldr	r3, [pc, #364]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002eac:	495d      	ldr	r1, [pc, #372]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002eae:	400a      	ands	r2, r1
 8002eb0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eb2:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d016      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fef4 	bl	8001cac <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec8:	e00c      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fe feef 	bl	8001cac <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	4a54      	ldr	r2, [pc, #336]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d904      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002eda:	2313      	movs	r3, #19
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	2203      	movs	r2, #3
 8002ee0:	701a      	strb	r2, [r3, #0]
            break;
 8002ee2:	e004      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d0ed      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002eee:	2313      	movs	r3, #19
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef8:	4b47      	ldr	r3, [pc, #284]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	4a48      	ldr	r2, [pc, #288]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	4b44      	ldr	r3, [pc, #272]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f0c:	e00c      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f0e:	2312      	movs	r3, #18
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2213      	movs	r2, #19
 8002f14:	18ba      	adds	r2, r7, r2
 8002f16:	7812      	ldrb	r2, [r2, #0]
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e005      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	2312      	movs	r3, #18
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	2213      	movs	r2, #19
 8002f22:	18ba      	adds	r2, r7, r2
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f28:	2311      	movs	r3, #17
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d105      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f32:	4b39      	ldr	r3, [pc, #228]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f36:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f38:	493c      	ldr	r1, [pc, #240]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2201      	movs	r2, #1
 8002f44:	4013      	ands	r3, r2
 8002f46:	d009      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f48:	4b33      	ldr	r3, [pc, #204]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	4393      	bics	r3, r2
 8002f50:	0019      	movs	r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4b30      	ldr	r3, [pc, #192]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2202      	movs	r2, #2
 8002f62:	4013      	ands	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f66:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	4393      	bics	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4b28      	ldr	r3, [pc, #160]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f76:	430a      	orrs	r2, r1
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	4013      	ands	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f84:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	4b21      	ldr	r3, [pc, #132]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	01db      	lsls	r3, r3, #7
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d015      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	0899      	lsrs	r1, r3, #2
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	05db      	lsls	r3, r3, #23
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d106      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fc8:	2180      	movs	r1, #128	; 0x80
 8002fca:	0249      	lsls	r1, r1, #9
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d016      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fec:	430a      	orrs	r2, r1
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	01db      	lsls	r3, r3, #7
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d106      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	0249      	lsls	r1, r1, #9
 8003006:	430a      	orrs	r2, r1
 8003008:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800300a:	2312      	movs	r3, #18
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	781b      	ldrb	r3, [r3, #0]
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	b006      	add	sp, #24
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	40007000 	.word	0x40007000
 8003020:	fffffcff 	.word	0xfffffcff
 8003024:	fffeffff 	.word	0xfffeffff
 8003028:	00001388 	.word	0x00001388
 800302c:	efffffff 	.word	0xefffffff
 8003030:	ffffcfff 	.word	0xffffcfff
 8003034:	ffff3fff 	.word	0xffff3fff

08003038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e04a      	b.n	80030e0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223d      	movs	r2, #61	; 0x3d
 800304e:	5c9b      	ldrb	r3, [r3, r2]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d107      	bne.n	8003066 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	223c      	movs	r2, #60	; 0x3c
 800305a:	2100      	movs	r1, #0
 800305c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0018      	movs	r0, r3
 8003062:	f7fd ffbb 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	223d      	movs	r2, #61	; 0x3d
 800306a:	2102      	movs	r1, #2
 800306c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	0019      	movs	r1, r3
 8003078:	0010      	movs	r0, r2
 800307a:	f000 fc6d 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2248      	movs	r2, #72	; 0x48
 8003082:	2101      	movs	r1, #1
 8003084:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	223e      	movs	r2, #62	; 0x3e
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	223f      	movs	r2, #63	; 0x3f
 8003092:	2101      	movs	r1, #1
 8003094:	5499      	strb	r1, [r3, r2]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2240      	movs	r2, #64	; 0x40
 800309a:	2101      	movs	r1, #1
 800309c:	5499      	strb	r1, [r3, r2]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2241      	movs	r2, #65	; 0x41
 80030a2:	2101      	movs	r1, #1
 80030a4:	5499      	strb	r1, [r3, r2]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2242      	movs	r2, #66	; 0x42
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2243      	movs	r2, #67	; 0x43
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2244      	movs	r2, #68	; 0x44
 80030ba:	2101      	movs	r1, #1
 80030bc:	5499      	strb	r1, [r3, r2]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2245      	movs	r2, #69	; 0x45
 80030c2:	2101      	movs	r1, #1
 80030c4:	5499      	strb	r1, [r3, r2]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2246      	movs	r2, #70	; 0x46
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2247      	movs	r2, #71	; 0x47
 80030d2:	2101      	movs	r1, #1
 80030d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	223d      	movs	r2, #61	; 0x3d
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e04a      	b.n	8003190 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	223d      	movs	r2, #61	; 0x3d
 80030fe:	5c9b      	ldrb	r3, [r3, r2]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	223c      	movs	r2, #60	; 0x3c
 800310a:	2100      	movs	r1, #0
 800310c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 f841 	bl	8003198 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	223d      	movs	r2, #61	; 0x3d
 800311a:	2102      	movs	r1, #2
 800311c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	0019      	movs	r1, r3
 8003128:	0010      	movs	r0, r2
 800312a:	f000 fc15 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2248      	movs	r2, #72	; 0x48
 8003132:	2101      	movs	r1, #1
 8003134:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	223e      	movs	r2, #62	; 0x3e
 800313a:	2101      	movs	r1, #1
 800313c:	5499      	strb	r1, [r3, r2]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	223f      	movs	r2, #63	; 0x3f
 8003142:	2101      	movs	r1, #1
 8003144:	5499      	strb	r1, [r3, r2]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2240      	movs	r2, #64	; 0x40
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2241      	movs	r2, #65	; 0x41
 8003152:	2101      	movs	r1, #1
 8003154:	5499      	strb	r1, [r3, r2]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2242      	movs	r2, #66	; 0x42
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2243      	movs	r2, #67	; 0x43
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2244      	movs	r2, #68	; 0x44
 800316a:	2101      	movs	r1, #1
 800316c:	5499      	strb	r1, [r3, r2]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2245      	movs	r2, #69	; 0x45
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2246      	movs	r2, #70	; 0x46
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2247      	movs	r2, #71	; 0x47
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	223d      	movs	r2, #61	; 0x3d
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e090      	b.n	80032de <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	223d      	movs	r2, #61	; 0x3d
 80031c0:	5c9b      	ldrb	r3, [r3, r2]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d107      	bne.n	80031d8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	223c      	movs	r2, #60	; 0x3c
 80031cc:	2100      	movs	r1, #0
 80031ce:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f7fd fe6e 	bl	8000eb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	223d      	movs	r2, #61	; 0x3d
 80031dc:	2102      	movs	r1, #2
 80031de:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	493f      	ldr	r1, [pc, #252]	; (80032e8 <HAL_TIM_Encoder_Init+0x140>)
 80031ec:	400a      	ands	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	0019      	movs	r1, r3
 80031fa:	0010      	movs	r0, r2
 80031fc:	f000 fbac 	bl	8003958 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4a31      	ldr	r2, [pc, #196]	; (80032ec <HAL_TIM_Encoder_Init+0x144>)
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	4313      	orrs	r3, r2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <HAL_TIM_Encoder_Init+0x148>)
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4a2b      	ldr	r2, [pc, #172]	; (80032f4 <HAL_TIM_Encoder_Init+0x14c>)
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	4313      	orrs	r3, r2
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	011a      	lsls	r2, r3, #4
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	031b      	lsls	r3, r3, #12
 800326a:	4313      	orrs	r3, r2
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2222      	movs	r2, #34	; 0x22
 8003276:	4393      	bics	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2288      	movs	r2, #136	; 0x88
 800327e:	4393      	bics	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	4313      	orrs	r3, r2
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2248      	movs	r2, #72	; 0x48
 80032b0:	2101      	movs	r1, #1
 80032b2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	223e      	movs	r2, #62	; 0x3e
 80032b8:	2101      	movs	r1, #1
 80032ba:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	223f      	movs	r2, #63	; 0x3f
 80032c0:	2101      	movs	r1, #1
 80032c2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2244      	movs	r2, #68	; 0x44
 80032c8:	2101      	movs	r1, #1
 80032ca:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2245      	movs	r2, #69	; 0x45
 80032d0:	2101      	movs	r1, #1
 80032d2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	223d      	movs	r2, #61	; 0x3d
 80032d8:	2101      	movs	r1, #1
 80032da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b006      	add	sp, #24
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	fffebff8 	.word	0xfffebff8
 80032ec:	fffffcfc 	.word	0xfffffcfc
 80032f0:	fffff3f3 	.word	0xfffff3f3
 80032f4:	ffff0f0f 	.word	0xffff0f0f

080032f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2202      	movs	r2, #2
 8003308:	4013      	ands	r3, r2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d124      	bne.n	8003358 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2202      	movs	r2, #2
 8003316:	4013      	ands	r3, r2
 8003318:	2b02      	cmp	r3, #2
 800331a:	d11d      	bne.n	8003358 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2203      	movs	r2, #3
 8003322:	4252      	negs	r2, r2
 8003324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2203      	movs	r2, #3
 8003334:	4013      	ands	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	0018      	movs	r0, r3
 800333c:	f000 faf4 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 8003340:	e007      	b.n	8003352 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	0018      	movs	r0, r3
 8003346:	f000 fae7 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 faf3 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2204      	movs	r2, #4
 8003360:	4013      	ands	r3, r2
 8003362:	2b04      	cmp	r3, #4
 8003364:	d125      	bne.n	80033b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2204      	movs	r2, #4
 800336e:	4013      	ands	r3, r2
 8003370:	2b04      	cmp	r3, #4
 8003372:	d11e      	bne.n	80033b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2205      	movs	r2, #5
 800337a:	4252      	negs	r2, r2
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	23c0      	movs	r3, #192	; 0xc0
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4013      	ands	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 fac7 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 800339a:	e007      	b.n	80033ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 faba 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 fac6 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2208      	movs	r2, #8
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d124      	bne.n	800340a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2208      	movs	r2, #8
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d11d      	bne.n	800340a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2209      	movs	r2, #9
 80033d4:	4252      	negs	r2, r2
 80033d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2204      	movs	r2, #4
 80033dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	2203      	movs	r2, #3
 80033e6:	4013      	ands	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f000 fa9b 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 80033f2:	e007      	b.n	8003404 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 fa8e 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 fa9a 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2210      	movs	r2, #16
 8003412:	4013      	ands	r3, r2
 8003414:	2b10      	cmp	r3, #16
 8003416:	d125      	bne.n	8003464 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2210      	movs	r2, #16
 8003420:	4013      	ands	r3, r2
 8003422:	2b10      	cmp	r3, #16
 8003424:	d11e      	bne.n	8003464 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2211      	movs	r2, #17
 800342c:	4252      	negs	r2, r2
 800342e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2208      	movs	r2, #8
 8003434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	23c0      	movs	r3, #192	; 0xc0
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4013      	ands	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	0018      	movs	r0, r3
 8003448:	f000 fa6e 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 800344c:	e007      	b.n	800345e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 fa61 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f000 fa6d 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10f      	bne.n	8003492 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	4013      	ands	r3, r2
 800347c:	2b01      	cmp	r3, #1
 800347e:	d108      	bne.n	8003492 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2202      	movs	r2, #2
 8003486:	4252      	negs	r2, r2
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	0018      	movs	r0, r3
 800348e:	f000 fa3b 	bl	8003908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	4013      	ands	r3, r2
 800349c:	2b80      	cmp	r3, #128	; 0x80
 800349e:	d10f      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d108      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2281      	movs	r2, #129	; 0x81
 80034b4:	4252      	negs	r2, r2
 80034b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 ff38 	bl	8004330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	401a      	ands	r2, r3
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d10e      	bne.n	80034f2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	4013      	ands	r3, r2
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d107      	bne.n	80034f2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <HAL_TIM_IRQHandler+0x260>)
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f000 ff27 	bl	8004340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2240      	movs	r2, #64	; 0x40
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	d10f      	bne.n	8003520 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	4013      	ands	r3, r2
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d108      	bne.n	8003520 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2241      	movs	r2, #65	; 0x41
 8003514:	4252      	negs	r2, r2
 8003516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 fa14 	bl	8003948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2220      	movs	r2, #32
 8003528:	4013      	ands	r3, r2
 800352a:	2b20      	cmp	r3, #32
 800352c:	d10f      	bne.n	800354e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	4013      	ands	r3, r2
 8003538:	2b20      	cmp	r3, #32
 800353a:	d108      	bne.n	800354e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2221      	movs	r2, #33	; 0x21
 8003542:	4252      	negs	r2, r2
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f000 fee9 	bl	8004320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b002      	add	sp, #8
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	fffffeff 	.word	0xfffffeff

0800355c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2317      	movs	r3, #23
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	223c      	movs	r2, #60	; 0x3c
 8003574:	5c9b      	ldrb	r3, [r3, r2]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_TIM_PWM_ConfigChannel+0x22>
 800357a:	2302      	movs	r3, #2
 800357c:	e0e5      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	223c      	movs	r2, #60	; 0x3c
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b14      	cmp	r3, #20
 800358a:	d900      	bls.n	800358e <HAL_TIM_PWM_ConfigChannel+0x32>
 800358c:	e0d1      	b.n	8003732 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	009a      	lsls	r2, r3, #2
 8003592:	4b70      	ldr	r3, [pc, #448]	; (8003754 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003594:	18d3      	adds	r3, r2, r3
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	0011      	movs	r1, r2
 80035a2:	0018      	movs	r0, r3
 80035a4:	f000 fa4e 	bl	8003a44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2108      	movs	r1, #8
 80035b4:	430a      	orrs	r2, r1
 80035b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2104      	movs	r1, #4
 80035c4:	438a      	bics	r2, r1
 80035c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6999      	ldr	r1, [r3, #24]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	619a      	str	r2, [r3, #24]
      break;
 80035da:	e0af      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	0011      	movs	r1, r2
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 fab7 	bl	8003b58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2180      	movs	r1, #128	; 0x80
 80035f6:	0109      	lsls	r1, r1, #4
 80035f8:	430a      	orrs	r2, r1
 80035fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4954      	ldr	r1, [pc, #336]	; (8003758 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003608:	400a      	ands	r2, r1
 800360a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6999      	ldr	r1, [r3, #24]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	021a      	lsls	r2, r3, #8
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	619a      	str	r2, [r3, #24]
      break;
 8003620:	e08c      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	0011      	movs	r1, r2
 800362a:	0018      	movs	r0, r3
 800362c:	f000 fb18 	bl	8003c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2108      	movs	r1, #8
 800363c:	430a      	orrs	r2, r1
 800363e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69da      	ldr	r2, [r3, #28]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2104      	movs	r1, #4
 800364c:	438a      	bics	r2, r1
 800364e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69d9      	ldr	r1, [r3, #28]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	61da      	str	r2, [r3, #28]
      break;
 8003662:	e06b      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f000 fb7f 	bl	8003d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	0109      	lsls	r1, r1, #4
 8003680:	430a      	orrs	r2, r1
 8003682:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4932      	ldr	r1, [pc, #200]	; (8003758 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003690:	400a      	ands	r2, r1
 8003692:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69d9      	ldr	r1, [r3, #28]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	021a      	lsls	r2, r3, #8
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	61da      	str	r2, [r3, #28]
      break;
 80036a8:	e048      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	0011      	movs	r1, r2
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 fbc6 	bl	8003e44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2108      	movs	r1, #8
 80036c4:	430a      	orrs	r2, r1
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2104      	movs	r1, #4
 80036d4:	438a      	bics	r2, r1
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036ea:	e027      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	0011      	movs	r1, r2
 80036f4:	0018      	movs	r0, r3
 80036f6:	f000 fc05 	bl	8003f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	0109      	lsls	r1, r1, #4
 8003708:	430a      	orrs	r2, r1
 800370a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4910      	ldr	r1, [pc, #64]	; (8003758 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003718:	400a      	ands	r2, r1
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003730:	e004      	b.n	800373c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003732:	2317      	movs	r3, #23
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
      break;
 800373a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	223c      	movs	r2, #60	; 0x3c
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]

  return status;
 8003744:	2317      	movs	r3, #23
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b006      	add	sp, #24
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	08009770 	.word	0x08009770
 8003758:	fffffbff 	.word	0xfffffbff

0800375c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	230f      	movs	r3, #15
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	223c      	movs	r2, #60	; 0x3c
 8003772:	5c9b      	ldrb	r3, [r3, r2]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIM_ConfigClockSource+0x20>
 8003778:	2302      	movs	r3, #2
 800377a:	e0bc      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x19a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	223c      	movs	r2, #60	; 0x3c
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	223d      	movs	r2, #61	; 0x3d
 8003788:	2102      	movs	r1, #2
 800378a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4a5a      	ldr	r2, [pc, #360]	; (8003900 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003798:	4013      	ands	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4a59      	ldr	r2, [pc, #356]	; (8003904 <HAL_TIM_ConfigClockSource+0x1a8>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2280      	movs	r2, #128	; 0x80
 80037b2:	0192      	lsls	r2, r2, #6
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d040      	beq.n	800383a <HAL_TIM_ConfigClockSource+0xde>
 80037b8:	2280      	movs	r2, #128	; 0x80
 80037ba:	0192      	lsls	r2, r2, #6
 80037bc:	4293      	cmp	r3, r2
 80037be:	d900      	bls.n	80037c2 <HAL_TIM_ConfigClockSource+0x66>
 80037c0:	e088      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x178>
 80037c2:	2280      	movs	r2, #128	; 0x80
 80037c4:	0152      	lsls	r2, r2, #5
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d100      	bne.n	80037cc <HAL_TIM_ConfigClockSource+0x70>
 80037ca:	e088      	b.n	80038de <HAL_TIM_ConfigClockSource+0x182>
 80037cc:	2280      	movs	r2, #128	; 0x80
 80037ce:	0152      	lsls	r2, r2, #5
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d900      	bls.n	80037d6 <HAL_TIM_ConfigClockSource+0x7a>
 80037d4:	e07e      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x178>
 80037d6:	2b70      	cmp	r3, #112	; 0x70
 80037d8:	d018      	beq.n	800380c <HAL_TIM_ConfigClockSource+0xb0>
 80037da:	d900      	bls.n	80037de <HAL_TIM_ConfigClockSource+0x82>
 80037dc:	e07a      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x178>
 80037de:	2b60      	cmp	r3, #96	; 0x60
 80037e0:	d04f      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0x126>
 80037e2:	d900      	bls.n	80037e6 <HAL_TIM_ConfigClockSource+0x8a>
 80037e4:	e076      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x178>
 80037e6:	2b50      	cmp	r3, #80	; 0x50
 80037e8:	d03b      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x106>
 80037ea:	d900      	bls.n	80037ee <HAL_TIM_ConfigClockSource+0x92>
 80037ec:	e072      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x178>
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d057      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x146>
 80037f2:	d900      	bls.n	80037f6 <HAL_TIM_ConfigClockSource+0x9a>
 80037f4:	e06e      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x178>
 80037f6:	2b30      	cmp	r3, #48	; 0x30
 80037f8:	d063      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x166>
 80037fa:	d86b      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x178>
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d060      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x166>
 8003800:	d868      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x178>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d05d      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x166>
 8003806:	2b10      	cmp	r3, #16
 8003808:	d05b      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x166>
 800380a:	e063      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800381c:	f000 fc52 	bl	80040c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2277      	movs	r2, #119	; 0x77
 800382c:	4313      	orrs	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	609a      	str	r2, [r3, #8]
      break;
 8003838:	e052      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	f000 fc3b 	bl	80040c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	01c9      	lsls	r1, r1, #7
 800385c:	430a      	orrs	r2, r1
 800385e:	609a      	str	r2, [r3, #8]
      break;
 8003860:	e03e      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	001a      	movs	r2, r3
 8003870:	f000 fbac 	bl	8003fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2150      	movs	r1, #80	; 0x50
 800387a:	0018      	movs	r0, r3
 800387c:	f000 fc06 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 8003880:	e02e      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800388e:	001a      	movs	r2, r3
 8003890:	f000 fbca 	bl	8004028 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2160      	movs	r1, #96	; 0x60
 800389a:	0018      	movs	r0, r3
 800389c:	f000 fbf6 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 80038a0:	e01e      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ae:	001a      	movs	r2, r3
 80038b0:	f000 fb8c 	bl	8003fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2140      	movs	r1, #64	; 0x40
 80038ba:	0018      	movs	r0, r3
 80038bc:	f000 fbe6 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 80038c0:	e00e      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	0019      	movs	r1, r3
 80038cc:	0010      	movs	r0, r2
 80038ce:	f000 fbdd 	bl	800408c <TIM_ITRx_SetConfig>
      break;
 80038d2:	e005      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80038d4:	230f      	movs	r3, #15
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
      break;
 80038dc:	e000      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80038de:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	223d      	movs	r2, #61	; 0x3d
 80038e4:	2101      	movs	r1, #1
 80038e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	223c      	movs	r2, #60	; 0x3c
 80038ec:	2100      	movs	r1, #0
 80038ee:	5499      	strb	r1, [r3, r2]

  return status;
 80038f0:	230f      	movs	r3, #15
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	781b      	ldrb	r3, [r3, #0]
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b004      	add	sp, #16
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	ffceff88 	.word	0xffceff88
 8003904:	ffff00ff 	.word	0xffff00ff

08003908 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b002      	add	sp, #8
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003920:	46c0      	nop			; (mov r8, r8)
 8003922:	46bd      	mov	sp, r7
 8003924:	b002      	add	sp, #8
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b002      	add	sp, #8
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}

08003958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a2f      	ldr	r2, [pc, #188]	; (8003a28 <TIM_Base_SetConfig+0xd0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_Base_SetConfig+0x20>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a2e      	ldr	r2, [pc, #184]	; (8003a2c <TIM_Base_SetConfig+0xd4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d108      	bne.n	800398a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2270      	movs	r2, #112	; 0x70
 800397c:	4393      	bics	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <TIM_Base_SetConfig+0xd0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <TIM_Base_SetConfig+0xd4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00f      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <TIM_Base_SetConfig+0xd8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00b      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <TIM_Base_SetConfig+0xdc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d007      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <TIM_Base_SetConfig+0xe0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d003      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a21      	ldr	r2, [pc, #132]	; (8003a3c <TIM_Base_SetConfig+0xe4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d108      	bne.n	80039cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a20      	ldr	r2, [pc, #128]	; (8003a40 <TIM_Base_SetConfig+0xe8>)
 80039be:	4013      	ands	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2280      	movs	r2, #128	; 0x80
 80039d0:	4393      	bics	r3, r2
 80039d2:	001a      	movs	r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <TIM_Base_SetConfig+0xd0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0xba>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a0d      	ldr	r2, [pc, #52]	; (8003a34 <TIM_Base_SetConfig+0xdc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0xba>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <TIM_Base_SetConfig+0xe0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0xba>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <TIM_Base_SetConfig+0xe4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d103      	bne.n	8003a1a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	615a      	str	r2, [r3, #20]
}
 8003a20:	46c0      	nop			; (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b004      	add	sp, #16
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40002000 	.word	0x40002000
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40014400 	.word	0x40014400
 8003a3c:	40014800 	.word	0x40014800
 8003a40:	fffffcff 	.word	0xfffffcff

08003a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	2201      	movs	r2, #1
 8003a54:	4393      	bics	r3, r2
 8003a56:	001a      	movs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <TIM_OC1_SetConfig+0xf8>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2203      	movs	r2, #3
 8003a7a:	4393      	bics	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	4393      	bics	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a28      	ldr	r2, [pc, #160]	; (8003b40 <TIM_OC1_SetConfig+0xfc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <TIM_OC1_SetConfig+0x76>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <TIM_OC1_SetConfig+0x100>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_OC1_SetConfig+0x76>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <TIM_OC1_SetConfig+0x104>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_OC1_SetConfig+0x76>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a25      	ldr	r2, [pc, #148]	; (8003b4c <TIM_OC1_SetConfig+0x108>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10c      	bne.n	8003ad4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2208      	movs	r2, #8
 8003abe:	4393      	bics	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	4393      	bics	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <TIM_OC1_SetConfig+0xfc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00b      	beq.n	8003af4 <TIM_OC1_SetConfig+0xb0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <TIM_OC1_SetConfig+0x100>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <TIM_OC1_SetConfig+0xb0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <TIM_OC1_SetConfig+0x104>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_OC1_SetConfig+0xb0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <TIM_OC1_SetConfig+0x108>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d111      	bne.n	8003b18 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <TIM_OC1_SetConfig+0x10c>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <TIM_OC1_SetConfig+0x110>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b006      	add	sp, #24
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	fffeff8f 	.word	0xfffeff8f
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40014400 	.word	0x40014400
 8003b4c:	40014800 	.word	0x40014800
 8003b50:	fffffeff 	.word	0xfffffeff
 8003b54:	fffffdff 	.word	0xfffffdff

08003b58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	2210      	movs	r2, #16
 8003b68:	4393      	bics	r3, r2
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4a2e      	ldr	r2, [pc, #184]	; (8003c40 <TIM_OC2_SetConfig+0xe8>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a2d      	ldr	r2, [pc, #180]	; (8003c44 <TIM_OC2_SetConfig+0xec>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	4393      	bics	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <TIM_OC2_SetConfig+0xf0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d10d      	bne.n	8003bd6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	4393      	bics	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2240      	movs	r2, #64	; 0x40
 8003bd2:	4393      	bics	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <TIM_OC2_SetConfig+0xf0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_OC2_SetConfig+0x9e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <TIM_OC2_SetConfig+0xf4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_OC2_SetConfig+0x9e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <TIM_OC2_SetConfig+0xf8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_OC2_SetConfig+0x9e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <TIM_OC2_SetConfig+0xfc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d113      	bne.n	8003c1e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4a17      	ldr	r2, [pc, #92]	; (8003c58 <TIM_OC2_SetConfig+0x100>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <TIM_OC2_SetConfig+0x104>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	621a      	str	r2, [r3, #32]
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b006      	add	sp, #24
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	feff8fff 	.word	0xfeff8fff
 8003c44:	fffffcff 	.word	0xfffffcff
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800
 8003c58:	fffffbff 	.word	0xfffffbff
 8003c5c:	fffff7ff 	.word	0xfffff7ff

08003c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4a35      	ldr	r2, [pc, #212]	; (8003d44 <TIM_OC3_SetConfig+0xe4>)
 8003c70:	401a      	ands	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a2f      	ldr	r2, [pc, #188]	; (8003d48 <TIM_OC3_SetConfig+0xe8>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2203      	movs	r2, #3
 8003c94:	4393      	bics	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <TIM_OC3_SetConfig+0xec>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <TIM_OC3_SetConfig+0xf0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d10d      	bne.n	8003cda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <TIM_OC3_SetConfig+0xf4>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	4a20      	ldr	r2, [pc, #128]	; (8003d58 <TIM_OC3_SetConfig+0xf8>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <TIM_OC3_SetConfig+0xf0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_OC3_SetConfig+0x9a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <TIM_OC3_SetConfig+0xfc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_OC3_SetConfig+0x9a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <TIM_OC3_SetConfig+0x100>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_OC3_SetConfig+0x9a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <TIM_OC3_SetConfig+0x104>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d113      	bne.n	8003d22 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4a1a      	ldr	r2, [pc, #104]	; (8003d68 <TIM_OC3_SetConfig+0x108>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <TIM_OC3_SetConfig+0x10c>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b006      	add	sp, #24
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	fffffeff 	.word	0xfffffeff
 8003d48:	fffeff8f 	.word	0xfffeff8f
 8003d4c:	fffffdff 	.word	0xfffffdff
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	fffff7ff 	.word	0xfffff7ff
 8003d58:	fffffbff 	.word	0xfffffbff
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40014400 	.word	0x40014400
 8003d64:	40014800 	.word	0x40014800
 8003d68:	ffffefff 	.word	0xffffefff
 8003d6c:	ffffdfff 	.word	0xffffdfff

08003d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <TIM_OC4_SetConfig+0xb0>)
 8003d80:	401a      	ands	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <TIM_OC4_SetConfig+0xb4>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <TIM_OC4_SetConfig+0xb8>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <TIM_OC4_SetConfig+0xbc>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	031b      	lsls	r3, r3, #12
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <TIM_OC4_SetConfig+0xc0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00b      	beq.n	8003de8 <TIM_OC4_SetConfig+0x78>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <TIM_OC4_SetConfig+0xc4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_OC4_SetConfig+0x78>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <TIM_OC4_SetConfig+0xc8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_OC4_SetConfig+0x78>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <TIM_OC4_SetConfig+0xcc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d109      	bne.n	8003dfc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <TIM_OC4_SetConfig+0xd0>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b006      	add	sp, #24
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	ffffefff 	.word	0xffffefff
 8003e24:	feff8fff 	.word	0xfeff8fff
 8003e28:	fffffcff 	.word	0xfffffcff
 8003e2c:	ffffdfff 	.word	0xffffdfff
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40014000 	.word	0x40014000
 8003e38:	40014400 	.word	0x40014400
 8003e3c:	40014800 	.word	0x40014800
 8003e40:	ffffbfff 	.word	0xffffbfff

08003e44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4a25      	ldr	r2, [pc, #148]	; (8003ee8 <TIM_OC5_SetConfig+0xa4>)
 8003e54:	401a      	ands	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <TIM_OC5_SetConfig+0xa8>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <TIM_OC5_SetConfig+0xac>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <TIM_OC5_SetConfig+0xb0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00b      	beq.n	8003eb2 <TIM_OC5_SetConfig+0x6e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <TIM_OC5_SetConfig+0xb4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d007      	beq.n	8003eb2 <TIM_OC5_SetConfig+0x6e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a15      	ldr	r2, [pc, #84]	; (8003efc <TIM_OC5_SetConfig+0xb8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d003      	beq.n	8003eb2 <TIM_OC5_SetConfig+0x6e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <TIM_OC5_SetConfig+0xbc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d109      	bne.n	8003ec6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	4a0c      	ldr	r2, [pc, #48]	; (8003ee8 <TIM_OC5_SetConfig+0xa4>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	621a      	str	r2, [r3, #32]
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b006      	add	sp, #24
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	fffeffff 	.word	0xfffeffff
 8003eec:	fffeff8f 	.word	0xfffeff8f
 8003ef0:	fffdffff 	.word	0xfffdffff
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40014400 	.word	0x40014400
 8003f00:	40014800 	.word	0x40014800

08003f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	4a26      	ldr	r2, [pc, #152]	; (8003fac <TIM_OC6_SetConfig+0xa8>)
 8003f14:	401a      	ands	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <TIM_OC6_SetConfig+0xac>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <TIM_OC6_SetConfig+0xb0>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	051b      	lsls	r3, r3, #20
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <TIM_OC6_SetConfig+0xb4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <TIM_OC6_SetConfig+0x70>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <TIM_OC6_SetConfig+0xb8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d007      	beq.n	8003f74 <TIM_OC6_SetConfig+0x70>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <TIM_OC6_SetConfig+0xbc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_OC6_SetConfig+0x70>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <TIM_OC6_SetConfig+0xc0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d109      	bne.n	8003f88 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <TIM_OC6_SetConfig+0xc4>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	029b      	lsls	r3, r3, #10
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b006      	add	sp, #24
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	ffefffff 	.word	0xffefffff
 8003fb0:	feff8fff 	.word	0xfeff8fff
 8003fb4:	ffdfffff 	.word	0xffdfffff
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800
 8003fc8:	fffbffff 	.word	0xfffbffff

08003fcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4393      	bics	r3, r2
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	22f0      	movs	r2, #240	; 0xf0
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	220a      	movs	r2, #10
 8004008:	4393      	bics	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b006      	add	sp, #24
 8004026:	bd80      	pop	{r7, pc}

08004028 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	2210      	movs	r2, #16
 800403a:	4393      	bics	r3, r2
 800403c:	001a      	movs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	4a0d      	ldr	r2, [pc, #52]	; (8004088 <TIM_TI2_ConfigInputStage+0x60>)
 8004052:	4013      	ands	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	031b      	lsls	r3, r3, #12
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	22a0      	movs	r2, #160	; 0xa0
 8004064:	4393      	bics	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	46bd      	mov	sp, r7
 8004082:	b006      	add	sp, #24
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	ffff0fff 	.word	0xffff0fff

0800408c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <TIM_ITRx_SetConfig+0x34>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	2207      	movs	r2, #7
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	609a      	str	r2, [r3, #8]
}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b004      	add	sp, #16
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	ffcfff8f 	.word	0xffcfff8f

080040c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <TIM_ETR_SetConfig+0x3c>)
 80040dc:	4013      	ands	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	609a      	str	r2, [r3, #8]
}
 80040f8:	46c0      	nop			; (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b006      	add	sp, #24
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	ffff00ff 	.word	0xffff00ff

08004104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	223c      	movs	r2, #60	; 0x3c
 8004112:	5c9b      	ldrb	r3, [r3, r2]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004118:	2302      	movs	r3, #2
 800411a:	e04f      	b.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	223c      	movs	r2, #60	; 0x3c
 8004120:	2101      	movs	r1, #1
 8004122:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	223d      	movs	r2, #61	; 0x3d
 8004128:	2102      	movs	r1, #2
 800412a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d108      	bne.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4a1f      	ldr	r2, [pc, #124]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800414a:	4013      	ands	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2270      	movs	r2, #112	; 0x70
 800415c:	4393      	bics	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d009      	beq.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a12      	ldr	r2, [pc, #72]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a11      	ldr	r2, [pc, #68]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d10c      	bne.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2280      	movs	r2, #128	; 0x80
 8004194:	4393      	bics	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	223d      	movs	r2, #61	; 0x3d
 80041ae:	2101      	movs	r1, #1
 80041b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	223c      	movs	r2, #60	; 0x3c
 80041b6:	2100      	movs	r1, #0
 80041b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b004      	add	sp, #16
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	ff0fffff 	.word	0xff0fffff
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40014000 	.word	0x40014000

080041d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	223c      	movs	r2, #60	; 0x3c
 80041e6:	5c9b      	ldrb	r3, [r3, r2]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e079      	b.n	80042e4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	223c      	movs	r2, #60	; 0x3c
 80041f4:	2101      	movs	r1, #1
 80041f6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	22ff      	movs	r2, #255	; 0xff
 80041fc:	4393      	bics	r3, r2
 80041fe:	001a      	movs	r2, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a38      	ldr	r2, [pc, #224]	; (80042ec <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800420c:	401a      	ands	r2, r3
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a35      	ldr	r2, [pc, #212]	; (80042f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800421a:	401a      	ands	r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4a33      	ldr	r2, [pc, #204]	; (80042f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004228:	401a      	ands	r2, r3
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a30      	ldr	r2, [pc, #192]	; (80042f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004236:	401a      	ands	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4a2e      	ldr	r2, [pc, #184]	; (80042fc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004244:	401a      	ands	r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004252:	401a      	ands	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a29      	ldr	r2, [pc, #164]	; (8004304 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004260:	401a      	ands	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a25      	ldr	r2, [pc, #148]	; (8004308 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d106      	bne.n	8004284 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a24      	ldr	r2, [pc, #144]	; (800430c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800427a:	401a      	ands	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d121      	bne.n	80042d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4a1f      	ldr	r2, [pc, #124]	; (8004310 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004292:	401a      	ands	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	051b      	lsls	r3, r3, #20
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80042a2:	401a      	ands	r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80042b0:	401a      	ands	r2, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d106      	bne.n	80042d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80042c8:	401a      	ands	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	223c      	movs	r2, #60	; 0x3c
 80042de:	2100      	movs	r1, #0
 80042e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	fffffcff 	.word	0xfffffcff
 80042f0:	fffffbff 	.word	0xfffffbff
 80042f4:	fffff7ff 	.word	0xfffff7ff
 80042f8:	ffffefff 	.word	0xffffefff
 80042fc:	ffffdfff 	.word	0xffffdfff
 8004300:	ffffbfff 	.word	0xffffbfff
 8004304:	fff0ffff 	.word	0xfff0ffff
 8004308:	40012c00 	.word	0x40012c00
 800430c:	efffffff 	.word	0xefffffff
 8004310:	ff0fffff 	.word	0xff0fffff
 8004314:	feffffff 	.word	0xfeffffff
 8004318:	fdffffff 	.word	0xfdffffff
 800431c:	dfffffff 	.word	0xdfffffff

08004320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	b002      	add	sp, #8
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e046      	b.n	80043f0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2288      	movs	r2, #136	; 0x88
 8004366:	589b      	ldr	r3, [r3, r2]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d107      	bne.n	800437c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2284      	movs	r2, #132	; 0x84
 8004370:	2100      	movs	r1, #0
 8004372:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	0018      	movs	r0, r3
 8004378:	f7fc ffb2 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2288      	movs	r2, #136	; 0x88
 8004380:	2124      	movs	r1, #36	; 0x24
 8004382:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2101      	movs	r1, #1
 8004390:	438a      	bics	r2, r1
 8004392:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0018      	movs	r0, r3
 8004398:	f000 fc66 	bl	8004c68 <UART_SetConfig>
 800439c:	0003      	movs	r3, r0
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e024      	b.n	80043f0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f000 fdfd 	bl	8004fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	490d      	ldr	r1, [pc, #52]	; (80043f8 <HAL_UART_Init+0xa8>)
 80043c2:	400a      	ands	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	212a      	movs	r1, #42	; 0x2a
 80043d2:	438a      	bics	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2101      	movs	r1, #1
 80043e2:	430a      	orrs	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f000 fe95 	bl	8005118 <UART_CheckIdleState>
 80043ee:	0003      	movs	r3, r0
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b002      	add	sp, #8
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	ffffb7ff 	.word	0xffffb7ff

080043fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	; 0x28
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	1dbb      	adds	r3, r7, #6
 800440a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2288      	movs	r2, #136	; 0x88
 8004410:	589b      	ldr	r3, [r3, r2]
 8004412:	2b20      	cmp	r3, #32
 8004414:	d000      	beq.n	8004418 <HAL_UART_Transmit+0x1c>
 8004416:	e088      	b.n	800452a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_UART_Transmit+0x2a>
 800441e:	1dbb      	adds	r3, r7, #6
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e080      	b.n	800452c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	015b      	lsls	r3, r3, #5
 8004432:	429a      	cmp	r2, r3
 8004434:	d109      	bne.n	800444a <HAL_UART_Transmit+0x4e>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d105      	bne.n	800444a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2201      	movs	r2, #1
 8004442:	4013      	ands	r3, r2
 8004444:	d001      	beq.n	800444a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e070      	b.n	800452c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2290      	movs	r2, #144	; 0x90
 800444e:	2100      	movs	r1, #0
 8004450:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2288      	movs	r2, #136	; 0x88
 8004456:	2121      	movs	r1, #33	; 0x21
 8004458:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800445a:	f7fd fc27 	bl	8001cac <HAL_GetTick>
 800445e:	0003      	movs	r3, r0
 8004460:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1dba      	adds	r2, r7, #6
 8004466:	2154      	movs	r1, #84	; 0x54
 8004468:	8812      	ldrh	r2, [r2, #0]
 800446a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1dba      	adds	r2, r7, #6
 8004470:	2156      	movs	r1, #86	; 0x56
 8004472:	8812      	ldrh	r2, [r2, #0]
 8004474:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	015b      	lsls	r3, r3, #5
 800447e:	429a      	cmp	r2, r3
 8004480:	d108      	bne.n	8004494 <HAL_UART_Transmit+0x98>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e003      	b.n	800449c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800449c:	e02c      	b.n	80044f8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	0013      	movs	r3, r2
 80044a8:	2200      	movs	r2, #0
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	f000 fe82 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e039      	b.n	800452c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	001a      	movs	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	05d2      	lsls	r2, r2, #23
 80044ca:	0dd2      	lsrs	r2, r2, #23
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	3302      	adds	r3, #2
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	e007      	b.n	80044e6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	3301      	adds	r3, #1
 80044e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2256      	movs	r2, #86	; 0x56
 80044ea:	5a9b      	ldrh	r3, [r3, r2]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b299      	uxth	r1, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2256      	movs	r2, #86	; 0x56
 80044f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2256      	movs	r2, #86	; 0x56
 80044fc:	5a9b      	ldrh	r3, [r3, r2]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1cc      	bne.n	800449e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	0013      	movs	r3, r2
 800450e:	2200      	movs	r2, #0
 8004510:	2140      	movs	r1, #64	; 0x40
 8004512:	f000 fe4f 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 8004516:	1e03      	subs	r3, r0, #0
 8004518:	d001      	beq.n	800451e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e006      	b.n	800452c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2288      	movs	r2, #136	; 0x88
 8004522:	2120      	movs	r1, #32
 8004524:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e000      	b.n	800452c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800452a:	2302      	movs	r3, #2
  }
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b008      	add	sp, #32
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	228c      	movs	r2, #140	; 0x8c
 8004546:	589b      	ldr	r3, [r3, r2]
 8004548:	2b20      	cmp	r3, #32
 800454a:	d145      	bne.n	80045d8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_UART_Receive_IT+0x26>
 8004552:	1dbb      	adds	r3, r7, #6
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e03d      	b.n	80045da <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	015b      	lsls	r3, r3, #5
 8004566:	429a      	cmp	r2, r3
 8004568:	d109      	bne.n	800457e <HAL_UART_Receive_IT+0x4a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d105      	bne.n	800457e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2201      	movs	r2, #1
 8004576:	4013      	ands	r3, r2
 8004578:	d001      	beq.n	800457e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e02d      	b.n	80045da <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	4013      	ands	r3, r2
 8004590:	d019      	beq.n	80045c6 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004592:	f3ef 8310 	mrs	r3, PRIMASK
 8004596:	613b      	str	r3, [r7, #16]
  return(result);
 8004598:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	2301      	movs	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f383 8810 	msr	PRIMASK, r3
}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2180      	movs	r1, #128	; 0x80
 80045b4:	04c9      	lsls	r1, r1, #19
 80045b6:	430a      	orrs	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f383 8810 	msr	PRIMASK, r3
}
 80045c4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 feb8 	bl	8005344 <UART_Start_Receive_IT>
 80045d4:	0003      	movs	r3, r0
 80045d6:	e000      	b.n	80045da <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b008      	add	sp, #32
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	b0aa      	sub	sp, #168	; 0xa8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	22a4      	movs	r2, #164	; 0xa4
 80045f4:	18b9      	adds	r1, r7, r2
 80045f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	20a0      	movs	r0, #160	; 0xa0
 8004600:	1839      	adds	r1, r7, r0
 8004602:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	249c      	movs	r4, #156	; 0x9c
 800460c:	1939      	adds	r1, r7, r4
 800460e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004610:	0011      	movs	r1, r2
 8004612:	18bb      	adds	r3, r7, r2
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4aa2      	ldr	r2, [pc, #648]	; (80048a0 <HAL_UART_IRQHandler+0x2bc>)
 8004618:	4013      	ands	r3, r2
 800461a:	2298      	movs	r2, #152	; 0x98
 800461c:	18bd      	adds	r5, r7, r2
 800461e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004620:	18bb      	adds	r3, r7, r2
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11a      	bne.n	800465e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004628:	187b      	adds	r3, r7, r1
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2220      	movs	r2, #32
 800462e:	4013      	ands	r3, r2
 8004630:	d015      	beq.n	800465e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004632:	183b      	adds	r3, r7, r0
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2220      	movs	r2, #32
 8004638:	4013      	ands	r3, r2
 800463a:	d105      	bne.n	8004648 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800463c:	193b      	adds	r3, r7, r4
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	055b      	lsls	r3, r3, #21
 8004644:	4013      	ands	r3, r2
 8004646:	d00a      	beq.n	800465e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464c:	2b00      	cmp	r3, #0
 800464e:	d100      	bne.n	8004652 <HAL_UART_IRQHandler+0x6e>
 8004650:	e2dc      	b.n	8004c0c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	0010      	movs	r0, r2
 800465a:	4798      	blx	r3
      }
      return;
 800465c:	e2d6      	b.n	8004c0c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800465e:	2398      	movs	r3, #152	; 0x98
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d100      	bne.n	800466a <HAL_UART_IRQHandler+0x86>
 8004668:	e122      	b.n	80048b0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800466a:	239c      	movs	r3, #156	; 0x9c
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a8c      	ldr	r2, [pc, #560]	; (80048a4 <HAL_UART_IRQHandler+0x2c0>)
 8004672:	4013      	ands	r3, r2
 8004674:	d106      	bne.n	8004684 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004676:	23a0      	movs	r3, #160	; 0xa0
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a8a      	ldr	r2, [pc, #552]	; (80048a8 <HAL_UART_IRQHandler+0x2c4>)
 800467e:	4013      	ands	r3, r2
 8004680:	d100      	bne.n	8004684 <HAL_UART_IRQHandler+0xa0>
 8004682:	e115      	b.n	80048b0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004684:	23a4      	movs	r3, #164	; 0xa4
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2201      	movs	r2, #1
 800468c:	4013      	ands	r3, r2
 800468e:	d012      	beq.n	80046b6 <HAL_UART_IRQHandler+0xd2>
 8004690:	23a0      	movs	r3, #160	; 0xa0
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	4013      	ands	r3, r2
 800469c:	d00b      	beq.n	80046b6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2290      	movs	r2, #144	; 0x90
 80046aa:	589b      	ldr	r3, [r3, r2]
 80046ac:	2201      	movs	r2, #1
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2190      	movs	r1, #144	; 0x90
 80046b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046b6:	23a4      	movs	r3, #164	; 0xa4
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2202      	movs	r2, #2
 80046be:	4013      	ands	r3, r2
 80046c0:	d011      	beq.n	80046e6 <HAL_UART_IRQHandler+0x102>
 80046c2:	239c      	movs	r3, #156	; 0x9c
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2201      	movs	r2, #1
 80046ca:	4013      	ands	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2202      	movs	r2, #2
 80046d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2290      	movs	r2, #144	; 0x90
 80046da:	589b      	ldr	r3, [r3, r2]
 80046dc:	2204      	movs	r2, #4
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2190      	movs	r1, #144	; 0x90
 80046e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046e6:	23a4      	movs	r3, #164	; 0xa4
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2204      	movs	r2, #4
 80046ee:	4013      	ands	r3, r2
 80046f0:	d011      	beq.n	8004716 <HAL_UART_IRQHandler+0x132>
 80046f2:	239c      	movs	r3, #156	; 0x9c
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2201      	movs	r2, #1
 80046fa:	4013      	ands	r3, r2
 80046fc:	d00b      	beq.n	8004716 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2204      	movs	r2, #4
 8004704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2290      	movs	r2, #144	; 0x90
 800470a:	589b      	ldr	r3, [r3, r2]
 800470c:	2202      	movs	r2, #2
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2190      	movs	r1, #144	; 0x90
 8004714:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004716:	23a4      	movs	r3, #164	; 0xa4
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2208      	movs	r2, #8
 800471e:	4013      	ands	r3, r2
 8004720:	d017      	beq.n	8004752 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004722:	23a0      	movs	r3, #160	; 0xa0
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2220      	movs	r2, #32
 800472a:	4013      	ands	r3, r2
 800472c:	d105      	bne.n	800473a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800472e:	239c      	movs	r3, #156	; 0x9c
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a5b      	ldr	r2, [pc, #364]	; (80048a4 <HAL_UART_IRQHandler+0x2c0>)
 8004736:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004738:	d00b      	beq.n	8004752 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2208      	movs	r2, #8
 8004740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2290      	movs	r2, #144	; 0x90
 8004746:	589b      	ldr	r3, [r3, r2]
 8004748:	2208      	movs	r2, #8
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2190      	movs	r1, #144	; 0x90
 8004750:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004752:	23a4      	movs	r3, #164	; 0xa4
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	4013      	ands	r3, r2
 800475e:	d013      	beq.n	8004788 <HAL_UART_IRQHandler+0x1a4>
 8004760:	23a0      	movs	r3, #160	; 0xa0
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	04db      	lsls	r3, r3, #19
 800476a:	4013      	ands	r3, r2
 800476c:	d00c      	beq.n	8004788 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	0112      	lsls	r2, r2, #4
 8004776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2290      	movs	r2, #144	; 0x90
 800477c:	589b      	ldr	r3, [r3, r2]
 800477e:	2220      	movs	r2, #32
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2190      	movs	r1, #144	; 0x90
 8004786:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2290      	movs	r2, #144	; 0x90
 800478c:	589b      	ldr	r3, [r3, r2]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d100      	bne.n	8004794 <HAL_UART_IRQHandler+0x1b0>
 8004792:	e23d      	b.n	8004c10 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004794:	23a4      	movs	r3, #164	; 0xa4
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2220      	movs	r2, #32
 800479c:	4013      	ands	r3, r2
 800479e:	d015      	beq.n	80047cc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047a0:	23a0      	movs	r3, #160	; 0xa0
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2220      	movs	r2, #32
 80047a8:	4013      	ands	r3, r2
 80047aa:	d106      	bne.n	80047ba <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047ac:	239c      	movs	r3, #156	; 0x9c
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	055b      	lsls	r3, r3, #21
 80047b6:	4013      	ands	r3, r2
 80047b8:	d008      	beq.n	80047cc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	0010      	movs	r0, r2
 80047ca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2290      	movs	r2, #144	; 0x90
 80047d0:	589b      	ldr	r3, [r3, r2]
 80047d2:	2194      	movs	r1, #148	; 0x94
 80047d4:	187a      	adds	r2, r7, r1
 80047d6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2240      	movs	r2, #64	; 0x40
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	d004      	beq.n	80047f0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047e6:	187b      	adds	r3, r7, r1
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2228      	movs	r2, #40	; 0x28
 80047ec:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ee:	d04c      	beq.n	800488a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f000 feca 	bl	800558c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2240      	movs	r2, #64	; 0x40
 8004800:	4013      	ands	r3, r2
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d13c      	bne.n	8004880 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004806:	f3ef 8310 	mrs	r3, PRIMASK
 800480a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800480c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480e:	2090      	movs	r0, #144	; 0x90
 8004810:	183a      	adds	r2, r7, r0
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	2301      	movs	r3, #1
 8004816:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2140      	movs	r1, #64	; 0x40
 800482c:	438a      	bics	r2, r1
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	183b      	adds	r3, r7, r0
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004838:	f383 8810 	msr	PRIMASK, r3
}
 800483c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2280      	movs	r2, #128	; 0x80
 8004842:	589b      	ldr	r3, [r3, r2]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d016      	beq.n	8004876 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	589b      	ldr	r3, [r3, r2]
 800484e:	4a17      	ldr	r2, [pc, #92]	; (80048ac <HAL_UART_IRQHandler+0x2c8>)
 8004850:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2280      	movs	r2, #128	; 0x80
 8004856:	589b      	ldr	r3, [r3, r2]
 8004858:	0018      	movs	r0, r3
 800485a:	f7fd fb71 	bl	8001f40 <HAL_DMA_Abort_IT>
 800485e:	1e03      	subs	r3, r0, #0
 8004860:	d01c      	beq.n	800489c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2280      	movs	r2, #128	; 0x80
 8004866:	589b      	ldr	r3, [r3, r2]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	2180      	movs	r1, #128	; 0x80
 800486e:	5852      	ldr	r2, [r2, r1]
 8004870:	0010      	movs	r0, r2
 8004872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	e012      	b.n	800489c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	0018      	movs	r0, r3
 800487a:	f000 f9e1 	bl	8004c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487e:	e00d      	b.n	800489c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	0018      	movs	r0, r3
 8004884:	f000 f9dc 	bl	8004c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	e008      	b.n	800489c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f000 f9d7 	bl	8004c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2290      	movs	r2, #144	; 0x90
 8004896:	2100      	movs	r1, #0
 8004898:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800489a:	e1b9      	b.n	8004c10 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	46c0      	nop			; (mov r8, r8)
    return;
 800489e:	e1b7      	b.n	8004c10 <HAL_UART_IRQHandler+0x62c>
 80048a0:	0000080f 	.word	0x0000080f
 80048a4:	10000001 	.word	0x10000001
 80048a8:	04000120 	.word	0x04000120
 80048ac:	08005659 	.word	0x08005659

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d000      	beq.n	80048ba <HAL_UART_IRQHandler+0x2d6>
 80048b8:	e13e      	b.n	8004b38 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048ba:	23a4      	movs	r3, #164	; 0xa4
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2210      	movs	r2, #16
 80048c2:	4013      	ands	r3, r2
 80048c4:	d100      	bne.n	80048c8 <HAL_UART_IRQHandler+0x2e4>
 80048c6:	e137      	b.n	8004b38 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048c8:	23a0      	movs	r3, #160	; 0xa0
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2210      	movs	r2, #16
 80048d0:	4013      	ands	r3, r2
 80048d2:	d100      	bne.n	80048d6 <HAL_UART_IRQHandler+0x2f2>
 80048d4:	e130      	b.n	8004b38 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2210      	movs	r2, #16
 80048dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2240      	movs	r2, #64	; 0x40
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d000      	beq.n	80048ee <HAL_UART_IRQHandler+0x30a>
 80048ec:	e0a4      	b.n	8004a38 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2280      	movs	r2, #128	; 0x80
 80048f2:	589b      	ldr	r3, [r3, r2]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	217e      	movs	r1, #126	; 0x7e
 80048fa:	187b      	adds	r3, r7, r1
 80048fc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80048fe:	187b      	adds	r3, r7, r1
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d100      	bne.n	8004908 <HAL_UART_IRQHandler+0x324>
 8004906:	e185      	b.n	8004c14 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	225c      	movs	r2, #92	; 0x5c
 800490c:	5a9b      	ldrh	r3, [r3, r2]
 800490e:	187a      	adds	r2, r7, r1
 8004910:	8812      	ldrh	r2, [r2, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d300      	bcc.n	8004918 <HAL_UART_IRQHandler+0x334>
 8004916:	e17d      	b.n	8004c14 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	187a      	adds	r2, r7, r1
 800491c:	215e      	movs	r1, #94	; 0x5e
 800491e:	8812      	ldrh	r2, [r2, #0]
 8004920:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	589b      	ldr	r3, [r3, r2]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2220      	movs	r2, #32
 800492e:	4013      	ands	r3, r2
 8004930:	d170      	bne.n	8004a14 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004932:	f3ef 8310 	mrs	r3, PRIMASK
 8004936:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800493a:	67bb      	str	r3, [r7, #120]	; 0x78
 800493c:	2301      	movs	r3, #1
 800493e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004942:	f383 8810 	msr	PRIMASK, r3
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	49b4      	ldr	r1, [pc, #720]	; (8004c24 <HAL_UART_IRQHandler+0x640>)
 8004954:	400a      	ands	r2, r1
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	f383 8810 	msr	PRIMASK, r3
}
 8004962:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004964:	f3ef 8310 	mrs	r3, PRIMASK
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496c:	677b      	str	r3, [r7, #116]	; 0x74
 800496e:	2301      	movs	r3, #1
 8004970:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004974:	f383 8810 	msr	PRIMASK, r3
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2101      	movs	r1, #1
 8004986:	438a      	bics	r2, r1
 8004988:	609a      	str	r2, [r3, #8]
 800498a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004990:	f383 8810 	msr	PRIMASK, r3
}
 8004994:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004996:	f3ef 8310 	mrs	r3, PRIMASK
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800499c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499e:	673b      	str	r3, [r7, #112]	; 0x70
 80049a0:	2301      	movs	r3, #1
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a6:	f383 8810 	msr	PRIMASK, r3
}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2140      	movs	r1, #64	; 0x40
 80049b8:	438a      	bics	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049be:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c2:	f383 8810 	msr	PRIMASK, r3
}
 80049c6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	228c      	movs	r2, #140	; 0x8c
 80049cc:	2120      	movs	r1, #32
 80049ce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d6:	f3ef 8310 	mrs	r3, PRIMASK
 80049da:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80049dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049e0:	2301      	movs	r3, #1
 80049e2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049e6:	f383 8810 	msr	PRIMASK, r3
}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2110      	movs	r1, #16
 80049f8:	438a      	bics	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a02:	f383 8810 	msr	PRIMASK, r3
}
 8004a06:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2280      	movs	r2, #128	; 0x80
 8004a0c:	589b      	ldr	r3, [r3, r2]
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f7fd fa34 	bl	8001e7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	225c      	movs	r2, #92	; 0x5c
 8004a1e:	5a9a      	ldrh	r2, [r3, r2]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	215e      	movs	r1, #94	; 0x5e
 8004a24:	5a5b      	ldrh	r3, [r3, r1]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	0011      	movs	r1, r2
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 f90d 	bl	8004c50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a36:	e0ed      	b.n	8004c14 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	225c      	movs	r2, #92	; 0x5c
 8004a3c:	5a99      	ldrh	r1, [r3, r2]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	225e      	movs	r2, #94	; 0x5e
 8004a42:	5a9b      	ldrh	r3, [r3, r2]
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	208e      	movs	r0, #142	; 0x8e
 8004a48:	183b      	adds	r3, r7, r0
 8004a4a:	1a8a      	subs	r2, r1, r2
 8004a4c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	225e      	movs	r2, #94	; 0x5e
 8004a52:	5a9b      	ldrh	r3, [r3, r2]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d100      	bne.n	8004a5c <HAL_UART_IRQHandler+0x478>
 8004a5a:	e0dd      	b.n	8004c18 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004a5c:	183b      	adds	r3, r7, r0
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d100      	bne.n	8004a66 <HAL_UART_IRQHandler+0x482>
 8004a64:	e0d8      	b.n	8004c18 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a66:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a6e:	2488      	movs	r4, #136	; 0x88
 8004a70:	193a      	adds	r2, r7, r4
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	2301      	movs	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f383 8810 	msr	PRIMASK, r3
}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4967      	ldr	r1, [pc, #412]	; (8004c28 <HAL_UART_IRQHandler+0x644>)
 8004a8c:	400a      	ands	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	193b      	adds	r3, r7, r4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f383 8810 	msr	PRIMASK, r3
}
 8004a9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004aa4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004aa6:	2484      	movs	r4, #132	; 0x84
 8004aa8:	193a      	adds	r2, r7, r4
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	2301      	movs	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	495a      	ldr	r1, [pc, #360]	; (8004c2c <HAL_UART_IRQHandler+0x648>)
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	193b      	adds	r3, r7, r4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	f383 8810 	msr	PRIMASK, r3
}
 8004ad4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	228c      	movs	r2, #140	; 0x8c
 8004ada:	2120      	movs	r1, #32
 8004adc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aea:	f3ef 8310 	mrs	r3, PRIMASK
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af2:	2480      	movs	r4, #128	; 0x80
 8004af4:	193a      	adds	r2, r7, r4
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	2301      	movs	r3, #1
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	f383 8810 	msr	PRIMASK, r3
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2110      	movs	r1, #16
 8004b10:	438a      	bics	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	193b      	adds	r3, r7, r4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1c:	f383 8810 	msr	PRIMASK, r3
}
 8004b20:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b28:	183b      	adds	r3, r7, r0
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	0011      	movs	r1, r2
 8004b30:	0018      	movs	r0, r3
 8004b32:	f000 f88d 	bl	8004c50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b36:	e06f      	b.n	8004c18 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b38:	23a4      	movs	r3, #164	; 0xa4
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	035b      	lsls	r3, r3, #13
 8004b42:	4013      	ands	r3, r2
 8004b44:	d010      	beq.n	8004b68 <HAL_UART_IRQHandler+0x584>
 8004b46:	239c      	movs	r3, #156	; 0x9c
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	03db      	lsls	r3, r3, #15
 8004b50:	4013      	ands	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2280      	movs	r2, #128	; 0x80
 8004b5a:	0352      	lsls	r2, r2, #13
 8004b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f001 fa1d 	bl	8005fa0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b66:	e05a      	b.n	8004c1e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b68:	23a4      	movs	r3, #164	; 0xa4
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2280      	movs	r2, #128	; 0x80
 8004b70:	4013      	ands	r3, r2
 8004b72:	d016      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b74:	23a0      	movs	r3, #160	; 0xa0
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2280      	movs	r2, #128	; 0x80
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d106      	bne.n	8004b8e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b80:	239c      	movs	r3, #156	; 0x9c
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d042      	beq.n	8004c1c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	0010      	movs	r0, r2
 8004b9e:	4798      	blx	r3
    }
    return;
 8004ba0:	e03c      	b.n	8004c1c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ba2:	23a4      	movs	r3, #164	; 0xa4
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2240      	movs	r2, #64	; 0x40
 8004baa:	4013      	ands	r3, r2
 8004bac:	d00a      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x5e0>
 8004bae:	23a0      	movs	r3, #160	; 0xa0
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2240      	movs	r2, #64	; 0x40
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 fd62 	bl	8005686 <UART_EndTransmit_IT>
    return;
 8004bc2:	e02c      	b.n	8004c1e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004bc4:	23a4      	movs	r3, #164	; 0xa4
 8004bc6:	18fb      	adds	r3, r7, r3
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <HAL_UART_IRQHandler+0x606>
 8004bd2:	23a0      	movs	r3, #160	; 0xa0
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	05db      	lsls	r3, r3, #23
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	0018      	movs	r0, r3
 8004be4:	f001 f9ec 	bl	8005fc0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004be8:	e019      	b.n	8004c1e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004bea:	23a4      	movs	r3, #164	; 0xa4
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	045b      	lsls	r3, r3, #17
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d012      	beq.n	8004c1e <HAL_UART_IRQHandler+0x63a>
 8004bf8:	23a0      	movs	r3, #160	; 0xa0
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da0d      	bge.n	8004c1e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f001 f9d3 	bl	8005fb0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c0a:	e008      	b.n	8004c1e <HAL_UART_IRQHandler+0x63a>
      return;
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	e006      	b.n	8004c1e <HAL_UART_IRQHandler+0x63a>
    return;
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	e004      	b.n	8004c1e <HAL_UART_IRQHandler+0x63a>
      return;
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	e002      	b.n	8004c1e <HAL_UART_IRQHandler+0x63a>
      return;
 8004c18:	46c0      	nop			; (mov r8, r8)
 8004c1a:	e000      	b.n	8004c1e <HAL_UART_IRQHandler+0x63a>
    return;
 8004c1c:	46c0      	nop			; (mov r8, r8)
  }
}
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b02a      	add	sp, #168	; 0xa8
 8004c22:	bdb0      	pop	{r4, r5, r7, pc}
 8004c24:	fffffeff 	.word	0xfffffeff
 8004c28:	fffffedf 	.word	0xfffffedf
 8004c2c:	effffffe 	.word	0xeffffffe

08004c30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c48:	46c0      	nop			; (mov r8, r8)
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	000a      	movs	r2, r1
 8004c5a:	1cbb      	adds	r3, r7, #2
 8004c5c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b002      	add	sp, #8
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c70:	231a      	movs	r3, #26
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4abc      	ldr	r2, [pc, #752]	; (8004f88 <UART_SetConfig+0x320>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4ab7      	ldr	r2, [pc, #732]	; (8004f8c <UART_SetConfig+0x324>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	4aae      	ldr	r2, [pc, #696]	; (8004f90 <UART_SetConfig+0x328>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	0019      	movs	r1, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	220f      	movs	r2, #15
 8004cec:	4393      	bics	r3, r2
 8004cee:	0019      	movs	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4aa4      	ldr	r2, [pc, #656]	; (8004f94 <UART_SetConfig+0x32c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d127      	bne.n	8004d56 <UART_SetConfig+0xee>
 8004d06:	4ba4      	ldr	r3, [pc, #656]	; (8004f98 <UART_SetConfig+0x330>)
 8004d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d017      	beq.n	8004d42 <UART_SetConfig+0xda>
 8004d12:	d81b      	bhi.n	8004d4c <UART_SetConfig+0xe4>
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d00a      	beq.n	8004d2e <UART_SetConfig+0xc6>
 8004d18:	d818      	bhi.n	8004d4c <UART_SetConfig+0xe4>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <UART_SetConfig+0xbc>
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d00a      	beq.n	8004d38 <UART_SetConfig+0xd0>
 8004d22:	e013      	b.n	8004d4c <UART_SetConfig+0xe4>
 8004d24:	231b      	movs	r3, #27
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	e058      	b.n	8004de0 <UART_SetConfig+0x178>
 8004d2e:	231b      	movs	r3, #27
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2202      	movs	r2, #2
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e053      	b.n	8004de0 <UART_SetConfig+0x178>
 8004d38:	231b      	movs	r3, #27
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	e04e      	b.n	8004de0 <UART_SetConfig+0x178>
 8004d42:	231b      	movs	r3, #27
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	2208      	movs	r2, #8
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e049      	b.n	8004de0 <UART_SetConfig+0x178>
 8004d4c:	231b      	movs	r3, #27
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	2210      	movs	r2, #16
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e044      	b.n	8004de0 <UART_SetConfig+0x178>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a90      	ldr	r2, [pc, #576]	; (8004f9c <UART_SetConfig+0x334>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d127      	bne.n	8004db0 <UART_SetConfig+0x148>
 8004d60:	4b8d      	ldr	r3, [pc, #564]	; (8004f98 <UART_SetConfig+0x330>)
 8004d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d64:	220c      	movs	r2, #12
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d017      	beq.n	8004d9c <UART_SetConfig+0x134>
 8004d6c:	d81b      	bhi.n	8004da6 <UART_SetConfig+0x13e>
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d00a      	beq.n	8004d88 <UART_SetConfig+0x120>
 8004d72:	d818      	bhi.n	8004da6 <UART_SetConfig+0x13e>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <UART_SetConfig+0x116>
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d00a      	beq.n	8004d92 <UART_SetConfig+0x12a>
 8004d7c:	e013      	b.n	8004da6 <UART_SetConfig+0x13e>
 8004d7e:	231b      	movs	r3, #27
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	e02b      	b.n	8004de0 <UART_SetConfig+0x178>
 8004d88:	231b      	movs	r3, #27
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e026      	b.n	8004de0 <UART_SetConfig+0x178>
 8004d92:	231b      	movs	r3, #27
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	2204      	movs	r2, #4
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e021      	b.n	8004de0 <UART_SetConfig+0x178>
 8004d9c:	231b      	movs	r3, #27
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	2208      	movs	r2, #8
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e01c      	b.n	8004de0 <UART_SetConfig+0x178>
 8004da6:	231b      	movs	r3, #27
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2210      	movs	r2, #16
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e017      	b.n	8004de0 <UART_SetConfig+0x178>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a7a      	ldr	r2, [pc, #488]	; (8004fa0 <UART_SetConfig+0x338>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d104      	bne.n	8004dc4 <UART_SetConfig+0x15c>
 8004dba:	231b      	movs	r3, #27
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e00d      	b.n	8004de0 <UART_SetConfig+0x178>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a76      	ldr	r2, [pc, #472]	; (8004fa4 <UART_SetConfig+0x33c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d104      	bne.n	8004dd8 <UART_SetConfig+0x170>
 8004dce:	231b      	movs	r3, #27
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e003      	b.n	8004de0 <UART_SetConfig+0x178>
 8004dd8:	231b      	movs	r3, #27
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	2210      	movs	r2, #16
 8004dde:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d000      	beq.n	8004dee <UART_SetConfig+0x186>
 8004dec:	e065      	b.n	8004eba <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8004dee:	231b      	movs	r3, #27
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d015      	beq.n	8004e24 <UART_SetConfig+0x1bc>
 8004df8:	dc18      	bgt.n	8004e2c <UART_SetConfig+0x1c4>
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d00d      	beq.n	8004e1a <UART_SetConfig+0x1b2>
 8004dfe:	dc15      	bgt.n	8004e2c <UART_SetConfig+0x1c4>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <UART_SetConfig+0x1a2>
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d005      	beq.n	8004e14 <UART_SetConfig+0x1ac>
 8004e08:	e010      	b.n	8004e2c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e0a:	f7fd ffcb 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	617b      	str	r3, [r7, #20]
        break;
 8004e12:	e012      	b.n	8004e3a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e14:	4b64      	ldr	r3, [pc, #400]	; (8004fa8 <UART_SetConfig+0x340>)
 8004e16:	617b      	str	r3, [r7, #20]
        break;
 8004e18:	e00f      	b.n	8004e3a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1a:	f7fd ff39 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	617b      	str	r3, [r7, #20]
        break;
 8004e22:	e00a      	b.n	8004e3a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	617b      	str	r3, [r7, #20]
        break;
 8004e2a:	e006      	b.n	8004e3a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e30:	231a      	movs	r3, #26
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
        break;
 8004e38:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d100      	bne.n	8004e42 <UART_SetConfig+0x1da>
 8004e40:	e08d      	b.n	8004f5e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e46:	4b59      	ldr	r3, [pc, #356]	; (8004fac <UART_SetConfig+0x344>)
 8004e48:	0052      	lsls	r2, r2, #1
 8004e4a:	5ad3      	ldrh	r3, [r2, r3]
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	6978      	ldr	r0, [r7, #20]
 8004e50:	f7fb f96e 	bl	8000130 <__udivsi3>
 8004e54:	0003      	movs	r3, r0
 8004e56:	005a      	lsls	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	18d2      	adds	r2, r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	0019      	movs	r1, r3
 8004e66:	0010      	movs	r0, r2
 8004e68:	f7fb f962 	bl	8000130 <__udivsi3>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b0f      	cmp	r3, #15
 8004e74:	d91c      	bls.n	8004eb0 <UART_SetConfig+0x248>
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	025b      	lsls	r3, r3, #9
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d217      	bcs.n	8004eb0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	200e      	movs	r0, #14
 8004e86:	183b      	adds	r3, r7, r0
 8004e88:	210f      	movs	r1, #15
 8004e8a:	438a      	bics	r2, r1
 8004e8c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2207      	movs	r2, #7
 8004e96:	4013      	ands	r3, r2
 8004e98:	b299      	uxth	r1, r3
 8004e9a:	183b      	adds	r3, r7, r0
 8004e9c:	183a      	adds	r2, r7, r0
 8004e9e:	8812      	ldrh	r2, [r2, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	183a      	adds	r2, r7, r0
 8004eaa:	8812      	ldrh	r2, [r2, #0]
 8004eac:	60da      	str	r2, [r3, #12]
 8004eae:	e056      	b.n	8004f5e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb0:	231a      	movs	r3, #26
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	e051      	b.n	8004f5e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eba:	231b      	movs	r3, #27
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d015      	beq.n	8004ef0 <UART_SetConfig+0x288>
 8004ec4:	dc18      	bgt.n	8004ef8 <UART_SetConfig+0x290>
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d00d      	beq.n	8004ee6 <UART_SetConfig+0x27e>
 8004eca:	dc15      	bgt.n	8004ef8 <UART_SetConfig+0x290>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <UART_SetConfig+0x26e>
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d005      	beq.n	8004ee0 <UART_SetConfig+0x278>
 8004ed4:	e010      	b.n	8004ef8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed6:	f7fd ff65 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8004eda:	0003      	movs	r3, r0
 8004edc:	617b      	str	r3, [r7, #20]
        break;
 8004ede:	e012      	b.n	8004f06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee0:	4b31      	ldr	r3, [pc, #196]	; (8004fa8 <UART_SetConfig+0x340>)
 8004ee2:	617b      	str	r3, [r7, #20]
        break;
 8004ee4:	e00f      	b.n	8004f06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee6:	f7fd fed3 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8004eea:	0003      	movs	r3, r0
 8004eec:	617b      	str	r3, [r7, #20]
        break;
 8004eee:	e00a      	b.n	8004f06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	617b      	str	r3, [r7, #20]
        break;
 8004ef6:	e006      	b.n	8004f06 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004efc:	231a      	movs	r3, #26
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
        break;
 8004f04:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d028      	beq.n	8004f5e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f10:	4b26      	ldr	r3, [pc, #152]	; (8004fac <UART_SetConfig+0x344>)
 8004f12:	0052      	lsls	r2, r2, #1
 8004f14:	5ad3      	ldrh	r3, [r2, r3]
 8004f16:	0019      	movs	r1, r3
 8004f18:	6978      	ldr	r0, [r7, #20]
 8004f1a:	f7fb f909 	bl	8000130 <__udivsi3>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	001a      	movs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	18d2      	adds	r2, r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	0019      	movs	r1, r3
 8004f30:	0010      	movs	r0, r2
 8004f32:	f7fb f8fd 	bl	8000130 <__udivsi3>
 8004f36:	0003      	movs	r3, r0
 8004f38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b0f      	cmp	r3, #15
 8004f3e:	d90a      	bls.n	8004f56 <UART_SetConfig+0x2ee>
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	025b      	lsls	r3, r3, #9
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d205      	bcs.n	8004f56 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	e003      	b.n	8004f5e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004f56:	231a      	movs	r3, #26
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	226a      	movs	r2, #106	; 0x6a
 8004f62:	2101      	movs	r1, #1
 8004f64:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2268      	movs	r2, #104	; 0x68
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004f7a:	231a      	movs	r3, #26
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	781b      	ldrb	r3, [r3, #0]
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b008      	add	sp, #32
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	cfff69f3 	.word	0xcfff69f3
 8004f8c:	ffffcfff 	.word	0xffffcfff
 8004f90:	11fff4ff 	.word	0x11fff4ff
 8004f94:	40013800 	.word	0x40013800
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40004400 	.word	0x40004400
 8004fa0:	40004800 	.word	0x40004800
 8004fa4:	40004c00 	.word	0x40004c00
 8004fa8:	00f42400 	.word	0x00f42400
 8004fac:	080097c4 	.word	0x080097c4

08004fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d00b      	beq.n	8004fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4a4a      	ldr	r2, [pc, #296]	; (80050f4 <UART_AdvFeatureConfig+0x144>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	0019      	movs	r1, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	2202      	movs	r2, #2
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4a43      	ldr	r2, [pc, #268]	; (80050f8 <UART_AdvFeatureConfig+0x148>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	0019      	movs	r1, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	2204      	movs	r2, #4
 8005002:	4013      	ands	r3, r2
 8005004:	d00b      	beq.n	800501e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	4a3b      	ldr	r2, [pc, #236]	; (80050fc <UART_AdvFeatureConfig+0x14c>)
 800500e:	4013      	ands	r3, r2
 8005010:	0019      	movs	r1, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	2208      	movs	r2, #8
 8005024:	4013      	ands	r3, r2
 8005026:	d00b      	beq.n	8005040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4a34      	ldr	r2, [pc, #208]	; (8005100 <UART_AdvFeatureConfig+0x150>)
 8005030:	4013      	ands	r3, r2
 8005032:	0019      	movs	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	2210      	movs	r2, #16
 8005046:	4013      	ands	r3, r2
 8005048:	d00b      	beq.n	8005062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <UART_AdvFeatureConfig+0x154>)
 8005052:	4013      	ands	r3, r2
 8005054:	0019      	movs	r1, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	2220      	movs	r2, #32
 8005068:	4013      	ands	r3, r2
 800506a:	d00b      	beq.n	8005084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	4a25      	ldr	r2, [pc, #148]	; (8005108 <UART_AdvFeatureConfig+0x158>)
 8005074:	4013      	ands	r3, r2
 8005076:	0019      	movs	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	2240      	movs	r2, #64	; 0x40
 800508a:	4013      	ands	r3, r2
 800508c:	d01d      	beq.n	80050ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a1d      	ldr	r2, [pc, #116]	; (800510c <UART_AdvFeatureConfig+0x15c>)
 8005096:	4013      	ands	r3, r2
 8005098:	0019      	movs	r1, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	035b      	lsls	r3, r3, #13
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d10b      	bne.n	80050ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4a15      	ldr	r2, [pc, #84]	; (8005110 <UART_AdvFeatureConfig+0x160>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	0019      	movs	r1, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	2280      	movs	r2, #128	; 0x80
 80050d0:	4013      	ands	r3, r2
 80050d2:	d00b      	beq.n	80050ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <UART_AdvFeatureConfig+0x164>)
 80050dc:	4013      	ands	r3, r2
 80050de:	0019      	movs	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b002      	add	sp, #8
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	fffdffff 	.word	0xfffdffff
 80050f8:	fffeffff 	.word	0xfffeffff
 80050fc:	fffbffff 	.word	0xfffbffff
 8005100:	ffff7fff 	.word	0xffff7fff
 8005104:	ffffefff 	.word	0xffffefff
 8005108:	ffffdfff 	.word	0xffffdfff
 800510c:	ffefffff 	.word	0xffefffff
 8005110:	ff9fffff 	.word	0xff9fffff
 8005114:	fff7ffff 	.word	0xfff7ffff

08005118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af02      	add	r7, sp, #8
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2290      	movs	r2, #144	; 0x90
 8005124:	2100      	movs	r1, #0
 8005126:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005128:	f7fc fdc0 	bl	8001cac <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2208      	movs	r2, #8
 8005138:	4013      	ands	r3, r2
 800513a:	2b08      	cmp	r3, #8
 800513c:	d10c      	bne.n	8005158 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2280      	movs	r2, #128	; 0x80
 8005142:	0391      	lsls	r1, r2, #14
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <UART_CheckIdleState+0x98>)
 8005148:	9200      	str	r2, [sp, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	f000 f832 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 8005150:	1e03      	subs	r3, r0, #0
 8005152:	d001      	beq.n	8005158 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e026      	b.n	80051a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2204      	movs	r2, #4
 8005160:	4013      	ands	r3, r2
 8005162:	2b04      	cmp	r3, #4
 8005164:	d10c      	bne.n	8005180 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2280      	movs	r2, #128	; 0x80
 800516a:	03d1      	lsls	r1, r2, #15
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <UART_CheckIdleState+0x98>)
 8005170:	9200      	str	r2, [sp, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	f000 f81e 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 8005178:	1e03      	subs	r3, r0, #0
 800517a:	d001      	beq.n	8005180 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e012      	b.n	80051a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2288      	movs	r2, #136	; 0x88
 8005184:	2120      	movs	r1, #32
 8005186:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	228c      	movs	r2, #140	; 0x8c
 800518c:	2120      	movs	r1, #32
 800518e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2284      	movs	r2, #132	; 0x84
 80051a0:	2100      	movs	r1, #0
 80051a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b004      	add	sp, #16
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	01ffffff 	.word	0x01ffffff

080051b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b094      	sub	sp, #80	; 0x50
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	1dfb      	adds	r3, r7, #7
 80051c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c4:	e0a7      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051c8:	3301      	adds	r3, #1
 80051ca:	d100      	bne.n	80051ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80051cc:	e0a3      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ce:	f7fc fd6d 	bl	8001cac <HAL_GetTick>
 80051d2:	0002      	movs	r2, r0
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051da:	429a      	cmp	r2, r3
 80051dc:	d302      	bcc.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d13f      	bne.n	8005264 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e4:	f3ef 8310 	mrs	r3, PRIMASK
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051ec:	647b      	str	r3, [r7, #68]	; 0x44
 80051ee:	2301      	movs	r3, #1
 80051f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	f383 8810 	msr	PRIMASK, r3
}
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	494e      	ldr	r1, [pc, #312]	; (8005340 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005206:	400a      	ands	r2, r1
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	f383 8810 	msr	PRIMASK, r3
}
 8005214:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005216:	f3ef 8310 	mrs	r3, PRIMASK
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800521c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521e:	643b      	str	r3, [r7, #64]	; 0x40
 8005220:	2301      	movs	r3, #1
 8005222:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2101      	movs	r1, #1
 8005238:	438a      	bics	r2, r1
 800523a:	609a      	str	r2, [r3, #8]
 800523c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005242:	f383 8810 	msr	PRIMASK, r3
}
 8005246:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2288      	movs	r2, #136	; 0x88
 800524c:	2120      	movs	r1, #32
 800524e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	228c      	movs	r2, #140	; 0x8c
 8005254:	2120      	movs	r1, #32
 8005256:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2284      	movs	r2, #132	; 0x84
 800525c:	2100      	movs	r1, #0
 800525e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e069      	b.n	8005338 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2204      	movs	r2, #4
 800526c:	4013      	ands	r3, r2
 800526e:	d052      	beq.n	8005316 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	401a      	ands	r2, r3
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	429a      	cmp	r2, r3
 8005282:	d148      	bne.n	8005316 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2280      	movs	r2, #128	; 0x80
 800528a:	0112      	lsls	r2, r2, #4
 800528c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528e:	f3ef 8310 	mrs	r3, PRIMASK
 8005292:	613b      	str	r3, [r7, #16]
  return(result);
 8005294:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005298:	2301      	movs	r3, #1
 800529a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f383 8810 	msr	PRIMASK, r3
}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4924      	ldr	r1, [pc, #144]	; (8005340 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80052b0:	400a      	ands	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f383 8810 	msr	PRIMASK, r3
}
 80052be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c0:	f3ef 8310 	mrs	r3, PRIMASK
 80052c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80052c6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ca:	2301      	movs	r3, #1
 80052cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f383 8810 	msr	PRIMASK, r3
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2101      	movs	r1, #1
 80052e2:	438a      	bics	r2, r1
 80052e4:	609a      	str	r2, [r3, #8]
 80052e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	f383 8810 	msr	PRIMASK, r3
}
 80052f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2288      	movs	r2, #136	; 0x88
 80052f6:	2120      	movs	r1, #32
 80052f8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	228c      	movs	r2, #140	; 0x8c
 80052fe:	2120      	movs	r1, #32
 8005300:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2290      	movs	r2, #144	; 0x90
 8005306:	2120      	movs	r1, #32
 8005308:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2284      	movs	r2, #132	; 0x84
 800530e:	2100      	movs	r1, #0
 8005310:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e010      	b.n	8005338 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	4013      	ands	r3, r2
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	425a      	negs	r2, r3
 8005326:	4153      	adcs	r3, r2
 8005328:	b2db      	uxtb	r3, r3
 800532a:	001a      	movs	r2, r3
 800532c:	1dfb      	adds	r3, r7, #7
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d100      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0x182>
 8005334:	e747      	b.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	0018      	movs	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	b014      	add	sp, #80	; 0x50
 800533e:	bd80      	pop	{r7, pc}
 8005340:	fffffe5f 	.word	0xfffffe5f

08005344 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b098      	sub	sp, #96	; 0x60
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	1dbb      	adds	r3, r7, #6
 8005350:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1dba      	adds	r2, r7, #6
 800535c:	215c      	movs	r1, #92	; 0x5c
 800535e:	8812      	ldrh	r2, [r2, #0]
 8005360:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1dba      	adds	r2, r7, #6
 8005366:	215e      	movs	r1, #94	; 0x5e
 8005368:	8812      	ldrh	r2, [r2, #0]
 800536a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	015b      	lsls	r3, r3, #5
 800537a:	429a      	cmp	r2, r3
 800537c:	d10d      	bne.n	800539a <UART_Start_Receive_IT+0x56>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <UART_Start_Receive_IT+0x4c>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2260      	movs	r2, #96	; 0x60
 800538a:	497b      	ldr	r1, [pc, #492]	; (8005578 <UART_Start_Receive_IT+0x234>)
 800538c:	5299      	strh	r1, [r3, r2]
 800538e:	e02e      	b.n	80053ee <UART_Start_Receive_IT+0xaa>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2260      	movs	r2, #96	; 0x60
 8005394:	21ff      	movs	r1, #255	; 0xff
 8005396:	5299      	strh	r1, [r3, r2]
 8005398:	e029      	b.n	80053ee <UART_Start_Receive_IT+0xaa>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10d      	bne.n	80053be <UART_Start_Receive_IT+0x7a>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <UART_Start_Receive_IT+0x70>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2260      	movs	r2, #96	; 0x60
 80053ae:	21ff      	movs	r1, #255	; 0xff
 80053b0:	5299      	strh	r1, [r3, r2]
 80053b2:	e01c      	b.n	80053ee <UART_Start_Receive_IT+0xaa>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2260      	movs	r2, #96	; 0x60
 80053b8:	217f      	movs	r1, #127	; 0x7f
 80053ba:	5299      	strh	r1, [r3, r2]
 80053bc:	e017      	b.n	80053ee <UART_Start_Receive_IT+0xaa>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	055b      	lsls	r3, r3, #21
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d10d      	bne.n	80053e6 <UART_Start_Receive_IT+0xa2>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <UART_Start_Receive_IT+0x98>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2260      	movs	r2, #96	; 0x60
 80053d6:	217f      	movs	r1, #127	; 0x7f
 80053d8:	5299      	strh	r1, [r3, r2]
 80053da:	e008      	b.n	80053ee <UART_Start_Receive_IT+0xaa>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2260      	movs	r2, #96	; 0x60
 80053e0:	213f      	movs	r1, #63	; 0x3f
 80053e2:	5299      	strh	r1, [r3, r2]
 80053e4:	e003      	b.n	80053ee <UART_Start_Receive_IT+0xaa>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2260      	movs	r2, #96	; 0x60
 80053ea:	2100      	movs	r1, #0
 80053ec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2290      	movs	r2, #144	; 0x90
 80053f2:	2100      	movs	r1, #0
 80053f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	228c      	movs	r2, #140	; 0x8c
 80053fa:	2122      	movs	r1, #34	; 0x22
 80053fc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005402:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005404:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005408:	2301      	movs	r3, #1
 800540a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540e:	f383 8810 	msr	PRIMASK, r3
}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2101      	movs	r1, #1
 8005420:	430a      	orrs	r2, r1
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005426:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542a:	f383 8810 	msr	PRIMASK, r3
}
 800542e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	059b      	lsls	r3, r3, #22
 8005438:	429a      	cmp	r2, r3
 800543a:	d150      	bne.n	80054de <UART_Start_Receive_IT+0x19a>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2268      	movs	r2, #104	; 0x68
 8005440:	5a9b      	ldrh	r3, [r3, r2]
 8005442:	1dba      	adds	r2, r7, #6
 8005444:	8812      	ldrh	r2, [r2, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d349      	bcc.n	80054de <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	015b      	lsls	r3, r3, #5
 8005452:	429a      	cmp	r2, r3
 8005454:	d107      	bne.n	8005466 <UART_Start_Receive_IT+0x122>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a46      	ldr	r2, [pc, #280]	; (800557c <UART_Start_Receive_IT+0x238>)
 8005462:	675a      	str	r2, [r3, #116]	; 0x74
 8005464:	e002      	b.n	800546c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a45      	ldr	r2, [pc, #276]	; (8005580 <UART_Start_Receive_IT+0x23c>)
 800546a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d019      	beq.n	80054a8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005474:	f3ef 8310 	mrs	r3, PRIMASK
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800547c:	65bb      	str	r3, [r7, #88]	; 0x58
 800547e:	2301      	movs	r3, #1
 8005480:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	f383 8810 	msr	PRIMASK, r3
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2180      	movs	r1, #128	; 0x80
 8005496:	0049      	lsls	r1, r1, #1
 8005498:	430a      	orrs	r2, r1
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a2:	f383 8810 	msr	PRIMASK, r3
}
 80054a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054b0:	657b      	str	r3, [r7, #84]	; 0x54
 80054b2:	2301      	movs	r3, #1
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2180      	movs	r1, #128	; 0x80
 80054ca:	0549      	lsls	r1, r1, #21
 80054cc:	430a      	orrs	r2, r1
 80054ce:	609a      	str	r2, [r3, #8]
 80054d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	f383 8810 	msr	PRIMASK, r3
}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	e047      	b.n	800556e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	015b      	lsls	r3, r3, #5
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d107      	bne.n	80054fa <UART_Start_Receive_IT+0x1b6>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d103      	bne.n	80054fa <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a23      	ldr	r2, [pc, #140]	; (8005584 <UART_Start_Receive_IT+0x240>)
 80054f6:	675a      	str	r2, [r3, #116]	; 0x74
 80054f8:	e002      	b.n	8005500 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a22      	ldr	r2, [pc, #136]	; (8005588 <UART_Start_Receive_IT+0x244>)
 80054fe:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d019      	beq.n	800553c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005508:	f3ef 8310 	mrs	r3, PRIMASK
 800550c:	61fb      	str	r3, [r7, #28]
  return(result);
 800550e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005512:	2301      	movs	r3, #1
 8005514:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	f383 8810 	msr	PRIMASK, r3
}
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2190      	movs	r1, #144	; 0x90
 800552a:	0049      	lsls	r1, r1, #1
 800552c:	430a      	orrs	r2, r1
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	e018      	b.n	800556e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800553c:	f3ef 8310 	mrs	r3, PRIMASK
 8005540:	613b      	str	r3, [r7, #16]
  return(result);
 8005542:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005544:	653b      	str	r3, [r7, #80]	; 0x50
 8005546:	2301      	movs	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f383 8810 	msr	PRIMASK, r3
}
 8005550:	46c0      	nop			; (mov r8, r8)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2120      	movs	r1, #32
 800555e:	430a      	orrs	r2, r1
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005564:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	f383 8810 	msr	PRIMASK, r3
}
 800556c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	b018      	add	sp, #96	; 0x60
 8005576:	bd80      	pop	{r7, pc}
 8005578:	000001ff 	.word	0x000001ff
 800557c:	08005cb5 	.word	0x08005cb5
 8005580:	080059c9 	.word	0x080059c9
 8005584:	08005855 	.word	0x08005855
 8005588:	080056e1 	.word	0x080056e1

0800558c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08e      	sub	sp, #56	; 0x38
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005594:	f3ef 8310 	mrs	r3, PRIMASK
 8005598:	617b      	str	r3, [r7, #20]
  return(result);
 800559a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
 800559e:	2301      	movs	r3, #1
 80055a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f383 8810 	msr	PRIMASK, r3
}
 80055a8:	46c0      	nop			; (mov r8, r8)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4926      	ldr	r1, [pc, #152]	; (8005650 <UART_EndRxTransfer+0xc4>)
 80055b6:	400a      	ands	r2, r1
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f383 8810 	msr	PRIMASK, r3
}
 80055c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c6:	f3ef 8310 	mrs	r3, PRIMASK
 80055ca:	623b      	str	r3, [r7, #32]
  return(result);
 80055cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
 80055d0:	2301      	movs	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	f383 8810 	msr	PRIMASK, r3
}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	491b      	ldr	r1, [pc, #108]	; (8005654 <UART_EndRxTransfer+0xc8>)
 80055e8:	400a      	ands	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	f383 8810 	msr	PRIMASK, r3
}
 80055f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d118      	bne.n	8005632 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005600:	f3ef 8310 	mrs	r3, PRIMASK
 8005604:	60bb      	str	r3, [r7, #8]
  return(result);
 8005606:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560a:	2301      	movs	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f383 8810 	msr	PRIMASK, r3
}
 8005614:	46c0      	nop			; (mov r8, r8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2110      	movs	r1, #16
 8005622:	438a      	bics	r2, r1
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	228c      	movs	r2, #140	; 0x8c
 8005636:	2120      	movs	r1, #32
 8005638:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	46bd      	mov	sp, r7
 800564a:	b00e      	add	sp, #56	; 0x38
 800564c:	bd80      	pop	{r7, pc}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	fffffedf 	.word	0xfffffedf
 8005654:	effffffe 	.word	0xeffffffe

08005658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	225e      	movs	r2, #94	; 0x5e
 800566a:	2100      	movs	r1, #0
 800566c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2256      	movs	r2, #86	; 0x56
 8005672:	2100      	movs	r1, #0
 8005674:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	0018      	movs	r0, r3
 800567a:	f7ff fae1 	bl	8004c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	46bd      	mov	sp, r7
 8005682:	b004      	add	sp, #16
 8005684:	bd80      	pop	{r7, pc}

08005686 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b086      	sub	sp, #24
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800568e:	f3ef 8310 	mrs	r3, PRIMASK
 8005692:	60bb      	str	r3, [r7, #8]
  return(result);
 8005694:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	2301      	movs	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2140      	movs	r1, #64	; 0x40
 80056b0:	438a      	bics	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f383 8810 	msr	PRIMASK, r3
}
 80056be:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2288      	movs	r2, #136	; 0x88
 80056c4:	2120      	movs	r1, #32
 80056c6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f7ff faad 	bl	8004c30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	46bd      	mov	sp, r7
 80056da:	b006      	add	sp, #24
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b090      	sub	sp, #64	; 0x40
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056e8:	203e      	movs	r0, #62	; 0x3e
 80056ea:	183b      	adds	r3, r7, r0
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	2160      	movs	r1, #96	; 0x60
 80056f0:	5a52      	ldrh	r2, [r2, r1]
 80056f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	228c      	movs	r2, #140	; 0x8c
 80056f8:	589b      	ldr	r3, [r3, r2]
 80056fa:	2b22      	cmp	r3, #34	; 0x22
 80056fc:	d000      	beq.n	8005700 <UART_RxISR_8BIT+0x20>
 80056fe:	e09a      	b.n	8005836 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005706:	213c      	movs	r1, #60	; 0x3c
 8005708:	187b      	adds	r3, r7, r1
 800570a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800570c:	187b      	adds	r3, r7, r1
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	183b      	adds	r3, r7, r0
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b2d9      	uxtb	r1, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	400a      	ands	r2, r1
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	225e      	movs	r2, #94	; 0x5e
 8005730:	5a9b      	ldrh	r3, [r3, r2]
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b299      	uxth	r1, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	225e      	movs	r2, #94	; 0x5e
 800573c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	225e      	movs	r2, #94	; 0x5e
 8005742:	5a9b      	ldrh	r3, [r3, r2]
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d000      	beq.n	800574c <UART_RxISR_8BIT+0x6c>
 800574a:	e07c      	b.n	8005846 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574c:	f3ef 8310 	mrs	r3, PRIMASK
 8005750:	61bb      	str	r3, [r7, #24]
  return(result);
 8005752:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
 8005756:	2301      	movs	r3, #1
 8005758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f383 8810 	msr	PRIMASK, r3
}
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4938      	ldr	r1, [pc, #224]	; (8005850 <UART_RxISR_8BIT+0x170>)
 800576e:	400a      	ands	r2, r1
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f383 8810 	msr	PRIMASK, r3
}
 800577c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800577e:	f3ef 8310 	mrs	r3, PRIMASK
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
 8005788:	2301      	movs	r3, #1
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	f383 8810 	msr	PRIMASK, r3
}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2101      	movs	r1, #1
 80057a0:	438a      	bics	r2, r1
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	f383 8810 	msr	PRIMASK, r3
}
 80057ae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	228c      	movs	r2, #140	; 0x8c
 80057b4:	2120      	movs	r1, #32
 80057b6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d12f      	bne.n	800582c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d2:	f3ef 8310 	mrs	r3, PRIMASK
 80057d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80057d8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057da:	633b      	str	r3, [r7, #48]	; 0x30
 80057dc:	2301      	movs	r3, #1
 80057de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f383 8810 	msr	PRIMASK, r3
}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2110      	movs	r1, #16
 80057f4:	438a      	bics	r2, r1
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f383 8810 	msr	PRIMASK, r3
}
 8005802:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	2210      	movs	r2, #16
 800580c:	4013      	ands	r3, r2
 800580e:	2b10      	cmp	r3, #16
 8005810:	d103      	bne.n	800581a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2210      	movs	r2, #16
 8005818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	225c      	movs	r2, #92	; 0x5c
 800581e:	5a9a      	ldrh	r2, [r3, r2]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	0011      	movs	r1, r2
 8005824:	0018      	movs	r0, r3
 8005826:	f7ff fa13 	bl	8004c50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800582a:	e00c      	b.n	8005846 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	0018      	movs	r0, r3
 8005830:	f7fb ff68 	bl	8001704 <HAL_UART_RxCpltCallback>
}
 8005834:	e007      	b.n	8005846 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2108      	movs	r1, #8
 8005842:	430a      	orrs	r2, r1
 8005844:	619a      	str	r2, [r3, #24]
}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	46bd      	mov	sp, r7
 800584a:	b010      	add	sp, #64	; 0x40
 800584c:	bd80      	pop	{r7, pc}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	fffffedf 	.word	0xfffffedf

08005854 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b090      	sub	sp, #64	; 0x40
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800585c:	203e      	movs	r0, #62	; 0x3e
 800585e:	183b      	adds	r3, r7, r0
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	2160      	movs	r1, #96	; 0x60
 8005864:	5a52      	ldrh	r2, [r2, r1]
 8005866:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	228c      	movs	r2, #140	; 0x8c
 800586c:	589b      	ldr	r3, [r3, r2]
 800586e:	2b22      	cmp	r3, #34	; 0x22
 8005870:	d000      	beq.n	8005874 <UART_RxISR_16BIT+0x20>
 8005872:	e09a      	b.n	80059aa <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800587a:	213c      	movs	r1, #60	; 0x3c
 800587c:	187b      	adds	r3, r7, r1
 800587e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005886:	187b      	adds	r3, r7, r1
 8005888:	183a      	adds	r2, r7, r0
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	8812      	ldrh	r2, [r2, #0]
 800588e:	4013      	ands	r3, r2
 8005890:	b29a      	uxth	r2, r3
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	225e      	movs	r2, #94	; 0x5e
 80058a4:	5a9b      	ldrh	r3, [r3, r2]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b299      	uxth	r1, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	225e      	movs	r2, #94	; 0x5e
 80058b0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	225e      	movs	r2, #94	; 0x5e
 80058b6:	5a9b      	ldrh	r3, [r3, r2]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d000      	beq.n	80058c0 <UART_RxISR_16BIT+0x6c>
 80058be:	e07c      	b.n	80059ba <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c0:	f3ef 8310 	mrs	r3, PRIMASK
 80058c4:	617b      	str	r3, [r7, #20]
  return(result);
 80058c6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ca:	2301      	movs	r3, #1
 80058cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f383 8810 	msr	PRIMASK, r3
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4938      	ldr	r1, [pc, #224]	; (80059c4 <UART_RxISR_16BIT+0x170>)
 80058e2:	400a      	ands	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f383 8810 	msr	PRIMASK, r3
}
 80058f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f2:	f3ef 8310 	mrs	r3, PRIMASK
 80058f6:	623b      	str	r3, [r7, #32]
  return(result);
 80058f8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fa:	633b      	str	r3, [r7, #48]	; 0x30
 80058fc:	2301      	movs	r3, #1
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	f383 8810 	msr	PRIMASK, r3
}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2101      	movs	r1, #1
 8005914:	438a      	bics	r2, r1
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	f383 8810 	msr	PRIMASK, r3
}
 8005922:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	228c      	movs	r2, #140	; 0x8c
 8005928:	2120      	movs	r1, #32
 800592a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d12f      	bne.n	80059a0 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005946:	f3ef 8310 	mrs	r3, PRIMASK
 800594a:	60bb      	str	r3, [r7, #8]
  return(result);
 800594c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005950:	2301      	movs	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f383 8810 	msr	PRIMASK, r3
}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2110      	movs	r1, #16
 8005968:	438a      	bics	r2, r1
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f383 8810 	msr	PRIMASK, r3
}
 8005976:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	2210      	movs	r2, #16
 8005980:	4013      	ands	r3, r2
 8005982:	2b10      	cmp	r3, #16
 8005984:	d103      	bne.n	800598e <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2210      	movs	r2, #16
 800598c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	225c      	movs	r2, #92	; 0x5c
 8005992:	5a9a      	ldrh	r2, [r3, r2]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	0011      	movs	r1, r2
 8005998:	0018      	movs	r0, r3
 800599a:	f7ff f959 	bl	8004c50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800599e:	e00c      	b.n	80059ba <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	0018      	movs	r0, r3
 80059a4:	f7fb feae 	bl	8001704 <HAL_UART_RxCpltCallback>
}
 80059a8:	e007      	b.n	80059ba <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699a      	ldr	r2, [r3, #24]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2108      	movs	r1, #8
 80059b6:	430a      	orrs	r2, r1
 80059b8:	619a      	str	r2, [r3, #24]
}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46bd      	mov	sp, r7
 80059be:	b010      	add	sp, #64	; 0x40
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	fffffedf 	.word	0xfffffedf

080059c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b09c      	sub	sp, #112	; 0x70
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80059d0:	236a      	movs	r3, #106	; 0x6a
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	2160      	movs	r1, #96	; 0x60
 80059d8:	5a52      	ldrh	r2, [r2, r1]
 80059da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	228c      	movs	r2, #140	; 0x8c
 80059f8:	589b      	ldr	r3, [r3, r2]
 80059fa:	2b22      	cmp	r3, #34	; 0x22
 80059fc:	d000      	beq.n	8005a00 <UART_RxISR_8BIT_FIFOEN+0x38>
 80059fe:	e144      	b.n	8005c8a <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a00:	235e      	movs	r3, #94	; 0x5e
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	2168      	movs	r1, #104	; 0x68
 8005a08:	5a52      	ldrh	r2, [r2, r1]
 8005a0a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a0c:	e0eb      	b.n	8005be6 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a14:	215c      	movs	r1, #92	; 0x5c
 8005a16:	187b      	adds	r3, r7, r1
 8005a18:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a1a:	187b      	adds	r3, r7, r1
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	236a      	movs	r3, #106	; 0x6a
 8005a22:	18fb      	adds	r3, r7, r3
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b2d9      	uxtb	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	225e      	movs	r2, #94	; 0x5e
 8005a40:	5a9b      	ldrh	r3, [r3, r2]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b299      	uxth	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	225e      	movs	r2, #94	; 0x5e
 8005a4c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a58:	2207      	movs	r2, #7
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d049      	beq.n	8005af2 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a60:	2201      	movs	r2, #1
 8005a62:	4013      	ands	r3, r2
 8005a64:	d010      	beq.n	8005a88 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005a66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2201      	movs	r2, #1
 8005a76:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2290      	movs	r2, #144	; 0x90
 8005a7c:	589b      	ldr	r3, [r3, r2]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2190      	movs	r1, #144	; 0x90
 8005a86:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d00f      	beq.n	8005ab0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a92:	2201      	movs	r2, #1
 8005a94:	4013      	ands	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2290      	movs	r2, #144	; 0x90
 8005aa4:	589b      	ldr	r3, [r3, r2]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2190      	movs	r1, #144	; 0x90
 8005aae:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d00f      	beq.n	8005ad8 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aba:	2201      	movs	r2, #1
 8005abc:	4013      	ands	r3, r2
 8005abe:	d00b      	beq.n	8005ad8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2290      	movs	r2, #144	; 0x90
 8005acc:	589b      	ldr	r3, [r3, r2]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2190      	movs	r1, #144	; 0x90
 8005ad6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2290      	movs	r2, #144	; 0x90
 8005adc:	589b      	ldr	r3, [r3, r2]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7ff f8ab 	bl	8004c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2290      	movs	r2, #144	; 0x90
 8005aee:	2100      	movs	r1, #0
 8005af0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	225e      	movs	r2, #94	; 0x5e
 8005af6:	5a9b      	ldrh	r3, [r3, r2]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d173      	bne.n	8005be6 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afe:	f3ef 8310 	mrs	r3, PRIMASK
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b08:	2301      	movs	r3, #1
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	f383 8810 	msr	PRIMASK, r3
}
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4961      	ldr	r1, [pc, #388]	; (8005ca4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005b20:	400a      	ands	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	f383 8810 	msr	PRIMASK, r3
}
 8005b2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b30:	f3ef 8310 	mrs	r3, PRIMASK
 8005b34:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b38:	657b      	str	r3, [r7, #84]	; 0x54
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b40:	f383 8810 	msr	PRIMASK, r3
}
 8005b44:	46c0      	nop			; (mov r8, r8)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4955      	ldr	r1, [pc, #340]	; (8005ca8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8005b52:	400a      	ands	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]
 8005b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b58:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5c:	f383 8810 	msr	PRIMASK, r3
}
 8005b60:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	228c      	movs	r2, #140	; 0x8c
 8005b66:	2120      	movs	r1, #32
 8005b68:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d12f      	bne.n	8005bde <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b84:	f3ef 8310 	mrs	r3, PRIMASK
 8005b88:	623b      	str	r3, [r7, #32]
  return(result);
 8005b8a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b8e:	2301      	movs	r3, #1
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	f383 8810 	msr	PRIMASK, r3
}
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2110      	movs	r1, #16
 8005ba6:	438a      	bics	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	f383 8810 	msr	PRIMASK, r3
}
 8005bb4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	2210      	movs	r2, #16
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d103      	bne.n	8005bcc <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2210      	movs	r2, #16
 8005bca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	225c      	movs	r2, #92	; 0x5c
 8005bd0:	5a9a      	ldrh	r2, [r3, r2]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0011      	movs	r1, r2
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f7ff f83a 	bl	8004c50 <HAL_UARTEx_RxEventCallback>
 8005bdc:	e003      	b.n	8005be6 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	0018      	movs	r0, r3
 8005be2:	f7fb fd8f 	bl	8001704 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005be6:	235e      	movs	r3, #94	; 0x5e
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <UART_RxISR_8BIT_FIFOEN+0x232>
 8005bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d000      	beq.n	8005bfa <UART_RxISR_8BIT_FIFOEN+0x232>
 8005bf8:	e709      	b.n	8005a0e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005bfa:	204e      	movs	r0, #78	; 0x4e
 8005bfc:	183b      	adds	r3, r7, r0
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	215e      	movs	r1, #94	; 0x5e
 8005c02:	5a52      	ldrh	r2, [r2, r1]
 8005c04:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c06:	0001      	movs	r1, r0
 8005c08:	187b      	adds	r3, r7, r1
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d044      	beq.n	8005c9a <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2268      	movs	r2, #104	; 0x68
 8005c14:	5a9b      	ldrh	r3, [r3, r2]
 8005c16:	187a      	adds	r2, r7, r1
 8005c18:	8812      	ldrh	r2, [r2, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d23d      	bcs.n	8005c9a <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c22:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c24:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c28:	2301      	movs	r3, #1
 8005c2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f383 8810 	msr	PRIMASK, r3
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	491b      	ldr	r1, [pc, #108]	; (8005cac <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8005c40:	400a      	ands	r2, r1
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f383 8810 	msr	PRIMASK, r3
}
 8005c4e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8005c54:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c56:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5a:	617b      	str	r3, [r7, #20]
  return(result);
 8005c5c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c60:	2301      	movs	r3, #1
 8005c62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	f383 8810 	msr	PRIMASK, r3
}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2120      	movs	r1, #32
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f383 8810 	msr	PRIMASK, r3
}
 8005c86:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c88:	e007      	b.n	8005c9a <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699a      	ldr	r2, [r3, #24]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2108      	movs	r1, #8
 8005c96:	430a      	orrs	r2, r1
 8005c98:	619a      	str	r2, [r3, #24]
}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b01c      	add	sp, #112	; 0x70
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	fffffeff 	.word	0xfffffeff
 8005ca8:	effffffe 	.word	0xeffffffe
 8005cac:	efffffff 	.word	0xefffffff
 8005cb0:	080056e1 	.word	0x080056e1

08005cb4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b09e      	sub	sp, #120	; 0x78
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005cbc:	2372      	movs	r3, #114	; 0x72
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	2160      	movs	r1, #96	; 0x60
 8005cc4:	5a52      	ldrh	r2, [r2, r1]
 8005cc6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	228c      	movs	r2, #140	; 0x8c
 8005ce4:	589b      	ldr	r3, [r3, r2]
 8005ce6:	2b22      	cmp	r3, #34	; 0x22
 8005ce8:	d000      	beq.n	8005cec <UART_RxISR_16BIT_FIFOEN+0x38>
 8005cea:	e144      	b.n	8005f76 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005cec:	2366      	movs	r3, #102	; 0x66
 8005cee:	18fb      	adds	r3, r7, r3
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	2168      	movs	r1, #104	; 0x68
 8005cf4:	5a52      	ldrh	r2, [r2, r1]
 8005cf6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cf8:	e0eb      	b.n	8005ed2 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d00:	2164      	movs	r1, #100	; 0x64
 8005d02:	187b      	adds	r3, r7, r1
 8005d04:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d0c:	187b      	adds	r3, r7, r1
 8005d0e:	2272      	movs	r2, #114	; 0x72
 8005d10:	18ba      	adds	r2, r7, r2
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	8812      	ldrh	r2, [r2, #0]
 8005d16:	4013      	ands	r3, r2
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d22:	1c9a      	adds	r2, r3, #2
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	225e      	movs	r2, #94	; 0x5e
 8005d2c:	5a9b      	ldrh	r3, [r3, r2]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b299      	uxth	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	225e      	movs	r2, #94	; 0x5e
 8005d38:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d44:	2207      	movs	r2, #7
 8005d46:	4013      	ands	r3, r2
 8005d48:	d049      	beq.n	8005dde <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d010      	beq.n	8005d74 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005d52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d54:	2380      	movs	r3, #128	; 0x80
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4013      	ands	r3, r2
 8005d5a:	d00b      	beq.n	8005d74 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2201      	movs	r2, #1
 8005d62:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2290      	movs	r2, #144	; 0x90
 8005d68:	589b      	ldr	r3, [r3, r2]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2190      	movs	r1, #144	; 0x90
 8005d72:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d76:	2202      	movs	r2, #2
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d00f      	beq.n	8005d9c <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d7e:	2201      	movs	r2, #1
 8005d80:	4013      	ands	r3, r2
 8005d82:	d00b      	beq.n	8005d9c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2290      	movs	r2, #144	; 0x90
 8005d90:	589b      	ldr	r3, [r3, r2]
 8005d92:	2204      	movs	r2, #4
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2190      	movs	r1, #144	; 0x90
 8005d9a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d9e:	2204      	movs	r2, #4
 8005da0:	4013      	ands	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005da6:	2201      	movs	r2, #1
 8005da8:	4013      	ands	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2204      	movs	r2, #4
 8005db2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2290      	movs	r2, #144	; 0x90
 8005db8:	589b      	ldr	r3, [r3, r2]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2190      	movs	r1, #144	; 0x90
 8005dc2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2290      	movs	r2, #144	; 0x90
 8005dc8:	589b      	ldr	r3, [r3, r2]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f7fe ff35 	bl	8004c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2290      	movs	r2, #144	; 0x90
 8005dda:	2100      	movs	r1, #0
 8005ddc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	225e      	movs	r2, #94	; 0x5e
 8005de2:	5a9b      	ldrh	r3, [r3, r2]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d173      	bne.n	8005ed2 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dea:	f3ef 8310 	mrs	r3, PRIMASK
 8005dee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005df4:	2301      	movs	r3, #1
 8005df6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfa:	f383 8810 	msr	PRIMASK, r3
}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4961      	ldr	r1, [pc, #388]	; (8005f90 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005e0c:	400a      	ands	r2, r1
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e12:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	f383 8810 	msr	PRIMASK, r3
}
 8005e1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e26:	2301      	movs	r3, #1
 8005e28:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e2c:	f383 8810 	msr	PRIMASK, r3
}
 8005e30:	46c0      	nop			; (mov r8, r8)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4955      	ldr	r1, [pc, #340]	; (8005f94 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8005e3e:	400a      	ands	r2, r1
 8005e40:	609a      	str	r2, [r3, #8]
 8005e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e44:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e48:	f383 8810 	msr	PRIMASK, r3
}
 8005e4c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	228c      	movs	r2, #140	; 0x8c
 8005e52:	2120      	movs	r1, #32
 8005e54:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d12f      	bne.n	8005eca <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e70:	f3ef 8310 	mrs	r3, PRIMASK
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e78:	657b      	str	r3, [r7, #84]	; 0x54
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	f383 8810 	msr	PRIMASK, r3
}
 8005e84:	46c0      	nop			; (mov r8, r8)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2110      	movs	r1, #16
 8005e92:	438a      	bics	r2, r1
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	f383 8810 	msr	PRIMASK, r3
}
 8005ea0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	2210      	movs	r2, #16
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d103      	bne.n	8005eb8 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2210      	movs	r2, #16
 8005eb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	225c      	movs	r2, #92	; 0x5c
 8005ebc:	5a9a      	ldrh	r2, [r3, r2]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	0011      	movs	r1, r2
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f7fe fec4 	bl	8004c50 <HAL_UARTEx_RxEventCallback>
 8005ec8:	e003      	b.n	8005ed2 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f7fb fc19 	bl	8001704 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ed2:	2366      	movs	r3, #102	; 0x66
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d004      	beq.n	8005ee6 <UART_RxISR_16BIT_FIFOEN+0x232>
 8005edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ede:	2220      	movs	r2, #32
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d000      	beq.n	8005ee6 <UART_RxISR_16BIT_FIFOEN+0x232>
 8005ee4:	e709      	b.n	8005cfa <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005ee6:	2052      	movs	r0, #82	; 0x52
 8005ee8:	183b      	adds	r3, r7, r0
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	215e      	movs	r1, #94	; 0x5e
 8005eee:	5a52      	ldrh	r2, [r2, r1]
 8005ef0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ef2:	0001      	movs	r1, r0
 8005ef4:	187b      	adds	r3, r7, r1
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d044      	beq.n	8005f86 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2268      	movs	r2, #104	; 0x68
 8005f00:	5a9b      	ldrh	r3, [r3, r2]
 8005f02:	187a      	adds	r2, r7, r1
 8005f04:	8812      	ldrh	r2, [r2, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d23d      	bcs.n	8005f86 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f10:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f14:	2301      	movs	r3, #1
 8005f16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f383 8810 	msr	PRIMASK, r3
}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	491b      	ldr	r1, [pc, #108]	; (8005f98 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	609a      	str	r2, [r3, #8]
 8005f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f383 8810 	msr	PRIMASK, r3
}
 8005f3a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a17      	ldr	r2, [pc, #92]	; (8005f9c <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8005f40:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f42:	f3ef 8310 	mrs	r3, PRIMASK
 8005f46:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f48:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f383 8810 	msr	PRIMASK, r3
}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2120      	movs	r1, #32
 8005f64:	430a      	orrs	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	f383 8810 	msr	PRIMASK, r3
}
 8005f72:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f74:	e007      	b.n	8005f86 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699a      	ldr	r2, [r3, #24]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2108      	movs	r1, #8
 8005f82:	430a      	orrs	r2, r1
 8005f84:	619a      	str	r2, [r3, #24]
}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	b01e      	add	sp, #120	; 0x78
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	fffffeff 	.word	0xfffffeff
 8005f94:	effffffe 	.word	0xeffffffe
 8005f98:	efffffff 	.word	0xefffffff
 8005f9c:	08005855 	.word	0x08005855

08005fa0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b002      	add	sp, #8
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005fc8:	46c0      	nop			; (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b002      	add	sp, #8
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2284      	movs	r2, #132	; 0x84
 8005fdc:	5c9b      	ldrb	r3, [r3, r2]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e027      	b.n	8006036 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2284      	movs	r2, #132	; 0x84
 8005fea:	2101      	movs	r1, #1
 8005fec:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2288      	movs	r2, #136	; 0x88
 8005ff2:	2124      	movs	r1, #36	; 0x24
 8005ff4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2101      	movs	r1, #1
 800600a:	438a      	bics	r2, r1
 800600c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006012:	4013      	ands	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2288      	movs	r2, #136	; 0x88
 8006028:	2120      	movs	r1, #32
 800602a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2284      	movs	r2, #132	; 0x84
 8006030:	2100      	movs	r1, #0
 8006032:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	0018      	movs	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	b004      	add	sp, #16
 800603c:	bd80      	pop	{r7, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	dfffffff 	.word	0xdfffffff

08006044 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2284      	movs	r2, #132	; 0x84
 8006052:	5c9b      	ldrb	r3, [r3, r2]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006058:	2302      	movs	r3, #2
 800605a:	e02e      	b.n	80060ba <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2284      	movs	r2, #132	; 0x84
 8006060:	2101      	movs	r1, #1
 8006062:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2288      	movs	r2, #136	; 0x88
 8006068:	2124      	movs	r1, #36	; 0x24
 800606a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2101      	movs	r1, #1
 8006080:	438a      	bics	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	08d9      	lsrs	r1, r3, #3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	0018      	movs	r0, r3
 800609c:	f000 f854 	bl	8006148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2288      	movs	r2, #136	; 0x88
 80060ac:	2120      	movs	r1, #32
 80060ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2284      	movs	r2, #132	; 0x84
 80060b4:	2100      	movs	r1, #0
 80060b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b004      	add	sp, #16
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2284      	movs	r2, #132	; 0x84
 80060d2:	5c9b      	ldrb	r3, [r3, r2]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060d8:	2302      	movs	r3, #2
 80060da:	e02f      	b.n	800613c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2284      	movs	r2, #132	; 0x84
 80060e0:	2101      	movs	r1, #1
 80060e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2288      	movs	r2, #136	; 0x88
 80060e8:	2124      	movs	r1, #36	; 0x24
 80060ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2101      	movs	r1, #1
 8006100:	438a      	bics	r2, r1
 8006102:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4a0e      	ldr	r2, [pc, #56]	; (8006144 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800610c:	4013      	ands	r3, r2
 800610e:	0019      	movs	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	0018      	movs	r0, r3
 800611e:	f000 f813 	bl	8006148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2288      	movs	r2, #136	; 0x88
 800612e:	2120      	movs	r1, #32
 8006130:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2284      	movs	r2, #132	; 0x84
 8006136:	2100      	movs	r1, #0
 8006138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b004      	add	sp, #16
 8006142:	bd80      	pop	{r7, pc}
 8006144:	f1ffffff 	.word	0xf1ffffff

08006148 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006154:	2b00      	cmp	r3, #0
 8006156:	d108      	bne.n	800616a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	226a      	movs	r2, #106	; 0x6a
 800615c:	2101      	movs	r1, #1
 800615e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2268      	movs	r2, #104	; 0x68
 8006164:	2101      	movs	r1, #1
 8006166:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006168:	e043      	b.n	80061f2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800616a:	260f      	movs	r6, #15
 800616c:	19bb      	adds	r3, r7, r6
 800616e:	2208      	movs	r2, #8
 8006170:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006172:	200e      	movs	r0, #14
 8006174:	183b      	adds	r3, r7, r0
 8006176:	2208      	movs	r2, #8
 8006178:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	0e5b      	lsrs	r3, r3, #25
 8006182:	b2da      	uxtb	r2, r3
 8006184:	240d      	movs	r4, #13
 8006186:	193b      	adds	r3, r7, r4
 8006188:	2107      	movs	r1, #7
 800618a:	400a      	ands	r2, r1
 800618c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	0f5b      	lsrs	r3, r3, #29
 8006196:	b2da      	uxtb	r2, r3
 8006198:	250c      	movs	r5, #12
 800619a:	197b      	adds	r3, r7, r5
 800619c:	2107      	movs	r1, #7
 800619e:	400a      	ands	r2, r1
 80061a0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061a2:	183b      	adds	r3, r7, r0
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	197a      	adds	r2, r7, r5
 80061a8:	7812      	ldrb	r2, [r2, #0]
 80061aa:	4914      	ldr	r1, [pc, #80]	; (80061fc <UARTEx_SetNbDataToProcess+0xb4>)
 80061ac:	5c8a      	ldrb	r2, [r1, r2]
 80061ae:	435a      	muls	r2, r3
 80061b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80061b2:	197b      	adds	r3, r7, r5
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	4a12      	ldr	r2, [pc, #72]	; (8006200 <UARTEx_SetNbDataToProcess+0xb8>)
 80061b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061ba:	0019      	movs	r1, r3
 80061bc:	f7fa f842 	bl	8000244 <__divsi3>
 80061c0:	0003      	movs	r3, r0
 80061c2:	b299      	uxth	r1, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	226a      	movs	r2, #106	; 0x6a
 80061c8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061ca:	19bb      	adds	r3, r7, r6
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	193a      	adds	r2, r7, r4
 80061d0:	7812      	ldrb	r2, [r2, #0]
 80061d2:	490a      	ldr	r1, [pc, #40]	; (80061fc <UARTEx_SetNbDataToProcess+0xb4>)
 80061d4:	5c8a      	ldrb	r2, [r1, r2]
 80061d6:	435a      	muls	r2, r3
 80061d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80061da:	193b      	adds	r3, r7, r4
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	4a08      	ldr	r2, [pc, #32]	; (8006200 <UARTEx_SetNbDataToProcess+0xb8>)
 80061e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061e2:	0019      	movs	r1, r3
 80061e4:	f7fa f82e 	bl	8000244 <__divsi3>
 80061e8:	0003      	movs	r3, r0
 80061ea:	b299      	uxth	r1, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2268      	movs	r2, #104	; 0x68
 80061f0:	5299      	strh	r1, [r3, r2]
}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b005      	add	sp, #20
 80061f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	080097dc 	.word	0x080097dc
 8006200:	080097e4 	.word	0x080097e4

08006204 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	0002      	movs	r2, r0
 800620c:	1dbb      	adds	r3, r7, #6
 800620e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006214:	1dbb      	adds	r3, r7, #6
 8006216:	2200      	movs	r2, #0
 8006218:	5e9b      	ldrsh	r3, [r3, r2]
 800621a:	2b84      	cmp	r3, #132	; 0x84
 800621c:	d006      	beq.n	800622c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800621e:	1dbb      	adds	r3, r7, #6
 8006220:	2200      	movs	r2, #0
 8006222:	5e9a      	ldrsh	r2, [r3, r2]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	18d3      	adds	r3, r2, r3
 8006228:	3303      	adds	r3, #3
 800622a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800622c:	68fb      	ldr	r3, [r7, #12]
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b004      	add	sp, #16
 8006234:	bd80      	pop	{r7, pc}

08006236 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800623a:	f000 fe55 	bl	8006ee8 <vTaskStartScheduler>
  
  return osOK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	0018      	movs	r0, r3
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006248:	b087      	sub	sp, #28
 800624a:	af02      	add	r7, sp, #8
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685c      	ldr	r4, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800625c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2208      	movs	r2, #8
 8006262:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006264:	0018      	movs	r0, r3
 8006266:	f7ff ffcd 	bl	8006204 <makeFreeRtosPriority>
 800626a:	0001      	movs	r1, r0
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	230c      	movs	r3, #12
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	9100      	str	r1, [sp, #0]
 8006276:	0013      	movs	r3, r2
 8006278:	0032      	movs	r2, r6
 800627a:	0029      	movs	r1, r5
 800627c:	0020      	movs	r0, r4
 800627e:	f000 fc7b 	bl	8006b78 <xTaskCreate>
 8006282:	0003      	movs	r3, r0
 8006284:	2b01      	cmp	r3, #1
 8006286:	d001      	beq.n	800628c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	e000      	b.n	800628e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800628c:	68fb      	ldr	r3, [r7, #12]
}
 800628e:	0018      	movs	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	b005      	add	sp, #20
 8006294:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006296 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <osDelay+0x16>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	e000      	b.n	80062ae <osDelay+0x18>
 80062ac:	2301      	movs	r3, #1
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 fdf4 	bl	8006e9c <vTaskDelay>
  
  return osOK;
 80062b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062b6:	0018      	movs	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b004      	add	sp, #16
 80062bc:	bd80      	pop	{r7, pc}

080062be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3308      	adds	r3, #8
 80062ca:	001a      	movs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	4252      	negs	r2, r2
 80062d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3308      	adds	r3, #8
 80062dc:	001a      	movs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3308      	adds	r3, #8
 80062e6:	001a      	movs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b002      	add	sp, #8
 80062f8:	bd80      	pop	{r7, pc}

080062fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b002      	add	sp, #8
 800630e:	bd80      	pop	{r7, pc}

08006310 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	601a      	str	r2, [r3, #0]
}
 800634c:	46c0      	nop			; (mov r8, r8)
 800634e:	46bd      	mov	sp, r7
 8006350:	b004      	add	sp, #16
 8006352:	bd80      	pop	{r7, pc}

08006354 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	3301      	adds	r3, #1
 8006368:	d103      	bne.n	8006372 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e00c      	b.n	800638c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3308      	adds	r3, #8
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	e002      	b.n	8006380 <vListInsert+0x2c>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	429a      	cmp	r2, r3
 800638a:	d2f6      	bcs.n	800637a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	601a      	str	r2, [r3, #0]
}
 80063b8:	46c0      	nop			; (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b004      	add	sp, #16
 80063be:	bd80      	pop	{r7, pc}

080063c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6892      	ldr	r2, [r2, #8]
 80063d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6852      	ldr	r2, [r2, #4]
 80063e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d103      	bne.n	80063f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	1e5a      	subs	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
}
 8006408:	0018      	movs	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	b004      	add	sp, #16
 800640e:	bd80      	pop	{r7, pc}

08006410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <xQueueGenericReset+0x18>
 8006424:	b672      	cpsid	i
 8006426:	e7fe      	b.n	8006426 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006428:	f001 fb1a 	bl	8007a60 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	434b      	muls	r3, r1
 800643a:	18d2      	adds	r2, r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006456:	1e59      	subs	r1, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	434b      	muls	r3, r1
 800645e:	18d2      	adds	r2, r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2244      	movs	r2, #68	; 0x44
 8006468:	21ff      	movs	r1, #255	; 0xff
 800646a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2245      	movs	r2, #69	; 0x45
 8006470:	21ff      	movs	r1, #255	; 0xff
 8006472:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10d      	bne.n	8006496 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d013      	beq.n	80064aa <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3310      	adds	r3, #16
 8006486:	0018      	movs	r0, r3
 8006488:	f000 ff1c 	bl	80072c4 <xTaskRemoveFromEventList>
 800648c:	1e03      	subs	r3, r0, #0
 800648e:	d00c      	beq.n	80064aa <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006490:	f001 fad6 	bl	8007a40 <vPortYield>
 8006494:	e009      	b.n	80064aa <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3310      	adds	r3, #16
 800649a:	0018      	movs	r0, r3
 800649c:	f7ff ff0f 	bl	80062be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3324      	adds	r3, #36	; 0x24
 80064a4:	0018      	movs	r0, r3
 80064a6:	f7ff ff0a 	bl	80062be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064aa:	f001 faeb 	bl	8007a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064ae:	2301      	movs	r3, #1
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b004      	add	sp, #16
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80064b8:	b590      	push	{r4, r7, lr}
 80064ba:	b08b      	sub	sp, #44	; 0x2c
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	1dfb      	adds	r3, r7, #7
 80064c4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <xQueueGenericCreate+0x18>
 80064cc:	b672      	cpsid	i
 80064ce:	e7fe      	b.n	80064ce <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4353      	muls	r3, r2
 80064d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	3348      	adds	r3, #72	; 0x48
 80064dc:	0018      	movs	r0, r3
 80064de:	f001 fb57 	bl	8007b90 <pvPortMalloc>
 80064e2:	0003      	movs	r3, r0
 80064e4:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00e      	beq.n	800650a <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	3348      	adds	r3, #72	; 0x48
 80064f4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064f6:	1dfb      	adds	r3, r7, #7
 80064f8:	781c      	ldrb	r4, [r3, #0]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	0023      	movs	r3, r4
 8006506:	f000 f805 	bl	8006514 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800650a:	69bb      	ldr	r3, [r7, #24]
	}
 800650c:	0018      	movs	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	b009      	add	sp, #36	; 0x24
 8006512:	bd90      	pop	{r4, r7, pc}

08006514 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	001a      	movs	r2, r3
 8006522:	1cfb      	adds	r3, r7, #3
 8006524:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d103      	bne.n	8006534 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	e002      	b.n	800653a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2101      	movs	r1, #1
 800654a:	0018      	movs	r0, r3
 800654c:	f7ff ff60 	bl	8006410 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006550:	46c0      	nop			; (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b004      	add	sp, #16
 8006556:	bd80      	pop	{r7, pc}

08006558 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <xQueueGenericSend+0x20>
 8006574:	b672      	cpsid	i
 8006576:	e7fe      	b.n	8006576 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <xQueueGenericSend+0x2e>
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <xQueueGenericSend+0x32>
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <xQueueGenericSend+0x34>
 800658a:	2300      	movs	r3, #0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <xQueueGenericSend+0x3c>
 8006590:	b672      	cpsid	i
 8006592:	e7fe      	b.n	8006592 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d103      	bne.n	80065a2 <xQueueGenericSend+0x4a>
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <xQueueGenericSend+0x4e>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <xQueueGenericSend+0x50>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <xQueueGenericSend+0x58>
 80065ac:	b672      	cpsid	i
 80065ae:	e7fe      	b.n	80065ae <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065b0:	f001 f804 	bl	80075bc <xTaskGetSchedulerState>
 80065b4:	1e03      	subs	r3, r0, #0
 80065b6:	d102      	bne.n	80065be <xQueueGenericSend+0x66>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <xQueueGenericSend+0x6a>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <xQueueGenericSend+0x6c>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <xQueueGenericSend+0x74>
 80065c8:	b672      	cpsid	i
 80065ca:	e7fe      	b.n	80065ca <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065cc:	f001 fa48 	bl	8007a60 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d8:	429a      	cmp	r2, r3
 80065da:	d302      	bcc.n	80065e2 <xQueueGenericSend+0x8a>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d11e      	bne.n	8006620 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f000 f9ce 	bl	800698a <prvCopyDataToQueue>
 80065ee:	0003      	movs	r3, r0
 80065f0:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	3324      	adds	r3, #36	; 0x24
 80065fe:	0018      	movs	r0, r3
 8006600:	f000 fe60 	bl	80072c4 <xTaskRemoveFromEventList>
 8006604:	1e03      	subs	r3, r0, #0
 8006606:	d007      	beq.n	8006618 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006608:	f001 fa1a 	bl	8007a40 <vPortYield>
 800660c:	e004      	b.n	8006618 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006614:	f001 fa14 	bl	8007a40 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006618:	f001 fa34 	bl	8007a84 <vPortExitCritical>
				return pdPASS;
 800661c:	2301      	movs	r3, #1
 800661e:	e05b      	b.n	80066d8 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d103      	bne.n	800662e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006626:	f001 fa2d 	bl	8007a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800662a:	2300      	movs	r3, #0
 800662c:	e054      	b.n	80066d8 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006634:	2314      	movs	r3, #20
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	0018      	movs	r0, r3
 800663a:	f000 fe9f 	bl	800737c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800663e:	2301      	movs	r3, #1
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006642:	f001 fa1f 	bl	8007a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006646:	f000 fc85 	bl	8006f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800664a:	f001 fa09 	bl	8007a60 <vPortEnterCritical>
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	2244      	movs	r2, #68	; 0x44
 8006652:	5c9b      	ldrb	r3, [r3, r2]
 8006654:	b25b      	sxtb	r3, r3
 8006656:	3301      	adds	r3, #1
 8006658:	d103      	bne.n	8006662 <xQueueGenericSend+0x10a>
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	2244      	movs	r2, #68	; 0x44
 800665e:	2100      	movs	r1, #0
 8006660:	5499      	strb	r1, [r3, r2]
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	2245      	movs	r2, #69	; 0x45
 8006666:	5c9b      	ldrb	r3, [r3, r2]
 8006668:	b25b      	sxtb	r3, r3
 800666a:	3301      	adds	r3, #1
 800666c:	d103      	bne.n	8006676 <xQueueGenericSend+0x11e>
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	2245      	movs	r2, #69	; 0x45
 8006672:	2100      	movs	r1, #0
 8006674:	5499      	strb	r1, [r3, r2]
 8006676:	f001 fa05 	bl	8007a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800667a:	1d3a      	adds	r2, r7, #4
 800667c:	2314      	movs	r3, #20
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	0011      	movs	r1, r2
 8006682:	0018      	movs	r0, r3
 8006684:	f000 fe8e 	bl	80073a4 <xTaskCheckForTimeOut>
 8006688:	1e03      	subs	r3, r0, #0
 800668a:	d11e      	bne.n	80066ca <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	0018      	movs	r0, r3
 8006690:	f000 fa5a 	bl	8006b48 <prvIsQueueFull>
 8006694:	1e03      	subs	r3, r0, #0
 8006696:	d011      	beq.n	80066bc <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	3310      	adds	r3, #16
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	0011      	movs	r1, r2
 80066a0:	0018      	movs	r0, r3
 80066a2:	f000 fdf1 	bl	8007288 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	0018      	movs	r0, r3
 80066aa:	f000 f9d9 	bl	8006a60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066ae:	f000 fc5d 	bl	8006f6c <xTaskResumeAll>
 80066b2:	1e03      	subs	r3, r0, #0
 80066b4:	d18a      	bne.n	80065cc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80066b6:	f001 f9c3 	bl	8007a40 <vPortYield>
 80066ba:	e787      	b.n	80065cc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	0018      	movs	r0, r3
 80066c0:	f000 f9ce 	bl	8006a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066c4:	f000 fc52 	bl	8006f6c <xTaskResumeAll>
 80066c8:	e780      	b.n	80065cc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	0018      	movs	r0, r3
 80066ce:	f000 f9c7 	bl	8006a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066d2:	f000 fc4b 	bl	8006f6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066d8:	0018      	movs	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	b00a      	add	sp, #40	; 0x28
 80066de:	bd80      	pop	{r7, pc}

080066e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <xQueueGiveFromISR+0x18>
 80066f4:	b672      	cpsid	i
 80066f6:	e7fe      	b.n	80066f6 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <xQueueGiveFromISR+0x24>
 8006700:	b672      	cpsid	i
 8006702:	e7fe      	b.n	8006702 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <xQueueGiveFromISR+0x34>
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <xQueueGiveFromISR+0x38>
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <xQueueGiveFromISR+0x3a>
 8006718:	2300      	movs	r3, #0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <xQueueGiveFromISR+0x42>
 800671e:	b672      	cpsid	i
 8006720:	e7fe      	b.n	8006720 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006722:	f001 f9c7 	bl	8007ab4 <ulSetInterruptMaskFromISR>
 8006726:	0003      	movs	r3, r0
 8006728:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d22c      	bcs.n	8006794 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800673a:	200f      	movs	r0, #15
 800673c:	183b      	adds	r3, r7, r0
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	2145      	movs	r1, #69	; 0x45
 8006742:	5c52      	ldrb	r2, [r2, r1]
 8006744:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800674e:	183b      	adds	r3, r7, r0
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	b25b      	sxtb	r3, r3
 8006754:	3301      	adds	r3, #1
 8006756:	d111      	bne.n	800677c <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	2b00      	cmp	r3, #0
 800675e:	d016      	beq.n	800678e <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	3324      	adds	r3, #36	; 0x24
 8006764:	0018      	movs	r0, r3
 8006766:	f000 fdad 	bl	80072c4 <xTaskRemoveFromEventList>
 800676a:	1e03      	subs	r3, r0, #0
 800676c:	d00f      	beq.n	800678e <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00c      	beq.n	800678e <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2201      	movs	r2, #1
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e008      	b.n	800678e <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800677c:	230f      	movs	r3, #15
 800677e:	18fb      	adds	r3, r7, r3
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	3301      	adds	r3, #1
 8006784:	b2db      	uxtb	r3, r3
 8006786:	b259      	sxtb	r1, r3
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2245      	movs	r2, #69	; 0x45
 800678c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800678e:	2301      	movs	r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	e001      	b.n	8006798 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006794:	2300      	movs	r3, #0
 8006796:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	0018      	movs	r0, r3
 800679c:	f001 f990 	bl	8007ac0 <vClearInterruptMaskFromISR>

	return xReturn;
 80067a0:	69fb      	ldr	r3, [r7, #28]
}
 80067a2:	0018      	movs	r0, r3
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b008      	add	sp, #32
 80067a8:	bd80      	pop	{r7, pc}

080067aa <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b08a      	sub	sp, #40	; 0x28
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80067bc:	2300      	movs	r3, #0
 80067be:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <xQueueSemaphoreTake+0x20>
 80067c6:	b672      	cpsid	i
 80067c8:	e7fe      	b.n	80067c8 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <xQueueSemaphoreTake+0x2c>
 80067d2:	b672      	cpsid	i
 80067d4:	e7fe      	b.n	80067d4 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067d6:	f000 fef1 	bl	80075bc <xTaskGetSchedulerState>
 80067da:	1e03      	subs	r3, r0, #0
 80067dc:	d102      	bne.n	80067e4 <xQueueSemaphoreTake+0x3a>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <xQueueSemaphoreTake+0x3e>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <xQueueSemaphoreTake+0x40>
 80067e8:	2300      	movs	r3, #0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <xQueueSemaphoreTake+0x48>
 80067ee:	b672      	cpsid	i
 80067f0:	e7fe      	b.n	80067f0 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067f2:	f001 f935 	bl	8007a60 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01d      	beq.n	800683e <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	1e5a      	subs	r2, r3, #1
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006812:	f001 f823 	bl	800785c <pvTaskIncrementMutexHeldCount>
 8006816:	0002      	movs	r2, r0
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d008      	beq.n	8006836 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	3310      	adds	r3, #16
 8006828:	0018      	movs	r0, r3
 800682a:	f000 fd4b 	bl	80072c4 <xTaskRemoveFromEventList>
 800682e:	1e03      	subs	r3, r0, #0
 8006830:	d001      	beq.n	8006836 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006832:	f001 f905 	bl	8007a40 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006836:	f001 f925 	bl	8007a84 <vPortExitCritical>
				return pdPASS;
 800683a:	2301      	movs	r3, #1
 800683c:	e08b      	b.n	8006956 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d108      	bne.n	8006856 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <xQueueSemaphoreTake+0xa4>
 800684a:	b672      	cpsid	i
 800684c:	e7fe      	b.n	800684c <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800684e:	f001 f919 	bl	8007a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006852:	2300      	movs	r3, #0
 8006854:	e07f      	b.n	8006956 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800685c:	230c      	movs	r3, #12
 800685e:	18fb      	adds	r3, r7, r3
 8006860:	0018      	movs	r0, r3
 8006862:	f000 fd8b 	bl	800737c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006866:	2301      	movs	r3, #1
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800686a:	f001 f90b 	bl	8007a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800686e:	f000 fb71 	bl	8006f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006872:	f001 f8f5 	bl	8007a60 <vPortEnterCritical>
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	2244      	movs	r2, #68	; 0x44
 800687a:	5c9b      	ldrb	r3, [r3, r2]
 800687c:	b25b      	sxtb	r3, r3
 800687e:	3301      	adds	r3, #1
 8006880:	d103      	bne.n	800688a <xQueueSemaphoreTake+0xe0>
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	2244      	movs	r2, #68	; 0x44
 8006886:	2100      	movs	r1, #0
 8006888:	5499      	strb	r1, [r3, r2]
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	2245      	movs	r2, #69	; 0x45
 800688e:	5c9b      	ldrb	r3, [r3, r2]
 8006890:	b25b      	sxtb	r3, r3
 8006892:	3301      	adds	r3, #1
 8006894:	d103      	bne.n	800689e <xQueueSemaphoreTake+0xf4>
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	2245      	movs	r2, #69	; 0x45
 800689a:	2100      	movs	r1, #0
 800689c:	5499      	strb	r1, [r3, r2]
 800689e:	f001 f8f1 	bl	8007a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068a2:	003a      	movs	r2, r7
 80068a4:	230c      	movs	r3, #12
 80068a6:	18fb      	adds	r3, r7, r3
 80068a8:	0011      	movs	r1, r2
 80068aa:	0018      	movs	r0, r3
 80068ac:	f000 fd7a 	bl	80073a4 <xTaskCheckForTimeOut>
 80068b0:	1e03      	subs	r3, r0, #0
 80068b2:	d12e      	bne.n	8006912 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	0018      	movs	r0, r3
 80068b8:	f000 f930 	bl	8006b1c <prvIsQueueEmpty>
 80068bc:	1e03      	subs	r3, r0, #0
 80068be:	d021      	beq.n	8006904 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 80068c8:	f001 f8ca 	bl	8007a60 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 fe8f 	bl	80075f4 <xTaskPriorityInherit>
 80068d6:	0003      	movs	r3, r0
 80068d8:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 80068da:	f001 f8d3 	bl	8007a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	3324      	adds	r3, #36	; 0x24
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	0011      	movs	r1, r2
 80068e6:	0018      	movs	r0, r3
 80068e8:	f000 fcce 	bl	8007288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	0018      	movs	r0, r3
 80068f0:	f000 f8b6 	bl	8006a60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068f4:	f000 fb3a 	bl	8006f6c <xTaskResumeAll>
 80068f8:	1e03      	subs	r3, r0, #0
 80068fa:	d000      	beq.n	80068fe <xQueueSemaphoreTake+0x154>
 80068fc:	e779      	b.n	80067f2 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 80068fe:	f001 f89f 	bl	8007a40 <vPortYield>
 8006902:	e776      	b.n	80067f2 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	0018      	movs	r0, r3
 8006908:	f000 f8aa 	bl	8006a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800690c:	f000 fb2e 	bl	8006f6c <xTaskResumeAll>
 8006910:	e76f      	b.n	80067f2 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	0018      	movs	r0, r3
 8006916:	f000 f8a3 	bl	8006a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800691a:	f000 fb27 	bl	8006f6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	0018      	movs	r0, r3
 8006922:	f000 f8fb 	bl	8006b1c <prvIsQueueEmpty>
 8006926:	1e03      	subs	r3, r0, #0
 8006928:	d100      	bne.n	800692c <xQueueSemaphoreTake+0x182>
 800692a:	e762      	b.n	80067f2 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d010      	beq.n	8006954 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8006932:	f001 f895 	bl	8007a60 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	0018      	movs	r0, r3
 800693a:	f000 f810 	bl	800695e <prvGetDisinheritPriorityAfterTimeout>
 800693e:	0003      	movs	r3, r0
 8006940:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	0011      	movs	r1, r2
 800694a:	0018      	movs	r0, r3
 800694c:	f000 ff16 	bl	800777c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006950:	f001 f898 	bl	8007a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006956:	0018      	movs	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	b00a      	add	sp, #40	; 0x28
 800695c:	bd80      	pop	{r7, pc}

0800695e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	2b00      	cmp	r3, #0
 800696c:	d006      	beq.n	800697c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2207      	movs	r2, #7
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e001      	b.n	8006980 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006980:	68fb      	ldr	r3, [r7, #12]
	}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b004      	add	sp, #16
 8006988:	bd80      	pop	{r7, pc}

0800698a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b086      	sub	sp, #24
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10e      	bne.n	80069c6 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d14e      	bne.n	8006a4e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f000 fe85 	bl	80076c4 <xTaskPriorityDisinherit>
 80069ba:	0003      	movs	r3, r0
 80069bc:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	609a      	str	r2, [r3, #8]
 80069c4:	e043      	b.n	8006a4e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d119      	bne.n	8006a00 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6858      	ldr	r0, [r3, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	0019      	movs	r1, r3
 80069d8:	f001 fe8f 	bl	80086fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	18d2      	adds	r2, r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d32b      	bcc.n	8006a4e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	605a      	str	r2, [r3, #4]
 80069fe:	e026      	b.n	8006a4e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68d8      	ldr	r0, [r3, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	f001 fe75 	bl	80086fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	425b      	negs	r3, r3
 8006a1a:	18d2      	adds	r2, r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d207      	bcs.n	8006a3c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a34:	425b      	negs	r3, r3
 8006a36:	18d2      	adds	r2, r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d105      	bne.n	8006a4e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a56:	697b      	ldr	r3, [r7, #20]
}
 8006a58:	0018      	movs	r0, r3
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b006      	add	sp, #24
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a68:	f000 fffa 	bl	8007a60 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a6c:	230f      	movs	r3, #15
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	2145      	movs	r1, #69	; 0x45
 8006a74:	5c52      	ldrb	r2, [r2, r1]
 8006a76:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a78:	e013      	b.n	8006aa2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d016      	beq.n	8006ab0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3324      	adds	r3, #36	; 0x24
 8006a86:	0018      	movs	r0, r3
 8006a88:	f000 fc1c 	bl	80072c4 <xTaskRemoveFromEventList>
 8006a8c:	1e03      	subs	r3, r0, #0
 8006a8e:	d001      	beq.n	8006a94 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a90:	f000 fcd8 	bl	8007444 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a94:	210f      	movs	r1, #15
 8006a96:	187b      	adds	r3, r7, r1
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	187b      	adds	r3, r7, r1
 8006aa0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006aa2:	230f      	movs	r3, #15
 8006aa4:	18fb      	adds	r3, r7, r3
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	b25b      	sxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	dce5      	bgt.n	8006a7a <prvUnlockQueue+0x1a>
 8006aae:	e000      	b.n	8006ab2 <prvUnlockQueue+0x52>
					break;
 8006ab0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2245      	movs	r2, #69	; 0x45
 8006ab6:	21ff      	movs	r1, #255	; 0xff
 8006ab8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006aba:	f000 ffe3 	bl	8007a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006abe:	f000 ffcf 	bl	8007a60 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ac2:	230e      	movs	r3, #14
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	2144      	movs	r1, #68	; 0x44
 8006aca:	5c52      	ldrb	r2, [r2, r1]
 8006acc:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ace:	e013      	b.n	8006af8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d016      	beq.n	8006b06 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3310      	adds	r3, #16
 8006adc:	0018      	movs	r0, r3
 8006ade:	f000 fbf1 	bl	80072c4 <xTaskRemoveFromEventList>
 8006ae2:	1e03      	subs	r3, r0, #0
 8006ae4:	d001      	beq.n	8006aea <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006ae6:	f000 fcad 	bl	8007444 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006aea:	210e      	movs	r1, #14
 8006aec:	187b      	adds	r3, r7, r1
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	187b      	adds	r3, r7, r1
 8006af6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006af8:	230e      	movs	r3, #14
 8006afa:	18fb      	adds	r3, r7, r3
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b25b      	sxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dce5      	bgt.n	8006ad0 <prvUnlockQueue+0x70>
 8006b04:	e000      	b.n	8006b08 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006b06:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2244      	movs	r2, #68	; 0x44
 8006b0c:	21ff      	movs	r1, #255	; 0xff
 8006b0e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006b10:	f000 ffb8 	bl	8007a84 <vPortExitCritical>
}
 8006b14:	46c0      	nop			; (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b004      	add	sp, #16
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b24:	f000 ff9c 	bl	8007a60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b30:	2301      	movs	r3, #1
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	e001      	b.n	8006b3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b3a:	f000 ffa3 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
}
 8006b40:	0018      	movs	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	b004      	add	sp, #16
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b50:	f000 ff86 	bl	8007a60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d102      	bne.n	8006b66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b60:	2301      	movs	r3, #1
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e001      	b.n	8006b6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b6a:	f000 ff8b 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
}
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b004      	add	sp, #16
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b78:	b590      	push	{r4, r7, lr}
 8006b7a:	b08d      	sub	sp, #52	; 0x34
 8006b7c:	af04      	add	r7, sp, #16
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	1dbb      	adds	r3, r7, #6
 8006b86:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b88:	1dbb      	adds	r3, r7, #6
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f000 fffe 	bl	8007b90 <pvPortMalloc>
 8006b94:	0003      	movs	r3, r0
 8006b96:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d010      	beq.n	8006bc0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b9e:	2054      	movs	r0, #84	; 0x54
 8006ba0:	f000 fff6 	bl	8007b90 <pvPortMalloc>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8006bb4:	e006      	b.n	8006bc4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f001 f895 	bl	8007ce8 <vPortFree>
 8006bbe:	e001      	b.n	8006bc4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bca:	1dbb      	adds	r3, r7, #6
 8006bcc:	881a      	ldrh	r2, [r3, #0]
 8006bce:	683c      	ldr	r4, [r7, #0]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9303      	str	r3, [sp, #12]
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	9302      	str	r3, [sp, #8]
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	0023      	movs	r3, r4
 8006be6:	f000 f80f 	bl	8006c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	0018      	movs	r0, r3
 8006bee:	f000 f88d 	bl	8006d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e002      	b.n	8006bfe <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	425b      	negs	r3, r3
 8006bfc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
	}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b009      	add	sp, #36	; 0x24
 8006c06:	bd90      	pop	{r4, r7, pc}

08006c08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	493a      	ldr	r1, [pc, #232]	; (8006d08 <prvInitialiseNewTask+0x100>)
 8006c1e:	468c      	mov	ip, r1
 8006c20:	4463      	add	r3, ip
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	18d3      	adds	r3, r2, r3
 8006c26:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2207      	movs	r2, #7
 8006c2c:	4393      	bics	r3, r2
 8006c2e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	2207      	movs	r2, #7
 8006c34:	4013      	ands	r3, r2
 8006c36:	d001      	beq.n	8006c3c <prvInitialiseNewTask+0x34>
 8006c38:	b672      	cpsid	i
 8006c3a:	e7fe      	b.n	8006c3a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d020      	beq.n	8006c84 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	e013      	b.n	8006c70 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	18d3      	adds	r3, r2, r3
 8006c4e:	7818      	ldrb	r0, [r3, #0]
 8006c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c52:	2134      	movs	r1, #52	; 0x34
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	18d3      	adds	r3, r2, r3
 8006c58:	185b      	adds	r3, r3, r1
 8006c5a:	1c02      	adds	r2, r0, #0
 8006c5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	18d3      	adds	r3, r2, r3
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d006      	beq.n	8006c78 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b0f      	cmp	r3, #15
 8006c74:	d9e8      	bls.n	8006c48 <prvInitialiseNewTask+0x40>
 8006c76:	e000      	b.n	8006c7a <prvInitialiseNewTask+0x72>
			{
				break;
 8006c78:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	2243      	movs	r2, #67	; 0x43
 8006c7e:	2100      	movs	r1, #0
 8006c80:	5499      	strb	r1, [r3, r2]
 8006c82:	e003      	b.n	8006c8c <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	2234      	movs	r2, #52	; 0x34
 8006c88:	2100      	movs	r1, #0
 8006c8a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	2b06      	cmp	r3, #6
 8006c90:	d901      	bls.n	8006c96 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c92:	2306      	movs	r3, #6
 8006c94:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	6a3a      	ldr	r2, [r7, #32]
 8006c9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	6a3a      	ldr	r2, [r7, #32]
 8006ca0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	3304      	adds	r3, #4
 8006cac:	0018      	movs	r0, r3
 8006cae:	f7ff fb24 	bl	80062fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	3318      	adds	r3, #24
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f7ff fb1f 	bl	80062fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	2207      	movs	r2, #7
 8006cc6:	1ad2      	subs	r2, r2, r3
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	2250      	movs	r2, #80	; 0x50
 8006cdc:	2100      	movs	r1, #0
 8006cde:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	68f9      	ldr	r1, [r7, #12]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f000 fe1e 	bl	8007928 <pxPortInitialiseStack>
 8006cec:	0002      	movs	r2, r0
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	46bd      	mov	sp, r7
 8006d02:	b006      	add	sp, #24
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	3fffffff 	.word	0x3fffffff

08006d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d14:	f000 fea4 	bl	8007a60 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d18:	4b28      	ldr	r3, [pc, #160]	; (8006dbc <prvAddNewTaskToReadyList+0xb0>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	4b27      	ldr	r3, [pc, #156]	; (8006dbc <prvAddNewTaskToReadyList+0xb0>)
 8006d20:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006d22:	4b27      	ldr	r3, [pc, #156]	; (8006dc0 <prvAddNewTaskToReadyList+0xb4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d2a:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <prvAddNewTaskToReadyList+0xb4>)
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d30:	4b22      	ldr	r3, [pc, #136]	; (8006dbc <prvAddNewTaskToReadyList+0xb0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d110      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d38:	f000 fb9e 	bl	8007478 <prvInitialiseTaskLists>
 8006d3c:	e00d      	b.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d3e:	4b21      	ldr	r3, [pc, #132]	; (8006dc4 <prvAddNewTaskToReadyList+0xb8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d46:	4b1e      	ldr	r3, [pc, #120]	; (8006dc0 <prvAddNewTaskToReadyList+0xb4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d802      	bhi.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d54:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <prvAddNewTaskToReadyList+0xb4>)
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d5a:	4b1b      	ldr	r3, [pc, #108]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <prvAddNewTaskToReadyList+0xbc>)
 8006d62:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <prvAddNewTaskToReadyList+0xc0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d903      	bls.n	8006d78 <prvAddNewTaskToReadyList+0x6c>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d74:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <prvAddNewTaskToReadyList+0xc0>)
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	0013      	movs	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	189b      	adds	r3, r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4a12      	ldr	r2, [pc, #72]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d86:	189a      	adds	r2, r3, r2
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	0019      	movs	r1, r3
 8006d8e:	0010      	movs	r0, r2
 8006d90:	f7ff fabe 	bl	8006310 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d94:	f000 fe76 	bl	8007a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d98:	4b0a      	ldr	r3, [pc, #40]	; (8006dc4 <prvAddNewTaskToReadyList+0xb8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d008      	beq.n	8006db2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <prvAddNewTaskToReadyList+0xb4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d201      	bcs.n	8006db2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006dae:	f000 fe47 	bl	8007a40 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	46bd      	mov	sp, r7
 8006db6:	b002      	add	sp, #8
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	20000804 	.word	0x20000804
 8006dc0:	20000704 	.word	0x20000704
 8006dc4:	20000810 	.word	0x20000810
 8006dc8:	20000820 	.word	0x20000820
 8006dcc:	2000080c 	.word	0x2000080c
 8006dd0:	20000708 	.word	0x20000708

08006dd4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006ddc:	f000 fe40 	bl	8007a60 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d102      	bne.n	8006dec <vTaskDelete+0x18>
 8006de6:	4b26      	ldr	r3, [pc, #152]	; (8006e80 <vTaskDelete+0xac>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	e000      	b.n	8006dee <vTaskDelete+0x1a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3304      	adds	r3, #4
 8006df4:	0018      	movs	r0, r3
 8006df6:	f7ff fae3 	bl	80063c0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3318      	adds	r3, #24
 8006e06:	0018      	movs	r0, r3
 8006e08:	f7ff fada 	bl	80063c0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006e0c:	4b1d      	ldr	r3, [pc, #116]	; (8006e84 <vTaskDelete+0xb0>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	4b1c      	ldr	r3, [pc, #112]	; (8006e84 <vTaskDelete+0xb0>)
 8006e14:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 8006e16:	4b1a      	ldr	r3, [pc, #104]	; (8006e80 <vTaskDelete+0xac>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d10c      	bne.n	8006e3a <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	4b18      	ldr	r3, [pc, #96]	; (8006e88 <vTaskDelete+0xb4>)
 8006e26:	0011      	movs	r1, r2
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f7ff fa71 	bl	8006310 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006e2e:	4b17      	ldr	r3, [pc, #92]	; (8006e8c <vTaskDelete+0xb8>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	4b15      	ldr	r3, [pc, #84]	; (8006e8c <vTaskDelete+0xb8>)
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e00a      	b.n	8006e50 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006e3a:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <vTaskDelete+0xbc>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	1e5a      	subs	r2, r3, #1
 8006e40:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <vTaskDelete+0xbc>)
 8006e42:	601a      	str	r2, [r3, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	0018      	movs	r0, r3
 8006e48:	f000 fb88 	bl	800755c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006e4c:	f000 fb98 	bl	8007580 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006e50:	f000 fe18 	bl	8007a84 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006e54:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <vTaskDelete+0xc0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00c      	beq.n	8006e76 <vTaskDelete+0xa2>
		{
			if( pxTCB == pxCurrentTCB )
 8006e5c:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <vTaskDelete+0xac>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d107      	bne.n	8006e76 <vTaskDelete+0xa2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006e66:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <vTaskDelete+0xc4>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <vTaskDelete+0x9e>
 8006e6e:	b672      	cpsid	i
 8006e70:	e7fe      	b.n	8006e70 <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 8006e72:	f000 fde5 	bl	8007a40 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	b004      	add	sp, #16
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	20000704 	.word	0x20000704
 8006e84:	20000820 	.word	0x20000820
 8006e88:	200007d8 	.word	0x200007d8
 8006e8c:	200007ec 	.word	0x200007ec
 8006e90:	20000804 	.word	0x20000804
 8006e94:	20000810 	.word	0x20000810
 8006e98:	2000082c 	.word	0x2000082c

08006e9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d010      	beq.n	8006ed0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006eae:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <vTaskDelay+0x48>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <vTaskDelay+0x1e>
 8006eb6:	b672      	cpsid	i
 8006eb8:	e7fe      	b.n	8006eb8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006eba:	f000 f84b 	bl	8006f54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f000 fcdc 	bl	8007880 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ec8:	f000 f850 	bl	8006f6c <xTaskResumeAll>
 8006ecc:	0003      	movs	r3, r0
 8006ece:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006ed6:	f000 fdb3 	bl	8007a40 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	46bd      	mov	sp, r7
 8006ede:	b004      	add	sp, #16
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	2000082c 	.word	0x2000082c

08006ee8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006eee:	4913      	ldr	r1, [pc, #76]	; (8006f3c <vTaskStartScheduler+0x54>)
 8006ef0:	4813      	ldr	r0, [pc, #76]	; (8006f40 <vTaskStartScheduler+0x58>)
 8006ef2:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <vTaskStartScheduler+0x5c>)
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	2300      	movs	r3, #0
 8006efc:	2280      	movs	r2, #128	; 0x80
 8006efe:	f7ff fe3b 	bl	8006b78 <xTaskCreate>
 8006f02:	0003      	movs	r3, r0
 8006f04:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d10d      	bne.n	8006f28 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006f0c:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <vTaskStartScheduler+0x60>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	4252      	negs	r2, r2
 8006f14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <vTaskStartScheduler+0x64>)
 8006f18:	2201      	movs	r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <vTaskStartScheduler+0x68>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f22:	f000 fd69 	bl	80079f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f26:	e004      	b.n	8006f32 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <vTaskStartScheduler+0x4a>
 8006f2e:	b672      	cpsid	i
 8006f30:	e7fe      	b.n	8006f30 <vTaskStartScheduler+0x48>
}
 8006f32:	46c0      	nop			; (mov r8, r8)
 8006f34:	46bd      	mov	sp, r7
 8006f36:	b002      	add	sp, #8
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	08009708 	.word	0x08009708
 8006f40:	08007459 	.word	0x08007459
 8006f44:	20000828 	.word	0x20000828
 8006f48:	20000824 	.word	0x20000824
 8006f4c:	20000810 	.word	0x20000810
 8006f50:	20000808 	.word	0x20000808

08006f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f58:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <vTaskSuspendAll+0x14>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	4b02      	ldr	r3, [pc, #8]	; (8006f68 <vTaskSuspendAll+0x14>)
 8006f60:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	2000082c 	.word	0x2000082c

08006f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f7a:	4b3a      	ldr	r3, [pc, #232]	; (8007064 <xTaskResumeAll+0xf8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <xTaskResumeAll+0x1a>
 8006f82:	b672      	cpsid	i
 8006f84:	e7fe      	b.n	8006f84 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f86:	f000 fd6b 	bl	8007a60 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f8a:	4b36      	ldr	r3, [pc, #216]	; (8007064 <xTaskResumeAll+0xf8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	1e5a      	subs	r2, r3, #1
 8006f90:	4b34      	ldr	r3, [pc, #208]	; (8007064 <xTaskResumeAll+0xf8>)
 8006f92:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f94:	4b33      	ldr	r3, [pc, #204]	; (8007064 <xTaskResumeAll+0xf8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d15b      	bne.n	8007054 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f9c:	4b32      	ldr	r3, [pc, #200]	; (8007068 <xTaskResumeAll+0xfc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d057      	beq.n	8007054 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fa4:	e02f      	b.n	8007006 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa6:	4b31      	ldr	r3, [pc, #196]	; (800706c <xTaskResumeAll+0x100>)
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3318      	adds	r3, #24
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f7ff fa04 	bl	80063c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f7ff f9ff 	bl	80063c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc6:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <xTaskResumeAll+0x104>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d903      	bls.n	8006fd6 <xTaskResumeAll+0x6a>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd2:	4b27      	ldr	r3, [pc, #156]	; (8007070 <xTaskResumeAll+0x104>)
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fda:	0013      	movs	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	189b      	adds	r3, r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4a24      	ldr	r2, [pc, #144]	; (8007074 <xTaskResumeAll+0x108>)
 8006fe4:	189a      	adds	r2, r3, r2
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	0019      	movs	r1, r3
 8006fec:	0010      	movs	r0, r2
 8006fee:	f7ff f98f 	bl	8006310 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff6:	4b20      	ldr	r3, [pc, #128]	; (8007078 <xTaskResumeAll+0x10c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d302      	bcc.n	8007006 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007000:	4b1e      	ldr	r3, [pc, #120]	; (800707c <xTaskResumeAll+0x110>)
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007006:	4b19      	ldr	r3, [pc, #100]	; (800706c <xTaskResumeAll+0x100>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1cb      	bne.n	8006fa6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007014:	f000 fab4 	bl	8007580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007018:	4b19      	ldr	r3, [pc, #100]	; (8007080 <xTaskResumeAll+0x114>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00f      	beq.n	8007044 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007024:	f000 f82e 	bl	8007084 <xTaskIncrementTick>
 8007028:	1e03      	subs	r3, r0, #0
 800702a:	d002      	beq.n	8007032 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800702c:	4b13      	ldr	r3, [pc, #76]	; (800707c <xTaskResumeAll+0x110>)
 800702e:	2201      	movs	r2, #1
 8007030:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3b01      	subs	r3, #1
 8007036:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f2      	bne.n	8007024 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800703e:	4b10      	ldr	r3, [pc, #64]	; (8007080 <xTaskResumeAll+0x114>)
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007044:	4b0d      	ldr	r3, [pc, #52]	; (800707c <xTaskResumeAll+0x110>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007050:	f000 fcf6 	bl	8007a40 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007054:	f000 fd16 	bl	8007a84 <vPortExitCritical>

	return xAlreadyYielded;
 8007058:	68bb      	ldr	r3, [r7, #8]
}
 800705a:	0018      	movs	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	b004      	add	sp, #16
 8007060:	bd80      	pop	{r7, pc}
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	2000082c 	.word	0x2000082c
 8007068:	20000804 	.word	0x20000804
 800706c:	200007c4 	.word	0x200007c4
 8007070:	2000080c 	.word	0x2000080c
 8007074:	20000708 	.word	0x20000708
 8007078:	20000704 	.word	0x20000704
 800707c:	20000818 	.word	0x20000818
 8007080:	20000814 	.word	0x20000814

08007084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800708e:	4b4a      	ldr	r3, [pc, #296]	; (80071b8 <xTaskIncrementTick+0x134>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d000      	beq.n	8007098 <xTaskIncrementTick+0x14>
 8007096:	e084      	b.n	80071a2 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007098:	4b48      	ldr	r3, [pc, #288]	; (80071bc <xTaskIncrementTick+0x138>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3301      	adds	r3, #1
 800709e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070a0:	4b46      	ldr	r3, [pc, #280]	; (80071bc <xTaskIncrementTick+0x138>)
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d117      	bne.n	80070dc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80070ac:	4b44      	ldr	r3, [pc, #272]	; (80071c0 <xTaskIncrementTick+0x13c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <xTaskIncrementTick+0x36>
 80070b6:	b672      	cpsid	i
 80070b8:	e7fe      	b.n	80070b8 <xTaskIncrementTick+0x34>
 80070ba:	4b41      	ldr	r3, [pc, #260]	; (80071c0 <xTaskIncrementTick+0x13c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	4b40      	ldr	r3, [pc, #256]	; (80071c4 <xTaskIncrementTick+0x140>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	4b3e      	ldr	r3, [pc, #248]	; (80071c0 <xTaskIncrementTick+0x13c>)
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	4b3e      	ldr	r3, [pc, #248]	; (80071c4 <xTaskIncrementTick+0x140>)
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	4b3e      	ldr	r3, [pc, #248]	; (80071c8 <xTaskIncrementTick+0x144>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	4b3c      	ldr	r3, [pc, #240]	; (80071c8 <xTaskIncrementTick+0x144>)
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	f000 fa52 	bl	8007580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070dc:	4b3b      	ldr	r3, [pc, #236]	; (80071cc <xTaskIncrementTick+0x148>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d349      	bcc.n	800717a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070e6:	4b36      	ldr	r3, [pc, #216]	; (80071c0 <xTaskIncrementTick+0x13c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f0:	4b36      	ldr	r3, [pc, #216]	; (80071cc <xTaskIncrementTick+0x148>)
 80070f2:	2201      	movs	r2, #1
 80070f4:	4252      	negs	r2, r2
 80070f6:	601a      	str	r2, [r3, #0]
					break;
 80070f8:	e03f      	b.n	800717a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070fa:	4b31      	ldr	r3, [pc, #196]	; (80071c0 <xTaskIncrementTick+0x13c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d203      	bcs.n	800711a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007112:	4b2e      	ldr	r3, [pc, #184]	; (80071cc <xTaskIncrementTick+0x148>)
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007118:	e02f      	b.n	800717a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	3304      	adds	r3, #4
 800711e:	0018      	movs	r0, r3
 8007120:	f7ff f94e 	bl	80063c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	3318      	adds	r3, #24
 8007130:	0018      	movs	r0, r3
 8007132:	f7ff f945 	bl	80063c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713a:	4b25      	ldr	r3, [pc, #148]	; (80071d0 <xTaskIncrementTick+0x14c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d903      	bls.n	800714a <xTaskIncrementTick+0xc6>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007146:	4b22      	ldr	r3, [pc, #136]	; (80071d0 <xTaskIncrementTick+0x14c>)
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714e:	0013      	movs	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	189b      	adds	r3, r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4a1f      	ldr	r2, [pc, #124]	; (80071d4 <xTaskIncrementTick+0x150>)
 8007158:	189a      	adds	r2, r3, r2
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	3304      	adds	r3, #4
 800715e:	0019      	movs	r1, r3
 8007160:	0010      	movs	r0, r2
 8007162:	f7ff f8d5 	bl	8006310 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <xTaskIncrementTick+0x154>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	429a      	cmp	r2, r3
 8007172:	d3b8      	bcc.n	80070e6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007178:	e7b5      	b.n	80070e6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800717a:	4b17      	ldr	r3, [pc, #92]	; (80071d8 <xTaskIncrementTick+0x154>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007180:	4914      	ldr	r1, [pc, #80]	; (80071d4 <xTaskIncrementTick+0x150>)
 8007182:	0013      	movs	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	189b      	adds	r3, r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	585b      	ldr	r3, [r3, r1]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d901      	bls.n	8007194 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8007190:	2301      	movs	r3, #1
 8007192:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007194:	4b11      	ldr	r3, [pc, #68]	; (80071dc <xTaskIncrementTick+0x158>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e004      	b.n	80071ac <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071a2:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <xTaskIncrementTick+0x15c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <xTaskIncrementTick+0x15c>)
 80071aa:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071ac:	697b      	ldr	r3, [r7, #20]
}
 80071ae:	0018      	movs	r0, r3
 80071b0:	46bd      	mov	sp, r7
 80071b2:	b006      	add	sp, #24
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	2000082c 	.word	0x2000082c
 80071bc:	20000808 	.word	0x20000808
 80071c0:	200007bc 	.word	0x200007bc
 80071c4:	200007c0 	.word	0x200007c0
 80071c8:	2000081c 	.word	0x2000081c
 80071cc:	20000824 	.word	0x20000824
 80071d0:	2000080c 	.word	0x2000080c
 80071d4:	20000708 	.word	0x20000708
 80071d8:	20000704 	.word	0x20000704
 80071dc:	20000818 	.word	0x20000818
 80071e0:	20000814 	.word	0x20000814

080071e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071ea:	4b22      	ldr	r3, [pc, #136]	; (8007274 <vTaskSwitchContext+0x90>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071f2:	4b21      	ldr	r3, [pc, #132]	; (8007278 <vTaskSwitchContext+0x94>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071f8:	e037      	b.n	800726a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80071fa:	4b1f      	ldr	r3, [pc, #124]	; (8007278 <vTaskSwitchContext+0x94>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007200:	4b1e      	ldr	r3, [pc, #120]	; (800727c <vTaskSwitchContext+0x98>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	e007      	b.n	8007218 <vTaskSwitchContext+0x34>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <vTaskSwitchContext+0x2e>
 800720e:	b672      	cpsid	i
 8007210:	e7fe      	b.n	8007210 <vTaskSwitchContext+0x2c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3b01      	subs	r3, #1
 8007216:	607b      	str	r3, [r7, #4]
 8007218:	4919      	ldr	r1, [pc, #100]	; (8007280 <vTaskSwitchContext+0x9c>)
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	0013      	movs	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	189b      	adds	r3, r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	585b      	ldr	r3, [r3, r1]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0ee      	beq.n	8007208 <vTaskSwitchContext+0x24>
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	0013      	movs	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	189b      	adds	r3, r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4a12      	ldr	r2, [pc, #72]	; (8007280 <vTaskSwitchContext+0x9c>)
 8007236:	189b      	adds	r3, r3, r2
 8007238:	603b      	str	r3, [r7, #0]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	605a      	str	r2, [r3, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	3308      	adds	r3, #8
 800724c:	429a      	cmp	r2, r3
 800724e:	d104      	bne.n	800725a <vTaskSwitchContext+0x76>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	605a      	str	r2, [r3, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	4b08      	ldr	r3, [pc, #32]	; (8007284 <vTaskSwitchContext+0xa0>)
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	4b05      	ldr	r3, [pc, #20]	; (800727c <vTaskSwitchContext+0x98>)
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	601a      	str	r2, [r3, #0]
}
 800726a:	46c0      	nop			; (mov r8, r8)
 800726c:	46bd      	mov	sp, r7
 800726e:	b002      	add	sp, #8
 8007270:	bd80      	pop	{r7, pc}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	2000082c 	.word	0x2000082c
 8007278:	20000818 	.word	0x20000818
 800727c:	2000080c 	.word	0x2000080c
 8007280:	20000708 	.word	0x20000708
 8007284:	20000704 	.word	0x20000704

08007288 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <vTaskPlaceOnEventList+0x14>
 8007298:	b672      	cpsid	i
 800729a:	e7fe      	b.n	800729a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800729c:	4b08      	ldr	r3, [pc, #32]	; (80072c0 <vTaskPlaceOnEventList+0x38>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3318      	adds	r3, #24
 80072a2:	001a      	movs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0011      	movs	r1, r2
 80072a8:	0018      	movs	r0, r3
 80072aa:	f7ff f853 	bl	8006354 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2101      	movs	r1, #1
 80072b2:	0018      	movs	r0, r3
 80072b4:	f000 fae4 	bl	8007880 <prvAddCurrentTaskToDelayedList>
}
 80072b8:	46c0      	nop			; (mov r8, r8)
 80072ba:	46bd      	mov	sp, r7
 80072bc:	b002      	add	sp, #8
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000704 	.word	0x20000704

080072c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <xTaskRemoveFromEventList+0x1a>
 80072da:	b672      	cpsid	i
 80072dc:	e7fe      	b.n	80072dc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3318      	adds	r3, #24
 80072e2:	0018      	movs	r0, r3
 80072e4:	f7ff f86c 	bl	80063c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072e8:	4b1e      	ldr	r3, [pc, #120]	; (8007364 <xTaskRemoveFromEventList+0xa0>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d11d      	bne.n	800732c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	3304      	adds	r3, #4
 80072f4:	0018      	movs	r0, r3
 80072f6:	f7ff f863 	bl	80063c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fe:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <xTaskRemoveFromEventList+0xa4>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d903      	bls.n	800730e <xTaskRemoveFromEventList+0x4a>
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730a:	4b17      	ldr	r3, [pc, #92]	; (8007368 <xTaskRemoveFromEventList+0xa4>)
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007312:	0013      	movs	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	189b      	adds	r3, r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4a14      	ldr	r2, [pc, #80]	; (800736c <xTaskRemoveFromEventList+0xa8>)
 800731c:	189a      	adds	r2, r3, r2
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	3304      	adds	r3, #4
 8007322:	0019      	movs	r1, r3
 8007324:	0010      	movs	r0, r2
 8007326:	f7fe fff3 	bl	8006310 <vListInsertEnd>
 800732a:	e007      	b.n	800733c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	3318      	adds	r3, #24
 8007330:	001a      	movs	r2, r3
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <xTaskRemoveFromEventList+0xac>)
 8007334:	0011      	movs	r1, r2
 8007336:	0018      	movs	r0, r3
 8007338:	f7fe ffea 	bl	8006310 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007340:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <xTaskRemoveFromEventList+0xb0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007346:	429a      	cmp	r2, r3
 8007348:	d905      	bls.n	8007356 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800734a:	2301      	movs	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <xTaskRemoveFromEventList+0xb4>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	e001      	b.n	800735a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800735a:	68fb      	ldr	r3, [r7, #12]
}
 800735c:	0018      	movs	r0, r3
 800735e:	46bd      	mov	sp, r7
 8007360:	b004      	add	sp, #16
 8007362:	bd80      	pop	{r7, pc}
 8007364:	2000082c 	.word	0x2000082c
 8007368:	2000080c 	.word	0x2000080c
 800736c:	20000708 	.word	0x20000708
 8007370:	200007c4 	.word	0x200007c4
 8007374:	20000704 	.word	0x20000704
 8007378:	20000818 	.word	0x20000818

0800737c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <vTaskInternalSetTimeOutState+0x20>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800738c:	4b04      	ldr	r3, [pc, #16]	; (80073a0 <vTaskInternalSetTimeOutState+0x24>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	605a      	str	r2, [r3, #4]
}
 8007394:	46c0      	nop			; (mov r8, r8)
 8007396:	46bd      	mov	sp, r7
 8007398:	b002      	add	sp, #8
 800739a:	bd80      	pop	{r7, pc}
 800739c:	2000081c 	.word	0x2000081c
 80073a0:	20000808 	.word	0x20000808

080073a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <xTaskCheckForTimeOut+0x14>
 80073b4:	b672      	cpsid	i
 80073b6:	e7fe      	b.n	80073b6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <xTaskCheckForTimeOut+0x1e>
 80073be:	b672      	cpsid	i
 80073c0:	e7fe      	b.n	80073c0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80073c2:	f000 fb4d 	bl	8007a60 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073c6:	4b1d      	ldr	r3, [pc, #116]	; (800743c <xTaskCheckForTimeOut+0x98>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3301      	adds	r3, #1
 80073dc:	d102      	bne.n	80073e4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
 80073e2:	e024      	b.n	800742e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	4b15      	ldr	r3, [pc, #84]	; (8007440 <xTaskCheckForTimeOut+0x9c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d007      	beq.n	8007400 <xTaskCheckForTimeOut+0x5c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d302      	bcc.n	8007400 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073fa:	2301      	movs	r3, #1
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	e016      	b.n	800742e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	429a      	cmp	r2, r3
 8007408:	d20c      	bcs.n	8007424 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1ad2      	subs	r2, r2, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	0018      	movs	r0, r3
 800741a:	f7ff ffaf 	bl	800737c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	e004      	b.n	800742e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800742a:	2301      	movs	r3, #1
 800742c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800742e:	f000 fb29 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 8007432:	697b      	ldr	r3, [r7, #20]
}
 8007434:	0018      	movs	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	b006      	add	sp, #24
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000808 	.word	0x20000808
 8007440:	2000081c 	.word	0x2000081c

08007444 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007448:	4b02      	ldr	r3, [pc, #8]	; (8007454 <vTaskMissedYield+0x10>)
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]
}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20000818 	.word	0x20000818

08007458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007460:	f000 f84e 	bl	8007500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007464:	4b03      	ldr	r3, [pc, #12]	; (8007474 <prvIdleTask+0x1c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d9f9      	bls.n	8007460 <prvIdleTask+0x8>
			{
				taskYIELD();
 800746c:	f000 fae8 	bl	8007a40 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007470:	e7f6      	b.n	8007460 <prvIdleTask+0x8>
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	20000708 	.word	0x20000708

08007478 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800747e:	2300      	movs	r3, #0
 8007480:	607b      	str	r3, [r7, #4]
 8007482:	e00c      	b.n	800749e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	0013      	movs	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	189b      	adds	r3, r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4a14      	ldr	r2, [pc, #80]	; (80074e0 <prvInitialiseTaskLists+0x68>)
 8007490:	189b      	adds	r3, r3, r2
 8007492:	0018      	movs	r0, r3
 8007494:	f7fe ff13 	bl	80062be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3301      	adds	r3, #1
 800749c:	607b      	str	r3, [r7, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b06      	cmp	r3, #6
 80074a2:	d9ef      	bls.n	8007484 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074a4:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <prvInitialiseTaskLists+0x6c>)
 80074a6:	0018      	movs	r0, r3
 80074a8:	f7fe ff09 	bl	80062be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074ac:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <prvInitialiseTaskLists+0x70>)
 80074ae:	0018      	movs	r0, r3
 80074b0:	f7fe ff05 	bl	80062be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074b4:	4b0d      	ldr	r3, [pc, #52]	; (80074ec <prvInitialiseTaskLists+0x74>)
 80074b6:	0018      	movs	r0, r3
 80074b8:	f7fe ff01 	bl	80062be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074bc:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <prvInitialiseTaskLists+0x78>)
 80074be:	0018      	movs	r0, r3
 80074c0:	f7fe fefd 	bl	80062be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074c4:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <prvInitialiseTaskLists+0x7c>)
 80074c6:	0018      	movs	r0, r3
 80074c8:	f7fe fef9 	bl	80062be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <prvInitialiseTaskLists+0x80>)
 80074ce:	4a05      	ldr	r2, [pc, #20]	; (80074e4 <prvInitialiseTaskLists+0x6c>)
 80074d0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074d2:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <prvInitialiseTaskLists+0x84>)
 80074d4:	4a04      	ldr	r2, [pc, #16]	; (80074e8 <prvInitialiseTaskLists+0x70>)
 80074d6:	601a      	str	r2, [r3, #0]
}
 80074d8:	46c0      	nop			; (mov r8, r8)
 80074da:	46bd      	mov	sp, r7
 80074dc:	b002      	add	sp, #8
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000708 	.word	0x20000708
 80074e4:	20000794 	.word	0x20000794
 80074e8:	200007a8 	.word	0x200007a8
 80074ec:	200007c4 	.word	0x200007c4
 80074f0:	200007d8 	.word	0x200007d8
 80074f4:	200007f0 	.word	0x200007f0
 80074f8:	200007bc 	.word	0x200007bc
 80074fc:	200007c0 	.word	0x200007c0

08007500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007506:	e01a      	b.n	800753e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007508:	f000 faaa 	bl	8007a60 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800750c:	4b10      	ldr	r3, [pc, #64]	; (8007550 <prvCheckTasksWaitingTermination+0x50>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3304      	adds	r3, #4
 8007518:	0018      	movs	r0, r3
 800751a:	f7fe ff51 	bl	80063c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800751e:	4b0d      	ldr	r3, [pc, #52]	; (8007554 <prvCheckTasksWaitingTermination+0x54>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	1e5a      	subs	r2, r3, #1
 8007524:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <prvCheckTasksWaitingTermination+0x54>)
 8007526:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007528:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <prvCheckTasksWaitingTermination+0x58>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	1e5a      	subs	r2, r3, #1
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <prvCheckTasksWaitingTermination+0x58>)
 8007530:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007532:	f000 faa7 	bl	8007a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	0018      	movs	r0, r3
 800753a:	f000 f80f 	bl	800755c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800753e:	4b06      	ldr	r3, [pc, #24]	; (8007558 <prvCheckTasksWaitingTermination+0x58>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e0      	bne.n	8007508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	46c0      	nop			; (mov r8, r8)
 800754a:	46bd      	mov	sp, r7
 800754c:	b002      	add	sp, #8
 800754e:	bd80      	pop	{r7, pc}
 8007550:	200007d8 	.word	0x200007d8
 8007554:	20000804 	.word	0x20000804
 8007558:	200007ec 	.word	0x200007ec

0800755c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	0018      	movs	r0, r3
 800756a:	f000 fbbd 	bl	8007ce8 <vPortFree>
			vPortFree( pxTCB );
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	0018      	movs	r0, r3
 8007572:	f000 fbb9 	bl	8007ce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007576:	46c0      	nop			; (mov r8, r8)
 8007578:	46bd      	mov	sp, r7
 800757a:	b002      	add	sp, #8
 800757c:	bd80      	pop	{r7, pc}
	...

08007580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <prvResetNextTaskUnblockTime+0x34>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007590:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <prvResetNextTaskUnblockTime+0x38>)
 8007592:	2201      	movs	r2, #1
 8007594:	4252      	negs	r2, r2
 8007596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007598:	e008      	b.n	80075ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759a:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <prvResetNextTaskUnblockTime+0x34>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	4b03      	ldr	r3, [pc, #12]	; (80075b8 <prvResetNextTaskUnblockTime+0x38>)
 80075aa:	601a      	str	r2, [r3, #0]
}
 80075ac:	46c0      	nop			; (mov r8, r8)
 80075ae:	46bd      	mov	sp, r7
 80075b0:	b002      	add	sp, #8
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	200007bc 	.word	0x200007bc
 80075b8:	20000824 	.word	0x20000824

080075bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <xTaskGetSchedulerState+0x30>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ca:	2301      	movs	r3, #1
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	e008      	b.n	80075e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <xTaskGetSchedulerState+0x34>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075d8:	2302      	movs	r3, #2
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	e001      	b.n	80075e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075e2:	687b      	ldr	r3, [r7, #4]
	}
 80075e4:	0018      	movs	r0, r3
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b002      	add	sp, #8
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000810 	.word	0x20000810
 80075f0:	2000082c 	.word	0x2000082c

080075f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d051      	beq.n	80076ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760e:	4b2a      	ldr	r3, [pc, #168]	; (80076b8 <xTaskPriorityInherit+0xc4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	429a      	cmp	r2, r3
 8007616:	d241      	bcs.n	800769c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	db06      	blt.n	800762e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007620:	4b25      	ldr	r3, [pc, #148]	; (80076b8 <xTaskPriorityInherit+0xc4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	2207      	movs	r2, #7
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	6959      	ldr	r1, [r3, #20]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007636:	0013      	movs	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	189b      	adds	r3, r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <xTaskPriorityInherit+0xc8>)
 8007640:	189b      	adds	r3, r3, r2
 8007642:	4299      	cmp	r1, r3
 8007644:	d122      	bne.n	800768c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	3304      	adds	r3, #4
 800764a:	0018      	movs	r0, r3
 800764c:	f7fe feb8 	bl	80063c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007650:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <xTaskPriorityInherit+0xc4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765e:	4b18      	ldr	r3, [pc, #96]	; (80076c0 <xTaskPriorityInherit+0xcc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d903      	bls.n	800766e <xTaskPriorityInherit+0x7a>
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766a:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <xTaskPriorityInherit+0xcc>)
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007672:	0013      	movs	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	189b      	adds	r3, r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4a10      	ldr	r2, [pc, #64]	; (80076bc <xTaskPriorityInherit+0xc8>)
 800767c:	189a      	adds	r2, r3, r2
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	3304      	adds	r3, #4
 8007682:	0019      	movs	r1, r3
 8007684:	0010      	movs	r0, r2
 8007686:	f7fe fe43 	bl	8006310 <vListInsertEnd>
 800768a:	e004      	b.n	8007696 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <xTaskPriorityInherit+0xc4>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007696:	2301      	movs	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	e008      	b.n	80076ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076a0:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <xTaskPriorityInherit+0xc4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d201      	bcs.n	80076ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076aa:	2301      	movs	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076ae:	68fb      	ldr	r3, [r7, #12]
	}
 80076b0:	0018      	movs	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	b004      	add	sp, #16
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20000704 	.word	0x20000704
 80076bc:	20000708 	.word	0x20000708
 80076c0:	2000080c 	.word	0x2000080c

080076c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d044      	beq.n	8007764 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076da:	4b25      	ldr	r3, [pc, #148]	; (8007770 <xTaskPriorityDisinherit+0xac>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d001      	beq.n	80076e8 <xTaskPriorityDisinherit+0x24>
 80076e4:	b672      	cpsid	i
 80076e6:	e7fe      	b.n	80076e6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <xTaskPriorityDisinherit+0x30>
 80076f0:	b672      	cpsid	i
 80076f2:	e7fe      	b.n	80076f2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f8:	1e5a      	subs	r2, r3, #1
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007706:	429a      	cmp	r2, r3
 8007708:	d02c      	beq.n	8007764 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770e:	2b00      	cmp	r3, #0
 8007710:	d128      	bne.n	8007764 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	3304      	adds	r3, #4
 8007716:	0018      	movs	r0, r3
 8007718:	f7fe fe52 	bl	80063c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	2207      	movs	r2, #7
 800772a:	1ad2      	subs	r2, r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007734:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <xTaskPriorityDisinherit+0xb0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d903      	bls.n	8007744 <xTaskPriorityDisinherit+0x80>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007740:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <xTaskPriorityDisinherit+0xb0>)
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007748:	0013      	movs	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	189b      	adds	r3, r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4a09      	ldr	r2, [pc, #36]	; (8007778 <xTaskPriorityDisinherit+0xb4>)
 8007752:	189a      	adds	r2, r3, r2
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	3304      	adds	r3, #4
 8007758:	0019      	movs	r1, r3
 800775a:	0010      	movs	r0, r2
 800775c:	f7fe fdd8 	bl	8006310 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007760:	2301      	movs	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007764:	68fb      	ldr	r3, [r7, #12]
	}
 8007766:	0018      	movs	r0, r3
 8007768:	46bd      	mov	sp, r7
 800776a:	b004      	add	sp, #16
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	20000704 	.word	0x20000704
 8007774:	2000080c 	.word	0x2000080c
 8007778:	20000708 	.word	0x20000708

0800777c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800778a:	2301      	movs	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d058      	beq.n	8007846 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800779c:	b672      	cpsid	i
 800779e:	e7fe      	b.n	800779e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d902      	bls.n	80077b0 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	e002      	b.n	80077b6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b4:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d042      	beq.n	8007846 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d13d      	bne.n	8007846 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80077ca:	4b21      	ldr	r3, [pc, #132]	; (8007850 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d101      	bne.n	80077d8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 80077d4:	b672      	cpsid	i
 80077d6:	e7fe      	b.n	80077d6 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	db04      	blt.n	80077f6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2207      	movs	r2, #7
 80077f0:	1ad2      	subs	r2, r2, r3
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6959      	ldr	r1, [r3, #20]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	0013      	movs	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	189b      	adds	r3, r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4a13      	ldr	r2, [pc, #76]	; (8007854 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8007806:	189b      	adds	r3, r3, r2
 8007808:	4299      	cmp	r1, r3
 800780a:	d11c      	bne.n	8007846 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3304      	adds	r3, #4
 8007810:	0018      	movs	r0, r3
 8007812:	f7fe fdd5 	bl	80063c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781a:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d903      	bls.n	800782a <vTaskPriorityDisinheritAfterTimeout+0xae>
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007826:	4b0c      	ldr	r3, [pc, #48]	; (8007858 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782e:	0013      	movs	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	189b      	adds	r3, r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4a07      	ldr	r2, [pc, #28]	; (8007854 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8007838:	189a      	adds	r2, r3, r2
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	3304      	adds	r3, #4
 800783e:	0019      	movs	r1, r3
 8007840:	0010      	movs	r0, r2
 8007842:	f7fe fd65 	bl	8006310 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	46bd      	mov	sp, r7
 800784a:	b006      	add	sp, #24
 800784c:	bd80      	pop	{r7, pc}
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	20000704 	.word	0x20000704
 8007854:	20000708 	.word	0x20000708
 8007858:	2000080c 	.word	0x2000080c

0800785c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <pvTaskIncrementMutexHeldCount+0x20>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007868:	4b04      	ldr	r3, [pc, #16]	; (800787c <pvTaskIncrementMutexHeldCount+0x20>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800786e:	3201      	adds	r2, #1
 8007870:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007872:	4b02      	ldr	r3, [pc, #8]	; (800787c <pvTaskIncrementMutexHeldCount+0x20>)
 8007874:	681b      	ldr	r3, [r3, #0]
	}
 8007876:	0018      	movs	r0, r3
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20000704 	.word	0x20000704

08007880 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800788a:	4b21      	ldr	r3, [pc, #132]	; (8007910 <prvAddCurrentTaskToDelayedList+0x90>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007890:	4b20      	ldr	r3, [pc, #128]	; (8007914 <prvAddCurrentTaskToDelayedList+0x94>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3304      	adds	r3, #4
 8007896:	0018      	movs	r0, r3
 8007898:	f7fe fd92 	bl	80063c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3301      	adds	r3, #1
 80078a0:	d10b      	bne.n	80078ba <prvAddCurrentTaskToDelayedList+0x3a>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d008      	beq.n	80078ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a8:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <prvAddCurrentTaskToDelayedList+0x94>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	1d1a      	adds	r2, r3, #4
 80078ae:	4b1a      	ldr	r3, [pc, #104]	; (8007918 <prvAddCurrentTaskToDelayedList+0x98>)
 80078b0:	0011      	movs	r1, r2
 80078b2:	0018      	movs	r0, r3
 80078b4:	f7fe fd2c 	bl	8006310 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078b8:	e026      	b.n	8007908 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	18d3      	adds	r3, r2, r3
 80078c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078c2:	4b14      	ldr	r3, [pc, #80]	; (8007914 <prvAddCurrentTaskToDelayedList+0x94>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d209      	bcs.n	80078e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078d2:	4b12      	ldr	r3, [pc, #72]	; (800791c <prvAddCurrentTaskToDelayedList+0x9c>)
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <prvAddCurrentTaskToDelayedList+0x94>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3304      	adds	r3, #4
 80078dc:	0019      	movs	r1, r3
 80078de:	0010      	movs	r0, r2
 80078e0:	f7fe fd38 	bl	8006354 <vListInsert>
}
 80078e4:	e010      	b.n	8007908 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078e6:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <prvAddCurrentTaskToDelayedList+0x94>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3304      	adds	r3, #4
 80078f0:	0019      	movs	r1, r3
 80078f2:	0010      	movs	r0, r2
 80078f4:	f7fe fd2e 	bl	8006354 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078f8:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d202      	bcs.n	8007908 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007902:	4b08      	ldr	r3, [pc, #32]	; (8007924 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	601a      	str	r2, [r3, #0]
}
 8007908:	46c0      	nop			; (mov r8, r8)
 800790a:	46bd      	mov	sp, r7
 800790c:	b004      	add	sp, #16
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000808 	.word	0x20000808
 8007914:	20000704 	.word	0x20000704
 8007918:	200007f0 	.word	0x200007f0
 800791c:	200007c0 	.word	0x200007c0
 8007920:	200007bc 	.word	0x200007bc
 8007924:	20000824 	.word	0x20000824

08007928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3b04      	subs	r3, #4
 8007938:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2280      	movs	r2, #128	; 0x80
 800793e:	0452      	lsls	r2, r2, #17
 8007940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3b04      	subs	r3, #4
 8007946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3b04      	subs	r3, #4
 8007952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007954:	4a08      	ldr	r2, [pc, #32]	; (8007978 <pxPortInitialiseStack+0x50>)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3b14      	subs	r3, #20
 800795e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3b20      	subs	r3, #32
 800796a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800796c:	68fb      	ldr	r3, [r7, #12]
}
 800796e:	0018      	movs	r0, r3
 8007970:	46bd      	mov	sp, r7
 8007972:	b004      	add	sp, #16
 8007974:	bd80      	pop	{r7, pc}
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	0800797d 	.word	0x0800797d

0800797c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007982:	2300      	movs	r3, #0
 8007984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007986:	4b08      	ldr	r3, [pc, #32]	; (80079a8 <prvTaskExitError+0x2c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	d001      	beq.n	8007992 <prvTaskExitError+0x16>
 800798e:	b672      	cpsid	i
 8007990:	e7fe      	b.n	8007990 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007992:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007994:	46c0      	nop			; (mov r8, r8)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0fc      	beq.n	8007996 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800799c:	46c0      	nop			; (mov r8, r8)
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	46bd      	mov	sp, r7
 80079a2:	b002      	add	sp, #8
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	20000024 	.word	0x20000024

080079ac <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80079b0:	46c0      	nop			; (mov r8, r8)
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80079c0:	4a0b      	ldr	r2, [pc, #44]	; (80079f0 <pxCurrentTCBConst2>)
 80079c2:	6813      	ldr	r3, [r2, #0]
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	3020      	adds	r0, #32
 80079c8:	f380 8809 	msr	PSP, r0
 80079cc:	2002      	movs	r0, #2
 80079ce:	f380 8814 	msr	CONTROL, r0
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80079d8:	46ae      	mov	lr, r5
 80079da:	bc08      	pop	{r3}
 80079dc:	bc04      	pop	{r2}
 80079de:	b662      	cpsie	i
 80079e0:	4718      	bx	r3
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	46c0      	nop			; (mov r8, r8)
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	46c0      	nop			; (mov r8, r8)
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	46c0      	nop			; (mov r8, r8)
 80079ee:	46c0      	nop			; (mov r8, r8)

080079f0 <pxCurrentTCBConst2>:
 80079f0:	20000704 	.word	0x20000704
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80079f4:	46c0      	nop			; (mov r8, r8)
 80079f6:	46c0      	nop			; (mov r8, r8)

080079f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079fc:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <xPortStartScheduler+0x40>)
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <xPortStartScheduler+0x40>)
 8007a02:	21ff      	movs	r1, #255	; 0xff
 8007a04:	0409      	lsls	r1, r1, #16
 8007a06:	430a      	orrs	r2, r1
 8007a08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <xPortStartScheduler+0x40>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <xPortStartScheduler+0x40>)
 8007a10:	21ff      	movs	r1, #255	; 0xff
 8007a12:	0609      	lsls	r1, r1, #24
 8007a14:	430a      	orrs	r2, r1
 8007a16:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a18:	f000 f898 	bl	8007b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a1c:	4b07      	ldr	r3, [pc, #28]	; (8007a3c <xPortStartScheduler+0x44>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007a22:	f7ff ffcd 	bl	80079c0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a26:	f7ff fbdd 	bl	80071e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007a2a:	f7ff ffa7 	bl	800797c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	0018      	movs	r0, r3
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	e000ed20 	.word	0xe000ed20
 8007a3c:	20000024 	.word	0x20000024

08007a40 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a44:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <vPortYield+0x1c>)
 8007a46:	2280      	movs	r2, #128	; 0x80
 8007a48:	0552      	lsls	r2, r2, #21
 8007a4a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007a4c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007a50:	f3bf 8f6f 	isb	sy
}
 8007a54:	46c0      	nop			; (mov r8, r8)
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	46c0      	nop			; (mov r8, r8)
 8007a5c:	e000ed04 	.word	0xe000ed04

08007a60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8007a64:	b672      	cpsid	i
	uxCriticalNesting++;
 8007a66:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <vPortEnterCritical+0x20>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <vPortEnterCritical+0x20>)
 8007a6e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007a70:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007a74:	f3bf 8f6f 	isb	sy
}
 8007a78:	46c0      	nop			; (mov r8, r8)
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	20000024 	.word	0x20000024

08007a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a88:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <vPortExitCritical+0x2c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <vPortExitCritical+0x10>
 8007a90:	b672      	cpsid	i
 8007a92:	e7fe      	b.n	8007a92 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8007a94:	4b06      	ldr	r3, [pc, #24]	; (8007ab0 <vPortExitCritical+0x2c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	1e5a      	subs	r2, r3, #1
 8007a9a:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <vPortExitCritical+0x2c>)
 8007a9c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8007a9e:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <vPortExitCritical+0x2c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d100      	bne.n	8007aa8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8007aa6:	b662      	cpsie	i
	}
}
 8007aa8:	46c0      	nop			; (mov r8, r8)
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	20000024 	.word	0x20000024

08007ab4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007ab4:	f3ef 8010 	mrs	r0, PRIMASK
 8007ab8:	b672      	cpsid	i
 8007aba:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007abc:	46c0      	nop			; (mov r8, r8)
 8007abe:	0018      	movs	r0, r3

08007ac0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007ac0:	f380 8810 	msr	PRIMASK, r0
 8007ac4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007ac6:	46c0      	nop			; (mov r8, r8)
	...

08007ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ad0:	f3ef 8009 	mrs	r0, PSP
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <pxCurrentTCBConst>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	3820      	subs	r0, #32
 8007ada:	6010      	str	r0, [r2, #0]
 8007adc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007ade:	4644      	mov	r4, r8
 8007ae0:	464d      	mov	r5, r9
 8007ae2:	4656      	mov	r6, sl
 8007ae4:	465f      	mov	r7, fp
 8007ae6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007ae8:	b508      	push	{r3, lr}
 8007aea:	b672      	cpsid	i
 8007aec:	f7ff fb7a 	bl	80071e4 <vTaskSwitchContext>
 8007af0:	b662      	cpsie	i
 8007af2:	bc0c      	pop	{r2, r3}
 8007af4:	6811      	ldr	r1, [r2, #0]
 8007af6:	6808      	ldr	r0, [r1, #0]
 8007af8:	3010      	adds	r0, #16
 8007afa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007afc:	46a0      	mov	r8, r4
 8007afe:	46a9      	mov	r9, r5
 8007b00:	46b2      	mov	sl, r6
 8007b02:	46bb      	mov	fp, r7
 8007b04:	f380 8809 	msr	PSP, r0
 8007b08:	3820      	subs	r0, #32
 8007b0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007b0c:	4718      	bx	r3
 8007b0e:	46c0      	nop			; (mov r8, r8)

08007b10 <pxCurrentTCBConst>:
 8007b10:	20000704 	.word	0x20000704
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007b14:	46c0      	nop			; (mov r8, r8)
 8007b16:	46c0      	nop			; (mov r8, r8)

08007b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b1e:	f7ff ffc9 	bl	8007ab4 <ulSetInterruptMaskFromISR>
 8007b22:	0003      	movs	r3, r0
 8007b24:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b26:	f7ff faad 	bl	8007084 <xTaskIncrementTick>
 8007b2a:	1e03      	subs	r3, r0, #0
 8007b2c:	d003      	beq.n	8007b36 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b2e:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <xPortSysTickHandler+0x30>)
 8007b30:	2280      	movs	r2, #128	; 0x80
 8007b32:	0552      	lsls	r2, r2, #21
 8007b34:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f7ff ffc1 	bl	8007ac0 <vClearInterruptMaskFromISR>
}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	46bd      	mov	sp, r7
 8007b42:	b002      	add	sp, #8
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <vPortSetupTimerInterrupt+0x34>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b56:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <vPortSetupTimerInterrupt+0x38>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <vPortSetupTimerInterrupt+0x3c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	22fa      	movs	r2, #250	; 0xfa
 8007b62:	0091      	lsls	r1, r2, #2
 8007b64:	0018      	movs	r0, r3
 8007b66:	f7f8 fae3 	bl	8000130 <__udivsi3>
 8007b6a:	0003      	movs	r3, r0
 8007b6c:	001a      	movs	r2, r3
 8007b6e:	4b07      	ldr	r3, [pc, #28]	; (8007b8c <vPortSetupTimerInterrupt+0x40>)
 8007b70:	3a01      	subs	r2, #1
 8007b72:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007b74:	4b02      	ldr	r3, [pc, #8]	; (8007b80 <vPortSetupTimerInterrupt+0x34>)
 8007b76:	2207      	movs	r2, #7
 8007b78:	601a      	str	r2, [r3, #0]
}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	e000e010 	.word	0xe000e010
 8007b84:	e000e018 	.word	0xe000e018
 8007b88:	20000000 	.word	0x20000000
 8007b8c:	e000e014 	.word	0xe000e014

08007b90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007b9c:	f7ff f9da 	bl	8006f54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ba0:	4b4b      	ldr	r3, [pc, #300]	; (8007cd0 <pvPortMalloc+0x140>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ba8:	f000 f8ec 	bl	8007d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bac:	4b49      	ldr	r3, [pc, #292]	; (8007cd4 <pvPortMalloc+0x144>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	d000      	beq.n	8007bb8 <pvPortMalloc+0x28>
 8007bb6:	e07e      	b.n	8007cb6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d012      	beq.n	8007be4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007bbe:	2208      	movs	r2, #8
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	189b      	adds	r3, r3, r2
 8007bc4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2207      	movs	r2, #7
 8007bca:	4013      	ands	r3, r2
 8007bcc:	d00a      	beq.n	8007be4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2207      	movs	r2, #7
 8007bd2:	4393      	bics	r3, r2
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2207      	movs	r2, #7
 8007bdc:	4013      	ands	r3, r2
 8007bde:	d001      	beq.n	8007be4 <pvPortMalloc+0x54>
 8007be0:	b672      	cpsid	i
 8007be2:	e7fe      	b.n	8007be2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d065      	beq.n	8007cb6 <pvPortMalloc+0x126>
 8007bea:	4b3b      	ldr	r3, [pc, #236]	; (8007cd8 <pvPortMalloc+0x148>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d860      	bhi.n	8007cb6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bf4:	4b39      	ldr	r3, [pc, #228]	; (8007cdc <pvPortMalloc+0x14c>)
 8007bf6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007bf8:	4b38      	ldr	r3, [pc, #224]	; (8007cdc <pvPortMalloc+0x14c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bfe:	e004      	b.n	8007c0a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d903      	bls.n	8007c1c <pvPortMalloc+0x8c>
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1f1      	bne.n	8007c00 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c1c:	4b2c      	ldr	r3, [pc, #176]	; (8007cd0 <pvPortMalloc+0x140>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d047      	beq.n	8007cb6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	189b      	adds	r3, r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	1ad2      	subs	r2, r2, r3
 8007c40:	2308      	movs	r3, #8
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d916      	bls.n	8007c76 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	18d3      	adds	r3, r2, r3
 8007c4e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2207      	movs	r2, #7
 8007c54:	4013      	ands	r3, r2
 8007c56:	d001      	beq.n	8007c5c <pvPortMalloc+0xcc>
 8007c58:	b672      	cpsid	i
 8007c5a:	e7fe      	b.n	8007c5a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	1ad2      	subs	r2, r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	0018      	movs	r0, r3
 8007c72:	f000 f8e7 	bl	8007e44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c76:	4b18      	ldr	r3, [pc, #96]	; (8007cd8 <pvPortMalloc+0x148>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <pvPortMalloc+0x148>)
 8007c82:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c84:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <pvPortMalloc+0x148>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	4b15      	ldr	r3, [pc, #84]	; (8007ce0 <pvPortMalloc+0x150>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d203      	bcs.n	8007c98 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c90:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <pvPortMalloc+0x148>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	4b12      	ldr	r3, [pc, #72]	; (8007ce0 <pvPortMalloc+0x150>)
 8007c96:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4b0d      	ldr	r3, [pc, #52]	; (8007cd4 <pvPortMalloc+0x144>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cac:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <pvPortMalloc+0x154>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <pvPortMalloc+0x154>)
 8007cb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cb6:	f7ff f959 	bl	8006f6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	d001      	beq.n	8007cc6 <pvPortMalloc+0x136>
 8007cc2:	b672      	cpsid	i
 8007cc4:	e7fe      	b.n	8007cc4 <pvPortMalloc+0x134>
	return pvReturn;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
}
 8007cc8:	0018      	movs	r0, r3
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	b006      	add	sp, #24
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20005838 	.word	0x20005838
 8007cd4:	2000584c 	.word	0x2000584c
 8007cd8:	2000583c 	.word	0x2000583c
 8007cdc:	20005830 	.word	0x20005830
 8007ce0:	20005840 	.word	0x20005840
 8007ce4:	20005844 	.word	0x20005844

08007ce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d03a      	beq.n	8007d70 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	425b      	negs	r3, r3
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	18d3      	adds	r3, r2, r3
 8007d02:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <vPortFree+0x90>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4013      	ands	r3, r2
 8007d12:	d101      	bne.n	8007d18 <vPortFree+0x30>
 8007d14:	b672      	cpsid	i
 8007d16:	e7fe      	b.n	8007d16 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <vPortFree+0x3c>
 8007d20:	b672      	cpsid	i
 8007d22:	e7fe      	b.n	8007d22 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <vPortFree+0x90>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d01f      	beq.n	8007d70 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d11b      	bne.n	8007d70 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	4b0e      	ldr	r3, [pc, #56]	; (8007d78 <vPortFree+0x90>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	401a      	ands	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d48:	f7ff f904 	bl	8006f54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <vPortFree+0x94>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	18d2      	adds	r2, r2, r3
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <vPortFree+0x94>)
 8007d58:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	f000 f871 	bl	8007e44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d62:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <vPortFree+0x98>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <vPortFree+0x98>)
 8007d6a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8007d6c:	f7ff f8fe 	bl	8006f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d70:	46c0      	nop			; (mov r8, r8)
 8007d72:	46bd      	mov	sp, r7
 8007d74:	b004      	add	sp, #16
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	2000584c 	.word	0x2000584c
 8007d7c:	2000583c 	.word	0x2000583c
 8007d80:	20005848 	.word	0x20005848

08007d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d8a:	23a0      	movs	r3, #160	; 0xa0
 8007d8c:	01db      	lsls	r3, r3, #7
 8007d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d90:	4b26      	ldr	r3, [pc, #152]	; (8007e2c <prvHeapInit+0xa8>)
 8007d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2207      	movs	r2, #7
 8007d98:	4013      	ands	r3, r2
 8007d9a:	d00c      	beq.n	8007db6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3307      	adds	r3, #7
 8007da0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2207      	movs	r2, #7
 8007da6:	4393      	bics	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	4b1e      	ldr	r3, [pc, #120]	; (8007e2c <prvHeapInit+0xa8>)
 8007db2:	18d3      	adds	r3, r2, r3
 8007db4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dba:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <prvHeapInit+0xac>)
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dc0:	4b1b      	ldr	r3, [pc, #108]	; (8007e30 <prvHeapInit+0xac>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	18d3      	adds	r3, r2, r3
 8007dcc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dce:	2208      	movs	r2, #8
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2207      	movs	r2, #7
 8007dda:	4393      	bics	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <prvHeapInit+0xb0>)
 8007de2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007de4:	4b13      	ldr	r3, [pc, #76]	; (8007e34 <prvHeapInit+0xb0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2200      	movs	r2, #0
 8007dea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dec:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <prvHeapInit+0xb0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	1ad2      	subs	r2, r2, r3
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e02:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <prvHeapInit+0xb0>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <prvHeapInit+0xb4>)
 8007e10:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <prvHeapInit+0xb8>)
 8007e18:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e1a:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <prvHeapInit+0xbc>)
 8007e1c:	2280      	movs	r2, #128	; 0x80
 8007e1e:	0612      	lsls	r2, r2, #24
 8007e20:	601a      	str	r2, [r3, #0]
}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	46bd      	mov	sp, r7
 8007e26:	b004      	add	sp, #16
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	20000830 	.word	0x20000830
 8007e30:	20005830 	.word	0x20005830
 8007e34:	20005838 	.word	0x20005838
 8007e38:	20005840 	.word	0x20005840
 8007e3c:	2000583c 	.word	0x2000583c
 8007e40:	2000584c 	.word	0x2000584c

08007e44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e4c:	4b27      	ldr	r3, [pc, #156]	; (8007eec <prvInsertBlockIntoFreeList+0xa8>)
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	e002      	b.n	8007e58 <prvInsertBlockIntoFreeList+0x14>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d8f7      	bhi.n	8007e52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	18d3      	adds	r3, r2, r3
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d108      	bne.n	8007e86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	18d2      	adds	r2, r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	18d2      	adds	r2, r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d118      	bne.n	8007ecc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b14      	ldr	r3, [pc, #80]	; (8007ef0 <prvInsertBlockIntoFreeList+0xac>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d00d      	beq.n	8007ec2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	18d2      	adds	r2, r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	e008      	b.n	8007ed4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ec2:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <prvInsertBlockIntoFreeList+0xac>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	e003      	b.n	8007ed4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d002      	beq.n	8007ee2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ee2:	46c0      	nop			; (mov r8, r8)
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	b004      	add	sp, #16
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	20005830 	.word	0x20005830
 8007ef0:	20005838 	.word	0x20005838

08007ef4 <atoi>:
 8007ef4:	b510      	push	{r4, lr}
 8007ef6:	220a      	movs	r2, #10
 8007ef8:	2100      	movs	r1, #0
 8007efa:	f000 f887 	bl	800800c <strtol>
 8007efe:	bd10      	pop	{r4, pc}

08007f00 <_strtol_l.constprop.0>:
 8007f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f02:	b087      	sub	sp, #28
 8007f04:	001e      	movs	r6, r3
 8007f06:	9005      	str	r0, [sp, #20]
 8007f08:	9101      	str	r1, [sp, #4]
 8007f0a:	9202      	str	r2, [sp, #8]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d048      	beq.n	8007fa2 <_strtol_l.constprop.0+0xa2>
 8007f10:	000b      	movs	r3, r1
 8007f12:	2e24      	cmp	r6, #36	; 0x24
 8007f14:	d845      	bhi.n	8007fa2 <_strtol_l.constprop.0+0xa2>
 8007f16:	4a3b      	ldr	r2, [pc, #236]	; (8008004 <_strtol_l.constprop.0+0x104>)
 8007f18:	2108      	movs	r1, #8
 8007f1a:	4694      	mov	ip, r2
 8007f1c:	001a      	movs	r2, r3
 8007f1e:	4660      	mov	r0, ip
 8007f20:	7814      	ldrb	r4, [r2, #0]
 8007f22:	3301      	adds	r3, #1
 8007f24:	5d00      	ldrb	r0, [r0, r4]
 8007f26:	001d      	movs	r5, r3
 8007f28:	0007      	movs	r7, r0
 8007f2a:	400f      	ands	r7, r1
 8007f2c:	4208      	tst	r0, r1
 8007f2e:	d1f5      	bne.n	8007f1c <_strtol_l.constprop.0+0x1c>
 8007f30:	2c2d      	cmp	r4, #45	; 0x2d
 8007f32:	d13d      	bne.n	8007fb0 <_strtol_l.constprop.0+0xb0>
 8007f34:	2701      	movs	r7, #1
 8007f36:	781c      	ldrb	r4, [r3, #0]
 8007f38:	1c95      	adds	r5, r2, #2
 8007f3a:	2e00      	cmp	r6, #0
 8007f3c:	d05e      	beq.n	8007ffc <_strtol_l.constprop.0+0xfc>
 8007f3e:	2e10      	cmp	r6, #16
 8007f40:	d109      	bne.n	8007f56 <_strtol_l.constprop.0+0x56>
 8007f42:	2c30      	cmp	r4, #48	; 0x30
 8007f44:	d107      	bne.n	8007f56 <_strtol_l.constprop.0+0x56>
 8007f46:	2220      	movs	r2, #32
 8007f48:	782b      	ldrb	r3, [r5, #0]
 8007f4a:	4393      	bics	r3, r2
 8007f4c:	2b58      	cmp	r3, #88	; 0x58
 8007f4e:	d150      	bne.n	8007ff2 <_strtol_l.constprop.0+0xf2>
 8007f50:	2610      	movs	r6, #16
 8007f52:	786c      	ldrb	r4, [r5, #1]
 8007f54:	3502      	adds	r5, #2
 8007f56:	4b2c      	ldr	r3, [pc, #176]	; (8008008 <_strtol_l.constprop.0+0x108>)
 8007f58:	0031      	movs	r1, r6
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	9303      	str	r3, [sp, #12]
 8007f60:	f7f8 f96c 	bl	800023c <__aeabi_uidivmod>
 8007f64:	2200      	movs	r2, #0
 8007f66:	9104      	str	r1, [sp, #16]
 8007f68:	2101      	movs	r1, #1
 8007f6a:	4684      	mov	ip, r0
 8007f6c:	0010      	movs	r0, r2
 8007f6e:	4249      	negs	r1, r1
 8007f70:	0023      	movs	r3, r4
 8007f72:	3b30      	subs	r3, #48	; 0x30
 8007f74:	2b09      	cmp	r3, #9
 8007f76:	d903      	bls.n	8007f80 <_strtol_l.constprop.0+0x80>
 8007f78:	3b11      	subs	r3, #17
 8007f7a:	2b19      	cmp	r3, #25
 8007f7c:	d81d      	bhi.n	8007fba <_strtol_l.constprop.0+0xba>
 8007f7e:	330a      	adds	r3, #10
 8007f80:	429e      	cmp	r6, r3
 8007f82:	dd1e      	ble.n	8007fc2 <_strtol_l.constprop.0+0xc2>
 8007f84:	1c54      	adds	r4, r2, #1
 8007f86:	d009      	beq.n	8007f9c <_strtol_l.constprop.0+0x9c>
 8007f88:	000a      	movs	r2, r1
 8007f8a:	4584      	cmp	ip, r0
 8007f8c:	d306      	bcc.n	8007f9c <_strtol_l.constprop.0+0x9c>
 8007f8e:	d102      	bne.n	8007f96 <_strtol_l.constprop.0+0x96>
 8007f90:	9c04      	ldr	r4, [sp, #16]
 8007f92:	429c      	cmp	r4, r3
 8007f94:	db02      	blt.n	8007f9c <_strtol_l.constprop.0+0x9c>
 8007f96:	2201      	movs	r2, #1
 8007f98:	4370      	muls	r0, r6
 8007f9a:	1818      	adds	r0, r3, r0
 8007f9c:	782c      	ldrb	r4, [r5, #0]
 8007f9e:	3501      	adds	r5, #1
 8007fa0:	e7e6      	b.n	8007f70 <_strtol_l.constprop.0+0x70>
 8007fa2:	f000 fb7d 	bl	80086a0 <__errno>
 8007fa6:	2316      	movs	r3, #22
 8007fa8:	6003      	str	r3, [r0, #0]
 8007faa:	2000      	movs	r0, #0
 8007fac:	b007      	add	sp, #28
 8007fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fb0:	2c2b      	cmp	r4, #43	; 0x2b
 8007fb2:	d1c2      	bne.n	8007f3a <_strtol_l.constprop.0+0x3a>
 8007fb4:	781c      	ldrb	r4, [r3, #0]
 8007fb6:	1c95      	adds	r5, r2, #2
 8007fb8:	e7bf      	b.n	8007f3a <_strtol_l.constprop.0+0x3a>
 8007fba:	0023      	movs	r3, r4
 8007fbc:	3b61      	subs	r3, #97	; 0x61
 8007fbe:	2b19      	cmp	r3, #25
 8007fc0:	d9dd      	bls.n	8007f7e <_strtol_l.constprop.0+0x7e>
 8007fc2:	1c53      	adds	r3, r2, #1
 8007fc4:	d109      	bne.n	8007fda <_strtol_l.constprop.0+0xda>
 8007fc6:	2322      	movs	r3, #34	; 0x22
 8007fc8:	9a05      	ldr	r2, [sp, #20]
 8007fca:	9803      	ldr	r0, [sp, #12]
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	9b02      	ldr	r3, [sp, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d0eb      	beq.n	8007fac <_strtol_l.constprop.0+0xac>
 8007fd4:	1e6b      	subs	r3, r5, #1
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	e007      	b.n	8007fea <_strtol_l.constprop.0+0xea>
 8007fda:	2f00      	cmp	r7, #0
 8007fdc:	d000      	beq.n	8007fe0 <_strtol_l.constprop.0+0xe0>
 8007fde:	4240      	negs	r0, r0
 8007fe0:	9b02      	ldr	r3, [sp, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0e2      	beq.n	8007fac <_strtol_l.constprop.0+0xac>
 8007fe6:	2a00      	cmp	r2, #0
 8007fe8:	d1f4      	bne.n	8007fd4 <_strtol_l.constprop.0+0xd4>
 8007fea:	9b02      	ldr	r3, [sp, #8]
 8007fec:	9a01      	ldr	r2, [sp, #4]
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	e7dc      	b.n	8007fac <_strtol_l.constprop.0+0xac>
 8007ff2:	2430      	movs	r4, #48	; 0x30
 8007ff4:	2e00      	cmp	r6, #0
 8007ff6:	d1ae      	bne.n	8007f56 <_strtol_l.constprop.0+0x56>
 8007ff8:	3608      	adds	r6, #8
 8007ffa:	e7ac      	b.n	8007f56 <_strtol_l.constprop.0+0x56>
 8007ffc:	2c30      	cmp	r4, #48	; 0x30
 8007ffe:	d0a2      	beq.n	8007f46 <_strtol_l.constprop.0+0x46>
 8008000:	260a      	movs	r6, #10
 8008002:	e7a8      	b.n	8007f56 <_strtol_l.constprop.0+0x56>
 8008004:	080097ed 	.word	0x080097ed
 8008008:	7fffffff 	.word	0x7fffffff

0800800c <strtol>:
 800800c:	b510      	push	{r4, lr}
 800800e:	4c04      	ldr	r4, [pc, #16]	; (8008020 <strtol+0x14>)
 8008010:	0013      	movs	r3, r2
 8008012:	000a      	movs	r2, r1
 8008014:	0001      	movs	r1, r0
 8008016:	6820      	ldr	r0, [r4, #0]
 8008018:	f7ff ff72 	bl	8007f00 <_strtol_l.constprop.0>
 800801c:	bd10      	pop	{r4, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	20000080 	.word	0x20000080

08008024 <_strtoul_l.constprop.0>:
 8008024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008026:	b087      	sub	sp, #28
 8008028:	9202      	str	r2, [sp, #8]
 800802a:	4a3e      	ldr	r2, [pc, #248]	; (8008124 <_strtoul_l.constprop.0+0x100>)
 800802c:	001e      	movs	r6, r3
 800802e:	9101      	str	r1, [sp, #4]
 8008030:	000b      	movs	r3, r1
 8008032:	4694      	mov	ip, r2
 8008034:	2108      	movs	r1, #8
 8008036:	9005      	str	r0, [sp, #20]
 8008038:	001a      	movs	r2, r3
 800803a:	4660      	mov	r0, ip
 800803c:	7814      	ldrb	r4, [r2, #0]
 800803e:	3301      	adds	r3, #1
 8008040:	5d00      	ldrb	r0, [r0, r4]
 8008042:	001d      	movs	r5, r3
 8008044:	0007      	movs	r7, r0
 8008046:	400f      	ands	r7, r1
 8008048:	4208      	tst	r0, r1
 800804a:	d1f5      	bne.n	8008038 <_strtoul_l.constprop.0+0x14>
 800804c:	2c2d      	cmp	r4, #45	; 0x2d
 800804e:	d13d      	bne.n	80080cc <_strtoul_l.constprop.0+0xa8>
 8008050:	2701      	movs	r7, #1
 8008052:	781c      	ldrb	r4, [r3, #0]
 8008054:	1c95      	adds	r5, r2, #2
 8008056:	2e00      	cmp	r6, #0
 8008058:	d05f      	beq.n	800811a <_strtoul_l.constprop.0+0xf6>
 800805a:	2e10      	cmp	r6, #16
 800805c:	d109      	bne.n	8008072 <_strtoul_l.constprop.0+0x4e>
 800805e:	2c30      	cmp	r4, #48	; 0x30
 8008060:	d107      	bne.n	8008072 <_strtoul_l.constprop.0+0x4e>
 8008062:	2220      	movs	r2, #32
 8008064:	782b      	ldrb	r3, [r5, #0]
 8008066:	4393      	bics	r3, r2
 8008068:	2b58      	cmp	r3, #88	; 0x58
 800806a:	d151      	bne.n	8008110 <_strtoul_l.constprop.0+0xec>
 800806c:	2610      	movs	r6, #16
 800806e:	786c      	ldrb	r4, [r5, #1]
 8008070:	3502      	adds	r5, #2
 8008072:	2001      	movs	r0, #1
 8008074:	0031      	movs	r1, r6
 8008076:	4240      	negs	r0, r0
 8008078:	f7f8 f85a 	bl	8000130 <__udivsi3>
 800807c:	9003      	str	r0, [sp, #12]
 800807e:	2001      	movs	r0, #1
 8008080:	0031      	movs	r1, r6
 8008082:	4240      	negs	r0, r0
 8008084:	f7f8 f8da 	bl	800023c <__aeabi_uidivmod>
 8008088:	2300      	movs	r3, #0
 800808a:	2201      	movs	r2, #1
 800808c:	9104      	str	r1, [sp, #16]
 800808e:	2101      	movs	r1, #1
 8008090:	0018      	movs	r0, r3
 8008092:	4694      	mov	ip, r2
 8008094:	4249      	negs	r1, r1
 8008096:	0022      	movs	r2, r4
 8008098:	3a30      	subs	r2, #48	; 0x30
 800809a:	2a09      	cmp	r2, #9
 800809c:	d903      	bls.n	80080a6 <_strtoul_l.constprop.0+0x82>
 800809e:	3a11      	subs	r2, #17
 80080a0:	2a19      	cmp	r2, #25
 80080a2:	d818      	bhi.n	80080d6 <_strtoul_l.constprop.0+0xb2>
 80080a4:	320a      	adds	r2, #10
 80080a6:	4296      	cmp	r6, r2
 80080a8:	dd19      	ble.n	80080de <_strtoul_l.constprop.0+0xba>
 80080aa:	1c5c      	adds	r4, r3, #1
 80080ac:	d00b      	beq.n	80080c6 <_strtoul_l.constprop.0+0xa2>
 80080ae:	9c03      	ldr	r4, [sp, #12]
 80080b0:	000b      	movs	r3, r1
 80080b2:	4284      	cmp	r4, r0
 80080b4:	d307      	bcc.n	80080c6 <_strtoul_l.constprop.0+0xa2>
 80080b6:	d103      	bne.n	80080c0 <_strtoul_l.constprop.0+0x9c>
 80080b8:	9c04      	ldr	r4, [sp, #16]
 80080ba:	000b      	movs	r3, r1
 80080bc:	4294      	cmp	r4, r2
 80080be:	db02      	blt.n	80080c6 <_strtoul_l.constprop.0+0xa2>
 80080c0:	4663      	mov	r3, ip
 80080c2:	4370      	muls	r0, r6
 80080c4:	1810      	adds	r0, r2, r0
 80080c6:	782c      	ldrb	r4, [r5, #0]
 80080c8:	3501      	adds	r5, #1
 80080ca:	e7e4      	b.n	8008096 <_strtoul_l.constprop.0+0x72>
 80080cc:	2c2b      	cmp	r4, #43	; 0x2b
 80080ce:	d1c2      	bne.n	8008056 <_strtoul_l.constprop.0+0x32>
 80080d0:	781c      	ldrb	r4, [r3, #0]
 80080d2:	1c95      	adds	r5, r2, #2
 80080d4:	e7bf      	b.n	8008056 <_strtoul_l.constprop.0+0x32>
 80080d6:	0022      	movs	r2, r4
 80080d8:	3a61      	subs	r2, #97	; 0x61
 80080da:	2a19      	cmp	r2, #25
 80080dc:	d9e2      	bls.n	80080a4 <_strtoul_l.constprop.0+0x80>
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	d108      	bne.n	80080f4 <_strtoul_l.constprop.0+0xd0>
 80080e2:	2222      	movs	r2, #34	; 0x22
 80080e4:	9905      	ldr	r1, [sp, #20]
 80080e6:	0018      	movs	r0, r3
 80080e8:	600a      	str	r2, [r1, #0]
 80080ea:	9a02      	ldr	r2, [sp, #8]
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	d109      	bne.n	8008104 <_strtoul_l.constprop.0+0xe0>
 80080f0:	b007      	add	sp, #28
 80080f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f4:	2f00      	cmp	r7, #0
 80080f6:	d000      	beq.n	80080fa <_strtoul_l.constprop.0+0xd6>
 80080f8:	4240      	negs	r0, r0
 80080fa:	9a02      	ldr	r2, [sp, #8]
 80080fc:	2a00      	cmp	r2, #0
 80080fe:	d0f7      	beq.n	80080f0 <_strtoul_l.constprop.0+0xcc>
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <_strtoul_l.constprop.0+0xe4>
 8008104:	1e6b      	subs	r3, r5, #1
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	9b02      	ldr	r3, [sp, #8]
 800810a:	9a01      	ldr	r2, [sp, #4]
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	e7ef      	b.n	80080f0 <_strtoul_l.constprop.0+0xcc>
 8008110:	2430      	movs	r4, #48	; 0x30
 8008112:	2e00      	cmp	r6, #0
 8008114:	d1ad      	bne.n	8008072 <_strtoul_l.constprop.0+0x4e>
 8008116:	3608      	adds	r6, #8
 8008118:	e7ab      	b.n	8008072 <_strtoul_l.constprop.0+0x4e>
 800811a:	2c30      	cmp	r4, #48	; 0x30
 800811c:	d0a1      	beq.n	8008062 <_strtoul_l.constprop.0+0x3e>
 800811e:	260a      	movs	r6, #10
 8008120:	e7a7      	b.n	8008072 <_strtoul_l.constprop.0+0x4e>
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	080097ed 	.word	0x080097ed

08008128 <strtoul>:
 8008128:	b510      	push	{r4, lr}
 800812a:	4c04      	ldr	r4, [pc, #16]	; (800813c <strtoul+0x14>)
 800812c:	0013      	movs	r3, r2
 800812e:	000a      	movs	r2, r1
 8008130:	0001      	movs	r1, r0
 8008132:	6820      	ldr	r0, [r4, #0]
 8008134:	f7ff ff76 	bl	8008024 <_strtoul_l.constprop.0>
 8008138:	bd10      	pop	{r4, pc}
 800813a:	46c0      	nop			; (mov r8, r8)
 800813c:	20000080 	.word	0x20000080

08008140 <std>:
 8008140:	2300      	movs	r3, #0
 8008142:	b510      	push	{r4, lr}
 8008144:	0004      	movs	r4, r0
 8008146:	6003      	str	r3, [r0, #0]
 8008148:	6043      	str	r3, [r0, #4]
 800814a:	6083      	str	r3, [r0, #8]
 800814c:	8181      	strh	r1, [r0, #12]
 800814e:	6643      	str	r3, [r0, #100]	; 0x64
 8008150:	81c2      	strh	r2, [r0, #14]
 8008152:	6103      	str	r3, [r0, #16]
 8008154:	6143      	str	r3, [r0, #20]
 8008156:	6183      	str	r3, [r0, #24]
 8008158:	0019      	movs	r1, r3
 800815a:	2208      	movs	r2, #8
 800815c:	305c      	adds	r0, #92	; 0x5c
 800815e:	f000 fa49 	bl	80085f4 <memset>
 8008162:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <std+0x50>)
 8008164:	6224      	str	r4, [r4, #32]
 8008166:	6263      	str	r3, [r4, #36]	; 0x24
 8008168:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <std+0x54>)
 800816a:	62a3      	str	r3, [r4, #40]	; 0x28
 800816c:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <std+0x58>)
 800816e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008170:	4b0a      	ldr	r3, [pc, #40]	; (800819c <std+0x5c>)
 8008172:	6323      	str	r3, [r4, #48]	; 0x30
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <std+0x60>)
 8008176:	429c      	cmp	r4, r3
 8008178:	d005      	beq.n	8008186 <std+0x46>
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <std+0x64>)
 800817c:	429c      	cmp	r4, r3
 800817e:	d002      	beq.n	8008186 <std+0x46>
 8008180:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <std+0x68>)
 8008182:	429c      	cmp	r4, r3
 8008184:	d103      	bne.n	800818e <std+0x4e>
 8008186:	0020      	movs	r0, r4
 8008188:	3058      	adds	r0, #88	; 0x58
 800818a:	f000 fab3 	bl	80086f4 <__retarget_lock_init_recursive>
 800818e:	bd10      	pop	{r4, pc}
 8008190:	08008411 	.word	0x08008411
 8008194:	08008439 	.word	0x08008439
 8008198:	08008471 	.word	0x08008471
 800819c:	0800849d 	.word	0x0800849d
 80081a0:	20005850 	.word	0x20005850
 80081a4:	200058b8 	.word	0x200058b8
 80081a8:	20005920 	.word	0x20005920

080081ac <stdio_exit_handler>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	4a03      	ldr	r2, [pc, #12]	; (80081bc <stdio_exit_handler+0x10>)
 80081b0:	4903      	ldr	r1, [pc, #12]	; (80081c0 <stdio_exit_handler+0x14>)
 80081b2:	4804      	ldr	r0, [pc, #16]	; (80081c4 <stdio_exit_handler+0x18>)
 80081b4:	f000 f86c 	bl	8008290 <_fwalk_sglue>
 80081b8:	bd10      	pop	{r4, pc}
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	20000028 	.word	0x20000028
 80081c0:	08009269 	.word	0x08009269
 80081c4:	20000034 	.word	0x20000034

080081c8 <cleanup_stdio>:
 80081c8:	6841      	ldr	r1, [r0, #4]
 80081ca:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <cleanup_stdio+0x30>)
 80081cc:	b510      	push	{r4, lr}
 80081ce:	0004      	movs	r4, r0
 80081d0:	4299      	cmp	r1, r3
 80081d2:	d001      	beq.n	80081d8 <cleanup_stdio+0x10>
 80081d4:	f001 f848 	bl	8009268 <_fflush_r>
 80081d8:	68a1      	ldr	r1, [r4, #8]
 80081da:	4b08      	ldr	r3, [pc, #32]	; (80081fc <cleanup_stdio+0x34>)
 80081dc:	4299      	cmp	r1, r3
 80081de:	d002      	beq.n	80081e6 <cleanup_stdio+0x1e>
 80081e0:	0020      	movs	r0, r4
 80081e2:	f001 f841 	bl	8009268 <_fflush_r>
 80081e6:	68e1      	ldr	r1, [r4, #12]
 80081e8:	4b05      	ldr	r3, [pc, #20]	; (8008200 <cleanup_stdio+0x38>)
 80081ea:	4299      	cmp	r1, r3
 80081ec:	d002      	beq.n	80081f4 <cleanup_stdio+0x2c>
 80081ee:	0020      	movs	r0, r4
 80081f0:	f001 f83a 	bl	8009268 <_fflush_r>
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	46c0      	nop			; (mov r8, r8)
 80081f8:	20005850 	.word	0x20005850
 80081fc:	200058b8 	.word	0x200058b8
 8008200:	20005920 	.word	0x20005920

08008204 <global_stdio_init.part.0>:
 8008204:	b510      	push	{r4, lr}
 8008206:	4b09      	ldr	r3, [pc, #36]	; (800822c <global_stdio_init.part.0+0x28>)
 8008208:	4a09      	ldr	r2, [pc, #36]	; (8008230 <global_stdio_init.part.0+0x2c>)
 800820a:	2104      	movs	r1, #4
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	4809      	ldr	r0, [pc, #36]	; (8008234 <global_stdio_init.part.0+0x30>)
 8008210:	2200      	movs	r2, #0
 8008212:	f7ff ff95 	bl	8008140 <std>
 8008216:	2201      	movs	r2, #1
 8008218:	2109      	movs	r1, #9
 800821a:	4807      	ldr	r0, [pc, #28]	; (8008238 <global_stdio_init.part.0+0x34>)
 800821c:	f7ff ff90 	bl	8008140 <std>
 8008220:	2202      	movs	r2, #2
 8008222:	2112      	movs	r1, #18
 8008224:	4805      	ldr	r0, [pc, #20]	; (800823c <global_stdio_init.part.0+0x38>)
 8008226:	f7ff ff8b 	bl	8008140 <std>
 800822a:	bd10      	pop	{r4, pc}
 800822c:	20005988 	.word	0x20005988
 8008230:	080081ad 	.word	0x080081ad
 8008234:	20005850 	.word	0x20005850
 8008238:	200058b8 	.word	0x200058b8
 800823c:	20005920 	.word	0x20005920

08008240 <__sfp_lock_acquire>:
 8008240:	b510      	push	{r4, lr}
 8008242:	4802      	ldr	r0, [pc, #8]	; (800824c <__sfp_lock_acquire+0xc>)
 8008244:	f000 fa57 	bl	80086f6 <__retarget_lock_acquire_recursive>
 8008248:	bd10      	pop	{r4, pc}
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	20005991 	.word	0x20005991

08008250 <__sfp_lock_release>:
 8008250:	b510      	push	{r4, lr}
 8008252:	4802      	ldr	r0, [pc, #8]	; (800825c <__sfp_lock_release+0xc>)
 8008254:	f000 fa50 	bl	80086f8 <__retarget_lock_release_recursive>
 8008258:	bd10      	pop	{r4, pc}
 800825a:	46c0      	nop			; (mov r8, r8)
 800825c:	20005991 	.word	0x20005991

08008260 <__sinit>:
 8008260:	b510      	push	{r4, lr}
 8008262:	0004      	movs	r4, r0
 8008264:	f7ff ffec 	bl	8008240 <__sfp_lock_acquire>
 8008268:	6a23      	ldr	r3, [r4, #32]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <__sinit+0x14>
 800826e:	f7ff ffef 	bl	8008250 <__sfp_lock_release>
 8008272:	bd10      	pop	{r4, pc}
 8008274:	4b04      	ldr	r3, [pc, #16]	; (8008288 <__sinit+0x28>)
 8008276:	6223      	str	r3, [r4, #32]
 8008278:	4b04      	ldr	r3, [pc, #16]	; (800828c <__sinit+0x2c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1f6      	bne.n	800826e <__sinit+0xe>
 8008280:	f7ff ffc0 	bl	8008204 <global_stdio_init.part.0>
 8008284:	e7f3      	b.n	800826e <__sinit+0xe>
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	080081c9 	.word	0x080081c9
 800828c:	20005988 	.word	0x20005988

08008290 <_fwalk_sglue>:
 8008290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008292:	0014      	movs	r4, r2
 8008294:	2600      	movs	r6, #0
 8008296:	9000      	str	r0, [sp, #0]
 8008298:	9101      	str	r1, [sp, #4]
 800829a:	68a5      	ldr	r5, [r4, #8]
 800829c:	6867      	ldr	r7, [r4, #4]
 800829e:	3f01      	subs	r7, #1
 80082a0:	d504      	bpl.n	80082ac <_fwalk_sglue+0x1c>
 80082a2:	6824      	ldr	r4, [r4, #0]
 80082a4:	2c00      	cmp	r4, #0
 80082a6:	d1f8      	bne.n	800829a <_fwalk_sglue+0xa>
 80082a8:	0030      	movs	r0, r6
 80082aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082ac:	89ab      	ldrh	r3, [r5, #12]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d908      	bls.n	80082c4 <_fwalk_sglue+0x34>
 80082b2:	220e      	movs	r2, #14
 80082b4:	5eab      	ldrsh	r3, [r5, r2]
 80082b6:	3301      	adds	r3, #1
 80082b8:	d004      	beq.n	80082c4 <_fwalk_sglue+0x34>
 80082ba:	0029      	movs	r1, r5
 80082bc:	9800      	ldr	r0, [sp, #0]
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	4798      	blx	r3
 80082c2:	4306      	orrs	r6, r0
 80082c4:	3568      	adds	r5, #104	; 0x68
 80082c6:	e7ea      	b.n	800829e <_fwalk_sglue+0xe>

080082c8 <iprintf>:
 80082c8:	b40f      	push	{r0, r1, r2, r3}
 80082ca:	b507      	push	{r0, r1, r2, lr}
 80082cc:	4905      	ldr	r1, [pc, #20]	; (80082e4 <iprintf+0x1c>)
 80082ce:	ab04      	add	r3, sp, #16
 80082d0:	6808      	ldr	r0, [r1, #0]
 80082d2:	cb04      	ldmia	r3!, {r2}
 80082d4:	6881      	ldr	r1, [r0, #8]
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	f000 fca0 	bl	8008c1c <_vfiprintf_r>
 80082dc:	b003      	add	sp, #12
 80082de:	bc08      	pop	{r3}
 80082e0:	b004      	add	sp, #16
 80082e2:	4718      	bx	r3
 80082e4:	20000080 	.word	0x20000080

080082e8 <_puts_r>:
 80082e8:	6a03      	ldr	r3, [r0, #32]
 80082ea:	b570      	push	{r4, r5, r6, lr}
 80082ec:	0005      	movs	r5, r0
 80082ee:	000e      	movs	r6, r1
 80082f0:	6884      	ldr	r4, [r0, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <_puts_r+0x12>
 80082f6:	f7ff ffb3 	bl	8008260 <__sinit>
 80082fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082fc:	07db      	lsls	r3, r3, #31
 80082fe:	d405      	bmi.n	800830c <_puts_r+0x24>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	059b      	lsls	r3, r3, #22
 8008304:	d402      	bmi.n	800830c <_puts_r+0x24>
 8008306:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008308:	f000 f9f5 	bl	80086f6 <__retarget_lock_acquire_recursive>
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	071b      	lsls	r3, r3, #28
 8008310:	d502      	bpl.n	8008318 <_puts_r+0x30>
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d11f      	bne.n	8008358 <_puts_r+0x70>
 8008318:	0021      	movs	r1, r4
 800831a:	0028      	movs	r0, r5
 800831c:	f000 f906 	bl	800852c <__swsetup_r>
 8008320:	2800      	cmp	r0, #0
 8008322:	d019      	beq.n	8008358 <_puts_r+0x70>
 8008324:	2501      	movs	r5, #1
 8008326:	426d      	negs	r5, r5
 8008328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800832a:	07db      	lsls	r3, r3, #31
 800832c:	d405      	bmi.n	800833a <_puts_r+0x52>
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	059b      	lsls	r3, r3, #22
 8008332:	d402      	bmi.n	800833a <_puts_r+0x52>
 8008334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008336:	f000 f9df 	bl	80086f8 <__retarget_lock_release_recursive>
 800833a:	0028      	movs	r0, r5
 800833c:	bd70      	pop	{r4, r5, r6, pc}
 800833e:	3601      	adds	r6, #1
 8008340:	60a3      	str	r3, [r4, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	da04      	bge.n	8008350 <_puts_r+0x68>
 8008346:	69a2      	ldr	r2, [r4, #24]
 8008348:	429a      	cmp	r2, r3
 800834a:	dc16      	bgt.n	800837a <_puts_r+0x92>
 800834c:	290a      	cmp	r1, #10
 800834e:	d014      	beq.n	800837a <_puts_r+0x92>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	6022      	str	r2, [r4, #0]
 8008356:	7019      	strb	r1, [r3, #0]
 8008358:	68a3      	ldr	r3, [r4, #8]
 800835a:	7831      	ldrb	r1, [r6, #0]
 800835c:	3b01      	subs	r3, #1
 800835e:	2900      	cmp	r1, #0
 8008360:	d1ed      	bne.n	800833e <_puts_r+0x56>
 8008362:	60a3      	str	r3, [r4, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	da0f      	bge.n	8008388 <_puts_r+0xa0>
 8008368:	0028      	movs	r0, r5
 800836a:	0022      	movs	r2, r4
 800836c:	310a      	adds	r1, #10
 800836e:	f000 f89b 	bl	80084a8 <__swbuf_r>
 8008372:	250a      	movs	r5, #10
 8008374:	3001      	adds	r0, #1
 8008376:	d1d7      	bne.n	8008328 <_puts_r+0x40>
 8008378:	e7d4      	b.n	8008324 <_puts_r+0x3c>
 800837a:	0022      	movs	r2, r4
 800837c:	0028      	movs	r0, r5
 800837e:	f000 f893 	bl	80084a8 <__swbuf_r>
 8008382:	3001      	adds	r0, #1
 8008384:	d1e8      	bne.n	8008358 <_puts_r+0x70>
 8008386:	e7cd      	b.n	8008324 <_puts_r+0x3c>
 8008388:	250a      	movs	r5, #10
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	6022      	str	r2, [r4, #0]
 8008390:	701d      	strb	r5, [r3, #0]
 8008392:	e7c9      	b.n	8008328 <_puts_r+0x40>

08008394 <puts>:
 8008394:	b510      	push	{r4, lr}
 8008396:	4b03      	ldr	r3, [pc, #12]	; (80083a4 <puts+0x10>)
 8008398:	0001      	movs	r1, r0
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	f7ff ffa4 	bl	80082e8 <_puts_r>
 80083a0:	bd10      	pop	{r4, pc}
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	20000080 	.word	0x20000080

080083a8 <sniprintf>:
 80083a8:	b40c      	push	{r2, r3}
 80083aa:	b530      	push	{r4, r5, lr}
 80083ac:	4b17      	ldr	r3, [pc, #92]	; (800840c <sniprintf+0x64>)
 80083ae:	000c      	movs	r4, r1
 80083b0:	681d      	ldr	r5, [r3, #0]
 80083b2:	b09d      	sub	sp, #116	; 0x74
 80083b4:	2900      	cmp	r1, #0
 80083b6:	da08      	bge.n	80083ca <sniprintf+0x22>
 80083b8:	238b      	movs	r3, #139	; 0x8b
 80083ba:	2001      	movs	r0, #1
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	4240      	negs	r0, r0
 80083c0:	b01d      	add	sp, #116	; 0x74
 80083c2:	bc30      	pop	{r4, r5}
 80083c4:	bc08      	pop	{r3}
 80083c6:	b002      	add	sp, #8
 80083c8:	4718      	bx	r3
 80083ca:	2382      	movs	r3, #130	; 0x82
 80083cc:	466a      	mov	r2, sp
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	8293      	strh	r3, [r2, #20]
 80083d2:	2300      	movs	r3, #0
 80083d4:	9002      	str	r0, [sp, #8]
 80083d6:	9006      	str	r0, [sp, #24]
 80083d8:	4299      	cmp	r1, r3
 80083da:	d000      	beq.n	80083de <sniprintf+0x36>
 80083dc:	1e4b      	subs	r3, r1, #1
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	9307      	str	r3, [sp, #28]
 80083e2:	2301      	movs	r3, #1
 80083e4:	466a      	mov	r2, sp
 80083e6:	425b      	negs	r3, r3
 80083e8:	82d3      	strh	r3, [r2, #22]
 80083ea:	0028      	movs	r0, r5
 80083ec:	ab21      	add	r3, sp, #132	; 0x84
 80083ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80083f0:	a902      	add	r1, sp, #8
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	f000 faea 	bl	80089cc <_svfiprintf_r>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	da01      	bge.n	8008400 <sniprintf+0x58>
 80083fc:	238b      	movs	r3, #139	; 0x8b
 80083fe:	602b      	str	r3, [r5, #0]
 8008400:	2c00      	cmp	r4, #0
 8008402:	d0dd      	beq.n	80083c0 <sniprintf+0x18>
 8008404:	2200      	movs	r2, #0
 8008406:	9b02      	ldr	r3, [sp, #8]
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	e7d9      	b.n	80083c0 <sniprintf+0x18>
 800840c:	20000080 	.word	0x20000080

08008410 <__sread>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	000c      	movs	r4, r1
 8008414:	250e      	movs	r5, #14
 8008416:	5f49      	ldrsh	r1, [r1, r5]
 8008418:	f000 f91a 	bl	8008650 <_read_r>
 800841c:	2800      	cmp	r0, #0
 800841e:	db03      	blt.n	8008428 <__sread+0x18>
 8008420:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008422:	181b      	adds	r3, r3, r0
 8008424:	6563      	str	r3, [r4, #84]	; 0x54
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	4a02      	ldr	r2, [pc, #8]	; (8008434 <__sread+0x24>)
 800842c:	4013      	ands	r3, r2
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	e7f9      	b.n	8008426 <__sread+0x16>
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	ffffefff 	.word	0xffffefff

08008438 <__swrite>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	001f      	movs	r7, r3
 800843c:	898b      	ldrh	r3, [r1, #12]
 800843e:	0005      	movs	r5, r0
 8008440:	000c      	movs	r4, r1
 8008442:	0016      	movs	r6, r2
 8008444:	05db      	lsls	r3, r3, #23
 8008446:	d505      	bpl.n	8008454 <__swrite+0x1c>
 8008448:	230e      	movs	r3, #14
 800844a:	5ec9      	ldrsh	r1, [r1, r3]
 800844c:	2200      	movs	r2, #0
 800844e:	2302      	movs	r3, #2
 8008450:	f000 f8ea 	bl	8008628 <_lseek_r>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	4a05      	ldr	r2, [pc, #20]	; (800846c <__swrite+0x34>)
 8008458:	0028      	movs	r0, r5
 800845a:	4013      	ands	r3, r2
 800845c:	81a3      	strh	r3, [r4, #12]
 800845e:	0032      	movs	r2, r6
 8008460:	230e      	movs	r3, #14
 8008462:	5ee1      	ldrsh	r1, [r4, r3]
 8008464:	003b      	movs	r3, r7
 8008466:	f000 f907 	bl	8008678 <_write_r>
 800846a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800846c:	ffffefff 	.word	0xffffefff

08008470 <__sseek>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	000c      	movs	r4, r1
 8008474:	250e      	movs	r5, #14
 8008476:	5f49      	ldrsh	r1, [r1, r5]
 8008478:	f000 f8d6 	bl	8008628 <_lseek_r>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	1c42      	adds	r2, r0, #1
 8008480:	d103      	bne.n	800848a <__sseek+0x1a>
 8008482:	4a05      	ldr	r2, [pc, #20]	; (8008498 <__sseek+0x28>)
 8008484:	4013      	ands	r3, r2
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	bd70      	pop	{r4, r5, r6, pc}
 800848a:	2280      	movs	r2, #128	; 0x80
 800848c:	0152      	lsls	r2, r2, #5
 800848e:	4313      	orrs	r3, r2
 8008490:	81a3      	strh	r3, [r4, #12]
 8008492:	6560      	str	r0, [r4, #84]	; 0x54
 8008494:	e7f8      	b.n	8008488 <__sseek+0x18>
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	ffffefff 	.word	0xffffefff

0800849c <__sclose>:
 800849c:	b510      	push	{r4, lr}
 800849e:	230e      	movs	r3, #14
 80084a0:	5ec9      	ldrsh	r1, [r1, r3]
 80084a2:	f000 f8af 	bl	8008604 <_close_r>
 80084a6:	bd10      	pop	{r4, pc}

080084a8 <__swbuf_r>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	0006      	movs	r6, r0
 80084ac:	000d      	movs	r5, r1
 80084ae:	0014      	movs	r4, r2
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d004      	beq.n	80084be <__swbuf_r+0x16>
 80084b4:	6a03      	ldr	r3, [r0, #32]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <__swbuf_r+0x16>
 80084ba:	f7ff fed1 	bl	8008260 <__sinit>
 80084be:	69a3      	ldr	r3, [r4, #24]
 80084c0:	60a3      	str	r3, [r4, #8]
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	071b      	lsls	r3, r3, #28
 80084c6:	d528      	bpl.n	800851a <__swbuf_r+0x72>
 80084c8:	6923      	ldr	r3, [r4, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d025      	beq.n	800851a <__swbuf_r+0x72>
 80084ce:	6923      	ldr	r3, [r4, #16]
 80084d0:	6820      	ldr	r0, [r4, #0]
 80084d2:	b2ef      	uxtb	r7, r5
 80084d4:	1ac0      	subs	r0, r0, r3
 80084d6:	6963      	ldr	r3, [r4, #20]
 80084d8:	b2ed      	uxtb	r5, r5
 80084da:	4283      	cmp	r3, r0
 80084dc:	dc05      	bgt.n	80084ea <__swbuf_r+0x42>
 80084de:	0021      	movs	r1, r4
 80084e0:	0030      	movs	r0, r6
 80084e2:	f000 fec1 	bl	8009268 <_fflush_r>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d11d      	bne.n	8008526 <__swbuf_r+0x7e>
 80084ea:	68a3      	ldr	r3, [r4, #8]
 80084ec:	3001      	adds	r0, #1
 80084ee:	3b01      	subs	r3, #1
 80084f0:	60a3      	str	r3, [r4, #8]
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	6022      	str	r2, [r4, #0]
 80084f8:	701f      	strb	r7, [r3, #0]
 80084fa:	6963      	ldr	r3, [r4, #20]
 80084fc:	4283      	cmp	r3, r0
 80084fe:	d004      	beq.n	800850a <__swbuf_r+0x62>
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	07db      	lsls	r3, r3, #31
 8008504:	d507      	bpl.n	8008516 <__swbuf_r+0x6e>
 8008506:	2d0a      	cmp	r5, #10
 8008508:	d105      	bne.n	8008516 <__swbuf_r+0x6e>
 800850a:	0021      	movs	r1, r4
 800850c:	0030      	movs	r0, r6
 800850e:	f000 feab 	bl	8009268 <_fflush_r>
 8008512:	2800      	cmp	r0, #0
 8008514:	d107      	bne.n	8008526 <__swbuf_r+0x7e>
 8008516:	0028      	movs	r0, r5
 8008518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800851a:	0021      	movs	r1, r4
 800851c:	0030      	movs	r0, r6
 800851e:	f000 f805 	bl	800852c <__swsetup_r>
 8008522:	2800      	cmp	r0, #0
 8008524:	d0d3      	beq.n	80084ce <__swbuf_r+0x26>
 8008526:	2501      	movs	r5, #1
 8008528:	426d      	negs	r5, r5
 800852a:	e7f4      	b.n	8008516 <__swbuf_r+0x6e>

0800852c <__swsetup_r>:
 800852c:	4b30      	ldr	r3, [pc, #192]	; (80085f0 <__swsetup_r+0xc4>)
 800852e:	b570      	push	{r4, r5, r6, lr}
 8008530:	0005      	movs	r5, r0
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	000c      	movs	r4, r1
 8008536:	2800      	cmp	r0, #0
 8008538:	d004      	beq.n	8008544 <__swsetup_r+0x18>
 800853a:	6a03      	ldr	r3, [r0, #32]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <__swsetup_r+0x18>
 8008540:	f7ff fe8e 	bl	8008260 <__sinit>
 8008544:	230c      	movs	r3, #12
 8008546:	5ee2      	ldrsh	r2, [r4, r3]
 8008548:	b293      	uxth	r3, r2
 800854a:	0711      	lsls	r1, r2, #28
 800854c:	d423      	bmi.n	8008596 <__swsetup_r+0x6a>
 800854e:	06d9      	lsls	r1, r3, #27
 8008550:	d407      	bmi.n	8008562 <__swsetup_r+0x36>
 8008552:	2309      	movs	r3, #9
 8008554:	2001      	movs	r0, #1
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	3337      	adds	r3, #55	; 0x37
 800855a:	4313      	orrs	r3, r2
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	4240      	negs	r0, r0
 8008560:	bd70      	pop	{r4, r5, r6, pc}
 8008562:	075b      	lsls	r3, r3, #29
 8008564:	d513      	bpl.n	800858e <__swsetup_r+0x62>
 8008566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008568:	2900      	cmp	r1, #0
 800856a:	d008      	beq.n	800857e <__swsetup_r+0x52>
 800856c:	0023      	movs	r3, r4
 800856e:	3344      	adds	r3, #68	; 0x44
 8008570:	4299      	cmp	r1, r3
 8008572:	d002      	beq.n	800857a <__swsetup_r+0x4e>
 8008574:	0028      	movs	r0, r5
 8008576:	f000 f8c9 	bl	800870c <_free_r>
 800857a:	2300      	movs	r3, #0
 800857c:	6363      	str	r3, [r4, #52]	; 0x34
 800857e:	2224      	movs	r2, #36	; 0x24
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	4393      	bics	r3, r2
 8008584:	81a3      	strh	r3, [r4, #12]
 8008586:	2300      	movs	r3, #0
 8008588:	6063      	str	r3, [r4, #4]
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	2308      	movs	r3, #8
 8008590:	89a2      	ldrh	r2, [r4, #12]
 8008592:	4313      	orrs	r3, r2
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10b      	bne.n	80085b4 <__swsetup_r+0x88>
 800859c:	21a0      	movs	r1, #160	; 0xa0
 800859e:	2280      	movs	r2, #128	; 0x80
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	0089      	lsls	r1, r1, #2
 80085a4:	0092      	lsls	r2, r2, #2
 80085a6:	400b      	ands	r3, r1
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d003      	beq.n	80085b4 <__swsetup_r+0x88>
 80085ac:	0021      	movs	r1, r4
 80085ae:	0028      	movs	r0, r5
 80085b0:	f000 feae 	bl	8009310 <__smakebuf_r>
 80085b4:	220c      	movs	r2, #12
 80085b6:	5ea3      	ldrsh	r3, [r4, r2]
 80085b8:	2001      	movs	r0, #1
 80085ba:	001a      	movs	r2, r3
 80085bc:	b299      	uxth	r1, r3
 80085be:	4002      	ands	r2, r0
 80085c0:	4203      	tst	r3, r0
 80085c2:	d00f      	beq.n	80085e4 <__swsetup_r+0xb8>
 80085c4:	2200      	movs	r2, #0
 80085c6:	60a2      	str	r2, [r4, #8]
 80085c8:	6962      	ldr	r2, [r4, #20]
 80085ca:	4252      	negs	r2, r2
 80085cc:	61a2      	str	r2, [r4, #24]
 80085ce:	2000      	movs	r0, #0
 80085d0:	6922      	ldr	r2, [r4, #16]
 80085d2:	4282      	cmp	r2, r0
 80085d4:	d1c4      	bne.n	8008560 <__swsetup_r+0x34>
 80085d6:	0609      	lsls	r1, r1, #24
 80085d8:	d5c2      	bpl.n	8008560 <__swsetup_r+0x34>
 80085da:	2240      	movs	r2, #64	; 0x40
 80085dc:	4313      	orrs	r3, r2
 80085de:	81a3      	strh	r3, [r4, #12]
 80085e0:	3801      	subs	r0, #1
 80085e2:	e7bd      	b.n	8008560 <__swsetup_r+0x34>
 80085e4:	0788      	lsls	r0, r1, #30
 80085e6:	d400      	bmi.n	80085ea <__swsetup_r+0xbe>
 80085e8:	6962      	ldr	r2, [r4, #20]
 80085ea:	60a2      	str	r2, [r4, #8]
 80085ec:	e7ef      	b.n	80085ce <__swsetup_r+0xa2>
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	20000080 	.word	0x20000080

080085f4 <memset>:
 80085f4:	0003      	movs	r3, r0
 80085f6:	1882      	adds	r2, r0, r2
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d100      	bne.n	80085fe <memset+0xa>
 80085fc:	4770      	bx	lr
 80085fe:	7019      	strb	r1, [r3, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	e7f9      	b.n	80085f8 <memset+0x4>

08008604 <_close_r>:
 8008604:	2300      	movs	r3, #0
 8008606:	b570      	push	{r4, r5, r6, lr}
 8008608:	4d06      	ldr	r5, [pc, #24]	; (8008624 <_close_r+0x20>)
 800860a:	0004      	movs	r4, r0
 800860c:	0008      	movs	r0, r1
 800860e:	602b      	str	r3, [r5, #0]
 8008610:	f7f8 f907 	bl	8000822 <_close>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d103      	bne.n	8008620 <_close_r+0x1c>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d000      	beq.n	8008620 <_close_r+0x1c>
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	bd70      	pop	{r4, r5, r6, pc}
 8008622:	46c0      	nop			; (mov r8, r8)
 8008624:	2000598c 	.word	0x2000598c

08008628 <_lseek_r>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	0004      	movs	r4, r0
 800862c:	0008      	movs	r0, r1
 800862e:	0011      	movs	r1, r2
 8008630:	001a      	movs	r2, r3
 8008632:	2300      	movs	r3, #0
 8008634:	4d05      	ldr	r5, [pc, #20]	; (800864c <_lseek_r+0x24>)
 8008636:	602b      	str	r3, [r5, #0]
 8008638:	f7f8 f914 	bl	8000864 <_lseek>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	d103      	bne.n	8008648 <_lseek_r+0x20>
 8008640:	682b      	ldr	r3, [r5, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d000      	beq.n	8008648 <_lseek_r+0x20>
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	bd70      	pop	{r4, r5, r6, pc}
 800864a:	46c0      	nop			; (mov r8, r8)
 800864c:	2000598c 	.word	0x2000598c

08008650 <_read_r>:
 8008650:	b570      	push	{r4, r5, r6, lr}
 8008652:	0004      	movs	r4, r0
 8008654:	0008      	movs	r0, r1
 8008656:	0011      	movs	r1, r2
 8008658:	001a      	movs	r2, r3
 800865a:	2300      	movs	r3, #0
 800865c:	4d05      	ldr	r5, [pc, #20]	; (8008674 <_read_r+0x24>)
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	f7f8 f8a6 	bl	80007b0 <_read>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d103      	bne.n	8008670 <_read_r+0x20>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d000      	beq.n	8008670 <_read_r+0x20>
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	bd70      	pop	{r4, r5, r6, pc}
 8008672:	46c0      	nop			; (mov r8, r8)
 8008674:	2000598c 	.word	0x2000598c

08008678 <_write_r>:
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	0004      	movs	r4, r0
 800867c:	0008      	movs	r0, r1
 800867e:	0011      	movs	r1, r2
 8008680:	001a      	movs	r2, r3
 8008682:	2300      	movs	r3, #0
 8008684:	4d05      	ldr	r5, [pc, #20]	; (800869c <_write_r+0x24>)
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7f8 f8af 	bl	80007ea <_write>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d103      	bne.n	8008698 <_write_r+0x20>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d000      	beq.n	8008698 <_write_r+0x20>
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	bd70      	pop	{r4, r5, r6, pc}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	2000598c 	.word	0x2000598c

080086a0 <__errno>:
 80086a0:	4b01      	ldr	r3, [pc, #4]	; (80086a8 <__errno+0x8>)
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	4770      	bx	lr
 80086a6:	46c0      	nop			; (mov r8, r8)
 80086a8:	20000080 	.word	0x20000080

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	2600      	movs	r6, #0
 80086b0:	4c0c      	ldr	r4, [pc, #48]	; (80086e4 <__libc_init_array+0x38>)
 80086b2:	4d0d      	ldr	r5, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b4:	1b64      	subs	r4, r4, r5
 80086b6:	10a4      	asrs	r4, r4, #2
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	2600      	movs	r6, #0
 80086be:	f000 fef1 	bl	80094a4 <_init>
 80086c2:	4c0a      	ldr	r4, [pc, #40]	; (80086ec <__libc_init_array+0x40>)
 80086c4:	4d0a      	ldr	r5, [pc, #40]	; (80086f0 <__libc_init_array+0x44>)
 80086c6:	1b64      	subs	r4, r4, r5
 80086c8:	10a4      	asrs	r4, r4, #2
 80086ca:	42a6      	cmp	r6, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	00b3      	lsls	r3, r6, #2
 80086d2:	58eb      	ldr	r3, [r5, r3]
 80086d4:	4798      	blx	r3
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	00b3      	lsls	r3, r6, #2
 80086dc:	58eb      	ldr	r3, [r5, r3]
 80086de:	4798      	blx	r3
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	08009920 	.word	0x08009920
 80086e8:	08009920 	.word	0x08009920
 80086ec:	08009924 	.word	0x08009924
 80086f0:	08009920 	.word	0x08009920

080086f4 <__retarget_lock_init_recursive>:
 80086f4:	4770      	bx	lr

080086f6 <__retarget_lock_acquire_recursive>:
 80086f6:	4770      	bx	lr

080086f8 <__retarget_lock_release_recursive>:
 80086f8:	4770      	bx	lr

080086fa <memcpy>:
 80086fa:	2300      	movs	r3, #0
 80086fc:	b510      	push	{r4, lr}
 80086fe:	429a      	cmp	r2, r3
 8008700:	d100      	bne.n	8008704 <memcpy+0xa>
 8008702:	bd10      	pop	{r4, pc}
 8008704:	5ccc      	ldrb	r4, [r1, r3]
 8008706:	54c4      	strb	r4, [r0, r3]
 8008708:	3301      	adds	r3, #1
 800870a:	e7f8      	b.n	80086fe <memcpy+0x4>

0800870c <_free_r>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	0005      	movs	r5, r0
 8008710:	2900      	cmp	r1, #0
 8008712:	d010      	beq.n	8008736 <_free_r+0x2a>
 8008714:	1f0c      	subs	r4, r1, #4
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	da00      	bge.n	800871e <_free_r+0x12>
 800871c:	18e4      	adds	r4, r4, r3
 800871e:	0028      	movs	r0, r5
 8008720:	f000 f8e2 	bl	80088e8 <__malloc_lock>
 8008724:	4a1d      	ldr	r2, [pc, #116]	; (800879c <_free_r+0x90>)
 8008726:	6813      	ldr	r3, [r2, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d105      	bne.n	8008738 <_free_r+0x2c>
 800872c:	6063      	str	r3, [r4, #4]
 800872e:	6014      	str	r4, [r2, #0]
 8008730:	0028      	movs	r0, r5
 8008732:	f000 f8e1 	bl	80088f8 <__malloc_unlock>
 8008736:	bd70      	pop	{r4, r5, r6, pc}
 8008738:	42a3      	cmp	r3, r4
 800873a:	d908      	bls.n	800874e <_free_r+0x42>
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	1821      	adds	r1, r4, r0
 8008740:	428b      	cmp	r3, r1
 8008742:	d1f3      	bne.n	800872c <_free_r+0x20>
 8008744:	6819      	ldr	r1, [r3, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	1809      	adds	r1, r1, r0
 800874a:	6021      	str	r1, [r4, #0]
 800874c:	e7ee      	b.n	800872c <_free_r+0x20>
 800874e:	001a      	movs	r2, r3
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <_free_r+0x4e>
 8008756:	42a3      	cmp	r3, r4
 8008758:	d9f9      	bls.n	800874e <_free_r+0x42>
 800875a:	6811      	ldr	r1, [r2, #0]
 800875c:	1850      	adds	r0, r2, r1
 800875e:	42a0      	cmp	r0, r4
 8008760:	d10b      	bne.n	800877a <_free_r+0x6e>
 8008762:	6820      	ldr	r0, [r4, #0]
 8008764:	1809      	adds	r1, r1, r0
 8008766:	1850      	adds	r0, r2, r1
 8008768:	6011      	str	r1, [r2, #0]
 800876a:	4283      	cmp	r3, r0
 800876c:	d1e0      	bne.n	8008730 <_free_r+0x24>
 800876e:	6818      	ldr	r0, [r3, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	1841      	adds	r1, r0, r1
 8008774:	6011      	str	r1, [r2, #0]
 8008776:	6053      	str	r3, [r2, #4]
 8008778:	e7da      	b.n	8008730 <_free_r+0x24>
 800877a:	42a0      	cmp	r0, r4
 800877c:	d902      	bls.n	8008784 <_free_r+0x78>
 800877e:	230c      	movs	r3, #12
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	e7d5      	b.n	8008730 <_free_r+0x24>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	1821      	adds	r1, r4, r0
 8008788:	428b      	cmp	r3, r1
 800878a:	d103      	bne.n	8008794 <_free_r+0x88>
 800878c:	6819      	ldr	r1, [r3, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	1809      	adds	r1, r1, r0
 8008792:	6021      	str	r1, [r4, #0]
 8008794:	6063      	str	r3, [r4, #4]
 8008796:	6054      	str	r4, [r2, #4]
 8008798:	e7ca      	b.n	8008730 <_free_r+0x24>
 800879a:	46c0      	nop			; (mov r8, r8)
 800879c:	20005994 	.word	0x20005994

080087a0 <sbrk_aligned>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	4e0f      	ldr	r6, [pc, #60]	; (80087e0 <sbrk_aligned+0x40>)
 80087a4:	000d      	movs	r5, r1
 80087a6:	6831      	ldr	r1, [r6, #0]
 80087a8:	0004      	movs	r4, r0
 80087aa:	2900      	cmp	r1, #0
 80087ac:	d102      	bne.n	80087b4 <sbrk_aligned+0x14>
 80087ae:	f000 fe25 	bl	80093fc <_sbrk_r>
 80087b2:	6030      	str	r0, [r6, #0]
 80087b4:	0029      	movs	r1, r5
 80087b6:	0020      	movs	r0, r4
 80087b8:	f000 fe20 	bl	80093fc <_sbrk_r>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d00a      	beq.n	80087d6 <sbrk_aligned+0x36>
 80087c0:	2303      	movs	r3, #3
 80087c2:	1cc5      	adds	r5, r0, #3
 80087c4:	439d      	bics	r5, r3
 80087c6:	42a8      	cmp	r0, r5
 80087c8:	d007      	beq.n	80087da <sbrk_aligned+0x3a>
 80087ca:	1a29      	subs	r1, r5, r0
 80087cc:	0020      	movs	r0, r4
 80087ce:	f000 fe15 	bl	80093fc <_sbrk_r>
 80087d2:	3001      	adds	r0, #1
 80087d4:	d101      	bne.n	80087da <sbrk_aligned+0x3a>
 80087d6:	2501      	movs	r5, #1
 80087d8:	426d      	negs	r5, r5
 80087da:	0028      	movs	r0, r5
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	46c0      	nop			; (mov r8, r8)
 80087e0:	20005998 	.word	0x20005998

080087e4 <_malloc_r>:
 80087e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087e6:	2203      	movs	r2, #3
 80087e8:	1ccb      	adds	r3, r1, #3
 80087ea:	4393      	bics	r3, r2
 80087ec:	3308      	adds	r3, #8
 80087ee:	0006      	movs	r6, r0
 80087f0:	001f      	movs	r7, r3
 80087f2:	2b0c      	cmp	r3, #12
 80087f4:	d238      	bcs.n	8008868 <_malloc_r+0x84>
 80087f6:	270c      	movs	r7, #12
 80087f8:	42b9      	cmp	r1, r7
 80087fa:	d837      	bhi.n	800886c <_malloc_r+0x88>
 80087fc:	0030      	movs	r0, r6
 80087fe:	f000 f873 	bl	80088e8 <__malloc_lock>
 8008802:	4b38      	ldr	r3, [pc, #224]	; (80088e4 <_malloc_r+0x100>)
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	001c      	movs	r4, r3
 800880a:	2c00      	cmp	r4, #0
 800880c:	d133      	bne.n	8008876 <_malloc_r+0x92>
 800880e:	0039      	movs	r1, r7
 8008810:	0030      	movs	r0, r6
 8008812:	f7ff ffc5 	bl	80087a0 <sbrk_aligned>
 8008816:	0004      	movs	r4, r0
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d15e      	bne.n	80088da <_malloc_r+0xf6>
 800881c:	9b00      	ldr	r3, [sp, #0]
 800881e:	681c      	ldr	r4, [r3, #0]
 8008820:	0025      	movs	r5, r4
 8008822:	2d00      	cmp	r5, #0
 8008824:	d14e      	bne.n	80088c4 <_malloc_r+0xe0>
 8008826:	2c00      	cmp	r4, #0
 8008828:	d051      	beq.n	80088ce <_malloc_r+0xea>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	0029      	movs	r1, r5
 800882e:	18e3      	adds	r3, r4, r3
 8008830:	0030      	movs	r0, r6
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	f000 fde2 	bl	80093fc <_sbrk_r>
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	4283      	cmp	r3, r0
 800883c:	d147      	bne.n	80088ce <_malloc_r+0xea>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	0030      	movs	r0, r6
 8008842:	1aff      	subs	r7, r7, r3
 8008844:	0039      	movs	r1, r7
 8008846:	f7ff ffab 	bl	80087a0 <sbrk_aligned>
 800884a:	3001      	adds	r0, #1
 800884c:	d03f      	beq.n	80088ce <_malloc_r+0xea>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	19db      	adds	r3, r3, r7
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	9b00      	ldr	r3, [sp, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d040      	beq.n	80088de <_malloc_r+0xfa>
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	42a2      	cmp	r2, r4
 8008860:	d133      	bne.n	80088ca <_malloc_r+0xe6>
 8008862:	2200      	movs	r2, #0
 8008864:	605a      	str	r2, [r3, #4]
 8008866:	e014      	b.n	8008892 <_malloc_r+0xae>
 8008868:	2b00      	cmp	r3, #0
 800886a:	dac5      	bge.n	80087f8 <_malloc_r+0x14>
 800886c:	230c      	movs	r3, #12
 800886e:	2500      	movs	r5, #0
 8008870:	6033      	str	r3, [r6, #0]
 8008872:	0028      	movs	r0, r5
 8008874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008876:	6821      	ldr	r1, [r4, #0]
 8008878:	1bc9      	subs	r1, r1, r7
 800887a:	d420      	bmi.n	80088be <_malloc_r+0xda>
 800887c:	290b      	cmp	r1, #11
 800887e:	d918      	bls.n	80088b2 <_malloc_r+0xce>
 8008880:	19e2      	adds	r2, r4, r7
 8008882:	6027      	str	r7, [r4, #0]
 8008884:	42a3      	cmp	r3, r4
 8008886:	d112      	bne.n	80088ae <_malloc_r+0xca>
 8008888:	9b00      	ldr	r3, [sp, #0]
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	6011      	str	r1, [r2, #0]
 8008890:	6053      	str	r3, [r2, #4]
 8008892:	0030      	movs	r0, r6
 8008894:	0025      	movs	r5, r4
 8008896:	f000 f82f 	bl	80088f8 <__malloc_unlock>
 800889a:	2207      	movs	r2, #7
 800889c:	350b      	adds	r5, #11
 800889e:	1d23      	adds	r3, r4, #4
 80088a0:	4395      	bics	r5, r2
 80088a2:	1aea      	subs	r2, r5, r3
 80088a4:	429d      	cmp	r5, r3
 80088a6:	d0e4      	beq.n	8008872 <_malloc_r+0x8e>
 80088a8:	1b5b      	subs	r3, r3, r5
 80088aa:	50a3      	str	r3, [r4, r2]
 80088ac:	e7e1      	b.n	8008872 <_malloc_r+0x8e>
 80088ae:	605a      	str	r2, [r3, #4]
 80088b0:	e7ec      	b.n	800888c <_malloc_r+0xa8>
 80088b2:	6862      	ldr	r2, [r4, #4]
 80088b4:	42a3      	cmp	r3, r4
 80088b6:	d1d5      	bne.n	8008864 <_malloc_r+0x80>
 80088b8:	9b00      	ldr	r3, [sp, #0]
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	e7e9      	b.n	8008892 <_malloc_r+0xae>
 80088be:	0023      	movs	r3, r4
 80088c0:	6864      	ldr	r4, [r4, #4]
 80088c2:	e7a2      	b.n	800880a <_malloc_r+0x26>
 80088c4:	002c      	movs	r4, r5
 80088c6:	686d      	ldr	r5, [r5, #4]
 80088c8:	e7ab      	b.n	8008822 <_malloc_r+0x3e>
 80088ca:	0013      	movs	r3, r2
 80088cc:	e7c4      	b.n	8008858 <_malloc_r+0x74>
 80088ce:	230c      	movs	r3, #12
 80088d0:	0030      	movs	r0, r6
 80088d2:	6033      	str	r3, [r6, #0]
 80088d4:	f000 f810 	bl	80088f8 <__malloc_unlock>
 80088d8:	e7cb      	b.n	8008872 <_malloc_r+0x8e>
 80088da:	6027      	str	r7, [r4, #0]
 80088dc:	e7d9      	b.n	8008892 <_malloc_r+0xae>
 80088de:	605b      	str	r3, [r3, #4]
 80088e0:	deff      	udf	#255	; 0xff
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	20005994 	.word	0x20005994

080088e8 <__malloc_lock>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4802      	ldr	r0, [pc, #8]	; (80088f4 <__malloc_lock+0xc>)
 80088ec:	f7ff ff03 	bl	80086f6 <__retarget_lock_acquire_recursive>
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	46c0      	nop			; (mov r8, r8)
 80088f4:	20005990 	.word	0x20005990

080088f8 <__malloc_unlock>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	4802      	ldr	r0, [pc, #8]	; (8008904 <__malloc_unlock+0xc>)
 80088fc:	f7ff fefc 	bl	80086f8 <__retarget_lock_release_recursive>
 8008900:	bd10      	pop	{r4, pc}
 8008902:	46c0      	nop			; (mov r8, r8)
 8008904:	20005990 	.word	0x20005990

08008908 <__ssputs_r>:
 8008908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800890a:	b085      	sub	sp, #20
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	9203      	str	r2, [sp, #12]
 8008910:	688e      	ldr	r6, [r1, #8]
 8008912:	9a01      	ldr	r2, [sp, #4]
 8008914:	0007      	movs	r7, r0
 8008916:	000c      	movs	r4, r1
 8008918:	680b      	ldr	r3, [r1, #0]
 800891a:	4296      	cmp	r6, r2
 800891c:	d831      	bhi.n	8008982 <__ssputs_r+0x7a>
 800891e:	898a      	ldrh	r2, [r1, #12]
 8008920:	2190      	movs	r1, #144	; 0x90
 8008922:	00c9      	lsls	r1, r1, #3
 8008924:	420a      	tst	r2, r1
 8008926:	d029      	beq.n	800897c <__ssputs_r+0x74>
 8008928:	2003      	movs	r0, #3
 800892a:	6921      	ldr	r1, [r4, #16]
 800892c:	1a5b      	subs	r3, r3, r1
 800892e:	9302      	str	r3, [sp, #8]
 8008930:	6963      	ldr	r3, [r4, #20]
 8008932:	4343      	muls	r3, r0
 8008934:	0fdd      	lsrs	r5, r3, #31
 8008936:	18ed      	adds	r5, r5, r3
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	9802      	ldr	r0, [sp, #8]
 800893c:	3301      	adds	r3, #1
 800893e:	181b      	adds	r3, r3, r0
 8008940:	106d      	asrs	r5, r5, #1
 8008942:	42ab      	cmp	r3, r5
 8008944:	d900      	bls.n	8008948 <__ssputs_r+0x40>
 8008946:	001d      	movs	r5, r3
 8008948:	0552      	lsls	r2, r2, #21
 800894a:	d529      	bpl.n	80089a0 <__ssputs_r+0x98>
 800894c:	0029      	movs	r1, r5
 800894e:	0038      	movs	r0, r7
 8008950:	f7ff ff48 	bl	80087e4 <_malloc_r>
 8008954:	1e06      	subs	r6, r0, #0
 8008956:	d02d      	beq.n	80089b4 <__ssputs_r+0xac>
 8008958:	9a02      	ldr	r2, [sp, #8]
 800895a:	6921      	ldr	r1, [r4, #16]
 800895c:	f7ff fecd 	bl	80086fa <memcpy>
 8008960:	89a2      	ldrh	r2, [r4, #12]
 8008962:	4b19      	ldr	r3, [pc, #100]	; (80089c8 <__ssputs_r+0xc0>)
 8008964:	401a      	ands	r2, r3
 8008966:	2380      	movs	r3, #128	; 0x80
 8008968:	4313      	orrs	r3, r2
 800896a:	81a3      	strh	r3, [r4, #12]
 800896c:	9b02      	ldr	r3, [sp, #8]
 800896e:	6126      	str	r6, [r4, #16]
 8008970:	18f6      	adds	r6, r6, r3
 8008972:	6026      	str	r6, [r4, #0]
 8008974:	6165      	str	r5, [r4, #20]
 8008976:	9e01      	ldr	r6, [sp, #4]
 8008978:	1aed      	subs	r5, r5, r3
 800897a:	60a5      	str	r5, [r4, #8]
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	429e      	cmp	r6, r3
 8008980:	d900      	bls.n	8008984 <__ssputs_r+0x7c>
 8008982:	9e01      	ldr	r6, [sp, #4]
 8008984:	0032      	movs	r2, r6
 8008986:	9903      	ldr	r1, [sp, #12]
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	f000 fcff 	bl	800938c <memmove>
 800898e:	2000      	movs	r0, #0
 8008990:	68a3      	ldr	r3, [r4, #8]
 8008992:	1b9b      	subs	r3, r3, r6
 8008994:	60a3      	str	r3, [r4, #8]
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	199b      	adds	r3, r3, r6
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	b005      	add	sp, #20
 800899e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a0:	002a      	movs	r2, r5
 80089a2:	0038      	movs	r0, r7
 80089a4:	f000 fd47 	bl	8009436 <_realloc_r>
 80089a8:	1e06      	subs	r6, r0, #0
 80089aa:	d1df      	bne.n	800896c <__ssputs_r+0x64>
 80089ac:	0038      	movs	r0, r7
 80089ae:	6921      	ldr	r1, [r4, #16]
 80089b0:	f7ff feac 	bl	800870c <_free_r>
 80089b4:	230c      	movs	r3, #12
 80089b6:	2001      	movs	r0, #1
 80089b8:	603b      	str	r3, [r7, #0]
 80089ba:	89a2      	ldrh	r2, [r4, #12]
 80089bc:	3334      	adds	r3, #52	; 0x34
 80089be:	4313      	orrs	r3, r2
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	4240      	negs	r0, r0
 80089c4:	e7ea      	b.n	800899c <__ssputs_r+0x94>
 80089c6:	46c0      	nop			; (mov r8, r8)
 80089c8:	fffffb7f 	.word	0xfffffb7f

080089cc <_svfiprintf_r>:
 80089cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ce:	b0a1      	sub	sp, #132	; 0x84
 80089d0:	9003      	str	r0, [sp, #12]
 80089d2:	001d      	movs	r5, r3
 80089d4:	898b      	ldrh	r3, [r1, #12]
 80089d6:	000f      	movs	r7, r1
 80089d8:	0016      	movs	r6, r2
 80089da:	061b      	lsls	r3, r3, #24
 80089dc:	d511      	bpl.n	8008a02 <_svfiprintf_r+0x36>
 80089de:	690b      	ldr	r3, [r1, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10e      	bne.n	8008a02 <_svfiprintf_r+0x36>
 80089e4:	2140      	movs	r1, #64	; 0x40
 80089e6:	f7ff fefd 	bl	80087e4 <_malloc_r>
 80089ea:	6038      	str	r0, [r7, #0]
 80089ec:	6138      	str	r0, [r7, #16]
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d105      	bne.n	80089fe <_svfiprintf_r+0x32>
 80089f2:	230c      	movs	r3, #12
 80089f4:	9a03      	ldr	r2, [sp, #12]
 80089f6:	3801      	subs	r0, #1
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	b021      	add	sp, #132	; 0x84
 80089fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089fe:	2340      	movs	r3, #64	; 0x40
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	2300      	movs	r3, #0
 8008a04:	ac08      	add	r4, sp, #32
 8008a06:	6163      	str	r3, [r4, #20]
 8008a08:	3320      	adds	r3, #32
 8008a0a:	7663      	strb	r3, [r4, #25]
 8008a0c:	3310      	adds	r3, #16
 8008a0e:	76a3      	strb	r3, [r4, #26]
 8008a10:	9507      	str	r5, [sp, #28]
 8008a12:	0035      	movs	r5, r6
 8008a14:	782b      	ldrb	r3, [r5, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <_svfiprintf_r+0x52>
 8008a1a:	2b25      	cmp	r3, #37	; 0x25
 8008a1c:	d148      	bne.n	8008ab0 <_svfiprintf_r+0xe4>
 8008a1e:	1bab      	subs	r3, r5, r6
 8008a20:	9305      	str	r3, [sp, #20]
 8008a22:	42b5      	cmp	r5, r6
 8008a24:	d00b      	beq.n	8008a3e <_svfiprintf_r+0x72>
 8008a26:	0032      	movs	r2, r6
 8008a28:	0039      	movs	r1, r7
 8008a2a:	9803      	ldr	r0, [sp, #12]
 8008a2c:	f7ff ff6c 	bl	8008908 <__ssputs_r>
 8008a30:	3001      	adds	r0, #1
 8008a32:	d100      	bne.n	8008a36 <_svfiprintf_r+0x6a>
 8008a34:	e0af      	b.n	8008b96 <_svfiprintf_r+0x1ca>
 8008a36:	6963      	ldr	r3, [r4, #20]
 8008a38:	9a05      	ldr	r2, [sp, #20]
 8008a3a:	189b      	adds	r3, r3, r2
 8008a3c:	6163      	str	r3, [r4, #20]
 8008a3e:	782b      	ldrb	r3, [r5, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d100      	bne.n	8008a46 <_svfiprintf_r+0x7a>
 8008a44:	e0a7      	b.n	8008b96 <_svfiprintf_r+0x1ca>
 8008a46:	2201      	movs	r2, #1
 8008a48:	2300      	movs	r3, #0
 8008a4a:	4252      	negs	r2, r2
 8008a4c:	6062      	str	r2, [r4, #4]
 8008a4e:	a904      	add	r1, sp, #16
 8008a50:	3254      	adds	r2, #84	; 0x54
 8008a52:	1852      	adds	r2, r2, r1
 8008a54:	1c6e      	adds	r6, r5, #1
 8008a56:	6023      	str	r3, [r4, #0]
 8008a58:	60e3      	str	r3, [r4, #12]
 8008a5a:	60a3      	str	r3, [r4, #8]
 8008a5c:	7013      	strb	r3, [r2, #0]
 8008a5e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008a60:	4b55      	ldr	r3, [pc, #340]	; (8008bb8 <_svfiprintf_r+0x1ec>)
 8008a62:	2205      	movs	r2, #5
 8008a64:	0018      	movs	r0, r3
 8008a66:	7831      	ldrb	r1, [r6, #0]
 8008a68:	9305      	str	r3, [sp, #20]
 8008a6a:	f000 fcd9 	bl	8009420 <memchr>
 8008a6e:	1c75      	adds	r5, r6, #1
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d11f      	bne.n	8008ab4 <_svfiprintf_r+0xe8>
 8008a74:	6822      	ldr	r2, [r4, #0]
 8008a76:	06d3      	lsls	r3, r2, #27
 8008a78:	d504      	bpl.n	8008a84 <_svfiprintf_r+0xb8>
 8008a7a:	2353      	movs	r3, #83	; 0x53
 8008a7c:	a904      	add	r1, sp, #16
 8008a7e:	185b      	adds	r3, r3, r1
 8008a80:	2120      	movs	r1, #32
 8008a82:	7019      	strb	r1, [r3, #0]
 8008a84:	0713      	lsls	r3, r2, #28
 8008a86:	d504      	bpl.n	8008a92 <_svfiprintf_r+0xc6>
 8008a88:	2353      	movs	r3, #83	; 0x53
 8008a8a:	a904      	add	r1, sp, #16
 8008a8c:	185b      	adds	r3, r3, r1
 8008a8e:	212b      	movs	r1, #43	; 0x2b
 8008a90:	7019      	strb	r1, [r3, #0]
 8008a92:	7833      	ldrb	r3, [r6, #0]
 8008a94:	2b2a      	cmp	r3, #42	; 0x2a
 8008a96:	d016      	beq.n	8008ac6 <_svfiprintf_r+0xfa>
 8008a98:	0035      	movs	r5, r6
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	200a      	movs	r0, #10
 8008a9e:	68e3      	ldr	r3, [r4, #12]
 8008aa0:	782a      	ldrb	r2, [r5, #0]
 8008aa2:	1c6e      	adds	r6, r5, #1
 8008aa4:	3a30      	subs	r2, #48	; 0x30
 8008aa6:	2a09      	cmp	r2, #9
 8008aa8:	d94e      	bls.n	8008b48 <_svfiprintf_r+0x17c>
 8008aaa:	2900      	cmp	r1, #0
 8008aac:	d111      	bne.n	8008ad2 <_svfiprintf_r+0x106>
 8008aae:	e017      	b.n	8008ae0 <_svfiprintf_r+0x114>
 8008ab0:	3501      	adds	r5, #1
 8008ab2:	e7af      	b.n	8008a14 <_svfiprintf_r+0x48>
 8008ab4:	9b05      	ldr	r3, [sp, #20]
 8008ab6:	6822      	ldr	r2, [r4, #0]
 8008ab8:	1ac0      	subs	r0, r0, r3
 8008aba:	2301      	movs	r3, #1
 8008abc:	4083      	lsls	r3, r0
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	002e      	movs	r6, r5
 8008ac2:	6023      	str	r3, [r4, #0]
 8008ac4:	e7cc      	b.n	8008a60 <_svfiprintf_r+0x94>
 8008ac6:	9b07      	ldr	r3, [sp, #28]
 8008ac8:	1d19      	adds	r1, r3, #4
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	9107      	str	r1, [sp, #28]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	db01      	blt.n	8008ad6 <_svfiprintf_r+0x10a>
 8008ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ad4:	e004      	b.n	8008ae0 <_svfiprintf_r+0x114>
 8008ad6:	425b      	negs	r3, r3
 8008ad8:	60e3      	str	r3, [r4, #12]
 8008ada:	2302      	movs	r3, #2
 8008adc:	4313      	orrs	r3, r2
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	782b      	ldrb	r3, [r5, #0]
 8008ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ae4:	d10a      	bne.n	8008afc <_svfiprintf_r+0x130>
 8008ae6:	786b      	ldrb	r3, [r5, #1]
 8008ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aea:	d135      	bne.n	8008b58 <_svfiprintf_r+0x18c>
 8008aec:	9b07      	ldr	r3, [sp, #28]
 8008aee:	3502      	adds	r5, #2
 8008af0:	1d1a      	adds	r2, r3, #4
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	9207      	str	r2, [sp, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	db2b      	blt.n	8008b52 <_svfiprintf_r+0x186>
 8008afa:	9309      	str	r3, [sp, #36]	; 0x24
 8008afc:	4e2f      	ldr	r6, [pc, #188]	; (8008bbc <_svfiprintf_r+0x1f0>)
 8008afe:	2203      	movs	r2, #3
 8008b00:	0030      	movs	r0, r6
 8008b02:	7829      	ldrb	r1, [r5, #0]
 8008b04:	f000 fc8c 	bl	8009420 <memchr>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d006      	beq.n	8008b1a <_svfiprintf_r+0x14e>
 8008b0c:	2340      	movs	r3, #64	; 0x40
 8008b0e:	1b80      	subs	r0, r0, r6
 8008b10:	4083      	lsls	r3, r0
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	3501      	adds	r5, #1
 8008b16:	4313      	orrs	r3, r2
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	7829      	ldrb	r1, [r5, #0]
 8008b1c:	2206      	movs	r2, #6
 8008b1e:	4828      	ldr	r0, [pc, #160]	; (8008bc0 <_svfiprintf_r+0x1f4>)
 8008b20:	1c6e      	adds	r6, r5, #1
 8008b22:	7621      	strb	r1, [r4, #24]
 8008b24:	f000 fc7c 	bl	8009420 <memchr>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d03c      	beq.n	8008ba6 <_svfiprintf_r+0x1da>
 8008b2c:	4b25      	ldr	r3, [pc, #148]	; (8008bc4 <_svfiprintf_r+0x1f8>)
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d125      	bne.n	8008b7e <_svfiprintf_r+0x1b2>
 8008b32:	2207      	movs	r2, #7
 8008b34:	9b07      	ldr	r3, [sp, #28]
 8008b36:	3307      	adds	r3, #7
 8008b38:	4393      	bics	r3, r2
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	9307      	str	r3, [sp, #28]
 8008b3e:	6963      	ldr	r3, [r4, #20]
 8008b40:	9a04      	ldr	r2, [sp, #16]
 8008b42:	189b      	adds	r3, r3, r2
 8008b44:	6163      	str	r3, [r4, #20]
 8008b46:	e764      	b.n	8008a12 <_svfiprintf_r+0x46>
 8008b48:	4343      	muls	r3, r0
 8008b4a:	0035      	movs	r5, r6
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	189b      	adds	r3, r3, r2
 8008b50:	e7a6      	b.n	8008aa0 <_svfiprintf_r+0xd4>
 8008b52:	2301      	movs	r3, #1
 8008b54:	425b      	negs	r3, r3
 8008b56:	e7d0      	b.n	8008afa <_svfiprintf_r+0x12e>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	200a      	movs	r0, #10
 8008b5c:	001a      	movs	r2, r3
 8008b5e:	3501      	adds	r5, #1
 8008b60:	6063      	str	r3, [r4, #4]
 8008b62:	7829      	ldrb	r1, [r5, #0]
 8008b64:	1c6e      	adds	r6, r5, #1
 8008b66:	3930      	subs	r1, #48	; 0x30
 8008b68:	2909      	cmp	r1, #9
 8008b6a:	d903      	bls.n	8008b74 <_svfiprintf_r+0x1a8>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0c5      	beq.n	8008afc <_svfiprintf_r+0x130>
 8008b70:	9209      	str	r2, [sp, #36]	; 0x24
 8008b72:	e7c3      	b.n	8008afc <_svfiprintf_r+0x130>
 8008b74:	4342      	muls	r2, r0
 8008b76:	0035      	movs	r5, r6
 8008b78:	2301      	movs	r3, #1
 8008b7a:	1852      	adds	r2, r2, r1
 8008b7c:	e7f1      	b.n	8008b62 <_svfiprintf_r+0x196>
 8008b7e:	aa07      	add	r2, sp, #28
 8008b80:	9200      	str	r2, [sp, #0]
 8008b82:	0021      	movs	r1, r4
 8008b84:	003a      	movs	r2, r7
 8008b86:	4b10      	ldr	r3, [pc, #64]	; (8008bc8 <_svfiprintf_r+0x1fc>)
 8008b88:	9803      	ldr	r0, [sp, #12]
 8008b8a:	e000      	b.n	8008b8e <_svfiprintf_r+0x1c2>
 8008b8c:	bf00      	nop
 8008b8e:	9004      	str	r0, [sp, #16]
 8008b90:	9b04      	ldr	r3, [sp, #16]
 8008b92:	3301      	adds	r3, #1
 8008b94:	d1d3      	bne.n	8008b3e <_svfiprintf_r+0x172>
 8008b96:	89bb      	ldrh	r3, [r7, #12]
 8008b98:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008b9a:	065b      	lsls	r3, r3, #25
 8008b9c:	d400      	bmi.n	8008ba0 <_svfiprintf_r+0x1d4>
 8008b9e:	e72c      	b.n	80089fa <_svfiprintf_r+0x2e>
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	4240      	negs	r0, r0
 8008ba4:	e729      	b.n	80089fa <_svfiprintf_r+0x2e>
 8008ba6:	aa07      	add	r2, sp, #28
 8008ba8:	9200      	str	r2, [sp, #0]
 8008baa:	0021      	movs	r1, r4
 8008bac:	003a      	movs	r2, r7
 8008bae:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <_svfiprintf_r+0x1fc>)
 8008bb0:	9803      	ldr	r0, [sp, #12]
 8008bb2:	f000 f9bf 	bl	8008f34 <_printf_i>
 8008bb6:	e7ea      	b.n	8008b8e <_svfiprintf_r+0x1c2>
 8008bb8:	080098ed 	.word	0x080098ed
 8008bbc:	080098f3 	.word	0x080098f3
 8008bc0:	080098f7 	.word	0x080098f7
 8008bc4:	00000000 	.word	0x00000000
 8008bc8:	08008909 	.word	0x08008909

08008bcc <__sfputc_r>:
 8008bcc:	6893      	ldr	r3, [r2, #8]
 8008bce:	b510      	push	{r4, lr}
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	6093      	str	r3, [r2, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	da04      	bge.n	8008be2 <__sfputc_r+0x16>
 8008bd8:	6994      	ldr	r4, [r2, #24]
 8008bda:	42a3      	cmp	r3, r4
 8008bdc:	db07      	blt.n	8008bee <__sfputc_r+0x22>
 8008bde:	290a      	cmp	r1, #10
 8008be0:	d005      	beq.n	8008bee <__sfputc_r+0x22>
 8008be2:	6813      	ldr	r3, [r2, #0]
 8008be4:	1c58      	adds	r0, r3, #1
 8008be6:	6010      	str	r0, [r2, #0]
 8008be8:	7019      	strb	r1, [r3, #0]
 8008bea:	0008      	movs	r0, r1
 8008bec:	bd10      	pop	{r4, pc}
 8008bee:	f7ff fc5b 	bl	80084a8 <__swbuf_r>
 8008bf2:	0001      	movs	r1, r0
 8008bf4:	e7f9      	b.n	8008bea <__sfputc_r+0x1e>

08008bf6 <__sfputs_r>:
 8008bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf8:	0006      	movs	r6, r0
 8008bfa:	000f      	movs	r7, r1
 8008bfc:	0014      	movs	r4, r2
 8008bfe:	18d5      	adds	r5, r2, r3
 8008c00:	42ac      	cmp	r4, r5
 8008c02:	d101      	bne.n	8008c08 <__sfputs_r+0x12>
 8008c04:	2000      	movs	r0, #0
 8008c06:	e007      	b.n	8008c18 <__sfputs_r+0x22>
 8008c08:	7821      	ldrb	r1, [r4, #0]
 8008c0a:	003a      	movs	r2, r7
 8008c0c:	0030      	movs	r0, r6
 8008c0e:	f7ff ffdd 	bl	8008bcc <__sfputc_r>
 8008c12:	3401      	adds	r4, #1
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d1f3      	bne.n	8008c00 <__sfputs_r+0xa>
 8008c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c1c <_vfiprintf_r>:
 8008c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c1e:	b0a1      	sub	sp, #132	; 0x84
 8008c20:	000f      	movs	r7, r1
 8008c22:	0015      	movs	r5, r2
 8008c24:	001e      	movs	r6, r3
 8008c26:	9003      	str	r0, [sp, #12]
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d004      	beq.n	8008c36 <_vfiprintf_r+0x1a>
 8008c2c:	6a03      	ldr	r3, [r0, #32]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <_vfiprintf_r+0x1a>
 8008c32:	f7ff fb15 	bl	8008260 <__sinit>
 8008c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c38:	07db      	lsls	r3, r3, #31
 8008c3a:	d405      	bmi.n	8008c48 <_vfiprintf_r+0x2c>
 8008c3c:	89bb      	ldrh	r3, [r7, #12]
 8008c3e:	059b      	lsls	r3, r3, #22
 8008c40:	d402      	bmi.n	8008c48 <_vfiprintf_r+0x2c>
 8008c42:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008c44:	f7ff fd57 	bl	80086f6 <__retarget_lock_acquire_recursive>
 8008c48:	89bb      	ldrh	r3, [r7, #12]
 8008c4a:	071b      	lsls	r3, r3, #28
 8008c4c:	d502      	bpl.n	8008c54 <_vfiprintf_r+0x38>
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d113      	bne.n	8008c7c <_vfiprintf_r+0x60>
 8008c54:	0039      	movs	r1, r7
 8008c56:	9803      	ldr	r0, [sp, #12]
 8008c58:	f7ff fc68 	bl	800852c <__swsetup_r>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d00d      	beq.n	8008c7c <_vfiprintf_r+0x60>
 8008c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c62:	07db      	lsls	r3, r3, #31
 8008c64:	d503      	bpl.n	8008c6e <_vfiprintf_r+0x52>
 8008c66:	2001      	movs	r0, #1
 8008c68:	4240      	negs	r0, r0
 8008c6a:	b021      	add	sp, #132	; 0x84
 8008c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c6e:	89bb      	ldrh	r3, [r7, #12]
 8008c70:	059b      	lsls	r3, r3, #22
 8008c72:	d4f8      	bmi.n	8008c66 <_vfiprintf_r+0x4a>
 8008c74:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008c76:	f7ff fd3f 	bl	80086f8 <__retarget_lock_release_recursive>
 8008c7a:	e7f4      	b.n	8008c66 <_vfiprintf_r+0x4a>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	ac08      	add	r4, sp, #32
 8008c80:	6163      	str	r3, [r4, #20]
 8008c82:	3320      	adds	r3, #32
 8008c84:	7663      	strb	r3, [r4, #25]
 8008c86:	3310      	adds	r3, #16
 8008c88:	76a3      	strb	r3, [r4, #26]
 8008c8a:	9607      	str	r6, [sp, #28]
 8008c8c:	002e      	movs	r6, r5
 8008c8e:	7833      	ldrb	r3, [r6, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d001      	beq.n	8008c98 <_vfiprintf_r+0x7c>
 8008c94:	2b25      	cmp	r3, #37	; 0x25
 8008c96:	d148      	bne.n	8008d2a <_vfiprintf_r+0x10e>
 8008c98:	1b73      	subs	r3, r6, r5
 8008c9a:	9305      	str	r3, [sp, #20]
 8008c9c:	42ae      	cmp	r6, r5
 8008c9e:	d00b      	beq.n	8008cb8 <_vfiprintf_r+0x9c>
 8008ca0:	002a      	movs	r2, r5
 8008ca2:	0039      	movs	r1, r7
 8008ca4:	9803      	ldr	r0, [sp, #12]
 8008ca6:	f7ff ffa6 	bl	8008bf6 <__sfputs_r>
 8008caa:	3001      	adds	r0, #1
 8008cac:	d100      	bne.n	8008cb0 <_vfiprintf_r+0x94>
 8008cae:	e0af      	b.n	8008e10 <_vfiprintf_r+0x1f4>
 8008cb0:	6963      	ldr	r3, [r4, #20]
 8008cb2:	9a05      	ldr	r2, [sp, #20]
 8008cb4:	189b      	adds	r3, r3, r2
 8008cb6:	6163      	str	r3, [r4, #20]
 8008cb8:	7833      	ldrb	r3, [r6, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d100      	bne.n	8008cc0 <_vfiprintf_r+0xa4>
 8008cbe:	e0a7      	b.n	8008e10 <_vfiprintf_r+0x1f4>
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4252      	negs	r2, r2
 8008cc6:	6062      	str	r2, [r4, #4]
 8008cc8:	a904      	add	r1, sp, #16
 8008cca:	3254      	adds	r2, #84	; 0x54
 8008ccc:	1852      	adds	r2, r2, r1
 8008cce:	1c75      	adds	r5, r6, #1
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	60e3      	str	r3, [r4, #12]
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	7013      	strb	r3, [r2, #0]
 8008cd8:	65a3      	str	r3, [r4, #88]	; 0x58
 8008cda:	4b59      	ldr	r3, [pc, #356]	; (8008e40 <_vfiprintf_r+0x224>)
 8008cdc:	2205      	movs	r2, #5
 8008cde:	0018      	movs	r0, r3
 8008ce0:	7829      	ldrb	r1, [r5, #0]
 8008ce2:	9305      	str	r3, [sp, #20]
 8008ce4:	f000 fb9c 	bl	8009420 <memchr>
 8008ce8:	1c6e      	adds	r6, r5, #1
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d11f      	bne.n	8008d2e <_vfiprintf_r+0x112>
 8008cee:	6822      	ldr	r2, [r4, #0]
 8008cf0:	06d3      	lsls	r3, r2, #27
 8008cf2:	d504      	bpl.n	8008cfe <_vfiprintf_r+0xe2>
 8008cf4:	2353      	movs	r3, #83	; 0x53
 8008cf6:	a904      	add	r1, sp, #16
 8008cf8:	185b      	adds	r3, r3, r1
 8008cfa:	2120      	movs	r1, #32
 8008cfc:	7019      	strb	r1, [r3, #0]
 8008cfe:	0713      	lsls	r3, r2, #28
 8008d00:	d504      	bpl.n	8008d0c <_vfiprintf_r+0xf0>
 8008d02:	2353      	movs	r3, #83	; 0x53
 8008d04:	a904      	add	r1, sp, #16
 8008d06:	185b      	adds	r3, r3, r1
 8008d08:	212b      	movs	r1, #43	; 0x2b
 8008d0a:	7019      	strb	r1, [r3, #0]
 8008d0c:	782b      	ldrb	r3, [r5, #0]
 8008d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d10:	d016      	beq.n	8008d40 <_vfiprintf_r+0x124>
 8008d12:	002e      	movs	r6, r5
 8008d14:	2100      	movs	r1, #0
 8008d16:	200a      	movs	r0, #10
 8008d18:	68e3      	ldr	r3, [r4, #12]
 8008d1a:	7832      	ldrb	r2, [r6, #0]
 8008d1c:	1c75      	adds	r5, r6, #1
 8008d1e:	3a30      	subs	r2, #48	; 0x30
 8008d20:	2a09      	cmp	r2, #9
 8008d22:	d94e      	bls.n	8008dc2 <_vfiprintf_r+0x1a6>
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d111      	bne.n	8008d4c <_vfiprintf_r+0x130>
 8008d28:	e017      	b.n	8008d5a <_vfiprintf_r+0x13e>
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	e7af      	b.n	8008c8e <_vfiprintf_r+0x72>
 8008d2e:	9b05      	ldr	r3, [sp, #20]
 8008d30:	6822      	ldr	r2, [r4, #0]
 8008d32:	1ac0      	subs	r0, r0, r3
 8008d34:	2301      	movs	r3, #1
 8008d36:	4083      	lsls	r3, r0
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	0035      	movs	r5, r6
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	e7cc      	b.n	8008cda <_vfiprintf_r+0xbe>
 8008d40:	9b07      	ldr	r3, [sp, #28]
 8008d42:	1d19      	adds	r1, r3, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	9107      	str	r1, [sp, #28]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	db01      	blt.n	8008d50 <_vfiprintf_r+0x134>
 8008d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d4e:	e004      	b.n	8008d5a <_vfiprintf_r+0x13e>
 8008d50:	425b      	negs	r3, r3
 8008d52:	60e3      	str	r3, [r4, #12]
 8008d54:	2302      	movs	r3, #2
 8008d56:	4313      	orrs	r3, r2
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	7833      	ldrb	r3, [r6, #0]
 8008d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d5e:	d10a      	bne.n	8008d76 <_vfiprintf_r+0x15a>
 8008d60:	7873      	ldrb	r3, [r6, #1]
 8008d62:	2b2a      	cmp	r3, #42	; 0x2a
 8008d64:	d135      	bne.n	8008dd2 <_vfiprintf_r+0x1b6>
 8008d66:	9b07      	ldr	r3, [sp, #28]
 8008d68:	3602      	adds	r6, #2
 8008d6a:	1d1a      	adds	r2, r3, #4
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	9207      	str	r2, [sp, #28]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	db2b      	blt.n	8008dcc <_vfiprintf_r+0x1b0>
 8008d74:	9309      	str	r3, [sp, #36]	; 0x24
 8008d76:	4d33      	ldr	r5, [pc, #204]	; (8008e44 <_vfiprintf_r+0x228>)
 8008d78:	2203      	movs	r2, #3
 8008d7a:	0028      	movs	r0, r5
 8008d7c:	7831      	ldrb	r1, [r6, #0]
 8008d7e:	f000 fb4f 	bl	8009420 <memchr>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d006      	beq.n	8008d94 <_vfiprintf_r+0x178>
 8008d86:	2340      	movs	r3, #64	; 0x40
 8008d88:	1b40      	subs	r0, r0, r5
 8008d8a:	4083      	lsls	r3, r0
 8008d8c:	6822      	ldr	r2, [r4, #0]
 8008d8e:	3601      	adds	r6, #1
 8008d90:	4313      	orrs	r3, r2
 8008d92:	6023      	str	r3, [r4, #0]
 8008d94:	7831      	ldrb	r1, [r6, #0]
 8008d96:	2206      	movs	r2, #6
 8008d98:	482b      	ldr	r0, [pc, #172]	; (8008e48 <_vfiprintf_r+0x22c>)
 8008d9a:	1c75      	adds	r5, r6, #1
 8008d9c:	7621      	strb	r1, [r4, #24]
 8008d9e:	f000 fb3f 	bl	8009420 <memchr>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d043      	beq.n	8008e2e <_vfiprintf_r+0x212>
 8008da6:	4b29      	ldr	r3, [pc, #164]	; (8008e4c <_vfiprintf_r+0x230>)
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d125      	bne.n	8008df8 <_vfiprintf_r+0x1dc>
 8008dac:	2207      	movs	r2, #7
 8008dae:	9b07      	ldr	r3, [sp, #28]
 8008db0:	3307      	adds	r3, #7
 8008db2:	4393      	bics	r3, r2
 8008db4:	3308      	adds	r3, #8
 8008db6:	9307      	str	r3, [sp, #28]
 8008db8:	6963      	ldr	r3, [r4, #20]
 8008dba:	9a04      	ldr	r2, [sp, #16]
 8008dbc:	189b      	adds	r3, r3, r2
 8008dbe:	6163      	str	r3, [r4, #20]
 8008dc0:	e764      	b.n	8008c8c <_vfiprintf_r+0x70>
 8008dc2:	4343      	muls	r3, r0
 8008dc4:	002e      	movs	r6, r5
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	189b      	adds	r3, r3, r2
 8008dca:	e7a6      	b.n	8008d1a <_vfiprintf_r+0xfe>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	425b      	negs	r3, r3
 8008dd0:	e7d0      	b.n	8008d74 <_vfiprintf_r+0x158>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	200a      	movs	r0, #10
 8008dd6:	001a      	movs	r2, r3
 8008dd8:	3601      	adds	r6, #1
 8008dda:	6063      	str	r3, [r4, #4]
 8008ddc:	7831      	ldrb	r1, [r6, #0]
 8008dde:	1c75      	adds	r5, r6, #1
 8008de0:	3930      	subs	r1, #48	; 0x30
 8008de2:	2909      	cmp	r1, #9
 8008de4:	d903      	bls.n	8008dee <_vfiprintf_r+0x1d2>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0c5      	beq.n	8008d76 <_vfiprintf_r+0x15a>
 8008dea:	9209      	str	r2, [sp, #36]	; 0x24
 8008dec:	e7c3      	b.n	8008d76 <_vfiprintf_r+0x15a>
 8008dee:	4342      	muls	r2, r0
 8008df0:	002e      	movs	r6, r5
 8008df2:	2301      	movs	r3, #1
 8008df4:	1852      	adds	r2, r2, r1
 8008df6:	e7f1      	b.n	8008ddc <_vfiprintf_r+0x1c0>
 8008df8:	aa07      	add	r2, sp, #28
 8008dfa:	9200      	str	r2, [sp, #0]
 8008dfc:	0021      	movs	r1, r4
 8008dfe:	003a      	movs	r2, r7
 8008e00:	4b13      	ldr	r3, [pc, #76]	; (8008e50 <_vfiprintf_r+0x234>)
 8008e02:	9803      	ldr	r0, [sp, #12]
 8008e04:	e000      	b.n	8008e08 <_vfiprintf_r+0x1ec>
 8008e06:	bf00      	nop
 8008e08:	9004      	str	r0, [sp, #16]
 8008e0a:	9b04      	ldr	r3, [sp, #16]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	d1d3      	bne.n	8008db8 <_vfiprintf_r+0x19c>
 8008e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e12:	07db      	lsls	r3, r3, #31
 8008e14:	d405      	bmi.n	8008e22 <_vfiprintf_r+0x206>
 8008e16:	89bb      	ldrh	r3, [r7, #12]
 8008e18:	059b      	lsls	r3, r3, #22
 8008e1a:	d402      	bmi.n	8008e22 <_vfiprintf_r+0x206>
 8008e1c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008e1e:	f7ff fc6b 	bl	80086f8 <__retarget_lock_release_recursive>
 8008e22:	89bb      	ldrh	r3, [r7, #12]
 8008e24:	065b      	lsls	r3, r3, #25
 8008e26:	d500      	bpl.n	8008e2a <_vfiprintf_r+0x20e>
 8008e28:	e71d      	b.n	8008c66 <_vfiprintf_r+0x4a>
 8008e2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e2c:	e71d      	b.n	8008c6a <_vfiprintf_r+0x4e>
 8008e2e:	aa07      	add	r2, sp, #28
 8008e30:	9200      	str	r2, [sp, #0]
 8008e32:	0021      	movs	r1, r4
 8008e34:	003a      	movs	r2, r7
 8008e36:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <_vfiprintf_r+0x234>)
 8008e38:	9803      	ldr	r0, [sp, #12]
 8008e3a:	f000 f87b 	bl	8008f34 <_printf_i>
 8008e3e:	e7e3      	b.n	8008e08 <_vfiprintf_r+0x1ec>
 8008e40:	080098ed 	.word	0x080098ed
 8008e44:	080098f3 	.word	0x080098f3
 8008e48:	080098f7 	.word	0x080098f7
 8008e4c:	00000000 	.word	0x00000000
 8008e50:	08008bf7 	.word	0x08008bf7

08008e54 <_printf_common>:
 8008e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e56:	0016      	movs	r6, r2
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	688a      	ldr	r2, [r1, #8]
 8008e5c:	690b      	ldr	r3, [r1, #16]
 8008e5e:	000c      	movs	r4, r1
 8008e60:	9000      	str	r0, [sp, #0]
 8008e62:	4293      	cmp	r3, r2
 8008e64:	da00      	bge.n	8008e68 <_printf_common+0x14>
 8008e66:	0013      	movs	r3, r2
 8008e68:	0022      	movs	r2, r4
 8008e6a:	6033      	str	r3, [r6, #0]
 8008e6c:	3243      	adds	r2, #67	; 0x43
 8008e6e:	7812      	ldrb	r2, [r2, #0]
 8008e70:	2a00      	cmp	r2, #0
 8008e72:	d001      	beq.n	8008e78 <_printf_common+0x24>
 8008e74:	3301      	adds	r3, #1
 8008e76:	6033      	str	r3, [r6, #0]
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	069b      	lsls	r3, r3, #26
 8008e7c:	d502      	bpl.n	8008e84 <_printf_common+0x30>
 8008e7e:	6833      	ldr	r3, [r6, #0]
 8008e80:	3302      	adds	r3, #2
 8008e82:	6033      	str	r3, [r6, #0]
 8008e84:	6822      	ldr	r2, [r4, #0]
 8008e86:	2306      	movs	r3, #6
 8008e88:	0015      	movs	r5, r2
 8008e8a:	401d      	ands	r5, r3
 8008e8c:	421a      	tst	r2, r3
 8008e8e:	d027      	beq.n	8008ee0 <_printf_common+0x8c>
 8008e90:	0023      	movs	r3, r4
 8008e92:	3343      	adds	r3, #67	; 0x43
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	1e5a      	subs	r2, r3, #1
 8008e98:	4193      	sbcs	r3, r2
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	0692      	lsls	r2, r2, #26
 8008e9e:	d430      	bmi.n	8008f02 <_printf_common+0xae>
 8008ea0:	0022      	movs	r2, r4
 8008ea2:	9901      	ldr	r1, [sp, #4]
 8008ea4:	9800      	ldr	r0, [sp, #0]
 8008ea6:	9d08      	ldr	r5, [sp, #32]
 8008ea8:	3243      	adds	r2, #67	; 0x43
 8008eaa:	47a8      	blx	r5
 8008eac:	3001      	adds	r0, #1
 8008eae:	d025      	beq.n	8008efc <_printf_common+0xa8>
 8008eb0:	2206      	movs	r2, #6
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	2500      	movs	r5, #0
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d105      	bne.n	8008ec8 <_printf_common+0x74>
 8008ebc:	6833      	ldr	r3, [r6, #0]
 8008ebe:	68e5      	ldr	r5, [r4, #12]
 8008ec0:	1aed      	subs	r5, r5, r3
 8008ec2:	43eb      	mvns	r3, r5
 8008ec4:	17db      	asrs	r3, r3, #31
 8008ec6:	401d      	ands	r5, r3
 8008ec8:	68a3      	ldr	r3, [r4, #8]
 8008eca:	6922      	ldr	r2, [r4, #16]
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	dd01      	ble.n	8008ed4 <_printf_common+0x80>
 8008ed0:	1a9b      	subs	r3, r3, r2
 8008ed2:	18ed      	adds	r5, r5, r3
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	42b5      	cmp	r5, r6
 8008ed8:	d120      	bne.n	8008f1c <_printf_common+0xc8>
 8008eda:	2000      	movs	r0, #0
 8008edc:	e010      	b.n	8008f00 <_printf_common+0xac>
 8008ede:	3501      	adds	r5, #1
 8008ee0:	68e3      	ldr	r3, [r4, #12]
 8008ee2:	6832      	ldr	r2, [r6, #0]
 8008ee4:	1a9b      	subs	r3, r3, r2
 8008ee6:	42ab      	cmp	r3, r5
 8008ee8:	ddd2      	ble.n	8008e90 <_printf_common+0x3c>
 8008eea:	0022      	movs	r2, r4
 8008eec:	2301      	movs	r3, #1
 8008eee:	9901      	ldr	r1, [sp, #4]
 8008ef0:	9800      	ldr	r0, [sp, #0]
 8008ef2:	9f08      	ldr	r7, [sp, #32]
 8008ef4:	3219      	adds	r2, #25
 8008ef6:	47b8      	blx	r7
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d1f0      	bne.n	8008ede <_printf_common+0x8a>
 8008efc:	2001      	movs	r0, #1
 8008efe:	4240      	negs	r0, r0
 8008f00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f02:	2030      	movs	r0, #48	; 0x30
 8008f04:	18e1      	adds	r1, r4, r3
 8008f06:	3143      	adds	r1, #67	; 0x43
 8008f08:	7008      	strb	r0, [r1, #0]
 8008f0a:	0021      	movs	r1, r4
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	3145      	adds	r1, #69	; 0x45
 8008f10:	7809      	ldrb	r1, [r1, #0]
 8008f12:	18a2      	adds	r2, r4, r2
 8008f14:	3243      	adds	r2, #67	; 0x43
 8008f16:	3302      	adds	r3, #2
 8008f18:	7011      	strb	r1, [r2, #0]
 8008f1a:	e7c1      	b.n	8008ea0 <_printf_common+0x4c>
 8008f1c:	0022      	movs	r2, r4
 8008f1e:	2301      	movs	r3, #1
 8008f20:	9901      	ldr	r1, [sp, #4]
 8008f22:	9800      	ldr	r0, [sp, #0]
 8008f24:	9f08      	ldr	r7, [sp, #32]
 8008f26:	321a      	adds	r2, #26
 8008f28:	47b8      	blx	r7
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d0e6      	beq.n	8008efc <_printf_common+0xa8>
 8008f2e:	3601      	adds	r6, #1
 8008f30:	e7d1      	b.n	8008ed6 <_printf_common+0x82>
	...

08008f34 <_printf_i>:
 8008f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f36:	b08b      	sub	sp, #44	; 0x2c
 8008f38:	9206      	str	r2, [sp, #24]
 8008f3a:	000a      	movs	r2, r1
 8008f3c:	3243      	adds	r2, #67	; 0x43
 8008f3e:	9307      	str	r3, [sp, #28]
 8008f40:	9005      	str	r0, [sp, #20]
 8008f42:	9204      	str	r2, [sp, #16]
 8008f44:	7e0a      	ldrb	r2, [r1, #24]
 8008f46:	000c      	movs	r4, r1
 8008f48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f4a:	2a78      	cmp	r2, #120	; 0x78
 8008f4c:	d809      	bhi.n	8008f62 <_printf_i+0x2e>
 8008f4e:	2a62      	cmp	r2, #98	; 0x62
 8008f50:	d80b      	bhi.n	8008f6a <_printf_i+0x36>
 8008f52:	2a00      	cmp	r2, #0
 8008f54:	d100      	bne.n	8008f58 <_printf_i+0x24>
 8008f56:	e0be      	b.n	80090d6 <_printf_i+0x1a2>
 8008f58:	497c      	ldr	r1, [pc, #496]	; (800914c <_printf_i+0x218>)
 8008f5a:	9103      	str	r1, [sp, #12]
 8008f5c:	2a58      	cmp	r2, #88	; 0x58
 8008f5e:	d100      	bne.n	8008f62 <_printf_i+0x2e>
 8008f60:	e093      	b.n	800908a <_printf_i+0x156>
 8008f62:	0026      	movs	r6, r4
 8008f64:	3642      	adds	r6, #66	; 0x42
 8008f66:	7032      	strb	r2, [r6, #0]
 8008f68:	e022      	b.n	8008fb0 <_printf_i+0x7c>
 8008f6a:	0010      	movs	r0, r2
 8008f6c:	3863      	subs	r0, #99	; 0x63
 8008f6e:	2815      	cmp	r0, #21
 8008f70:	d8f7      	bhi.n	8008f62 <_printf_i+0x2e>
 8008f72:	f7f7 f8d3 	bl	800011c <__gnu_thumb1_case_shi>
 8008f76:	0016      	.short	0x0016
 8008f78:	fff6001f 	.word	0xfff6001f
 8008f7c:	fff6fff6 	.word	0xfff6fff6
 8008f80:	001ffff6 	.word	0x001ffff6
 8008f84:	fff6fff6 	.word	0xfff6fff6
 8008f88:	fff6fff6 	.word	0xfff6fff6
 8008f8c:	003600a3 	.word	0x003600a3
 8008f90:	fff60083 	.word	0xfff60083
 8008f94:	00b4fff6 	.word	0x00b4fff6
 8008f98:	0036fff6 	.word	0x0036fff6
 8008f9c:	fff6fff6 	.word	0xfff6fff6
 8008fa0:	0087      	.short	0x0087
 8008fa2:	0026      	movs	r6, r4
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	3642      	adds	r6, #66	; 0x42
 8008fa8:	1d11      	adds	r1, r2, #4
 8008faa:	6019      	str	r1, [r3, #0]
 8008fac:	6813      	ldr	r3, [r2, #0]
 8008fae:	7033      	strb	r3, [r6, #0]
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e0a2      	b.n	80090fa <_printf_i+0x1c6>
 8008fb4:	6818      	ldr	r0, [r3, #0]
 8008fb6:	6809      	ldr	r1, [r1, #0]
 8008fb8:	1d02      	adds	r2, r0, #4
 8008fba:	060d      	lsls	r5, r1, #24
 8008fbc:	d50b      	bpl.n	8008fd6 <_printf_i+0xa2>
 8008fbe:	6805      	ldr	r5, [r0, #0]
 8008fc0:	601a      	str	r2, [r3, #0]
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	da03      	bge.n	8008fce <_printf_i+0x9a>
 8008fc6:	232d      	movs	r3, #45	; 0x2d
 8008fc8:	9a04      	ldr	r2, [sp, #16]
 8008fca:	426d      	negs	r5, r5
 8008fcc:	7013      	strb	r3, [r2, #0]
 8008fce:	4b5f      	ldr	r3, [pc, #380]	; (800914c <_printf_i+0x218>)
 8008fd0:	270a      	movs	r7, #10
 8008fd2:	9303      	str	r3, [sp, #12]
 8008fd4:	e01b      	b.n	800900e <_printf_i+0xda>
 8008fd6:	6805      	ldr	r5, [r0, #0]
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	0649      	lsls	r1, r1, #25
 8008fdc:	d5f1      	bpl.n	8008fc2 <_printf_i+0x8e>
 8008fde:	b22d      	sxth	r5, r5
 8008fe0:	e7ef      	b.n	8008fc2 <_printf_i+0x8e>
 8008fe2:	680d      	ldr	r5, [r1, #0]
 8008fe4:	6819      	ldr	r1, [r3, #0]
 8008fe6:	1d08      	adds	r0, r1, #4
 8008fe8:	6018      	str	r0, [r3, #0]
 8008fea:	062e      	lsls	r6, r5, #24
 8008fec:	d501      	bpl.n	8008ff2 <_printf_i+0xbe>
 8008fee:	680d      	ldr	r5, [r1, #0]
 8008ff0:	e003      	b.n	8008ffa <_printf_i+0xc6>
 8008ff2:	066d      	lsls	r5, r5, #25
 8008ff4:	d5fb      	bpl.n	8008fee <_printf_i+0xba>
 8008ff6:	680d      	ldr	r5, [r1, #0]
 8008ff8:	b2ad      	uxth	r5, r5
 8008ffa:	4b54      	ldr	r3, [pc, #336]	; (800914c <_printf_i+0x218>)
 8008ffc:	2708      	movs	r7, #8
 8008ffe:	9303      	str	r3, [sp, #12]
 8009000:	2a6f      	cmp	r2, #111	; 0x6f
 8009002:	d000      	beq.n	8009006 <_printf_i+0xd2>
 8009004:	3702      	adds	r7, #2
 8009006:	0023      	movs	r3, r4
 8009008:	2200      	movs	r2, #0
 800900a:	3343      	adds	r3, #67	; 0x43
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	6863      	ldr	r3, [r4, #4]
 8009010:	60a3      	str	r3, [r4, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	db03      	blt.n	800901e <_printf_i+0xea>
 8009016:	2104      	movs	r1, #4
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	438a      	bics	r2, r1
 800901c:	6022      	str	r2, [r4, #0]
 800901e:	2d00      	cmp	r5, #0
 8009020:	d102      	bne.n	8009028 <_printf_i+0xf4>
 8009022:	9e04      	ldr	r6, [sp, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00c      	beq.n	8009042 <_printf_i+0x10e>
 8009028:	9e04      	ldr	r6, [sp, #16]
 800902a:	0028      	movs	r0, r5
 800902c:	0039      	movs	r1, r7
 800902e:	f7f7 f905 	bl	800023c <__aeabi_uidivmod>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	3e01      	subs	r6, #1
 8009036:	5c5b      	ldrb	r3, [r3, r1]
 8009038:	7033      	strb	r3, [r6, #0]
 800903a:	002b      	movs	r3, r5
 800903c:	0005      	movs	r5, r0
 800903e:	429f      	cmp	r7, r3
 8009040:	d9f3      	bls.n	800902a <_printf_i+0xf6>
 8009042:	2f08      	cmp	r7, #8
 8009044:	d109      	bne.n	800905a <_printf_i+0x126>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	07db      	lsls	r3, r3, #31
 800904a:	d506      	bpl.n	800905a <_printf_i+0x126>
 800904c:	6862      	ldr	r2, [r4, #4]
 800904e:	6923      	ldr	r3, [r4, #16]
 8009050:	429a      	cmp	r2, r3
 8009052:	dc02      	bgt.n	800905a <_printf_i+0x126>
 8009054:	2330      	movs	r3, #48	; 0x30
 8009056:	3e01      	subs	r6, #1
 8009058:	7033      	strb	r3, [r6, #0]
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	1b9b      	subs	r3, r3, r6
 800905e:	6123      	str	r3, [r4, #16]
 8009060:	9b07      	ldr	r3, [sp, #28]
 8009062:	0021      	movs	r1, r4
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	9805      	ldr	r0, [sp, #20]
 8009068:	9b06      	ldr	r3, [sp, #24]
 800906a:	aa09      	add	r2, sp, #36	; 0x24
 800906c:	f7ff fef2 	bl	8008e54 <_printf_common>
 8009070:	3001      	adds	r0, #1
 8009072:	d147      	bne.n	8009104 <_printf_i+0x1d0>
 8009074:	2001      	movs	r0, #1
 8009076:	4240      	negs	r0, r0
 8009078:	b00b      	add	sp, #44	; 0x2c
 800907a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800907c:	2220      	movs	r2, #32
 800907e:	6809      	ldr	r1, [r1, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	6022      	str	r2, [r4, #0]
 8009084:	2278      	movs	r2, #120	; 0x78
 8009086:	4932      	ldr	r1, [pc, #200]	; (8009150 <_printf_i+0x21c>)
 8009088:	9103      	str	r1, [sp, #12]
 800908a:	0021      	movs	r1, r4
 800908c:	3145      	adds	r1, #69	; 0x45
 800908e:	700a      	strb	r2, [r1, #0]
 8009090:	6819      	ldr	r1, [r3, #0]
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	c920      	ldmia	r1!, {r5}
 8009096:	0610      	lsls	r0, r2, #24
 8009098:	d402      	bmi.n	80090a0 <_printf_i+0x16c>
 800909a:	0650      	lsls	r0, r2, #25
 800909c:	d500      	bpl.n	80090a0 <_printf_i+0x16c>
 800909e:	b2ad      	uxth	r5, r5
 80090a0:	6019      	str	r1, [r3, #0]
 80090a2:	07d3      	lsls	r3, r2, #31
 80090a4:	d502      	bpl.n	80090ac <_printf_i+0x178>
 80090a6:	2320      	movs	r3, #32
 80090a8:	4313      	orrs	r3, r2
 80090aa:	6023      	str	r3, [r4, #0]
 80090ac:	2710      	movs	r7, #16
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	d1a9      	bne.n	8009006 <_printf_i+0xd2>
 80090b2:	2220      	movs	r2, #32
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	4393      	bics	r3, r2
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	e7a4      	b.n	8009006 <_printf_i+0xd2>
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	680d      	ldr	r5, [r1, #0]
 80090c0:	1d10      	adds	r0, r2, #4
 80090c2:	6949      	ldr	r1, [r1, #20]
 80090c4:	6018      	str	r0, [r3, #0]
 80090c6:	6813      	ldr	r3, [r2, #0]
 80090c8:	062e      	lsls	r6, r5, #24
 80090ca:	d501      	bpl.n	80090d0 <_printf_i+0x19c>
 80090cc:	6019      	str	r1, [r3, #0]
 80090ce:	e002      	b.n	80090d6 <_printf_i+0x1a2>
 80090d0:	066d      	lsls	r5, r5, #25
 80090d2:	d5fb      	bpl.n	80090cc <_printf_i+0x198>
 80090d4:	8019      	strh	r1, [r3, #0]
 80090d6:	2300      	movs	r3, #0
 80090d8:	9e04      	ldr	r6, [sp, #16]
 80090da:	6123      	str	r3, [r4, #16]
 80090dc:	e7c0      	b.n	8009060 <_printf_i+0x12c>
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	1d11      	adds	r1, r2, #4
 80090e2:	6019      	str	r1, [r3, #0]
 80090e4:	6816      	ldr	r6, [r2, #0]
 80090e6:	2100      	movs	r1, #0
 80090e8:	0030      	movs	r0, r6
 80090ea:	6862      	ldr	r2, [r4, #4]
 80090ec:	f000 f998 	bl	8009420 <memchr>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d001      	beq.n	80090f8 <_printf_i+0x1c4>
 80090f4:	1b80      	subs	r0, r0, r6
 80090f6:	6060      	str	r0, [r4, #4]
 80090f8:	6863      	ldr	r3, [r4, #4]
 80090fa:	6123      	str	r3, [r4, #16]
 80090fc:	2300      	movs	r3, #0
 80090fe:	9a04      	ldr	r2, [sp, #16]
 8009100:	7013      	strb	r3, [r2, #0]
 8009102:	e7ad      	b.n	8009060 <_printf_i+0x12c>
 8009104:	0032      	movs	r2, r6
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	9906      	ldr	r1, [sp, #24]
 800910a:	9805      	ldr	r0, [sp, #20]
 800910c:	9d07      	ldr	r5, [sp, #28]
 800910e:	47a8      	blx	r5
 8009110:	3001      	adds	r0, #1
 8009112:	d0af      	beq.n	8009074 <_printf_i+0x140>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	079b      	lsls	r3, r3, #30
 8009118:	d415      	bmi.n	8009146 <_printf_i+0x212>
 800911a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911c:	68e0      	ldr	r0, [r4, #12]
 800911e:	4298      	cmp	r0, r3
 8009120:	daaa      	bge.n	8009078 <_printf_i+0x144>
 8009122:	0018      	movs	r0, r3
 8009124:	e7a8      	b.n	8009078 <_printf_i+0x144>
 8009126:	0022      	movs	r2, r4
 8009128:	2301      	movs	r3, #1
 800912a:	9906      	ldr	r1, [sp, #24]
 800912c:	9805      	ldr	r0, [sp, #20]
 800912e:	9e07      	ldr	r6, [sp, #28]
 8009130:	3219      	adds	r2, #25
 8009132:	47b0      	blx	r6
 8009134:	3001      	adds	r0, #1
 8009136:	d09d      	beq.n	8009074 <_printf_i+0x140>
 8009138:	3501      	adds	r5, #1
 800913a:	68e3      	ldr	r3, [r4, #12]
 800913c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800913e:	1a9b      	subs	r3, r3, r2
 8009140:	42ab      	cmp	r3, r5
 8009142:	dcf0      	bgt.n	8009126 <_printf_i+0x1f2>
 8009144:	e7e9      	b.n	800911a <_printf_i+0x1e6>
 8009146:	2500      	movs	r5, #0
 8009148:	e7f7      	b.n	800913a <_printf_i+0x206>
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	080098fe 	.word	0x080098fe
 8009150:	0800990f 	.word	0x0800990f

08009154 <__sflush_r>:
 8009154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009156:	898b      	ldrh	r3, [r1, #12]
 8009158:	0005      	movs	r5, r0
 800915a:	000c      	movs	r4, r1
 800915c:	071a      	lsls	r2, r3, #28
 800915e:	d45c      	bmi.n	800921a <__sflush_r+0xc6>
 8009160:	684a      	ldr	r2, [r1, #4]
 8009162:	2a00      	cmp	r2, #0
 8009164:	dc04      	bgt.n	8009170 <__sflush_r+0x1c>
 8009166:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009168:	2a00      	cmp	r2, #0
 800916a:	dc01      	bgt.n	8009170 <__sflush_r+0x1c>
 800916c:	2000      	movs	r0, #0
 800916e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009170:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009172:	2f00      	cmp	r7, #0
 8009174:	d0fa      	beq.n	800916c <__sflush_r+0x18>
 8009176:	2200      	movs	r2, #0
 8009178:	2080      	movs	r0, #128	; 0x80
 800917a:	682e      	ldr	r6, [r5, #0]
 800917c:	602a      	str	r2, [r5, #0]
 800917e:	001a      	movs	r2, r3
 8009180:	0140      	lsls	r0, r0, #5
 8009182:	6a21      	ldr	r1, [r4, #32]
 8009184:	4002      	ands	r2, r0
 8009186:	4203      	tst	r3, r0
 8009188:	d034      	beq.n	80091f4 <__sflush_r+0xa0>
 800918a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	075b      	lsls	r3, r3, #29
 8009190:	d506      	bpl.n	80091a0 <__sflush_r+0x4c>
 8009192:	6863      	ldr	r3, [r4, #4]
 8009194:	1ac0      	subs	r0, r0, r3
 8009196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <__sflush_r+0x4c>
 800919c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800919e:	1ac0      	subs	r0, r0, r3
 80091a0:	0002      	movs	r2, r0
 80091a2:	2300      	movs	r3, #0
 80091a4:	0028      	movs	r0, r5
 80091a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80091a8:	6a21      	ldr	r1, [r4, #32]
 80091aa:	47b8      	blx	r7
 80091ac:	89a2      	ldrh	r2, [r4, #12]
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	d106      	bne.n	80091c0 <__sflush_r+0x6c>
 80091b2:	6829      	ldr	r1, [r5, #0]
 80091b4:	291d      	cmp	r1, #29
 80091b6:	d82c      	bhi.n	8009212 <__sflush_r+0xbe>
 80091b8:	4b2a      	ldr	r3, [pc, #168]	; (8009264 <__sflush_r+0x110>)
 80091ba:	410b      	asrs	r3, r1
 80091bc:	07db      	lsls	r3, r3, #31
 80091be:	d428      	bmi.n	8009212 <__sflush_r+0xbe>
 80091c0:	2300      	movs	r3, #0
 80091c2:	6063      	str	r3, [r4, #4]
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	04d2      	lsls	r2, r2, #19
 80091ca:	d505      	bpl.n	80091d8 <__sflush_r+0x84>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <__sflush_r+0x82>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d100      	bne.n	80091d8 <__sflush_r+0x84>
 80091d6:	6560      	str	r0, [r4, #84]	; 0x54
 80091d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091da:	602e      	str	r6, [r5, #0]
 80091dc:	2900      	cmp	r1, #0
 80091de:	d0c5      	beq.n	800916c <__sflush_r+0x18>
 80091e0:	0023      	movs	r3, r4
 80091e2:	3344      	adds	r3, #68	; 0x44
 80091e4:	4299      	cmp	r1, r3
 80091e6:	d002      	beq.n	80091ee <__sflush_r+0x9a>
 80091e8:	0028      	movs	r0, r5
 80091ea:	f7ff fa8f 	bl	800870c <_free_r>
 80091ee:	2000      	movs	r0, #0
 80091f0:	6360      	str	r0, [r4, #52]	; 0x34
 80091f2:	e7bc      	b.n	800916e <__sflush_r+0x1a>
 80091f4:	2301      	movs	r3, #1
 80091f6:	0028      	movs	r0, r5
 80091f8:	47b8      	blx	r7
 80091fa:	1c43      	adds	r3, r0, #1
 80091fc:	d1c6      	bne.n	800918c <__sflush_r+0x38>
 80091fe:	682b      	ldr	r3, [r5, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d0c3      	beq.n	800918c <__sflush_r+0x38>
 8009204:	2b1d      	cmp	r3, #29
 8009206:	d001      	beq.n	800920c <__sflush_r+0xb8>
 8009208:	2b16      	cmp	r3, #22
 800920a:	d101      	bne.n	8009210 <__sflush_r+0xbc>
 800920c:	602e      	str	r6, [r5, #0]
 800920e:	e7ad      	b.n	800916c <__sflush_r+0x18>
 8009210:	89a2      	ldrh	r2, [r4, #12]
 8009212:	2340      	movs	r3, #64	; 0x40
 8009214:	4313      	orrs	r3, r2
 8009216:	81a3      	strh	r3, [r4, #12]
 8009218:	e7a9      	b.n	800916e <__sflush_r+0x1a>
 800921a:	690e      	ldr	r6, [r1, #16]
 800921c:	2e00      	cmp	r6, #0
 800921e:	d0a5      	beq.n	800916c <__sflush_r+0x18>
 8009220:	680f      	ldr	r7, [r1, #0]
 8009222:	600e      	str	r6, [r1, #0]
 8009224:	1bba      	subs	r2, r7, r6
 8009226:	9201      	str	r2, [sp, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	079b      	lsls	r3, r3, #30
 800922c:	d100      	bne.n	8009230 <__sflush_r+0xdc>
 800922e:	694a      	ldr	r2, [r1, #20]
 8009230:	60a2      	str	r2, [r4, #8]
 8009232:	9b01      	ldr	r3, [sp, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	dd99      	ble.n	800916c <__sflush_r+0x18>
 8009238:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800923a:	0032      	movs	r2, r6
 800923c:	001f      	movs	r7, r3
 800923e:	0028      	movs	r0, r5
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	6a21      	ldr	r1, [r4, #32]
 8009244:	47b8      	blx	r7
 8009246:	2800      	cmp	r0, #0
 8009248:	dc06      	bgt.n	8009258 <__sflush_r+0x104>
 800924a:	2340      	movs	r3, #64	; 0x40
 800924c:	2001      	movs	r0, #1
 800924e:	89a2      	ldrh	r2, [r4, #12]
 8009250:	4240      	negs	r0, r0
 8009252:	4313      	orrs	r3, r2
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	e78a      	b.n	800916e <__sflush_r+0x1a>
 8009258:	9b01      	ldr	r3, [sp, #4]
 800925a:	1836      	adds	r6, r6, r0
 800925c:	1a1b      	subs	r3, r3, r0
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	e7e7      	b.n	8009232 <__sflush_r+0xde>
 8009262:	46c0      	nop			; (mov r8, r8)
 8009264:	dfbffffe 	.word	0xdfbffffe

08009268 <_fflush_r>:
 8009268:	690b      	ldr	r3, [r1, #16]
 800926a:	b570      	push	{r4, r5, r6, lr}
 800926c:	0005      	movs	r5, r0
 800926e:	000c      	movs	r4, r1
 8009270:	2b00      	cmp	r3, #0
 8009272:	d102      	bne.n	800927a <_fflush_r+0x12>
 8009274:	2500      	movs	r5, #0
 8009276:	0028      	movs	r0, r5
 8009278:	bd70      	pop	{r4, r5, r6, pc}
 800927a:	2800      	cmp	r0, #0
 800927c:	d004      	beq.n	8009288 <_fflush_r+0x20>
 800927e:	6a03      	ldr	r3, [r0, #32]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <_fflush_r+0x20>
 8009284:	f7fe ffec 	bl	8008260 <__sinit>
 8009288:	220c      	movs	r2, #12
 800928a:	5ea3      	ldrsh	r3, [r4, r2]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0f1      	beq.n	8009274 <_fflush_r+0xc>
 8009290:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009292:	07d2      	lsls	r2, r2, #31
 8009294:	d404      	bmi.n	80092a0 <_fflush_r+0x38>
 8009296:	059b      	lsls	r3, r3, #22
 8009298:	d402      	bmi.n	80092a0 <_fflush_r+0x38>
 800929a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800929c:	f7ff fa2b 	bl	80086f6 <__retarget_lock_acquire_recursive>
 80092a0:	0028      	movs	r0, r5
 80092a2:	0021      	movs	r1, r4
 80092a4:	f7ff ff56 	bl	8009154 <__sflush_r>
 80092a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092aa:	0005      	movs	r5, r0
 80092ac:	07db      	lsls	r3, r3, #31
 80092ae:	d4e2      	bmi.n	8009276 <_fflush_r+0xe>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	059b      	lsls	r3, r3, #22
 80092b4:	d4df      	bmi.n	8009276 <_fflush_r+0xe>
 80092b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092b8:	f7ff fa1e 	bl	80086f8 <__retarget_lock_release_recursive>
 80092bc:	e7db      	b.n	8009276 <_fflush_r+0xe>
	...

080092c0 <__swhatbuf_r>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	000e      	movs	r6, r1
 80092c4:	001d      	movs	r5, r3
 80092c6:	230e      	movs	r3, #14
 80092c8:	5ec9      	ldrsh	r1, [r1, r3]
 80092ca:	0014      	movs	r4, r2
 80092cc:	b096      	sub	sp, #88	; 0x58
 80092ce:	2900      	cmp	r1, #0
 80092d0:	da0c      	bge.n	80092ec <__swhatbuf_r+0x2c>
 80092d2:	89b2      	ldrh	r2, [r6, #12]
 80092d4:	2380      	movs	r3, #128	; 0x80
 80092d6:	0011      	movs	r1, r2
 80092d8:	4019      	ands	r1, r3
 80092da:	421a      	tst	r2, r3
 80092dc:	d013      	beq.n	8009306 <__swhatbuf_r+0x46>
 80092de:	2100      	movs	r1, #0
 80092e0:	3b40      	subs	r3, #64	; 0x40
 80092e2:	2000      	movs	r0, #0
 80092e4:	6029      	str	r1, [r5, #0]
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	b016      	add	sp, #88	; 0x58
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	466a      	mov	r2, sp
 80092ee:	f000 f861 	bl	80093b4 <_fstat_r>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	dbed      	blt.n	80092d2 <__swhatbuf_r+0x12>
 80092f6:	23f0      	movs	r3, #240	; 0xf0
 80092f8:	9901      	ldr	r1, [sp, #4]
 80092fa:	021b      	lsls	r3, r3, #8
 80092fc:	4019      	ands	r1, r3
 80092fe:	4b03      	ldr	r3, [pc, #12]	; (800930c <__swhatbuf_r+0x4c>)
 8009300:	18c9      	adds	r1, r1, r3
 8009302:	424b      	negs	r3, r1
 8009304:	4159      	adcs	r1, r3
 8009306:	2380      	movs	r3, #128	; 0x80
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	e7ea      	b.n	80092e2 <__swhatbuf_r+0x22>
 800930c:	ffffe000 	.word	0xffffe000

08009310 <__smakebuf_r>:
 8009310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009312:	2602      	movs	r6, #2
 8009314:	898b      	ldrh	r3, [r1, #12]
 8009316:	0005      	movs	r5, r0
 8009318:	000c      	movs	r4, r1
 800931a:	4233      	tst	r3, r6
 800931c:	d006      	beq.n	800932c <__smakebuf_r+0x1c>
 800931e:	0023      	movs	r3, r4
 8009320:	3347      	adds	r3, #71	; 0x47
 8009322:	6023      	str	r3, [r4, #0]
 8009324:	6123      	str	r3, [r4, #16]
 8009326:	2301      	movs	r3, #1
 8009328:	6163      	str	r3, [r4, #20]
 800932a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800932c:	466a      	mov	r2, sp
 800932e:	ab01      	add	r3, sp, #4
 8009330:	f7ff ffc6 	bl	80092c0 <__swhatbuf_r>
 8009334:	9900      	ldr	r1, [sp, #0]
 8009336:	0007      	movs	r7, r0
 8009338:	0028      	movs	r0, r5
 800933a:	f7ff fa53 	bl	80087e4 <_malloc_r>
 800933e:	2800      	cmp	r0, #0
 8009340:	d108      	bne.n	8009354 <__smakebuf_r+0x44>
 8009342:	220c      	movs	r2, #12
 8009344:	5ea3      	ldrsh	r3, [r4, r2]
 8009346:	059a      	lsls	r2, r3, #22
 8009348:	d4ef      	bmi.n	800932a <__smakebuf_r+0x1a>
 800934a:	2203      	movs	r2, #3
 800934c:	4393      	bics	r3, r2
 800934e:	431e      	orrs	r6, r3
 8009350:	81a6      	strh	r6, [r4, #12]
 8009352:	e7e4      	b.n	800931e <__smakebuf_r+0xe>
 8009354:	2380      	movs	r3, #128	; 0x80
 8009356:	89a2      	ldrh	r2, [r4, #12]
 8009358:	6020      	str	r0, [r4, #0]
 800935a:	4313      	orrs	r3, r2
 800935c:	81a3      	strh	r3, [r4, #12]
 800935e:	9b00      	ldr	r3, [sp, #0]
 8009360:	6120      	str	r0, [r4, #16]
 8009362:	6163      	str	r3, [r4, #20]
 8009364:	9b01      	ldr	r3, [sp, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00c      	beq.n	8009384 <__smakebuf_r+0x74>
 800936a:	0028      	movs	r0, r5
 800936c:	230e      	movs	r3, #14
 800936e:	5ee1      	ldrsh	r1, [r4, r3]
 8009370:	f000 f832 	bl	80093d8 <_isatty_r>
 8009374:	2800      	cmp	r0, #0
 8009376:	d005      	beq.n	8009384 <__smakebuf_r+0x74>
 8009378:	2303      	movs	r3, #3
 800937a:	89a2      	ldrh	r2, [r4, #12]
 800937c:	439a      	bics	r2, r3
 800937e:	3b02      	subs	r3, #2
 8009380:	4313      	orrs	r3, r2
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	433b      	orrs	r3, r7
 8009388:	81a3      	strh	r3, [r4, #12]
 800938a:	e7ce      	b.n	800932a <__smakebuf_r+0x1a>

0800938c <memmove>:
 800938c:	b510      	push	{r4, lr}
 800938e:	4288      	cmp	r0, r1
 8009390:	d902      	bls.n	8009398 <memmove+0xc>
 8009392:	188b      	adds	r3, r1, r2
 8009394:	4298      	cmp	r0, r3
 8009396:	d303      	bcc.n	80093a0 <memmove+0x14>
 8009398:	2300      	movs	r3, #0
 800939a:	e007      	b.n	80093ac <memmove+0x20>
 800939c:	5c8b      	ldrb	r3, [r1, r2]
 800939e:	5483      	strb	r3, [r0, r2]
 80093a0:	3a01      	subs	r2, #1
 80093a2:	d2fb      	bcs.n	800939c <memmove+0x10>
 80093a4:	bd10      	pop	{r4, pc}
 80093a6:	5ccc      	ldrb	r4, [r1, r3]
 80093a8:	54c4      	strb	r4, [r0, r3]
 80093aa:	3301      	adds	r3, #1
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d1fa      	bne.n	80093a6 <memmove+0x1a>
 80093b0:	e7f8      	b.n	80093a4 <memmove+0x18>
	...

080093b4 <_fstat_r>:
 80093b4:	2300      	movs	r3, #0
 80093b6:	b570      	push	{r4, r5, r6, lr}
 80093b8:	4d06      	ldr	r5, [pc, #24]	; (80093d4 <_fstat_r+0x20>)
 80093ba:	0004      	movs	r4, r0
 80093bc:	0008      	movs	r0, r1
 80093be:	0011      	movs	r1, r2
 80093c0:	602b      	str	r3, [r5, #0]
 80093c2:	f7f7 fa38 	bl	8000836 <_fstat>
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	d103      	bne.n	80093d2 <_fstat_r+0x1e>
 80093ca:	682b      	ldr	r3, [r5, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d000      	beq.n	80093d2 <_fstat_r+0x1e>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	2000598c 	.word	0x2000598c

080093d8 <_isatty_r>:
 80093d8:	2300      	movs	r3, #0
 80093da:	b570      	push	{r4, r5, r6, lr}
 80093dc:	4d06      	ldr	r5, [pc, #24]	; (80093f8 <_isatty_r+0x20>)
 80093de:	0004      	movs	r4, r0
 80093e0:	0008      	movs	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7f7 fa35 	bl	8000852 <_isatty>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d103      	bne.n	80093f4 <_isatty_r+0x1c>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d000      	beq.n	80093f4 <_isatty_r+0x1c>
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	bd70      	pop	{r4, r5, r6, pc}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	2000598c 	.word	0x2000598c

080093fc <_sbrk_r>:
 80093fc:	2300      	movs	r3, #0
 80093fe:	b570      	push	{r4, r5, r6, lr}
 8009400:	4d06      	ldr	r5, [pc, #24]	; (800941c <_sbrk_r+0x20>)
 8009402:	0004      	movs	r4, r0
 8009404:	0008      	movs	r0, r1
 8009406:	602b      	str	r3, [r5, #0]
 8009408:	f7f7 fa38 	bl	800087c <_sbrk>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d103      	bne.n	8009418 <_sbrk_r+0x1c>
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d000      	beq.n	8009418 <_sbrk_r+0x1c>
 8009416:	6023      	str	r3, [r4, #0]
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	46c0      	nop			; (mov r8, r8)
 800941c:	2000598c 	.word	0x2000598c

08009420 <memchr>:
 8009420:	b2c9      	uxtb	r1, r1
 8009422:	1882      	adds	r2, r0, r2
 8009424:	4290      	cmp	r0, r2
 8009426:	d101      	bne.n	800942c <memchr+0xc>
 8009428:	2000      	movs	r0, #0
 800942a:	4770      	bx	lr
 800942c:	7803      	ldrb	r3, [r0, #0]
 800942e:	428b      	cmp	r3, r1
 8009430:	d0fb      	beq.n	800942a <memchr+0xa>
 8009432:	3001      	adds	r0, #1
 8009434:	e7f6      	b.n	8009424 <memchr+0x4>

08009436 <_realloc_r>:
 8009436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009438:	0007      	movs	r7, r0
 800943a:	000e      	movs	r6, r1
 800943c:	0014      	movs	r4, r2
 800943e:	2900      	cmp	r1, #0
 8009440:	d105      	bne.n	800944e <_realloc_r+0x18>
 8009442:	0011      	movs	r1, r2
 8009444:	f7ff f9ce 	bl	80087e4 <_malloc_r>
 8009448:	0005      	movs	r5, r0
 800944a:	0028      	movs	r0, r5
 800944c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800944e:	2a00      	cmp	r2, #0
 8009450:	d103      	bne.n	800945a <_realloc_r+0x24>
 8009452:	f7ff f95b 	bl	800870c <_free_r>
 8009456:	0025      	movs	r5, r4
 8009458:	e7f7      	b.n	800944a <_realloc_r+0x14>
 800945a:	f000 f81b 	bl	8009494 <_malloc_usable_size_r>
 800945e:	9001      	str	r0, [sp, #4]
 8009460:	4284      	cmp	r4, r0
 8009462:	d803      	bhi.n	800946c <_realloc_r+0x36>
 8009464:	0035      	movs	r5, r6
 8009466:	0843      	lsrs	r3, r0, #1
 8009468:	42a3      	cmp	r3, r4
 800946a:	d3ee      	bcc.n	800944a <_realloc_r+0x14>
 800946c:	0021      	movs	r1, r4
 800946e:	0038      	movs	r0, r7
 8009470:	f7ff f9b8 	bl	80087e4 <_malloc_r>
 8009474:	1e05      	subs	r5, r0, #0
 8009476:	d0e8      	beq.n	800944a <_realloc_r+0x14>
 8009478:	9b01      	ldr	r3, [sp, #4]
 800947a:	0022      	movs	r2, r4
 800947c:	429c      	cmp	r4, r3
 800947e:	d900      	bls.n	8009482 <_realloc_r+0x4c>
 8009480:	001a      	movs	r2, r3
 8009482:	0031      	movs	r1, r6
 8009484:	0028      	movs	r0, r5
 8009486:	f7ff f938 	bl	80086fa <memcpy>
 800948a:	0031      	movs	r1, r6
 800948c:	0038      	movs	r0, r7
 800948e:	f7ff f93d 	bl	800870c <_free_r>
 8009492:	e7da      	b.n	800944a <_realloc_r+0x14>

08009494 <_malloc_usable_size_r>:
 8009494:	1f0b      	subs	r3, r1, #4
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	1f18      	subs	r0, r3, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	da01      	bge.n	80094a2 <_malloc_usable_size_r+0xe>
 800949e:	580b      	ldr	r3, [r1, r0]
 80094a0:	18c0      	adds	r0, r0, r3
 80094a2:	4770      	bx	lr

080094a4 <_init>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094aa:	bc08      	pop	{r3}
 80094ac:	469e      	mov	lr, r3
 80094ae:	4770      	bx	lr

080094b0 <_fini>:
 80094b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b2:	46c0      	nop			; (mov r8, r8)
 80094b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b6:	bc08      	pop	{r3}
 80094b8:	469e      	mov	lr, r3
 80094ba:	4770      	bx	lr
