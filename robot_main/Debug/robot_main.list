
robot_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b44  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  08010c08  08010c08  00020c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011584  08011584  000301f0  2**0
                  CONTENTS
  4 .ARM          00000000  08011584  08011584  000301f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011584  08011584  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011584  08011584  00021584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011588  08011588  00021588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801158c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a68  200001f0  0801177c  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005c58  0801177c  00035c58  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af52  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ba8  00000000  00000000  0004b1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  0004fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001209  00000000  00000000  000514c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b306  00000000  00000000  000526d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020064  00000000  00000000  0006d9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098f9f  00000000  00000000  0008da3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068ec  00000000  00000000  001269dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0012d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010bec 	.word	0x08010bec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	08010bec 	.word	0x08010bec

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fe9d 	bl	8002190 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fded 	bl	8002040 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe8f 	bl	8002190 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe85 	bl	8002190 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe15 	bl	80020c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fe0b 	bl	80020c4 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fbc9 	bl	8000c5c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fb55 	bl	8000b84 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbbb 	bl	8000c5c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fbb1 	bl	8000c5c <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb61 	bl	8000bd0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fb57 	bl	8000bd0 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_d2uiz>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2200      	movs	r2, #0
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <__aeabi_d2uiz+0x38>)
 8000536:	0004      	movs	r4, r0
 8000538:	000d      	movs	r5, r1
 800053a:	f7ff ffb5 	bl	80004a8 <__aeabi_dcmpge>
 800053e:	2800      	cmp	r0, #0
 8000540:	d104      	bne.n	800054c <__aeabi_d2uiz+0x1c>
 8000542:	0020      	movs	r0, r4
 8000544:	0029      	movs	r1, r5
 8000546:	f002 fce9 	bl	8002f1c <__aeabi_d2iz>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <__aeabi_d2uiz+0x38>)
 800054e:	2200      	movs	r2, #0
 8000550:	0020      	movs	r0, r4
 8000552:	0029      	movs	r1, r5
 8000554:	f002 f942 	bl	80027dc <__aeabi_dsub>
 8000558:	f002 fce0 	bl	8002f1c <__aeabi_d2iz>
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	061b      	lsls	r3, r3, #24
 8000560:	469c      	mov	ip, r3
 8000562:	4460      	add	r0, ip
 8000564:	e7f1      	b.n	800054a <__aeabi_d2uiz+0x1a>
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	41e00000 	.word	0x41e00000

0800056c <__aeabi_d2lz>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	0005      	movs	r5, r0
 8000570:	000c      	movs	r4, r1
 8000572:	2200      	movs	r2, #0
 8000574:	2300      	movs	r3, #0
 8000576:	0028      	movs	r0, r5
 8000578:	0021      	movs	r1, r4
 800057a:	f7ff ff77 	bl	800046c <__aeabi_dcmplt>
 800057e:	2800      	cmp	r0, #0
 8000580:	d108      	bne.n	8000594 <__aeabi_d2lz+0x28>
 8000582:	0028      	movs	r0, r5
 8000584:	0021      	movs	r1, r4
 8000586:	f000 f80f 	bl	80005a8 <__aeabi_d2ulz>
 800058a:	0002      	movs	r2, r0
 800058c:	000b      	movs	r3, r1
 800058e:	0010      	movs	r0, r2
 8000590:	0019      	movs	r1, r3
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	061b      	lsls	r3, r3, #24
 8000598:	18e1      	adds	r1, r4, r3
 800059a:	0028      	movs	r0, r5
 800059c:	f000 f804 	bl	80005a8 <__aeabi_d2ulz>
 80005a0:	2300      	movs	r3, #0
 80005a2:	4242      	negs	r2, r0
 80005a4:	418b      	sbcs	r3, r1
 80005a6:	e7f2      	b.n	800058e <__aeabi_d2lz+0x22>

080005a8 <__aeabi_d2ulz>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	2200      	movs	r2, #0
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <__aeabi_d2ulz+0x34>)
 80005ae:	000d      	movs	r5, r1
 80005b0:	0004      	movs	r4, r0
 80005b2:	f001 fe51 	bl	8002258 <__aeabi_dmul>
 80005b6:	f7ff ffbb 	bl	8000530 <__aeabi_d2uiz>
 80005ba:	0006      	movs	r6, r0
 80005bc:	f002 fd14 	bl	8002fe8 <__aeabi_ui2d>
 80005c0:	2200      	movs	r2, #0
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <__aeabi_d2ulz+0x38>)
 80005c4:	f001 fe48 	bl	8002258 <__aeabi_dmul>
 80005c8:	0002      	movs	r2, r0
 80005ca:	000b      	movs	r3, r1
 80005cc:	0020      	movs	r0, r4
 80005ce:	0029      	movs	r1, r5
 80005d0:	f002 f904 	bl	80027dc <__aeabi_dsub>
 80005d4:	f7ff ffac 	bl	8000530 <__aeabi_d2uiz>
 80005d8:	0031      	movs	r1, r6
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	3df00000 	.word	0x3df00000
 80005e0:	41f00000 	.word	0x41f00000

080005e4 <__aeabi_l2d>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	0006      	movs	r6, r0
 80005e8:	0008      	movs	r0, r1
 80005ea:	f002 fccd 	bl	8002f88 <__aeabi_i2d>
 80005ee:	2200      	movs	r2, #0
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <__aeabi_l2d+0x28>)
 80005f2:	f001 fe31 	bl	8002258 <__aeabi_dmul>
 80005f6:	000d      	movs	r5, r1
 80005f8:	0004      	movs	r4, r0
 80005fa:	0030      	movs	r0, r6
 80005fc:	f002 fcf4 	bl	8002fe8 <__aeabi_ui2d>
 8000600:	002b      	movs	r3, r5
 8000602:	0022      	movs	r2, r4
 8000604:	f000 fece 	bl	80013a4 <__aeabi_dadd>
 8000608:	bd70      	pop	{r4, r5, r6, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	41f00000 	.word	0x41f00000

08000610 <__aeabi_fadd>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	4647      	mov	r7, r8
 8000614:	46ce      	mov	lr, r9
 8000616:	024a      	lsls	r2, r1, #9
 8000618:	0243      	lsls	r3, r0, #9
 800061a:	0045      	lsls	r5, r0, #1
 800061c:	0fc4      	lsrs	r4, r0, #31
 800061e:	0a50      	lsrs	r0, r2, #9
 8000620:	4680      	mov	r8, r0
 8000622:	0048      	lsls	r0, r1, #1
 8000624:	0a5b      	lsrs	r3, r3, #9
 8000626:	0e00      	lsrs	r0, r0, #24
 8000628:	0992      	lsrs	r2, r2, #6
 800062a:	4694      	mov	ip, r2
 800062c:	b580      	push	{r7, lr}
 800062e:	001e      	movs	r6, r3
 8000630:	4681      	mov	r9, r0
 8000632:	0002      	movs	r2, r0
 8000634:	0e2d      	lsrs	r5, r5, #24
 8000636:	00df      	lsls	r7, r3, #3
 8000638:	0fc9      	lsrs	r1, r1, #31
 800063a:	428c      	cmp	r4, r1
 800063c:	d024      	beq.n	8000688 <__aeabi_fadd+0x78>
 800063e:	1a28      	subs	r0, r5, r0
 8000640:	2800      	cmp	r0, #0
 8000642:	dd0e      	ble.n	8000662 <__aeabi_fadd+0x52>
 8000644:	2a00      	cmp	r2, #0
 8000646:	d13e      	bne.n	80006c6 <__aeabi_fadd+0xb6>
 8000648:	4662      	mov	r2, ip
 800064a:	2a00      	cmp	r2, #0
 800064c:	d100      	bne.n	8000650 <__aeabi_fadd+0x40>
 800064e:	e0fd      	b.n	800084c <__aeabi_fadd+0x23c>
 8000650:	1e42      	subs	r2, r0, #1
 8000652:	2801      	cmp	r0, #1
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x48>
 8000656:	e137      	b.n	80008c8 <__aeabi_fadd+0x2b8>
 8000658:	28ff      	cmp	r0, #255	; 0xff
 800065a:	d100      	bne.n	800065e <__aeabi_fadd+0x4e>
 800065c:	e0a9      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 800065e:	0010      	movs	r0, r2
 8000660:	e039      	b.n	80006d6 <__aeabi_fadd+0xc6>
 8000662:	2800      	cmp	r0, #0
 8000664:	d063      	beq.n	800072e <__aeabi_fadd+0x11e>
 8000666:	464b      	mov	r3, r9
 8000668:	1b52      	subs	r2, r2, r5
 800066a:	2d00      	cmp	r5, #0
 800066c:	d000      	beq.n	8000670 <__aeabi_fadd+0x60>
 800066e:	e0e0      	b.n	8000832 <__aeabi_fadd+0x222>
 8000670:	2f00      	cmp	r7, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x66>
 8000674:	e0ce      	b.n	8000814 <__aeabi_fadd+0x204>
 8000676:	1e53      	subs	r3, r2, #1
 8000678:	2a01      	cmp	r2, #1
 800067a:	d100      	bne.n	800067e <__aeabi_fadd+0x6e>
 800067c:	e155      	b.n	800092a <__aeabi_fadd+0x31a>
 800067e:	2aff      	cmp	r2, #255	; 0xff
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x74>
 8000682:	e094      	b.n	80007ae <__aeabi_fadd+0x19e>
 8000684:	001a      	movs	r2, r3
 8000686:	e0d9      	b.n	800083c <__aeabi_fadd+0x22c>
 8000688:	1a2a      	subs	r2, r5, r0
 800068a:	2a00      	cmp	r2, #0
 800068c:	dc00      	bgt.n	8000690 <__aeabi_fadd+0x80>
 800068e:	e099      	b.n	80007c4 <__aeabi_fadd+0x1b4>
 8000690:	2800      	cmp	r0, #0
 8000692:	d062      	beq.n	800075a <__aeabi_fadd+0x14a>
 8000694:	2dff      	cmp	r5, #255	; 0xff
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x8a>
 8000698:	e08b      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	4661      	mov	r1, ip
 800069e:	04db      	lsls	r3, r3, #19
 80006a0:	4319      	orrs	r1, r3
 80006a2:	468c      	mov	ip, r1
 80006a4:	2a1b      	cmp	r2, #27
 80006a6:	dc00      	bgt.n	80006aa <__aeabi_fadd+0x9a>
 80006a8:	e0d2      	b.n	8000850 <__aeabi_fadd+0x240>
 80006aa:	2301      	movs	r3, #1
 80006ac:	19db      	adds	r3, r3, r7
 80006ae:	015a      	lsls	r2, r3, #5
 80006b0:	d56a      	bpl.n	8000788 <__aeabi_fadd+0x178>
 80006b2:	3501      	adds	r5, #1
 80006b4:	2dff      	cmp	r5, #255	; 0xff
 80006b6:	d05b      	beq.n	8000770 <__aeabi_fadd+0x160>
 80006b8:	2201      	movs	r2, #1
 80006ba:	49a3      	ldr	r1, [pc, #652]	; (8000948 <__aeabi_fadd+0x338>)
 80006bc:	401a      	ands	r2, r3
 80006be:	085b      	lsrs	r3, r3, #1
 80006c0:	400b      	ands	r3, r1
 80006c2:	4313      	orrs	r3, r2
 80006c4:	e01c      	b.n	8000700 <__aeabi_fadd+0xf0>
 80006c6:	2dff      	cmp	r5, #255	; 0xff
 80006c8:	d100      	bne.n	80006cc <__aeabi_fadd+0xbc>
 80006ca:	e072      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	4662      	mov	r2, ip
 80006d0:	04db      	lsls	r3, r3, #19
 80006d2:	431a      	orrs	r2, r3
 80006d4:	4694      	mov	ip, r2
 80006d6:	281b      	cmp	r0, #27
 80006d8:	dc00      	bgt.n	80006dc <__aeabi_fadd+0xcc>
 80006da:	e090      	b.n	80007fe <__aeabi_fadd+0x1ee>
 80006dc:	2301      	movs	r3, #1
 80006de:	1afb      	subs	r3, r7, r3
 80006e0:	015a      	lsls	r2, r3, #5
 80006e2:	d551      	bpl.n	8000788 <__aeabi_fadd+0x178>
 80006e4:	019b      	lsls	r3, r3, #6
 80006e6:	099e      	lsrs	r6, r3, #6
 80006e8:	0030      	movs	r0, r6
 80006ea:	f002 fd71 	bl	80031d0 <__clzsi2>
 80006ee:	0033      	movs	r3, r6
 80006f0:	3805      	subs	r0, #5
 80006f2:	4083      	lsls	r3, r0
 80006f4:	4285      	cmp	r5, r0
 80006f6:	dc00      	bgt.n	80006fa <__aeabi_fadd+0xea>
 80006f8:	e075      	b.n	80007e6 <__aeabi_fadd+0x1d6>
 80006fa:	4a94      	ldr	r2, [pc, #592]	; (800094c <__aeabi_fadd+0x33c>)
 80006fc:	1a2d      	subs	r5, r5, r0
 80006fe:	4013      	ands	r3, r2
 8000700:	075a      	lsls	r2, r3, #29
 8000702:	d004      	beq.n	800070e <__aeabi_fadd+0xfe>
 8000704:	220f      	movs	r2, #15
 8000706:	401a      	ands	r2, r3
 8000708:	2a04      	cmp	r2, #4
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xfe>
 800070c:	3304      	adds	r3, #4
 800070e:	015a      	lsls	r2, r3, #5
 8000710:	d53c      	bpl.n	800078c <__aeabi_fadd+0x17c>
 8000712:	1c68      	adds	r0, r5, #1
 8000714:	2dfe      	cmp	r5, #254	; 0xfe
 8000716:	d02b      	beq.n	8000770 <__aeabi_fadd+0x160>
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	0a5e      	lsrs	r6, r3, #9
 800071c:	b2c0      	uxtb	r0, r0
 800071e:	05c0      	lsls	r0, r0, #23
 8000720:	4330      	orrs	r0, r6
 8000722:	07e4      	lsls	r4, r4, #31
 8000724:	4320      	orrs	r0, r4
 8000726:	bcc0      	pop	{r6, r7}
 8000728:	46b9      	mov	r9, r7
 800072a:	46b0      	mov	r8, r6
 800072c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800072e:	20fe      	movs	r0, #254	; 0xfe
 8000730:	1c6a      	adds	r2, r5, #1
 8000732:	4210      	tst	r0, r2
 8000734:	d172      	bne.n	800081c <__aeabi_fadd+0x20c>
 8000736:	2d00      	cmp	r5, #0
 8000738:	d000      	beq.n	800073c <__aeabi_fadd+0x12c>
 800073a:	e0ae      	b.n	800089a <__aeabi_fadd+0x28a>
 800073c:	2f00      	cmp	r7, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x132>
 8000740:	e0ec      	b.n	800091c <__aeabi_fadd+0x30c>
 8000742:	4663      	mov	r3, ip
 8000744:	2000      	movs	r0, #0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0e9      	beq.n	800071e <__aeabi_fadd+0x10e>
 800074a:	1afb      	subs	r3, r7, r3
 800074c:	015a      	lsls	r2, r3, #5
 800074e:	d400      	bmi.n	8000752 <__aeabi_fadd+0x142>
 8000750:	e0f3      	b.n	800093a <__aeabi_fadd+0x32a>
 8000752:	4663      	mov	r3, ip
 8000754:	000c      	movs	r4, r1
 8000756:	1bdb      	subs	r3, r3, r7
 8000758:	e7d2      	b.n	8000700 <__aeabi_fadd+0xf0>
 800075a:	4661      	mov	r1, ip
 800075c:	2900      	cmp	r1, #0
 800075e:	d05b      	beq.n	8000818 <__aeabi_fadd+0x208>
 8000760:	1e51      	subs	r1, r2, #1
 8000762:	2a01      	cmp	r2, #1
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x158>
 8000766:	e0a7      	b.n	80008b8 <__aeabi_fadd+0x2a8>
 8000768:	2aff      	cmp	r2, #255	; 0xff
 800076a:	d022      	beq.n	80007b2 <__aeabi_fadd+0x1a2>
 800076c:	000a      	movs	r2, r1
 800076e:	e799      	b.n	80006a4 <__aeabi_fadd+0x94>
 8000770:	20ff      	movs	r0, #255	; 0xff
 8000772:	2600      	movs	r6, #0
 8000774:	e7d3      	b.n	800071e <__aeabi_fadd+0x10e>
 8000776:	21fe      	movs	r1, #254	; 0xfe
 8000778:	1c6a      	adds	r2, r5, #1
 800077a:	4211      	tst	r1, r2
 800077c:	d073      	beq.n	8000866 <__aeabi_fadd+0x256>
 800077e:	2aff      	cmp	r2, #255	; 0xff
 8000780:	d0f6      	beq.n	8000770 <__aeabi_fadd+0x160>
 8000782:	0015      	movs	r5, r2
 8000784:	4467      	add	r7, ip
 8000786:	087b      	lsrs	r3, r7, #1
 8000788:	075a      	lsls	r2, r3, #29
 800078a:	d1bb      	bne.n	8000704 <__aeabi_fadd+0xf4>
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	2dff      	cmp	r5, #255	; 0xff
 8000790:	d00f      	beq.n	80007b2 <__aeabi_fadd+0x1a2>
 8000792:	025b      	lsls	r3, r3, #9
 8000794:	0a5e      	lsrs	r6, r3, #9
 8000796:	b2e8      	uxtb	r0, r5
 8000798:	e7c1      	b.n	800071e <__aeabi_fadd+0x10e>
 800079a:	4662      	mov	r2, ip
 800079c:	2a00      	cmp	r2, #0
 800079e:	d008      	beq.n	80007b2 <__aeabi_fadd+0x1a2>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	03d2      	lsls	r2, r2, #15
 80007a4:	4213      	tst	r3, r2
 80007a6:	d004      	beq.n	80007b2 <__aeabi_fadd+0x1a2>
 80007a8:	4640      	mov	r0, r8
 80007aa:	4210      	tst	r0, r2
 80007ac:	d101      	bne.n	80007b2 <__aeabi_fadd+0x1a2>
 80007ae:	000c      	movs	r4, r1
 80007b0:	4643      	mov	r3, r8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0dc      	beq.n	8000770 <__aeabi_fadd+0x160>
 80007b6:	2680      	movs	r6, #128	; 0x80
 80007b8:	03f6      	lsls	r6, r6, #15
 80007ba:	431e      	orrs	r6, r3
 80007bc:	0276      	lsls	r6, r6, #9
 80007be:	20ff      	movs	r0, #255	; 0xff
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	e7ac      	b.n	800071e <__aeabi_fadd+0x10e>
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	d0d6      	beq.n	8000776 <__aeabi_fadd+0x166>
 80007c8:	1b42      	subs	r2, r0, r5
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d05c      	beq.n	8000888 <__aeabi_fadd+0x278>
 80007ce:	28ff      	cmp	r0, #255	; 0xff
 80007d0:	d0ee      	beq.n	80007b0 <__aeabi_fadd+0x1a0>
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	04db      	lsls	r3, r3, #19
 80007d6:	431f      	orrs	r7, r3
 80007d8:	2a1b      	cmp	r2, #27
 80007da:	dc00      	bgt.n	80007de <__aeabi_fadd+0x1ce>
 80007dc:	e082      	b.n	80008e4 <__aeabi_fadd+0x2d4>
 80007de:	2301      	movs	r3, #1
 80007e0:	464d      	mov	r5, r9
 80007e2:	4463      	add	r3, ip
 80007e4:	e763      	b.n	80006ae <__aeabi_fadd+0x9e>
 80007e6:	2220      	movs	r2, #32
 80007e8:	1b40      	subs	r0, r0, r5
 80007ea:	3001      	adds	r0, #1
 80007ec:	1a12      	subs	r2, r2, r0
 80007ee:	0019      	movs	r1, r3
 80007f0:	4093      	lsls	r3, r2
 80007f2:	40c1      	lsrs	r1, r0
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	4193      	sbcs	r3, r2
 80007f8:	2500      	movs	r5, #0
 80007fa:	430b      	orrs	r3, r1
 80007fc:	e780      	b.n	8000700 <__aeabi_fadd+0xf0>
 80007fe:	2320      	movs	r3, #32
 8000800:	4661      	mov	r1, ip
 8000802:	1a1b      	subs	r3, r3, r0
 8000804:	4099      	lsls	r1, r3
 8000806:	4662      	mov	r2, ip
 8000808:	000b      	movs	r3, r1
 800080a:	40c2      	lsrs	r2, r0
 800080c:	1e59      	subs	r1, r3, #1
 800080e:	418b      	sbcs	r3, r1
 8000810:	4313      	orrs	r3, r2
 8000812:	e764      	b.n	80006de <__aeabi_fadd+0xce>
 8000814:	000c      	movs	r4, r1
 8000816:	4643      	mov	r3, r8
 8000818:	0015      	movs	r5, r2
 800081a:	e7b8      	b.n	800078e <__aeabi_fadd+0x17e>
 800081c:	4663      	mov	r3, ip
 800081e:	1afe      	subs	r6, r7, r3
 8000820:	0173      	lsls	r3, r6, #5
 8000822:	d445      	bmi.n	80008b0 <__aeabi_fadd+0x2a0>
 8000824:	2e00      	cmp	r6, #0
 8000826:	d000      	beq.n	800082a <__aeabi_fadd+0x21a>
 8000828:	e75e      	b.n	80006e8 <__aeabi_fadd+0xd8>
 800082a:	2400      	movs	r4, #0
 800082c:	2000      	movs	r0, #0
 800082e:	2600      	movs	r6, #0
 8000830:	e775      	b.n	800071e <__aeabi_fadd+0x10e>
 8000832:	2bff      	cmp	r3, #255	; 0xff
 8000834:	d0bb      	beq.n	80007ae <__aeabi_fadd+0x19e>
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	04db      	lsls	r3, r3, #19
 800083a:	431f      	orrs	r7, r3
 800083c:	2a1b      	cmp	r2, #27
 800083e:	dd47      	ble.n	80008d0 <__aeabi_fadd+0x2c0>
 8000840:	2301      	movs	r3, #1
 8000842:	4662      	mov	r2, ip
 8000844:	000c      	movs	r4, r1
 8000846:	464d      	mov	r5, r9
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	e749      	b.n	80006e0 <__aeabi_fadd+0xd0>
 800084c:	0005      	movs	r5, r0
 800084e:	e79e      	b.n	800078e <__aeabi_fadd+0x17e>
 8000850:	4661      	mov	r1, ip
 8000852:	2320      	movs	r3, #32
 8000854:	40d1      	lsrs	r1, r2
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	4662      	mov	r2, ip
 800085a:	409a      	lsls	r2, r3
 800085c:	0013      	movs	r3, r2
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	4193      	sbcs	r3, r2
 8000862:	430b      	orrs	r3, r1
 8000864:	e722      	b.n	80006ac <__aeabi_fadd+0x9c>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d146      	bne.n	80008f8 <__aeabi_fadd+0x2e8>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d062      	beq.n	8000934 <__aeabi_fadd+0x324>
 800086e:	4663      	mov	r3, ip
 8000870:	2000      	movs	r0, #0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x268>
 8000876:	e752      	b.n	800071e <__aeabi_fadd+0x10e>
 8000878:	003b      	movs	r3, r7
 800087a:	4463      	add	r3, ip
 800087c:	015a      	lsls	r2, r3, #5
 800087e:	d583      	bpl.n	8000788 <__aeabi_fadd+0x178>
 8000880:	4a32      	ldr	r2, [pc, #200]	; (800094c <__aeabi_fadd+0x33c>)
 8000882:	3501      	adds	r5, #1
 8000884:	4013      	ands	r3, r2
 8000886:	e77f      	b.n	8000788 <__aeabi_fadd+0x178>
 8000888:	2f00      	cmp	r7, #0
 800088a:	d0c4      	beq.n	8000816 <__aeabi_fadd+0x206>
 800088c:	1e53      	subs	r3, r2, #1
 800088e:	2a01      	cmp	r2, #1
 8000890:	d012      	beq.n	80008b8 <__aeabi_fadd+0x2a8>
 8000892:	2aff      	cmp	r2, #255	; 0xff
 8000894:	d08c      	beq.n	80007b0 <__aeabi_fadd+0x1a0>
 8000896:	001a      	movs	r2, r3
 8000898:	e79e      	b.n	80007d8 <__aeabi_fadd+0x1c8>
 800089a:	2f00      	cmp	r7, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fadd+0x290>
 800089e:	e77c      	b.n	800079a <__aeabi_fadd+0x18a>
 80008a0:	4663      	mov	r3, ip
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d183      	bne.n	80007ae <__aeabi_fadd+0x19e>
 80008a6:	2680      	movs	r6, #128	; 0x80
 80008a8:	2400      	movs	r4, #0
 80008aa:	20ff      	movs	r0, #255	; 0xff
 80008ac:	03f6      	lsls	r6, r6, #15
 80008ae:	e736      	b.n	800071e <__aeabi_fadd+0x10e>
 80008b0:	4663      	mov	r3, ip
 80008b2:	000c      	movs	r4, r1
 80008b4:	1bde      	subs	r6, r3, r7
 80008b6:	e717      	b.n	80006e8 <__aeabi_fadd+0xd8>
 80008b8:	003b      	movs	r3, r7
 80008ba:	4463      	add	r3, ip
 80008bc:	2501      	movs	r5, #1
 80008be:	015a      	lsls	r2, r3, #5
 80008c0:	d400      	bmi.n	80008c4 <__aeabi_fadd+0x2b4>
 80008c2:	e761      	b.n	8000788 <__aeabi_fadd+0x178>
 80008c4:	2502      	movs	r5, #2
 80008c6:	e6f7      	b.n	80006b8 <__aeabi_fadd+0xa8>
 80008c8:	4663      	mov	r3, ip
 80008ca:	2501      	movs	r5, #1
 80008cc:	1afb      	subs	r3, r7, r3
 80008ce:	e707      	b.n	80006e0 <__aeabi_fadd+0xd0>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0038      	movs	r0, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d0      	lsrs	r0, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	4303      	orrs	r3, r0
 80008e2:	e7ae      	b.n	8000842 <__aeabi_fadd+0x232>
 80008e4:	2320      	movs	r3, #32
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	0039      	movs	r1, r7
 80008ea:	409f      	lsls	r7, r3
 80008ec:	003b      	movs	r3, r7
 80008ee:	40d1      	lsrs	r1, r2
 80008f0:	1e5a      	subs	r2, r3, #1
 80008f2:	4193      	sbcs	r3, r2
 80008f4:	430b      	orrs	r3, r1
 80008f6:	e773      	b.n	80007e0 <__aeabi_fadd+0x1d0>
 80008f8:	2f00      	cmp	r7, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x2ee>
 80008fc:	e758      	b.n	80007b0 <__aeabi_fadd+0x1a0>
 80008fe:	4662      	mov	r2, ip
 8000900:	2a00      	cmp	r2, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x2f6>
 8000904:	e755      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	03d2      	lsls	r2, r2, #15
 800090a:	4213      	tst	r3, r2
 800090c:	d100      	bne.n	8000910 <__aeabi_fadd+0x300>
 800090e:	e750      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 8000910:	4641      	mov	r1, r8
 8000912:	4211      	tst	r1, r2
 8000914:	d000      	beq.n	8000918 <__aeabi_fadd+0x308>
 8000916:	e74c      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 8000918:	4643      	mov	r3, r8
 800091a:	e74a      	b.n	80007b2 <__aeabi_fadd+0x1a2>
 800091c:	4663      	mov	r3, ip
 800091e:	2b00      	cmp	r3, #0
 8000920:	d083      	beq.n	800082a <__aeabi_fadd+0x21a>
 8000922:	000c      	movs	r4, r1
 8000924:	4646      	mov	r6, r8
 8000926:	2000      	movs	r0, #0
 8000928:	e6f9      	b.n	800071e <__aeabi_fadd+0x10e>
 800092a:	4663      	mov	r3, ip
 800092c:	000c      	movs	r4, r1
 800092e:	1bdb      	subs	r3, r3, r7
 8000930:	3501      	adds	r5, #1
 8000932:	e6d5      	b.n	80006e0 <__aeabi_fadd+0xd0>
 8000934:	4646      	mov	r6, r8
 8000936:	2000      	movs	r0, #0
 8000938:	e6f1      	b.n	800071e <__aeabi_fadd+0x10e>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d000      	beq.n	8000940 <__aeabi_fadd+0x330>
 800093e:	e723      	b.n	8000788 <__aeabi_fadd+0x178>
 8000940:	2400      	movs	r4, #0
 8000942:	2600      	movs	r6, #0
 8000944:	e6eb      	b.n	800071e <__aeabi_fadd+0x10e>
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	7dffffff 	.word	0x7dffffff
 800094c:	fbffffff 	.word	0xfbffffff

08000950 <__aeabi_fdiv>:
 8000950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000952:	464f      	mov	r7, r9
 8000954:	4646      	mov	r6, r8
 8000956:	46d6      	mov	lr, sl
 8000958:	0245      	lsls	r5, r0, #9
 800095a:	b5c0      	push	{r6, r7, lr}
 800095c:	0047      	lsls	r7, r0, #1
 800095e:	1c0c      	adds	r4, r1, #0
 8000960:	0a6d      	lsrs	r5, r5, #9
 8000962:	0e3f      	lsrs	r7, r7, #24
 8000964:	0fc6      	lsrs	r6, r0, #31
 8000966:	2f00      	cmp	r7, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fdiv+0x1c>
 800096a:	e06f      	b.n	8000a4c <__aeabi_fdiv+0xfc>
 800096c:	2fff      	cmp	r7, #255	; 0xff
 800096e:	d100      	bne.n	8000972 <__aeabi_fdiv+0x22>
 8000970:	e074      	b.n	8000a5c <__aeabi_fdiv+0x10c>
 8000972:	2300      	movs	r3, #0
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	4699      	mov	r9, r3
 8000978:	469a      	mov	sl, r3
 800097a:	00ed      	lsls	r5, r5, #3
 800097c:	04d2      	lsls	r2, r2, #19
 800097e:	4315      	orrs	r5, r2
 8000980:	3f7f      	subs	r7, #127	; 0x7f
 8000982:	0263      	lsls	r3, r4, #9
 8000984:	0a5b      	lsrs	r3, r3, #9
 8000986:	4698      	mov	r8, r3
 8000988:	0063      	lsls	r3, r4, #1
 800098a:	0e1b      	lsrs	r3, r3, #24
 800098c:	0fe4      	lsrs	r4, r4, #31
 800098e:	2b00      	cmp	r3, #0
 8000990:	d04d      	beq.n	8000a2e <__aeabi_fdiv+0xde>
 8000992:	2bff      	cmp	r3, #255	; 0xff
 8000994:	d045      	beq.n	8000a22 <__aeabi_fdiv+0xd2>
 8000996:	4642      	mov	r2, r8
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	00d2      	lsls	r2, r2, #3
 800099c:	04c9      	lsls	r1, r1, #19
 800099e:	4311      	orrs	r1, r2
 80009a0:	4688      	mov	r8, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	3b7f      	subs	r3, #127	; 0x7f
 80009a6:	0031      	movs	r1, r6
 80009a8:	1aff      	subs	r7, r7, r3
 80009aa:	464b      	mov	r3, r9
 80009ac:	4061      	eors	r1, r4
 80009ae:	b2c9      	uxtb	r1, r1
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d900      	bls.n	80009b6 <__aeabi_fdiv+0x66>
 80009b4:	e0b8      	b.n	8000b28 <__aeabi_fdiv+0x1d8>
 80009b6:	4870      	ldr	r0, [pc, #448]	; (8000b78 <__aeabi_fdiv+0x228>)
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	58c3      	ldr	r3, [r0, r3]
 80009bc:	469f      	mov	pc, r3
 80009be:	2300      	movs	r3, #0
 80009c0:	4698      	mov	r8, r3
 80009c2:	0026      	movs	r6, r4
 80009c4:	4645      	mov	r5, r8
 80009c6:	4692      	mov	sl, r2
 80009c8:	4653      	mov	r3, sl
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fdiv+0x80>
 80009ce:	e08d      	b.n	8000aec <__aeabi_fdiv+0x19c>
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fdiv+0x86>
 80009d4:	e0a1      	b.n	8000b1a <__aeabi_fdiv+0x1ca>
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d018      	beq.n	8000a0c <__aeabi_fdiv+0xbc>
 80009da:	003b      	movs	r3, r7
 80009dc:	337f      	adds	r3, #127	; 0x7f
 80009de:	2b00      	cmp	r3, #0
 80009e0:	dd6d      	ble.n	8000abe <__aeabi_fdiv+0x16e>
 80009e2:	076a      	lsls	r2, r5, #29
 80009e4:	d004      	beq.n	80009f0 <__aeabi_fdiv+0xa0>
 80009e6:	220f      	movs	r2, #15
 80009e8:	402a      	ands	r2, r5
 80009ea:	2a04      	cmp	r2, #4
 80009ec:	d000      	beq.n	80009f0 <__aeabi_fdiv+0xa0>
 80009ee:	3504      	adds	r5, #4
 80009f0:	012a      	lsls	r2, r5, #4
 80009f2:	d503      	bpl.n	80009fc <__aeabi_fdiv+0xac>
 80009f4:	4b61      	ldr	r3, [pc, #388]	; (8000b7c <__aeabi_fdiv+0x22c>)
 80009f6:	401d      	ands	r5, r3
 80009f8:	003b      	movs	r3, r7
 80009fa:	3380      	adds	r3, #128	; 0x80
 80009fc:	2bfe      	cmp	r3, #254	; 0xfe
 80009fe:	dd00      	ble.n	8000a02 <__aeabi_fdiv+0xb2>
 8000a00:	e074      	b.n	8000aec <__aeabi_fdiv+0x19c>
 8000a02:	01aa      	lsls	r2, r5, #6
 8000a04:	0a52      	lsrs	r2, r2, #9
 8000a06:	b2d8      	uxtb	r0, r3
 8000a08:	e002      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	2200      	movs	r2, #0
 8000a10:	05c0      	lsls	r0, r0, #23
 8000a12:	07f6      	lsls	r6, r6, #31
 8000a14:	4310      	orrs	r0, r2
 8000a16:	4330      	orrs	r0, r6
 8000a18:	bce0      	pop	{r5, r6, r7}
 8000a1a:	46ba      	mov	sl, r7
 8000a1c:	46b1      	mov	r9, r6
 8000a1e:	46a8      	mov	r8, r5
 8000a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a22:	4643      	mov	r3, r8
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d13f      	bne.n	8000aa8 <__aeabi_fdiv+0x158>
 8000a28:	2202      	movs	r2, #2
 8000a2a:	3fff      	subs	r7, #255	; 0xff
 8000a2c:	e003      	b.n	8000a36 <__aeabi_fdiv+0xe6>
 8000a2e:	4643      	mov	r3, r8
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d12d      	bne.n	8000a90 <__aeabi_fdiv+0x140>
 8000a34:	2201      	movs	r2, #1
 8000a36:	0031      	movs	r1, r6
 8000a38:	464b      	mov	r3, r9
 8000a3a:	4061      	eors	r1, r4
 8000a3c:	b2c9      	uxtb	r1, r1
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d838      	bhi.n	8000ab6 <__aeabi_fdiv+0x166>
 8000a44:	484e      	ldr	r0, [pc, #312]	; (8000b80 <__aeabi_fdiv+0x230>)
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	58c3      	ldr	r3, [r0, r3]
 8000a4a:	469f      	mov	pc, r3
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	d113      	bne.n	8000a78 <__aeabi_fdiv+0x128>
 8000a50:	2304      	movs	r3, #4
 8000a52:	4699      	mov	r9, r3
 8000a54:	3b03      	subs	r3, #3
 8000a56:	2700      	movs	r7, #0
 8000a58:	469a      	mov	sl, r3
 8000a5a:	e792      	b.n	8000982 <__aeabi_fdiv+0x32>
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_fdiv+0x11c>
 8000a60:	2308      	movs	r3, #8
 8000a62:	4699      	mov	r9, r3
 8000a64:	3b06      	subs	r3, #6
 8000a66:	27ff      	movs	r7, #255	; 0xff
 8000a68:	469a      	mov	sl, r3
 8000a6a:	e78a      	b.n	8000982 <__aeabi_fdiv+0x32>
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	4699      	mov	r9, r3
 8000a70:	3b09      	subs	r3, #9
 8000a72:	27ff      	movs	r7, #255	; 0xff
 8000a74:	469a      	mov	sl, r3
 8000a76:	e784      	b.n	8000982 <__aeabi_fdiv+0x32>
 8000a78:	0028      	movs	r0, r5
 8000a7a:	f002 fba9 	bl	80031d0 <__clzsi2>
 8000a7e:	2776      	movs	r7, #118	; 0x76
 8000a80:	1f43      	subs	r3, r0, #5
 8000a82:	409d      	lsls	r5, r3
 8000a84:	2300      	movs	r3, #0
 8000a86:	427f      	negs	r7, r7
 8000a88:	4699      	mov	r9, r3
 8000a8a:	469a      	mov	sl, r3
 8000a8c:	1a3f      	subs	r7, r7, r0
 8000a8e:	e778      	b.n	8000982 <__aeabi_fdiv+0x32>
 8000a90:	4640      	mov	r0, r8
 8000a92:	f002 fb9d 	bl	80031d0 <__clzsi2>
 8000a96:	4642      	mov	r2, r8
 8000a98:	1f43      	subs	r3, r0, #5
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	2376      	movs	r3, #118	; 0x76
 8000a9e:	425b      	negs	r3, r3
 8000aa0:	4690      	mov	r8, r2
 8000aa2:	1a1b      	subs	r3, r3, r0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	e77e      	b.n	80009a6 <__aeabi_fdiv+0x56>
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	464a      	mov	r2, r9
 8000aac:	431a      	orrs	r2, r3
 8000aae:	4691      	mov	r9, r2
 8000ab0:	33fc      	adds	r3, #252	; 0xfc
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	e777      	b.n	80009a6 <__aeabi_fdiv+0x56>
 8000ab6:	000e      	movs	r6, r1
 8000ab8:	20ff      	movs	r0, #255	; 0xff
 8000aba:	2200      	movs	r2, #0
 8000abc:	e7a8      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000abe:	2201      	movs	r2, #1
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b1b      	cmp	r3, #27
 8000ac4:	dca2      	bgt.n	8000a0c <__aeabi_fdiv+0xbc>
 8000ac6:	379e      	adds	r7, #158	; 0x9e
 8000ac8:	002a      	movs	r2, r5
 8000aca:	40bd      	lsls	r5, r7
 8000acc:	40da      	lsrs	r2, r3
 8000ace:	1e6b      	subs	r3, r5, #1
 8000ad0:	419d      	sbcs	r5, r3
 8000ad2:	4315      	orrs	r5, r2
 8000ad4:	076a      	lsls	r2, r5, #29
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_fdiv+0x192>
 8000ad8:	220f      	movs	r2, #15
 8000ada:	402a      	ands	r2, r5
 8000adc:	2a04      	cmp	r2, #4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fdiv+0x192>
 8000ae0:	3504      	adds	r5, #4
 8000ae2:	016a      	lsls	r2, r5, #5
 8000ae4:	d544      	bpl.n	8000b70 <__aeabi_fdiv+0x220>
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	e791      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000aec:	20ff      	movs	r0, #255	; 0xff
 8000aee:	2200      	movs	r2, #0
 8000af0:	e78e      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	2600      	movs	r6, #0
 8000af6:	20ff      	movs	r0, #255	; 0xff
 8000af8:	03d2      	lsls	r2, r2, #15
 8000afa:	e789      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000afc:	2300      	movs	r3, #0
 8000afe:	4698      	mov	r8, r3
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	03d2      	lsls	r2, r2, #15
 8000b04:	4215      	tst	r5, r2
 8000b06:	d008      	beq.n	8000b1a <__aeabi_fdiv+0x1ca>
 8000b08:	4643      	mov	r3, r8
 8000b0a:	4213      	tst	r3, r2
 8000b0c:	d105      	bne.n	8000b1a <__aeabi_fdiv+0x1ca>
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	0252      	lsls	r2, r2, #9
 8000b12:	0026      	movs	r6, r4
 8000b14:	20ff      	movs	r0, #255	; 0xff
 8000b16:	0a52      	lsrs	r2, r2, #9
 8000b18:	e77a      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	03d2      	lsls	r2, r2, #15
 8000b1e:	432a      	orrs	r2, r5
 8000b20:	0252      	lsls	r2, r2, #9
 8000b22:	20ff      	movs	r0, #255	; 0xff
 8000b24:	0a52      	lsrs	r2, r2, #9
 8000b26:	e773      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000b28:	4642      	mov	r2, r8
 8000b2a:	016b      	lsls	r3, r5, #5
 8000b2c:	0155      	lsls	r5, r2, #5
 8000b2e:	42ab      	cmp	r3, r5
 8000b30:	d21a      	bcs.n	8000b68 <__aeabi_fdiv+0x218>
 8000b32:	201b      	movs	r0, #27
 8000b34:	2200      	movs	r2, #0
 8000b36:	3f01      	subs	r7, #1
 8000b38:	2601      	movs	r6, #1
 8000b3a:	001c      	movs	r4, r3
 8000b3c:	0052      	lsls	r2, r2, #1
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	db01      	blt.n	8000b48 <__aeabi_fdiv+0x1f8>
 8000b44:	429d      	cmp	r5, r3
 8000b46:	d801      	bhi.n	8000b4c <__aeabi_fdiv+0x1fc>
 8000b48:	1b5b      	subs	r3, r3, r5
 8000b4a:	4332      	orrs	r2, r6
 8000b4c:	3801      	subs	r0, #1
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	d1f3      	bne.n	8000b3a <__aeabi_fdiv+0x1ea>
 8000b52:	1e58      	subs	r0, r3, #1
 8000b54:	4183      	sbcs	r3, r0
 8000b56:	4313      	orrs	r3, r2
 8000b58:	001d      	movs	r5, r3
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	337f      	adds	r3, #127	; 0x7f
 8000b5e:	000e      	movs	r6, r1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dd00      	ble.n	8000b66 <__aeabi_fdiv+0x216>
 8000b64:	e73d      	b.n	80009e2 <__aeabi_fdiv+0x92>
 8000b66:	e7aa      	b.n	8000abe <__aeabi_fdiv+0x16e>
 8000b68:	201a      	movs	r0, #26
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	1b5b      	subs	r3, r3, r5
 8000b6e:	e7e3      	b.n	8000b38 <__aeabi_fdiv+0x1e8>
 8000b70:	01aa      	lsls	r2, r5, #6
 8000b72:	2000      	movs	r0, #0
 8000b74:	0a52      	lsrs	r2, r2, #9
 8000b76:	e74b      	b.n	8000a10 <__aeabi_fdiv+0xc0>
 8000b78:	08010fc0 	.word	0x08010fc0
 8000b7c:	f7ffffff 	.word	0xf7ffffff
 8000b80:	08011000 	.word	0x08011000

08000b84 <__eqsf2>:
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	0042      	lsls	r2, r0, #1
 8000b88:	0245      	lsls	r5, r0, #9
 8000b8a:	024e      	lsls	r6, r1, #9
 8000b8c:	004c      	lsls	r4, r1, #1
 8000b8e:	0fc3      	lsrs	r3, r0, #31
 8000b90:	0a6d      	lsrs	r5, r5, #9
 8000b92:	2001      	movs	r0, #1
 8000b94:	0e12      	lsrs	r2, r2, #24
 8000b96:	0a76      	lsrs	r6, r6, #9
 8000b98:	0e24      	lsrs	r4, r4, #24
 8000b9a:	0fc9      	lsrs	r1, r1, #31
 8000b9c:	2aff      	cmp	r2, #255	; 0xff
 8000b9e:	d006      	beq.n	8000bae <__eqsf2+0x2a>
 8000ba0:	2cff      	cmp	r4, #255	; 0xff
 8000ba2:	d003      	beq.n	8000bac <__eqsf2+0x28>
 8000ba4:	42a2      	cmp	r2, r4
 8000ba6:	d101      	bne.n	8000bac <__eqsf2+0x28>
 8000ba8:	42b5      	cmp	r5, r6
 8000baa:	d006      	beq.n	8000bba <__eqsf2+0x36>
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d1fc      	bne.n	8000bac <__eqsf2+0x28>
 8000bb2:	2cff      	cmp	r4, #255	; 0xff
 8000bb4:	d1fa      	bne.n	8000bac <__eqsf2+0x28>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d1f8      	bne.n	8000bac <__eqsf2+0x28>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d006      	beq.n	8000bcc <__eqsf2+0x48>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2a00      	cmp	r2, #0
 8000bc2:	d1f3      	bne.n	8000bac <__eqsf2+0x28>
 8000bc4:	0028      	movs	r0, r5
 8000bc6:	1e43      	subs	r3, r0, #1
 8000bc8:	4198      	sbcs	r0, r3
 8000bca:	e7ef      	b.n	8000bac <__eqsf2+0x28>
 8000bcc:	2000      	movs	r0, #0
 8000bce:	e7ed      	b.n	8000bac <__eqsf2+0x28>

08000bd0 <__gesf2>:
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	0042      	lsls	r2, r0, #1
 8000bd4:	0245      	lsls	r5, r0, #9
 8000bd6:	024e      	lsls	r6, r1, #9
 8000bd8:	004c      	lsls	r4, r1, #1
 8000bda:	0fc3      	lsrs	r3, r0, #31
 8000bdc:	0a6d      	lsrs	r5, r5, #9
 8000bde:	0e12      	lsrs	r2, r2, #24
 8000be0:	0a76      	lsrs	r6, r6, #9
 8000be2:	0e24      	lsrs	r4, r4, #24
 8000be4:	0fc8      	lsrs	r0, r1, #31
 8000be6:	2aff      	cmp	r2, #255	; 0xff
 8000be8:	d01b      	beq.n	8000c22 <__gesf2+0x52>
 8000bea:	2cff      	cmp	r4, #255	; 0xff
 8000bec:	d00e      	beq.n	8000c0c <__gesf2+0x3c>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d11b      	bne.n	8000c2a <__gesf2+0x5a>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d101      	bne.n	8000bfa <__gesf2+0x2a>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d01c      	beq.n	8000c34 <__gesf2+0x64>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d00c      	beq.n	8000c18 <__gesf2+0x48>
 8000bfe:	4283      	cmp	r3, r0
 8000c00:	d01c      	beq.n	8000c3c <__gesf2+0x6c>
 8000c02:	2102      	movs	r1, #2
 8000c04:	1e58      	subs	r0, r3, #1
 8000c06:	4008      	ands	r0, r1
 8000c08:	3801      	subs	r0, #1
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d122      	bne.n	8000c56 <__gesf2+0x86>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d1f4      	bne.n	8000bfe <__gesf2+0x2e>
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d1f2      	bne.n	8000bfe <__gesf2+0x2e>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d1f6      	bne.n	8000c0a <__gesf2+0x3a>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	4240      	negs	r0, r0
 8000c20:	e7f3      	b.n	8000c0a <__gesf2+0x3a>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d117      	bne.n	8000c56 <__gesf2+0x86>
 8000c26:	2cff      	cmp	r4, #255	; 0xff
 8000c28:	d0f0      	beq.n	8000c0c <__gesf2+0x3c>
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d1e7      	bne.n	8000bfe <__gesf2+0x2e>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d1e5      	bne.n	8000bfe <__gesf2+0x2e>
 8000c32:	e7e6      	b.n	8000c02 <__gesf2+0x32>
 8000c34:	2000      	movs	r0, #0
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0e7      	beq.n	8000c0a <__gesf2+0x3a>
 8000c3a:	e7e2      	b.n	8000c02 <__gesf2+0x32>
 8000c3c:	42a2      	cmp	r2, r4
 8000c3e:	dc05      	bgt.n	8000c4c <__gesf2+0x7c>
 8000c40:	dbea      	blt.n	8000c18 <__gesf2+0x48>
 8000c42:	42b5      	cmp	r5, r6
 8000c44:	d802      	bhi.n	8000c4c <__gesf2+0x7c>
 8000c46:	d3e7      	bcc.n	8000c18 <__gesf2+0x48>
 8000c48:	2000      	movs	r0, #0
 8000c4a:	e7de      	b.n	8000c0a <__gesf2+0x3a>
 8000c4c:	4243      	negs	r3, r0
 8000c4e:	4158      	adcs	r0, r3
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	3801      	subs	r0, #1
 8000c54:	e7d9      	b.n	8000c0a <__gesf2+0x3a>
 8000c56:	2002      	movs	r0, #2
 8000c58:	4240      	negs	r0, r0
 8000c5a:	e7d6      	b.n	8000c0a <__gesf2+0x3a>

08000c5c <__lesf2>:
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	0042      	lsls	r2, r0, #1
 8000c60:	0245      	lsls	r5, r0, #9
 8000c62:	024e      	lsls	r6, r1, #9
 8000c64:	004c      	lsls	r4, r1, #1
 8000c66:	0fc3      	lsrs	r3, r0, #31
 8000c68:	0a6d      	lsrs	r5, r5, #9
 8000c6a:	0e12      	lsrs	r2, r2, #24
 8000c6c:	0a76      	lsrs	r6, r6, #9
 8000c6e:	0e24      	lsrs	r4, r4, #24
 8000c70:	0fc8      	lsrs	r0, r1, #31
 8000c72:	2aff      	cmp	r2, #255	; 0xff
 8000c74:	d00b      	beq.n	8000c8e <__lesf2+0x32>
 8000c76:	2cff      	cmp	r4, #255	; 0xff
 8000c78:	d00d      	beq.n	8000c96 <__lesf2+0x3a>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	d11f      	bne.n	8000cbe <__lesf2+0x62>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d116      	bne.n	8000cb0 <__lesf2+0x54>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d114      	bne.n	8000cb0 <__lesf2+0x54>
 8000c86:	2000      	movs	r0, #0
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d010      	beq.n	8000cae <__lesf2+0x52>
 8000c8c:	e009      	b.n	8000ca2 <__lesf2+0x46>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d10c      	bne.n	8000cac <__lesf2+0x50>
 8000c92:	2cff      	cmp	r4, #255	; 0xff
 8000c94:	d113      	bne.n	8000cbe <__lesf2+0x62>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d108      	bne.n	8000cac <__lesf2+0x50>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d008      	beq.n	8000cb0 <__lesf2+0x54>
 8000c9e:	4283      	cmp	r3, r0
 8000ca0:	d012      	beq.n	8000cc8 <__lesf2+0x6c>
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	1e58      	subs	r0, r3, #1
 8000ca6:	4008      	ands	r0, r1
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e000      	b.n	8000cae <__lesf2+0x52>
 8000cac:	2002      	movs	r0, #2
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d1f4      	bne.n	8000c9e <__lesf2+0x42>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d1fa      	bne.n	8000cae <__lesf2+0x52>
 8000cb8:	2001      	movs	r0, #1
 8000cba:	4240      	negs	r0, r0
 8000cbc:	e7f7      	b.n	8000cae <__lesf2+0x52>
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d1ed      	bne.n	8000c9e <__lesf2+0x42>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d1eb      	bne.n	8000c9e <__lesf2+0x42>
 8000cc6:	e7ec      	b.n	8000ca2 <__lesf2+0x46>
 8000cc8:	42a2      	cmp	r2, r4
 8000cca:	dc05      	bgt.n	8000cd8 <__lesf2+0x7c>
 8000ccc:	dbf2      	blt.n	8000cb4 <__lesf2+0x58>
 8000cce:	42b5      	cmp	r5, r6
 8000cd0:	d802      	bhi.n	8000cd8 <__lesf2+0x7c>
 8000cd2:	d3ef      	bcc.n	8000cb4 <__lesf2+0x58>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	e7ea      	b.n	8000cae <__lesf2+0x52>
 8000cd8:	4243      	negs	r3, r0
 8000cda:	4158      	adcs	r0, r3
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	3801      	subs	r0, #1
 8000ce0:	e7e5      	b.n	8000cae <__lesf2+0x52>
 8000ce2:	46c0      	nop			; (mov r8, r8)

08000ce4 <__aeabi_fmul>:
 8000ce4:	0243      	lsls	r3, r0, #9
 8000ce6:	0a5b      	lsrs	r3, r3, #9
 8000ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cea:	464f      	mov	r7, r9
 8000cec:	4646      	mov	r6, r8
 8000cee:	4699      	mov	r9, r3
 8000cf0:	46d6      	mov	lr, sl
 8000cf2:	0fc3      	lsrs	r3, r0, #31
 8000cf4:	0045      	lsls	r5, r0, #1
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	b5c0      	push	{r6, r7, lr}
 8000cfa:	464b      	mov	r3, r9
 8000cfc:	1c0f      	adds	r7, r1, #0
 8000cfe:	0e2d      	lsrs	r5, r5, #24
 8000d00:	d100      	bne.n	8000d04 <__aeabi_fmul+0x20>
 8000d02:	e0cb      	b.n	8000e9c <__aeabi_fmul+0x1b8>
 8000d04:	2dff      	cmp	r5, #255	; 0xff
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fmul+0x26>
 8000d08:	e0cf      	b.n	8000eaa <__aeabi_fmul+0x1c6>
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	04d2      	lsls	r2, r2, #19
 8000d10:	431a      	orrs	r2, r3
 8000d12:	2300      	movs	r3, #0
 8000d14:	4691      	mov	r9, r2
 8000d16:	2600      	movs	r6, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	3d7f      	subs	r5, #127	; 0x7f
 8000d1c:	027c      	lsls	r4, r7, #9
 8000d1e:	007b      	lsls	r3, r7, #1
 8000d20:	0a64      	lsrs	r4, r4, #9
 8000d22:	0e1b      	lsrs	r3, r3, #24
 8000d24:	0fff      	lsrs	r7, r7, #31
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_fmul+0x48>
 8000d2a:	e0a9      	b.n	8000e80 <__aeabi_fmul+0x19c>
 8000d2c:	2bff      	cmp	r3, #255	; 0xff
 8000d2e:	d011      	beq.n	8000d54 <__aeabi_fmul+0x70>
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	00e4      	lsls	r4, r4, #3
 8000d34:	04d2      	lsls	r2, r2, #19
 8000d36:	4314      	orrs	r4, r2
 8000d38:	4642      	mov	r2, r8
 8000d3a:	3b7f      	subs	r3, #127	; 0x7f
 8000d3c:	195b      	adds	r3, r3, r5
 8000d3e:	407a      	eors	r2, r7
 8000d40:	2000      	movs	r0, #0
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	1c5d      	adds	r5, r3, #1
 8000d46:	2e0a      	cmp	r6, #10
 8000d48:	dd13      	ble.n	8000d72 <__aeabi_fmul+0x8e>
 8000d4a:	003a      	movs	r2, r7
 8000d4c:	2e0b      	cmp	r6, #11
 8000d4e:	d047      	beq.n	8000de0 <__aeabi_fmul+0xfc>
 8000d50:	4647      	mov	r7, r8
 8000d52:	e03f      	b.n	8000dd4 <__aeabi_fmul+0xf0>
 8000d54:	002b      	movs	r3, r5
 8000d56:	33ff      	adds	r3, #255	; 0xff
 8000d58:	2c00      	cmp	r4, #0
 8000d5a:	d11e      	bne.n	8000d9a <__aeabi_fmul+0xb6>
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	4316      	orrs	r6, r2
 8000d60:	4642      	mov	r2, r8
 8000d62:	3501      	adds	r5, #1
 8000d64:	407a      	eors	r2, r7
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	35ff      	adds	r5, #255	; 0xff
 8000d6a:	2e0a      	cmp	r6, #10
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_fmul+0x8c>
 8000d6e:	e0e4      	b.n	8000f3a <__aeabi_fmul+0x256>
 8000d70:	2002      	movs	r0, #2
 8000d72:	2e02      	cmp	r6, #2
 8000d74:	dc1c      	bgt.n	8000db0 <__aeabi_fmul+0xcc>
 8000d76:	3e01      	subs	r6, #1
 8000d78:	2e01      	cmp	r6, #1
 8000d7a:	d842      	bhi.n	8000e02 <__aeabi_fmul+0x11e>
 8000d7c:	2802      	cmp	r0, #2
 8000d7e:	d03d      	beq.n	8000dfc <__aeabi_fmul+0x118>
 8000d80:	2801      	cmp	r0, #1
 8000d82:	d166      	bne.n	8000e52 <__aeabi_fmul+0x16e>
 8000d84:	2000      	movs	r0, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	05c0      	lsls	r0, r0, #23
 8000d8a:	4308      	orrs	r0, r1
 8000d8c:	07d2      	lsls	r2, r2, #31
 8000d8e:	4310      	orrs	r0, r2
 8000d90:	bce0      	pop	{r5, r6, r7}
 8000d92:	46ba      	mov	sl, r7
 8000d94:	46b1      	mov	r9, r6
 8000d96:	46a8      	mov	r8, r5
 8000d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4316      	orrs	r6, r2
 8000d9e:	4642      	mov	r2, r8
 8000da0:	3501      	adds	r5, #1
 8000da2:	407a      	eors	r2, r7
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	35ff      	adds	r5, #255	; 0xff
 8000da8:	2e0a      	cmp	r6, #10
 8000daa:	dd00      	ble.n	8000dae <__aeabi_fmul+0xca>
 8000dac:	e0e4      	b.n	8000f78 <__aeabi_fmul+0x294>
 8000dae:	2003      	movs	r0, #3
 8000db0:	2101      	movs	r1, #1
 8000db2:	40b1      	lsls	r1, r6
 8000db4:	26a6      	movs	r6, #166	; 0xa6
 8000db6:	00f6      	lsls	r6, r6, #3
 8000db8:	4231      	tst	r1, r6
 8000dba:	d10a      	bne.n	8000dd2 <__aeabi_fmul+0xee>
 8000dbc:	2690      	movs	r6, #144	; 0x90
 8000dbe:	00b6      	lsls	r6, r6, #2
 8000dc0:	4231      	tst	r1, r6
 8000dc2:	d116      	bne.n	8000df2 <__aeabi_fmul+0x10e>
 8000dc4:	3eb9      	subs	r6, #185	; 0xb9
 8000dc6:	3eff      	subs	r6, #255	; 0xff
 8000dc8:	420e      	tst	r6, r1
 8000dca:	d01a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dcc:	46a1      	mov	r9, r4
 8000dce:	4682      	mov	sl, r0
 8000dd0:	e000      	b.n	8000dd4 <__aeabi_fmul+0xf0>
 8000dd2:	0017      	movs	r7, r2
 8000dd4:	4653      	mov	r3, sl
 8000dd6:	003a      	movs	r2, r7
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d00f      	beq.n	8000dfc <__aeabi_fmul+0x118>
 8000ddc:	464c      	mov	r4, r9
 8000dde:	4650      	mov	r0, sl
 8000de0:	2803      	cmp	r0, #3
 8000de2:	d1cd      	bne.n	8000d80 <__aeabi_fmul+0x9c>
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	03c9      	lsls	r1, r1, #15
 8000de8:	4321      	orrs	r1, r4
 8000dea:	0249      	lsls	r1, r1, #9
 8000dec:	20ff      	movs	r0, #255	; 0xff
 8000dee:	0a49      	lsrs	r1, r1, #9
 8000df0:	e7ca      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	2200      	movs	r2, #0
 8000df6:	20ff      	movs	r0, #255	; 0xff
 8000df8:	03c9      	lsls	r1, r1, #15
 8000dfa:	e7c5      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000dfc:	20ff      	movs	r0, #255	; 0xff
 8000dfe:	2100      	movs	r1, #0
 8000e00:	e7c2      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000e02:	0c20      	lsrs	r0, r4, #16
 8000e04:	4649      	mov	r1, r9
 8000e06:	0424      	lsls	r4, r4, #16
 8000e08:	0c24      	lsrs	r4, r4, #16
 8000e0a:	0027      	movs	r7, r4
 8000e0c:	0c0e      	lsrs	r6, r1, #16
 8000e0e:	0409      	lsls	r1, r1, #16
 8000e10:	0c09      	lsrs	r1, r1, #16
 8000e12:	4374      	muls	r4, r6
 8000e14:	434f      	muls	r7, r1
 8000e16:	4346      	muls	r6, r0
 8000e18:	4348      	muls	r0, r1
 8000e1a:	0c39      	lsrs	r1, r7, #16
 8000e1c:	1900      	adds	r0, r0, r4
 8000e1e:	1809      	adds	r1, r1, r0
 8000e20:	428c      	cmp	r4, r1
 8000e22:	d903      	bls.n	8000e2c <__aeabi_fmul+0x148>
 8000e24:	2080      	movs	r0, #128	; 0x80
 8000e26:	0240      	lsls	r0, r0, #9
 8000e28:	4684      	mov	ip, r0
 8000e2a:	4466      	add	r6, ip
 8000e2c:	043f      	lsls	r7, r7, #16
 8000e2e:	0408      	lsls	r0, r1, #16
 8000e30:	0c3f      	lsrs	r7, r7, #16
 8000e32:	19c0      	adds	r0, r0, r7
 8000e34:	0184      	lsls	r4, r0, #6
 8000e36:	1e67      	subs	r7, r4, #1
 8000e38:	41bc      	sbcs	r4, r7
 8000e3a:	0c09      	lsrs	r1, r1, #16
 8000e3c:	0e80      	lsrs	r0, r0, #26
 8000e3e:	1989      	adds	r1, r1, r6
 8000e40:	4304      	orrs	r4, r0
 8000e42:	0189      	lsls	r1, r1, #6
 8000e44:	430c      	orrs	r4, r1
 8000e46:	0109      	lsls	r1, r1, #4
 8000e48:	d571      	bpl.n	8000f2e <__aeabi_fmul+0x24a>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	0861      	lsrs	r1, r4, #1
 8000e4e:	401c      	ands	r4, r3
 8000e50:	430c      	orrs	r4, r1
 8000e52:	002b      	movs	r3, r5
 8000e54:	337f      	adds	r3, #127	; 0x7f
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	dd51      	ble.n	8000efe <__aeabi_fmul+0x21a>
 8000e5a:	0761      	lsls	r1, r4, #29
 8000e5c:	d004      	beq.n	8000e68 <__aeabi_fmul+0x184>
 8000e5e:	210f      	movs	r1, #15
 8000e60:	4021      	ands	r1, r4
 8000e62:	2904      	cmp	r1, #4
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fmul+0x184>
 8000e66:	3404      	adds	r4, #4
 8000e68:	0121      	lsls	r1, r4, #4
 8000e6a:	d503      	bpl.n	8000e74 <__aeabi_fmul+0x190>
 8000e6c:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <__aeabi_fmul+0x298>)
 8000e6e:	401c      	ands	r4, r3
 8000e70:	002b      	movs	r3, r5
 8000e72:	3380      	adds	r3, #128	; 0x80
 8000e74:	2bfe      	cmp	r3, #254	; 0xfe
 8000e76:	dcc1      	bgt.n	8000dfc <__aeabi_fmul+0x118>
 8000e78:	01a1      	lsls	r1, r4, #6
 8000e7a:	0a49      	lsrs	r1, r1, #9
 8000e7c:	b2d8      	uxtb	r0, r3
 8000e7e:	e783      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d12c      	bne.n	8000ede <__aeabi_fmul+0x1fa>
 8000e84:	2301      	movs	r3, #1
 8000e86:	4642      	mov	r2, r8
 8000e88:	431e      	orrs	r6, r3
 8000e8a:	002b      	movs	r3, r5
 8000e8c:	407a      	eors	r2, r7
 8000e8e:	2001      	movs	r0, #1
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	1c5d      	adds	r5, r3, #1
 8000e94:	2e0a      	cmp	r6, #10
 8000e96:	dd00      	ble.n	8000e9a <__aeabi_fmul+0x1b6>
 8000e98:	e757      	b.n	8000d4a <__aeabi_fmul+0x66>
 8000e9a:	e76a      	b.n	8000d72 <__aeabi_fmul+0x8e>
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d110      	bne.n	8000ec2 <__aeabi_fmul+0x1de>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2604      	movs	r6, #4
 8000ea4:	2500      	movs	r5, #0
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	e738      	b.n	8000d1c <__aeabi_fmul+0x38>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fmul+0x1d4>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	2608      	movs	r6, #8
 8000eb2:	25ff      	movs	r5, #255	; 0xff
 8000eb4:	469a      	mov	sl, r3
 8000eb6:	e731      	b.n	8000d1c <__aeabi_fmul+0x38>
 8000eb8:	2303      	movs	r3, #3
 8000eba:	260c      	movs	r6, #12
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	469a      	mov	sl, r3
 8000ec0:	e72c      	b.n	8000d1c <__aeabi_fmul+0x38>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	f002 f984 	bl	80031d0 <__clzsi2>
 8000ec8:	464a      	mov	r2, r9
 8000eca:	1f43      	subs	r3, r0, #5
 8000ecc:	2576      	movs	r5, #118	; 0x76
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	426d      	negs	r5, r5
 8000ed4:	4691      	mov	r9, r2
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	469a      	mov	sl, r3
 8000eda:	1a2d      	subs	r5, r5, r0
 8000edc:	e71e      	b.n	8000d1c <__aeabi_fmul+0x38>
 8000ede:	0020      	movs	r0, r4
 8000ee0:	f002 f976 	bl	80031d0 <__clzsi2>
 8000ee4:	4642      	mov	r2, r8
 8000ee6:	1f43      	subs	r3, r0, #5
 8000ee8:	409c      	lsls	r4, r3
 8000eea:	1a2b      	subs	r3, r5, r0
 8000eec:	3b76      	subs	r3, #118	; 0x76
 8000eee:	407a      	eors	r2, r7
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2e0a      	cmp	r6, #10
 8000ef8:	dd00      	ble.n	8000efc <__aeabi_fmul+0x218>
 8000efa:	e726      	b.n	8000d4a <__aeabi_fmul+0x66>
 8000efc:	e739      	b.n	8000d72 <__aeabi_fmul+0x8e>
 8000efe:	2101      	movs	r1, #1
 8000f00:	1acb      	subs	r3, r1, r3
 8000f02:	2b1b      	cmp	r3, #27
 8000f04:	dd00      	ble.n	8000f08 <__aeabi_fmul+0x224>
 8000f06:	e73d      	b.n	8000d84 <__aeabi_fmul+0xa0>
 8000f08:	359e      	adds	r5, #158	; 0x9e
 8000f0a:	0021      	movs	r1, r4
 8000f0c:	40ac      	lsls	r4, r5
 8000f0e:	40d9      	lsrs	r1, r3
 8000f10:	1e63      	subs	r3, r4, #1
 8000f12:	419c      	sbcs	r4, r3
 8000f14:	4321      	orrs	r1, r4
 8000f16:	074b      	lsls	r3, r1, #29
 8000f18:	d004      	beq.n	8000f24 <__aeabi_fmul+0x240>
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fmul+0x240>
 8000f22:	3104      	adds	r1, #4
 8000f24:	014b      	lsls	r3, r1, #5
 8000f26:	d504      	bpl.n	8000f32 <__aeabi_fmul+0x24e>
 8000f28:	2001      	movs	r0, #1
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	e72c      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000f2e:	001d      	movs	r5, r3
 8000f30:	e78f      	b.n	8000e52 <__aeabi_fmul+0x16e>
 8000f32:	0189      	lsls	r1, r1, #6
 8000f34:	2000      	movs	r0, #0
 8000f36:	0a49      	lsrs	r1, r1, #9
 8000f38:	e726      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	2e0f      	cmp	r6, #15
 8000f3e:	d10c      	bne.n	8000f5a <__aeabi_fmul+0x276>
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	464b      	mov	r3, r9
 8000f44:	03c9      	lsls	r1, r1, #15
 8000f46:	420b      	tst	r3, r1
 8000f48:	d00d      	beq.n	8000f66 <__aeabi_fmul+0x282>
 8000f4a:	420c      	tst	r4, r1
 8000f4c:	d10b      	bne.n	8000f66 <__aeabi_fmul+0x282>
 8000f4e:	4321      	orrs	r1, r4
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	003a      	movs	r2, r7
 8000f54:	20ff      	movs	r0, #255	; 0xff
 8000f56:	0a49      	lsrs	r1, r1, #9
 8000f58:	e716      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000f5a:	2e0b      	cmp	r6, #11
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_fmul+0x27c>
 8000f5e:	e6f7      	b.n	8000d50 <__aeabi_fmul+0x6c>
 8000f60:	46a1      	mov	r9, r4
 8000f62:	469a      	mov	sl, r3
 8000f64:	e736      	b.n	8000dd4 <__aeabi_fmul+0xf0>
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	464b      	mov	r3, r9
 8000f6a:	03c9      	lsls	r1, r1, #15
 8000f6c:	4319      	orrs	r1, r3
 8000f6e:	0249      	lsls	r1, r1, #9
 8000f70:	4642      	mov	r2, r8
 8000f72:	20ff      	movs	r0, #255	; 0xff
 8000f74:	0a49      	lsrs	r1, r1, #9
 8000f76:	e707      	b.n	8000d88 <__aeabi_fmul+0xa4>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e7df      	b.n	8000f3c <__aeabi_fmul+0x258>
 8000f7c:	f7ffffff 	.word	0xf7ffffff

08000f80 <__aeabi_fsub>:
 8000f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f82:	46c6      	mov	lr, r8
 8000f84:	0243      	lsls	r3, r0, #9
 8000f86:	0a5b      	lsrs	r3, r3, #9
 8000f88:	0045      	lsls	r5, r0, #1
 8000f8a:	00da      	lsls	r2, r3, #3
 8000f8c:	0fc4      	lsrs	r4, r0, #31
 8000f8e:	0248      	lsls	r0, r1, #9
 8000f90:	004f      	lsls	r7, r1, #1
 8000f92:	4694      	mov	ip, r2
 8000f94:	0a42      	lsrs	r2, r0, #9
 8000f96:	001e      	movs	r6, r3
 8000f98:	4690      	mov	r8, r2
 8000f9a:	b500      	push	{lr}
 8000f9c:	0e2d      	lsrs	r5, r5, #24
 8000f9e:	0e3f      	lsrs	r7, r7, #24
 8000fa0:	0fc9      	lsrs	r1, r1, #31
 8000fa2:	0980      	lsrs	r0, r0, #6
 8000fa4:	2fff      	cmp	r7, #255	; 0xff
 8000fa6:	d059      	beq.n	800105c <__aeabi_fsub+0xdc>
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4051      	eors	r1, r2
 8000fac:	428c      	cmp	r4, r1
 8000fae:	d039      	beq.n	8001024 <__aeabi_fsub+0xa4>
 8000fb0:	1bea      	subs	r2, r5, r7
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	dd58      	ble.n	8001068 <__aeabi_fsub+0xe8>
 8000fb6:	2f00      	cmp	r7, #0
 8000fb8:	d068      	beq.n	800108c <__aeabi_fsub+0x10c>
 8000fba:	2dff      	cmp	r5, #255	; 0xff
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_fsub+0x40>
 8000fbe:	e0d1      	b.n	8001164 <__aeabi_fsub+0x1e4>
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	04db      	lsls	r3, r3, #19
 8000fc4:	4318      	orrs	r0, r3
 8000fc6:	2a1b      	cmp	r2, #27
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_fsub+0x4c>
 8000fca:	e0e3      	b.n	8001194 <__aeabi_fsub+0x214>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	4662      	mov	r2, ip
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	015a      	lsls	r2, r3, #5
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_fsub+0x58>
 8000fd6:	e0ac      	b.n	8001132 <__aeabi_fsub+0x1b2>
 8000fd8:	019b      	lsls	r3, r3, #6
 8000fda:	099e      	lsrs	r6, r3, #6
 8000fdc:	0030      	movs	r0, r6
 8000fde:	f002 f8f7 	bl	80031d0 <__clzsi2>
 8000fe2:	0033      	movs	r3, r6
 8000fe4:	3805      	subs	r0, #5
 8000fe6:	4083      	lsls	r3, r0
 8000fe8:	4285      	cmp	r5, r0
 8000fea:	dc00      	bgt.n	8000fee <__aeabi_fsub+0x6e>
 8000fec:	e0c6      	b.n	800117c <__aeabi_fsub+0x1fc>
 8000fee:	4ab2      	ldr	r2, [pc, #712]	; (80012b8 <__aeabi_fsub+0x338>)
 8000ff0:	1a2d      	subs	r5, r5, r0
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	075a      	lsls	r2, r3, #29
 8000ff6:	d004      	beq.n	8001002 <__aeabi_fsub+0x82>
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	2a04      	cmp	r2, #4
 8000ffe:	d000      	beq.n	8001002 <__aeabi_fsub+0x82>
 8001000:	3304      	adds	r3, #4
 8001002:	015a      	lsls	r2, r3, #5
 8001004:	d400      	bmi.n	8001008 <__aeabi_fsub+0x88>
 8001006:	e097      	b.n	8001138 <__aeabi_fsub+0x1b8>
 8001008:	1c6a      	adds	r2, r5, #1
 800100a:	2dfe      	cmp	r5, #254	; 0xfe
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x90>
 800100e:	e084      	b.n	800111a <__aeabi_fsub+0x19a>
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	0a5e      	lsrs	r6, r3, #9
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	05d0      	lsls	r0, r2, #23
 8001018:	4330      	orrs	r0, r6
 800101a:	07e4      	lsls	r4, r4, #31
 800101c:	4320      	orrs	r0, r4
 800101e:	bc80      	pop	{r7}
 8001020:	46b8      	mov	r8, r7
 8001022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001024:	1bea      	subs	r2, r5, r7
 8001026:	2a00      	cmp	r2, #0
 8001028:	dd41      	ble.n	80010ae <__aeabi_fsub+0x12e>
 800102a:	2f00      	cmp	r7, #0
 800102c:	d06b      	beq.n	8001106 <__aeabi_fsub+0x186>
 800102e:	2dff      	cmp	r5, #255	; 0xff
 8001030:	d100      	bne.n	8001034 <__aeabi_fsub+0xb4>
 8001032:	e097      	b.n	8001164 <__aeabi_fsub+0x1e4>
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	04db      	lsls	r3, r3, #19
 8001038:	4318      	orrs	r0, r3
 800103a:	2a1b      	cmp	r2, #27
 800103c:	dc00      	bgt.n	8001040 <__aeabi_fsub+0xc0>
 800103e:	e0cc      	b.n	80011da <__aeabi_fsub+0x25a>
 8001040:	2301      	movs	r3, #1
 8001042:	4463      	add	r3, ip
 8001044:	015a      	lsls	r2, r3, #5
 8001046:	d574      	bpl.n	8001132 <__aeabi_fsub+0x1b2>
 8001048:	3501      	adds	r5, #1
 800104a:	2dff      	cmp	r5, #255	; 0xff
 800104c:	d065      	beq.n	800111a <__aeabi_fsub+0x19a>
 800104e:	2201      	movs	r2, #1
 8001050:	499a      	ldr	r1, [pc, #616]	; (80012bc <__aeabi_fsub+0x33c>)
 8001052:	401a      	ands	r2, r3
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	400b      	ands	r3, r1
 8001058:	4313      	orrs	r3, r2
 800105a:	e7cb      	b.n	8000ff4 <__aeabi_fsub+0x74>
 800105c:	2800      	cmp	r0, #0
 800105e:	d01f      	beq.n	80010a0 <__aeabi_fsub+0x120>
 8001060:	428c      	cmp	r4, r1
 8001062:	d022      	beq.n	80010aa <__aeabi_fsub+0x12a>
 8001064:	002a      	movs	r2, r5
 8001066:	3aff      	subs	r2, #255	; 0xff
 8001068:	2a00      	cmp	r2, #0
 800106a:	d035      	beq.n	80010d8 <__aeabi_fsub+0x158>
 800106c:	1b7a      	subs	r2, r7, r5
 800106e:	2d00      	cmp	r5, #0
 8001070:	d000      	beq.n	8001074 <__aeabi_fsub+0xf4>
 8001072:	e099      	b.n	80011a8 <__aeabi_fsub+0x228>
 8001074:	4663      	mov	r3, ip
 8001076:	2b00      	cmp	r3, #0
 8001078:	d100      	bne.n	800107c <__aeabi_fsub+0xfc>
 800107a:	e0dd      	b.n	8001238 <__aeabi_fsub+0x2b8>
 800107c:	1e53      	subs	r3, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x104>
 8001082:	e105      	b.n	8001290 <__aeabi_fsub+0x310>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d06b      	beq.n	8001160 <__aeabi_fsub+0x1e0>
 8001088:	001a      	movs	r2, r3
 800108a:	e094      	b.n	80011b6 <__aeabi_fsub+0x236>
 800108c:	2800      	cmp	r0, #0
 800108e:	d073      	beq.n	8001178 <__aeabi_fsub+0x1f8>
 8001090:	1e51      	subs	r1, r2, #1
 8001092:	2a01      	cmp	r2, #1
 8001094:	d100      	bne.n	8001098 <__aeabi_fsub+0x118>
 8001096:	e0df      	b.n	8001258 <__aeabi_fsub+0x2d8>
 8001098:	2aff      	cmp	r2, #255	; 0xff
 800109a:	d063      	beq.n	8001164 <__aeabi_fsub+0x1e4>
 800109c:	000a      	movs	r2, r1
 800109e:	e792      	b.n	8000fc6 <__aeabi_fsub+0x46>
 80010a0:	2201      	movs	r2, #1
 80010a2:	4051      	eors	r1, r2
 80010a4:	42a1      	cmp	r1, r4
 80010a6:	d000      	beq.n	80010aa <__aeabi_fsub+0x12a>
 80010a8:	e782      	b.n	8000fb0 <__aeabi_fsub+0x30>
 80010aa:	002a      	movs	r2, r5
 80010ac:	3aff      	subs	r2, #255	; 0xff
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d036      	beq.n	8001120 <__aeabi_fsub+0x1a0>
 80010b2:	1b7a      	subs	r2, r7, r5
 80010b4:	2d00      	cmp	r5, #0
 80010b6:	d100      	bne.n	80010ba <__aeabi_fsub+0x13a>
 80010b8:	e0aa      	b.n	8001210 <__aeabi_fsub+0x290>
 80010ba:	2fff      	cmp	r7, #255	; 0xff
 80010bc:	d100      	bne.n	80010c0 <__aeabi_fsub+0x140>
 80010be:	e0da      	b.n	8001276 <__aeabi_fsub+0x2f6>
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	4661      	mov	r1, ip
 80010c4:	04db      	lsls	r3, r3, #19
 80010c6:	4319      	orrs	r1, r3
 80010c8:	468c      	mov	ip, r1
 80010ca:	2a1b      	cmp	r2, #27
 80010cc:	dc00      	bgt.n	80010d0 <__aeabi_fsub+0x150>
 80010ce:	e0d4      	b.n	800127a <__aeabi_fsub+0x2fa>
 80010d0:	2301      	movs	r3, #1
 80010d2:	003d      	movs	r5, r7
 80010d4:	181b      	adds	r3, r3, r0
 80010d6:	e7b5      	b.n	8001044 <__aeabi_fsub+0xc4>
 80010d8:	27fe      	movs	r7, #254	; 0xfe
 80010da:	1c6a      	adds	r2, r5, #1
 80010dc:	4217      	tst	r7, r2
 80010de:	d171      	bne.n	80011c4 <__aeabi_fsub+0x244>
 80010e0:	2d00      	cmp	r5, #0
 80010e2:	d000      	beq.n	80010e6 <__aeabi_fsub+0x166>
 80010e4:	e09e      	b.n	8001224 <__aeabi_fsub+0x2a4>
 80010e6:	4663      	mov	r3, ip
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x16e>
 80010ec:	e0d5      	b.n	800129a <__aeabi_fsub+0x31a>
 80010ee:	2200      	movs	r2, #0
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_fsub+0x176>
 80010f4:	e78f      	b.n	8001016 <__aeabi_fsub+0x96>
 80010f6:	1a1b      	subs	r3, r3, r0
 80010f8:	015e      	lsls	r6, r3, #5
 80010fa:	d400      	bmi.n	80010fe <__aeabi_fsub+0x17e>
 80010fc:	e0d6      	b.n	80012ac <__aeabi_fsub+0x32c>
 80010fe:	4663      	mov	r3, ip
 8001100:	000c      	movs	r4, r1
 8001102:	1ac3      	subs	r3, r0, r3
 8001104:	e776      	b.n	8000ff4 <__aeabi_fsub+0x74>
 8001106:	2800      	cmp	r0, #0
 8001108:	d036      	beq.n	8001178 <__aeabi_fsub+0x1f8>
 800110a:	1e51      	subs	r1, r2, #1
 800110c:	2a01      	cmp	r2, #1
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x192>
 8001110:	e09a      	b.n	8001248 <__aeabi_fsub+0x2c8>
 8001112:	2aff      	cmp	r2, #255	; 0xff
 8001114:	d026      	beq.n	8001164 <__aeabi_fsub+0x1e4>
 8001116:	000a      	movs	r2, r1
 8001118:	e78f      	b.n	800103a <__aeabi_fsub+0xba>
 800111a:	22ff      	movs	r2, #255	; 0xff
 800111c:	2600      	movs	r6, #0
 800111e:	e77a      	b.n	8001016 <__aeabi_fsub+0x96>
 8001120:	27fe      	movs	r7, #254	; 0xfe
 8001122:	1c6a      	adds	r2, r5, #1
 8001124:	4217      	tst	r7, r2
 8001126:	d062      	beq.n	80011ee <__aeabi_fsub+0x26e>
 8001128:	2aff      	cmp	r2, #255	; 0xff
 800112a:	d0f6      	beq.n	800111a <__aeabi_fsub+0x19a>
 800112c:	0015      	movs	r5, r2
 800112e:	4460      	add	r0, ip
 8001130:	0843      	lsrs	r3, r0, #1
 8001132:	075a      	lsls	r2, r3, #29
 8001134:	d000      	beq.n	8001138 <__aeabi_fsub+0x1b8>
 8001136:	e75f      	b.n	8000ff8 <__aeabi_fsub+0x78>
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	2dff      	cmp	r5, #255	; 0xff
 800113c:	d012      	beq.n	8001164 <__aeabi_fsub+0x1e4>
 800113e:	025b      	lsls	r3, r3, #9
 8001140:	0a5e      	lsrs	r6, r3, #9
 8001142:	b2ea      	uxtb	r2, r5
 8001144:	e767      	b.n	8001016 <__aeabi_fsub+0x96>
 8001146:	4662      	mov	r2, ip
 8001148:	2a00      	cmp	r2, #0
 800114a:	d100      	bne.n	800114e <__aeabi_fsub+0x1ce>
 800114c:	e093      	b.n	8001276 <__aeabi_fsub+0x2f6>
 800114e:	2800      	cmp	r0, #0
 8001150:	d008      	beq.n	8001164 <__aeabi_fsub+0x1e4>
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	03d2      	lsls	r2, r2, #15
 8001156:	4213      	tst	r3, r2
 8001158:	d004      	beq.n	8001164 <__aeabi_fsub+0x1e4>
 800115a:	4640      	mov	r0, r8
 800115c:	4210      	tst	r0, r2
 800115e:	d101      	bne.n	8001164 <__aeabi_fsub+0x1e4>
 8001160:	000c      	movs	r4, r1
 8001162:	4643      	mov	r3, r8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0d8      	beq.n	800111a <__aeabi_fsub+0x19a>
 8001168:	2680      	movs	r6, #128	; 0x80
 800116a:	03f6      	lsls	r6, r6, #15
 800116c:	431e      	orrs	r6, r3
 800116e:	0276      	lsls	r6, r6, #9
 8001170:	22ff      	movs	r2, #255	; 0xff
 8001172:	0a76      	lsrs	r6, r6, #9
 8001174:	e74f      	b.n	8001016 <__aeabi_fsub+0x96>
 8001176:	4643      	mov	r3, r8
 8001178:	0015      	movs	r5, r2
 800117a:	e7de      	b.n	800113a <__aeabi_fsub+0x1ba>
 800117c:	2220      	movs	r2, #32
 800117e:	1b40      	subs	r0, r0, r5
 8001180:	3001      	adds	r0, #1
 8001182:	1a12      	subs	r2, r2, r0
 8001184:	0019      	movs	r1, r3
 8001186:	4093      	lsls	r3, r2
 8001188:	40c1      	lsrs	r1, r0
 800118a:	1e5a      	subs	r2, r3, #1
 800118c:	4193      	sbcs	r3, r2
 800118e:	2500      	movs	r5, #0
 8001190:	430b      	orrs	r3, r1
 8001192:	e72f      	b.n	8000ff4 <__aeabi_fsub+0x74>
 8001194:	2320      	movs	r3, #32
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	0001      	movs	r1, r0
 800119a:	4098      	lsls	r0, r3
 800119c:	0003      	movs	r3, r0
 800119e:	40d1      	lsrs	r1, r2
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	4193      	sbcs	r3, r2
 80011a4:	430b      	orrs	r3, r1
 80011a6:	e712      	b.n	8000fce <__aeabi_fsub+0x4e>
 80011a8:	2fff      	cmp	r7, #255	; 0xff
 80011aa:	d0d9      	beq.n	8001160 <__aeabi_fsub+0x1e0>
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	4664      	mov	r4, ip
 80011b0:	04db      	lsls	r3, r3, #19
 80011b2:	431c      	orrs	r4, r3
 80011b4:	46a4      	mov	ip, r4
 80011b6:	2a1b      	cmp	r2, #27
 80011b8:	dd52      	ble.n	8001260 <__aeabi_fsub+0x2e0>
 80011ba:	2301      	movs	r3, #1
 80011bc:	000c      	movs	r4, r1
 80011be:	003d      	movs	r5, r7
 80011c0:	1ac3      	subs	r3, r0, r3
 80011c2:	e706      	b.n	8000fd2 <__aeabi_fsub+0x52>
 80011c4:	4663      	mov	r3, ip
 80011c6:	1a1e      	subs	r6, r3, r0
 80011c8:	0173      	lsls	r3, r6, #5
 80011ca:	d439      	bmi.n	8001240 <__aeabi_fsub+0x2c0>
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	d000      	beq.n	80011d2 <__aeabi_fsub+0x252>
 80011d0:	e704      	b.n	8000fdc <__aeabi_fsub+0x5c>
 80011d2:	2400      	movs	r4, #0
 80011d4:	2200      	movs	r2, #0
 80011d6:	2600      	movs	r6, #0
 80011d8:	e71d      	b.n	8001016 <__aeabi_fsub+0x96>
 80011da:	2320      	movs	r3, #32
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	0001      	movs	r1, r0
 80011e0:	4098      	lsls	r0, r3
 80011e2:	0003      	movs	r3, r0
 80011e4:	40d1      	lsrs	r1, r2
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	4193      	sbcs	r3, r2
 80011ea:	430b      	orrs	r3, r1
 80011ec:	e729      	b.n	8001042 <__aeabi_fsub+0xc2>
 80011ee:	2d00      	cmp	r5, #0
 80011f0:	d1a9      	bne.n	8001146 <__aeabi_fsub+0x1c6>
 80011f2:	4663      	mov	r3, ip
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d056      	beq.n	80012a6 <__aeabi_fsub+0x326>
 80011f8:	2200      	movs	r2, #0
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d100      	bne.n	8001200 <__aeabi_fsub+0x280>
 80011fe:	e70a      	b.n	8001016 <__aeabi_fsub+0x96>
 8001200:	0003      	movs	r3, r0
 8001202:	4463      	add	r3, ip
 8001204:	015a      	lsls	r2, r3, #5
 8001206:	d594      	bpl.n	8001132 <__aeabi_fsub+0x1b2>
 8001208:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <__aeabi_fsub+0x338>)
 800120a:	3501      	adds	r5, #1
 800120c:	4013      	ands	r3, r2
 800120e:	e790      	b.n	8001132 <__aeabi_fsub+0x1b2>
 8001210:	4663      	mov	r3, ip
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0af      	beq.n	8001176 <__aeabi_fsub+0x1f6>
 8001216:	1e53      	subs	r3, r2, #1
 8001218:	2a01      	cmp	r2, #1
 800121a:	d015      	beq.n	8001248 <__aeabi_fsub+0x2c8>
 800121c:	2aff      	cmp	r2, #255	; 0xff
 800121e:	d02a      	beq.n	8001276 <__aeabi_fsub+0x2f6>
 8001220:	001a      	movs	r2, r3
 8001222:	e752      	b.n	80010ca <__aeabi_fsub+0x14a>
 8001224:	4662      	mov	r2, ip
 8001226:	2a00      	cmp	r2, #0
 8001228:	d191      	bne.n	800114e <__aeabi_fsub+0x1ce>
 800122a:	2800      	cmp	r0, #0
 800122c:	d198      	bne.n	8001160 <__aeabi_fsub+0x1e0>
 800122e:	2680      	movs	r6, #128	; 0x80
 8001230:	2400      	movs	r4, #0
 8001232:	22ff      	movs	r2, #255	; 0xff
 8001234:	03f6      	lsls	r6, r6, #15
 8001236:	e6ee      	b.n	8001016 <__aeabi_fsub+0x96>
 8001238:	000c      	movs	r4, r1
 800123a:	4643      	mov	r3, r8
 800123c:	0015      	movs	r5, r2
 800123e:	e77c      	b.n	800113a <__aeabi_fsub+0x1ba>
 8001240:	4663      	mov	r3, ip
 8001242:	000c      	movs	r4, r1
 8001244:	1ac6      	subs	r6, r0, r3
 8001246:	e6c9      	b.n	8000fdc <__aeabi_fsub+0x5c>
 8001248:	0003      	movs	r3, r0
 800124a:	4463      	add	r3, ip
 800124c:	2501      	movs	r5, #1
 800124e:	015a      	lsls	r2, r3, #5
 8001250:	d400      	bmi.n	8001254 <__aeabi_fsub+0x2d4>
 8001252:	e76e      	b.n	8001132 <__aeabi_fsub+0x1b2>
 8001254:	2502      	movs	r5, #2
 8001256:	e6fa      	b.n	800104e <__aeabi_fsub+0xce>
 8001258:	4663      	mov	r3, ip
 800125a:	2501      	movs	r5, #1
 800125c:	1a1b      	subs	r3, r3, r0
 800125e:	e6b8      	b.n	8000fd2 <__aeabi_fsub+0x52>
 8001260:	4664      	mov	r4, ip
 8001262:	2320      	movs	r3, #32
 8001264:	40d4      	lsrs	r4, r2
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	4662      	mov	r2, ip
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	1e5a      	subs	r2, r3, #1
 8001270:	4193      	sbcs	r3, r2
 8001272:	4323      	orrs	r3, r4
 8001274:	e7a2      	b.n	80011bc <__aeabi_fsub+0x23c>
 8001276:	4643      	mov	r3, r8
 8001278:	e774      	b.n	8001164 <__aeabi_fsub+0x1e4>
 800127a:	4661      	mov	r1, ip
 800127c:	2320      	movs	r3, #32
 800127e:	40d1      	lsrs	r1, r2
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	4662      	mov	r2, ip
 8001284:	409a      	lsls	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	4193      	sbcs	r3, r2
 800128c:	430b      	orrs	r3, r1
 800128e:	e720      	b.n	80010d2 <__aeabi_fsub+0x152>
 8001290:	4663      	mov	r3, ip
 8001292:	000c      	movs	r4, r1
 8001294:	2501      	movs	r5, #1
 8001296:	1ac3      	subs	r3, r0, r3
 8001298:	e69b      	b.n	8000fd2 <__aeabi_fsub+0x52>
 800129a:	2800      	cmp	r0, #0
 800129c:	d099      	beq.n	80011d2 <__aeabi_fsub+0x252>
 800129e:	000c      	movs	r4, r1
 80012a0:	4646      	mov	r6, r8
 80012a2:	2200      	movs	r2, #0
 80012a4:	e6b7      	b.n	8001016 <__aeabi_fsub+0x96>
 80012a6:	4646      	mov	r6, r8
 80012a8:	2200      	movs	r2, #0
 80012aa:	e6b4      	b.n	8001016 <__aeabi_fsub+0x96>
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d000      	beq.n	80012b2 <__aeabi_fsub+0x332>
 80012b0:	e73f      	b.n	8001132 <__aeabi_fsub+0x1b2>
 80012b2:	2400      	movs	r4, #0
 80012b4:	2600      	movs	r6, #0
 80012b6:	e6ae      	b.n	8001016 <__aeabi_fsub+0x96>
 80012b8:	fbffffff 	.word	0xfbffffff
 80012bc:	7dffffff 	.word	0x7dffffff

080012c0 <__aeabi_f2iz>:
 80012c0:	0241      	lsls	r1, r0, #9
 80012c2:	0042      	lsls	r2, r0, #1
 80012c4:	0fc3      	lsrs	r3, r0, #31
 80012c6:	0a49      	lsrs	r1, r1, #9
 80012c8:	2000      	movs	r0, #0
 80012ca:	0e12      	lsrs	r2, r2, #24
 80012cc:	2a7e      	cmp	r2, #126	; 0x7e
 80012ce:	dd03      	ble.n	80012d8 <__aeabi_f2iz+0x18>
 80012d0:	2a9d      	cmp	r2, #157	; 0x9d
 80012d2:	dd02      	ble.n	80012da <__aeabi_f2iz+0x1a>
 80012d4:	4a09      	ldr	r2, [pc, #36]	; (80012fc <__aeabi_f2iz+0x3c>)
 80012d6:	1898      	adds	r0, r3, r2
 80012d8:	4770      	bx	lr
 80012da:	2080      	movs	r0, #128	; 0x80
 80012dc:	0400      	lsls	r0, r0, #16
 80012de:	4301      	orrs	r1, r0
 80012e0:	2a95      	cmp	r2, #149	; 0x95
 80012e2:	dc07      	bgt.n	80012f4 <__aeabi_f2iz+0x34>
 80012e4:	2096      	movs	r0, #150	; 0x96
 80012e6:	1a82      	subs	r2, r0, r2
 80012e8:	40d1      	lsrs	r1, r2
 80012ea:	4248      	negs	r0, r1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f3      	bne.n	80012d8 <__aeabi_f2iz+0x18>
 80012f0:	0008      	movs	r0, r1
 80012f2:	e7f1      	b.n	80012d8 <__aeabi_f2iz+0x18>
 80012f4:	3a96      	subs	r2, #150	; 0x96
 80012f6:	4091      	lsls	r1, r2
 80012f8:	e7f7      	b.n	80012ea <__aeabi_f2iz+0x2a>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	7fffffff 	.word	0x7fffffff

08001300 <__aeabi_i2f>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	2800      	cmp	r0, #0
 8001304:	d013      	beq.n	800132e <__aeabi_i2f+0x2e>
 8001306:	17c3      	asrs	r3, r0, #31
 8001308:	18c5      	adds	r5, r0, r3
 800130a:	405d      	eors	r5, r3
 800130c:	0fc4      	lsrs	r4, r0, #31
 800130e:	0028      	movs	r0, r5
 8001310:	f001 ff5e 	bl	80031d0 <__clzsi2>
 8001314:	239e      	movs	r3, #158	; 0x9e
 8001316:	0001      	movs	r1, r0
 8001318:	1a1b      	subs	r3, r3, r0
 800131a:	2b96      	cmp	r3, #150	; 0x96
 800131c:	dc0f      	bgt.n	800133e <__aeabi_i2f+0x3e>
 800131e:	2808      	cmp	r0, #8
 8001320:	d031      	beq.n	8001386 <__aeabi_i2f+0x86>
 8001322:	3908      	subs	r1, #8
 8001324:	408d      	lsls	r5, r1
 8001326:	026d      	lsls	r5, r5, #9
 8001328:	0a6d      	lsrs	r5, r5, #9
 800132a:	b2d8      	uxtb	r0, r3
 800132c:	e002      	b.n	8001334 <__aeabi_i2f+0x34>
 800132e:	2400      	movs	r4, #0
 8001330:	2000      	movs	r0, #0
 8001332:	2500      	movs	r5, #0
 8001334:	05c0      	lsls	r0, r0, #23
 8001336:	4328      	orrs	r0, r5
 8001338:	07e4      	lsls	r4, r4, #31
 800133a:	4320      	orrs	r0, r4
 800133c:	bd70      	pop	{r4, r5, r6, pc}
 800133e:	2b99      	cmp	r3, #153	; 0x99
 8001340:	dd0c      	ble.n	800135c <__aeabi_i2f+0x5c>
 8001342:	2205      	movs	r2, #5
 8001344:	1a12      	subs	r2, r2, r0
 8001346:	0028      	movs	r0, r5
 8001348:	40d0      	lsrs	r0, r2
 800134a:	0002      	movs	r2, r0
 800134c:	0008      	movs	r0, r1
 800134e:	301b      	adds	r0, #27
 8001350:	4085      	lsls	r5, r0
 8001352:	0028      	movs	r0, r5
 8001354:	1e45      	subs	r5, r0, #1
 8001356:	41a8      	sbcs	r0, r5
 8001358:	4302      	orrs	r2, r0
 800135a:	0015      	movs	r5, r2
 800135c:	2905      	cmp	r1, #5
 800135e:	dc16      	bgt.n	800138e <__aeabi_i2f+0x8e>
 8001360:	002a      	movs	r2, r5
 8001362:	480f      	ldr	r0, [pc, #60]	; (80013a0 <__aeabi_i2f+0xa0>)
 8001364:	4002      	ands	r2, r0
 8001366:	076e      	lsls	r6, r5, #29
 8001368:	d009      	beq.n	800137e <__aeabi_i2f+0x7e>
 800136a:	260f      	movs	r6, #15
 800136c:	4035      	ands	r5, r6
 800136e:	2d04      	cmp	r5, #4
 8001370:	d005      	beq.n	800137e <__aeabi_i2f+0x7e>
 8001372:	3204      	adds	r2, #4
 8001374:	0155      	lsls	r5, r2, #5
 8001376:	d502      	bpl.n	800137e <__aeabi_i2f+0x7e>
 8001378:	239f      	movs	r3, #159	; 0x9f
 800137a:	4002      	ands	r2, r0
 800137c:	1a5b      	subs	r3, r3, r1
 800137e:	0192      	lsls	r2, r2, #6
 8001380:	0a55      	lsrs	r5, r2, #9
 8001382:	b2d8      	uxtb	r0, r3
 8001384:	e7d6      	b.n	8001334 <__aeabi_i2f+0x34>
 8001386:	026d      	lsls	r5, r5, #9
 8001388:	2096      	movs	r0, #150	; 0x96
 800138a:	0a6d      	lsrs	r5, r5, #9
 800138c:	e7d2      	b.n	8001334 <__aeabi_i2f+0x34>
 800138e:	1f4a      	subs	r2, r1, #5
 8001390:	4095      	lsls	r5, r2
 8001392:	002a      	movs	r2, r5
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <__aeabi_i2f+0xa0>)
 8001396:	4002      	ands	r2, r0
 8001398:	076e      	lsls	r6, r5, #29
 800139a:	d0f0      	beq.n	800137e <__aeabi_i2f+0x7e>
 800139c:	e7e5      	b.n	800136a <__aeabi_i2f+0x6a>
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	fbffffff 	.word	0xfbffffff

080013a4 <__aeabi_dadd>:
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	464f      	mov	r7, r9
 80013a8:	4646      	mov	r6, r8
 80013aa:	46d6      	mov	lr, sl
 80013ac:	0004      	movs	r4, r0
 80013ae:	b5c0      	push	{r6, r7, lr}
 80013b0:	001f      	movs	r7, r3
 80013b2:	030b      	lsls	r3, r1, #12
 80013b4:	0010      	movs	r0, r2
 80013b6:	004e      	lsls	r6, r1, #1
 80013b8:	0a5b      	lsrs	r3, r3, #9
 80013ba:	0fcd      	lsrs	r5, r1, #31
 80013bc:	0f61      	lsrs	r1, r4, #29
 80013be:	007a      	lsls	r2, r7, #1
 80013c0:	4319      	orrs	r1, r3
 80013c2:	00e3      	lsls	r3, r4, #3
 80013c4:	033c      	lsls	r4, r7, #12
 80013c6:	0fff      	lsrs	r7, r7, #31
 80013c8:	46bc      	mov	ip, r7
 80013ca:	0a64      	lsrs	r4, r4, #9
 80013cc:	0f47      	lsrs	r7, r0, #29
 80013ce:	4327      	orrs	r7, r4
 80013d0:	0d76      	lsrs	r6, r6, #21
 80013d2:	0d52      	lsrs	r2, r2, #21
 80013d4:	00c0      	lsls	r0, r0, #3
 80013d6:	46b9      	mov	r9, r7
 80013d8:	4680      	mov	r8, r0
 80013da:	1ab7      	subs	r7, r6, r2
 80013dc:	4565      	cmp	r5, ip
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x3e>
 80013e0:	e09b      	b.n	800151a <__aeabi_dadd+0x176>
 80013e2:	2f00      	cmp	r7, #0
 80013e4:	dc00      	bgt.n	80013e8 <__aeabi_dadd+0x44>
 80013e6:	e084      	b.n	80014f2 <__aeabi_dadd+0x14e>
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d100      	bne.n	80013ee <__aeabi_dadd+0x4a>
 80013ec:	e0be      	b.n	800156c <__aeabi_dadd+0x1c8>
 80013ee:	4ac8      	ldr	r2, [pc, #800]	; (8001710 <__aeabi_dadd+0x36c>)
 80013f0:	4296      	cmp	r6, r2
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dadd+0x52>
 80013f4:	e124      	b.n	8001640 <__aeabi_dadd+0x29c>
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	464c      	mov	r4, r9
 80013fa:	0412      	lsls	r2, r2, #16
 80013fc:	4314      	orrs	r4, r2
 80013fe:	46a1      	mov	r9, r4
 8001400:	2f38      	cmp	r7, #56	; 0x38
 8001402:	dd00      	ble.n	8001406 <__aeabi_dadd+0x62>
 8001404:	e167      	b.n	80016d6 <__aeabi_dadd+0x332>
 8001406:	2f1f      	cmp	r7, #31
 8001408:	dd00      	ble.n	800140c <__aeabi_dadd+0x68>
 800140a:	e1d6      	b.n	80017ba <__aeabi_dadd+0x416>
 800140c:	2220      	movs	r2, #32
 800140e:	464c      	mov	r4, r9
 8001410:	1bd2      	subs	r2, r2, r7
 8001412:	4094      	lsls	r4, r2
 8001414:	46a2      	mov	sl, r4
 8001416:	4644      	mov	r4, r8
 8001418:	40fc      	lsrs	r4, r7
 800141a:	0020      	movs	r0, r4
 800141c:	4654      	mov	r4, sl
 800141e:	4304      	orrs	r4, r0
 8001420:	4640      	mov	r0, r8
 8001422:	4090      	lsls	r0, r2
 8001424:	1e42      	subs	r2, r0, #1
 8001426:	4190      	sbcs	r0, r2
 8001428:	464a      	mov	r2, r9
 800142a:	40fa      	lsrs	r2, r7
 800142c:	4304      	orrs	r4, r0
 800142e:	1a89      	subs	r1, r1, r2
 8001430:	1b1c      	subs	r4, r3, r4
 8001432:	42a3      	cmp	r3, r4
 8001434:	4192      	sbcs	r2, r2
 8001436:	4252      	negs	r2, r2
 8001438:	1a8b      	subs	r3, r1, r2
 800143a:	469a      	mov	sl, r3
 800143c:	4653      	mov	r3, sl
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	d400      	bmi.n	8001444 <__aeabi_dadd+0xa0>
 8001442:	e0d4      	b.n	80015ee <__aeabi_dadd+0x24a>
 8001444:	4653      	mov	r3, sl
 8001446:	025a      	lsls	r2, r3, #9
 8001448:	0a53      	lsrs	r3, r2, #9
 800144a:	469a      	mov	sl, r3
 800144c:	4653      	mov	r3, sl
 800144e:	2b00      	cmp	r3, #0
 8001450:	d100      	bne.n	8001454 <__aeabi_dadd+0xb0>
 8001452:	e104      	b.n	800165e <__aeabi_dadd+0x2ba>
 8001454:	4650      	mov	r0, sl
 8001456:	f001 febb 	bl	80031d0 <__clzsi2>
 800145a:	0003      	movs	r3, r0
 800145c:	3b08      	subs	r3, #8
 800145e:	2220      	movs	r2, #32
 8001460:	0020      	movs	r0, r4
 8001462:	1ad2      	subs	r2, r2, r3
 8001464:	4651      	mov	r1, sl
 8001466:	40d0      	lsrs	r0, r2
 8001468:	4099      	lsls	r1, r3
 800146a:	0002      	movs	r2, r0
 800146c:	409c      	lsls	r4, r3
 800146e:	430a      	orrs	r2, r1
 8001470:	42b3      	cmp	r3, r6
 8001472:	da00      	bge.n	8001476 <__aeabi_dadd+0xd2>
 8001474:	e102      	b.n	800167c <__aeabi_dadd+0x2d8>
 8001476:	1b9b      	subs	r3, r3, r6
 8001478:	1c59      	adds	r1, r3, #1
 800147a:	291f      	cmp	r1, #31
 800147c:	dd00      	ble.n	8001480 <__aeabi_dadd+0xdc>
 800147e:	e0a7      	b.n	80015d0 <__aeabi_dadd+0x22c>
 8001480:	2320      	movs	r3, #32
 8001482:	0010      	movs	r0, r2
 8001484:	0026      	movs	r6, r4
 8001486:	1a5b      	subs	r3, r3, r1
 8001488:	409c      	lsls	r4, r3
 800148a:	4098      	lsls	r0, r3
 800148c:	40ce      	lsrs	r6, r1
 800148e:	40ca      	lsrs	r2, r1
 8001490:	1e63      	subs	r3, r4, #1
 8001492:	419c      	sbcs	r4, r3
 8001494:	4330      	orrs	r0, r6
 8001496:	4692      	mov	sl, r2
 8001498:	2600      	movs	r6, #0
 800149a:	4304      	orrs	r4, r0
 800149c:	0763      	lsls	r3, r4, #29
 800149e:	d009      	beq.n	80014b4 <__aeabi_dadd+0x110>
 80014a0:	230f      	movs	r3, #15
 80014a2:	4023      	ands	r3, r4
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d005      	beq.n	80014b4 <__aeabi_dadd+0x110>
 80014a8:	1d23      	adds	r3, r4, #4
 80014aa:	42a3      	cmp	r3, r4
 80014ac:	41a4      	sbcs	r4, r4
 80014ae:	4264      	negs	r4, r4
 80014b0:	44a2      	add	sl, r4
 80014b2:	001c      	movs	r4, r3
 80014b4:	4653      	mov	r3, sl
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	d400      	bmi.n	80014bc <__aeabi_dadd+0x118>
 80014ba:	e09b      	b.n	80015f4 <__aeabi_dadd+0x250>
 80014bc:	4b94      	ldr	r3, [pc, #592]	; (8001710 <__aeabi_dadd+0x36c>)
 80014be:	3601      	adds	r6, #1
 80014c0:	429e      	cmp	r6, r3
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dadd+0x122>
 80014c4:	e0b8      	b.n	8001638 <__aeabi_dadd+0x294>
 80014c6:	4653      	mov	r3, sl
 80014c8:	4992      	ldr	r1, [pc, #584]	; (8001714 <__aeabi_dadd+0x370>)
 80014ca:	08e4      	lsrs	r4, r4, #3
 80014cc:	400b      	ands	r3, r1
 80014ce:	0019      	movs	r1, r3
 80014d0:	075b      	lsls	r3, r3, #29
 80014d2:	4323      	orrs	r3, r4
 80014d4:	0572      	lsls	r2, r6, #21
 80014d6:	024c      	lsls	r4, r1, #9
 80014d8:	0b24      	lsrs	r4, r4, #12
 80014da:	0d52      	lsrs	r2, r2, #21
 80014dc:	0512      	lsls	r2, r2, #20
 80014de:	07ed      	lsls	r5, r5, #31
 80014e0:	4322      	orrs	r2, r4
 80014e2:	432a      	orrs	r2, r5
 80014e4:	0018      	movs	r0, r3
 80014e6:	0011      	movs	r1, r2
 80014e8:	bce0      	pop	{r5, r6, r7}
 80014ea:	46ba      	mov	sl, r7
 80014ec:	46b1      	mov	r9, r6
 80014ee:	46a8      	mov	r8, r5
 80014f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f2:	2f00      	cmp	r7, #0
 80014f4:	d048      	beq.n	8001588 <__aeabi_dadd+0x1e4>
 80014f6:	1b97      	subs	r7, r2, r6
 80014f8:	2e00      	cmp	r6, #0
 80014fa:	d000      	beq.n	80014fe <__aeabi_dadd+0x15a>
 80014fc:	e10e      	b.n	800171c <__aeabi_dadd+0x378>
 80014fe:	000c      	movs	r4, r1
 8001500:	431c      	orrs	r4, r3
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x162>
 8001504:	e1b7      	b.n	8001876 <__aeabi_dadd+0x4d2>
 8001506:	1e7c      	subs	r4, r7, #1
 8001508:	2f01      	cmp	r7, #1
 800150a:	d100      	bne.n	800150e <__aeabi_dadd+0x16a>
 800150c:	e226      	b.n	800195c <__aeabi_dadd+0x5b8>
 800150e:	4d80      	ldr	r5, [pc, #512]	; (8001710 <__aeabi_dadd+0x36c>)
 8001510:	42af      	cmp	r7, r5
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x172>
 8001514:	e1d5      	b.n	80018c2 <__aeabi_dadd+0x51e>
 8001516:	0027      	movs	r7, r4
 8001518:	e107      	b.n	800172a <__aeabi_dadd+0x386>
 800151a:	2f00      	cmp	r7, #0
 800151c:	dc00      	bgt.n	8001520 <__aeabi_dadd+0x17c>
 800151e:	e0b2      	b.n	8001686 <__aeabi_dadd+0x2e2>
 8001520:	2a00      	cmp	r2, #0
 8001522:	d047      	beq.n	80015b4 <__aeabi_dadd+0x210>
 8001524:	4a7a      	ldr	r2, [pc, #488]	; (8001710 <__aeabi_dadd+0x36c>)
 8001526:	4296      	cmp	r6, r2
 8001528:	d100      	bne.n	800152c <__aeabi_dadd+0x188>
 800152a:	e089      	b.n	8001640 <__aeabi_dadd+0x29c>
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	464c      	mov	r4, r9
 8001530:	0412      	lsls	r2, r2, #16
 8001532:	4314      	orrs	r4, r2
 8001534:	46a1      	mov	r9, r4
 8001536:	2f38      	cmp	r7, #56	; 0x38
 8001538:	dc6b      	bgt.n	8001612 <__aeabi_dadd+0x26e>
 800153a:	2f1f      	cmp	r7, #31
 800153c:	dc00      	bgt.n	8001540 <__aeabi_dadd+0x19c>
 800153e:	e16e      	b.n	800181e <__aeabi_dadd+0x47a>
 8001540:	003a      	movs	r2, r7
 8001542:	4648      	mov	r0, r9
 8001544:	3a20      	subs	r2, #32
 8001546:	40d0      	lsrs	r0, r2
 8001548:	4684      	mov	ip, r0
 800154a:	2f20      	cmp	r7, #32
 800154c:	d007      	beq.n	800155e <__aeabi_dadd+0x1ba>
 800154e:	2240      	movs	r2, #64	; 0x40
 8001550:	4648      	mov	r0, r9
 8001552:	1bd2      	subs	r2, r2, r7
 8001554:	4090      	lsls	r0, r2
 8001556:	0002      	movs	r2, r0
 8001558:	4640      	mov	r0, r8
 800155a:	4310      	orrs	r0, r2
 800155c:	4680      	mov	r8, r0
 800155e:	4640      	mov	r0, r8
 8001560:	1e42      	subs	r2, r0, #1
 8001562:	4190      	sbcs	r0, r2
 8001564:	4662      	mov	r2, ip
 8001566:	0004      	movs	r4, r0
 8001568:	4314      	orrs	r4, r2
 800156a:	e057      	b.n	800161c <__aeabi_dadd+0x278>
 800156c:	464a      	mov	r2, r9
 800156e:	4302      	orrs	r2, r0
 8001570:	d100      	bne.n	8001574 <__aeabi_dadd+0x1d0>
 8001572:	e103      	b.n	800177c <__aeabi_dadd+0x3d8>
 8001574:	1e7a      	subs	r2, r7, #1
 8001576:	2f01      	cmp	r7, #1
 8001578:	d100      	bne.n	800157c <__aeabi_dadd+0x1d8>
 800157a:	e193      	b.n	80018a4 <__aeabi_dadd+0x500>
 800157c:	4c64      	ldr	r4, [pc, #400]	; (8001710 <__aeabi_dadd+0x36c>)
 800157e:	42a7      	cmp	r7, r4
 8001580:	d100      	bne.n	8001584 <__aeabi_dadd+0x1e0>
 8001582:	e18a      	b.n	800189a <__aeabi_dadd+0x4f6>
 8001584:	0017      	movs	r7, r2
 8001586:	e73b      	b.n	8001400 <__aeabi_dadd+0x5c>
 8001588:	4c63      	ldr	r4, [pc, #396]	; (8001718 <__aeabi_dadd+0x374>)
 800158a:	1c72      	adds	r2, r6, #1
 800158c:	4222      	tst	r2, r4
 800158e:	d000      	beq.n	8001592 <__aeabi_dadd+0x1ee>
 8001590:	e0e0      	b.n	8001754 <__aeabi_dadd+0x3b0>
 8001592:	000a      	movs	r2, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	2e00      	cmp	r6, #0
 8001598:	d000      	beq.n	800159c <__aeabi_dadd+0x1f8>
 800159a:	e174      	b.n	8001886 <__aeabi_dadd+0x4e2>
 800159c:	2a00      	cmp	r2, #0
 800159e:	d100      	bne.n	80015a2 <__aeabi_dadd+0x1fe>
 80015a0:	e1d0      	b.n	8001944 <__aeabi_dadd+0x5a0>
 80015a2:	464a      	mov	r2, r9
 80015a4:	4302      	orrs	r2, r0
 80015a6:	d000      	beq.n	80015aa <__aeabi_dadd+0x206>
 80015a8:	e1e3      	b.n	8001972 <__aeabi_dadd+0x5ce>
 80015aa:	074a      	lsls	r2, r1, #29
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	08c9      	lsrs	r1, r1, #3
 80015b2:	e029      	b.n	8001608 <__aeabi_dadd+0x264>
 80015b4:	464a      	mov	r2, r9
 80015b6:	4302      	orrs	r2, r0
 80015b8:	d100      	bne.n	80015bc <__aeabi_dadd+0x218>
 80015ba:	e17d      	b.n	80018b8 <__aeabi_dadd+0x514>
 80015bc:	1e7a      	subs	r2, r7, #1
 80015be:	2f01      	cmp	r7, #1
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x220>
 80015c2:	e0e0      	b.n	8001786 <__aeabi_dadd+0x3e2>
 80015c4:	4c52      	ldr	r4, [pc, #328]	; (8001710 <__aeabi_dadd+0x36c>)
 80015c6:	42a7      	cmp	r7, r4
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x228>
 80015ca:	e166      	b.n	800189a <__aeabi_dadd+0x4f6>
 80015cc:	0017      	movs	r7, r2
 80015ce:	e7b2      	b.n	8001536 <__aeabi_dadd+0x192>
 80015d0:	0010      	movs	r0, r2
 80015d2:	3b1f      	subs	r3, #31
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	2920      	cmp	r1, #32
 80015d8:	d003      	beq.n	80015e2 <__aeabi_dadd+0x23e>
 80015da:	2340      	movs	r3, #64	; 0x40
 80015dc:	1a5b      	subs	r3, r3, r1
 80015de:	409a      	lsls	r2, r3
 80015e0:	4314      	orrs	r4, r2
 80015e2:	1e63      	subs	r3, r4, #1
 80015e4:	419c      	sbcs	r4, r3
 80015e6:	2300      	movs	r3, #0
 80015e8:	2600      	movs	r6, #0
 80015ea:	469a      	mov	sl, r3
 80015ec:	4304      	orrs	r4, r0
 80015ee:	0763      	lsls	r3, r4, #29
 80015f0:	d000      	beq.n	80015f4 <__aeabi_dadd+0x250>
 80015f2:	e755      	b.n	80014a0 <__aeabi_dadd+0xfc>
 80015f4:	4652      	mov	r2, sl
 80015f6:	08e3      	lsrs	r3, r4, #3
 80015f8:	0752      	lsls	r2, r2, #29
 80015fa:	4313      	orrs	r3, r2
 80015fc:	4652      	mov	r2, sl
 80015fe:	0037      	movs	r7, r6
 8001600:	08d1      	lsrs	r1, r2, #3
 8001602:	4a43      	ldr	r2, [pc, #268]	; (8001710 <__aeabi_dadd+0x36c>)
 8001604:	4297      	cmp	r7, r2
 8001606:	d01f      	beq.n	8001648 <__aeabi_dadd+0x2a4>
 8001608:	0309      	lsls	r1, r1, #12
 800160a:	057a      	lsls	r2, r7, #21
 800160c:	0b0c      	lsrs	r4, r1, #12
 800160e:	0d52      	lsrs	r2, r2, #21
 8001610:	e764      	b.n	80014dc <__aeabi_dadd+0x138>
 8001612:	4642      	mov	r2, r8
 8001614:	464c      	mov	r4, r9
 8001616:	4314      	orrs	r4, r2
 8001618:	1e62      	subs	r2, r4, #1
 800161a:	4194      	sbcs	r4, r2
 800161c:	18e4      	adds	r4, r4, r3
 800161e:	429c      	cmp	r4, r3
 8001620:	4192      	sbcs	r2, r2
 8001622:	4252      	negs	r2, r2
 8001624:	4692      	mov	sl, r2
 8001626:	448a      	add	sl, r1
 8001628:	4653      	mov	r3, sl
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	d5df      	bpl.n	80015ee <__aeabi_dadd+0x24a>
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <__aeabi_dadd+0x36c>)
 8001630:	3601      	adds	r6, #1
 8001632:	429e      	cmp	r6, r3
 8001634:	d000      	beq.n	8001638 <__aeabi_dadd+0x294>
 8001636:	e0b3      	b.n	80017a0 <__aeabi_dadd+0x3fc>
 8001638:	0032      	movs	r2, r6
 800163a:	2400      	movs	r4, #0
 800163c:	2300      	movs	r3, #0
 800163e:	e74d      	b.n	80014dc <__aeabi_dadd+0x138>
 8001640:	074a      	lsls	r2, r1, #29
 8001642:	08db      	lsrs	r3, r3, #3
 8001644:	4313      	orrs	r3, r2
 8001646:	08c9      	lsrs	r1, r1, #3
 8001648:	001a      	movs	r2, r3
 800164a:	430a      	orrs	r2, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x2ac>
 800164e:	e200      	b.n	8001a52 <__aeabi_dadd+0x6ae>
 8001650:	2480      	movs	r4, #128	; 0x80
 8001652:	0324      	lsls	r4, r4, #12
 8001654:	430c      	orrs	r4, r1
 8001656:	0324      	lsls	r4, r4, #12
 8001658:	4a2d      	ldr	r2, [pc, #180]	; (8001710 <__aeabi_dadd+0x36c>)
 800165a:	0b24      	lsrs	r4, r4, #12
 800165c:	e73e      	b.n	80014dc <__aeabi_dadd+0x138>
 800165e:	0020      	movs	r0, r4
 8001660:	f001 fdb6 	bl	80031d0 <__clzsi2>
 8001664:	0003      	movs	r3, r0
 8001666:	3318      	adds	r3, #24
 8001668:	2b1f      	cmp	r3, #31
 800166a:	dc00      	bgt.n	800166e <__aeabi_dadd+0x2ca>
 800166c:	e6f7      	b.n	800145e <__aeabi_dadd+0xba>
 800166e:	0022      	movs	r2, r4
 8001670:	3808      	subs	r0, #8
 8001672:	4082      	lsls	r2, r0
 8001674:	2400      	movs	r4, #0
 8001676:	42b3      	cmp	r3, r6
 8001678:	db00      	blt.n	800167c <__aeabi_dadd+0x2d8>
 800167a:	e6fc      	b.n	8001476 <__aeabi_dadd+0xd2>
 800167c:	1af6      	subs	r6, r6, r3
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <__aeabi_dadd+0x370>)
 8001680:	401a      	ands	r2, r3
 8001682:	4692      	mov	sl, r2
 8001684:	e70a      	b.n	800149c <__aeabi_dadd+0xf8>
 8001686:	2f00      	cmp	r7, #0
 8001688:	d02b      	beq.n	80016e2 <__aeabi_dadd+0x33e>
 800168a:	1b97      	subs	r7, r2, r6
 800168c:	2e00      	cmp	r6, #0
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x2ee>
 8001690:	e0b8      	b.n	8001804 <__aeabi_dadd+0x460>
 8001692:	4c1f      	ldr	r4, [pc, #124]	; (8001710 <__aeabi_dadd+0x36c>)
 8001694:	42a2      	cmp	r2, r4
 8001696:	d100      	bne.n	800169a <__aeabi_dadd+0x2f6>
 8001698:	e11c      	b.n	80018d4 <__aeabi_dadd+0x530>
 800169a:	2480      	movs	r4, #128	; 0x80
 800169c:	0424      	lsls	r4, r4, #16
 800169e:	4321      	orrs	r1, r4
 80016a0:	2f38      	cmp	r7, #56	; 0x38
 80016a2:	dd00      	ble.n	80016a6 <__aeabi_dadd+0x302>
 80016a4:	e11e      	b.n	80018e4 <__aeabi_dadd+0x540>
 80016a6:	2f1f      	cmp	r7, #31
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dadd+0x308>
 80016aa:	e19e      	b.n	80019ea <__aeabi_dadd+0x646>
 80016ac:	2620      	movs	r6, #32
 80016ae:	000c      	movs	r4, r1
 80016b0:	1bf6      	subs	r6, r6, r7
 80016b2:	0018      	movs	r0, r3
 80016b4:	40b3      	lsls	r3, r6
 80016b6:	40b4      	lsls	r4, r6
 80016b8:	40f8      	lsrs	r0, r7
 80016ba:	1e5e      	subs	r6, r3, #1
 80016bc:	41b3      	sbcs	r3, r6
 80016be:	40f9      	lsrs	r1, r7
 80016c0:	4304      	orrs	r4, r0
 80016c2:	431c      	orrs	r4, r3
 80016c4:	4489      	add	r9, r1
 80016c6:	4444      	add	r4, r8
 80016c8:	4544      	cmp	r4, r8
 80016ca:	419b      	sbcs	r3, r3
 80016cc:	425b      	negs	r3, r3
 80016ce:	444b      	add	r3, r9
 80016d0:	469a      	mov	sl, r3
 80016d2:	0016      	movs	r6, r2
 80016d4:	e7a8      	b.n	8001628 <__aeabi_dadd+0x284>
 80016d6:	4642      	mov	r2, r8
 80016d8:	464c      	mov	r4, r9
 80016da:	4314      	orrs	r4, r2
 80016dc:	1e62      	subs	r2, r4, #1
 80016de:	4194      	sbcs	r4, r2
 80016e0:	e6a6      	b.n	8001430 <__aeabi_dadd+0x8c>
 80016e2:	4c0d      	ldr	r4, [pc, #52]	; (8001718 <__aeabi_dadd+0x374>)
 80016e4:	1c72      	adds	r2, r6, #1
 80016e6:	4222      	tst	r2, r4
 80016e8:	d000      	beq.n	80016ec <__aeabi_dadd+0x348>
 80016ea:	e0a8      	b.n	800183e <__aeabi_dadd+0x49a>
 80016ec:	000a      	movs	r2, r1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	2e00      	cmp	r6, #0
 80016f2:	d000      	beq.n	80016f6 <__aeabi_dadd+0x352>
 80016f4:	e10a      	b.n	800190c <__aeabi_dadd+0x568>
 80016f6:	2a00      	cmp	r2, #0
 80016f8:	d100      	bne.n	80016fc <__aeabi_dadd+0x358>
 80016fa:	e15e      	b.n	80019ba <__aeabi_dadd+0x616>
 80016fc:	464a      	mov	r2, r9
 80016fe:	4302      	orrs	r2, r0
 8001700:	d000      	beq.n	8001704 <__aeabi_dadd+0x360>
 8001702:	e161      	b.n	80019c8 <__aeabi_dadd+0x624>
 8001704:	074a      	lsls	r2, r1, #29
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	4313      	orrs	r3, r2
 800170a:	08c9      	lsrs	r1, r1, #3
 800170c:	e77c      	b.n	8001608 <__aeabi_dadd+0x264>
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	000007ff 	.word	0x000007ff
 8001714:	ff7fffff 	.word	0xff7fffff
 8001718:	000007fe 	.word	0x000007fe
 800171c:	4ccf      	ldr	r4, [pc, #828]	; (8001a5c <__aeabi_dadd+0x6b8>)
 800171e:	42a2      	cmp	r2, r4
 8001720:	d100      	bne.n	8001724 <__aeabi_dadd+0x380>
 8001722:	e0ce      	b.n	80018c2 <__aeabi_dadd+0x51e>
 8001724:	2480      	movs	r4, #128	; 0x80
 8001726:	0424      	lsls	r4, r4, #16
 8001728:	4321      	orrs	r1, r4
 800172a:	2f38      	cmp	r7, #56	; 0x38
 800172c:	dc5b      	bgt.n	80017e6 <__aeabi_dadd+0x442>
 800172e:	2f1f      	cmp	r7, #31
 8001730:	dd00      	ble.n	8001734 <__aeabi_dadd+0x390>
 8001732:	e0dc      	b.n	80018ee <__aeabi_dadd+0x54a>
 8001734:	2520      	movs	r5, #32
 8001736:	000c      	movs	r4, r1
 8001738:	1bed      	subs	r5, r5, r7
 800173a:	001e      	movs	r6, r3
 800173c:	40ab      	lsls	r3, r5
 800173e:	40ac      	lsls	r4, r5
 8001740:	40fe      	lsrs	r6, r7
 8001742:	1e5d      	subs	r5, r3, #1
 8001744:	41ab      	sbcs	r3, r5
 8001746:	4334      	orrs	r4, r6
 8001748:	40f9      	lsrs	r1, r7
 800174a:	431c      	orrs	r4, r3
 800174c:	464b      	mov	r3, r9
 800174e:	1a5b      	subs	r3, r3, r1
 8001750:	4699      	mov	r9, r3
 8001752:	e04c      	b.n	80017ee <__aeabi_dadd+0x44a>
 8001754:	464a      	mov	r2, r9
 8001756:	1a1c      	subs	r4, r3, r0
 8001758:	1a88      	subs	r0, r1, r2
 800175a:	42a3      	cmp	r3, r4
 800175c:	4192      	sbcs	r2, r2
 800175e:	4252      	negs	r2, r2
 8001760:	4692      	mov	sl, r2
 8001762:	0002      	movs	r2, r0
 8001764:	4650      	mov	r0, sl
 8001766:	1a12      	subs	r2, r2, r0
 8001768:	4692      	mov	sl, r2
 800176a:	0212      	lsls	r2, r2, #8
 800176c:	d478      	bmi.n	8001860 <__aeabi_dadd+0x4bc>
 800176e:	4653      	mov	r3, sl
 8001770:	4323      	orrs	r3, r4
 8001772:	d000      	beq.n	8001776 <__aeabi_dadd+0x3d2>
 8001774:	e66a      	b.n	800144c <__aeabi_dadd+0xa8>
 8001776:	2100      	movs	r1, #0
 8001778:	2500      	movs	r5, #0
 800177a:	e745      	b.n	8001608 <__aeabi_dadd+0x264>
 800177c:	074a      	lsls	r2, r1, #29
 800177e:	08db      	lsrs	r3, r3, #3
 8001780:	4313      	orrs	r3, r2
 8001782:	08c9      	lsrs	r1, r1, #3
 8001784:	e73d      	b.n	8001602 <__aeabi_dadd+0x25e>
 8001786:	181c      	adds	r4, r3, r0
 8001788:	429c      	cmp	r4, r3
 800178a:	419b      	sbcs	r3, r3
 800178c:	4449      	add	r1, r9
 800178e:	468a      	mov	sl, r1
 8001790:	425b      	negs	r3, r3
 8001792:	449a      	add	sl, r3
 8001794:	4653      	mov	r3, sl
 8001796:	2601      	movs	r6, #1
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	d400      	bmi.n	800179e <__aeabi_dadd+0x3fa>
 800179c:	e727      	b.n	80015ee <__aeabi_dadd+0x24a>
 800179e:	2602      	movs	r6, #2
 80017a0:	4652      	mov	r2, sl
 80017a2:	4baf      	ldr	r3, [pc, #700]	; (8001a60 <__aeabi_dadd+0x6bc>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	401a      	ands	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	4021      	ands	r1, r4
 80017ac:	0862      	lsrs	r2, r4, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	07dc      	lsls	r4, r3, #31
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	469a      	mov	sl, r3
 80017b6:	4314      	orrs	r4, r2
 80017b8:	e670      	b.n	800149c <__aeabi_dadd+0xf8>
 80017ba:	003a      	movs	r2, r7
 80017bc:	464c      	mov	r4, r9
 80017be:	3a20      	subs	r2, #32
 80017c0:	40d4      	lsrs	r4, r2
 80017c2:	46a4      	mov	ip, r4
 80017c4:	2f20      	cmp	r7, #32
 80017c6:	d007      	beq.n	80017d8 <__aeabi_dadd+0x434>
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	4648      	mov	r0, r9
 80017cc:	1bd2      	subs	r2, r2, r7
 80017ce:	4090      	lsls	r0, r2
 80017d0:	0002      	movs	r2, r0
 80017d2:	4640      	mov	r0, r8
 80017d4:	4310      	orrs	r0, r2
 80017d6:	4680      	mov	r8, r0
 80017d8:	4640      	mov	r0, r8
 80017da:	1e42      	subs	r2, r0, #1
 80017dc:	4190      	sbcs	r0, r2
 80017de:	4662      	mov	r2, ip
 80017e0:	0004      	movs	r4, r0
 80017e2:	4314      	orrs	r4, r2
 80017e4:	e624      	b.n	8001430 <__aeabi_dadd+0x8c>
 80017e6:	4319      	orrs	r1, r3
 80017e8:	000c      	movs	r4, r1
 80017ea:	1e63      	subs	r3, r4, #1
 80017ec:	419c      	sbcs	r4, r3
 80017ee:	4643      	mov	r3, r8
 80017f0:	1b1c      	subs	r4, r3, r4
 80017f2:	45a0      	cmp	r8, r4
 80017f4:	419b      	sbcs	r3, r3
 80017f6:	4649      	mov	r1, r9
 80017f8:	425b      	negs	r3, r3
 80017fa:	1acb      	subs	r3, r1, r3
 80017fc:	469a      	mov	sl, r3
 80017fe:	4665      	mov	r5, ip
 8001800:	0016      	movs	r6, r2
 8001802:	e61b      	b.n	800143c <__aeabi_dadd+0x98>
 8001804:	000c      	movs	r4, r1
 8001806:	431c      	orrs	r4, r3
 8001808:	d100      	bne.n	800180c <__aeabi_dadd+0x468>
 800180a:	e0c7      	b.n	800199c <__aeabi_dadd+0x5f8>
 800180c:	1e7c      	subs	r4, r7, #1
 800180e:	2f01      	cmp	r7, #1
 8001810:	d100      	bne.n	8001814 <__aeabi_dadd+0x470>
 8001812:	e0f9      	b.n	8001a08 <__aeabi_dadd+0x664>
 8001814:	4e91      	ldr	r6, [pc, #580]	; (8001a5c <__aeabi_dadd+0x6b8>)
 8001816:	42b7      	cmp	r7, r6
 8001818:	d05c      	beq.n	80018d4 <__aeabi_dadd+0x530>
 800181a:	0027      	movs	r7, r4
 800181c:	e740      	b.n	80016a0 <__aeabi_dadd+0x2fc>
 800181e:	2220      	movs	r2, #32
 8001820:	464c      	mov	r4, r9
 8001822:	4640      	mov	r0, r8
 8001824:	1bd2      	subs	r2, r2, r7
 8001826:	4094      	lsls	r4, r2
 8001828:	40f8      	lsrs	r0, r7
 800182a:	4304      	orrs	r4, r0
 800182c:	4640      	mov	r0, r8
 800182e:	4090      	lsls	r0, r2
 8001830:	1e42      	subs	r2, r0, #1
 8001832:	4190      	sbcs	r0, r2
 8001834:	464a      	mov	r2, r9
 8001836:	40fa      	lsrs	r2, r7
 8001838:	4304      	orrs	r4, r0
 800183a:	1889      	adds	r1, r1, r2
 800183c:	e6ee      	b.n	800161c <__aeabi_dadd+0x278>
 800183e:	4c87      	ldr	r4, [pc, #540]	; (8001a5c <__aeabi_dadd+0x6b8>)
 8001840:	42a2      	cmp	r2, r4
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x4a2>
 8001844:	e6f9      	b.n	800163a <__aeabi_dadd+0x296>
 8001846:	1818      	adds	r0, r3, r0
 8001848:	4298      	cmp	r0, r3
 800184a:	419b      	sbcs	r3, r3
 800184c:	4449      	add	r1, r9
 800184e:	425b      	negs	r3, r3
 8001850:	18cb      	adds	r3, r1, r3
 8001852:	07dc      	lsls	r4, r3, #31
 8001854:	0840      	lsrs	r0, r0, #1
 8001856:	085b      	lsrs	r3, r3, #1
 8001858:	469a      	mov	sl, r3
 800185a:	0016      	movs	r6, r2
 800185c:	4304      	orrs	r4, r0
 800185e:	e6c6      	b.n	80015ee <__aeabi_dadd+0x24a>
 8001860:	4642      	mov	r2, r8
 8001862:	1ad4      	subs	r4, r2, r3
 8001864:	45a0      	cmp	r8, r4
 8001866:	4180      	sbcs	r0, r0
 8001868:	464b      	mov	r3, r9
 800186a:	4240      	negs	r0, r0
 800186c:	1a59      	subs	r1, r3, r1
 800186e:	1a0b      	subs	r3, r1, r0
 8001870:	469a      	mov	sl, r3
 8001872:	4665      	mov	r5, ip
 8001874:	e5ea      	b.n	800144c <__aeabi_dadd+0xa8>
 8001876:	464b      	mov	r3, r9
 8001878:	464a      	mov	r2, r9
 800187a:	08c0      	lsrs	r0, r0, #3
 800187c:	075b      	lsls	r3, r3, #29
 800187e:	4665      	mov	r5, ip
 8001880:	4303      	orrs	r3, r0
 8001882:	08d1      	lsrs	r1, r2, #3
 8001884:	e6bd      	b.n	8001602 <__aeabi_dadd+0x25e>
 8001886:	2a00      	cmp	r2, #0
 8001888:	d000      	beq.n	800188c <__aeabi_dadd+0x4e8>
 800188a:	e08e      	b.n	80019aa <__aeabi_dadd+0x606>
 800188c:	464b      	mov	r3, r9
 800188e:	4303      	orrs	r3, r0
 8001890:	d117      	bne.n	80018c2 <__aeabi_dadd+0x51e>
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	2500      	movs	r5, #0
 8001896:	0309      	lsls	r1, r1, #12
 8001898:	e6da      	b.n	8001650 <__aeabi_dadd+0x2ac>
 800189a:	074a      	lsls	r2, r1, #29
 800189c:	08db      	lsrs	r3, r3, #3
 800189e:	4313      	orrs	r3, r2
 80018a0:	08c9      	lsrs	r1, r1, #3
 80018a2:	e6d1      	b.n	8001648 <__aeabi_dadd+0x2a4>
 80018a4:	1a1c      	subs	r4, r3, r0
 80018a6:	464a      	mov	r2, r9
 80018a8:	42a3      	cmp	r3, r4
 80018aa:	419b      	sbcs	r3, r3
 80018ac:	1a89      	subs	r1, r1, r2
 80018ae:	425b      	negs	r3, r3
 80018b0:	1acb      	subs	r3, r1, r3
 80018b2:	469a      	mov	sl, r3
 80018b4:	2601      	movs	r6, #1
 80018b6:	e5c1      	b.n	800143c <__aeabi_dadd+0x98>
 80018b8:	074a      	lsls	r2, r1, #29
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	4313      	orrs	r3, r2
 80018be:	08c9      	lsrs	r1, r1, #3
 80018c0:	e69f      	b.n	8001602 <__aeabi_dadd+0x25e>
 80018c2:	4643      	mov	r3, r8
 80018c4:	08d8      	lsrs	r0, r3, #3
 80018c6:	464b      	mov	r3, r9
 80018c8:	464a      	mov	r2, r9
 80018ca:	075b      	lsls	r3, r3, #29
 80018cc:	4665      	mov	r5, ip
 80018ce:	4303      	orrs	r3, r0
 80018d0:	08d1      	lsrs	r1, r2, #3
 80018d2:	e6b9      	b.n	8001648 <__aeabi_dadd+0x2a4>
 80018d4:	4643      	mov	r3, r8
 80018d6:	08d8      	lsrs	r0, r3, #3
 80018d8:	464b      	mov	r3, r9
 80018da:	464a      	mov	r2, r9
 80018dc:	075b      	lsls	r3, r3, #29
 80018de:	4303      	orrs	r3, r0
 80018e0:	08d1      	lsrs	r1, r2, #3
 80018e2:	e6b1      	b.n	8001648 <__aeabi_dadd+0x2a4>
 80018e4:	4319      	orrs	r1, r3
 80018e6:	000c      	movs	r4, r1
 80018e8:	1e63      	subs	r3, r4, #1
 80018ea:	419c      	sbcs	r4, r3
 80018ec:	e6eb      	b.n	80016c6 <__aeabi_dadd+0x322>
 80018ee:	003c      	movs	r4, r7
 80018f0:	000d      	movs	r5, r1
 80018f2:	3c20      	subs	r4, #32
 80018f4:	40e5      	lsrs	r5, r4
 80018f6:	2f20      	cmp	r7, #32
 80018f8:	d003      	beq.n	8001902 <__aeabi_dadd+0x55e>
 80018fa:	2440      	movs	r4, #64	; 0x40
 80018fc:	1be4      	subs	r4, r4, r7
 80018fe:	40a1      	lsls	r1, r4
 8001900:	430b      	orrs	r3, r1
 8001902:	001c      	movs	r4, r3
 8001904:	1e63      	subs	r3, r4, #1
 8001906:	419c      	sbcs	r4, r3
 8001908:	432c      	orrs	r4, r5
 800190a:	e770      	b.n	80017ee <__aeabi_dadd+0x44a>
 800190c:	2a00      	cmp	r2, #0
 800190e:	d0e1      	beq.n	80018d4 <__aeabi_dadd+0x530>
 8001910:	464a      	mov	r2, r9
 8001912:	4302      	orrs	r2, r0
 8001914:	d0c1      	beq.n	800189a <__aeabi_dadd+0x4f6>
 8001916:	074a      	lsls	r2, r1, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	08c9      	lsrs	r1, r1, #3
 8001920:	0312      	lsls	r2, r2, #12
 8001922:	4211      	tst	r1, r2
 8001924:	d008      	beq.n	8001938 <__aeabi_dadd+0x594>
 8001926:	4648      	mov	r0, r9
 8001928:	08c4      	lsrs	r4, r0, #3
 800192a:	4214      	tst	r4, r2
 800192c:	d104      	bne.n	8001938 <__aeabi_dadd+0x594>
 800192e:	4643      	mov	r3, r8
 8001930:	0021      	movs	r1, r4
 8001932:	08db      	lsrs	r3, r3, #3
 8001934:	0742      	lsls	r2, r0, #29
 8001936:	4313      	orrs	r3, r2
 8001938:	0f5a      	lsrs	r2, r3, #29
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	0752      	lsls	r2, r2, #29
 800193e:	08db      	lsrs	r3, r3, #3
 8001940:	4313      	orrs	r3, r2
 8001942:	e681      	b.n	8001648 <__aeabi_dadd+0x2a4>
 8001944:	464b      	mov	r3, r9
 8001946:	4303      	orrs	r3, r0
 8001948:	d100      	bne.n	800194c <__aeabi_dadd+0x5a8>
 800194a:	e714      	b.n	8001776 <__aeabi_dadd+0x3d2>
 800194c:	464b      	mov	r3, r9
 800194e:	464a      	mov	r2, r9
 8001950:	08c0      	lsrs	r0, r0, #3
 8001952:	075b      	lsls	r3, r3, #29
 8001954:	4665      	mov	r5, ip
 8001956:	4303      	orrs	r3, r0
 8001958:	08d1      	lsrs	r1, r2, #3
 800195a:	e655      	b.n	8001608 <__aeabi_dadd+0x264>
 800195c:	1ac4      	subs	r4, r0, r3
 800195e:	45a0      	cmp	r8, r4
 8001960:	4180      	sbcs	r0, r0
 8001962:	464b      	mov	r3, r9
 8001964:	4240      	negs	r0, r0
 8001966:	1a59      	subs	r1, r3, r1
 8001968:	1a0b      	subs	r3, r1, r0
 800196a:	469a      	mov	sl, r3
 800196c:	4665      	mov	r5, ip
 800196e:	2601      	movs	r6, #1
 8001970:	e564      	b.n	800143c <__aeabi_dadd+0x98>
 8001972:	1a1c      	subs	r4, r3, r0
 8001974:	464a      	mov	r2, r9
 8001976:	42a3      	cmp	r3, r4
 8001978:	4180      	sbcs	r0, r0
 800197a:	1a8a      	subs	r2, r1, r2
 800197c:	4240      	negs	r0, r0
 800197e:	1a12      	subs	r2, r2, r0
 8001980:	4692      	mov	sl, r2
 8001982:	0212      	lsls	r2, r2, #8
 8001984:	d549      	bpl.n	8001a1a <__aeabi_dadd+0x676>
 8001986:	4642      	mov	r2, r8
 8001988:	1ad4      	subs	r4, r2, r3
 800198a:	45a0      	cmp	r8, r4
 800198c:	4180      	sbcs	r0, r0
 800198e:	464b      	mov	r3, r9
 8001990:	4240      	negs	r0, r0
 8001992:	1a59      	subs	r1, r3, r1
 8001994:	1a0b      	subs	r3, r1, r0
 8001996:	469a      	mov	sl, r3
 8001998:	4665      	mov	r5, ip
 800199a:	e57f      	b.n	800149c <__aeabi_dadd+0xf8>
 800199c:	464b      	mov	r3, r9
 800199e:	464a      	mov	r2, r9
 80019a0:	08c0      	lsrs	r0, r0, #3
 80019a2:	075b      	lsls	r3, r3, #29
 80019a4:	4303      	orrs	r3, r0
 80019a6:	08d1      	lsrs	r1, r2, #3
 80019a8:	e62b      	b.n	8001602 <__aeabi_dadd+0x25e>
 80019aa:	464a      	mov	r2, r9
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	4302      	orrs	r2, r0
 80019b0:	d138      	bne.n	8001a24 <__aeabi_dadd+0x680>
 80019b2:	074a      	lsls	r2, r1, #29
 80019b4:	4313      	orrs	r3, r2
 80019b6:	08c9      	lsrs	r1, r1, #3
 80019b8:	e646      	b.n	8001648 <__aeabi_dadd+0x2a4>
 80019ba:	464b      	mov	r3, r9
 80019bc:	464a      	mov	r2, r9
 80019be:	08c0      	lsrs	r0, r0, #3
 80019c0:	075b      	lsls	r3, r3, #29
 80019c2:	4303      	orrs	r3, r0
 80019c4:	08d1      	lsrs	r1, r2, #3
 80019c6:	e61f      	b.n	8001608 <__aeabi_dadd+0x264>
 80019c8:	181c      	adds	r4, r3, r0
 80019ca:	429c      	cmp	r4, r3
 80019cc:	419b      	sbcs	r3, r3
 80019ce:	4449      	add	r1, r9
 80019d0:	468a      	mov	sl, r1
 80019d2:	425b      	negs	r3, r3
 80019d4:	449a      	add	sl, r3
 80019d6:	4653      	mov	r3, sl
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	d400      	bmi.n	80019de <__aeabi_dadd+0x63a>
 80019dc:	e607      	b.n	80015ee <__aeabi_dadd+0x24a>
 80019de:	4652      	mov	r2, sl
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <__aeabi_dadd+0x6bc>)
 80019e2:	2601      	movs	r6, #1
 80019e4:	401a      	ands	r2, r3
 80019e6:	4692      	mov	sl, r2
 80019e8:	e601      	b.n	80015ee <__aeabi_dadd+0x24a>
 80019ea:	003c      	movs	r4, r7
 80019ec:	000e      	movs	r6, r1
 80019ee:	3c20      	subs	r4, #32
 80019f0:	40e6      	lsrs	r6, r4
 80019f2:	2f20      	cmp	r7, #32
 80019f4:	d003      	beq.n	80019fe <__aeabi_dadd+0x65a>
 80019f6:	2440      	movs	r4, #64	; 0x40
 80019f8:	1be4      	subs	r4, r4, r7
 80019fa:	40a1      	lsls	r1, r4
 80019fc:	430b      	orrs	r3, r1
 80019fe:	001c      	movs	r4, r3
 8001a00:	1e63      	subs	r3, r4, #1
 8001a02:	419c      	sbcs	r4, r3
 8001a04:	4334      	orrs	r4, r6
 8001a06:	e65e      	b.n	80016c6 <__aeabi_dadd+0x322>
 8001a08:	4443      	add	r3, r8
 8001a0a:	4283      	cmp	r3, r0
 8001a0c:	4180      	sbcs	r0, r0
 8001a0e:	4449      	add	r1, r9
 8001a10:	468a      	mov	sl, r1
 8001a12:	4240      	negs	r0, r0
 8001a14:	001c      	movs	r4, r3
 8001a16:	4482      	add	sl, r0
 8001a18:	e6bc      	b.n	8001794 <__aeabi_dadd+0x3f0>
 8001a1a:	4653      	mov	r3, sl
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dadd+0x67e>
 8001a20:	e6a9      	b.n	8001776 <__aeabi_dadd+0x3d2>
 8001a22:	e5e4      	b.n	80015ee <__aeabi_dadd+0x24a>
 8001a24:	074a      	lsls	r2, r1, #29
 8001a26:	4313      	orrs	r3, r2
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	08c9      	lsrs	r1, r1, #3
 8001a2c:	0312      	lsls	r2, r2, #12
 8001a2e:	4211      	tst	r1, r2
 8001a30:	d009      	beq.n	8001a46 <__aeabi_dadd+0x6a2>
 8001a32:	4648      	mov	r0, r9
 8001a34:	08c4      	lsrs	r4, r0, #3
 8001a36:	4214      	tst	r4, r2
 8001a38:	d105      	bne.n	8001a46 <__aeabi_dadd+0x6a2>
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	4665      	mov	r5, ip
 8001a3e:	0021      	movs	r1, r4
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	0742      	lsls	r2, r0, #29
 8001a44:	4313      	orrs	r3, r2
 8001a46:	0f5a      	lsrs	r2, r3, #29
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	08db      	lsrs	r3, r3, #3
 8001a4c:	0752      	lsls	r2, r2, #29
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	e5fa      	b.n	8001648 <__aeabi_dadd+0x2a4>
 8001a52:	2300      	movs	r3, #0
 8001a54:	4a01      	ldr	r2, [pc, #4]	; (8001a5c <__aeabi_dadd+0x6b8>)
 8001a56:	001c      	movs	r4, r3
 8001a58:	e540      	b.n	80014dc <__aeabi_dadd+0x138>
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	000007ff 	.word	0x000007ff
 8001a60:	ff7fffff 	.word	0xff7fffff

08001a64 <__aeabi_ddiv>:
 8001a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a66:	4657      	mov	r7, sl
 8001a68:	464e      	mov	r6, r9
 8001a6a:	4645      	mov	r5, r8
 8001a6c:	46de      	mov	lr, fp
 8001a6e:	b5e0      	push	{r5, r6, r7, lr}
 8001a70:	030c      	lsls	r4, r1, #12
 8001a72:	001f      	movs	r7, r3
 8001a74:	004b      	lsls	r3, r1, #1
 8001a76:	4681      	mov	r9, r0
 8001a78:	4692      	mov	sl, r2
 8001a7a:	0005      	movs	r5, r0
 8001a7c:	b085      	sub	sp, #20
 8001a7e:	0b24      	lsrs	r4, r4, #12
 8001a80:	0d5b      	lsrs	r3, r3, #21
 8001a82:	0fce      	lsrs	r6, r1, #31
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_ddiv+0x26>
 8001a88:	e152      	b.n	8001d30 <__aeabi_ddiv+0x2cc>
 8001a8a:	4ad2      	ldr	r2, [pc, #840]	; (8001dd4 <__aeabi_ddiv+0x370>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x2e>
 8001a90:	e16e      	b.n	8001d70 <__aeabi_ddiv+0x30c>
 8001a92:	0f42      	lsrs	r2, r0, #29
 8001a94:	00e4      	lsls	r4, r4, #3
 8001a96:	4314      	orrs	r4, r2
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	4322      	orrs	r2, r4
 8001a9e:	4690      	mov	r8, r2
 8001aa0:	4acd      	ldr	r2, [pc, #820]	; (8001dd8 <__aeabi_ddiv+0x374>)
 8001aa2:	00c5      	lsls	r5, r0, #3
 8001aa4:	4693      	mov	fp, r2
 8001aa6:	449b      	add	fp, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	4699      	mov	r9, r3
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	033c      	lsls	r4, r7, #12
 8001ab0:	007b      	lsls	r3, r7, #1
 8001ab2:	4650      	mov	r0, sl
 8001ab4:	0b24      	lsrs	r4, r4, #12
 8001ab6:	0d5b      	lsrs	r3, r3, #21
 8001ab8:	0fff      	lsrs	r7, r7, #31
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_ddiv+0x5c>
 8001abe:	e11a      	b.n	8001cf6 <__aeabi_ddiv+0x292>
 8001ac0:	4ac4      	ldr	r2, [pc, #784]	; (8001dd4 <__aeabi_ddiv+0x370>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_ddiv+0x64>
 8001ac6:	e15e      	b.n	8001d86 <__aeabi_ddiv+0x322>
 8001ac8:	0f42      	lsrs	r2, r0, #29
 8001aca:	00e4      	lsls	r4, r4, #3
 8001acc:	4322      	orrs	r2, r4
 8001ace:	2480      	movs	r4, #128	; 0x80
 8001ad0:	0424      	lsls	r4, r4, #16
 8001ad2:	4314      	orrs	r4, r2
 8001ad4:	4ac0      	ldr	r2, [pc, #768]	; (8001dd8 <__aeabi_ddiv+0x374>)
 8001ad6:	00c1      	lsls	r1, r0, #3
 8001ad8:	4694      	mov	ip, r2
 8001ada:	465a      	mov	r2, fp
 8001adc:	4463      	add	r3, ip
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	469b      	mov	fp, r3
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	0033      	movs	r3, r6
 8001ae6:	407b      	eors	r3, r7
 8001ae8:	469a      	mov	sl, r3
 8001aea:	464b      	mov	r3, r9
 8001aec:	2b0f      	cmp	r3, #15
 8001aee:	d827      	bhi.n	8001b40 <__aeabi_ddiv+0xdc>
 8001af0:	4aba      	ldr	r2, [pc, #744]	; (8001ddc <__aeabi_ddiv+0x378>)
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	58d3      	ldr	r3, [r2, r3]
 8001af6:	469f      	mov	pc, r3
 8001af8:	46b2      	mov	sl, r6
 8001afa:	9b00      	ldr	r3, [sp, #0]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d016      	beq.n	8001b2e <__aeabi_ddiv+0xca>
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0xa2>
 8001b04:	e287      	b.n	8002016 <__aeabi_ddiv+0x5b2>
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d000      	beq.n	8001b0c <__aeabi_ddiv+0xa8>
 8001b0a:	e0d5      	b.n	8001cb8 <__aeabi_ddiv+0x254>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2500      	movs	r5, #0
 8001b12:	051b      	lsls	r3, r3, #20
 8001b14:	4313      	orrs	r3, r2
 8001b16:	4652      	mov	r2, sl
 8001b18:	07d2      	lsls	r2, r2, #31
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	0028      	movs	r0, r5
 8001b1e:	0019      	movs	r1, r3
 8001b20:	b005      	add	sp, #20
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2500      	movs	r5, #0
 8001b32:	4ba8      	ldr	r3, [pc, #672]	; (8001dd4 <__aeabi_ddiv+0x370>)
 8001b34:	e7ed      	b.n	8001b12 <__aeabi_ddiv+0xae>
 8001b36:	46ba      	mov	sl, r7
 8001b38:	46a0      	mov	r8, r4
 8001b3a:	000d      	movs	r5, r1
 8001b3c:	9000      	str	r0, [sp, #0]
 8001b3e:	e7dc      	b.n	8001afa <__aeabi_ddiv+0x96>
 8001b40:	4544      	cmp	r4, r8
 8001b42:	d200      	bcs.n	8001b46 <__aeabi_ddiv+0xe2>
 8001b44:	e1c4      	b.n	8001ed0 <__aeabi_ddiv+0x46c>
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0xe6>
 8001b48:	e1bf      	b.n	8001eca <__aeabi_ddiv+0x466>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	469c      	mov	ip, r3
 8001b50:	002e      	movs	r6, r5
 8001b52:	4640      	mov	r0, r8
 8001b54:	2500      	movs	r5, #0
 8001b56:	44e3      	add	fp, ip
 8001b58:	0223      	lsls	r3, r4, #8
 8001b5a:	0e0c      	lsrs	r4, r1, #24
 8001b5c:	431c      	orrs	r4, r3
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	4699      	mov	r9, r3
 8001b62:	0423      	lsls	r3, r4, #16
 8001b64:	020a      	lsls	r2, r1, #8
 8001b66:	0c1f      	lsrs	r7, r3, #16
 8001b68:	4649      	mov	r1, r9
 8001b6a:	9200      	str	r2, [sp, #0]
 8001b6c:	9701      	str	r7, [sp, #4]
 8001b6e:	f7fe fb77 	bl	8000260 <__aeabi_uidivmod>
 8001b72:	0002      	movs	r2, r0
 8001b74:	437a      	muls	r2, r7
 8001b76:	040b      	lsls	r3, r1, #16
 8001b78:	0c31      	lsrs	r1, r6, #16
 8001b7a:	4680      	mov	r8, r0
 8001b7c:	4319      	orrs	r1, r3
 8001b7e:	428a      	cmp	r2, r1
 8001b80:	d907      	bls.n	8001b92 <__aeabi_ddiv+0x12e>
 8001b82:	2301      	movs	r3, #1
 8001b84:	425b      	negs	r3, r3
 8001b86:	469c      	mov	ip, r3
 8001b88:	1909      	adds	r1, r1, r4
 8001b8a:	44e0      	add	r8, ip
 8001b8c:	428c      	cmp	r4, r1
 8001b8e:	d800      	bhi.n	8001b92 <__aeabi_ddiv+0x12e>
 8001b90:	e201      	b.n	8001f96 <__aeabi_ddiv+0x532>
 8001b92:	1a88      	subs	r0, r1, r2
 8001b94:	4649      	mov	r1, r9
 8001b96:	f7fe fb63 	bl	8000260 <__aeabi_uidivmod>
 8001b9a:	9a01      	ldr	r2, [sp, #4]
 8001b9c:	0436      	lsls	r6, r6, #16
 8001b9e:	4342      	muls	r2, r0
 8001ba0:	0409      	lsls	r1, r1, #16
 8001ba2:	0c36      	lsrs	r6, r6, #16
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	430e      	orrs	r6, r1
 8001ba8:	42b2      	cmp	r2, r6
 8001baa:	d904      	bls.n	8001bb6 <__aeabi_ddiv+0x152>
 8001bac:	1936      	adds	r6, r6, r4
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	42b4      	cmp	r4, r6
 8001bb2:	d800      	bhi.n	8001bb6 <__aeabi_ddiv+0x152>
 8001bb4:	e1e9      	b.n	8001f8a <__aeabi_ddiv+0x526>
 8001bb6:	1ab0      	subs	r0, r6, r2
 8001bb8:	4642      	mov	r2, r8
 8001bba:	9e00      	ldr	r6, [sp, #0]
 8001bbc:	0412      	lsls	r2, r2, #16
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	0c33      	lsrs	r3, r6, #16
 8001bc2:	001f      	movs	r7, r3
 8001bc4:	0c11      	lsrs	r1, r2, #16
 8001bc6:	4690      	mov	r8, r2
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	0413      	lsls	r3, r2, #16
 8001bcc:	0432      	lsls	r2, r6, #16
 8001bce:	0c16      	lsrs	r6, r2, #16
 8001bd0:	0032      	movs	r2, r6
 8001bd2:	0c1b      	lsrs	r3, r3, #16
 8001bd4:	435a      	muls	r2, r3
 8001bd6:	9603      	str	r6, [sp, #12]
 8001bd8:	437b      	muls	r3, r7
 8001bda:	434e      	muls	r6, r1
 8001bdc:	4379      	muls	r1, r7
 8001bde:	0c17      	lsrs	r7, r2, #16
 8001be0:	46bc      	mov	ip, r7
 8001be2:	199b      	adds	r3, r3, r6
 8001be4:	4463      	add	r3, ip
 8001be6:	429e      	cmp	r6, r3
 8001be8:	d903      	bls.n	8001bf2 <__aeabi_ddiv+0x18e>
 8001bea:	2680      	movs	r6, #128	; 0x80
 8001bec:	0276      	lsls	r6, r6, #9
 8001bee:	46b4      	mov	ip, r6
 8001bf0:	4461      	add	r1, ip
 8001bf2:	0c1e      	lsrs	r6, r3, #16
 8001bf4:	1871      	adds	r1, r6, r1
 8001bf6:	0416      	lsls	r6, r2, #16
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	0c36      	lsrs	r6, r6, #16
 8001bfc:	199e      	adds	r6, r3, r6
 8001bfe:	4288      	cmp	r0, r1
 8001c00:	d302      	bcc.n	8001c08 <__aeabi_ddiv+0x1a4>
 8001c02:	d112      	bne.n	8001c2a <__aeabi_ddiv+0x1c6>
 8001c04:	42b5      	cmp	r5, r6
 8001c06:	d210      	bcs.n	8001c2a <__aeabi_ddiv+0x1c6>
 8001c08:	4643      	mov	r3, r8
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	9b00      	ldr	r3, [sp, #0]
 8001c0e:	469c      	mov	ip, r3
 8001c10:	4465      	add	r5, ip
 8001c12:	001f      	movs	r7, r3
 8001c14:	429d      	cmp	r5, r3
 8001c16:	419b      	sbcs	r3, r3
 8001c18:	425b      	negs	r3, r3
 8001c1a:	191b      	adds	r3, r3, r4
 8001c1c:	18c0      	adds	r0, r0, r3
 8001c1e:	4284      	cmp	r4, r0
 8001c20:	d200      	bcs.n	8001c24 <__aeabi_ddiv+0x1c0>
 8001c22:	e19e      	b.n	8001f62 <__aeabi_ddiv+0x4fe>
 8001c24:	d100      	bne.n	8001c28 <__aeabi_ddiv+0x1c4>
 8001c26:	e199      	b.n	8001f5c <__aeabi_ddiv+0x4f8>
 8001c28:	4690      	mov	r8, r2
 8001c2a:	1bae      	subs	r6, r5, r6
 8001c2c:	42b5      	cmp	r5, r6
 8001c2e:	41ad      	sbcs	r5, r5
 8001c30:	1a40      	subs	r0, r0, r1
 8001c32:	426d      	negs	r5, r5
 8001c34:	1b40      	subs	r0, r0, r5
 8001c36:	4284      	cmp	r4, r0
 8001c38:	d100      	bne.n	8001c3c <__aeabi_ddiv+0x1d8>
 8001c3a:	e1d2      	b.n	8001fe2 <__aeabi_ddiv+0x57e>
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	f7fe fb0f 	bl	8000260 <__aeabi_uidivmod>
 8001c42:	9a01      	ldr	r2, [sp, #4]
 8001c44:	040b      	lsls	r3, r1, #16
 8001c46:	4342      	muls	r2, r0
 8001c48:	0c31      	lsrs	r1, r6, #16
 8001c4a:	0005      	movs	r5, r0
 8001c4c:	4319      	orrs	r1, r3
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d900      	bls.n	8001c54 <__aeabi_ddiv+0x1f0>
 8001c52:	e16c      	b.n	8001f2e <__aeabi_ddiv+0x4ca>
 8001c54:	1a88      	subs	r0, r1, r2
 8001c56:	4649      	mov	r1, r9
 8001c58:	f7fe fb02 	bl	8000260 <__aeabi_uidivmod>
 8001c5c:	9a01      	ldr	r2, [sp, #4]
 8001c5e:	0436      	lsls	r6, r6, #16
 8001c60:	4342      	muls	r2, r0
 8001c62:	0409      	lsls	r1, r1, #16
 8001c64:	0c36      	lsrs	r6, r6, #16
 8001c66:	0003      	movs	r3, r0
 8001c68:	430e      	orrs	r6, r1
 8001c6a:	42b2      	cmp	r2, r6
 8001c6c:	d900      	bls.n	8001c70 <__aeabi_ddiv+0x20c>
 8001c6e:	e153      	b.n	8001f18 <__aeabi_ddiv+0x4b4>
 8001c70:	9803      	ldr	r0, [sp, #12]
 8001c72:	1ab6      	subs	r6, r6, r2
 8001c74:	0002      	movs	r2, r0
 8001c76:	042d      	lsls	r5, r5, #16
 8001c78:	431d      	orrs	r5, r3
 8001c7a:	9f02      	ldr	r7, [sp, #8]
 8001c7c:	042b      	lsls	r3, r5, #16
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	435a      	muls	r2, r3
 8001c82:	437b      	muls	r3, r7
 8001c84:	469c      	mov	ip, r3
 8001c86:	0c29      	lsrs	r1, r5, #16
 8001c88:	4348      	muls	r0, r1
 8001c8a:	0c13      	lsrs	r3, r2, #16
 8001c8c:	4484      	add	ip, r0
 8001c8e:	4463      	add	r3, ip
 8001c90:	4379      	muls	r1, r7
 8001c92:	4298      	cmp	r0, r3
 8001c94:	d903      	bls.n	8001c9e <__aeabi_ddiv+0x23a>
 8001c96:	2080      	movs	r0, #128	; 0x80
 8001c98:	0240      	lsls	r0, r0, #9
 8001c9a:	4684      	mov	ip, r0
 8001c9c:	4461      	add	r1, ip
 8001c9e:	0c18      	lsrs	r0, r3, #16
 8001ca0:	0412      	lsls	r2, r2, #16
 8001ca2:	041b      	lsls	r3, r3, #16
 8001ca4:	0c12      	lsrs	r2, r2, #16
 8001ca6:	1840      	adds	r0, r0, r1
 8001ca8:	189b      	adds	r3, r3, r2
 8001caa:	4286      	cmp	r6, r0
 8001cac:	d200      	bcs.n	8001cb0 <__aeabi_ddiv+0x24c>
 8001cae:	e100      	b.n	8001eb2 <__aeabi_ddiv+0x44e>
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_ddiv+0x250>
 8001cb2:	e0fb      	b.n	8001eac <__aeabi_ddiv+0x448>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	431d      	orrs	r5, r3
 8001cb8:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <__aeabi_ddiv+0x37c>)
 8001cba:	445b      	add	r3, fp
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	dc00      	bgt.n	8001cc2 <__aeabi_ddiv+0x25e>
 8001cc0:	e0aa      	b.n	8001e18 <__aeabi_ddiv+0x3b4>
 8001cc2:	076a      	lsls	r2, r5, #29
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_ddiv+0x264>
 8001cc6:	e13d      	b.n	8001f44 <__aeabi_ddiv+0x4e0>
 8001cc8:	08e9      	lsrs	r1, r5, #3
 8001cca:	4642      	mov	r2, r8
 8001ccc:	01d2      	lsls	r2, r2, #7
 8001cce:	d506      	bpl.n	8001cde <__aeabi_ddiv+0x27a>
 8001cd0:	4642      	mov	r2, r8
 8001cd2:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <__aeabi_ddiv+0x380>)
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	4690      	mov	r8, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	445b      	add	r3, fp
 8001cde:	4a42      	ldr	r2, [pc, #264]	; (8001de8 <__aeabi_ddiv+0x384>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_ddiv+0x282>
 8001ce4:	e723      	b.n	8001b2e <__aeabi_ddiv+0xca>
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	055b      	lsls	r3, r3, #21
 8001cea:	0755      	lsls	r5, r2, #29
 8001cec:	0252      	lsls	r2, r2, #9
 8001cee:	430d      	orrs	r5, r1
 8001cf0:	0b12      	lsrs	r2, r2, #12
 8001cf2:	0d5b      	lsrs	r3, r3, #21
 8001cf4:	e70d      	b.n	8001b12 <__aeabi_ddiv+0xae>
 8001cf6:	4651      	mov	r1, sl
 8001cf8:	4321      	orrs	r1, r4
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_ddiv+0x29a>
 8001cfc:	e07c      	b.n	8001df8 <__aeabi_ddiv+0x394>
 8001cfe:	2c00      	cmp	r4, #0
 8001d00:	d100      	bne.n	8001d04 <__aeabi_ddiv+0x2a0>
 8001d02:	e0fb      	b.n	8001efc <__aeabi_ddiv+0x498>
 8001d04:	0020      	movs	r0, r4
 8001d06:	f001 fa63 	bl	80031d0 <__clzsi2>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	3a0b      	subs	r2, #11
 8001d0e:	231d      	movs	r3, #29
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	4652      	mov	r2, sl
 8001d14:	0001      	movs	r1, r0
 8001d16:	40da      	lsrs	r2, r3
 8001d18:	4653      	mov	r3, sl
 8001d1a:	3908      	subs	r1, #8
 8001d1c:	408b      	lsls	r3, r1
 8001d1e:	408c      	lsls	r4, r1
 8001d20:	0019      	movs	r1, r3
 8001d22:	4314      	orrs	r4, r2
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <__aeabi_ddiv+0x388>)
 8001d26:	4458      	add	r0, fp
 8001d28:	469b      	mov	fp, r3
 8001d2a:	4483      	add	fp, r0
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	e6d9      	b.n	8001ae4 <__aeabi_ddiv+0x80>
 8001d30:	0003      	movs	r3, r0
 8001d32:	4323      	orrs	r3, r4
 8001d34:	4698      	mov	r8, r3
 8001d36:	d044      	beq.n	8001dc2 <__aeabi_ddiv+0x35e>
 8001d38:	2c00      	cmp	r4, #0
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_ddiv+0x2da>
 8001d3c:	e0cf      	b.n	8001ede <__aeabi_ddiv+0x47a>
 8001d3e:	0020      	movs	r0, r4
 8001d40:	f001 fa46 	bl	80031d0 <__clzsi2>
 8001d44:	0001      	movs	r1, r0
 8001d46:	0002      	movs	r2, r0
 8001d48:	390b      	subs	r1, #11
 8001d4a:	231d      	movs	r3, #29
 8001d4c:	1a5b      	subs	r3, r3, r1
 8001d4e:	4649      	mov	r1, r9
 8001d50:	0010      	movs	r0, r2
 8001d52:	40d9      	lsrs	r1, r3
 8001d54:	3808      	subs	r0, #8
 8001d56:	4084      	lsls	r4, r0
 8001d58:	000b      	movs	r3, r1
 8001d5a:	464d      	mov	r5, r9
 8001d5c:	4323      	orrs	r3, r4
 8001d5e:	4698      	mov	r8, r3
 8001d60:	4085      	lsls	r5, r0
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <__aeabi_ddiv+0x38c>)
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	469b      	mov	fp, r3
 8001d68:	2300      	movs	r3, #0
 8001d6a:	4699      	mov	r9, r3
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	e69e      	b.n	8001aae <__aeabi_ddiv+0x4a>
 8001d70:	0002      	movs	r2, r0
 8001d72:	4322      	orrs	r2, r4
 8001d74:	4690      	mov	r8, r2
 8001d76:	d11d      	bne.n	8001db4 <__aeabi_ddiv+0x350>
 8001d78:	2208      	movs	r2, #8
 8001d7a:	469b      	mov	fp, r3
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	2500      	movs	r5, #0
 8001d80:	4691      	mov	r9, r2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	e693      	b.n	8001aae <__aeabi_ddiv+0x4a>
 8001d86:	4651      	mov	r1, sl
 8001d88:	4321      	orrs	r1, r4
 8001d8a:	d109      	bne.n	8001da0 <__aeabi_ddiv+0x33c>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	464a      	mov	r2, r9
 8001d90:	431a      	orrs	r2, r3
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <__aeabi_ddiv+0x390>)
 8001d94:	4691      	mov	r9, r2
 8001d96:	469c      	mov	ip, r3
 8001d98:	2400      	movs	r4, #0
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	44e3      	add	fp, ip
 8001d9e:	e6a1      	b.n	8001ae4 <__aeabi_ddiv+0x80>
 8001da0:	2303      	movs	r3, #3
 8001da2:	464a      	mov	r2, r9
 8001da4:	431a      	orrs	r2, r3
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <__aeabi_ddiv+0x390>)
 8001da8:	4691      	mov	r9, r2
 8001daa:	469c      	mov	ip, r3
 8001dac:	4651      	mov	r1, sl
 8001dae:	2003      	movs	r0, #3
 8001db0:	44e3      	add	fp, ip
 8001db2:	e697      	b.n	8001ae4 <__aeabi_ddiv+0x80>
 8001db4:	220c      	movs	r2, #12
 8001db6:	469b      	mov	fp, r3
 8001db8:	2303      	movs	r3, #3
 8001dba:	46a0      	mov	r8, r4
 8001dbc:	4691      	mov	r9, r2
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	e675      	b.n	8001aae <__aeabi_ddiv+0x4a>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	4699      	mov	r9, r3
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	469b      	mov	fp, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	2500      	movs	r5, #0
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	e66d      	b.n	8001aae <__aeabi_ddiv+0x4a>
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	fffffc01 	.word	0xfffffc01
 8001ddc:	08011040 	.word	0x08011040
 8001de0:	000003ff 	.word	0x000003ff
 8001de4:	feffffff 	.word	0xfeffffff
 8001de8:	000007fe 	.word	0x000007fe
 8001dec:	000003f3 	.word	0x000003f3
 8001df0:	fffffc0d 	.word	0xfffffc0d
 8001df4:	fffff801 	.word	0xfffff801
 8001df8:	464a      	mov	r2, r9
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	4691      	mov	r9, r2
 8001e00:	2400      	movs	r4, #0
 8001e02:	2001      	movs	r0, #1
 8001e04:	e66e      	b.n	8001ae4 <__aeabi_ddiv+0x80>
 8001e06:	2300      	movs	r3, #0
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	469a      	mov	sl, r3
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <__aeabi_ddiv+0x5cc>)
 8001e10:	0312      	lsls	r2, r2, #12
 8001e12:	e67e      	b.n	8001b12 <__aeabi_ddiv+0xae>
 8001e14:	2501      	movs	r5, #1
 8001e16:	426d      	negs	r5, r5
 8001e18:	2201      	movs	r2, #1
 8001e1a:	1ad2      	subs	r2, r2, r3
 8001e1c:	2a38      	cmp	r2, #56	; 0x38
 8001e1e:	dd00      	ble.n	8001e22 <__aeabi_ddiv+0x3be>
 8001e20:	e674      	b.n	8001b0c <__aeabi_ddiv+0xa8>
 8001e22:	2a1f      	cmp	r2, #31
 8001e24:	dc00      	bgt.n	8001e28 <__aeabi_ddiv+0x3c4>
 8001e26:	e0bd      	b.n	8001fa4 <__aeabi_ddiv+0x540>
 8001e28:	211f      	movs	r1, #31
 8001e2a:	4249      	negs	r1, r1
 8001e2c:	1acb      	subs	r3, r1, r3
 8001e2e:	4641      	mov	r1, r8
 8001e30:	40d9      	lsrs	r1, r3
 8001e32:	000b      	movs	r3, r1
 8001e34:	2a20      	cmp	r2, #32
 8001e36:	d004      	beq.n	8001e42 <__aeabi_ddiv+0x3de>
 8001e38:	4641      	mov	r1, r8
 8001e3a:	4a7e      	ldr	r2, [pc, #504]	; (8002034 <__aeabi_ddiv+0x5d0>)
 8001e3c:	445a      	add	r2, fp
 8001e3e:	4091      	lsls	r1, r2
 8001e40:	430d      	orrs	r5, r1
 8001e42:	0029      	movs	r1, r5
 8001e44:	1e4a      	subs	r2, r1, #1
 8001e46:	4191      	sbcs	r1, r2
 8001e48:	4319      	orrs	r1, r3
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	2200      	movs	r2, #0
 8001e50:	400d      	ands	r5, r1
 8001e52:	420b      	tst	r3, r1
 8001e54:	d100      	bne.n	8001e58 <__aeabi_ddiv+0x3f4>
 8001e56:	e0d0      	b.n	8001ffa <__aeabi_ddiv+0x596>
 8001e58:	220f      	movs	r2, #15
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	2a04      	cmp	r2, #4
 8001e60:	d100      	bne.n	8001e64 <__aeabi_ddiv+0x400>
 8001e62:	e0c7      	b.n	8001ff4 <__aeabi_ddiv+0x590>
 8001e64:	1d0a      	adds	r2, r1, #4
 8001e66:	428a      	cmp	r2, r1
 8001e68:	4189      	sbcs	r1, r1
 8001e6a:	4249      	negs	r1, r1
 8001e6c:	185b      	adds	r3, r3, r1
 8001e6e:	0011      	movs	r1, r2
 8001e70:	021a      	lsls	r2, r3, #8
 8001e72:	d400      	bmi.n	8001e76 <__aeabi_ddiv+0x412>
 8001e74:	e0be      	b.n	8001ff4 <__aeabi_ddiv+0x590>
 8001e76:	2301      	movs	r3, #1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2500      	movs	r5, #0
 8001e7c:	e649      	b.n	8001b12 <__aeabi_ddiv+0xae>
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	4643      	mov	r3, r8
 8001e82:	0312      	lsls	r2, r2, #12
 8001e84:	4213      	tst	r3, r2
 8001e86:	d008      	beq.n	8001e9a <__aeabi_ddiv+0x436>
 8001e88:	4214      	tst	r4, r2
 8001e8a:	d106      	bne.n	8001e9a <__aeabi_ddiv+0x436>
 8001e8c:	4322      	orrs	r2, r4
 8001e8e:	0312      	lsls	r2, r2, #12
 8001e90:	46ba      	mov	sl, r7
 8001e92:	000d      	movs	r5, r1
 8001e94:	4b66      	ldr	r3, [pc, #408]	; (8002030 <__aeabi_ddiv+0x5cc>)
 8001e96:	0b12      	lsrs	r2, r2, #12
 8001e98:	e63b      	b.n	8001b12 <__aeabi_ddiv+0xae>
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	4643      	mov	r3, r8
 8001e9e:	0312      	lsls	r2, r2, #12
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	0312      	lsls	r2, r2, #12
 8001ea4:	46b2      	mov	sl, r6
 8001ea6:	4b62      	ldr	r3, [pc, #392]	; (8002030 <__aeabi_ddiv+0x5cc>)
 8001ea8:	0b12      	lsrs	r2, r2, #12
 8001eaa:	e632      	b.n	8001b12 <__aeabi_ddiv+0xae>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_ddiv+0x44e>
 8001eb0:	e702      	b.n	8001cb8 <__aeabi_ddiv+0x254>
 8001eb2:	19a6      	adds	r6, r4, r6
 8001eb4:	1e6a      	subs	r2, r5, #1
 8001eb6:	42a6      	cmp	r6, r4
 8001eb8:	d200      	bcs.n	8001ebc <__aeabi_ddiv+0x458>
 8001eba:	e089      	b.n	8001fd0 <__aeabi_ddiv+0x56c>
 8001ebc:	4286      	cmp	r6, r0
 8001ebe:	d200      	bcs.n	8001ec2 <__aeabi_ddiv+0x45e>
 8001ec0:	e09f      	b.n	8002002 <__aeabi_ddiv+0x59e>
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_ddiv+0x462>
 8001ec4:	e0af      	b.n	8002026 <__aeabi_ddiv+0x5c2>
 8001ec6:	0015      	movs	r5, r2
 8001ec8:	e6f4      	b.n	8001cb4 <__aeabi_ddiv+0x250>
 8001eca:	42a9      	cmp	r1, r5
 8001ecc:	d900      	bls.n	8001ed0 <__aeabi_ddiv+0x46c>
 8001ece:	e63c      	b.n	8001b4a <__aeabi_ddiv+0xe6>
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	07de      	lsls	r6, r3, #31
 8001ed4:	0858      	lsrs	r0, r3, #1
 8001ed6:	086b      	lsrs	r3, r5, #1
 8001ed8:	431e      	orrs	r6, r3
 8001eda:	07ed      	lsls	r5, r5, #31
 8001edc:	e63c      	b.n	8001b58 <__aeabi_ddiv+0xf4>
 8001ede:	f001 f977 	bl	80031d0 <__clzsi2>
 8001ee2:	0001      	movs	r1, r0
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	3115      	adds	r1, #21
 8001ee8:	3220      	adds	r2, #32
 8001eea:	291c      	cmp	r1, #28
 8001eec:	dc00      	bgt.n	8001ef0 <__aeabi_ddiv+0x48c>
 8001eee:	e72c      	b.n	8001d4a <__aeabi_ddiv+0x2e6>
 8001ef0:	464b      	mov	r3, r9
 8001ef2:	3808      	subs	r0, #8
 8001ef4:	4083      	lsls	r3, r0
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	4698      	mov	r8, r3
 8001efa:	e732      	b.n	8001d62 <__aeabi_ddiv+0x2fe>
 8001efc:	f001 f968 	bl	80031d0 <__clzsi2>
 8001f00:	0003      	movs	r3, r0
 8001f02:	001a      	movs	r2, r3
 8001f04:	3215      	adds	r2, #21
 8001f06:	3020      	adds	r0, #32
 8001f08:	2a1c      	cmp	r2, #28
 8001f0a:	dc00      	bgt.n	8001f0e <__aeabi_ddiv+0x4aa>
 8001f0c:	e6ff      	b.n	8001d0e <__aeabi_ddiv+0x2aa>
 8001f0e:	4654      	mov	r4, sl
 8001f10:	3b08      	subs	r3, #8
 8001f12:	2100      	movs	r1, #0
 8001f14:	409c      	lsls	r4, r3
 8001f16:	e705      	b.n	8001d24 <__aeabi_ddiv+0x2c0>
 8001f18:	1936      	adds	r6, r6, r4
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	42b4      	cmp	r4, r6
 8001f1e:	d900      	bls.n	8001f22 <__aeabi_ddiv+0x4be>
 8001f20:	e6a6      	b.n	8001c70 <__aeabi_ddiv+0x20c>
 8001f22:	42b2      	cmp	r2, r6
 8001f24:	d800      	bhi.n	8001f28 <__aeabi_ddiv+0x4c4>
 8001f26:	e6a3      	b.n	8001c70 <__aeabi_ddiv+0x20c>
 8001f28:	1e83      	subs	r3, r0, #2
 8001f2a:	1936      	adds	r6, r6, r4
 8001f2c:	e6a0      	b.n	8001c70 <__aeabi_ddiv+0x20c>
 8001f2e:	1909      	adds	r1, r1, r4
 8001f30:	3d01      	subs	r5, #1
 8001f32:	428c      	cmp	r4, r1
 8001f34:	d900      	bls.n	8001f38 <__aeabi_ddiv+0x4d4>
 8001f36:	e68d      	b.n	8001c54 <__aeabi_ddiv+0x1f0>
 8001f38:	428a      	cmp	r2, r1
 8001f3a:	d800      	bhi.n	8001f3e <__aeabi_ddiv+0x4da>
 8001f3c:	e68a      	b.n	8001c54 <__aeabi_ddiv+0x1f0>
 8001f3e:	1e85      	subs	r5, r0, #2
 8001f40:	1909      	adds	r1, r1, r4
 8001f42:	e687      	b.n	8001c54 <__aeabi_ddiv+0x1f0>
 8001f44:	220f      	movs	r2, #15
 8001f46:	402a      	ands	r2, r5
 8001f48:	2a04      	cmp	r2, #4
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_ddiv+0x4ea>
 8001f4c:	e6bc      	b.n	8001cc8 <__aeabi_ddiv+0x264>
 8001f4e:	1d29      	adds	r1, r5, #4
 8001f50:	42a9      	cmp	r1, r5
 8001f52:	41ad      	sbcs	r5, r5
 8001f54:	426d      	negs	r5, r5
 8001f56:	08c9      	lsrs	r1, r1, #3
 8001f58:	44a8      	add	r8, r5
 8001f5a:	e6b6      	b.n	8001cca <__aeabi_ddiv+0x266>
 8001f5c:	42af      	cmp	r7, r5
 8001f5e:	d900      	bls.n	8001f62 <__aeabi_ddiv+0x4fe>
 8001f60:	e662      	b.n	8001c28 <__aeabi_ddiv+0x1c4>
 8001f62:	4281      	cmp	r1, r0
 8001f64:	d804      	bhi.n	8001f70 <__aeabi_ddiv+0x50c>
 8001f66:	d000      	beq.n	8001f6a <__aeabi_ddiv+0x506>
 8001f68:	e65e      	b.n	8001c28 <__aeabi_ddiv+0x1c4>
 8001f6a:	42ae      	cmp	r6, r5
 8001f6c:	d800      	bhi.n	8001f70 <__aeabi_ddiv+0x50c>
 8001f6e:	e65b      	b.n	8001c28 <__aeabi_ddiv+0x1c4>
 8001f70:	2302      	movs	r3, #2
 8001f72:	425b      	negs	r3, r3
 8001f74:	469c      	mov	ip, r3
 8001f76:	9b00      	ldr	r3, [sp, #0]
 8001f78:	44e0      	add	r8, ip
 8001f7a:	469c      	mov	ip, r3
 8001f7c:	4465      	add	r5, ip
 8001f7e:	429d      	cmp	r5, r3
 8001f80:	419b      	sbcs	r3, r3
 8001f82:	425b      	negs	r3, r3
 8001f84:	191b      	adds	r3, r3, r4
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	e64f      	b.n	8001c2a <__aeabi_ddiv+0x1c6>
 8001f8a:	42b2      	cmp	r2, r6
 8001f8c:	d800      	bhi.n	8001f90 <__aeabi_ddiv+0x52c>
 8001f8e:	e612      	b.n	8001bb6 <__aeabi_ddiv+0x152>
 8001f90:	1e83      	subs	r3, r0, #2
 8001f92:	1936      	adds	r6, r6, r4
 8001f94:	e60f      	b.n	8001bb6 <__aeabi_ddiv+0x152>
 8001f96:	428a      	cmp	r2, r1
 8001f98:	d800      	bhi.n	8001f9c <__aeabi_ddiv+0x538>
 8001f9a:	e5fa      	b.n	8001b92 <__aeabi_ddiv+0x12e>
 8001f9c:	1e83      	subs	r3, r0, #2
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	1909      	adds	r1, r1, r4
 8001fa2:	e5f6      	b.n	8001b92 <__aeabi_ddiv+0x12e>
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <__aeabi_ddiv+0x5d4>)
 8001fa6:	0028      	movs	r0, r5
 8001fa8:	445b      	add	r3, fp
 8001faa:	4641      	mov	r1, r8
 8001fac:	409d      	lsls	r5, r3
 8001fae:	4099      	lsls	r1, r3
 8001fb0:	40d0      	lsrs	r0, r2
 8001fb2:	1e6b      	subs	r3, r5, #1
 8001fb4:	419d      	sbcs	r5, r3
 8001fb6:	4643      	mov	r3, r8
 8001fb8:	4301      	orrs	r1, r0
 8001fba:	4329      	orrs	r1, r5
 8001fbc:	40d3      	lsrs	r3, r2
 8001fbe:	074a      	lsls	r2, r1, #29
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_ddiv+0x560>
 8001fc2:	e755      	b.n	8001e70 <__aeabi_ddiv+0x40c>
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	2a04      	cmp	r2, #4
 8001fca:	d000      	beq.n	8001fce <__aeabi_ddiv+0x56a>
 8001fcc:	e74a      	b.n	8001e64 <__aeabi_ddiv+0x400>
 8001fce:	e74f      	b.n	8001e70 <__aeabi_ddiv+0x40c>
 8001fd0:	0015      	movs	r5, r2
 8001fd2:	4286      	cmp	r6, r0
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_ddiv+0x574>
 8001fd6:	e66d      	b.n	8001cb4 <__aeabi_ddiv+0x250>
 8001fd8:	9a00      	ldr	r2, [sp, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d000      	beq.n	8001fe0 <__aeabi_ddiv+0x57c>
 8001fde:	e669      	b.n	8001cb4 <__aeabi_ddiv+0x250>
 8001fe0:	e66a      	b.n	8001cb8 <__aeabi_ddiv+0x254>
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <__aeabi_ddiv+0x5d8>)
 8001fe4:	445b      	add	r3, fp
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	dc00      	bgt.n	8001fec <__aeabi_ddiv+0x588>
 8001fea:	e713      	b.n	8001e14 <__aeabi_ddiv+0x3b0>
 8001fec:	2501      	movs	r5, #1
 8001fee:	2100      	movs	r1, #0
 8001ff0:	44a8      	add	r8, r5
 8001ff2:	e66a      	b.n	8001cca <__aeabi_ddiv+0x266>
 8001ff4:	075d      	lsls	r5, r3, #29
 8001ff6:	025b      	lsls	r3, r3, #9
 8001ff8:	0b1a      	lsrs	r2, r3, #12
 8001ffa:	08c9      	lsrs	r1, r1, #3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	430d      	orrs	r5, r1
 8002000:	e587      	b.n	8001b12 <__aeabi_ddiv+0xae>
 8002002:	9900      	ldr	r1, [sp, #0]
 8002004:	3d02      	subs	r5, #2
 8002006:	004a      	lsls	r2, r1, #1
 8002008:	428a      	cmp	r2, r1
 800200a:	41bf      	sbcs	r7, r7
 800200c:	427f      	negs	r7, r7
 800200e:	193f      	adds	r7, r7, r4
 8002010:	19f6      	adds	r6, r6, r7
 8002012:	9200      	str	r2, [sp, #0]
 8002014:	e7dd      	b.n	8001fd2 <__aeabi_ddiv+0x56e>
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	4643      	mov	r3, r8
 800201a:	0312      	lsls	r2, r2, #12
 800201c:	431a      	orrs	r2, r3
 800201e:	0312      	lsls	r2, r2, #12
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <__aeabi_ddiv+0x5cc>)
 8002022:	0b12      	lsrs	r2, r2, #12
 8002024:	e575      	b.n	8001b12 <__aeabi_ddiv+0xae>
 8002026:	9900      	ldr	r1, [sp, #0]
 8002028:	4299      	cmp	r1, r3
 800202a:	d3ea      	bcc.n	8002002 <__aeabi_ddiv+0x59e>
 800202c:	0015      	movs	r5, r2
 800202e:	e7d3      	b.n	8001fd8 <__aeabi_ddiv+0x574>
 8002030:	000007ff 	.word	0x000007ff
 8002034:	0000043e 	.word	0x0000043e
 8002038:	0000041e 	.word	0x0000041e
 800203c:	000003ff 	.word	0x000003ff

08002040 <__eqdf2>:
 8002040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002042:	464e      	mov	r6, r9
 8002044:	4645      	mov	r5, r8
 8002046:	46de      	mov	lr, fp
 8002048:	4657      	mov	r7, sl
 800204a:	4690      	mov	r8, r2
 800204c:	b5e0      	push	{r5, r6, r7, lr}
 800204e:	0017      	movs	r7, r2
 8002050:	031a      	lsls	r2, r3, #12
 8002052:	0b12      	lsrs	r2, r2, #12
 8002054:	0005      	movs	r5, r0
 8002056:	4684      	mov	ip, r0
 8002058:	4819      	ldr	r0, [pc, #100]	; (80020c0 <__eqdf2+0x80>)
 800205a:	030e      	lsls	r6, r1, #12
 800205c:	004c      	lsls	r4, r1, #1
 800205e:	4691      	mov	r9, r2
 8002060:	005a      	lsls	r2, r3, #1
 8002062:	0fdb      	lsrs	r3, r3, #31
 8002064:	469b      	mov	fp, r3
 8002066:	0b36      	lsrs	r6, r6, #12
 8002068:	0d64      	lsrs	r4, r4, #21
 800206a:	0fc9      	lsrs	r1, r1, #31
 800206c:	0d52      	lsrs	r2, r2, #21
 800206e:	4284      	cmp	r4, r0
 8002070:	d019      	beq.n	80020a6 <__eqdf2+0x66>
 8002072:	4282      	cmp	r2, r0
 8002074:	d010      	beq.n	8002098 <__eqdf2+0x58>
 8002076:	2001      	movs	r0, #1
 8002078:	4294      	cmp	r4, r2
 800207a:	d10e      	bne.n	800209a <__eqdf2+0x5a>
 800207c:	454e      	cmp	r6, r9
 800207e:	d10c      	bne.n	800209a <__eqdf2+0x5a>
 8002080:	2001      	movs	r0, #1
 8002082:	45c4      	cmp	ip, r8
 8002084:	d109      	bne.n	800209a <__eqdf2+0x5a>
 8002086:	4559      	cmp	r1, fp
 8002088:	d017      	beq.n	80020ba <__eqdf2+0x7a>
 800208a:	2c00      	cmp	r4, #0
 800208c:	d105      	bne.n	800209a <__eqdf2+0x5a>
 800208e:	0030      	movs	r0, r6
 8002090:	4328      	orrs	r0, r5
 8002092:	1e43      	subs	r3, r0, #1
 8002094:	4198      	sbcs	r0, r3
 8002096:	e000      	b.n	800209a <__eqdf2+0x5a>
 8002098:	2001      	movs	r0, #1
 800209a:	bcf0      	pop	{r4, r5, r6, r7}
 800209c:	46bb      	mov	fp, r7
 800209e:	46b2      	mov	sl, r6
 80020a0:	46a9      	mov	r9, r5
 80020a2:	46a0      	mov	r8, r4
 80020a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a6:	0033      	movs	r3, r6
 80020a8:	2001      	movs	r0, #1
 80020aa:	432b      	orrs	r3, r5
 80020ac:	d1f5      	bne.n	800209a <__eqdf2+0x5a>
 80020ae:	42a2      	cmp	r2, r4
 80020b0:	d1f3      	bne.n	800209a <__eqdf2+0x5a>
 80020b2:	464b      	mov	r3, r9
 80020b4:	433b      	orrs	r3, r7
 80020b6:	d1f0      	bne.n	800209a <__eqdf2+0x5a>
 80020b8:	e7e2      	b.n	8002080 <__eqdf2+0x40>
 80020ba:	2000      	movs	r0, #0
 80020bc:	e7ed      	b.n	800209a <__eqdf2+0x5a>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	000007ff 	.word	0x000007ff

080020c4 <__gedf2>:
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	4647      	mov	r7, r8
 80020c8:	46ce      	mov	lr, r9
 80020ca:	0004      	movs	r4, r0
 80020cc:	0018      	movs	r0, r3
 80020ce:	0016      	movs	r6, r2
 80020d0:	031b      	lsls	r3, r3, #12
 80020d2:	0b1b      	lsrs	r3, r3, #12
 80020d4:	4d2d      	ldr	r5, [pc, #180]	; (800218c <__gedf2+0xc8>)
 80020d6:	004a      	lsls	r2, r1, #1
 80020d8:	4699      	mov	r9, r3
 80020da:	b580      	push	{r7, lr}
 80020dc:	0043      	lsls	r3, r0, #1
 80020de:	030f      	lsls	r7, r1, #12
 80020e0:	46a4      	mov	ip, r4
 80020e2:	46b0      	mov	r8, r6
 80020e4:	0b3f      	lsrs	r7, r7, #12
 80020e6:	0d52      	lsrs	r2, r2, #21
 80020e8:	0fc9      	lsrs	r1, r1, #31
 80020ea:	0d5b      	lsrs	r3, r3, #21
 80020ec:	0fc0      	lsrs	r0, r0, #31
 80020ee:	42aa      	cmp	r2, r5
 80020f0:	d021      	beq.n	8002136 <__gedf2+0x72>
 80020f2:	42ab      	cmp	r3, r5
 80020f4:	d013      	beq.n	800211e <__gedf2+0x5a>
 80020f6:	2a00      	cmp	r2, #0
 80020f8:	d122      	bne.n	8002140 <__gedf2+0x7c>
 80020fa:	433c      	orrs	r4, r7
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <__gedf2+0x42>
 8002100:	464d      	mov	r5, r9
 8002102:	432e      	orrs	r6, r5
 8002104:	d022      	beq.n	800214c <__gedf2+0x88>
 8002106:	2c00      	cmp	r4, #0
 8002108:	d010      	beq.n	800212c <__gedf2+0x68>
 800210a:	4281      	cmp	r1, r0
 800210c:	d022      	beq.n	8002154 <__gedf2+0x90>
 800210e:	2002      	movs	r0, #2
 8002110:	3901      	subs	r1, #1
 8002112:	4008      	ands	r0, r1
 8002114:	3801      	subs	r0, #1
 8002116:	bcc0      	pop	{r6, r7}
 8002118:	46b9      	mov	r9, r7
 800211a:	46b0      	mov	r8, r6
 800211c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211e:	464d      	mov	r5, r9
 8002120:	432e      	orrs	r6, r5
 8002122:	d129      	bne.n	8002178 <__gedf2+0xb4>
 8002124:	2a00      	cmp	r2, #0
 8002126:	d1f0      	bne.n	800210a <__gedf2+0x46>
 8002128:	433c      	orrs	r4, r7
 800212a:	d1ee      	bne.n	800210a <__gedf2+0x46>
 800212c:	2800      	cmp	r0, #0
 800212e:	d1f2      	bne.n	8002116 <__gedf2+0x52>
 8002130:	2001      	movs	r0, #1
 8002132:	4240      	negs	r0, r0
 8002134:	e7ef      	b.n	8002116 <__gedf2+0x52>
 8002136:	003d      	movs	r5, r7
 8002138:	4325      	orrs	r5, r4
 800213a:	d11d      	bne.n	8002178 <__gedf2+0xb4>
 800213c:	4293      	cmp	r3, r2
 800213e:	d0ee      	beq.n	800211e <__gedf2+0x5a>
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e2      	bne.n	800210a <__gedf2+0x46>
 8002144:	464c      	mov	r4, r9
 8002146:	4326      	orrs	r6, r4
 8002148:	d1df      	bne.n	800210a <__gedf2+0x46>
 800214a:	e7e0      	b.n	800210e <__gedf2+0x4a>
 800214c:	2000      	movs	r0, #0
 800214e:	2c00      	cmp	r4, #0
 8002150:	d0e1      	beq.n	8002116 <__gedf2+0x52>
 8002152:	e7dc      	b.n	800210e <__gedf2+0x4a>
 8002154:	429a      	cmp	r2, r3
 8002156:	dc0a      	bgt.n	800216e <__gedf2+0xaa>
 8002158:	dbe8      	blt.n	800212c <__gedf2+0x68>
 800215a:	454f      	cmp	r7, r9
 800215c:	d8d7      	bhi.n	800210e <__gedf2+0x4a>
 800215e:	d00e      	beq.n	800217e <__gedf2+0xba>
 8002160:	2000      	movs	r0, #0
 8002162:	454f      	cmp	r7, r9
 8002164:	d2d7      	bcs.n	8002116 <__gedf2+0x52>
 8002166:	2900      	cmp	r1, #0
 8002168:	d0e2      	beq.n	8002130 <__gedf2+0x6c>
 800216a:	0008      	movs	r0, r1
 800216c:	e7d3      	b.n	8002116 <__gedf2+0x52>
 800216e:	4243      	negs	r3, r0
 8002170:	4158      	adcs	r0, r3
 8002172:	0040      	lsls	r0, r0, #1
 8002174:	3801      	subs	r0, #1
 8002176:	e7ce      	b.n	8002116 <__gedf2+0x52>
 8002178:	2002      	movs	r0, #2
 800217a:	4240      	negs	r0, r0
 800217c:	e7cb      	b.n	8002116 <__gedf2+0x52>
 800217e:	45c4      	cmp	ip, r8
 8002180:	d8c5      	bhi.n	800210e <__gedf2+0x4a>
 8002182:	2000      	movs	r0, #0
 8002184:	45c4      	cmp	ip, r8
 8002186:	d2c6      	bcs.n	8002116 <__gedf2+0x52>
 8002188:	e7ed      	b.n	8002166 <__gedf2+0xa2>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff

08002190 <__ledf2>:
 8002190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002192:	4647      	mov	r7, r8
 8002194:	46ce      	mov	lr, r9
 8002196:	0004      	movs	r4, r0
 8002198:	0018      	movs	r0, r3
 800219a:	0016      	movs	r6, r2
 800219c:	031b      	lsls	r3, r3, #12
 800219e:	0b1b      	lsrs	r3, r3, #12
 80021a0:	4d2c      	ldr	r5, [pc, #176]	; (8002254 <__ledf2+0xc4>)
 80021a2:	004a      	lsls	r2, r1, #1
 80021a4:	4699      	mov	r9, r3
 80021a6:	b580      	push	{r7, lr}
 80021a8:	0043      	lsls	r3, r0, #1
 80021aa:	030f      	lsls	r7, r1, #12
 80021ac:	46a4      	mov	ip, r4
 80021ae:	46b0      	mov	r8, r6
 80021b0:	0b3f      	lsrs	r7, r7, #12
 80021b2:	0d52      	lsrs	r2, r2, #21
 80021b4:	0fc9      	lsrs	r1, r1, #31
 80021b6:	0d5b      	lsrs	r3, r3, #21
 80021b8:	0fc0      	lsrs	r0, r0, #31
 80021ba:	42aa      	cmp	r2, r5
 80021bc:	d00d      	beq.n	80021da <__ledf2+0x4a>
 80021be:	42ab      	cmp	r3, r5
 80021c0:	d010      	beq.n	80021e4 <__ledf2+0x54>
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	d127      	bne.n	8002216 <__ledf2+0x86>
 80021c6:	433c      	orrs	r4, r7
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d111      	bne.n	80021f0 <__ledf2+0x60>
 80021cc:	464d      	mov	r5, r9
 80021ce:	432e      	orrs	r6, r5
 80021d0:	d10e      	bne.n	80021f0 <__ledf2+0x60>
 80021d2:	2000      	movs	r0, #0
 80021d4:	2c00      	cmp	r4, #0
 80021d6:	d015      	beq.n	8002204 <__ledf2+0x74>
 80021d8:	e00e      	b.n	80021f8 <__ledf2+0x68>
 80021da:	003d      	movs	r5, r7
 80021dc:	4325      	orrs	r5, r4
 80021de:	d110      	bne.n	8002202 <__ledf2+0x72>
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d118      	bne.n	8002216 <__ledf2+0x86>
 80021e4:	464d      	mov	r5, r9
 80021e6:	432e      	orrs	r6, r5
 80021e8:	d10b      	bne.n	8002202 <__ledf2+0x72>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d102      	bne.n	80021f4 <__ledf2+0x64>
 80021ee:	433c      	orrs	r4, r7
 80021f0:	2c00      	cmp	r4, #0
 80021f2:	d00b      	beq.n	800220c <__ledf2+0x7c>
 80021f4:	4281      	cmp	r1, r0
 80021f6:	d014      	beq.n	8002222 <__ledf2+0x92>
 80021f8:	2002      	movs	r0, #2
 80021fa:	3901      	subs	r1, #1
 80021fc:	4008      	ands	r0, r1
 80021fe:	3801      	subs	r0, #1
 8002200:	e000      	b.n	8002204 <__ledf2+0x74>
 8002202:	2002      	movs	r0, #2
 8002204:	bcc0      	pop	{r6, r7}
 8002206:	46b9      	mov	r9, r7
 8002208:	46b0      	mov	r8, r6
 800220a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220c:	2800      	cmp	r0, #0
 800220e:	d1f9      	bne.n	8002204 <__ledf2+0x74>
 8002210:	2001      	movs	r0, #1
 8002212:	4240      	negs	r0, r0
 8002214:	e7f6      	b.n	8002204 <__ledf2+0x74>
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ec      	bne.n	80021f4 <__ledf2+0x64>
 800221a:	464c      	mov	r4, r9
 800221c:	4326      	orrs	r6, r4
 800221e:	d1e9      	bne.n	80021f4 <__ledf2+0x64>
 8002220:	e7ea      	b.n	80021f8 <__ledf2+0x68>
 8002222:	429a      	cmp	r2, r3
 8002224:	dd04      	ble.n	8002230 <__ledf2+0xa0>
 8002226:	4243      	negs	r3, r0
 8002228:	4158      	adcs	r0, r3
 800222a:	0040      	lsls	r0, r0, #1
 800222c:	3801      	subs	r0, #1
 800222e:	e7e9      	b.n	8002204 <__ledf2+0x74>
 8002230:	429a      	cmp	r2, r3
 8002232:	dbeb      	blt.n	800220c <__ledf2+0x7c>
 8002234:	454f      	cmp	r7, r9
 8002236:	d8df      	bhi.n	80021f8 <__ledf2+0x68>
 8002238:	d006      	beq.n	8002248 <__ledf2+0xb8>
 800223a:	2000      	movs	r0, #0
 800223c:	454f      	cmp	r7, r9
 800223e:	d2e1      	bcs.n	8002204 <__ledf2+0x74>
 8002240:	2900      	cmp	r1, #0
 8002242:	d0e5      	beq.n	8002210 <__ledf2+0x80>
 8002244:	0008      	movs	r0, r1
 8002246:	e7dd      	b.n	8002204 <__ledf2+0x74>
 8002248:	45c4      	cmp	ip, r8
 800224a:	d8d5      	bhi.n	80021f8 <__ledf2+0x68>
 800224c:	2000      	movs	r0, #0
 800224e:	45c4      	cmp	ip, r8
 8002250:	d2d8      	bcs.n	8002204 <__ledf2+0x74>
 8002252:	e7f5      	b.n	8002240 <__ledf2+0xb0>
 8002254:	000007ff 	.word	0x000007ff

08002258 <__aeabi_dmul>:
 8002258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225a:	4645      	mov	r5, r8
 800225c:	46de      	mov	lr, fp
 800225e:	4657      	mov	r7, sl
 8002260:	464e      	mov	r6, r9
 8002262:	b5e0      	push	{r5, r6, r7, lr}
 8002264:	001f      	movs	r7, r3
 8002266:	030b      	lsls	r3, r1, #12
 8002268:	0b1b      	lsrs	r3, r3, #12
 800226a:	469b      	mov	fp, r3
 800226c:	004d      	lsls	r5, r1, #1
 800226e:	0fcb      	lsrs	r3, r1, #31
 8002270:	0004      	movs	r4, r0
 8002272:	4691      	mov	r9, r2
 8002274:	4698      	mov	r8, r3
 8002276:	b087      	sub	sp, #28
 8002278:	0d6d      	lsrs	r5, r5, #21
 800227a:	d100      	bne.n	800227e <__aeabi_dmul+0x26>
 800227c:	e1cd      	b.n	800261a <__aeabi_dmul+0x3c2>
 800227e:	4bce      	ldr	r3, [pc, #824]	; (80025b8 <__aeabi_dmul+0x360>)
 8002280:	429d      	cmp	r5, r3
 8002282:	d100      	bne.n	8002286 <__aeabi_dmul+0x2e>
 8002284:	e1e9      	b.n	800265a <__aeabi_dmul+0x402>
 8002286:	465a      	mov	r2, fp
 8002288:	0f43      	lsrs	r3, r0, #29
 800228a:	00d2      	lsls	r2, r2, #3
 800228c:	4313      	orrs	r3, r2
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	0412      	lsls	r2, r2, #16
 8002292:	431a      	orrs	r2, r3
 8002294:	00c3      	lsls	r3, r0, #3
 8002296:	469a      	mov	sl, r3
 8002298:	4bc8      	ldr	r3, [pc, #800]	; (80025bc <__aeabi_dmul+0x364>)
 800229a:	4693      	mov	fp, r2
 800229c:	469c      	mov	ip, r3
 800229e:	2300      	movs	r3, #0
 80022a0:	2600      	movs	r6, #0
 80022a2:	4465      	add	r5, ip
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	033c      	lsls	r4, r7, #12
 80022a8:	007b      	lsls	r3, r7, #1
 80022aa:	4648      	mov	r0, r9
 80022ac:	0b24      	lsrs	r4, r4, #12
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	0fff      	lsrs	r7, r7, #31
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dmul+0x60>
 80022b6:	e189      	b.n	80025cc <__aeabi_dmul+0x374>
 80022b8:	4abf      	ldr	r2, [pc, #764]	; (80025b8 <__aeabi_dmul+0x360>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d019      	beq.n	80022f2 <__aeabi_dmul+0x9a>
 80022be:	0f42      	lsrs	r2, r0, #29
 80022c0:	00e4      	lsls	r4, r4, #3
 80022c2:	4322      	orrs	r2, r4
 80022c4:	2480      	movs	r4, #128	; 0x80
 80022c6:	0424      	lsls	r4, r4, #16
 80022c8:	4314      	orrs	r4, r2
 80022ca:	4abc      	ldr	r2, [pc, #752]	; (80025bc <__aeabi_dmul+0x364>)
 80022cc:	2100      	movs	r1, #0
 80022ce:	4694      	mov	ip, r2
 80022d0:	4642      	mov	r2, r8
 80022d2:	4463      	add	r3, ip
 80022d4:	195b      	adds	r3, r3, r5
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	9b01      	ldr	r3, [sp, #4]
 80022da:	407a      	eors	r2, r7
 80022dc:	3301      	adds	r3, #1
 80022de:	00c0      	lsls	r0, r0, #3
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	2e0a      	cmp	r6, #10
 80022e6:	dd1c      	ble.n	8002322 <__aeabi_dmul+0xca>
 80022e8:	003a      	movs	r2, r7
 80022ea:	2e0b      	cmp	r6, #11
 80022ec:	d05e      	beq.n	80023ac <__aeabi_dmul+0x154>
 80022ee:	4647      	mov	r7, r8
 80022f0:	e056      	b.n	80023a0 <__aeabi_dmul+0x148>
 80022f2:	4649      	mov	r1, r9
 80022f4:	4bb0      	ldr	r3, [pc, #704]	; (80025b8 <__aeabi_dmul+0x360>)
 80022f6:	4321      	orrs	r1, r4
 80022f8:	18eb      	adds	r3, r5, r3
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2900      	cmp	r1, #0
 80022fe:	d12a      	bne.n	8002356 <__aeabi_dmul+0xfe>
 8002300:	2080      	movs	r0, #128	; 0x80
 8002302:	2202      	movs	r2, #2
 8002304:	0100      	lsls	r0, r0, #4
 8002306:	002b      	movs	r3, r5
 8002308:	4684      	mov	ip, r0
 800230a:	4316      	orrs	r6, r2
 800230c:	4642      	mov	r2, r8
 800230e:	4463      	add	r3, ip
 8002310:	407a      	eors	r2, r7
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	2e0a      	cmp	r6, #10
 8002318:	dd00      	ble.n	800231c <__aeabi_dmul+0xc4>
 800231a:	e231      	b.n	8002780 <__aeabi_dmul+0x528>
 800231c:	2000      	movs	r0, #0
 800231e:	2400      	movs	r4, #0
 8002320:	2102      	movs	r1, #2
 8002322:	2e02      	cmp	r6, #2
 8002324:	dc26      	bgt.n	8002374 <__aeabi_dmul+0x11c>
 8002326:	3e01      	subs	r6, #1
 8002328:	2e01      	cmp	r6, #1
 800232a:	d852      	bhi.n	80023d2 <__aeabi_dmul+0x17a>
 800232c:	2902      	cmp	r1, #2
 800232e:	d04c      	beq.n	80023ca <__aeabi_dmul+0x172>
 8002330:	2901      	cmp	r1, #1
 8002332:	d000      	beq.n	8002336 <__aeabi_dmul+0xde>
 8002334:	e118      	b.n	8002568 <__aeabi_dmul+0x310>
 8002336:	2300      	movs	r3, #0
 8002338:	2400      	movs	r4, #0
 800233a:	2500      	movs	r5, #0
 800233c:	051b      	lsls	r3, r3, #20
 800233e:	4323      	orrs	r3, r4
 8002340:	07d2      	lsls	r2, r2, #31
 8002342:	4313      	orrs	r3, r2
 8002344:	0028      	movs	r0, r5
 8002346:	0019      	movs	r1, r3
 8002348:	b007      	add	sp, #28
 800234a:	bcf0      	pop	{r4, r5, r6, r7}
 800234c:	46bb      	mov	fp, r7
 800234e:	46b2      	mov	sl, r6
 8002350:	46a9      	mov	r9, r5
 8002352:	46a0      	mov	r8, r4
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	2203      	movs	r2, #3
 800235a:	0109      	lsls	r1, r1, #4
 800235c:	002b      	movs	r3, r5
 800235e:	468c      	mov	ip, r1
 8002360:	4316      	orrs	r6, r2
 8002362:	4642      	mov	r2, r8
 8002364:	4463      	add	r3, ip
 8002366:	407a      	eors	r2, r7
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	2e0a      	cmp	r6, #10
 800236e:	dd00      	ble.n	8002372 <__aeabi_dmul+0x11a>
 8002370:	e228      	b.n	80027c4 <__aeabi_dmul+0x56c>
 8002372:	2103      	movs	r1, #3
 8002374:	2501      	movs	r5, #1
 8002376:	40b5      	lsls	r5, r6
 8002378:	46ac      	mov	ip, r5
 800237a:	26a6      	movs	r6, #166	; 0xa6
 800237c:	4663      	mov	r3, ip
 800237e:	00f6      	lsls	r6, r6, #3
 8002380:	4035      	ands	r5, r6
 8002382:	4233      	tst	r3, r6
 8002384:	d10b      	bne.n	800239e <__aeabi_dmul+0x146>
 8002386:	2690      	movs	r6, #144	; 0x90
 8002388:	00b6      	lsls	r6, r6, #2
 800238a:	4233      	tst	r3, r6
 800238c:	d118      	bne.n	80023c0 <__aeabi_dmul+0x168>
 800238e:	3eb9      	subs	r6, #185	; 0xb9
 8002390:	3eff      	subs	r6, #255	; 0xff
 8002392:	421e      	tst	r6, r3
 8002394:	d01d      	beq.n	80023d2 <__aeabi_dmul+0x17a>
 8002396:	46a3      	mov	fp, r4
 8002398:	4682      	mov	sl, r0
 800239a:	9100      	str	r1, [sp, #0]
 800239c:	e000      	b.n	80023a0 <__aeabi_dmul+0x148>
 800239e:	0017      	movs	r7, r2
 80023a0:	9900      	ldr	r1, [sp, #0]
 80023a2:	003a      	movs	r2, r7
 80023a4:	2902      	cmp	r1, #2
 80023a6:	d010      	beq.n	80023ca <__aeabi_dmul+0x172>
 80023a8:	465c      	mov	r4, fp
 80023aa:	4650      	mov	r0, sl
 80023ac:	2903      	cmp	r1, #3
 80023ae:	d1bf      	bne.n	8002330 <__aeabi_dmul+0xd8>
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	031b      	lsls	r3, r3, #12
 80023b4:	431c      	orrs	r4, r3
 80023b6:	0324      	lsls	r4, r4, #12
 80023b8:	0005      	movs	r5, r0
 80023ba:	4b7f      	ldr	r3, [pc, #508]	; (80025b8 <__aeabi_dmul+0x360>)
 80023bc:	0b24      	lsrs	r4, r4, #12
 80023be:	e7bd      	b.n	800233c <__aeabi_dmul+0xe4>
 80023c0:	2480      	movs	r4, #128	; 0x80
 80023c2:	2200      	movs	r2, #0
 80023c4:	4b7c      	ldr	r3, [pc, #496]	; (80025b8 <__aeabi_dmul+0x360>)
 80023c6:	0324      	lsls	r4, r4, #12
 80023c8:	e7b8      	b.n	800233c <__aeabi_dmul+0xe4>
 80023ca:	2400      	movs	r4, #0
 80023cc:	2500      	movs	r5, #0
 80023ce:	4b7a      	ldr	r3, [pc, #488]	; (80025b8 <__aeabi_dmul+0x360>)
 80023d0:	e7b4      	b.n	800233c <__aeabi_dmul+0xe4>
 80023d2:	4653      	mov	r3, sl
 80023d4:	041e      	lsls	r6, r3, #16
 80023d6:	0c36      	lsrs	r6, r6, #16
 80023d8:	0c1f      	lsrs	r7, r3, #16
 80023da:	0033      	movs	r3, r6
 80023dc:	0c01      	lsrs	r1, r0, #16
 80023de:	0400      	lsls	r0, r0, #16
 80023e0:	0c00      	lsrs	r0, r0, #16
 80023e2:	4343      	muls	r3, r0
 80023e4:	4698      	mov	r8, r3
 80023e6:	0003      	movs	r3, r0
 80023e8:	437b      	muls	r3, r7
 80023ea:	4699      	mov	r9, r3
 80023ec:	0033      	movs	r3, r6
 80023ee:	434b      	muls	r3, r1
 80023f0:	469c      	mov	ip, r3
 80023f2:	4643      	mov	r3, r8
 80023f4:	000d      	movs	r5, r1
 80023f6:	0c1b      	lsrs	r3, r3, #16
 80023f8:	469a      	mov	sl, r3
 80023fa:	437d      	muls	r5, r7
 80023fc:	44cc      	add	ip, r9
 80023fe:	44d4      	add	ip, sl
 8002400:	9500      	str	r5, [sp, #0]
 8002402:	45e1      	cmp	r9, ip
 8002404:	d904      	bls.n	8002410 <__aeabi_dmul+0x1b8>
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	025b      	lsls	r3, r3, #9
 800240a:	4699      	mov	r9, r3
 800240c:	444d      	add	r5, r9
 800240e:	9500      	str	r5, [sp, #0]
 8002410:	4663      	mov	r3, ip
 8002412:	0c1b      	lsrs	r3, r3, #16
 8002414:	001d      	movs	r5, r3
 8002416:	4663      	mov	r3, ip
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	469c      	mov	ip, r3
 800241c:	4643      	mov	r3, r8
 800241e:	041b      	lsls	r3, r3, #16
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	4698      	mov	r8, r3
 8002424:	4663      	mov	r3, ip
 8002426:	4443      	add	r3, r8
 8002428:	9303      	str	r3, [sp, #12]
 800242a:	0c23      	lsrs	r3, r4, #16
 800242c:	4698      	mov	r8, r3
 800242e:	0033      	movs	r3, r6
 8002430:	0424      	lsls	r4, r4, #16
 8002432:	0c24      	lsrs	r4, r4, #16
 8002434:	4363      	muls	r3, r4
 8002436:	469c      	mov	ip, r3
 8002438:	0023      	movs	r3, r4
 800243a:	437b      	muls	r3, r7
 800243c:	4699      	mov	r9, r3
 800243e:	4643      	mov	r3, r8
 8002440:	435e      	muls	r6, r3
 8002442:	435f      	muls	r7, r3
 8002444:	444e      	add	r6, r9
 8002446:	4663      	mov	r3, ip
 8002448:	46b2      	mov	sl, r6
 800244a:	0c1e      	lsrs	r6, r3, #16
 800244c:	4456      	add	r6, sl
 800244e:	45b1      	cmp	r9, r6
 8002450:	d903      	bls.n	800245a <__aeabi_dmul+0x202>
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	025b      	lsls	r3, r3, #9
 8002456:	4699      	mov	r9, r3
 8002458:	444f      	add	r7, r9
 800245a:	0c33      	lsrs	r3, r6, #16
 800245c:	4699      	mov	r9, r3
 800245e:	003b      	movs	r3, r7
 8002460:	444b      	add	r3, r9
 8002462:	9305      	str	r3, [sp, #20]
 8002464:	4663      	mov	r3, ip
 8002466:	46ac      	mov	ip, r5
 8002468:	041f      	lsls	r7, r3, #16
 800246a:	0c3f      	lsrs	r7, r7, #16
 800246c:	0436      	lsls	r6, r6, #16
 800246e:	19f6      	adds	r6, r6, r7
 8002470:	44b4      	add	ip, r6
 8002472:	4663      	mov	r3, ip
 8002474:	9304      	str	r3, [sp, #16]
 8002476:	465b      	mov	r3, fp
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	469c      	mov	ip, r3
 800247c:	465b      	mov	r3, fp
 800247e:	041f      	lsls	r7, r3, #16
 8002480:	0c3f      	lsrs	r7, r7, #16
 8002482:	003b      	movs	r3, r7
 8002484:	4343      	muls	r3, r0
 8002486:	4699      	mov	r9, r3
 8002488:	4663      	mov	r3, ip
 800248a:	4343      	muls	r3, r0
 800248c:	469a      	mov	sl, r3
 800248e:	464b      	mov	r3, r9
 8002490:	4660      	mov	r0, ip
 8002492:	0c1b      	lsrs	r3, r3, #16
 8002494:	469b      	mov	fp, r3
 8002496:	4348      	muls	r0, r1
 8002498:	4379      	muls	r1, r7
 800249a:	4451      	add	r1, sl
 800249c:	4459      	add	r1, fp
 800249e:	458a      	cmp	sl, r1
 80024a0:	d903      	bls.n	80024aa <__aeabi_dmul+0x252>
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	025b      	lsls	r3, r3, #9
 80024a6:	469a      	mov	sl, r3
 80024a8:	4450      	add	r0, sl
 80024aa:	0c0b      	lsrs	r3, r1, #16
 80024ac:	469a      	mov	sl, r3
 80024ae:	464b      	mov	r3, r9
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	0c1b      	lsrs	r3, r3, #16
 80024b4:	4699      	mov	r9, r3
 80024b6:	003b      	movs	r3, r7
 80024b8:	4363      	muls	r3, r4
 80024ba:	0409      	lsls	r1, r1, #16
 80024bc:	4645      	mov	r5, r8
 80024be:	4449      	add	r1, r9
 80024c0:	4699      	mov	r9, r3
 80024c2:	4663      	mov	r3, ip
 80024c4:	435c      	muls	r4, r3
 80024c6:	436b      	muls	r3, r5
 80024c8:	469c      	mov	ip, r3
 80024ca:	464b      	mov	r3, r9
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	4698      	mov	r8, r3
 80024d0:	436f      	muls	r7, r5
 80024d2:	193f      	adds	r7, r7, r4
 80024d4:	4447      	add	r7, r8
 80024d6:	4450      	add	r0, sl
 80024d8:	42bc      	cmp	r4, r7
 80024da:	d903      	bls.n	80024e4 <__aeabi_dmul+0x28c>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	4698      	mov	r8, r3
 80024e2:	44c4      	add	ip, r8
 80024e4:	9b04      	ldr	r3, [sp, #16]
 80024e6:	9d00      	ldr	r5, [sp, #0]
 80024e8:	4698      	mov	r8, r3
 80024ea:	4445      	add	r5, r8
 80024ec:	42b5      	cmp	r5, r6
 80024ee:	41b6      	sbcs	r6, r6
 80024f0:	4273      	negs	r3, r6
 80024f2:	4698      	mov	r8, r3
 80024f4:	464b      	mov	r3, r9
 80024f6:	041e      	lsls	r6, r3, #16
 80024f8:	9b05      	ldr	r3, [sp, #20]
 80024fa:	043c      	lsls	r4, r7, #16
 80024fc:	4699      	mov	r9, r3
 80024fe:	0c36      	lsrs	r6, r6, #16
 8002500:	19a4      	adds	r4, r4, r6
 8002502:	444c      	add	r4, r9
 8002504:	46a1      	mov	r9, r4
 8002506:	4683      	mov	fp, r0
 8002508:	186e      	adds	r6, r5, r1
 800250a:	44c1      	add	r9, r8
 800250c:	428e      	cmp	r6, r1
 800250e:	4189      	sbcs	r1, r1
 8002510:	44cb      	add	fp, r9
 8002512:	465d      	mov	r5, fp
 8002514:	4249      	negs	r1, r1
 8002516:	186d      	adds	r5, r5, r1
 8002518:	429c      	cmp	r4, r3
 800251a:	41a4      	sbcs	r4, r4
 800251c:	45c1      	cmp	r9, r8
 800251e:	419b      	sbcs	r3, r3
 8002520:	4583      	cmp	fp, r0
 8002522:	4180      	sbcs	r0, r0
 8002524:	428d      	cmp	r5, r1
 8002526:	4189      	sbcs	r1, r1
 8002528:	425b      	negs	r3, r3
 800252a:	4264      	negs	r4, r4
 800252c:	431c      	orrs	r4, r3
 800252e:	4240      	negs	r0, r0
 8002530:	9b03      	ldr	r3, [sp, #12]
 8002532:	4249      	negs	r1, r1
 8002534:	4301      	orrs	r1, r0
 8002536:	0270      	lsls	r0, r6, #9
 8002538:	0c3f      	lsrs	r7, r7, #16
 800253a:	4318      	orrs	r0, r3
 800253c:	19e4      	adds	r4, r4, r7
 800253e:	1e47      	subs	r7, r0, #1
 8002540:	41b8      	sbcs	r0, r7
 8002542:	1864      	adds	r4, r4, r1
 8002544:	4464      	add	r4, ip
 8002546:	0df6      	lsrs	r6, r6, #23
 8002548:	0261      	lsls	r1, r4, #9
 800254a:	4330      	orrs	r0, r6
 800254c:	0dec      	lsrs	r4, r5, #23
 800254e:	026e      	lsls	r6, r5, #9
 8002550:	430c      	orrs	r4, r1
 8002552:	4330      	orrs	r0, r6
 8002554:	01c9      	lsls	r1, r1, #7
 8002556:	d400      	bmi.n	800255a <__aeabi_dmul+0x302>
 8002558:	e0f1      	b.n	800273e <__aeabi_dmul+0x4e6>
 800255a:	2101      	movs	r1, #1
 800255c:	0843      	lsrs	r3, r0, #1
 800255e:	4001      	ands	r1, r0
 8002560:	430b      	orrs	r3, r1
 8002562:	07e0      	lsls	r0, r4, #31
 8002564:	4318      	orrs	r0, r3
 8002566:	0864      	lsrs	r4, r4, #1
 8002568:	4915      	ldr	r1, [pc, #84]	; (80025c0 <__aeabi_dmul+0x368>)
 800256a:	9b02      	ldr	r3, [sp, #8]
 800256c:	468c      	mov	ip, r1
 800256e:	4463      	add	r3, ip
 8002570:	2b00      	cmp	r3, #0
 8002572:	dc00      	bgt.n	8002576 <__aeabi_dmul+0x31e>
 8002574:	e097      	b.n	80026a6 <__aeabi_dmul+0x44e>
 8002576:	0741      	lsls	r1, r0, #29
 8002578:	d009      	beq.n	800258e <__aeabi_dmul+0x336>
 800257a:	210f      	movs	r1, #15
 800257c:	4001      	ands	r1, r0
 800257e:	2904      	cmp	r1, #4
 8002580:	d005      	beq.n	800258e <__aeabi_dmul+0x336>
 8002582:	1d01      	adds	r1, r0, #4
 8002584:	4281      	cmp	r1, r0
 8002586:	4180      	sbcs	r0, r0
 8002588:	4240      	negs	r0, r0
 800258a:	1824      	adds	r4, r4, r0
 800258c:	0008      	movs	r0, r1
 800258e:	01e1      	lsls	r1, r4, #7
 8002590:	d506      	bpl.n	80025a0 <__aeabi_dmul+0x348>
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	00c9      	lsls	r1, r1, #3
 8002596:	468c      	mov	ip, r1
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <__aeabi_dmul+0x36c>)
 800259a:	401c      	ands	r4, r3
 800259c:	9b02      	ldr	r3, [sp, #8]
 800259e:	4463      	add	r3, ip
 80025a0:	4909      	ldr	r1, [pc, #36]	; (80025c8 <__aeabi_dmul+0x370>)
 80025a2:	428b      	cmp	r3, r1
 80025a4:	dd00      	ble.n	80025a8 <__aeabi_dmul+0x350>
 80025a6:	e710      	b.n	80023ca <__aeabi_dmul+0x172>
 80025a8:	0761      	lsls	r1, r4, #29
 80025aa:	08c5      	lsrs	r5, r0, #3
 80025ac:	0264      	lsls	r4, r4, #9
 80025ae:	055b      	lsls	r3, r3, #21
 80025b0:	430d      	orrs	r5, r1
 80025b2:	0b24      	lsrs	r4, r4, #12
 80025b4:	0d5b      	lsrs	r3, r3, #21
 80025b6:	e6c1      	b.n	800233c <__aeabi_dmul+0xe4>
 80025b8:	000007ff 	.word	0x000007ff
 80025bc:	fffffc01 	.word	0xfffffc01
 80025c0:	000003ff 	.word	0x000003ff
 80025c4:	feffffff 	.word	0xfeffffff
 80025c8:	000007fe 	.word	0x000007fe
 80025cc:	464b      	mov	r3, r9
 80025ce:	4323      	orrs	r3, r4
 80025d0:	d059      	beq.n	8002686 <__aeabi_dmul+0x42e>
 80025d2:	2c00      	cmp	r4, #0
 80025d4:	d100      	bne.n	80025d8 <__aeabi_dmul+0x380>
 80025d6:	e0a3      	b.n	8002720 <__aeabi_dmul+0x4c8>
 80025d8:	0020      	movs	r0, r4
 80025da:	f000 fdf9 	bl	80031d0 <__clzsi2>
 80025de:	0001      	movs	r1, r0
 80025e0:	0003      	movs	r3, r0
 80025e2:	390b      	subs	r1, #11
 80025e4:	221d      	movs	r2, #29
 80025e6:	1a52      	subs	r2, r2, r1
 80025e8:	4649      	mov	r1, r9
 80025ea:	0018      	movs	r0, r3
 80025ec:	40d1      	lsrs	r1, r2
 80025ee:	464a      	mov	r2, r9
 80025f0:	3808      	subs	r0, #8
 80025f2:	4082      	lsls	r2, r0
 80025f4:	4084      	lsls	r4, r0
 80025f6:	0010      	movs	r0, r2
 80025f8:	430c      	orrs	r4, r1
 80025fa:	4a74      	ldr	r2, [pc, #464]	; (80027cc <__aeabi_dmul+0x574>)
 80025fc:	1aeb      	subs	r3, r5, r3
 80025fe:	4694      	mov	ip, r2
 8002600:	4642      	mov	r2, r8
 8002602:	4463      	add	r3, ip
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	9b01      	ldr	r3, [sp, #4]
 8002608:	407a      	eors	r2, r7
 800260a:	3301      	adds	r3, #1
 800260c:	2100      	movs	r1, #0
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	2e0a      	cmp	r6, #10
 8002614:	dd00      	ble.n	8002618 <__aeabi_dmul+0x3c0>
 8002616:	e667      	b.n	80022e8 <__aeabi_dmul+0x90>
 8002618:	e683      	b.n	8002322 <__aeabi_dmul+0xca>
 800261a:	465b      	mov	r3, fp
 800261c:	4303      	orrs	r3, r0
 800261e:	469a      	mov	sl, r3
 8002620:	d02a      	beq.n	8002678 <__aeabi_dmul+0x420>
 8002622:	465b      	mov	r3, fp
 8002624:	2b00      	cmp	r3, #0
 8002626:	d06d      	beq.n	8002704 <__aeabi_dmul+0x4ac>
 8002628:	4658      	mov	r0, fp
 800262a:	f000 fdd1 	bl	80031d0 <__clzsi2>
 800262e:	0001      	movs	r1, r0
 8002630:	0003      	movs	r3, r0
 8002632:	390b      	subs	r1, #11
 8002634:	221d      	movs	r2, #29
 8002636:	1a52      	subs	r2, r2, r1
 8002638:	0021      	movs	r1, r4
 800263a:	0018      	movs	r0, r3
 800263c:	465d      	mov	r5, fp
 800263e:	40d1      	lsrs	r1, r2
 8002640:	3808      	subs	r0, #8
 8002642:	4085      	lsls	r5, r0
 8002644:	000a      	movs	r2, r1
 8002646:	4084      	lsls	r4, r0
 8002648:	432a      	orrs	r2, r5
 800264a:	4693      	mov	fp, r2
 800264c:	46a2      	mov	sl, r4
 800264e:	4d5f      	ldr	r5, [pc, #380]	; (80027cc <__aeabi_dmul+0x574>)
 8002650:	2600      	movs	r6, #0
 8002652:	1aed      	subs	r5, r5, r3
 8002654:	2300      	movs	r3, #0
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	e625      	b.n	80022a6 <__aeabi_dmul+0x4e>
 800265a:	465b      	mov	r3, fp
 800265c:	4303      	orrs	r3, r0
 800265e:	469a      	mov	sl, r3
 8002660:	d105      	bne.n	800266e <__aeabi_dmul+0x416>
 8002662:	2300      	movs	r3, #0
 8002664:	469b      	mov	fp, r3
 8002666:	3302      	adds	r3, #2
 8002668:	2608      	movs	r6, #8
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	e61b      	b.n	80022a6 <__aeabi_dmul+0x4e>
 800266e:	2303      	movs	r3, #3
 8002670:	4682      	mov	sl, r0
 8002672:	260c      	movs	r6, #12
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	e616      	b.n	80022a6 <__aeabi_dmul+0x4e>
 8002678:	2300      	movs	r3, #0
 800267a:	469b      	mov	fp, r3
 800267c:	3301      	adds	r3, #1
 800267e:	2604      	movs	r6, #4
 8002680:	2500      	movs	r5, #0
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	e60f      	b.n	80022a6 <__aeabi_dmul+0x4e>
 8002686:	4642      	mov	r2, r8
 8002688:	3301      	adds	r3, #1
 800268a:	9501      	str	r5, [sp, #4]
 800268c:	431e      	orrs	r6, r3
 800268e:	9b01      	ldr	r3, [sp, #4]
 8002690:	407a      	eors	r2, r7
 8002692:	3301      	adds	r3, #1
 8002694:	2400      	movs	r4, #0
 8002696:	2000      	movs	r0, #0
 8002698:	2101      	movs	r1, #1
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	9302      	str	r3, [sp, #8]
 800269e:	2e0a      	cmp	r6, #10
 80026a0:	dd00      	ble.n	80026a4 <__aeabi_dmul+0x44c>
 80026a2:	e621      	b.n	80022e8 <__aeabi_dmul+0x90>
 80026a4:	e63d      	b.n	8002322 <__aeabi_dmul+0xca>
 80026a6:	2101      	movs	r1, #1
 80026a8:	1ac9      	subs	r1, r1, r3
 80026aa:	2938      	cmp	r1, #56	; 0x38
 80026ac:	dd00      	ble.n	80026b0 <__aeabi_dmul+0x458>
 80026ae:	e642      	b.n	8002336 <__aeabi_dmul+0xde>
 80026b0:	291f      	cmp	r1, #31
 80026b2:	dd47      	ble.n	8002744 <__aeabi_dmul+0x4ec>
 80026b4:	261f      	movs	r6, #31
 80026b6:	0025      	movs	r5, r4
 80026b8:	4276      	negs	r6, r6
 80026ba:	1af3      	subs	r3, r6, r3
 80026bc:	40dd      	lsrs	r5, r3
 80026be:	002b      	movs	r3, r5
 80026c0:	2920      	cmp	r1, #32
 80026c2:	d005      	beq.n	80026d0 <__aeabi_dmul+0x478>
 80026c4:	4942      	ldr	r1, [pc, #264]	; (80027d0 <__aeabi_dmul+0x578>)
 80026c6:	9d02      	ldr	r5, [sp, #8]
 80026c8:	468c      	mov	ip, r1
 80026ca:	4465      	add	r5, ip
 80026cc:	40ac      	lsls	r4, r5
 80026ce:	4320      	orrs	r0, r4
 80026d0:	1e41      	subs	r1, r0, #1
 80026d2:	4188      	sbcs	r0, r1
 80026d4:	4318      	orrs	r0, r3
 80026d6:	2307      	movs	r3, #7
 80026d8:	001d      	movs	r5, r3
 80026da:	2400      	movs	r4, #0
 80026dc:	4005      	ands	r5, r0
 80026de:	4203      	tst	r3, r0
 80026e0:	d04a      	beq.n	8002778 <__aeabi_dmul+0x520>
 80026e2:	230f      	movs	r3, #15
 80026e4:	2400      	movs	r4, #0
 80026e6:	4003      	ands	r3, r0
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d042      	beq.n	8002772 <__aeabi_dmul+0x51a>
 80026ec:	1d03      	adds	r3, r0, #4
 80026ee:	4283      	cmp	r3, r0
 80026f0:	4180      	sbcs	r0, r0
 80026f2:	4240      	negs	r0, r0
 80026f4:	1824      	adds	r4, r4, r0
 80026f6:	0018      	movs	r0, r3
 80026f8:	0223      	lsls	r3, r4, #8
 80026fa:	d53a      	bpl.n	8002772 <__aeabi_dmul+0x51a>
 80026fc:	2301      	movs	r3, #1
 80026fe:	2400      	movs	r4, #0
 8002700:	2500      	movs	r5, #0
 8002702:	e61b      	b.n	800233c <__aeabi_dmul+0xe4>
 8002704:	f000 fd64 	bl	80031d0 <__clzsi2>
 8002708:	0001      	movs	r1, r0
 800270a:	0003      	movs	r3, r0
 800270c:	3115      	adds	r1, #21
 800270e:	3320      	adds	r3, #32
 8002710:	291c      	cmp	r1, #28
 8002712:	dd8f      	ble.n	8002634 <__aeabi_dmul+0x3dc>
 8002714:	3808      	subs	r0, #8
 8002716:	2200      	movs	r2, #0
 8002718:	4084      	lsls	r4, r0
 800271a:	4692      	mov	sl, r2
 800271c:	46a3      	mov	fp, r4
 800271e:	e796      	b.n	800264e <__aeabi_dmul+0x3f6>
 8002720:	f000 fd56 	bl	80031d0 <__clzsi2>
 8002724:	0001      	movs	r1, r0
 8002726:	0003      	movs	r3, r0
 8002728:	3115      	adds	r1, #21
 800272a:	3320      	adds	r3, #32
 800272c:	291c      	cmp	r1, #28
 800272e:	dc00      	bgt.n	8002732 <__aeabi_dmul+0x4da>
 8002730:	e758      	b.n	80025e4 <__aeabi_dmul+0x38c>
 8002732:	0002      	movs	r2, r0
 8002734:	464c      	mov	r4, r9
 8002736:	3a08      	subs	r2, #8
 8002738:	2000      	movs	r0, #0
 800273a:	4094      	lsls	r4, r2
 800273c:	e75d      	b.n	80025fa <__aeabi_dmul+0x3a2>
 800273e:	9b01      	ldr	r3, [sp, #4]
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	e711      	b.n	8002568 <__aeabi_dmul+0x310>
 8002744:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <__aeabi_dmul+0x57c>)
 8002746:	0026      	movs	r6, r4
 8002748:	469c      	mov	ip, r3
 800274a:	0003      	movs	r3, r0
 800274c:	9d02      	ldr	r5, [sp, #8]
 800274e:	40cb      	lsrs	r3, r1
 8002750:	4465      	add	r5, ip
 8002752:	40ae      	lsls	r6, r5
 8002754:	431e      	orrs	r6, r3
 8002756:	0003      	movs	r3, r0
 8002758:	40ab      	lsls	r3, r5
 800275a:	1e58      	subs	r0, r3, #1
 800275c:	4183      	sbcs	r3, r0
 800275e:	0030      	movs	r0, r6
 8002760:	4318      	orrs	r0, r3
 8002762:	40cc      	lsrs	r4, r1
 8002764:	0743      	lsls	r3, r0, #29
 8002766:	d0c7      	beq.n	80026f8 <__aeabi_dmul+0x4a0>
 8002768:	230f      	movs	r3, #15
 800276a:	4003      	ands	r3, r0
 800276c:	2b04      	cmp	r3, #4
 800276e:	d1bd      	bne.n	80026ec <__aeabi_dmul+0x494>
 8002770:	e7c2      	b.n	80026f8 <__aeabi_dmul+0x4a0>
 8002772:	0765      	lsls	r5, r4, #29
 8002774:	0264      	lsls	r4, r4, #9
 8002776:	0b24      	lsrs	r4, r4, #12
 8002778:	08c0      	lsrs	r0, r0, #3
 800277a:	2300      	movs	r3, #0
 800277c:	4305      	orrs	r5, r0
 800277e:	e5dd      	b.n	800233c <__aeabi_dmul+0xe4>
 8002780:	2500      	movs	r5, #0
 8002782:	2302      	movs	r3, #2
 8002784:	2e0f      	cmp	r6, #15
 8002786:	d10c      	bne.n	80027a2 <__aeabi_dmul+0x54a>
 8002788:	2480      	movs	r4, #128	; 0x80
 800278a:	465b      	mov	r3, fp
 800278c:	0324      	lsls	r4, r4, #12
 800278e:	4223      	tst	r3, r4
 8002790:	d00e      	beq.n	80027b0 <__aeabi_dmul+0x558>
 8002792:	4221      	tst	r1, r4
 8002794:	d10c      	bne.n	80027b0 <__aeabi_dmul+0x558>
 8002796:	430c      	orrs	r4, r1
 8002798:	0324      	lsls	r4, r4, #12
 800279a:	003a      	movs	r2, r7
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <__aeabi_dmul+0x580>)
 800279e:	0b24      	lsrs	r4, r4, #12
 80027a0:	e5cc      	b.n	800233c <__aeabi_dmul+0xe4>
 80027a2:	2e0b      	cmp	r6, #11
 80027a4:	d000      	beq.n	80027a8 <__aeabi_dmul+0x550>
 80027a6:	e5a2      	b.n	80022ee <__aeabi_dmul+0x96>
 80027a8:	468b      	mov	fp, r1
 80027aa:	46aa      	mov	sl, r5
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	e5f7      	b.n	80023a0 <__aeabi_dmul+0x148>
 80027b0:	2480      	movs	r4, #128	; 0x80
 80027b2:	465b      	mov	r3, fp
 80027b4:	0324      	lsls	r4, r4, #12
 80027b6:	431c      	orrs	r4, r3
 80027b8:	0324      	lsls	r4, r4, #12
 80027ba:	4642      	mov	r2, r8
 80027bc:	4655      	mov	r5, sl
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <__aeabi_dmul+0x580>)
 80027c0:	0b24      	lsrs	r4, r4, #12
 80027c2:	e5bb      	b.n	800233c <__aeabi_dmul+0xe4>
 80027c4:	464d      	mov	r5, r9
 80027c6:	0021      	movs	r1, r4
 80027c8:	2303      	movs	r3, #3
 80027ca:	e7db      	b.n	8002784 <__aeabi_dmul+0x52c>
 80027cc:	fffffc0d 	.word	0xfffffc0d
 80027d0:	0000043e 	.word	0x0000043e
 80027d4:	0000041e 	.word	0x0000041e
 80027d8:	000007ff 	.word	0x000007ff

080027dc <__aeabi_dsub>:
 80027dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027de:	4657      	mov	r7, sl
 80027e0:	464e      	mov	r6, r9
 80027e2:	4645      	mov	r5, r8
 80027e4:	46de      	mov	lr, fp
 80027e6:	b5e0      	push	{r5, r6, r7, lr}
 80027e8:	000d      	movs	r5, r1
 80027ea:	0004      	movs	r4, r0
 80027ec:	0019      	movs	r1, r3
 80027ee:	0010      	movs	r0, r2
 80027f0:	032b      	lsls	r3, r5, #12
 80027f2:	0a5b      	lsrs	r3, r3, #9
 80027f4:	0f62      	lsrs	r2, r4, #29
 80027f6:	431a      	orrs	r2, r3
 80027f8:	00e3      	lsls	r3, r4, #3
 80027fa:	030c      	lsls	r4, r1, #12
 80027fc:	0a64      	lsrs	r4, r4, #9
 80027fe:	0f47      	lsrs	r7, r0, #29
 8002800:	4327      	orrs	r7, r4
 8002802:	4cd0      	ldr	r4, [pc, #832]	; (8002b44 <__aeabi_dsub+0x368>)
 8002804:	006e      	lsls	r6, r5, #1
 8002806:	4691      	mov	r9, r2
 8002808:	b083      	sub	sp, #12
 800280a:	004a      	lsls	r2, r1, #1
 800280c:	00c0      	lsls	r0, r0, #3
 800280e:	4698      	mov	r8, r3
 8002810:	46a2      	mov	sl, r4
 8002812:	0d76      	lsrs	r6, r6, #21
 8002814:	0fed      	lsrs	r5, r5, #31
 8002816:	0d52      	lsrs	r2, r2, #21
 8002818:	0fc9      	lsrs	r1, r1, #31
 800281a:	9001      	str	r0, [sp, #4]
 800281c:	42a2      	cmp	r2, r4
 800281e:	d100      	bne.n	8002822 <__aeabi_dsub+0x46>
 8002820:	e0b9      	b.n	8002996 <__aeabi_dsub+0x1ba>
 8002822:	2401      	movs	r4, #1
 8002824:	4061      	eors	r1, r4
 8002826:	468b      	mov	fp, r1
 8002828:	428d      	cmp	r5, r1
 800282a:	d100      	bne.n	800282e <__aeabi_dsub+0x52>
 800282c:	e08d      	b.n	800294a <__aeabi_dsub+0x16e>
 800282e:	1ab4      	subs	r4, r6, r2
 8002830:	46a4      	mov	ip, r4
 8002832:	2c00      	cmp	r4, #0
 8002834:	dc00      	bgt.n	8002838 <__aeabi_dsub+0x5c>
 8002836:	e0b7      	b.n	80029a8 <__aeabi_dsub+0x1cc>
 8002838:	2a00      	cmp	r2, #0
 800283a:	d100      	bne.n	800283e <__aeabi_dsub+0x62>
 800283c:	e0cb      	b.n	80029d6 <__aeabi_dsub+0x1fa>
 800283e:	4ac1      	ldr	r2, [pc, #772]	; (8002b44 <__aeabi_dsub+0x368>)
 8002840:	4296      	cmp	r6, r2
 8002842:	d100      	bne.n	8002846 <__aeabi_dsub+0x6a>
 8002844:	e186      	b.n	8002b54 <__aeabi_dsub+0x378>
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	0412      	lsls	r2, r2, #16
 800284a:	4317      	orrs	r7, r2
 800284c:	4662      	mov	r2, ip
 800284e:	2a38      	cmp	r2, #56	; 0x38
 8002850:	dd00      	ble.n	8002854 <__aeabi_dsub+0x78>
 8002852:	e1a4      	b.n	8002b9e <__aeabi_dsub+0x3c2>
 8002854:	2a1f      	cmp	r2, #31
 8002856:	dd00      	ble.n	800285a <__aeabi_dsub+0x7e>
 8002858:	e21d      	b.n	8002c96 <__aeabi_dsub+0x4ba>
 800285a:	4661      	mov	r1, ip
 800285c:	2220      	movs	r2, #32
 800285e:	003c      	movs	r4, r7
 8002860:	1a52      	subs	r2, r2, r1
 8002862:	0001      	movs	r1, r0
 8002864:	4090      	lsls	r0, r2
 8002866:	4094      	lsls	r4, r2
 8002868:	1e42      	subs	r2, r0, #1
 800286a:	4190      	sbcs	r0, r2
 800286c:	4662      	mov	r2, ip
 800286e:	46a0      	mov	r8, r4
 8002870:	4664      	mov	r4, ip
 8002872:	40d7      	lsrs	r7, r2
 8002874:	464a      	mov	r2, r9
 8002876:	40e1      	lsrs	r1, r4
 8002878:	4644      	mov	r4, r8
 800287a:	1bd2      	subs	r2, r2, r7
 800287c:	4691      	mov	r9, r2
 800287e:	430c      	orrs	r4, r1
 8002880:	4304      	orrs	r4, r0
 8002882:	1b1c      	subs	r4, r3, r4
 8002884:	42a3      	cmp	r3, r4
 8002886:	4192      	sbcs	r2, r2
 8002888:	464b      	mov	r3, r9
 800288a:	4252      	negs	r2, r2
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	469a      	mov	sl, r3
 8002890:	4653      	mov	r3, sl
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	d400      	bmi.n	8002898 <__aeabi_dsub+0xbc>
 8002896:	e12b      	b.n	8002af0 <__aeabi_dsub+0x314>
 8002898:	4653      	mov	r3, sl
 800289a:	025a      	lsls	r2, r3, #9
 800289c:	0a53      	lsrs	r3, r2, #9
 800289e:	469a      	mov	sl, r3
 80028a0:	4653      	mov	r3, sl
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0xcc>
 80028a6:	e166      	b.n	8002b76 <__aeabi_dsub+0x39a>
 80028a8:	4650      	mov	r0, sl
 80028aa:	f000 fc91 	bl	80031d0 <__clzsi2>
 80028ae:	0003      	movs	r3, r0
 80028b0:	3b08      	subs	r3, #8
 80028b2:	2220      	movs	r2, #32
 80028b4:	0020      	movs	r0, r4
 80028b6:	1ad2      	subs	r2, r2, r3
 80028b8:	4651      	mov	r1, sl
 80028ba:	40d0      	lsrs	r0, r2
 80028bc:	4099      	lsls	r1, r3
 80028be:	0002      	movs	r2, r0
 80028c0:	409c      	lsls	r4, r3
 80028c2:	430a      	orrs	r2, r1
 80028c4:	429e      	cmp	r6, r3
 80028c6:	dd00      	ble.n	80028ca <__aeabi_dsub+0xee>
 80028c8:	e164      	b.n	8002b94 <__aeabi_dsub+0x3b8>
 80028ca:	1b9b      	subs	r3, r3, r6
 80028cc:	1c59      	adds	r1, r3, #1
 80028ce:	291f      	cmp	r1, #31
 80028d0:	dd00      	ble.n	80028d4 <__aeabi_dsub+0xf8>
 80028d2:	e0fe      	b.n	8002ad2 <__aeabi_dsub+0x2f6>
 80028d4:	2320      	movs	r3, #32
 80028d6:	0010      	movs	r0, r2
 80028d8:	0026      	movs	r6, r4
 80028da:	1a5b      	subs	r3, r3, r1
 80028dc:	409c      	lsls	r4, r3
 80028de:	4098      	lsls	r0, r3
 80028e0:	40ce      	lsrs	r6, r1
 80028e2:	40ca      	lsrs	r2, r1
 80028e4:	1e63      	subs	r3, r4, #1
 80028e6:	419c      	sbcs	r4, r3
 80028e8:	4330      	orrs	r0, r6
 80028ea:	4692      	mov	sl, r2
 80028ec:	2600      	movs	r6, #0
 80028ee:	4304      	orrs	r4, r0
 80028f0:	0763      	lsls	r3, r4, #29
 80028f2:	d009      	beq.n	8002908 <__aeabi_dsub+0x12c>
 80028f4:	230f      	movs	r3, #15
 80028f6:	4023      	ands	r3, r4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d005      	beq.n	8002908 <__aeabi_dsub+0x12c>
 80028fc:	1d23      	adds	r3, r4, #4
 80028fe:	42a3      	cmp	r3, r4
 8002900:	41a4      	sbcs	r4, r4
 8002902:	4264      	negs	r4, r4
 8002904:	44a2      	add	sl, r4
 8002906:	001c      	movs	r4, r3
 8002908:	4653      	mov	r3, sl
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	d400      	bmi.n	8002910 <__aeabi_dsub+0x134>
 800290e:	e0f2      	b.n	8002af6 <__aeabi_dsub+0x31a>
 8002910:	4b8c      	ldr	r3, [pc, #560]	; (8002b44 <__aeabi_dsub+0x368>)
 8002912:	3601      	adds	r6, #1
 8002914:	429e      	cmp	r6, r3
 8002916:	d100      	bne.n	800291a <__aeabi_dsub+0x13e>
 8002918:	e10f      	b.n	8002b3a <__aeabi_dsub+0x35e>
 800291a:	4653      	mov	r3, sl
 800291c:	498a      	ldr	r1, [pc, #552]	; (8002b48 <__aeabi_dsub+0x36c>)
 800291e:	08e4      	lsrs	r4, r4, #3
 8002920:	400b      	ands	r3, r1
 8002922:	0019      	movs	r1, r3
 8002924:	075b      	lsls	r3, r3, #29
 8002926:	4323      	orrs	r3, r4
 8002928:	0572      	lsls	r2, r6, #21
 800292a:	024c      	lsls	r4, r1, #9
 800292c:	0b24      	lsrs	r4, r4, #12
 800292e:	0d52      	lsrs	r2, r2, #21
 8002930:	0512      	lsls	r2, r2, #20
 8002932:	4322      	orrs	r2, r4
 8002934:	07ed      	lsls	r5, r5, #31
 8002936:	432a      	orrs	r2, r5
 8002938:	0018      	movs	r0, r3
 800293a:	0011      	movs	r1, r2
 800293c:	b003      	add	sp, #12
 800293e:	bcf0      	pop	{r4, r5, r6, r7}
 8002940:	46bb      	mov	fp, r7
 8002942:	46b2      	mov	sl, r6
 8002944:	46a9      	mov	r9, r5
 8002946:	46a0      	mov	r8, r4
 8002948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294a:	1ab4      	subs	r4, r6, r2
 800294c:	46a4      	mov	ip, r4
 800294e:	2c00      	cmp	r4, #0
 8002950:	dd59      	ble.n	8002a06 <__aeabi_dsub+0x22a>
 8002952:	2a00      	cmp	r2, #0
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x17c>
 8002956:	e0b0      	b.n	8002aba <__aeabi_dsub+0x2de>
 8002958:	4556      	cmp	r6, sl
 800295a:	d100      	bne.n	800295e <__aeabi_dsub+0x182>
 800295c:	e0fa      	b.n	8002b54 <__aeabi_dsub+0x378>
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	0412      	lsls	r2, r2, #16
 8002962:	4317      	orrs	r7, r2
 8002964:	4662      	mov	r2, ip
 8002966:	2a38      	cmp	r2, #56	; 0x38
 8002968:	dd00      	ble.n	800296c <__aeabi_dsub+0x190>
 800296a:	e0d4      	b.n	8002b16 <__aeabi_dsub+0x33a>
 800296c:	2a1f      	cmp	r2, #31
 800296e:	dc00      	bgt.n	8002972 <__aeabi_dsub+0x196>
 8002970:	e1c0      	b.n	8002cf4 <__aeabi_dsub+0x518>
 8002972:	0039      	movs	r1, r7
 8002974:	3a20      	subs	r2, #32
 8002976:	40d1      	lsrs	r1, r2
 8002978:	4662      	mov	r2, ip
 800297a:	2a20      	cmp	r2, #32
 800297c:	d006      	beq.n	800298c <__aeabi_dsub+0x1b0>
 800297e:	4664      	mov	r4, ip
 8002980:	2240      	movs	r2, #64	; 0x40
 8002982:	1b12      	subs	r2, r2, r4
 8002984:	003c      	movs	r4, r7
 8002986:	4094      	lsls	r4, r2
 8002988:	4304      	orrs	r4, r0
 800298a:	9401      	str	r4, [sp, #4]
 800298c:	9c01      	ldr	r4, [sp, #4]
 800298e:	1e62      	subs	r2, r4, #1
 8002990:	4194      	sbcs	r4, r2
 8002992:	430c      	orrs	r4, r1
 8002994:	e0c3      	b.n	8002b1e <__aeabi_dsub+0x342>
 8002996:	003c      	movs	r4, r7
 8002998:	4304      	orrs	r4, r0
 800299a:	d02b      	beq.n	80029f4 <__aeabi_dsub+0x218>
 800299c:	468b      	mov	fp, r1
 800299e:	428d      	cmp	r5, r1
 80029a0:	d02e      	beq.n	8002a00 <__aeabi_dsub+0x224>
 80029a2:	4c6a      	ldr	r4, [pc, #424]	; (8002b4c <__aeabi_dsub+0x370>)
 80029a4:	46a4      	mov	ip, r4
 80029a6:	44b4      	add	ip, r6
 80029a8:	4664      	mov	r4, ip
 80029aa:	2c00      	cmp	r4, #0
 80029ac:	d05f      	beq.n	8002a6e <__aeabi_dsub+0x292>
 80029ae:	1b94      	subs	r4, r2, r6
 80029b0:	46a4      	mov	ip, r4
 80029b2:	2e00      	cmp	r6, #0
 80029b4:	d000      	beq.n	80029b8 <__aeabi_dsub+0x1dc>
 80029b6:	e120      	b.n	8002bfa <__aeabi_dsub+0x41e>
 80029b8:	464c      	mov	r4, r9
 80029ba:	431c      	orrs	r4, r3
 80029bc:	d100      	bne.n	80029c0 <__aeabi_dsub+0x1e4>
 80029be:	e1c7      	b.n	8002d50 <__aeabi_dsub+0x574>
 80029c0:	4661      	mov	r1, ip
 80029c2:	1e4c      	subs	r4, r1, #1
 80029c4:	2901      	cmp	r1, #1
 80029c6:	d100      	bne.n	80029ca <__aeabi_dsub+0x1ee>
 80029c8:	e223      	b.n	8002e12 <__aeabi_dsub+0x636>
 80029ca:	4d5e      	ldr	r5, [pc, #376]	; (8002b44 <__aeabi_dsub+0x368>)
 80029cc:	45ac      	cmp	ip, r5
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x1f6>
 80029d0:	e1d8      	b.n	8002d84 <__aeabi_dsub+0x5a8>
 80029d2:	46a4      	mov	ip, r4
 80029d4:	e11a      	b.n	8002c0c <__aeabi_dsub+0x430>
 80029d6:	003a      	movs	r2, r7
 80029d8:	4302      	orrs	r2, r0
 80029da:	d100      	bne.n	80029de <__aeabi_dsub+0x202>
 80029dc:	e0e4      	b.n	8002ba8 <__aeabi_dsub+0x3cc>
 80029de:	0022      	movs	r2, r4
 80029e0:	3a01      	subs	r2, #1
 80029e2:	2c01      	cmp	r4, #1
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x20c>
 80029e6:	e1c3      	b.n	8002d70 <__aeabi_dsub+0x594>
 80029e8:	4956      	ldr	r1, [pc, #344]	; (8002b44 <__aeabi_dsub+0x368>)
 80029ea:	428c      	cmp	r4, r1
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x214>
 80029ee:	e0b1      	b.n	8002b54 <__aeabi_dsub+0x378>
 80029f0:	4694      	mov	ip, r2
 80029f2:	e72b      	b.n	800284c <__aeabi_dsub+0x70>
 80029f4:	2401      	movs	r4, #1
 80029f6:	4061      	eors	r1, r4
 80029f8:	468b      	mov	fp, r1
 80029fa:	428d      	cmp	r5, r1
 80029fc:	d000      	beq.n	8002a00 <__aeabi_dsub+0x224>
 80029fe:	e716      	b.n	800282e <__aeabi_dsub+0x52>
 8002a00:	4952      	ldr	r1, [pc, #328]	; (8002b4c <__aeabi_dsub+0x370>)
 8002a02:	468c      	mov	ip, r1
 8002a04:	44b4      	add	ip, r6
 8002a06:	4664      	mov	r4, ip
 8002a08:	2c00      	cmp	r4, #0
 8002a0a:	d100      	bne.n	8002a0e <__aeabi_dsub+0x232>
 8002a0c:	e0d3      	b.n	8002bb6 <__aeabi_dsub+0x3da>
 8002a0e:	1b91      	subs	r1, r2, r6
 8002a10:	468c      	mov	ip, r1
 8002a12:	2e00      	cmp	r6, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_dsub+0x23c>
 8002a16:	e15e      	b.n	8002cd6 <__aeabi_dsub+0x4fa>
 8002a18:	494a      	ldr	r1, [pc, #296]	; (8002b44 <__aeabi_dsub+0x368>)
 8002a1a:	428a      	cmp	r2, r1
 8002a1c:	d100      	bne.n	8002a20 <__aeabi_dsub+0x244>
 8002a1e:	e1be      	b.n	8002d9e <__aeabi_dsub+0x5c2>
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	464c      	mov	r4, r9
 8002a24:	0409      	lsls	r1, r1, #16
 8002a26:	430c      	orrs	r4, r1
 8002a28:	46a1      	mov	r9, r4
 8002a2a:	4661      	mov	r1, ip
 8002a2c:	2938      	cmp	r1, #56	; 0x38
 8002a2e:	dd00      	ble.n	8002a32 <__aeabi_dsub+0x256>
 8002a30:	e1ba      	b.n	8002da8 <__aeabi_dsub+0x5cc>
 8002a32:	291f      	cmp	r1, #31
 8002a34:	dd00      	ble.n	8002a38 <__aeabi_dsub+0x25c>
 8002a36:	e227      	b.n	8002e88 <__aeabi_dsub+0x6ac>
 8002a38:	2420      	movs	r4, #32
 8002a3a:	1a64      	subs	r4, r4, r1
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	40a1      	lsls	r1, r4
 8002a40:	001e      	movs	r6, r3
 8002a42:	4688      	mov	r8, r1
 8002a44:	4661      	mov	r1, ip
 8002a46:	40a3      	lsls	r3, r4
 8002a48:	40ce      	lsrs	r6, r1
 8002a4a:	4641      	mov	r1, r8
 8002a4c:	1e5c      	subs	r4, r3, #1
 8002a4e:	41a3      	sbcs	r3, r4
 8002a50:	4331      	orrs	r1, r6
 8002a52:	4319      	orrs	r1, r3
 8002a54:	000c      	movs	r4, r1
 8002a56:	4663      	mov	r3, ip
 8002a58:	4649      	mov	r1, r9
 8002a5a:	40d9      	lsrs	r1, r3
 8002a5c:	187f      	adds	r7, r7, r1
 8002a5e:	1824      	adds	r4, r4, r0
 8002a60:	4284      	cmp	r4, r0
 8002a62:	419b      	sbcs	r3, r3
 8002a64:	425b      	negs	r3, r3
 8002a66:	469a      	mov	sl, r3
 8002a68:	0016      	movs	r6, r2
 8002a6a:	44ba      	add	sl, r7
 8002a6c:	e05d      	b.n	8002b2a <__aeabi_dsub+0x34e>
 8002a6e:	4c38      	ldr	r4, [pc, #224]	; (8002b50 <__aeabi_dsub+0x374>)
 8002a70:	1c72      	adds	r2, r6, #1
 8002a72:	4222      	tst	r2, r4
 8002a74:	d000      	beq.n	8002a78 <__aeabi_dsub+0x29c>
 8002a76:	e0df      	b.n	8002c38 <__aeabi_dsub+0x45c>
 8002a78:	464a      	mov	r2, r9
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	2e00      	cmp	r6, #0
 8002a7e:	d000      	beq.n	8002a82 <__aeabi_dsub+0x2a6>
 8002a80:	e15c      	b.n	8002d3c <__aeabi_dsub+0x560>
 8002a82:	2a00      	cmp	r2, #0
 8002a84:	d100      	bne.n	8002a88 <__aeabi_dsub+0x2ac>
 8002a86:	e1cf      	b.n	8002e28 <__aeabi_dsub+0x64c>
 8002a88:	003a      	movs	r2, r7
 8002a8a:	4302      	orrs	r2, r0
 8002a8c:	d100      	bne.n	8002a90 <__aeabi_dsub+0x2b4>
 8002a8e:	e17f      	b.n	8002d90 <__aeabi_dsub+0x5b4>
 8002a90:	1a1c      	subs	r4, r3, r0
 8002a92:	464a      	mov	r2, r9
 8002a94:	42a3      	cmp	r3, r4
 8002a96:	4189      	sbcs	r1, r1
 8002a98:	1bd2      	subs	r2, r2, r7
 8002a9a:	4249      	negs	r1, r1
 8002a9c:	1a52      	subs	r2, r2, r1
 8002a9e:	4692      	mov	sl, r2
 8002aa0:	0212      	lsls	r2, r2, #8
 8002aa2:	d400      	bmi.n	8002aa6 <__aeabi_dsub+0x2ca>
 8002aa4:	e20a      	b.n	8002ebc <__aeabi_dsub+0x6e0>
 8002aa6:	1ac4      	subs	r4, r0, r3
 8002aa8:	42a0      	cmp	r0, r4
 8002aaa:	4180      	sbcs	r0, r0
 8002aac:	464b      	mov	r3, r9
 8002aae:	4240      	negs	r0, r0
 8002ab0:	1aff      	subs	r7, r7, r3
 8002ab2:	1a3b      	subs	r3, r7, r0
 8002ab4:	469a      	mov	sl, r3
 8002ab6:	465d      	mov	r5, fp
 8002ab8:	e71a      	b.n	80028f0 <__aeabi_dsub+0x114>
 8002aba:	003a      	movs	r2, r7
 8002abc:	4302      	orrs	r2, r0
 8002abe:	d073      	beq.n	8002ba8 <__aeabi_dsub+0x3cc>
 8002ac0:	0022      	movs	r2, r4
 8002ac2:	3a01      	subs	r2, #1
 8002ac4:	2c01      	cmp	r4, #1
 8002ac6:	d100      	bne.n	8002aca <__aeabi_dsub+0x2ee>
 8002ac8:	e0cb      	b.n	8002c62 <__aeabi_dsub+0x486>
 8002aca:	4554      	cmp	r4, sl
 8002acc:	d042      	beq.n	8002b54 <__aeabi_dsub+0x378>
 8002ace:	4694      	mov	ip, r2
 8002ad0:	e748      	b.n	8002964 <__aeabi_dsub+0x188>
 8002ad2:	0010      	movs	r0, r2
 8002ad4:	3b1f      	subs	r3, #31
 8002ad6:	40d8      	lsrs	r0, r3
 8002ad8:	2920      	cmp	r1, #32
 8002ada:	d003      	beq.n	8002ae4 <__aeabi_dsub+0x308>
 8002adc:	2340      	movs	r3, #64	; 0x40
 8002ade:	1a5b      	subs	r3, r3, r1
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	4314      	orrs	r4, r2
 8002ae4:	1e63      	subs	r3, r4, #1
 8002ae6:	419c      	sbcs	r4, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2600      	movs	r6, #0
 8002aec:	469a      	mov	sl, r3
 8002aee:	4304      	orrs	r4, r0
 8002af0:	0763      	lsls	r3, r4, #29
 8002af2:	d000      	beq.n	8002af6 <__aeabi_dsub+0x31a>
 8002af4:	e6fe      	b.n	80028f4 <__aeabi_dsub+0x118>
 8002af6:	4652      	mov	r2, sl
 8002af8:	08e3      	lsrs	r3, r4, #3
 8002afa:	0752      	lsls	r2, r2, #29
 8002afc:	4313      	orrs	r3, r2
 8002afe:	4652      	mov	r2, sl
 8002b00:	46b4      	mov	ip, r6
 8002b02:	08d2      	lsrs	r2, r2, #3
 8002b04:	490f      	ldr	r1, [pc, #60]	; (8002b44 <__aeabi_dsub+0x368>)
 8002b06:	458c      	cmp	ip, r1
 8002b08:	d02a      	beq.n	8002b60 <__aeabi_dsub+0x384>
 8002b0a:	0312      	lsls	r2, r2, #12
 8002b0c:	0b14      	lsrs	r4, r2, #12
 8002b0e:	4662      	mov	r2, ip
 8002b10:	0552      	lsls	r2, r2, #21
 8002b12:	0d52      	lsrs	r2, r2, #21
 8002b14:	e70c      	b.n	8002930 <__aeabi_dsub+0x154>
 8002b16:	003c      	movs	r4, r7
 8002b18:	4304      	orrs	r4, r0
 8002b1a:	1e62      	subs	r2, r4, #1
 8002b1c:	4194      	sbcs	r4, r2
 8002b1e:	18e4      	adds	r4, r4, r3
 8002b20:	429c      	cmp	r4, r3
 8002b22:	4192      	sbcs	r2, r2
 8002b24:	4252      	negs	r2, r2
 8002b26:	444a      	add	r2, r9
 8002b28:	4692      	mov	sl, r2
 8002b2a:	4653      	mov	r3, sl
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	d5df      	bpl.n	8002af0 <__aeabi_dsub+0x314>
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__aeabi_dsub+0x368>)
 8002b32:	3601      	adds	r6, #1
 8002b34:	429e      	cmp	r6, r3
 8002b36:	d000      	beq.n	8002b3a <__aeabi_dsub+0x35e>
 8002b38:	e0a0      	b.n	8002c7c <__aeabi_dsub+0x4a0>
 8002b3a:	0032      	movs	r2, r6
 8002b3c:	2400      	movs	r4, #0
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e6f6      	b.n	8002930 <__aeabi_dsub+0x154>
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	000007ff 	.word	0x000007ff
 8002b48:	ff7fffff 	.word	0xff7fffff
 8002b4c:	fffff801 	.word	0xfffff801
 8002b50:	000007fe 	.word	0x000007fe
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	464a      	mov	r2, r9
 8002b58:	0752      	lsls	r2, r2, #29
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	464a      	mov	r2, r9
 8002b5e:	08d2      	lsrs	r2, r2, #3
 8002b60:	0019      	movs	r1, r3
 8002b62:	4311      	orrs	r1, r2
 8002b64:	d100      	bne.n	8002b68 <__aeabi_dsub+0x38c>
 8002b66:	e1b5      	b.n	8002ed4 <__aeabi_dsub+0x6f8>
 8002b68:	2480      	movs	r4, #128	; 0x80
 8002b6a:	0324      	lsls	r4, r4, #12
 8002b6c:	4314      	orrs	r4, r2
 8002b6e:	0324      	lsls	r4, r4, #12
 8002b70:	4ad5      	ldr	r2, [pc, #852]	; (8002ec8 <__aeabi_dsub+0x6ec>)
 8002b72:	0b24      	lsrs	r4, r4, #12
 8002b74:	e6dc      	b.n	8002930 <__aeabi_dsub+0x154>
 8002b76:	0020      	movs	r0, r4
 8002b78:	f000 fb2a 	bl	80031d0 <__clzsi2>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3318      	adds	r3, #24
 8002b80:	2b1f      	cmp	r3, #31
 8002b82:	dc00      	bgt.n	8002b86 <__aeabi_dsub+0x3aa>
 8002b84:	e695      	b.n	80028b2 <__aeabi_dsub+0xd6>
 8002b86:	0022      	movs	r2, r4
 8002b88:	3808      	subs	r0, #8
 8002b8a:	4082      	lsls	r2, r0
 8002b8c:	2400      	movs	r4, #0
 8002b8e:	429e      	cmp	r6, r3
 8002b90:	dc00      	bgt.n	8002b94 <__aeabi_dsub+0x3b8>
 8002b92:	e69a      	b.n	80028ca <__aeabi_dsub+0xee>
 8002b94:	1af6      	subs	r6, r6, r3
 8002b96:	4bcd      	ldr	r3, [pc, #820]	; (8002ecc <__aeabi_dsub+0x6f0>)
 8002b98:	401a      	ands	r2, r3
 8002b9a:	4692      	mov	sl, r2
 8002b9c:	e6a8      	b.n	80028f0 <__aeabi_dsub+0x114>
 8002b9e:	003c      	movs	r4, r7
 8002ba0:	4304      	orrs	r4, r0
 8002ba2:	1e62      	subs	r2, r4, #1
 8002ba4:	4194      	sbcs	r4, r2
 8002ba6:	e66c      	b.n	8002882 <__aeabi_dsub+0xa6>
 8002ba8:	464a      	mov	r2, r9
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	0752      	lsls	r2, r2, #29
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	464a      	mov	r2, r9
 8002bb2:	08d2      	lsrs	r2, r2, #3
 8002bb4:	e7a6      	b.n	8002b04 <__aeabi_dsub+0x328>
 8002bb6:	4cc6      	ldr	r4, [pc, #792]	; (8002ed0 <__aeabi_dsub+0x6f4>)
 8002bb8:	1c72      	adds	r2, r6, #1
 8002bba:	4222      	tst	r2, r4
 8002bbc:	d000      	beq.n	8002bc0 <__aeabi_dsub+0x3e4>
 8002bbe:	e0ac      	b.n	8002d1a <__aeabi_dsub+0x53e>
 8002bc0:	464a      	mov	r2, r9
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	2e00      	cmp	r6, #0
 8002bc6:	d000      	beq.n	8002bca <__aeabi_dsub+0x3ee>
 8002bc8:	e105      	b.n	8002dd6 <__aeabi_dsub+0x5fa>
 8002bca:	2a00      	cmp	r2, #0
 8002bcc:	d100      	bne.n	8002bd0 <__aeabi_dsub+0x3f4>
 8002bce:	e156      	b.n	8002e7e <__aeabi_dsub+0x6a2>
 8002bd0:	003a      	movs	r2, r7
 8002bd2:	4302      	orrs	r2, r0
 8002bd4:	d100      	bne.n	8002bd8 <__aeabi_dsub+0x3fc>
 8002bd6:	e0db      	b.n	8002d90 <__aeabi_dsub+0x5b4>
 8002bd8:	181c      	adds	r4, r3, r0
 8002bda:	429c      	cmp	r4, r3
 8002bdc:	419b      	sbcs	r3, r3
 8002bde:	444f      	add	r7, r9
 8002be0:	46ba      	mov	sl, r7
 8002be2:	425b      	negs	r3, r3
 8002be4:	449a      	add	sl, r3
 8002be6:	4653      	mov	r3, sl
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	d400      	bmi.n	8002bee <__aeabi_dsub+0x412>
 8002bec:	e780      	b.n	8002af0 <__aeabi_dsub+0x314>
 8002bee:	4652      	mov	r2, sl
 8002bf0:	4bb6      	ldr	r3, [pc, #728]	; (8002ecc <__aeabi_dsub+0x6f0>)
 8002bf2:	2601      	movs	r6, #1
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	4692      	mov	sl, r2
 8002bf8:	e77a      	b.n	8002af0 <__aeabi_dsub+0x314>
 8002bfa:	4cb3      	ldr	r4, [pc, #716]	; (8002ec8 <__aeabi_dsub+0x6ec>)
 8002bfc:	42a2      	cmp	r2, r4
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x426>
 8002c00:	e0c0      	b.n	8002d84 <__aeabi_dsub+0x5a8>
 8002c02:	2480      	movs	r4, #128	; 0x80
 8002c04:	464d      	mov	r5, r9
 8002c06:	0424      	lsls	r4, r4, #16
 8002c08:	4325      	orrs	r5, r4
 8002c0a:	46a9      	mov	r9, r5
 8002c0c:	4664      	mov	r4, ip
 8002c0e:	2c38      	cmp	r4, #56	; 0x38
 8002c10:	dc53      	bgt.n	8002cba <__aeabi_dsub+0x4de>
 8002c12:	4661      	mov	r1, ip
 8002c14:	2c1f      	cmp	r4, #31
 8002c16:	dd00      	ble.n	8002c1a <__aeabi_dsub+0x43e>
 8002c18:	e0cd      	b.n	8002db6 <__aeabi_dsub+0x5da>
 8002c1a:	2520      	movs	r5, #32
 8002c1c:	001e      	movs	r6, r3
 8002c1e:	1b2d      	subs	r5, r5, r4
 8002c20:	464c      	mov	r4, r9
 8002c22:	40ab      	lsls	r3, r5
 8002c24:	40ac      	lsls	r4, r5
 8002c26:	40ce      	lsrs	r6, r1
 8002c28:	1e5d      	subs	r5, r3, #1
 8002c2a:	41ab      	sbcs	r3, r5
 8002c2c:	4334      	orrs	r4, r6
 8002c2e:	4323      	orrs	r3, r4
 8002c30:	464c      	mov	r4, r9
 8002c32:	40cc      	lsrs	r4, r1
 8002c34:	1b3f      	subs	r7, r7, r4
 8002c36:	e045      	b.n	8002cc4 <__aeabi_dsub+0x4e8>
 8002c38:	464a      	mov	r2, r9
 8002c3a:	1a1c      	subs	r4, r3, r0
 8002c3c:	1bd1      	subs	r1, r2, r7
 8002c3e:	42a3      	cmp	r3, r4
 8002c40:	4192      	sbcs	r2, r2
 8002c42:	4252      	negs	r2, r2
 8002c44:	4692      	mov	sl, r2
 8002c46:	000a      	movs	r2, r1
 8002c48:	4651      	mov	r1, sl
 8002c4a:	1a52      	subs	r2, r2, r1
 8002c4c:	4692      	mov	sl, r2
 8002c4e:	0212      	lsls	r2, r2, #8
 8002c50:	d500      	bpl.n	8002c54 <__aeabi_dsub+0x478>
 8002c52:	e083      	b.n	8002d5c <__aeabi_dsub+0x580>
 8002c54:	4653      	mov	r3, sl
 8002c56:	4323      	orrs	r3, r4
 8002c58:	d000      	beq.n	8002c5c <__aeabi_dsub+0x480>
 8002c5a:	e621      	b.n	80028a0 <__aeabi_dsub+0xc4>
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2500      	movs	r5, #0
 8002c60:	e753      	b.n	8002b0a <__aeabi_dsub+0x32e>
 8002c62:	181c      	adds	r4, r3, r0
 8002c64:	429c      	cmp	r4, r3
 8002c66:	419b      	sbcs	r3, r3
 8002c68:	444f      	add	r7, r9
 8002c6a:	46ba      	mov	sl, r7
 8002c6c:	425b      	negs	r3, r3
 8002c6e:	449a      	add	sl, r3
 8002c70:	4653      	mov	r3, sl
 8002c72:	2601      	movs	r6, #1
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	d400      	bmi.n	8002c7a <__aeabi_dsub+0x49e>
 8002c78:	e73a      	b.n	8002af0 <__aeabi_dsub+0x314>
 8002c7a:	2602      	movs	r6, #2
 8002c7c:	4652      	mov	r2, sl
 8002c7e:	4b93      	ldr	r3, [pc, #588]	; (8002ecc <__aeabi_dsub+0x6f0>)
 8002c80:	2101      	movs	r1, #1
 8002c82:	401a      	ands	r2, r3
 8002c84:	0013      	movs	r3, r2
 8002c86:	4021      	ands	r1, r4
 8002c88:	0862      	lsrs	r2, r4, #1
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	07dc      	lsls	r4, r3, #31
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	469a      	mov	sl, r3
 8002c92:	4314      	orrs	r4, r2
 8002c94:	e62c      	b.n	80028f0 <__aeabi_dsub+0x114>
 8002c96:	0039      	movs	r1, r7
 8002c98:	3a20      	subs	r2, #32
 8002c9a:	40d1      	lsrs	r1, r2
 8002c9c:	4662      	mov	r2, ip
 8002c9e:	2a20      	cmp	r2, #32
 8002ca0:	d006      	beq.n	8002cb0 <__aeabi_dsub+0x4d4>
 8002ca2:	4664      	mov	r4, ip
 8002ca4:	2240      	movs	r2, #64	; 0x40
 8002ca6:	1b12      	subs	r2, r2, r4
 8002ca8:	003c      	movs	r4, r7
 8002caa:	4094      	lsls	r4, r2
 8002cac:	4304      	orrs	r4, r0
 8002cae:	9401      	str	r4, [sp, #4]
 8002cb0:	9c01      	ldr	r4, [sp, #4]
 8002cb2:	1e62      	subs	r2, r4, #1
 8002cb4:	4194      	sbcs	r4, r2
 8002cb6:	430c      	orrs	r4, r1
 8002cb8:	e5e3      	b.n	8002882 <__aeabi_dsub+0xa6>
 8002cba:	4649      	mov	r1, r9
 8002cbc:	4319      	orrs	r1, r3
 8002cbe:	000b      	movs	r3, r1
 8002cc0:	1e5c      	subs	r4, r3, #1
 8002cc2:	41a3      	sbcs	r3, r4
 8002cc4:	1ac4      	subs	r4, r0, r3
 8002cc6:	42a0      	cmp	r0, r4
 8002cc8:	419b      	sbcs	r3, r3
 8002cca:	425b      	negs	r3, r3
 8002ccc:	1afb      	subs	r3, r7, r3
 8002cce:	469a      	mov	sl, r3
 8002cd0:	465d      	mov	r5, fp
 8002cd2:	0016      	movs	r6, r2
 8002cd4:	e5dc      	b.n	8002890 <__aeabi_dsub+0xb4>
 8002cd6:	4649      	mov	r1, r9
 8002cd8:	4319      	orrs	r1, r3
 8002cda:	d100      	bne.n	8002cde <__aeabi_dsub+0x502>
 8002cdc:	e0ae      	b.n	8002e3c <__aeabi_dsub+0x660>
 8002cde:	4661      	mov	r1, ip
 8002ce0:	4664      	mov	r4, ip
 8002ce2:	3901      	subs	r1, #1
 8002ce4:	2c01      	cmp	r4, #1
 8002ce6:	d100      	bne.n	8002cea <__aeabi_dsub+0x50e>
 8002ce8:	e0e0      	b.n	8002eac <__aeabi_dsub+0x6d0>
 8002cea:	4c77      	ldr	r4, [pc, #476]	; (8002ec8 <__aeabi_dsub+0x6ec>)
 8002cec:	45a4      	cmp	ip, r4
 8002cee:	d056      	beq.n	8002d9e <__aeabi_dsub+0x5c2>
 8002cf0:	468c      	mov	ip, r1
 8002cf2:	e69a      	b.n	8002a2a <__aeabi_dsub+0x24e>
 8002cf4:	4661      	mov	r1, ip
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	003c      	movs	r4, r7
 8002cfa:	1a52      	subs	r2, r2, r1
 8002cfc:	4094      	lsls	r4, r2
 8002cfe:	0001      	movs	r1, r0
 8002d00:	4090      	lsls	r0, r2
 8002d02:	46a0      	mov	r8, r4
 8002d04:	4664      	mov	r4, ip
 8002d06:	1e42      	subs	r2, r0, #1
 8002d08:	4190      	sbcs	r0, r2
 8002d0a:	4662      	mov	r2, ip
 8002d0c:	40e1      	lsrs	r1, r4
 8002d0e:	4644      	mov	r4, r8
 8002d10:	40d7      	lsrs	r7, r2
 8002d12:	430c      	orrs	r4, r1
 8002d14:	4304      	orrs	r4, r0
 8002d16:	44b9      	add	r9, r7
 8002d18:	e701      	b.n	8002b1e <__aeabi_dsub+0x342>
 8002d1a:	496b      	ldr	r1, [pc, #428]	; (8002ec8 <__aeabi_dsub+0x6ec>)
 8002d1c:	428a      	cmp	r2, r1
 8002d1e:	d100      	bne.n	8002d22 <__aeabi_dsub+0x546>
 8002d20:	e70c      	b.n	8002b3c <__aeabi_dsub+0x360>
 8002d22:	1818      	adds	r0, r3, r0
 8002d24:	4298      	cmp	r0, r3
 8002d26:	419b      	sbcs	r3, r3
 8002d28:	444f      	add	r7, r9
 8002d2a:	425b      	negs	r3, r3
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	07dc      	lsls	r4, r3, #31
 8002d30:	0840      	lsrs	r0, r0, #1
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	469a      	mov	sl, r3
 8002d36:	0016      	movs	r6, r2
 8002d38:	4304      	orrs	r4, r0
 8002d3a:	e6d9      	b.n	8002af0 <__aeabi_dsub+0x314>
 8002d3c:	2a00      	cmp	r2, #0
 8002d3e:	d000      	beq.n	8002d42 <__aeabi_dsub+0x566>
 8002d40:	e081      	b.n	8002e46 <__aeabi_dsub+0x66a>
 8002d42:	003b      	movs	r3, r7
 8002d44:	4303      	orrs	r3, r0
 8002d46:	d11d      	bne.n	8002d84 <__aeabi_dsub+0x5a8>
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	2500      	movs	r5, #0
 8002d4c:	0312      	lsls	r2, r2, #12
 8002d4e:	e70b      	b.n	8002b68 <__aeabi_dsub+0x38c>
 8002d50:	08c0      	lsrs	r0, r0, #3
 8002d52:	077b      	lsls	r3, r7, #29
 8002d54:	465d      	mov	r5, fp
 8002d56:	4303      	orrs	r3, r0
 8002d58:	08fa      	lsrs	r2, r7, #3
 8002d5a:	e6d3      	b.n	8002b04 <__aeabi_dsub+0x328>
 8002d5c:	1ac4      	subs	r4, r0, r3
 8002d5e:	42a0      	cmp	r0, r4
 8002d60:	4180      	sbcs	r0, r0
 8002d62:	464b      	mov	r3, r9
 8002d64:	4240      	negs	r0, r0
 8002d66:	1aff      	subs	r7, r7, r3
 8002d68:	1a3b      	subs	r3, r7, r0
 8002d6a:	469a      	mov	sl, r3
 8002d6c:	465d      	mov	r5, fp
 8002d6e:	e597      	b.n	80028a0 <__aeabi_dsub+0xc4>
 8002d70:	1a1c      	subs	r4, r3, r0
 8002d72:	464a      	mov	r2, r9
 8002d74:	42a3      	cmp	r3, r4
 8002d76:	419b      	sbcs	r3, r3
 8002d78:	1bd7      	subs	r7, r2, r7
 8002d7a:	425b      	negs	r3, r3
 8002d7c:	1afb      	subs	r3, r7, r3
 8002d7e:	469a      	mov	sl, r3
 8002d80:	2601      	movs	r6, #1
 8002d82:	e585      	b.n	8002890 <__aeabi_dsub+0xb4>
 8002d84:	08c0      	lsrs	r0, r0, #3
 8002d86:	077b      	lsls	r3, r7, #29
 8002d88:	465d      	mov	r5, fp
 8002d8a:	4303      	orrs	r3, r0
 8002d8c:	08fa      	lsrs	r2, r7, #3
 8002d8e:	e6e7      	b.n	8002b60 <__aeabi_dsub+0x384>
 8002d90:	464a      	mov	r2, r9
 8002d92:	08db      	lsrs	r3, r3, #3
 8002d94:	0752      	lsls	r2, r2, #29
 8002d96:	4313      	orrs	r3, r2
 8002d98:	464a      	mov	r2, r9
 8002d9a:	08d2      	lsrs	r2, r2, #3
 8002d9c:	e6b5      	b.n	8002b0a <__aeabi_dsub+0x32e>
 8002d9e:	08c0      	lsrs	r0, r0, #3
 8002da0:	077b      	lsls	r3, r7, #29
 8002da2:	4303      	orrs	r3, r0
 8002da4:	08fa      	lsrs	r2, r7, #3
 8002da6:	e6db      	b.n	8002b60 <__aeabi_dsub+0x384>
 8002da8:	4649      	mov	r1, r9
 8002daa:	4319      	orrs	r1, r3
 8002dac:	000b      	movs	r3, r1
 8002dae:	1e59      	subs	r1, r3, #1
 8002db0:	418b      	sbcs	r3, r1
 8002db2:	001c      	movs	r4, r3
 8002db4:	e653      	b.n	8002a5e <__aeabi_dsub+0x282>
 8002db6:	464d      	mov	r5, r9
 8002db8:	3c20      	subs	r4, #32
 8002dba:	40e5      	lsrs	r5, r4
 8002dbc:	2920      	cmp	r1, #32
 8002dbe:	d005      	beq.n	8002dcc <__aeabi_dsub+0x5f0>
 8002dc0:	2440      	movs	r4, #64	; 0x40
 8002dc2:	1a64      	subs	r4, r4, r1
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	40a1      	lsls	r1, r4
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	4698      	mov	r8, r3
 8002dcc:	4643      	mov	r3, r8
 8002dce:	1e5c      	subs	r4, r3, #1
 8002dd0:	41a3      	sbcs	r3, r4
 8002dd2:	432b      	orrs	r3, r5
 8002dd4:	e776      	b.n	8002cc4 <__aeabi_dsub+0x4e8>
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d0e1      	beq.n	8002d9e <__aeabi_dsub+0x5c2>
 8002dda:	003a      	movs	r2, r7
 8002ddc:	08db      	lsrs	r3, r3, #3
 8002dde:	4302      	orrs	r2, r0
 8002de0:	d100      	bne.n	8002de4 <__aeabi_dsub+0x608>
 8002de2:	e6b8      	b.n	8002b56 <__aeabi_dsub+0x37a>
 8002de4:	464a      	mov	r2, r9
 8002de6:	0752      	lsls	r2, r2, #29
 8002de8:	2480      	movs	r4, #128	; 0x80
 8002dea:	4313      	orrs	r3, r2
 8002dec:	464a      	mov	r2, r9
 8002dee:	0324      	lsls	r4, r4, #12
 8002df0:	08d2      	lsrs	r2, r2, #3
 8002df2:	4222      	tst	r2, r4
 8002df4:	d007      	beq.n	8002e06 <__aeabi_dsub+0x62a>
 8002df6:	08fe      	lsrs	r6, r7, #3
 8002df8:	4226      	tst	r6, r4
 8002dfa:	d104      	bne.n	8002e06 <__aeabi_dsub+0x62a>
 8002dfc:	465d      	mov	r5, fp
 8002dfe:	0032      	movs	r2, r6
 8002e00:	08c3      	lsrs	r3, r0, #3
 8002e02:	077f      	lsls	r7, r7, #29
 8002e04:	433b      	orrs	r3, r7
 8002e06:	0f59      	lsrs	r1, r3, #29
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	0749      	lsls	r1, r1, #29
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	e6a6      	b.n	8002b60 <__aeabi_dsub+0x384>
 8002e12:	1ac4      	subs	r4, r0, r3
 8002e14:	42a0      	cmp	r0, r4
 8002e16:	4180      	sbcs	r0, r0
 8002e18:	464b      	mov	r3, r9
 8002e1a:	4240      	negs	r0, r0
 8002e1c:	1aff      	subs	r7, r7, r3
 8002e1e:	1a3b      	subs	r3, r7, r0
 8002e20:	469a      	mov	sl, r3
 8002e22:	465d      	mov	r5, fp
 8002e24:	2601      	movs	r6, #1
 8002e26:	e533      	b.n	8002890 <__aeabi_dsub+0xb4>
 8002e28:	003b      	movs	r3, r7
 8002e2a:	4303      	orrs	r3, r0
 8002e2c:	d100      	bne.n	8002e30 <__aeabi_dsub+0x654>
 8002e2e:	e715      	b.n	8002c5c <__aeabi_dsub+0x480>
 8002e30:	08c0      	lsrs	r0, r0, #3
 8002e32:	077b      	lsls	r3, r7, #29
 8002e34:	465d      	mov	r5, fp
 8002e36:	4303      	orrs	r3, r0
 8002e38:	08fa      	lsrs	r2, r7, #3
 8002e3a:	e666      	b.n	8002b0a <__aeabi_dsub+0x32e>
 8002e3c:	08c0      	lsrs	r0, r0, #3
 8002e3e:	077b      	lsls	r3, r7, #29
 8002e40:	4303      	orrs	r3, r0
 8002e42:	08fa      	lsrs	r2, r7, #3
 8002e44:	e65e      	b.n	8002b04 <__aeabi_dsub+0x328>
 8002e46:	003a      	movs	r2, r7
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	4302      	orrs	r2, r0
 8002e4c:	d100      	bne.n	8002e50 <__aeabi_dsub+0x674>
 8002e4e:	e682      	b.n	8002b56 <__aeabi_dsub+0x37a>
 8002e50:	464a      	mov	r2, r9
 8002e52:	0752      	lsls	r2, r2, #29
 8002e54:	2480      	movs	r4, #128	; 0x80
 8002e56:	4313      	orrs	r3, r2
 8002e58:	464a      	mov	r2, r9
 8002e5a:	0324      	lsls	r4, r4, #12
 8002e5c:	08d2      	lsrs	r2, r2, #3
 8002e5e:	4222      	tst	r2, r4
 8002e60:	d007      	beq.n	8002e72 <__aeabi_dsub+0x696>
 8002e62:	08fe      	lsrs	r6, r7, #3
 8002e64:	4226      	tst	r6, r4
 8002e66:	d104      	bne.n	8002e72 <__aeabi_dsub+0x696>
 8002e68:	465d      	mov	r5, fp
 8002e6a:	0032      	movs	r2, r6
 8002e6c:	08c3      	lsrs	r3, r0, #3
 8002e6e:	077f      	lsls	r7, r7, #29
 8002e70:	433b      	orrs	r3, r7
 8002e72:	0f59      	lsrs	r1, r3, #29
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	08db      	lsrs	r3, r3, #3
 8002e78:	0749      	lsls	r1, r1, #29
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	e670      	b.n	8002b60 <__aeabi_dsub+0x384>
 8002e7e:	08c0      	lsrs	r0, r0, #3
 8002e80:	077b      	lsls	r3, r7, #29
 8002e82:	4303      	orrs	r3, r0
 8002e84:	08fa      	lsrs	r2, r7, #3
 8002e86:	e640      	b.n	8002b0a <__aeabi_dsub+0x32e>
 8002e88:	464c      	mov	r4, r9
 8002e8a:	3920      	subs	r1, #32
 8002e8c:	40cc      	lsrs	r4, r1
 8002e8e:	4661      	mov	r1, ip
 8002e90:	2920      	cmp	r1, #32
 8002e92:	d006      	beq.n	8002ea2 <__aeabi_dsub+0x6c6>
 8002e94:	4666      	mov	r6, ip
 8002e96:	2140      	movs	r1, #64	; 0x40
 8002e98:	1b89      	subs	r1, r1, r6
 8002e9a:	464e      	mov	r6, r9
 8002e9c:	408e      	lsls	r6, r1
 8002e9e:	4333      	orrs	r3, r6
 8002ea0:	4698      	mov	r8, r3
 8002ea2:	4643      	mov	r3, r8
 8002ea4:	1e59      	subs	r1, r3, #1
 8002ea6:	418b      	sbcs	r3, r1
 8002ea8:	431c      	orrs	r4, r3
 8002eaa:	e5d8      	b.n	8002a5e <__aeabi_dsub+0x282>
 8002eac:	181c      	adds	r4, r3, r0
 8002eae:	4284      	cmp	r4, r0
 8002eb0:	4180      	sbcs	r0, r0
 8002eb2:	444f      	add	r7, r9
 8002eb4:	46ba      	mov	sl, r7
 8002eb6:	4240      	negs	r0, r0
 8002eb8:	4482      	add	sl, r0
 8002eba:	e6d9      	b.n	8002c70 <__aeabi_dsub+0x494>
 8002ebc:	4653      	mov	r3, sl
 8002ebe:	4323      	orrs	r3, r4
 8002ec0:	d100      	bne.n	8002ec4 <__aeabi_dsub+0x6e8>
 8002ec2:	e6cb      	b.n	8002c5c <__aeabi_dsub+0x480>
 8002ec4:	e614      	b.n	8002af0 <__aeabi_dsub+0x314>
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	000007ff 	.word	0x000007ff
 8002ecc:	ff7fffff 	.word	0xff7fffff
 8002ed0:	000007fe 	.word	0x000007fe
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	4a01      	ldr	r2, [pc, #4]	; (8002edc <__aeabi_dsub+0x700>)
 8002ed8:	001c      	movs	r4, r3
 8002eda:	e529      	b.n	8002930 <__aeabi_dsub+0x154>
 8002edc:	000007ff 	.word	0x000007ff

08002ee0 <__aeabi_dcmpun>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	0005      	movs	r5, r0
 8002ee4:	480c      	ldr	r0, [pc, #48]	; (8002f18 <__aeabi_dcmpun+0x38>)
 8002ee6:	031c      	lsls	r4, r3, #12
 8002ee8:	0016      	movs	r6, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	030a      	lsls	r2, r1, #12
 8002eee:	0049      	lsls	r1, r1, #1
 8002ef0:	0b12      	lsrs	r2, r2, #12
 8002ef2:	0d49      	lsrs	r1, r1, #21
 8002ef4:	0b24      	lsrs	r4, r4, #12
 8002ef6:	0d5b      	lsrs	r3, r3, #21
 8002ef8:	4281      	cmp	r1, r0
 8002efa:	d008      	beq.n	8002f0e <__aeabi_dcmpun+0x2e>
 8002efc:	4a06      	ldr	r2, [pc, #24]	; (8002f18 <__aeabi_dcmpun+0x38>)
 8002efe:	2000      	movs	r0, #0
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d103      	bne.n	8002f0c <__aeabi_dcmpun+0x2c>
 8002f04:	0020      	movs	r0, r4
 8002f06:	4330      	orrs	r0, r6
 8002f08:	1e43      	subs	r3, r0, #1
 8002f0a:	4198      	sbcs	r0, r3
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
 8002f0e:	2001      	movs	r0, #1
 8002f10:	432a      	orrs	r2, r5
 8002f12:	d1fb      	bne.n	8002f0c <__aeabi_dcmpun+0x2c>
 8002f14:	e7f2      	b.n	8002efc <__aeabi_dcmpun+0x1c>
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	000007ff 	.word	0x000007ff

08002f1c <__aeabi_d2iz>:
 8002f1c:	000a      	movs	r2, r1
 8002f1e:	b530      	push	{r4, r5, lr}
 8002f20:	4c13      	ldr	r4, [pc, #76]	; (8002f70 <__aeabi_d2iz+0x54>)
 8002f22:	0053      	lsls	r3, r2, #1
 8002f24:	0309      	lsls	r1, r1, #12
 8002f26:	0005      	movs	r5, r0
 8002f28:	0b09      	lsrs	r1, r1, #12
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	0d5b      	lsrs	r3, r3, #21
 8002f2e:	0fd2      	lsrs	r2, r2, #31
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	dd04      	ble.n	8002f3e <__aeabi_d2iz+0x22>
 8002f34:	480f      	ldr	r0, [pc, #60]	; (8002f74 <__aeabi_d2iz+0x58>)
 8002f36:	4283      	cmp	r3, r0
 8002f38:	dd02      	ble.n	8002f40 <__aeabi_d2iz+0x24>
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <__aeabi_d2iz+0x5c>)
 8002f3c:	18d0      	adds	r0, r2, r3
 8002f3e:	bd30      	pop	{r4, r5, pc}
 8002f40:	2080      	movs	r0, #128	; 0x80
 8002f42:	0340      	lsls	r0, r0, #13
 8002f44:	4301      	orrs	r1, r0
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <__aeabi_d2iz+0x60>)
 8002f48:	1ac0      	subs	r0, r0, r3
 8002f4a:	281f      	cmp	r0, #31
 8002f4c:	dd08      	ble.n	8002f60 <__aeabi_d2iz+0x44>
 8002f4e:	480c      	ldr	r0, [pc, #48]	; (8002f80 <__aeabi_d2iz+0x64>)
 8002f50:	1ac3      	subs	r3, r0, r3
 8002f52:	40d9      	lsrs	r1, r3
 8002f54:	000b      	movs	r3, r1
 8002f56:	4258      	negs	r0, r3
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d1f0      	bne.n	8002f3e <__aeabi_d2iz+0x22>
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	e7ee      	b.n	8002f3e <__aeabi_d2iz+0x22>
 8002f60:	4c08      	ldr	r4, [pc, #32]	; (8002f84 <__aeabi_d2iz+0x68>)
 8002f62:	40c5      	lsrs	r5, r0
 8002f64:	46a4      	mov	ip, r4
 8002f66:	4463      	add	r3, ip
 8002f68:	4099      	lsls	r1, r3
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	432b      	orrs	r3, r5
 8002f6e:	e7f2      	b.n	8002f56 <__aeabi_d2iz+0x3a>
 8002f70:	000003fe 	.word	0x000003fe
 8002f74:	0000041d 	.word	0x0000041d
 8002f78:	7fffffff 	.word	0x7fffffff
 8002f7c:	00000433 	.word	0x00000433
 8002f80:	00000413 	.word	0x00000413
 8002f84:	fffffbed 	.word	0xfffffbed

08002f88 <__aeabi_i2d>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d016      	beq.n	8002fbc <__aeabi_i2d+0x34>
 8002f8e:	17c3      	asrs	r3, r0, #31
 8002f90:	18c5      	adds	r5, r0, r3
 8002f92:	405d      	eors	r5, r3
 8002f94:	0fc4      	lsrs	r4, r0, #31
 8002f96:	0028      	movs	r0, r5
 8002f98:	f000 f91a 	bl	80031d0 <__clzsi2>
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <__aeabi_i2d+0x5c>)
 8002f9e:	1a1b      	subs	r3, r3, r0
 8002fa0:	280a      	cmp	r0, #10
 8002fa2:	dc16      	bgt.n	8002fd2 <__aeabi_i2d+0x4a>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	002e      	movs	r6, r5
 8002fa8:	3215      	adds	r2, #21
 8002faa:	4096      	lsls	r6, r2
 8002fac:	220b      	movs	r2, #11
 8002fae:	1a12      	subs	r2, r2, r0
 8002fb0:	40d5      	lsrs	r5, r2
 8002fb2:	055b      	lsls	r3, r3, #21
 8002fb4:	032d      	lsls	r5, r5, #12
 8002fb6:	0b2d      	lsrs	r5, r5, #12
 8002fb8:	0d5b      	lsrs	r3, r3, #21
 8002fba:	e003      	b.n	8002fc4 <__aeabi_i2d+0x3c>
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	051b      	lsls	r3, r3, #20
 8002fc6:	432b      	orrs	r3, r5
 8002fc8:	07e4      	lsls	r4, r4, #31
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	0030      	movs	r0, r6
 8002fce:	0019      	movs	r1, r3
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	380b      	subs	r0, #11
 8002fd4:	4085      	lsls	r5, r0
 8002fd6:	055b      	lsls	r3, r3, #21
 8002fd8:	032d      	lsls	r5, r5, #12
 8002fda:	2600      	movs	r6, #0
 8002fdc:	0b2d      	lsrs	r5, r5, #12
 8002fde:	0d5b      	lsrs	r3, r3, #21
 8002fe0:	e7f0      	b.n	8002fc4 <__aeabi_i2d+0x3c>
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	0000041e 	.word	0x0000041e

08002fe8 <__aeabi_ui2d>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	1e04      	subs	r4, r0, #0
 8002fec:	d010      	beq.n	8003010 <__aeabi_ui2d+0x28>
 8002fee:	f000 f8ef 	bl	80031d0 <__clzsi2>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <__aeabi_ui2d+0x48>)
 8002ff4:	1a1b      	subs	r3, r3, r0
 8002ff6:	280a      	cmp	r0, #10
 8002ff8:	dc11      	bgt.n	800301e <__aeabi_ui2d+0x36>
 8002ffa:	220b      	movs	r2, #11
 8002ffc:	0021      	movs	r1, r4
 8002ffe:	1a12      	subs	r2, r2, r0
 8003000:	40d1      	lsrs	r1, r2
 8003002:	3015      	adds	r0, #21
 8003004:	030a      	lsls	r2, r1, #12
 8003006:	055b      	lsls	r3, r3, #21
 8003008:	4084      	lsls	r4, r0
 800300a:	0b12      	lsrs	r2, r2, #12
 800300c:	0d5b      	lsrs	r3, r3, #21
 800300e:	e001      	b.n	8003014 <__aeabi_ui2d+0x2c>
 8003010:	2300      	movs	r3, #0
 8003012:	2200      	movs	r2, #0
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	4313      	orrs	r3, r2
 8003018:	0020      	movs	r0, r4
 800301a:	0019      	movs	r1, r3
 800301c:	bd10      	pop	{r4, pc}
 800301e:	0022      	movs	r2, r4
 8003020:	380b      	subs	r0, #11
 8003022:	4082      	lsls	r2, r0
 8003024:	055b      	lsls	r3, r3, #21
 8003026:	0312      	lsls	r2, r2, #12
 8003028:	2400      	movs	r4, #0
 800302a:	0b12      	lsrs	r2, r2, #12
 800302c:	0d5b      	lsrs	r3, r3, #21
 800302e:	e7f1      	b.n	8003014 <__aeabi_ui2d+0x2c>
 8003030:	0000041e 	.word	0x0000041e

08003034 <__aeabi_f2d>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	0242      	lsls	r2, r0, #9
 8003038:	0043      	lsls	r3, r0, #1
 800303a:	0fc4      	lsrs	r4, r0, #31
 800303c:	20fe      	movs	r0, #254	; 0xfe
 800303e:	0e1b      	lsrs	r3, r3, #24
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	0a55      	lsrs	r5, r2, #9
 8003044:	4208      	tst	r0, r1
 8003046:	d00c      	beq.n	8003062 <__aeabi_f2d+0x2e>
 8003048:	21e0      	movs	r1, #224	; 0xe0
 800304a:	0089      	lsls	r1, r1, #2
 800304c:	468c      	mov	ip, r1
 800304e:	076d      	lsls	r5, r5, #29
 8003050:	0b12      	lsrs	r2, r2, #12
 8003052:	4463      	add	r3, ip
 8003054:	051b      	lsls	r3, r3, #20
 8003056:	4313      	orrs	r3, r2
 8003058:	07e4      	lsls	r4, r4, #31
 800305a:	4323      	orrs	r3, r4
 800305c:	0028      	movs	r0, r5
 800305e:	0019      	movs	r1, r3
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	2b00      	cmp	r3, #0
 8003064:	d114      	bne.n	8003090 <__aeabi_f2d+0x5c>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d01b      	beq.n	80030a2 <__aeabi_f2d+0x6e>
 800306a:	0028      	movs	r0, r5
 800306c:	f000 f8b0 	bl	80031d0 <__clzsi2>
 8003070:	280a      	cmp	r0, #10
 8003072:	dc1c      	bgt.n	80030ae <__aeabi_f2d+0x7a>
 8003074:	230b      	movs	r3, #11
 8003076:	002a      	movs	r2, r5
 8003078:	1a1b      	subs	r3, r3, r0
 800307a:	40da      	lsrs	r2, r3
 800307c:	0003      	movs	r3, r0
 800307e:	3315      	adds	r3, #21
 8003080:	409d      	lsls	r5, r3
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <__aeabi_f2d+0x88>)
 8003084:	0312      	lsls	r2, r2, #12
 8003086:	1a1b      	subs	r3, r3, r0
 8003088:	055b      	lsls	r3, r3, #21
 800308a:	0b12      	lsrs	r2, r2, #12
 800308c:	0d5b      	lsrs	r3, r3, #21
 800308e:	e7e1      	b.n	8003054 <__aeabi_f2d+0x20>
 8003090:	2d00      	cmp	r5, #0
 8003092:	d009      	beq.n	80030a8 <__aeabi_f2d+0x74>
 8003094:	0b13      	lsrs	r3, r2, #12
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	0312      	lsls	r2, r2, #12
 800309a:	431a      	orrs	r2, r3
 800309c:	076d      	lsls	r5, r5, #29
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <__aeabi_f2d+0x8c>)
 80030a0:	e7d8      	b.n	8003054 <__aeabi_f2d+0x20>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2200      	movs	r2, #0
 80030a6:	e7d5      	b.n	8003054 <__aeabi_f2d+0x20>
 80030a8:	2200      	movs	r2, #0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <__aeabi_f2d+0x8c>)
 80030ac:	e7d2      	b.n	8003054 <__aeabi_f2d+0x20>
 80030ae:	0003      	movs	r3, r0
 80030b0:	002a      	movs	r2, r5
 80030b2:	3b0b      	subs	r3, #11
 80030b4:	409a      	lsls	r2, r3
 80030b6:	2500      	movs	r5, #0
 80030b8:	e7e3      	b.n	8003082 <__aeabi_f2d+0x4e>
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	00000389 	.word	0x00000389
 80030c0:	000007ff 	.word	0x000007ff

080030c4 <__aeabi_d2f>:
 80030c4:	0002      	movs	r2, r0
 80030c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c8:	004b      	lsls	r3, r1, #1
 80030ca:	030d      	lsls	r5, r1, #12
 80030cc:	0f40      	lsrs	r0, r0, #29
 80030ce:	0d5b      	lsrs	r3, r3, #21
 80030d0:	0fcc      	lsrs	r4, r1, #31
 80030d2:	0a6d      	lsrs	r5, r5, #9
 80030d4:	493a      	ldr	r1, [pc, #232]	; (80031c0 <__aeabi_d2f+0xfc>)
 80030d6:	4305      	orrs	r5, r0
 80030d8:	1c58      	adds	r0, r3, #1
 80030da:	00d7      	lsls	r7, r2, #3
 80030dc:	4208      	tst	r0, r1
 80030de:	d00a      	beq.n	80030f6 <__aeabi_d2f+0x32>
 80030e0:	4938      	ldr	r1, [pc, #224]	; (80031c4 <__aeabi_d2f+0x100>)
 80030e2:	1859      	adds	r1, r3, r1
 80030e4:	29fe      	cmp	r1, #254	; 0xfe
 80030e6:	dd16      	ble.n	8003116 <__aeabi_d2f+0x52>
 80030e8:	20ff      	movs	r0, #255	; 0xff
 80030ea:	2200      	movs	r2, #0
 80030ec:	05c0      	lsls	r0, r0, #23
 80030ee:	4310      	orrs	r0, r2
 80030f0:	07e4      	lsls	r4, r4, #31
 80030f2:	4320      	orrs	r0, r4
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <__aeabi_d2f+0x44>
 80030fa:	433d      	orrs	r5, r7
 80030fc:	d026      	beq.n	800314c <__aeabi_d2f+0x88>
 80030fe:	2205      	movs	r2, #5
 8003100:	0192      	lsls	r2, r2, #6
 8003102:	0a52      	lsrs	r2, r2, #9
 8003104:	b2d8      	uxtb	r0, r3
 8003106:	e7f1      	b.n	80030ec <__aeabi_d2f+0x28>
 8003108:	432f      	orrs	r7, r5
 800310a:	d0ed      	beq.n	80030e8 <__aeabi_d2f+0x24>
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	03d2      	lsls	r2, r2, #15
 8003110:	20ff      	movs	r0, #255	; 0xff
 8003112:	432a      	orrs	r2, r5
 8003114:	e7ea      	b.n	80030ec <__aeabi_d2f+0x28>
 8003116:	2900      	cmp	r1, #0
 8003118:	dd1b      	ble.n	8003152 <__aeabi_d2f+0x8e>
 800311a:	0192      	lsls	r2, r2, #6
 800311c:	1e50      	subs	r0, r2, #1
 800311e:	4182      	sbcs	r2, r0
 8003120:	00ed      	lsls	r5, r5, #3
 8003122:	0f7f      	lsrs	r7, r7, #29
 8003124:	432a      	orrs	r2, r5
 8003126:	433a      	orrs	r2, r7
 8003128:	0753      	lsls	r3, r2, #29
 800312a:	d047      	beq.n	80031bc <__aeabi_d2f+0xf8>
 800312c:	230f      	movs	r3, #15
 800312e:	4013      	ands	r3, r2
 8003130:	2b04      	cmp	r3, #4
 8003132:	d000      	beq.n	8003136 <__aeabi_d2f+0x72>
 8003134:	3204      	adds	r2, #4
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	04db      	lsls	r3, r3, #19
 800313a:	4013      	ands	r3, r2
 800313c:	d03e      	beq.n	80031bc <__aeabi_d2f+0xf8>
 800313e:	1c48      	adds	r0, r1, #1
 8003140:	29fe      	cmp	r1, #254	; 0xfe
 8003142:	d0d1      	beq.n	80030e8 <__aeabi_d2f+0x24>
 8003144:	0192      	lsls	r2, r2, #6
 8003146:	0a52      	lsrs	r2, r2, #9
 8003148:	b2c0      	uxtb	r0, r0
 800314a:	e7cf      	b.n	80030ec <__aeabi_d2f+0x28>
 800314c:	2000      	movs	r0, #0
 800314e:	2200      	movs	r2, #0
 8003150:	e7cc      	b.n	80030ec <__aeabi_d2f+0x28>
 8003152:	000a      	movs	r2, r1
 8003154:	3217      	adds	r2, #23
 8003156:	db2f      	blt.n	80031b8 <__aeabi_d2f+0xf4>
 8003158:	2680      	movs	r6, #128	; 0x80
 800315a:	0436      	lsls	r6, r6, #16
 800315c:	432e      	orrs	r6, r5
 800315e:	251e      	movs	r5, #30
 8003160:	1a6d      	subs	r5, r5, r1
 8003162:	2d1f      	cmp	r5, #31
 8003164:	dd11      	ble.n	800318a <__aeabi_d2f+0xc6>
 8003166:	2202      	movs	r2, #2
 8003168:	4252      	negs	r2, r2
 800316a:	1a52      	subs	r2, r2, r1
 800316c:	0031      	movs	r1, r6
 800316e:	40d1      	lsrs	r1, r2
 8003170:	2d20      	cmp	r5, #32
 8003172:	d004      	beq.n	800317e <__aeabi_d2f+0xba>
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <__aeabi_d2f+0x104>)
 8003176:	4694      	mov	ip, r2
 8003178:	4463      	add	r3, ip
 800317a:	409e      	lsls	r6, r3
 800317c:	4337      	orrs	r7, r6
 800317e:	003a      	movs	r2, r7
 8003180:	1e53      	subs	r3, r2, #1
 8003182:	419a      	sbcs	r2, r3
 8003184:	430a      	orrs	r2, r1
 8003186:	2100      	movs	r1, #0
 8003188:	e7ce      	b.n	8003128 <__aeabi_d2f+0x64>
 800318a:	4a10      	ldr	r2, [pc, #64]	; (80031cc <__aeabi_d2f+0x108>)
 800318c:	0038      	movs	r0, r7
 800318e:	4694      	mov	ip, r2
 8003190:	4463      	add	r3, ip
 8003192:	4098      	lsls	r0, r3
 8003194:	003a      	movs	r2, r7
 8003196:	1e41      	subs	r1, r0, #1
 8003198:	4188      	sbcs	r0, r1
 800319a:	409e      	lsls	r6, r3
 800319c:	40ea      	lsrs	r2, r5
 800319e:	4330      	orrs	r0, r6
 80031a0:	4302      	orrs	r2, r0
 80031a2:	2100      	movs	r1, #0
 80031a4:	0753      	lsls	r3, r2, #29
 80031a6:	d1c1      	bne.n	800312c <__aeabi_d2f+0x68>
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	0013      	movs	r3, r2
 80031ac:	04c9      	lsls	r1, r1, #19
 80031ae:	2001      	movs	r0, #1
 80031b0:	400b      	ands	r3, r1
 80031b2:	420a      	tst	r2, r1
 80031b4:	d1c6      	bne.n	8003144 <__aeabi_d2f+0x80>
 80031b6:	e7a3      	b.n	8003100 <__aeabi_d2f+0x3c>
 80031b8:	2300      	movs	r3, #0
 80031ba:	e7a0      	b.n	80030fe <__aeabi_d2f+0x3a>
 80031bc:	000b      	movs	r3, r1
 80031be:	e79f      	b.n	8003100 <__aeabi_d2f+0x3c>
 80031c0:	000007fe 	.word	0x000007fe
 80031c4:	fffffc80 	.word	0xfffffc80
 80031c8:	fffffca2 	.word	0xfffffca2
 80031cc:	fffffc82 	.word	0xfffffc82

080031d0 <__clzsi2>:
 80031d0:	211c      	movs	r1, #28
 80031d2:	2301      	movs	r3, #1
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	4298      	cmp	r0, r3
 80031d8:	d301      	bcc.n	80031de <__clzsi2+0xe>
 80031da:	0c00      	lsrs	r0, r0, #16
 80031dc:	3910      	subs	r1, #16
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	4298      	cmp	r0, r3
 80031e2:	d301      	bcc.n	80031e8 <__clzsi2+0x18>
 80031e4:	0a00      	lsrs	r0, r0, #8
 80031e6:	3908      	subs	r1, #8
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	4298      	cmp	r0, r3
 80031ec:	d301      	bcc.n	80031f2 <__clzsi2+0x22>
 80031ee:	0900      	lsrs	r0, r0, #4
 80031f0:	3904      	subs	r1, #4
 80031f2:	a202      	add	r2, pc, #8	; (adr r2, 80031fc <__clzsi2+0x2c>)
 80031f4:	5c10      	ldrb	r0, [r2, r0]
 80031f6:	1840      	adds	r0, r0, r1
 80031f8:	4770      	bx	lr
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	02020304 	.word	0x02020304
 8003200:	01010101 	.word	0x01010101
	...

0800320c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	4a08      	ldr	r2, [pc, #32]	; (8003238 <MX_FREERTOS_Init+0x2c>)
 8003216:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003218:	c313      	stmia	r3!, {r0, r1, r4}
 800321a:	ca03      	ldmia	r2!, {r0, r1}
 800321c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800321e:	1d3b      	adds	r3, r7, #4
 8003220:	2100      	movs	r1, #0
 8003222:	0018      	movs	r0, r3
 8003224:	f007 fad5 	bl	800a7d2 <osThreadCreate>
 8003228:	0002      	movs	r2, r0
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <MX_FREERTOS_Init+0x30>)
 800322c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	46bd      	mov	sp, r7
 8003232:	b007      	add	sp, #28
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	08010c14 	.word	0x08010c14
 800323c:	2000020c 	.word	0x2000020c

08003240 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003248:	2001      	movs	r0, #1
 800324a:	f007 faea 	bl	800a822 <osDelay>
 800324e:	e7fb      	b.n	8003248 <StartDefaultTask+0x8>

08003250 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <MX_DMA_Init+0x38>)
 8003258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <MX_DMA_Init+0x38>)
 800325c:	2101      	movs	r1, #1
 800325e:	430a      	orrs	r2, r1
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <MX_DMA_Init+0x38>)
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	2201      	movs	r2, #1
 8003268:	4013      	ands	r3, r2
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2103      	movs	r1, #3
 8003272:	2009      	movs	r0, #9
 8003274:	f002 fc84 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003278:	2009      	movs	r0, #9
 800327a:	f002 fc96 	bl	8005baa <HAL_NVIC_EnableIRQ>

}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	40021000 	.word	0x40021000

0800328c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b08b      	sub	sp, #44	; 0x2c
 8003290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003292:	2414      	movs	r4, #20
 8003294:	193b      	adds	r3, r7, r4
 8003296:	0018      	movs	r0, r3
 8003298:	2314      	movs	r3, #20
 800329a:	001a      	movs	r2, r3
 800329c:	2100      	movs	r1, #0
 800329e:	f00a ff25 	bl	800e0ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a2:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a6:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032a8:	2104      	movs	r1, #4
 80032aa:	430a      	orrs	r2, r1
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34
 80032ae:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	2204      	movs	r2, #4
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032ba:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032be:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032c0:	2120      	movs	r1, #32
 80032c2:	430a      	orrs	r2, r1
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34
 80032c6:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	2220      	movs	r2, #32
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d2:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032d8:	2101      	movs	r1, #1
 80032da:	430a      	orrs	r2, r1
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34
 80032de:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	2201      	movs	r2, #1
 80032e4:	4013      	ands	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032f0:	2102      	movs	r1, #2
 80032f2:	430a      	orrs	r2, r1
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
 80032f6:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <MX_GPIO_Init+0x134>)
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	2202      	movs	r2, #2
 80032fc:	4013      	ands	r3, r2
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003302:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <MX_GPIO_Init+0x134>)
 8003304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <MX_GPIO_Init+0x134>)
 8003308:	2108      	movs	r1, #8
 800330a:	430a      	orrs	r2, r1
 800330c:	635a      	str	r2, [r3, #52]	; 0x34
 800330e:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <MX_GPIO_Init+0x134>)
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	2208      	movs	r2, #8
 8003314:	4013      	ands	r3, r2
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_ORANGE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800331a:	23e0      	movs	r3, #224	; 0xe0
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	4829      	ldr	r0, [pc, #164]	; (80033c4 <MX_GPIO_Init+0x138>)
 8003320:	2200      	movs	r2, #0
 8003322:	0019      	movs	r1, r3
 8003324:	f003 f81a 	bl	800635c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_ORANGE_Pin|LED_GREEN_Pin;
 8003328:	193b      	adds	r3, r7, r4
 800332a:	22e0      	movs	r2, #224	; 0xe0
 800332c:	0192      	lsls	r2, r2, #6
 800332e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003330:	193b      	adds	r3, r7, r4
 8003332:	2201      	movs	r2, #1
 8003334:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	193b      	adds	r3, r7, r4
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333c:	193b      	adds	r3, r7, r4
 800333e:	2200      	movs	r2, #0
 8003340:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003342:	193b      	adds	r3, r7, r4
 8003344:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <MX_GPIO_Init+0x138>)
 8003346:	0019      	movs	r1, r3
 8003348:	0010      	movs	r0, r2
 800334a:	f002 fea3 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BORDER_BACK_Pin|BORDER_FRONT_Pin;
 800334e:	0021      	movs	r1, r4
 8003350:	187b      	adds	r3, r7, r1
 8003352:	220c      	movs	r2, #12
 8003354:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003356:	187b      	adds	r3, r7, r1
 8003358:	2288      	movs	r2, #136	; 0x88
 800335a:	0352      	lsls	r2, r2, #13
 800335c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	187b      	adds	r3, r7, r1
 8003360:	2200      	movs	r2, #0
 8003362:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003364:	000c      	movs	r4, r1
 8003366:	187b      	adds	r3, r7, r1
 8003368:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <MX_GPIO_Init+0x13c>)
 800336a:	0019      	movs	r1, r3
 800336c:	0010      	movs	r0, r2
 800336e:	f002 fe91 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003372:	0021      	movs	r1, r4
 8003374:	187b      	adds	r3, r7, r1
 8003376:	22f0      	movs	r2, #240	; 0xf0
 8003378:	0092      	lsls	r2, r2, #2
 800337a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800337c:	187b      	adds	r3, r7, r1
 800337e:	2288      	movs	r2, #136	; 0x88
 8003380:	0352      	lsls	r2, r2, #13
 8003382:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	187b      	adds	r3, r7, r1
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338a:	187b      	adds	r3, r7, r1
 800338c:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <MX_GPIO_Init+0x138>)
 800338e:	0019      	movs	r1, r3
 8003390:	0010      	movs	r0, r2
 8003392:	f002 fe7f 	bl	8006094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8003396:	2200      	movs	r2, #0
 8003398:	2103      	movs	r1, #3
 800339a:	2006      	movs	r0, #6
 800339c:	f002 fbf0 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80033a0:	2006      	movs	r0, #6
 80033a2:	f002 fc02 	bl	8005baa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2103      	movs	r1, #3
 80033aa:	2007      	movs	r0, #7
 80033ac:	f002 fbe8 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80033b0:	2007      	movs	r0, #7
 80033b2:	f002 fbfa 	bl	8005baa <HAL_NVIC_EnableIRQ>

}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b00b      	add	sp, #44	; 0x2c
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	40021000 	.word	0x40021000
 80033c4:	50000400 	.word	0x50000400
 80033c8:	50000c00 	.word	0x50000c00

080033cc <start_task>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Task handle
TaskHandle_t StartTask_Handler;
void start_task(void *pvParameters)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL(); // enter critical section
 80033d4:	f008 fe0c 	bl	800bff0 <vPortEnterCritical>
    // Create LED task
    createLedTask();
 80033d8:	f001 f95c 	bl	8004694 <createLedTask>
    // Create shell task
    createShellTask();
 80033dc:	f002 fa88 	bl	80058f0 <createShellTask>
    // createBumperTask();
    // Create ydlidar task
    //    createYdlidarTask();
    // Create balance task
    // createBalanceTask();
    vTaskDelete(StartTask_Handler); // delete start task
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <start_task+0x2c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f007 ffbb 	bl	800b360 <vTaskDelete>
    taskEXIT_CRITICAL();            // exit critical section
 80033ea:	f008 fe13 	bl	800c014 <vPortExitCritical>
}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b002      	add	sp, #8
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	20000210 	.word	0x20000210

080033fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8003402:	f002 fa8b 	bl	800591c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8003406:	f000 f86d 	bl	80034e4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800340a:	f7ff ff3f 	bl	800328c <MX_GPIO_Init>
    MX_DMA_Init();
 800340e:	f7ff ff1f 	bl	8003250 <MX_DMA_Init>
    MX_TIM17_Init();
 8003412:	f000 fd03 	bl	8003e1c <MX_TIM17_Init>
    MX_TIM15_Init();
 8003416:	f000 fbb5 	bl	8003b84 <MX_TIM15_Init>
    MX_TIM16_Init();
 800341a:	f000 fc77 	bl	8003d0c <MX_TIM16_Init>
    MX_TIM1_Init();
 800341e:	f000 faa5 	bl	800396c <MX_TIM1_Init>
    MX_TIM3_Init();
 8003422:	f000 fb0d 	bl	8003a40 <MX_TIM3_Init>
    MX_USART2_UART_Init();
 8003426:	f000 ff11 	bl	800424c <MX_USART2_UART_Init>
    MX_TIM7_Init();
 800342a:	f000 fb6d 	bl	8003b08 <MX_TIM7_Init>
    MX_USART4_UART_Init();
 800342e:	f000 ff5f 	bl	80042f0 <MX_USART4_UART_Init>
    /* USER CODE BEGIN 2 */
    // TODO: put the init function here
    //    restartScan();
    PIDInit();
 8003432:	f001 f95f 	bl	80046f4 <PIDInit>
    dcMotorInit();
 8003436:	f001 faef 	bl	8004a18 <dcMotorInit>
    HAL_TIM_Base_Start_IT(&htim1);
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <main+0xc0>)
 800343c:	0018      	movs	r0, r3
 800343e:	f003 fe93 	bl	8007168 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8003442:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <main+0xc4>)
 8003444:	0018      	movs	r0, r3
 8003446:	f003 fe8f 	bl	8007168 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 800344a:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <main+0xc8>)
 800344c:	0018      	movs	r0, r3
 800344e:	f003 fe8b 	bl	8007168 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <main+0xc4>)
 8003454:	213c      	movs	r1, #60	; 0x3c
 8003456:	0018      	movs	r0, r3
 8003458:	f004 f954 	bl	8007704 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800345c:	4b17      	ldr	r3, [pc, #92]	; (80034bc <main+0xc0>)
 800345e:	213c      	movs	r1, #60	; 0x3c
 8003460:	0018      	movs	r0, r3
 8003462:	f004 f94f 	bl	8007704 <HAL_TIM_Encoder_Start>

    HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <main+0xcc>)
 8003468:	2100      	movs	r1, #0
 800346a:	0018      	movs	r0, r3
 800346c:	f003 ff32 	bl	80072d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <main+0xd0>)
 8003472:	2100      	movs	r1, #0
 8003474:	0018      	movs	r0, r3
 8003476:	f003 ff2d 	bl	80072d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <main+0xd4>)
 800347c:	2104      	movs	r1, #4
 800347e:	0018      	movs	r0, r3
 8003480:	f003 ff28 	bl	80072d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <main+0xd4>)
 8003486:	2100      	movs	r1, #0
 8003488:	0018      	movs	r0, r3
 800348a:	f003 ff23 	bl	80072d4 <HAL_TIM_PWM_Start>

    printf("\r\n\r\n>>>>>>>>>>>>>>Projet Robot Start<<<<<<<<<<<<<<\r\n");
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <main+0xd8>)
 8003490:	0018      	movs	r0, r3
 8003492:	f00a fcfb 	bl	800de8c <puts>
    xTaskCreate((TaskFunction_t)start_task, // task function
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	005a      	lsls	r2, r3, #1
 800349a:	490f      	ldr	r1, [pc, #60]	; (80034d8 <main+0xdc>)
 800349c:	480f      	ldr	r0, [pc, #60]	; (80034dc <main+0xe0>)
 800349e:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <main+0xe4>)
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2301      	movs	r3, #1
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	f007 fe2c 	bl	800b104 <xTaskCreate>
                (const char *)"start_task", // task name
                (uint16_t)256,              // stack size
                (void *)NULL,               // parameter
                (UBaseType_t)1,             // priority
                (TaskHandle_t *)&StartTask_Handler);
    vTaskStartScheduler();
 80034ac:	f007 ffe2 	bl	800b474 <vTaskStartScheduler>

    /* USER CODE END 2 */

    /* Call init function for freertos objects (in freertos.c) */
    MX_FREERTOS_Init();
 80034b0:	f7ff feac 	bl	800320c <MX_FREERTOS_Init>

    /* Start scheduler */
    osKernelStart();
 80034b4:	f007 f985 	bl	800a7c2 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 80034b8:	e7fe      	b.n	80034b8 <main+0xbc>
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	2000021c 	.word	0x2000021c
 80034c0:	20000268 	.word	0x20000268
 80034c4:	200002b4 	.word	0x200002b4
 80034c8:	20000398 	.word	0x20000398
 80034cc:	2000034c 	.word	0x2000034c
 80034d0:	20000300 	.word	0x20000300
 80034d4:	08010c28 	.word	0x08010c28
 80034d8:	08010c5c 	.word	0x08010c5c
 80034dc:	080033cd 	.word	0x080033cd
 80034e0:	20000210 	.word	0x20000210

080034e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b093      	sub	sp, #76	; 0x4c
 80034e8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034ea:	2414      	movs	r4, #20
 80034ec:	193b      	adds	r3, r7, r4
 80034ee:	0018      	movs	r0, r3
 80034f0:	2334      	movs	r3, #52	; 0x34
 80034f2:	001a      	movs	r2, r3
 80034f4:	2100      	movs	r1, #0
 80034f6:	f00a fdf9 	bl	800e0ec <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	0018      	movs	r0, r3
 80034fe:	2310      	movs	r3, #16
 8003500:	001a      	movs	r2, r3
 8003502:	2100      	movs	r1, #0
 8003504:	f00a fdf2 	bl	800e0ec <memset>

    /** Configure the main internal regulator output voltage
     */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	0018      	movs	r0, r3
 800350e:	f002 ff9b 	bl	8006448 <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003512:	193b      	adds	r3, r7, r4
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003518:	193b      	adds	r3, r7, r4
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	0252      	lsls	r2, r2, #9
 800351e:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003520:	0021      	movs	r1, r4
 8003522:	187b      	adds	r3, r7, r1
 8003524:	2202      	movs	r2, #2
 8003526:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003528:	187b      	adds	r3, r7, r1
 800352a:	2203      	movs	r2, #3
 800352c:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800352e:	187b      	adds	r3, r7, r1
 8003530:	2200      	movs	r2, #0
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLN = 8;
 8003534:	187b      	adds	r3, r7, r1
 8003536:	2208      	movs	r2, #8
 8003538:	629a      	str	r2, [r3, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800353a:	187b      	adds	r3, r7, r1
 800353c:	2280      	movs	r2, #128	; 0x80
 800353e:	0292      	lsls	r2, r2, #10
 8003540:	62da      	str	r2, [r3, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	0592      	lsls	r2, r2, #22
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800354a:	187b      	adds	r3, r7, r1
 800354c:	0018      	movs	r0, r3
 800354e:	f002 ffc7 	bl	80064e0 <HAL_RCC_OscConfig>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d001      	beq.n	800355a <SystemClock_Config+0x76>
    {
        Error_Handler();
 8003556:	f000 f819 	bl	800358c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	2207      	movs	r2, #7
 800355e:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	2202      	movs	r2, #2
 8003564:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	2200      	movs	r2, #0
 8003570:	60da      	str	r2, [r3, #12]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2102      	movs	r1, #2
 8003576:	0018      	movs	r0, r3
 8003578:	f003 fac2 	bl	8006b00 <HAL_RCC_ClockConfig>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <SystemClock_Config+0xa0>
    {
        Error_Handler();
 8003580:	f000 f804 	bl	800358c <Error_Handler>
    }
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b013      	add	sp, #76	; 0x4c
 800358a:	bd90      	pop	{r4, r7, pc}

0800358c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003590:	b672      	cpsid	i
}
 8003592:	46c0      	nop			; (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8003594:	e7fe      	b.n	8003594 <Error_Handler+0x8>
	...

08003598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_MspInit+0x50>)
 80035a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_MspInit+0x50>)
 80035a4:	2101      	movs	r1, #1
 80035a6:	430a      	orrs	r2, r1
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <HAL_MspInit+0x50>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	2201      	movs	r2, #1
 80035b0:	4013      	ands	r3, r2
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_MspInit+0x50>)
 80035b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_MspInit+0x50>)
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	0549      	lsls	r1, r1, #21
 80035c0:	430a      	orrs	r2, r1
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_MspInit+0x50>)
 80035c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	055b      	lsls	r3, r3, #21
 80035cc:	4013      	ands	r3, r2
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80035d2:	2302      	movs	r3, #2
 80035d4:	425b      	negs	r3, r3
 80035d6:	2200      	movs	r2, #0
 80035d8:	2103      	movs	r1, #3
 80035da:	0018      	movs	r0, r3
 80035dc:	f002 fad0 	bl	8005b80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000

080035ec <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART2 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <__io_putchar+0x20>)
 80035f6:	1d39      	adds	r1, r7, #4
 80035f8:	4805      	ldr	r0, [pc, #20]	; (8003610 <__io_putchar+0x24>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	f005 f9c4 	bl	8008988 <HAL_UART_Transmit>

    return ch;
 8003600:	687b      	ldr	r3, [r7, #4]
}
 8003602:	0018      	movs	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	b002      	add	sp, #8
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	0000ffff 	.word	0x0000ffff
 8003610:	200003e4 	.word	0x200003e4

08003614 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8003618:	e7fe      	b.n	8003618 <NMI_Handler+0x4>

0800361a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 800361e:	e7fe      	b.n	800361e <HardFault_Handler+0x4>

08003620 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8003624:	f002 f9e4 	bl	80059f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1)
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003628:	f008 fa8e 	bl	800bb48 <xTaskGetSchedulerState>
 800362c:	0003      	movs	r3, r0
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <SysTick_Handler+0x16>
    {
#endif /* INCLUDE_xTaskGetSchedulerState */
        xPortSysTickHandler();
 8003632:	f008 fd39 	bl	800c0a8 <xPortSysTickHandler>
    }
#endif /* INCLUDE_xTaskGetSchedulerState */
       /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <EXTI2_3_IRQHandler>:
 * @brief This function handles EXTI line 2 and line 3 interrupts.
 */
bool BORDER_BACK_FLAG;
bool BORDER_FRONT_FLAG;
void EXTI2_3_IRQHandler(void)
{
 800363c:	b5b0      	push	{r4, r5, r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI2_3_IRQn 0 */
    // If border_back interruption
    if (__HAL_GPIO_EXTI_GET_IT(BORDER_BACK_Pin) != RESET)
 8003642:	4b32      	ldr	r3, [pc, #200]	; (800370c <EXTI2_3_IRQHandler+0xd0>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2204      	movs	r2, #4
 8003648:	4013      	ands	r3, r2
 800364a:	d104      	bne.n	8003656 <EXTI2_3_IRQHandler+0x1a>
 800364c:	4b2f      	ldr	r3, [pc, #188]	; (800370c <EXTI2_3_IRQHandler+0xd0>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	2204      	movs	r2, #4
 8003652:	4013      	ands	r3, r2
 8003654:	d001      	beq.n	800365a <EXTI2_3_IRQHandler+0x1e>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <EXTI2_3_IRQHandler+0x20>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01f      	beq.n	80036a0 <EXTI2_3_IRQHandler+0x64>
    {
        __HAL_GPIO_EXTI_CLEAR_IT(BORDER_BACK_Pin);
 8003660:	4b2a      	ldr	r3, [pc, #168]	; (800370c <EXTI2_3_IRQHandler+0xd0>)
 8003662:	2204      	movs	r2, #4
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <EXTI2_3_IRQHandler+0xd0>)
 8003668:	2204      	movs	r2, #4
 800366a:	611a      	str	r2, [r3, #16]
        char msg[] = "BORDER_BACK \n\r";
 800366c:	2510      	movs	r5, #16
 800366e:	197b      	adds	r3, r7, r5
 8003670:	4a27      	ldr	r2, [pc, #156]	; (8003710 <EXTI2_3_IRQHandler+0xd4>)
 8003672:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003674:	c313      	stmia	r3!, {r0, r1, r4}
 8003676:	8811      	ldrh	r1, [r2, #0]
 8003678:	8019      	strh	r1, [r3, #0]
 800367a:	7892      	ldrb	r2, [r2, #2]
 800367c:	709a      	strb	r2, [r3, #2]
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), HAL_MAX_DELAY);
 800367e:	2301      	movs	r3, #1
 8003680:	425b      	negs	r3, r3
 8003682:	1979      	adds	r1, r7, r5
 8003684:	4823      	ldr	r0, [pc, #140]	; (8003714 <EXTI2_3_IRQHandler+0xd8>)
 8003686:	220f      	movs	r2, #15
 8003688:	f005 f97e 	bl	8008988 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOB, LED_ORANGE_Pin);
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	015b      	lsls	r3, r3, #5
 8003690:	4a21      	ldr	r2, [pc, #132]	; (8003718 <EXTI2_3_IRQHandler+0xdc>)
 8003692:	0019      	movs	r1, r3
 8003694:	0010      	movs	r0, r2
 8003696:	f002 fe7e 	bl	8006396 <HAL_GPIO_TogglePin>
        // TODO : fonction_change_direction(direction);
        BORDER_BACK_FLAG = true;
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <EXTI2_3_IRQHandler+0xe0>)
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
    }
    // If border_back interruption
    if (__HAL_GPIO_EXTI_GET_IT(BORDER_FRONT_Pin) != RESET)
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <EXTI2_3_IRQHandler+0xd0>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2208      	movs	r2, #8
 80036a6:	4013      	ands	r3, r2
 80036a8:	d104      	bne.n	80036b4 <EXTI2_3_IRQHandler+0x78>
 80036aa:	4b18      	ldr	r3, [pc, #96]	; (800370c <EXTI2_3_IRQHandler+0xd0>)
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2208      	movs	r2, #8
 80036b0:	4013      	ands	r3, r2
 80036b2:	d001      	beq.n	80036b8 <EXTI2_3_IRQHandler+0x7c>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <EXTI2_3_IRQHandler+0x7e>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01c      	beq.n	80036f8 <EXTI2_3_IRQHandler+0xbc>
    {
        __HAL_GPIO_EXTI_CLEAR_IT(BORDER_FRONT_Pin);
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <EXTI2_3_IRQHandler+0xd0>)
 80036c0:	2208      	movs	r2, #8
 80036c2:	60da      	str	r2, [r3, #12]
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <EXTI2_3_IRQHandler+0xd0>)
 80036c6:	2208      	movs	r2, #8
 80036c8:	611a      	str	r2, [r3, #16]

        char msg[] = "BORDER_FRONT \n\r";
 80036ca:	003b      	movs	r3, r7
 80036cc:	4a14      	ldr	r2, [pc, #80]	; (8003720 <EXTI2_3_IRQHandler+0xe4>)
 80036ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80036d0:	c313      	stmia	r3!, {r0, r1, r4}
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), HAL_MAX_DELAY);
 80036d6:	2301      	movs	r3, #1
 80036d8:	425b      	negs	r3, r3
 80036da:	0039      	movs	r1, r7
 80036dc:	480d      	ldr	r0, [pc, #52]	; (8003714 <EXTI2_3_IRQHandler+0xd8>)
 80036de:	2210      	movs	r2, #16
 80036e0:	f005 f952 	bl	8008988 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(GPIOB, LED_ORANGE_Pin);
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <EXTI2_3_IRQHandler+0xdc>)
 80036ea:	0019      	movs	r1, r3
 80036ec:	0010      	movs	r0, r2
 80036ee:	f002 fe52 	bl	8006396 <HAL_GPIO_TogglePin>
        // TODO : fonction_change_direction(direction);
        BORDER_FRONT_FLAG = true;
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <EXTI2_3_IRQHandler+0xe8>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
    }
    /* USER CODE END EXTI2_3_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(BORDER_BACK_Pin);
 80036f8:	2004      	movs	r0, #4
 80036fa:	f002 fe67 	bl	80063cc <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(BORDER_FRONT_Pin);
 80036fe:	2008      	movs	r0, #8
 8003700:	f002 fe64 	bl	80063cc <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI2_3_IRQn 1 */

    /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b008      	add	sp, #32
 800370a:	bdb0      	pop	{r4, r5, r7, pc}
 800370c:	40021800 	.word	0x40021800
 8003710:	08010c68 	.word	0x08010c68
 8003714:	200003e4 	.word	0x200003e4
 8003718:	50000400 	.word	0x50000400
 800371c:	20000214 	.word	0x20000214
 8003720:	08010c78 	.word	0x08010c78
 8003724:	20000215 	.word	0x20000215

08003728 <EXTI4_15_IRQHandler>:

/**
 * @brief This function handles EXTI line 4 to 15 interrupts.
 */
void EXTI4_15_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI4_15_IRQn 0 */

    /* USER CODE END EXTI4_15_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800372c:	2040      	movs	r0, #64	; 0x40
 800372e:	f002 fe4d 	bl	80063cc <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003732:	2080      	movs	r0, #128	; 0x80
 8003734:	f002 fe4a 	bl	80063cc <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	0018      	movs	r0, r3
 800373e:	f002 fe45 	bl	80063cc <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	0018      	movs	r0, r3
 8003748:	f002 fe40 	bl	80063cc <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI4_15_IRQn 1 */

    /* USER CODE END EXTI4_15_IRQn 1 */
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 1 interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

    /* USER CODE END DMA1_Channel1_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <DMA1_Channel1_IRQHandler+0x14>)
 800375a:	0018      	movs	r0, r3
 800375c:	f002 fb98 	bl	8005e90 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

    /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	2000050c 	.word	0x2000050c

0800376c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
 * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
 */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

    /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
    HAL_TIM_IRQHandler(&htim1);
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003772:	0018      	movs	r0, r3
 8003774:	f004 f86a 	bl	800784c <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

    /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	2000021c 	.word	0x2000021c

08003784 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM3_IRQn 0 */

    /* USER CODE END TIM3_IRQn 0 */
    HAL_TIM_IRQHandler(&htim3);
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <TIM3_IRQHandler+0x14>)
 800378a:	0018      	movs	r0, r3
 800378c:	f004 f85e 	bl	800784c <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM3_IRQn 1 */

    /* USER CODE END TIM3_IRQn 1 */
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	20000268 	.word	0x20000268

0800379c <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM7_IRQn 0 */

    /* USER CODE END TIM7_IRQn 0 */
    HAL_TIM_IRQHandler(&htim7);
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <TIM7_IRQHandler+0x14>)
 80037a2:	0018      	movs	r0, r3
 80037a4:	f004 f852 	bl	800784c <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM7_IRQn 1 */

    /* USER CODE END TIM7_IRQn 1 */
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	200002b4 	.word	0x200002b4

080037b4 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_IRQn 0 */

    /* USER CODE END USART2_IRQn 0 */
    HAL_UART_IRQHandler(&huart2);
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <USART2_IRQHandler+0x14>)
 80037ba:	0018      	movs	r0, r3
 80037bc:	f005 f9d8 	bl	8008b70 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART2_IRQn 1 */

    /* USER CODE END USART2_IRQn 1 */
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	200003e4 	.word	0x200003e4

080037cc <USART3_4_IRQHandler>:

/**
 * @brief This function handles USART3 and USART4 interrupts.
 */
void USART3_4_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART3_4_IRQn 0 */

    /* USER CODE END USART3_4_IRQn 0 */
    HAL_UART_IRQHandler(&huart4);
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <USART3_4_IRQHandler+0x14>)
 80037d2:	0018      	movs	r0, r3
 80037d4:	f005 f9cc 	bl	8008b70 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART3_4_IRQn 1 */

    /* USER CODE END USART3_4_IRQn 1 */
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	20000478 	.word	0x20000478

080037e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  return 1;
 80037e8:	2301      	movs	r3, #1
}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_kill>:

int _kill(int pid, int sig)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037fa:	f00a fce3 	bl	800e1c4 <__errno>
 80037fe:	0003      	movs	r3, r0
 8003800:	2216      	movs	r2, #22
 8003802:	601a      	str	r2, [r3, #0]
  return -1;
 8003804:	2301      	movs	r3, #1
 8003806:	425b      	negs	r3, r3
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}

08003810 <_exit>:

void _exit (int status)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003818:	2301      	movs	r3, #1
 800381a:	425a      	negs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	0011      	movs	r1, r2
 8003820:	0018      	movs	r0, r3
 8003822:	f7ff ffe5 	bl	80037f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003826:	e7fe      	b.n	8003826 <_exit+0x16>

08003828 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e00a      	b.n	8003850 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800383a:	e000      	b.n	800383e <_read+0x16>
 800383c:	bf00      	nop
 800383e:	0001      	movs	r1, r0
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	60ba      	str	r2, [r7, #8]
 8003846:	b2ca      	uxtb	r2, r1
 8003848:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3301      	adds	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	dbf0      	blt.n	800383a <_read+0x12>
  }

  return len;
 8003858:	687b      	ldr	r3, [r7, #4]
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b006      	add	sp, #24
 8003860:	bd80      	pop	{r7, pc}

08003862 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e009      	b.n	8003888 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	60ba      	str	r2, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	0018      	movs	r0, r3
 800387e:	f7ff feb5 	bl	80035ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	3301      	adds	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	429a      	cmp	r2, r3
 800388e:	dbf1      	blt.n	8003874 <_write+0x12>
  }
  return len;
 8003890:	687b      	ldr	r3, [r7, #4]
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	b006      	add	sp, #24
 8003898:	bd80      	pop	{r7, pc}

0800389a <_close>:

int _close(int file)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	425b      	negs	r3, r3
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}

080038ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2280      	movs	r2, #128	; 0x80
 80038bc:	0192      	lsls	r2, r2, #6
 80038be:	605a      	str	r2, [r3, #4]
  return 0;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b002      	add	sp, #8
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_isatty>:

int _isatty(int file)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038d2:	2301      	movs	r3, #1
}
 80038d4:	0018      	movs	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b002      	add	sp, #8
 80038da:	bd80      	pop	{r7, pc}

080038dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	0018      	movs	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b004      	add	sp, #16
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <_sbrk+0x5c>)
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <_sbrk+0x60>)
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <_sbrk+0x64>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <_sbrk+0x64>)
 8003912:	4a12      	ldr	r2, [pc, #72]	; (800395c <_sbrk+0x68>)
 8003914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <_sbrk+0x64>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	18d3      	adds	r3, r2, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d207      	bcs.n	8003934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003924:	f00a fc4e 	bl	800e1c4 <__errno>
 8003928:	0003      	movs	r3, r0
 800392a:	220c      	movs	r2, #12
 800392c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800392e:	2301      	movs	r3, #1
 8003930:	425b      	negs	r3, r3
 8003932:	e009      	b.n	8003948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <_sbrk+0x64>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <_sbrk+0x64>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	18d2      	adds	r2, r2, r3
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <_sbrk+0x64>)
 8003944:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003946:	68fb      	ldr	r3, [r7, #12]
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b006      	add	sp, #24
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20009000 	.word	0x20009000
 8003954:	00000400 	.word	0x00000400
 8003958:	20000218 	.word	0x20000218
 800395c:	20005c58 	.word	0x20005c58

08003960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800396c:	b590      	push	{r4, r7, lr}
 800396e:	b08d      	sub	sp, #52	; 0x34
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003972:	240c      	movs	r4, #12
 8003974:	193b      	adds	r3, r7, r4
 8003976:	0018      	movs	r0, r3
 8003978:	2324      	movs	r3, #36	; 0x24
 800397a:	001a      	movs	r2, r3
 800397c:	2100      	movs	r1, #0
 800397e:	f00a fbb5 	bl	800e0ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003982:	003b      	movs	r3, r7
 8003984:	0018      	movs	r0, r3
 8003986:	230c      	movs	r3, #12
 8003988:	001a      	movs	r2, r3
 800398a:	2100      	movs	r1, #0
 800398c:	f00a fbae 	bl	800e0ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003990:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <MX_TIM1_Init+0xc8>)
 8003992:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <MX_TIM1_Init+0xcc>)
 8003994:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003996:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <MX_TIM1_Init+0xc8>)
 8003998:	2200      	movs	r2, #0
 800399a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <MX_TIM1_Init+0xc8>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <MX_TIM1_Init+0xc8>)
 80039a4:	4a25      	ldr	r2, [pc, #148]	; (8003a3c <MX_TIM1_Init+0xd0>)
 80039a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a8:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <MX_TIM1_Init+0xc8>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80039ae:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <MX_TIM1_Init+0xc8>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b4:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <MX_TIM1_Init+0xc8>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80039ba:	0021      	movs	r1, r4
 80039bc:	187b      	adds	r3, r7, r1
 80039be:	2203      	movs	r2, #3
 80039c0:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	2200      	movs	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	2201      	movs	r2, #1
 80039cc:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	2200      	movs	r2, #0
 80039d2:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80039d4:	187b      	adds	r3, r7, r1
 80039d6:	2200      	movs	r2, #0
 80039d8:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2200      	movs	r2, #0
 80039de:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2201      	movs	r2, #1
 80039e4:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	2200      	movs	r2, #0
 80039ea:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	2200      	movs	r2, #0
 80039f0:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80039f2:	187a      	adds	r2, r7, r1
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <MX_TIM1_Init+0xc8>)
 80039f6:	0011      	movs	r1, r2
 80039f8:	0018      	movs	r0, r3
 80039fa:	f003 fddb 	bl	80075b4 <HAL_TIM_Encoder_Init>
 80039fe:	1e03      	subs	r3, r0, #0
 8003a00:	d001      	beq.n	8003a06 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8003a02:	f7ff fdc3 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a06:	003b      	movs	r3, r7
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a0c:	003b      	movs	r3, r7
 8003a0e:	2200      	movs	r2, #0
 8003a10:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a12:	003b      	movs	r3, r7
 8003a14:	2200      	movs	r2, #0
 8003a16:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a18:	003a      	movs	r2, r7
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <MX_TIM1_Init+0xc8>)
 8003a1c:	0011      	movs	r1, r2
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f004 fe36 	bl	8008690 <HAL_TIMEx_MasterConfigSynchronization>
 8003a24:	1e03      	subs	r3, r0, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003a28:	f7ff fdb0 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b00d      	add	sp, #52	; 0x34
 8003a32:	bd90      	pop	{r4, r7, pc}
 8003a34:	2000021c 	.word	0x2000021c
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	0000ffff 	.word	0x0000ffff

08003a40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b08d      	sub	sp, #52	; 0x34
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a46:	240c      	movs	r4, #12
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	2324      	movs	r3, #36	; 0x24
 8003a4e:	001a      	movs	r2, r3
 8003a50:	2100      	movs	r1, #0
 8003a52:	f00a fb4b 	bl	800e0ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a56:	003b      	movs	r3, r7
 8003a58:	0018      	movs	r0, r3
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f00a fb44 	bl	800e0ec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a64:	4b25      	ldr	r3, [pc, #148]	; (8003afc <MX_TIM3_Init+0xbc>)
 8003a66:	4a26      	ldr	r2, [pc, #152]	; (8003b00 <MX_TIM3_Init+0xc0>)
 8003a68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a6a:	4b24      	ldr	r3, [pc, #144]	; (8003afc <MX_TIM3_Init+0xbc>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a70:	4b22      	ldr	r3, [pc, #136]	; (8003afc <MX_TIM3_Init+0xbc>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <MX_TIM3_Init+0xbc>)
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <MX_TIM3_Init+0xc4>)
 8003a7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7c:	4b1f      	ldr	r3, [pc, #124]	; (8003afc <MX_TIM3_Init+0xbc>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <MX_TIM3_Init+0xbc>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a88:	0021      	movs	r1, r4
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	2200      	movs	r2, #0
 8003a94:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a96:	187b      	adds	r3, r7, r1
 8003a98:	2201      	movs	r2, #1
 8003a9a:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	2200      	movs	r2, #0
 8003aac:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ab4:	187b      	adds	r3, r7, r1
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	2200      	movs	r2, #0
 8003abe:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003ac0:	187a      	adds	r2, r7, r1
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <MX_TIM3_Init+0xbc>)
 8003ac4:	0011      	movs	r1, r2
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f003 fd74 	bl	80075b4 <HAL_TIM_Encoder_Init>
 8003acc:	1e03      	subs	r3, r0, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003ad0:	f7ff fd5c 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ad4:	003b      	movs	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ada:	003b      	movs	r3, r7
 8003adc:	2200      	movs	r2, #0
 8003ade:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ae0:	003a      	movs	r2, r7
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <MX_TIM3_Init+0xbc>)
 8003ae4:	0011      	movs	r1, r2
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f004 fdd2 	bl	8008690 <HAL_TIMEx_MasterConfigSynchronization>
 8003aec:	1e03      	subs	r3, r0, #0
 8003aee:	d001      	beq.n	8003af4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003af0:	f7ff fd4c 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b00d      	add	sp, #52	; 0x34
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	20000268 	.word	0x20000268
 8003b00:	40000400 	.word	0x40000400
 8003b04:	0000ffff 	.word	0x0000ffff

08003b08 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b0e:	1d3b      	adds	r3, r7, #4
 8003b10:	0018      	movs	r0, r3
 8003b12:	230c      	movs	r3, #12
 8003b14:	001a      	movs	r2, r3
 8003b16:	2100      	movs	r1, #0
 8003b18:	f00a fae8 	bl	800e0ec <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003b1c:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <MX_TIM7_Init+0x6c>)
 8003b1e:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <MX_TIM7_Init+0x70>)
 8003b20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6400-1;
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <MX_TIM7_Init+0x6c>)
 8003b24:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <MX_TIM7_Init+0x74>)
 8003b26:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b28:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <MX_TIM7_Init+0x6c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <MX_TIM7_Init+0x6c>)
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <MX_TIM7_Init+0x78>)
 8003b32:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <MX_TIM7_Init+0x6c>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <MX_TIM7_Init+0x6c>)
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f003 fabb 	bl	80070b8 <HAL_TIM_Base_Init>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	d001      	beq.n	8003b4a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003b46:	f7ff fd21 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003b56:	1d3a      	adds	r2, r7, #4
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <MX_TIM7_Init+0x6c>)
 8003b5a:	0011      	movs	r1, r2
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f004 fd97 	bl	8008690 <HAL_TIMEx_MasterConfigSynchronization>
 8003b62:	1e03      	subs	r3, r0, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8003b66:	f7ff fd11 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b004      	add	sp, #16
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	200002b4 	.word	0x200002b4
 8003b78:	40001400 	.word	0x40001400
 8003b7c:	000018ff 	.word	0x000018ff
 8003b80:	0000270f 	.word	0x0000270f

08003b84 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b09c      	sub	sp, #112	; 0x70
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b8a:	2360      	movs	r3, #96	; 0x60
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	0018      	movs	r0, r3
 8003b90:	2310      	movs	r3, #16
 8003b92:	001a      	movs	r2, r3
 8003b94:	2100      	movs	r1, #0
 8003b96:	f00a faa9 	bl	800e0ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b9a:	2354      	movs	r3, #84	; 0x54
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	f00a faa1 	bl	800e0ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003baa:	2338      	movs	r3, #56	; 0x38
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	0018      	movs	r0, r3
 8003bb0:	231c      	movs	r3, #28
 8003bb2:	001a      	movs	r2, r3
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	f00a fa99 	bl	800e0ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	2334      	movs	r3, #52	; 0x34
 8003bc0:	001a      	movs	r2, r3
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f00a fa92 	bl	800e0ec <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003bc8:	4b4d      	ldr	r3, [pc, #308]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003bca:	4a4e      	ldr	r2, [pc, #312]	; (8003d04 <MX_TIM15_Init+0x180>)
 8003bcc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003bce:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bd4:	4b4a      	ldr	r3, [pc, #296]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2560-1;
 8003bda:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003bdc:	4a4a      	ldr	r2, [pc, #296]	; (8003d08 <MX_TIM15_Init+0x184>)
 8003bde:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003be0:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003be6:	4b46      	ldr	r3, [pc, #280]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bec:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003bf2:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f003 fa5f 	bl	80070b8 <HAL_TIM_Base_Init>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8003bfe:	f7ff fcc5 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c02:	2160      	movs	r1, #96	; 0x60
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	0152      	lsls	r2, r2, #5
 8003c0a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003c0c:	187a      	adds	r2, r7, r1
 8003c0e:	4b3c      	ldr	r3, [pc, #240]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003c10:	0011      	movs	r1, r2
 8003c12:	0018      	movs	r0, r3
 8003c14:	f004 f84c 	bl	8007cb0 <HAL_TIM_ConfigClockSource>
 8003c18:	1e03      	subs	r3, r0, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003c1c:	f7ff fcb6 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003c20:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003c22:	0018      	movs	r0, r3
 8003c24:	f003 faf6 	bl	8007214 <HAL_TIM_PWM_Init>
 8003c28:	1e03      	subs	r3, r0, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8003c2c:	f7ff fcae 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c30:	2154      	movs	r1, #84	; 0x54
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003c3e:	187a      	adds	r2, r7, r1
 8003c40:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003c42:	0011      	movs	r1, r2
 8003c44:	0018      	movs	r0, r3
 8003c46:	f004 fd23 	bl	8008690 <HAL_TIMEx_MasterConfigSynchronization>
 8003c4a:	1e03      	subs	r3, r0, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8003c4e:	f7ff fc9d 	bl	800358c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c52:	2138      	movs	r1, #56	; 0x38
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	2260      	movs	r2, #96	; 0x60
 8003c58:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003c5a:	187b      	adds	r3, r7, r1
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c60:	187b      	adds	r3, r7, r1
 8003c62:	2200      	movs	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c66:	187b      	adds	r3, r7, r1
 8003c68:	2200      	movs	r2, #0
 8003c6a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	2200      	movs	r2, #0
 8003c70:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c72:	187b      	adds	r3, r7, r1
 8003c74:	2200      	movs	r2, #0
 8003c76:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c78:	187b      	adds	r3, r7, r1
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c7e:	1879      	adds	r1, r7, r1
 8003c80:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	0018      	movs	r0, r3
 8003c86:	f003 ff13 	bl	8007ab0 <HAL_TIM_PWM_ConfigChannel>
 8003c8a:	1e03      	subs	r3, r0, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8003c8e:	f7ff fc7d 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c92:	2338      	movs	r3, #56	; 0x38
 8003c94:	18f9      	adds	r1, r7, r3
 8003c96:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003c98:	2204      	movs	r2, #4
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f003 ff08 	bl	8007ab0 <HAL_TIM_PWM_ConfigChannel>
 8003ca0:	1e03      	subs	r3, r0, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8003ca4:	f7ff fc72 	bl	800358c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003cc0:	1d3b      	adds	r3, r7, #4
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	2280      	movs	r2, #128	; 0x80
 8003cca:	0192      	lsls	r2, r2, #6
 8003ccc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003cce:	1d3b      	adds	r3, r7, #4
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003cd4:	1d3b      	adds	r3, r7, #4
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003cda:	1d3a      	adds	r2, r7, #4
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003cde:	0011      	movs	r1, r2
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f004 fd3d 	bl	8008760 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ce6:	1e03      	subs	r3, r0, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8003cea:	f7ff fc4f 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003cee:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <MX_TIM15_Init+0x17c>)
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f000 fa17 	bl	8004124 <HAL_TIM_MspPostInit>

}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b01c      	add	sp, #112	; 0x70
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	20000300 	.word	0x20000300
 8003d04:	40014000 	.word	0x40014000
 8003d08:	000009ff 	.word	0x000009ff

08003d0c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b094      	sub	sp, #80	; 0x50
 8003d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d12:	2334      	movs	r3, #52	; 0x34
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	0018      	movs	r0, r3
 8003d18:	231c      	movs	r3, #28
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	f00a f9e5 	bl	800e0ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d22:	003b      	movs	r3, r7
 8003d24:	0018      	movs	r0, r3
 8003d26:	2334      	movs	r3, #52	; 0x34
 8003d28:	001a      	movs	r2, r3
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	f00a f9de 	bl	800e0ec <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003d32:	4a38      	ldr	r2, [pc, #224]	; (8003e14 <MX_TIM16_Init+0x108>)
 8003d34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8003d36:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d3c:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2560-1;
 8003d42:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003d44:	4a34      	ldr	r2, [pc, #208]	; (8003e18 <MX_TIM16_Init+0x10c>)
 8003d46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003d4e:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003d5a:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f003 f9ab 	bl	80070b8 <HAL_TIM_Base_Init>
 8003d62:	1e03      	subs	r3, r0, #0
 8003d64:	d001      	beq.n	8003d6a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003d66:	f7ff fc11 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003d6a:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f003 fa51 	bl	8007214 <HAL_TIM_PWM_Init>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003d76:	f7ff fc09 	bl	800358c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d7a:	2134      	movs	r1, #52	; 0x34
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	2260      	movs	r2, #96	; 0x60
 8003d80:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003d82:	187b      	adds	r3, r7, r1
 8003d84:	2200      	movs	r2, #0
 8003d86:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d8e:	187b      	adds	r3, r7, r1
 8003d90:	2200      	movs	r2, #0
 8003d92:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d9a:	187b      	adds	r3, r7, r1
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	2200      	movs	r2, #0
 8003da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003da6:	1879      	adds	r1, r7, r1
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	0018      	movs	r0, r3
 8003dae:	f003 fe7f 	bl	8007ab0 <HAL_TIM_PWM_ConfigChannel>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d001      	beq.n	8003dba <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8003db6:	f7ff fbe9 	bl	800358c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003dba:	003b      	movs	r3, r7
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dc0:	003b      	movs	r3, r7
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003dc6:	003b      	movs	r3, r7
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003dcc:	003b      	movs	r3, r7
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003dd2:	003b      	movs	r3, r7
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003dd8:	003b      	movs	r3, r7
 8003dda:	2280      	movs	r2, #128	; 0x80
 8003ddc:	0192      	lsls	r2, r2, #6
 8003dde:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003de0:	003b      	movs	r3, r7
 8003de2:	2200      	movs	r2, #0
 8003de4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003de6:	003b      	movs	r3, r7
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003dec:	003a      	movs	r2, r7
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003df0:	0011      	movs	r1, r2
 8003df2:	0018      	movs	r0, r3
 8003df4:	f004 fcb4 	bl	8008760 <HAL_TIMEx_ConfigBreakDeadTime>
 8003df8:	1e03      	subs	r3, r0, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8003dfc:	f7ff fbc6 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <MX_TIM16_Init+0x104>)
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 f98e 	bl	8004124 <HAL_TIM_MspPostInit>

}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b014      	add	sp, #80	; 0x50
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	2000034c 	.word	0x2000034c
 8003e14:	40014400 	.word	0x40014400
 8003e18:	000009ff 	.word	0x000009ff

08003e1c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b094      	sub	sp, #80	; 0x50
 8003e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e22:	2334      	movs	r3, #52	; 0x34
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	0018      	movs	r0, r3
 8003e28:	231c      	movs	r3, #28
 8003e2a:	001a      	movs	r2, r3
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f00a f95d 	bl	800e0ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e32:	003b      	movs	r3, r7
 8003e34:	0018      	movs	r0, r3
 8003e36:	2334      	movs	r3, #52	; 0x34
 8003e38:	001a      	movs	r2, r3
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	f00a f956 	bl	800e0ec <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003e40:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003e42:	4a38      	ldr	r2, [pc, #224]	; (8003f24 <MX_TIM17_Init+0x108>)
 8003e44:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8003e46:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4c:	4b34      	ldr	r3, [pc, #208]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2560-1;
 8003e52:	4b33      	ldr	r3, [pc, #204]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003e54:	4a34      	ldr	r2, [pc, #208]	; (8003f28 <MX_TIM17_Init+0x10c>)
 8003e56:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e58:	4b31      	ldr	r3, [pc, #196]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003e5e:	4b30      	ldr	r3, [pc, #192]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e64:	4b2e      	ldr	r3, [pc, #184]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003e6a:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f003 f923 	bl	80070b8 <HAL_TIM_Base_Init>
 8003e72:	1e03      	subs	r3, r0, #0
 8003e74:	d001      	beq.n	8003e7a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003e76:	f7ff fb89 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003e7a:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f003 f9c9 	bl	8007214 <HAL_TIM_PWM_Init>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d001      	beq.n	8003e8a <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8003e86:	f7ff fb81 	bl	800358c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e8a:	2134      	movs	r1, #52	; 0x34
 8003e8c:	187b      	adds	r3, r7, r1
 8003e8e:	2260      	movs	r2, #96	; 0x60
 8003e90:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	2200      	movs	r2, #0
 8003e96:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e9e:	187b      	adds	r3, r7, r1
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003eaa:	187b      	adds	r3, r7, r1
 8003eac:	2200      	movs	r2, #0
 8003eae:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003eb0:	187b      	adds	r3, r7, r1
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eb6:	1879      	adds	r1, r7, r1
 8003eb8:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f003 fdf7 	bl	8007ab0 <HAL_TIM_PWM_ConfigChannel>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d001      	beq.n	8003eca <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003ec6:	f7ff fb61 	bl	800358c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003eca:	003b      	movs	r3, r7
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ed0:	003b      	movs	r3, r7
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ed6:	003b      	movs	r3, r7
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003edc:	003b      	movs	r3, r7
 8003ede:	2200      	movs	r2, #0
 8003ee0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ee2:	003b      	movs	r3, r7
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ee8:	003b      	movs	r3, r7
 8003eea:	2280      	movs	r2, #128	; 0x80
 8003eec:	0192      	lsls	r2, r2, #6
 8003eee:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ef0:	003b      	movs	r3, r7
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ef6:	003b      	movs	r3, r7
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003efc:	003a      	movs	r2, r7
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003f00:	0011      	movs	r1, r2
 8003f02:	0018      	movs	r0, r3
 8003f04:	f004 fc2c 	bl	8008760 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f08:	1e03      	subs	r3, r0, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8003f0c:	f7ff fb3e 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <MX_TIM17_Init+0x104>)
 8003f12:	0018      	movs	r0, r3
 8003f14:	f000 f906 	bl	8004124 <HAL_TIM_MspPostInit>

}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b014      	add	sp, #80	; 0x50
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000398 	.word	0x20000398
 8003f24:	40014800 	.word	0x40014800
 8003f28:	000009ff 	.word	0x000009ff

08003f2c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b08d      	sub	sp, #52	; 0x34
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	241c      	movs	r4, #28
 8003f36:	193b      	adds	r3, r7, r4
 8003f38:	0018      	movs	r0, r3
 8003f3a:	2314      	movs	r3, #20
 8003f3c:	001a      	movs	r2, r3
 8003f3e:	2100      	movs	r1, #0
 8003f40:	f00a f8d4 	bl	800e0ec <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a3e      	ldr	r2, [pc, #248]	; (8004044 <HAL_TIM_Encoder_MspInit+0x118>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d13a      	bne.n	8003fc4 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f4e:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	0109      	lsls	r1, r1, #4
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f5c:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	4013      	ands	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6a:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003f70:	2101      	movs	r1, #1
 8003f72:	430a      	orrs	r2, r1
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34
 8003f76:	4b34      	ldr	r3, [pc, #208]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f82:	193b      	adds	r3, r7, r4
 8003f84:	22c0      	movs	r2, #192	; 0xc0
 8003f86:	0092      	lsls	r2, r2, #2
 8003f88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8a:	0021      	movs	r1, r4
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	2202      	movs	r2, #2
 8003f90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	187b      	adds	r3, r7, r1
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f98:	187b      	adds	r3, r7, r1
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003f9e:	187b      	adds	r3, r7, r1
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa4:	187a      	adds	r2, r7, r1
 8003fa6:	23a0      	movs	r3, #160	; 0xa0
 8003fa8:	05db      	lsls	r3, r3, #23
 8003faa:	0011      	movs	r1, r2
 8003fac:	0018      	movs	r0, r3
 8003fae:	f002 f871 	bl	8006094 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 3, 0);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2103      	movs	r1, #3
 8003fb6:	200d      	movs	r0, #13
 8003fb8:	f001 fde2 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003fbc:	200d      	movs	r0, #13
 8003fbe:	f001 fdf4 	bl	8005baa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003fc2:	e03a      	b.n	800403a <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a20      	ldr	r2, [pc, #128]	; (800404c <HAL_TIM_Encoder_MspInit+0x120>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d135      	bne.n	800403a <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	2202      	movs	r2, #2
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fea:	4b17      	ldr	r3, [pc, #92]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003fec:	2104      	movs	r1, #4
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ffe:	211c      	movs	r1, #28
 8004000:	187b      	adds	r3, r7, r1
 8004002:	22c0      	movs	r2, #192	; 0xc0
 8004004:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004006:	187b      	adds	r3, r7, r1
 8004008:	2202      	movs	r2, #2
 800400a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	187b      	adds	r3, r7, r1
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004012:	187b      	adds	r3, r7, r1
 8004014:	2200      	movs	r2, #0
 8004016:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004018:	187b      	adds	r3, r7, r1
 800401a:	2201      	movs	r2, #1
 800401c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800401e:	187b      	adds	r3, r7, r1
 8004020:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <HAL_TIM_Encoder_MspInit+0x124>)
 8004022:	0019      	movs	r1, r3
 8004024:	0010      	movs	r0, r2
 8004026:	f002 f835 	bl	8006094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800402a:	2200      	movs	r2, #0
 800402c:	2103      	movs	r1, #3
 800402e:	2010      	movs	r0, #16
 8004030:	f001 fda6 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004034:	2010      	movs	r0, #16
 8004036:	f001 fdb8 	bl	8005baa <HAL_NVIC_EnableIRQ>
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b00d      	add	sp, #52	; 0x34
 8004040:	bd90      	pop	{r4, r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	40012c00 	.word	0x40012c00
 8004048:	40021000 	.word	0x40021000
 800404c:	40000400 	.word	0x40000400
 8004050:	50000800 	.word	0x50000800

08004054 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <HAL_TIM_Base_MspInit+0xbc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d114      	bne.n	8004090 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004066:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 8004068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406a:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 800406c:	2120      	movs	r1, #32
 800406e:	430a      	orrs	r2, r1
 8004070:	63da      	str	r2, [r3, #60]	; 0x3c
 8004072:	4b28      	ldr	r3, [pc, #160]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	2220      	movs	r2, #32
 8004078:	4013      	ands	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 800407e:	2200      	movs	r2, #0
 8004080:	2103      	movs	r1, #3
 8004082:	2012      	movs	r0, #18
 8004084:	f001 fd7c 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004088:	2012      	movs	r0, #18
 800408a:	f001 fd8e 	bl	8005baa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800408e:	e03a      	b.n	8004106 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM15)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a20      	ldr	r2, [pc, #128]	; (8004118 <HAL_TIM_Base_MspInit+0xc4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10e      	bne.n	80040b8 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800409a:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 800409c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409e:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 80040a0:	2180      	movs	r1, #128	; 0x80
 80040a2:	0249      	lsls	r1, r1, #9
 80040a4:	430a      	orrs	r2, r1
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
 80040a8:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 80040aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	025b      	lsls	r3, r3, #9
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	693b      	ldr	r3, [r7, #16]
}
 80040b6:	e026      	b.n	8004106 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a17      	ldr	r2, [pc, #92]	; (800411c <HAL_TIM_Base_MspInit+0xc8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10e      	bne.n	80040e0 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80040c2:	4b14      	ldr	r3, [pc, #80]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 80040c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	0289      	lsls	r1, r1, #10
 80040cc:	430a      	orrs	r2, r1
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 80040d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	4013      	ands	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
}
 80040de:	e012      	b.n	8004106 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM17)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <HAL_TIM_Base_MspInit+0xcc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10d      	bne.n	8004106 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 80040ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 80040f0:	2180      	movs	r1, #128	; 0x80
 80040f2:	02c9      	lsls	r1, r1, #11
 80040f4:	430a      	orrs	r2, r1
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_TIM_Base_MspInit+0xc0>)
 80040fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	02db      	lsls	r3, r3, #11
 8004100:	4013      	ands	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b006      	add	sp, #24
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	40001400 	.word	0x40001400
 8004114:	40021000 	.word	0x40021000
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800

08004124 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b08b      	sub	sp, #44	; 0x2c
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412c:	2414      	movs	r4, #20
 800412e:	193b      	adds	r3, r7, r4
 8004130:	0018      	movs	r0, r3
 8004132:	2314      	movs	r3, #20
 8004134:	001a      	movs	r2, r3
 8004136:	2100      	movs	r1, #0
 8004138:	f009 ffd8 	bl	800e0ec <memset>
  if(timHandle->Instance==TIM15)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a3c      	ldr	r2, [pc, #240]	; (8004234 <HAL_TIM_MspPostInit+0x110>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d123      	bne.n	800418e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004146:	4b3c      	ldr	r3, [pc, #240]	; (8004238 <HAL_TIM_MspPostInit+0x114>)
 8004148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800414a:	4b3b      	ldr	r3, [pc, #236]	; (8004238 <HAL_TIM_MspPostInit+0x114>)
 800414c:	2102      	movs	r1, #2
 800414e:	430a      	orrs	r2, r1
 8004150:	635a      	str	r2, [r3, #52]	; 0x34
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <HAL_TIM_MspPostInit+0x114>)
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	2202      	movs	r2, #2
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800415e:	193b      	adds	r3, r7, r4
 8004160:	22c0      	movs	r2, #192	; 0xc0
 8004162:	0212      	lsls	r2, r2, #8
 8004164:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004166:	0021      	movs	r1, r4
 8004168:	187b      	adds	r3, r7, r1
 800416a:	2202      	movs	r2, #2
 800416c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	187b      	adds	r3, r7, r1
 8004170:	2200      	movs	r2, #0
 8004172:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004174:	187b      	adds	r3, r7, r1
 8004176:	2200      	movs	r2, #0
 8004178:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800417a:	187b      	adds	r3, r7, r1
 800417c:	2205      	movs	r2, #5
 800417e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004180:	187b      	adds	r3, r7, r1
 8004182:	4a2e      	ldr	r2, [pc, #184]	; (800423c <HAL_TIM_MspPostInit+0x118>)
 8004184:	0019      	movs	r1, r3
 8004186:	0010      	movs	r0, r2
 8004188:	f001 ff84 	bl	8006094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800418c:	e04e      	b.n	800422c <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM16)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <HAL_TIM_MspPostInit+0x11c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d122      	bne.n	80041de <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004198:	4b27      	ldr	r3, [pc, #156]	; (8004238 <HAL_TIM_MspPostInit+0x114>)
 800419a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800419c:	4b26      	ldr	r3, [pc, #152]	; (8004238 <HAL_TIM_MspPostInit+0x114>)
 800419e:	2108      	movs	r1, #8
 80041a0:	430a      	orrs	r2, r1
 80041a2:	635a      	str	r2, [r3, #52]	; 0x34
 80041a4:	4b24      	ldr	r3, [pc, #144]	; (8004238 <HAL_TIM_MspPostInit+0x114>)
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	2208      	movs	r2, #8
 80041aa:	4013      	ands	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041b0:	2114      	movs	r1, #20
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b8:	187b      	adds	r3, r7, r1
 80041ba:	2202      	movs	r2, #2
 80041bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041be:	187b      	adds	r3, r7, r1
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c4:	187b      	adds	r3, r7, r1
 80041c6:	2200      	movs	r2, #0
 80041c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	2202      	movs	r2, #2
 80041ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <HAL_TIM_MspPostInit+0x120>)
 80041d4:	0019      	movs	r1, r3
 80041d6:	0010      	movs	r0, r2
 80041d8:	f001 ff5c 	bl	8006094 <HAL_GPIO_Init>
}
 80041dc:	e026      	b.n	800422c <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM17)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_TIM_MspPostInit+0x124>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d121      	bne.n	800422c <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041e8:	4b13      	ldr	r3, [pc, #76]	; (8004238 <HAL_TIM_MspPostInit+0x114>)
 80041ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_TIM_MspPostInit+0x114>)
 80041ee:	2108      	movs	r1, #8
 80041f0:	430a      	orrs	r2, r1
 80041f2:	635a      	str	r2, [r3, #52]	; 0x34
 80041f4:	4b10      	ldr	r3, [pc, #64]	; (8004238 <HAL_TIM_MspPostInit+0x114>)
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	2208      	movs	r2, #8
 80041fa:	4013      	ands	r3, r2
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004200:	2114      	movs	r1, #20
 8004202:	187b      	adds	r3, r7, r1
 8004204:	2202      	movs	r2, #2
 8004206:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004208:	187b      	adds	r3, r7, r1
 800420a:	2202      	movs	r2, #2
 800420c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	187b      	adds	r3, r7, r1
 8004210:	2200      	movs	r2, #0
 8004212:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004214:	187b      	adds	r3, r7, r1
 8004216:	2200      	movs	r2, #0
 8004218:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800421a:	187b      	adds	r3, r7, r1
 800421c:	2202      	movs	r2, #2
 800421e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004220:	187b      	adds	r3, r7, r1
 8004222:	4a08      	ldr	r2, [pc, #32]	; (8004244 <HAL_TIM_MspPostInit+0x120>)
 8004224:	0019      	movs	r1, r3
 8004226:	0010      	movs	r0, r2
 8004228:	f001 ff34 	bl	8006094 <HAL_GPIO_Init>
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b00b      	add	sp, #44	; 0x2c
 8004232:	bd90      	pop	{r4, r7, pc}
 8004234:	40014000 	.word	0x40014000
 8004238:	40021000 	.word	0x40021000
 800423c:	50000400 	.word	0x50000400
 8004240:	40014400 	.word	0x40014400
 8004244:	50000c00 	.word	0x50000c00
 8004248:	40014800 	.word	0x40014800

0800424c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart4_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004250:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 8004252:	4a26      	ldr	r2, [pc, #152]	; (80042ec <MX_USART2_UART_Init+0xa0>)
 8004254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 8004258:	22e1      	movs	r2, #225	; 0xe1
 800425a:	0252      	lsls	r2, r2, #9
 800425c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800425e:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004264:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 8004266:	2200      	movs	r2, #0
 8004268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800426a:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 800426c:	2200      	movs	r2, #0
 800426e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 8004272:	220c      	movs	r2, #12
 8004274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004276:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 8004278:	2200      	movs	r2, #0
 800427a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 800427e:	2200      	movs	r2, #0
 8004280:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004282:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 8004284:	2200      	movs	r2, #0
 8004286:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004288:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 800428a:	2200      	movs	r2, #0
 800428c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 8004290:	2208      	movs	r2, #8
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 8004296:	2280      	movs	r2, #128	; 0x80
 8004298:	0212      	lsls	r2, r2, #8
 800429a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800429c:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 800429e:	0018      	movs	r0, r3
 80042a0:	f004 fb1c 	bl	80088dc <HAL_UART_Init>
 80042a4:	1e03      	subs	r3, r0, #0
 80042a6:	d001      	beq.n	80042ac <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80042a8:	f7ff f970 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042ac:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 80042ae:	2100      	movs	r1, #0
 80042b0:	0018      	movs	r0, r3
 80042b2:	f006 f98d 	bl	800a5d0 <HAL_UARTEx_SetTxFifoThreshold>
 80042b6:	1e03      	subs	r3, r0, #0
 80042b8:	d001      	beq.n	80042be <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80042ba:	f7ff f967 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 80042c0:	2100      	movs	r1, #0
 80042c2:	0018      	movs	r0, r3
 80042c4:	f006 f9c4 	bl	800a650 <HAL_UARTEx_SetRxFifoThreshold>
 80042c8:	1e03      	subs	r3, r0, #0
 80042ca:	d001      	beq.n	80042d0 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80042cc:	f7ff f95e 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <MX_USART2_UART_Init+0x9c>)
 80042d2:	0018      	movs	r0, r3
 80042d4:	f006 f942 	bl	800a55c <HAL_UARTEx_DisableFifoMode>
 80042d8:	1e03      	subs	r3, r0, #0
 80042da:	d001      	beq.n	80042e0 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 80042dc:	f7ff f956 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	200003e4 	.word	0x200003e4
 80042ec:	40004400 	.word	0x40004400

080042f0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80042f4:	4b16      	ldr	r3, [pc, #88]	; (8004350 <MX_USART4_UART_Init+0x60>)
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <MX_USART4_UART_Init+0x64>)
 80042f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 80042fa:	4b15      	ldr	r3, [pc, #84]	; (8004350 <MX_USART4_UART_Init+0x60>)
 80042fc:	22fa      	movs	r2, #250	; 0xfa
 80042fe:	0252      	lsls	r2, r2, #9
 8004300:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004302:	4b13      	ldr	r3, [pc, #76]	; (8004350 <MX_USART4_UART_Init+0x60>)
 8004304:	2200      	movs	r2, #0
 8004306:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004308:	4b11      	ldr	r3, [pc, #68]	; (8004350 <MX_USART4_UART_Init+0x60>)
 800430a:	2200      	movs	r2, #0
 800430c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <MX_USART4_UART_Init+0x60>)
 8004310:	2200      	movs	r2, #0
 8004312:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <MX_USART4_UART_Init+0x60>)
 8004316:	220c      	movs	r2, #12
 8004318:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <MX_USART4_UART_Init+0x60>)
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <MX_USART4_UART_Init+0x60>)
 8004322:	2200      	movs	r2, #0
 8004324:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <MX_USART4_UART_Init+0x60>)
 8004328:	2200      	movs	r2, #0
 800432a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800432c:	4b08      	ldr	r3, [pc, #32]	; (8004350 <MX_USART4_UART_Init+0x60>)
 800432e:	2200      	movs	r2, #0
 8004330:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004332:	4b07      	ldr	r3, [pc, #28]	; (8004350 <MX_USART4_UART_Init+0x60>)
 8004334:	2200      	movs	r2, #0
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <MX_USART4_UART_Init+0x60>)
 800433a:	0018      	movs	r0, r3
 800433c:	f004 face 	bl	80088dc <HAL_UART_Init>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8004344:	f7ff f922 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	20000478 	.word	0x20000478
 8004354:	40004c00 	.word	0x40004c00

08004358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b093      	sub	sp, #76	; 0x4c
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004360:	2334      	movs	r3, #52	; 0x34
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	0018      	movs	r0, r3
 8004366:	2314      	movs	r3, #20
 8004368:	001a      	movs	r2, r3
 800436a:	2100      	movs	r1, #0
 800436c:	f009 febe 	bl	800e0ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004370:	2418      	movs	r4, #24
 8004372:	193b      	adds	r3, r7, r4
 8004374:	0018      	movs	r0, r3
 8004376:	231c      	movs	r3, #28
 8004378:	001a      	movs	r2, r3
 800437a:	2100      	movs	r1, #0
 800437c:	f009 feb6 	bl	800e0ec <memset>
  if(uartHandle->Instance==USART2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5a      	ldr	r2, [pc, #360]	; (80044f0 <HAL_UART_MspInit+0x198>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d146      	bne.n	8004418 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800438a:	193b      	adds	r3, r7, r4
 800438c:	2202      	movs	r2, #2
 800438e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004390:	193b      	adds	r3, r7, r4
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004396:	193b      	adds	r3, r7, r4
 8004398:	0018      	movs	r0, r3
 800439a:	f002 fd59 	bl	8006e50 <HAL_RCCEx_PeriphCLKConfig>
 800439e:	1e03      	subs	r3, r0, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80043a2:	f7ff f8f3 	bl	800358c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80043a6:	4b53      	ldr	r3, [pc, #332]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 80043a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043aa:	4b52      	ldr	r3, [pc, #328]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 80043ac:	2180      	movs	r1, #128	; 0x80
 80043ae:	0289      	lsls	r1, r1, #10
 80043b0:	430a      	orrs	r2, r1
 80043b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80043b4:	4b4f      	ldr	r3, [pc, #316]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 80043b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	029b      	lsls	r3, r3, #10
 80043bc:	4013      	ands	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043c2:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 80043c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c6:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 80043c8:	2108      	movs	r1, #8
 80043ca:	430a      	orrs	r2, r1
 80043cc:	635a      	str	r2, [r3, #52]	; 0x34
 80043ce:	4b49      	ldr	r3, [pc, #292]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 80043d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d2:	2208      	movs	r2, #8
 80043d4:	4013      	ands	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80043da:	2134      	movs	r1, #52	; 0x34
 80043dc:	187b      	adds	r3, r7, r1
 80043de:	2260      	movs	r2, #96	; 0x60
 80043e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e2:	187b      	adds	r3, r7, r1
 80043e4:	2202      	movs	r2, #2
 80043e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	187b      	adds	r3, r7, r1
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ee:	187b      	adds	r3, r7, r1
 80043f0:	2200      	movs	r2, #0
 80043f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80043f4:	187b      	adds	r3, r7, r1
 80043f6:	2200      	movs	r2, #0
 80043f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043fa:	187b      	adds	r3, r7, r1
 80043fc:	4a3e      	ldr	r2, [pc, #248]	; (80044f8 <HAL_UART_MspInit+0x1a0>)
 80043fe:	0019      	movs	r1, r3
 8004400:	0010      	movs	r0, r2
 8004402:	f001 fe47 	bl	8006094 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8004406:	2200      	movs	r2, #0
 8004408:	2103      	movs	r1, #3
 800440a:	201c      	movs	r0, #28
 800440c:	f001 fbb8 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004410:	201c      	movs	r0, #28
 8004412:	f001 fbca 	bl	8005baa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8004416:	e067      	b.n	80044e8 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART4)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a37      	ldr	r2, [pc, #220]	; (80044fc <HAL_UART_MspInit+0x1a4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d162      	bne.n	80044e8 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART4_CLK_ENABLE();
 8004422:	4b34      	ldr	r3, [pc, #208]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 8004424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004426:	4b33      	ldr	r3, [pc, #204]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 8004428:	2180      	movs	r1, #128	; 0x80
 800442a:	0309      	lsls	r1, r1, #12
 800442c:	430a      	orrs	r2, r1
 800442e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004430:	4b30      	ldr	r3, [pc, #192]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 8004432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	031b      	lsls	r3, r3, #12
 8004438:	4013      	ands	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800443e:	4b2d      	ldr	r3, [pc, #180]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 8004440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004442:	4b2c      	ldr	r3, [pc, #176]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 8004444:	2101      	movs	r1, #1
 8004446:	430a      	orrs	r2, r1
 8004448:	635a      	str	r2, [r3, #52]	; 0x34
 800444a:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <HAL_UART_MspInit+0x19c>)
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	2201      	movs	r2, #1
 8004450:	4013      	ands	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_TX_Pin|LIDAR_RX_Pin;
 8004456:	2134      	movs	r1, #52	; 0x34
 8004458:	187b      	adds	r3, r7, r1
 800445a:	2203      	movs	r2, #3
 800445c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445e:	187b      	adds	r3, r7, r1
 8004460:	2202      	movs	r2, #2
 8004462:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	187b      	adds	r3, r7, r1
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446a:	187b      	adds	r3, r7, r1
 800446c:	2200      	movs	r2, #0
 800446e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8004470:	187b      	adds	r3, r7, r1
 8004472:	2204      	movs	r2, #4
 8004474:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004476:	187a      	adds	r2, r7, r1
 8004478:	23a0      	movs	r3, #160	; 0xa0
 800447a:	05db      	lsls	r3, r3, #23
 800447c:	0011      	movs	r1, r2
 800447e:	0018      	movs	r0, r3
 8004480:	f001 fe08 	bl	8006094 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel1;
 8004484:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 8004486:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <HAL_UART_MspInit+0x1ac>)
 8004488:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800448a:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 800448c:	2238      	movs	r2, #56	; 0x38
 800448e:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 8004498:	2200      	movs	r2, #0
 800449a:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800449c:	4b18      	ldr	r3, [pc, #96]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 800449e:	2280      	movs	r2, #128	; 0x80
 80044a0:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044a2:	4b17      	ldr	r3, [pc, #92]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 80044ae:	4b14      	ldr	r3, [pc, #80]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 80044bc:	0018      	movs	r0, r3
 80044be:	f001 fb91 	bl	8005be4 <HAL_DMA_Init>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d001      	beq.n	80044ca <HAL_UART_MspInit+0x172>
      Error_Handler();
 80044c6:	f7ff f861 	bl	800358c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 80044d0:	505a      	str	r2, [r3, r1]
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_UART_MspInit+0x1a8>)
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 80044d8:	2200      	movs	r2, #0
 80044da:	2103      	movs	r1, #3
 80044dc:	201d      	movs	r0, #29
 80044de:	f001 fb4f 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80044e2:	201d      	movs	r0, #29
 80044e4:	f001 fb61 	bl	8005baa <HAL_NVIC_EnableIRQ>
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b013      	add	sp, #76	; 0x4c
 80044ee:	bd90      	pop	{r4, r7, pc}
 80044f0:	40004400 	.word	0x40004400
 80044f4:	40021000 	.word	0x40021000
 80044f8:	50000c00 	.word	0x50000c00
 80044fc:	40004c00 	.word	0x40004c00
 8004500:	2000050c 	.word	0x2000050c
 8004504:	40020008 	.word	0x40020008

08004508 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004508:	480d      	ldr	r0, [pc, #52]	; (8004540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800450a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800450c:	f7ff fa28 	bl	8003960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004510:	480c      	ldr	r0, [pc, #48]	; (8004544 <LoopForever+0x6>)
  ldr r1, =_edata
 8004512:	490d      	ldr	r1, [pc, #52]	; (8004548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004514:	4a0d      	ldr	r2, [pc, #52]	; (800454c <LoopForever+0xe>)
  movs r3, #0
 8004516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004518:	e002      	b.n	8004520 <LoopCopyDataInit>

0800451a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800451a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800451c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800451e:	3304      	adds	r3, #4

08004520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004524:	d3f9      	bcc.n	800451a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004526:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004528:	4c0a      	ldr	r4, [pc, #40]	; (8004554 <LoopForever+0x16>)
  movs r3, #0
 800452a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800452c:	e001      	b.n	8004532 <LoopFillZerobss>

0800452e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800452e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004530:	3204      	adds	r2, #4

08004532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004534:	d3fb      	bcc.n	800452e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004536:	f009 fe4b 	bl	800e1d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800453a:	f7fe ff5f 	bl	80033fc <main>

0800453e <LoopForever>:

LoopForever:
  b LoopForever
 800453e:	e7fe      	b.n	800453e <LoopForever>
  ldr   r0, =_estack
 8004540:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004548:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800454c:	0801158c 	.word	0x0801158c
  ldr r2, =_sbss
 8004550:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004554:	20005c58 	.word	0x20005c58

08004558 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004558:	e7fe      	b.n	8004558 <ADC1_IRQHandler>
	...

0800455c <LedTask>:
static SemaphoreHandle_t ledStartSemaphore = NULL;
static uint32_t blinkingPeriod = 1000; // LED blinking period in ms
static bool ledOn = false;             // LED control variable

void LedTask(void *argument)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

    if (xSemaphoreTake(ledStartSemaphore, portMAX_DELAY) == pdTRUE)
 8004564:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <LedTask+0x6c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2201      	movs	r2, #1
 800456a:	4252      	negs	r2, r2
 800456c:	0011      	movs	r1, r2
 800456e:	0018      	movs	r0, r3
 8004570:	f006 fbe1 	bl	800ad36 <xQueueSemaphoreTake>
 8004574:	0003      	movs	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d11e      	bne.n	80045b8 <LedTask+0x5c>
    {
        while (1)
        {
            if (ledOn)
 800457a:	4b14      	ldr	r3, [pc, #80]	; (80045cc <LedTask+0x70>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0fb      	beq.n	800457a <LedTask+0x1e>
            {
                HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	4a12      	ldr	r2, [pc, #72]	; (80045d0 <LedTask+0x74>)
 8004588:	0019      	movs	r1, r3
 800458a:	0010      	movs	r0, r2
 800458c:	f001 ff03 	bl	8006396 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	019b      	lsls	r3, r3, #6
 8004594:	4a0e      	ldr	r2, [pc, #56]	; (80045d0 <LedTask+0x74>)
 8004596:	0019      	movs	r1, r3
 8004598:	0010      	movs	r0, r2
 800459a:	f001 fefc 	bl	8006396 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	015b      	lsls	r3, r3, #5
 80045a2:	4a0b      	ldr	r2, [pc, #44]	; (80045d0 <LedTask+0x74>)
 80045a4:	0019      	movs	r1, r3
 80045a6:	0010      	movs	r0, r2
 80045a8:	f001 fef5 	bl	8006396 <HAL_GPIO_TogglePin>
                vTaskDelay(blinkingPeriod);
 80045ac:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <LedTask+0x78>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f006 ff39 	bl	800b428 <vTaskDelay>
            if (ledOn)
 80045b6:	e7e0      	b.n	800457a <LedTask+0x1e>
            }
        }
    }
    vTaskDelete(NULL);
 80045b8:	2000      	movs	r0, #0
 80045ba:	f006 fed1 	bl	800b360 <vTaskDelete>
}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	20000568 	.word	0x20000568
 80045cc:	2000056c 	.word	0x2000056c
 80045d0:	50000400 	.word	0x50000400
 80045d4:	20000004 	.word	0x20000004

080045d8 <led>:

int32_t led(h_shell_t *h_shell, int argc, char **argv)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
    if (argc != 2)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d00e      	beq.n	8004608 <led+0x30>
    {
        printf("[ERROR]: Usage: l <period>,The default period is 1000ms\r\n");
 80045ea:	4b22      	ldr	r3, [pc, #136]	; (8004674 <led+0x9c>)
 80045ec:	0018      	movs	r0, r3
 80045ee:	f009 fc4d 	bl	800de8c <puts>
        printf("[ERROR]: Usage: l on,Turn on the LED\r\n");
 80045f2:	4b21      	ldr	r3, [pc, #132]	; (8004678 <led+0xa0>)
 80045f4:	0018      	movs	r0, r3
 80045f6:	f009 fc49 	bl	800de8c <puts>
        printf("[ERROR]: Usage: l off,Turn off the LED\r\n");
 80045fa:	4b20      	ldr	r3, [pc, #128]	; (800467c <led+0xa4>)
 80045fc:	0018      	movs	r0, r3
 80045fe:	f009 fc45 	bl	800de8c <puts>
        return -1; // parameter error
 8004602:	2301      	movs	r3, #1
 8004604:	425b      	negs	r3, r3
 8004606:	e030      	b.n	800466a <led+0x92>
    }

    // compare the parameter with "on" or "off" or <period>
    if (strcmp(argv[1], "on") == 0)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <led+0xa8>)
 8004610:	0011      	movs	r1, r2
 8004612:	0018      	movs	r0, r3
 8004614:	f7fb fd78 	bl	8000108 <strcmp>
 8004618:	1e03      	subs	r3, r0, #0
 800461a:	d10a      	bne.n	8004632 <led+0x5a>
    {
        xSemaphoreGive(ledStartSemaphore); // give semaphore to start LED blinking
 800461c:	4b19      	ldr	r3, [pc, #100]	; (8004684 <led+0xac>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	2200      	movs	r2, #0
 8004624:	2100      	movs	r1, #0
 8004626:	f006 fa5d 	bl	800aae4 <xQueueGenericSend>
        ledOn = true;                      // turn on LED
 800462a:	4b17      	ldr	r3, [pc, #92]	; (8004688 <led+0xb0>)
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	e01a      	b.n	8004668 <led+0x90>
    }
    else if (strcmp(argv[1], "off") == 0)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3304      	adds	r3, #4
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a14      	ldr	r2, [pc, #80]	; (800468c <led+0xb4>)
 800463a:	0011      	movs	r1, r2
 800463c:	0018      	movs	r0, r3
 800463e:	f7fb fd63 	bl	8000108 <strcmp>
 8004642:	1e03      	subs	r3, r0, #0
 8004644:	d103      	bne.n	800464e <led+0x76>
    {
        ledOn = false; // turn off LED
 8004646:	4b10      	ldr	r3, [pc, #64]	; (8004688 <led+0xb0>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e00c      	b.n	8004668 <led+0x90>
    }
    else
    {
        int32_t inputPeriod = strtoul(argv[1], NULL, 10); // convert string to unsigned long
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3304      	adds	r3, #4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	220a      	movs	r2, #10
 8004656:	2100      	movs	r1, #0
 8004658:	0018      	movs	r0, r3
 800465a:	f008 fe63 	bl	800d324 <strtoul>
 800465e:	0003      	movs	r3, r0
 8004660:	617b      	str	r3, [r7, #20]
        if (blinkingPeriod >= 0)
        {
            blinkingPeriod = inputPeriod;
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <led+0xb8>)
 8004666:	601a      	str	r2, [r3, #0]
        }
    }
    return 0;
 8004668:	2300      	movs	r3, #0
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b006      	add	sp, #24
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	08010c88 	.word	0x08010c88
 8004678:	08010cc4 	.word	0x08010cc4
 800467c:	08010cec 	.word	0x08010cec
 8004680:	08010d14 	.word	0x08010d14
 8004684:	20000568 	.word	0x20000568
 8004688:	2000056c 	.word	0x2000056c
 800468c:	08010d18 	.word	0x08010d18
 8004690:	20000004 	.word	0x20000004

08004694 <createLedTask>:

void createLedTask(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af02      	add	r7, sp, #8
    ledStartSemaphore = xSemaphoreCreateBinary();
 800469a:	2203      	movs	r2, #3
 800469c:	2100      	movs	r1, #0
 800469e:	2001      	movs	r0, #1
 80046a0:	f006 f9d0 	bl	800aa44 <xQueueGenericCreate>
 80046a4:	0002      	movs	r2, r0
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <createLedTask+0x4c>)
 80046a8:	601a      	str	r2, [r3, #0]
    if (ledStartSemaphore == NULL)
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <createLedTask+0x4c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d104      	bne.n	80046bc <createLedTask+0x28>
    {
        printf("[ERROR]: Semaphore create failed.\r\n");
 80046b2:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <createLedTask+0x50>)
 80046b4:	0018      	movs	r0, r3
 80046b6:	f009 fbe9 	bl	800de8c <puts>
    else
    {
        printf("[INFO]: LED Semaphore create success.\r\n");
        xTaskCreate(LedTask, "LedTask", 128, NULL, 1, NULL);
    }
}
 80046ba:	e00d      	b.n	80046d8 <createLedTask+0x44>
        printf("[INFO]: LED Semaphore create success.\r\n");
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <createLedTask+0x54>)
 80046be:	0018      	movs	r0, r3
 80046c0:	f009 fbe4 	bl	800de8c <puts>
        xTaskCreate(LedTask, "LedTask", 128, NULL, 1, NULL);
 80046c4:	4909      	ldr	r1, [pc, #36]	; (80046ec <createLedTask+0x58>)
 80046c6:	480a      	ldr	r0, [pc, #40]	; (80046f0 <createLedTask+0x5c>)
 80046c8:	2300      	movs	r3, #0
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	2301      	movs	r3, #1
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	2280      	movs	r2, #128	; 0x80
 80046d4:	f006 fd16 	bl	800b104 <xTaskCreate>
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	20000568 	.word	0x20000568
 80046e4:	08010d1c 	.word	0x08010d1c
 80046e8:	08010d40 	.word	0x08010d40
 80046ec:	08010d68 	.word	0x08010d68
 80046f0:	0800455d 	.word	0x0800455d

080046f4 <PIDInit>:
PIDTypeDef gSpeedPID;
PIDTypeDef gSpeedPID2;
PIDTypeDef gCurrentPID;

void PIDInit(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
    gSpeedPID.SetPoint = 0;    // set the goal speed
 80046f8:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <PIDInit+0x80>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
    gSpeedPID.ActualValue = 0; // set the actual speed
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <PIDInit+0x80>)
 8004700:	2200      	movs	r2, #0
 8004702:	605a      	str	r2, [r3, #4]

    gSpeedPID.SumError = 0;  // set the sum error
 8004704:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <PIDInit+0x80>)
 8004706:	2200      	movs	r2, #0
 8004708:	609a      	str	r2, [r3, #8]
    gSpeedPID.Error = 0;     // set the current error
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <PIDInit+0x80>)
 800470c:	2200      	movs	r2, #0
 800470e:	619a      	str	r2, [r3, #24]
    gSpeedPID.LastError = 0; // set the last error
 8004710:	4b18      	ldr	r3, [pc, #96]	; (8004774 <PIDInit+0x80>)
 8004712:	2200      	movs	r2, #0
 8004714:	61da      	str	r2, [r3, #28]
    gSpeedPID.PrevError = 0; // set the previous error
 8004716:	4b17      	ldr	r3, [pc, #92]	; (8004774 <PIDInit+0x80>)
 8004718:	2200      	movs	r2, #0
 800471a:	621a      	str	r2, [r3, #32]

    gSpeedPID.Proportion = S_KP; // set the proportion
 800471c:	4b15      	ldr	r3, [pc, #84]	; (8004774 <PIDInit+0x80>)
 800471e:	2282      	movs	r2, #130	; 0x82
 8004720:	05d2      	lsls	r2, r2, #23
 8004722:	60da      	str	r2, [r3, #12]
    gSpeedPID.Integral = S_KI;   // set the integral
 8004724:	4b13      	ldr	r3, [pc, #76]	; (8004774 <PIDInit+0x80>)
 8004726:	4a14      	ldr	r2, [pc, #80]	; (8004778 <PIDInit+0x84>)
 8004728:	611a      	str	r2, [r3, #16]
    gSpeedPID.Derivative = S_KD; // set the derivative
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <PIDInit+0x80>)
 800472c:	22fc      	movs	r2, #252	; 0xfc
 800472e:	0592      	lsls	r2, r2, #22
 8004730:	615a      	str	r2, [r3, #20]

    gSpeedPID2.SetPoint = 0;    // set the goal speed
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <PIDInit+0x88>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
    gSpeedPID2.ActualValue = 0; // set the actual speed
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <PIDInit+0x88>)
 800473a:	2200      	movs	r2, #0
 800473c:	605a      	str	r2, [r3, #4]

    gSpeedPID2.SumError = 0;  // set the sum error
 800473e:	4b0f      	ldr	r3, [pc, #60]	; (800477c <PIDInit+0x88>)
 8004740:	2200      	movs	r2, #0
 8004742:	609a      	str	r2, [r3, #8]
    gSpeedPID2.Error = 0;     // set the current error
 8004744:	4b0d      	ldr	r3, [pc, #52]	; (800477c <PIDInit+0x88>)
 8004746:	2200      	movs	r2, #0
 8004748:	619a      	str	r2, [r3, #24]
    gSpeedPID2.LastError = 0; // set the last error
 800474a:	4b0c      	ldr	r3, [pc, #48]	; (800477c <PIDInit+0x88>)
 800474c:	2200      	movs	r2, #0
 800474e:	61da      	str	r2, [r3, #28]
    gSpeedPID2.PrevError = 0; // set the previous error
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <PIDInit+0x88>)
 8004752:	2200      	movs	r2, #0
 8004754:	621a      	str	r2, [r3, #32]

    gSpeedPID2.Proportion = S_KP; // set the proportion
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <PIDInit+0x88>)
 8004758:	2282      	movs	r2, #130	; 0x82
 800475a:	05d2      	lsls	r2, r2, #23
 800475c:	60da      	str	r2, [r3, #12]
    gSpeedPID2.Integral = S_KI;   // set the integral
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <PIDInit+0x88>)
 8004760:	4a05      	ldr	r2, [pc, #20]	; (8004778 <PIDInit+0x84>)
 8004762:	611a      	str	r2, [r3, #16]
    gSpeedPID2.Derivative = S_KD; // set the derivative
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <PIDInit+0x88>)
 8004766:	22fc      	movs	r2, #252	; 0xfc
 8004768:	0592      	lsls	r2, r2, #22
 800476a:	615a      	str	r2, [r3, #20]

}
 800476c:	46c0      	nop			; (mov r8, r8)
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	20000570 	.word	0x20000570
 8004778:	3e99999a 	.word	0x3e99999a
 800477c:	20000594 	.word	0x20000594

08004780 <setPIDparam>:

void setPIDparam(int argc, char *argv[])
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
    if (argc != 4)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b04      	cmp	r3, #4
 800478e:	d004      	beq.n	800479a <setPIDparam+0x1a>
    {
        printf("[ERROR]: Invalid number of argument\r\n");
 8004790:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <setPIDparam+0x88>)
 8004792:	0018      	movs	r0, r3
 8004794:	f009 fb7a 	bl	800de8c <puts>
        return;
 8004798:	e032      	b.n	8004800 <setPIDparam+0x80>
    }
    float kp = atof(argv[1]);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	3304      	adds	r3, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	0018      	movs	r0, r3
 80047a2:	f007 fe6f 	bl	800c484 <atof>
 80047a6:	0002      	movs	r2, r0
 80047a8:	000b      	movs	r3, r1
 80047aa:	0010      	movs	r0, r2
 80047ac:	0019      	movs	r1, r3
 80047ae:	f7fe fc89 	bl	80030c4 <__aeabi_d2f>
 80047b2:	1c03      	adds	r3, r0, #0
 80047b4:	617b      	str	r3, [r7, #20]
    float ki = atof(argv[2]);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	3308      	adds	r3, #8
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0018      	movs	r0, r3
 80047be:	f007 fe61 	bl	800c484 <atof>
 80047c2:	0002      	movs	r2, r0
 80047c4:	000b      	movs	r3, r1
 80047c6:	0010      	movs	r0, r2
 80047c8:	0019      	movs	r1, r3
 80047ca:	f7fe fc7b 	bl	80030c4 <__aeabi_d2f>
 80047ce:	1c03      	adds	r3, r0, #0
 80047d0:	613b      	str	r3, [r7, #16]
    float kd = atof(argv[3]);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0018      	movs	r0, r3
 80047da:	f007 fe53 	bl	800c484 <atof>
 80047de:	0002      	movs	r2, r0
 80047e0:	000b      	movs	r3, r1
 80047e2:	0010      	movs	r0, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	f7fe fc6d 	bl	80030c4 <__aeabi_d2f>
 80047ea:	1c03      	adds	r3, r0, #0
 80047ec:	60fb      	str	r3, [r7, #12]
    gSpeedPID.Proportion = kp;
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <setPIDparam+0x8c>)
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	60da      	str	r2, [r3, #12]
    gSpeedPID.Integral = ki;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <setPIDparam+0x8c>)
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	611a      	str	r2, [r3, #16]
    gSpeedPID.Derivative = kd;
 80047fa:	4b04      	ldr	r3, [pc, #16]	; (800480c <setPIDparam+0x8c>)
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	615a      	str	r2, [r3, #20]
   // printf("[INFO]: Set PID param to kp: %f, ki: %f, kd: %f\r\n", kp, ki, kd);
}
 8004800:	46bd      	mov	sp, r7
 8004802:	b006      	add	sp, #24
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	08010d70 	.word	0x08010d70
 800480c:	20000570 	.word	0x20000570

08004810 <incrementPIDControl>:

float incrementPIDControl(PIDTypeDef *pid, float feedbackValue)
{
 8004810:	b5b0      	push	{r4, r5, r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
                        + (pid->Derivative * (pid->Error - 2 * pid->LastError + pid->PrevError)); // derivative term
    pid->PrevError = pid->LastError;                                                              // save the previous error
    pid->LastError = pid->Error;  */                                                                 // save the last error
//（location PID）

    pid->Error = (float)(pid->SetPoint - feedbackValue);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6839      	ldr	r1, [r7, #0]
 8004820:	1c18      	adds	r0, r3, #0
 8004822:	f7fc fbad 	bl	8000f80 <__aeabi_fsub>
 8004826:	1c03      	adds	r3, r0, #0
 8004828:	1c1a      	adds	r2, r3, #0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	619a      	str	r2, [r3, #24]
    pid->SumError += pid->Error;                                            // calculate the sum error
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	1c19      	adds	r1, r3, #0
 8004838:	1c10      	adds	r0, r2, #0
 800483a:	f7fb fee9 	bl	8000610 <__aeabi_fadd>
 800483e:	1c03      	adds	r3, r0, #0
 8004840:	1c1a      	adds	r2, r3, #0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	609a      	str	r2, [r3, #8]
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	1c19      	adds	r1, r3, #0
 8004850:	1c10      	adds	r0, r2, #0
 8004852:	f7fc fa47 	bl	8000ce4 <__aeabi_fmul>
 8004856:	1c03      	adds	r3, r0, #0
 8004858:	1c1c      	adds	r4, r3, #0
                       + (pid->Integral * pid->SumError)                    // integral term
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	1c19      	adds	r1, r3, #0
 8004864:	1c10      	adds	r0, r2, #0
 8004866:	f7fc fa3d 	bl	8000ce4 <__aeabi_fmul>
 800486a:	1c03      	adds	r3, r0, #0
 800486c:	1c19      	adds	r1, r3, #0
 800486e:	1c20      	adds	r0, r4, #0
 8004870:	f7fb fece 	bl	8000610 <__aeabi_fadd>
 8004874:	1c03      	adds	r3, r0, #0
 8004876:	1c1d      	adds	r5, r3, #0
                       + (pid->Derivative * (pid->Error - pid->LastError)); // derivative term
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695c      	ldr	r4, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	1c19      	adds	r1, r3, #0
 8004886:	1c10      	adds	r0, r2, #0
 8004888:	f7fc fb7a 	bl	8000f80 <__aeabi_fsub>
 800488c:	1c03      	adds	r3, r0, #0
 800488e:	1c19      	adds	r1, r3, #0
 8004890:	1c20      	adds	r0, r4, #0
 8004892:	f7fc fa27 	bl	8000ce4 <__aeabi_fmul>
 8004896:	1c03      	adds	r3, r0, #0
 8004898:	1c19      	adds	r1, r3, #0
 800489a:	1c28      	adds	r0, r5, #0
 800489c:	f7fb feb8 	bl	8000610 <__aeabi_fadd>
 80048a0:	1c03      	adds	r3, r0, #0
 80048a2:	1c1a      	adds	r2, r3, #0
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	605a      	str	r2, [r3, #4]
    pid->LastError = pid->Error;                                            // save the last error
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	61da      	str	r2, [r3, #28]

   //  printf("[INFO]: pid->ActualValue: %f\n", pid->ActualValue);
    return (float)pid->ActualValue; // return the expected value after PID control calculation
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
}
 80048b4:	1c18      	adds	r0, r3, #0
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bdb0      	pop	{r4, r5, r7, pc}

080048bc <incrementPIDControl2>:

float incrementPIDControl2(PIDTypeDef *pid, float feedbackValue)
{
 80048bc:	b5b0      	push	{r4, r5, r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
                        + (pid->Derivative * (pid->Error - 2 * pid->LastError + pid->PrevError)); // derivative term
    pid->PrevError = pid->LastError;                                                              // save the previous error
    pid->LastError = pid->Error;  */                                                                 // save the last error
//（location PID）

    pid->Error = (float)(pid->SetPoint - feedbackValue);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6839      	ldr	r1, [r7, #0]
 80048cc:	1c18      	adds	r0, r3, #0
 80048ce:	f7fc fb57 	bl	8000f80 <__aeabi_fsub>
 80048d2:	1c03      	adds	r3, r0, #0
 80048d4:	1c1a      	adds	r2, r3, #0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	619a      	str	r2, [r3, #24]
    pid->SumError += pid->Error;                                            // calculate the sum error
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	1c19      	adds	r1, r3, #0
 80048e4:	1c10      	adds	r0, r2, #0
 80048e6:	f7fb fe93 	bl	8000610 <__aeabi_fadd>
 80048ea:	1c03      	adds	r3, r0, #0
 80048ec:	1c1a      	adds	r2, r3, #0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	609a      	str	r2, [r3, #8]
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	1c19      	adds	r1, r3, #0
 80048fc:	1c10      	adds	r0, r2, #0
 80048fe:	f7fc f9f1 	bl	8000ce4 <__aeabi_fmul>
 8004902:	1c03      	adds	r3, r0, #0
 8004904:	1c1c      	adds	r4, r3, #0
                       + (pid->Integral * pid->SumError)                    // integral term
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	1c19      	adds	r1, r3, #0
 8004910:	1c10      	adds	r0, r2, #0
 8004912:	f7fc f9e7 	bl	8000ce4 <__aeabi_fmul>
 8004916:	1c03      	adds	r3, r0, #0
 8004918:	1c19      	adds	r1, r3, #0
 800491a:	1c20      	adds	r0, r4, #0
 800491c:	f7fb fe78 	bl	8000610 <__aeabi_fadd>
 8004920:	1c03      	adds	r3, r0, #0
 8004922:	1c1d      	adds	r5, r3, #0
                       + (pid->Derivative * (pid->Error - pid->LastError)); // derivative term
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695c      	ldr	r4, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699a      	ldr	r2, [r3, #24]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	1c19      	adds	r1, r3, #0
 8004932:	1c10      	adds	r0, r2, #0
 8004934:	f7fc fb24 	bl	8000f80 <__aeabi_fsub>
 8004938:	1c03      	adds	r3, r0, #0
 800493a:	1c19      	adds	r1, r3, #0
 800493c:	1c20      	adds	r0, r4, #0
 800493e:	f7fc f9d1 	bl	8000ce4 <__aeabi_fmul>
 8004942:	1c03      	adds	r3, r0, #0
 8004944:	1c19      	adds	r1, r3, #0
 8004946:	1c28      	adds	r0, r5, #0
 8004948:	f7fb fe62 	bl	8000610 <__aeabi_fadd>
 800494c:	1c03      	adds	r3, r0, #0
 800494e:	1c1a      	adds	r2, r3, #0
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	605a      	str	r2, [r3, #4]
    pid->LastError = pid->Error;                                            // save the last error
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	61da      	str	r2, [r3, #28]

   //  printf("[INFO]: pid->ActualValue: %f\n", pid->ActualValue);
    return (float)pid->ActualValue; // return the expected value after PID control calculation
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
}
 8004960:	1c18      	adds	r0, r3, #0
 8004962:	46bd      	mov	sp, r7
 8004964:	b002      	add	sp, #8
 8004966:	bdb0      	pop	{r4, r5, r7, pc}

08004968 <stopMotor>:
/**
 * @brief stop the motor by stop the PWM with the command: stop
 *
 */
void stopMotor(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <stopMotor+0x38>)
 800496e:	2100      	movs	r1, #0
 8004970:	0018      	movs	r0, r3
 8004972:	f002 fd93 	bl	800749c <HAL_TIM_PWM_Stop>
   // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <stopMotor+0x38>)
 8004978:	2104      	movs	r1, #4
 800497a:	0018      	movs	r0, r3
 800497c:	f002 fd8e 	bl	800749c <HAL_TIM_PWM_Stop>
   // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8004980:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <stopMotor+0x3c>)
 8004982:	2100      	movs	r1, #0
 8004984:	0018      	movs	r0, r3
 8004986:	f002 fd89 	bl	800749c <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <stopMotor+0x40>)
 800498c:	2100      	movs	r1, #0
 800498e:	0018      	movs	r0, r3
 8004990:	f002 fd84 	bl	800749c <HAL_TIM_PWM_Stop>
    gMotorData.state = MOTOR_STATE_STOP;
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <stopMotor+0x44>)
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000300 	.word	0x20000300
 80049a4:	2000034c 	.word	0x2000034c
 80049a8:	20000398 	.word	0x20000398
 80049ac:	200005d0 	.word	0x200005d0

080049b0 <startMotor>:
/**
 * @brief start the motor by start the PWM with the command: start
 *
 */
void startMotor(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <startMotor+0x34>)
 80049b6:	2100      	movs	r1, #0
 80049b8:	0018      	movs	r0, r3
 80049ba:	f002 fc8b 	bl	80072d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <startMotor+0x34>)
 80049c0:	2104      	movs	r1, #4
 80049c2:	0018      	movs	r0, r3
 80049c4:	f002 fc86 	bl	80072d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80049c8:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <startMotor+0x38>)
 80049ca:	2100      	movs	r1, #0
 80049cc:	0018      	movs	r0, r3
 80049ce:	f002 fc81 	bl	80072d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <startMotor+0x3c>)
 80049d4:	2100      	movs	r1, #0
 80049d6:	0018      	movs	r0, r3
 80049d8:	f002 fc7c 	bl	80072d4 <HAL_TIM_PWM_Start>

}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	20000300 	.word	0x20000300
 80049e8:	2000034c 	.word	0x2000034c
 80049ec:	20000398 	.word	0x20000398

080049f0 <setSpeed>:
 *
 * @param numberofCmdArg the number of command argument
 * @param cmdArg the command argument
 */
void setSpeed(int numberofCmdArg, char *cmdArg[])
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
    speedProcess(numberofCmdArg, cmdArg);
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	0011      	movs	r1, r2
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 fbf9 	bl	80051f8 <speedProcess>
    gMotorData.state = MOTOR_STATE_START;
 8004a06:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <setSpeed+0x24>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b002      	add	sp, #8
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	200005d0 	.word	0x200005d0

08004a18 <dcMotorInit>:

// founction to init the motor
void dcMotorInit(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
    gencodeSpeed.encode_now = 0;
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <dcMotorInit+0x78>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	605a      	str	r2, [r3, #4]
    gencodeSpeed.encode_old = 0;
 8004a22:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <dcMotorInit+0x78>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
    gencodeSpeed.speed = 0;
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <dcMotorInit+0x78>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
    gMotorData.state = MOTOR_STATE_STOP;
 8004a2e:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <dcMotorInit+0x7c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
    gMotorData.direction = 1;
 8004a34:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <dcMotorInit+0x7c>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	705a      	strb	r2, [r3, #1]
    gMotorData.current = 0;
 8004a3a:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <dcMotorInit+0x7c>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	605a      	str	r2, [r3, #4]
    gMotorData.voltage = 0;
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <dcMotorInit+0x7c>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	609a      	str	r2, [r3, #8]
    gMotorData.speed = 0;
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <dcMotorInit+0x7c>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	60da      	str	r2, [r3, #12]
    gMotorData.motorPWM = 0;
 8004a4c:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <dcMotorInit+0x7c>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
    gencodeSpeed2.encode_now = 0;
 8004a52:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <dcMotorInit+0x80>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	605a      	str	r2, [r3, #4]
    gencodeSpeed2.encode_old = 0;
 8004a58:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <dcMotorInit+0x80>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
    gencodeSpeed2.speed = 0;
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <dcMotorInit+0x80>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	609a      	str	r2, [r3, #8]
    gMotorData2.state = MOTOR_STATE_STOP;
 8004a64:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <dcMotorInit+0x84>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
    gMotorData2.direction = 1;
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <dcMotorInit+0x84>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	705a      	strb	r2, [r3, #1]
    gMotorData2.current = 0;
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <dcMotorInit+0x84>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	605a      	str	r2, [r3, #4]
    gMotorData2.voltage = 0;
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <dcMotorInit+0x84>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	609a      	str	r2, [r3, #8]
    gMotorData2.speed = 0;
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <dcMotorInit+0x84>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	60da      	str	r2, [r3, #12]
    gMotorData2.motorPWM = 0;
 8004a82:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <dcMotorInit+0x84>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	611a      	str	r2, [r3, #16]
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	200005b8 	.word	0x200005b8
 8004a94:	200005d0 	.word	0x200005d0
 8004a98:	200005c4 	.word	0x200005c4
 8004a9c:	200005e4 	.word	0x200005e4

08004aa0 <speedCompute>:
float speedArray2[10] = {0.0};

int32_t speedArrayFilterIndex = 0;
int32_t speedArrayFilterIndex2 = 0;
void speedCompute(int encode_now, uint8_t computePerms)
{
 8004aa0:	b5b0      	push	{r4, r5, r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	000a      	movs	r2, r1
 8004aaa:	1cfb      	adds	r3, r7, #3
 8004aac:	701a      	strb	r2, [r3, #0]
    if (speedComputeCount == computePerms)
 8004aae:	1cfb      	adds	r3, r7, #3
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	4b68      	ldr	r3, [pc, #416]	; (8004c54 <speedCompute+0x1b4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d000      	beq.n	8004abc <speedCompute+0x1c>
 8004aba:	e0c2      	b.n	8004c42 <speedCompute+0x1a2>
    {
        gencodeSpeed.encode_now = encode_now;
 8004abc:	4b66      	ldr	r3, [pc, #408]	; (8004c58 <speedCompute+0x1b8>)
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	605a      	str	r2, [r3, #4]
   //     printf("now:%d\r\n",gencodeSpeed.encode_now);
  //      printf("gencodeSpeed.encode_old:%d\r\n",gencodeSpeed.encode_old);
        gencodeSpeed.speed = (encode_now - gencodeSpeed.encode_old);
 8004ac2:	4b65      	ldr	r3, [pc, #404]	; (8004c58 <speedCompute+0x1b8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	0018      	movs	r0, r3
 8004acc:	f7fc fc18 	bl	8001300 <__aeabi_i2f>
 8004ad0:	1c02      	adds	r2, r0, #0
 8004ad2:	4b61      	ldr	r3, [pc, #388]	; (8004c58 <speedCompute+0x1b8>)
 8004ad4:	609a      	str	r2, [r3, #8]
    //    printf("avant:%f\r\n", gMotorData.speed);
      //  printf("123\n");
//SPEED_COMPUTE_PER_S /  1s
        //calculte speed motor (tour/minute) : g_encode.speed * ((1000 / 100ms) *60 )/44/20  maxspeed （300*2pi/60）  现在是rpm 每分钟
       speedArray[speedArrayFilterIndex++] = (float)(gencodeSpeed.speed * (SPEED_COMPUTE_PER_S /computePerms )* 60  / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RADGEAR_RATIO
 8004ad6:	4b60      	ldr	r3, [pc, #384]	; (8004c58 <speedCompute+0x1b8>)
 8004ad8:	689c      	ldr	r4, [r3, #8]
 8004ada:	1cfb      	adds	r3, r7, #3
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	0019      	movs	r1, r3
 8004ae0:	200a      	movs	r0, #10
 8004ae2:	f7fb fbc1 	bl	8000268 <__divsi3>
 8004ae6:	0003      	movs	r3, r0
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7fc fc09 	bl	8001300 <__aeabi_i2f>
 8004aee:	1c03      	adds	r3, r0, #0
 8004af0:	1c19      	adds	r1, r3, #0
 8004af2:	1c20      	adds	r0, r4, #0
 8004af4:	f7fc f8f6 	bl	8000ce4 <__aeabi_fmul>
 8004af8:	1c03      	adds	r3, r0, #0
 8004afa:	4958      	ldr	r1, [pc, #352]	; (8004c5c <speedCompute+0x1bc>)
 8004afc:	1c18      	adds	r0, r3, #0
 8004afe:	f7fc f8f1 	bl	8000ce4 <__aeabi_fmul>
 8004b02:	1c03      	adds	r3, r0, #0
 8004b04:	2181      	movs	r1, #129	; 0x81
 8004b06:	05c9      	lsls	r1, r1, #23
 8004b08:	1c18      	adds	r0, r3, #0
 8004b0a:	f7fb ff21 	bl	8000950 <__aeabi_fdiv>
 8004b0e:	1c03      	adds	r3, r0, #0
 8004b10:	4953      	ldr	r1, [pc, #332]	; (8004c60 <speedCompute+0x1c0>)
 8004b12:	1c18      	adds	r0, r3, #0
 8004b14:	f7fb ff1c 	bl	8000950 <__aeabi_fdiv>
 8004b18:	1c03      	adds	r3, r0, #0
 8004b1a:	1c18      	adds	r0, r3, #0
 8004b1c:	4b51      	ldr	r3, [pc, #324]	; (8004c64 <speedCompute+0x1c4>)
 8004b1e:	681c      	ldr	r4, [r3, #0]
 8004b20:	1c62      	adds	r2, r4, #1
 8004b22:	4b50      	ldr	r3, [pc, #320]	; (8004c64 <speedCompute+0x1c4>)
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	4950      	ldr	r1, [pc, #320]	; (8004c68 <speedCompute+0x1c8>)
 8004b28:	f7fb ff12 	bl	8000950 <__aeabi_fdiv>
 8004b2c:	1c03      	adds	r3, r0, #0
 8004b2e:	1c19      	adds	r1, r3, #0
 8004b30:	4b4e      	ldr	r3, [pc, #312]	; (8004c6c <speedCompute+0x1cc>)
 8004b32:	00a2      	lsls	r2, r4, #2
 8004b34:	50d1      	str	r1, [r2, r3]
  //     gMotorData.speed = (float)(gencodeSpeed.speed * (SPEED_COMPUTE_PER_S / computePerms ) / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RAD
      //  printf("speedcompute:%f\r\n", gMotorData.speed);  //gMotorData.speed
        gencodeSpeed.encode_old = gencodeSpeed.encode_now;
 8004b36:	4b48      	ldr	r3, [pc, #288]	; (8004c58 <speedCompute+0x1b8>)
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	4b47      	ldr	r3, [pc, #284]	; (8004c58 <speedCompute+0x1b8>)
 8004b3c:	601a      	str	r2, [r3, #0]
       //  after 10 times of speed calculation, filter the speed data
        if (speedArrayFilterIndex == 10)
 8004b3e:	4b49      	ldr	r3, [pc, #292]	; (8004c64 <speedCompute+0x1c4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b0a      	cmp	r3, #10
 8004b44:	d000      	beq.n	8004b48 <speedCompute+0xa8>
 8004b46:	e079      	b.n	8004c3c <speedCompute+0x19c>
        {
            // bubble sort
            float temp = 0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < 10; i++)
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	e030      	b.n	8004bb4 <speedCompute+0x114>
            {
                for (int j = 0; j < 10 - i - 1; j++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e024      	b.n	8004ba2 <speedCompute+0x102>
                {
                    if (speedArray[j] > speedArray[j + 1])
 8004b58:	4b44      	ldr	r3, [pc, #272]	; (8004c6c <speedCompute+0x1cc>)
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	0092      	lsls	r2, r2, #2
 8004b5e:	58d0      	ldr	r0, [r2, r3]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	4b41      	ldr	r3, [pc, #260]	; (8004c6c <speedCompute+0x1cc>)
 8004b66:	0092      	lsls	r2, r2, #2
 8004b68:	58d3      	ldr	r3, [r2, r3]
 8004b6a:	1c19      	adds	r1, r3, #0
 8004b6c:	f7fb fccc 	bl	8000508 <__aeabi_fcmpgt>
 8004b70:	1e03      	subs	r3, r0, #0
 8004b72:	d013      	beq.n	8004b9c <speedCompute+0xfc>
                    {
                        temp = speedArray[j];
 8004b74:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <speedCompute+0x1cc>)
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	0092      	lsls	r2, r2, #2
 8004b7a:	58d3      	ldr	r3, [r2, r3]
 8004b7c:	617b      	str	r3, [r7, #20]
                        speedArray[j] = speedArray[j + 1];
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	4b3a      	ldr	r3, [pc, #232]	; (8004c6c <speedCompute+0x1cc>)
 8004b84:	0092      	lsls	r2, r2, #2
 8004b86:	58d1      	ldr	r1, [r2, r3]
 8004b88:	4b38      	ldr	r3, [pc, #224]	; (8004c6c <speedCompute+0x1cc>)
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	0092      	lsls	r2, r2, #2
 8004b8e:	50d1      	str	r1, [r2, r3]
                        speedArray[j + 1] = temp;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	4b35      	ldr	r3, [pc, #212]	; (8004c6c <speedCompute+0x1cc>)
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	6979      	ldr	r1, [r7, #20]
 8004b9a:	50d1      	str	r1, [r2, r3]
                for (int j = 0; j < 10 - i - 1; j++)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2209      	movs	r2, #9
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	dbd4      	blt.n	8004b58 <speedCompute+0xb8>
            for (int i = 0; i < 10; i++)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b09      	cmp	r3, #9
 8004bb8:	ddcb      	ble.n	8004b52 <speedCompute+0xb2>
                    }
                }
            }

            temp = 0.0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
            // using the middle 6 data to calculate the average value
            for (int i = 2; i < 8; i++)
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	e00c      	b.n	8004bde <speedCompute+0x13e>
            {
                temp += speedArray[i];
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <speedCompute+0x1cc>)
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	0092      	lsls	r2, r2, #2
 8004bca:	58d3      	ldr	r3, [r2, r3]
 8004bcc:	1c19      	adds	r1, r3, #0
 8004bce:	6978      	ldr	r0, [r7, #20]
 8004bd0:	f7fb fd1e 	bl	8000610 <__aeabi_fadd>
 8004bd4:	1c03      	adds	r3, r0, #0
 8004bd6:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < 8; i++)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b07      	cmp	r3, #7
 8004be2:	ddef      	ble.n	8004bc4 <speedCompute+0x124>
            }
            // calculate the average value
            temp = temp / 6;
 8004be4:	4922      	ldr	r1, [pc, #136]	; (8004c70 <speedCompute+0x1d0>)
 8004be6:	6978      	ldr	r0, [r7, #20]
 8004be8:	f7fb feb2 	bl	8000950 <__aeabi_fdiv>
 8004bec:	1c03      	adds	r3, r0, #0
 8004bee:	617b      	str	r3, [r7, #20]
            // low pass filter
            // Y(n)= qX(n) + (1-q)Y(n-1)
            // X(n) is the current input, Y(n) is the current output, Y(n-1) is the previous output, and q is the filter factor.
            // The larger the q, the stronger the filtering effect, but the slower the response.
            gMotorData.speed = (float)((double)temp * 0.5 + (double)gMotorData.speed * 0.5);
 8004bf0:	6978      	ldr	r0, [r7, #20]
 8004bf2:	f7fe fa1f 	bl	8003034 <__aeabi_f2d>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	4b1e      	ldr	r3, [pc, #120]	; (8004c74 <speedCompute+0x1d4>)
 8004bfa:	f7fd fb2d 	bl	8002258 <__aeabi_dmul>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	000b      	movs	r3, r1
 8004c02:	0014      	movs	r4, r2
 8004c04:	001d      	movs	r5, r3
 8004c06:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <speedCompute+0x1d8>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	1c18      	adds	r0, r3, #0
 8004c0c:	f7fe fa12 	bl	8003034 <__aeabi_f2d>
 8004c10:	2200      	movs	r2, #0
 8004c12:	4b18      	ldr	r3, [pc, #96]	; (8004c74 <speedCompute+0x1d4>)
 8004c14:	f7fd fb20 	bl	8002258 <__aeabi_dmul>
 8004c18:	0002      	movs	r2, r0
 8004c1a:	000b      	movs	r3, r1
 8004c1c:	0020      	movs	r0, r4
 8004c1e:	0029      	movs	r1, r5
 8004c20:	f7fc fbc0 	bl	80013a4 <__aeabi_dadd>
 8004c24:	0002      	movs	r2, r0
 8004c26:	000b      	movs	r3, r1
 8004c28:	0010      	movs	r0, r2
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	f7fe fa4a 	bl	80030c4 <__aeabi_d2f>
 8004c30:	1c02      	adds	r2, r0, #0
 8004c32:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <speedCompute+0x1d8>)
 8004c34:	60da      	str	r2, [r3, #12]

            speedArrayFilterIndex = 0;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <speedCompute+0x1c4>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
        }
        speedComputeCount = 0;
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <speedCompute+0x1b4>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
    }
    speedComputeCount++;
 8004c42:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <speedCompute+0x1b4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <speedCompute+0x1b4>)
 8004c4a:	601a      	str	r2, [r3, #0]
}
 8004c4c:	46c0      	nop			; (mov r8, r8)
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b006      	add	sp, #24
 8004c52:	bdb0      	pop	{r4, r5, r7, pc}
 8004c54:	200005fc 	.word	0x200005fc
 8004c58:	200005b8 	.word	0x200005b8
 8004c5c:	42700000 	.word	0x42700000
 8004c60:	41300000 	.word	0x41300000
 8004c64:	20000654 	.word	0x20000654
 8004c68:	41a00000 	.word	0x41a00000
 8004c6c:	20000604 	.word	0x20000604
 8004c70:	40c00000 	.word	0x40c00000
 8004c74:	3fe00000 	.word	0x3fe00000
 8004c78:	200005d0 	.word	0x200005d0

08004c7c <speedCompute2>:


void speedCompute2(int encode_now, uint8_t computePerms)
{
 8004c7c:	b5b0      	push	{r4, r5, r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	000a      	movs	r2, r1
 8004c86:	1cfb      	adds	r3, r7, #3
 8004c88:	701a      	strb	r2, [r3, #0]
    if (speedComputeCount2 == computePerms)
 8004c8a:	1cfb      	adds	r3, r7, #3
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	4b68      	ldr	r3, [pc, #416]	; (8004e30 <speedCompute2+0x1b4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d000      	beq.n	8004c98 <speedCompute2+0x1c>
 8004c96:	e0c2      	b.n	8004e1e <speedCompute2+0x1a2>
    {
        gencodeSpeed2.encode_now = encode_now;
 8004c98:	4b66      	ldr	r3, [pc, #408]	; (8004e34 <speedCompute2+0x1b8>)
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	605a      	str	r2, [r3, #4]
        gencodeSpeed2.speed = (encode_now - gencodeSpeed2.encode_old);
 8004c9e:	4b65      	ldr	r3, [pc, #404]	; (8004e34 <speedCompute2+0x1b8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f7fc fb2a 	bl	8001300 <__aeabi_i2f>
 8004cac:	1c02      	adds	r2, r0, #0
 8004cae:	4b61      	ldr	r3, [pc, #388]	; (8004e34 <speedCompute2+0x1b8>)
 8004cb0:	609a      	str	r2, [r3, #8]
        //calculte speed motor (tour/minute) : g_encode.speed * ((1000 / 100ms) second )/44/20  maxspeed 15.7rad/s（300*2pi/60）
        //speedArray2[speedArrayFilterIndex2++] = (float)(gencodeSpeed2.speed * (SPEED_COMPUTE_PER_S / computePerms ) * 60 / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RAD
        speedArray2[speedArrayFilterIndex2++] = (float)(gencodeSpeed2.speed * (SPEED_COMPUTE_PER_S /computePerms )* 60  / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RADGEAR_RATIO
 8004cb2:	4b60      	ldr	r3, [pc, #384]	; (8004e34 <speedCompute2+0x1b8>)
 8004cb4:	689c      	ldr	r4, [r3, #8]
 8004cb6:	1cfb      	adds	r3, r7, #3
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	0019      	movs	r1, r3
 8004cbc:	200a      	movs	r0, #10
 8004cbe:	f7fb fad3 	bl	8000268 <__divsi3>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7fc fb1b 	bl	8001300 <__aeabi_i2f>
 8004cca:	1c03      	adds	r3, r0, #0
 8004ccc:	1c19      	adds	r1, r3, #0
 8004cce:	1c20      	adds	r0, r4, #0
 8004cd0:	f7fc f808 	bl	8000ce4 <__aeabi_fmul>
 8004cd4:	1c03      	adds	r3, r0, #0
 8004cd6:	4958      	ldr	r1, [pc, #352]	; (8004e38 <speedCompute2+0x1bc>)
 8004cd8:	1c18      	adds	r0, r3, #0
 8004cda:	f7fc f803 	bl	8000ce4 <__aeabi_fmul>
 8004cde:	1c03      	adds	r3, r0, #0
 8004ce0:	2181      	movs	r1, #129	; 0x81
 8004ce2:	05c9      	lsls	r1, r1, #23
 8004ce4:	1c18      	adds	r0, r3, #0
 8004ce6:	f7fb fe33 	bl	8000950 <__aeabi_fdiv>
 8004cea:	1c03      	adds	r3, r0, #0
 8004cec:	4953      	ldr	r1, [pc, #332]	; (8004e3c <speedCompute2+0x1c0>)
 8004cee:	1c18      	adds	r0, r3, #0
 8004cf0:	f7fb fe2e 	bl	8000950 <__aeabi_fdiv>
 8004cf4:	1c03      	adds	r3, r0, #0
 8004cf6:	1c18      	adds	r0, r3, #0
 8004cf8:	4b51      	ldr	r3, [pc, #324]	; (8004e40 <speedCompute2+0x1c4>)
 8004cfa:	681c      	ldr	r4, [r3, #0]
 8004cfc:	1c62      	adds	r2, r4, #1
 8004cfe:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <speedCompute2+0x1c4>)
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	4950      	ldr	r1, [pc, #320]	; (8004e44 <speedCompute2+0x1c8>)
 8004d04:	f7fb fe24 	bl	8000950 <__aeabi_fdiv>
 8004d08:	1c03      	adds	r3, r0, #0
 8004d0a:	1c19      	adds	r1, r3, #0
 8004d0c:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <speedCompute2+0x1cc>)
 8004d0e:	00a2      	lsls	r2, r4, #2
 8004d10:	50d1      	str	r1, [r2, r3]

        gencodeSpeed2.encode_old = gencodeSpeed2.encode_now;
 8004d12:	4b48      	ldr	r3, [pc, #288]	; (8004e34 <speedCompute2+0x1b8>)
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	4b47      	ldr	r3, [pc, #284]	; (8004e34 <speedCompute2+0x1b8>)
 8004d18:	601a      	str	r2, [r3, #0]

        if (speedArrayFilterIndex2 == 10)
 8004d1a:	4b49      	ldr	r3, [pc, #292]	; (8004e40 <speedCompute2+0x1c4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b0a      	cmp	r3, #10
 8004d20:	d000      	beq.n	8004d24 <speedCompute2+0xa8>
 8004d22:	e079      	b.n	8004e18 <speedCompute2+0x19c>
        {
            // bubble sort
            float temp = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < 10; i++)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	e030      	b.n	8004d90 <speedCompute2+0x114>
            {
                for (int j = 0; j < 10 - i - 1; j++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	e024      	b.n	8004d7e <speedCompute2+0x102>
                {
                    if (speedArray2[j] > speedArray2[j + 1])
 8004d34:	4b44      	ldr	r3, [pc, #272]	; (8004e48 <speedCompute2+0x1cc>)
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	0092      	lsls	r2, r2, #2
 8004d3a:	58d0      	ldr	r0, [r2, r3]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <speedCompute2+0x1cc>)
 8004d42:	0092      	lsls	r2, r2, #2
 8004d44:	58d3      	ldr	r3, [r2, r3]
 8004d46:	1c19      	adds	r1, r3, #0
 8004d48:	f7fb fbde 	bl	8000508 <__aeabi_fcmpgt>
 8004d4c:	1e03      	subs	r3, r0, #0
 8004d4e:	d013      	beq.n	8004d78 <speedCompute2+0xfc>
                    {
                        temp = speedArray2[j];
 8004d50:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <speedCompute2+0x1cc>)
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	0092      	lsls	r2, r2, #2
 8004d56:	58d3      	ldr	r3, [r2, r3]
 8004d58:	617b      	str	r3, [r7, #20]
                        speedArray2[j] = speedArray2[j + 1];
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	4b3a      	ldr	r3, [pc, #232]	; (8004e48 <speedCompute2+0x1cc>)
 8004d60:	0092      	lsls	r2, r2, #2
 8004d62:	58d1      	ldr	r1, [r2, r3]
 8004d64:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <speedCompute2+0x1cc>)
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	0092      	lsls	r2, r2, #2
 8004d6a:	50d1      	str	r1, [r2, r3]
                        speedArray2[j + 1] = temp;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <speedCompute2+0x1cc>)
 8004d72:	0092      	lsls	r2, r2, #2
 8004d74:	6979      	ldr	r1, [r7, #20]
 8004d76:	50d1      	str	r1, [r2, r3]
                for (int j = 0; j < 10 - i - 1; j++)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2209      	movs	r2, #9
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	dbd4      	blt.n	8004d34 <speedCompute2+0xb8>
            for (int i = 0; i < 10; i++)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b09      	cmp	r3, #9
 8004d94:	ddcb      	ble.n	8004d2e <speedCompute2+0xb2>
                    }
                }
            }

            temp = 0.0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
            // using the middle 6 data to calculate the average value
            for (int i = 2; i < 8; i++)
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	e00c      	b.n	8004dba <speedCompute2+0x13e>
            {
                temp += speedArray2[i];
 8004da0:	4b29      	ldr	r3, [pc, #164]	; (8004e48 <speedCompute2+0x1cc>)
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	0092      	lsls	r2, r2, #2
 8004da6:	58d3      	ldr	r3, [r2, r3]
 8004da8:	1c19      	adds	r1, r3, #0
 8004daa:	6978      	ldr	r0, [r7, #20]
 8004dac:	f7fb fc30 	bl	8000610 <__aeabi_fadd>
 8004db0:	1c03      	adds	r3, r0, #0
 8004db2:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < 8; i++)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b07      	cmp	r3, #7
 8004dbe:	ddef      	ble.n	8004da0 <speedCompute2+0x124>
            }
            // calculate the average value
            temp = temp / 6;
 8004dc0:	4922      	ldr	r1, [pc, #136]	; (8004e4c <speedCompute2+0x1d0>)
 8004dc2:	6978      	ldr	r0, [r7, #20]
 8004dc4:	f7fb fdc4 	bl	8000950 <__aeabi_fdiv>
 8004dc8:	1c03      	adds	r3, r0, #0
 8004dca:	617b      	str	r3, [r7, #20]
            // low pass filter
            // Y(n)= qX(n) + (1-q)Y(n-1)
            // X(n) is the current input, Y(n) is the current output, Y(n-1) is the previous output, and q is the filter factor.
            // The larger the q, the stronger the filtering effect, but the slower the response.
            gMotorData2.speed = (float)((double)temp * 0.5 + (double)gMotorData2.speed * 0.5);
 8004dcc:	6978      	ldr	r0, [r7, #20]
 8004dce:	f7fe f931 	bl	8003034 <__aeabi_f2d>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <speedCompute2+0x1d4>)
 8004dd6:	f7fd fa3f 	bl	8002258 <__aeabi_dmul>
 8004dda:	0002      	movs	r2, r0
 8004ddc:	000b      	movs	r3, r1
 8004dde:	0014      	movs	r4, r2
 8004de0:	001d      	movs	r5, r3
 8004de2:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <speedCompute2+0x1d8>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	1c18      	adds	r0, r3, #0
 8004de8:	f7fe f924 	bl	8003034 <__aeabi_f2d>
 8004dec:	2200      	movs	r2, #0
 8004dee:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <speedCompute2+0x1d4>)
 8004df0:	f7fd fa32 	bl	8002258 <__aeabi_dmul>
 8004df4:	0002      	movs	r2, r0
 8004df6:	000b      	movs	r3, r1
 8004df8:	0020      	movs	r0, r4
 8004dfa:	0029      	movs	r1, r5
 8004dfc:	f7fc fad2 	bl	80013a4 <__aeabi_dadd>
 8004e00:	0002      	movs	r2, r0
 8004e02:	000b      	movs	r3, r1
 8004e04:	0010      	movs	r0, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	f7fe f95c 	bl	80030c4 <__aeabi_d2f>
 8004e0c:	1c02      	adds	r2, r0, #0
 8004e0e:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <speedCompute2+0x1d8>)
 8004e10:	60da      	str	r2, [r3, #12]
            speedArrayFilterIndex2 = 0;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <speedCompute2+0x1c4>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
        }
        speedComputeCount2 = 0;
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <speedCompute2+0x1b4>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
    }
    speedComputeCount2++;
 8004e1e:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <speedCompute2+0x1b4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	4b02      	ldr	r3, [pc, #8]	; (8004e30 <speedCompute2+0x1b4>)
 8004e26:	601a      	str	r2, [r3, #0]
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b006      	add	sp, #24
 8004e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e30:	20000600 	.word	0x20000600
 8004e34:	200005c4 	.word	0x200005c4
 8004e38:	42700000 	.word	0x42700000
 8004e3c:	41300000 	.word	0x41300000
 8004e40:	20000658 	.word	0x20000658
 8004e44:	41a00000 	.word	0x41a00000
 8004e48:	2000062c 	.word	0x2000062c
 8004e4c:	40c00000 	.word	0x40c00000
 8004e50:	3fe00000 	.word	0x3fe00000
 8004e54:	200005e4 	.word	0x200005e4

08004e58 <HAL_TIM_PeriodElapsedCallback>:

//pc6 pc7 timer3  motor 1
//timer1 motor2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)   //encooder compter  motor 1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a45      	ldr	r2, [pc, #276]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d122      	bne.n	8004eb0 <HAL_TIM_PeriodElapsedCallback+0x58>
    {
        /* Determine the current counter counting direction */
        if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2210      	movs	r2, #16
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d10d      	bne.n	8004e94 <HAL_TIM_PeriodElapsedCallback+0x3c>
            /* underflow, count down */
        { Encoder_Overflow_Count--;
 8004e78:	4b41      	ldr	r3, [pc, #260]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004e82:	801a      	strh	r2, [r3, #0]
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //vert
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	019b      	lsls	r3, r3, #6
 8004e88:	4a3e      	ldr	r2, [pc, #248]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	0010      	movs	r0, r2
 8004e8e:	f001 fa82 	bl	8006396 <HAL_GPIO_TogglePin>
         //  motor_pwm_set( changeSpeedToPWM(gMotorData.motorPWM));
          motor_pwm_set(gMotorData.motorPWM);
          //motor_pwm_set2(gMotorData2.motorPWM);
        }
    }
}
 8004e92:	e06f      	b.n	8004f74 <HAL_TIM_PeriodElapsedCallback+0x11c>
            Encoder_Overflow_Count++;
 8004e94:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	4b38      	ldr	r3, [pc, #224]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004e9e:	801a      	strh	r2, [r3, #0]
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12); //orange
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	015b      	lsls	r3, r3, #5
 8004ea4:	4a37      	ldr	r2, [pc, #220]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	0010      	movs	r0, r2
 8004eaa:	f001 fa74 	bl	8006396 <HAL_GPIO_TogglePin>
}
 8004eae:	e061      	b.n	8004f74 <HAL_TIM_PeriodElapsedCallback+0x11c>
    else if (htim->Instance == TIM7)   //every 100ms call the interruption for calculte PID
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a34      	ldr	r2, [pc, #208]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d15c      	bne.n	8004f74 <HAL_TIM_PeriodElapsedCallback+0x11c>
        int encoderValueNow = getEncoderValue();
 8004eba:	f000 f873 	bl	8004fa4 <getEncoderValue>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	60fb      	str	r3, [r7, #12]
        int encoderValueNow2 = getEncoderValue2();
 8004ec2:	f000 f887 	bl	8004fd4 <getEncoderValue2>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	60bb      	str	r3, [r7, #8]
        speedCompute(encoderValueNow, 1);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2101      	movs	r1, #1
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f7ff fde6 	bl	8004aa0 <speedCompute>
        speedCompute2(encoderValueNow2, 1);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7ff fecf 	bl	8004c7c <speedCompute2>
        if (gMotorData.state == MOTOR_STATE_START)  //MOTOR_STATE_START call in setSpeed
 8004ede:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d146      	bne.n	8004f74 <HAL_TIM_PeriodElapsedCallback+0x11c>
            gMotorData.motorPWM = incrementPIDControl(&gSpeedPID, gMotorData.speed); //gMotorData.speed is set in speedCompute
 8004ee6:	4b29      	ldr	r3, [pc, #164]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	4b29      	ldr	r3, [pc, #164]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004eec:	1c11      	adds	r1, r2, #0
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f7ff fc8e 	bl	8004810 <incrementPIDControl>
 8004ef4:	1c02      	adds	r2, r0, #0
 8004ef6:	4b25      	ldr	r3, [pc, #148]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004ef8:	611a      	str	r2, [r3, #16]
            if(gMotorData.motorPWM >= 2560)                     /* ÏÞËÙ */
 8004efa:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	4925      	ldr	r1, [pc, #148]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f00:	1c18      	adds	r0, r3, #0
 8004f02:	f7fb fb0b 	bl	800051c <__aeabi_fcmpge>
 8004f06:	1e03      	subs	r3, r0, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_PeriodElapsedCallback+0xba>
            	gMotorData.motorPWM = 2560;
 8004f0a:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004f0c:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f0e:	611a      	str	r2, [r3, #16]
 8004f10:	e00a      	b.n	8004f28 <HAL_TIM_PeriodElapsedCallback+0xd0>
            else if (gMotorData.motorPWM <= -2560)
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	4920      	ldr	r1, [pc, #128]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004f18:	1c18      	adds	r0, r3, #0
 8004f1a:	f7fb faeb 	bl	80004f4 <__aeabi_fcmple>
 8004f1e:	1e03      	subs	r3, r0, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_TIM_PeriodElapsedCallback+0xd0>
            	gMotorData.motorPWM = -2560;
 8004f22:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004f24:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004f26:	611a      	str	r2, [r3, #16]
            gMotorData2.motorPWM = incrementPIDControl2(&gSpeedPID2, gMotorData2.speed); //gMotorData.speed is set in speedCompute
 8004f28:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004f2e:	1c11      	adds	r1, r2, #0
 8004f30:	0018      	movs	r0, r3
 8004f32:	f7ff fcc3 	bl	80048bc <incrementPIDControl2>
 8004f36:	1c02      	adds	r2, r0, #0
 8004f38:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f3a:	611a      	str	r2, [r3, #16]
            if(gMotorData2.motorPWM >= 2560)                     /* ÏÞËÙ */
 8004f3c:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	4914      	ldr	r1, [pc, #80]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f42:	1c18      	adds	r0, r3, #0
 8004f44:	f7fb faea 	bl	800051c <__aeabi_fcmpge>
 8004f48:	1e03      	subs	r3, r0, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_TIM_PeriodElapsedCallback+0xfc>
            	gMotorData2.motorPWM = 2560;
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f4e:	4a11      	ldr	r2, [pc, #68]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f50:	611a      	str	r2, [r3, #16]
 8004f52:	e00a      	b.n	8004f6a <HAL_TIM_PeriodElapsedCallback+0x112>
            else if (gMotorData2.motorPWM <= -2560)
 8004f54:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	490f      	ldr	r1, [pc, #60]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004f5a:	1c18      	adds	r0, r3, #0
 8004f5c:	f7fb faca 	bl	80004f4 <__aeabi_fcmple>
 8004f60:	1e03      	subs	r3, r0, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_TIM_PeriodElapsedCallback+0x112>
            	gMotorData2.motorPWM = -2560;
 8004f64:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004f66:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004f68:	611a      	str	r2, [r3, #16]
          motor_pwm_set(gMotorData.motorPWM);
 8004f6a:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	1c18      	adds	r0, r3, #0
 8004f70:	f000 f8c2 	bl	80050f8 <motor_pwm_set>
}
 8004f74:	46c0      	nop			; (mov r8, r8)
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b004      	add	sp, #16
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	200005f8 	.word	0x200005f8
 8004f84:	50000400 	.word	0x50000400
 8004f88:	40001400 	.word	0x40001400
 8004f8c:	200005d0 	.word	0x200005d0
 8004f90:	20000570 	.word	0x20000570
 8004f94:	45200000 	.word	0x45200000
 8004f98:	c5200000 	.word	0xc5200000
 8004f9c:	200005e4 	.word	0x200005e4
 8004fa0:	20000594 	.word	0x20000594

08004fa4 <getEncoderValue>:
 * @brief Get the Current Encoder Count
 *
 * @return uint16_t The current encoder count
 */
int getEncoderValue(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
    int Encoder_Count = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]
    /* Get the current counter value */
    Encoder_Count = __HAL_TIM_GET_COUNTER(&htim3); //motor 1
 8004fae:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <getEncoderValue+0x28>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	607b      	str	r3, [r7, #4]
   // printf("Encoder_Count:%d\r\n",Encoder_Count);
    /* Add the overflow count to the counter value */
    Encoder_Count += Encoder_Overflow_Count * 65536;
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <getEncoderValue+0x2c>)
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	041b      	lsls	r3, r3, #16
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	18d3      	adds	r3, r2, r3
 8004fc0:	607b      	str	r3, [r7, #4]
    return Encoder_Count;
 8004fc2:	687b      	ldr	r3, [r7, #4]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b002      	add	sp, #8
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000268 	.word	0x20000268
 8004fd0:	200005f8 	.word	0x200005f8

08004fd4 <getEncoderValue2>:

int getEncoderValue2(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
	int Encoder_Count = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	607b      	str	r3, [r7, #4]
    /* Get the current counter value */
    Encoder_Count = __HAL_TIM_GET_COUNTER(&htim1); //motor 2
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <getEncoderValue2+0x28>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	607b      	str	r3, [r7, #4]
    /* Add the overflow count to the counter value */
    Encoder_Count += Encoder_Overflow_Count2 * 65536;
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <getEncoderValue2+0x2c>)
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	041b      	lsls	r3, r3, #16
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	18d3      	adds	r3, r2, r3
 8004ff0:	607b      	str	r3, [r7, #4]
    return Encoder_Count;
 8004ff2:	687b      	ldr	r3, [r7, #4]
}
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	2000021c 	.word	0x2000021c
 8005000:	200005fa 	.word	0x200005fa

08005004 <dcmotor_dir>:
/**
 * @brief       Motor Direction Control
 * @param       para: 0 Forward, 1 Reverse
 */
void dcmotor_dir(uint8_t para)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	0002      	movs	r2, r0
 800500c:	1dfb      	adds	r3, r7, #7
 800500e:	701a      	strb	r2, [r3, #0]

    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8005010:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <dcmotor_dir+0xa0>)
 8005012:	2100      	movs	r1, #0
 8005014:	0018      	movs	r0, r3
 8005016:	f002 fa41 	bl	800749c <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 800501a:	4b23      	ldr	r3, [pc, #140]	; (80050a8 <dcmotor_dir+0xa4>)
 800501c:	2104      	movs	r1, #4
 800501e:	0018      	movs	r0, r3
 8005020:	f002 fa3c 	bl	800749c <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8005024:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <dcmotor_dir+0xa4>)
 8005026:	2100      	movs	r1, #0
 8005028:	0018      	movs	r0, r3
 800502a:	f002 fa37 	bl	800749c <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <dcmotor_dir+0xa8>)
 8005030:	2100      	movs	r1, #0
 8005032:	0018      	movs	r0, r3
 8005034:	f002 fa32 	bl	800749c <HAL_TIM_PWM_Stop>

    if (para == 0)
 8005038:	1dfb      	adds	r3, r7, #7
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d114      	bne.n	800506a <dcmotor_dir+0x66>
    {
        HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8005040:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <dcmotor_dir+0xa0>)
 8005042:	2100      	movs	r1, #0
 8005044:	0018      	movs	r0, r3
 8005046:	f002 f945 	bl	80072d4 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 800504a:	4b18      	ldr	r3, [pc, #96]	; (80050ac <dcmotor_dir+0xa8>)
 800504c:	2100      	movs	r1, #0
 800504e:	0018      	movs	r0, r3
 8005050:	f002 fa24 	bl	800749c <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8005054:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <dcmotor_dir+0xa4>)
 8005056:	2104      	movs	r1, #4
 8005058:	0018      	movs	r0, r3
 800505a:	f002 f93b 	bl	80072d4 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <dcmotor_dir+0xa4>)
 8005060:	2100      	movs	r1, #0
 8005062:	0018      	movs	r0, r3
 8005064:	f002 fa1a 	bl	800749c <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
        HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
        //  __HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, 300);  //  motor1 reculer
        //__HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_1, 300);  // motor2 reculer
    }
}
 8005068:	e017      	b.n	800509a <dcmotor_dir+0x96>
    else if (para == 1)
 800506a:	1dfb      	adds	r3, r7, #7
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d113      	bne.n	800509a <dcmotor_dir+0x96>
        HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8005072:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <dcmotor_dir+0xa8>)
 8005074:	2100      	movs	r1, #0
 8005076:	0018      	movs	r0, r3
 8005078:	f002 f92c 	bl	80072d4 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <dcmotor_dir+0xa0>)
 800507e:	2100      	movs	r1, #0
 8005080:	0018      	movs	r0, r3
 8005082:	f002 fa0b 	bl	800749c <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8005086:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <dcmotor_dir+0xa4>)
 8005088:	2104      	movs	r1, #4
 800508a:	0018      	movs	r0, r3
 800508c:	f002 fa06 	bl	800749c <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <dcmotor_dir+0xa4>)
 8005092:	2100      	movs	r1, #0
 8005094:	0018      	movs	r0, r3
 8005096:	f002 f91d 	bl	80072d4 <HAL_TIM_PWM_Start>
}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	46bd      	mov	sp, r7
 800509e:	b002      	add	sp, #8
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	20000398 	.word	0x20000398
 80050a8:	20000300 	.word	0x20000300
 80050ac:	2000034c 	.word	0x2000034c

080050b0 <dcmotor_speed>:
        //__HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_1, 300);  // motor2 reculer
    }
}

void dcmotor_speed(uint16_t para)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	0002      	movs	r2, r0
 80050b8:	1dbb      	adds	r3, r7, #6
 80050ba:	801a      	strh	r2, [r3, #0]
        __HAL_TIM_SetCompare(&htim17 , TIM_CHANNEL_1, para);  //PB9
        __HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_2, para);  //PB15
        __HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, para);  //PB9
        __HAL_TIM_SetCompare(&htim14 , TIM_CHANNEL_1, para);  //PB15
    */
    __HAL_TIM_SetCompare(&htim17, TIM_CHANNEL_1, para); // PB9   para为占空比的百分比乘以周期时间
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <dcmotor_speed+0x3c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1dba      	adds	r2, r7, #6
 80050c2:	8812      	ldrh	r2, [r2, #0]
 80050c4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim16, TIM_CHANNEL_1, para); // PB15
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <dcmotor_speed+0x40>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	1dba      	adds	r2, r7, #6
 80050cc:	8812      	ldrh	r2, [r2, #0]
 80050ce:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_2, para); // PB9
 80050d0:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <dcmotor_speed+0x44>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	1dba      	adds	r2, r7, #6
 80050d6:	8812      	ldrh	r2, [r2, #0]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_1, para); // PB15
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <dcmotor_speed+0x44>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	1dba      	adds	r2, r7, #6
 80050e0:	8812      	ldrh	r2, [r2, #0]
 80050e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80050e4:	46c0      	nop			; (mov r8, r8)
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b002      	add	sp, #8
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000398 	.word	0x20000398
 80050f0:	2000034c 	.word	0x2000034c
 80050f4:	20000300 	.word	0x20000300

080050f8 <motor_pwm_set>:
    __HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_2, para); // PB9
    __HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_1, para); // PB15
}

void motor_pwm_set(float para)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
    int val = (int)para;
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7fc f8dd 	bl	80012c0 <__aeabi_f2iz>
 8005106:	0003      	movs	r3, r0
 8005108:	60fb      	str	r3, [r7, #12]

    if (val >= 0)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	db08      	blt.n	8005122 <motor_pwm_set+0x2a>
    {
        dcmotor_dir(0);
 8005110:	2000      	movs	r0, #0
 8005112:	f7ff ff77 	bl	8005004 <dcmotor_dir>
        dcmotor_speed(val);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	b29b      	uxth	r3, r3
 800511a:	0018      	movs	r0, r3
 800511c:	f7ff ffc8 	bl	80050b0 <dcmotor_speed>
    else
    {
        dcmotor_dir(1);
        dcmotor_speed(-val);
    }
}
 8005120:	e009      	b.n	8005136 <motor_pwm_set+0x3e>
        dcmotor_dir(1);
 8005122:	2001      	movs	r0, #1
 8005124:	f7ff ff6e 	bl	8005004 <dcmotor_dir>
        dcmotor_speed(-val);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	b29b      	uxth	r3, r3
 800512c:	425b      	negs	r3, r3
 800512e:	b29b      	uxth	r3, r3
 8005130:	0018      	movs	r0, r3
 8005132:	f7ff ffbd 	bl	80050b0 <dcmotor_speed>
}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	46bd      	mov	sp, r7
 800513a:	b004      	add	sp, #16
 800513c:	bd80      	pop	{r7, pc}

0800513e <isSpeedValid>:
 * @param speedStr  the speed string to check
 * @return true  if the speed is valid
 * @return false  if the speed is not valid
 */
bool isSpeedValid(char *speedStr)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
    int i = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
    // get the direction for speedStr[0] with - or +
    if (speedStr[0] == '-' || speedStr[0] == '+')
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b2d      	cmp	r3, #45	; 0x2d
 8005150:	d003      	beq.n	800515a <isSpeedValid+0x1c>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b2b      	cmp	r3, #43	; 0x2b
 8005158:	d103      	bne.n	8005162 <isSpeedValid+0x24>
    {
        i++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3301      	adds	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
    }
    else
    {
        return false;
    }
    while (speedStr[i] != '\0')
 8005160:	e012      	b.n	8005188 <isSpeedValid+0x4a>
        return false;
 8005162:	2300      	movs	r3, #0
 8005164:	e017      	b.n	8005196 <isSpeedValid+0x58>
    {
        // if the char is not a number, return false
        if (!(speedStr[i] >= '0' && speedStr[i] <= '9'))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	18d3      	adds	r3, r2, r3
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b2f      	cmp	r3, #47	; 0x2f
 8005170:	d905      	bls.n	800517e <isSpeedValid+0x40>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	18d3      	adds	r3, r2, r3
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b39      	cmp	r3, #57	; 0x39
 800517c:	d901      	bls.n	8005182 <isSpeedValid+0x44>
        {
            return false;
 800517e:	2300      	movs	r3, #0
 8005180:	e009      	b.n	8005196 <isSpeedValid+0x58>
        }
        i++;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3301      	adds	r3, #1
 8005186:	60fb      	str	r3, [r7, #12]
    while (speedStr[i] != '\0')
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	18d3      	adds	r3, r2, r3
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e8      	bne.n	8005166 <isSpeedValid+0x28>
    }

    return true;
 8005194:	2301      	movs	r3, #1
}
 8005196:	0018      	movs	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	b004      	add	sp, #16
 800519c:	bd80      	pop	{r7, pc}

0800519e <extractSpeed>:
 *
 * @param data  the data to extract the speed
 * @return int  the speed extracted
 */
float extractSpeed(char *data)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
    float speed = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
    int direction = DIRECTION_FORWARD;
 80051aa:	2301      	movs	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]
    // if the speed is negative, set the direction to -1,if not, set the direction to 1
    if (data[0] == '-')
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b2d      	cmp	r3, #45	; 0x2d
 80051b4:	d103      	bne.n	80051be <extractSpeed+0x20>
    {
        direction = DIRECTION_BACKWARD;
 80051b6:	2301      	movs	r3, #1
 80051b8:	425b      	negs	r3, r3
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	e001      	b.n	80051c2 <extractSpeed+0x24>
    }
    else
    {
        direction = DIRECTION_FORWARD;
 80051be:	2301      	movs	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
    }
    // change the string speed to int speed without the direction
    speed = atof(&data[1]);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3301      	adds	r3, #1
 80051c6:	0018      	movs	r0, r3
 80051c8:	f007 f95c 	bl	800c484 <atof>
 80051cc:	0002      	movs	r2, r0
 80051ce:	000b      	movs	r3, r1
 80051d0:	0010      	movs	r0, r2
 80051d2:	0019      	movs	r1, r3
 80051d4:	f7fd ff76 	bl	80030c4 <__aeabi_d2f>
 80051d8:	1c03      	adds	r3, r0, #0
 80051da:	60bb      	str	r3, [r7, #8]
    // return the speed with the direction
    return (float)speed * direction;
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7fc f88f 	bl	8001300 <__aeabi_i2f>
 80051e2:	1c03      	adds	r3, r0, #0
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	1c18      	adds	r0, r3, #0
 80051e8:	f7fb fd7c 	bl	8000ce4 <__aeabi_fmul>
 80051ec:	1c03      	adds	r3, r0, #0
}
 80051ee:	1c18      	adds	r0, r3, #0
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b004      	add	sp, #16
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <speedProcess>:
    updateCurrentSpeed(updateSpeed);
    printf("[INFO]: Set speed to %d\r\n", updateSpeed);
}

void speedProcess(int numberofCmdArg, char *cmdArg[])
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
    // check if the number of argument is correct
    if (numberofCmdArg != 3)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d004      	beq.n	8005212 <speedProcess+0x1a>
    {
        printf("[ERROR]: Invalid number of argument\r\n");
 8005208:	4b1c      	ldr	r3, [pc, #112]	; (800527c <speedProcess+0x84>)
 800520a:	0018      	movs	r0, r3
 800520c:	f008 fe3e 	bl	800de8c <puts>
        return;
 8005210:	e031      	b.n	8005276 <speedProcess+0x7e>
    }
    // check if the speed is valid
    if (!isSpeedValid(cmdArg[2]))
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	0018      	movs	r0, r3
 800521a:	f7ff ff90 	bl	800513e <isSpeedValid>
 800521e:	0003      	movs	r3, r0
 8005220:	001a      	movs	r2, r3
 8005222:	2301      	movs	r3, #1
 8005224:	4053      	eors	r3, r2
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <speedProcess+0x3e>
    {
        printf("[ERROR]: Invalid speed\r\n");
 800522c:	4b14      	ldr	r3, [pc, #80]	; (8005280 <speedProcess+0x88>)
 800522e:	0018      	movs	r0, r3
 8005230:	f008 fe2c 	bl	800de8c <puts>
        return;
 8005234:	e01f      	b.n	8005276 <speedProcess+0x7e>
            gSpeedPID.SetPoint = -MAX_SPEED;
        }
    */

    // 调试motor2
    gSpeedPID2.SetPoint = extractSpeed(cmdArg[1]);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	3304      	adds	r3, #4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	0018      	movs	r0, r3
 800523e:	f7ff ffae 	bl	800519e <extractSpeed>
 8005242:	1c02      	adds	r2, r0, #0
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <speedProcess+0x8c>)
 8005246:	601a      	str	r2, [r3, #0]
    if (gSpeedPID2.SetPoint > MAX_SPEED) // MAX_SPEED : 300 tour/minute
 8005248:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <speedProcess+0x8c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	490e      	ldr	r1, [pc, #56]	; (8005288 <speedProcess+0x90>)
 800524e:	1c18      	adds	r0, r3, #0
 8005250:	f7fb f95a 	bl	8000508 <__aeabi_fcmpgt>
 8005254:	1e03      	subs	r3, r0, #0
 8005256:	d003      	beq.n	8005260 <speedProcess+0x68>
    {
        gSpeedPID2.SetPoint = MAX_SPEED;
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <speedProcess+0x8c>)
 800525a:	4a0b      	ldr	r2, [pc, #44]	; (8005288 <speedProcess+0x90>)
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	e00a      	b.n	8005276 <speedProcess+0x7e>
    }
    else if (gSpeedPID2.SetPoint < -MAX_SPEED)
 8005260:	4b08      	ldr	r3, [pc, #32]	; (8005284 <speedProcess+0x8c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4909      	ldr	r1, [pc, #36]	; (800528c <speedProcess+0x94>)
 8005266:	1c18      	adds	r0, r3, #0
 8005268:	f7fb f93a 	bl	80004e0 <__aeabi_fcmplt>
 800526c:	1e03      	subs	r3, r0, #0
 800526e:	d002      	beq.n	8005276 <speedProcess+0x7e>
    {
        gSpeedPID2.SetPoint = -MAX_SPEED;
 8005270:	4b04      	ldr	r3, [pc, #16]	; (8005284 <speedProcess+0x8c>)
 8005272:	4a06      	ldr	r2, [pc, #24]	; (800528c <speedProcess+0x94>)
 8005274:	601a      	str	r2, [r3, #0]
    }
}
 8005276:	46bd      	mov	sp, r7
 8005278:	b002      	add	sp, #8
 800527a:	bd80      	pop	{r7, pc}
 800527c:	08010d98 	.word	0x08010d98
 8005280:	08010dc0 	.word	0x08010dc0
 8005284:	20000594 	.word	0x20000594
 8005288:	43960000 	.word	0x43960000
 800528c:	c3960000 	.word	0xc3960000

08005290 <drv_uart_init>:
#include "drv_uart.h"

static SemaphoreHandle_t sem_uart_read = NULL;

int drv_uart_init()
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
    sem_uart_read = xSemaphoreCreateBinary();
 8005294:	2203      	movs	r2, #3
 8005296:	2100      	movs	r1, #0
 8005298:	2001      	movs	r0, #1
 800529a:	f005 fbd3 	bl	800aa44 <xQueueGenericCreate>
 800529e:	0002      	movs	r2, r0
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <drv_uart_init+0x3c>)
 80052a2:	601a      	str	r2, [r3, #0]
    if (sem_uart_read == NULL)
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <drv_uart_init+0x3c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <drv_uart_init+0x2a>
    {
        printf("[ERROR]: Semaphore create failed.\r\n"); // TODO: handle error
 80052ac:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <drv_uart_init+0x40>)
 80052ae:	0018      	movs	r0, r3
 80052b0:	f008 fdec 	bl	800de8c <puts>
        return -1;
 80052b4:	2301      	movs	r3, #1
 80052b6:	425b      	negs	r3, r3
 80052b8:	e004      	b.n	80052c4 <drv_uart_init+0x34>
    }
    else
    {
        printf("[INFO]: Shell uart semaphore create success.\r\n");
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <drv_uart_init+0x44>)
 80052bc:	0018      	movs	r0, r3
 80052be:	f008 fde5 	bl	800de8c <puts>
    }
    return 0;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	2000065c 	.word	0x2000065c
 80052d0:	08010df4 	.word	0x08010df4
 80052d4:	08010e18 	.word	0x08010e18

080052d8 <shell_uart_receive_irq_cb>:

void shell_uart_receive_irq_cb(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
    BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80052de:	2300      	movs	r3, #0
 80052e0:	607b      	str	r3, [r7, #4]

    xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <shell_uart_receive_irq_cb+0x30>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	1d3a      	adds	r2, r7, #4
 80052e8:	0011      	movs	r1, r2
 80052ea:	0018      	movs	r0, r3
 80052ec:	f005 fcbe 	bl	800ac6c <xQueueGiveFromISR>

    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <shell_uart_receive_irq_cb+0x26>
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <shell_uart_receive_irq_cb+0x34>)
 80052f8:	2280      	movs	r2, #128	; 0x80
 80052fa:	0552      	lsls	r2, r2, #21
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b002      	add	sp, #8
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	2000065c 	.word	0x2000065c
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <drv_uart_receive>:

uint8_t drv_uart_receive(char *str, uint16_t size)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	000a      	movs	r2, r1
 800531a:	1cbb      	adds	r3, r7, #2
 800531c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t *)(str), 1);
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4b09      	ldr	r3, [pc, #36]	; (8005348 <drv_uart_receive+0x38>)
 8005322:	2201      	movs	r2, #1
 8005324:	0018      	movs	r0, r3
 8005326:	f003 fbcb 	bl	8008ac0 <HAL_UART_Receive_IT>
    xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <drv_uart_receive+0x3c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2201      	movs	r2, #1
 8005330:	4252      	negs	r2, r2
 8005332:	0011      	movs	r1, r2
 8005334:	0018      	movs	r0, r3
 8005336:	f005 fcfe 	bl	800ad36 <xQueueSemaphoreTake>
    return size;
 800533a:	1cbb      	adds	r3, r7, #2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b2db      	uxtb	r3, r3
}
 8005340:	0018      	movs	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	b002      	add	sp, #8
 8005346:	bd80      	pop	{r7, pc}
 8005348:	200003e4 	.word	0x200003e4
 800534c:	2000065c 	.word	0x2000065c

08005350 <drv_uart_transmit>:

uint8_t drv_uart_transmit(char *str, uint16_t size)
{
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	000a      	movs	r2, r1
 800535a:	1cbb      	adds	r3, r7, #2
 800535c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&UART_DEVICE, (uint8_t *)str, size, HAL_MAX_DELAY);
 800535e:	2301      	movs	r3, #1
 8005360:	425c      	negs	r4, r3
 8005362:	1cbb      	adds	r3, r7, #2
 8005364:	881a      	ldrh	r2, [r3, #0]
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4805      	ldr	r0, [pc, #20]	; (8005380 <drv_uart_transmit+0x30>)
 800536a:	0023      	movs	r3, r4
 800536c:	f003 fb0c 	bl	8008988 <HAL_UART_Transmit>
    return size;
 8005370:	1cbb      	adds	r3, r7, #2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b2db      	uxtb	r3, r3
}
 8005376:	0018      	movs	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	b003      	add	sp, #12
 800537c:	bd90      	pop	{r4, r7, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	200003e4 	.word	0x200003e4

08005384 <HAL_UART_RxCpltCallback>:

// uart interrupt callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART_NAME)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <HAL_UART_RxCpltCallback+0x20>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d101      	bne.n	800539a <HAL_UART_RxCpltCallback+0x16>
    {
        shell_uart_receive_irq_cb();
 8005396:	f7ff ff9f 	bl	80052d8 <shell_uart_receive_irq_cb>
    }
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	46bd      	mov	sp, r7
 800539e:	b002      	add	sp, #8
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	40004400 	.word	0x40004400

080053a8 <sh_help>:

#include <stdio.h>
#include "cmsis_os.h"

static int32_t sh_help(h_shell_t *h_shell, int argc, char **argv)
{
 80053a8:	b590      	push	{r4, r7, lr}
 80053aa:	b089      	sub	sp, #36	; 0x24
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
    int i;
    for (i = 0; i < h_shell->shell_func_list_size; i++)
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e02e      	b.n	8005418 <sh_help+0x70>
    {
        int size;
        size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->shell_func_list[i].c, h_shell->shell_func_list[i].description);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	22c1      	movs	r2, #193	; 0xc1
 80053be:	0092      	lsls	r2, r2, #2
 80053c0:	1898      	adds	r0, r3, r2
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	0013      	movs	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	18cb      	adds	r3, r1, r3
 80053d0:	3304      	adds	r3, #4
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	001c      	movs	r4, r3
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	0013      	movs	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	189b      	adds	r3, r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	18cb      	adds	r3, r1, r3
 80053e4:	330c      	adds	r3, #12
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a10      	ldr	r2, [pc, #64]	; (800542c <sh_help+0x84>)
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	0023      	movs	r3, r4
 80053ee:	2128      	movs	r1, #40	; 0x28
 80053f0:	f008 fd56 	bl	800dea0 <sniprintf>
 80053f4:	0003      	movs	r3, r0
 80053f6:	613b      	str	r3, [r7, #16]
        h_shell->drv.transmit(h_shell->print_buffer, size);
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	23d5      	movs	r3, #213	; 0xd5
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	58d2      	ldr	r2, [r2, r3]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	21c1      	movs	r1, #193	; 0xc1
 8005404:	0089      	lsls	r1, r1, #2
 8005406:	468c      	mov	ip, r1
 8005408:	4463      	add	r3, ip
 800540a:	6939      	ldr	r1, [r7, #16]
 800540c:	b289      	uxth	r1, r1
 800540e:	0018      	movs	r0, r3
 8005410:	4790      	blx	r2
    for (i = 0; i < h_shell->shell_func_list_size; i++)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	3301      	adds	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	429a      	cmp	r2, r3
 8005420:	dbcb      	blt.n	80053ba <sh_help+0x12>
    }

    return 0;
 8005422:	2300      	movs	r3, #0
}
 8005424:	0018      	movs	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	b007      	add	sp, #28
 800542a:	bd90      	pop	{r4, r7, pc}
 800542c:	08010e48 	.word	0x08010e48

08005430 <shell_init>:

int shell_init(h_shell_t *h_shell)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
    int size = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
    h_shell->shell_func_list_size = 0;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
    size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "[INFO]: Monsieur Shell v0.2 Init\r\n");
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	22c1      	movs	r2, #193	; 0xc1
 8005446:	0092      	lsls	r2, r2, #2
 8005448:	4694      	mov	ip, r2
 800544a:	4463      	add	r3, ip
 800544c:	4a0f      	ldr	r2, [pc, #60]	; (800548c <shell_init+0x5c>)
 800544e:	2128      	movs	r1, #40	; 0x28
 8005450:	0018      	movs	r0, r3
 8005452:	f008 fd25 	bl	800dea0 <sniprintf>
 8005456:	0003      	movs	r3, r0
 8005458:	60fb      	str	r3, [r7, #12]
    h_shell->drv.transmit(h_shell->print_buffer, size);
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	23d5      	movs	r3, #213	; 0xd5
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	58d2      	ldr	r2, [r2, r3]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	21c1      	movs	r1, #193	; 0xc1
 8005466:	0089      	lsls	r1, r1, #2
 8005468:	468c      	mov	ip, r1
 800546a:	4463      	add	r3, ip
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	b289      	uxth	r1, r1
 8005470:	0018      	movs	r0, r3
 8005472:	4790      	blx	r2

    shell_add(h_shell, 'h', sh_help, "Help");
 8005474:	4b06      	ldr	r3, [pc, #24]	; (8005490 <shell_init+0x60>)
 8005476:	4a07      	ldr	r2, [pc, #28]	; (8005494 <shell_init+0x64>)
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	2168      	movs	r1, #104	; 0x68
 800547c:	f000 f80c 	bl	8005498 <shell_add>
    return 0;
 8005480:	2300      	movs	r3, #0
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b004      	add	sp, #16
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	08010e54 	.word	0x08010e54
 8005490:	08010e78 	.word	0x08010e78
 8005494:	080053a9 	.word	0x080053a9

08005498 <shell_add>:

int shell_add(h_shell_t *h_shell, char c, shell_func_pointer_t pfunc, char *description)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	200b      	movs	r0, #11
 80054a6:	183b      	adds	r3, r7, r0
 80054a8:	1c0a      	adds	r2, r1, #0
 80054aa:	701a      	strb	r2, [r3, #0]
    if (h_shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b3f      	cmp	r3, #63	; 0x3f
 80054b2:	dc28      	bgt.n	8005506 <shell_add+0x6e>
    {
        h_shell->shell_func_list[h_shell->shell_func_list_size].c = c;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68f9      	ldr	r1, [r7, #12]
 80054ba:	0013      	movs	r3, r2
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	189b      	adds	r3, r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	18cb      	adds	r3, r1, r3
 80054c4:	3304      	adds	r3, #4
 80054c6:	183a      	adds	r2, r7, r0
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	701a      	strb	r2, [r3, #0]
        h_shell->shell_func_list[h_shell->shell_func_list_size].pfunc = pfunc;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68f9      	ldr	r1, [r7, #12]
 80054d2:	0013      	movs	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	18cb      	adds	r3, r1, r3
 80054dc:	3308      	adds	r3, #8
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
        h_shell->shell_func_list[h_shell->shell_func_list_size].description = description;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	0013      	movs	r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	189b      	adds	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	18cb      	adds	r3, r1, r3
 80054f2:	330c      	adds	r3, #12
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	601a      	str	r2, [r3, #0]
        h_shell->shell_func_list_size++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	601a      	str	r2, [r3, #0]
        return 0;
 8005502:	2300      	movs	r3, #0
 8005504:	e001      	b.n	800550a <shell_add+0x72>
    }

    return -1;
 8005506:	2301      	movs	r3, #1
 8005508:	425b      	negs	r3, r3
}
 800550a:	0018      	movs	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	b004      	add	sp, #16
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <shell_exec>:

static int shell_exec(h_shell_t *h_shell, char *buf)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b090      	sub	sp, #64	; 0x40
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
    int i;

    char c = buf[0];
 800551e:	2333      	movs	r3, #51	; 0x33
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	7812      	ldrb	r2, [r2, #0]
 8005526:	701a      	strb	r2, [r3, #0]

    int argc;
    char *argv[ARGC_MAX];
    char *p;

    for (i = 0; i < h_shell->shell_func_list_size; i++)
 8005528:	2300      	movs	r3, #0
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800552c:	e043      	b.n	80055b6 <shell_exec+0xa2>
    {
        if (h_shell->shell_func_list[i].c == c)
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005532:	0013      	movs	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	189b      	adds	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	18cb      	adds	r3, r1, r3
 800553c:	3304      	adds	r3, #4
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2233      	movs	r2, #51	; 0x33
 8005542:	18ba      	adds	r2, r7, r2
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d132      	bne.n	80055b0 <shell_exec+0x9c>
        {
            argc = 1;
 800554a:	2301      	movs	r3, #1
 800554c:	63bb      	str	r3, [r7, #56]	; 0x38
            argv[0] = buf;
 800554e:	230c      	movs	r3, #12
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	601a      	str	r2, [r3, #0]

            for (p = buf; *p != '\0' && argc < ARGC_MAX; p++)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	637b      	str	r3, [r7, #52]	; 0x34
 800555a:	e012      	b.n	8005582 <shell_exec+0x6e>
            {
                if (*p == ' ')
 800555c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b20      	cmp	r3, #32
 8005562:	d10b      	bne.n	800557c <shell_exec+0x68>
                {
                    *p = '\0';
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
                    argv[argc++] = p + 1;
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005572:	1c51      	adds	r1, r2, #1
 8005574:	220c      	movs	r2, #12
 8005576:	18ba      	adds	r2, r7, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	5099      	str	r1, [r3, r2]
            for (p = buf; *p != '\0' && argc < ARGC_MAX; p++)
 800557c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557e:	3301      	adds	r3, #1
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <shell_exec+0x7c>
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	2b07      	cmp	r3, #7
 800558e:	dde5      	ble.n	800555c <shell_exec+0x48>
                }
            }

            return h_shell->shell_func_list[i].pfunc(h_shell, argc, argv);
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005594:	0013      	movs	r3, r2
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	189b      	adds	r3, r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	18cb      	adds	r3, r1, r3
 800559e:	3308      	adds	r3, #8
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	220c      	movs	r2, #12
 80055a4:	18ba      	adds	r2, r7, r2
 80055a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	4798      	blx	r3
 80055ac:	0003      	movs	r3, r0
 80055ae:	e023      	b.n	80055f8 <shell_exec+0xe4>
    for (i = 0; i < h_shell->shell_func_list_size; i++)
 80055b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b2:	3301      	adds	r3, #1
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055bc:	429a      	cmp	r2, r3
 80055be:	dbb6      	blt.n	800552e <shell_exec+0x1a>
        }
    }

    int size;
    size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	22c1      	movs	r2, #193	; 0xc1
 80055c4:	0092      	lsls	r2, r2, #2
 80055c6:	1898      	adds	r0, r3, r2
 80055c8:	2333      	movs	r3, #51	; 0x33
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	4a0c      	ldr	r2, [pc, #48]	; (8005600 <shell_exec+0xec>)
 80055d0:	2128      	movs	r1, #40	; 0x28
 80055d2:	f008 fc65 	bl	800dea0 <sniprintf>
 80055d6:	0003      	movs	r3, r0
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    h_shell->drv.transmit(h_shell->print_buffer, size);
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	23d5      	movs	r3, #213	; 0xd5
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	58d2      	ldr	r2, [r2, r3]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	21c1      	movs	r1, #193	; 0xc1
 80055e6:	0089      	lsls	r1, r1, #2
 80055e8:	468c      	mov	ip, r1
 80055ea:	4463      	add	r3, ip
 80055ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ee:	b289      	uxth	r1, r1
 80055f0:	0018      	movs	r0, r3
 80055f2:	4790      	blx	r2
    return -1;
 80055f4:	2301      	movs	r3, #1
 80055f6:	425b      	negs	r3, r3
}
 80055f8:	0018      	movs	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b010      	add	sp, #64	; 0x40
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	08010e80 	.word	0x08010e80

08005604 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "[INPUT]>>>>>> ";

void shell_run(h_shell_t *h_shell)
{
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
    int reading = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
    int pos = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]

    while (1)
    {
        h_shell->drv.transmit(prompt, sizeof(prompt));
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	23d5      	movs	r3, #213	; 0xd5
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	58d3      	ldr	r3, [r2, r3]
 800561c:	4a39      	ldr	r2, [pc, #228]	; (8005704 <shell_run+0x100>)
 800561e:	210f      	movs	r1, #15
 8005620:	0010      	movs	r0, r2
 8005622:	4798      	blx	r3
        reading = 1;
 8005624:	2301      	movs	r3, #1
 8005626:	617b      	str	r3, [r7, #20]

        while (reading)
 8005628:	e05f      	b.n	80056ea <shell_run+0xe6>
        {
            char c;
            h_shell->drv.receive(&c, 1);
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	23d6      	movs	r3, #214	; 0xd6
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	58d3      	ldr	r3, [r2, r3]
 8005632:	240b      	movs	r4, #11
 8005634:	193a      	adds	r2, r7, r4
 8005636:	2101      	movs	r1, #1
 8005638:	0010      	movs	r0, r2
 800563a:	4798      	blx	r3
            int size;

            switch (c)
 800563c:	193b      	adds	r3, r7, r4
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d029      	beq.n	8005698 <shell_run+0x94>
 8005644:	2b0d      	cmp	r3, #13
 8005646:	d136      	bne.n	80056b6 <shell_run+0xb2>
            {
            // process RETURN key
            case '\r':
                // case '\n':
                size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	22c1      	movs	r2, #193	; 0xc1
 800564c:	0092      	lsls	r2, r2, #2
 800564e:	4694      	mov	ip, r2
 8005650:	4463      	add	r3, ip
 8005652:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <shell_run+0x104>)
 8005654:	2128      	movs	r1, #40	; 0x28
 8005656:	0018      	movs	r0, r3
 8005658:	f008 fc22 	bl	800dea0 <sniprintf>
 800565c:	0003      	movs	r3, r0
 800565e:	60fb      	str	r3, [r7, #12]
                h_shell->drv.transmit(h_shell->print_buffer, size);
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	23d5      	movs	r3, #213	; 0xd5
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	58d2      	ldr	r2, [r2, r3]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	21c1      	movs	r1, #193	; 0xc1
 800566c:	0089      	lsls	r1, r1, #2
 800566e:	468c      	mov	ip, r1
 8005670:	4463      	add	r3, ip
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	b289      	uxth	r1, r1
 8005676:	0018      	movs	r0, r3
 8005678:	4790      	blx	r2
                h_shell->cmd_buffer[pos++] = 0; // add \0 char at end of string
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	613a      	str	r2, [r7, #16]
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	22cb      	movs	r2, #203	; 0xcb
 8005684:	0092      	lsls	r2, r2, #2
 8005686:	18cb      	adds	r3, r1, r3
 8005688:	189b      	adds	r3, r3, r2
 800568a:	2200      	movs	r2, #0
 800568c:	701a      	strb	r2, [r3, #0]
                reading = 0;                    // exit read loop
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]
                pos = 0;                        // reset buffer
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
                break;
 8005696:	e028      	b.n	80056ea <shell_run+0xe6>
                // backspace
            case '\b':
                if (pos > 0)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	dd24      	ble.n	80056e8 <shell_run+0xe4>
                {          // is there a char to delete?
                    pos--; // remove it in buffer
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	613b      	str	r3, [r7, #16]

                    h_shell->drv.transmit(backspace, 3); // delete the char on the terminal
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	23d5      	movs	r3, #213	; 0xd5
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	58d3      	ldr	r3, [r2, r3]
 80056ac:	4a17      	ldr	r2, [pc, #92]	; (800570c <shell_run+0x108>)
 80056ae:	2103      	movs	r1, #3
 80056b0:	0010      	movs	r0, r2
 80056b2:	4798      	blx	r3
                }
                break;
 80056b4:	e018      	b.n	80056e8 <shell_run+0xe4>
                // other characters
            default:
                // only store characters if buffer has space
                if (pos < BUFFER_SIZE)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b27      	cmp	r3, #39	; 0x27
 80056ba:	dc16      	bgt.n	80056ea <shell_run+0xe6>
                {
                    h_shell->drv.transmit(&c, 1);
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	23d5      	movs	r3, #213	; 0xd5
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	58d3      	ldr	r3, [r2, r3]
 80056c4:	240b      	movs	r4, #11
 80056c6:	193a      	adds	r2, r7, r4
 80056c8:	2101      	movs	r1, #1
 80056ca:	0010      	movs	r0, r2
 80056cc:	4798      	blx	r3
                    h_shell->cmd_buffer[pos++] = c; // store
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	613a      	str	r2, [r7, #16]
 80056d4:	193a      	adds	r2, r7, r4
 80056d6:	7810      	ldrb	r0, [r2, #0]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	22cb      	movs	r2, #203	; 0xcb
 80056dc:	0092      	lsls	r2, r2, #2
 80056de:	18cb      	adds	r3, r1, r3
 80056e0:	189b      	adds	r3, r3, r2
 80056e2:	1c02      	adds	r2, r0, #0
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e000      	b.n	80056ea <shell_run+0xe6>
                break;
 80056e8:	46c0      	nop			; (mov r8, r8)
        while (reading)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d19c      	bne.n	800562a <shell_run+0x26>
                }
            }
        }
        shell_exec(h_shell, h_shell->cmd_buffer);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	22cb      	movs	r2, #203	; 0xcb
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	189a      	adds	r2, r3, r2
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	0011      	movs	r1, r2
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7ff ff09 	bl	8005514 <shell_exec>
        h_shell->drv.transmit(prompt, sizeof(prompt));
 8005702:	e787      	b.n	8005614 <shell_run+0x10>
 8005704:	2000000c 	.word	0x2000000c
 8005708:	08010e98 	.word	0x08010e98
 800570c:	20000008 	.word	0x20000008

08005710 <add>:
// #include "sensorSpam.h"

h_shell_t h_shell;
// add two parameters from the shell
int32_t add(h_shell_t *h_shell, int argc, char **argv)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
    int a, b;
    if (argc != 3)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b03      	cmp	r3, #3
 8005720:	d006      	beq.n	8005730 <add+0x20>
    {
        printf("[INFO]: Usage: add a b\r\n");
 8005722:	4b12      	ldr	r3, [pc, #72]	; (800576c <add+0x5c>)
 8005724:	0018      	movs	r0, r3
 8005726:	f008 fbb1 	bl	800de8c <puts>
        return -1;
 800572a:	2301      	movs	r3, #1
 800572c:	425b      	negs	r3, r3
 800572e:	e018      	b.n	8005762 <add+0x52>
    }
    a = atoi(argv[1]);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	0018      	movs	r0, r3
 8005738:	f006 fea9 	bl	800c48e <atoi>
 800573c:	0003      	movs	r3, r0
 800573e:	617b      	str	r3, [r7, #20]
    b = atoi(argv[2]);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3308      	adds	r3, #8
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	0018      	movs	r0, r3
 8005748:	f006 fea1 	bl	800c48e <atoi>
 800574c:	0003      	movs	r3, r0
 800574e:	613b      	str	r3, [r7, #16]
    printf("%d + %d = %d\r\n", a, b, a + b);
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	18d3      	adds	r3, r2, r3
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	6979      	ldr	r1, [r7, #20]
 800575a:	4805      	ldr	r0, [pc, #20]	; (8005770 <add+0x60>)
 800575c:	f008 fb30 	bl	800ddc0 <iprintf>
    return 0;
 8005760:	2300      	movs	r3, #0
}
 8005762:	0018      	movs	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	b006      	add	sp, #24
 8005768:	bd80      	pop	{r7, pc}
 800576a:	46c0      	nop			; (mov r8, r8)
 800576c:	08010e9c 	.word	0x08010e9c
 8005770:	08010eb4 	.word	0x08010eb4

08005774 <motorCommand>:

int32_t motorCommand(h_shell_t *h_shell, int argc, char **argv)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
    // founction to control the motor
    if (!strcmp(argv[0], "start"))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a28      	ldr	r2, [pc, #160]	; (8005828 <motorCommand+0xb4>)
 8005786:	0011      	movs	r1, r2
 8005788:	0018      	movs	r0, r3
 800578a:	f7fa fcbd 	bl	8000108 <strcmp>
 800578e:	1e03      	subs	r3, r0, #0
 8005790:	d106      	bne.n	80057a0 <motorCommand+0x2c>
    {
        startMotor();
 8005792:	f7ff f90d 	bl	80049b0 <startMotor>
        printf("[INFO]: Start the motor\r\n");
 8005796:	4b25      	ldr	r3, [pc, #148]	; (800582c <motorCommand+0xb8>)
 8005798:	0018      	movs	r0, r3
 800579a:	f008 fb77 	bl	800de8c <puts>
 800579e:	e03e      	b.n	800581e <motorCommand+0xaa>
    }
    // detect the stop command
    else if (!strcmp(argv[0], "stop"))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a22      	ldr	r2, [pc, #136]	; (8005830 <motorCommand+0xbc>)
 80057a6:	0011      	movs	r1, r2
 80057a8:	0018      	movs	r0, r3
 80057aa:	f7fa fcad 	bl	8000108 <strcmp>
 80057ae:	1e03      	subs	r3, r0, #0
 80057b0:	d106      	bne.n	80057c0 <motorCommand+0x4c>
    {
        stopMotor();
 80057b2:	f7ff f8d9 	bl	8004968 <stopMotor>
        printf("[INFO]: Stop the motor\r\n");
 80057b6:	4b1f      	ldr	r3, [pc, #124]	; (8005834 <motorCommand+0xc0>)
 80057b8:	0018      	movs	r0, r3
 80057ba:	f008 fb67 	bl	800de8c <puts>
 80057be:	e02e      	b.n	800581e <motorCommand+0xaa>
    }
    // detect the speed
    else if (!strcmp(argv[1], "speed"))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <motorCommand+0xc4>)
 80057c8:	0011      	movs	r1, r2
 80057ca:	0018      	movs	r0, r3
 80057cc:	f7fa fc9c 	bl	8000108 <strcmp>
 80057d0:	1e03      	subs	r3, r0, #0
 80057d2:	d110      	bne.n	80057f6 <motorCommand+0x82>
    {
        if (argc != 3)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d006      	beq.n	80057e8 <motorCommand+0x74>
        {
            printf("[INFO]: Usage:m speed <speed>\r\n");
 80057da:	4b18      	ldr	r3, [pc, #96]	; (800583c <motorCommand+0xc8>)
 80057dc:	0018      	movs	r0, r3
 80057de:	f008 fb55 	bl	800de8c <puts>
            return -1;
 80057e2:	2301      	movs	r3, #1
 80057e4:	425b      	negs	r3, r3
 80057e6:	e01a      	b.n	800581e <motorCommand+0xaa>
        }
        setSpeed(argc, argv);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	0011      	movs	r1, r2
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7ff f8fe 	bl	80049f0 <setSpeed>
 80057f4:	e013      	b.n	800581e <motorCommand+0xaa>
    }
    // debug pid kp ki kd
    else if (!strcmp(argv[0], "debug"))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a11      	ldr	r2, [pc, #68]	; (8005840 <motorCommand+0xcc>)
 80057fc:	0011      	movs	r1, r2
 80057fe:	0018      	movs	r0, r3
 8005800:	f7fa fc82 	bl	8000108 <strcmp>
 8005804:	1e03      	subs	r3, r0, #0
 8005806:	d106      	bne.n	8005816 <motorCommand+0xa2>
    {
        setPIDparam(argc, argv);
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	0011      	movs	r1, r2
 800580e:	0018      	movs	r0, r3
 8005810:	f7fe ffb6 	bl	8004780 <setPIDparam>
 8005814:	e003      	b.n	800581e <motorCommand+0xaa>
    }
    else
    {
        printf("[ERROR]: Command not found\r\n");
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <motorCommand+0xd0>)
 8005818:	0018      	movs	r0, r3
 800581a:	f008 fb37 	bl	800de8c <puts>
    }
}
 800581e:	0018      	movs	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	b004      	add	sp, #16
 8005824:	bd80      	pop	{r7, pc}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	08010ec4 	.word	0x08010ec4
 800582c:	08010ecc 	.word	0x08010ecc
 8005830:	08010ee8 	.word	0x08010ee8
 8005834:	08010ef0 	.word	0x08010ef0
 8005838:	08010f08 	.word	0x08010f08
 800583c:	08010f10 	.word	0x08010f10
 8005840:	08010f30 	.word	0x08010f30
 8005844:	08010f38 	.word	0x08010f38

08005848 <registerShellCommands>:

void registerShellCommands(h_shell_t *h_shell)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]

    shell_add(h_shell, 'l', led, "Control LED blinking");
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <registerShellCommands+0x34>)
 8005852:	4a0b      	ldr	r2, [pc, #44]	; (8005880 <registerShellCommands+0x38>)
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	216c      	movs	r1, #108	; 0x6c
 8005858:	f7ff fe1e 	bl	8005498 <shell_add>
    // shell_add(h_shell, 's', spam, "Send spam message on serial");
    shell_add(h_shell, 'a', add, "Add two numbers");
 800585c:	4b09      	ldr	r3, [pc, #36]	; (8005884 <registerShellCommands+0x3c>)
 800585e:	4a0a      	ldr	r2, [pc, #40]	; (8005888 <registerShellCommands+0x40>)
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	2161      	movs	r1, #97	; 0x61
 8005864:	f7ff fe18 	bl	8005498 <shell_add>
    shell_add(h_shell, 'm', motorCommand, "Control the motor");
 8005868:	4b08      	ldr	r3, [pc, #32]	; (800588c <registerShellCommands+0x44>)
 800586a:	4a09      	ldr	r2, [pc, #36]	; (8005890 <registerShellCommands+0x48>)
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	216d      	movs	r1, #109	; 0x6d
 8005870:	f7ff fe12 	bl	8005498 <shell_add>
}
 8005874:	46c0      	nop			; (mov r8, r8)
 8005876:	46bd      	mov	sp, r7
 8005878:	b002      	add	sp, #8
 800587a:	bd80      	pop	{r7, pc}
 800587c:	08010f54 	.word	0x08010f54
 8005880:	080045d9 	.word	0x080045d9
 8005884:	08010f6c 	.word	0x08010f6c
 8005888:	08005711 	.word	0x08005711
 800588c:	08010f7c 	.word	0x08010f7c
 8005890:	08005775 	.word	0x08005775

08005894 <task_shell>:

void task_shell(void *argument)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
    shell_drv_t drv_uart;
    drv_uart.transmit = drv_uart_transmit;
 800589c:	2108      	movs	r1, #8
 800589e:	187b      	adds	r3, r7, r1
 80058a0:	4a0f      	ldr	r2, [pc, #60]	; (80058e0 <task_shell+0x4c>)
 80058a2:	601a      	str	r2, [r3, #0]
    drv_uart.receive = drv_uart_receive;
 80058a4:	187b      	adds	r3, r7, r1
 80058a6:	4a0f      	ldr	r2, [pc, #60]	; (80058e4 <task_shell+0x50>)
 80058a8:	605a      	str	r2, [r3, #4]
    h_shell.drv = drv_uart;
 80058aa:	4a0f      	ldr	r2, [pc, #60]	; (80058e8 <task_shell+0x54>)
 80058ac:	23d5      	movs	r3, #213	; 0xd5
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	1879      	adds	r1, r7, r1
 80058b2:	18d3      	adds	r3, r2, r3
 80058b4:	000a      	movs	r2, r1
 80058b6:	ca03      	ldmia	r2!, {r0, r1}
 80058b8:	c303      	stmia	r3!, {r0, r1}
    drv_uart_init();
 80058ba:	f7ff fce9 	bl	8005290 <drv_uart_init>
    shell_init(&h_shell);
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <task_shell+0x54>)
 80058c0:	0018      	movs	r0, r3
 80058c2:	f7ff fdb5 	bl	8005430 <shell_init>
    registerShellCommands(&h_shell);
 80058c6:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <task_shell+0x54>)
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff ffbd 	bl	8005848 <registerShellCommands>
    printf("[INFO]: Shell init success.\r\n");
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <task_shell+0x58>)
 80058d0:	0018      	movs	r0, r3
 80058d2:	f008 fadb 	bl	800de8c <puts>
    while (1)
    {
        shell_run(&h_shell);
 80058d6:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <task_shell+0x54>)
 80058d8:	0018      	movs	r0, r3
 80058da:	f7ff fe93 	bl	8005604 <shell_run>
 80058de:	e7fa      	b.n	80058d6 <task_shell+0x42>
 80058e0:	08005351 	.word	0x08005351
 80058e4:	08005311 	.word	0x08005311
 80058e8:	20000660 	.word	0x20000660
 80058ec:	08010f90 	.word	0x08010f90

080058f0 <createShellTask>:
    }
}

void createShellTask(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af02      	add	r7, sp, #8
    xTaskCreate(task_shell, "shell", 512, NULL, 1, NULL);
 80058f6:	2380      	movs	r3, #128	; 0x80
 80058f8:	009a      	lsls	r2, r3, #2
 80058fa:	4906      	ldr	r1, [pc, #24]	; (8005914 <createShellTask+0x24>)
 80058fc:	4806      	ldr	r0, [pc, #24]	; (8005918 <createShellTask+0x28>)
 80058fe:	2300      	movs	r3, #0
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	2301      	movs	r3, #1
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	2300      	movs	r3, #0
 8005908:	f005 fbfc 	bl	800b104 <xTaskCreate>
}
 800590c:	46c0      	nop			; (mov r8, r8)
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	08010fb0 	.word	0x08010fb0
 8005918:	08005895 	.word	0x08005895

0800591c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005922:	1dfb      	adds	r3, r7, #7
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <HAL_Init+0x3c>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <HAL_Init+0x3c>)
 800592e:	2180      	movs	r1, #128	; 0x80
 8005930:	0049      	lsls	r1, r1, #1
 8005932:	430a      	orrs	r2, r1
 8005934:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005936:	2003      	movs	r0, #3
 8005938:	f000 f810 	bl	800595c <HAL_InitTick>
 800593c:	1e03      	subs	r3, r0, #0
 800593e:	d003      	beq.n	8005948 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005940:	1dfb      	adds	r3, r7, #7
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	e001      	b.n	800594c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005948:	f7fd fe26 	bl	8003598 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800594c:	1dfb      	adds	r3, r7, #7
 800594e:	781b      	ldrb	r3, [r3, #0]
}
 8005950:	0018      	movs	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40022000 	.word	0x40022000

0800595c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800595c:	b590      	push	{r4, r7, lr}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005964:	230f      	movs	r3, #15
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800596c:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <HAL_InitTick+0x88>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d02b      	beq.n	80059cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005974:	4b1c      	ldr	r3, [pc, #112]	; (80059e8 <HAL_InitTick+0x8c>)
 8005976:	681c      	ldr	r4, [r3, #0]
 8005978:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <HAL_InitTick+0x88>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	0019      	movs	r1, r3
 800597e:	23fa      	movs	r3, #250	; 0xfa
 8005980:	0098      	lsls	r0, r3, #2
 8005982:	f7fa fbe7 	bl	8000154 <__udivsi3>
 8005986:	0003      	movs	r3, r0
 8005988:	0019      	movs	r1, r3
 800598a:	0020      	movs	r0, r4
 800598c:	f7fa fbe2 	bl	8000154 <__udivsi3>
 8005990:	0003      	movs	r3, r0
 8005992:	0018      	movs	r0, r3
 8005994:	f000 f919 	bl	8005bca <HAL_SYSTICK_Config>
 8005998:	1e03      	subs	r3, r0, #0
 800599a:	d112      	bne.n	80059c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d80a      	bhi.n	80059b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	2301      	movs	r3, #1
 80059a6:	425b      	negs	r3, r3
 80059a8:	2200      	movs	r2, #0
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 f8e8 	bl	8005b80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80059b0:	4b0e      	ldr	r3, [pc, #56]	; (80059ec <HAL_InitTick+0x90>)
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e00d      	b.n	80059d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80059b8:	230f      	movs	r3, #15
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	2201      	movs	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e008      	b.n	80059d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80059c2:	230f      	movs	r3, #15
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e003      	b.n	80059d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80059cc:	230f      	movs	r3, #15
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	2201      	movs	r2, #1
 80059d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80059d4:	230f      	movs	r3, #15
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	781b      	ldrb	r3, [r3, #0]
}
 80059da:	0018      	movs	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	b005      	add	sp, #20
 80059e0:	bd90      	pop	{r4, r7, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	20000020 	.word	0x20000020
 80059e8:	20000000 	.word	0x20000000
 80059ec:	2000001c 	.word	0x2000001c

080059f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <HAL_IncTick+0x1c>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	001a      	movs	r2, r3
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <HAL_IncTick+0x20>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	18d2      	adds	r2, r2, r3
 8005a00:	4b03      	ldr	r3, [pc, #12]	; (8005a10 <HAL_IncTick+0x20>)
 8005a02:	601a      	str	r2, [r3, #0]
}
 8005a04:	46c0      	nop			; (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	20000020 	.word	0x20000020
 8005a10:	200009bc 	.word	0x200009bc

08005a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  return uwTick;
 8005a18:	4b02      	ldr	r3, [pc, #8]	; (8005a24 <HAL_GetTick+0x10>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
}
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	200009bc 	.word	0x200009bc

08005a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	0002      	movs	r2, r0
 8005a30:	1dfb      	adds	r3, r7, #7
 8005a32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005a34:	1dfb      	adds	r3, r7, #7
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b7f      	cmp	r3, #127	; 0x7f
 8005a3a:	d809      	bhi.n	8005a50 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a3c:	1dfb      	adds	r3, r7, #7
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	001a      	movs	r2, r3
 8005a42:	231f      	movs	r3, #31
 8005a44:	401a      	ands	r2, r3
 8005a46:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <__NVIC_EnableIRQ+0x30>)
 8005a48:	2101      	movs	r1, #1
 8005a4a:	4091      	lsls	r1, r2
 8005a4c:	000a      	movs	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b002      	add	sp, #8
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	e000e100 	.word	0xe000e100

08005a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	0002      	movs	r2, r0
 8005a64:	6039      	str	r1, [r7, #0]
 8005a66:	1dfb      	adds	r3, r7, #7
 8005a68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005a6a:	1dfb      	adds	r3, r7, #7
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a70:	d828      	bhi.n	8005ac4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a72:	4a2f      	ldr	r2, [pc, #188]	; (8005b30 <__NVIC_SetPriority+0xd4>)
 8005a74:	1dfb      	adds	r3, r7, #7
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	b25b      	sxtb	r3, r3
 8005a7a:	089b      	lsrs	r3, r3, #2
 8005a7c:	33c0      	adds	r3, #192	; 0xc0
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	589b      	ldr	r3, [r3, r2]
 8005a82:	1dfa      	adds	r2, r7, #7
 8005a84:	7812      	ldrb	r2, [r2, #0]
 8005a86:	0011      	movs	r1, r2
 8005a88:	2203      	movs	r2, #3
 8005a8a:	400a      	ands	r2, r1
 8005a8c:	00d2      	lsls	r2, r2, #3
 8005a8e:	21ff      	movs	r1, #255	; 0xff
 8005a90:	4091      	lsls	r1, r2
 8005a92:	000a      	movs	r2, r1
 8005a94:	43d2      	mvns	r2, r2
 8005a96:	401a      	ands	r2, r3
 8005a98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	22ff      	movs	r2, #255	; 0xff
 8005aa0:	401a      	ands	r2, r3
 8005aa2:	1dfb      	adds	r3, r7, #7
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	4003      	ands	r3, r0
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ab0:	481f      	ldr	r0, [pc, #124]	; (8005b30 <__NVIC_SetPriority+0xd4>)
 8005ab2:	1dfb      	adds	r3, r7, #7
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	b25b      	sxtb	r3, r3
 8005ab8:	089b      	lsrs	r3, r3, #2
 8005aba:	430a      	orrs	r2, r1
 8005abc:	33c0      	adds	r3, #192	; 0xc0
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005ac2:	e031      	b.n	8005b28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	; (8005b34 <__NVIC_SetPriority+0xd8>)
 8005ac6:	1dfb      	adds	r3, r7, #7
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	0019      	movs	r1, r3
 8005acc:	230f      	movs	r3, #15
 8005ace:	400b      	ands	r3, r1
 8005ad0:	3b08      	subs	r3, #8
 8005ad2:	089b      	lsrs	r3, r3, #2
 8005ad4:	3306      	adds	r3, #6
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	18d3      	adds	r3, r2, r3
 8005ada:	3304      	adds	r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	1dfa      	adds	r2, r7, #7
 8005ae0:	7812      	ldrb	r2, [r2, #0]
 8005ae2:	0011      	movs	r1, r2
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	400a      	ands	r2, r1
 8005ae8:	00d2      	lsls	r2, r2, #3
 8005aea:	21ff      	movs	r1, #255	; 0xff
 8005aec:	4091      	lsls	r1, r2
 8005aee:	000a      	movs	r2, r1
 8005af0:	43d2      	mvns	r2, r2
 8005af2:	401a      	ands	r2, r3
 8005af4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	019b      	lsls	r3, r3, #6
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	401a      	ands	r2, r3
 8005afe:	1dfb      	adds	r3, r7, #7
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	0018      	movs	r0, r3
 8005b04:	2303      	movs	r3, #3
 8005b06:	4003      	ands	r3, r0
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b0c:	4809      	ldr	r0, [pc, #36]	; (8005b34 <__NVIC_SetPriority+0xd8>)
 8005b0e:	1dfb      	adds	r3, r7, #7
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	001c      	movs	r4, r3
 8005b14:	230f      	movs	r3, #15
 8005b16:	4023      	ands	r3, r4
 8005b18:	3b08      	subs	r3, #8
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	3306      	adds	r3, #6
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	18c3      	adds	r3, r0, r3
 8005b24:	3304      	adds	r3, #4
 8005b26:	601a      	str	r2, [r3, #0]
}
 8005b28:	46c0      	nop			; (mov r8, r8)
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b003      	add	sp, #12
 8005b2e:	bd90      	pop	{r4, r7, pc}
 8005b30:	e000e100 	.word	0xe000e100
 8005b34:	e000ed00 	.word	0xe000ed00

08005b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	1e5a      	subs	r2, r3, #1
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	045b      	lsls	r3, r3, #17
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d301      	bcc.n	8005b50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e010      	b.n	8005b72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b50:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <SysTick_Config+0x44>)
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	3a01      	subs	r2, #1
 8005b56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b58:	2301      	movs	r3, #1
 8005b5a:	425b      	negs	r3, r3
 8005b5c:	2103      	movs	r1, #3
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7ff ff7c 	bl	8005a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <SysTick_Config+0x44>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b6a:	4b04      	ldr	r3, [pc, #16]	; (8005b7c <SysTick_Config+0x44>)
 8005b6c:	2207      	movs	r2, #7
 8005b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	0018      	movs	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b002      	add	sp, #8
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	e000e010 	.word	0xe000e010

08005b80 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	210f      	movs	r1, #15
 8005b8c:	187b      	adds	r3, r7, r1
 8005b8e:	1c02      	adds	r2, r0, #0
 8005b90:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	187b      	adds	r3, r7, r1
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	b25b      	sxtb	r3, r3
 8005b9a:	0011      	movs	r1, r2
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f7ff ff5d 	bl	8005a5c <__NVIC_SetPriority>
}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	b004      	add	sp, #16
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	0002      	movs	r2, r0
 8005bb2:	1dfb      	adds	r3, r7, #7
 8005bb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bb6:	1dfb      	adds	r3, r7, #7
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f7ff ff33 	bl	8005a28 <__NVIC_EnableIRQ>
}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b002      	add	sp, #8
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7ff ffaf 	bl	8005b38 <SysTick_Config>
 8005bda:	0003      	movs	r3, r0
}
 8005bdc:	0018      	movs	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b002      	add	sp, #8
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e077      	b.n	8005ce6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a3d      	ldr	r2, [pc, #244]	; (8005cf0 <HAL_DMA_Init+0x10c>)
 8005bfc:	4694      	mov	ip, r2
 8005bfe:	4463      	add	r3, ip
 8005c00:	2114      	movs	r1, #20
 8005c02:	0018      	movs	r0, r3
 8005c04:	f7fa faa6 	bl	8000154 <__udivsi3>
 8005c08:	0003      	movs	r3, r0
 8005c0a:	009a      	lsls	r2, r3, #2
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2225      	movs	r2, #37	; 0x25
 8005c14:	2102      	movs	r1, #2
 8005c16:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4934      	ldr	r1, [pc, #208]	; (8005cf4 <HAL_DMA_Init+0x110>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6819      	ldr	r1, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	0018      	movs	r0, r3
 8005c62:	f000 f9c7 	bl	8005ff4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	2380      	movs	r3, #128	; 0x80
 8005c6c:	01db      	lsls	r3, r3, #7
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d102      	bne.n	8005c78 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c80:	213f      	movs	r1, #63	; 0x3f
 8005c82:	400a      	ands	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c8e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d011      	beq.n	8005cbc <HAL_DMA_Init+0xd8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d80d      	bhi.n	8005cbc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f000 f9d2 	bl	800604c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	e008      	b.n	8005cce <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2225      	movs	r2, #37	; 0x25
 8005cd8:	2101      	movs	r1, #1
 8005cda:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2224      	movs	r2, #36	; 0x24
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b002      	add	sp, #8
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	bffdfff8 	.word	0xbffdfff8
 8005cf4:	ffff800f 	.word	0xffff800f

08005cf8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e050      	b.n	8005dac <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2225      	movs	r2, #37	; 0x25
 8005d0e:	5c9b      	ldrb	r3, [r3, r2]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d008      	beq.n	8005d28 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2204      	movs	r2, #4
 8005d1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2224      	movs	r2, #36	; 0x24
 8005d20:	2100      	movs	r1, #0
 8005d22:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e041      	b.n	8005dac <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	210e      	movs	r1, #14
 8005d34:	438a      	bics	r2, r1
 8005d36:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	491c      	ldr	r1, [pc, #112]	; (8005db4 <HAL_DMA_Abort+0xbc>)
 8005d44:	400a      	ands	r2, r1
 8005d46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2101      	movs	r1, #1
 8005d54:	438a      	bics	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8005d58:	4b17      	ldr	r3, [pc, #92]	; (8005db8 <HAL_DMA_Abort+0xc0>)
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	221c      	movs	r2, #28
 8005d62:	4013      	ands	r3, r2
 8005d64:	2201      	movs	r2, #1
 8005d66:	409a      	lsls	r2, r3
 8005d68:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <HAL_DMA_Abort+0xc0>)
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00c      	beq.n	8005d9a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8a:	490a      	ldr	r1, [pc, #40]	; (8005db4 <HAL_DMA_Abort+0xbc>)
 8005d8c:	400a      	ands	r2, r1
 8005d8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2225      	movs	r2, #37	; 0x25
 8005d9e:	2101      	movs	r1, #1
 8005da0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2224      	movs	r2, #36	; 0x24
 8005da6:	2100      	movs	r1, #0
 8005da8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b002      	add	sp, #8
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	fffffeff 	.word	0xfffffeff
 8005db8:	40020000 	.word	0x40020000

08005dbc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc4:	210f      	movs	r1, #15
 8005dc6:	187b      	adds	r3, r7, r1
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2225      	movs	r2, #37	; 0x25
 8005dd0:	5c9b      	ldrb	r3, [r3, r2]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d006      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005dde:	187b      	adds	r3, r7, r1
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e049      	b.n	8005e7a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	210e      	movs	r1, #14
 8005df2:	438a      	bics	r2, r1
 8005df4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2101      	movs	r1, #1
 8005e02:	438a      	bics	r2, r1
 8005e04:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e10:	491d      	ldr	r1, [pc, #116]	; (8005e88 <HAL_DMA_Abort_IT+0xcc>)
 8005e12:	400a      	ands	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005e16:	4b1d      	ldr	r3, [pc, #116]	; (8005e8c <HAL_DMA_Abort_IT+0xd0>)
 8005e18:	6859      	ldr	r1, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	221c      	movs	r2, #28
 8005e20:	4013      	ands	r3, r2
 8005e22:	2201      	movs	r2, #1
 8005e24:	409a      	lsls	r2, r3
 8005e26:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <HAL_DMA_Abort_IT+0xd0>)
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e34:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00c      	beq.n	8005e58 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	490f      	ldr	r1, [pc, #60]	; (8005e88 <HAL_DMA_Abort_IT+0xcc>)
 8005e4a:	400a      	ands	r2, r1
 8005e4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e56:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2225      	movs	r2, #37	; 0x25
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2224      	movs	r2, #36	; 0x24
 8005e64:	2100      	movs	r1, #0
 8005e66:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	0010      	movs	r0, r2
 8005e78:	4798      	blx	r3
    }
  }
  return status;
 8005e7a:	230f      	movs	r3, #15
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	781b      	ldrb	r3, [r3, #0]
}
 8005e80:	0018      	movs	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b004      	add	sp, #16
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	fffffeff 	.word	0xfffffeff
 8005e8c:	40020000 	.word	0x40020000

08005e90 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005e98:	4b55      	ldr	r3, [pc, #340]	; (8005ff0 <HAL_DMA_IRQHandler+0x160>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	221c      	movs	r2, #28
 8005eac:	4013      	ands	r3, r2
 8005eae:	2204      	movs	r2, #4
 8005eb0:	409a      	lsls	r2, r3
 8005eb2:	0013      	movs	r3, r2
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d027      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x7a>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d023      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d107      	bne.n	8005ede <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2104      	movs	r1, #4
 8005eda:	438a      	bics	r2, r1
 8005edc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005ede:	4b44      	ldr	r3, [pc, #272]	; (8005ff0 <HAL_DMA_IRQHandler+0x160>)
 8005ee0:	6859      	ldr	r1, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	221c      	movs	r2, #28
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2204      	movs	r2, #4
 8005eec:	409a      	lsls	r2, r3
 8005eee:	4b40      	ldr	r3, [pc, #256]	; (8005ff0 <HAL_DMA_IRQHandler+0x160>)
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d100      	bne.n	8005efe <HAL_DMA_IRQHandler+0x6e>
 8005efc:	e073      	b.n	8005fe6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	0010      	movs	r0, r2
 8005f06:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005f08:	e06d      	b.n	8005fe6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	221c      	movs	r2, #28
 8005f10:	4013      	ands	r3, r2
 8005f12:	2202      	movs	r2, #2
 8005f14:	409a      	lsls	r2, r3
 8005f16:	0013      	movs	r3, r2
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d02e      	beq.n	8005f7c <HAL_DMA_IRQHandler+0xec>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2202      	movs	r2, #2
 8005f22:	4013      	ands	r3, r2
 8005f24:	d02a      	beq.n	8005f7c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d10b      	bne.n	8005f4a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	210a      	movs	r1, #10
 8005f3e:	438a      	bics	r2, r1
 8005f40:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2225      	movs	r2, #37	; 0x25
 8005f46:	2101      	movs	r1, #1
 8005f48:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005f4a:	4b29      	ldr	r3, [pc, #164]	; (8005ff0 <HAL_DMA_IRQHandler+0x160>)
 8005f4c:	6859      	ldr	r1, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	221c      	movs	r2, #28
 8005f54:	4013      	ands	r3, r2
 8005f56:	2202      	movs	r2, #2
 8005f58:	409a      	lsls	r2, r3
 8005f5a:	4b25      	ldr	r3, [pc, #148]	; (8005ff0 <HAL_DMA_IRQHandler+0x160>)
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	; 0x24
 8005f64:	2100      	movs	r1, #0
 8005f66:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d03a      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	0010      	movs	r0, r2
 8005f78:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005f7a:	e034      	b.n	8005fe6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	221c      	movs	r2, #28
 8005f82:	4013      	ands	r3, r2
 8005f84:	2208      	movs	r2, #8
 8005f86:	409a      	lsls	r2, r3
 8005f88:	0013      	movs	r3, r2
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	d02b      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x158>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2208      	movs	r2, #8
 8005f94:	4013      	ands	r3, r2
 8005f96:	d027      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	210e      	movs	r1, #14
 8005fa4:	438a      	bics	r2, r1
 8005fa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <HAL_DMA_IRQHandler+0x160>)
 8005faa:	6859      	ldr	r1, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	221c      	movs	r2, #28
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <HAL_DMA_IRQHandler+0x160>)
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2225      	movs	r2, #37	; 0x25
 8005fc8:	2101      	movs	r1, #1
 8005fca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2224      	movs	r2, #36	; 0x24
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	0010      	movs	r0, r2
 8005fe4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	46c0      	nop			; (mov r8, r8)
}
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b004      	add	sp, #16
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40020000 	.word	0x40020000

08005ff4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	089b      	lsrs	r3, r3, #2
 8006002:	4a10      	ldr	r2, [pc, #64]	; (8006044 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006004:	4694      	mov	ip, r2
 8006006:	4463      	add	r3, ip
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	001a      	movs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	001a      	movs	r2, r3
 8006016:	23ff      	movs	r3, #255	; 0xff
 8006018:	4013      	ands	r3, r2
 800601a:	3b08      	subs	r3, #8
 800601c:	2114      	movs	r1, #20
 800601e:	0018      	movs	r0, r3
 8006020:	f7fa f898 	bl	8000154 <__udivsi3>
 8006024:	0003      	movs	r3, r0
 8006026:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a07      	ldr	r2, [pc, #28]	; (8006048 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800602c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	221f      	movs	r2, #31
 8006032:	4013      	ands	r3, r2
 8006034:	2201      	movs	r2, #1
 8006036:	409a      	lsls	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800603c:	46c0      	nop			; (mov r8, r8)
 800603e:	46bd      	mov	sp, r7
 8006040:	b004      	add	sp, #16
 8006042:	bd80      	pop	{r7, pc}
 8006044:	10008200 	.word	0x10008200
 8006048:	40020880 	.word	0x40020880

0800604c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	223f      	movs	r2, #63	; 0x3f
 800605a:	4013      	ands	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4a0a      	ldr	r2, [pc, #40]	; (800608c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006062:	4694      	mov	ip, r2
 8006064:	4463      	add	r3, ip
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	001a      	movs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a07      	ldr	r2, [pc, #28]	; (8006090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006072:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3b01      	subs	r3, #1
 8006078:	2203      	movs	r2, #3
 800607a:	4013      	ands	r3, r2
 800607c:	2201      	movs	r2, #1
 800607e:	409a      	lsls	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b004      	add	sp, #16
 800608a:	bd80      	pop	{r7, pc}
 800608c:	1000823f 	.word	0x1000823f
 8006090:	40020940 	.word	0x40020940

08006094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060a2:	e147      	b.n	8006334 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2101      	movs	r1, #1
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4091      	lsls	r1, r2
 80060ae:	000a      	movs	r2, r1
 80060b0:	4013      	ands	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d100      	bne.n	80060bc <HAL_GPIO_Init+0x28>
 80060ba:	e138      	b.n	800632e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2203      	movs	r2, #3
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d005      	beq.n	80060d4 <HAL_GPIO_Init+0x40>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2203      	movs	r2, #3
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d130      	bne.n	8006136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	2203      	movs	r2, #3
 80060e0:	409a      	lsls	r2, r3
 80060e2:	0013      	movs	r3, r2
 80060e4:	43da      	mvns	r2, r3
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	4013      	ands	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	409a      	lsls	r2, r3
 80060f6:	0013      	movs	r3, r2
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800610a:	2201      	movs	r2, #1
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	409a      	lsls	r2, r3
 8006110:	0013      	movs	r3, r2
 8006112:	43da      	mvns	r2, r3
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	4013      	ands	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	091b      	lsrs	r3, r3, #4
 8006120:	2201      	movs	r2, #1
 8006122:	401a      	ands	r2, r3
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	409a      	lsls	r2, r3
 8006128:	0013      	movs	r3, r2
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2203      	movs	r2, #3
 800613c:	4013      	ands	r3, r2
 800613e:	2b03      	cmp	r3, #3
 8006140:	d017      	beq.n	8006172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	2203      	movs	r2, #3
 800614e:	409a      	lsls	r2, r3
 8006150:	0013      	movs	r3, r2
 8006152:	43da      	mvns	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4013      	ands	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	409a      	lsls	r2, r3
 8006164:	0013      	movs	r3, r2
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2203      	movs	r2, #3
 8006178:	4013      	ands	r3, r2
 800617a:	2b02      	cmp	r3, #2
 800617c:	d123      	bne.n	80061c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	08da      	lsrs	r2, r3, #3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3208      	adds	r2, #8
 8006186:	0092      	lsls	r2, r2, #2
 8006188:	58d3      	ldr	r3, [r2, r3]
 800618a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2207      	movs	r2, #7
 8006190:	4013      	ands	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	220f      	movs	r2, #15
 8006196:	409a      	lsls	r2, r3
 8006198:	0013      	movs	r3, r2
 800619a:	43da      	mvns	r2, r3
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4013      	ands	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2107      	movs	r1, #7
 80061aa:	400b      	ands	r3, r1
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	409a      	lsls	r2, r3
 80061b0:	0013      	movs	r3, r2
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	08da      	lsrs	r2, r3, #3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3208      	adds	r2, #8
 80061c0:	0092      	lsls	r2, r2, #2
 80061c2:	6939      	ldr	r1, [r7, #16]
 80061c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	2203      	movs	r2, #3
 80061d2:	409a      	lsls	r2, r3
 80061d4:	0013      	movs	r3, r2
 80061d6:	43da      	mvns	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4013      	ands	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2203      	movs	r2, #3
 80061e4:	401a      	ands	r2, r3
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	409a      	lsls	r2, r3
 80061ec:	0013      	movs	r3, r2
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	23c0      	movs	r3, #192	; 0xc0
 8006200:	029b      	lsls	r3, r3, #10
 8006202:	4013      	ands	r3, r2
 8006204:	d100      	bne.n	8006208 <HAL_GPIO_Init+0x174>
 8006206:	e092      	b.n	800632e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006208:	4a50      	ldr	r2, [pc, #320]	; (800634c <HAL_GPIO_Init+0x2b8>)
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	089b      	lsrs	r3, r3, #2
 800620e:	3318      	adds	r3, #24
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	589b      	ldr	r3, [r3, r2]
 8006214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2203      	movs	r2, #3
 800621a:	4013      	ands	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	220f      	movs	r2, #15
 8006220:	409a      	lsls	r2, r3
 8006222:	0013      	movs	r3, r2
 8006224:	43da      	mvns	r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4013      	ands	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	23a0      	movs	r3, #160	; 0xa0
 8006230:	05db      	lsls	r3, r3, #23
 8006232:	429a      	cmp	r2, r3
 8006234:	d013      	beq.n	800625e <HAL_GPIO_Init+0x1ca>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a45      	ldr	r2, [pc, #276]	; (8006350 <HAL_GPIO_Init+0x2bc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00d      	beq.n	800625a <HAL_GPIO_Init+0x1c6>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a44      	ldr	r2, [pc, #272]	; (8006354 <HAL_GPIO_Init+0x2c0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d007      	beq.n	8006256 <HAL_GPIO_Init+0x1c2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a43      	ldr	r2, [pc, #268]	; (8006358 <HAL_GPIO_Init+0x2c4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d101      	bne.n	8006252 <HAL_GPIO_Init+0x1be>
 800624e:	2303      	movs	r3, #3
 8006250:	e006      	b.n	8006260 <HAL_GPIO_Init+0x1cc>
 8006252:	2305      	movs	r3, #5
 8006254:	e004      	b.n	8006260 <HAL_GPIO_Init+0x1cc>
 8006256:	2302      	movs	r3, #2
 8006258:	e002      	b.n	8006260 <HAL_GPIO_Init+0x1cc>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <HAL_GPIO_Init+0x1cc>
 800625e:	2300      	movs	r3, #0
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	2103      	movs	r1, #3
 8006264:	400a      	ands	r2, r1
 8006266:	00d2      	lsls	r2, r2, #3
 8006268:	4093      	lsls	r3, r2
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006270:	4936      	ldr	r1, [pc, #216]	; (800634c <HAL_GPIO_Init+0x2b8>)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	089b      	lsrs	r3, r3, #2
 8006276:	3318      	adds	r3, #24
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800627e:	4b33      	ldr	r3, [pc, #204]	; (800634c <HAL_GPIO_Init+0x2b8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	43da      	mvns	r2, r3
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4013      	ands	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	2380      	movs	r3, #128	; 0x80
 8006294:	035b      	lsls	r3, r3, #13
 8006296:	4013      	ands	r3, r2
 8006298:	d003      	beq.n	80062a2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062a2:	4b2a      	ldr	r3, [pc, #168]	; (800634c <HAL_GPIO_Init+0x2b8>)
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80062a8:	4b28      	ldr	r3, [pc, #160]	; (800634c <HAL_GPIO_Init+0x2b8>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	43da      	mvns	r2, r3
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	4013      	ands	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	2380      	movs	r3, #128	; 0x80
 80062be:	039b      	lsls	r3, r3, #14
 80062c0:	4013      	ands	r3, r2
 80062c2:	d003      	beq.n	80062cc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062cc:	4b1f      	ldr	r3, [pc, #124]	; (800634c <HAL_GPIO_Init+0x2b8>)
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80062d2:	4a1e      	ldr	r2, [pc, #120]	; (800634c <HAL_GPIO_Init+0x2b8>)
 80062d4:	2384      	movs	r3, #132	; 0x84
 80062d6:	58d3      	ldr	r3, [r2, r3]
 80062d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	43da      	mvns	r2, r3
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4013      	ands	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	029b      	lsls	r3, r3, #10
 80062ec:	4013      	ands	r3, r2
 80062ee:	d003      	beq.n	80062f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062f8:	4914      	ldr	r1, [pc, #80]	; (800634c <HAL_GPIO_Init+0x2b8>)
 80062fa:	2284      	movs	r2, #132	; 0x84
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006300:	4a12      	ldr	r2, [pc, #72]	; (800634c <HAL_GPIO_Init+0x2b8>)
 8006302:	2380      	movs	r3, #128	; 0x80
 8006304:	58d3      	ldr	r3, [r2, r3]
 8006306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	43da      	mvns	r2, r3
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4013      	ands	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	2380      	movs	r3, #128	; 0x80
 8006318:	025b      	lsls	r3, r3, #9
 800631a:	4013      	ands	r3, r2
 800631c:	d003      	beq.n	8006326 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006326:	4909      	ldr	r1, [pc, #36]	; (800634c <HAL_GPIO_Init+0x2b8>)
 8006328:	2280      	movs	r2, #128	; 0x80
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	3301      	adds	r3, #1
 8006332:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	40da      	lsrs	r2, r3
 800633c:	1e13      	subs	r3, r2, #0
 800633e:	d000      	beq.n	8006342 <HAL_GPIO_Init+0x2ae>
 8006340:	e6b0      	b.n	80060a4 <HAL_GPIO_Init+0x10>
  }
}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	46c0      	nop			; (mov r8, r8)
 8006346:	46bd      	mov	sp, r7
 8006348:	b006      	add	sp, #24
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40021800 	.word	0x40021800
 8006350:	50000400 	.word	0x50000400
 8006354:	50000800 	.word	0x50000800
 8006358:	50000c00 	.word	0x50000c00

0800635c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	0008      	movs	r0, r1
 8006366:	0011      	movs	r1, r2
 8006368:	1cbb      	adds	r3, r7, #2
 800636a:	1c02      	adds	r2, r0, #0
 800636c:	801a      	strh	r2, [r3, #0]
 800636e:	1c7b      	adds	r3, r7, #1
 8006370:	1c0a      	adds	r2, r1, #0
 8006372:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006374:	1c7b      	adds	r3, r7, #1
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800637c:	1cbb      	adds	r3, r7, #2
 800637e:	881a      	ldrh	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006384:	e003      	b.n	800638e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006386:	1cbb      	adds	r3, r7, #2
 8006388:	881a      	ldrh	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	46bd      	mov	sp, r7
 8006392:	b002      	add	sp, #8
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	000a      	movs	r2, r1
 80063a0:	1cbb      	adds	r3, r7, #2
 80063a2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063aa:	1cbb      	adds	r3, r7, #2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4013      	ands	r3, r2
 80063b2:	041a      	lsls	r2, r3, #16
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	43db      	mvns	r3, r3
 80063b8:	1cb9      	adds	r1, r7, #2
 80063ba:	8809      	ldrh	r1, [r1, #0]
 80063bc:	400b      	ands	r3, r1
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	619a      	str	r2, [r3, #24]
}
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b004      	add	sp, #16
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	0002      	movs	r2, r0
 80063d4:	1dbb      	adds	r3, r7, #6
 80063d6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	1dba      	adds	r2, r7, #6
 80063de:	8812      	ldrh	r2, [r2, #0]
 80063e0:	4013      	ands	r3, r2
 80063e2:	d008      	beq.n	80063f6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80063e4:	4b0d      	ldr	r3, [pc, #52]	; (800641c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80063e6:	1dba      	adds	r2, r7, #6
 80063e8:	8812      	ldrh	r2, [r2, #0]
 80063ea:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80063ec:	1dbb      	adds	r3, r7, #6
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f000 f815 	bl	8006420 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80063f6:	4b09      	ldr	r3, [pc, #36]	; (800641c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	1dba      	adds	r2, r7, #6
 80063fc:	8812      	ldrh	r2, [r2, #0]
 80063fe:	4013      	ands	r3, r2
 8006400:	d008      	beq.n	8006414 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006402:	4b06      	ldr	r3, [pc, #24]	; (800641c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006404:	1dba      	adds	r2, r7, #6
 8006406:	8812      	ldrh	r2, [r2, #0]
 8006408:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800640a:	1dbb      	adds	r3, r7, #6
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	0018      	movs	r0, r3
 8006410:	f000 f810 	bl	8006434 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006414:	46c0      	nop			; (mov r8, r8)
 8006416:	46bd      	mov	sp, r7
 8006418:	b002      	add	sp, #8
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40021800 	.word	0x40021800

08006420 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	0002      	movs	r2, r0
 8006428:	1dbb      	adds	r3, r7, #6
 800642a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800642c:	46c0      	nop			; (mov r8, r8)
 800642e:	46bd      	mov	sp, r7
 8006430:	b002      	add	sp, #8
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	0002      	movs	r2, r0
 800643c:	1dbb      	adds	r3, r7, #6
 800643e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8006440:	46c0      	nop			; (mov r8, r8)
 8006442:	46bd      	mov	sp, r7
 8006444:	b002      	add	sp, #8
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006450:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006456:	4013      	ands	r3, r2
 8006458:	0019      	movs	r1, r3
 800645a:	4b17      	ldr	r3, [pc, #92]	; (80064b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	430a      	orrs	r2, r1
 8006460:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	429a      	cmp	r2, r3
 800646a:	d11f      	bne.n	80064ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800646c:	4b14      	ldr	r3, [pc, #80]	; (80064c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	0013      	movs	r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	189b      	adds	r3, r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4912      	ldr	r1, [pc, #72]	; (80064c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800647a:	0018      	movs	r0, r3
 800647c:	f7f9 fe6a 	bl	8000154 <__udivsi3>
 8006480:	0003      	movs	r3, r0
 8006482:	3301      	adds	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006486:	e008      	b.n	800649a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3b01      	subs	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e001      	b.n	800649a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e009      	b.n	80064ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800649a:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	2380      	movs	r3, #128	; 0x80
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	401a      	ands	r2, r3
 80064a4:	2380      	movs	r3, #128	; 0x80
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d0ed      	beq.n	8006488 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	0018      	movs	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b004      	add	sp, #16
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	40007000 	.word	0x40007000
 80064bc:	fffff9ff 	.word	0xfffff9ff
 80064c0:	20000000 	.word	0x20000000
 80064c4:	000f4240 	.word	0x000f4240

080064c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80064cc:	4b03      	ldr	r3, [pc, #12]	; (80064dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	23e0      	movs	r3, #224	; 0xe0
 80064d2:	01db      	lsls	r3, r3, #7
 80064d4:	4013      	ands	r3, r2
}
 80064d6:	0018      	movs	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40021000 	.word	0x40021000

080064e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e2f3      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2201      	movs	r2, #1
 80064f8:	4013      	ands	r3, r2
 80064fa:	d100      	bne.n	80064fe <HAL_RCC_OscConfig+0x1e>
 80064fc:	e07c      	b.n	80065f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064fe:	4bc3      	ldr	r3, [pc, #780]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2238      	movs	r2, #56	; 0x38
 8006504:	4013      	ands	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006508:	4bc0      	ldr	r3, [pc, #768]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	2203      	movs	r2, #3
 800650e:	4013      	ands	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b10      	cmp	r3, #16
 8006516:	d102      	bne.n	800651e <HAL_RCC_OscConfig+0x3e>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2b03      	cmp	r3, #3
 800651c:	d002      	beq.n	8006524 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b08      	cmp	r3, #8
 8006522:	d10b      	bne.n	800653c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006524:	4bb9      	ldr	r3, [pc, #740]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	2380      	movs	r3, #128	; 0x80
 800652a:	029b      	lsls	r3, r3, #10
 800652c:	4013      	ands	r3, r2
 800652e:	d062      	beq.n	80065f6 <HAL_RCC_OscConfig+0x116>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d15e      	bne.n	80065f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e2ce      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	025b      	lsls	r3, r3, #9
 8006544:	429a      	cmp	r2, r3
 8006546:	d107      	bne.n	8006558 <HAL_RCC_OscConfig+0x78>
 8006548:	4bb0      	ldr	r3, [pc, #704]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	4baf      	ldr	r3, [pc, #700]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 800654e:	2180      	movs	r1, #128	; 0x80
 8006550:	0249      	lsls	r1, r1, #9
 8006552:	430a      	orrs	r2, r1
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e020      	b.n	800659a <HAL_RCC_OscConfig+0xba>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	23a0      	movs	r3, #160	; 0xa0
 800655e:	02db      	lsls	r3, r3, #11
 8006560:	429a      	cmp	r2, r3
 8006562:	d10e      	bne.n	8006582 <HAL_RCC_OscConfig+0xa2>
 8006564:	4ba9      	ldr	r3, [pc, #676]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4ba8      	ldr	r3, [pc, #672]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 800656a:	2180      	movs	r1, #128	; 0x80
 800656c:	02c9      	lsls	r1, r1, #11
 800656e:	430a      	orrs	r2, r1
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	4ba6      	ldr	r3, [pc, #664]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4ba5      	ldr	r3, [pc, #660]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006578:	2180      	movs	r1, #128	; 0x80
 800657a:	0249      	lsls	r1, r1, #9
 800657c:	430a      	orrs	r2, r1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e00b      	b.n	800659a <HAL_RCC_OscConfig+0xba>
 8006582:	4ba2      	ldr	r3, [pc, #648]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4ba1      	ldr	r3, [pc, #644]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006588:	49a1      	ldr	r1, [pc, #644]	; (8006810 <HAL_RCC_OscConfig+0x330>)
 800658a:	400a      	ands	r2, r1
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	4b9f      	ldr	r3, [pc, #636]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b9e      	ldr	r3, [pc, #632]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006594:	499f      	ldr	r1, [pc, #636]	; (8006814 <HAL_RCC_OscConfig+0x334>)
 8006596:	400a      	ands	r2, r1
 8006598:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d014      	beq.n	80065cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a2:	f7ff fa37 	bl	8005a14 <HAL_GetTick>
 80065a6:	0003      	movs	r3, r0
 80065a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065ac:	f7ff fa32 	bl	8005a14 <HAL_GetTick>
 80065b0:	0002      	movs	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b64      	cmp	r3, #100	; 0x64
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e28d      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065be:	4b93      	ldr	r3, [pc, #588]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	2380      	movs	r3, #128	; 0x80
 80065c4:	029b      	lsls	r3, r3, #10
 80065c6:	4013      	ands	r3, r2
 80065c8:	d0f0      	beq.n	80065ac <HAL_RCC_OscConfig+0xcc>
 80065ca:	e015      	b.n	80065f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065cc:	f7ff fa22 	bl	8005a14 <HAL_GetTick>
 80065d0:	0003      	movs	r3, r0
 80065d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065d6:	f7ff fa1d 	bl	8005a14 <HAL_GetTick>
 80065da:	0002      	movs	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b64      	cmp	r3, #100	; 0x64
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e278      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065e8:	4b88      	ldr	r3, [pc, #544]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	029b      	lsls	r3, r3, #10
 80065f0:	4013      	ands	r3, r2
 80065f2:	d1f0      	bne.n	80065d6 <HAL_RCC_OscConfig+0xf6>
 80065f4:	e000      	b.n	80065f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2202      	movs	r2, #2
 80065fe:	4013      	ands	r3, r2
 8006600:	d100      	bne.n	8006604 <HAL_RCC_OscConfig+0x124>
 8006602:	e099      	b.n	8006738 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006604:	4b81      	ldr	r3, [pc, #516]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2238      	movs	r2, #56	; 0x38
 800660a:	4013      	ands	r3, r2
 800660c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800660e:	4b7f      	ldr	r3, [pc, #508]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2203      	movs	r2, #3
 8006614:	4013      	ands	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b10      	cmp	r3, #16
 800661c:	d102      	bne.n	8006624 <HAL_RCC_OscConfig+0x144>
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d002      	beq.n	800662a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d135      	bne.n	8006696 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800662a:	4b78      	ldr	r3, [pc, #480]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	2380      	movs	r3, #128	; 0x80
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	4013      	ands	r3, r2
 8006634:	d005      	beq.n	8006642 <HAL_RCC_OscConfig+0x162>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e24b      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006642:	4b72      	ldr	r3, [pc, #456]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	4a74      	ldr	r2, [pc, #464]	; (8006818 <HAL_RCC_OscConfig+0x338>)
 8006648:	4013      	ands	r3, r2
 800664a:	0019      	movs	r1, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	021a      	lsls	r2, r3, #8
 8006652:	4b6e      	ldr	r3, [pc, #440]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d112      	bne.n	8006684 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800665e:	4b6b      	ldr	r3, [pc, #428]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a6e      	ldr	r2, [pc, #440]	; (800681c <HAL_RCC_OscConfig+0x33c>)
 8006664:	4013      	ands	r3, r2
 8006666:	0019      	movs	r1, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	4b67      	ldr	r3, [pc, #412]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 800666e:	430a      	orrs	r2, r1
 8006670:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006672:	4b66      	ldr	r3, [pc, #408]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	0adb      	lsrs	r3, r3, #11
 8006678:	2207      	movs	r2, #7
 800667a:	4013      	ands	r3, r2
 800667c:	4a68      	ldr	r2, [pc, #416]	; (8006820 <HAL_RCC_OscConfig+0x340>)
 800667e:	40da      	lsrs	r2, r3
 8006680:	4b68      	ldr	r3, [pc, #416]	; (8006824 <HAL_RCC_OscConfig+0x344>)
 8006682:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006684:	4b68      	ldr	r3, [pc, #416]	; (8006828 <HAL_RCC_OscConfig+0x348>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	0018      	movs	r0, r3
 800668a:	f7ff f967 	bl	800595c <HAL_InitTick>
 800668e:	1e03      	subs	r3, r0, #0
 8006690:	d051      	beq.n	8006736 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e221      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d030      	beq.n	8006700 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800669e:	4b5b      	ldr	r3, [pc, #364]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a5e      	ldr	r2, [pc, #376]	; (800681c <HAL_RCC_OscConfig+0x33c>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	0019      	movs	r1, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	4b57      	ldr	r3, [pc, #348]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80066ae:	430a      	orrs	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80066b2:	4b56      	ldr	r3, [pc, #344]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b55      	ldr	r3, [pc, #340]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80066b8:	2180      	movs	r1, #128	; 0x80
 80066ba:	0049      	lsls	r1, r1, #1
 80066bc:	430a      	orrs	r2, r1
 80066be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c0:	f7ff f9a8 	bl	8005a14 <HAL_GetTick>
 80066c4:	0003      	movs	r3, r0
 80066c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ca:	f7ff f9a3 	bl	8005a14 <HAL_GetTick>
 80066ce:	0002      	movs	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e1fe      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066dc:	4b4b      	ldr	r3, [pc, #300]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4013      	ands	r3, r2
 80066e6:	d0f0      	beq.n	80066ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e8:	4b48      	ldr	r3, [pc, #288]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4a4a      	ldr	r2, [pc, #296]	; (8006818 <HAL_RCC_OscConfig+0x338>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	0019      	movs	r1, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	021a      	lsls	r2, r3, #8
 80066f8:	4b44      	ldr	r3, [pc, #272]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	e01b      	b.n	8006738 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006700:	4b42      	ldr	r3, [pc, #264]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	4b41      	ldr	r3, [pc, #260]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006706:	4949      	ldr	r1, [pc, #292]	; (800682c <HAL_RCC_OscConfig+0x34c>)
 8006708:	400a      	ands	r2, r1
 800670a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670c:	f7ff f982 	bl	8005a14 <HAL_GetTick>
 8006710:	0003      	movs	r3, r0
 8006712:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006716:	f7ff f97d 	bl	8005a14 <HAL_GetTick>
 800671a:	0002      	movs	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e1d8      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006728:	4b38      	ldr	r3, [pc, #224]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	2380      	movs	r3, #128	; 0x80
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4013      	ands	r3, r2
 8006732:	d1f0      	bne.n	8006716 <HAL_RCC_OscConfig+0x236>
 8006734:	e000      	b.n	8006738 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006736:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2208      	movs	r2, #8
 800673e:	4013      	ands	r3, r2
 8006740:	d047      	beq.n	80067d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006742:	4b32      	ldr	r3, [pc, #200]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2238      	movs	r2, #56	; 0x38
 8006748:	4013      	ands	r3, r2
 800674a:	2b18      	cmp	r3, #24
 800674c:	d10a      	bne.n	8006764 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800674e:	4b2f      	ldr	r3, [pc, #188]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006752:	2202      	movs	r2, #2
 8006754:	4013      	ands	r3, r2
 8006756:	d03c      	beq.n	80067d2 <HAL_RCC_OscConfig+0x2f2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d138      	bne.n	80067d2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e1ba      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d019      	beq.n	80067a0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800676c:	4b27      	ldr	r3, [pc, #156]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 800676e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006770:	4b26      	ldr	r3, [pc, #152]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006772:	2101      	movs	r1, #1
 8006774:	430a      	orrs	r2, r1
 8006776:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7ff f94c 	bl	8005a14 <HAL_GetTick>
 800677c:	0003      	movs	r3, r0
 800677e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006782:	f7ff f947 	bl	8005a14 <HAL_GetTick>
 8006786:	0002      	movs	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e1a2      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006794:	4b1d      	ldr	r3, [pc, #116]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 8006796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006798:	2202      	movs	r2, #2
 800679a:	4013      	ands	r3, r2
 800679c:	d0f1      	beq.n	8006782 <HAL_RCC_OscConfig+0x2a2>
 800679e:	e018      	b.n	80067d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80067a0:	4b1a      	ldr	r3, [pc, #104]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80067a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067a4:	4b19      	ldr	r3, [pc, #100]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80067a6:	2101      	movs	r1, #1
 80067a8:	438a      	bics	r2, r1
 80067aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7ff f932 	bl	8005a14 <HAL_GetTick>
 80067b0:	0003      	movs	r3, r0
 80067b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b6:	f7ff f92d 	bl	8005a14 <HAL_GetTick>
 80067ba:	0002      	movs	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e188      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067c8:	4b10      	ldr	r3, [pc, #64]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80067ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067cc:	2202      	movs	r2, #2
 80067ce:	4013      	ands	r3, r2
 80067d0:	d1f1      	bne.n	80067b6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2204      	movs	r2, #4
 80067d8:	4013      	ands	r3, r2
 80067da:	d100      	bne.n	80067de <HAL_RCC_OscConfig+0x2fe>
 80067dc:	e0c6      	b.n	800696c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067de:	231f      	movs	r3, #31
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80067e6:	4b09      	ldr	r3, [pc, #36]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2238      	movs	r2, #56	; 0x38
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d11e      	bne.n	8006830 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80067f2:	4b06      	ldr	r3, [pc, #24]	; (800680c <HAL_RCC_OscConfig+0x32c>)
 80067f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f6:	2202      	movs	r2, #2
 80067f8:	4013      	ands	r3, r2
 80067fa:	d100      	bne.n	80067fe <HAL_RCC_OscConfig+0x31e>
 80067fc:	e0b6      	b.n	800696c <HAL_RCC_OscConfig+0x48c>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d000      	beq.n	8006808 <HAL_RCC_OscConfig+0x328>
 8006806:	e0b1      	b.n	800696c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e166      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
 800680c:	40021000 	.word	0x40021000
 8006810:	fffeffff 	.word	0xfffeffff
 8006814:	fffbffff 	.word	0xfffbffff
 8006818:	ffff80ff 	.word	0xffff80ff
 800681c:	ffffc7ff 	.word	0xffffc7ff
 8006820:	00f42400 	.word	0x00f42400
 8006824:	20000000 	.word	0x20000000
 8006828:	2000001c 	.word	0x2000001c
 800682c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006830:	4bac      	ldr	r3, [pc, #688]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006834:	2380      	movs	r3, #128	; 0x80
 8006836:	055b      	lsls	r3, r3, #21
 8006838:	4013      	ands	r3, r2
 800683a:	d101      	bne.n	8006840 <HAL_RCC_OscConfig+0x360>
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <HAL_RCC_OscConfig+0x362>
 8006840:	2300      	movs	r3, #0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d011      	beq.n	800686a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006846:	4ba7      	ldr	r3, [pc, #668]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800684a:	4ba6      	ldr	r3, [pc, #664]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 800684c:	2180      	movs	r1, #128	; 0x80
 800684e:	0549      	lsls	r1, r1, #21
 8006850:	430a      	orrs	r2, r1
 8006852:	63da      	str	r2, [r3, #60]	; 0x3c
 8006854:	4ba3      	ldr	r3, [pc, #652]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	055b      	lsls	r3, r3, #21
 800685c:	4013      	ands	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006862:	231f      	movs	r3, #31
 8006864:	18fb      	adds	r3, r7, r3
 8006866:	2201      	movs	r2, #1
 8006868:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800686a:	4b9f      	ldr	r3, [pc, #636]	; (8006ae8 <HAL_RCC_OscConfig+0x608>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	2380      	movs	r3, #128	; 0x80
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	4013      	ands	r3, r2
 8006874:	d11a      	bne.n	80068ac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006876:	4b9c      	ldr	r3, [pc, #624]	; (8006ae8 <HAL_RCC_OscConfig+0x608>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b9b      	ldr	r3, [pc, #620]	; (8006ae8 <HAL_RCC_OscConfig+0x608>)
 800687c:	2180      	movs	r1, #128	; 0x80
 800687e:	0049      	lsls	r1, r1, #1
 8006880:	430a      	orrs	r2, r1
 8006882:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006884:	f7ff f8c6 	bl	8005a14 <HAL_GetTick>
 8006888:	0003      	movs	r3, r0
 800688a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800688e:	f7ff f8c1 	bl	8005a14 <HAL_GetTick>
 8006892:	0002      	movs	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e11c      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068a0:	4b91      	ldr	r3, [pc, #580]	; (8006ae8 <HAL_RCC_OscConfig+0x608>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	4013      	ands	r3, r2
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d106      	bne.n	80068c2 <HAL_RCC_OscConfig+0x3e2>
 80068b4:	4b8b      	ldr	r3, [pc, #556]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80068b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068b8:	4b8a      	ldr	r3, [pc, #552]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80068ba:	2101      	movs	r1, #1
 80068bc:	430a      	orrs	r2, r1
 80068be:	65da      	str	r2, [r3, #92]	; 0x5c
 80068c0:	e01c      	b.n	80068fc <HAL_RCC_OscConfig+0x41c>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b05      	cmp	r3, #5
 80068c8:	d10c      	bne.n	80068e4 <HAL_RCC_OscConfig+0x404>
 80068ca:	4b86      	ldr	r3, [pc, #536]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80068cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068ce:	4b85      	ldr	r3, [pc, #532]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80068d0:	2104      	movs	r1, #4
 80068d2:	430a      	orrs	r2, r1
 80068d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80068d6:	4b83      	ldr	r3, [pc, #524]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80068d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068da:	4b82      	ldr	r3, [pc, #520]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80068dc:	2101      	movs	r1, #1
 80068de:	430a      	orrs	r2, r1
 80068e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80068e2:	e00b      	b.n	80068fc <HAL_RCC_OscConfig+0x41c>
 80068e4:	4b7f      	ldr	r3, [pc, #508]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80068e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068e8:	4b7e      	ldr	r3, [pc, #504]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80068ea:	2101      	movs	r1, #1
 80068ec:	438a      	bics	r2, r1
 80068ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80068f0:	4b7c      	ldr	r3, [pc, #496]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80068f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068f4:	4b7b      	ldr	r3, [pc, #492]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80068f6:	2104      	movs	r1, #4
 80068f8:	438a      	bics	r2, r1
 80068fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d014      	beq.n	800692e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006904:	f7ff f886 	bl	8005a14 <HAL_GetTick>
 8006908:	0003      	movs	r3, r0
 800690a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800690c:	e009      	b.n	8006922 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690e:	f7ff f881 	bl	8005a14 <HAL_GetTick>
 8006912:	0002      	movs	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	4a74      	ldr	r2, [pc, #464]	; (8006aec <HAL_RCC_OscConfig+0x60c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e0db      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006922:	4b70      	ldr	r3, [pc, #448]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	2202      	movs	r2, #2
 8006928:	4013      	ands	r3, r2
 800692a:	d0f0      	beq.n	800690e <HAL_RCC_OscConfig+0x42e>
 800692c:	e013      	b.n	8006956 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692e:	f7ff f871 	bl	8005a14 <HAL_GetTick>
 8006932:	0003      	movs	r3, r0
 8006934:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006936:	e009      	b.n	800694c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006938:	f7ff f86c 	bl	8005a14 <HAL_GetTick>
 800693c:	0002      	movs	r2, r0
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	4a6a      	ldr	r2, [pc, #424]	; (8006aec <HAL_RCC_OscConfig+0x60c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e0c6      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800694c:	4b65      	ldr	r3, [pc, #404]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 800694e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006950:	2202      	movs	r2, #2
 8006952:	4013      	ands	r3, r2
 8006954:	d1f0      	bne.n	8006938 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006956:	231f      	movs	r3, #31
 8006958:	18fb      	adds	r3, r7, r3
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d105      	bne.n	800696c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006960:	4b60      	ldr	r3, [pc, #384]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006964:	4b5f      	ldr	r3, [pc, #380]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006966:	4962      	ldr	r1, [pc, #392]	; (8006af0 <HAL_RCC_OscConfig+0x610>)
 8006968:	400a      	ands	r2, r1
 800696a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d100      	bne.n	8006976 <HAL_RCC_OscConfig+0x496>
 8006974:	e0b0      	b.n	8006ad8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006976:	4b5b      	ldr	r3, [pc, #364]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	2238      	movs	r2, #56	; 0x38
 800697c:	4013      	ands	r3, r2
 800697e:	2b10      	cmp	r3, #16
 8006980:	d100      	bne.n	8006984 <HAL_RCC_OscConfig+0x4a4>
 8006982:	e078      	b.n	8006a76 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d153      	bne.n	8006a34 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800698c:	4b55      	ldr	r3, [pc, #340]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	4b54      	ldr	r3, [pc, #336]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006992:	4958      	ldr	r1, [pc, #352]	; (8006af4 <HAL_RCC_OscConfig+0x614>)
 8006994:	400a      	ands	r2, r1
 8006996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7ff f83c 	bl	8005a14 <HAL_GetTick>
 800699c:	0003      	movs	r3, r0
 800699e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a2:	f7ff f837 	bl	8005a14 <HAL_GetTick>
 80069a6:	0002      	movs	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e092      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069b4:	4b4b      	ldr	r3, [pc, #300]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	2380      	movs	r3, #128	; 0x80
 80069ba:	049b      	lsls	r3, r3, #18
 80069bc:	4013      	ands	r3, r2
 80069be:	d1f0      	bne.n	80069a2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069c0:	4b48      	ldr	r3, [pc, #288]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4a4c      	ldr	r2, [pc, #304]	; (8006af8 <HAL_RCC_OscConfig+0x618>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	0019      	movs	r1, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1a      	ldr	r2, [r3, #32]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	021b      	lsls	r3, r3, #8
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e6:	431a      	orrs	r2, r3
 80069e8:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80069ea:	430a      	orrs	r2, r1
 80069ec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ee:	4b3d      	ldr	r3, [pc, #244]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4b3c      	ldr	r3, [pc, #240]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80069f4:	2180      	movs	r1, #128	; 0x80
 80069f6:	0449      	lsls	r1, r1, #17
 80069f8:	430a      	orrs	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80069fc:	4b39      	ldr	r3, [pc, #228]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	4b38      	ldr	r3, [pc, #224]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	0549      	lsls	r1, r1, #21
 8006a06:	430a      	orrs	r2, r1
 8006a08:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7ff f803 	bl	8005a14 <HAL_GetTick>
 8006a0e:	0003      	movs	r3, r0
 8006a10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a14:	f7fe fffe 	bl	8005a14 <HAL_GetTick>
 8006a18:	0002      	movs	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e059      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a26:	4b2f      	ldr	r3, [pc, #188]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	2380      	movs	r3, #128	; 0x80
 8006a2c:	049b      	lsls	r3, r3, #18
 8006a2e:	4013      	ands	r3, r2
 8006a30:	d0f0      	beq.n	8006a14 <HAL_RCC_OscConfig+0x534>
 8006a32:	e051      	b.n	8006ad8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a34:	4b2b      	ldr	r3, [pc, #172]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	4b2a      	ldr	r3, [pc, #168]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006a3a:	492e      	ldr	r1, [pc, #184]	; (8006af4 <HAL_RCC_OscConfig+0x614>)
 8006a3c:	400a      	ands	r2, r1
 8006a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a40:	f7fe ffe8 	bl	8005a14 <HAL_GetTick>
 8006a44:	0003      	movs	r3, r0
 8006a46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a4a:	f7fe ffe3 	bl	8005a14 <HAL_GetTick>
 8006a4e:	0002      	movs	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e03e      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a5c:	4b21      	ldr	r3, [pc, #132]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	049b      	lsls	r3, r3, #18
 8006a64:	4013      	ands	r3, r2
 8006a66:	d1f0      	bne.n	8006a4a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006a68:	4b1e      	ldr	r3, [pc, #120]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006a6e:	4923      	ldr	r1, [pc, #140]	; (8006afc <HAL_RCC_OscConfig+0x61c>)
 8006a70:	400a      	ands	r2, r1
 8006a72:	60da      	str	r2, [r3, #12]
 8006a74:	e030      	b.n	8006ad8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e02b      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006a82:	4b18      	ldr	r3, [pc, #96]	; (8006ae4 <HAL_RCC_OscConfig+0x604>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	401a      	ands	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d11e      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2270      	movs	r2, #112	; 0x70
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d117      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	23fe      	movs	r3, #254	; 0xfe
 8006aa8:	01db      	lsls	r3, r3, #7
 8006aaa:	401a      	ands	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d10e      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	23f8      	movs	r3, #248	; 0xf8
 8006aba:	039b      	lsls	r3, r3, #14
 8006abc:	401a      	ands	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d106      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	0f5b      	lsrs	r3, r3, #29
 8006aca:	075a      	lsls	r2, r3, #29
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	0018      	movs	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	b008      	add	sp, #32
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	40007000 	.word	0x40007000
 8006aec:	00001388 	.word	0x00001388
 8006af0:	efffffff 	.word	0xefffffff
 8006af4:	feffffff 	.word	0xfeffffff
 8006af8:	1fc1808c 	.word	0x1fc1808c
 8006afc:	effefffc 	.word	0xeffefffc

08006b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0e9      	b.n	8006ce8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b14:	4b76      	ldr	r3, [pc, #472]	; (8006cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2207      	movs	r2, #7
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d91e      	bls.n	8006b60 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b22:	4b73      	ldr	r3, [pc, #460]	; (8006cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2207      	movs	r2, #7
 8006b28:	4393      	bics	r3, r2
 8006b2a:	0019      	movs	r1, r3
 8006b2c:	4b70      	ldr	r3, [pc, #448]	; (8006cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b34:	f7fe ff6e 	bl	8005a14 <HAL_GetTick>
 8006b38:	0003      	movs	r3, r0
 8006b3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b3c:	e009      	b.n	8006b52 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b3e:	f7fe ff69 	bl	8005a14 <HAL_GetTick>
 8006b42:	0002      	movs	r2, r0
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	4a6a      	ldr	r2, [pc, #424]	; (8006cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e0ca      	b.n	8006ce8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b52:	4b67      	ldr	r3, [pc, #412]	; (8006cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2207      	movs	r2, #7
 8006b58:	4013      	ands	r3, r2
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d1ee      	bne.n	8006b3e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2202      	movs	r2, #2
 8006b66:	4013      	ands	r3, r2
 8006b68:	d015      	beq.n	8006b96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2204      	movs	r2, #4
 8006b70:	4013      	ands	r3, r2
 8006b72:	d006      	beq.n	8006b82 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006b74:	4b60      	ldr	r3, [pc, #384]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	4b5f      	ldr	r3, [pc, #380]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006b7a:	21e0      	movs	r1, #224	; 0xe0
 8006b7c:	01c9      	lsls	r1, r1, #7
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b82:	4b5d      	ldr	r3, [pc, #372]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	4a5d      	ldr	r2, [pc, #372]	; (8006cfc <HAL_RCC_ClockConfig+0x1fc>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	0019      	movs	r1, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	4b59      	ldr	r3, [pc, #356]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006b92:	430a      	orrs	r2, r1
 8006b94:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d057      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d107      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ba8:	4b53      	ldr	r3, [pc, #332]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	029b      	lsls	r3, r3, #10
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	d12b      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e097      	b.n	8006ce8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d107      	bne.n	8006bd0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc0:	4b4d      	ldr	r3, [pc, #308]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	2380      	movs	r3, #128	; 0x80
 8006bc6:	049b      	lsls	r3, r3, #18
 8006bc8:	4013      	ands	r3, r2
 8006bca:	d11f      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e08b      	b.n	8006ce8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d107      	bne.n	8006be8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bd8:	4b47      	ldr	r3, [pc, #284]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	2380      	movs	r3, #128	; 0x80
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	4013      	ands	r3, r2
 8006be2:	d113      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e07f      	b.n	8006ce8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d106      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bf0:	4b41      	ldr	r3, [pc, #260]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d108      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e074      	b.n	8006ce8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bfe:	4b3e      	ldr	r3, [pc, #248]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c02:	2202      	movs	r2, #2
 8006c04:	4013      	ands	r3, r2
 8006c06:	d101      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e06d      	b.n	8006ce8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c0c:	4b3a      	ldr	r3, [pc, #232]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2207      	movs	r2, #7
 8006c12:	4393      	bics	r3, r2
 8006c14:	0019      	movs	r1, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	4b37      	ldr	r3, [pc, #220]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c20:	f7fe fef8 	bl	8005a14 <HAL_GetTick>
 8006c24:	0003      	movs	r3, r0
 8006c26:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c28:	e009      	b.n	8006c3e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c2a:	f7fe fef3 	bl	8005a14 <HAL_GetTick>
 8006c2e:	0002      	movs	r2, r0
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	4a2f      	ldr	r2, [pc, #188]	; (8006cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e054      	b.n	8006ce8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c3e:	4b2e      	ldr	r3, [pc, #184]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2238      	movs	r2, #56	; 0x38
 8006c44:	401a      	ands	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d1ec      	bne.n	8006c2a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c50:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2207      	movs	r2, #7
 8006c56:	4013      	ands	r3, r2
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d21e      	bcs.n	8006c9c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5e:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2207      	movs	r2, #7
 8006c64:	4393      	bics	r3, r2
 8006c66:	0019      	movs	r1, r3
 8006c68:	4b21      	ldr	r3, [pc, #132]	; (8006cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c70:	f7fe fed0 	bl	8005a14 <HAL_GetTick>
 8006c74:	0003      	movs	r3, r0
 8006c76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c78:	e009      	b.n	8006c8e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c7a:	f7fe fecb 	bl	8005a14 <HAL_GetTick>
 8006c7e:	0002      	movs	r2, r0
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	4a1b      	ldr	r2, [pc, #108]	; (8006cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e02c      	b.n	8006ce8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c8e:	4b18      	ldr	r3, [pc, #96]	; (8006cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2207      	movs	r2, #7
 8006c94:	4013      	ands	r3, r2
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d1ee      	bne.n	8006c7a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006ca6:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	4a15      	ldr	r2, [pc, #84]	; (8006d00 <HAL_RCC_ClockConfig+0x200>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	0019      	movs	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	4b10      	ldr	r3, [pc, #64]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006cba:	f000 f829 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 8006cbe:	0001      	movs	r1, r0
 8006cc0:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	0a1b      	lsrs	r3, r3, #8
 8006cc6:	220f      	movs	r2, #15
 8006cc8:	401a      	ands	r2, r3
 8006cca:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <HAL_RCC_ClockConfig+0x204>)
 8006ccc:	0092      	lsls	r2, r2, #2
 8006cce:	58d3      	ldr	r3, [r2, r3]
 8006cd0:	221f      	movs	r2, #31
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	000a      	movs	r2, r1
 8006cd6:	40da      	lsrs	r2, r3
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <HAL_RCC_ClockConfig+0x208>)
 8006cda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <HAL_RCC_ClockConfig+0x20c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f7fe fe3b 	bl	800595c <HAL_InitTick>
 8006ce6:	0003      	movs	r3, r0
}
 8006ce8:	0018      	movs	r0, r3
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b004      	add	sp, #16
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	40022000 	.word	0x40022000
 8006cf4:	00001388 	.word	0x00001388
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	fffff0ff 	.word	0xfffff0ff
 8006d00:	ffff8fff 	.word	0xffff8fff
 8006d04:	08011080 	.word	0x08011080
 8006d08:	20000000 	.word	0x20000000
 8006d0c:	2000001c 	.word	0x2000001c

08006d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d16:	4b3c      	ldr	r3, [pc, #240]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2238      	movs	r2, #56	; 0x38
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d10f      	bne.n	8006d40 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006d20:	4b39      	ldr	r3, [pc, #228]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	0adb      	lsrs	r3, r3, #11
 8006d26:	2207      	movs	r2, #7
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	409a      	lsls	r2, r3
 8006d2e:	0013      	movs	r3, r2
 8006d30:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	4835      	ldr	r0, [pc, #212]	; (8006e0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d36:	f7f9 fa0d 	bl	8000154 <__udivsi3>
 8006d3a:	0003      	movs	r3, r0
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	e05d      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d40:	4b31      	ldr	r3, [pc, #196]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2238      	movs	r2, #56	; 0x38
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d102      	bne.n	8006d52 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d4c:	4b2f      	ldr	r3, [pc, #188]	; (8006e0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	e054      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d52:	4b2d      	ldr	r3, [pc, #180]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	2238      	movs	r2, #56	; 0x38
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2b10      	cmp	r3, #16
 8006d5c:	d138      	bne.n	8006dd0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006d5e:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	2203      	movs	r2, #3
 8006d64:	4013      	ands	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d68:	4b27      	ldr	r3, [pc, #156]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	091b      	lsrs	r3, r3, #4
 8006d6e:	2207      	movs	r2, #7
 8006d70:	4013      	ands	r3, r2
 8006d72:	3301      	adds	r3, #1
 8006d74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d10d      	bne.n	8006d98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	4823      	ldr	r0, [pc, #140]	; (8006e0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d80:	f7f9 f9e8 	bl	8000154 <__udivsi3>
 8006d84:	0003      	movs	r3, r0
 8006d86:	0019      	movs	r1, r3
 8006d88:	4b1f      	ldr	r3, [pc, #124]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	0a1b      	lsrs	r3, r3, #8
 8006d8e:	227f      	movs	r2, #127	; 0x7f
 8006d90:	4013      	ands	r3, r2
 8006d92:	434b      	muls	r3, r1
 8006d94:	617b      	str	r3, [r7, #20]
        break;
 8006d96:	e00d      	b.n	8006db4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	481c      	ldr	r0, [pc, #112]	; (8006e0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d9c:	f7f9 f9da 	bl	8000154 <__udivsi3>
 8006da0:	0003      	movs	r3, r0
 8006da2:	0019      	movs	r1, r3
 8006da4:	4b18      	ldr	r3, [pc, #96]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	0a1b      	lsrs	r3, r3, #8
 8006daa:	227f      	movs	r2, #127	; 0x7f
 8006dac:	4013      	ands	r3, r2
 8006dae:	434b      	muls	r3, r1
 8006db0:	617b      	str	r3, [r7, #20]
        break;
 8006db2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006db4:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	0f5b      	lsrs	r3, r3, #29
 8006dba:	2207      	movs	r2, #7
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	6978      	ldr	r0, [r7, #20]
 8006dc6:	f7f9 f9c5 	bl	8000154 <__udivsi3>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	e015      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006dd0:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	2238      	movs	r2, #56	; 0x38
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	d103      	bne.n	8006de4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006ddc:	2380      	movs	r3, #128	; 0x80
 8006dde:	021b      	lsls	r3, r3, #8
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	e00b      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006de4:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2238      	movs	r2, #56	; 0x38
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b18      	cmp	r3, #24
 8006dee:	d103      	bne.n	8006df8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006df0:	23fa      	movs	r3, #250	; 0xfa
 8006df2:	01db      	lsls	r3, r3, #7
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	e001      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006dfc:	693b      	ldr	r3, [r7, #16]
}
 8006dfe:	0018      	movs	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b006      	add	sp, #24
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	00f42400 	.word	0x00f42400

08006e10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e14:	4b02      	ldr	r3, [pc, #8]	; (8006e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e16:	681b      	ldr	r3, [r3, #0]
}
 8006e18:	0018      	movs	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	20000000 	.word	0x20000000

08006e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e24:	b5b0      	push	{r4, r5, r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006e28:	f7ff fff2 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006e2c:	0004      	movs	r4, r0
 8006e2e:	f7ff fb4b 	bl	80064c8 <LL_RCC_GetAPB1Prescaler>
 8006e32:	0003      	movs	r3, r0
 8006e34:	0b1a      	lsrs	r2, r3, #12
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e38:	0092      	lsls	r2, r2, #2
 8006e3a:	58d3      	ldr	r3, [r2, r3]
 8006e3c:	221f      	movs	r2, #31
 8006e3e:	4013      	ands	r3, r2
 8006e40:	40dc      	lsrs	r4, r3
 8006e42:	0023      	movs	r3, r4
}
 8006e44:	0018      	movs	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bdb0      	pop	{r4, r5, r7, pc}
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	080110c0 	.word	0x080110c0

08006e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006e58:	2313      	movs	r3, #19
 8006e5a:	18fb      	adds	r3, r7, r3
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e60:	2312      	movs	r3, #18
 8006e62:	18fb      	adds	r3, r7, r3
 8006e64:	2200      	movs	r2, #0
 8006e66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	2380      	movs	r3, #128	; 0x80
 8006e6e:	029b      	lsls	r3, r3, #10
 8006e70:	4013      	ands	r3, r2
 8006e72:	d100      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006e74:	e0a3      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e76:	2011      	movs	r0, #17
 8006e78:	183b      	adds	r3, r7, r0
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e7e:	4b86      	ldr	r3, [pc, #536]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e82:	2380      	movs	r3, #128	; 0x80
 8006e84:	055b      	lsls	r3, r3, #21
 8006e86:	4013      	ands	r3, r2
 8006e88:	d110      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e8a:	4b83      	ldr	r3, [pc, #524]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e8e:	4b82      	ldr	r3, [pc, #520]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	0549      	lsls	r1, r1, #21
 8006e94:	430a      	orrs	r2, r1
 8006e96:	63da      	str	r2, [r3, #60]	; 0x3c
 8006e98:	4b7f      	ldr	r3, [pc, #508]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e9c:	2380      	movs	r3, #128	; 0x80
 8006e9e:	055b      	lsls	r3, r3, #21
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	60bb      	str	r3, [r7, #8]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ea6:	183b      	adds	r3, r7, r0
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eac:	4b7b      	ldr	r3, [pc, #492]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	4b7a      	ldr	r3, [pc, #488]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006eb2:	2180      	movs	r1, #128	; 0x80
 8006eb4:	0049      	lsls	r1, r1, #1
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006eba:	f7fe fdab 	bl	8005a14 <HAL_GetTick>
 8006ebe:	0003      	movs	r3, r0
 8006ec0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ec2:	e00b      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec4:	f7fe fda6 	bl	8005a14 <HAL_GetTick>
 8006ec8:	0002      	movs	r2, r0
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d904      	bls.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006ed2:	2313      	movs	r3, #19
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	701a      	strb	r2, [r3, #0]
        break;
 8006eda:	e005      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006edc:	4b6f      	ldr	r3, [pc, #444]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	2380      	movs	r3, #128	; 0x80
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d0ed      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006ee8:	2313      	movs	r3, #19
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d154      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ef2:	4b69      	ldr	r3, [pc, #420]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ef4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ef6:	23c0      	movs	r3, #192	; 0xc0
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4013      	ands	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d019      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d014      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f0e:	4b62      	ldr	r3, [pc, #392]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f12:	4a63      	ldr	r2, [pc, #396]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f18:	4b5f      	ldr	r3, [pc, #380]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f1c:	4b5e      	ldr	r3, [pc, #376]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f1e:	2180      	movs	r1, #128	; 0x80
 8006f20:	0249      	lsls	r1, r1, #9
 8006f22:	430a      	orrs	r2, r1
 8006f24:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f26:	4b5c      	ldr	r3, [pc, #368]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f2a:	4b5b      	ldr	r3, [pc, #364]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f2c:	495d      	ldr	r1, [pc, #372]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006f2e:	400a      	ands	r2, r1
 8006f30:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f32:	4b59      	ldr	r3, [pc, #356]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d016      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f40:	f7fe fd68 	bl	8005a14 <HAL_GetTick>
 8006f44:	0003      	movs	r3, r0
 8006f46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f48:	e00c      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f4a:	f7fe fd63 	bl	8005a14 <HAL_GetTick>
 8006f4e:	0002      	movs	r2, r0
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	4a54      	ldr	r2, [pc, #336]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d904      	bls.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006f5a:	2313      	movs	r3, #19
 8006f5c:	18fb      	adds	r3, r7, r3
 8006f5e:	2203      	movs	r2, #3
 8006f60:	701a      	strb	r2, [r3, #0]
            break;
 8006f62:	e004      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f64:	4b4c      	ldr	r3, [pc, #304]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f68:	2202      	movs	r2, #2
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d0ed      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006f6e:	2313      	movs	r3, #19
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f78:	4b47      	ldr	r3, [pc, #284]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7c:	4a48      	ldr	r2, [pc, #288]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	0019      	movs	r1, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699a      	ldr	r2, [r3, #24]
 8006f86:	4b44      	ldr	r3, [pc, #272]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f8c:	e00c      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f8e:	2312      	movs	r3, #18
 8006f90:	18fb      	adds	r3, r7, r3
 8006f92:	2213      	movs	r2, #19
 8006f94:	18ba      	adds	r2, r7, r2
 8006f96:	7812      	ldrb	r2, [r2, #0]
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e005      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9c:	2312      	movs	r3, #18
 8006f9e:	18fb      	adds	r3, r7, r3
 8006fa0:	2213      	movs	r2, #19
 8006fa2:	18ba      	adds	r2, r7, r2
 8006fa4:	7812      	ldrb	r2, [r2, #0]
 8006fa6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fa8:	2311      	movs	r3, #17
 8006faa:	18fb      	adds	r3, r7, r3
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d105      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fb2:	4b39      	ldr	r3, [pc, #228]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fb6:	4b38      	ldr	r3, [pc, #224]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fb8:	493c      	ldr	r1, [pc, #240]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006fba:	400a      	ands	r2, r1
 8006fbc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d009      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fc8:	4b33      	ldr	r3, [pc, #204]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fcc:	2203      	movs	r2, #3
 8006fce:	4393      	bics	r3, r2
 8006fd0:	0019      	movs	r1, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	4b30      	ldr	r3, [pc, #192]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d009      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fe6:	4b2c      	ldr	r3, [pc, #176]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	220c      	movs	r2, #12
 8006fec:	4393      	bics	r3, r2
 8006fee:	0019      	movs	r1, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	4b28      	ldr	r3, [pc, #160]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2220      	movs	r2, #32
 8007000:	4013      	ands	r3, r2
 8007002:	d009      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007004:	4b24      	ldr	r3, [pc, #144]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007008:	4a29      	ldr	r2, [pc, #164]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800700a:	4013      	ands	r3, r2
 800700c:	0019      	movs	r1, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	4b21      	ldr	r3, [pc, #132]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007014:	430a      	orrs	r2, r1
 8007016:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	2380      	movs	r3, #128	; 0x80
 800701e:	01db      	lsls	r3, r3, #7
 8007020:	4013      	ands	r3, r2
 8007022:	d015      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007024:	4b1c      	ldr	r3, [pc, #112]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	0899      	lsrs	r1, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	4b19      	ldr	r3, [pc, #100]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007032:	430a      	orrs	r2, r1
 8007034:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695a      	ldr	r2, [r3, #20]
 800703a:	2380      	movs	r3, #128	; 0x80
 800703c:	05db      	lsls	r3, r3, #23
 800703e:	429a      	cmp	r2, r3
 8007040:	d106      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007042:	4b15      	ldr	r3, [pc, #84]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	4b14      	ldr	r3, [pc, #80]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007048:	2180      	movs	r1, #128	; 0x80
 800704a:	0249      	lsls	r1, r1, #9
 800704c:	430a      	orrs	r2, r1
 800704e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	2380      	movs	r3, #128	; 0x80
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	4013      	ands	r3, r2
 800705a:	d016      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800705c:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800705e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007062:	4013      	ands	r3, r2
 8007064:	0019      	movs	r1, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691a      	ldr	r2, [r3, #16]
 800706a:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800706c:	430a      	orrs	r2, r1
 800706e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	2380      	movs	r3, #128	; 0x80
 8007076:	01db      	lsls	r3, r3, #7
 8007078:	429a      	cmp	r2, r3
 800707a:	d106      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800707c:	4b06      	ldr	r3, [pc, #24]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007082:	2180      	movs	r1, #128	; 0x80
 8007084:	0249      	lsls	r1, r1, #9
 8007086:	430a      	orrs	r2, r1
 8007088:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800708a:	2312      	movs	r3, #18
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	781b      	ldrb	r3, [r3, #0]
}
 8007090:	0018      	movs	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	b006      	add	sp, #24
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40021000 	.word	0x40021000
 800709c:	40007000 	.word	0x40007000
 80070a0:	fffffcff 	.word	0xfffffcff
 80070a4:	fffeffff 	.word	0xfffeffff
 80070a8:	00001388 	.word	0x00001388
 80070ac:	efffffff 	.word	0xefffffff
 80070b0:	ffffcfff 	.word	0xffffcfff
 80070b4:	ffff3fff 	.word	0xffff3fff

080070b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e04a      	b.n	8007160 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	223d      	movs	r2, #61	; 0x3d
 80070ce:	5c9b      	ldrb	r3, [r3, r2]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d107      	bne.n	80070e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	223c      	movs	r2, #60	; 0x3c
 80070da:	2100      	movs	r1, #0
 80070dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	0018      	movs	r0, r3
 80070e2:	f7fc ffb7 	bl	8004054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	223d      	movs	r2, #61	; 0x3d
 80070ea:	2102      	movs	r1, #2
 80070ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3304      	adds	r3, #4
 80070f6:	0019      	movs	r1, r3
 80070f8:	0010      	movs	r0, r2
 80070fa:	f000 fecf 	bl	8007e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2248      	movs	r2, #72	; 0x48
 8007102:	2101      	movs	r1, #1
 8007104:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	223e      	movs	r2, #62	; 0x3e
 800710a:	2101      	movs	r1, #1
 800710c:	5499      	strb	r1, [r3, r2]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	223f      	movs	r2, #63	; 0x3f
 8007112:	2101      	movs	r1, #1
 8007114:	5499      	strb	r1, [r3, r2]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2240      	movs	r2, #64	; 0x40
 800711a:	2101      	movs	r1, #1
 800711c:	5499      	strb	r1, [r3, r2]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2241      	movs	r2, #65	; 0x41
 8007122:	2101      	movs	r1, #1
 8007124:	5499      	strb	r1, [r3, r2]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2242      	movs	r2, #66	; 0x42
 800712a:	2101      	movs	r1, #1
 800712c:	5499      	strb	r1, [r3, r2]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2243      	movs	r2, #67	; 0x43
 8007132:	2101      	movs	r1, #1
 8007134:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2244      	movs	r2, #68	; 0x44
 800713a:	2101      	movs	r1, #1
 800713c:	5499      	strb	r1, [r3, r2]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2245      	movs	r2, #69	; 0x45
 8007142:	2101      	movs	r1, #1
 8007144:	5499      	strb	r1, [r3, r2]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2246      	movs	r2, #70	; 0x46
 800714a:	2101      	movs	r1, #1
 800714c:	5499      	strb	r1, [r3, r2]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2247      	movs	r2, #71	; 0x47
 8007152:	2101      	movs	r1, #1
 8007154:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	223d      	movs	r2, #61	; 0x3d
 800715a:	2101      	movs	r1, #1
 800715c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	0018      	movs	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	b002      	add	sp, #8
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	223d      	movs	r2, #61	; 0x3d
 8007174:	5c9b      	ldrb	r3, [r3, r2]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b01      	cmp	r3, #1
 800717a:	d001      	beq.n	8007180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e03c      	b.n	80071fa <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	223d      	movs	r2, #61	; 0x3d
 8007184:	2102      	movs	r1, #2
 8007186:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2101      	movs	r1, #1
 8007194:	430a      	orrs	r2, r1
 8007196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a19      	ldr	r2, [pc, #100]	; (8007204 <HAL_TIM_Base_Start_IT+0x9c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d009      	beq.n	80071b6 <HAL_TIM_Base_Start_IT+0x4e>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a18      	ldr	r2, [pc, #96]	; (8007208 <HAL_TIM_Base_Start_IT+0xa0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d004      	beq.n	80071b6 <HAL_TIM_Base_Start_IT+0x4e>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a16      	ldr	r2, [pc, #88]	; (800720c <HAL_TIM_Base_Start_IT+0xa4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d116      	bne.n	80071e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	4a14      	ldr	r2, [pc, #80]	; (8007210 <HAL_TIM_Base_Start_IT+0xa8>)
 80071be:	4013      	ands	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b06      	cmp	r3, #6
 80071c6:	d016      	beq.n	80071f6 <HAL_TIM_Base_Start_IT+0x8e>
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	2380      	movs	r3, #128	; 0x80
 80071cc:	025b      	lsls	r3, r3, #9
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d011      	beq.n	80071f6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2101      	movs	r1, #1
 80071de:	430a      	orrs	r2, r1
 80071e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e2:	e008      	b.n	80071f6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2101      	movs	r1, #1
 80071f0:	430a      	orrs	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	e000      	b.n	80071f8 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	0018      	movs	r0, r3
 80071fc:	46bd      	mov	sp, r7
 80071fe:	b004      	add	sp, #16
 8007200:	bd80      	pop	{r7, pc}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	40012c00 	.word	0x40012c00
 8007208:	40000400 	.word	0x40000400
 800720c:	40014000 	.word	0x40014000
 8007210:	00010007 	.word	0x00010007

08007214 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e04a      	b.n	80072bc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	223d      	movs	r2, #61	; 0x3d
 800722a:	5c9b      	ldrb	r3, [r3, r2]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d107      	bne.n	8007242 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	223c      	movs	r2, #60	; 0x3c
 8007236:	2100      	movs	r1, #0
 8007238:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	0018      	movs	r0, r3
 800723e:	f000 f841 	bl	80072c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	223d      	movs	r2, #61	; 0x3d
 8007246:	2102      	movs	r1, #2
 8007248:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3304      	adds	r3, #4
 8007252:	0019      	movs	r1, r3
 8007254:	0010      	movs	r0, r2
 8007256:	f000 fe21 	bl	8007e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2248      	movs	r2, #72	; 0x48
 800725e:	2101      	movs	r1, #1
 8007260:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	223e      	movs	r2, #62	; 0x3e
 8007266:	2101      	movs	r1, #1
 8007268:	5499      	strb	r1, [r3, r2]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	223f      	movs	r2, #63	; 0x3f
 800726e:	2101      	movs	r1, #1
 8007270:	5499      	strb	r1, [r3, r2]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2240      	movs	r2, #64	; 0x40
 8007276:	2101      	movs	r1, #1
 8007278:	5499      	strb	r1, [r3, r2]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2241      	movs	r2, #65	; 0x41
 800727e:	2101      	movs	r1, #1
 8007280:	5499      	strb	r1, [r3, r2]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2242      	movs	r2, #66	; 0x42
 8007286:	2101      	movs	r1, #1
 8007288:	5499      	strb	r1, [r3, r2]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2243      	movs	r2, #67	; 0x43
 800728e:	2101      	movs	r1, #1
 8007290:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2244      	movs	r2, #68	; 0x44
 8007296:	2101      	movs	r1, #1
 8007298:	5499      	strb	r1, [r3, r2]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2245      	movs	r2, #69	; 0x45
 800729e:	2101      	movs	r1, #1
 80072a0:	5499      	strb	r1, [r3, r2]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2246      	movs	r2, #70	; 0x46
 80072a6:	2101      	movs	r1, #1
 80072a8:	5499      	strb	r1, [r3, r2]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2247      	movs	r2, #71	; 0x47
 80072ae:	2101      	movs	r1, #1
 80072b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	223d      	movs	r2, #61	; 0x3d
 80072b6:	2101      	movs	r1, #1
 80072b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	0018      	movs	r0, r3
 80072be:	46bd      	mov	sp, r7
 80072c0:	b002      	add	sp, #8
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072cc:	46c0      	nop			; (mov r8, r8)
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b002      	add	sp, #8
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d108      	bne.n	80072f6 <HAL_TIM_PWM_Start+0x22>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	223e      	movs	r2, #62	; 0x3e
 80072e8:	5c9b      	ldrb	r3, [r3, r2]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	1e5a      	subs	r2, r3, #1
 80072f0:	4193      	sbcs	r3, r2
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	e037      	b.n	8007366 <HAL_TIM_PWM_Start+0x92>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d108      	bne.n	800730e <HAL_TIM_PWM_Start+0x3a>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	223f      	movs	r2, #63	; 0x3f
 8007300:	5c9b      	ldrb	r3, [r3, r2]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	1e5a      	subs	r2, r3, #1
 8007308:	4193      	sbcs	r3, r2
 800730a:	b2db      	uxtb	r3, r3
 800730c:	e02b      	b.n	8007366 <HAL_TIM_PWM_Start+0x92>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b08      	cmp	r3, #8
 8007312:	d108      	bne.n	8007326 <HAL_TIM_PWM_Start+0x52>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2240      	movs	r2, #64	; 0x40
 8007318:	5c9b      	ldrb	r3, [r3, r2]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	1e5a      	subs	r2, r3, #1
 8007320:	4193      	sbcs	r3, r2
 8007322:	b2db      	uxtb	r3, r3
 8007324:	e01f      	b.n	8007366 <HAL_TIM_PWM_Start+0x92>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b0c      	cmp	r3, #12
 800732a:	d108      	bne.n	800733e <HAL_TIM_PWM_Start+0x6a>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2241      	movs	r2, #65	; 0x41
 8007330:	5c9b      	ldrb	r3, [r3, r2]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	1e5a      	subs	r2, r3, #1
 8007338:	4193      	sbcs	r3, r2
 800733a:	b2db      	uxtb	r3, r3
 800733c:	e013      	b.n	8007366 <HAL_TIM_PWM_Start+0x92>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b10      	cmp	r3, #16
 8007342:	d108      	bne.n	8007356 <HAL_TIM_PWM_Start+0x82>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2242      	movs	r2, #66	; 0x42
 8007348:	5c9b      	ldrb	r3, [r3, r2]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	1e5a      	subs	r2, r3, #1
 8007350:	4193      	sbcs	r3, r2
 8007352:	b2db      	uxtb	r3, r3
 8007354:	e007      	b.n	8007366 <HAL_TIM_PWM_Start+0x92>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2243      	movs	r2, #67	; 0x43
 800735a:	5c9b      	ldrb	r3, [r3, r2]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	1e5a      	subs	r2, r3, #1
 8007362:	4193      	sbcs	r3, r2
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e085      	b.n	800747a <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d104      	bne.n	800737e <HAL_TIM_PWM_Start+0xaa>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	223e      	movs	r2, #62	; 0x3e
 8007378:	2102      	movs	r1, #2
 800737a:	5499      	strb	r1, [r3, r2]
 800737c:	e023      	b.n	80073c6 <HAL_TIM_PWM_Start+0xf2>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b04      	cmp	r3, #4
 8007382:	d104      	bne.n	800738e <HAL_TIM_PWM_Start+0xba>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	223f      	movs	r2, #63	; 0x3f
 8007388:	2102      	movs	r1, #2
 800738a:	5499      	strb	r1, [r3, r2]
 800738c:	e01b      	b.n	80073c6 <HAL_TIM_PWM_Start+0xf2>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b08      	cmp	r3, #8
 8007392:	d104      	bne.n	800739e <HAL_TIM_PWM_Start+0xca>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2240      	movs	r2, #64	; 0x40
 8007398:	2102      	movs	r1, #2
 800739a:	5499      	strb	r1, [r3, r2]
 800739c:	e013      	b.n	80073c6 <HAL_TIM_PWM_Start+0xf2>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b0c      	cmp	r3, #12
 80073a2:	d104      	bne.n	80073ae <HAL_TIM_PWM_Start+0xda>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2241      	movs	r2, #65	; 0x41
 80073a8:	2102      	movs	r1, #2
 80073aa:	5499      	strb	r1, [r3, r2]
 80073ac:	e00b      	b.n	80073c6 <HAL_TIM_PWM_Start+0xf2>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b10      	cmp	r3, #16
 80073b2:	d104      	bne.n	80073be <HAL_TIM_PWM_Start+0xea>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2242      	movs	r2, #66	; 0x42
 80073b8:	2102      	movs	r1, #2
 80073ba:	5499      	strb	r1, [r3, r2]
 80073bc:	e003      	b.n	80073c6 <HAL_TIM_PWM_Start+0xf2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2243      	movs	r2, #67	; 0x43
 80073c2:	2102      	movs	r1, #2
 80073c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	2201      	movs	r2, #1
 80073ce:	0018      	movs	r0, r3
 80073d0:	f001 f93a 	bl	8008648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a2a      	ldr	r2, [pc, #168]	; (8007484 <HAL_TIM_PWM_Start+0x1b0>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00e      	beq.n	80073fc <HAL_TIM_PWM_Start+0x128>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a29      	ldr	r2, [pc, #164]	; (8007488 <HAL_TIM_PWM_Start+0x1b4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d009      	beq.n	80073fc <HAL_TIM_PWM_Start+0x128>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a27      	ldr	r2, [pc, #156]	; (800748c <HAL_TIM_PWM_Start+0x1b8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d004      	beq.n	80073fc <HAL_TIM_PWM_Start+0x128>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a26      	ldr	r2, [pc, #152]	; (8007490 <HAL_TIM_PWM_Start+0x1bc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d101      	bne.n	8007400 <HAL_TIM_PWM_Start+0x12c>
 80073fc:	2301      	movs	r3, #1
 80073fe:	e000      	b.n	8007402 <HAL_TIM_PWM_Start+0x12e>
 8007400:	2300      	movs	r3, #0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d008      	beq.n	8007418 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2180      	movs	r1, #128	; 0x80
 8007412:	0209      	lsls	r1, r1, #8
 8007414:	430a      	orrs	r2, r1
 8007416:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a19      	ldr	r2, [pc, #100]	; (8007484 <HAL_TIM_PWM_Start+0x1b0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d009      	beq.n	8007436 <HAL_TIM_PWM_Start+0x162>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a1b      	ldr	r2, [pc, #108]	; (8007494 <HAL_TIM_PWM_Start+0x1c0>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d004      	beq.n	8007436 <HAL_TIM_PWM_Start+0x162>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a15      	ldr	r2, [pc, #84]	; (8007488 <HAL_TIM_PWM_Start+0x1b4>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d116      	bne.n	8007464 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	4a16      	ldr	r2, [pc, #88]	; (8007498 <HAL_TIM_PWM_Start+0x1c4>)
 800743e:	4013      	ands	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b06      	cmp	r3, #6
 8007446:	d016      	beq.n	8007476 <HAL_TIM_PWM_Start+0x1a2>
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	2380      	movs	r3, #128	; 0x80
 800744c:	025b      	lsls	r3, r3, #9
 800744e:	429a      	cmp	r2, r3
 8007450:	d011      	beq.n	8007476 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2101      	movs	r1, #1
 800745e:	430a      	orrs	r2, r1
 8007460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007462:	e008      	b.n	8007476 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2101      	movs	r1, #1
 8007470:	430a      	orrs	r2, r1
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	e000      	b.n	8007478 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007476:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	0018      	movs	r0, r3
 800747c:	46bd      	mov	sp, r7
 800747e:	b004      	add	sp, #16
 8007480:	bd80      	pop	{r7, pc}
 8007482:	46c0      	nop			; (mov r8, r8)
 8007484:	40012c00 	.word	0x40012c00
 8007488:	40014000 	.word	0x40014000
 800748c:	40014400 	.word	0x40014400
 8007490:	40014800 	.word	0x40014800
 8007494:	40000400 	.word	0x40000400
 8007498:	00010007 	.word	0x00010007

0800749c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	2200      	movs	r2, #0
 80074ae:	0018      	movs	r0, r3
 80074b0:	f001 f8ca 	bl	8008648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a37      	ldr	r2, [pc, #220]	; (8007598 <HAL_TIM_PWM_Stop+0xfc>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00e      	beq.n	80074dc <HAL_TIM_PWM_Stop+0x40>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a36      	ldr	r2, [pc, #216]	; (800759c <HAL_TIM_PWM_Stop+0x100>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d009      	beq.n	80074dc <HAL_TIM_PWM_Stop+0x40>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a34      	ldr	r2, [pc, #208]	; (80075a0 <HAL_TIM_PWM_Stop+0x104>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <HAL_TIM_PWM_Stop+0x40>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a33      	ldr	r2, [pc, #204]	; (80075a4 <HAL_TIM_PWM_Stop+0x108>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d101      	bne.n	80074e0 <HAL_TIM_PWM_Stop+0x44>
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <HAL_TIM_PWM_Stop+0x46>
 80074e0:	2300      	movs	r3, #0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d013      	beq.n	800750e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	4a2e      	ldr	r2, [pc, #184]	; (80075a8 <HAL_TIM_PWM_Stop+0x10c>)
 80074ee:	4013      	ands	r3, r2
 80074f0:	d10d      	bne.n	800750e <HAL_TIM_PWM_Stop+0x72>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	4a2c      	ldr	r2, [pc, #176]	; (80075ac <HAL_TIM_PWM_Stop+0x110>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	d107      	bne.n	800750e <HAL_TIM_PWM_Stop+0x72>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4929      	ldr	r1, [pc, #164]	; (80075b0 <HAL_TIM_PWM_Stop+0x114>)
 800750a:	400a      	ands	r2, r1
 800750c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	4a24      	ldr	r2, [pc, #144]	; (80075a8 <HAL_TIM_PWM_Stop+0x10c>)
 8007516:	4013      	ands	r3, r2
 8007518:	d10d      	bne.n	8007536 <HAL_TIM_PWM_Stop+0x9a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	4a22      	ldr	r2, [pc, #136]	; (80075ac <HAL_TIM_PWM_Stop+0x110>)
 8007522:	4013      	ands	r3, r2
 8007524:	d107      	bne.n	8007536 <HAL_TIM_PWM_Stop+0x9a>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2101      	movs	r1, #1
 8007532:	438a      	bics	r2, r1
 8007534:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <HAL_TIM_PWM_Stop+0xaa>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	223e      	movs	r2, #62	; 0x3e
 8007540:	2101      	movs	r1, #1
 8007542:	5499      	strb	r1, [r3, r2]
 8007544:	e023      	b.n	800758e <HAL_TIM_PWM_Stop+0xf2>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b04      	cmp	r3, #4
 800754a:	d104      	bne.n	8007556 <HAL_TIM_PWM_Stop+0xba>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	223f      	movs	r2, #63	; 0x3f
 8007550:	2101      	movs	r1, #1
 8007552:	5499      	strb	r1, [r3, r2]
 8007554:	e01b      	b.n	800758e <HAL_TIM_PWM_Stop+0xf2>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b08      	cmp	r3, #8
 800755a:	d104      	bne.n	8007566 <HAL_TIM_PWM_Stop+0xca>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2240      	movs	r2, #64	; 0x40
 8007560:	2101      	movs	r1, #1
 8007562:	5499      	strb	r1, [r3, r2]
 8007564:	e013      	b.n	800758e <HAL_TIM_PWM_Stop+0xf2>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b0c      	cmp	r3, #12
 800756a:	d104      	bne.n	8007576 <HAL_TIM_PWM_Stop+0xda>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2241      	movs	r2, #65	; 0x41
 8007570:	2101      	movs	r1, #1
 8007572:	5499      	strb	r1, [r3, r2]
 8007574:	e00b      	b.n	800758e <HAL_TIM_PWM_Stop+0xf2>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b10      	cmp	r3, #16
 800757a:	d104      	bne.n	8007586 <HAL_TIM_PWM_Stop+0xea>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2242      	movs	r2, #66	; 0x42
 8007580:	2101      	movs	r1, #1
 8007582:	5499      	strb	r1, [r3, r2]
 8007584:	e003      	b.n	800758e <HAL_TIM_PWM_Stop+0xf2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2243      	movs	r2, #67	; 0x43
 800758a:	2101      	movs	r1, #1
 800758c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	0018      	movs	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	b002      	add	sp, #8
 8007596:	bd80      	pop	{r7, pc}
 8007598:	40012c00 	.word	0x40012c00
 800759c:	40014000 	.word	0x40014000
 80075a0:	40014400 	.word	0x40014400
 80075a4:	40014800 	.word	0x40014800
 80075a8:	00001111 	.word	0x00001111
 80075ac:	00000444 	.word	0x00000444
 80075b0:	ffff7fff 	.word	0xffff7fff

080075b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e090      	b.n	80076ea <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	223d      	movs	r2, #61	; 0x3d
 80075cc:	5c9b      	ldrb	r3, [r3, r2]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d107      	bne.n	80075e4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	223c      	movs	r2, #60	; 0x3c
 80075d8:	2100      	movs	r1, #0
 80075da:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	0018      	movs	r0, r3
 80075e0:	f7fc fca4 	bl	8003f2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	223d      	movs	r2, #61	; 0x3d
 80075e8:	2102      	movs	r1, #2
 80075ea:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	493f      	ldr	r1, [pc, #252]	; (80076f4 <HAL_TIM_Encoder_Init+0x140>)
 80075f8:	400a      	ands	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3304      	adds	r3, #4
 8007604:	0019      	movs	r1, r3
 8007606:	0010      	movs	r0, r2
 8007608:	f000 fc48 	bl	8007e9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	4a31      	ldr	r2, [pc, #196]	; (80076f8 <HAL_TIM_Encoder_Init+0x144>)
 8007632:	4013      	ands	r3, r2
 8007634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	4313      	orrs	r3, r2
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	4a2c      	ldr	r2, [pc, #176]	; (80076fc <HAL_TIM_Encoder_Init+0x148>)
 800764c:	4013      	ands	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	4a2b      	ldr	r2, [pc, #172]	; (8007700 <HAL_TIM_Encoder_Init+0x14c>)
 8007654:	4013      	ands	r3, r2
 8007656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	4313      	orrs	r3, r2
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	011a      	lsls	r2, r3, #4
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	031b      	lsls	r3, r3, #12
 8007676:	4313      	orrs	r3, r2
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2222      	movs	r2, #34	; 0x22
 8007682:	4393      	bics	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2288      	movs	r2, #136	; 0x88
 800768a:	4393      	bics	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	4313      	orrs	r3, r2
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2248      	movs	r2, #72	; 0x48
 80076bc:	2101      	movs	r1, #1
 80076be:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	223e      	movs	r2, #62	; 0x3e
 80076c4:	2101      	movs	r1, #1
 80076c6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	223f      	movs	r2, #63	; 0x3f
 80076cc:	2101      	movs	r1, #1
 80076ce:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2244      	movs	r2, #68	; 0x44
 80076d4:	2101      	movs	r1, #1
 80076d6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2245      	movs	r2, #69	; 0x45
 80076dc:	2101      	movs	r1, #1
 80076de:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	223d      	movs	r2, #61	; 0x3d
 80076e4:	2101      	movs	r1, #1
 80076e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	0018      	movs	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b006      	add	sp, #24
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	46c0      	nop			; (mov r8, r8)
 80076f4:	fffebff8 	.word	0xfffebff8
 80076f8:	fffffcfc 	.word	0xfffffcfc
 80076fc:	fffff3f3 	.word	0xfffff3f3
 8007700:	ffff0f0f 	.word	0xffff0f0f

08007704 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800770e:	200f      	movs	r0, #15
 8007710:	183b      	adds	r3, r7, r0
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	213e      	movs	r1, #62	; 0x3e
 8007716:	5c52      	ldrb	r2, [r2, r1]
 8007718:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800771a:	230e      	movs	r3, #14
 800771c:	18fb      	adds	r3, r7, r3
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	213f      	movs	r1, #63	; 0x3f
 8007722:	5c52      	ldrb	r2, [r2, r1]
 8007724:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007726:	240d      	movs	r4, #13
 8007728:	193b      	adds	r3, r7, r4
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	2144      	movs	r1, #68	; 0x44
 800772e:	5c52      	ldrb	r2, [r2, r1]
 8007730:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007732:	230c      	movs	r3, #12
 8007734:	18fb      	adds	r3, r7, r3
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	2145      	movs	r1, #69	; 0x45
 800773a:	5c52      	ldrb	r2, [r2, r1]
 800773c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d112      	bne.n	800776a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007744:	183b      	adds	r3, r7, r0
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d103      	bne.n	8007754 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800774c:	193b      	adds	r3, r7, r4
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d001      	beq.n	8007758 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e075      	b.n	8007844 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	223e      	movs	r2, #62	; 0x3e
 800775c:	2102      	movs	r1, #2
 800775e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2244      	movs	r2, #68	; 0x44
 8007764:	2102      	movs	r1, #2
 8007766:	5499      	strb	r1, [r3, r2]
 8007768:	e03d      	b.n	80077e6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b04      	cmp	r3, #4
 800776e:	d114      	bne.n	800779a <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007770:	230e      	movs	r3, #14
 8007772:	18fb      	adds	r3, r7, r3
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d104      	bne.n	8007784 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800777a:	230c      	movs	r3, #12
 800777c:	18fb      	adds	r3, r7, r3
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d001      	beq.n	8007788 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e05d      	b.n	8007844 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	223f      	movs	r2, #63	; 0x3f
 800778c:	2102      	movs	r1, #2
 800778e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2245      	movs	r2, #69	; 0x45
 8007794:	2102      	movs	r1, #2
 8007796:	5499      	strb	r1, [r3, r2]
 8007798:	e025      	b.n	80077e6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800779a:	230f      	movs	r3, #15
 800779c:	18fb      	adds	r3, r7, r3
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d10e      	bne.n	80077c2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077a4:	230e      	movs	r3, #14
 80077a6:	18fb      	adds	r3, r7, r3
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d109      	bne.n	80077c2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077ae:	230d      	movs	r3, #13
 80077b0:	18fb      	adds	r3, r7, r3
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d104      	bne.n	80077c2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077b8:	230c      	movs	r3, #12
 80077ba:	18fb      	adds	r3, r7, r3
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d001      	beq.n	80077c6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e03e      	b.n	8007844 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	223e      	movs	r2, #62	; 0x3e
 80077ca:	2102      	movs	r1, #2
 80077cc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	223f      	movs	r2, #63	; 0x3f
 80077d2:	2102      	movs	r1, #2
 80077d4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2244      	movs	r2, #68	; 0x44
 80077da:	2102      	movs	r1, #2
 80077dc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2245      	movs	r2, #69	; 0x45
 80077e2:	2102      	movs	r1, #2
 80077e4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_TIM_Encoder_Start+0xf0>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d008      	beq.n	8007804 <HAL_TIM_Encoder_Start+0x100>
 80077f2:	e00f      	b.n	8007814 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2201      	movs	r2, #1
 80077fa:	2100      	movs	r1, #0
 80077fc:	0018      	movs	r0, r3
 80077fe:	f000 ff23 	bl	8008648 <TIM_CCxChannelCmd>
      break;
 8007802:	e016      	b.n	8007832 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2201      	movs	r2, #1
 800780a:	2104      	movs	r1, #4
 800780c:	0018      	movs	r0, r3
 800780e:	f000 ff1b 	bl	8008648 <TIM_CCxChannelCmd>
      break;
 8007812:	e00e      	b.n	8007832 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2201      	movs	r2, #1
 800781a:	2100      	movs	r1, #0
 800781c:	0018      	movs	r0, r3
 800781e:	f000 ff13 	bl	8008648 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2201      	movs	r2, #1
 8007828:	2104      	movs	r1, #4
 800782a:	0018      	movs	r0, r3
 800782c:	f000 ff0c 	bl	8008648 <TIM_CCxChannelCmd>
      break;
 8007830:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2101      	movs	r1, #1
 800783e:	430a      	orrs	r2, r1
 8007840:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	0018      	movs	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	b005      	add	sp, #20
 800784a:	bd90      	pop	{r4, r7, pc}

0800784c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2202      	movs	r2, #2
 800785c:	4013      	ands	r3, r2
 800785e:	2b02      	cmp	r3, #2
 8007860:	d124      	bne.n	80078ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	2202      	movs	r2, #2
 800786a:	4013      	ands	r3, r2
 800786c:	2b02      	cmp	r3, #2
 800786e:	d11d      	bne.n	80078ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2203      	movs	r2, #3
 8007876:	4252      	negs	r2, r2
 8007878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2203      	movs	r2, #3
 8007888:	4013      	ands	r3, r2
 800788a:	d004      	beq.n	8007896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	0018      	movs	r0, r3
 8007890:	f000 faec 	bl	8007e6c <HAL_TIM_IC_CaptureCallback>
 8007894:	e007      	b.n	80078a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	0018      	movs	r0, r3
 800789a:	f000 fadf 	bl	8007e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f000 faeb 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2204      	movs	r2, #4
 80078b4:	4013      	ands	r3, r2
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d125      	bne.n	8007906 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2204      	movs	r2, #4
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d11e      	bne.n	8007906 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2205      	movs	r2, #5
 80078ce:	4252      	negs	r2, r2
 80078d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699a      	ldr	r2, [r3, #24]
 80078de:	23c0      	movs	r3, #192	; 0xc0
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4013      	ands	r3, r2
 80078e4:	d004      	beq.n	80078f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	0018      	movs	r0, r3
 80078ea:	f000 fabf 	bl	8007e6c <HAL_TIM_IC_CaptureCallback>
 80078ee:	e007      	b.n	8007900 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	0018      	movs	r0, r3
 80078f4:	f000 fab2 	bl	8007e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	0018      	movs	r0, r3
 80078fc:	f000 fabe 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	2208      	movs	r2, #8
 800790e:	4013      	ands	r3, r2
 8007910:	2b08      	cmp	r3, #8
 8007912:	d124      	bne.n	800795e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	2208      	movs	r2, #8
 800791c:	4013      	ands	r3, r2
 800791e:	2b08      	cmp	r3, #8
 8007920:	d11d      	bne.n	800795e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2209      	movs	r2, #9
 8007928:	4252      	negs	r2, r2
 800792a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2204      	movs	r2, #4
 8007930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	2203      	movs	r2, #3
 800793a:	4013      	ands	r3, r2
 800793c:	d004      	beq.n	8007948 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	0018      	movs	r0, r3
 8007942:	f000 fa93 	bl	8007e6c <HAL_TIM_IC_CaptureCallback>
 8007946:	e007      	b.n	8007958 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	0018      	movs	r0, r3
 800794c:	f000 fa86 	bl	8007e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	0018      	movs	r0, r3
 8007954:	f000 fa92 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2210      	movs	r2, #16
 8007966:	4013      	ands	r3, r2
 8007968:	2b10      	cmp	r3, #16
 800796a:	d125      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2210      	movs	r2, #16
 8007974:	4013      	ands	r3, r2
 8007976:	2b10      	cmp	r3, #16
 8007978:	d11e      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2211      	movs	r2, #17
 8007980:	4252      	negs	r2, r2
 8007982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2208      	movs	r2, #8
 8007988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69da      	ldr	r2, [r3, #28]
 8007990:	23c0      	movs	r3, #192	; 0xc0
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4013      	ands	r3, r2
 8007996:	d004      	beq.n	80079a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	0018      	movs	r0, r3
 800799c:	f000 fa66 	bl	8007e6c <HAL_TIM_IC_CaptureCallback>
 80079a0:	e007      	b.n	80079b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	0018      	movs	r0, r3
 80079a6:	f000 fa59 	bl	8007e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	0018      	movs	r0, r3
 80079ae:	f000 fa65 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2201      	movs	r2, #1
 80079c0:	4013      	ands	r3, r2
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d10f      	bne.n	80079e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d108      	bne.n	80079e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2202      	movs	r2, #2
 80079da:	4252      	negs	r2, r2
 80079dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	0018      	movs	r0, r3
 80079e2:	f7fd fa39 	bl	8004e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	2280      	movs	r2, #128	; 0x80
 80079ee:	4013      	ands	r3, r2
 80079f0:	2b80      	cmp	r3, #128	; 0x80
 80079f2:	d10f      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	2280      	movs	r2, #128	; 0x80
 80079fc:	4013      	ands	r3, r2
 80079fe:	2b80      	cmp	r3, #128	; 0x80
 8007a00:	d108      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2281      	movs	r2, #129	; 0x81
 8007a08:	4252      	negs	r2, r2
 8007a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f000 ff54 	bl	80088bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691a      	ldr	r2, [r3, #16]
 8007a1a:	2380      	movs	r3, #128	; 0x80
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	401a      	ands	r2, r3
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d10e      	bne.n	8007a46 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	2280      	movs	r2, #128	; 0x80
 8007a30:	4013      	ands	r3, r2
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d107      	bne.n	8007a46 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a1c      	ldr	r2, [pc, #112]	; (8007aac <HAL_TIM_IRQHandler+0x260>)
 8007a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	0018      	movs	r0, r3
 8007a42:	f000 ff43 	bl	80088cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2240      	movs	r2, #64	; 0x40
 8007a4e:	4013      	ands	r3, r2
 8007a50:	2b40      	cmp	r3, #64	; 0x40
 8007a52:	d10f      	bne.n	8007a74 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	2240      	movs	r2, #64	; 0x40
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	2b40      	cmp	r3, #64	; 0x40
 8007a60:	d108      	bne.n	8007a74 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2241      	movs	r2, #65	; 0x41
 8007a68:	4252      	negs	r2, r2
 8007a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f000 fa0c 	bl	8007e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	d10f      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	d108      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2221      	movs	r2, #33	; 0x21
 8007a96:	4252      	negs	r2, r2
 8007a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f000 ff05 	bl	80088ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	b002      	add	sp, #8
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	fffffeff 	.word	0xfffffeff

08007ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007abc:	2317      	movs	r3, #23
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	223c      	movs	r2, #60	; 0x3c
 8007ac8:	5c9b      	ldrb	r3, [r3, r2]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d101      	bne.n	8007ad2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007ace:	2302      	movs	r3, #2
 8007ad0:	e0e5      	b.n	8007c9e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	223c      	movs	r2, #60	; 0x3c
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b14      	cmp	r3, #20
 8007ade:	d900      	bls.n	8007ae2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007ae0:	e0d1      	b.n	8007c86 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	009a      	lsls	r2, r3, #2
 8007ae6:	4b70      	ldr	r3, [pc, #448]	; (8007ca8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007ae8:	18d3      	adds	r3, r2, r3
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	0011      	movs	r1, r2
 8007af6:	0018      	movs	r0, r3
 8007af8:	f000 fa46 	bl	8007f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2108      	movs	r1, #8
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2104      	movs	r1, #4
 8007b18:	438a      	bics	r2, r1
 8007b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6999      	ldr	r1, [r3, #24]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	619a      	str	r2, [r3, #24]
      break;
 8007b2e:	e0af      	b.n	8007c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	0011      	movs	r1, r2
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f000 faaf 	bl	800809c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699a      	ldr	r2, [r3, #24]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2180      	movs	r1, #128	; 0x80
 8007b4a:	0109      	lsls	r1, r1, #4
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	699a      	ldr	r2, [r3, #24]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4954      	ldr	r1, [pc, #336]	; (8007cac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007b5c:	400a      	ands	r2, r1
 8007b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6999      	ldr	r1, [r3, #24]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	021a      	lsls	r2, r3, #8
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	619a      	str	r2, [r3, #24]
      break;
 8007b74:	e08c      	b.n	8007c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	0011      	movs	r1, r2
 8007b7e:	0018      	movs	r0, r3
 8007b80:	f000 fb10 	bl	80081a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	69da      	ldr	r2, [r3, #28]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2108      	movs	r1, #8
 8007b90:	430a      	orrs	r2, r1
 8007b92:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	69da      	ldr	r2, [r3, #28]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2104      	movs	r1, #4
 8007ba0:	438a      	bics	r2, r1
 8007ba2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69d9      	ldr	r1, [r3, #28]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	691a      	ldr	r2, [r3, #16]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	61da      	str	r2, [r3, #28]
      break;
 8007bb6:	e06b      	b.n	8007c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	0011      	movs	r1, r2
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f000 fb77 	bl	80082b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69da      	ldr	r2, [r3, #28]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2180      	movs	r1, #128	; 0x80
 8007bd2:	0109      	lsls	r1, r1, #4
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	69da      	ldr	r2, [r3, #28]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4932      	ldr	r1, [pc, #200]	; (8007cac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007be4:	400a      	ands	r2, r1
 8007be6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69d9      	ldr	r1, [r3, #28]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	021a      	lsls	r2, r3, #8
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	61da      	str	r2, [r3, #28]
      break;
 8007bfc:	e048      	b.n	8007c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	0011      	movs	r1, r2
 8007c06:	0018      	movs	r0, r3
 8007c08:	f000 fbbe 	bl	8008388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2108      	movs	r1, #8
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2104      	movs	r1, #4
 8007c28:	438a      	bics	r2, r1
 8007c2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	691a      	ldr	r2, [r3, #16]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c3e:	e027      	b.n	8007c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	0011      	movs	r1, r2
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f000 fbfd 	bl	8008448 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2180      	movs	r1, #128	; 0x80
 8007c5a:	0109      	lsls	r1, r1, #4
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4910      	ldr	r1, [pc, #64]	; (8007cac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007c6c:	400a      	ands	r2, r1
 8007c6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	021a      	lsls	r2, r3, #8
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c84:	e004      	b.n	8007c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007c86:	2317      	movs	r3, #23
 8007c88:	18fb      	adds	r3, r7, r3
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	701a      	strb	r2, [r3, #0]
      break;
 8007c8e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	223c      	movs	r2, #60	; 0x3c
 8007c94:	2100      	movs	r1, #0
 8007c96:	5499      	strb	r1, [r3, r2]

  return status;
 8007c98:	2317      	movs	r3, #23
 8007c9a:	18fb      	adds	r3, r7, r3
 8007c9c:	781b      	ldrb	r3, [r3, #0]
}
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	b006      	add	sp, #24
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	080110e0 	.word	0x080110e0
 8007cac:	fffffbff 	.word	0xfffffbff

08007cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cba:	230f      	movs	r3, #15
 8007cbc:	18fb      	adds	r3, r7, r3
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	223c      	movs	r2, #60	; 0x3c
 8007cc6:	5c9b      	ldrb	r3, [r3, r2]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_TIM_ConfigClockSource+0x20>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e0bc      	b.n	8007e4a <HAL_TIM_ConfigClockSource+0x19a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	223c      	movs	r2, #60	; 0x3c
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	223d      	movs	r2, #61	; 0x3d
 8007cdc:	2102      	movs	r1, #2
 8007cde:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4a5a      	ldr	r2, [pc, #360]	; (8007e54 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007cec:	4013      	ands	r3, r2
 8007cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	4a59      	ldr	r2, [pc, #356]	; (8007e58 <HAL_TIM_ConfigClockSource+0x1a8>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2280      	movs	r2, #128	; 0x80
 8007d06:	0192      	lsls	r2, r2, #6
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d040      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0xde>
 8007d0c:	2280      	movs	r2, #128	; 0x80
 8007d0e:	0192      	lsls	r2, r2, #6
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d900      	bls.n	8007d16 <HAL_TIM_ConfigClockSource+0x66>
 8007d14:	e088      	b.n	8007e28 <HAL_TIM_ConfigClockSource+0x178>
 8007d16:	2280      	movs	r2, #128	; 0x80
 8007d18:	0152      	lsls	r2, r2, #5
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d100      	bne.n	8007d20 <HAL_TIM_ConfigClockSource+0x70>
 8007d1e:	e088      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x182>
 8007d20:	2280      	movs	r2, #128	; 0x80
 8007d22:	0152      	lsls	r2, r2, #5
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d900      	bls.n	8007d2a <HAL_TIM_ConfigClockSource+0x7a>
 8007d28:	e07e      	b.n	8007e28 <HAL_TIM_ConfigClockSource+0x178>
 8007d2a:	2b70      	cmp	r3, #112	; 0x70
 8007d2c:	d018      	beq.n	8007d60 <HAL_TIM_ConfigClockSource+0xb0>
 8007d2e:	d900      	bls.n	8007d32 <HAL_TIM_ConfigClockSource+0x82>
 8007d30:	e07a      	b.n	8007e28 <HAL_TIM_ConfigClockSource+0x178>
 8007d32:	2b60      	cmp	r3, #96	; 0x60
 8007d34:	d04f      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0x126>
 8007d36:	d900      	bls.n	8007d3a <HAL_TIM_ConfigClockSource+0x8a>
 8007d38:	e076      	b.n	8007e28 <HAL_TIM_ConfigClockSource+0x178>
 8007d3a:	2b50      	cmp	r3, #80	; 0x50
 8007d3c:	d03b      	beq.n	8007db6 <HAL_TIM_ConfigClockSource+0x106>
 8007d3e:	d900      	bls.n	8007d42 <HAL_TIM_ConfigClockSource+0x92>
 8007d40:	e072      	b.n	8007e28 <HAL_TIM_ConfigClockSource+0x178>
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d057      	beq.n	8007df6 <HAL_TIM_ConfigClockSource+0x146>
 8007d46:	d900      	bls.n	8007d4a <HAL_TIM_ConfigClockSource+0x9a>
 8007d48:	e06e      	b.n	8007e28 <HAL_TIM_ConfigClockSource+0x178>
 8007d4a:	2b30      	cmp	r3, #48	; 0x30
 8007d4c:	d063      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0x166>
 8007d4e:	d86b      	bhi.n	8007e28 <HAL_TIM_ConfigClockSource+0x178>
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	d060      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0x166>
 8007d54:	d868      	bhi.n	8007e28 <HAL_TIM_ConfigClockSource+0x178>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d05d      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0x166>
 8007d5a:	2b10      	cmp	r3, #16
 8007d5c:	d05b      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0x166>
 8007d5e:	e063      	b.n	8007e28 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d70:	f000 fc4a 	bl	8008608 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2277      	movs	r2, #119	; 0x77
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	609a      	str	r2, [r3, #8]
      break;
 8007d8c:	e052      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d9e:	f000 fc33 	bl	8008608 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2180      	movs	r1, #128	; 0x80
 8007dae:	01c9      	lsls	r1, r1, #7
 8007db0:	430a      	orrs	r2, r1
 8007db2:	609a      	str	r2, [r3, #8]
      break;
 8007db4:	e03e      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc2:	001a      	movs	r2, r3
 8007dc4:	f000 fba4 	bl	8008510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2150      	movs	r1, #80	; 0x50
 8007dce:	0018      	movs	r0, r3
 8007dd0:	f000 fbfe 	bl	80085d0 <TIM_ITRx_SetConfig>
      break;
 8007dd4:	e02e      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007de2:	001a      	movs	r2, r3
 8007de4:	f000 fbc2 	bl	800856c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2160      	movs	r1, #96	; 0x60
 8007dee:	0018      	movs	r0, r3
 8007df0:	f000 fbee 	bl	80085d0 <TIM_ITRx_SetConfig>
      break;
 8007df4:	e01e      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e02:	001a      	movs	r2, r3
 8007e04:	f000 fb84 	bl	8008510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2140      	movs	r1, #64	; 0x40
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f000 fbde 	bl	80085d0 <TIM_ITRx_SetConfig>
      break;
 8007e14:	e00e      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	0019      	movs	r1, r3
 8007e20:	0010      	movs	r0, r2
 8007e22:	f000 fbd5 	bl	80085d0 <TIM_ITRx_SetConfig>
      break;
 8007e26:	e005      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007e28:	230f      	movs	r3, #15
 8007e2a:	18fb      	adds	r3, r7, r3
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	701a      	strb	r2, [r3, #0]
      break;
 8007e30:	e000      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007e32:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	223d      	movs	r2, #61	; 0x3d
 8007e38:	2101      	movs	r1, #1
 8007e3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	223c      	movs	r2, #60	; 0x3c
 8007e40:	2100      	movs	r1, #0
 8007e42:	5499      	strb	r1, [r3, r2]

  return status;
 8007e44:	230f      	movs	r3, #15
 8007e46:	18fb      	adds	r3, r7, r3
 8007e48:	781b      	ldrb	r3, [r3, #0]
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b004      	add	sp, #16
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	ffceff88 	.word	0xffceff88
 8007e58:	ffff00ff 	.word	0xffff00ff

08007e5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e64:	46c0      	nop			; (mov r8, r8)
 8007e66:	46bd      	mov	sp, r7
 8007e68:	b002      	add	sp, #8
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e74:	46c0      	nop			; (mov r8, r8)
 8007e76:	46bd      	mov	sp, r7
 8007e78:	b002      	add	sp, #8
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e84:	46c0      	nop			; (mov r8, r8)
 8007e86:	46bd      	mov	sp, r7
 8007e88:	b002      	add	sp, #8
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e94:	46c0      	nop			; (mov r8, r8)
 8007e96:	46bd      	mov	sp, r7
 8007e98:	b002      	add	sp, #8
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a2f      	ldr	r2, [pc, #188]	; (8007f6c <TIM_Base_SetConfig+0xd0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d003      	beq.n	8007ebc <TIM_Base_SetConfig+0x20>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a2e      	ldr	r2, [pc, #184]	; (8007f70 <TIM_Base_SetConfig+0xd4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d108      	bne.n	8007ece <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2270      	movs	r2, #112	; 0x70
 8007ec0:	4393      	bics	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a26      	ldr	r2, [pc, #152]	; (8007f6c <TIM_Base_SetConfig+0xd0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d013      	beq.n	8007efe <TIM_Base_SetConfig+0x62>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a25      	ldr	r2, [pc, #148]	; (8007f70 <TIM_Base_SetConfig+0xd4>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00f      	beq.n	8007efe <TIM_Base_SetConfig+0x62>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a24      	ldr	r2, [pc, #144]	; (8007f74 <TIM_Base_SetConfig+0xd8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00b      	beq.n	8007efe <TIM_Base_SetConfig+0x62>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a23      	ldr	r2, [pc, #140]	; (8007f78 <TIM_Base_SetConfig+0xdc>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d007      	beq.n	8007efe <TIM_Base_SetConfig+0x62>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a22      	ldr	r2, [pc, #136]	; (8007f7c <TIM_Base_SetConfig+0xe0>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d003      	beq.n	8007efe <TIM_Base_SetConfig+0x62>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a21      	ldr	r2, [pc, #132]	; (8007f80 <TIM_Base_SetConfig+0xe4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d108      	bne.n	8007f10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4a20      	ldr	r2, [pc, #128]	; (8007f84 <TIM_Base_SetConfig+0xe8>)
 8007f02:	4013      	ands	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2280      	movs	r2, #128	; 0x80
 8007f14:	4393      	bics	r3, r2
 8007f16:	001a      	movs	r2, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	689a      	ldr	r2, [r3, #8]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a0c      	ldr	r2, [pc, #48]	; (8007f6c <TIM_Base_SetConfig+0xd0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00b      	beq.n	8007f56 <TIM_Base_SetConfig+0xba>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a0d      	ldr	r2, [pc, #52]	; (8007f78 <TIM_Base_SetConfig+0xdc>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d007      	beq.n	8007f56 <TIM_Base_SetConfig+0xba>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a0c      	ldr	r2, [pc, #48]	; (8007f7c <TIM_Base_SetConfig+0xe0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d003      	beq.n	8007f56 <TIM_Base_SetConfig+0xba>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a0b      	ldr	r2, [pc, #44]	; (8007f80 <TIM_Base_SetConfig+0xe4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d103      	bne.n	8007f5e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	691a      	ldr	r2, [r3, #16]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	615a      	str	r2, [r3, #20]
}
 8007f64:	46c0      	nop			; (mov r8, r8)
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b004      	add	sp, #16
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40012c00 	.word	0x40012c00
 8007f70:	40000400 	.word	0x40000400
 8007f74:	40002000 	.word	0x40002000
 8007f78:	40014000 	.word	0x40014000
 8007f7c:	40014400 	.word	0x40014400
 8007f80:	40014800 	.word	0x40014800
 8007f84:	fffffcff 	.word	0xfffffcff

08007f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	2201      	movs	r2, #1
 8007f98:	4393      	bics	r3, r2
 8007f9a:	001a      	movs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4a32      	ldr	r2, [pc, #200]	; (8008080 <TIM_OC1_SetConfig+0xf8>)
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	4393      	bics	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	4393      	bics	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a28      	ldr	r2, [pc, #160]	; (8008084 <TIM_OC1_SetConfig+0xfc>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <TIM_OC1_SetConfig+0x76>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a27      	ldr	r2, [pc, #156]	; (8008088 <TIM_OC1_SetConfig+0x100>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d007      	beq.n	8007ffe <TIM_OC1_SetConfig+0x76>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a26      	ldr	r2, [pc, #152]	; (800808c <TIM_OC1_SetConfig+0x104>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_OC1_SetConfig+0x76>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a25      	ldr	r2, [pc, #148]	; (8008090 <TIM_OC1_SetConfig+0x108>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d10c      	bne.n	8008018 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2208      	movs	r2, #8
 8008002:	4393      	bics	r3, r2
 8008004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	4313      	orrs	r3, r2
 800800e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2204      	movs	r2, #4
 8008014:	4393      	bics	r3, r2
 8008016:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a1a      	ldr	r2, [pc, #104]	; (8008084 <TIM_OC1_SetConfig+0xfc>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d00b      	beq.n	8008038 <TIM_OC1_SetConfig+0xb0>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a19      	ldr	r2, [pc, #100]	; (8008088 <TIM_OC1_SetConfig+0x100>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d007      	beq.n	8008038 <TIM_OC1_SetConfig+0xb0>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a18      	ldr	r2, [pc, #96]	; (800808c <TIM_OC1_SetConfig+0x104>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d003      	beq.n	8008038 <TIM_OC1_SetConfig+0xb0>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a17      	ldr	r2, [pc, #92]	; (8008090 <TIM_OC1_SetConfig+0x108>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d111      	bne.n	800805c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	4a16      	ldr	r2, [pc, #88]	; (8008094 <TIM_OC1_SetConfig+0x10c>)
 800803c:	4013      	ands	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	4a15      	ldr	r2, [pc, #84]	; (8008098 <TIM_OC1_SetConfig+0x110>)
 8008044:	4013      	ands	r3, r2
 8008046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	621a      	str	r2, [r3, #32]
}
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	46bd      	mov	sp, r7
 800807a:	b006      	add	sp, #24
 800807c:	bd80      	pop	{r7, pc}
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	fffeff8f 	.word	0xfffeff8f
 8008084:	40012c00 	.word	0x40012c00
 8008088:	40014000 	.word	0x40014000
 800808c:	40014400 	.word	0x40014400
 8008090:	40014800 	.word	0x40014800
 8008094:	fffffeff 	.word	0xfffffeff
 8008098:	fffffdff 	.word	0xfffffdff

0800809c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	2210      	movs	r2, #16
 80080ac:	4393      	bics	r3, r2
 80080ae:	001a      	movs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4a2e      	ldr	r2, [pc, #184]	; (8008184 <TIM_OC2_SetConfig+0xe8>)
 80080ca:	4013      	ands	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4a2d      	ldr	r2, [pc, #180]	; (8008188 <TIM_OC2_SetConfig+0xec>)
 80080d2:	4013      	ands	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	021b      	lsls	r3, r3, #8
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2220      	movs	r2, #32
 80080e6:	4393      	bics	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a24      	ldr	r2, [pc, #144]	; (800818c <TIM_OC2_SetConfig+0xf0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d10d      	bne.n	800811a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2280      	movs	r2, #128	; 0x80
 8008102:	4393      	bics	r3, r2
 8008104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	4313      	orrs	r3, r2
 8008110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2240      	movs	r2, #64	; 0x40
 8008116:	4393      	bics	r3, r2
 8008118:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a1b      	ldr	r2, [pc, #108]	; (800818c <TIM_OC2_SetConfig+0xf0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00b      	beq.n	800813a <TIM_OC2_SetConfig+0x9e>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a1a      	ldr	r2, [pc, #104]	; (8008190 <TIM_OC2_SetConfig+0xf4>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d007      	beq.n	800813a <TIM_OC2_SetConfig+0x9e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a19      	ldr	r2, [pc, #100]	; (8008194 <TIM_OC2_SetConfig+0xf8>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d003      	beq.n	800813a <TIM_OC2_SetConfig+0x9e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a18      	ldr	r2, [pc, #96]	; (8008198 <TIM_OC2_SetConfig+0xfc>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d113      	bne.n	8008162 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	4a17      	ldr	r2, [pc, #92]	; (800819c <TIM_OC2_SetConfig+0x100>)
 800813e:	4013      	ands	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	4a16      	ldr	r2, [pc, #88]	; (80081a0 <TIM_OC2_SetConfig+0x104>)
 8008146:	4013      	ands	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	4313      	orrs	r3, r2
 8008160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	621a      	str	r2, [r3, #32]
}
 800817c:	46c0      	nop			; (mov r8, r8)
 800817e:	46bd      	mov	sp, r7
 8008180:	b006      	add	sp, #24
 8008182:	bd80      	pop	{r7, pc}
 8008184:	feff8fff 	.word	0xfeff8fff
 8008188:	fffffcff 	.word	0xfffffcff
 800818c:	40012c00 	.word	0x40012c00
 8008190:	40014000 	.word	0x40014000
 8008194:	40014400 	.word	0x40014400
 8008198:	40014800 	.word	0x40014800
 800819c:	fffffbff 	.word	0xfffffbff
 80081a0:	fffff7ff 	.word	0xfffff7ff

080081a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	4a35      	ldr	r2, [pc, #212]	; (8008288 <TIM_OC3_SetConfig+0xe4>)
 80081b4:	401a      	ands	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4a2f      	ldr	r2, [pc, #188]	; (800828c <TIM_OC3_SetConfig+0xe8>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2203      	movs	r2, #3
 80081d8:	4393      	bics	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	4a29      	ldr	r2, [pc, #164]	; (8008290 <TIM_OC3_SetConfig+0xec>)
 80081ea:	4013      	ands	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a25      	ldr	r2, [pc, #148]	; (8008294 <TIM_OC3_SetConfig+0xf0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d10d      	bne.n	800821e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	4a24      	ldr	r2, [pc, #144]	; (8008298 <TIM_OC3_SetConfig+0xf4>)
 8008206:	4013      	ands	r3, r2
 8008208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	4313      	orrs	r3, r2
 8008214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	4a20      	ldr	r2, [pc, #128]	; (800829c <TIM_OC3_SetConfig+0xf8>)
 800821a:	4013      	ands	r3, r2
 800821c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a1c      	ldr	r2, [pc, #112]	; (8008294 <TIM_OC3_SetConfig+0xf0>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d00b      	beq.n	800823e <TIM_OC3_SetConfig+0x9a>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a1d      	ldr	r2, [pc, #116]	; (80082a0 <TIM_OC3_SetConfig+0xfc>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d007      	beq.n	800823e <TIM_OC3_SetConfig+0x9a>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a1c      	ldr	r2, [pc, #112]	; (80082a4 <TIM_OC3_SetConfig+0x100>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d003      	beq.n	800823e <TIM_OC3_SetConfig+0x9a>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a1b      	ldr	r2, [pc, #108]	; (80082a8 <TIM_OC3_SetConfig+0x104>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d113      	bne.n	8008266 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	4a1a      	ldr	r2, [pc, #104]	; (80082ac <TIM_OC3_SetConfig+0x108>)
 8008242:	4013      	ands	r3, r2
 8008244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	4a19      	ldr	r2, [pc, #100]	; (80082b0 <TIM_OC3_SetConfig+0x10c>)
 800824a:	4013      	ands	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	4313      	orrs	r3, r2
 8008258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	4313      	orrs	r3, r2
 8008264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	621a      	str	r2, [r3, #32]
}
 8008280:	46c0      	nop			; (mov r8, r8)
 8008282:	46bd      	mov	sp, r7
 8008284:	b006      	add	sp, #24
 8008286:	bd80      	pop	{r7, pc}
 8008288:	fffffeff 	.word	0xfffffeff
 800828c:	fffeff8f 	.word	0xfffeff8f
 8008290:	fffffdff 	.word	0xfffffdff
 8008294:	40012c00 	.word	0x40012c00
 8008298:	fffff7ff 	.word	0xfffff7ff
 800829c:	fffffbff 	.word	0xfffffbff
 80082a0:	40014000 	.word	0x40014000
 80082a4:	40014400 	.word	0x40014400
 80082a8:	40014800 	.word	0x40014800
 80082ac:	ffffefff 	.word	0xffffefff
 80082b0:	ffffdfff 	.word	0xffffdfff

080082b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	4a28      	ldr	r2, [pc, #160]	; (8008364 <TIM_OC4_SetConfig+0xb0>)
 80082c4:	401a      	ands	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4a22      	ldr	r2, [pc, #136]	; (8008368 <TIM_OC4_SetConfig+0xb4>)
 80082e0:	4013      	ands	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4a21      	ldr	r2, [pc, #132]	; (800836c <TIM_OC4_SetConfig+0xb8>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	021b      	lsls	r3, r3, #8
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	4a1d      	ldr	r2, [pc, #116]	; (8008370 <TIM_OC4_SetConfig+0xbc>)
 80082fc:	4013      	ands	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	031b      	lsls	r3, r3, #12
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4313      	orrs	r3, r2
 800830a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a19      	ldr	r2, [pc, #100]	; (8008374 <TIM_OC4_SetConfig+0xc0>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00b      	beq.n	800832c <TIM_OC4_SetConfig+0x78>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a18      	ldr	r2, [pc, #96]	; (8008378 <TIM_OC4_SetConfig+0xc4>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d007      	beq.n	800832c <TIM_OC4_SetConfig+0x78>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a17      	ldr	r2, [pc, #92]	; (800837c <TIM_OC4_SetConfig+0xc8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d003      	beq.n	800832c <TIM_OC4_SetConfig+0x78>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a16      	ldr	r2, [pc, #88]	; (8008380 <TIM_OC4_SetConfig+0xcc>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d109      	bne.n	8008340 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	4a15      	ldr	r2, [pc, #84]	; (8008384 <TIM_OC4_SetConfig+0xd0>)
 8008330:	4013      	ands	r3, r2
 8008332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	019b      	lsls	r3, r3, #6
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	46bd      	mov	sp, r7
 800835e:	b006      	add	sp, #24
 8008360:	bd80      	pop	{r7, pc}
 8008362:	46c0      	nop			; (mov r8, r8)
 8008364:	ffffefff 	.word	0xffffefff
 8008368:	feff8fff 	.word	0xfeff8fff
 800836c:	fffffcff 	.word	0xfffffcff
 8008370:	ffffdfff 	.word	0xffffdfff
 8008374:	40012c00 	.word	0x40012c00
 8008378:	40014000 	.word	0x40014000
 800837c:	40014400 	.word	0x40014400
 8008380:	40014800 	.word	0x40014800
 8008384:	ffffbfff 	.word	0xffffbfff

08008388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	4a25      	ldr	r2, [pc, #148]	; (800842c <TIM_OC5_SetConfig+0xa4>)
 8008398:	401a      	ands	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4a1f      	ldr	r2, [pc, #124]	; (8008430 <TIM_OC5_SetConfig+0xa8>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	4a1b      	ldr	r2, [pc, #108]	; (8008434 <TIM_OC5_SetConfig+0xac>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	041b      	lsls	r3, r3, #16
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a17      	ldr	r2, [pc, #92]	; (8008438 <TIM_OC5_SetConfig+0xb0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d00b      	beq.n	80083f6 <TIM_OC5_SetConfig+0x6e>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a16      	ldr	r2, [pc, #88]	; (800843c <TIM_OC5_SetConfig+0xb4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d007      	beq.n	80083f6 <TIM_OC5_SetConfig+0x6e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a15      	ldr	r2, [pc, #84]	; (8008440 <TIM_OC5_SetConfig+0xb8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d003      	beq.n	80083f6 <TIM_OC5_SetConfig+0x6e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a14      	ldr	r2, [pc, #80]	; (8008444 <TIM_OC5_SetConfig+0xbc>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d109      	bne.n	800840a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	4a0c      	ldr	r2, [pc, #48]	; (800842c <TIM_OC5_SetConfig+0xa4>)
 80083fa:	4013      	ands	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	621a      	str	r2, [r3, #32]
}
 8008424:	46c0      	nop			; (mov r8, r8)
 8008426:	46bd      	mov	sp, r7
 8008428:	b006      	add	sp, #24
 800842a:	bd80      	pop	{r7, pc}
 800842c:	fffeffff 	.word	0xfffeffff
 8008430:	fffeff8f 	.word	0xfffeff8f
 8008434:	fffdffff 	.word	0xfffdffff
 8008438:	40012c00 	.word	0x40012c00
 800843c:	40014000 	.word	0x40014000
 8008440:	40014400 	.word	0x40014400
 8008444:	40014800 	.word	0x40014800

08008448 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	4a26      	ldr	r2, [pc, #152]	; (80084f0 <TIM_OC6_SetConfig+0xa8>)
 8008458:	401a      	ands	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4a20      	ldr	r2, [pc, #128]	; (80084f4 <TIM_OC6_SetConfig+0xac>)
 8008474:	4013      	ands	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	4a1c      	ldr	r2, [pc, #112]	; (80084f8 <TIM_OC6_SetConfig+0xb0>)
 8008488:	4013      	ands	r3, r2
 800848a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	051b      	lsls	r3, r3, #20
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a18      	ldr	r2, [pc, #96]	; (80084fc <TIM_OC6_SetConfig+0xb4>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00b      	beq.n	80084b8 <TIM_OC6_SetConfig+0x70>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a17      	ldr	r2, [pc, #92]	; (8008500 <TIM_OC6_SetConfig+0xb8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d007      	beq.n	80084b8 <TIM_OC6_SetConfig+0x70>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a16      	ldr	r2, [pc, #88]	; (8008504 <TIM_OC6_SetConfig+0xbc>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d003      	beq.n	80084b8 <TIM_OC6_SetConfig+0x70>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a15      	ldr	r2, [pc, #84]	; (8008508 <TIM_OC6_SetConfig+0xc0>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d109      	bne.n	80084cc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	4a14      	ldr	r2, [pc, #80]	; (800850c <TIM_OC6_SetConfig+0xc4>)
 80084bc:	4013      	ands	r3, r2
 80084be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	029b      	lsls	r3, r3, #10
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	621a      	str	r2, [r3, #32]
}
 80084e6:	46c0      	nop			; (mov r8, r8)
 80084e8:	46bd      	mov	sp, r7
 80084ea:	b006      	add	sp, #24
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	ffefffff 	.word	0xffefffff
 80084f4:	feff8fff 	.word	0xfeff8fff
 80084f8:	ffdfffff 	.word	0xffdfffff
 80084fc:	40012c00 	.word	0x40012c00
 8008500:	40014000 	.word	0x40014000
 8008504:	40014400 	.word	0x40014400
 8008508:	40014800 	.word	0x40014800
 800850c:	fffbffff 	.word	0xfffbffff

08008510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	2201      	movs	r2, #1
 8008528:	4393      	bics	r3, r2
 800852a:	001a      	movs	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	22f0      	movs	r2, #240	; 0xf0
 800853a:	4393      	bics	r3, r2
 800853c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	220a      	movs	r2, #10
 800854c:	4393      	bics	r3, r2
 800854e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	4313      	orrs	r3, r2
 8008556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	621a      	str	r2, [r3, #32]
}
 8008564:	46c0      	nop			; (mov r8, r8)
 8008566:	46bd      	mov	sp, r7
 8008568:	b006      	add	sp, #24
 800856a:	bd80      	pop	{r7, pc}

0800856c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6a1b      	ldr	r3, [r3, #32]
 800857c:	2210      	movs	r2, #16
 800857e:	4393      	bics	r3, r2
 8008580:	001a      	movs	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	4a0d      	ldr	r2, [pc, #52]	; (80085cc <TIM_TI2_ConfigInputStage+0x60>)
 8008596:	4013      	ands	r3, r2
 8008598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	031b      	lsls	r3, r3, #12
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	22a0      	movs	r2, #160	; 0xa0
 80085a8:	4393      	bics	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	621a      	str	r2, [r3, #32]
}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	46bd      	mov	sp, r7
 80085c6:	b006      	add	sp, #24
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	46c0      	nop			; (mov r8, r8)
 80085cc:	ffff0fff 	.word	0xffff0fff

080085d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4a08      	ldr	r2, [pc, #32]	; (8008604 <TIM_ITRx_SetConfig+0x34>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	2207      	movs	r2, #7
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	609a      	str	r2, [r3, #8]
}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	46bd      	mov	sp, r7
 80085fe:	b004      	add	sp, #16
 8008600:	bd80      	pop	{r7, pc}
 8008602:	46c0      	nop			; (mov r8, r8)
 8008604:	ffcfff8f 	.word	0xffcfff8f

08008608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	4a09      	ldr	r2, [pc, #36]	; (8008644 <TIM_ETR_SetConfig+0x3c>)
 8008620:	4013      	ands	r3, r2
 8008622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	021a      	lsls	r2, r3, #8
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	431a      	orrs	r2, r3
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	4313      	orrs	r3, r2
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	609a      	str	r2, [r3, #8]
}
 800863c:	46c0      	nop			; (mov r8, r8)
 800863e:	46bd      	mov	sp, r7
 8008640:	b006      	add	sp, #24
 8008642:	bd80      	pop	{r7, pc}
 8008644:	ffff00ff 	.word	0xffff00ff

08008648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	221f      	movs	r2, #31
 8008658:	4013      	ands	r3, r2
 800865a:	2201      	movs	r2, #1
 800865c:	409a      	lsls	r2, r3
 800865e:	0013      	movs	r3, r2
 8008660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	43d2      	mvns	r2, r2
 800866a:	401a      	ands	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a1a      	ldr	r2, [r3, #32]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	211f      	movs	r1, #31
 8008678:	400b      	ands	r3, r1
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4099      	lsls	r1, r3
 800867e:	000b      	movs	r3, r1
 8008680:	431a      	orrs	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	621a      	str	r2, [r3, #32]
}
 8008686:	46c0      	nop			; (mov r8, r8)
 8008688:	46bd      	mov	sp, r7
 800868a:	b006      	add	sp, #24
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	223c      	movs	r2, #60	; 0x3c
 800869e:	5c9b      	ldrb	r3, [r3, r2]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d101      	bne.n	80086a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086a4:	2302      	movs	r3, #2
 80086a6:	e04f      	b.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	223c      	movs	r2, #60	; 0x3c
 80086ac:	2101      	movs	r1, #1
 80086ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	223d      	movs	r2, #61	; 0x3d
 80086b4:	2102      	movs	r1, #2
 80086b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a20      	ldr	r2, [pc, #128]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d108      	bne.n	80086e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4a1f      	ldr	r2, [pc, #124]	; (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086d6:	4013      	ands	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2270      	movs	r2, #112	; 0x70
 80086e8:	4393      	bics	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a13      	ldr	r2, [pc, #76]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d009      	beq.n	800871c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a12      	ldr	r2, [pc, #72]	; (8008758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d004      	beq.n	800871c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a11      	ldr	r2, [pc, #68]	; (800875c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d10c      	bne.n	8008736 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2280      	movs	r2, #128	; 0x80
 8008720:	4393      	bics	r3, r2
 8008722:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	4313      	orrs	r3, r2
 800872c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	223d      	movs	r2, #61	; 0x3d
 800873a:	2101      	movs	r1, #1
 800873c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	223c      	movs	r2, #60	; 0x3c
 8008742:	2100      	movs	r1, #0
 8008744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	0018      	movs	r0, r3
 800874a:	46bd      	mov	sp, r7
 800874c:	b004      	add	sp, #16
 800874e:	bd80      	pop	{r7, pc}
 8008750:	40012c00 	.word	0x40012c00
 8008754:	ff0fffff 	.word	0xff0fffff
 8008758:	40000400 	.word	0x40000400
 800875c:	40014000 	.word	0x40014000

08008760 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	223c      	movs	r2, #60	; 0x3c
 8008772:	5c9b      	ldrb	r3, [r3, r2]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d101      	bne.n	800877c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008778:	2302      	movs	r3, #2
 800877a:	e079      	b.n	8008870 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	223c      	movs	r2, #60	; 0x3c
 8008780:	2101      	movs	r1, #1
 8008782:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	22ff      	movs	r2, #255	; 0xff
 8008788:	4393      	bics	r3, r2
 800878a:	001a      	movs	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	4313      	orrs	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4a38      	ldr	r2, [pc, #224]	; (8008878 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008798:	401a      	ands	r2, r3
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4a35      	ldr	r2, [pc, #212]	; (800887c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80087a6:	401a      	ands	r2, r3
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a33      	ldr	r2, [pc, #204]	; (8008880 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80087b4:	401a      	ands	r2, r3
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4a30      	ldr	r2, [pc, #192]	; (8008884 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80087c2:	401a      	ands	r2, r3
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4a2e      	ldr	r2, [pc, #184]	; (8008888 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80087d0:	401a      	ands	r2, r3
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4a2b      	ldr	r2, [pc, #172]	; (800888c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80087de:	401a      	ands	r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4a29      	ldr	r2, [pc, #164]	; (8008890 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80087ec:	401a      	ands	r2, r3
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	041b      	lsls	r3, r3, #16
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a25      	ldr	r2, [pc, #148]	; (8008894 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d106      	bne.n	8008810 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4a24      	ldr	r2, [pc, #144]	; (8008898 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008806:	401a      	ands	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d121      	bne.n	800885e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4a1f      	ldr	r2, [pc, #124]	; (800889c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800881e:	401a      	ands	r2, r3
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008824:	051b      	lsls	r3, r3, #20
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4a1c      	ldr	r2, [pc, #112]	; (80088a0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800882e:	401a      	ands	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	6a1b      	ldr	r3, [r3, #32]
 8008834:	4313      	orrs	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4a1a      	ldr	r2, [pc, #104]	; (80088a4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800883c:	401a      	ands	r2, r3
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a12      	ldr	r2, [pc, #72]	; (8008894 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d106      	bne.n	800885e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a15      	ldr	r2, [pc, #84]	; (80088a8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008854:	401a      	ands	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885a:	4313      	orrs	r3, r2
 800885c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	223c      	movs	r2, #60	; 0x3c
 800886a:	2100      	movs	r1, #0
 800886c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	0018      	movs	r0, r3
 8008872:	46bd      	mov	sp, r7
 8008874:	b004      	add	sp, #16
 8008876:	bd80      	pop	{r7, pc}
 8008878:	fffffcff 	.word	0xfffffcff
 800887c:	fffffbff 	.word	0xfffffbff
 8008880:	fffff7ff 	.word	0xfffff7ff
 8008884:	ffffefff 	.word	0xffffefff
 8008888:	ffffdfff 	.word	0xffffdfff
 800888c:	ffffbfff 	.word	0xffffbfff
 8008890:	fff0ffff 	.word	0xfff0ffff
 8008894:	40012c00 	.word	0x40012c00
 8008898:	efffffff 	.word	0xefffffff
 800889c:	ff0fffff 	.word	0xff0fffff
 80088a0:	feffffff 	.word	0xfeffffff
 80088a4:	fdffffff 	.word	0xfdffffff
 80088a8:	dfffffff 	.word	0xdfffffff

080088ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088b4:	46c0      	nop			; (mov r8, r8)
 80088b6:	46bd      	mov	sp, r7
 80088b8:	b002      	add	sp, #8
 80088ba:	bd80      	pop	{r7, pc}

080088bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088c4:	46c0      	nop			; (mov r8, r8)
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b002      	add	sp, #8
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088d4:	46c0      	nop			; (mov r8, r8)
 80088d6:	46bd      	mov	sp, r7
 80088d8:	b002      	add	sp, #8
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e046      	b.n	800897c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2288      	movs	r2, #136	; 0x88
 80088f2:	589b      	ldr	r3, [r3, r2]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d107      	bne.n	8008908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2284      	movs	r2, #132	; 0x84
 80088fc:	2100      	movs	r1, #0
 80088fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	0018      	movs	r0, r3
 8008904:	f7fb fd28 	bl	8004358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2288      	movs	r2, #136	; 0x88
 800890c:	2124      	movs	r1, #36	; 0x24
 800890e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2101      	movs	r1, #1
 800891c:	438a      	bics	r2, r1
 800891e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	0018      	movs	r0, r3
 8008924:	f000 fc66 	bl	80091f4 <UART_SetConfig>
 8008928:	0003      	movs	r3, r0
 800892a:	2b01      	cmp	r3, #1
 800892c:	d101      	bne.n	8008932 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e024      	b.n	800897c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	0018      	movs	r0, r3
 800893e:	f000 fdfd 	bl	800953c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	490d      	ldr	r1, [pc, #52]	; (8008984 <HAL_UART_Init+0xa8>)
 800894e:	400a      	ands	r2, r1
 8008950:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	212a      	movs	r1, #42	; 0x2a
 800895e:	438a      	bics	r2, r1
 8008960:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2101      	movs	r1, #1
 800896e:	430a      	orrs	r2, r1
 8008970:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	0018      	movs	r0, r3
 8008976:	f000 fe95 	bl	80096a4 <UART_CheckIdleState>
 800897a:	0003      	movs	r3, r0
}
 800897c:	0018      	movs	r0, r3
 800897e:	46bd      	mov	sp, r7
 8008980:	b002      	add	sp, #8
 8008982:	bd80      	pop	{r7, pc}
 8008984:	ffffb7ff 	.word	0xffffb7ff

08008988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	; 0x28
 800898c:	af02      	add	r7, sp, #8
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	1dbb      	adds	r3, r7, #6
 8008996:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2288      	movs	r2, #136	; 0x88
 800899c:	589b      	ldr	r3, [r3, r2]
 800899e:	2b20      	cmp	r3, #32
 80089a0:	d000      	beq.n	80089a4 <HAL_UART_Transmit+0x1c>
 80089a2:	e088      	b.n	8008ab6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_UART_Transmit+0x2a>
 80089aa:	1dbb      	adds	r3, r7, #6
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e080      	b.n	8008ab8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	2380      	movs	r3, #128	; 0x80
 80089bc:	015b      	lsls	r3, r3, #5
 80089be:	429a      	cmp	r2, r3
 80089c0:	d109      	bne.n	80089d6 <HAL_UART_Transmit+0x4e>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d105      	bne.n	80089d6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2201      	movs	r2, #1
 80089ce:	4013      	ands	r3, r2
 80089d0:	d001      	beq.n	80089d6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e070      	b.n	8008ab8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2290      	movs	r2, #144	; 0x90
 80089da:	2100      	movs	r1, #0
 80089dc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2288      	movs	r2, #136	; 0x88
 80089e2:	2121      	movs	r1, #33	; 0x21
 80089e4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089e6:	f7fd f815 	bl	8005a14 <HAL_GetTick>
 80089ea:	0003      	movs	r3, r0
 80089ec:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	1dba      	adds	r2, r7, #6
 80089f2:	2154      	movs	r1, #84	; 0x54
 80089f4:	8812      	ldrh	r2, [r2, #0]
 80089f6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	1dba      	adds	r2, r7, #6
 80089fc:	2156      	movs	r1, #86	; 0x56
 80089fe:	8812      	ldrh	r2, [r2, #0]
 8008a00:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	2380      	movs	r3, #128	; 0x80
 8008a08:	015b      	lsls	r3, r3, #5
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d108      	bne.n	8008a20 <HAL_UART_Transmit+0x98>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d104      	bne.n	8008a20 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	61bb      	str	r3, [r7, #24]
 8008a1e:	e003      	b.n	8008a28 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a28:	e02c      	b.n	8008a84 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	0013      	movs	r3, r2
 8008a34:	2200      	movs	r2, #0
 8008a36:	2180      	movs	r1, #128	; 0x80
 8008a38:	f000 fe82 	bl	8009740 <UART_WaitOnFlagUntilTimeout>
 8008a3c:	1e03      	subs	r3, r0, #0
 8008a3e:	d001      	beq.n	8008a44 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e039      	b.n	8008ab8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	001a      	movs	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	05d2      	lsls	r2, r2, #23
 8008a56:	0dd2      	lsrs	r2, r2, #23
 8008a58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	61bb      	str	r3, [r7, #24]
 8008a60:	e007      	b.n	8008a72 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	781a      	ldrb	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2256      	movs	r2, #86	; 0x56
 8008a76:	5a9b      	ldrh	r3, [r3, r2]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	b299      	uxth	r1, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2256      	movs	r2, #86	; 0x56
 8008a82:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2256      	movs	r2, #86	; 0x56
 8008a88:	5a9b      	ldrh	r3, [r3, r2]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1cc      	bne.n	8008a2a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	0013      	movs	r3, r2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2140      	movs	r1, #64	; 0x40
 8008a9e:	f000 fe4f 	bl	8009740 <UART_WaitOnFlagUntilTimeout>
 8008aa2:	1e03      	subs	r3, r0, #0
 8008aa4:	d001      	beq.n	8008aaa <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e006      	b.n	8008ab8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2288      	movs	r2, #136	; 0x88
 8008aae:	2120      	movs	r1, #32
 8008ab0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e000      	b.n	8008ab8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8008ab6:	2302      	movs	r3, #2
  }
}
 8008ab8:	0018      	movs	r0, r3
 8008aba:	46bd      	mov	sp, r7
 8008abc:	b008      	add	sp, #32
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	1dbb      	adds	r3, r7, #6
 8008acc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	228c      	movs	r2, #140	; 0x8c
 8008ad2:	589b      	ldr	r3, [r3, r2]
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	d145      	bne.n	8008b64 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <HAL_UART_Receive_IT+0x26>
 8008ade:	1dbb      	adds	r3, r7, #6
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e03d      	b.n	8008b66 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	689a      	ldr	r2, [r3, #8]
 8008aee:	2380      	movs	r3, #128	; 0x80
 8008af0:	015b      	lsls	r3, r3, #5
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d109      	bne.n	8008b0a <HAL_UART_Receive_IT+0x4a>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2201      	movs	r2, #1
 8008b02:	4013      	ands	r3, r2
 8008b04:	d001      	beq.n	8008b0a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e02d      	b.n	8008b66 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	2380      	movs	r3, #128	; 0x80
 8008b18:	041b      	lsls	r3, r3, #16
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	d019      	beq.n	8008b52 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b22:	613b      	str	r3, [r7, #16]
  return(result);
 8008b24:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b26:	61fb      	str	r3, [r7, #28]
 8008b28:	2301      	movs	r3, #1
 8008b2a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f383 8810 	msr	PRIMASK, r3
}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2180      	movs	r1, #128	; 0x80
 8008b40:	04c9      	lsls	r1, r1, #19
 8008b42:	430a      	orrs	r2, r1
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	f383 8810 	msr	PRIMASK, r3
}
 8008b50:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b52:	1dbb      	adds	r3, r7, #6
 8008b54:	881a      	ldrh	r2, [r3, #0]
 8008b56:	68b9      	ldr	r1, [r7, #8]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f000 feb8 	bl	80098d0 <UART_Start_Receive_IT>
 8008b60:	0003      	movs	r3, r0
 8008b62:	e000      	b.n	8008b66 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8008b64:	2302      	movs	r3, #2
  }
}
 8008b66:	0018      	movs	r0, r3
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b008      	add	sp, #32
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b70:	b5b0      	push	{r4, r5, r7, lr}
 8008b72:	b0aa      	sub	sp, #168	; 0xa8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	22a4      	movs	r2, #164	; 0xa4
 8008b80:	18b9      	adds	r1, r7, r2
 8008b82:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	20a0      	movs	r0, #160	; 0xa0
 8008b8c:	1839      	adds	r1, r7, r0
 8008b8e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	249c      	movs	r4, #156	; 0x9c
 8008b98:	1939      	adds	r1, r7, r4
 8008b9a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b9c:	0011      	movs	r1, r2
 8008b9e:	18bb      	adds	r3, r7, r2
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4aa2      	ldr	r2, [pc, #648]	; (8008e2c <HAL_UART_IRQHandler+0x2bc>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	2298      	movs	r2, #152	; 0x98
 8008ba8:	18bd      	adds	r5, r7, r2
 8008baa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008bac:	18bb      	adds	r3, r7, r2
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d11a      	bne.n	8008bea <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bb4:	187b      	adds	r3, r7, r1
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	4013      	ands	r3, r2
 8008bbc:	d015      	beq.n	8008bea <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bbe:	183b      	adds	r3, r7, r0
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	d105      	bne.n	8008bd4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bc8:	193b      	adds	r3, r7, r4
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	2380      	movs	r3, #128	; 0x80
 8008bce:	055b      	lsls	r3, r3, #21
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	d00a      	beq.n	8008bea <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d100      	bne.n	8008bde <HAL_UART_IRQHandler+0x6e>
 8008bdc:	e2dc      	b.n	8009198 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	0010      	movs	r0, r2
 8008be6:	4798      	blx	r3
      }
      return;
 8008be8:	e2d6      	b.n	8009198 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008bea:	2398      	movs	r3, #152	; 0x98
 8008bec:	18fb      	adds	r3, r7, r3
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d100      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x86>
 8008bf4:	e122      	b.n	8008e3c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008bf6:	239c      	movs	r3, #156	; 0x9c
 8008bf8:	18fb      	adds	r3, r7, r3
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a8c      	ldr	r2, [pc, #560]	; (8008e30 <HAL_UART_IRQHandler+0x2c0>)
 8008bfe:	4013      	ands	r3, r2
 8008c00:	d106      	bne.n	8008c10 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c02:	23a0      	movs	r3, #160	; 0xa0
 8008c04:	18fb      	adds	r3, r7, r3
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a8a      	ldr	r2, [pc, #552]	; (8008e34 <HAL_UART_IRQHandler+0x2c4>)
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	d100      	bne.n	8008c10 <HAL_UART_IRQHandler+0xa0>
 8008c0e:	e115      	b.n	8008e3c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c10:	23a4      	movs	r3, #164	; 0xa4
 8008c12:	18fb      	adds	r3, r7, r3
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2201      	movs	r2, #1
 8008c18:	4013      	ands	r3, r2
 8008c1a:	d012      	beq.n	8008c42 <HAL_UART_IRQHandler+0xd2>
 8008c1c:	23a0      	movs	r3, #160	; 0xa0
 8008c1e:	18fb      	adds	r3, r7, r3
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	2380      	movs	r3, #128	; 0x80
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	4013      	ands	r3, r2
 8008c28:	d00b      	beq.n	8008c42 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2290      	movs	r2, #144	; 0x90
 8008c36:	589b      	ldr	r3, [r3, r2]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2190      	movs	r1, #144	; 0x90
 8008c40:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c42:	23a4      	movs	r3, #164	; 0xa4
 8008c44:	18fb      	adds	r3, r7, r3
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	d011      	beq.n	8008c72 <HAL_UART_IRQHandler+0x102>
 8008c4e:	239c      	movs	r3, #156	; 0x9c
 8008c50:	18fb      	adds	r3, r7, r3
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2201      	movs	r2, #1
 8008c56:	4013      	ands	r3, r2
 8008c58:	d00b      	beq.n	8008c72 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2290      	movs	r2, #144	; 0x90
 8008c66:	589b      	ldr	r3, [r3, r2]
 8008c68:	2204      	movs	r2, #4
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2190      	movs	r1, #144	; 0x90
 8008c70:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c72:	23a4      	movs	r3, #164	; 0xa4
 8008c74:	18fb      	adds	r3, r7, r3
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2204      	movs	r2, #4
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	d011      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x132>
 8008c7e:	239c      	movs	r3, #156	; 0x9c
 8008c80:	18fb      	adds	r3, r7, r3
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2201      	movs	r2, #1
 8008c86:	4013      	ands	r3, r2
 8008c88:	d00b      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2204      	movs	r2, #4
 8008c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2290      	movs	r2, #144	; 0x90
 8008c96:	589b      	ldr	r3, [r3, r2]
 8008c98:	2202      	movs	r2, #2
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2190      	movs	r1, #144	; 0x90
 8008ca0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ca2:	23a4      	movs	r3, #164	; 0xa4
 8008ca4:	18fb      	adds	r3, r7, r3
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2208      	movs	r2, #8
 8008caa:	4013      	ands	r3, r2
 8008cac:	d017      	beq.n	8008cde <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cae:	23a0      	movs	r3, #160	; 0xa0
 8008cb0:	18fb      	adds	r3, r7, r3
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	d105      	bne.n	8008cc6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cba:	239c      	movs	r3, #156	; 0x9c
 8008cbc:	18fb      	adds	r3, r7, r3
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a5b      	ldr	r2, [pc, #364]	; (8008e30 <HAL_UART_IRQHandler+0x2c0>)
 8008cc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cc4:	d00b      	beq.n	8008cde <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2208      	movs	r2, #8
 8008ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2290      	movs	r2, #144	; 0x90
 8008cd2:	589b      	ldr	r3, [r3, r2]
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2190      	movs	r1, #144	; 0x90
 8008cdc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cde:	23a4      	movs	r3, #164	; 0xa4
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	2380      	movs	r3, #128	; 0x80
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	4013      	ands	r3, r2
 8008cea:	d013      	beq.n	8008d14 <HAL_UART_IRQHandler+0x1a4>
 8008cec:	23a0      	movs	r3, #160	; 0xa0
 8008cee:	18fb      	adds	r3, r7, r3
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	2380      	movs	r3, #128	; 0x80
 8008cf4:	04db      	lsls	r3, r3, #19
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	d00c      	beq.n	8008d14 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2280      	movs	r2, #128	; 0x80
 8008d00:	0112      	lsls	r2, r2, #4
 8008d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2290      	movs	r2, #144	; 0x90
 8008d08:	589b      	ldr	r3, [r3, r2]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2190      	movs	r1, #144	; 0x90
 8008d12:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2290      	movs	r2, #144	; 0x90
 8008d18:	589b      	ldr	r3, [r3, r2]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d100      	bne.n	8008d20 <HAL_UART_IRQHandler+0x1b0>
 8008d1e:	e23d      	b.n	800919c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d20:	23a4      	movs	r3, #164	; 0xa4
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2220      	movs	r2, #32
 8008d28:	4013      	ands	r3, r2
 8008d2a:	d015      	beq.n	8008d58 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d2c:	23a0      	movs	r3, #160	; 0xa0
 8008d2e:	18fb      	adds	r3, r7, r3
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2220      	movs	r2, #32
 8008d34:	4013      	ands	r3, r2
 8008d36:	d106      	bne.n	8008d46 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d38:	239c      	movs	r3, #156	; 0x9c
 8008d3a:	18fb      	adds	r3, r7, r3
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	2380      	movs	r3, #128	; 0x80
 8008d40:	055b      	lsls	r3, r3, #21
 8008d42:	4013      	ands	r3, r2
 8008d44:	d008      	beq.n	8008d58 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d004      	beq.n	8008d58 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	0010      	movs	r0, r2
 8008d56:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2290      	movs	r2, #144	; 0x90
 8008d5c:	589b      	ldr	r3, [r3, r2]
 8008d5e:	2194      	movs	r1, #148	; 0x94
 8008d60:	187a      	adds	r2, r7, r1
 8008d62:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	2240      	movs	r2, #64	; 0x40
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	2b40      	cmp	r3, #64	; 0x40
 8008d70:	d004      	beq.n	8008d7c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d72:	187b      	adds	r3, r7, r1
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2228      	movs	r2, #40	; 0x28
 8008d78:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d7a:	d04c      	beq.n	8008e16 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	0018      	movs	r0, r3
 8008d80:	f000 feca 	bl	8009b18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	2240      	movs	r2, #64	; 0x40
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	d13c      	bne.n	8008e0c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d92:	f3ef 8310 	mrs	r3, PRIMASK
 8008d96:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d9a:	2090      	movs	r0, #144	; 0x90
 8008d9c:	183a      	adds	r2, r7, r0
 8008d9e:	6013      	str	r3, [r2, #0]
 8008da0:	2301      	movs	r3, #1
 8008da2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008da6:	f383 8810 	msr	PRIMASK, r3
}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2140      	movs	r1, #64	; 0x40
 8008db8:	438a      	bics	r2, r1
 8008dba:	609a      	str	r2, [r3, #8]
 8008dbc:	183b      	adds	r3, r7, r0
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dc4:	f383 8810 	msr	PRIMASK, r3
}
 8008dc8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2280      	movs	r2, #128	; 0x80
 8008dce:	589b      	ldr	r3, [r3, r2]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d016      	beq.n	8008e02 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2280      	movs	r2, #128	; 0x80
 8008dd8:	589b      	ldr	r3, [r3, r2]
 8008dda:	4a17      	ldr	r2, [pc, #92]	; (8008e38 <HAL_UART_IRQHandler+0x2c8>)
 8008ddc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2280      	movs	r2, #128	; 0x80
 8008de2:	589b      	ldr	r3, [r3, r2]
 8008de4:	0018      	movs	r0, r3
 8008de6:	f7fc ffe9 	bl	8005dbc <HAL_DMA_Abort_IT>
 8008dea:	1e03      	subs	r3, r0, #0
 8008dec:	d01c      	beq.n	8008e28 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2280      	movs	r2, #128	; 0x80
 8008df2:	589b      	ldr	r3, [r3, r2]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	2180      	movs	r1, #128	; 0x80
 8008dfa:	5852      	ldr	r2, [r2, r1]
 8008dfc:	0010      	movs	r0, r2
 8008dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e00:	e012      	b.n	8008e28 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	0018      	movs	r0, r3
 8008e06:	f000 f9e1 	bl	80091cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0a:	e00d      	b.n	8008e28 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f000 f9dc 	bl	80091cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e14:	e008      	b.n	8008e28 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f000 f9d7 	bl	80091cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2290      	movs	r2, #144	; 0x90
 8008e22:	2100      	movs	r1, #0
 8008e24:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008e26:	e1b9      	b.n	800919c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e28:	46c0      	nop			; (mov r8, r8)
    return;
 8008e2a:	e1b7      	b.n	800919c <HAL_UART_IRQHandler+0x62c>
 8008e2c:	0000080f 	.word	0x0000080f
 8008e30:	10000001 	.word	0x10000001
 8008e34:	04000120 	.word	0x04000120
 8008e38:	08009be5 	.word	0x08009be5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d000      	beq.n	8008e46 <HAL_UART_IRQHandler+0x2d6>
 8008e44:	e13e      	b.n	80090c4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e46:	23a4      	movs	r3, #164	; 0xa4
 8008e48:	18fb      	adds	r3, r7, r3
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2210      	movs	r2, #16
 8008e4e:	4013      	ands	r3, r2
 8008e50:	d100      	bne.n	8008e54 <HAL_UART_IRQHandler+0x2e4>
 8008e52:	e137      	b.n	80090c4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e54:	23a0      	movs	r3, #160	; 0xa0
 8008e56:	18fb      	adds	r3, r7, r3
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2210      	movs	r2, #16
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	d100      	bne.n	8008e62 <HAL_UART_IRQHandler+0x2f2>
 8008e60:	e130      	b.n	80090c4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2210      	movs	r2, #16
 8008e68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	2240      	movs	r2, #64	; 0x40
 8008e72:	4013      	ands	r3, r2
 8008e74:	2b40      	cmp	r3, #64	; 0x40
 8008e76:	d000      	beq.n	8008e7a <HAL_UART_IRQHandler+0x30a>
 8008e78:	e0a4      	b.n	8008fc4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2280      	movs	r2, #128	; 0x80
 8008e7e:	589b      	ldr	r3, [r3, r2]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	217e      	movs	r1, #126	; 0x7e
 8008e86:	187b      	adds	r3, r7, r1
 8008e88:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008e8a:	187b      	adds	r3, r7, r1
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d100      	bne.n	8008e94 <HAL_UART_IRQHandler+0x324>
 8008e92:	e185      	b.n	80091a0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	225c      	movs	r2, #92	; 0x5c
 8008e98:	5a9b      	ldrh	r3, [r3, r2]
 8008e9a:	187a      	adds	r2, r7, r1
 8008e9c:	8812      	ldrh	r2, [r2, #0]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d300      	bcc.n	8008ea4 <HAL_UART_IRQHandler+0x334>
 8008ea2:	e17d      	b.n	80091a0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	187a      	adds	r2, r7, r1
 8008ea8:	215e      	movs	r1, #94	; 0x5e
 8008eaa:	8812      	ldrh	r2, [r2, #0]
 8008eac:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2280      	movs	r2, #128	; 0x80
 8008eb2:	589b      	ldr	r3, [r3, r2]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	4013      	ands	r3, r2
 8008ebc:	d170      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8008ec2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ec6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ec8:	2301      	movs	r3, #1
 8008eca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ece:	f383 8810 	msr	PRIMASK, r3
}
 8008ed2:	46c0      	nop			; (mov r8, r8)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	49b4      	ldr	r1, [pc, #720]	; (80091b0 <HAL_UART_IRQHandler+0x640>)
 8008ee0:	400a      	ands	r2, r1
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	f383 8810 	msr	PRIMASK, r3
}
 8008eee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef8:	677b      	str	r3, [r7, #116]	; 0x74
 8008efa:	2301      	movs	r3, #1
 8008efc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f00:	f383 8810 	msr	PRIMASK, r3
}
 8008f04:	46c0      	nop			; (mov r8, r8)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2101      	movs	r1, #1
 8008f12:	438a      	bics	r2, r1
 8008f14:	609a      	str	r2, [r3, #8]
 8008f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f18:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f1c:	f383 8810 	msr	PRIMASK, r3
}
 8008f20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f22:	f3ef 8310 	mrs	r3, PRIMASK
 8008f26:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f32:	f383 8810 	msr	PRIMASK, r3
}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2140      	movs	r1, #64	; 0x40
 8008f44:	438a      	bics	r2, r1
 8008f46:	609a      	str	r2, [r3, #8]
 8008f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f4a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f4e:	f383 8810 	msr	PRIMASK, r3
}
 8008f52:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	228c      	movs	r2, #140	; 0x8c
 8008f58:	2120      	movs	r1, #32
 8008f5a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f62:	f3ef 8310 	mrs	r3, PRIMASK
 8008f66:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f72:	f383 8810 	msr	PRIMASK, r3
}
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2110      	movs	r1, #16
 8008f84:	438a      	bics	r2, r1
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f8e:	f383 8810 	msr	PRIMASK, r3
}
 8008f92:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2280      	movs	r2, #128	; 0x80
 8008f98:	589b      	ldr	r3, [r3, r2]
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	f7fc feac 	bl	8005cf8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	225c      	movs	r2, #92	; 0x5c
 8008faa:	5a9a      	ldrh	r2, [r3, r2]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	215e      	movs	r1, #94	; 0x5e
 8008fb0:	5a5b      	ldrh	r3, [r3, r1]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	0011      	movs	r1, r2
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f000 f90d 	bl	80091dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fc2:	e0ed      	b.n	80091a0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	225c      	movs	r2, #92	; 0x5c
 8008fc8:	5a99      	ldrh	r1, [r3, r2]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	225e      	movs	r2, #94	; 0x5e
 8008fce:	5a9b      	ldrh	r3, [r3, r2]
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	208e      	movs	r0, #142	; 0x8e
 8008fd4:	183b      	adds	r3, r7, r0
 8008fd6:	1a8a      	subs	r2, r1, r2
 8008fd8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	225e      	movs	r2, #94	; 0x5e
 8008fde:	5a9b      	ldrh	r3, [r3, r2]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d100      	bne.n	8008fe8 <HAL_UART_IRQHandler+0x478>
 8008fe6:	e0dd      	b.n	80091a4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8008fe8:	183b      	adds	r3, r7, r0
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d100      	bne.n	8008ff2 <HAL_UART_IRQHandler+0x482>
 8008ff0:	e0d8      	b.n	80091a4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ff6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ffa:	2488      	movs	r4, #136	; 0x88
 8008ffc:	193a      	adds	r2, r7, r4
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	2301      	movs	r3, #1
 8009002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f383 8810 	msr	PRIMASK, r3
}
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4967      	ldr	r1, [pc, #412]	; (80091b4 <HAL_UART_IRQHandler+0x644>)
 8009018:	400a      	ands	r2, r1
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	193b      	adds	r3, r7, r4
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f383 8810 	msr	PRIMASK, r3
}
 8009028:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800902a:	f3ef 8310 	mrs	r3, PRIMASK
 800902e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009030:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009032:	2484      	movs	r4, #132	; 0x84
 8009034:	193a      	adds	r2, r7, r4
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	2301      	movs	r3, #1
 800903a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	f383 8810 	msr	PRIMASK, r3
}
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689a      	ldr	r2, [r3, #8]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	495a      	ldr	r1, [pc, #360]	; (80091b8 <HAL_UART_IRQHandler+0x648>)
 8009050:	400a      	ands	r2, r1
 8009052:	609a      	str	r2, [r3, #8]
 8009054:	193b      	adds	r3, r7, r4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	f383 8810 	msr	PRIMASK, r3
}
 8009060:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	228c      	movs	r2, #140	; 0x8c
 8009066:	2120      	movs	r1, #32
 8009068:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009076:	f3ef 8310 	mrs	r3, PRIMASK
 800907a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907e:	2480      	movs	r4, #128	; 0x80
 8009080:	193a      	adds	r2, r7, r4
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	2301      	movs	r3, #1
 8009086:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	f383 8810 	msr	PRIMASK, r3
}
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2110      	movs	r1, #16
 800909c:	438a      	bics	r2, r1
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	193b      	adds	r3, r7, r4
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	f383 8810 	msr	PRIMASK, r3
}
 80090ac:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2202      	movs	r2, #2
 80090b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090b4:	183b      	adds	r3, r7, r0
 80090b6:	881a      	ldrh	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	0011      	movs	r1, r2
 80090bc:	0018      	movs	r0, r3
 80090be:	f000 f88d 	bl	80091dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090c2:	e06f      	b.n	80091a4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090c4:	23a4      	movs	r3, #164	; 0xa4
 80090c6:	18fb      	adds	r3, r7, r3
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	2380      	movs	r3, #128	; 0x80
 80090cc:	035b      	lsls	r3, r3, #13
 80090ce:	4013      	ands	r3, r2
 80090d0:	d010      	beq.n	80090f4 <HAL_UART_IRQHandler+0x584>
 80090d2:	239c      	movs	r3, #156	; 0x9c
 80090d4:	18fb      	adds	r3, r7, r3
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	2380      	movs	r3, #128	; 0x80
 80090da:	03db      	lsls	r3, r3, #15
 80090dc:	4013      	ands	r3, r2
 80090de:	d009      	beq.n	80090f4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2280      	movs	r2, #128	; 0x80
 80090e6:	0352      	lsls	r2, r2, #13
 80090e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	0018      	movs	r0, r3
 80090ee:	f001 fa1d 	bl	800a52c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090f2:	e05a      	b.n	80091aa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80090f4:	23a4      	movs	r3, #164	; 0xa4
 80090f6:	18fb      	adds	r3, r7, r3
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2280      	movs	r2, #128	; 0x80
 80090fc:	4013      	ands	r3, r2
 80090fe:	d016      	beq.n	800912e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009100:	23a0      	movs	r3, #160	; 0xa0
 8009102:	18fb      	adds	r3, r7, r3
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2280      	movs	r2, #128	; 0x80
 8009108:	4013      	ands	r3, r2
 800910a:	d106      	bne.n	800911a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800910c:	239c      	movs	r3, #156	; 0x9c
 800910e:	18fb      	adds	r3, r7, r3
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	2380      	movs	r3, #128	; 0x80
 8009114:	041b      	lsls	r3, r3, #16
 8009116:	4013      	ands	r3, r2
 8009118:	d009      	beq.n	800912e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800911e:	2b00      	cmp	r3, #0
 8009120:	d042      	beq.n	80091a8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	0010      	movs	r0, r2
 800912a:	4798      	blx	r3
    }
    return;
 800912c:	e03c      	b.n	80091a8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800912e:	23a4      	movs	r3, #164	; 0xa4
 8009130:	18fb      	adds	r3, r7, r3
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2240      	movs	r2, #64	; 0x40
 8009136:	4013      	ands	r3, r2
 8009138:	d00a      	beq.n	8009150 <HAL_UART_IRQHandler+0x5e0>
 800913a:	23a0      	movs	r3, #160	; 0xa0
 800913c:	18fb      	adds	r3, r7, r3
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2240      	movs	r2, #64	; 0x40
 8009142:	4013      	ands	r3, r2
 8009144:	d004      	beq.n	8009150 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	0018      	movs	r0, r3
 800914a:	f000 fd62 	bl	8009c12 <UART_EndTransmit_IT>
    return;
 800914e:	e02c      	b.n	80091aa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009150:	23a4      	movs	r3, #164	; 0xa4
 8009152:	18fb      	adds	r3, r7, r3
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	2380      	movs	r3, #128	; 0x80
 8009158:	041b      	lsls	r3, r3, #16
 800915a:	4013      	ands	r3, r2
 800915c:	d00b      	beq.n	8009176 <HAL_UART_IRQHandler+0x606>
 800915e:	23a0      	movs	r3, #160	; 0xa0
 8009160:	18fb      	adds	r3, r7, r3
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	2380      	movs	r3, #128	; 0x80
 8009166:	05db      	lsls	r3, r3, #23
 8009168:	4013      	ands	r3, r2
 800916a:	d004      	beq.n	8009176 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	0018      	movs	r0, r3
 8009170:	f001 f9ec 	bl	800a54c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009174:	e019      	b.n	80091aa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009176:	23a4      	movs	r3, #164	; 0xa4
 8009178:	18fb      	adds	r3, r7, r3
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	2380      	movs	r3, #128	; 0x80
 800917e:	045b      	lsls	r3, r3, #17
 8009180:	4013      	ands	r3, r2
 8009182:	d012      	beq.n	80091aa <HAL_UART_IRQHandler+0x63a>
 8009184:	23a0      	movs	r3, #160	; 0xa0
 8009186:	18fb      	adds	r3, r7, r3
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da0d      	bge.n	80091aa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	0018      	movs	r0, r3
 8009192:	f001 f9d3 	bl	800a53c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009196:	e008      	b.n	80091aa <HAL_UART_IRQHandler+0x63a>
      return;
 8009198:	46c0      	nop			; (mov r8, r8)
 800919a:	e006      	b.n	80091aa <HAL_UART_IRQHandler+0x63a>
    return;
 800919c:	46c0      	nop			; (mov r8, r8)
 800919e:	e004      	b.n	80091aa <HAL_UART_IRQHandler+0x63a>
      return;
 80091a0:	46c0      	nop			; (mov r8, r8)
 80091a2:	e002      	b.n	80091aa <HAL_UART_IRQHandler+0x63a>
      return;
 80091a4:	46c0      	nop			; (mov r8, r8)
 80091a6:	e000      	b.n	80091aa <HAL_UART_IRQHandler+0x63a>
    return;
 80091a8:	46c0      	nop			; (mov r8, r8)
  }
}
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b02a      	add	sp, #168	; 0xa8
 80091ae:	bdb0      	pop	{r4, r5, r7, pc}
 80091b0:	fffffeff 	.word	0xfffffeff
 80091b4:	fffffedf 	.word	0xfffffedf
 80091b8:	effffffe 	.word	0xeffffffe

080091bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091c4:	46c0      	nop			; (mov r8, r8)
 80091c6:	46bd      	mov	sp, r7
 80091c8:	b002      	add	sp, #8
 80091ca:	bd80      	pop	{r7, pc}

080091cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091d4:	46c0      	nop			; (mov r8, r8)
 80091d6:	46bd      	mov	sp, r7
 80091d8:	b002      	add	sp, #8
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	000a      	movs	r2, r1
 80091e6:	1cbb      	adds	r3, r7, #2
 80091e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	46bd      	mov	sp, r7
 80091ee:	b002      	add	sp, #8
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091fc:	231a      	movs	r3, #26
 80091fe:	18fb      	adds	r3, r7, r3
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	431a      	orrs	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	431a      	orrs	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	4313      	orrs	r3, r2
 800921a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4abc      	ldr	r2, [pc, #752]	; (8009514 <UART_SetConfig+0x320>)
 8009224:	4013      	ands	r3, r2
 8009226:	0019      	movs	r1, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	430a      	orrs	r2, r1
 8009230:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	4ab7      	ldr	r2, [pc, #732]	; (8009518 <UART_SetConfig+0x324>)
 800923a:	4013      	ands	r3, r2
 800923c:	0019      	movs	r1, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	4313      	orrs	r3, r2
 8009258:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	4aae      	ldr	r2, [pc, #696]	; (800951c <UART_SetConfig+0x328>)
 8009262:	4013      	ands	r3, r2
 8009264:	0019      	movs	r1, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	430a      	orrs	r2, r1
 800926e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	220f      	movs	r2, #15
 8009278:	4393      	bics	r3, r2
 800927a:	0019      	movs	r1, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4aa4      	ldr	r2, [pc, #656]	; (8009520 <UART_SetConfig+0x32c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d127      	bne.n	80092e2 <UART_SetConfig+0xee>
 8009292:	4ba4      	ldr	r3, [pc, #656]	; (8009524 <UART_SetConfig+0x330>)
 8009294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009296:	2203      	movs	r2, #3
 8009298:	4013      	ands	r3, r2
 800929a:	2b03      	cmp	r3, #3
 800929c:	d017      	beq.n	80092ce <UART_SetConfig+0xda>
 800929e:	d81b      	bhi.n	80092d8 <UART_SetConfig+0xe4>
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d00a      	beq.n	80092ba <UART_SetConfig+0xc6>
 80092a4:	d818      	bhi.n	80092d8 <UART_SetConfig+0xe4>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <UART_SetConfig+0xbc>
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d00a      	beq.n	80092c4 <UART_SetConfig+0xd0>
 80092ae:	e013      	b.n	80092d8 <UART_SetConfig+0xe4>
 80092b0:	231b      	movs	r3, #27
 80092b2:	18fb      	adds	r3, r7, r3
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
 80092b8:	e058      	b.n	800936c <UART_SetConfig+0x178>
 80092ba:	231b      	movs	r3, #27
 80092bc:	18fb      	adds	r3, r7, r3
 80092be:	2202      	movs	r2, #2
 80092c0:	701a      	strb	r2, [r3, #0]
 80092c2:	e053      	b.n	800936c <UART_SetConfig+0x178>
 80092c4:	231b      	movs	r3, #27
 80092c6:	18fb      	adds	r3, r7, r3
 80092c8:	2204      	movs	r2, #4
 80092ca:	701a      	strb	r2, [r3, #0]
 80092cc:	e04e      	b.n	800936c <UART_SetConfig+0x178>
 80092ce:	231b      	movs	r3, #27
 80092d0:	18fb      	adds	r3, r7, r3
 80092d2:	2208      	movs	r2, #8
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	e049      	b.n	800936c <UART_SetConfig+0x178>
 80092d8:	231b      	movs	r3, #27
 80092da:	18fb      	adds	r3, r7, r3
 80092dc:	2210      	movs	r2, #16
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	e044      	b.n	800936c <UART_SetConfig+0x178>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a90      	ldr	r2, [pc, #576]	; (8009528 <UART_SetConfig+0x334>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d127      	bne.n	800933c <UART_SetConfig+0x148>
 80092ec:	4b8d      	ldr	r3, [pc, #564]	; (8009524 <UART_SetConfig+0x330>)
 80092ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f0:	220c      	movs	r2, #12
 80092f2:	4013      	ands	r3, r2
 80092f4:	2b0c      	cmp	r3, #12
 80092f6:	d017      	beq.n	8009328 <UART_SetConfig+0x134>
 80092f8:	d81b      	bhi.n	8009332 <UART_SetConfig+0x13e>
 80092fa:	2b08      	cmp	r3, #8
 80092fc:	d00a      	beq.n	8009314 <UART_SetConfig+0x120>
 80092fe:	d818      	bhi.n	8009332 <UART_SetConfig+0x13e>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <UART_SetConfig+0x116>
 8009304:	2b04      	cmp	r3, #4
 8009306:	d00a      	beq.n	800931e <UART_SetConfig+0x12a>
 8009308:	e013      	b.n	8009332 <UART_SetConfig+0x13e>
 800930a:	231b      	movs	r3, #27
 800930c:	18fb      	adds	r3, r7, r3
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	e02b      	b.n	800936c <UART_SetConfig+0x178>
 8009314:	231b      	movs	r3, #27
 8009316:	18fb      	adds	r3, r7, r3
 8009318:	2202      	movs	r2, #2
 800931a:	701a      	strb	r2, [r3, #0]
 800931c:	e026      	b.n	800936c <UART_SetConfig+0x178>
 800931e:	231b      	movs	r3, #27
 8009320:	18fb      	adds	r3, r7, r3
 8009322:	2204      	movs	r2, #4
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	e021      	b.n	800936c <UART_SetConfig+0x178>
 8009328:	231b      	movs	r3, #27
 800932a:	18fb      	adds	r3, r7, r3
 800932c:	2208      	movs	r2, #8
 800932e:	701a      	strb	r2, [r3, #0]
 8009330:	e01c      	b.n	800936c <UART_SetConfig+0x178>
 8009332:	231b      	movs	r3, #27
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	2210      	movs	r2, #16
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	e017      	b.n	800936c <UART_SetConfig+0x178>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a7a      	ldr	r2, [pc, #488]	; (800952c <UART_SetConfig+0x338>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d104      	bne.n	8009350 <UART_SetConfig+0x15c>
 8009346:	231b      	movs	r3, #27
 8009348:	18fb      	adds	r3, r7, r3
 800934a:	2200      	movs	r2, #0
 800934c:	701a      	strb	r2, [r3, #0]
 800934e:	e00d      	b.n	800936c <UART_SetConfig+0x178>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a76      	ldr	r2, [pc, #472]	; (8009530 <UART_SetConfig+0x33c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d104      	bne.n	8009364 <UART_SetConfig+0x170>
 800935a:	231b      	movs	r3, #27
 800935c:	18fb      	adds	r3, r7, r3
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]
 8009362:	e003      	b.n	800936c <UART_SetConfig+0x178>
 8009364:	231b      	movs	r3, #27
 8009366:	18fb      	adds	r3, r7, r3
 8009368:	2210      	movs	r2, #16
 800936a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	69da      	ldr	r2, [r3, #28]
 8009370:	2380      	movs	r3, #128	; 0x80
 8009372:	021b      	lsls	r3, r3, #8
 8009374:	429a      	cmp	r2, r3
 8009376:	d000      	beq.n	800937a <UART_SetConfig+0x186>
 8009378:	e065      	b.n	8009446 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800937a:	231b      	movs	r3, #27
 800937c:	18fb      	adds	r3, r7, r3
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b08      	cmp	r3, #8
 8009382:	d015      	beq.n	80093b0 <UART_SetConfig+0x1bc>
 8009384:	dc18      	bgt.n	80093b8 <UART_SetConfig+0x1c4>
 8009386:	2b04      	cmp	r3, #4
 8009388:	d00d      	beq.n	80093a6 <UART_SetConfig+0x1b2>
 800938a:	dc15      	bgt.n	80093b8 <UART_SetConfig+0x1c4>
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <UART_SetConfig+0x1a2>
 8009390:	2b02      	cmp	r3, #2
 8009392:	d005      	beq.n	80093a0 <UART_SetConfig+0x1ac>
 8009394:	e010      	b.n	80093b8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009396:	f7fd fd45 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 800939a:	0003      	movs	r3, r0
 800939c:	617b      	str	r3, [r7, #20]
        break;
 800939e:	e012      	b.n	80093c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093a0:	4b64      	ldr	r3, [pc, #400]	; (8009534 <UART_SetConfig+0x340>)
 80093a2:	617b      	str	r3, [r7, #20]
        break;
 80093a4:	e00f      	b.n	80093c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093a6:	f7fd fcb3 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 80093aa:	0003      	movs	r3, r0
 80093ac:	617b      	str	r3, [r7, #20]
        break;
 80093ae:	e00a      	b.n	80093c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093b0:	2380      	movs	r3, #128	; 0x80
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	617b      	str	r3, [r7, #20]
        break;
 80093b6:	e006      	b.n	80093c6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80093b8:	2300      	movs	r3, #0
 80093ba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80093bc:	231a      	movs	r3, #26
 80093be:	18fb      	adds	r3, r7, r3
 80093c0:	2201      	movs	r2, #1
 80093c2:	701a      	strb	r2, [r3, #0]
        break;
 80093c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d100      	bne.n	80093ce <UART_SetConfig+0x1da>
 80093cc:	e08d      	b.n	80094ea <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093d2:	4b59      	ldr	r3, [pc, #356]	; (8009538 <UART_SetConfig+0x344>)
 80093d4:	0052      	lsls	r2, r2, #1
 80093d6:	5ad3      	ldrh	r3, [r2, r3]
 80093d8:	0019      	movs	r1, r3
 80093da:	6978      	ldr	r0, [r7, #20]
 80093dc:	f7f6 feba 	bl	8000154 <__udivsi3>
 80093e0:	0003      	movs	r3, r0
 80093e2:	005a      	lsls	r2, r3, #1
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	085b      	lsrs	r3, r3, #1
 80093ea:	18d2      	adds	r2, r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	0019      	movs	r1, r3
 80093f2:	0010      	movs	r0, r2
 80093f4:	f7f6 feae 	bl	8000154 <__udivsi3>
 80093f8:	0003      	movs	r3, r0
 80093fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b0f      	cmp	r3, #15
 8009400:	d91c      	bls.n	800943c <UART_SetConfig+0x248>
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	2380      	movs	r3, #128	; 0x80
 8009406:	025b      	lsls	r3, r3, #9
 8009408:	429a      	cmp	r2, r3
 800940a:	d217      	bcs.n	800943c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	b29a      	uxth	r2, r3
 8009410:	200e      	movs	r0, #14
 8009412:	183b      	adds	r3, r7, r0
 8009414:	210f      	movs	r1, #15
 8009416:	438a      	bics	r2, r1
 8009418:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	b29b      	uxth	r3, r3
 8009420:	2207      	movs	r2, #7
 8009422:	4013      	ands	r3, r2
 8009424:	b299      	uxth	r1, r3
 8009426:	183b      	adds	r3, r7, r0
 8009428:	183a      	adds	r2, r7, r0
 800942a:	8812      	ldrh	r2, [r2, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	183a      	adds	r2, r7, r0
 8009436:	8812      	ldrh	r2, [r2, #0]
 8009438:	60da      	str	r2, [r3, #12]
 800943a:	e056      	b.n	80094ea <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800943c:	231a      	movs	r3, #26
 800943e:	18fb      	adds	r3, r7, r3
 8009440:	2201      	movs	r2, #1
 8009442:	701a      	strb	r2, [r3, #0]
 8009444:	e051      	b.n	80094ea <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009446:	231b      	movs	r3, #27
 8009448:	18fb      	adds	r3, r7, r3
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2b08      	cmp	r3, #8
 800944e:	d015      	beq.n	800947c <UART_SetConfig+0x288>
 8009450:	dc18      	bgt.n	8009484 <UART_SetConfig+0x290>
 8009452:	2b04      	cmp	r3, #4
 8009454:	d00d      	beq.n	8009472 <UART_SetConfig+0x27e>
 8009456:	dc15      	bgt.n	8009484 <UART_SetConfig+0x290>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <UART_SetConfig+0x26e>
 800945c:	2b02      	cmp	r3, #2
 800945e:	d005      	beq.n	800946c <UART_SetConfig+0x278>
 8009460:	e010      	b.n	8009484 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009462:	f7fd fcdf 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 8009466:	0003      	movs	r3, r0
 8009468:	617b      	str	r3, [r7, #20]
        break;
 800946a:	e012      	b.n	8009492 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800946c:	4b31      	ldr	r3, [pc, #196]	; (8009534 <UART_SetConfig+0x340>)
 800946e:	617b      	str	r3, [r7, #20]
        break;
 8009470:	e00f      	b.n	8009492 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009472:	f7fd fc4d 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 8009476:	0003      	movs	r3, r0
 8009478:	617b      	str	r3, [r7, #20]
        break;
 800947a:	e00a      	b.n	8009492 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800947c:	2380      	movs	r3, #128	; 0x80
 800947e:	021b      	lsls	r3, r3, #8
 8009480:	617b      	str	r3, [r7, #20]
        break;
 8009482:	e006      	b.n	8009492 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009488:	231a      	movs	r3, #26
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	2201      	movs	r2, #1
 800948e:	701a      	strb	r2, [r3, #0]
        break;
 8009490:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d028      	beq.n	80094ea <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800949c:	4b26      	ldr	r3, [pc, #152]	; (8009538 <UART_SetConfig+0x344>)
 800949e:	0052      	lsls	r2, r2, #1
 80094a0:	5ad3      	ldrh	r3, [r2, r3]
 80094a2:	0019      	movs	r1, r3
 80094a4:	6978      	ldr	r0, [r7, #20]
 80094a6:	f7f6 fe55 	bl	8000154 <__udivsi3>
 80094aa:	0003      	movs	r3, r0
 80094ac:	001a      	movs	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	085b      	lsrs	r3, r3, #1
 80094b4:	18d2      	adds	r2, r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	0019      	movs	r1, r3
 80094bc:	0010      	movs	r0, r2
 80094be:	f7f6 fe49 	bl	8000154 <__udivsi3>
 80094c2:	0003      	movs	r3, r0
 80094c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	2b0f      	cmp	r3, #15
 80094ca:	d90a      	bls.n	80094e2 <UART_SetConfig+0x2ee>
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	2380      	movs	r3, #128	; 0x80
 80094d0:	025b      	lsls	r3, r3, #9
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d205      	bcs.n	80094e2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60da      	str	r2, [r3, #12]
 80094e0:	e003      	b.n	80094ea <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80094e2:	231a      	movs	r3, #26
 80094e4:	18fb      	adds	r3, r7, r3
 80094e6:	2201      	movs	r2, #1
 80094e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	226a      	movs	r2, #106	; 0x6a
 80094ee:	2101      	movs	r1, #1
 80094f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2268      	movs	r2, #104	; 0x68
 80094f6:	2101      	movs	r1, #1
 80094f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009506:	231a      	movs	r3, #26
 8009508:	18fb      	adds	r3, r7, r3
 800950a:	781b      	ldrb	r3, [r3, #0]
}
 800950c:	0018      	movs	r0, r3
 800950e:	46bd      	mov	sp, r7
 8009510:	b008      	add	sp, #32
 8009512:	bd80      	pop	{r7, pc}
 8009514:	cfff69f3 	.word	0xcfff69f3
 8009518:	ffffcfff 	.word	0xffffcfff
 800951c:	11fff4ff 	.word	0x11fff4ff
 8009520:	40013800 	.word	0x40013800
 8009524:	40021000 	.word	0x40021000
 8009528:	40004400 	.word	0x40004400
 800952c:	40004800 	.word	0x40004800
 8009530:	40004c00 	.word	0x40004c00
 8009534:	00f42400 	.word	0x00f42400
 8009538:	08011134 	.word	0x08011134

0800953c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009548:	2201      	movs	r2, #1
 800954a:	4013      	ands	r3, r2
 800954c:	d00b      	beq.n	8009566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	4a4a      	ldr	r2, [pc, #296]	; (8009680 <UART_AdvFeatureConfig+0x144>)
 8009556:	4013      	ands	r3, r2
 8009558:	0019      	movs	r1, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	430a      	orrs	r2, r1
 8009564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956a:	2202      	movs	r2, #2
 800956c:	4013      	ands	r3, r2
 800956e:	d00b      	beq.n	8009588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	4a43      	ldr	r2, [pc, #268]	; (8009684 <UART_AdvFeatureConfig+0x148>)
 8009578:	4013      	ands	r3, r2
 800957a:	0019      	movs	r1, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	430a      	orrs	r2, r1
 8009586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958c:	2204      	movs	r2, #4
 800958e:	4013      	ands	r3, r2
 8009590:	d00b      	beq.n	80095aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	4a3b      	ldr	r2, [pc, #236]	; (8009688 <UART_AdvFeatureConfig+0x14c>)
 800959a:	4013      	ands	r3, r2
 800959c:	0019      	movs	r1, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ae:	2208      	movs	r2, #8
 80095b0:	4013      	ands	r3, r2
 80095b2:	d00b      	beq.n	80095cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	4a34      	ldr	r2, [pc, #208]	; (800968c <UART_AdvFeatureConfig+0x150>)
 80095bc:	4013      	ands	r3, r2
 80095be:	0019      	movs	r1, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	2210      	movs	r2, #16
 80095d2:	4013      	ands	r3, r2
 80095d4:	d00b      	beq.n	80095ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	4a2c      	ldr	r2, [pc, #176]	; (8009690 <UART_AdvFeatureConfig+0x154>)
 80095de:	4013      	ands	r3, r2
 80095e0:	0019      	movs	r1, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	2220      	movs	r2, #32
 80095f4:	4013      	ands	r3, r2
 80095f6:	d00b      	beq.n	8009610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	4a25      	ldr	r2, [pc, #148]	; (8009694 <UART_AdvFeatureConfig+0x158>)
 8009600:	4013      	ands	r3, r2
 8009602:	0019      	movs	r1, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009614:	2240      	movs	r2, #64	; 0x40
 8009616:	4013      	ands	r3, r2
 8009618:	d01d      	beq.n	8009656 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	4a1d      	ldr	r2, [pc, #116]	; (8009698 <UART_AdvFeatureConfig+0x15c>)
 8009622:	4013      	ands	r3, r2
 8009624:	0019      	movs	r1, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009636:	2380      	movs	r3, #128	; 0x80
 8009638:	035b      	lsls	r3, r3, #13
 800963a:	429a      	cmp	r2, r3
 800963c:	d10b      	bne.n	8009656 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	4a15      	ldr	r2, [pc, #84]	; (800969c <UART_AdvFeatureConfig+0x160>)
 8009646:	4013      	ands	r3, r2
 8009648:	0019      	movs	r1, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965a:	2280      	movs	r2, #128	; 0x80
 800965c:	4013      	ands	r3, r2
 800965e:	d00b      	beq.n	8009678 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	4a0e      	ldr	r2, [pc, #56]	; (80096a0 <UART_AdvFeatureConfig+0x164>)
 8009668:	4013      	ands	r3, r2
 800966a:	0019      	movs	r1, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	430a      	orrs	r2, r1
 8009676:	605a      	str	r2, [r3, #4]
  }
}
 8009678:	46c0      	nop			; (mov r8, r8)
 800967a:	46bd      	mov	sp, r7
 800967c:	b002      	add	sp, #8
 800967e:	bd80      	pop	{r7, pc}
 8009680:	fffdffff 	.word	0xfffdffff
 8009684:	fffeffff 	.word	0xfffeffff
 8009688:	fffbffff 	.word	0xfffbffff
 800968c:	ffff7fff 	.word	0xffff7fff
 8009690:	ffffefff 	.word	0xffffefff
 8009694:	ffffdfff 	.word	0xffffdfff
 8009698:	ffefffff 	.word	0xffefffff
 800969c:	ff9fffff 	.word	0xff9fffff
 80096a0:	fff7ffff 	.word	0xfff7ffff

080096a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af02      	add	r7, sp, #8
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2290      	movs	r2, #144	; 0x90
 80096b0:	2100      	movs	r1, #0
 80096b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096b4:	f7fc f9ae 	bl	8005a14 <HAL_GetTick>
 80096b8:	0003      	movs	r3, r0
 80096ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2208      	movs	r2, #8
 80096c4:	4013      	ands	r3, r2
 80096c6:	2b08      	cmp	r3, #8
 80096c8:	d10c      	bne.n	80096e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2280      	movs	r2, #128	; 0x80
 80096ce:	0391      	lsls	r1, r2, #14
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4a1a      	ldr	r2, [pc, #104]	; (800973c <UART_CheckIdleState+0x98>)
 80096d4:	9200      	str	r2, [sp, #0]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f000 f832 	bl	8009740 <UART_WaitOnFlagUntilTimeout>
 80096dc:	1e03      	subs	r3, r0, #0
 80096de:	d001      	beq.n	80096e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	e026      	b.n	8009732 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2204      	movs	r2, #4
 80096ec:	4013      	ands	r3, r2
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	d10c      	bne.n	800970c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2280      	movs	r2, #128	; 0x80
 80096f6:	03d1      	lsls	r1, r2, #15
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	4a10      	ldr	r2, [pc, #64]	; (800973c <UART_CheckIdleState+0x98>)
 80096fc:	9200      	str	r2, [sp, #0]
 80096fe:	2200      	movs	r2, #0
 8009700:	f000 f81e 	bl	8009740 <UART_WaitOnFlagUntilTimeout>
 8009704:	1e03      	subs	r3, r0, #0
 8009706:	d001      	beq.n	800970c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e012      	b.n	8009732 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2288      	movs	r2, #136	; 0x88
 8009710:	2120      	movs	r1, #32
 8009712:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	228c      	movs	r2, #140	; 0x8c
 8009718:	2120      	movs	r1, #32
 800971a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2284      	movs	r2, #132	; 0x84
 800972c:	2100      	movs	r1, #0
 800972e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	0018      	movs	r0, r3
 8009734:	46bd      	mov	sp, r7
 8009736:	b004      	add	sp, #16
 8009738:	bd80      	pop	{r7, pc}
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	01ffffff 	.word	0x01ffffff

08009740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b094      	sub	sp, #80	; 0x50
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	1dfb      	adds	r3, r7, #7
 800974e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009750:	e0a7      	b.n	80098a2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009754:	3301      	adds	r3, #1
 8009756:	d100      	bne.n	800975a <UART_WaitOnFlagUntilTimeout+0x1a>
 8009758:	e0a3      	b.n	80098a2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800975a:	f7fc f95b 	bl	8005a14 <HAL_GetTick>
 800975e:	0002      	movs	r2, r0
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009766:	429a      	cmp	r2, r3
 8009768:	d302      	bcc.n	8009770 <UART_WaitOnFlagUntilTimeout+0x30>
 800976a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800976c:	2b00      	cmp	r3, #0
 800976e:	d13f      	bne.n	80097f0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009770:	f3ef 8310 	mrs	r3, PRIMASK
 8009774:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009778:	647b      	str	r3, [r7, #68]	; 0x44
 800977a:	2301      	movs	r3, #1
 800977c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	f383 8810 	msr	PRIMASK, r3
}
 8009784:	46c0      	nop			; (mov r8, r8)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	494e      	ldr	r1, [pc, #312]	; (80098cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009792:	400a      	ands	r2, r1
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009798:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	f383 8810 	msr	PRIMASK, r3
}
 80097a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a2:	f3ef 8310 	mrs	r3, PRIMASK
 80097a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80097a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097aa:	643b      	str	r3, [r7, #64]	; 0x40
 80097ac:	2301      	movs	r3, #1
 80097ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	f383 8810 	msr	PRIMASK, r3
}
 80097b6:	46c0      	nop			; (mov r8, r8)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2101      	movs	r1, #1
 80097c4:	438a      	bics	r2, r1
 80097c6:	609a      	str	r2, [r3, #8]
 80097c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ce:	f383 8810 	msr	PRIMASK, r3
}
 80097d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2288      	movs	r2, #136	; 0x88
 80097d8:	2120      	movs	r1, #32
 80097da:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	228c      	movs	r2, #140	; 0x8c
 80097e0:	2120      	movs	r1, #32
 80097e2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2284      	movs	r2, #132	; 0x84
 80097e8:	2100      	movs	r1, #0
 80097ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e069      	b.n	80098c4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2204      	movs	r2, #4
 80097f8:	4013      	ands	r3, r2
 80097fa:	d052      	beq.n	80098a2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	69da      	ldr	r2, [r3, #28]
 8009802:	2380      	movs	r3, #128	; 0x80
 8009804:	011b      	lsls	r3, r3, #4
 8009806:	401a      	ands	r2, r3
 8009808:	2380      	movs	r3, #128	; 0x80
 800980a:	011b      	lsls	r3, r3, #4
 800980c:	429a      	cmp	r2, r3
 800980e:	d148      	bne.n	80098a2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2280      	movs	r2, #128	; 0x80
 8009816:	0112      	lsls	r2, r2, #4
 8009818:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800981a:	f3ef 8310 	mrs	r3, PRIMASK
 800981e:	613b      	str	r3, [r7, #16]
  return(result);
 8009820:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009824:	2301      	movs	r3, #1
 8009826:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f383 8810 	msr	PRIMASK, r3
}
 800982e:	46c0      	nop			; (mov r8, r8)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4924      	ldr	r1, [pc, #144]	; (80098cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800983c:	400a      	ands	r2, r1
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009842:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	f383 8810 	msr	PRIMASK, r3
}
 800984a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800984c:	f3ef 8310 	mrs	r3, PRIMASK
 8009850:	61fb      	str	r3, [r7, #28]
  return(result);
 8009852:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009854:	64bb      	str	r3, [r7, #72]	; 0x48
 8009856:	2301      	movs	r3, #1
 8009858:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	f383 8810 	msr	PRIMASK, r3
}
 8009860:	46c0      	nop			; (mov r8, r8)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2101      	movs	r1, #1
 800986e:	438a      	bics	r2, r1
 8009870:	609a      	str	r2, [r3, #8]
 8009872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009874:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	f383 8810 	msr	PRIMASK, r3
}
 800987c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2288      	movs	r2, #136	; 0x88
 8009882:	2120      	movs	r1, #32
 8009884:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	228c      	movs	r2, #140	; 0x8c
 800988a:	2120      	movs	r1, #32
 800988c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2290      	movs	r2, #144	; 0x90
 8009892:	2120      	movs	r1, #32
 8009894:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2284      	movs	r2, #132	; 0x84
 800989a:	2100      	movs	r1, #0
 800989c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e010      	b.n	80098c4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	4013      	ands	r3, r2
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	425a      	negs	r2, r3
 80098b2:	4153      	adcs	r3, r2
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	001a      	movs	r2, r3
 80098b8:	1dfb      	adds	r3, r7, #7
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d100      	bne.n	80098c2 <UART_WaitOnFlagUntilTimeout+0x182>
 80098c0:	e747      	b.n	8009752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	0018      	movs	r0, r3
 80098c6:	46bd      	mov	sp, r7
 80098c8:	b014      	add	sp, #80	; 0x50
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	fffffe5f 	.word	0xfffffe5f

080098d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b098      	sub	sp, #96	; 0x60
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	1dbb      	adds	r3, r7, #6
 80098dc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	1dba      	adds	r2, r7, #6
 80098e8:	215c      	movs	r1, #92	; 0x5c
 80098ea:	8812      	ldrh	r2, [r2, #0]
 80098ec:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	1dba      	adds	r2, r7, #6
 80098f2:	215e      	movs	r1, #94	; 0x5e
 80098f4:	8812      	ldrh	r2, [r2, #0]
 80098f6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	689a      	ldr	r2, [r3, #8]
 8009902:	2380      	movs	r3, #128	; 0x80
 8009904:	015b      	lsls	r3, r3, #5
 8009906:	429a      	cmp	r2, r3
 8009908:	d10d      	bne.n	8009926 <UART_Start_Receive_IT+0x56>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d104      	bne.n	800991c <UART_Start_Receive_IT+0x4c>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2260      	movs	r2, #96	; 0x60
 8009916:	497b      	ldr	r1, [pc, #492]	; (8009b04 <UART_Start_Receive_IT+0x234>)
 8009918:	5299      	strh	r1, [r3, r2]
 800991a:	e02e      	b.n	800997a <UART_Start_Receive_IT+0xaa>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2260      	movs	r2, #96	; 0x60
 8009920:	21ff      	movs	r1, #255	; 0xff
 8009922:	5299      	strh	r1, [r3, r2]
 8009924:	e029      	b.n	800997a <UART_Start_Receive_IT+0xaa>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10d      	bne.n	800994a <UART_Start_Receive_IT+0x7a>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d104      	bne.n	8009940 <UART_Start_Receive_IT+0x70>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2260      	movs	r2, #96	; 0x60
 800993a:	21ff      	movs	r1, #255	; 0xff
 800993c:	5299      	strh	r1, [r3, r2]
 800993e:	e01c      	b.n	800997a <UART_Start_Receive_IT+0xaa>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2260      	movs	r2, #96	; 0x60
 8009944:	217f      	movs	r1, #127	; 0x7f
 8009946:	5299      	strh	r1, [r3, r2]
 8009948:	e017      	b.n	800997a <UART_Start_Receive_IT+0xaa>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689a      	ldr	r2, [r3, #8]
 800994e:	2380      	movs	r3, #128	; 0x80
 8009950:	055b      	lsls	r3, r3, #21
 8009952:	429a      	cmp	r2, r3
 8009954:	d10d      	bne.n	8009972 <UART_Start_Receive_IT+0xa2>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d104      	bne.n	8009968 <UART_Start_Receive_IT+0x98>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2260      	movs	r2, #96	; 0x60
 8009962:	217f      	movs	r1, #127	; 0x7f
 8009964:	5299      	strh	r1, [r3, r2]
 8009966:	e008      	b.n	800997a <UART_Start_Receive_IT+0xaa>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2260      	movs	r2, #96	; 0x60
 800996c:	213f      	movs	r1, #63	; 0x3f
 800996e:	5299      	strh	r1, [r3, r2]
 8009970:	e003      	b.n	800997a <UART_Start_Receive_IT+0xaa>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2260      	movs	r2, #96	; 0x60
 8009976:	2100      	movs	r1, #0
 8009978:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2290      	movs	r2, #144	; 0x90
 800997e:	2100      	movs	r1, #0
 8009980:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	228c      	movs	r2, #140	; 0x8c
 8009986:	2122      	movs	r1, #34	; 0x22
 8009988:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800998a:	f3ef 8310 	mrs	r3, PRIMASK
 800998e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8009990:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009994:	2301      	movs	r3, #1
 8009996:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800999a:	f383 8810 	msr	PRIMASK, r3
}
 800999e:	46c0      	nop			; (mov r8, r8)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689a      	ldr	r2, [r3, #8]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2101      	movs	r1, #1
 80099ac:	430a      	orrs	r2, r1
 80099ae:	609a      	str	r2, [r3, #8]
 80099b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099b2:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099b6:	f383 8810 	msr	PRIMASK, r3
}
 80099ba:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80099c0:	2380      	movs	r3, #128	; 0x80
 80099c2:	059b      	lsls	r3, r3, #22
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d150      	bne.n	8009a6a <UART_Start_Receive_IT+0x19a>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2268      	movs	r2, #104	; 0x68
 80099cc:	5a9b      	ldrh	r3, [r3, r2]
 80099ce:	1dba      	adds	r2, r7, #6
 80099d0:	8812      	ldrh	r2, [r2, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d349      	bcc.n	8009a6a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	689a      	ldr	r2, [r3, #8]
 80099da:	2380      	movs	r3, #128	; 0x80
 80099dc:	015b      	lsls	r3, r3, #5
 80099de:	429a      	cmp	r2, r3
 80099e0:	d107      	bne.n	80099f2 <UART_Start_Receive_IT+0x122>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d103      	bne.n	80099f2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4a46      	ldr	r2, [pc, #280]	; (8009b08 <UART_Start_Receive_IT+0x238>)
 80099ee:	675a      	str	r2, [r3, #116]	; 0x74
 80099f0:	e002      	b.n	80099f8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4a45      	ldr	r2, [pc, #276]	; (8009b0c <UART_Start_Receive_IT+0x23c>)
 80099f6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d019      	beq.n	8009a34 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a00:	f3ef 8310 	mrs	r3, PRIMASK
 8009a04:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	f383 8810 	msr	PRIMASK, r3
}
 8009a14:	46c0      	nop			; (mov r8, r8)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2180      	movs	r1, #128	; 0x80
 8009a22:	0049      	lsls	r1, r1, #1
 8009a24:	430a      	orrs	r2, r1
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2e:	f383 8810 	msr	PRIMASK, r3
}
 8009a32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a34:	f3ef 8310 	mrs	r3, PRIMASK
 8009a38:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a3c:	657b      	str	r3, [r7, #84]	; 0x54
 8009a3e:	2301      	movs	r3, #1
 8009a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a44:	f383 8810 	msr	PRIMASK, r3
}
 8009a48:	46c0      	nop			; (mov r8, r8)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2180      	movs	r1, #128	; 0x80
 8009a56:	0549      	lsls	r1, r1, #21
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	609a      	str	r2, [r3, #8]
 8009a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a5e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a62:	f383 8810 	msr	PRIMASK, r3
}
 8009a66:	46c0      	nop			; (mov r8, r8)
 8009a68:	e047      	b.n	8009afa <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	689a      	ldr	r2, [r3, #8]
 8009a6e:	2380      	movs	r3, #128	; 0x80
 8009a70:	015b      	lsls	r3, r3, #5
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d107      	bne.n	8009a86 <UART_Start_Receive_IT+0x1b6>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	4a23      	ldr	r2, [pc, #140]	; (8009b10 <UART_Start_Receive_IT+0x240>)
 8009a82:	675a      	str	r2, [r3, #116]	; 0x74
 8009a84:	e002      	b.n	8009a8c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4a22      	ldr	r2, [pc, #136]	; (8009b14 <UART_Start_Receive_IT+0x244>)
 8009a8a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d019      	beq.n	8009ac8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a94:	f3ef 8310 	mrs	r3, PRIMASK
 8009a98:	61fb      	str	r3, [r7, #28]
  return(result);
 8009a9a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	f383 8810 	msr	PRIMASK, r3
}
 8009aa8:	46c0      	nop			; (mov r8, r8)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2190      	movs	r1, #144	; 0x90
 8009ab6:	0049      	lsls	r1, r1, #1
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	f383 8810 	msr	PRIMASK, r3
}
 8009ac6:	e018      	b.n	8009afa <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8009acc:	613b      	str	r3, [r7, #16]
  return(result);
 8009ace:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f383 8810 	msr	PRIMASK, r3
}
 8009adc:	46c0      	nop			; (mov r8, r8)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2120      	movs	r1, #32
 8009aea:	430a      	orrs	r2, r1
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009af0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	f383 8810 	msr	PRIMASK, r3
}
 8009af8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	0018      	movs	r0, r3
 8009afe:	46bd      	mov	sp, r7
 8009b00:	b018      	add	sp, #96	; 0x60
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	000001ff 	.word	0x000001ff
 8009b08:	0800a241 	.word	0x0800a241
 8009b0c:	08009f55 	.word	0x08009f55
 8009b10:	08009de1 	.word	0x08009de1
 8009b14:	08009c6d 	.word	0x08009c6d

08009b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08e      	sub	sp, #56	; 0x38
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b20:	f3ef 8310 	mrs	r3, PRIMASK
 8009b24:	617b      	str	r3, [r7, #20]
  return(result);
 8009b26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b28:	637b      	str	r3, [r7, #52]	; 0x34
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	f383 8810 	msr	PRIMASK, r3
}
 8009b34:	46c0      	nop			; (mov r8, r8)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4926      	ldr	r1, [pc, #152]	; (8009bdc <UART_EndRxTransfer+0xc4>)
 8009b42:	400a      	ands	r2, r1
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	f383 8810 	msr	PRIMASK, r3
}
 8009b50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b52:	f3ef 8310 	mrs	r3, PRIMASK
 8009b56:	623b      	str	r3, [r7, #32]
  return(result);
 8009b58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b5a:	633b      	str	r3, [r7, #48]	; 0x30
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	f383 8810 	msr	PRIMASK, r3
}
 8009b66:	46c0      	nop			; (mov r8, r8)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	491b      	ldr	r1, [pc, #108]	; (8009be0 <UART_EndRxTransfer+0xc8>)
 8009b74:	400a      	ands	r2, r1
 8009b76:	609a      	str	r2, [r3, #8]
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	f383 8810 	msr	PRIMASK, r3
}
 8009b82:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d118      	bne.n	8009bbe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8009b90:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b96:	2301      	movs	r3, #1
 8009b98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f383 8810 	msr	PRIMASK, r3
}
 8009ba0:	46c0      	nop			; (mov r8, r8)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2110      	movs	r1, #16
 8009bae:	438a      	bics	r2, r1
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	f383 8810 	msr	PRIMASK, r3
}
 8009bbc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	228c      	movs	r2, #140	; 0x8c
 8009bc2:	2120      	movs	r1, #32
 8009bc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009bd2:	46c0      	nop			; (mov r8, r8)
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	b00e      	add	sp, #56	; 0x38
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	46c0      	nop			; (mov r8, r8)
 8009bdc:	fffffedf 	.word	0xfffffedf
 8009be0:	effffffe 	.word	0xeffffffe

08009be4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	225e      	movs	r2, #94	; 0x5e
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2256      	movs	r2, #86	; 0x56
 8009bfe:	2100      	movs	r1, #0
 8009c00:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	0018      	movs	r0, r3
 8009c06:	f7ff fae1 	bl	80091cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c0a:	46c0      	nop			; (mov r8, r8)
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	b004      	add	sp, #16
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b086      	sub	sp, #24
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c20:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c22:	617b      	str	r3, [r7, #20]
 8009c24:	2301      	movs	r3, #1
 8009c26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f383 8810 	msr	PRIMASK, r3
}
 8009c2e:	46c0      	nop			; (mov r8, r8)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2140      	movs	r1, #64	; 0x40
 8009c3c:	438a      	bics	r2, r1
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f383 8810 	msr	PRIMASK, r3
}
 8009c4a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2288      	movs	r2, #136	; 0x88
 8009c50:	2120      	movs	r1, #32
 8009c52:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	f7ff faad 	bl	80091bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c62:	46c0      	nop			; (mov r8, r8)
 8009c64:	46bd      	mov	sp, r7
 8009c66:	b006      	add	sp, #24
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b090      	sub	sp, #64	; 0x40
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009c74:	203e      	movs	r0, #62	; 0x3e
 8009c76:	183b      	adds	r3, r7, r0
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	2160      	movs	r1, #96	; 0x60
 8009c7c:	5a52      	ldrh	r2, [r2, r1]
 8009c7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	228c      	movs	r2, #140	; 0x8c
 8009c84:	589b      	ldr	r3, [r3, r2]
 8009c86:	2b22      	cmp	r3, #34	; 0x22
 8009c88:	d000      	beq.n	8009c8c <UART_RxISR_8BIT+0x20>
 8009c8a:	e09a      	b.n	8009dc2 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c92:	213c      	movs	r1, #60	; 0x3c
 8009c94:	187b      	adds	r3, r7, r1
 8009c96:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c98:	187b      	adds	r3, r7, r1
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	183b      	adds	r3, r7, r0
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	b2d9      	uxtb	r1, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca8:	400a      	ands	r2, r1
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	225e      	movs	r2, #94	; 0x5e
 8009cbc:	5a9b      	ldrh	r3, [r3, r2]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b299      	uxth	r1, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	225e      	movs	r2, #94	; 0x5e
 8009cc8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	225e      	movs	r2, #94	; 0x5e
 8009cce:	5a9b      	ldrh	r3, [r3, r2]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d000      	beq.n	8009cd8 <UART_RxISR_8BIT+0x6c>
 8009cd6:	e07c      	b.n	8009dd2 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8009cde:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	f383 8810 	msr	PRIMASK, r3
}
 8009cec:	46c0      	nop			; (mov r8, r8)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4938      	ldr	r1, [pc, #224]	; (8009ddc <UART_RxISR_8BIT+0x170>)
 8009cfa:	400a      	ands	r2, r1
 8009cfc:	601a      	str	r2, [r3, #0]
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	f383 8810 	msr	PRIMASK, r3
}
 8009d08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d12:	637b      	str	r3, [r7, #52]	; 0x34
 8009d14:	2301      	movs	r3, #1
 8009d16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	f383 8810 	msr	PRIMASK, r3
}
 8009d1e:	46c0      	nop			; (mov r8, r8)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689a      	ldr	r2, [r3, #8]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	438a      	bics	r2, r1
 8009d2e:	609a      	str	r2, [r3, #8]
 8009d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d36:	f383 8810 	msr	PRIMASK, r3
}
 8009d3a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	228c      	movs	r2, #140	; 0x8c
 8009d40:	2120      	movs	r1, #32
 8009d42:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d12f      	bne.n	8009db8 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8009d62:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d64:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d66:	633b      	str	r3, [r7, #48]	; 0x30
 8009d68:	2301      	movs	r3, #1
 8009d6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	f383 8810 	msr	PRIMASK, r3
}
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2110      	movs	r1, #16
 8009d80:	438a      	bics	r2, r1
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f383 8810 	msr	PRIMASK, r3
}
 8009d8e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	2210      	movs	r2, #16
 8009d98:	4013      	ands	r3, r2
 8009d9a:	2b10      	cmp	r3, #16
 8009d9c:	d103      	bne.n	8009da6 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2210      	movs	r2, #16
 8009da4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	225c      	movs	r2, #92	; 0x5c
 8009daa:	5a9a      	ldrh	r2, [r3, r2]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	0011      	movs	r1, r2
 8009db0:	0018      	movs	r0, r3
 8009db2:	f7ff fa13 	bl	80091dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009db6:	e00c      	b.n	8009dd2 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	0018      	movs	r0, r3
 8009dbc:	f7fb fae2 	bl	8005384 <HAL_UART_RxCpltCallback>
}
 8009dc0:	e007      	b.n	8009dd2 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	699a      	ldr	r2, [r3, #24]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2108      	movs	r1, #8
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	619a      	str	r2, [r3, #24]
}
 8009dd2:	46c0      	nop			; (mov r8, r8)
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	b010      	add	sp, #64	; 0x40
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	fffffedf 	.word	0xfffffedf

08009de0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b090      	sub	sp, #64	; 0x40
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009de8:	203e      	movs	r0, #62	; 0x3e
 8009dea:	183b      	adds	r3, r7, r0
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	2160      	movs	r1, #96	; 0x60
 8009df0:	5a52      	ldrh	r2, [r2, r1]
 8009df2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	228c      	movs	r2, #140	; 0x8c
 8009df8:	589b      	ldr	r3, [r3, r2]
 8009dfa:	2b22      	cmp	r3, #34	; 0x22
 8009dfc:	d000      	beq.n	8009e00 <UART_RxISR_16BIT+0x20>
 8009dfe:	e09a      	b.n	8009f36 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e06:	213c      	movs	r1, #60	; 0x3c
 8009e08:	187b      	adds	r3, r7, r1
 8009e0a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e10:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8009e12:	187b      	adds	r3, r7, r1
 8009e14:	183a      	adds	r2, r7, r0
 8009e16:	881b      	ldrh	r3, [r3, #0]
 8009e18:	8812      	ldrh	r2, [r2, #0]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e26:	1c9a      	adds	r2, r3, #2
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	225e      	movs	r2, #94	; 0x5e
 8009e30:	5a9b      	ldrh	r3, [r3, r2]
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b299      	uxth	r1, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	225e      	movs	r2, #94	; 0x5e
 8009e3c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	225e      	movs	r2, #94	; 0x5e
 8009e42:	5a9b      	ldrh	r3, [r3, r2]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d000      	beq.n	8009e4c <UART_RxISR_16BIT+0x6c>
 8009e4a:	e07c      	b.n	8009f46 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e50:	617b      	str	r3, [r7, #20]
  return(result);
 8009e52:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e54:	637b      	str	r3, [r7, #52]	; 0x34
 8009e56:	2301      	movs	r3, #1
 8009e58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	f383 8810 	msr	PRIMASK, r3
}
 8009e60:	46c0      	nop			; (mov r8, r8)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4938      	ldr	r1, [pc, #224]	; (8009f50 <UART_RxISR_16BIT+0x170>)
 8009e6e:	400a      	ands	r2, r1
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	f383 8810 	msr	PRIMASK, r3
}
 8009e7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e82:	623b      	str	r3, [r7, #32]
  return(result);
 8009e84:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e86:	633b      	str	r3, [r7, #48]	; 0x30
 8009e88:	2301      	movs	r3, #1
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	f383 8810 	msr	PRIMASK, r3
}
 8009e92:	46c0      	nop			; (mov r8, r8)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	438a      	bics	r2, r1
 8009ea2:	609a      	str	r2, [r3, #8]
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	f383 8810 	msr	PRIMASK, r3
}
 8009eae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	228c      	movs	r2, #140	; 0x8c
 8009eb4:	2120      	movs	r1, #32
 8009eb6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d12f      	bne.n	8009f2c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ed6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ed8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009edc:	2301      	movs	r3, #1
 8009ede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f383 8810 	msr	PRIMASK, r3
}
 8009ee6:	46c0      	nop			; (mov r8, r8)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2110      	movs	r1, #16
 8009ef4:	438a      	bics	r2, r1
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f383 8810 	msr	PRIMASK, r3
}
 8009f02:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	2210      	movs	r2, #16
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	2b10      	cmp	r3, #16
 8009f10:	d103      	bne.n	8009f1a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2210      	movs	r2, #16
 8009f18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	225c      	movs	r2, #92	; 0x5c
 8009f1e:	5a9a      	ldrh	r2, [r3, r2]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	0011      	movs	r1, r2
 8009f24:	0018      	movs	r0, r3
 8009f26:	f7ff f959 	bl	80091dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f2a:	e00c      	b.n	8009f46 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	0018      	movs	r0, r3
 8009f30:	f7fb fa28 	bl	8005384 <HAL_UART_RxCpltCallback>
}
 8009f34:	e007      	b.n	8009f46 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	699a      	ldr	r2, [r3, #24]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2108      	movs	r1, #8
 8009f42:	430a      	orrs	r2, r1
 8009f44:	619a      	str	r2, [r3, #24]
}
 8009f46:	46c0      	nop			; (mov r8, r8)
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	b010      	add	sp, #64	; 0x40
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	46c0      	nop			; (mov r8, r8)
 8009f50:	fffffedf 	.word	0xfffffedf

08009f54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b09c      	sub	sp, #112	; 0x70
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009f5c:	236a      	movs	r3, #106	; 0x6a
 8009f5e:	18fb      	adds	r3, r7, r3
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	2160      	movs	r1, #96	; 0x60
 8009f64:	5a52      	ldrh	r2, [r2, r1]
 8009f66:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	228c      	movs	r2, #140	; 0x8c
 8009f84:	589b      	ldr	r3, [r3, r2]
 8009f86:	2b22      	cmp	r3, #34	; 0x22
 8009f88:	d000      	beq.n	8009f8c <UART_RxISR_8BIT_FIFOEN+0x38>
 8009f8a:	e144      	b.n	800a216 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f8c:	235e      	movs	r3, #94	; 0x5e
 8009f8e:	18fb      	adds	r3, r7, r3
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	2168      	movs	r1, #104	; 0x68
 8009f94:	5a52      	ldrh	r2, [r2, r1]
 8009f96:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f98:	e0eb      	b.n	800a172 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fa0:	215c      	movs	r1, #92	; 0x5c
 8009fa2:	187b      	adds	r3, r7, r1
 8009fa4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009fa6:	187b      	adds	r3, r7, r1
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	236a      	movs	r3, #106	; 0x6a
 8009fae:	18fb      	adds	r3, r7, r3
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	b2d9      	uxtb	r1, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb8:	400a      	ands	r2, r1
 8009fba:	b2d2      	uxtb	r2, r2
 8009fbc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	225e      	movs	r2, #94	; 0x5e
 8009fcc:	5a9b      	ldrh	r3, [r3, r2]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b299      	uxth	r1, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	225e      	movs	r2, #94	; 0x5e
 8009fd8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe4:	2207      	movs	r2, #7
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	d049      	beq.n	800a07e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fec:	2201      	movs	r2, #1
 8009fee:	4013      	ands	r3, r2
 8009ff0:	d010      	beq.n	800a014 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8009ff2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ff4:	2380      	movs	r3, #128	; 0x80
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	d00b      	beq.n	800a014 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2201      	movs	r2, #1
 800a002:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2290      	movs	r2, #144	; 0x90
 800a008:	589b      	ldr	r3, [r3, r2]
 800a00a:	2201      	movs	r2, #1
 800a00c:	431a      	orrs	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2190      	movs	r1, #144	; 0x90
 800a012:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a016:	2202      	movs	r2, #2
 800a018:	4013      	ands	r3, r2
 800a01a:	d00f      	beq.n	800a03c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800a01c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a01e:	2201      	movs	r2, #1
 800a020:	4013      	ands	r3, r2
 800a022:	d00b      	beq.n	800a03c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2202      	movs	r2, #2
 800a02a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2290      	movs	r2, #144	; 0x90
 800a030:	589b      	ldr	r3, [r3, r2]
 800a032:	2204      	movs	r2, #4
 800a034:	431a      	orrs	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2190      	movs	r1, #144	; 0x90
 800a03a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a03e:	2204      	movs	r2, #4
 800a040:	4013      	ands	r3, r2
 800a042:	d00f      	beq.n	800a064 <UART_RxISR_8BIT_FIFOEN+0x110>
 800a044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a046:	2201      	movs	r2, #1
 800a048:	4013      	ands	r3, r2
 800a04a:	d00b      	beq.n	800a064 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2204      	movs	r2, #4
 800a052:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2290      	movs	r2, #144	; 0x90
 800a058:	589b      	ldr	r3, [r3, r2]
 800a05a:	2202      	movs	r2, #2
 800a05c:	431a      	orrs	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2190      	movs	r1, #144	; 0x90
 800a062:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2290      	movs	r2, #144	; 0x90
 800a068:	589b      	ldr	r3, [r3, r2]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d007      	beq.n	800a07e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	0018      	movs	r0, r3
 800a072:	f7ff f8ab 	bl	80091cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2290      	movs	r2, #144	; 0x90
 800a07a:	2100      	movs	r1, #0
 800a07c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	225e      	movs	r2, #94	; 0x5e
 800a082:	5a9b      	ldrh	r3, [r3, r2]
 800a084:	b29b      	uxth	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d173      	bne.n	800a172 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a08a:	f3ef 8310 	mrs	r3, PRIMASK
 800a08e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a092:	65bb      	str	r3, [r7, #88]	; 0x58
 800a094:	2301      	movs	r3, #1
 800a096:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	f383 8810 	msr	PRIMASK, r3
}
 800a09e:	46c0      	nop			; (mov r8, r8)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4961      	ldr	r1, [pc, #388]	; (800a230 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800a0ac:	400a      	ands	r2, r1
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b6:	f383 8810 	msr	PRIMASK, r3
}
 800a0ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a0c0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0c4:	657b      	str	r3, [r7, #84]	; 0x54
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0cc:	f383 8810 	msr	PRIMASK, r3
}
 800a0d0:	46c0      	nop			; (mov r8, r8)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4955      	ldr	r1, [pc, #340]	; (800a234 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800a0de:	400a      	ands	r2, r1
 800a0e0:	609a      	str	r2, [r3, #8]
 800a0e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0e4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0e8:	f383 8810 	msr	PRIMASK, r3
}
 800a0ec:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	228c      	movs	r2, #140	; 0x8c
 800a0f2:	2120      	movs	r1, #32
 800a0f4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a106:	2b01      	cmp	r3, #1
 800a108:	d12f      	bne.n	800a16a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a110:	f3ef 8310 	mrs	r3, PRIMASK
 800a114:	623b      	str	r3, [r7, #32]
  return(result);
 800a116:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a118:	653b      	str	r3, [r7, #80]	; 0x50
 800a11a:	2301      	movs	r3, #1
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	f383 8810 	msr	PRIMASK, r3
}
 800a124:	46c0      	nop			; (mov r8, r8)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2110      	movs	r1, #16
 800a132:	438a      	bics	r2, r1
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a138:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13c:	f383 8810 	msr	PRIMASK, r3
}
 800a140:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	69db      	ldr	r3, [r3, #28]
 800a148:	2210      	movs	r2, #16
 800a14a:	4013      	ands	r3, r2
 800a14c:	2b10      	cmp	r3, #16
 800a14e:	d103      	bne.n	800a158 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2210      	movs	r2, #16
 800a156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	225c      	movs	r2, #92	; 0x5c
 800a15c:	5a9a      	ldrh	r2, [r3, r2]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	0011      	movs	r1, r2
 800a162:	0018      	movs	r0, r3
 800a164:	f7ff f83a 	bl	80091dc <HAL_UARTEx_RxEventCallback>
 800a168:	e003      	b.n	800a172 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	0018      	movs	r0, r3
 800a16e:	f7fb f909 	bl	8005384 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a172:	235e      	movs	r3, #94	; 0x5e
 800a174:	18fb      	adds	r3, r7, r3
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d004      	beq.n	800a186 <UART_RxISR_8BIT_FIFOEN+0x232>
 800a17c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a17e:	2220      	movs	r2, #32
 800a180:	4013      	ands	r3, r2
 800a182:	d000      	beq.n	800a186 <UART_RxISR_8BIT_FIFOEN+0x232>
 800a184:	e709      	b.n	8009f9a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a186:	204e      	movs	r0, #78	; 0x4e
 800a188:	183b      	adds	r3, r7, r0
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	215e      	movs	r1, #94	; 0x5e
 800a18e:	5a52      	ldrh	r2, [r2, r1]
 800a190:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a192:	0001      	movs	r1, r0
 800a194:	187b      	adds	r3, r7, r1
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d044      	beq.n	800a226 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2268      	movs	r2, #104	; 0x68
 800a1a0:	5a9b      	ldrh	r3, [r3, r2]
 800a1a2:	187a      	adds	r2, r7, r1
 800a1a4:	8812      	ldrh	r2, [r2, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d23d      	bcs.n	800a226 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f383 8810 	msr	PRIMASK, r3
}
 800a1be:	46c0      	nop			; (mov r8, r8)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	689a      	ldr	r2, [r3, #8]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	491b      	ldr	r1, [pc, #108]	; (800a238 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800a1cc:	400a      	ands	r2, r1
 800a1ce:	609a      	str	r2, [r3, #8]
 800a1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f383 8810 	msr	PRIMASK, r3
}
 800a1da:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a17      	ldr	r2, [pc, #92]	; (800a23c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800a1e0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a1e6:	617b      	str	r3, [r7, #20]
  return(result);
 800a1e8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a1ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f383 8810 	msr	PRIMASK, r3
}
 800a1f6:	46c0      	nop			; (mov r8, r8)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2120      	movs	r1, #32
 800a204:	430a      	orrs	r2, r1
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a20a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	f383 8810 	msr	PRIMASK, r3
}
 800a212:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a214:	e007      	b.n	800a226 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	699a      	ldr	r2, [r3, #24]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2108      	movs	r1, #8
 800a222:	430a      	orrs	r2, r1
 800a224:	619a      	str	r2, [r3, #24]
}
 800a226:	46c0      	nop			; (mov r8, r8)
 800a228:	46bd      	mov	sp, r7
 800a22a:	b01c      	add	sp, #112	; 0x70
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	46c0      	nop			; (mov r8, r8)
 800a230:	fffffeff 	.word	0xfffffeff
 800a234:	effffffe 	.word	0xeffffffe
 800a238:	efffffff 	.word	0xefffffff
 800a23c:	08009c6d 	.word	0x08009c6d

0800a240 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b09e      	sub	sp, #120	; 0x78
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a248:	2372      	movs	r3, #114	; 0x72
 800a24a:	18fb      	adds	r3, r7, r3
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	2160      	movs	r1, #96	; 0x60
 800a250:	5a52      	ldrh	r2, [r2, r1]
 800a252:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	228c      	movs	r2, #140	; 0x8c
 800a270:	589b      	ldr	r3, [r3, r2]
 800a272:	2b22      	cmp	r3, #34	; 0x22
 800a274:	d000      	beq.n	800a278 <UART_RxISR_16BIT_FIFOEN+0x38>
 800a276:	e144      	b.n	800a502 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a278:	2366      	movs	r3, #102	; 0x66
 800a27a:	18fb      	adds	r3, r7, r3
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	2168      	movs	r1, #104	; 0x68
 800a280:	5a52      	ldrh	r2, [r2, r1]
 800a282:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a284:	e0eb      	b.n	800a45e <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a28c:	2164      	movs	r1, #100	; 0x64
 800a28e:	187b      	adds	r3, r7, r1
 800a290:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a296:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800a298:	187b      	adds	r3, r7, r1
 800a29a:	2272      	movs	r2, #114	; 0x72
 800a29c:	18ba      	adds	r2, r7, r2
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	8812      	ldrh	r2, [r2, #0]
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ae:	1c9a      	adds	r2, r3, #2
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	225e      	movs	r2, #94	; 0x5e
 800a2b8:	5a9b      	ldrh	r3, [r3, r2]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	b299      	uxth	r1, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	225e      	movs	r2, #94	; 0x5e
 800a2c4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a2ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2d0:	2207      	movs	r2, #7
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	d049      	beq.n	800a36a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2d8:	2201      	movs	r2, #1
 800a2da:	4013      	ands	r3, r2
 800a2dc:	d010      	beq.n	800a300 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800a2de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2e0:	2380      	movs	r3, #128	; 0x80
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	d00b      	beq.n	800a300 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2290      	movs	r2, #144	; 0x90
 800a2f4:	589b      	ldr	r3, [r3, r2]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2190      	movs	r1, #144	; 0x90
 800a2fe:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a302:	2202      	movs	r2, #2
 800a304:	4013      	ands	r3, r2
 800a306:	d00f      	beq.n	800a328 <UART_RxISR_16BIT_FIFOEN+0xe8>
 800a308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a30a:	2201      	movs	r2, #1
 800a30c:	4013      	ands	r3, r2
 800a30e:	d00b      	beq.n	800a328 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2202      	movs	r2, #2
 800a316:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2290      	movs	r2, #144	; 0x90
 800a31c:	589b      	ldr	r3, [r3, r2]
 800a31e:	2204      	movs	r2, #4
 800a320:	431a      	orrs	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2190      	movs	r1, #144	; 0x90
 800a326:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a32a:	2204      	movs	r2, #4
 800a32c:	4013      	ands	r3, r2
 800a32e:	d00f      	beq.n	800a350 <UART_RxISR_16BIT_FIFOEN+0x110>
 800a330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a332:	2201      	movs	r2, #1
 800a334:	4013      	ands	r3, r2
 800a336:	d00b      	beq.n	800a350 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2204      	movs	r2, #4
 800a33e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2290      	movs	r2, #144	; 0x90
 800a344:	589b      	ldr	r3, [r3, r2]
 800a346:	2202      	movs	r2, #2
 800a348:	431a      	orrs	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2190      	movs	r1, #144	; 0x90
 800a34e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2290      	movs	r2, #144	; 0x90
 800a354:	589b      	ldr	r3, [r3, r2]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d007      	beq.n	800a36a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	0018      	movs	r0, r3
 800a35e:	f7fe ff35 	bl	80091cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2290      	movs	r2, #144	; 0x90
 800a366:	2100      	movs	r1, #0
 800a368:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	225e      	movs	r2, #94	; 0x5e
 800a36e:	5a9b      	ldrh	r3, [r3, r2]
 800a370:	b29b      	uxth	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d173      	bne.n	800a45e <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a376:	f3ef 8310 	mrs	r3, PRIMASK
 800a37a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a37e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a380:	2301      	movs	r3, #1
 800a382:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a386:	f383 8810 	msr	PRIMASK, r3
}
 800a38a:	46c0      	nop			; (mov r8, r8)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4961      	ldr	r1, [pc, #388]	; (800a51c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800a398:	400a      	ands	r2, r1
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a39e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	f383 8810 	msr	PRIMASK, r3
}
 800a3a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b8:	f383 8810 	msr	PRIMASK, r3
}
 800a3bc:	46c0      	nop			; (mov r8, r8)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689a      	ldr	r2, [r3, #8]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4955      	ldr	r1, [pc, #340]	; (800a520 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800a3ca:	400a      	ands	r2, r1
 800a3cc:	609a      	str	r2, [r3, #8]
 800a3ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3d4:	f383 8810 	msr	PRIMASK, r3
}
 800a3d8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	228c      	movs	r2, #140	; 0x8c
 800a3de:	2120      	movs	r1, #32
 800a3e0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d12f      	bne.n	800a456 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a400:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a404:	657b      	str	r3, [r7, #84]	; 0x54
 800a406:	2301      	movs	r3, #1
 800a408:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	f383 8810 	msr	PRIMASK, r3
}
 800a410:	46c0      	nop			; (mov r8, r8)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2110      	movs	r1, #16
 800a41e:	438a      	bics	r2, r1
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a424:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	f383 8810 	msr	PRIMASK, r3
}
 800a42c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	2210      	movs	r2, #16
 800a436:	4013      	ands	r3, r2
 800a438:	2b10      	cmp	r3, #16
 800a43a:	d103      	bne.n	800a444 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2210      	movs	r2, #16
 800a442:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	225c      	movs	r2, #92	; 0x5c
 800a448:	5a9a      	ldrh	r2, [r3, r2]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	0011      	movs	r1, r2
 800a44e:	0018      	movs	r0, r3
 800a450:	f7fe fec4 	bl	80091dc <HAL_UARTEx_RxEventCallback>
 800a454:	e003      	b.n	800a45e <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	0018      	movs	r0, r3
 800a45a:	f7fa ff93 	bl	8005384 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a45e:	2366      	movs	r3, #102	; 0x66
 800a460:	18fb      	adds	r3, r7, r3
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d004      	beq.n	800a472 <UART_RxISR_16BIT_FIFOEN+0x232>
 800a468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a46a:	2220      	movs	r2, #32
 800a46c:	4013      	ands	r3, r2
 800a46e:	d000      	beq.n	800a472 <UART_RxISR_16BIT_FIFOEN+0x232>
 800a470:	e709      	b.n	800a286 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a472:	2052      	movs	r0, #82	; 0x52
 800a474:	183b      	adds	r3, r7, r0
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	215e      	movs	r1, #94	; 0x5e
 800a47a:	5a52      	ldrh	r2, [r2, r1]
 800a47c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a47e:	0001      	movs	r1, r0
 800a480:	187b      	adds	r3, r7, r1
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d044      	beq.n	800a512 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2268      	movs	r2, #104	; 0x68
 800a48c:	5a9b      	ldrh	r3, [r3, r2]
 800a48e:	187a      	adds	r2, r7, r1
 800a490:	8812      	ldrh	r2, [r2, #0]
 800a492:	429a      	cmp	r2, r3
 800a494:	d23d      	bcs.n	800a512 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a496:	f3ef 8310 	mrs	r3, PRIMASK
 800a49a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a49c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a49e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	f383 8810 	msr	PRIMASK, r3
}
 800a4aa:	46c0      	nop			; (mov r8, r8)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	491b      	ldr	r1, [pc, #108]	; (800a524 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800a4b8:	400a      	ands	r2, r1
 800a4ba:	609a      	str	r2, [r3, #8]
 800a4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f383 8810 	msr	PRIMASK, r3
}
 800a4c6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a17      	ldr	r2, [pc, #92]	; (800a528 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800a4cc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a4d2:	61bb      	str	r3, [r7, #24]
  return(result);
 800a4d4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4d8:	2301      	movs	r3, #1
 800a4da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	f383 8810 	msr	PRIMASK, r3
}
 800a4e2:	46c0      	nop			; (mov r8, r8)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2120      	movs	r1, #32
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	f383 8810 	msr	PRIMASK, r3
}
 800a4fe:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a500:	e007      	b.n	800a512 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	699a      	ldr	r2, [r3, #24]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2108      	movs	r1, #8
 800a50e:	430a      	orrs	r2, r1
 800a510:	619a      	str	r2, [r3, #24]
}
 800a512:	46c0      	nop			; (mov r8, r8)
 800a514:	46bd      	mov	sp, r7
 800a516:	b01e      	add	sp, #120	; 0x78
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	46c0      	nop			; (mov r8, r8)
 800a51c:	fffffeff 	.word	0xfffffeff
 800a520:	effffffe 	.word	0xeffffffe
 800a524:	efffffff 	.word	0xefffffff
 800a528:	08009de1 	.word	0x08009de1

0800a52c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a534:	46c0      	nop			; (mov r8, r8)
 800a536:	46bd      	mov	sp, r7
 800a538:	b002      	add	sp, #8
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a544:	46c0      	nop			; (mov r8, r8)
 800a546:	46bd      	mov	sp, r7
 800a548:	b002      	add	sp, #8
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a554:	46c0      	nop			; (mov r8, r8)
 800a556:	46bd      	mov	sp, r7
 800a558:	b002      	add	sp, #8
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2284      	movs	r2, #132	; 0x84
 800a568:	5c9b      	ldrb	r3, [r3, r2]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d101      	bne.n	800a572 <HAL_UARTEx_DisableFifoMode+0x16>
 800a56e:	2302      	movs	r3, #2
 800a570:	e027      	b.n	800a5c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2284      	movs	r2, #132	; 0x84
 800a576:	2101      	movs	r1, #1
 800a578:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2288      	movs	r2, #136	; 0x88
 800a57e:	2124      	movs	r1, #36	; 0x24
 800a580:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2101      	movs	r1, #1
 800a596:	438a      	bics	r2, r1
 800a598:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	4a0b      	ldr	r2, [pc, #44]	; (800a5cc <HAL_UARTEx_DisableFifoMode+0x70>)
 800a59e:	4013      	ands	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2288      	movs	r2, #136	; 0x88
 800a5b4:	2120      	movs	r1, #32
 800a5b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2284      	movs	r2, #132	; 0x84
 800a5bc:	2100      	movs	r1, #0
 800a5be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	b004      	add	sp, #16
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	dfffffff 	.word	0xdfffffff

0800a5d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2284      	movs	r2, #132	; 0x84
 800a5de:	5c9b      	ldrb	r3, [r3, r2]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d101      	bne.n	800a5e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	e02e      	b.n	800a646 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2284      	movs	r2, #132	; 0x84
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2288      	movs	r2, #136	; 0x88
 800a5f4:	2124      	movs	r1, #36	; 0x24
 800a5f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2101      	movs	r1, #1
 800a60c:	438a      	bics	r2, r1
 800a60e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	08d9      	lsrs	r1, r3, #3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	0018      	movs	r0, r3
 800a628:	f000 f854 	bl	800a6d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2288      	movs	r2, #136	; 0x88
 800a638:	2120      	movs	r1, #32
 800a63a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2284      	movs	r2, #132	; 0x84
 800a640:	2100      	movs	r1, #0
 800a642:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	0018      	movs	r0, r3
 800a648:	46bd      	mov	sp, r7
 800a64a:	b004      	add	sp, #16
 800a64c:	bd80      	pop	{r7, pc}
	...

0800a650 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2284      	movs	r2, #132	; 0x84
 800a65e:	5c9b      	ldrb	r3, [r3, r2]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a664:	2302      	movs	r3, #2
 800a666:	e02f      	b.n	800a6c8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2284      	movs	r2, #132	; 0x84
 800a66c:	2101      	movs	r1, #1
 800a66e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2288      	movs	r2, #136	; 0x88
 800a674:	2124      	movs	r1, #36	; 0x24
 800a676:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2101      	movs	r1, #1
 800a68c:	438a      	bics	r2, r1
 800a68e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	4a0e      	ldr	r2, [pc, #56]	; (800a6d0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a698:	4013      	ands	r3, r2
 800a69a:	0019      	movs	r1, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	f000 f813 	bl	800a6d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2288      	movs	r2, #136	; 0x88
 800a6ba:	2120      	movs	r1, #32
 800a6bc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2284      	movs	r2, #132	; 0x84
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	b004      	add	sp, #16
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	f1ffffff 	.word	0xf1ffffff

0800a6d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d108      	bne.n	800a6f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	226a      	movs	r2, #106	; 0x6a
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2268      	movs	r2, #104	; 0x68
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6f4:	e043      	b.n	800a77e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6f6:	260f      	movs	r6, #15
 800a6f8:	19bb      	adds	r3, r7, r6
 800a6fa:	2208      	movs	r2, #8
 800a6fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6fe:	200e      	movs	r0, #14
 800a700:	183b      	adds	r3, r7, r0
 800a702:	2208      	movs	r2, #8
 800a704:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	0e5b      	lsrs	r3, r3, #25
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	240d      	movs	r4, #13
 800a712:	193b      	adds	r3, r7, r4
 800a714:	2107      	movs	r1, #7
 800a716:	400a      	ands	r2, r1
 800a718:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	0f5b      	lsrs	r3, r3, #29
 800a722:	b2da      	uxtb	r2, r3
 800a724:	250c      	movs	r5, #12
 800a726:	197b      	adds	r3, r7, r5
 800a728:	2107      	movs	r1, #7
 800a72a:	400a      	ands	r2, r1
 800a72c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a72e:	183b      	adds	r3, r7, r0
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	197a      	adds	r2, r7, r5
 800a734:	7812      	ldrb	r2, [r2, #0]
 800a736:	4914      	ldr	r1, [pc, #80]	; (800a788 <UARTEx_SetNbDataToProcess+0xb4>)
 800a738:	5c8a      	ldrb	r2, [r1, r2]
 800a73a:	435a      	muls	r2, r3
 800a73c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a73e:	197b      	adds	r3, r7, r5
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	4a12      	ldr	r2, [pc, #72]	; (800a78c <UARTEx_SetNbDataToProcess+0xb8>)
 800a744:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a746:	0019      	movs	r1, r3
 800a748:	f7f5 fd8e 	bl	8000268 <__divsi3>
 800a74c:	0003      	movs	r3, r0
 800a74e:	b299      	uxth	r1, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	226a      	movs	r2, #106	; 0x6a
 800a754:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a756:	19bb      	adds	r3, r7, r6
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	193a      	adds	r2, r7, r4
 800a75c:	7812      	ldrb	r2, [r2, #0]
 800a75e:	490a      	ldr	r1, [pc, #40]	; (800a788 <UARTEx_SetNbDataToProcess+0xb4>)
 800a760:	5c8a      	ldrb	r2, [r1, r2]
 800a762:	435a      	muls	r2, r3
 800a764:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a766:	193b      	adds	r3, r7, r4
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	4a08      	ldr	r2, [pc, #32]	; (800a78c <UARTEx_SetNbDataToProcess+0xb8>)
 800a76c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a76e:	0019      	movs	r1, r3
 800a770:	f7f5 fd7a 	bl	8000268 <__divsi3>
 800a774:	0003      	movs	r3, r0
 800a776:	b299      	uxth	r1, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2268      	movs	r2, #104	; 0x68
 800a77c:	5299      	strh	r1, [r3, r2]
}
 800a77e:	46c0      	nop			; (mov r8, r8)
 800a780:	46bd      	mov	sp, r7
 800a782:	b005      	add	sp, #20
 800a784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a786:	46c0      	nop			; (mov r8, r8)
 800a788:	0801114c 	.word	0x0801114c
 800a78c:	08011154 	.word	0x08011154

0800a790 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	0002      	movs	r2, r0
 800a798:	1dbb      	adds	r3, r7, #6
 800a79a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a7a0:	1dbb      	adds	r3, r7, #6
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	5e9b      	ldrsh	r3, [r3, r2]
 800a7a6:	2b84      	cmp	r3, #132	; 0x84
 800a7a8:	d006      	beq.n	800a7b8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800a7aa:	1dbb      	adds	r3, r7, #6
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	5e9a      	ldrsh	r2, [r3, r2]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	18d3      	adds	r3, r2, r3
 800a7b4:	3303      	adds	r3, #3
 800a7b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ba:	0018      	movs	r0, r3
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	b004      	add	sp, #16
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a7c6:	f000 fe55 	bl	800b474 <vTaskStartScheduler>
  
  return osOK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a7d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7d4:	b087      	sub	sp, #28
 800a7d6:	af02      	add	r7, sp, #8
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685c      	ldr	r4, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7e8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2208      	movs	r2, #8
 800a7ee:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	f7ff ffcd 	bl	800a790 <makeFreeRtosPriority>
 800a7f6:	0001      	movs	r1, r0
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	230c      	movs	r3, #12
 800a7fc:	18fb      	adds	r3, r7, r3
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	9100      	str	r1, [sp, #0]
 800a802:	0013      	movs	r3, r2
 800a804:	0032      	movs	r2, r6
 800a806:	0029      	movs	r1, r5
 800a808:	0020      	movs	r0, r4
 800a80a:	f000 fc7b 	bl	800b104 <xTaskCreate>
 800a80e:	0003      	movs	r3, r0
 800a810:	2b01      	cmp	r3, #1
 800a812:	d001      	beq.n	800a818 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 800a814:	2300      	movs	r3, #0
 800a816:	e000      	b.n	800a81a <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800a818:	68fb      	ldr	r3, [r7, #12]
}
 800a81a:	0018      	movs	r0, r3
 800a81c:	46bd      	mov	sp, r7
 800a81e:	b005      	add	sp, #20
 800a820:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a822 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b084      	sub	sp, #16
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <osDelay+0x16>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	e000      	b.n	800a83a <osDelay+0x18>
 800a838:	2301      	movs	r3, #1
 800a83a:	0018      	movs	r0, r3
 800a83c:	f000 fdf4 	bl	800b428 <vTaskDelay>
  
  return osOK;
 800a840:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a842:	0018      	movs	r0, r3
 800a844:	46bd      	mov	sp, r7
 800a846:	b004      	add	sp, #16
 800a848:	bd80      	pop	{r7, pc}

0800a84a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3308      	adds	r3, #8
 800a856:	001a      	movs	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	4252      	negs	r2, r2
 800a862:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3308      	adds	r3, #8
 800a868:	001a      	movs	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	3308      	adds	r3, #8
 800a872:	001a      	movs	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a87e:	46c0      	nop			; (mov r8, r8)
 800a880:	46bd      	mov	sp, r7
 800a882:	b002      	add	sp, #8
 800a884:	bd80      	pop	{r7, pc}

0800a886 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a894:	46c0      	nop			; (mov r8, r8)
 800a896:	46bd      	mov	sp, r7
 800a898:	b002      	add	sp, #8
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	689a      	ldr	r2, [r3, #8]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	1c5a      	adds	r2, r3, #1
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	601a      	str	r2, [r3, #0]
}
 800a8d8:	46c0      	nop			; (mov r8, r8)
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	b004      	add	sp, #16
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	d103      	bne.n	800a8fe <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	e00c      	b.n	800a918 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3308      	adds	r3, #8
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	e002      	b.n	800a90c <vListInsert+0x2c>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	429a      	cmp	r2, r3
 800a916:	d2f6      	bcs.n	800a906 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	601a      	str	r2, [r3, #0]
}
 800a944:	46c0      	nop			; (mov r8, r8)
 800a946:	46bd      	mov	sp, r7
 800a948:	b004      	add	sp, #16
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6892      	ldr	r2, [r2, #8]
 800a962:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	6852      	ldr	r2, [r2, #4]
 800a96c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	429a      	cmp	r2, r3
 800a976:	d103      	bne.n	800a980 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	1e5a      	subs	r2, r3, #1
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
}
 800a994:	0018      	movs	r0, r3
 800a996:	46bd      	mov	sp, r7
 800a998:	b004      	add	sp, #16
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <xQueueGenericReset+0x18>
 800a9b0:	b672      	cpsid	i
 800a9b2:	e7fe      	b.n	800a9b2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800a9b4:	f001 fb1c 	bl	800bff0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c4:	434b      	muls	r3, r1
 800a9c6:	18d2      	adds	r2, r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e2:	1e59      	subs	r1, r3, #1
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e8:	434b      	muls	r3, r1
 800a9ea:	18d2      	adds	r2, r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2244      	movs	r2, #68	; 0x44
 800a9f4:	21ff      	movs	r1, #255	; 0xff
 800a9f6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2245      	movs	r2, #69	; 0x45
 800a9fc:	21ff      	movs	r1, #255	; 0xff
 800a9fe:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10d      	bne.n	800aa22 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d013      	beq.n	800aa36 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3310      	adds	r3, #16
 800aa12:	0018      	movs	r0, r3
 800aa14:	f000 ff1c 	bl	800b850 <xTaskRemoveFromEventList>
 800aa18:	1e03      	subs	r3, r0, #0
 800aa1a:	d00c      	beq.n	800aa36 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa1c:	f001 fad8 	bl	800bfd0 <vPortYield>
 800aa20:	e009      	b.n	800aa36 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3310      	adds	r3, #16
 800aa26:	0018      	movs	r0, r3
 800aa28:	f7ff ff0f 	bl	800a84a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	3324      	adds	r3, #36	; 0x24
 800aa30:	0018      	movs	r0, r3
 800aa32:	f7ff ff0a 	bl	800a84a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa36:	f001 faed 	bl	800c014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa3a:	2301      	movs	r3, #1
}
 800aa3c:	0018      	movs	r0, r3
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	b004      	add	sp, #16
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa44:	b590      	push	{r4, r7, lr}
 800aa46:	b08b      	sub	sp, #44	; 0x2c
 800aa48:	af02      	add	r7, sp, #8
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	1dfb      	adds	r3, r7, #7
 800aa50:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <xQueueGenericCreate+0x18>
 800aa58:	b672      	cpsid	i
 800aa5a:	e7fe      	b.n	800aa5a <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	4353      	muls	r3, r2
 800aa62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	3348      	adds	r3, #72	; 0x48
 800aa68:	0018      	movs	r0, r3
 800aa6a:	f001 fb59 	bl	800c120 <pvPortMalloc>
 800aa6e:	0003      	movs	r3, r0
 800aa70:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00e      	beq.n	800aa96 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	3348      	adds	r3, #72	; 0x48
 800aa80:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa82:	1dfb      	adds	r3, r7, #7
 800aa84:	781c      	ldrb	r4, [r3, #0]
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	68b9      	ldr	r1, [r7, #8]
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	0023      	movs	r3, r4
 800aa92:	f000 f805 	bl	800aaa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa96:	69bb      	ldr	r3, [r7, #24]
	}
 800aa98:	0018      	movs	r0, r3
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	b009      	add	sp, #36	; 0x24
 800aa9e:	bd90      	pop	{r4, r7, pc}

0800aaa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	001a      	movs	r2, r3
 800aaae:	1cfb      	adds	r3, r7, #3
 800aab0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d103      	bne.n	800aac0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	69ba      	ldr	r2, [r7, #24]
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	e002      	b.n	800aac6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	2101      	movs	r1, #1
 800aad6:	0018      	movs	r0, r3
 800aad8:	f7ff ff60 	bl	800a99c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aadc:	46c0      	nop			; (mov r8, r8)
 800aade:	46bd      	mov	sp, r7
 800aae0:	b004      	add	sp, #16
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08a      	sub	sp, #40	; 0x28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800aafa:	6a3b      	ldr	r3, [r7, #32]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <xQueueGenericSend+0x20>
 800ab00:	b672      	cpsid	i
 800ab02:	e7fe      	b.n	800ab02 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d103      	bne.n	800ab12 <xQueueGenericSend+0x2e>
 800ab0a:	6a3b      	ldr	r3, [r7, #32]
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <xQueueGenericSend+0x32>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <xQueueGenericSend+0x34>
 800ab16:	2300      	movs	r3, #0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d101      	bne.n	800ab20 <xQueueGenericSend+0x3c>
 800ab1c:	b672      	cpsid	i
 800ab1e:	e7fe      	b.n	800ab1e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d103      	bne.n	800ab2e <xQueueGenericSend+0x4a>
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d101      	bne.n	800ab32 <xQueueGenericSend+0x4e>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e000      	b.n	800ab34 <xQueueGenericSend+0x50>
 800ab32:	2300      	movs	r3, #0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <xQueueGenericSend+0x58>
 800ab38:	b672      	cpsid	i
 800ab3a:	e7fe      	b.n	800ab3a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab3c:	f001 f804 	bl	800bb48 <xTaskGetSchedulerState>
 800ab40:	1e03      	subs	r3, r0, #0
 800ab42:	d102      	bne.n	800ab4a <xQueueGenericSend+0x66>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <xQueueGenericSend+0x6a>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e000      	b.n	800ab50 <xQueueGenericSend+0x6c>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <xQueueGenericSend+0x74>
 800ab54:	b672      	cpsid	i
 800ab56:	e7fe      	b.n	800ab56 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab58:	f001 fa4a 	bl	800bff0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d302      	bcc.n	800ab6e <xQueueGenericSend+0x8a>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d11e      	bne.n	800abac <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	68b9      	ldr	r1, [r7, #8]
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	0018      	movs	r0, r3
 800ab76:	f000 f9ce 	bl	800af16 <prvCopyDataToQueue>
 800ab7a:	0003      	movs	r3, r0
 800ab7c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab7e:	6a3b      	ldr	r3, [r7, #32]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d009      	beq.n	800ab9a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	3324      	adds	r3, #36	; 0x24
 800ab8a:	0018      	movs	r0, r3
 800ab8c:	f000 fe60 	bl	800b850 <xTaskRemoveFromEventList>
 800ab90:	1e03      	subs	r3, r0, #0
 800ab92:	d007      	beq.n	800aba4 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab94:	f001 fa1c 	bl	800bfd0 <vPortYield>
 800ab98:	e004      	b.n	800aba4 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aba0:	f001 fa16 	bl	800bfd0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aba4:	f001 fa36 	bl	800c014 <vPortExitCritical>
				return pdPASS;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e05b      	b.n	800ac64 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d103      	bne.n	800abba <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abb2:	f001 fa2f 	bl	800c014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abb6:	2300      	movs	r3, #0
 800abb8:	e054      	b.n	800ac64 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d106      	bne.n	800abce <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abc0:	2314      	movs	r3, #20
 800abc2:	18fb      	adds	r3, r7, r3
 800abc4:	0018      	movs	r0, r3
 800abc6:	f000 fe9f 	bl	800b908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abca:	2301      	movs	r3, #1
 800abcc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abce:	f001 fa21 	bl	800c014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abd2:	f000 fc85 	bl	800b4e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abd6:	f001 fa0b 	bl	800bff0 <vPortEnterCritical>
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	2244      	movs	r2, #68	; 0x44
 800abde:	5c9b      	ldrb	r3, [r3, r2]
 800abe0:	b25b      	sxtb	r3, r3
 800abe2:	3301      	adds	r3, #1
 800abe4:	d103      	bne.n	800abee <xQueueGenericSend+0x10a>
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	2244      	movs	r2, #68	; 0x44
 800abea:	2100      	movs	r1, #0
 800abec:	5499      	strb	r1, [r3, r2]
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	2245      	movs	r2, #69	; 0x45
 800abf2:	5c9b      	ldrb	r3, [r3, r2]
 800abf4:	b25b      	sxtb	r3, r3
 800abf6:	3301      	adds	r3, #1
 800abf8:	d103      	bne.n	800ac02 <xQueueGenericSend+0x11e>
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	2245      	movs	r2, #69	; 0x45
 800abfe:	2100      	movs	r1, #0
 800ac00:	5499      	strb	r1, [r3, r2]
 800ac02:	f001 fa07 	bl	800c014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac06:	1d3a      	adds	r2, r7, #4
 800ac08:	2314      	movs	r3, #20
 800ac0a:	18fb      	adds	r3, r7, r3
 800ac0c:	0011      	movs	r1, r2
 800ac0e:	0018      	movs	r0, r3
 800ac10:	f000 fe8e 	bl	800b930 <xTaskCheckForTimeOut>
 800ac14:	1e03      	subs	r3, r0, #0
 800ac16:	d11e      	bne.n	800ac56 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	0018      	movs	r0, r3
 800ac1c:	f000 fa5a 	bl	800b0d4 <prvIsQueueFull>
 800ac20:	1e03      	subs	r3, r0, #0
 800ac22:	d011      	beq.n	800ac48 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	3310      	adds	r3, #16
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	0011      	movs	r1, r2
 800ac2c:	0018      	movs	r0, r3
 800ac2e:	f000 fdf1 	bl	800b814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	0018      	movs	r0, r3
 800ac36:	f000 f9d9 	bl	800afec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac3a:	f000 fc5d 	bl	800b4f8 <xTaskResumeAll>
 800ac3e:	1e03      	subs	r3, r0, #0
 800ac40:	d18a      	bne.n	800ab58 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800ac42:	f001 f9c5 	bl	800bfd0 <vPortYield>
 800ac46:	e787      	b.n	800ab58 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac48:	6a3b      	ldr	r3, [r7, #32]
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f000 f9ce 	bl	800afec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac50:	f000 fc52 	bl	800b4f8 <xTaskResumeAll>
 800ac54:	e780      	b.n	800ab58 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	0018      	movs	r0, r3
 800ac5a:	f000 f9c7 	bl	800afec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac5e:	f000 fc4b 	bl	800b4f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac64:	0018      	movs	r0, r3
 800ac66:	46bd      	mov	sp, r7
 800ac68:	b00a      	add	sp, #40	; 0x28
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <xQueueGiveFromISR+0x18>
 800ac80:	b672      	cpsid	i
 800ac82:	e7fe      	b.n	800ac82 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <xQueueGiveFromISR+0x24>
 800ac8c:	b672      	cpsid	i
 800ac8e:	e7fe      	b.n	800ac8e <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d103      	bne.n	800aca0 <xQueueGiveFromISR+0x34>
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <xQueueGiveFromISR+0x38>
 800aca0:	2301      	movs	r3, #1
 800aca2:	e000      	b.n	800aca6 <xQueueGiveFromISR+0x3a>
 800aca4:	2300      	movs	r3, #0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <xQueueGiveFromISR+0x42>
 800acaa:	b672      	cpsid	i
 800acac:	e7fe      	b.n	800acac <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acae:	f001 f9c9 	bl	800c044 <ulSetInterruptMaskFromISR>
 800acb2:	0003      	movs	r3, r0
 800acb4:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acba:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d22c      	bcs.n	800ad20 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800acc6:	200f      	movs	r0, #15
 800acc8:	183b      	adds	r3, r7, r0
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	2145      	movs	r1, #69	; 0x45
 800acce:	5c52      	ldrb	r2, [r2, r1]
 800acd0:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800acda:	183b      	adds	r3, r7, r0
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	b25b      	sxtb	r3, r3
 800ace0:	3301      	adds	r3, #1
 800ace2:	d111      	bne.n	800ad08 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d016      	beq.n	800ad1a <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	3324      	adds	r3, #36	; 0x24
 800acf0:	0018      	movs	r0, r3
 800acf2:	f000 fdad 	bl	800b850 <xTaskRemoveFromEventList>
 800acf6:	1e03      	subs	r3, r0, #0
 800acf8:	d00f      	beq.n	800ad1a <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00c      	beq.n	800ad1a <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2201      	movs	r2, #1
 800ad04:	601a      	str	r2, [r3, #0]
 800ad06:	e008      	b.n	800ad1a <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad08:	230f      	movs	r3, #15
 800ad0a:	18fb      	adds	r3, r7, r3
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	b259      	sxtb	r1, r3
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	2245      	movs	r2, #69	; 0x45
 800ad18:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	61fb      	str	r3, [r7, #28]
 800ad1e:	e001      	b.n	800ad24 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad20:	2300      	movs	r3, #0
 800ad22:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	0018      	movs	r0, r3
 800ad28:	f001 f992 	bl	800c050 <vClearInterruptMaskFromISR>

	return xReturn;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
}
 800ad2e:	0018      	movs	r0, r3
 800ad30:	46bd      	mov	sp, r7
 800ad32:	b008      	add	sp, #32
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b08a      	sub	sp, #40	; 0x28
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad40:	2300      	movs	r3, #0
 800ad42:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <xQueueSemaphoreTake+0x20>
 800ad52:	b672      	cpsid	i
 800ad54:	e7fe      	b.n	800ad54 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <xQueueSemaphoreTake+0x2c>
 800ad5e:	b672      	cpsid	i
 800ad60:	e7fe      	b.n	800ad60 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad62:	f000 fef1 	bl	800bb48 <xTaskGetSchedulerState>
 800ad66:	1e03      	subs	r3, r0, #0
 800ad68:	d102      	bne.n	800ad70 <xQueueSemaphoreTake+0x3a>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <xQueueSemaphoreTake+0x3e>
 800ad70:	2301      	movs	r3, #1
 800ad72:	e000      	b.n	800ad76 <xQueueSemaphoreTake+0x40>
 800ad74:	2300      	movs	r3, #0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <xQueueSemaphoreTake+0x48>
 800ad7a:	b672      	cpsid	i
 800ad7c:	e7fe      	b.n	800ad7c <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad7e:	f001 f937 	bl	800bff0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad86:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d01d      	beq.n	800adca <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	1e5a      	subs	r2, r3, #1
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d104      	bne.n	800ada8 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad9e:	f001 f823 	bl	800bde8 <pvTaskIncrementMutexHeldCount>
 800ada2:	0002      	movs	r2, r0
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d008      	beq.n	800adc2 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	3310      	adds	r3, #16
 800adb4:	0018      	movs	r0, r3
 800adb6:	f000 fd4b 	bl	800b850 <xTaskRemoveFromEventList>
 800adba:	1e03      	subs	r3, r0, #0
 800adbc:	d001      	beq.n	800adc2 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adbe:	f001 f907 	bl	800bfd0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adc2:	f001 f927 	bl	800c014 <vPortExitCritical>
				return pdPASS;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e08b      	b.n	800aee2 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d108      	bne.n	800ade2 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d001      	beq.n	800adda <xQueueSemaphoreTake+0xa4>
 800add6:	b672      	cpsid	i
 800add8:	e7fe      	b.n	800add8 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800adda:	f001 f91b 	bl	800c014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adde:	2300      	movs	r3, #0
 800ade0:	e07f      	b.n	800aee2 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d106      	bne.n	800adf6 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ade8:	230c      	movs	r3, #12
 800adea:	18fb      	adds	r3, r7, r3
 800adec:	0018      	movs	r0, r3
 800adee:	f000 fd8b 	bl	800b908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adf2:	2301      	movs	r3, #1
 800adf4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adf6:	f001 f90d 	bl	800c014 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adfa:	f000 fb71 	bl	800b4e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adfe:	f001 f8f7 	bl	800bff0 <vPortEnterCritical>
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	2244      	movs	r2, #68	; 0x44
 800ae06:	5c9b      	ldrb	r3, [r3, r2]
 800ae08:	b25b      	sxtb	r3, r3
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	d103      	bne.n	800ae16 <xQueueSemaphoreTake+0xe0>
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	2244      	movs	r2, #68	; 0x44
 800ae12:	2100      	movs	r1, #0
 800ae14:	5499      	strb	r1, [r3, r2]
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	2245      	movs	r2, #69	; 0x45
 800ae1a:	5c9b      	ldrb	r3, [r3, r2]
 800ae1c:	b25b      	sxtb	r3, r3
 800ae1e:	3301      	adds	r3, #1
 800ae20:	d103      	bne.n	800ae2a <xQueueSemaphoreTake+0xf4>
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	2245      	movs	r2, #69	; 0x45
 800ae26:	2100      	movs	r1, #0
 800ae28:	5499      	strb	r1, [r3, r2]
 800ae2a:	f001 f8f3 	bl	800c014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae2e:	003a      	movs	r2, r7
 800ae30:	230c      	movs	r3, #12
 800ae32:	18fb      	adds	r3, r7, r3
 800ae34:	0011      	movs	r1, r2
 800ae36:	0018      	movs	r0, r3
 800ae38:	f000 fd7a 	bl	800b930 <xTaskCheckForTimeOut>
 800ae3c:	1e03      	subs	r3, r0, #0
 800ae3e:	d12e      	bne.n	800ae9e <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	0018      	movs	r0, r3
 800ae44:	f000 f930 	bl	800b0a8 <prvIsQueueEmpty>
 800ae48:	1e03      	subs	r3, r0, #0
 800ae4a:	d021      	beq.n	800ae90 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800ae54:	f001 f8cc 	bl	800bff0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	0018      	movs	r0, r3
 800ae5e:	f000 fe8f 	bl	800bb80 <xTaskPriorityInherit>
 800ae62:	0003      	movs	r3, r0
 800ae64:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800ae66:	f001 f8d5 	bl	800c014 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	3324      	adds	r3, #36	; 0x24
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	0011      	movs	r1, r2
 800ae72:	0018      	movs	r0, r3
 800ae74:	f000 fcce 	bl	800b814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	0018      	movs	r0, r3
 800ae7c:	f000 f8b6 	bl	800afec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae80:	f000 fb3a 	bl	800b4f8 <xTaskResumeAll>
 800ae84:	1e03      	subs	r3, r0, #0
 800ae86:	d000      	beq.n	800ae8a <xQueueSemaphoreTake+0x154>
 800ae88:	e779      	b.n	800ad7e <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800ae8a:	f001 f8a1 	bl	800bfd0 <vPortYield>
 800ae8e:	e776      	b.n	800ad7e <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	0018      	movs	r0, r3
 800ae94:	f000 f8aa 	bl	800afec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae98:	f000 fb2e 	bl	800b4f8 <xTaskResumeAll>
 800ae9c:	e76f      	b.n	800ad7e <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	0018      	movs	r0, r3
 800aea2:	f000 f8a3 	bl	800afec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aea6:	f000 fb27 	bl	800b4f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	0018      	movs	r0, r3
 800aeae:	f000 f8fb 	bl	800b0a8 <prvIsQueueEmpty>
 800aeb2:	1e03      	subs	r3, r0, #0
 800aeb4:	d100      	bne.n	800aeb8 <xQueueSemaphoreTake+0x182>
 800aeb6:	e762      	b.n	800ad7e <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d010      	beq.n	800aee0 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800aebe:	f001 f897 	bl	800bff0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	0018      	movs	r0, r3
 800aec6:	f000 f810 	bl	800aeea <prvGetDisinheritPriorityAfterTimeout>
 800aeca:	0003      	movs	r3, r0
 800aecc:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	0011      	movs	r1, r2
 800aed6:	0018      	movs	r0, r3
 800aed8:	f000 ff16 	bl	800bd08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aedc:	f001 f89a 	bl	800c014 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aee0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aee2:	0018      	movs	r0, r3
 800aee4:	46bd      	mov	sp, r7
 800aee6:	b00a      	add	sp, #40	; 0x28
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d006      	beq.n	800af08 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2207      	movs	r2, #7
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	60fb      	str	r3, [r7, #12]
 800af06:	e001      	b.n	800af0c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af08:	2300      	movs	r3, #0
 800af0a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af0c:	68fb      	ldr	r3, [r7, #12]
	}
 800af0e:	0018      	movs	r0, r3
 800af10:	46bd      	mov	sp, r7
 800af12:	b004      	add	sp, #16
 800af14:	bd80      	pop	{r7, pc}

0800af16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b086      	sub	sp, #24
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af22:	2300      	movs	r3, #0
 800af24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10e      	bne.n	800af52 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d14e      	bne.n	800afda <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	0018      	movs	r0, r3
 800af42:	f000 fe85 	bl	800bc50 <xTaskPriorityDisinherit>
 800af46:	0003      	movs	r3, r0
 800af48:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	609a      	str	r2, [r3, #8]
 800af50:	e043      	b.n	800afda <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d119      	bne.n	800af8c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6858      	ldr	r0, [r3, #4]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	0019      	movs	r1, r3
 800af64:	f003 f966 	bl	800e234 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af70:	18d2      	adds	r2, r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d32b      	bcc.n	800afda <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	605a      	str	r2, [r3, #4]
 800af8a:	e026      	b.n	800afda <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	68d8      	ldr	r0, [r3, #12]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	0019      	movs	r1, r3
 800af98:	f003 f94c 	bl	800e234 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	68da      	ldr	r2, [r3, #12]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa4:	425b      	negs	r3, r3
 800afa6:	18d2      	adds	r2, r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	68da      	ldr	r2, [r3, #12]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d207      	bcs.n	800afc8 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc0:	425b      	negs	r3, r3
 800afc2:	18d2      	adds	r2, r2, r3
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d105      	bne.n	800afda <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	3b01      	subs	r3, #1
 800afd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	1c5a      	adds	r2, r3, #1
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afe2:	697b      	ldr	r3, [r7, #20]
}
 800afe4:	0018      	movs	r0, r3
 800afe6:	46bd      	mov	sp, r7
 800afe8:	b006      	add	sp, #24
 800afea:	bd80      	pop	{r7, pc}

0800afec <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aff4:	f000 fffc 	bl	800bff0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aff8:	230f      	movs	r3, #15
 800affa:	18fb      	adds	r3, r7, r3
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	2145      	movs	r1, #69	; 0x45
 800b000:	5c52      	ldrb	r2, [r2, r1]
 800b002:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b004:	e013      	b.n	800b02e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d016      	beq.n	800b03c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3324      	adds	r3, #36	; 0x24
 800b012:	0018      	movs	r0, r3
 800b014:	f000 fc1c 	bl	800b850 <xTaskRemoveFromEventList>
 800b018:	1e03      	subs	r3, r0, #0
 800b01a:	d001      	beq.n	800b020 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b01c:	f000 fcd8 	bl	800b9d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b020:	210f      	movs	r1, #15
 800b022:	187b      	adds	r3, r7, r1
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	3b01      	subs	r3, #1
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	187b      	adds	r3, r7, r1
 800b02c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b02e:	230f      	movs	r3, #15
 800b030:	18fb      	adds	r3, r7, r3
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	b25b      	sxtb	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	dce5      	bgt.n	800b006 <prvUnlockQueue+0x1a>
 800b03a:	e000      	b.n	800b03e <prvUnlockQueue+0x52>
					break;
 800b03c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2245      	movs	r2, #69	; 0x45
 800b042:	21ff      	movs	r1, #255	; 0xff
 800b044:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800b046:	f000 ffe5 	bl	800c014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b04a:	f000 ffd1 	bl	800bff0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b04e:	230e      	movs	r3, #14
 800b050:	18fb      	adds	r3, r7, r3
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	2144      	movs	r1, #68	; 0x44
 800b056:	5c52      	ldrb	r2, [r2, r1]
 800b058:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b05a:	e013      	b.n	800b084 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d016      	beq.n	800b092 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3310      	adds	r3, #16
 800b068:	0018      	movs	r0, r3
 800b06a:	f000 fbf1 	bl	800b850 <xTaskRemoveFromEventList>
 800b06e:	1e03      	subs	r3, r0, #0
 800b070:	d001      	beq.n	800b076 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800b072:	f000 fcad 	bl	800b9d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b076:	210e      	movs	r1, #14
 800b078:	187b      	adds	r3, r7, r1
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	b2da      	uxtb	r2, r3
 800b080:	187b      	adds	r3, r7, r1
 800b082:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b084:	230e      	movs	r3, #14
 800b086:	18fb      	adds	r3, r7, r3
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	b25b      	sxtb	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	dce5      	bgt.n	800b05c <prvUnlockQueue+0x70>
 800b090:	e000      	b.n	800b094 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800b092:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2244      	movs	r2, #68	; 0x44
 800b098:	21ff      	movs	r1, #255	; 0xff
 800b09a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800b09c:	f000 ffba 	bl	800c014 <vPortExitCritical>
}
 800b0a0:	46c0      	nop			; (mov r8, r8)
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	b004      	add	sp, #16
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0b0:	f000 ff9e 	bl	800bff0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	e001      	b.n	800b0c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0c6:	f000 ffa5 	bl	800c014 <vPortExitCritical>

	return xReturn;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
}
 800b0cc:	0018      	movs	r0, r3
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	b004      	add	sp, #16
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0dc:	f000 ff88 	bl	800bff0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d102      	bne.n	800b0f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	e001      	b.n	800b0f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0f6:	f000 ff8d 	bl	800c014 <vPortExitCritical>

	return xReturn;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
}
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	46bd      	mov	sp, r7
 800b100:	b004      	add	sp, #16
 800b102:	bd80      	pop	{r7, pc}

0800b104 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b104:	b590      	push	{r4, r7, lr}
 800b106:	b08d      	sub	sp, #52	; 0x34
 800b108:	af04      	add	r7, sp, #16
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	603b      	str	r3, [r7, #0]
 800b110:	1dbb      	adds	r3, r7, #6
 800b112:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b114:	1dbb      	adds	r3, r7, #6
 800b116:	881b      	ldrh	r3, [r3, #0]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	0018      	movs	r0, r3
 800b11c:	f001 f800 	bl	800c120 <pvPortMalloc>
 800b120:	0003      	movs	r3, r0
 800b122:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d010      	beq.n	800b14c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b12a:	2054      	movs	r0, #84	; 0x54
 800b12c:	f000 fff8 	bl	800c120 <pvPortMalloc>
 800b130:	0003      	movs	r3, r0
 800b132:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	631a      	str	r2, [r3, #48]	; 0x30
 800b140:	e006      	b.n	800b150 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	0018      	movs	r0, r3
 800b146:	f001 f897 	bl	800c278 <vPortFree>
 800b14a:	e001      	b.n	800b150 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d016      	beq.n	800b184 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b156:	1dbb      	adds	r3, r7, #6
 800b158:	881a      	ldrh	r2, [r3, #0]
 800b15a:	683c      	ldr	r4, [r7, #0]
 800b15c:	68b9      	ldr	r1, [r7, #8]
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	2300      	movs	r3, #0
 800b162:	9303      	str	r3, [sp, #12]
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	9302      	str	r3, [sp, #8]
 800b168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b16a:	9301      	str	r3, [sp, #4]
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	0023      	movs	r3, r4
 800b172:	f000 f80f 	bl	800b194 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	0018      	movs	r0, r3
 800b17a:	f000 f88d 	bl	800b298 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b17e:	2301      	movs	r3, #1
 800b180:	61bb      	str	r3, [r7, #24]
 800b182:	e002      	b.n	800b18a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b184:	2301      	movs	r3, #1
 800b186:	425b      	negs	r3, r3
 800b188:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b18a:	69bb      	ldr	r3, [r7, #24]
	}
 800b18c:	0018      	movs	r0, r3
 800b18e:	46bd      	mov	sp, r7
 800b190:	b009      	add	sp, #36	; 0x24
 800b192:	bd90      	pop	{r4, r7, pc}

0800b194 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	493a      	ldr	r1, [pc, #232]	; (800b294 <prvInitialiseNewTask+0x100>)
 800b1aa:	468c      	mov	ip, r1
 800b1ac:	4463      	add	r3, ip
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	18d3      	adds	r3, r2, r3
 800b1b2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	2207      	movs	r2, #7
 800b1b8:	4393      	bics	r3, r2
 800b1ba:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2207      	movs	r2, #7
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	d001      	beq.n	800b1c8 <prvInitialiseNewTask+0x34>
 800b1c4:	b672      	cpsid	i
 800b1c6:	e7fe      	b.n	800b1c6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d020      	beq.n	800b210 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	617b      	str	r3, [r7, #20]
 800b1d2:	e013      	b.n	800b1fc <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	18d3      	adds	r3, r2, r3
 800b1da:	7818      	ldrb	r0, [r3, #0]
 800b1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1de:	2134      	movs	r1, #52	; 0x34
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	18d3      	adds	r3, r2, r3
 800b1e4:	185b      	adds	r3, r3, r1
 800b1e6:	1c02      	adds	r2, r0, #0
 800b1e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	18d3      	adds	r3, r2, r3
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d006      	beq.n	800b204 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	617b      	str	r3, [r7, #20]
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	2b0f      	cmp	r3, #15
 800b200:	d9e8      	bls.n	800b1d4 <prvInitialiseNewTask+0x40>
 800b202:	e000      	b.n	800b206 <prvInitialiseNewTask+0x72>
			{
				break;
 800b204:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	2243      	movs	r2, #67	; 0x43
 800b20a:	2100      	movs	r1, #0
 800b20c:	5499      	strb	r1, [r3, r2]
 800b20e:	e003      	b.n	800b218 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b212:	2234      	movs	r2, #52	; 0x34
 800b214:	2100      	movs	r1, #0
 800b216:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	2b06      	cmp	r3, #6
 800b21c:	d901      	bls.n	800b222 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b21e:	2306      	movs	r3, #6
 800b220:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	6a3a      	ldr	r2, [r7, #32]
 800b226:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	6a3a      	ldr	r2, [r7, #32]
 800b22c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b230:	2200      	movs	r2, #0
 800b232:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b236:	3304      	adds	r3, #4
 800b238:	0018      	movs	r0, r3
 800b23a:	f7ff fb24 	bl	800a886 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	3318      	adds	r3, #24
 800b242:	0018      	movs	r0, r3
 800b244:	f7ff fb1f 	bl	800a886 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b24c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b24e:	6a3b      	ldr	r3, [r7, #32]
 800b250:	2207      	movs	r2, #7
 800b252:	1ad2      	subs	r2, r2, r3
 800b254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b256:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b25c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	2200      	movs	r2, #0
 800b262:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	2250      	movs	r2, #80	; 0x50
 800b268:	2100      	movs	r1, #0
 800b26a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b26c:	683a      	ldr	r2, [r7, #0]
 800b26e:	68f9      	ldr	r1, [r7, #12]
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	0018      	movs	r0, r3
 800b274:	f000 fe1e 	bl	800beb4 <pxPortInitialiseStack>
 800b278:	0002      	movs	r2, r0
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b28a:	46c0      	nop			; (mov r8, r8)
 800b28c:	46bd      	mov	sp, r7
 800b28e:	b006      	add	sp, #24
 800b290:	bd80      	pop	{r7, pc}
 800b292:	46c0      	nop			; (mov r8, r8)
 800b294:	3fffffff 	.word	0x3fffffff

0800b298 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2a0:	f000 fea6 	bl	800bff0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2a4:	4b28      	ldr	r3, [pc, #160]	; (800b348 <prvAddNewTaskToReadyList+0xb0>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	4b27      	ldr	r3, [pc, #156]	; (800b348 <prvAddNewTaskToReadyList+0xb0>)
 800b2ac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b2ae:	4b27      	ldr	r3, [pc, #156]	; (800b34c <prvAddNewTaskToReadyList+0xb4>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d109      	bne.n	800b2ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2b6:	4b25      	ldr	r3, [pc, #148]	; (800b34c <prvAddNewTaskToReadyList+0xb4>)
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2bc:	4b22      	ldr	r3, [pc, #136]	; (800b348 <prvAddNewTaskToReadyList+0xb0>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d110      	bne.n	800b2e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2c4:	f000 fb9e 	bl	800ba04 <prvInitialiseTaskLists>
 800b2c8:	e00d      	b.n	800b2e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2ca:	4b21      	ldr	r3, [pc, #132]	; (800b350 <prvAddNewTaskToReadyList+0xb8>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d109      	bne.n	800b2e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2d2:	4b1e      	ldr	r3, [pc, #120]	; (800b34c <prvAddNewTaskToReadyList+0xb4>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d802      	bhi.n	800b2e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2e0:	4b1a      	ldr	r3, [pc, #104]	; (800b34c <prvAddNewTaskToReadyList+0xb4>)
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2e6:	4b1b      	ldr	r3, [pc, #108]	; (800b354 <prvAddNewTaskToReadyList+0xbc>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	4b19      	ldr	r3, [pc, #100]	; (800b354 <prvAddNewTaskToReadyList+0xbc>)
 800b2ee:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f4:	4b18      	ldr	r3, [pc, #96]	; (800b358 <prvAddNewTaskToReadyList+0xc0>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d903      	bls.n	800b304 <prvAddNewTaskToReadyList+0x6c>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b300:	4b15      	ldr	r3, [pc, #84]	; (800b358 <prvAddNewTaskToReadyList+0xc0>)
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b308:	0013      	movs	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	189b      	adds	r3, r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4a12      	ldr	r2, [pc, #72]	; (800b35c <prvAddNewTaskToReadyList+0xc4>)
 800b312:	189a      	adds	r2, r3, r2
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3304      	adds	r3, #4
 800b318:	0019      	movs	r1, r3
 800b31a:	0010      	movs	r0, r2
 800b31c:	f7ff fabe 	bl	800a89c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b320:	f000 fe78 	bl	800c014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b324:	4b0a      	ldr	r3, [pc, #40]	; (800b350 <prvAddNewTaskToReadyList+0xb8>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d008      	beq.n	800b33e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b32c:	4b07      	ldr	r3, [pc, #28]	; (800b34c <prvAddNewTaskToReadyList+0xb4>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b336:	429a      	cmp	r2, r3
 800b338:	d201      	bcs.n	800b33e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b33a:	f000 fe49 	bl	800bfd0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b33e:	46c0      	nop			; (mov r8, r8)
 800b340:	46bd      	mov	sp, r7
 800b342:	b002      	add	sp, #8
 800b344:	bd80      	pop	{r7, pc}
 800b346:	46c0      	nop			; (mov r8, r8)
 800b348:	20000ac0 	.word	0x20000ac0
 800b34c:	200009c0 	.word	0x200009c0
 800b350:	20000acc 	.word	0x20000acc
 800b354:	20000adc 	.word	0x20000adc
 800b358:	20000ac8 	.word	0x20000ac8
 800b35c:	200009c4 	.word	0x200009c4

0800b360 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b368:	f000 fe42 	bl	800bff0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <vTaskDelete+0x18>
 800b372:	4b26      	ldr	r3, [pc, #152]	; (800b40c <vTaskDelete+0xac>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	e000      	b.n	800b37a <vTaskDelete+0x1a>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3304      	adds	r3, #4
 800b380:	0018      	movs	r0, r3
 800b382:	f7ff fae3 	bl	800a94c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d004      	beq.n	800b398 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3318      	adds	r3, #24
 800b392:	0018      	movs	r0, r3
 800b394:	f7ff fada 	bl	800a94c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b398:	4b1d      	ldr	r3, [pc, #116]	; (800b410 <vTaskDelete+0xb0>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	4b1c      	ldr	r3, [pc, #112]	; (800b410 <vTaskDelete+0xb0>)
 800b3a0:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 800b3a2:	4b1a      	ldr	r3, [pc, #104]	; (800b40c <vTaskDelete+0xac>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d10c      	bne.n	800b3c6 <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	1d1a      	adds	r2, r3, #4
 800b3b0:	4b18      	ldr	r3, [pc, #96]	; (800b414 <vTaskDelete+0xb4>)
 800b3b2:	0011      	movs	r1, r2
 800b3b4:	0018      	movs	r0, r3
 800b3b6:	f7ff fa71 	bl	800a89c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b3ba:	4b17      	ldr	r3, [pc, #92]	; (800b418 <vTaskDelete+0xb8>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	4b15      	ldr	r3, [pc, #84]	; (800b418 <vTaskDelete+0xb8>)
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	e00a      	b.n	800b3dc <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b3c6:	4b15      	ldr	r3, [pc, #84]	; (800b41c <vTaskDelete+0xbc>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	1e5a      	subs	r2, r3, #1
 800b3cc:	4b13      	ldr	r3, [pc, #76]	; (800b41c <vTaskDelete+0xbc>)
 800b3ce:	601a      	str	r2, [r3, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	0018      	movs	r0, r3
 800b3d4:	f000 fb88 	bl	800bae8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b3d8:	f000 fb98 	bl	800bb0c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b3dc:	f000 fe1a 	bl	800c014 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b3e0:	4b0f      	ldr	r3, [pc, #60]	; (800b420 <vTaskDelete+0xc0>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00c      	beq.n	800b402 <vTaskDelete+0xa2>
		{
			if( pxTCB == pxCurrentTCB )
 800b3e8:	4b08      	ldr	r3, [pc, #32]	; (800b40c <vTaskDelete+0xac>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d107      	bne.n	800b402 <vTaskDelete+0xa2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b3f2:	4b0c      	ldr	r3, [pc, #48]	; (800b424 <vTaskDelete+0xc4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <vTaskDelete+0x9e>
 800b3fa:	b672      	cpsid	i
 800b3fc:	e7fe      	b.n	800b3fc <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 800b3fe:	f000 fde7 	bl	800bfd0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b402:	46c0      	nop			; (mov r8, r8)
 800b404:	46bd      	mov	sp, r7
 800b406:	b004      	add	sp, #16
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	46c0      	nop			; (mov r8, r8)
 800b40c:	200009c0 	.word	0x200009c0
 800b410:	20000adc 	.word	0x20000adc
 800b414:	20000a94 	.word	0x20000a94
 800b418:	20000aa8 	.word	0x20000aa8
 800b41c:	20000ac0 	.word	0x20000ac0
 800b420:	20000acc 	.word	0x20000acc
 800b424:	20000ae8 	.word	0x20000ae8

0800b428 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b430:	2300      	movs	r3, #0
 800b432:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d010      	beq.n	800b45c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b43a:	4b0d      	ldr	r3, [pc, #52]	; (800b470 <vTaskDelay+0x48>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <vTaskDelay+0x1e>
 800b442:	b672      	cpsid	i
 800b444:	e7fe      	b.n	800b444 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800b446:	f000 f84b 	bl	800b4e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2100      	movs	r1, #0
 800b44e:	0018      	movs	r0, r3
 800b450:	f000 fcdc 	bl	800be0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b454:	f000 f850 	bl	800b4f8 <xTaskResumeAll>
 800b458:	0003      	movs	r3, r0
 800b45a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d101      	bne.n	800b466 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800b462:	f000 fdb5 	bl	800bfd0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b466:	46c0      	nop			; (mov r8, r8)
 800b468:	46bd      	mov	sp, r7
 800b46a:	b004      	add	sp, #16
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	46c0      	nop			; (mov r8, r8)
 800b470:	20000ae8 	.word	0x20000ae8

0800b474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b47a:	4913      	ldr	r1, [pc, #76]	; (800b4c8 <vTaskStartScheduler+0x54>)
 800b47c:	4813      	ldr	r0, [pc, #76]	; (800b4cc <vTaskStartScheduler+0x58>)
 800b47e:	4b14      	ldr	r3, [pc, #80]	; (800b4d0 <vTaskStartScheduler+0x5c>)
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	2300      	movs	r3, #0
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	2300      	movs	r3, #0
 800b488:	2280      	movs	r2, #128	; 0x80
 800b48a:	f7ff fe3b 	bl	800b104 <xTaskCreate>
 800b48e:	0003      	movs	r3, r0
 800b490:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d10d      	bne.n	800b4b4 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800b498:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b49a:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <vTaskStartScheduler+0x60>)
 800b49c:	2201      	movs	r2, #1
 800b49e:	4252      	negs	r2, r2
 800b4a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4a2:	4b0d      	ldr	r3, [pc, #52]	; (800b4d8 <vTaskStartScheduler+0x64>)
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <vTaskStartScheduler+0x68>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4ae:	f000 fd6b 	bl	800bf88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4b2:	e004      	b.n	800b4be <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	d101      	bne.n	800b4be <vTaskStartScheduler+0x4a>
 800b4ba:	b672      	cpsid	i
 800b4bc:	e7fe      	b.n	800b4bc <vTaskStartScheduler+0x48>
}
 800b4be:	46c0      	nop			; (mov r8, r8)
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	b002      	add	sp, #8
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	46c0      	nop			; (mov r8, r8)
 800b4c8:	08010fb8 	.word	0x08010fb8
 800b4cc:	0800b9e5 	.word	0x0800b9e5
 800b4d0:	20000ae4 	.word	0x20000ae4
 800b4d4:	20000ae0 	.word	0x20000ae0
 800b4d8:	20000acc 	.word	0x20000acc
 800b4dc:	20000ac4 	.word	0x20000ac4

0800b4e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4e4:	4b03      	ldr	r3, [pc, #12]	; (800b4f4 <vTaskSuspendAll+0x14>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	4b02      	ldr	r3, [pc, #8]	; (800b4f4 <vTaskSuspendAll+0x14>)
 800b4ec:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4ee:	46c0      	nop			; (mov r8, r8)
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	20000ae8 	.word	0x20000ae8

0800b4f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b502:	2300      	movs	r3, #0
 800b504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b506:	4b3a      	ldr	r3, [pc, #232]	; (800b5f0 <xTaskResumeAll+0xf8>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <xTaskResumeAll+0x1a>
 800b50e:	b672      	cpsid	i
 800b510:	e7fe      	b.n	800b510 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b512:	f000 fd6d 	bl	800bff0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b516:	4b36      	ldr	r3, [pc, #216]	; (800b5f0 <xTaskResumeAll+0xf8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	1e5a      	subs	r2, r3, #1
 800b51c:	4b34      	ldr	r3, [pc, #208]	; (800b5f0 <xTaskResumeAll+0xf8>)
 800b51e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b520:	4b33      	ldr	r3, [pc, #204]	; (800b5f0 <xTaskResumeAll+0xf8>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d15b      	bne.n	800b5e0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b528:	4b32      	ldr	r3, [pc, #200]	; (800b5f4 <xTaskResumeAll+0xfc>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d057      	beq.n	800b5e0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b530:	e02f      	b.n	800b592 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b532:	4b31      	ldr	r3, [pc, #196]	; (800b5f8 <xTaskResumeAll+0x100>)
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	3318      	adds	r3, #24
 800b53e:	0018      	movs	r0, r3
 800b540:	f7ff fa04 	bl	800a94c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	3304      	adds	r3, #4
 800b548:	0018      	movs	r0, r3
 800b54a:	f7ff f9ff 	bl	800a94c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b552:	4b2a      	ldr	r3, [pc, #168]	; (800b5fc <xTaskResumeAll+0x104>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d903      	bls.n	800b562 <xTaskResumeAll+0x6a>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55e:	4b27      	ldr	r3, [pc, #156]	; (800b5fc <xTaskResumeAll+0x104>)
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b566:	0013      	movs	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	189b      	adds	r3, r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4a24      	ldr	r2, [pc, #144]	; (800b600 <xTaskResumeAll+0x108>)
 800b570:	189a      	adds	r2, r3, r2
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	3304      	adds	r3, #4
 800b576:	0019      	movs	r1, r3
 800b578:	0010      	movs	r0, r2
 800b57a:	f7ff f98f 	bl	800a89c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b582:	4b20      	ldr	r3, [pc, #128]	; (800b604 <xTaskResumeAll+0x10c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b588:	429a      	cmp	r2, r3
 800b58a:	d302      	bcc.n	800b592 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800b58c:	4b1e      	ldr	r3, [pc, #120]	; (800b608 <xTaskResumeAll+0x110>)
 800b58e:	2201      	movs	r2, #1
 800b590:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b592:	4b19      	ldr	r3, [pc, #100]	; (800b5f8 <xTaskResumeAll+0x100>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1cb      	bne.n	800b532 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d001      	beq.n	800b5a4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5a0:	f000 fab4 	bl	800bb0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5a4:	4b19      	ldr	r3, [pc, #100]	; (800b60c <xTaskResumeAll+0x114>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00f      	beq.n	800b5d0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5b0:	f000 f82e 	bl	800b610 <xTaskIncrementTick>
 800b5b4:	1e03      	subs	r3, r0, #0
 800b5b6:	d002      	beq.n	800b5be <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800b5b8:	4b13      	ldr	r3, [pc, #76]	; (800b608 <xTaskResumeAll+0x110>)
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1f2      	bne.n	800b5b0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800b5ca:	4b10      	ldr	r3, [pc, #64]	; (800b60c <xTaskResumeAll+0x114>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5d0:	4b0d      	ldr	r3, [pc, #52]	; (800b608 <xTaskResumeAll+0x110>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d003      	beq.n	800b5e0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5dc:	f000 fcf8 	bl	800bfd0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5e0:	f000 fd18 	bl	800c014 <vPortExitCritical>

	return xAlreadyYielded;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
}
 800b5e6:	0018      	movs	r0, r3
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	b004      	add	sp, #16
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	46c0      	nop			; (mov r8, r8)
 800b5f0:	20000ae8 	.word	0x20000ae8
 800b5f4:	20000ac0 	.word	0x20000ac0
 800b5f8:	20000a80 	.word	0x20000a80
 800b5fc:	20000ac8 	.word	0x20000ac8
 800b600:	200009c4 	.word	0x200009c4
 800b604:	200009c0 	.word	0x200009c0
 800b608:	20000ad4 	.word	0x20000ad4
 800b60c:	20000ad0 	.word	0x20000ad0

0800b610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b616:	2300      	movs	r3, #0
 800b618:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b61a:	4b4a      	ldr	r3, [pc, #296]	; (800b744 <xTaskIncrementTick+0x134>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d000      	beq.n	800b624 <xTaskIncrementTick+0x14>
 800b622:	e084      	b.n	800b72e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b624:	4b48      	ldr	r3, [pc, #288]	; (800b748 <xTaskIncrementTick+0x138>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	3301      	adds	r3, #1
 800b62a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b62c:	4b46      	ldr	r3, [pc, #280]	; (800b748 <xTaskIncrementTick+0x138>)
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d117      	bne.n	800b668 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800b638:	4b44      	ldr	r3, [pc, #272]	; (800b74c <xTaskIncrementTick+0x13c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <xTaskIncrementTick+0x36>
 800b642:	b672      	cpsid	i
 800b644:	e7fe      	b.n	800b644 <xTaskIncrementTick+0x34>
 800b646:	4b41      	ldr	r3, [pc, #260]	; (800b74c <xTaskIncrementTick+0x13c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	60fb      	str	r3, [r7, #12]
 800b64c:	4b40      	ldr	r3, [pc, #256]	; (800b750 <xTaskIncrementTick+0x140>)
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	4b3e      	ldr	r3, [pc, #248]	; (800b74c <xTaskIncrementTick+0x13c>)
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	4b3e      	ldr	r3, [pc, #248]	; (800b750 <xTaskIncrementTick+0x140>)
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	4b3e      	ldr	r3, [pc, #248]	; (800b754 <xTaskIncrementTick+0x144>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	1c5a      	adds	r2, r3, #1
 800b660:	4b3c      	ldr	r3, [pc, #240]	; (800b754 <xTaskIncrementTick+0x144>)
 800b662:	601a      	str	r2, [r3, #0]
 800b664:	f000 fa52 	bl	800bb0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b668:	4b3b      	ldr	r3, [pc, #236]	; (800b758 <xTaskIncrementTick+0x148>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	693a      	ldr	r2, [r7, #16]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d349      	bcc.n	800b706 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b672:	4b36      	ldr	r3, [pc, #216]	; (800b74c <xTaskIncrementTick+0x13c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d104      	bne.n	800b686 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b67c:	4b36      	ldr	r3, [pc, #216]	; (800b758 <xTaskIncrementTick+0x148>)
 800b67e:	2201      	movs	r2, #1
 800b680:	4252      	negs	r2, r2
 800b682:	601a      	str	r2, [r3, #0]
					break;
 800b684:	e03f      	b.n	800b706 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b686:	4b31      	ldr	r3, [pc, #196]	; (800b74c <xTaskIncrementTick+0x13c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d203      	bcs.n	800b6a6 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b69e:	4b2e      	ldr	r3, [pc, #184]	; (800b758 <xTaskIncrementTick+0x148>)
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6a4:	e02f      	b.n	800b706 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	f7ff f94e 	bl	800a94c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d004      	beq.n	800b6c2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	3318      	adds	r3, #24
 800b6bc:	0018      	movs	r0, r3
 800b6be:	f7ff f945 	bl	800a94c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c6:	4b25      	ldr	r3, [pc, #148]	; (800b75c <xTaskIncrementTick+0x14c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d903      	bls.n	800b6d6 <xTaskIncrementTick+0xc6>
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d2:	4b22      	ldr	r3, [pc, #136]	; (800b75c <xTaskIncrementTick+0x14c>)
 800b6d4:	601a      	str	r2, [r3, #0]
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6da:	0013      	movs	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	189b      	adds	r3, r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4a1f      	ldr	r2, [pc, #124]	; (800b760 <xTaskIncrementTick+0x150>)
 800b6e4:	189a      	adds	r2, r3, r2
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	0019      	movs	r1, r3
 800b6ec:	0010      	movs	r0, r2
 800b6ee:	f7ff f8d5 	bl	800a89c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f6:	4b1b      	ldr	r3, [pc, #108]	; (800b764 <xTaskIncrementTick+0x154>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d3b8      	bcc.n	800b672 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800b700:	2301      	movs	r3, #1
 800b702:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b704:	e7b5      	b.n	800b672 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b706:	4b17      	ldr	r3, [pc, #92]	; (800b764 <xTaskIncrementTick+0x154>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b70c:	4914      	ldr	r1, [pc, #80]	; (800b760 <xTaskIncrementTick+0x150>)
 800b70e:	0013      	movs	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	189b      	adds	r3, r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	585b      	ldr	r3, [r3, r1]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d901      	bls.n	800b720 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800b71c:	2301      	movs	r3, #1
 800b71e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b720:	4b11      	ldr	r3, [pc, #68]	; (800b768 <xTaskIncrementTick+0x158>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d007      	beq.n	800b738 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800b728:	2301      	movs	r3, #1
 800b72a:	617b      	str	r3, [r7, #20]
 800b72c:	e004      	b.n	800b738 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b72e:	4b0f      	ldr	r3, [pc, #60]	; (800b76c <xTaskIncrementTick+0x15c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	4b0d      	ldr	r3, [pc, #52]	; (800b76c <xTaskIncrementTick+0x15c>)
 800b736:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b738:	697b      	ldr	r3, [r7, #20]
}
 800b73a:	0018      	movs	r0, r3
 800b73c:	46bd      	mov	sp, r7
 800b73e:	b006      	add	sp, #24
 800b740:	bd80      	pop	{r7, pc}
 800b742:	46c0      	nop			; (mov r8, r8)
 800b744:	20000ae8 	.word	0x20000ae8
 800b748:	20000ac4 	.word	0x20000ac4
 800b74c:	20000a78 	.word	0x20000a78
 800b750:	20000a7c 	.word	0x20000a7c
 800b754:	20000ad8 	.word	0x20000ad8
 800b758:	20000ae0 	.word	0x20000ae0
 800b75c:	20000ac8 	.word	0x20000ac8
 800b760:	200009c4 	.word	0x200009c4
 800b764:	200009c0 	.word	0x200009c0
 800b768:	20000ad4 	.word	0x20000ad4
 800b76c:	20000ad0 	.word	0x20000ad0

0800b770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b776:	4b22      	ldr	r3, [pc, #136]	; (800b800 <vTaskSwitchContext+0x90>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d003      	beq.n	800b786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b77e:	4b21      	ldr	r3, [pc, #132]	; (800b804 <vTaskSwitchContext+0x94>)
 800b780:	2201      	movs	r2, #1
 800b782:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b784:	e037      	b.n	800b7f6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800b786:	4b1f      	ldr	r3, [pc, #124]	; (800b804 <vTaskSwitchContext+0x94>)
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b78c:	4b1e      	ldr	r3, [pc, #120]	; (800b808 <vTaskSwitchContext+0x98>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	607b      	str	r3, [r7, #4]
 800b792:	e007      	b.n	800b7a4 <vTaskSwitchContext+0x34>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d101      	bne.n	800b79e <vTaskSwitchContext+0x2e>
 800b79a:	b672      	cpsid	i
 800b79c:	e7fe      	b.n	800b79c <vTaskSwitchContext+0x2c>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	607b      	str	r3, [r7, #4]
 800b7a4:	4919      	ldr	r1, [pc, #100]	; (800b80c <vTaskSwitchContext+0x9c>)
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	0013      	movs	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	189b      	adds	r3, r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	585b      	ldr	r3, [r3, r1]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d0ee      	beq.n	800b794 <vTaskSwitchContext+0x24>
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	0013      	movs	r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	189b      	adds	r3, r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4a12      	ldr	r2, [pc, #72]	; (800b80c <vTaskSwitchContext+0x9c>)
 800b7c2:	189b      	adds	r3, r3, r2
 800b7c4:	603b      	str	r3, [r7, #0]
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	605a      	str	r2, [r3, #4]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	3308      	adds	r3, #8
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d104      	bne.n	800b7e6 <vTaskSwitchContext+0x76>
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	605a      	str	r2, [r3, #4]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	68da      	ldr	r2, [r3, #12]
 800b7ec:	4b08      	ldr	r3, [pc, #32]	; (800b810 <vTaskSwitchContext+0xa0>)
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	4b05      	ldr	r3, [pc, #20]	; (800b808 <vTaskSwitchContext+0x98>)
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	601a      	str	r2, [r3, #0]
}
 800b7f6:	46c0      	nop			; (mov r8, r8)
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	b002      	add	sp, #8
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	46c0      	nop			; (mov r8, r8)
 800b800:	20000ae8 	.word	0x20000ae8
 800b804:	20000ad4 	.word	0x20000ad4
 800b808:	20000ac8 	.word	0x20000ac8
 800b80c:	200009c4 	.word	0x200009c4
 800b810:	200009c0 	.word	0x200009c0

0800b814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <vTaskPlaceOnEventList+0x14>
 800b824:	b672      	cpsid	i
 800b826:	e7fe      	b.n	800b826 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b828:	4b08      	ldr	r3, [pc, #32]	; (800b84c <vTaskPlaceOnEventList+0x38>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3318      	adds	r3, #24
 800b82e:	001a      	movs	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	0011      	movs	r1, r2
 800b834:	0018      	movs	r0, r3
 800b836:	f7ff f853 	bl	800a8e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2101      	movs	r1, #1
 800b83e:	0018      	movs	r0, r3
 800b840:	f000 fae4 	bl	800be0c <prvAddCurrentTaskToDelayedList>
}
 800b844:	46c0      	nop			; (mov r8, r8)
 800b846:	46bd      	mov	sp, r7
 800b848:	b002      	add	sp, #8
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	200009c0 	.word	0x200009c0

0800b850 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <xTaskRemoveFromEventList+0x1a>
 800b866:	b672      	cpsid	i
 800b868:	e7fe      	b.n	800b868 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	3318      	adds	r3, #24
 800b86e:	0018      	movs	r0, r3
 800b870:	f7ff f86c 	bl	800a94c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b874:	4b1e      	ldr	r3, [pc, #120]	; (800b8f0 <xTaskRemoveFromEventList+0xa0>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d11d      	bne.n	800b8b8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	3304      	adds	r3, #4
 800b880:	0018      	movs	r0, r3
 800b882:	f7ff f863 	bl	800a94c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88a:	4b1a      	ldr	r3, [pc, #104]	; (800b8f4 <xTaskRemoveFromEventList+0xa4>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d903      	bls.n	800b89a <xTaskRemoveFromEventList+0x4a>
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b896:	4b17      	ldr	r3, [pc, #92]	; (800b8f4 <xTaskRemoveFromEventList+0xa4>)
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89e:	0013      	movs	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	189b      	adds	r3, r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4a14      	ldr	r2, [pc, #80]	; (800b8f8 <xTaskRemoveFromEventList+0xa8>)
 800b8a8:	189a      	adds	r2, r3, r2
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	0019      	movs	r1, r3
 800b8b0:	0010      	movs	r0, r2
 800b8b2:	f7fe fff3 	bl	800a89c <vListInsertEnd>
 800b8b6:	e007      	b.n	800b8c8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	3318      	adds	r3, #24
 800b8bc:	001a      	movs	r2, r3
 800b8be:	4b0f      	ldr	r3, [pc, #60]	; (800b8fc <xTaskRemoveFromEventList+0xac>)
 800b8c0:	0011      	movs	r1, r2
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	f7fe ffea 	bl	800a89c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8cc:	4b0c      	ldr	r3, [pc, #48]	; (800b900 <xTaskRemoveFromEventList+0xb0>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d905      	bls.n	800b8e2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8da:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <xTaskRemoveFromEventList+0xb4>)
 800b8dc:	2201      	movs	r2, #1
 800b8de:	601a      	str	r2, [r3, #0]
 800b8e0:	e001      	b.n	800b8e6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
}
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	b004      	add	sp, #16
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	20000ae8 	.word	0x20000ae8
 800b8f4:	20000ac8 	.word	0x20000ac8
 800b8f8:	200009c4 	.word	0x200009c4
 800b8fc:	20000a80 	.word	0x20000a80
 800b900:	200009c0 	.word	0x200009c0
 800b904:	20000ad4 	.word	0x20000ad4

0800b908 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b910:	4b05      	ldr	r3, [pc, #20]	; (800b928 <vTaskInternalSetTimeOutState+0x20>)
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b918:	4b04      	ldr	r3, [pc, #16]	; (800b92c <vTaskInternalSetTimeOutState+0x24>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	605a      	str	r2, [r3, #4]
}
 800b920:	46c0      	nop			; (mov r8, r8)
 800b922:	46bd      	mov	sp, r7
 800b924:	b002      	add	sp, #8
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20000ad8 	.word	0x20000ad8
 800b92c:	20000ac4 	.word	0x20000ac4

0800b930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <xTaskCheckForTimeOut+0x14>
 800b940:	b672      	cpsid	i
 800b942:	e7fe      	b.n	800b942 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <xTaskCheckForTimeOut+0x1e>
 800b94a:	b672      	cpsid	i
 800b94c:	e7fe      	b.n	800b94c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800b94e:	f000 fb4f 	bl	800bff0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b952:	4b1d      	ldr	r3, [pc, #116]	; (800b9c8 <xTaskCheckForTimeOut+0x98>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3301      	adds	r3, #1
 800b968:	d102      	bne.n	800b970 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b96a:	2300      	movs	r3, #0
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	e024      	b.n	800b9ba <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	4b15      	ldr	r3, [pc, #84]	; (800b9cc <xTaskCheckForTimeOut+0x9c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d007      	beq.n	800b98c <xTaskCheckForTimeOut+0x5c>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	429a      	cmp	r2, r3
 800b984:	d302      	bcc.n	800b98c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b986:	2301      	movs	r3, #1
 800b988:	617b      	str	r3, [r7, #20]
 800b98a:	e016      	b.n	800b9ba <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	429a      	cmp	r2, r3
 800b994:	d20c      	bcs.n	800b9b0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	1ad2      	subs	r2, r2, r3
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	0018      	movs	r0, r3
 800b9a6:	f7ff ffaf 	bl	800b908 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]
 800b9ae:	e004      	b.n	800b9ba <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b9ba:	f000 fb2b 	bl	800c014 <vPortExitCritical>

	return xReturn;
 800b9be:	697b      	ldr	r3, [r7, #20]
}
 800b9c0:	0018      	movs	r0, r3
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	b006      	add	sp, #24
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	20000ac4 	.word	0x20000ac4
 800b9cc:	20000ad8 	.word	0x20000ad8

0800b9d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9d4:	4b02      	ldr	r3, [pc, #8]	; (800b9e0 <vTaskMissedYield+0x10>)
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	601a      	str	r2, [r3, #0]
}
 800b9da:	46c0      	nop			; (mov r8, r8)
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	20000ad4 	.word	0x20000ad4

0800b9e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9ec:	f000 f84e 	bl	800ba8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9f0:	4b03      	ldr	r3, [pc, #12]	; (800ba00 <prvIdleTask+0x1c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d9f9      	bls.n	800b9ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9f8:	f000 faea 	bl	800bfd0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800b9fc:	e7f6      	b.n	800b9ec <prvIdleTask+0x8>
 800b9fe:	46c0      	nop			; (mov r8, r8)
 800ba00:	200009c4 	.word	0x200009c4

0800ba04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	607b      	str	r3, [r7, #4]
 800ba0e:	e00c      	b.n	800ba2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	0013      	movs	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	189b      	adds	r3, r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4a14      	ldr	r2, [pc, #80]	; (800ba6c <prvInitialiseTaskLists+0x68>)
 800ba1c:	189b      	adds	r3, r3, r2
 800ba1e:	0018      	movs	r0, r3
 800ba20:	f7fe ff13 	bl	800a84a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3301      	adds	r3, #1
 800ba28:	607b      	str	r3, [r7, #4]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2b06      	cmp	r3, #6
 800ba2e:	d9ef      	bls.n	800ba10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba30:	4b0f      	ldr	r3, [pc, #60]	; (800ba70 <prvInitialiseTaskLists+0x6c>)
 800ba32:	0018      	movs	r0, r3
 800ba34:	f7fe ff09 	bl	800a84a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba38:	4b0e      	ldr	r3, [pc, #56]	; (800ba74 <prvInitialiseTaskLists+0x70>)
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f7fe ff05 	bl	800a84a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba40:	4b0d      	ldr	r3, [pc, #52]	; (800ba78 <prvInitialiseTaskLists+0x74>)
 800ba42:	0018      	movs	r0, r3
 800ba44:	f7fe ff01 	bl	800a84a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba48:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <prvInitialiseTaskLists+0x78>)
 800ba4a:	0018      	movs	r0, r3
 800ba4c:	f7fe fefd 	bl	800a84a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba50:	4b0b      	ldr	r3, [pc, #44]	; (800ba80 <prvInitialiseTaskLists+0x7c>)
 800ba52:	0018      	movs	r0, r3
 800ba54:	f7fe fef9 	bl	800a84a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba58:	4b0a      	ldr	r3, [pc, #40]	; (800ba84 <prvInitialiseTaskLists+0x80>)
 800ba5a:	4a05      	ldr	r2, [pc, #20]	; (800ba70 <prvInitialiseTaskLists+0x6c>)
 800ba5c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <prvInitialiseTaskLists+0x84>)
 800ba60:	4a04      	ldr	r2, [pc, #16]	; (800ba74 <prvInitialiseTaskLists+0x70>)
 800ba62:	601a      	str	r2, [r3, #0]
}
 800ba64:	46c0      	nop			; (mov r8, r8)
 800ba66:	46bd      	mov	sp, r7
 800ba68:	b002      	add	sp, #8
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	200009c4 	.word	0x200009c4
 800ba70:	20000a50 	.word	0x20000a50
 800ba74:	20000a64 	.word	0x20000a64
 800ba78:	20000a80 	.word	0x20000a80
 800ba7c:	20000a94 	.word	0x20000a94
 800ba80:	20000aac 	.word	0x20000aac
 800ba84:	20000a78 	.word	0x20000a78
 800ba88:	20000a7c 	.word	0x20000a7c

0800ba8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba92:	e01a      	b.n	800baca <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800ba94:	f000 faac 	bl	800bff0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba98:	4b10      	ldr	r3, [pc, #64]	; (800badc <prvCheckTasksWaitingTermination+0x50>)
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3304      	adds	r3, #4
 800baa4:	0018      	movs	r0, r3
 800baa6:	f7fe ff51 	bl	800a94c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800baaa:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <prvCheckTasksWaitingTermination+0x54>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	1e5a      	subs	r2, r3, #1
 800bab0:	4b0b      	ldr	r3, [pc, #44]	; (800bae0 <prvCheckTasksWaitingTermination+0x54>)
 800bab2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bab4:	4b0b      	ldr	r3, [pc, #44]	; (800bae4 <prvCheckTasksWaitingTermination+0x58>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	1e5a      	subs	r2, r3, #1
 800baba:	4b0a      	ldr	r3, [pc, #40]	; (800bae4 <prvCheckTasksWaitingTermination+0x58>)
 800babc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800babe:	f000 faa9 	bl	800c014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	0018      	movs	r0, r3
 800bac6:	f000 f80f 	bl	800bae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baca:	4b06      	ldr	r3, [pc, #24]	; (800bae4 <prvCheckTasksWaitingTermination+0x58>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1e0      	bne.n	800ba94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bad2:	46c0      	nop			; (mov r8, r8)
 800bad4:	46c0      	nop			; (mov r8, r8)
 800bad6:	46bd      	mov	sp, r7
 800bad8:	b002      	add	sp, #8
 800bada:	bd80      	pop	{r7, pc}
 800badc:	20000a94 	.word	0x20000a94
 800bae0:	20000ac0 	.word	0x20000ac0
 800bae4:	20000aa8 	.word	0x20000aa8

0800bae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf4:	0018      	movs	r0, r3
 800baf6:	f000 fbbf 	bl	800c278 <vPortFree>
			vPortFree( pxTCB );
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	0018      	movs	r0, r3
 800bafe:	f000 fbbb 	bl	800c278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb02:	46c0      	nop			; (mov r8, r8)
 800bb04:	46bd      	mov	sp, r7
 800bb06:	b002      	add	sp, #8
 800bb08:	bd80      	pop	{r7, pc}
	...

0800bb0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb12:	4b0b      	ldr	r3, [pc, #44]	; (800bb40 <prvResetNextTaskUnblockTime+0x34>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d104      	bne.n	800bb26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb1c:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <prvResetNextTaskUnblockTime+0x38>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	4252      	negs	r2, r2
 800bb22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb24:	e008      	b.n	800bb38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb26:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <prvResetNextTaskUnblockTime+0x34>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	685a      	ldr	r2, [r3, #4]
 800bb34:	4b03      	ldr	r3, [pc, #12]	; (800bb44 <prvResetNextTaskUnblockTime+0x38>)
 800bb36:	601a      	str	r2, [r3, #0]
}
 800bb38:	46c0      	nop			; (mov r8, r8)
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	b002      	add	sp, #8
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	20000a78 	.word	0x20000a78
 800bb44:	20000ae0 	.word	0x20000ae0

0800bb48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb4e:	4b0a      	ldr	r3, [pc, #40]	; (800bb78 <xTaskGetSchedulerState+0x30>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d102      	bne.n	800bb5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb56:	2301      	movs	r3, #1
 800bb58:	607b      	str	r3, [r7, #4]
 800bb5a:	e008      	b.n	800bb6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb5c:	4b07      	ldr	r3, [pc, #28]	; (800bb7c <xTaskGetSchedulerState+0x34>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d102      	bne.n	800bb6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb64:	2302      	movs	r3, #2
 800bb66:	607b      	str	r3, [r7, #4]
 800bb68:	e001      	b.n	800bb6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb6e:	687b      	ldr	r3, [r7, #4]
	}
 800bb70:	0018      	movs	r0, r3
 800bb72:	46bd      	mov	sp, r7
 800bb74:	b002      	add	sp, #8
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	20000acc 	.word	0x20000acc
 800bb7c:	20000ae8 	.word	0x20000ae8

0800bb80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d051      	beq.n	800bc3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9a:	4b2a      	ldr	r3, [pc, #168]	; (800bc44 <xTaskPriorityInherit+0xc4>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d241      	bcs.n	800bc28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	db06      	blt.n	800bbba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbac:	4b25      	ldr	r3, [pc, #148]	; (800bc44 <xTaskPriorityInherit+0xc4>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb2:	2207      	movs	r2, #7
 800bbb4:	1ad2      	subs	r2, r2, r3
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	6959      	ldr	r1, [r3, #20]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc2:	0013      	movs	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	189b      	adds	r3, r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4a1f      	ldr	r2, [pc, #124]	; (800bc48 <xTaskPriorityInherit+0xc8>)
 800bbcc:	189b      	adds	r3, r3, r2
 800bbce:	4299      	cmp	r1, r3
 800bbd0:	d122      	bne.n	800bc18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	0018      	movs	r0, r3
 800bbd8:	f7fe feb8 	bl	800a94c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bbdc:	4b19      	ldr	r3, [pc, #100]	; (800bc44 <xTaskPriorityInherit+0xc4>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbea:	4b18      	ldr	r3, [pc, #96]	; (800bc4c <xTaskPriorityInherit+0xcc>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d903      	bls.n	800bbfa <xTaskPriorityInherit+0x7a>
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf6:	4b15      	ldr	r3, [pc, #84]	; (800bc4c <xTaskPriorityInherit+0xcc>)
 800bbf8:	601a      	str	r2, [r3, #0]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfe:	0013      	movs	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	189b      	adds	r3, r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4a10      	ldr	r2, [pc, #64]	; (800bc48 <xTaskPriorityInherit+0xc8>)
 800bc08:	189a      	adds	r2, r3, r2
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	0019      	movs	r1, r3
 800bc10:	0010      	movs	r0, r2
 800bc12:	f7fe fe43 	bl	800a89c <vListInsertEnd>
 800bc16:	e004      	b.n	800bc22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc18:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <xTaskPriorityInherit+0xc4>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc22:	2301      	movs	r3, #1
 800bc24:	60fb      	str	r3, [r7, #12]
 800bc26:	e008      	b.n	800bc3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc2c:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <xTaskPriorityInherit+0xc4>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d201      	bcs.n	800bc3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bc36:	2301      	movs	r3, #1
 800bc38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
	}
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	b004      	add	sp, #16
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	200009c0 	.word	0x200009c0
 800bc48:	200009c4 	.word	0x200009c4
 800bc4c:	20000ac8 	.word	0x20000ac8

0800bc50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d044      	beq.n	800bcf0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc66:	4b25      	ldr	r3, [pc, #148]	; (800bcfc <xTaskPriorityDisinherit+0xac>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d001      	beq.n	800bc74 <xTaskPriorityDisinherit+0x24>
 800bc70:	b672      	cpsid	i
 800bc72:	e7fe      	b.n	800bc72 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d101      	bne.n	800bc80 <xTaskPriorityDisinherit+0x30>
 800bc7c:	b672      	cpsid	i
 800bc7e:	e7fe      	b.n	800bc7e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc84:	1e5a      	subs	r2, r3, #1
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d02c      	beq.n	800bcf0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d128      	bne.n	800bcf0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	3304      	adds	r3, #4
 800bca2:	0018      	movs	r0, r3
 800bca4:	f7fe fe52 	bl	800a94c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb4:	2207      	movs	r2, #7
 800bcb6:	1ad2      	subs	r2, r2, r3
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc0:	4b0f      	ldr	r3, [pc, #60]	; (800bd00 <xTaskPriorityDisinherit+0xb0>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d903      	bls.n	800bcd0 <xTaskPriorityDisinherit+0x80>
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bccc:	4b0c      	ldr	r3, [pc, #48]	; (800bd00 <xTaskPriorityDisinherit+0xb0>)
 800bcce:	601a      	str	r2, [r3, #0]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd4:	0013      	movs	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	189b      	adds	r3, r3, r2
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4a09      	ldr	r2, [pc, #36]	; (800bd04 <xTaskPriorityDisinherit+0xb4>)
 800bcde:	189a      	adds	r2, r3, r2
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	3304      	adds	r3, #4
 800bce4:	0019      	movs	r1, r3
 800bce6:	0010      	movs	r0, r2
 800bce8:	f7fe fdd8 	bl	800a89c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bcec:	2301      	movs	r3, #1
 800bcee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
	}
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	b004      	add	sp, #16
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	46c0      	nop			; (mov r8, r8)
 800bcfc:	200009c0 	.word	0x200009c0
 800bd00:	20000ac8 	.word	0x20000ac8
 800bd04:	200009c4 	.word	0x200009c4

0800bd08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bd16:	2301      	movs	r3, #1
 800bd18:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d058      	beq.n	800bdd2 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <vTaskPriorityDisinheritAfterTimeout+0x24>
 800bd28:	b672      	cpsid	i
 800bd2a:	e7fe      	b.n	800bd2a <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d902      	bls.n	800bd3c <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	617b      	str	r3, [r7, #20]
 800bd3a:	e002      	b.n	800bd42 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd40:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d042      	beq.n	800bdd2 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d13d      	bne.n	800bdd2 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bd56:	4b21      	ldr	r3, [pc, #132]	; (800bddc <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	693a      	ldr	r2, [r7, #16]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d101      	bne.n	800bd64 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800bd60:	b672      	cpsid	i
 800bd62:	e7fe      	b.n	800bd62 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	697a      	ldr	r2, [r7, #20]
 800bd6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	db04      	blt.n	800bd82 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2207      	movs	r2, #7
 800bd7c:	1ad2      	subs	r2, r2, r3
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	6959      	ldr	r1, [r3, #20]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	0013      	movs	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	189b      	adds	r3, r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4a13      	ldr	r2, [pc, #76]	; (800bde0 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800bd92:	189b      	adds	r3, r3, r2
 800bd94:	4299      	cmp	r1, r3
 800bd96:	d11c      	bne.n	800bdd2 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	0018      	movs	r0, r3
 800bd9e:	f7fe fdd5 	bl	800a94c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda6:	4b0f      	ldr	r3, [pc, #60]	; (800bde4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d903      	bls.n	800bdb6 <vTaskPriorityDisinheritAfterTimeout+0xae>
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb2:	4b0c      	ldr	r3, [pc, #48]	; (800bde4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800bdb4:	601a      	str	r2, [r3, #0]
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdba:	0013      	movs	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	189b      	adds	r3, r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4a07      	ldr	r2, [pc, #28]	; (800bde0 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800bdc4:	189a      	adds	r2, r3, r2
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	3304      	adds	r3, #4
 800bdca:	0019      	movs	r1, r3
 800bdcc:	0010      	movs	r0, r2
 800bdce:	f7fe fd65 	bl	800a89c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdd2:	46c0      	nop			; (mov r8, r8)
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	b006      	add	sp, #24
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	46c0      	nop			; (mov r8, r8)
 800bddc:	200009c0 	.word	0x200009c0
 800bde0:	200009c4 	.word	0x200009c4
 800bde4:	20000ac8 	.word	0x20000ac8

0800bde8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bdec:	4b06      	ldr	r3, [pc, #24]	; (800be08 <pvTaskIncrementMutexHeldCount+0x20>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d004      	beq.n	800bdfe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bdf4:	4b04      	ldr	r3, [pc, #16]	; (800be08 <pvTaskIncrementMutexHeldCount+0x20>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdfa:	3201      	adds	r2, #1
 800bdfc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bdfe:	4b02      	ldr	r3, [pc, #8]	; (800be08 <pvTaskIncrementMutexHeldCount+0x20>)
 800be00:	681b      	ldr	r3, [r3, #0]
	}
 800be02:	0018      	movs	r0, r3
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	200009c0 	.word	0x200009c0

0800be0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be16:	4b21      	ldr	r3, [pc, #132]	; (800be9c <prvAddCurrentTaskToDelayedList+0x90>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be1c:	4b20      	ldr	r3, [pc, #128]	; (800bea0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	3304      	adds	r3, #4
 800be22:	0018      	movs	r0, r3
 800be24:	f7fe fd92 	bl	800a94c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	3301      	adds	r3, #1
 800be2c:	d10b      	bne.n	800be46 <prvAddCurrentTaskToDelayedList+0x3a>
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d008      	beq.n	800be46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be34:	4b1a      	ldr	r3, [pc, #104]	; (800bea0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	1d1a      	adds	r2, r3, #4
 800be3a:	4b1a      	ldr	r3, [pc, #104]	; (800bea4 <prvAddCurrentTaskToDelayedList+0x98>)
 800be3c:	0011      	movs	r1, r2
 800be3e:	0018      	movs	r0, r3
 800be40:	f7fe fd2c 	bl	800a89c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be44:	e026      	b.n	800be94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	18d3      	adds	r3, r2, r3
 800be4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be4e:	4b14      	ldr	r3, [pc, #80]	; (800bea0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d209      	bcs.n	800be72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be5e:	4b12      	ldr	r3, [pc, #72]	; (800bea8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	4b0f      	ldr	r3, [pc, #60]	; (800bea0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3304      	adds	r3, #4
 800be68:	0019      	movs	r1, r3
 800be6a:	0010      	movs	r0, r2
 800be6c:	f7fe fd38 	bl	800a8e0 <vListInsert>
}
 800be70:	e010      	b.n	800be94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be72:	4b0e      	ldr	r3, [pc, #56]	; (800beac <prvAddCurrentTaskToDelayedList+0xa0>)
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	3304      	adds	r3, #4
 800be7c:	0019      	movs	r1, r3
 800be7e:	0010      	movs	r0, r2
 800be80:	f7fe fd2e 	bl	800a8e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be84:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d202      	bcs.n	800be94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be8e:	4b08      	ldr	r3, [pc, #32]	; (800beb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	601a      	str	r2, [r3, #0]
}
 800be94:	46c0      	nop			; (mov r8, r8)
 800be96:	46bd      	mov	sp, r7
 800be98:	b004      	add	sp, #16
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	20000ac4 	.word	0x20000ac4
 800bea0:	200009c0 	.word	0x200009c0
 800bea4:	20000aac 	.word	0x20000aac
 800bea8:	20000a7c 	.word	0x20000a7c
 800beac:	20000a78 	.word	0x20000a78
 800beb0:	20000ae0 	.word	0x20000ae0

0800beb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	3b04      	subs	r3, #4
 800bec4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2280      	movs	r2, #128	; 0x80
 800beca:	0452      	lsls	r2, r2, #17
 800becc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3b04      	subs	r3, #4
 800bed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	3b04      	subs	r3, #4
 800bede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bee0:	4a08      	ldr	r2, [pc, #32]	; (800bf04 <pxPortInitialiseStack+0x50>)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	3b14      	subs	r3, #20
 800beea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	3b20      	subs	r3, #32
 800bef6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bef8:	68fb      	ldr	r3, [r7, #12]
}
 800befa:	0018      	movs	r0, r3
 800befc:	46bd      	mov	sp, r7
 800befe:	b004      	add	sp, #16
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	46c0      	nop			; (mov r8, r8)
 800bf04:	0800bf09 	.word	0x0800bf09

0800bf08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf12:	4b08      	ldr	r3, [pc, #32]	; (800bf34 <prvTaskExitError+0x2c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3301      	adds	r3, #1
 800bf18:	d001      	beq.n	800bf1e <prvTaskExitError+0x16>
 800bf1a:	b672      	cpsid	i
 800bf1c:	e7fe      	b.n	800bf1c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800bf1e:	b672      	cpsid	i
	while( ulDummy == 0 )
 800bf20:	46c0      	nop			; (mov r8, r8)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d0fc      	beq.n	800bf22 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf28:	46c0      	nop			; (mov r8, r8)
 800bf2a:	46c0      	nop			; (mov r8, r8)
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	b002      	add	sp, #8
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	46c0      	nop			; (mov r8, r8)
 800bf34:	20000024 	.word	0x20000024

0800bf38 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800bf3c:	46c0      	nop			; (mov r8, r8)
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf50 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800bf50:	4a0b      	ldr	r2, [pc, #44]	; (800bf80 <pxCurrentTCBConst2>)
 800bf52:	6813      	ldr	r3, [r2, #0]
 800bf54:	6818      	ldr	r0, [r3, #0]
 800bf56:	3020      	adds	r0, #32
 800bf58:	f380 8809 	msr	PSP, r0
 800bf5c:	2002      	movs	r0, #2
 800bf5e:	f380 8814 	msr	CONTROL, r0
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800bf68:	46ae      	mov	lr, r5
 800bf6a:	bc08      	pop	{r3}
 800bf6c:	bc04      	pop	{r2}
 800bf6e:	b662      	cpsie	i
 800bf70:	4718      	bx	r3
 800bf72:	46c0      	nop			; (mov r8, r8)
 800bf74:	46c0      	nop			; (mov r8, r8)
 800bf76:	46c0      	nop			; (mov r8, r8)
 800bf78:	46c0      	nop			; (mov r8, r8)
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	46c0      	nop			; (mov r8, r8)
 800bf7e:	46c0      	nop			; (mov r8, r8)

0800bf80 <pxCurrentTCBConst2>:
 800bf80:	200009c0 	.word	0x200009c0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800bf84:	46c0      	nop			; (mov r8, r8)
 800bf86:	46c0      	nop			; (mov r8, r8)

0800bf88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf8c:	4b0e      	ldr	r3, [pc, #56]	; (800bfc8 <xPortStartScheduler+0x40>)
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	4b0d      	ldr	r3, [pc, #52]	; (800bfc8 <xPortStartScheduler+0x40>)
 800bf92:	21ff      	movs	r1, #255	; 0xff
 800bf94:	0409      	lsls	r1, r1, #16
 800bf96:	430a      	orrs	r2, r1
 800bf98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf9a:	4b0b      	ldr	r3, [pc, #44]	; (800bfc8 <xPortStartScheduler+0x40>)
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <xPortStartScheduler+0x40>)
 800bfa0:	21ff      	movs	r1, #255	; 0xff
 800bfa2:	0609      	lsls	r1, r1, #24
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfa8:	f000 f898 	bl	800c0dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfac:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <xPortStartScheduler+0x44>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800bfb2:	f7ff ffcd 	bl	800bf50 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfb6:	f7ff fbdb 	bl	800b770 <vTaskSwitchContext>
	prvTaskExitError();
 800bfba:	f7ff ffa5 	bl	800bf08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	0018      	movs	r0, r3
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	46c0      	nop			; (mov r8, r8)
 800bfc8:	e000ed20 	.word	0xe000ed20
 800bfcc:	20000024 	.word	0x20000024

0800bfd0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfd4:	4b05      	ldr	r3, [pc, #20]	; (800bfec <vPortYield+0x1c>)
 800bfd6:	2280      	movs	r2, #128	; 0x80
 800bfd8:	0552      	lsls	r2, r2, #21
 800bfda:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800bfdc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800bfe0:	f3bf 8f6f 	isb	sy
}
 800bfe4:	46c0      	nop			; (mov r8, r8)
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	46c0      	nop			; (mov r8, r8)
 800bfec:	e000ed04 	.word	0xe000ed04

0800bff0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800bff4:	b672      	cpsid	i
	uxCriticalNesting++;
 800bff6:	4b06      	ldr	r3, [pc, #24]	; (800c010 <vPortEnterCritical+0x20>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	4b04      	ldr	r3, [pc, #16]	; (800c010 <vPortEnterCritical+0x20>)
 800bffe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800c000:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c004:	f3bf 8f6f 	isb	sy
}
 800c008:	46c0      	nop			; (mov r8, r8)
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	20000024 	.word	0x20000024

0800c014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c018:	4b09      	ldr	r3, [pc, #36]	; (800c040 <vPortExitCritical+0x2c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <vPortExitCritical+0x10>
 800c020:	b672      	cpsid	i
 800c022:	e7fe      	b.n	800c022 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800c024:	4b06      	ldr	r3, [pc, #24]	; (800c040 <vPortExitCritical+0x2c>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	1e5a      	subs	r2, r3, #1
 800c02a:	4b05      	ldr	r3, [pc, #20]	; (800c040 <vPortExitCritical+0x2c>)
 800c02c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800c02e:	4b04      	ldr	r3, [pc, #16]	; (800c040 <vPortExitCritical+0x2c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d100      	bne.n	800c038 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800c036:	b662      	cpsie	i
	}
}
 800c038:	46c0      	nop			; (mov r8, r8)
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	46c0      	nop			; (mov r8, r8)
 800c040:	20000024 	.word	0x20000024

0800c044 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800c044:	f3ef 8010 	mrs	r0, PRIMASK
 800c048:	b672      	cpsid	i
 800c04a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800c04c:	46c0      	nop			; (mov r8, r8)
 800c04e:	0018      	movs	r0, r3

0800c050 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800c050:	f380 8810 	msr	PRIMASK, r0
 800c054:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800c056:	46c0      	nop			; (mov r8, r8)
	...

0800c060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c060:	f3ef 8009 	mrs	r0, PSP
 800c064:	4b0e      	ldr	r3, [pc, #56]	; (800c0a0 <pxCurrentTCBConst>)
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	3820      	subs	r0, #32
 800c06a:	6010      	str	r0, [r2, #0]
 800c06c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c06e:	4644      	mov	r4, r8
 800c070:	464d      	mov	r5, r9
 800c072:	4656      	mov	r6, sl
 800c074:	465f      	mov	r7, fp
 800c076:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c078:	b508      	push	{r3, lr}
 800c07a:	b672      	cpsid	i
 800c07c:	f7ff fb78 	bl	800b770 <vTaskSwitchContext>
 800c080:	b662      	cpsie	i
 800c082:	bc0c      	pop	{r2, r3}
 800c084:	6811      	ldr	r1, [r2, #0]
 800c086:	6808      	ldr	r0, [r1, #0]
 800c088:	3010      	adds	r0, #16
 800c08a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c08c:	46a0      	mov	r8, r4
 800c08e:	46a9      	mov	r9, r5
 800c090:	46b2      	mov	sl, r6
 800c092:	46bb      	mov	fp, r7
 800c094:	f380 8809 	msr	PSP, r0
 800c098:	3820      	subs	r0, #32
 800c09a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c09c:	4718      	bx	r3
 800c09e:	46c0      	nop			; (mov r8, r8)

0800c0a0 <pxCurrentTCBConst>:
 800c0a0:	200009c0 	.word	0x200009c0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800c0a4:	46c0      	nop			; (mov r8, r8)
 800c0a6:	46c0      	nop			; (mov r8, r8)

0800c0a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0ae:	f7ff ffc9 	bl	800c044 <ulSetInterruptMaskFromISR>
 800c0b2:	0003      	movs	r3, r0
 800c0b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c0b6:	f7ff faab 	bl	800b610 <xTaskIncrementTick>
 800c0ba:	1e03      	subs	r3, r0, #0
 800c0bc:	d003      	beq.n	800c0c6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c0be:	4b06      	ldr	r3, [pc, #24]	; (800c0d8 <xPortSysTickHandler+0x30>)
 800c0c0:	2280      	movs	r2, #128	; 0x80
 800c0c2:	0552      	lsls	r2, r2, #21
 800c0c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	0018      	movs	r0, r3
 800c0ca:	f7ff ffc1 	bl	800c050 <vClearInterruptMaskFromISR>
}
 800c0ce:	46c0      	nop			; (mov r8, r8)
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	b002      	add	sp, #8
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	46c0      	nop			; (mov r8, r8)
 800c0d8:	e000ed04 	.word	0xe000ed04

0800c0dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0e0:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <vPortSetupTimerInterrupt+0x34>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0e6:	4b0b      	ldr	r3, [pc, #44]	; (800c114 <vPortSetupTimerInterrupt+0x38>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0ec:	4b0a      	ldr	r3, [pc, #40]	; (800c118 <vPortSetupTimerInterrupt+0x3c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	22fa      	movs	r2, #250	; 0xfa
 800c0f2:	0091      	lsls	r1, r2, #2
 800c0f4:	0018      	movs	r0, r3
 800c0f6:	f7f4 f82d 	bl	8000154 <__udivsi3>
 800c0fa:	0003      	movs	r3, r0
 800c0fc:	001a      	movs	r2, r3
 800c0fe:	4b07      	ldr	r3, [pc, #28]	; (800c11c <vPortSetupTimerInterrupt+0x40>)
 800c100:	3a01      	subs	r2, #1
 800c102:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c104:	4b02      	ldr	r3, [pc, #8]	; (800c110 <vPortSetupTimerInterrupt+0x34>)
 800c106:	2207      	movs	r2, #7
 800c108:	601a      	str	r2, [r3, #0]
}
 800c10a:	46c0      	nop			; (mov r8, r8)
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	e000e010 	.word	0xe000e010
 800c114:	e000e018 	.word	0xe000e018
 800c118:	20000000 	.word	0x20000000
 800c11c:	e000e014 	.word	0xe000e014

0800c120 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c128:	2300      	movs	r3, #0
 800c12a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800c12c:	f7ff f9d8 	bl	800b4e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c130:	4b4b      	ldr	r3, [pc, #300]	; (800c260 <pvPortMalloc+0x140>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d101      	bne.n	800c13c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c138:	f000 f8ec 	bl	800c314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c13c:	4b49      	ldr	r3, [pc, #292]	; (800c264 <pvPortMalloc+0x144>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	4013      	ands	r3, r2
 800c144:	d000      	beq.n	800c148 <pvPortMalloc+0x28>
 800c146:	e07e      	b.n	800c246 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d012      	beq.n	800c174 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800c14e:	2208      	movs	r2, #8
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	189b      	adds	r3, r3, r2
 800c154:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2207      	movs	r2, #7
 800c15a:	4013      	ands	r3, r2
 800c15c:	d00a      	beq.n	800c174 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2207      	movs	r2, #7
 800c162:	4393      	bics	r3, r2
 800c164:	3308      	adds	r3, #8
 800c166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2207      	movs	r2, #7
 800c16c:	4013      	ands	r3, r2
 800c16e:	d001      	beq.n	800c174 <pvPortMalloc+0x54>
 800c170:	b672      	cpsid	i
 800c172:	e7fe      	b.n	800c172 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d065      	beq.n	800c246 <pvPortMalloc+0x126>
 800c17a:	4b3b      	ldr	r3, [pc, #236]	; (800c268 <pvPortMalloc+0x148>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	429a      	cmp	r2, r3
 800c182:	d860      	bhi.n	800c246 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c184:	4b39      	ldr	r3, [pc, #228]	; (800c26c <pvPortMalloc+0x14c>)
 800c186:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800c188:	4b38      	ldr	r3, [pc, #224]	; (800c26c <pvPortMalloc+0x14c>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c18e:	e004      	b.n	800c19a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d903      	bls.n	800c1ac <pvPortMalloc+0x8c>
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1f1      	bne.n	800c190 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c1ac:	4b2c      	ldr	r3, [pc, #176]	; (800c260 <pvPortMalloc+0x140>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d047      	beq.n	800c246 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2208      	movs	r2, #8
 800c1bc:	189b      	adds	r3, r3, r2
 800c1be:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	1ad2      	subs	r2, r2, r3
 800c1d0:	2308      	movs	r3, #8
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d916      	bls.n	800c206 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1d8:	697a      	ldr	r2, [r7, #20]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	18d3      	adds	r3, r2, r3
 800c1de:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	2207      	movs	r2, #7
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	d001      	beq.n	800c1ec <pvPortMalloc+0xcc>
 800c1e8:	b672      	cpsid	i
 800c1ea:	e7fe      	b.n	800c1ea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	685a      	ldr	r2, [r3, #4]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	1ad2      	subs	r2, r2, r3
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	0018      	movs	r0, r3
 800c202:	f000 f8e7 	bl	800c3d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c206:	4b18      	ldr	r3, [pc, #96]	; (800c268 <pvPortMalloc+0x148>)
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	1ad2      	subs	r2, r2, r3
 800c210:	4b15      	ldr	r3, [pc, #84]	; (800c268 <pvPortMalloc+0x148>)
 800c212:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c214:	4b14      	ldr	r3, [pc, #80]	; (800c268 <pvPortMalloc+0x148>)
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	4b15      	ldr	r3, [pc, #84]	; (800c270 <pvPortMalloc+0x150>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d203      	bcs.n	800c228 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c220:	4b11      	ldr	r3, [pc, #68]	; (800c268 <pvPortMalloc+0x148>)
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	4b12      	ldr	r3, [pc, #72]	; (800c270 <pvPortMalloc+0x150>)
 800c226:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	4b0d      	ldr	r3, [pc, #52]	; (800c264 <pvPortMalloc+0x144>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	431a      	orrs	r2, r3
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2200      	movs	r2, #0
 800c23a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c23c:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <pvPortMalloc+0x154>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	4b0c      	ldr	r3, [pc, #48]	; (800c274 <pvPortMalloc+0x154>)
 800c244:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c246:	f7ff f957 	bl	800b4f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2207      	movs	r2, #7
 800c24e:	4013      	ands	r3, r2
 800c250:	d001      	beq.n	800c256 <pvPortMalloc+0x136>
 800c252:	b672      	cpsid	i
 800c254:	e7fe      	b.n	800c254 <pvPortMalloc+0x134>
	return pvReturn;
 800c256:	68fb      	ldr	r3, [r7, #12]
}
 800c258:	0018      	movs	r0, r3
 800c25a:	46bd      	mov	sp, r7
 800c25c:	b006      	add	sp, #24
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20005af4 	.word	0x20005af4
 800c264:	20005b08 	.word	0x20005b08
 800c268:	20005af8 	.word	0x20005af8
 800c26c:	20005aec 	.word	0x20005aec
 800c270:	20005afc 	.word	0x20005afc
 800c274:	20005b00 	.word	0x20005b00

0800c278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d03a      	beq.n	800c300 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c28a:	2308      	movs	r3, #8
 800c28c:	425b      	negs	r3, r3
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	18d3      	adds	r3, r2, r3
 800c292:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	4b1a      	ldr	r3, [pc, #104]	; (800c308 <vPortFree+0x90>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	d101      	bne.n	800c2a8 <vPortFree+0x30>
 800c2a4:	b672      	cpsid	i
 800c2a6:	e7fe      	b.n	800c2a6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <vPortFree+0x3c>
 800c2b0:	b672      	cpsid	i
 800c2b2:	e7fe      	b.n	800c2b2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	685a      	ldr	r2, [r3, #4]
 800c2b8:	4b13      	ldr	r3, [pc, #76]	; (800c308 <vPortFree+0x90>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4013      	ands	r3, r2
 800c2be:	d01f      	beq.n	800c300 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d11b      	bne.n	800c300 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	685a      	ldr	r2, [r3, #4]
 800c2cc:	4b0e      	ldr	r3, [pc, #56]	; (800c308 <vPortFree+0x90>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	43db      	mvns	r3, r3
 800c2d2:	401a      	ands	r2, r3
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2d8:	f7ff f902 	bl	800b4e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	685a      	ldr	r2, [r3, #4]
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <vPortFree+0x94>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	18d2      	adds	r2, r2, r3
 800c2e6:	4b09      	ldr	r3, [pc, #36]	; (800c30c <vPortFree+0x94>)
 800c2e8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	0018      	movs	r0, r3
 800c2ee:	f000 f871 	bl	800c3d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c2f2:	4b07      	ldr	r3, [pc, #28]	; (800c310 <vPortFree+0x98>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <vPortFree+0x98>)
 800c2fa:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800c2fc:	f7ff f8fc 	bl	800b4f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c300:	46c0      	nop			; (mov r8, r8)
 800c302:	46bd      	mov	sp, r7
 800c304:	b004      	add	sp, #16
 800c306:	bd80      	pop	{r7, pc}
 800c308:	20005b08 	.word	0x20005b08
 800c30c:	20005af8 	.word	0x20005af8
 800c310:	20005b04 	.word	0x20005b04

0800c314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c31a:	23a0      	movs	r3, #160	; 0xa0
 800c31c:	01db      	lsls	r3, r3, #7
 800c31e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c320:	4b26      	ldr	r3, [pc, #152]	; (800c3bc <prvHeapInit+0xa8>)
 800c322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2207      	movs	r2, #7
 800c328:	4013      	ands	r3, r2
 800c32a:	d00c      	beq.n	800c346 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3307      	adds	r3, #7
 800c330:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2207      	movs	r2, #7
 800c336:	4393      	bics	r3, r2
 800c338:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	1ad2      	subs	r2, r2, r3
 800c340:	4b1e      	ldr	r3, [pc, #120]	; (800c3bc <prvHeapInit+0xa8>)
 800c342:	18d3      	adds	r3, r2, r3
 800c344:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c34a:	4b1d      	ldr	r3, [pc, #116]	; (800c3c0 <prvHeapInit+0xac>)
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c350:	4b1b      	ldr	r3, [pc, #108]	; (800c3c0 <prvHeapInit+0xac>)
 800c352:	2200      	movs	r2, #0
 800c354:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	18d3      	adds	r3, r2, r3
 800c35c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c35e:	2208      	movs	r2, #8
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	1a9b      	subs	r3, r3, r2
 800c364:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2207      	movs	r2, #7
 800c36a:	4393      	bics	r3, r2
 800c36c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	4b14      	ldr	r3, [pc, #80]	; (800c3c4 <prvHeapInit+0xb0>)
 800c372:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800c374:	4b13      	ldr	r3, [pc, #76]	; (800c3c4 <prvHeapInit+0xb0>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2200      	movs	r2, #0
 800c37a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c37c:	4b11      	ldr	r3, [pc, #68]	; (800c3c4 <prvHeapInit+0xb0>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2200      	movs	r2, #0
 800c382:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	1ad2      	subs	r2, r2, r3
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c392:	4b0c      	ldr	r3, [pc, #48]	; (800c3c4 <prvHeapInit+0xb0>)
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	4b0a      	ldr	r3, [pc, #40]	; (800c3c8 <prvHeapInit+0xb4>)
 800c3a0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	685a      	ldr	r2, [r3, #4]
 800c3a6:	4b09      	ldr	r3, [pc, #36]	; (800c3cc <prvHeapInit+0xb8>)
 800c3a8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3aa:	4b09      	ldr	r3, [pc, #36]	; (800c3d0 <prvHeapInit+0xbc>)
 800c3ac:	2280      	movs	r2, #128	; 0x80
 800c3ae:	0612      	lsls	r2, r2, #24
 800c3b0:	601a      	str	r2, [r3, #0]
}
 800c3b2:	46c0      	nop			; (mov r8, r8)
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	b004      	add	sp, #16
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	46c0      	nop			; (mov r8, r8)
 800c3bc:	20000aec 	.word	0x20000aec
 800c3c0:	20005aec 	.word	0x20005aec
 800c3c4:	20005af4 	.word	0x20005af4
 800c3c8:	20005afc 	.word	0x20005afc
 800c3cc:	20005af8 	.word	0x20005af8
 800c3d0:	20005b08 	.word	0x20005b08

0800c3d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3dc:	4b27      	ldr	r3, [pc, #156]	; (800c47c <prvInsertBlockIntoFreeList+0xa8>)
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	e002      	b.n	800c3e8 <prvInsertBlockIntoFreeList+0x14>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	60fb      	str	r3, [r7, #12]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d8f7      	bhi.n	800c3e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	18d3      	adds	r3, r2, r3
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	429a      	cmp	r2, r3
 800c402:	d108      	bne.n	800c416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	18d2      	adds	r2, r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	18d2      	adds	r2, r2, r3
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	429a      	cmp	r2, r3
 800c428:	d118      	bne.n	800c45c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	4b14      	ldr	r3, [pc, #80]	; (800c480 <prvInsertBlockIntoFreeList+0xac>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	429a      	cmp	r2, r3
 800c434:	d00d      	beq.n	800c452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	685a      	ldr	r2, [r3, #4]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	18d2      	adds	r2, r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	601a      	str	r2, [r3, #0]
 800c450:	e008      	b.n	800c464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c452:	4b0b      	ldr	r3, [pc, #44]	; (800c480 <prvInsertBlockIntoFreeList+0xac>)
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	e003      	b.n	800c464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d002      	beq.n	800c472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c472:	46c0      	nop			; (mov r8, r8)
 800c474:	46bd      	mov	sp, r7
 800c476:	b004      	add	sp, #16
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	46c0      	nop			; (mov r8, r8)
 800c47c:	20005aec 	.word	0x20005aec
 800c480:	20005af4 	.word	0x20005af4

0800c484 <atof>:
 800c484:	b510      	push	{r4, lr}
 800c486:	2100      	movs	r1, #0
 800c488:	f000 fe2a 	bl	800d0e0 <strtod>
 800c48c:	bd10      	pop	{r4, pc}

0800c48e <atoi>:
 800c48e:	b510      	push	{r4, lr}
 800c490:	220a      	movs	r2, #10
 800c492:	2100      	movs	r1, #0
 800c494:	f000 feb8 	bl	800d208 <strtol>
 800c498:	bd10      	pop	{r4, pc}
	...

0800c49c <sulp>:
 800c49c:	b570      	push	{r4, r5, r6, lr}
 800c49e:	0016      	movs	r6, r2
 800c4a0:	000d      	movs	r5, r1
 800c4a2:	f003 fd71 	bl	800ff88 <__ulp>
 800c4a6:	2e00      	cmp	r6, #0
 800c4a8:	d00d      	beq.n	800c4c6 <sulp+0x2a>
 800c4aa:	236b      	movs	r3, #107	; 0x6b
 800c4ac:	006a      	lsls	r2, r5, #1
 800c4ae:	0d52      	lsrs	r2, r2, #21
 800c4b0:	1a9b      	subs	r3, r3, r2
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	dd07      	ble.n	800c4c6 <sulp+0x2a>
 800c4b6:	2400      	movs	r4, #0
 800c4b8:	4a03      	ldr	r2, [pc, #12]	; (800c4c8 <sulp+0x2c>)
 800c4ba:	051b      	lsls	r3, r3, #20
 800c4bc:	189d      	adds	r5, r3, r2
 800c4be:	002b      	movs	r3, r5
 800c4c0:	0022      	movs	r2, r4
 800c4c2:	f7f5 fec9 	bl	8002258 <__aeabi_dmul>
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}
 800c4c8:	3ff00000 	.word	0x3ff00000

0800c4cc <_strtod_l>:
 800c4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ce:	b0a1      	sub	sp, #132	; 0x84
 800c4d0:	9219      	str	r2, [sp, #100]	; 0x64
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2600      	movs	r6, #0
 800c4d6:	2700      	movs	r7, #0
 800c4d8:	9004      	str	r0, [sp, #16]
 800c4da:	9107      	str	r1, [sp, #28]
 800c4dc:	921c      	str	r2, [sp, #112]	; 0x70
 800c4de:	911b      	str	r1, [sp, #108]	; 0x6c
 800c4e0:	780a      	ldrb	r2, [r1, #0]
 800c4e2:	2a2b      	cmp	r2, #43	; 0x2b
 800c4e4:	d055      	beq.n	800c592 <_strtod_l+0xc6>
 800c4e6:	d841      	bhi.n	800c56c <_strtod_l+0xa0>
 800c4e8:	2a0d      	cmp	r2, #13
 800c4ea:	d83b      	bhi.n	800c564 <_strtod_l+0x98>
 800c4ec:	2a08      	cmp	r2, #8
 800c4ee:	d83b      	bhi.n	800c568 <_strtod_l+0x9c>
 800c4f0:	2a00      	cmp	r2, #0
 800c4f2:	d044      	beq.n	800c57e <_strtod_l+0xb2>
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	920f      	str	r2, [sp, #60]	; 0x3c
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c4fc:	9109      	str	r1, [sp, #36]	; 0x24
 800c4fe:	782a      	ldrb	r2, [r5, #0]
 800c500:	2a30      	cmp	r2, #48	; 0x30
 800c502:	d000      	beq.n	800c506 <_strtod_l+0x3a>
 800c504:	e085      	b.n	800c612 <_strtod_l+0x146>
 800c506:	786a      	ldrb	r2, [r5, #1]
 800c508:	3120      	adds	r1, #32
 800c50a:	438a      	bics	r2, r1
 800c50c:	2a58      	cmp	r2, #88	; 0x58
 800c50e:	d000      	beq.n	800c512 <_strtod_l+0x46>
 800c510:	e075      	b.n	800c5fe <_strtod_l+0x132>
 800c512:	9302      	str	r3, [sp, #8]
 800c514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c516:	4a97      	ldr	r2, [pc, #604]	; (800c774 <_strtod_l+0x2a8>)
 800c518:	9301      	str	r3, [sp, #4]
 800c51a:	ab1c      	add	r3, sp, #112	; 0x70
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	9804      	ldr	r0, [sp, #16]
 800c520:	ab1d      	add	r3, sp, #116	; 0x74
 800c522:	a91b      	add	r1, sp, #108	; 0x6c
 800c524:	f002 fde8 	bl	800f0f8 <__gethex>
 800c528:	230f      	movs	r3, #15
 800c52a:	0002      	movs	r2, r0
 800c52c:	401a      	ands	r2, r3
 800c52e:	0004      	movs	r4, r0
 800c530:	9205      	str	r2, [sp, #20]
 800c532:	4218      	tst	r0, r3
 800c534:	d005      	beq.n	800c542 <_strtod_l+0x76>
 800c536:	2a06      	cmp	r2, #6
 800c538:	d12d      	bne.n	800c596 <_strtod_l+0xca>
 800c53a:	1c6b      	adds	r3, r5, #1
 800c53c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c53e:	2300      	movs	r3, #0
 800c540:	930f      	str	r3, [sp, #60]	; 0x3c
 800c542:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c544:	2b00      	cmp	r3, #0
 800c546:	d002      	beq.n	800c54e <_strtod_l+0x82>
 800c548:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c54a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c54c:	6013      	str	r3, [r2, #0]
 800c54e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c550:	2b00      	cmp	r3, #0
 800c552:	d01b      	beq.n	800c58c <_strtod_l+0xc0>
 800c554:	2380      	movs	r3, #128	; 0x80
 800c556:	0032      	movs	r2, r6
 800c558:	061b      	lsls	r3, r3, #24
 800c55a:	18fb      	adds	r3, r7, r3
 800c55c:	0010      	movs	r0, r2
 800c55e:	0019      	movs	r1, r3
 800c560:	b021      	add	sp, #132	; 0x84
 800c562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c564:	2a20      	cmp	r2, #32
 800c566:	d1c5      	bne.n	800c4f4 <_strtod_l+0x28>
 800c568:	3101      	adds	r1, #1
 800c56a:	e7b8      	b.n	800c4de <_strtod_l+0x12>
 800c56c:	2a2d      	cmp	r2, #45	; 0x2d
 800c56e:	d1c1      	bne.n	800c4f4 <_strtod_l+0x28>
 800c570:	3a2c      	subs	r2, #44	; 0x2c
 800c572:	920f      	str	r2, [sp, #60]	; 0x3c
 800c574:	1c4a      	adds	r2, r1, #1
 800c576:	921b      	str	r2, [sp, #108]	; 0x6c
 800c578:	784a      	ldrb	r2, [r1, #1]
 800c57a:	2a00      	cmp	r2, #0
 800c57c:	d1bc      	bne.n	800c4f8 <_strtod_l+0x2c>
 800c57e:	9b07      	ldr	r3, [sp, #28]
 800c580:	931b      	str	r3, [sp, #108]	; 0x6c
 800c582:	2300      	movs	r3, #0
 800c584:	930f      	str	r3, [sp, #60]	; 0x3c
 800c586:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1dd      	bne.n	800c548 <_strtod_l+0x7c>
 800c58c:	0032      	movs	r2, r6
 800c58e:	003b      	movs	r3, r7
 800c590:	e7e4      	b.n	800c55c <_strtod_l+0x90>
 800c592:	2200      	movs	r2, #0
 800c594:	e7ed      	b.n	800c572 <_strtod_l+0xa6>
 800c596:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c598:	2a00      	cmp	r2, #0
 800c59a:	d007      	beq.n	800c5ac <_strtod_l+0xe0>
 800c59c:	2135      	movs	r1, #53	; 0x35
 800c59e:	a81e      	add	r0, sp, #120	; 0x78
 800c5a0:	f003 fde3 	bl	801016a <__copybits>
 800c5a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c5a6:	9804      	ldr	r0, [sp, #16]
 800c5a8:	f003 f9ac 	bl	800f904 <_Bfree>
 800c5ac:	9805      	ldr	r0, [sp, #20]
 800c5ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5b0:	3801      	subs	r0, #1
 800c5b2:	2804      	cmp	r0, #4
 800c5b4:	d806      	bhi.n	800c5c4 <_strtod_l+0xf8>
 800c5b6:	f7f3 fdb9 	bl	800012c <__gnu_thumb1_case_uqi>
 800c5ba:	0312      	.short	0x0312
 800c5bc:	1e1c      	.short	0x1e1c
 800c5be:	12          	.byte	0x12
 800c5bf:	00          	.byte	0x00
 800c5c0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c5c2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c5c4:	05e4      	lsls	r4, r4, #23
 800c5c6:	d502      	bpl.n	800c5ce <_strtod_l+0x102>
 800c5c8:	2380      	movs	r3, #128	; 0x80
 800c5ca:	061b      	lsls	r3, r3, #24
 800c5cc:	431f      	orrs	r7, r3
 800c5ce:	4b6a      	ldr	r3, [pc, #424]	; (800c778 <_strtod_l+0x2ac>)
 800c5d0:	423b      	tst	r3, r7
 800c5d2:	d1b6      	bne.n	800c542 <_strtod_l+0x76>
 800c5d4:	f001 fdf6 	bl	800e1c4 <__errno>
 800c5d8:	2322      	movs	r3, #34	; 0x22
 800c5da:	6003      	str	r3, [r0, #0]
 800c5dc:	e7b1      	b.n	800c542 <_strtod_l+0x76>
 800c5de:	4967      	ldr	r1, [pc, #412]	; (800c77c <_strtod_l+0x2b0>)
 800c5e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c5e2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c5e4:	400a      	ands	r2, r1
 800c5e6:	4966      	ldr	r1, [pc, #408]	; (800c780 <_strtod_l+0x2b4>)
 800c5e8:	185b      	adds	r3, r3, r1
 800c5ea:	051b      	lsls	r3, r3, #20
 800c5ec:	431a      	orrs	r2, r3
 800c5ee:	0017      	movs	r7, r2
 800c5f0:	e7e8      	b.n	800c5c4 <_strtod_l+0xf8>
 800c5f2:	4f61      	ldr	r7, [pc, #388]	; (800c778 <_strtod_l+0x2ac>)
 800c5f4:	e7e6      	b.n	800c5c4 <_strtod_l+0xf8>
 800c5f6:	2601      	movs	r6, #1
 800c5f8:	4f62      	ldr	r7, [pc, #392]	; (800c784 <_strtod_l+0x2b8>)
 800c5fa:	4276      	negs	r6, r6
 800c5fc:	e7e2      	b.n	800c5c4 <_strtod_l+0xf8>
 800c5fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	921b      	str	r2, [sp, #108]	; 0x6c
 800c604:	785b      	ldrb	r3, [r3, #1]
 800c606:	2b30      	cmp	r3, #48	; 0x30
 800c608:	d0f9      	beq.n	800c5fe <_strtod_l+0x132>
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d099      	beq.n	800c542 <_strtod_l+0x76>
 800c60e:	2301      	movs	r3, #1
 800c610:	9309      	str	r3, [sp, #36]	; 0x24
 800c612:	2500      	movs	r5, #0
 800c614:	220a      	movs	r2, #10
 800c616:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c618:	950d      	str	r5, [sp, #52]	; 0x34
 800c61a:	9310      	str	r3, [sp, #64]	; 0x40
 800c61c:	9508      	str	r5, [sp, #32]
 800c61e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c620:	7804      	ldrb	r4, [r0, #0]
 800c622:	0023      	movs	r3, r4
 800c624:	3b30      	subs	r3, #48	; 0x30
 800c626:	b2d9      	uxtb	r1, r3
 800c628:	2909      	cmp	r1, #9
 800c62a:	d927      	bls.n	800c67c <_strtod_l+0x1b0>
 800c62c:	2201      	movs	r2, #1
 800c62e:	4956      	ldr	r1, [pc, #344]	; (800c788 <_strtod_l+0x2bc>)
 800c630:	f001 fd64 	bl	800e0fc <strncmp>
 800c634:	2800      	cmp	r0, #0
 800c636:	d031      	beq.n	800c69c <_strtod_l+0x1d0>
 800c638:	2000      	movs	r0, #0
 800c63a:	0023      	movs	r3, r4
 800c63c:	4684      	mov	ip, r0
 800c63e:	9a08      	ldr	r2, [sp, #32]
 800c640:	900c      	str	r0, [sp, #48]	; 0x30
 800c642:	9205      	str	r2, [sp, #20]
 800c644:	2220      	movs	r2, #32
 800c646:	0019      	movs	r1, r3
 800c648:	4391      	bics	r1, r2
 800c64a:	000a      	movs	r2, r1
 800c64c:	2100      	movs	r1, #0
 800c64e:	9106      	str	r1, [sp, #24]
 800c650:	2a45      	cmp	r2, #69	; 0x45
 800c652:	d000      	beq.n	800c656 <_strtod_l+0x18a>
 800c654:	e0c2      	b.n	800c7dc <_strtod_l+0x310>
 800c656:	9b05      	ldr	r3, [sp, #20]
 800c658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c65a:	4303      	orrs	r3, r0
 800c65c:	4313      	orrs	r3, r2
 800c65e:	428b      	cmp	r3, r1
 800c660:	d08d      	beq.n	800c57e <_strtod_l+0xb2>
 800c662:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c664:	9307      	str	r3, [sp, #28]
 800c666:	3301      	adds	r3, #1
 800c668:	931b      	str	r3, [sp, #108]	; 0x6c
 800c66a:	9b07      	ldr	r3, [sp, #28]
 800c66c:	785b      	ldrb	r3, [r3, #1]
 800c66e:	2b2b      	cmp	r3, #43	; 0x2b
 800c670:	d071      	beq.n	800c756 <_strtod_l+0x28a>
 800c672:	000c      	movs	r4, r1
 800c674:	2b2d      	cmp	r3, #45	; 0x2d
 800c676:	d174      	bne.n	800c762 <_strtod_l+0x296>
 800c678:	2401      	movs	r4, #1
 800c67a:	e06d      	b.n	800c758 <_strtod_l+0x28c>
 800c67c:	9908      	ldr	r1, [sp, #32]
 800c67e:	2908      	cmp	r1, #8
 800c680:	dc09      	bgt.n	800c696 <_strtod_l+0x1ca>
 800c682:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c684:	4351      	muls	r1, r2
 800c686:	185b      	adds	r3, r3, r1
 800c688:	930d      	str	r3, [sp, #52]	; 0x34
 800c68a:	9b08      	ldr	r3, [sp, #32]
 800c68c:	3001      	adds	r0, #1
 800c68e:	3301      	adds	r3, #1
 800c690:	9308      	str	r3, [sp, #32]
 800c692:	901b      	str	r0, [sp, #108]	; 0x6c
 800c694:	e7c3      	b.n	800c61e <_strtod_l+0x152>
 800c696:	4355      	muls	r5, r2
 800c698:	195d      	adds	r5, r3, r5
 800c69a:	e7f6      	b.n	800c68a <_strtod_l+0x1be>
 800c69c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c69e:	1c5a      	adds	r2, r3, #1
 800c6a0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c6a2:	9a08      	ldr	r2, [sp, #32]
 800c6a4:	785b      	ldrb	r3, [r3, #1]
 800c6a6:	2a00      	cmp	r2, #0
 800c6a8:	d03a      	beq.n	800c720 <_strtod_l+0x254>
 800c6aa:	900c      	str	r0, [sp, #48]	; 0x30
 800c6ac:	9205      	str	r2, [sp, #20]
 800c6ae:	001a      	movs	r2, r3
 800c6b0:	3a30      	subs	r2, #48	; 0x30
 800c6b2:	2a09      	cmp	r2, #9
 800c6b4:	d912      	bls.n	800c6dc <_strtod_l+0x210>
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	4694      	mov	ip, r2
 800c6ba:	e7c3      	b.n	800c644 <_strtod_l+0x178>
 800c6bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6be:	3001      	adds	r0, #1
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	921b      	str	r2, [sp, #108]	; 0x6c
 800c6c4:	785b      	ldrb	r3, [r3, #1]
 800c6c6:	2b30      	cmp	r3, #48	; 0x30
 800c6c8:	d0f8      	beq.n	800c6bc <_strtod_l+0x1f0>
 800c6ca:	001a      	movs	r2, r3
 800c6cc:	3a31      	subs	r2, #49	; 0x31
 800c6ce:	2a08      	cmp	r2, #8
 800c6d0:	d83c      	bhi.n	800c74c <_strtod_l+0x280>
 800c6d2:	900c      	str	r0, [sp, #48]	; 0x30
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c6d8:	9005      	str	r0, [sp, #20]
 800c6da:	9210      	str	r2, [sp, #64]	; 0x40
 800c6dc:	001a      	movs	r2, r3
 800c6de:	1c41      	adds	r1, r0, #1
 800c6e0:	3a30      	subs	r2, #48	; 0x30
 800c6e2:	2b30      	cmp	r3, #48	; 0x30
 800c6e4:	d016      	beq.n	800c714 <_strtod_l+0x248>
 800c6e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6e8:	185b      	adds	r3, r3, r1
 800c6ea:	930c      	str	r3, [sp, #48]	; 0x30
 800c6ec:	9b05      	ldr	r3, [sp, #20]
 800c6ee:	210a      	movs	r1, #10
 800c6f0:	469c      	mov	ip, r3
 800c6f2:	4484      	add	ip, r0
 800c6f4:	4563      	cmp	r3, ip
 800c6f6:	d115      	bne.n	800c724 <_strtod_l+0x258>
 800c6f8:	9905      	ldr	r1, [sp, #20]
 800c6fa:	9b05      	ldr	r3, [sp, #20]
 800c6fc:	3101      	adds	r1, #1
 800c6fe:	1809      	adds	r1, r1, r0
 800c700:	181b      	adds	r3, r3, r0
 800c702:	9105      	str	r1, [sp, #20]
 800c704:	2b08      	cmp	r3, #8
 800c706:	dc19      	bgt.n	800c73c <_strtod_l+0x270>
 800c708:	230a      	movs	r3, #10
 800c70a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c70c:	434b      	muls	r3, r1
 800c70e:	2100      	movs	r1, #0
 800c710:	18d3      	adds	r3, r2, r3
 800c712:	930d      	str	r3, [sp, #52]	; 0x34
 800c714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c716:	0008      	movs	r0, r1
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c71c:	785b      	ldrb	r3, [r3, #1]
 800c71e:	e7c6      	b.n	800c6ae <_strtod_l+0x1e2>
 800c720:	9808      	ldr	r0, [sp, #32]
 800c722:	e7d0      	b.n	800c6c6 <_strtod_l+0x1fa>
 800c724:	1c5c      	adds	r4, r3, #1
 800c726:	2b08      	cmp	r3, #8
 800c728:	dc04      	bgt.n	800c734 <_strtod_l+0x268>
 800c72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c72c:	434b      	muls	r3, r1
 800c72e:	930d      	str	r3, [sp, #52]	; 0x34
 800c730:	0023      	movs	r3, r4
 800c732:	e7df      	b.n	800c6f4 <_strtod_l+0x228>
 800c734:	2c10      	cmp	r4, #16
 800c736:	dcfb      	bgt.n	800c730 <_strtod_l+0x264>
 800c738:	434d      	muls	r5, r1
 800c73a:	e7f9      	b.n	800c730 <_strtod_l+0x264>
 800c73c:	9b05      	ldr	r3, [sp, #20]
 800c73e:	2100      	movs	r1, #0
 800c740:	2b10      	cmp	r3, #16
 800c742:	dce7      	bgt.n	800c714 <_strtod_l+0x248>
 800c744:	230a      	movs	r3, #10
 800c746:	435d      	muls	r5, r3
 800c748:	1955      	adds	r5, r2, r5
 800c74a:	e7e3      	b.n	800c714 <_strtod_l+0x248>
 800c74c:	2200      	movs	r2, #0
 800c74e:	920c      	str	r2, [sp, #48]	; 0x30
 800c750:	9205      	str	r2, [sp, #20]
 800c752:	3201      	adds	r2, #1
 800c754:	e7b0      	b.n	800c6b8 <_strtod_l+0x1ec>
 800c756:	2400      	movs	r4, #0
 800c758:	9b07      	ldr	r3, [sp, #28]
 800c75a:	3302      	adds	r3, #2
 800c75c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c75e:	9b07      	ldr	r3, [sp, #28]
 800c760:	789b      	ldrb	r3, [r3, #2]
 800c762:	001a      	movs	r2, r3
 800c764:	3a30      	subs	r2, #48	; 0x30
 800c766:	2a09      	cmp	r2, #9
 800c768:	d914      	bls.n	800c794 <_strtod_l+0x2c8>
 800c76a:	9a07      	ldr	r2, [sp, #28]
 800c76c:	921b      	str	r2, [sp, #108]	; 0x6c
 800c76e:	2200      	movs	r2, #0
 800c770:	e033      	b.n	800c7da <_strtod_l+0x30e>
 800c772:	46c0      	nop			; (mov r8, r8)
 800c774:	08011160 	.word	0x08011160
 800c778:	7ff00000 	.word	0x7ff00000
 800c77c:	ffefffff 	.word	0xffefffff
 800c780:	00000433 	.word	0x00000433
 800c784:	7fffffff 	.word	0x7fffffff
 800c788:	0801115c 	.word	0x0801115c
 800c78c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	921b      	str	r2, [sp, #108]	; 0x6c
 800c792:	785b      	ldrb	r3, [r3, #1]
 800c794:	2b30      	cmp	r3, #48	; 0x30
 800c796:	d0f9      	beq.n	800c78c <_strtod_l+0x2c0>
 800c798:	2200      	movs	r2, #0
 800c79a:	9206      	str	r2, [sp, #24]
 800c79c:	001a      	movs	r2, r3
 800c79e:	3a31      	subs	r2, #49	; 0x31
 800c7a0:	2a08      	cmp	r2, #8
 800c7a2:	d81b      	bhi.n	800c7dc <_strtod_l+0x310>
 800c7a4:	3b30      	subs	r3, #48	; 0x30
 800c7a6:	930e      	str	r3, [sp, #56]	; 0x38
 800c7a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7aa:	9306      	str	r3, [sp, #24]
 800c7ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7ae:	1c59      	adds	r1, r3, #1
 800c7b0:	911b      	str	r1, [sp, #108]	; 0x6c
 800c7b2:	785b      	ldrb	r3, [r3, #1]
 800c7b4:	001a      	movs	r2, r3
 800c7b6:	3a30      	subs	r2, #48	; 0x30
 800c7b8:	2a09      	cmp	r2, #9
 800c7ba:	d93a      	bls.n	800c832 <_strtod_l+0x366>
 800c7bc:	9a06      	ldr	r2, [sp, #24]
 800c7be:	1a8a      	subs	r2, r1, r2
 800c7c0:	49b2      	ldr	r1, [pc, #712]	; (800ca8c <_strtod_l+0x5c0>)
 800c7c2:	9106      	str	r1, [sp, #24]
 800c7c4:	2a08      	cmp	r2, #8
 800c7c6:	dc04      	bgt.n	800c7d2 <_strtod_l+0x306>
 800c7c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7ca:	9206      	str	r2, [sp, #24]
 800c7cc:	428a      	cmp	r2, r1
 800c7ce:	dd00      	ble.n	800c7d2 <_strtod_l+0x306>
 800c7d0:	9106      	str	r1, [sp, #24]
 800c7d2:	2c00      	cmp	r4, #0
 800c7d4:	d002      	beq.n	800c7dc <_strtod_l+0x310>
 800c7d6:	9a06      	ldr	r2, [sp, #24]
 800c7d8:	4252      	negs	r2, r2
 800c7da:	9206      	str	r2, [sp, #24]
 800c7dc:	9a05      	ldr	r2, [sp, #20]
 800c7de:	2a00      	cmp	r2, #0
 800c7e0:	d14d      	bne.n	800c87e <_strtod_l+0x3b2>
 800c7e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7e4:	4310      	orrs	r0, r2
 800c7e6:	d000      	beq.n	800c7ea <_strtod_l+0x31e>
 800c7e8:	e6ab      	b.n	800c542 <_strtod_l+0x76>
 800c7ea:	4662      	mov	r2, ip
 800c7ec:	2a00      	cmp	r2, #0
 800c7ee:	d000      	beq.n	800c7f2 <_strtod_l+0x326>
 800c7f0:	e6c5      	b.n	800c57e <_strtod_l+0xb2>
 800c7f2:	2b69      	cmp	r3, #105	; 0x69
 800c7f4:	d027      	beq.n	800c846 <_strtod_l+0x37a>
 800c7f6:	dc23      	bgt.n	800c840 <_strtod_l+0x374>
 800c7f8:	2b49      	cmp	r3, #73	; 0x49
 800c7fa:	d024      	beq.n	800c846 <_strtod_l+0x37a>
 800c7fc:	2b4e      	cmp	r3, #78	; 0x4e
 800c7fe:	d000      	beq.n	800c802 <_strtod_l+0x336>
 800c800:	e6bd      	b.n	800c57e <_strtod_l+0xb2>
 800c802:	49a3      	ldr	r1, [pc, #652]	; (800ca90 <_strtod_l+0x5c4>)
 800c804:	a81b      	add	r0, sp, #108	; 0x6c
 800c806:	f002 fead 	bl	800f564 <__match>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d100      	bne.n	800c810 <_strtod_l+0x344>
 800c80e:	e6b6      	b.n	800c57e <_strtod_l+0xb2>
 800c810:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	2b28      	cmp	r3, #40	; 0x28
 800c816:	d12c      	bne.n	800c872 <_strtod_l+0x3a6>
 800c818:	499e      	ldr	r1, [pc, #632]	; (800ca94 <_strtod_l+0x5c8>)
 800c81a:	aa1e      	add	r2, sp, #120	; 0x78
 800c81c:	a81b      	add	r0, sp, #108	; 0x6c
 800c81e:	f002 feb5 	bl	800f58c <__hexnan>
 800c822:	2805      	cmp	r0, #5
 800c824:	d125      	bne.n	800c872 <_strtod_l+0x3a6>
 800c826:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c828:	4a9b      	ldr	r2, [pc, #620]	; (800ca98 <_strtod_l+0x5cc>)
 800c82a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c82c:	431a      	orrs	r2, r3
 800c82e:	0017      	movs	r7, r2
 800c830:	e687      	b.n	800c542 <_strtod_l+0x76>
 800c832:	220a      	movs	r2, #10
 800c834:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c836:	434a      	muls	r2, r1
 800c838:	18d2      	adds	r2, r2, r3
 800c83a:	3a30      	subs	r2, #48	; 0x30
 800c83c:	920e      	str	r2, [sp, #56]	; 0x38
 800c83e:	e7b5      	b.n	800c7ac <_strtod_l+0x2e0>
 800c840:	2b6e      	cmp	r3, #110	; 0x6e
 800c842:	d0de      	beq.n	800c802 <_strtod_l+0x336>
 800c844:	e69b      	b.n	800c57e <_strtod_l+0xb2>
 800c846:	4995      	ldr	r1, [pc, #596]	; (800ca9c <_strtod_l+0x5d0>)
 800c848:	a81b      	add	r0, sp, #108	; 0x6c
 800c84a:	f002 fe8b 	bl	800f564 <__match>
 800c84e:	2800      	cmp	r0, #0
 800c850:	d100      	bne.n	800c854 <_strtod_l+0x388>
 800c852:	e694      	b.n	800c57e <_strtod_l+0xb2>
 800c854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c856:	4992      	ldr	r1, [pc, #584]	; (800caa0 <_strtod_l+0x5d4>)
 800c858:	3b01      	subs	r3, #1
 800c85a:	a81b      	add	r0, sp, #108	; 0x6c
 800c85c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c85e:	f002 fe81 	bl	800f564 <__match>
 800c862:	2800      	cmp	r0, #0
 800c864:	d102      	bne.n	800c86c <_strtod_l+0x3a0>
 800c866:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c868:	3301      	adds	r3, #1
 800c86a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c86c:	2600      	movs	r6, #0
 800c86e:	4f8a      	ldr	r7, [pc, #552]	; (800ca98 <_strtod_l+0x5cc>)
 800c870:	e667      	b.n	800c542 <_strtod_l+0x76>
 800c872:	488c      	ldr	r0, [pc, #560]	; (800caa4 <_strtod_l+0x5d8>)
 800c874:	f001 fce8 	bl	800e248 <nan>
 800c878:	0006      	movs	r6, r0
 800c87a:	000f      	movs	r7, r1
 800c87c:	e661      	b.n	800c542 <_strtod_l+0x76>
 800c87e:	9b06      	ldr	r3, [sp, #24]
 800c880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c882:	1a9b      	subs	r3, r3, r2
 800c884:	9309      	str	r3, [sp, #36]	; 0x24
 800c886:	9b08      	ldr	r3, [sp, #32]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <_strtod_l+0x3c4>
 800c88c:	9b05      	ldr	r3, [sp, #20]
 800c88e:	9308      	str	r3, [sp, #32]
 800c890:	9c05      	ldr	r4, [sp, #20]
 800c892:	2c10      	cmp	r4, #16
 800c894:	dd00      	ble.n	800c898 <_strtod_l+0x3cc>
 800c896:	2410      	movs	r4, #16
 800c898:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c89a:	f7f6 fba5 	bl	8002fe8 <__aeabi_ui2d>
 800c89e:	9b05      	ldr	r3, [sp, #20]
 800c8a0:	0006      	movs	r6, r0
 800c8a2:	000f      	movs	r7, r1
 800c8a4:	2b09      	cmp	r3, #9
 800c8a6:	dd15      	ble.n	800c8d4 <_strtod_l+0x408>
 800c8a8:	0022      	movs	r2, r4
 800c8aa:	4b7f      	ldr	r3, [pc, #508]	; (800caa8 <_strtod_l+0x5dc>)
 800c8ac:	3a09      	subs	r2, #9
 800c8ae:	00d2      	lsls	r2, r2, #3
 800c8b0:	189b      	adds	r3, r3, r2
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	f7f5 fccf 	bl	8002258 <__aeabi_dmul>
 800c8ba:	0006      	movs	r6, r0
 800c8bc:	0028      	movs	r0, r5
 800c8be:	000f      	movs	r7, r1
 800c8c0:	f7f6 fb92 	bl	8002fe8 <__aeabi_ui2d>
 800c8c4:	0002      	movs	r2, r0
 800c8c6:	000b      	movs	r3, r1
 800c8c8:	0030      	movs	r0, r6
 800c8ca:	0039      	movs	r1, r7
 800c8cc:	f7f4 fd6a 	bl	80013a4 <__aeabi_dadd>
 800c8d0:	0006      	movs	r6, r0
 800c8d2:	000f      	movs	r7, r1
 800c8d4:	9b05      	ldr	r3, [sp, #20]
 800c8d6:	2b0f      	cmp	r3, #15
 800c8d8:	dc39      	bgt.n	800c94e <_strtod_l+0x482>
 800c8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d100      	bne.n	800c8e2 <_strtod_l+0x416>
 800c8e0:	e62f      	b.n	800c542 <_strtod_l+0x76>
 800c8e2:	dd24      	ble.n	800c92e <_strtod_l+0x462>
 800c8e4:	2b16      	cmp	r3, #22
 800c8e6:	dc09      	bgt.n	800c8fc <_strtod_l+0x430>
 800c8e8:	496f      	ldr	r1, [pc, #444]	; (800caa8 <_strtod_l+0x5dc>)
 800c8ea:	00db      	lsls	r3, r3, #3
 800c8ec:	18c9      	adds	r1, r1, r3
 800c8ee:	0032      	movs	r2, r6
 800c8f0:	6808      	ldr	r0, [r1, #0]
 800c8f2:	6849      	ldr	r1, [r1, #4]
 800c8f4:	003b      	movs	r3, r7
 800c8f6:	f7f5 fcaf 	bl	8002258 <__aeabi_dmul>
 800c8fa:	e7bd      	b.n	800c878 <_strtod_l+0x3ac>
 800c8fc:	2325      	movs	r3, #37	; 0x25
 800c8fe:	9a05      	ldr	r2, [sp, #20]
 800c900:	1a9b      	subs	r3, r3, r2
 800c902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c904:	4293      	cmp	r3, r2
 800c906:	db22      	blt.n	800c94e <_strtod_l+0x482>
 800c908:	240f      	movs	r4, #15
 800c90a:	9b05      	ldr	r3, [sp, #20]
 800c90c:	4d66      	ldr	r5, [pc, #408]	; (800caa8 <_strtod_l+0x5dc>)
 800c90e:	1ae4      	subs	r4, r4, r3
 800c910:	00e1      	lsls	r1, r4, #3
 800c912:	1869      	adds	r1, r5, r1
 800c914:	0032      	movs	r2, r6
 800c916:	6808      	ldr	r0, [r1, #0]
 800c918:	6849      	ldr	r1, [r1, #4]
 800c91a:	003b      	movs	r3, r7
 800c91c:	f7f5 fc9c 	bl	8002258 <__aeabi_dmul>
 800c920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c922:	1b1c      	subs	r4, r3, r4
 800c924:	00e4      	lsls	r4, r4, #3
 800c926:	192d      	adds	r5, r5, r4
 800c928:	682a      	ldr	r2, [r5, #0]
 800c92a:	686b      	ldr	r3, [r5, #4]
 800c92c:	e7e3      	b.n	800c8f6 <_strtod_l+0x42a>
 800c92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c930:	3316      	adds	r3, #22
 800c932:	db0c      	blt.n	800c94e <_strtod_l+0x482>
 800c934:	9906      	ldr	r1, [sp, #24]
 800c936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c938:	4b5b      	ldr	r3, [pc, #364]	; (800caa8 <_strtod_l+0x5dc>)
 800c93a:	1a52      	subs	r2, r2, r1
 800c93c:	00d2      	lsls	r2, r2, #3
 800c93e:	189b      	adds	r3, r3, r2
 800c940:	0030      	movs	r0, r6
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	0039      	movs	r1, r7
 800c948:	f7f5 f88c 	bl	8001a64 <__aeabi_ddiv>
 800c94c:	e794      	b.n	800c878 <_strtod_l+0x3ac>
 800c94e:	9b05      	ldr	r3, [sp, #20]
 800c950:	1b1c      	subs	r4, r3, r4
 800c952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c954:	18e4      	adds	r4, r4, r3
 800c956:	2c00      	cmp	r4, #0
 800c958:	dd72      	ble.n	800ca40 <_strtod_l+0x574>
 800c95a:	220f      	movs	r2, #15
 800c95c:	0023      	movs	r3, r4
 800c95e:	4013      	ands	r3, r2
 800c960:	4214      	tst	r4, r2
 800c962:	d00a      	beq.n	800c97a <_strtod_l+0x4ae>
 800c964:	4950      	ldr	r1, [pc, #320]	; (800caa8 <_strtod_l+0x5dc>)
 800c966:	00db      	lsls	r3, r3, #3
 800c968:	18c9      	adds	r1, r1, r3
 800c96a:	0032      	movs	r2, r6
 800c96c:	6808      	ldr	r0, [r1, #0]
 800c96e:	6849      	ldr	r1, [r1, #4]
 800c970:	003b      	movs	r3, r7
 800c972:	f7f5 fc71 	bl	8002258 <__aeabi_dmul>
 800c976:	0006      	movs	r6, r0
 800c978:	000f      	movs	r7, r1
 800c97a:	230f      	movs	r3, #15
 800c97c:	439c      	bics	r4, r3
 800c97e:	d04a      	beq.n	800ca16 <_strtod_l+0x54a>
 800c980:	3326      	adds	r3, #38	; 0x26
 800c982:	33ff      	adds	r3, #255	; 0xff
 800c984:	429c      	cmp	r4, r3
 800c986:	dd22      	ble.n	800c9ce <_strtod_l+0x502>
 800c988:	2300      	movs	r3, #0
 800c98a:	9305      	str	r3, [sp, #20]
 800c98c:	9306      	str	r3, [sp, #24]
 800c98e:	930d      	str	r3, [sp, #52]	; 0x34
 800c990:	9308      	str	r3, [sp, #32]
 800c992:	2322      	movs	r3, #34	; 0x22
 800c994:	2600      	movs	r6, #0
 800c996:	9a04      	ldr	r2, [sp, #16]
 800c998:	4f3f      	ldr	r7, [pc, #252]	; (800ca98 <_strtod_l+0x5cc>)
 800c99a:	6013      	str	r3, [r2, #0]
 800c99c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c99e:	42b3      	cmp	r3, r6
 800c9a0:	d100      	bne.n	800c9a4 <_strtod_l+0x4d8>
 800c9a2:	e5ce      	b.n	800c542 <_strtod_l+0x76>
 800c9a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9a6:	9804      	ldr	r0, [sp, #16]
 800c9a8:	f002 ffac 	bl	800f904 <_Bfree>
 800c9ac:	9908      	ldr	r1, [sp, #32]
 800c9ae:	9804      	ldr	r0, [sp, #16]
 800c9b0:	f002 ffa8 	bl	800f904 <_Bfree>
 800c9b4:	9906      	ldr	r1, [sp, #24]
 800c9b6:	9804      	ldr	r0, [sp, #16]
 800c9b8:	f002 ffa4 	bl	800f904 <_Bfree>
 800c9bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c9be:	9804      	ldr	r0, [sp, #16]
 800c9c0:	f002 ffa0 	bl	800f904 <_Bfree>
 800c9c4:	9905      	ldr	r1, [sp, #20]
 800c9c6:	9804      	ldr	r0, [sp, #16]
 800c9c8:	f002 ff9c 	bl	800f904 <_Bfree>
 800c9cc:	e5b9      	b.n	800c542 <_strtod_l+0x76>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	0030      	movs	r0, r6
 800c9d2:	0039      	movs	r1, r7
 800c9d4:	4d35      	ldr	r5, [pc, #212]	; (800caac <_strtod_l+0x5e0>)
 800c9d6:	1124      	asrs	r4, r4, #4
 800c9d8:	9307      	str	r3, [sp, #28]
 800c9da:	2c01      	cmp	r4, #1
 800c9dc:	dc1e      	bgt.n	800ca1c <_strtod_l+0x550>
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <_strtod_l+0x51a>
 800c9e2:	0006      	movs	r6, r0
 800c9e4:	000f      	movs	r7, r1
 800c9e6:	4b32      	ldr	r3, [pc, #200]	; (800cab0 <_strtod_l+0x5e4>)
 800c9e8:	9a07      	ldr	r2, [sp, #28]
 800c9ea:	18ff      	adds	r7, r7, r3
 800c9ec:	4b2f      	ldr	r3, [pc, #188]	; (800caac <_strtod_l+0x5e0>)
 800c9ee:	00d2      	lsls	r2, r2, #3
 800c9f0:	189d      	adds	r5, r3, r2
 800c9f2:	6828      	ldr	r0, [r5, #0]
 800c9f4:	6869      	ldr	r1, [r5, #4]
 800c9f6:	0032      	movs	r2, r6
 800c9f8:	003b      	movs	r3, r7
 800c9fa:	f7f5 fc2d 	bl	8002258 <__aeabi_dmul>
 800c9fe:	4b26      	ldr	r3, [pc, #152]	; (800ca98 <_strtod_l+0x5cc>)
 800ca00:	4a2c      	ldr	r2, [pc, #176]	; (800cab4 <_strtod_l+0x5e8>)
 800ca02:	0006      	movs	r6, r0
 800ca04:	400b      	ands	r3, r1
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d8be      	bhi.n	800c988 <_strtod_l+0x4bc>
 800ca0a:	4a2b      	ldr	r2, [pc, #172]	; (800cab8 <_strtod_l+0x5ec>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d913      	bls.n	800ca38 <_strtod_l+0x56c>
 800ca10:	2601      	movs	r6, #1
 800ca12:	4f2a      	ldr	r7, [pc, #168]	; (800cabc <_strtod_l+0x5f0>)
 800ca14:	4276      	negs	r6, r6
 800ca16:	2300      	movs	r3, #0
 800ca18:	9307      	str	r3, [sp, #28]
 800ca1a:	e088      	b.n	800cb2e <_strtod_l+0x662>
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	4214      	tst	r4, r2
 800ca20:	d004      	beq.n	800ca2c <_strtod_l+0x560>
 800ca22:	682a      	ldr	r2, [r5, #0]
 800ca24:	686b      	ldr	r3, [r5, #4]
 800ca26:	f7f5 fc17 	bl	8002258 <__aeabi_dmul>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	9a07      	ldr	r2, [sp, #28]
 800ca2e:	1064      	asrs	r4, r4, #1
 800ca30:	3201      	adds	r2, #1
 800ca32:	9207      	str	r2, [sp, #28]
 800ca34:	3508      	adds	r5, #8
 800ca36:	e7d0      	b.n	800c9da <_strtod_l+0x50e>
 800ca38:	23d4      	movs	r3, #212	; 0xd4
 800ca3a:	049b      	lsls	r3, r3, #18
 800ca3c:	18cf      	adds	r7, r1, r3
 800ca3e:	e7ea      	b.n	800ca16 <_strtod_l+0x54a>
 800ca40:	2c00      	cmp	r4, #0
 800ca42:	d0e8      	beq.n	800ca16 <_strtod_l+0x54a>
 800ca44:	4264      	negs	r4, r4
 800ca46:	230f      	movs	r3, #15
 800ca48:	0022      	movs	r2, r4
 800ca4a:	401a      	ands	r2, r3
 800ca4c:	421c      	tst	r4, r3
 800ca4e:	d00a      	beq.n	800ca66 <_strtod_l+0x59a>
 800ca50:	4b15      	ldr	r3, [pc, #84]	; (800caa8 <_strtod_l+0x5dc>)
 800ca52:	00d2      	lsls	r2, r2, #3
 800ca54:	189b      	adds	r3, r3, r2
 800ca56:	0030      	movs	r0, r6
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	0039      	movs	r1, r7
 800ca5e:	f7f5 f801 	bl	8001a64 <__aeabi_ddiv>
 800ca62:	0006      	movs	r6, r0
 800ca64:	000f      	movs	r7, r1
 800ca66:	1124      	asrs	r4, r4, #4
 800ca68:	d0d5      	beq.n	800ca16 <_strtod_l+0x54a>
 800ca6a:	2c1f      	cmp	r4, #31
 800ca6c:	dd28      	ble.n	800cac0 <_strtod_l+0x5f4>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	9305      	str	r3, [sp, #20]
 800ca72:	9306      	str	r3, [sp, #24]
 800ca74:	930d      	str	r3, [sp, #52]	; 0x34
 800ca76:	9308      	str	r3, [sp, #32]
 800ca78:	2322      	movs	r3, #34	; 0x22
 800ca7a:	9a04      	ldr	r2, [sp, #16]
 800ca7c:	2600      	movs	r6, #0
 800ca7e:	6013      	str	r3, [r2, #0]
 800ca80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca82:	2700      	movs	r7, #0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d18d      	bne.n	800c9a4 <_strtod_l+0x4d8>
 800ca88:	e55b      	b.n	800c542 <_strtod_l+0x76>
 800ca8a:	46c0      	nop			; (mov r8, r8)
 800ca8c:	00004e1f 	.word	0x00004e1f
 800ca90:	080112be 	.word	0x080112be
 800ca94:	08011174 	.word	0x08011174
 800ca98:	7ff00000 	.word	0x7ff00000
 800ca9c:	080112b6 	.word	0x080112b6
 800caa0:	080112f0 	.word	0x080112f0
 800caa4:	08011580 	.word	0x08011580
 800caa8:	08011460 	.word	0x08011460
 800caac:	08011438 	.word	0x08011438
 800cab0:	fcb00000 	.word	0xfcb00000
 800cab4:	7ca00000 	.word	0x7ca00000
 800cab8:	7c900000 	.word	0x7c900000
 800cabc:	7fefffff 	.word	0x7fefffff
 800cac0:	2310      	movs	r3, #16
 800cac2:	0022      	movs	r2, r4
 800cac4:	401a      	ands	r2, r3
 800cac6:	9207      	str	r2, [sp, #28]
 800cac8:	421c      	tst	r4, r3
 800caca:	d001      	beq.n	800cad0 <_strtod_l+0x604>
 800cacc:	335a      	adds	r3, #90	; 0x5a
 800cace:	9307      	str	r3, [sp, #28]
 800cad0:	0030      	movs	r0, r6
 800cad2:	0039      	movs	r1, r7
 800cad4:	2300      	movs	r3, #0
 800cad6:	4dc4      	ldr	r5, [pc, #784]	; (800cde8 <_strtod_l+0x91c>)
 800cad8:	2201      	movs	r2, #1
 800cada:	4214      	tst	r4, r2
 800cadc:	d004      	beq.n	800cae8 <_strtod_l+0x61c>
 800cade:	682a      	ldr	r2, [r5, #0]
 800cae0:	686b      	ldr	r3, [r5, #4]
 800cae2:	f7f5 fbb9 	bl	8002258 <__aeabi_dmul>
 800cae6:	2301      	movs	r3, #1
 800cae8:	1064      	asrs	r4, r4, #1
 800caea:	3508      	adds	r5, #8
 800caec:	2c00      	cmp	r4, #0
 800caee:	d1f3      	bne.n	800cad8 <_strtod_l+0x60c>
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <_strtod_l+0x62c>
 800caf4:	0006      	movs	r6, r0
 800caf6:	000f      	movs	r7, r1
 800caf8:	9b07      	ldr	r3, [sp, #28]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00f      	beq.n	800cb1e <_strtod_l+0x652>
 800cafe:	236b      	movs	r3, #107	; 0x6b
 800cb00:	007a      	lsls	r2, r7, #1
 800cb02:	0d52      	lsrs	r2, r2, #21
 800cb04:	0039      	movs	r1, r7
 800cb06:	1a9b      	subs	r3, r3, r2
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	dd08      	ble.n	800cb1e <_strtod_l+0x652>
 800cb0c:	2b1f      	cmp	r3, #31
 800cb0e:	dc00      	bgt.n	800cb12 <_strtod_l+0x646>
 800cb10:	e121      	b.n	800cd56 <_strtod_l+0x88a>
 800cb12:	2600      	movs	r6, #0
 800cb14:	2b34      	cmp	r3, #52	; 0x34
 800cb16:	dc00      	bgt.n	800cb1a <_strtod_l+0x64e>
 800cb18:	e116      	b.n	800cd48 <_strtod_l+0x87c>
 800cb1a:	27dc      	movs	r7, #220	; 0xdc
 800cb1c:	04bf      	lsls	r7, r7, #18
 800cb1e:	2200      	movs	r2, #0
 800cb20:	2300      	movs	r3, #0
 800cb22:	0030      	movs	r0, r6
 800cb24:	0039      	movs	r1, r7
 800cb26:	f7f3 fc9b 	bl	8000460 <__aeabi_dcmpeq>
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	d19f      	bne.n	800ca6e <_strtod_l+0x5a2>
 800cb2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb30:	9a08      	ldr	r2, [sp, #32]
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cb36:	9b05      	ldr	r3, [sp, #20]
 800cb38:	9804      	ldr	r0, [sp, #16]
 800cb3a:	f002 ff4b 	bl	800f9d4 <__s2b>
 800cb3e:	900d      	str	r0, [sp, #52]	; 0x34
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d100      	bne.n	800cb46 <_strtod_l+0x67a>
 800cb44:	e720      	b.n	800c988 <_strtod_l+0x4bc>
 800cb46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb48:	9906      	ldr	r1, [sp, #24]
 800cb4a:	17da      	asrs	r2, r3, #31
 800cb4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb4e:	1a5b      	subs	r3, r3, r1
 800cb50:	401a      	ands	r2, r3
 800cb52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb54:	9215      	str	r2, [sp, #84]	; 0x54
 800cb56:	43db      	mvns	r3, r3
 800cb58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb5a:	17db      	asrs	r3, r3, #31
 800cb5c:	401a      	ands	r2, r3
 800cb5e:	2300      	movs	r3, #0
 800cb60:	9218      	str	r2, [sp, #96]	; 0x60
 800cb62:	9305      	str	r3, [sp, #20]
 800cb64:	9306      	str	r3, [sp, #24]
 800cb66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb68:	9804      	ldr	r0, [sp, #16]
 800cb6a:	6859      	ldr	r1, [r3, #4]
 800cb6c:	f002 fe86 	bl	800f87c <_Balloc>
 800cb70:	9008      	str	r0, [sp, #32]
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d100      	bne.n	800cb78 <_strtod_l+0x6ac>
 800cb76:	e70c      	b.n	800c992 <_strtod_l+0x4c6>
 800cb78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb7a:	300c      	adds	r0, #12
 800cb7c:	0019      	movs	r1, r3
 800cb7e:	691a      	ldr	r2, [r3, #16]
 800cb80:	310c      	adds	r1, #12
 800cb82:	3202      	adds	r2, #2
 800cb84:	0092      	lsls	r2, r2, #2
 800cb86:	f001 fb55 	bl	800e234 <memcpy>
 800cb8a:	ab1e      	add	r3, sp, #120	; 0x78
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	ab1d      	add	r3, sp, #116	; 0x74
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	0032      	movs	r2, r6
 800cb94:	003b      	movs	r3, r7
 800cb96:	9804      	ldr	r0, [sp, #16]
 800cb98:	9610      	str	r6, [sp, #64]	; 0x40
 800cb9a:	9711      	str	r7, [sp, #68]	; 0x44
 800cb9c:	f003 fa5c 	bl	8010058 <__d2b>
 800cba0:	901c      	str	r0, [sp, #112]	; 0x70
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d100      	bne.n	800cba8 <_strtod_l+0x6dc>
 800cba6:	e6f4      	b.n	800c992 <_strtod_l+0x4c6>
 800cba8:	2101      	movs	r1, #1
 800cbaa:	9804      	ldr	r0, [sp, #16]
 800cbac:	f002 ffa6 	bl	800fafc <__i2b>
 800cbb0:	9006      	str	r0, [sp, #24]
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d100      	bne.n	800cbb8 <_strtod_l+0x6ec>
 800cbb6:	e6ec      	b.n	800c992 <_strtod_l+0x4c6>
 800cbb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cbba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cbbc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cbbe:	1ad4      	subs	r4, r2, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	db01      	blt.n	800cbc8 <_strtod_l+0x6fc>
 800cbc4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800cbc6:	195d      	adds	r5, r3, r5
 800cbc8:	9907      	ldr	r1, [sp, #28]
 800cbca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cbcc:	1a5b      	subs	r3, r3, r1
 800cbce:	2136      	movs	r1, #54	; 0x36
 800cbd0:	189b      	adds	r3, r3, r2
 800cbd2:	1a8a      	subs	r2, r1, r2
 800cbd4:	4985      	ldr	r1, [pc, #532]	; (800cdec <_strtod_l+0x920>)
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	468c      	mov	ip, r1
 800cbda:	2100      	movs	r1, #0
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	9114      	str	r1, [sp, #80]	; 0x50
 800cbe0:	9012      	str	r0, [sp, #72]	; 0x48
 800cbe2:	4563      	cmp	r3, ip
 800cbe4:	da07      	bge.n	800cbf6 <_strtod_l+0x72a>
 800cbe6:	4661      	mov	r1, ip
 800cbe8:	1ac9      	subs	r1, r1, r3
 800cbea:	1a52      	subs	r2, r2, r1
 800cbec:	291f      	cmp	r1, #31
 800cbee:	dd00      	ble.n	800cbf2 <_strtod_l+0x726>
 800cbf0:	e0b6      	b.n	800cd60 <_strtod_l+0x894>
 800cbf2:	4088      	lsls	r0, r1
 800cbf4:	9012      	str	r0, [sp, #72]	; 0x48
 800cbf6:	18ab      	adds	r3, r5, r2
 800cbf8:	930c      	str	r3, [sp, #48]	; 0x30
 800cbfa:	18a4      	adds	r4, r4, r2
 800cbfc:	9b07      	ldr	r3, [sp, #28]
 800cbfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc00:	191c      	adds	r4, r3, r4
 800cc02:	002b      	movs	r3, r5
 800cc04:	4295      	cmp	r5, r2
 800cc06:	dd00      	ble.n	800cc0a <_strtod_l+0x73e>
 800cc08:	0013      	movs	r3, r2
 800cc0a:	42a3      	cmp	r3, r4
 800cc0c:	dd00      	ble.n	800cc10 <_strtod_l+0x744>
 800cc0e:	0023      	movs	r3, r4
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	dd04      	ble.n	800cc1e <_strtod_l+0x752>
 800cc14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc16:	1ae4      	subs	r4, r4, r3
 800cc18:	1ad2      	subs	r2, r2, r3
 800cc1a:	920c      	str	r2, [sp, #48]	; 0x30
 800cc1c:	1aed      	subs	r5, r5, r3
 800cc1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	dd17      	ble.n	800cc54 <_strtod_l+0x788>
 800cc24:	001a      	movs	r2, r3
 800cc26:	9906      	ldr	r1, [sp, #24]
 800cc28:	9804      	ldr	r0, [sp, #16]
 800cc2a:	f003 f82f 	bl	800fc8c <__pow5mult>
 800cc2e:	9006      	str	r0, [sp, #24]
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d100      	bne.n	800cc36 <_strtod_l+0x76a>
 800cc34:	e6ad      	b.n	800c992 <_strtod_l+0x4c6>
 800cc36:	0001      	movs	r1, r0
 800cc38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cc3a:	9804      	ldr	r0, [sp, #16]
 800cc3c:	f002 ff76 	bl	800fb2c <__multiply>
 800cc40:	900e      	str	r0, [sp, #56]	; 0x38
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d100      	bne.n	800cc48 <_strtod_l+0x77c>
 800cc46:	e6a4      	b.n	800c992 <_strtod_l+0x4c6>
 800cc48:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc4a:	9804      	ldr	r0, [sp, #16]
 800cc4c:	f002 fe5a 	bl	800f904 <_Bfree>
 800cc50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc52:	931c      	str	r3, [sp, #112]	; 0x70
 800cc54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	dd00      	ble.n	800cc5c <_strtod_l+0x790>
 800cc5a:	e087      	b.n	800cd6c <_strtod_l+0x8a0>
 800cc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	dd08      	ble.n	800cc74 <_strtod_l+0x7a8>
 800cc62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cc64:	9908      	ldr	r1, [sp, #32]
 800cc66:	9804      	ldr	r0, [sp, #16]
 800cc68:	f003 f810 	bl	800fc8c <__pow5mult>
 800cc6c:	9008      	str	r0, [sp, #32]
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d100      	bne.n	800cc74 <_strtod_l+0x7a8>
 800cc72:	e68e      	b.n	800c992 <_strtod_l+0x4c6>
 800cc74:	2c00      	cmp	r4, #0
 800cc76:	dd08      	ble.n	800cc8a <_strtod_l+0x7be>
 800cc78:	0022      	movs	r2, r4
 800cc7a:	9908      	ldr	r1, [sp, #32]
 800cc7c:	9804      	ldr	r0, [sp, #16]
 800cc7e:	f003 f861 	bl	800fd44 <__lshift>
 800cc82:	9008      	str	r0, [sp, #32]
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d100      	bne.n	800cc8a <_strtod_l+0x7be>
 800cc88:	e683      	b.n	800c992 <_strtod_l+0x4c6>
 800cc8a:	2d00      	cmp	r5, #0
 800cc8c:	dd08      	ble.n	800cca0 <_strtod_l+0x7d4>
 800cc8e:	002a      	movs	r2, r5
 800cc90:	9906      	ldr	r1, [sp, #24]
 800cc92:	9804      	ldr	r0, [sp, #16]
 800cc94:	f003 f856 	bl	800fd44 <__lshift>
 800cc98:	9006      	str	r0, [sp, #24]
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d100      	bne.n	800cca0 <_strtod_l+0x7d4>
 800cc9e:	e678      	b.n	800c992 <_strtod_l+0x4c6>
 800cca0:	9a08      	ldr	r2, [sp, #32]
 800cca2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cca4:	9804      	ldr	r0, [sp, #16]
 800cca6:	f003 f8d7 	bl	800fe58 <__mdiff>
 800ccaa:	9005      	str	r0, [sp, #20]
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d100      	bne.n	800ccb2 <_strtod_l+0x7e6>
 800ccb0:	e66f      	b.n	800c992 <_strtod_l+0x4c6>
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	68c3      	ldr	r3, [r0, #12]
 800ccb6:	9906      	ldr	r1, [sp, #24]
 800ccb8:	60c2      	str	r2, [r0, #12]
 800ccba:	930c      	str	r3, [sp, #48]	; 0x30
 800ccbc:	f003 f8b0 	bl	800fe20 <__mcmp>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	da5d      	bge.n	800cd80 <_strtod_l+0x8b4>
 800ccc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccc6:	4333      	orrs	r3, r6
 800ccc8:	d000      	beq.n	800cccc <_strtod_l+0x800>
 800ccca:	e088      	b.n	800cdde <_strtod_l+0x912>
 800cccc:	033b      	lsls	r3, r7, #12
 800ccce:	d000      	beq.n	800ccd2 <_strtod_l+0x806>
 800ccd0:	e085      	b.n	800cdde <_strtod_l+0x912>
 800ccd2:	22d6      	movs	r2, #214	; 0xd6
 800ccd4:	4b46      	ldr	r3, [pc, #280]	; (800cdf0 <_strtod_l+0x924>)
 800ccd6:	04d2      	lsls	r2, r2, #19
 800ccd8:	403b      	ands	r3, r7
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d97f      	bls.n	800cdde <_strtod_l+0x912>
 800ccde:	9b05      	ldr	r3, [sp, #20]
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d103      	bne.n	800ccee <_strtod_l+0x822>
 800cce6:	9b05      	ldr	r3, [sp, #20]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	dd77      	ble.n	800cdde <_strtod_l+0x912>
 800ccee:	9905      	ldr	r1, [sp, #20]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	9804      	ldr	r0, [sp, #16]
 800ccf4:	f003 f826 	bl	800fd44 <__lshift>
 800ccf8:	9906      	ldr	r1, [sp, #24]
 800ccfa:	9005      	str	r0, [sp, #20]
 800ccfc:	f003 f890 	bl	800fe20 <__mcmp>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	dd6c      	ble.n	800cdde <_strtod_l+0x912>
 800cd04:	9907      	ldr	r1, [sp, #28]
 800cd06:	003b      	movs	r3, r7
 800cd08:	4a39      	ldr	r2, [pc, #228]	; (800cdf0 <_strtod_l+0x924>)
 800cd0a:	2900      	cmp	r1, #0
 800cd0c:	d100      	bne.n	800cd10 <_strtod_l+0x844>
 800cd0e:	e094      	b.n	800ce3a <_strtod_l+0x96e>
 800cd10:	0011      	movs	r1, r2
 800cd12:	20d6      	movs	r0, #214	; 0xd6
 800cd14:	4039      	ands	r1, r7
 800cd16:	04c0      	lsls	r0, r0, #19
 800cd18:	4281      	cmp	r1, r0
 800cd1a:	dd00      	ble.n	800cd1e <_strtod_l+0x852>
 800cd1c:	e08d      	b.n	800ce3a <_strtod_l+0x96e>
 800cd1e:	23dc      	movs	r3, #220	; 0xdc
 800cd20:	049b      	lsls	r3, r3, #18
 800cd22:	4299      	cmp	r1, r3
 800cd24:	dc00      	bgt.n	800cd28 <_strtod_l+0x85c>
 800cd26:	e6a7      	b.n	800ca78 <_strtod_l+0x5ac>
 800cd28:	0030      	movs	r0, r6
 800cd2a:	0039      	movs	r1, r7
 800cd2c:	4b31      	ldr	r3, [pc, #196]	; (800cdf4 <_strtod_l+0x928>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f7f5 fa92 	bl	8002258 <__aeabi_dmul>
 800cd34:	4b2e      	ldr	r3, [pc, #184]	; (800cdf0 <_strtod_l+0x924>)
 800cd36:	0006      	movs	r6, r0
 800cd38:	000f      	movs	r7, r1
 800cd3a:	420b      	tst	r3, r1
 800cd3c:	d000      	beq.n	800cd40 <_strtod_l+0x874>
 800cd3e:	e631      	b.n	800c9a4 <_strtod_l+0x4d8>
 800cd40:	2322      	movs	r3, #34	; 0x22
 800cd42:	9a04      	ldr	r2, [sp, #16]
 800cd44:	6013      	str	r3, [r2, #0]
 800cd46:	e62d      	b.n	800c9a4 <_strtod_l+0x4d8>
 800cd48:	234b      	movs	r3, #75	; 0x4b
 800cd4a:	1a9a      	subs	r2, r3, r2
 800cd4c:	3b4c      	subs	r3, #76	; 0x4c
 800cd4e:	4093      	lsls	r3, r2
 800cd50:	4019      	ands	r1, r3
 800cd52:	000f      	movs	r7, r1
 800cd54:	e6e3      	b.n	800cb1e <_strtod_l+0x652>
 800cd56:	2201      	movs	r2, #1
 800cd58:	4252      	negs	r2, r2
 800cd5a:	409a      	lsls	r2, r3
 800cd5c:	4016      	ands	r6, r2
 800cd5e:	e6de      	b.n	800cb1e <_strtod_l+0x652>
 800cd60:	4925      	ldr	r1, [pc, #148]	; (800cdf8 <_strtod_l+0x92c>)
 800cd62:	1acb      	subs	r3, r1, r3
 800cd64:	0001      	movs	r1, r0
 800cd66:	4099      	lsls	r1, r3
 800cd68:	9114      	str	r1, [sp, #80]	; 0x50
 800cd6a:	e743      	b.n	800cbf4 <_strtod_l+0x728>
 800cd6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd70:	9804      	ldr	r0, [sp, #16]
 800cd72:	f002 ffe7 	bl	800fd44 <__lshift>
 800cd76:	901c      	str	r0, [sp, #112]	; 0x70
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d000      	beq.n	800cd7e <_strtod_l+0x8b2>
 800cd7c:	e76e      	b.n	800cc5c <_strtod_l+0x790>
 800cd7e:	e608      	b.n	800c992 <_strtod_l+0x4c6>
 800cd80:	970e      	str	r7, [sp, #56]	; 0x38
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d177      	bne.n	800ce76 <_strtod_l+0x9aa>
 800cd86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd88:	033b      	lsls	r3, r7, #12
 800cd8a:	0b1b      	lsrs	r3, r3, #12
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	d039      	beq.n	800ce04 <_strtod_l+0x938>
 800cd90:	4a1a      	ldr	r2, [pc, #104]	; (800cdfc <_strtod_l+0x930>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d139      	bne.n	800ce0a <_strtod_l+0x93e>
 800cd96:	2101      	movs	r1, #1
 800cd98:	9b07      	ldr	r3, [sp, #28]
 800cd9a:	4249      	negs	r1, r1
 800cd9c:	0032      	movs	r2, r6
 800cd9e:	0008      	movs	r0, r1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00b      	beq.n	800cdbc <_strtod_l+0x8f0>
 800cda4:	24d4      	movs	r4, #212	; 0xd4
 800cda6:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <_strtod_l+0x924>)
 800cda8:	0008      	movs	r0, r1
 800cdaa:	403b      	ands	r3, r7
 800cdac:	04e4      	lsls	r4, r4, #19
 800cdae:	42a3      	cmp	r3, r4
 800cdb0:	d804      	bhi.n	800cdbc <_strtod_l+0x8f0>
 800cdb2:	306c      	adds	r0, #108	; 0x6c
 800cdb4:	0d1b      	lsrs	r3, r3, #20
 800cdb6:	1ac3      	subs	r3, r0, r3
 800cdb8:	4099      	lsls	r1, r3
 800cdba:	0008      	movs	r0, r1
 800cdbc:	4282      	cmp	r2, r0
 800cdbe:	d124      	bne.n	800ce0a <_strtod_l+0x93e>
 800cdc0:	4b0f      	ldr	r3, [pc, #60]	; (800ce00 <_strtod_l+0x934>)
 800cdc2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cdc4:	4299      	cmp	r1, r3
 800cdc6:	d102      	bne.n	800cdce <_strtod_l+0x902>
 800cdc8:	3201      	adds	r2, #1
 800cdca:	d100      	bne.n	800cdce <_strtod_l+0x902>
 800cdcc:	e5e1      	b.n	800c992 <_strtod_l+0x4c6>
 800cdce:	4b08      	ldr	r3, [pc, #32]	; (800cdf0 <_strtod_l+0x924>)
 800cdd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdd2:	2600      	movs	r6, #0
 800cdd4:	401a      	ands	r2, r3
 800cdd6:	0013      	movs	r3, r2
 800cdd8:	2280      	movs	r2, #128	; 0x80
 800cdda:	0352      	lsls	r2, r2, #13
 800cddc:	189f      	adds	r7, r3, r2
 800cdde:	9b07      	ldr	r3, [sp, #28]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1a1      	bne.n	800cd28 <_strtod_l+0x85c>
 800cde4:	e5de      	b.n	800c9a4 <_strtod_l+0x4d8>
 800cde6:	46c0      	nop			; (mov r8, r8)
 800cde8:	08011188 	.word	0x08011188
 800cdec:	fffffc02 	.word	0xfffffc02
 800cdf0:	7ff00000 	.word	0x7ff00000
 800cdf4:	39500000 	.word	0x39500000
 800cdf8:	fffffbe2 	.word	0xfffffbe2
 800cdfc:	000fffff 	.word	0x000fffff
 800ce00:	7fefffff 	.word	0x7fefffff
 800ce04:	4333      	orrs	r3, r6
 800ce06:	d100      	bne.n	800ce0a <_strtod_l+0x93e>
 800ce08:	e77c      	b.n	800cd04 <_strtod_l+0x838>
 800ce0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d01d      	beq.n	800ce4c <_strtod_l+0x980>
 800ce10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce14:	4213      	tst	r3, r2
 800ce16:	d0e2      	beq.n	800cdde <_strtod_l+0x912>
 800ce18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce1a:	0030      	movs	r0, r6
 800ce1c:	0039      	movs	r1, r7
 800ce1e:	9a07      	ldr	r2, [sp, #28]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d017      	beq.n	800ce54 <_strtod_l+0x988>
 800ce24:	f7ff fb3a 	bl	800c49c <sulp>
 800ce28:	0002      	movs	r2, r0
 800ce2a:	000b      	movs	r3, r1
 800ce2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce30:	f7f4 fab8 	bl	80013a4 <__aeabi_dadd>
 800ce34:	0006      	movs	r6, r0
 800ce36:	000f      	movs	r7, r1
 800ce38:	e7d1      	b.n	800cdde <_strtod_l+0x912>
 800ce3a:	2601      	movs	r6, #1
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	4a98      	ldr	r2, [pc, #608]	; (800d0a0 <_strtod_l+0xbd4>)
 800ce40:	4276      	negs	r6, r6
 800ce42:	189b      	adds	r3, r3, r2
 800ce44:	4a97      	ldr	r2, [pc, #604]	; (800d0a4 <_strtod_l+0xbd8>)
 800ce46:	431a      	orrs	r2, r3
 800ce48:	0017      	movs	r7, r2
 800ce4a:	e7c8      	b.n	800cdde <_strtod_l+0x912>
 800ce4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce4e:	4233      	tst	r3, r6
 800ce50:	d0c5      	beq.n	800cdde <_strtod_l+0x912>
 800ce52:	e7e1      	b.n	800ce18 <_strtod_l+0x94c>
 800ce54:	f7ff fb22 	bl	800c49c <sulp>
 800ce58:	0002      	movs	r2, r0
 800ce5a:	000b      	movs	r3, r1
 800ce5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce60:	f7f5 fcbc 	bl	80027dc <__aeabi_dsub>
 800ce64:	2200      	movs	r2, #0
 800ce66:	2300      	movs	r3, #0
 800ce68:	0006      	movs	r6, r0
 800ce6a:	000f      	movs	r7, r1
 800ce6c:	f7f3 faf8 	bl	8000460 <__aeabi_dcmpeq>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d0b4      	beq.n	800cdde <_strtod_l+0x912>
 800ce74:	e600      	b.n	800ca78 <_strtod_l+0x5ac>
 800ce76:	9906      	ldr	r1, [sp, #24]
 800ce78:	9805      	ldr	r0, [sp, #20]
 800ce7a:	f003 f94d 	bl	8010118 <__ratio>
 800ce7e:	2380      	movs	r3, #128	; 0x80
 800ce80:	2200      	movs	r2, #0
 800ce82:	05db      	lsls	r3, r3, #23
 800ce84:	0004      	movs	r4, r0
 800ce86:	000d      	movs	r5, r1
 800ce88:	f7f3 fafa 	bl	8000480 <__aeabi_dcmple>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d06d      	beq.n	800cf6c <_strtod_l+0xaa0>
 800ce90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d000      	beq.n	800ce98 <_strtod_l+0x9cc>
 800ce96:	e07e      	b.n	800cf96 <_strtod_l+0xaca>
 800ce98:	2e00      	cmp	r6, #0
 800ce9a:	d158      	bne.n	800cf4e <_strtod_l+0xa82>
 800ce9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce9e:	031b      	lsls	r3, r3, #12
 800cea0:	d000      	beq.n	800cea4 <_strtod_l+0x9d8>
 800cea2:	e07f      	b.n	800cfa4 <_strtod_l+0xad8>
 800cea4:	2200      	movs	r2, #0
 800cea6:	0020      	movs	r0, r4
 800cea8:	0029      	movs	r1, r5
 800ceaa:	4b7f      	ldr	r3, [pc, #508]	; (800d0a8 <_strtod_l+0xbdc>)
 800ceac:	f7f3 fade 	bl	800046c <__aeabi_dcmplt>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d158      	bne.n	800cf66 <_strtod_l+0xa9a>
 800ceb4:	0020      	movs	r0, r4
 800ceb6:	0029      	movs	r1, r5
 800ceb8:	2200      	movs	r2, #0
 800ceba:	4b7c      	ldr	r3, [pc, #496]	; (800d0ac <_strtod_l+0xbe0>)
 800cebc:	f7f5 f9cc 	bl	8002258 <__aeabi_dmul>
 800cec0:	0004      	movs	r4, r0
 800cec2:	000d      	movs	r5, r1
 800cec4:	2380      	movs	r3, #128	; 0x80
 800cec6:	061b      	lsls	r3, r3, #24
 800cec8:	940a      	str	r4, [sp, #40]	; 0x28
 800ceca:	18eb      	adds	r3, r5, r3
 800cecc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ced0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ced2:	9212      	str	r2, [sp, #72]	; 0x48
 800ced4:	9313      	str	r3, [sp, #76]	; 0x4c
 800ced6:	4a76      	ldr	r2, [pc, #472]	; (800d0b0 <_strtod_l+0xbe4>)
 800ced8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ceda:	4013      	ands	r3, r2
 800cedc:	9314      	str	r3, [sp, #80]	; 0x50
 800cede:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cee0:	4b74      	ldr	r3, [pc, #464]	; (800d0b4 <_strtod_l+0xbe8>)
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d000      	beq.n	800cee8 <_strtod_l+0xa1c>
 800cee6:	e091      	b.n	800d00c <_strtod_l+0xb40>
 800cee8:	4a73      	ldr	r2, [pc, #460]	; (800d0b8 <_strtod_l+0xbec>)
 800ceea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ceec:	4694      	mov	ip, r2
 800ceee:	4463      	add	r3, ip
 800cef0:	001f      	movs	r7, r3
 800cef2:	0030      	movs	r0, r6
 800cef4:	0019      	movs	r1, r3
 800cef6:	f003 f847 	bl	800ff88 <__ulp>
 800cefa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cefc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cefe:	f7f5 f9ab 	bl	8002258 <__aeabi_dmul>
 800cf02:	0032      	movs	r2, r6
 800cf04:	003b      	movs	r3, r7
 800cf06:	f7f4 fa4d 	bl	80013a4 <__aeabi_dadd>
 800cf0a:	4a69      	ldr	r2, [pc, #420]	; (800d0b0 <_strtod_l+0xbe4>)
 800cf0c:	4b6b      	ldr	r3, [pc, #428]	; (800d0bc <_strtod_l+0xbf0>)
 800cf0e:	0006      	movs	r6, r0
 800cf10:	400a      	ands	r2, r1
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d949      	bls.n	800cfaa <_strtod_l+0xade>
 800cf16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf18:	4b69      	ldr	r3, [pc, #420]	; (800d0c0 <_strtod_l+0xbf4>)
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d103      	bne.n	800cf26 <_strtod_l+0xa5a>
 800cf1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf20:	3301      	adds	r3, #1
 800cf22:	d100      	bne.n	800cf26 <_strtod_l+0xa5a>
 800cf24:	e535      	b.n	800c992 <_strtod_l+0x4c6>
 800cf26:	2601      	movs	r6, #1
 800cf28:	4f65      	ldr	r7, [pc, #404]	; (800d0c0 <_strtod_l+0xbf4>)
 800cf2a:	4276      	negs	r6, r6
 800cf2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cf2e:	9804      	ldr	r0, [sp, #16]
 800cf30:	f002 fce8 	bl	800f904 <_Bfree>
 800cf34:	9908      	ldr	r1, [sp, #32]
 800cf36:	9804      	ldr	r0, [sp, #16]
 800cf38:	f002 fce4 	bl	800f904 <_Bfree>
 800cf3c:	9906      	ldr	r1, [sp, #24]
 800cf3e:	9804      	ldr	r0, [sp, #16]
 800cf40:	f002 fce0 	bl	800f904 <_Bfree>
 800cf44:	9905      	ldr	r1, [sp, #20]
 800cf46:	9804      	ldr	r0, [sp, #16]
 800cf48:	f002 fcdc 	bl	800f904 <_Bfree>
 800cf4c:	e60b      	b.n	800cb66 <_strtod_l+0x69a>
 800cf4e:	2e01      	cmp	r6, #1
 800cf50:	d103      	bne.n	800cf5a <_strtod_l+0xa8e>
 800cf52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d100      	bne.n	800cf5a <_strtod_l+0xa8e>
 800cf58:	e58e      	b.n	800ca78 <_strtod_l+0x5ac>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	4c59      	ldr	r4, [pc, #356]	; (800d0c4 <_strtod_l+0xbf8>)
 800cf5e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf60:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cf64:	e01c      	b.n	800cfa0 <_strtod_l+0xad4>
 800cf66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cf68:	4d50      	ldr	r5, [pc, #320]	; (800d0ac <_strtod_l+0xbe0>)
 800cf6a:	e7ab      	b.n	800cec4 <_strtod_l+0x9f8>
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	0020      	movs	r0, r4
 800cf70:	0029      	movs	r1, r5
 800cf72:	4b4e      	ldr	r3, [pc, #312]	; (800d0ac <_strtod_l+0xbe0>)
 800cf74:	f7f5 f970 	bl	8002258 <__aeabi_dmul>
 800cf78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf7a:	0004      	movs	r4, r0
 800cf7c:	000b      	movs	r3, r1
 800cf7e:	000d      	movs	r5, r1
 800cf80:	2a00      	cmp	r2, #0
 800cf82:	d104      	bne.n	800cf8e <_strtod_l+0xac2>
 800cf84:	2280      	movs	r2, #128	; 0x80
 800cf86:	0612      	lsls	r2, r2, #24
 800cf88:	900a      	str	r0, [sp, #40]	; 0x28
 800cf8a:	188b      	adds	r3, r1, r2
 800cf8c:	e79e      	b.n	800cecc <_strtod_l+0xa00>
 800cf8e:	0002      	movs	r2, r0
 800cf90:	920a      	str	r2, [sp, #40]	; 0x28
 800cf92:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf94:	e79b      	b.n	800cece <_strtod_l+0xa02>
 800cf96:	2300      	movs	r3, #0
 800cf98:	4c43      	ldr	r4, [pc, #268]	; (800d0a8 <_strtod_l+0xbdc>)
 800cf9a:	930a      	str	r3, [sp, #40]	; 0x28
 800cf9c:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf9e:	2400      	movs	r4, #0
 800cfa0:	4d41      	ldr	r5, [pc, #260]	; (800d0a8 <_strtod_l+0xbdc>)
 800cfa2:	e794      	b.n	800cece <_strtod_l+0xa02>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4c47      	ldr	r4, [pc, #284]	; (800d0c4 <_strtod_l+0xbf8>)
 800cfa8:	e7f7      	b.n	800cf9a <_strtod_l+0xace>
 800cfaa:	23d4      	movs	r3, #212	; 0xd4
 800cfac:	049b      	lsls	r3, r3, #18
 800cfae:	18cf      	adds	r7, r1, r3
 800cfb0:	9b07      	ldr	r3, [sp, #28]
 800cfb2:	970e      	str	r7, [sp, #56]	; 0x38
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1b9      	bne.n	800cf2c <_strtod_l+0xa60>
 800cfb8:	4b3d      	ldr	r3, [pc, #244]	; (800d0b0 <_strtod_l+0xbe4>)
 800cfba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cfbc:	403b      	ands	r3, r7
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d1b4      	bne.n	800cf2c <_strtod_l+0xa60>
 800cfc2:	0020      	movs	r0, r4
 800cfc4:	0029      	movs	r1, r5
 800cfc6:	f7f3 fad1 	bl	800056c <__aeabi_d2lz>
 800cfca:	f7f3 fb0b 	bl	80005e4 <__aeabi_l2d>
 800cfce:	0002      	movs	r2, r0
 800cfd0:	000b      	movs	r3, r1
 800cfd2:	0020      	movs	r0, r4
 800cfd4:	0029      	movs	r1, r5
 800cfd6:	f7f5 fc01 	bl	80027dc <__aeabi_dsub>
 800cfda:	033b      	lsls	r3, r7, #12
 800cfdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfde:	0b1b      	lsrs	r3, r3, #12
 800cfe0:	4333      	orrs	r3, r6
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	0004      	movs	r4, r0
 800cfe6:	000d      	movs	r5, r1
 800cfe8:	4a37      	ldr	r2, [pc, #220]	; (800d0c8 <_strtod_l+0xbfc>)
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d054      	beq.n	800d098 <_strtod_l+0xbcc>
 800cfee:	4b37      	ldr	r3, [pc, #220]	; (800d0cc <_strtod_l+0xc00>)
 800cff0:	f7f3 fa3c 	bl	800046c <__aeabi_dcmplt>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d000      	beq.n	800cffa <_strtod_l+0xb2e>
 800cff8:	e4d4      	b.n	800c9a4 <_strtod_l+0x4d8>
 800cffa:	0020      	movs	r0, r4
 800cffc:	0029      	movs	r1, r5
 800cffe:	4a34      	ldr	r2, [pc, #208]	; (800d0d0 <_strtod_l+0xc04>)
 800d000:	4b2a      	ldr	r3, [pc, #168]	; (800d0ac <_strtod_l+0xbe0>)
 800d002:	f7f3 fa47 	bl	8000494 <__aeabi_dcmpgt>
 800d006:	2800      	cmp	r0, #0
 800d008:	d090      	beq.n	800cf2c <_strtod_l+0xa60>
 800d00a:	e4cb      	b.n	800c9a4 <_strtod_l+0x4d8>
 800d00c:	9b07      	ldr	r3, [sp, #28]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d02b      	beq.n	800d06a <_strtod_l+0xb9e>
 800d012:	23d4      	movs	r3, #212	; 0xd4
 800d014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d016:	04db      	lsls	r3, r3, #19
 800d018:	429a      	cmp	r2, r3
 800d01a:	d826      	bhi.n	800d06a <_strtod_l+0xb9e>
 800d01c:	0020      	movs	r0, r4
 800d01e:	0029      	movs	r1, r5
 800d020:	4a2c      	ldr	r2, [pc, #176]	; (800d0d4 <_strtod_l+0xc08>)
 800d022:	4b2d      	ldr	r3, [pc, #180]	; (800d0d8 <_strtod_l+0xc0c>)
 800d024:	f7f3 fa2c 	bl	8000480 <__aeabi_dcmple>
 800d028:	2800      	cmp	r0, #0
 800d02a:	d017      	beq.n	800d05c <_strtod_l+0xb90>
 800d02c:	0020      	movs	r0, r4
 800d02e:	0029      	movs	r1, r5
 800d030:	f7f3 fa7e 	bl	8000530 <__aeabi_d2uiz>
 800d034:	2800      	cmp	r0, #0
 800d036:	d100      	bne.n	800d03a <_strtod_l+0xb6e>
 800d038:	3001      	adds	r0, #1
 800d03a:	f7f5 ffd5 	bl	8002fe8 <__aeabi_ui2d>
 800d03e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d040:	0004      	movs	r4, r0
 800d042:	000b      	movs	r3, r1
 800d044:	000d      	movs	r5, r1
 800d046:	2a00      	cmp	r2, #0
 800d048:	d122      	bne.n	800d090 <_strtod_l+0xbc4>
 800d04a:	2280      	movs	r2, #128	; 0x80
 800d04c:	0612      	lsls	r2, r2, #24
 800d04e:	188b      	adds	r3, r1, r2
 800d050:	9016      	str	r0, [sp, #88]	; 0x58
 800d052:	9317      	str	r3, [sp, #92]	; 0x5c
 800d054:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d058:	9212      	str	r2, [sp, #72]	; 0x48
 800d05a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d05c:	22d6      	movs	r2, #214	; 0xd6
 800d05e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d060:	04d2      	lsls	r2, r2, #19
 800d062:	189b      	adds	r3, r3, r2
 800d064:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d066:	1a9b      	subs	r3, r3, r2
 800d068:	9313      	str	r3, [sp, #76]	; 0x4c
 800d06a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d06c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d06e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d070:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d072:	f002 ff89 	bl	800ff88 <__ulp>
 800d076:	0002      	movs	r2, r0
 800d078:	000b      	movs	r3, r1
 800d07a:	0030      	movs	r0, r6
 800d07c:	0039      	movs	r1, r7
 800d07e:	f7f5 f8eb 	bl	8002258 <__aeabi_dmul>
 800d082:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d086:	f7f4 f98d 	bl	80013a4 <__aeabi_dadd>
 800d08a:	0006      	movs	r6, r0
 800d08c:	000f      	movs	r7, r1
 800d08e:	e78f      	b.n	800cfb0 <_strtod_l+0xae4>
 800d090:	0002      	movs	r2, r0
 800d092:	9216      	str	r2, [sp, #88]	; 0x58
 800d094:	9317      	str	r3, [sp, #92]	; 0x5c
 800d096:	e7dd      	b.n	800d054 <_strtod_l+0xb88>
 800d098:	4b10      	ldr	r3, [pc, #64]	; (800d0dc <_strtod_l+0xc10>)
 800d09a:	f7f3 f9e7 	bl	800046c <__aeabi_dcmplt>
 800d09e:	e7b2      	b.n	800d006 <_strtod_l+0xb3a>
 800d0a0:	fff00000 	.word	0xfff00000
 800d0a4:	000fffff 	.word	0x000fffff
 800d0a8:	3ff00000 	.word	0x3ff00000
 800d0ac:	3fe00000 	.word	0x3fe00000
 800d0b0:	7ff00000 	.word	0x7ff00000
 800d0b4:	7fe00000 	.word	0x7fe00000
 800d0b8:	fcb00000 	.word	0xfcb00000
 800d0bc:	7c9fffff 	.word	0x7c9fffff
 800d0c0:	7fefffff 	.word	0x7fefffff
 800d0c4:	bff00000 	.word	0xbff00000
 800d0c8:	94a03595 	.word	0x94a03595
 800d0cc:	3fdfffff 	.word	0x3fdfffff
 800d0d0:	35afe535 	.word	0x35afe535
 800d0d4:	ffc00000 	.word	0xffc00000
 800d0d8:	41dfffff 	.word	0x41dfffff
 800d0dc:	3fcfffff 	.word	0x3fcfffff

0800d0e0 <strtod>:
 800d0e0:	b510      	push	{r4, lr}
 800d0e2:	4c04      	ldr	r4, [pc, #16]	; (800d0f4 <strtod+0x14>)
 800d0e4:	000a      	movs	r2, r1
 800d0e6:	0001      	movs	r1, r0
 800d0e8:	4b03      	ldr	r3, [pc, #12]	; (800d0f8 <strtod+0x18>)
 800d0ea:	6820      	ldr	r0, [r4, #0]
 800d0ec:	f7ff f9ee 	bl	800c4cc <_strtod_l>
 800d0f0:	bd10      	pop	{r4, pc}
 800d0f2:	46c0      	nop			; (mov r8, r8)
 800d0f4:	200001ec 	.word	0x200001ec
 800d0f8:	20000034 	.word	0x20000034

0800d0fc <_strtol_l.constprop.0>:
 800d0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0fe:	b087      	sub	sp, #28
 800d100:	001e      	movs	r6, r3
 800d102:	9005      	str	r0, [sp, #20]
 800d104:	9101      	str	r1, [sp, #4]
 800d106:	9202      	str	r2, [sp, #8]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d048      	beq.n	800d19e <_strtol_l.constprop.0+0xa2>
 800d10c:	000b      	movs	r3, r1
 800d10e:	2e24      	cmp	r6, #36	; 0x24
 800d110:	d845      	bhi.n	800d19e <_strtol_l.constprop.0+0xa2>
 800d112:	4a3b      	ldr	r2, [pc, #236]	; (800d200 <_strtol_l.constprop.0+0x104>)
 800d114:	2108      	movs	r1, #8
 800d116:	4694      	mov	ip, r2
 800d118:	001a      	movs	r2, r3
 800d11a:	4660      	mov	r0, ip
 800d11c:	7814      	ldrb	r4, [r2, #0]
 800d11e:	3301      	adds	r3, #1
 800d120:	5d00      	ldrb	r0, [r0, r4]
 800d122:	001d      	movs	r5, r3
 800d124:	0007      	movs	r7, r0
 800d126:	400f      	ands	r7, r1
 800d128:	4208      	tst	r0, r1
 800d12a:	d1f5      	bne.n	800d118 <_strtol_l.constprop.0+0x1c>
 800d12c:	2c2d      	cmp	r4, #45	; 0x2d
 800d12e:	d13d      	bne.n	800d1ac <_strtol_l.constprop.0+0xb0>
 800d130:	2701      	movs	r7, #1
 800d132:	781c      	ldrb	r4, [r3, #0]
 800d134:	1c95      	adds	r5, r2, #2
 800d136:	2e00      	cmp	r6, #0
 800d138:	d05e      	beq.n	800d1f8 <_strtol_l.constprop.0+0xfc>
 800d13a:	2e10      	cmp	r6, #16
 800d13c:	d109      	bne.n	800d152 <_strtol_l.constprop.0+0x56>
 800d13e:	2c30      	cmp	r4, #48	; 0x30
 800d140:	d107      	bne.n	800d152 <_strtol_l.constprop.0+0x56>
 800d142:	2220      	movs	r2, #32
 800d144:	782b      	ldrb	r3, [r5, #0]
 800d146:	4393      	bics	r3, r2
 800d148:	2b58      	cmp	r3, #88	; 0x58
 800d14a:	d150      	bne.n	800d1ee <_strtol_l.constprop.0+0xf2>
 800d14c:	2610      	movs	r6, #16
 800d14e:	786c      	ldrb	r4, [r5, #1]
 800d150:	3502      	adds	r5, #2
 800d152:	4b2c      	ldr	r3, [pc, #176]	; (800d204 <_strtol_l.constprop.0+0x108>)
 800d154:	0031      	movs	r1, r6
 800d156:	18fb      	adds	r3, r7, r3
 800d158:	0018      	movs	r0, r3
 800d15a:	9303      	str	r3, [sp, #12]
 800d15c:	f7f3 f880 	bl	8000260 <__aeabi_uidivmod>
 800d160:	2200      	movs	r2, #0
 800d162:	9104      	str	r1, [sp, #16]
 800d164:	2101      	movs	r1, #1
 800d166:	4684      	mov	ip, r0
 800d168:	0010      	movs	r0, r2
 800d16a:	4249      	negs	r1, r1
 800d16c:	0023      	movs	r3, r4
 800d16e:	3b30      	subs	r3, #48	; 0x30
 800d170:	2b09      	cmp	r3, #9
 800d172:	d903      	bls.n	800d17c <_strtol_l.constprop.0+0x80>
 800d174:	3b11      	subs	r3, #17
 800d176:	2b19      	cmp	r3, #25
 800d178:	d81d      	bhi.n	800d1b6 <_strtol_l.constprop.0+0xba>
 800d17a:	330a      	adds	r3, #10
 800d17c:	429e      	cmp	r6, r3
 800d17e:	dd1e      	ble.n	800d1be <_strtol_l.constprop.0+0xc2>
 800d180:	1c54      	adds	r4, r2, #1
 800d182:	d009      	beq.n	800d198 <_strtol_l.constprop.0+0x9c>
 800d184:	000a      	movs	r2, r1
 800d186:	4584      	cmp	ip, r0
 800d188:	d306      	bcc.n	800d198 <_strtol_l.constprop.0+0x9c>
 800d18a:	d102      	bne.n	800d192 <_strtol_l.constprop.0+0x96>
 800d18c:	9c04      	ldr	r4, [sp, #16]
 800d18e:	429c      	cmp	r4, r3
 800d190:	db02      	blt.n	800d198 <_strtol_l.constprop.0+0x9c>
 800d192:	2201      	movs	r2, #1
 800d194:	4370      	muls	r0, r6
 800d196:	1818      	adds	r0, r3, r0
 800d198:	782c      	ldrb	r4, [r5, #0]
 800d19a:	3501      	adds	r5, #1
 800d19c:	e7e6      	b.n	800d16c <_strtol_l.constprop.0+0x70>
 800d19e:	f001 f811 	bl	800e1c4 <__errno>
 800d1a2:	2316      	movs	r3, #22
 800d1a4:	6003      	str	r3, [r0, #0]
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	b007      	add	sp, #28
 800d1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ac:	2c2b      	cmp	r4, #43	; 0x2b
 800d1ae:	d1c2      	bne.n	800d136 <_strtol_l.constprop.0+0x3a>
 800d1b0:	781c      	ldrb	r4, [r3, #0]
 800d1b2:	1c95      	adds	r5, r2, #2
 800d1b4:	e7bf      	b.n	800d136 <_strtol_l.constprop.0+0x3a>
 800d1b6:	0023      	movs	r3, r4
 800d1b8:	3b61      	subs	r3, #97	; 0x61
 800d1ba:	2b19      	cmp	r3, #25
 800d1bc:	d9dd      	bls.n	800d17a <_strtol_l.constprop.0+0x7e>
 800d1be:	1c53      	adds	r3, r2, #1
 800d1c0:	d109      	bne.n	800d1d6 <_strtol_l.constprop.0+0xda>
 800d1c2:	2322      	movs	r3, #34	; 0x22
 800d1c4:	9a05      	ldr	r2, [sp, #20]
 800d1c6:	9803      	ldr	r0, [sp, #12]
 800d1c8:	6013      	str	r3, [r2, #0]
 800d1ca:	9b02      	ldr	r3, [sp, #8]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d0eb      	beq.n	800d1a8 <_strtol_l.constprop.0+0xac>
 800d1d0:	1e6b      	subs	r3, r5, #1
 800d1d2:	9301      	str	r3, [sp, #4]
 800d1d4:	e007      	b.n	800d1e6 <_strtol_l.constprop.0+0xea>
 800d1d6:	2f00      	cmp	r7, #0
 800d1d8:	d000      	beq.n	800d1dc <_strtol_l.constprop.0+0xe0>
 800d1da:	4240      	negs	r0, r0
 800d1dc:	9b02      	ldr	r3, [sp, #8]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d0e2      	beq.n	800d1a8 <_strtol_l.constprop.0+0xac>
 800d1e2:	2a00      	cmp	r2, #0
 800d1e4:	d1f4      	bne.n	800d1d0 <_strtol_l.constprop.0+0xd4>
 800d1e6:	9b02      	ldr	r3, [sp, #8]
 800d1e8:	9a01      	ldr	r2, [sp, #4]
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	e7dc      	b.n	800d1a8 <_strtol_l.constprop.0+0xac>
 800d1ee:	2430      	movs	r4, #48	; 0x30
 800d1f0:	2e00      	cmp	r6, #0
 800d1f2:	d1ae      	bne.n	800d152 <_strtol_l.constprop.0+0x56>
 800d1f4:	3608      	adds	r6, #8
 800d1f6:	e7ac      	b.n	800d152 <_strtol_l.constprop.0+0x56>
 800d1f8:	2c30      	cmp	r4, #48	; 0x30
 800d1fa:	d0a2      	beq.n	800d142 <_strtol_l.constprop.0+0x46>
 800d1fc:	260a      	movs	r6, #10
 800d1fe:	e7a8      	b.n	800d152 <_strtol_l.constprop.0+0x56>
 800d200:	080111b1 	.word	0x080111b1
 800d204:	7fffffff 	.word	0x7fffffff

0800d208 <strtol>:
 800d208:	b510      	push	{r4, lr}
 800d20a:	4c04      	ldr	r4, [pc, #16]	; (800d21c <strtol+0x14>)
 800d20c:	0013      	movs	r3, r2
 800d20e:	000a      	movs	r2, r1
 800d210:	0001      	movs	r1, r0
 800d212:	6820      	ldr	r0, [r4, #0]
 800d214:	f7ff ff72 	bl	800d0fc <_strtol_l.constprop.0>
 800d218:	bd10      	pop	{r4, pc}
 800d21a:	46c0      	nop			; (mov r8, r8)
 800d21c:	200001ec 	.word	0x200001ec

0800d220 <_strtoul_l.constprop.0>:
 800d220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d222:	b087      	sub	sp, #28
 800d224:	9202      	str	r2, [sp, #8]
 800d226:	4a3e      	ldr	r2, [pc, #248]	; (800d320 <_strtoul_l.constprop.0+0x100>)
 800d228:	001e      	movs	r6, r3
 800d22a:	9101      	str	r1, [sp, #4]
 800d22c:	000b      	movs	r3, r1
 800d22e:	4694      	mov	ip, r2
 800d230:	2108      	movs	r1, #8
 800d232:	9005      	str	r0, [sp, #20]
 800d234:	001a      	movs	r2, r3
 800d236:	4660      	mov	r0, ip
 800d238:	7814      	ldrb	r4, [r2, #0]
 800d23a:	3301      	adds	r3, #1
 800d23c:	5d00      	ldrb	r0, [r0, r4]
 800d23e:	001d      	movs	r5, r3
 800d240:	0007      	movs	r7, r0
 800d242:	400f      	ands	r7, r1
 800d244:	4208      	tst	r0, r1
 800d246:	d1f5      	bne.n	800d234 <_strtoul_l.constprop.0+0x14>
 800d248:	2c2d      	cmp	r4, #45	; 0x2d
 800d24a:	d13d      	bne.n	800d2c8 <_strtoul_l.constprop.0+0xa8>
 800d24c:	2701      	movs	r7, #1
 800d24e:	781c      	ldrb	r4, [r3, #0]
 800d250:	1c95      	adds	r5, r2, #2
 800d252:	2e00      	cmp	r6, #0
 800d254:	d05f      	beq.n	800d316 <_strtoul_l.constprop.0+0xf6>
 800d256:	2e10      	cmp	r6, #16
 800d258:	d109      	bne.n	800d26e <_strtoul_l.constprop.0+0x4e>
 800d25a:	2c30      	cmp	r4, #48	; 0x30
 800d25c:	d107      	bne.n	800d26e <_strtoul_l.constprop.0+0x4e>
 800d25e:	2220      	movs	r2, #32
 800d260:	782b      	ldrb	r3, [r5, #0]
 800d262:	4393      	bics	r3, r2
 800d264:	2b58      	cmp	r3, #88	; 0x58
 800d266:	d151      	bne.n	800d30c <_strtoul_l.constprop.0+0xec>
 800d268:	2610      	movs	r6, #16
 800d26a:	786c      	ldrb	r4, [r5, #1]
 800d26c:	3502      	adds	r5, #2
 800d26e:	2001      	movs	r0, #1
 800d270:	0031      	movs	r1, r6
 800d272:	4240      	negs	r0, r0
 800d274:	f7f2 ff6e 	bl	8000154 <__udivsi3>
 800d278:	9003      	str	r0, [sp, #12]
 800d27a:	2001      	movs	r0, #1
 800d27c:	0031      	movs	r1, r6
 800d27e:	4240      	negs	r0, r0
 800d280:	f7f2 ffee 	bl	8000260 <__aeabi_uidivmod>
 800d284:	2300      	movs	r3, #0
 800d286:	2201      	movs	r2, #1
 800d288:	9104      	str	r1, [sp, #16]
 800d28a:	2101      	movs	r1, #1
 800d28c:	0018      	movs	r0, r3
 800d28e:	4694      	mov	ip, r2
 800d290:	4249      	negs	r1, r1
 800d292:	0022      	movs	r2, r4
 800d294:	3a30      	subs	r2, #48	; 0x30
 800d296:	2a09      	cmp	r2, #9
 800d298:	d903      	bls.n	800d2a2 <_strtoul_l.constprop.0+0x82>
 800d29a:	3a11      	subs	r2, #17
 800d29c:	2a19      	cmp	r2, #25
 800d29e:	d818      	bhi.n	800d2d2 <_strtoul_l.constprop.0+0xb2>
 800d2a0:	320a      	adds	r2, #10
 800d2a2:	4296      	cmp	r6, r2
 800d2a4:	dd19      	ble.n	800d2da <_strtoul_l.constprop.0+0xba>
 800d2a6:	1c5c      	adds	r4, r3, #1
 800d2a8:	d00b      	beq.n	800d2c2 <_strtoul_l.constprop.0+0xa2>
 800d2aa:	9c03      	ldr	r4, [sp, #12]
 800d2ac:	000b      	movs	r3, r1
 800d2ae:	4284      	cmp	r4, r0
 800d2b0:	d307      	bcc.n	800d2c2 <_strtoul_l.constprop.0+0xa2>
 800d2b2:	d103      	bne.n	800d2bc <_strtoul_l.constprop.0+0x9c>
 800d2b4:	9c04      	ldr	r4, [sp, #16]
 800d2b6:	000b      	movs	r3, r1
 800d2b8:	4294      	cmp	r4, r2
 800d2ba:	db02      	blt.n	800d2c2 <_strtoul_l.constprop.0+0xa2>
 800d2bc:	4663      	mov	r3, ip
 800d2be:	4370      	muls	r0, r6
 800d2c0:	1810      	adds	r0, r2, r0
 800d2c2:	782c      	ldrb	r4, [r5, #0]
 800d2c4:	3501      	adds	r5, #1
 800d2c6:	e7e4      	b.n	800d292 <_strtoul_l.constprop.0+0x72>
 800d2c8:	2c2b      	cmp	r4, #43	; 0x2b
 800d2ca:	d1c2      	bne.n	800d252 <_strtoul_l.constprop.0+0x32>
 800d2cc:	781c      	ldrb	r4, [r3, #0]
 800d2ce:	1c95      	adds	r5, r2, #2
 800d2d0:	e7bf      	b.n	800d252 <_strtoul_l.constprop.0+0x32>
 800d2d2:	0022      	movs	r2, r4
 800d2d4:	3a61      	subs	r2, #97	; 0x61
 800d2d6:	2a19      	cmp	r2, #25
 800d2d8:	d9e2      	bls.n	800d2a0 <_strtoul_l.constprop.0+0x80>
 800d2da:	1c5a      	adds	r2, r3, #1
 800d2dc:	d108      	bne.n	800d2f0 <_strtoul_l.constprop.0+0xd0>
 800d2de:	2222      	movs	r2, #34	; 0x22
 800d2e0:	9905      	ldr	r1, [sp, #20]
 800d2e2:	0018      	movs	r0, r3
 800d2e4:	600a      	str	r2, [r1, #0]
 800d2e6:	9a02      	ldr	r2, [sp, #8]
 800d2e8:	2a00      	cmp	r2, #0
 800d2ea:	d109      	bne.n	800d300 <_strtoul_l.constprop.0+0xe0>
 800d2ec:	b007      	add	sp, #28
 800d2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f0:	2f00      	cmp	r7, #0
 800d2f2:	d000      	beq.n	800d2f6 <_strtoul_l.constprop.0+0xd6>
 800d2f4:	4240      	negs	r0, r0
 800d2f6:	9a02      	ldr	r2, [sp, #8]
 800d2f8:	2a00      	cmp	r2, #0
 800d2fa:	d0f7      	beq.n	800d2ec <_strtoul_l.constprop.0+0xcc>
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d001      	beq.n	800d304 <_strtoul_l.constprop.0+0xe4>
 800d300:	1e6b      	subs	r3, r5, #1
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	9b02      	ldr	r3, [sp, #8]
 800d306:	9a01      	ldr	r2, [sp, #4]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	e7ef      	b.n	800d2ec <_strtoul_l.constprop.0+0xcc>
 800d30c:	2430      	movs	r4, #48	; 0x30
 800d30e:	2e00      	cmp	r6, #0
 800d310:	d1ad      	bne.n	800d26e <_strtoul_l.constprop.0+0x4e>
 800d312:	3608      	adds	r6, #8
 800d314:	e7ab      	b.n	800d26e <_strtoul_l.constprop.0+0x4e>
 800d316:	2c30      	cmp	r4, #48	; 0x30
 800d318:	d0a1      	beq.n	800d25e <_strtoul_l.constprop.0+0x3e>
 800d31a:	260a      	movs	r6, #10
 800d31c:	e7a7      	b.n	800d26e <_strtoul_l.constprop.0+0x4e>
 800d31e:	46c0      	nop			; (mov r8, r8)
 800d320:	080111b1 	.word	0x080111b1

0800d324 <strtoul>:
 800d324:	b510      	push	{r4, lr}
 800d326:	4c04      	ldr	r4, [pc, #16]	; (800d338 <strtoul+0x14>)
 800d328:	0013      	movs	r3, r2
 800d32a:	000a      	movs	r2, r1
 800d32c:	0001      	movs	r1, r0
 800d32e:	6820      	ldr	r0, [r4, #0]
 800d330:	f7ff ff76 	bl	800d220 <_strtoul_l.constprop.0>
 800d334:	bd10      	pop	{r4, pc}
 800d336:	46c0      	nop			; (mov r8, r8)
 800d338:	200001ec 	.word	0x200001ec

0800d33c <__cvt>:
 800d33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d33e:	001e      	movs	r6, r3
 800d340:	2300      	movs	r3, #0
 800d342:	0014      	movs	r4, r2
 800d344:	b08b      	sub	sp, #44	; 0x2c
 800d346:	429e      	cmp	r6, r3
 800d348:	da04      	bge.n	800d354 <__cvt+0x18>
 800d34a:	2180      	movs	r1, #128	; 0x80
 800d34c:	0609      	lsls	r1, r1, #24
 800d34e:	1873      	adds	r3, r6, r1
 800d350:	001e      	movs	r6, r3
 800d352:	232d      	movs	r3, #45	; 0x2d
 800d354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d356:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d358:	7013      	strb	r3, [r2, #0]
 800d35a:	2320      	movs	r3, #32
 800d35c:	2203      	movs	r2, #3
 800d35e:	439f      	bics	r7, r3
 800d360:	2f46      	cmp	r7, #70	; 0x46
 800d362:	d007      	beq.n	800d374 <__cvt+0x38>
 800d364:	003b      	movs	r3, r7
 800d366:	3b45      	subs	r3, #69	; 0x45
 800d368:	4259      	negs	r1, r3
 800d36a:	414b      	adcs	r3, r1
 800d36c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d36e:	3a01      	subs	r2, #1
 800d370:	18cb      	adds	r3, r1, r3
 800d372:	9310      	str	r3, [sp, #64]	; 0x40
 800d374:	ab09      	add	r3, sp, #36	; 0x24
 800d376:	9304      	str	r3, [sp, #16]
 800d378:	ab08      	add	r3, sp, #32
 800d37a:	9303      	str	r3, [sp, #12]
 800d37c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d37e:	9200      	str	r2, [sp, #0]
 800d380:	9302      	str	r3, [sp, #8]
 800d382:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d384:	0022      	movs	r2, r4
 800d386:	9301      	str	r3, [sp, #4]
 800d388:	0033      	movs	r3, r6
 800d38a:	f000 fff3 	bl	800e374 <_dtoa_r>
 800d38e:	0005      	movs	r5, r0
 800d390:	2f47      	cmp	r7, #71	; 0x47
 800d392:	d102      	bne.n	800d39a <__cvt+0x5e>
 800d394:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d396:	07db      	lsls	r3, r3, #31
 800d398:	d528      	bpl.n	800d3ec <__cvt+0xb0>
 800d39a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d39c:	18eb      	adds	r3, r5, r3
 800d39e:	9307      	str	r3, [sp, #28]
 800d3a0:	2f46      	cmp	r7, #70	; 0x46
 800d3a2:	d114      	bne.n	800d3ce <__cvt+0x92>
 800d3a4:	782b      	ldrb	r3, [r5, #0]
 800d3a6:	2b30      	cmp	r3, #48	; 0x30
 800d3a8:	d10c      	bne.n	800d3c4 <__cvt+0x88>
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	0020      	movs	r0, r4
 800d3b0:	0031      	movs	r1, r6
 800d3b2:	f7f3 f855 	bl	8000460 <__aeabi_dcmpeq>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d104      	bne.n	800d3c4 <__cvt+0x88>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d3be:	1a9b      	subs	r3, r3, r2
 800d3c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d3c2:	6013      	str	r3, [r2, #0]
 800d3c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3c6:	9a07      	ldr	r2, [sp, #28]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	18d3      	adds	r3, r2, r3
 800d3cc:	9307      	str	r3, [sp, #28]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	0020      	movs	r0, r4
 800d3d4:	0031      	movs	r1, r6
 800d3d6:	f7f3 f843 	bl	8000460 <__aeabi_dcmpeq>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d001      	beq.n	800d3e2 <__cvt+0xa6>
 800d3de:	9b07      	ldr	r3, [sp, #28]
 800d3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d3e2:	2230      	movs	r2, #48	; 0x30
 800d3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e6:	9907      	ldr	r1, [sp, #28]
 800d3e8:	428b      	cmp	r3, r1
 800d3ea:	d306      	bcc.n	800d3fa <__cvt+0xbe>
 800d3ec:	0028      	movs	r0, r5
 800d3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d3f2:	1b5b      	subs	r3, r3, r5
 800d3f4:	6013      	str	r3, [r2, #0]
 800d3f6:	b00b      	add	sp, #44	; 0x2c
 800d3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3fa:	1c59      	adds	r1, r3, #1
 800d3fc:	9109      	str	r1, [sp, #36]	; 0x24
 800d3fe:	701a      	strb	r2, [r3, #0]
 800d400:	e7f0      	b.n	800d3e4 <__cvt+0xa8>

0800d402 <__exponent>:
 800d402:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d404:	1c83      	adds	r3, r0, #2
 800d406:	b087      	sub	sp, #28
 800d408:	9303      	str	r3, [sp, #12]
 800d40a:	0005      	movs	r5, r0
 800d40c:	000c      	movs	r4, r1
 800d40e:	232b      	movs	r3, #43	; 0x2b
 800d410:	7002      	strb	r2, [r0, #0]
 800d412:	2900      	cmp	r1, #0
 800d414:	da01      	bge.n	800d41a <__exponent+0x18>
 800d416:	424c      	negs	r4, r1
 800d418:	3302      	adds	r3, #2
 800d41a:	706b      	strb	r3, [r5, #1]
 800d41c:	2c09      	cmp	r4, #9
 800d41e:	dd2f      	ble.n	800d480 <__exponent+0x7e>
 800d420:	270a      	movs	r7, #10
 800d422:	ab04      	add	r3, sp, #16
 800d424:	1dde      	adds	r6, r3, #7
 800d426:	0020      	movs	r0, r4
 800d428:	0039      	movs	r1, r7
 800d42a:	9601      	str	r6, [sp, #4]
 800d42c:	f7f3 f802 	bl	8000434 <__aeabi_idivmod>
 800d430:	3e01      	subs	r6, #1
 800d432:	3130      	adds	r1, #48	; 0x30
 800d434:	0020      	movs	r0, r4
 800d436:	7031      	strb	r1, [r6, #0]
 800d438:	0039      	movs	r1, r7
 800d43a:	9402      	str	r4, [sp, #8]
 800d43c:	f7f2 ff14 	bl	8000268 <__divsi3>
 800d440:	9b02      	ldr	r3, [sp, #8]
 800d442:	0004      	movs	r4, r0
 800d444:	2b63      	cmp	r3, #99	; 0x63
 800d446:	dcee      	bgt.n	800d426 <__exponent+0x24>
 800d448:	9b01      	ldr	r3, [sp, #4]
 800d44a:	3430      	adds	r4, #48	; 0x30
 800d44c:	1e9a      	subs	r2, r3, #2
 800d44e:	0013      	movs	r3, r2
 800d450:	9903      	ldr	r1, [sp, #12]
 800d452:	7014      	strb	r4, [r2, #0]
 800d454:	a804      	add	r0, sp, #16
 800d456:	3007      	adds	r0, #7
 800d458:	4298      	cmp	r0, r3
 800d45a:	d80c      	bhi.n	800d476 <__exponent+0x74>
 800d45c:	2300      	movs	r3, #0
 800d45e:	4282      	cmp	r2, r0
 800d460:	d804      	bhi.n	800d46c <__exponent+0x6a>
 800d462:	aa04      	add	r2, sp, #16
 800d464:	3309      	adds	r3, #9
 800d466:	189b      	adds	r3, r3, r2
 800d468:	9a01      	ldr	r2, [sp, #4]
 800d46a:	1a9b      	subs	r3, r3, r2
 800d46c:	9a03      	ldr	r2, [sp, #12]
 800d46e:	18d3      	adds	r3, r2, r3
 800d470:	1b58      	subs	r0, r3, r5
 800d472:	b007      	add	sp, #28
 800d474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d476:	7818      	ldrb	r0, [r3, #0]
 800d478:	3301      	adds	r3, #1
 800d47a:	7008      	strb	r0, [r1, #0]
 800d47c:	3101      	adds	r1, #1
 800d47e:	e7e9      	b.n	800d454 <__exponent+0x52>
 800d480:	2330      	movs	r3, #48	; 0x30
 800d482:	3430      	adds	r4, #48	; 0x30
 800d484:	70ab      	strb	r3, [r5, #2]
 800d486:	70ec      	strb	r4, [r5, #3]
 800d488:	1d2b      	adds	r3, r5, #4
 800d48a:	e7f1      	b.n	800d470 <__exponent+0x6e>

0800d48c <_printf_float>:
 800d48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d48e:	b095      	sub	sp, #84	; 0x54
 800d490:	000c      	movs	r4, r1
 800d492:	9208      	str	r2, [sp, #32]
 800d494:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d496:	9309      	str	r3, [sp, #36]	; 0x24
 800d498:	0007      	movs	r7, r0
 800d49a:	f000 fe41 	bl	800e120 <_localeconv_r>
 800d49e:	6803      	ldr	r3, [r0, #0]
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	930c      	str	r3, [sp, #48]	; 0x30
 800d4a4:	f7f2 fe3a 	bl	800011c <strlen>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	9312      	str	r3, [sp, #72]	; 0x48
 800d4ac:	7e23      	ldrb	r3, [r4, #24]
 800d4ae:	2207      	movs	r2, #7
 800d4b0:	930a      	str	r3, [sp, #40]	; 0x28
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	900d      	str	r0, [sp, #52]	; 0x34
 800d4b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4ba:	682b      	ldr	r3, [r5, #0]
 800d4bc:	05c9      	lsls	r1, r1, #23
 800d4be:	d547      	bpl.n	800d550 <_printf_float+0xc4>
 800d4c0:	189b      	adds	r3, r3, r2
 800d4c2:	4393      	bics	r3, r2
 800d4c4:	001a      	movs	r2, r3
 800d4c6:	3208      	adds	r2, #8
 800d4c8:	602a      	str	r2, [r5, #0]
 800d4ca:	681e      	ldr	r6, [r3, #0]
 800d4cc:	685d      	ldr	r5, [r3, #4]
 800d4ce:	0032      	movs	r2, r6
 800d4d0:	002b      	movs	r3, r5
 800d4d2:	64a2      	str	r2, [r4, #72]	; 0x48
 800d4d4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	006b      	lsls	r3, r5, #1
 800d4da:	085b      	lsrs	r3, r3, #1
 800d4dc:	930e      	str	r3, [sp, #56]	; 0x38
 800d4de:	0030      	movs	r0, r6
 800d4e0:	4bab      	ldr	r3, [pc, #684]	; (800d790 <_printf_float+0x304>)
 800d4e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d4e4:	4252      	negs	r2, r2
 800d4e6:	f7f5 fcfb 	bl	8002ee0 <__aeabi_dcmpun>
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d132      	bne.n	800d554 <_printf_float+0xc8>
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	0030      	movs	r0, r6
 800d4f2:	4ba7      	ldr	r3, [pc, #668]	; (800d790 <_printf_float+0x304>)
 800d4f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d4f6:	4252      	negs	r2, r2
 800d4f8:	f7f2 ffc2 	bl	8000480 <__aeabi_dcmple>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d129      	bne.n	800d554 <_printf_float+0xc8>
 800d500:	2200      	movs	r2, #0
 800d502:	2300      	movs	r3, #0
 800d504:	0030      	movs	r0, r6
 800d506:	0029      	movs	r1, r5
 800d508:	f7f2 ffb0 	bl	800046c <__aeabi_dcmplt>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d003      	beq.n	800d518 <_printf_float+0x8c>
 800d510:	0023      	movs	r3, r4
 800d512:	222d      	movs	r2, #45	; 0x2d
 800d514:	3343      	adds	r3, #67	; 0x43
 800d516:	701a      	strb	r2, [r3, #0]
 800d518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d51a:	4d9e      	ldr	r5, [pc, #632]	; (800d794 <_printf_float+0x308>)
 800d51c:	2b47      	cmp	r3, #71	; 0x47
 800d51e:	d900      	bls.n	800d522 <_printf_float+0x96>
 800d520:	4d9d      	ldr	r5, [pc, #628]	; (800d798 <_printf_float+0x30c>)
 800d522:	2303      	movs	r3, #3
 800d524:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d526:	6123      	str	r3, [r4, #16]
 800d528:	3301      	adds	r3, #1
 800d52a:	439a      	bics	r2, r3
 800d52c:	2300      	movs	r3, #0
 800d52e:	6022      	str	r2, [r4, #0]
 800d530:	930b      	str	r3, [sp, #44]	; 0x2c
 800d532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d534:	0021      	movs	r1, r4
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	0038      	movs	r0, r7
 800d53a:	9b08      	ldr	r3, [sp, #32]
 800d53c:	aa13      	add	r2, sp, #76	; 0x4c
 800d53e:	f000 f9fb 	bl	800d938 <_printf_common>
 800d542:	3001      	adds	r0, #1
 800d544:	d000      	beq.n	800d548 <_printf_float+0xbc>
 800d546:	e0a3      	b.n	800d690 <_printf_float+0x204>
 800d548:	2001      	movs	r0, #1
 800d54a:	4240      	negs	r0, r0
 800d54c:	b015      	add	sp, #84	; 0x54
 800d54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d550:	3307      	adds	r3, #7
 800d552:	e7b6      	b.n	800d4c2 <_printf_float+0x36>
 800d554:	0032      	movs	r2, r6
 800d556:	002b      	movs	r3, r5
 800d558:	0030      	movs	r0, r6
 800d55a:	0029      	movs	r1, r5
 800d55c:	f7f5 fcc0 	bl	8002ee0 <__aeabi_dcmpun>
 800d560:	2800      	cmp	r0, #0
 800d562:	d00b      	beq.n	800d57c <_printf_float+0xf0>
 800d564:	2d00      	cmp	r5, #0
 800d566:	da03      	bge.n	800d570 <_printf_float+0xe4>
 800d568:	0023      	movs	r3, r4
 800d56a:	222d      	movs	r2, #45	; 0x2d
 800d56c:	3343      	adds	r3, #67	; 0x43
 800d56e:	701a      	strb	r2, [r3, #0]
 800d570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d572:	4d8a      	ldr	r5, [pc, #552]	; (800d79c <_printf_float+0x310>)
 800d574:	2b47      	cmp	r3, #71	; 0x47
 800d576:	d9d4      	bls.n	800d522 <_printf_float+0x96>
 800d578:	4d89      	ldr	r5, [pc, #548]	; (800d7a0 <_printf_float+0x314>)
 800d57a:	e7d2      	b.n	800d522 <_printf_float+0x96>
 800d57c:	2220      	movs	r2, #32
 800d57e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d580:	6863      	ldr	r3, [r4, #4]
 800d582:	4391      	bics	r1, r2
 800d584:	910e      	str	r1, [sp, #56]	; 0x38
 800d586:	1c5a      	adds	r2, r3, #1
 800d588:	d14a      	bne.n	800d620 <_printf_float+0x194>
 800d58a:	3307      	adds	r3, #7
 800d58c:	6063      	str	r3, [r4, #4]
 800d58e:	2380      	movs	r3, #128	; 0x80
 800d590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	4313      	orrs	r3, r2
 800d596:	2200      	movs	r2, #0
 800d598:	9206      	str	r2, [sp, #24]
 800d59a:	aa12      	add	r2, sp, #72	; 0x48
 800d59c:	9205      	str	r2, [sp, #20]
 800d59e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	9204      	str	r2, [sp, #16]
 800d5a4:	aa11      	add	r2, sp, #68	; 0x44
 800d5a6:	9203      	str	r2, [sp, #12]
 800d5a8:	2223      	movs	r2, #35	; 0x23
 800d5aa:	a908      	add	r1, sp, #32
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	6863      	ldr	r3, [r4, #4]
 800d5b0:	1852      	adds	r2, r2, r1
 800d5b2:	9202      	str	r2, [sp, #8]
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	0032      	movs	r2, r6
 800d5b8:	002b      	movs	r3, r5
 800d5ba:	0038      	movs	r0, r7
 800d5bc:	f7ff febe 	bl	800d33c <__cvt>
 800d5c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5c2:	0005      	movs	r5, r0
 800d5c4:	2b47      	cmp	r3, #71	; 0x47
 800d5c6:	d109      	bne.n	800d5dc <_printf_float+0x150>
 800d5c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5ca:	1cda      	adds	r2, r3, #3
 800d5cc:	db02      	blt.n	800d5d4 <_printf_float+0x148>
 800d5ce:	6862      	ldr	r2, [r4, #4]
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	dd49      	ble.n	800d668 <_printf_float+0x1dc>
 800d5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5d6:	3b02      	subs	r3, #2
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	930a      	str	r3, [sp, #40]	; 0x28
 800d5dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5de:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d5e0:	2b65      	cmp	r3, #101	; 0x65
 800d5e2:	d824      	bhi.n	800d62e <_printf_float+0x1a2>
 800d5e4:	0020      	movs	r0, r4
 800d5e6:	001a      	movs	r2, r3
 800d5e8:	3901      	subs	r1, #1
 800d5ea:	3050      	adds	r0, #80	; 0x50
 800d5ec:	9111      	str	r1, [sp, #68]	; 0x44
 800d5ee:	f7ff ff08 	bl	800d402 <__exponent>
 800d5f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d5f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d5f6:	1813      	adds	r3, r2, r0
 800d5f8:	6123      	str	r3, [r4, #16]
 800d5fa:	2a01      	cmp	r2, #1
 800d5fc:	dc02      	bgt.n	800d604 <_printf_float+0x178>
 800d5fe:	6822      	ldr	r2, [r4, #0]
 800d600:	07d2      	lsls	r2, r2, #31
 800d602:	d501      	bpl.n	800d608 <_printf_float+0x17c>
 800d604:	3301      	adds	r3, #1
 800d606:	6123      	str	r3, [r4, #16]
 800d608:	2323      	movs	r3, #35	; 0x23
 800d60a:	aa08      	add	r2, sp, #32
 800d60c:	189b      	adds	r3, r3, r2
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d100      	bne.n	800d616 <_printf_float+0x18a>
 800d614:	e78d      	b.n	800d532 <_printf_float+0xa6>
 800d616:	0023      	movs	r3, r4
 800d618:	222d      	movs	r2, #45	; 0x2d
 800d61a:	3343      	adds	r3, #67	; 0x43
 800d61c:	701a      	strb	r2, [r3, #0]
 800d61e:	e788      	b.n	800d532 <_printf_float+0xa6>
 800d620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d622:	2a47      	cmp	r2, #71	; 0x47
 800d624:	d1b3      	bne.n	800d58e <_printf_float+0x102>
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1b1      	bne.n	800d58e <_printf_float+0x102>
 800d62a:	3301      	adds	r3, #1
 800d62c:	e7ae      	b.n	800d58c <_printf_float+0x100>
 800d62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d630:	2b66      	cmp	r3, #102	; 0x66
 800d632:	d11b      	bne.n	800d66c <_printf_float+0x1e0>
 800d634:	6863      	ldr	r3, [r4, #4]
 800d636:	2900      	cmp	r1, #0
 800d638:	dd09      	ble.n	800d64e <_printf_float+0x1c2>
 800d63a:	6121      	str	r1, [r4, #16]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d102      	bne.n	800d646 <_printf_float+0x1ba>
 800d640:	6822      	ldr	r2, [r4, #0]
 800d642:	07d2      	lsls	r2, r2, #31
 800d644:	d50b      	bpl.n	800d65e <_printf_float+0x1d2>
 800d646:	3301      	adds	r3, #1
 800d648:	185b      	adds	r3, r3, r1
 800d64a:	6123      	str	r3, [r4, #16]
 800d64c:	e007      	b.n	800d65e <_printf_float+0x1d2>
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d103      	bne.n	800d65a <_printf_float+0x1ce>
 800d652:	2201      	movs	r2, #1
 800d654:	6821      	ldr	r1, [r4, #0]
 800d656:	4211      	tst	r1, r2
 800d658:	d000      	beq.n	800d65c <_printf_float+0x1d0>
 800d65a:	1c9a      	adds	r2, r3, #2
 800d65c:	6122      	str	r2, [r4, #16]
 800d65e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d660:	65a3      	str	r3, [r4, #88]	; 0x58
 800d662:	2300      	movs	r3, #0
 800d664:	930b      	str	r3, [sp, #44]	; 0x2c
 800d666:	e7cf      	b.n	800d608 <_printf_float+0x17c>
 800d668:	2367      	movs	r3, #103	; 0x67
 800d66a:	930a      	str	r3, [sp, #40]	; 0x28
 800d66c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d66e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d670:	4299      	cmp	r1, r3
 800d672:	db06      	blt.n	800d682 <_printf_float+0x1f6>
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	6121      	str	r1, [r4, #16]
 800d678:	07db      	lsls	r3, r3, #31
 800d67a:	d5f0      	bpl.n	800d65e <_printf_float+0x1d2>
 800d67c:	3101      	adds	r1, #1
 800d67e:	6121      	str	r1, [r4, #16]
 800d680:	e7ed      	b.n	800d65e <_printf_float+0x1d2>
 800d682:	2201      	movs	r2, #1
 800d684:	2900      	cmp	r1, #0
 800d686:	dc01      	bgt.n	800d68c <_printf_float+0x200>
 800d688:	1892      	adds	r2, r2, r2
 800d68a:	1a52      	subs	r2, r2, r1
 800d68c:	189b      	adds	r3, r3, r2
 800d68e:	e7dc      	b.n	800d64a <_printf_float+0x1be>
 800d690:	6822      	ldr	r2, [r4, #0]
 800d692:	0553      	lsls	r3, r2, #21
 800d694:	d408      	bmi.n	800d6a8 <_printf_float+0x21c>
 800d696:	6923      	ldr	r3, [r4, #16]
 800d698:	002a      	movs	r2, r5
 800d69a:	0038      	movs	r0, r7
 800d69c:	9908      	ldr	r1, [sp, #32]
 800d69e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d6a0:	47a8      	blx	r5
 800d6a2:	3001      	adds	r0, #1
 800d6a4:	d12a      	bne.n	800d6fc <_printf_float+0x270>
 800d6a6:	e74f      	b.n	800d548 <_printf_float+0xbc>
 800d6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6aa:	2b65      	cmp	r3, #101	; 0x65
 800d6ac:	d800      	bhi.n	800d6b0 <_printf_float+0x224>
 800d6ae:	e0ec      	b.n	800d88a <_printf_float+0x3fe>
 800d6b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d6b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	f7f2 fed2 	bl	8000460 <__aeabi_dcmpeq>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d034      	beq.n	800d72a <_printf_float+0x29e>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	0038      	movs	r0, r7
 800d6c4:	4a37      	ldr	r2, [pc, #220]	; (800d7a4 <_printf_float+0x318>)
 800d6c6:	9908      	ldr	r1, [sp, #32]
 800d6c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d6ca:	47a8      	blx	r5
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d100      	bne.n	800d6d2 <_printf_float+0x246>
 800d6d0:	e73a      	b.n	800d548 <_printf_float+0xbc>
 800d6d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	db02      	blt.n	800d6e0 <_printf_float+0x254>
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	07db      	lsls	r3, r3, #31
 800d6de:	d50d      	bpl.n	800d6fc <_printf_float+0x270>
 800d6e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d6e2:	0038      	movs	r0, r7
 800d6e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6e8:	9908      	ldr	r1, [sp, #32]
 800d6ea:	47a8      	blx	r5
 800d6ec:	2500      	movs	r5, #0
 800d6ee:	3001      	adds	r0, #1
 800d6f0:	d100      	bne.n	800d6f4 <_printf_float+0x268>
 800d6f2:	e729      	b.n	800d548 <_printf_float+0xbc>
 800d6f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	42ab      	cmp	r3, r5
 800d6fa:	dc0a      	bgt.n	800d712 <_printf_float+0x286>
 800d6fc:	6823      	ldr	r3, [r4, #0]
 800d6fe:	079b      	lsls	r3, r3, #30
 800d700:	d500      	bpl.n	800d704 <_printf_float+0x278>
 800d702:	e116      	b.n	800d932 <_printf_float+0x4a6>
 800d704:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d706:	68e0      	ldr	r0, [r4, #12]
 800d708:	4298      	cmp	r0, r3
 800d70a:	db00      	blt.n	800d70e <_printf_float+0x282>
 800d70c:	e71e      	b.n	800d54c <_printf_float+0xc0>
 800d70e:	0018      	movs	r0, r3
 800d710:	e71c      	b.n	800d54c <_printf_float+0xc0>
 800d712:	0022      	movs	r2, r4
 800d714:	2301      	movs	r3, #1
 800d716:	0038      	movs	r0, r7
 800d718:	9908      	ldr	r1, [sp, #32]
 800d71a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d71c:	321a      	adds	r2, #26
 800d71e:	47b0      	blx	r6
 800d720:	3001      	adds	r0, #1
 800d722:	d100      	bne.n	800d726 <_printf_float+0x29a>
 800d724:	e710      	b.n	800d548 <_printf_float+0xbc>
 800d726:	3501      	adds	r5, #1
 800d728:	e7e4      	b.n	800d6f4 <_printf_float+0x268>
 800d72a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	dc3b      	bgt.n	800d7a8 <_printf_float+0x31c>
 800d730:	2301      	movs	r3, #1
 800d732:	0038      	movs	r0, r7
 800d734:	4a1b      	ldr	r2, [pc, #108]	; (800d7a4 <_printf_float+0x318>)
 800d736:	9908      	ldr	r1, [sp, #32]
 800d738:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d73a:	47b0      	blx	r6
 800d73c:	3001      	adds	r0, #1
 800d73e:	d100      	bne.n	800d742 <_printf_float+0x2b6>
 800d740:	e702      	b.n	800d548 <_printf_float+0xbc>
 800d742:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d744:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d746:	4313      	orrs	r3, r2
 800d748:	d102      	bne.n	800d750 <_printf_float+0x2c4>
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	07db      	lsls	r3, r3, #31
 800d74e:	d5d5      	bpl.n	800d6fc <_printf_float+0x270>
 800d750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d752:	0038      	movs	r0, r7
 800d754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d756:	9908      	ldr	r1, [sp, #32]
 800d758:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d75a:	47b0      	blx	r6
 800d75c:	2300      	movs	r3, #0
 800d75e:	3001      	adds	r0, #1
 800d760:	d100      	bne.n	800d764 <_printf_float+0x2d8>
 800d762:	e6f1      	b.n	800d548 <_printf_float+0xbc>
 800d764:	930a      	str	r3, [sp, #40]	; 0x28
 800d766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d76a:	425b      	negs	r3, r3
 800d76c:	4293      	cmp	r3, r2
 800d76e:	dc01      	bgt.n	800d774 <_printf_float+0x2e8>
 800d770:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d772:	e791      	b.n	800d698 <_printf_float+0x20c>
 800d774:	0022      	movs	r2, r4
 800d776:	2301      	movs	r3, #1
 800d778:	0038      	movs	r0, r7
 800d77a:	9908      	ldr	r1, [sp, #32]
 800d77c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d77e:	321a      	adds	r2, #26
 800d780:	47b0      	blx	r6
 800d782:	3001      	adds	r0, #1
 800d784:	d100      	bne.n	800d788 <_printf_float+0x2fc>
 800d786:	e6df      	b.n	800d548 <_printf_float+0xbc>
 800d788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d78a:	3301      	adds	r3, #1
 800d78c:	e7ea      	b.n	800d764 <_printf_float+0x2d8>
 800d78e:	46c0      	nop			; (mov r8, r8)
 800d790:	7fefffff 	.word	0x7fefffff
 800d794:	080112b1 	.word	0x080112b1
 800d798:	080112b5 	.word	0x080112b5
 800d79c:	080112b9 	.word	0x080112b9
 800d7a0:	080112bd 	.word	0x080112bd
 800d7a4:	080112c1 	.word	0x080112c1
 800d7a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7ac:	920a      	str	r2, [sp, #40]	; 0x28
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	dd00      	ble.n	800d7b4 <_printf_float+0x328>
 800d7b2:	930a      	str	r3, [sp, #40]	; 0x28
 800d7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	dc3d      	bgt.n	800d836 <_printf_float+0x3aa>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	930e      	str	r3, [sp, #56]	; 0x38
 800d7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7c0:	43db      	mvns	r3, r3
 800d7c2:	17db      	asrs	r3, r3, #31
 800d7c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7ce:	4013      	ands	r3, r2
 800d7d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d7d2:	1ad3      	subs	r3, r2, r3
 800d7d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	dc36      	bgt.n	800d848 <_printf_float+0x3bc>
 800d7da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d7dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	db40      	blt.n	800d864 <_printf_float+0x3d8>
 800d7e2:	6823      	ldr	r3, [r4, #0]
 800d7e4:	07db      	lsls	r3, r3, #31
 800d7e6:	d43d      	bmi.n	800d864 <_printf_float+0x3d8>
 800d7e8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d7ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d7ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7ee:	1af3      	subs	r3, r6, r3
 800d7f0:	1ab6      	subs	r6, r6, r2
 800d7f2:	429e      	cmp	r6, r3
 800d7f4:	dd00      	ble.n	800d7f8 <_printf_float+0x36c>
 800d7f6:	001e      	movs	r6, r3
 800d7f8:	2e00      	cmp	r6, #0
 800d7fa:	dc3c      	bgt.n	800d876 <_printf_float+0x3ea>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d800:	43f3      	mvns	r3, r6
 800d802:	17db      	asrs	r3, r3, #31
 800d804:	930b      	str	r3, [sp, #44]	; 0x2c
 800d806:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d808:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d80a:	1a9b      	subs	r3, r3, r2
 800d80c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d80e:	4032      	ands	r2, r6
 800d810:	1a9b      	subs	r3, r3, r2
 800d812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d814:	4293      	cmp	r3, r2
 800d816:	dc00      	bgt.n	800d81a <_printf_float+0x38e>
 800d818:	e770      	b.n	800d6fc <_printf_float+0x270>
 800d81a:	0022      	movs	r2, r4
 800d81c:	2301      	movs	r3, #1
 800d81e:	0038      	movs	r0, r7
 800d820:	9908      	ldr	r1, [sp, #32]
 800d822:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d824:	321a      	adds	r2, #26
 800d826:	47a8      	blx	r5
 800d828:	3001      	adds	r0, #1
 800d82a:	d100      	bne.n	800d82e <_printf_float+0x3a2>
 800d82c:	e68c      	b.n	800d548 <_printf_float+0xbc>
 800d82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d830:	3301      	adds	r3, #1
 800d832:	930a      	str	r3, [sp, #40]	; 0x28
 800d834:	e7e7      	b.n	800d806 <_printf_float+0x37a>
 800d836:	002a      	movs	r2, r5
 800d838:	0038      	movs	r0, r7
 800d83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d83c:	9908      	ldr	r1, [sp, #32]
 800d83e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d840:	47b0      	blx	r6
 800d842:	3001      	adds	r0, #1
 800d844:	d1b9      	bne.n	800d7ba <_printf_float+0x32e>
 800d846:	e67f      	b.n	800d548 <_printf_float+0xbc>
 800d848:	0022      	movs	r2, r4
 800d84a:	2301      	movs	r3, #1
 800d84c:	0038      	movs	r0, r7
 800d84e:	9908      	ldr	r1, [sp, #32]
 800d850:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d852:	321a      	adds	r2, #26
 800d854:	47b0      	blx	r6
 800d856:	3001      	adds	r0, #1
 800d858:	d100      	bne.n	800d85c <_printf_float+0x3d0>
 800d85a:	e675      	b.n	800d548 <_printf_float+0xbc>
 800d85c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d85e:	3301      	adds	r3, #1
 800d860:	930e      	str	r3, [sp, #56]	; 0x38
 800d862:	e7b0      	b.n	800d7c6 <_printf_float+0x33a>
 800d864:	0038      	movs	r0, r7
 800d866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d86a:	9908      	ldr	r1, [sp, #32]
 800d86c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d86e:	47b0      	blx	r6
 800d870:	3001      	adds	r0, #1
 800d872:	d1b9      	bne.n	800d7e8 <_printf_float+0x35c>
 800d874:	e668      	b.n	800d548 <_printf_float+0xbc>
 800d876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d878:	0038      	movs	r0, r7
 800d87a:	18ea      	adds	r2, r5, r3
 800d87c:	9908      	ldr	r1, [sp, #32]
 800d87e:	0033      	movs	r3, r6
 800d880:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d882:	47a8      	blx	r5
 800d884:	3001      	adds	r0, #1
 800d886:	d1b9      	bne.n	800d7fc <_printf_float+0x370>
 800d888:	e65e      	b.n	800d548 <_printf_float+0xbc>
 800d88a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	dc02      	bgt.n	800d896 <_printf_float+0x40a>
 800d890:	2301      	movs	r3, #1
 800d892:	421a      	tst	r2, r3
 800d894:	d03a      	beq.n	800d90c <_printf_float+0x480>
 800d896:	2301      	movs	r3, #1
 800d898:	002a      	movs	r2, r5
 800d89a:	0038      	movs	r0, r7
 800d89c:	9908      	ldr	r1, [sp, #32]
 800d89e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d8a0:	47b0      	blx	r6
 800d8a2:	3001      	adds	r0, #1
 800d8a4:	d100      	bne.n	800d8a8 <_printf_float+0x41c>
 800d8a6:	e64f      	b.n	800d548 <_printf_float+0xbc>
 800d8a8:	0038      	movs	r0, r7
 800d8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d8ae:	9908      	ldr	r1, [sp, #32]
 800d8b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d8b2:	47b0      	blx	r6
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	d100      	bne.n	800d8ba <_printf_float+0x42e>
 800d8b8:	e646      	b.n	800d548 <_printf_float+0xbc>
 800d8ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d8bc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d8be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	001e      	movs	r6, r3
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	f7f2 fdcb 	bl	8000460 <__aeabi_dcmpeq>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d11c      	bne.n	800d908 <_printf_float+0x47c>
 800d8ce:	0033      	movs	r3, r6
 800d8d0:	1c6a      	adds	r2, r5, #1
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	0038      	movs	r0, r7
 800d8d6:	9908      	ldr	r1, [sp, #32]
 800d8d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d8da:	47a8      	blx	r5
 800d8dc:	3001      	adds	r0, #1
 800d8de:	d10f      	bne.n	800d900 <_printf_float+0x474>
 800d8e0:	e632      	b.n	800d548 <_printf_float+0xbc>
 800d8e2:	0022      	movs	r2, r4
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	0038      	movs	r0, r7
 800d8e8:	9908      	ldr	r1, [sp, #32]
 800d8ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d8ec:	321a      	adds	r2, #26
 800d8ee:	47b0      	blx	r6
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	d100      	bne.n	800d8f6 <_printf_float+0x46a>
 800d8f4:	e628      	b.n	800d548 <_printf_float+0xbc>
 800d8f6:	3501      	adds	r5, #1
 800d8f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	42ab      	cmp	r3, r5
 800d8fe:	dcf0      	bgt.n	800d8e2 <_printf_float+0x456>
 800d900:	0022      	movs	r2, r4
 800d902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d904:	3250      	adds	r2, #80	; 0x50
 800d906:	e6c8      	b.n	800d69a <_printf_float+0x20e>
 800d908:	2500      	movs	r5, #0
 800d90a:	e7f5      	b.n	800d8f8 <_printf_float+0x46c>
 800d90c:	002a      	movs	r2, r5
 800d90e:	e7e1      	b.n	800d8d4 <_printf_float+0x448>
 800d910:	0022      	movs	r2, r4
 800d912:	2301      	movs	r3, #1
 800d914:	0038      	movs	r0, r7
 800d916:	9908      	ldr	r1, [sp, #32]
 800d918:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d91a:	3219      	adds	r2, #25
 800d91c:	47b0      	blx	r6
 800d91e:	3001      	adds	r0, #1
 800d920:	d100      	bne.n	800d924 <_printf_float+0x498>
 800d922:	e611      	b.n	800d548 <_printf_float+0xbc>
 800d924:	3501      	adds	r5, #1
 800d926:	68e3      	ldr	r3, [r4, #12]
 800d928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d92a:	1a9b      	subs	r3, r3, r2
 800d92c:	42ab      	cmp	r3, r5
 800d92e:	dcef      	bgt.n	800d910 <_printf_float+0x484>
 800d930:	e6e8      	b.n	800d704 <_printf_float+0x278>
 800d932:	2500      	movs	r5, #0
 800d934:	e7f7      	b.n	800d926 <_printf_float+0x49a>
 800d936:	46c0      	nop			; (mov r8, r8)

0800d938 <_printf_common>:
 800d938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d93a:	0016      	movs	r6, r2
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	688a      	ldr	r2, [r1, #8]
 800d940:	690b      	ldr	r3, [r1, #16]
 800d942:	000c      	movs	r4, r1
 800d944:	9000      	str	r0, [sp, #0]
 800d946:	4293      	cmp	r3, r2
 800d948:	da00      	bge.n	800d94c <_printf_common+0x14>
 800d94a:	0013      	movs	r3, r2
 800d94c:	0022      	movs	r2, r4
 800d94e:	6033      	str	r3, [r6, #0]
 800d950:	3243      	adds	r2, #67	; 0x43
 800d952:	7812      	ldrb	r2, [r2, #0]
 800d954:	2a00      	cmp	r2, #0
 800d956:	d001      	beq.n	800d95c <_printf_common+0x24>
 800d958:	3301      	adds	r3, #1
 800d95a:	6033      	str	r3, [r6, #0]
 800d95c:	6823      	ldr	r3, [r4, #0]
 800d95e:	069b      	lsls	r3, r3, #26
 800d960:	d502      	bpl.n	800d968 <_printf_common+0x30>
 800d962:	6833      	ldr	r3, [r6, #0]
 800d964:	3302      	adds	r3, #2
 800d966:	6033      	str	r3, [r6, #0]
 800d968:	6822      	ldr	r2, [r4, #0]
 800d96a:	2306      	movs	r3, #6
 800d96c:	0015      	movs	r5, r2
 800d96e:	401d      	ands	r5, r3
 800d970:	421a      	tst	r2, r3
 800d972:	d027      	beq.n	800d9c4 <_printf_common+0x8c>
 800d974:	0023      	movs	r3, r4
 800d976:	3343      	adds	r3, #67	; 0x43
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	1e5a      	subs	r2, r3, #1
 800d97c:	4193      	sbcs	r3, r2
 800d97e:	6822      	ldr	r2, [r4, #0]
 800d980:	0692      	lsls	r2, r2, #26
 800d982:	d430      	bmi.n	800d9e6 <_printf_common+0xae>
 800d984:	0022      	movs	r2, r4
 800d986:	9901      	ldr	r1, [sp, #4]
 800d988:	9800      	ldr	r0, [sp, #0]
 800d98a:	9d08      	ldr	r5, [sp, #32]
 800d98c:	3243      	adds	r2, #67	; 0x43
 800d98e:	47a8      	blx	r5
 800d990:	3001      	adds	r0, #1
 800d992:	d025      	beq.n	800d9e0 <_printf_common+0xa8>
 800d994:	2206      	movs	r2, #6
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	2500      	movs	r5, #0
 800d99a:	4013      	ands	r3, r2
 800d99c:	2b04      	cmp	r3, #4
 800d99e:	d105      	bne.n	800d9ac <_printf_common+0x74>
 800d9a0:	6833      	ldr	r3, [r6, #0]
 800d9a2:	68e5      	ldr	r5, [r4, #12]
 800d9a4:	1aed      	subs	r5, r5, r3
 800d9a6:	43eb      	mvns	r3, r5
 800d9a8:	17db      	asrs	r3, r3, #31
 800d9aa:	401d      	ands	r5, r3
 800d9ac:	68a3      	ldr	r3, [r4, #8]
 800d9ae:	6922      	ldr	r2, [r4, #16]
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	dd01      	ble.n	800d9b8 <_printf_common+0x80>
 800d9b4:	1a9b      	subs	r3, r3, r2
 800d9b6:	18ed      	adds	r5, r5, r3
 800d9b8:	2600      	movs	r6, #0
 800d9ba:	42b5      	cmp	r5, r6
 800d9bc:	d120      	bne.n	800da00 <_printf_common+0xc8>
 800d9be:	2000      	movs	r0, #0
 800d9c0:	e010      	b.n	800d9e4 <_printf_common+0xac>
 800d9c2:	3501      	adds	r5, #1
 800d9c4:	68e3      	ldr	r3, [r4, #12]
 800d9c6:	6832      	ldr	r2, [r6, #0]
 800d9c8:	1a9b      	subs	r3, r3, r2
 800d9ca:	42ab      	cmp	r3, r5
 800d9cc:	ddd2      	ble.n	800d974 <_printf_common+0x3c>
 800d9ce:	0022      	movs	r2, r4
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	9901      	ldr	r1, [sp, #4]
 800d9d4:	9800      	ldr	r0, [sp, #0]
 800d9d6:	9f08      	ldr	r7, [sp, #32]
 800d9d8:	3219      	adds	r2, #25
 800d9da:	47b8      	blx	r7
 800d9dc:	3001      	adds	r0, #1
 800d9de:	d1f0      	bne.n	800d9c2 <_printf_common+0x8a>
 800d9e0:	2001      	movs	r0, #1
 800d9e2:	4240      	negs	r0, r0
 800d9e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d9e6:	2030      	movs	r0, #48	; 0x30
 800d9e8:	18e1      	adds	r1, r4, r3
 800d9ea:	3143      	adds	r1, #67	; 0x43
 800d9ec:	7008      	strb	r0, [r1, #0]
 800d9ee:	0021      	movs	r1, r4
 800d9f0:	1c5a      	adds	r2, r3, #1
 800d9f2:	3145      	adds	r1, #69	; 0x45
 800d9f4:	7809      	ldrb	r1, [r1, #0]
 800d9f6:	18a2      	adds	r2, r4, r2
 800d9f8:	3243      	adds	r2, #67	; 0x43
 800d9fa:	3302      	adds	r3, #2
 800d9fc:	7011      	strb	r1, [r2, #0]
 800d9fe:	e7c1      	b.n	800d984 <_printf_common+0x4c>
 800da00:	0022      	movs	r2, r4
 800da02:	2301      	movs	r3, #1
 800da04:	9901      	ldr	r1, [sp, #4]
 800da06:	9800      	ldr	r0, [sp, #0]
 800da08:	9f08      	ldr	r7, [sp, #32]
 800da0a:	321a      	adds	r2, #26
 800da0c:	47b8      	blx	r7
 800da0e:	3001      	adds	r0, #1
 800da10:	d0e6      	beq.n	800d9e0 <_printf_common+0xa8>
 800da12:	3601      	adds	r6, #1
 800da14:	e7d1      	b.n	800d9ba <_printf_common+0x82>
	...

0800da18 <_printf_i>:
 800da18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da1a:	b08b      	sub	sp, #44	; 0x2c
 800da1c:	9206      	str	r2, [sp, #24]
 800da1e:	000a      	movs	r2, r1
 800da20:	3243      	adds	r2, #67	; 0x43
 800da22:	9307      	str	r3, [sp, #28]
 800da24:	9005      	str	r0, [sp, #20]
 800da26:	9204      	str	r2, [sp, #16]
 800da28:	7e0a      	ldrb	r2, [r1, #24]
 800da2a:	000c      	movs	r4, r1
 800da2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da2e:	2a78      	cmp	r2, #120	; 0x78
 800da30:	d809      	bhi.n	800da46 <_printf_i+0x2e>
 800da32:	2a62      	cmp	r2, #98	; 0x62
 800da34:	d80b      	bhi.n	800da4e <_printf_i+0x36>
 800da36:	2a00      	cmp	r2, #0
 800da38:	d100      	bne.n	800da3c <_printf_i+0x24>
 800da3a:	e0be      	b.n	800dbba <_printf_i+0x1a2>
 800da3c:	497c      	ldr	r1, [pc, #496]	; (800dc30 <_printf_i+0x218>)
 800da3e:	9103      	str	r1, [sp, #12]
 800da40:	2a58      	cmp	r2, #88	; 0x58
 800da42:	d100      	bne.n	800da46 <_printf_i+0x2e>
 800da44:	e093      	b.n	800db6e <_printf_i+0x156>
 800da46:	0026      	movs	r6, r4
 800da48:	3642      	adds	r6, #66	; 0x42
 800da4a:	7032      	strb	r2, [r6, #0]
 800da4c:	e022      	b.n	800da94 <_printf_i+0x7c>
 800da4e:	0010      	movs	r0, r2
 800da50:	3863      	subs	r0, #99	; 0x63
 800da52:	2815      	cmp	r0, #21
 800da54:	d8f7      	bhi.n	800da46 <_printf_i+0x2e>
 800da56:	f7f2 fb73 	bl	8000140 <__gnu_thumb1_case_shi>
 800da5a:	0016      	.short	0x0016
 800da5c:	fff6001f 	.word	0xfff6001f
 800da60:	fff6fff6 	.word	0xfff6fff6
 800da64:	001ffff6 	.word	0x001ffff6
 800da68:	fff6fff6 	.word	0xfff6fff6
 800da6c:	fff6fff6 	.word	0xfff6fff6
 800da70:	003600a3 	.word	0x003600a3
 800da74:	fff60083 	.word	0xfff60083
 800da78:	00b4fff6 	.word	0x00b4fff6
 800da7c:	0036fff6 	.word	0x0036fff6
 800da80:	fff6fff6 	.word	0xfff6fff6
 800da84:	0087      	.short	0x0087
 800da86:	0026      	movs	r6, r4
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	3642      	adds	r6, #66	; 0x42
 800da8c:	1d11      	adds	r1, r2, #4
 800da8e:	6019      	str	r1, [r3, #0]
 800da90:	6813      	ldr	r3, [r2, #0]
 800da92:	7033      	strb	r3, [r6, #0]
 800da94:	2301      	movs	r3, #1
 800da96:	e0a2      	b.n	800dbde <_printf_i+0x1c6>
 800da98:	6818      	ldr	r0, [r3, #0]
 800da9a:	6809      	ldr	r1, [r1, #0]
 800da9c:	1d02      	adds	r2, r0, #4
 800da9e:	060d      	lsls	r5, r1, #24
 800daa0:	d50b      	bpl.n	800daba <_printf_i+0xa2>
 800daa2:	6805      	ldr	r5, [r0, #0]
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	2d00      	cmp	r5, #0
 800daa8:	da03      	bge.n	800dab2 <_printf_i+0x9a>
 800daaa:	232d      	movs	r3, #45	; 0x2d
 800daac:	9a04      	ldr	r2, [sp, #16]
 800daae:	426d      	negs	r5, r5
 800dab0:	7013      	strb	r3, [r2, #0]
 800dab2:	4b5f      	ldr	r3, [pc, #380]	; (800dc30 <_printf_i+0x218>)
 800dab4:	270a      	movs	r7, #10
 800dab6:	9303      	str	r3, [sp, #12]
 800dab8:	e01b      	b.n	800daf2 <_printf_i+0xda>
 800daba:	6805      	ldr	r5, [r0, #0]
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	0649      	lsls	r1, r1, #25
 800dac0:	d5f1      	bpl.n	800daa6 <_printf_i+0x8e>
 800dac2:	b22d      	sxth	r5, r5
 800dac4:	e7ef      	b.n	800daa6 <_printf_i+0x8e>
 800dac6:	680d      	ldr	r5, [r1, #0]
 800dac8:	6819      	ldr	r1, [r3, #0]
 800daca:	1d08      	adds	r0, r1, #4
 800dacc:	6018      	str	r0, [r3, #0]
 800dace:	062e      	lsls	r6, r5, #24
 800dad0:	d501      	bpl.n	800dad6 <_printf_i+0xbe>
 800dad2:	680d      	ldr	r5, [r1, #0]
 800dad4:	e003      	b.n	800dade <_printf_i+0xc6>
 800dad6:	066d      	lsls	r5, r5, #25
 800dad8:	d5fb      	bpl.n	800dad2 <_printf_i+0xba>
 800dada:	680d      	ldr	r5, [r1, #0]
 800dadc:	b2ad      	uxth	r5, r5
 800dade:	4b54      	ldr	r3, [pc, #336]	; (800dc30 <_printf_i+0x218>)
 800dae0:	2708      	movs	r7, #8
 800dae2:	9303      	str	r3, [sp, #12]
 800dae4:	2a6f      	cmp	r2, #111	; 0x6f
 800dae6:	d000      	beq.n	800daea <_printf_i+0xd2>
 800dae8:	3702      	adds	r7, #2
 800daea:	0023      	movs	r3, r4
 800daec:	2200      	movs	r2, #0
 800daee:	3343      	adds	r3, #67	; 0x43
 800daf0:	701a      	strb	r2, [r3, #0]
 800daf2:	6863      	ldr	r3, [r4, #4]
 800daf4:	60a3      	str	r3, [r4, #8]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	db03      	blt.n	800db02 <_printf_i+0xea>
 800dafa:	2104      	movs	r1, #4
 800dafc:	6822      	ldr	r2, [r4, #0]
 800dafe:	438a      	bics	r2, r1
 800db00:	6022      	str	r2, [r4, #0]
 800db02:	2d00      	cmp	r5, #0
 800db04:	d102      	bne.n	800db0c <_printf_i+0xf4>
 800db06:	9e04      	ldr	r6, [sp, #16]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00c      	beq.n	800db26 <_printf_i+0x10e>
 800db0c:	9e04      	ldr	r6, [sp, #16]
 800db0e:	0028      	movs	r0, r5
 800db10:	0039      	movs	r1, r7
 800db12:	f7f2 fba5 	bl	8000260 <__aeabi_uidivmod>
 800db16:	9b03      	ldr	r3, [sp, #12]
 800db18:	3e01      	subs	r6, #1
 800db1a:	5c5b      	ldrb	r3, [r3, r1]
 800db1c:	7033      	strb	r3, [r6, #0]
 800db1e:	002b      	movs	r3, r5
 800db20:	0005      	movs	r5, r0
 800db22:	429f      	cmp	r7, r3
 800db24:	d9f3      	bls.n	800db0e <_printf_i+0xf6>
 800db26:	2f08      	cmp	r7, #8
 800db28:	d109      	bne.n	800db3e <_printf_i+0x126>
 800db2a:	6823      	ldr	r3, [r4, #0]
 800db2c:	07db      	lsls	r3, r3, #31
 800db2e:	d506      	bpl.n	800db3e <_printf_i+0x126>
 800db30:	6862      	ldr	r2, [r4, #4]
 800db32:	6923      	ldr	r3, [r4, #16]
 800db34:	429a      	cmp	r2, r3
 800db36:	dc02      	bgt.n	800db3e <_printf_i+0x126>
 800db38:	2330      	movs	r3, #48	; 0x30
 800db3a:	3e01      	subs	r6, #1
 800db3c:	7033      	strb	r3, [r6, #0]
 800db3e:	9b04      	ldr	r3, [sp, #16]
 800db40:	1b9b      	subs	r3, r3, r6
 800db42:	6123      	str	r3, [r4, #16]
 800db44:	9b07      	ldr	r3, [sp, #28]
 800db46:	0021      	movs	r1, r4
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	9805      	ldr	r0, [sp, #20]
 800db4c:	9b06      	ldr	r3, [sp, #24]
 800db4e:	aa09      	add	r2, sp, #36	; 0x24
 800db50:	f7ff fef2 	bl	800d938 <_printf_common>
 800db54:	3001      	adds	r0, #1
 800db56:	d147      	bne.n	800dbe8 <_printf_i+0x1d0>
 800db58:	2001      	movs	r0, #1
 800db5a:	4240      	negs	r0, r0
 800db5c:	b00b      	add	sp, #44	; 0x2c
 800db5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db60:	2220      	movs	r2, #32
 800db62:	6809      	ldr	r1, [r1, #0]
 800db64:	430a      	orrs	r2, r1
 800db66:	6022      	str	r2, [r4, #0]
 800db68:	2278      	movs	r2, #120	; 0x78
 800db6a:	4932      	ldr	r1, [pc, #200]	; (800dc34 <_printf_i+0x21c>)
 800db6c:	9103      	str	r1, [sp, #12]
 800db6e:	0021      	movs	r1, r4
 800db70:	3145      	adds	r1, #69	; 0x45
 800db72:	700a      	strb	r2, [r1, #0]
 800db74:	6819      	ldr	r1, [r3, #0]
 800db76:	6822      	ldr	r2, [r4, #0]
 800db78:	c920      	ldmia	r1!, {r5}
 800db7a:	0610      	lsls	r0, r2, #24
 800db7c:	d402      	bmi.n	800db84 <_printf_i+0x16c>
 800db7e:	0650      	lsls	r0, r2, #25
 800db80:	d500      	bpl.n	800db84 <_printf_i+0x16c>
 800db82:	b2ad      	uxth	r5, r5
 800db84:	6019      	str	r1, [r3, #0]
 800db86:	07d3      	lsls	r3, r2, #31
 800db88:	d502      	bpl.n	800db90 <_printf_i+0x178>
 800db8a:	2320      	movs	r3, #32
 800db8c:	4313      	orrs	r3, r2
 800db8e:	6023      	str	r3, [r4, #0]
 800db90:	2710      	movs	r7, #16
 800db92:	2d00      	cmp	r5, #0
 800db94:	d1a9      	bne.n	800daea <_printf_i+0xd2>
 800db96:	2220      	movs	r2, #32
 800db98:	6823      	ldr	r3, [r4, #0]
 800db9a:	4393      	bics	r3, r2
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	e7a4      	b.n	800daea <_printf_i+0xd2>
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	680d      	ldr	r5, [r1, #0]
 800dba4:	1d10      	adds	r0, r2, #4
 800dba6:	6949      	ldr	r1, [r1, #20]
 800dba8:	6018      	str	r0, [r3, #0]
 800dbaa:	6813      	ldr	r3, [r2, #0]
 800dbac:	062e      	lsls	r6, r5, #24
 800dbae:	d501      	bpl.n	800dbb4 <_printf_i+0x19c>
 800dbb0:	6019      	str	r1, [r3, #0]
 800dbb2:	e002      	b.n	800dbba <_printf_i+0x1a2>
 800dbb4:	066d      	lsls	r5, r5, #25
 800dbb6:	d5fb      	bpl.n	800dbb0 <_printf_i+0x198>
 800dbb8:	8019      	strh	r1, [r3, #0]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	9e04      	ldr	r6, [sp, #16]
 800dbbe:	6123      	str	r3, [r4, #16]
 800dbc0:	e7c0      	b.n	800db44 <_printf_i+0x12c>
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	1d11      	adds	r1, r2, #4
 800dbc6:	6019      	str	r1, [r3, #0]
 800dbc8:	6816      	ldr	r6, [r2, #0]
 800dbca:	2100      	movs	r1, #0
 800dbcc:	0030      	movs	r0, r6
 800dbce:	6862      	ldr	r2, [r4, #4]
 800dbd0:	f000 fb25 	bl	800e21e <memchr>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d001      	beq.n	800dbdc <_printf_i+0x1c4>
 800dbd8:	1b80      	subs	r0, r0, r6
 800dbda:	6060      	str	r0, [r4, #4]
 800dbdc:	6863      	ldr	r3, [r4, #4]
 800dbde:	6123      	str	r3, [r4, #16]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	9a04      	ldr	r2, [sp, #16]
 800dbe4:	7013      	strb	r3, [r2, #0]
 800dbe6:	e7ad      	b.n	800db44 <_printf_i+0x12c>
 800dbe8:	0032      	movs	r2, r6
 800dbea:	6923      	ldr	r3, [r4, #16]
 800dbec:	9906      	ldr	r1, [sp, #24]
 800dbee:	9805      	ldr	r0, [sp, #20]
 800dbf0:	9d07      	ldr	r5, [sp, #28]
 800dbf2:	47a8      	blx	r5
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	d0af      	beq.n	800db58 <_printf_i+0x140>
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	079b      	lsls	r3, r3, #30
 800dbfc:	d415      	bmi.n	800dc2a <_printf_i+0x212>
 800dbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc00:	68e0      	ldr	r0, [r4, #12]
 800dc02:	4298      	cmp	r0, r3
 800dc04:	daaa      	bge.n	800db5c <_printf_i+0x144>
 800dc06:	0018      	movs	r0, r3
 800dc08:	e7a8      	b.n	800db5c <_printf_i+0x144>
 800dc0a:	0022      	movs	r2, r4
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	9906      	ldr	r1, [sp, #24]
 800dc10:	9805      	ldr	r0, [sp, #20]
 800dc12:	9e07      	ldr	r6, [sp, #28]
 800dc14:	3219      	adds	r2, #25
 800dc16:	47b0      	blx	r6
 800dc18:	3001      	adds	r0, #1
 800dc1a:	d09d      	beq.n	800db58 <_printf_i+0x140>
 800dc1c:	3501      	adds	r5, #1
 800dc1e:	68e3      	ldr	r3, [r4, #12]
 800dc20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc22:	1a9b      	subs	r3, r3, r2
 800dc24:	42ab      	cmp	r3, r5
 800dc26:	dcf0      	bgt.n	800dc0a <_printf_i+0x1f2>
 800dc28:	e7e9      	b.n	800dbfe <_printf_i+0x1e6>
 800dc2a:	2500      	movs	r5, #0
 800dc2c:	e7f7      	b.n	800dc1e <_printf_i+0x206>
 800dc2e:	46c0      	nop			; (mov r8, r8)
 800dc30:	080112c3 	.word	0x080112c3
 800dc34:	080112d4 	.word	0x080112d4

0800dc38 <std>:
 800dc38:	2300      	movs	r3, #0
 800dc3a:	b510      	push	{r4, lr}
 800dc3c:	0004      	movs	r4, r0
 800dc3e:	6003      	str	r3, [r0, #0]
 800dc40:	6043      	str	r3, [r0, #4]
 800dc42:	6083      	str	r3, [r0, #8]
 800dc44:	8181      	strh	r1, [r0, #12]
 800dc46:	6643      	str	r3, [r0, #100]	; 0x64
 800dc48:	81c2      	strh	r2, [r0, #14]
 800dc4a:	6103      	str	r3, [r0, #16]
 800dc4c:	6143      	str	r3, [r0, #20]
 800dc4e:	6183      	str	r3, [r0, #24]
 800dc50:	0019      	movs	r1, r3
 800dc52:	2208      	movs	r2, #8
 800dc54:	305c      	adds	r0, #92	; 0x5c
 800dc56:	f000 fa49 	bl	800e0ec <memset>
 800dc5a:	4b0b      	ldr	r3, [pc, #44]	; (800dc88 <std+0x50>)
 800dc5c:	6224      	str	r4, [r4, #32]
 800dc5e:	6263      	str	r3, [r4, #36]	; 0x24
 800dc60:	4b0a      	ldr	r3, [pc, #40]	; (800dc8c <std+0x54>)
 800dc62:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc64:	4b0a      	ldr	r3, [pc, #40]	; (800dc90 <std+0x58>)
 800dc66:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dc68:	4b0a      	ldr	r3, [pc, #40]	; (800dc94 <std+0x5c>)
 800dc6a:	6323      	str	r3, [r4, #48]	; 0x30
 800dc6c:	4b0a      	ldr	r3, [pc, #40]	; (800dc98 <std+0x60>)
 800dc6e:	429c      	cmp	r4, r3
 800dc70:	d005      	beq.n	800dc7e <std+0x46>
 800dc72:	4b0a      	ldr	r3, [pc, #40]	; (800dc9c <std+0x64>)
 800dc74:	429c      	cmp	r4, r3
 800dc76:	d002      	beq.n	800dc7e <std+0x46>
 800dc78:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <std+0x68>)
 800dc7a:	429c      	cmp	r4, r3
 800dc7c:	d103      	bne.n	800dc86 <std+0x4e>
 800dc7e:	0020      	movs	r0, r4
 800dc80:	3058      	adds	r0, #88	; 0x58
 800dc82:	f000 fac9 	bl	800e218 <__retarget_lock_init_recursive>
 800dc86:	bd10      	pop	{r4, pc}
 800dc88:	0800df09 	.word	0x0800df09
 800dc8c:	0800df31 	.word	0x0800df31
 800dc90:	0800df69 	.word	0x0800df69
 800dc94:	0800df95 	.word	0x0800df95
 800dc98:	20005b0c 	.word	0x20005b0c
 800dc9c:	20005b74 	.word	0x20005b74
 800dca0:	20005bdc 	.word	0x20005bdc

0800dca4 <stdio_exit_handler>:
 800dca4:	b510      	push	{r4, lr}
 800dca6:	4a03      	ldr	r2, [pc, #12]	; (800dcb4 <stdio_exit_handler+0x10>)
 800dca8:	4903      	ldr	r1, [pc, #12]	; (800dcb8 <stdio_exit_handler+0x14>)
 800dcaa:	4804      	ldr	r0, [pc, #16]	; (800dcbc <stdio_exit_handler+0x18>)
 800dcac:	f000 f86c 	bl	800dd88 <_fwalk_sglue>
 800dcb0:	bd10      	pop	{r4, pc}
 800dcb2:	46c0      	nop			; (mov r8, r8)
 800dcb4:	20000028 	.word	0x20000028
 800dcb8:	0801086d 	.word	0x0801086d
 800dcbc:	200001a0 	.word	0x200001a0

0800dcc0 <cleanup_stdio>:
 800dcc0:	6841      	ldr	r1, [r0, #4]
 800dcc2:	4b0b      	ldr	r3, [pc, #44]	; (800dcf0 <cleanup_stdio+0x30>)
 800dcc4:	b510      	push	{r4, lr}
 800dcc6:	0004      	movs	r4, r0
 800dcc8:	4299      	cmp	r1, r3
 800dcca:	d001      	beq.n	800dcd0 <cleanup_stdio+0x10>
 800dccc:	f002 fdce 	bl	801086c <_fflush_r>
 800dcd0:	68a1      	ldr	r1, [r4, #8]
 800dcd2:	4b08      	ldr	r3, [pc, #32]	; (800dcf4 <cleanup_stdio+0x34>)
 800dcd4:	4299      	cmp	r1, r3
 800dcd6:	d002      	beq.n	800dcde <cleanup_stdio+0x1e>
 800dcd8:	0020      	movs	r0, r4
 800dcda:	f002 fdc7 	bl	801086c <_fflush_r>
 800dcde:	68e1      	ldr	r1, [r4, #12]
 800dce0:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <cleanup_stdio+0x38>)
 800dce2:	4299      	cmp	r1, r3
 800dce4:	d002      	beq.n	800dcec <cleanup_stdio+0x2c>
 800dce6:	0020      	movs	r0, r4
 800dce8:	f002 fdc0 	bl	801086c <_fflush_r>
 800dcec:	bd10      	pop	{r4, pc}
 800dcee:	46c0      	nop			; (mov r8, r8)
 800dcf0:	20005b0c 	.word	0x20005b0c
 800dcf4:	20005b74 	.word	0x20005b74
 800dcf8:	20005bdc 	.word	0x20005bdc

0800dcfc <global_stdio_init.part.0>:
 800dcfc:	b510      	push	{r4, lr}
 800dcfe:	4b09      	ldr	r3, [pc, #36]	; (800dd24 <global_stdio_init.part.0+0x28>)
 800dd00:	4a09      	ldr	r2, [pc, #36]	; (800dd28 <global_stdio_init.part.0+0x2c>)
 800dd02:	2104      	movs	r1, #4
 800dd04:	601a      	str	r2, [r3, #0]
 800dd06:	4809      	ldr	r0, [pc, #36]	; (800dd2c <global_stdio_init.part.0+0x30>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f7ff ff95 	bl	800dc38 <std>
 800dd0e:	2201      	movs	r2, #1
 800dd10:	2109      	movs	r1, #9
 800dd12:	4807      	ldr	r0, [pc, #28]	; (800dd30 <global_stdio_init.part.0+0x34>)
 800dd14:	f7ff ff90 	bl	800dc38 <std>
 800dd18:	2202      	movs	r2, #2
 800dd1a:	2112      	movs	r1, #18
 800dd1c:	4805      	ldr	r0, [pc, #20]	; (800dd34 <global_stdio_init.part.0+0x38>)
 800dd1e:	f7ff ff8b 	bl	800dc38 <std>
 800dd22:	bd10      	pop	{r4, pc}
 800dd24:	20005c44 	.word	0x20005c44
 800dd28:	0800dca5 	.word	0x0800dca5
 800dd2c:	20005b0c 	.word	0x20005b0c
 800dd30:	20005b74 	.word	0x20005b74
 800dd34:	20005bdc 	.word	0x20005bdc

0800dd38 <__sfp_lock_acquire>:
 800dd38:	b510      	push	{r4, lr}
 800dd3a:	4802      	ldr	r0, [pc, #8]	; (800dd44 <__sfp_lock_acquire+0xc>)
 800dd3c:	f000 fa6d 	bl	800e21a <__retarget_lock_acquire_recursive>
 800dd40:	bd10      	pop	{r4, pc}
 800dd42:	46c0      	nop			; (mov r8, r8)
 800dd44:	20005c4d 	.word	0x20005c4d

0800dd48 <__sfp_lock_release>:
 800dd48:	b510      	push	{r4, lr}
 800dd4a:	4802      	ldr	r0, [pc, #8]	; (800dd54 <__sfp_lock_release+0xc>)
 800dd4c:	f000 fa66 	bl	800e21c <__retarget_lock_release_recursive>
 800dd50:	bd10      	pop	{r4, pc}
 800dd52:	46c0      	nop			; (mov r8, r8)
 800dd54:	20005c4d 	.word	0x20005c4d

0800dd58 <__sinit>:
 800dd58:	b510      	push	{r4, lr}
 800dd5a:	0004      	movs	r4, r0
 800dd5c:	f7ff ffec 	bl	800dd38 <__sfp_lock_acquire>
 800dd60:	6a23      	ldr	r3, [r4, #32]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d002      	beq.n	800dd6c <__sinit+0x14>
 800dd66:	f7ff ffef 	bl	800dd48 <__sfp_lock_release>
 800dd6a:	bd10      	pop	{r4, pc}
 800dd6c:	4b04      	ldr	r3, [pc, #16]	; (800dd80 <__sinit+0x28>)
 800dd6e:	6223      	str	r3, [r4, #32]
 800dd70:	4b04      	ldr	r3, [pc, #16]	; (800dd84 <__sinit+0x2c>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1f6      	bne.n	800dd66 <__sinit+0xe>
 800dd78:	f7ff ffc0 	bl	800dcfc <global_stdio_init.part.0>
 800dd7c:	e7f3      	b.n	800dd66 <__sinit+0xe>
 800dd7e:	46c0      	nop			; (mov r8, r8)
 800dd80:	0800dcc1 	.word	0x0800dcc1
 800dd84:	20005c44 	.word	0x20005c44

0800dd88 <_fwalk_sglue>:
 800dd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd8a:	0014      	movs	r4, r2
 800dd8c:	2600      	movs	r6, #0
 800dd8e:	9000      	str	r0, [sp, #0]
 800dd90:	9101      	str	r1, [sp, #4]
 800dd92:	68a5      	ldr	r5, [r4, #8]
 800dd94:	6867      	ldr	r7, [r4, #4]
 800dd96:	3f01      	subs	r7, #1
 800dd98:	d504      	bpl.n	800dda4 <_fwalk_sglue+0x1c>
 800dd9a:	6824      	ldr	r4, [r4, #0]
 800dd9c:	2c00      	cmp	r4, #0
 800dd9e:	d1f8      	bne.n	800dd92 <_fwalk_sglue+0xa>
 800dda0:	0030      	movs	r0, r6
 800dda2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dda4:	89ab      	ldrh	r3, [r5, #12]
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d908      	bls.n	800ddbc <_fwalk_sglue+0x34>
 800ddaa:	220e      	movs	r2, #14
 800ddac:	5eab      	ldrsh	r3, [r5, r2]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	d004      	beq.n	800ddbc <_fwalk_sglue+0x34>
 800ddb2:	0029      	movs	r1, r5
 800ddb4:	9800      	ldr	r0, [sp, #0]
 800ddb6:	9b01      	ldr	r3, [sp, #4]
 800ddb8:	4798      	blx	r3
 800ddba:	4306      	orrs	r6, r0
 800ddbc:	3568      	adds	r5, #104	; 0x68
 800ddbe:	e7ea      	b.n	800dd96 <_fwalk_sglue+0xe>

0800ddc0 <iprintf>:
 800ddc0:	b40f      	push	{r0, r1, r2, r3}
 800ddc2:	b507      	push	{r0, r1, r2, lr}
 800ddc4:	4905      	ldr	r1, [pc, #20]	; (800dddc <iprintf+0x1c>)
 800ddc6:	ab04      	add	r3, sp, #16
 800ddc8:	6808      	ldr	r0, [r1, #0]
 800ddca:	cb04      	ldmia	r3!, {r2}
 800ddcc:	6881      	ldr	r1, [r0, #8]
 800ddce:	9301      	str	r3, [sp, #4]
 800ddd0:	f002 fba6 	bl	8010520 <_vfiprintf_r>
 800ddd4:	b003      	add	sp, #12
 800ddd6:	bc08      	pop	{r3}
 800ddd8:	b004      	add	sp, #16
 800ddda:	4718      	bx	r3
 800dddc:	200001ec 	.word	0x200001ec

0800dde0 <_puts_r>:
 800dde0:	6a03      	ldr	r3, [r0, #32]
 800dde2:	b570      	push	{r4, r5, r6, lr}
 800dde4:	0005      	movs	r5, r0
 800dde6:	000e      	movs	r6, r1
 800dde8:	6884      	ldr	r4, [r0, #8]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d101      	bne.n	800ddf2 <_puts_r+0x12>
 800ddee:	f7ff ffb3 	bl	800dd58 <__sinit>
 800ddf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddf4:	07db      	lsls	r3, r3, #31
 800ddf6:	d405      	bmi.n	800de04 <_puts_r+0x24>
 800ddf8:	89a3      	ldrh	r3, [r4, #12]
 800ddfa:	059b      	lsls	r3, r3, #22
 800ddfc:	d402      	bmi.n	800de04 <_puts_r+0x24>
 800ddfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de00:	f000 fa0b 	bl	800e21a <__retarget_lock_acquire_recursive>
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	071b      	lsls	r3, r3, #28
 800de08:	d502      	bpl.n	800de10 <_puts_r+0x30>
 800de0a:	6923      	ldr	r3, [r4, #16]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d11f      	bne.n	800de50 <_puts_r+0x70>
 800de10:	0021      	movs	r1, r4
 800de12:	0028      	movs	r0, r5
 800de14:	f000 f906 	bl	800e024 <__swsetup_r>
 800de18:	2800      	cmp	r0, #0
 800de1a:	d019      	beq.n	800de50 <_puts_r+0x70>
 800de1c:	2501      	movs	r5, #1
 800de1e:	426d      	negs	r5, r5
 800de20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de22:	07db      	lsls	r3, r3, #31
 800de24:	d405      	bmi.n	800de32 <_puts_r+0x52>
 800de26:	89a3      	ldrh	r3, [r4, #12]
 800de28:	059b      	lsls	r3, r3, #22
 800de2a:	d402      	bmi.n	800de32 <_puts_r+0x52>
 800de2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de2e:	f000 f9f5 	bl	800e21c <__retarget_lock_release_recursive>
 800de32:	0028      	movs	r0, r5
 800de34:	bd70      	pop	{r4, r5, r6, pc}
 800de36:	3601      	adds	r6, #1
 800de38:	60a3      	str	r3, [r4, #8]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	da04      	bge.n	800de48 <_puts_r+0x68>
 800de3e:	69a2      	ldr	r2, [r4, #24]
 800de40:	429a      	cmp	r2, r3
 800de42:	dc16      	bgt.n	800de72 <_puts_r+0x92>
 800de44:	290a      	cmp	r1, #10
 800de46:	d014      	beq.n	800de72 <_puts_r+0x92>
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	1c5a      	adds	r2, r3, #1
 800de4c:	6022      	str	r2, [r4, #0]
 800de4e:	7019      	strb	r1, [r3, #0]
 800de50:	68a3      	ldr	r3, [r4, #8]
 800de52:	7831      	ldrb	r1, [r6, #0]
 800de54:	3b01      	subs	r3, #1
 800de56:	2900      	cmp	r1, #0
 800de58:	d1ed      	bne.n	800de36 <_puts_r+0x56>
 800de5a:	60a3      	str	r3, [r4, #8]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	da0f      	bge.n	800de80 <_puts_r+0xa0>
 800de60:	0028      	movs	r0, r5
 800de62:	0022      	movs	r2, r4
 800de64:	310a      	adds	r1, #10
 800de66:	f000 f89b 	bl	800dfa0 <__swbuf_r>
 800de6a:	250a      	movs	r5, #10
 800de6c:	3001      	adds	r0, #1
 800de6e:	d1d7      	bne.n	800de20 <_puts_r+0x40>
 800de70:	e7d4      	b.n	800de1c <_puts_r+0x3c>
 800de72:	0022      	movs	r2, r4
 800de74:	0028      	movs	r0, r5
 800de76:	f000 f893 	bl	800dfa0 <__swbuf_r>
 800de7a:	3001      	adds	r0, #1
 800de7c:	d1e8      	bne.n	800de50 <_puts_r+0x70>
 800de7e:	e7cd      	b.n	800de1c <_puts_r+0x3c>
 800de80:	250a      	movs	r5, #10
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	1c5a      	adds	r2, r3, #1
 800de86:	6022      	str	r2, [r4, #0]
 800de88:	701d      	strb	r5, [r3, #0]
 800de8a:	e7c9      	b.n	800de20 <_puts_r+0x40>

0800de8c <puts>:
 800de8c:	b510      	push	{r4, lr}
 800de8e:	4b03      	ldr	r3, [pc, #12]	; (800de9c <puts+0x10>)
 800de90:	0001      	movs	r1, r0
 800de92:	6818      	ldr	r0, [r3, #0]
 800de94:	f7ff ffa4 	bl	800dde0 <_puts_r>
 800de98:	bd10      	pop	{r4, pc}
 800de9a:	46c0      	nop			; (mov r8, r8)
 800de9c:	200001ec 	.word	0x200001ec

0800dea0 <sniprintf>:
 800dea0:	b40c      	push	{r2, r3}
 800dea2:	b530      	push	{r4, r5, lr}
 800dea4:	4b17      	ldr	r3, [pc, #92]	; (800df04 <sniprintf+0x64>)
 800dea6:	000c      	movs	r4, r1
 800dea8:	681d      	ldr	r5, [r3, #0]
 800deaa:	b09d      	sub	sp, #116	; 0x74
 800deac:	2900      	cmp	r1, #0
 800deae:	da08      	bge.n	800dec2 <sniprintf+0x22>
 800deb0:	238b      	movs	r3, #139	; 0x8b
 800deb2:	2001      	movs	r0, #1
 800deb4:	602b      	str	r3, [r5, #0]
 800deb6:	4240      	negs	r0, r0
 800deb8:	b01d      	add	sp, #116	; 0x74
 800deba:	bc30      	pop	{r4, r5}
 800debc:	bc08      	pop	{r3}
 800debe:	b002      	add	sp, #8
 800dec0:	4718      	bx	r3
 800dec2:	2382      	movs	r3, #130	; 0x82
 800dec4:	466a      	mov	r2, sp
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	8293      	strh	r3, [r2, #20]
 800deca:	2300      	movs	r3, #0
 800decc:	9002      	str	r0, [sp, #8]
 800dece:	9006      	str	r0, [sp, #24]
 800ded0:	4299      	cmp	r1, r3
 800ded2:	d000      	beq.n	800ded6 <sniprintf+0x36>
 800ded4:	1e4b      	subs	r3, r1, #1
 800ded6:	9304      	str	r3, [sp, #16]
 800ded8:	9307      	str	r3, [sp, #28]
 800deda:	2301      	movs	r3, #1
 800dedc:	466a      	mov	r2, sp
 800dede:	425b      	negs	r3, r3
 800dee0:	82d3      	strh	r3, [r2, #22]
 800dee2:	0028      	movs	r0, r5
 800dee4:	ab21      	add	r3, sp, #132	; 0x84
 800dee6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dee8:	a902      	add	r1, sp, #8
 800deea:	9301      	str	r3, [sp, #4]
 800deec:	f002 f9f0 	bl	80102d0 <_svfiprintf_r>
 800def0:	1c43      	adds	r3, r0, #1
 800def2:	da01      	bge.n	800def8 <sniprintf+0x58>
 800def4:	238b      	movs	r3, #139	; 0x8b
 800def6:	602b      	str	r3, [r5, #0]
 800def8:	2c00      	cmp	r4, #0
 800defa:	d0dd      	beq.n	800deb8 <sniprintf+0x18>
 800defc:	2200      	movs	r2, #0
 800defe:	9b02      	ldr	r3, [sp, #8]
 800df00:	701a      	strb	r2, [r3, #0]
 800df02:	e7d9      	b.n	800deb8 <sniprintf+0x18>
 800df04:	200001ec 	.word	0x200001ec

0800df08 <__sread>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	000c      	movs	r4, r1
 800df0c:	250e      	movs	r5, #14
 800df0e:	5f49      	ldrsh	r1, [r1, r5]
 800df10:	f000 f930 	bl	800e174 <_read_r>
 800df14:	2800      	cmp	r0, #0
 800df16:	db03      	blt.n	800df20 <__sread+0x18>
 800df18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800df1a:	181b      	adds	r3, r3, r0
 800df1c:	6563      	str	r3, [r4, #84]	; 0x54
 800df1e:	bd70      	pop	{r4, r5, r6, pc}
 800df20:	89a3      	ldrh	r3, [r4, #12]
 800df22:	4a02      	ldr	r2, [pc, #8]	; (800df2c <__sread+0x24>)
 800df24:	4013      	ands	r3, r2
 800df26:	81a3      	strh	r3, [r4, #12]
 800df28:	e7f9      	b.n	800df1e <__sread+0x16>
 800df2a:	46c0      	nop			; (mov r8, r8)
 800df2c:	ffffefff 	.word	0xffffefff

0800df30 <__swrite>:
 800df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df32:	001f      	movs	r7, r3
 800df34:	898b      	ldrh	r3, [r1, #12]
 800df36:	0005      	movs	r5, r0
 800df38:	000c      	movs	r4, r1
 800df3a:	0016      	movs	r6, r2
 800df3c:	05db      	lsls	r3, r3, #23
 800df3e:	d505      	bpl.n	800df4c <__swrite+0x1c>
 800df40:	230e      	movs	r3, #14
 800df42:	5ec9      	ldrsh	r1, [r1, r3]
 800df44:	2200      	movs	r2, #0
 800df46:	2302      	movs	r3, #2
 800df48:	f000 f900 	bl	800e14c <_lseek_r>
 800df4c:	89a3      	ldrh	r3, [r4, #12]
 800df4e:	4a05      	ldr	r2, [pc, #20]	; (800df64 <__swrite+0x34>)
 800df50:	0028      	movs	r0, r5
 800df52:	4013      	ands	r3, r2
 800df54:	81a3      	strh	r3, [r4, #12]
 800df56:	0032      	movs	r2, r6
 800df58:	230e      	movs	r3, #14
 800df5a:	5ee1      	ldrsh	r1, [r4, r3]
 800df5c:	003b      	movs	r3, r7
 800df5e:	f000 f91d 	bl	800e19c <_write_r>
 800df62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df64:	ffffefff 	.word	0xffffefff

0800df68 <__sseek>:
 800df68:	b570      	push	{r4, r5, r6, lr}
 800df6a:	000c      	movs	r4, r1
 800df6c:	250e      	movs	r5, #14
 800df6e:	5f49      	ldrsh	r1, [r1, r5]
 800df70:	f000 f8ec 	bl	800e14c <_lseek_r>
 800df74:	89a3      	ldrh	r3, [r4, #12]
 800df76:	1c42      	adds	r2, r0, #1
 800df78:	d103      	bne.n	800df82 <__sseek+0x1a>
 800df7a:	4a05      	ldr	r2, [pc, #20]	; (800df90 <__sseek+0x28>)
 800df7c:	4013      	ands	r3, r2
 800df7e:	81a3      	strh	r3, [r4, #12]
 800df80:	bd70      	pop	{r4, r5, r6, pc}
 800df82:	2280      	movs	r2, #128	; 0x80
 800df84:	0152      	lsls	r2, r2, #5
 800df86:	4313      	orrs	r3, r2
 800df88:	81a3      	strh	r3, [r4, #12]
 800df8a:	6560      	str	r0, [r4, #84]	; 0x54
 800df8c:	e7f8      	b.n	800df80 <__sseek+0x18>
 800df8e:	46c0      	nop			; (mov r8, r8)
 800df90:	ffffefff 	.word	0xffffefff

0800df94 <__sclose>:
 800df94:	b510      	push	{r4, lr}
 800df96:	230e      	movs	r3, #14
 800df98:	5ec9      	ldrsh	r1, [r1, r3]
 800df9a:	f000 f8c5 	bl	800e128 <_close_r>
 800df9e:	bd10      	pop	{r4, pc}

0800dfa0 <__swbuf_r>:
 800dfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa2:	0006      	movs	r6, r0
 800dfa4:	000d      	movs	r5, r1
 800dfa6:	0014      	movs	r4, r2
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d004      	beq.n	800dfb6 <__swbuf_r+0x16>
 800dfac:	6a03      	ldr	r3, [r0, #32]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d101      	bne.n	800dfb6 <__swbuf_r+0x16>
 800dfb2:	f7ff fed1 	bl	800dd58 <__sinit>
 800dfb6:	69a3      	ldr	r3, [r4, #24]
 800dfb8:	60a3      	str	r3, [r4, #8]
 800dfba:	89a3      	ldrh	r3, [r4, #12]
 800dfbc:	071b      	lsls	r3, r3, #28
 800dfbe:	d528      	bpl.n	800e012 <__swbuf_r+0x72>
 800dfc0:	6923      	ldr	r3, [r4, #16]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d025      	beq.n	800e012 <__swbuf_r+0x72>
 800dfc6:	6923      	ldr	r3, [r4, #16]
 800dfc8:	6820      	ldr	r0, [r4, #0]
 800dfca:	b2ef      	uxtb	r7, r5
 800dfcc:	1ac0      	subs	r0, r0, r3
 800dfce:	6963      	ldr	r3, [r4, #20]
 800dfd0:	b2ed      	uxtb	r5, r5
 800dfd2:	4283      	cmp	r3, r0
 800dfd4:	dc05      	bgt.n	800dfe2 <__swbuf_r+0x42>
 800dfd6:	0021      	movs	r1, r4
 800dfd8:	0030      	movs	r0, r6
 800dfda:	f002 fc47 	bl	801086c <_fflush_r>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d11d      	bne.n	800e01e <__swbuf_r+0x7e>
 800dfe2:	68a3      	ldr	r3, [r4, #8]
 800dfe4:	3001      	adds	r0, #1
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	60a3      	str	r3, [r4, #8]
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	1c5a      	adds	r2, r3, #1
 800dfee:	6022      	str	r2, [r4, #0]
 800dff0:	701f      	strb	r7, [r3, #0]
 800dff2:	6963      	ldr	r3, [r4, #20]
 800dff4:	4283      	cmp	r3, r0
 800dff6:	d004      	beq.n	800e002 <__swbuf_r+0x62>
 800dff8:	89a3      	ldrh	r3, [r4, #12]
 800dffa:	07db      	lsls	r3, r3, #31
 800dffc:	d507      	bpl.n	800e00e <__swbuf_r+0x6e>
 800dffe:	2d0a      	cmp	r5, #10
 800e000:	d105      	bne.n	800e00e <__swbuf_r+0x6e>
 800e002:	0021      	movs	r1, r4
 800e004:	0030      	movs	r0, r6
 800e006:	f002 fc31 	bl	801086c <_fflush_r>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d107      	bne.n	800e01e <__swbuf_r+0x7e>
 800e00e:	0028      	movs	r0, r5
 800e010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e012:	0021      	movs	r1, r4
 800e014:	0030      	movs	r0, r6
 800e016:	f000 f805 	bl	800e024 <__swsetup_r>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	d0d3      	beq.n	800dfc6 <__swbuf_r+0x26>
 800e01e:	2501      	movs	r5, #1
 800e020:	426d      	negs	r5, r5
 800e022:	e7f4      	b.n	800e00e <__swbuf_r+0x6e>

0800e024 <__swsetup_r>:
 800e024:	4b30      	ldr	r3, [pc, #192]	; (800e0e8 <__swsetup_r+0xc4>)
 800e026:	b570      	push	{r4, r5, r6, lr}
 800e028:	0005      	movs	r5, r0
 800e02a:	6818      	ldr	r0, [r3, #0]
 800e02c:	000c      	movs	r4, r1
 800e02e:	2800      	cmp	r0, #0
 800e030:	d004      	beq.n	800e03c <__swsetup_r+0x18>
 800e032:	6a03      	ldr	r3, [r0, #32]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d101      	bne.n	800e03c <__swsetup_r+0x18>
 800e038:	f7ff fe8e 	bl	800dd58 <__sinit>
 800e03c:	230c      	movs	r3, #12
 800e03e:	5ee2      	ldrsh	r2, [r4, r3]
 800e040:	b293      	uxth	r3, r2
 800e042:	0711      	lsls	r1, r2, #28
 800e044:	d423      	bmi.n	800e08e <__swsetup_r+0x6a>
 800e046:	06d9      	lsls	r1, r3, #27
 800e048:	d407      	bmi.n	800e05a <__swsetup_r+0x36>
 800e04a:	2309      	movs	r3, #9
 800e04c:	2001      	movs	r0, #1
 800e04e:	602b      	str	r3, [r5, #0]
 800e050:	3337      	adds	r3, #55	; 0x37
 800e052:	4313      	orrs	r3, r2
 800e054:	81a3      	strh	r3, [r4, #12]
 800e056:	4240      	negs	r0, r0
 800e058:	bd70      	pop	{r4, r5, r6, pc}
 800e05a:	075b      	lsls	r3, r3, #29
 800e05c:	d513      	bpl.n	800e086 <__swsetup_r+0x62>
 800e05e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e060:	2900      	cmp	r1, #0
 800e062:	d008      	beq.n	800e076 <__swsetup_r+0x52>
 800e064:	0023      	movs	r3, r4
 800e066:	3344      	adds	r3, #68	; 0x44
 800e068:	4299      	cmp	r1, r3
 800e06a:	d002      	beq.n	800e072 <__swsetup_r+0x4e>
 800e06c:	0028      	movs	r0, r5
 800e06e:	f000 ff8f 	bl	800ef90 <_free_r>
 800e072:	2300      	movs	r3, #0
 800e074:	6363      	str	r3, [r4, #52]	; 0x34
 800e076:	2224      	movs	r2, #36	; 0x24
 800e078:	89a3      	ldrh	r3, [r4, #12]
 800e07a:	4393      	bics	r3, r2
 800e07c:	81a3      	strh	r3, [r4, #12]
 800e07e:	2300      	movs	r3, #0
 800e080:	6063      	str	r3, [r4, #4]
 800e082:	6923      	ldr	r3, [r4, #16]
 800e084:	6023      	str	r3, [r4, #0]
 800e086:	2308      	movs	r3, #8
 800e088:	89a2      	ldrh	r2, [r4, #12]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	81a3      	strh	r3, [r4, #12]
 800e08e:	6923      	ldr	r3, [r4, #16]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10b      	bne.n	800e0ac <__swsetup_r+0x88>
 800e094:	21a0      	movs	r1, #160	; 0xa0
 800e096:	2280      	movs	r2, #128	; 0x80
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	0089      	lsls	r1, r1, #2
 800e09c:	0092      	lsls	r2, r2, #2
 800e09e:	400b      	ands	r3, r1
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d003      	beq.n	800e0ac <__swsetup_r+0x88>
 800e0a4:	0021      	movs	r1, r4
 800e0a6:	0028      	movs	r0, r5
 800e0a8:	f002 fc34 	bl	8010914 <__smakebuf_r>
 800e0ac:	220c      	movs	r2, #12
 800e0ae:	5ea3      	ldrsh	r3, [r4, r2]
 800e0b0:	2001      	movs	r0, #1
 800e0b2:	001a      	movs	r2, r3
 800e0b4:	b299      	uxth	r1, r3
 800e0b6:	4002      	ands	r2, r0
 800e0b8:	4203      	tst	r3, r0
 800e0ba:	d00f      	beq.n	800e0dc <__swsetup_r+0xb8>
 800e0bc:	2200      	movs	r2, #0
 800e0be:	60a2      	str	r2, [r4, #8]
 800e0c0:	6962      	ldr	r2, [r4, #20]
 800e0c2:	4252      	negs	r2, r2
 800e0c4:	61a2      	str	r2, [r4, #24]
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	6922      	ldr	r2, [r4, #16]
 800e0ca:	4282      	cmp	r2, r0
 800e0cc:	d1c4      	bne.n	800e058 <__swsetup_r+0x34>
 800e0ce:	0609      	lsls	r1, r1, #24
 800e0d0:	d5c2      	bpl.n	800e058 <__swsetup_r+0x34>
 800e0d2:	2240      	movs	r2, #64	; 0x40
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	81a3      	strh	r3, [r4, #12]
 800e0d8:	3801      	subs	r0, #1
 800e0da:	e7bd      	b.n	800e058 <__swsetup_r+0x34>
 800e0dc:	0788      	lsls	r0, r1, #30
 800e0de:	d400      	bmi.n	800e0e2 <__swsetup_r+0xbe>
 800e0e0:	6962      	ldr	r2, [r4, #20]
 800e0e2:	60a2      	str	r2, [r4, #8]
 800e0e4:	e7ef      	b.n	800e0c6 <__swsetup_r+0xa2>
 800e0e6:	46c0      	nop			; (mov r8, r8)
 800e0e8:	200001ec 	.word	0x200001ec

0800e0ec <memset>:
 800e0ec:	0003      	movs	r3, r0
 800e0ee:	1882      	adds	r2, r0, r2
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d100      	bne.n	800e0f6 <memset+0xa>
 800e0f4:	4770      	bx	lr
 800e0f6:	7019      	strb	r1, [r3, #0]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	e7f9      	b.n	800e0f0 <memset+0x4>

0800e0fc <strncmp>:
 800e0fc:	b530      	push	{r4, r5, lr}
 800e0fe:	0005      	movs	r5, r0
 800e100:	1e10      	subs	r0, r2, #0
 800e102:	d00b      	beq.n	800e11c <strncmp+0x20>
 800e104:	2400      	movs	r4, #0
 800e106:	3a01      	subs	r2, #1
 800e108:	5d2b      	ldrb	r3, [r5, r4]
 800e10a:	5d08      	ldrb	r0, [r1, r4]
 800e10c:	4283      	cmp	r3, r0
 800e10e:	d104      	bne.n	800e11a <strncmp+0x1e>
 800e110:	42a2      	cmp	r2, r4
 800e112:	d002      	beq.n	800e11a <strncmp+0x1e>
 800e114:	3401      	adds	r4, #1
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1f6      	bne.n	800e108 <strncmp+0xc>
 800e11a:	1a18      	subs	r0, r3, r0
 800e11c:	bd30      	pop	{r4, r5, pc}
	...

0800e120 <_localeconv_r>:
 800e120:	4800      	ldr	r0, [pc, #0]	; (800e124 <_localeconv_r+0x4>)
 800e122:	4770      	bx	lr
 800e124:	20000124 	.word	0x20000124

0800e128 <_close_r>:
 800e128:	2300      	movs	r3, #0
 800e12a:	b570      	push	{r4, r5, r6, lr}
 800e12c:	4d06      	ldr	r5, [pc, #24]	; (800e148 <_close_r+0x20>)
 800e12e:	0004      	movs	r4, r0
 800e130:	0008      	movs	r0, r1
 800e132:	602b      	str	r3, [r5, #0]
 800e134:	f7f5 fbb1 	bl	800389a <_close>
 800e138:	1c43      	adds	r3, r0, #1
 800e13a:	d103      	bne.n	800e144 <_close_r+0x1c>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d000      	beq.n	800e144 <_close_r+0x1c>
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	bd70      	pop	{r4, r5, r6, pc}
 800e146:	46c0      	nop			; (mov r8, r8)
 800e148:	20005c48 	.word	0x20005c48

0800e14c <_lseek_r>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	0004      	movs	r4, r0
 800e150:	0008      	movs	r0, r1
 800e152:	0011      	movs	r1, r2
 800e154:	001a      	movs	r2, r3
 800e156:	2300      	movs	r3, #0
 800e158:	4d05      	ldr	r5, [pc, #20]	; (800e170 <_lseek_r+0x24>)
 800e15a:	602b      	str	r3, [r5, #0]
 800e15c:	f7f5 fbbe 	bl	80038dc <_lseek>
 800e160:	1c43      	adds	r3, r0, #1
 800e162:	d103      	bne.n	800e16c <_lseek_r+0x20>
 800e164:	682b      	ldr	r3, [r5, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d000      	beq.n	800e16c <_lseek_r+0x20>
 800e16a:	6023      	str	r3, [r4, #0]
 800e16c:	bd70      	pop	{r4, r5, r6, pc}
 800e16e:	46c0      	nop			; (mov r8, r8)
 800e170:	20005c48 	.word	0x20005c48

0800e174 <_read_r>:
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	0004      	movs	r4, r0
 800e178:	0008      	movs	r0, r1
 800e17a:	0011      	movs	r1, r2
 800e17c:	001a      	movs	r2, r3
 800e17e:	2300      	movs	r3, #0
 800e180:	4d05      	ldr	r5, [pc, #20]	; (800e198 <_read_r+0x24>)
 800e182:	602b      	str	r3, [r5, #0]
 800e184:	f7f5 fb50 	bl	8003828 <_read>
 800e188:	1c43      	adds	r3, r0, #1
 800e18a:	d103      	bne.n	800e194 <_read_r+0x20>
 800e18c:	682b      	ldr	r3, [r5, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d000      	beq.n	800e194 <_read_r+0x20>
 800e192:	6023      	str	r3, [r4, #0]
 800e194:	bd70      	pop	{r4, r5, r6, pc}
 800e196:	46c0      	nop			; (mov r8, r8)
 800e198:	20005c48 	.word	0x20005c48

0800e19c <_write_r>:
 800e19c:	b570      	push	{r4, r5, r6, lr}
 800e19e:	0004      	movs	r4, r0
 800e1a0:	0008      	movs	r0, r1
 800e1a2:	0011      	movs	r1, r2
 800e1a4:	001a      	movs	r2, r3
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	4d05      	ldr	r5, [pc, #20]	; (800e1c0 <_write_r+0x24>)
 800e1aa:	602b      	str	r3, [r5, #0]
 800e1ac:	f7f5 fb59 	bl	8003862 <_write>
 800e1b0:	1c43      	adds	r3, r0, #1
 800e1b2:	d103      	bne.n	800e1bc <_write_r+0x20>
 800e1b4:	682b      	ldr	r3, [r5, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d000      	beq.n	800e1bc <_write_r+0x20>
 800e1ba:	6023      	str	r3, [r4, #0]
 800e1bc:	bd70      	pop	{r4, r5, r6, pc}
 800e1be:	46c0      	nop			; (mov r8, r8)
 800e1c0:	20005c48 	.word	0x20005c48

0800e1c4 <__errno>:
 800e1c4:	4b01      	ldr	r3, [pc, #4]	; (800e1cc <__errno+0x8>)
 800e1c6:	6818      	ldr	r0, [r3, #0]
 800e1c8:	4770      	bx	lr
 800e1ca:	46c0      	nop			; (mov r8, r8)
 800e1cc:	200001ec 	.word	0x200001ec

0800e1d0 <__libc_init_array>:
 800e1d0:	b570      	push	{r4, r5, r6, lr}
 800e1d2:	2600      	movs	r6, #0
 800e1d4:	4c0c      	ldr	r4, [pc, #48]	; (800e208 <__libc_init_array+0x38>)
 800e1d6:	4d0d      	ldr	r5, [pc, #52]	; (800e20c <__libc_init_array+0x3c>)
 800e1d8:	1b64      	subs	r4, r4, r5
 800e1da:	10a4      	asrs	r4, r4, #2
 800e1dc:	42a6      	cmp	r6, r4
 800e1de:	d109      	bne.n	800e1f4 <__libc_init_array+0x24>
 800e1e0:	2600      	movs	r6, #0
 800e1e2:	f002 fd03 	bl	8010bec <_init>
 800e1e6:	4c0a      	ldr	r4, [pc, #40]	; (800e210 <__libc_init_array+0x40>)
 800e1e8:	4d0a      	ldr	r5, [pc, #40]	; (800e214 <__libc_init_array+0x44>)
 800e1ea:	1b64      	subs	r4, r4, r5
 800e1ec:	10a4      	asrs	r4, r4, #2
 800e1ee:	42a6      	cmp	r6, r4
 800e1f0:	d105      	bne.n	800e1fe <__libc_init_array+0x2e>
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
 800e1f4:	00b3      	lsls	r3, r6, #2
 800e1f6:	58eb      	ldr	r3, [r5, r3]
 800e1f8:	4798      	blx	r3
 800e1fa:	3601      	adds	r6, #1
 800e1fc:	e7ee      	b.n	800e1dc <__libc_init_array+0xc>
 800e1fe:	00b3      	lsls	r3, r6, #2
 800e200:	58eb      	ldr	r3, [r5, r3]
 800e202:	4798      	blx	r3
 800e204:	3601      	adds	r6, #1
 800e206:	e7f2      	b.n	800e1ee <__libc_init_array+0x1e>
 800e208:	08011584 	.word	0x08011584
 800e20c:	08011584 	.word	0x08011584
 800e210:	08011588 	.word	0x08011588
 800e214:	08011584 	.word	0x08011584

0800e218 <__retarget_lock_init_recursive>:
 800e218:	4770      	bx	lr

0800e21a <__retarget_lock_acquire_recursive>:
 800e21a:	4770      	bx	lr

0800e21c <__retarget_lock_release_recursive>:
 800e21c:	4770      	bx	lr

0800e21e <memchr>:
 800e21e:	b2c9      	uxtb	r1, r1
 800e220:	1882      	adds	r2, r0, r2
 800e222:	4290      	cmp	r0, r2
 800e224:	d101      	bne.n	800e22a <memchr+0xc>
 800e226:	2000      	movs	r0, #0
 800e228:	4770      	bx	lr
 800e22a:	7803      	ldrb	r3, [r0, #0]
 800e22c:	428b      	cmp	r3, r1
 800e22e:	d0fb      	beq.n	800e228 <memchr+0xa>
 800e230:	3001      	adds	r0, #1
 800e232:	e7f6      	b.n	800e222 <memchr+0x4>

0800e234 <memcpy>:
 800e234:	2300      	movs	r3, #0
 800e236:	b510      	push	{r4, lr}
 800e238:	429a      	cmp	r2, r3
 800e23a:	d100      	bne.n	800e23e <memcpy+0xa>
 800e23c:	bd10      	pop	{r4, pc}
 800e23e:	5ccc      	ldrb	r4, [r1, r3]
 800e240:	54c4      	strb	r4, [r0, r3]
 800e242:	3301      	adds	r3, #1
 800e244:	e7f8      	b.n	800e238 <memcpy+0x4>
	...

0800e248 <nan>:
 800e248:	2000      	movs	r0, #0
 800e24a:	4901      	ldr	r1, [pc, #4]	; (800e250 <nan+0x8>)
 800e24c:	4770      	bx	lr
 800e24e:	46c0      	nop			; (mov r8, r8)
 800e250:	7ff80000 	.word	0x7ff80000

0800e254 <quorem>:
 800e254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e256:	6902      	ldr	r2, [r0, #16]
 800e258:	690b      	ldr	r3, [r1, #16]
 800e25a:	b089      	sub	sp, #36	; 0x24
 800e25c:	0007      	movs	r7, r0
 800e25e:	9104      	str	r1, [sp, #16]
 800e260:	2000      	movs	r0, #0
 800e262:	429a      	cmp	r2, r3
 800e264:	db69      	blt.n	800e33a <quorem+0xe6>
 800e266:	3b01      	subs	r3, #1
 800e268:	009c      	lsls	r4, r3, #2
 800e26a:	9301      	str	r3, [sp, #4]
 800e26c:	000b      	movs	r3, r1
 800e26e:	3314      	adds	r3, #20
 800e270:	9306      	str	r3, [sp, #24]
 800e272:	191b      	adds	r3, r3, r4
 800e274:	9305      	str	r3, [sp, #20]
 800e276:	003b      	movs	r3, r7
 800e278:	3314      	adds	r3, #20
 800e27a:	9303      	str	r3, [sp, #12]
 800e27c:	191c      	adds	r4, r3, r4
 800e27e:	9b05      	ldr	r3, [sp, #20]
 800e280:	6826      	ldr	r6, [r4, #0]
 800e282:	681d      	ldr	r5, [r3, #0]
 800e284:	0030      	movs	r0, r6
 800e286:	3501      	adds	r5, #1
 800e288:	0029      	movs	r1, r5
 800e28a:	f7f1 ff63 	bl	8000154 <__udivsi3>
 800e28e:	9002      	str	r0, [sp, #8]
 800e290:	42ae      	cmp	r6, r5
 800e292:	d329      	bcc.n	800e2e8 <quorem+0x94>
 800e294:	9b06      	ldr	r3, [sp, #24]
 800e296:	2600      	movs	r6, #0
 800e298:	469c      	mov	ip, r3
 800e29a:	9d03      	ldr	r5, [sp, #12]
 800e29c:	9606      	str	r6, [sp, #24]
 800e29e:	4662      	mov	r2, ip
 800e2a0:	ca08      	ldmia	r2!, {r3}
 800e2a2:	6828      	ldr	r0, [r5, #0]
 800e2a4:	4694      	mov	ip, r2
 800e2a6:	9a02      	ldr	r2, [sp, #8]
 800e2a8:	b299      	uxth	r1, r3
 800e2aa:	4351      	muls	r1, r2
 800e2ac:	0c1b      	lsrs	r3, r3, #16
 800e2ae:	4353      	muls	r3, r2
 800e2b0:	1989      	adds	r1, r1, r6
 800e2b2:	0c0a      	lsrs	r2, r1, #16
 800e2b4:	189b      	adds	r3, r3, r2
 800e2b6:	9307      	str	r3, [sp, #28]
 800e2b8:	0c1e      	lsrs	r6, r3, #16
 800e2ba:	9b06      	ldr	r3, [sp, #24]
 800e2bc:	b282      	uxth	r2, r0
 800e2be:	18d2      	adds	r2, r2, r3
 800e2c0:	466b      	mov	r3, sp
 800e2c2:	b289      	uxth	r1, r1
 800e2c4:	8b9b      	ldrh	r3, [r3, #28]
 800e2c6:	1a52      	subs	r2, r2, r1
 800e2c8:	0c01      	lsrs	r1, r0, #16
 800e2ca:	1ac9      	subs	r1, r1, r3
 800e2cc:	1413      	asrs	r3, r2, #16
 800e2ce:	18cb      	adds	r3, r1, r3
 800e2d0:	1419      	asrs	r1, r3, #16
 800e2d2:	b292      	uxth	r2, r2
 800e2d4:	041b      	lsls	r3, r3, #16
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	c508      	stmia	r5!, {r3}
 800e2da:	9b05      	ldr	r3, [sp, #20]
 800e2dc:	9106      	str	r1, [sp, #24]
 800e2de:	4563      	cmp	r3, ip
 800e2e0:	d2dd      	bcs.n	800e29e <quorem+0x4a>
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d030      	beq.n	800e34a <quorem+0xf6>
 800e2e8:	0038      	movs	r0, r7
 800e2ea:	9904      	ldr	r1, [sp, #16]
 800e2ec:	f001 fd98 	bl	800fe20 <__mcmp>
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	db21      	blt.n	800e338 <quorem+0xe4>
 800e2f4:	0038      	movs	r0, r7
 800e2f6:	2600      	movs	r6, #0
 800e2f8:	9b02      	ldr	r3, [sp, #8]
 800e2fa:	9c04      	ldr	r4, [sp, #16]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	9302      	str	r3, [sp, #8]
 800e300:	3014      	adds	r0, #20
 800e302:	3414      	adds	r4, #20
 800e304:	6803      	ldr	r3, [r0, #0]
 800e306:	cc02      	ldmia	r4!, {r1}
 800e308:	b29d      	uxth	r5, r3
 800e30a:	19ad      	adds	r5, r5, r6
 800e30c:	b28a      	uxth	r2, r1
 800e30e:	1aaa      	subs	r2, r5, r2
 800e310:	0c09      	lsrs	r1, r1, #16
 800e312:	0c1b      	lsrs	r3, r3, #16
 800e314:	1a5b      	subs	r3, r3, r1
 800e316:	1411      	asrs	r1, r2, #16
 800e318:	185b      	adds	r3, r3, r1
 800e31a:	141e      	asrs	r6, r3, #16
 800e31c:	b292      	uxth	r2, r2
 800e31e:	041b      	lsls	r3, r3, #16
 800e320:	4313      	orrs	r3, r2
 800e322:	c008      	stmia	r0!, {r3}
 800e324:	9b05      	ldr	r3, [sp, #20]
 800e326:	42a3      	cmp	r3, r4
 800e328:	d2ec      	bcs.n	800e304 <quorem+0xb0>
 800e32a:	9b01      	ldr	r3, [sp, #4]
 800e32c:	9a03      	ldr	r2, [sp, #12]
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	18d3      	adds	r3, r2, r3
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	2a00      	cmp	r2, #0
 800e336:	d015      	beq.n	800e364 <quorem+0x110>
 800e338:	9802      	ldr	r0, [sp, #8]
 800e33a:	b009      	add	sp, #36	; 0x24
 800e33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e33e:	6823      	ldr	r3, [r4, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d106      	bne.n	800e352 <quorem+0xfe>
 800e344:	9b01      	ldr	r3, [sp, #4]
 800e346:	3b01      	subs	r3, #1
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	9b03      	ldr	r3, [sp, #12]
 800e34c:	3c04      	subs	r4, #4
 800e34e:	42a3      	cmp	r3, r4
 800e350:	d3f5      	bcc.n	800e33e <quorem+0xea>
 800e352:	9b01      	ldr	r3, [sp, #4]
 800e354:	613b      	str	r3, [r7, #16]
 800e356:	e7c7      	b.n	800e2e8 <quorem+0x94>
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	2a00      	cmp	r2, #0
 800e35c:	d106      	bne.n	800e36c <quorem+0x118>
 800e35e:	9a01      	ldr	r2, [sp, #4]
 800e360:	3a01      	subs	r2, #1
 800e362:	9201      	str	r2, [sp, #4]
 800e364:	9a03      	ldr	r2, [sp, #12]
 800e366:	3b04      	subs	r3, #4
 800e368:	429a      	cmp	r2, r3
 800e36a:	d3f5      	bcc.n	800e358 <quorem+0x104>
 800e36c:	9b01      	ldr	r3, [sp, #4]
 800e36e:	613b      	str	r3, [r7, #16]
 800e370:	e7e2      	b.n	800e338 <quorem+0xe4>
	...

0800e374 <_dtoa_r>:
 800e374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e376:	0014      	movs	r4, r2
 800e378:	001d      	movs	r5, r3
 800e37a:	69c6      	ldr	r6, [r0, #28]
 800e37c:	b09d      	sub	sp, #116	; 0x74
 800e37e:	9408      	str	r4, [sp, #32]
 800e380:	9509      	str	r5, [sp, #36]	; 0x24
 800e382:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800e384:	9004      	str	r0, [sp, #16]
 800e386:	2e00      	cmp	r6, #0
 800e388:	d10f      	bne.n	800e3aa <_dtoa_r+0x36>
 800e38a:	2010      	movs	r0, #16
 800e38c:	f001 f9a6 	bl	800f6dc <malloc>
 800e390:	9b04      	ldr	r3, [sp, #16]
 800e392:	1e02      	subs	r2, r0, #0
 800e394:	61d8      	str	r0, [r3, #28]
 800e396:	d104      	bne.n	800e3a2 <_dtoa_r+0x2e>
 800e398:	21ef      	movs	r1, #239	; 0xef
 800e39a:	4bc6      	ldr	r3, [pc, #792]	; (800e6b4 <_dtoa_r+0x340>)
 800e39c:	48c6      	ldr	r0, [pc, #792]	; (800e6b8 <_dtoa_r+0x344>)
 800e39e:	f002 fb41 	bl	8010a24 <__assert_func>
 800e3a2:	6046      	str	r6, [r0, #4]
 800e3a4:	6086      	str	r6, [r0, #8]
 800e3a6:	6006      	str	r6, [r0, #0]
 800e3a8:	60c6      	str	r6, [r0, #12]
 800e3aa:	9b04      	ldr	r3, [sp, #16]
 800e3ac:	69db      	ldr	r3, [r3, #28]
 800e3ae:	6819      	ldr	r1, [r3, #0]
 800e3b0:	2900      	cmp	r1, #0
 800e3b2:	d00b      	beq.n	800e3cc <_dtoa_r+0x58>
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	4093      	lsls	r3, r2
 800e3ba:	604a      	str	r2, [r1, #4]
 800e3bc:	608b      	str	r3, [r1, #8]
 800e3be:	9804      	ldr	r0, [sp, #16]
 800e3c0:	f001 faa0 	bl	800f904 <_Bfree>
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	9b04      	ldr	r3, [sp, #16]
 800e3c8:	69db      	ldr	r3, [r3, #28]
 800e3ca:	601a      	str	r2, [r3, #0]
 800e3cc:	2d00      	cmp	r5, #0
 800e3ce:	da1e      	bge.n	800e40e <_dtoa_r+0x9a>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	603b      	str	r3, [r7, #0]
 800e3d4:	006b      	lsls	r3, r5, #1
 800e3d6:	085b      	lsrs	r3, r3, #1
 800e3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e3da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e3dc:	4bb7      	ldr	r3, [pc, #732]	; (800e6bc <_dtoa_r+0x348>)
 800e3de:	4ab7      	ldr	r2, [pc, #732]	; (800e6bc <_dtoa_r+0x348>)
 800e3e0:	403b      	ands	r3, r7
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d116      	bne.n	800e414 <_dtoa_r+0xa0>
 800e3e6:	4bb6      	ldr	r3, [pc, #728]	; (800e6c0 <_dtoa_r+0x34c>)
 800e3e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e3ea:	6013      	str	r3, [r2, #0]
 800e3ec:	033b      	lsls	r3, r7, #12
 800e3ee:	0b1b      	lsrs	r3, r3, #12
 800e3f0:	4323      	orrs	r3, r4
 800e3f2:	d101      	bne.n	800e3f8 <_dtoa_r+0x84>
 800e3f4:	f000 fdb5 	bl	800ef62 <_dtoa_r+0xbee>
 800e3f8:	4bb2      	ldr	r3, [pc, #712]	; (800e6c4 <_dtoa_r+0x350>)
 800e3fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e3fc:	9306      	str	r3, [sp, #24]
 800e3fe:	2a00      	cmp	r2, #0
 800e400:	d002      	beq.n	800e408 <_dtoa_r+0x94>
 800e402:	4bb1      	ldr	r3, [pc, #708]	; (800e6c8 <_dtoa_r+0x354>)
 800e404:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e406:	6013      	str	r3, [r2, #0]
 800e408:	9806      	ldr	r0, [sp, #24]
 800e40a:	b01d      	add	sp, #116	; 0x74
 800e40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e40e:	2300      	movs	r3, #0
 800e410:	603b      	str	r3, [r7, #0]
 800e412:	e7e2      	b.n	800e3da <_dtoa_r+0x66>
 800e414:	9a08      	ldr	r2, [sp, #32]
 800e416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e418:	9210      	str	r2, [sp, #64]	; 0x40
 800e41a:	9311      	str	r3, [sp, #68]	; 0x44
 800e41c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e41e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e420:	2200      	movs	r2, #0
 800e422:	2300      	movs	r3, #0
 800e424:	f7f2 f81c 	bl	8000460 <__aeabi_dcmpeq>
 800e428:	1e06      	subs	r6, r0, #0
 800e42a:	d009      	beq.n	800e440 <_dtoa_r+0xcc>
 800e42c:	2301      	movs	r3, #1
 800e42e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e430:	6013      	str	r3, [r2, #0]
 800e432:	4ba6      	ldr	r3, [pc, #664]	; (800e6cc <_dtoa_r+0x358>)
 800e434:	9306      	str	r3, [sp, #24]
 800e436:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d0e5      	beq.n	800e408 <_dtoa_r+0x94>
 800e43c:	4ba4      	ldr	r3, [pc, #656]	; (800e6d0 <_dtoa_r+0x35c>)
 800e43e:	e7e1      	b.n	800e404 <_dtoa_r+0x90>
 800e440:	ab1a      	add	r3, sp, #104	; 0x68
 800e442:	9301      	str	r3, [sp, #4]
 800e444:	ab1b      	add	r3, sp, #108	; 0x6c
 800e446:	9300      	str	r3, [sp, #0]
 800e448:	9804      	ldr	r0, [sp, #16]
 800e44a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e44c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e44e:	f001 fe03 	bl	8010058 <__d2b>
 800e452:	007a      	lsls	r2, r7, #1
 800e454:	9005      	str	r0, [sp, #20]
 800e456:	0d52      	lsrs	r2, r2, #21
 800e458:	d100      	bne.n	800e45c <_dtoa_r+0xe8>
 800e45a:	e07b      	b.n	800e554 <_dtoa_r+0x1e0>
 800e45c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e45e:	9617      	str	r6, [sp, #92]	; 0x5c
 800e460:	0319      	lsls	r1, r3, #12
 800e462:	4b9c      	ldr	r3, [pc, #624]	; (800e6d4 <_dtoa_r+0x360>)
 800e464:	0b09      	lsrs	r1, r1, #12
 800e466:	430b      	orrs	r3, r1
 800e468:	499b      	ldr	r1, [pc, #620]	; (800e6d8 <_dtoa_r+0x364>)
 800e46a:	1857      	adds	r7, r2, r1
 800e46c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e46e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e470:	0019      	movs	r1, r3
 800e472:	2200      	movs	r2, #0
 800e474:	4b99      	ldr	r3, [pc, #612]	; (800e6dc <_dtoa_r+0x368>)
 800e476:	f7f4 f9b1 	bl	80027dc <__aeabi_dsub>
 800e47a:	4a99      	ldr	r2, [pc, #612]	; (800e6e0 <_dtoa_r+0x36c>)
 800e47c:	4b99      	ldr	r3, [pc, #612]	; (800e6e4 <_dtoa_r+0x370>)
 800e47e:	f7f3 feeb 	bl	8002258 <__aeabi_dmul>
 800e482:	4a99      	ldr	r2, [pc, #612]	; (800e6e8 <_dtoa_r+0x374>)
 800e484:	4b99      	ldr	r3, [pc, #612]	; (800e6ec <_dtoa_r+0x378>)
 800e486:	f7f2 ff8d 	bl	80013a4 <__aeabi_dadd>
 800e48a:	0004      	movs	r4, r0
 800e48c:	0038      	movs	r0, r7
 800e48e:	000d      	movs	r5, r1
 800e490:	f7f4 fd7a 	bl	8002f88 <__aeabi_i2d>
 800e494:	4a96      	ldr	r2, [pc, #600]	; (800e6f0 <_dtoa_r+0x37c>)
 800e496:	4b97      	ldr	r3, [pc, #604]	; (800e6f4 <_dtoa_r+0x380>)
 800e498:	f7f3 fede 	bl	8002258 <__aeabi_dmul>
 800e49c:	0002      	movs	r2, r0
 800e49e:	000b      	movs	r3, r1
 800e4a0:	0020      	movs	r0, r4
 800e4a2:	0029      	movs	r1, r5
 800e4a4:	f7f2 ff7e 	bl	80013a4 <__aeabi_dadd>
 800e4a8:	0004      	movs	r4, r0
 800e4aa:	000d      	movs	r5, r1
 800e4ac:	f7f4 fd36 	bl	8002f1c <__aeabi_d2iz>
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	9003      	str	r0, [sp, #12]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	0020      	movs	r0, r4
 800e4b8:	0029      	movs	r1, r5
 800e4ba:	f7f1 ffd7 	bl	800046c <__aeabi_dcmplt>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d00b      	beq.n	800e4da <_dtoa_r+0x166>
 800e4c2:	9803      	ldr	r0, [sp, #12]
 800e4c4:	f7f4 fd60 	bl	8002f88 <__aeabi_i2d>
 800e4c8:	002b      	movs	r3, r5
 800e4ca:	0022      	movs	r2, r4
 800e4cc:	f7f1 ffc8 	bl	8000460 <__aeabi_dcmpeq>
 800e4d0:	4243      	negs	r3, r0
 800e4d2:	4158      	adcs	r0, r3
 800e4d4:	9b03      	ldr	r3, [sp, #12]
 800e4d6:	1a1b      	subs	r3, r3, r0
 800e4d8:	9303      	str	r3, [sp, #12]
 800e4da:	2301      	movs	r3, #1
 800e4dc:	9316      	str	r3, [sp, #88]	; 0x58
 800e4de:	9b03      	ldr	r3, [sp, #12]
 800e4e0:	2b16      	cmp	r3, #22
 800e4e2:	d810      	bhi.n	800e506 <_dtoa_r+0x192>
 800e4e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e4e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e4e8:	9a03      	ldr	r2, [sp, #12]
 800e4ea:	4b83      	ldr	r3, [pc, #524]	; (800e6f8 <_dtoa_r+0x384>)
 800e4ec:	00d2      	lsls	r2, r2, #3
 800e4ee:	189b      	adds	r3, r3, r2
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	f7f1 ffba 	bl	800046c <__aeabi_dcmplt>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	d047      	beq.n	800e58c <_dtoa_r+0x218>
 800e4fc:	9b03      	ldr	r3, [sp, #12]
 800e4fe:	3b01      	subs	r3, #1
 800e500:	9303      	str	r3, [sp, #12]
 800e502:	2300      	movs	r3, #0
 800e504:	9316      	str	r3, [sp, #88]	; 0x58
 800e506:	2200      	movs	r2, #0
 800e508:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e50a:	920a      	str	r2, [sp, #40]	; 0x28
 800e50c:	1bdb      	subs	r3, r3, r7
 800e50e:	1e5a      	subs	r2, r3, #1
 800e510:	d53e      	bpl.n	800e590 <_dtoa_r+0x21c>
 800e512:	2201      	movs	r2, #1
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	930a      	str	r3, [sp, #40]	; 0x28
 800e518:	2300      	movs	r3, #0
 800e51a:	930c      	str	r3, [sp, #48]	; 0x30
 800e51c:	9b03      	ldr	r3, [sp, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	db38      	blt.n	800e594 <_dtoa_r+0x220>
 800e522:	9a03      	ldr	r2, [sp, #12]
 800e524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e526:	4694      	mov	ip, r2
 800e528:	4463      	add	r3, ip
 800e52a:	930c      	str	r3, [sp, #48]	; 0x30
 800e52c:	2300      	movs	r3, #0
 800e52e:	9213      	str	r2, [sp, #76]	; 0x4c
 800e530:	930d      	str	r3, [sp, #52]	; 0x34
 800e532:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e534:	2401      	movs	r4, #1
 800e536:	2b09      	cmp	r3, #9
 800e538:	d867      	bhi.n	800e60a <_dtoa_r+0x296>
 800e53a:	2b05      	cmp	r3, #5
 800e53c:	dd02      	ble.n	800e544 <_dtoa_r+0x1d0>
 800e53e:	2400      	movs	r4, #0
 800e540:	3b04      	subs	r3, #4
 800e542:	9322      	str	r3, [sp, #136]	; 0x88
 800e544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e546:	1e98      	subs	r0, r3, #2
 800e548:	2803      	cmp	r0, #3
 800e54a:	d867      	bhi.n	800e61c <_dtoa_r+0x2a8>
 800e54c:	f7f1 fdee 	bl	800012c <__gnu_thumb1_case_uqi>
 800e550:	5b383a2b 	.word	0x5b383a2b
 800e554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e556:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800e558:	18f6      	adds	r6, r6, r3
 800e55a:	4b68      	ldr	r3, [pc, #416]	; (800e6fc <_dtoa_r+0x388>)
 800e55c:	18f2      	adds	r2, r6, r3
 800e55e:	2a20      	cmp	r2, #32
 800e560:	dd0f      	ble.n	800e582 <_dtoa_r+0x20e>
 800e562:	2340      	movs	r3, #64	; 0x40
 800e564:	1a9b      	subs	r3, r3, r2
 800e566:	409f      	lsls	r7, r3
 800e568:	4b65      	ldr	r3, [pc, #404]	; (800e700 <_dtoa_r+0x38c>)
 800e56a:	0038      	movs	r0, r7
 800e56c:	18f3      	adds	r3, r6, r3
 800e56e:	40dc      	lsrs	r4, r3
 800e570:	4320      	orrs	r0, r4
 800e572:	f7f4 fd39 	bl	8002fe8 <__aeabi_ui2d>
 800e576:	2201      	movs	r2, #1
 800e578:	4b62      	ldr	r3, [pc, #392]	; (800e704 <_dtoa_r+0x390>)
 800e57a:	1e77      	subs	r7, r6, #1
 800e57c:	18cb      	adds	r3, r1, r3
 800e57e:	9217      	str	r2, [sp, #92]	; 0x5c
 800e580:	e776      	b.n	800e470 <_dtoa_r+0xfc>
 800e582:	2320      	movs	r3, #32
 800e584:	0020      	movs	r0, r4
 800e586:	1a9b      	subs	r3, r3, r2
 800e588:	4098      	lsls	r0, r3
 800e58a:	e7f2      	b.n	800e572 <_dtoa_r+0x1fe>
 800e58c:	9016      	str	r0, [sp, #88]	; 0x58
 800e58e:	e7ba      	b.n	800e506 <_dtoa_r+0x192>
 800e590:	920c      	str	r2, [sp, #48]	; 0x30
 800e592:	e7c3      	b.n	800e51c <_dtoa_r+0x1a8>
 800e594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e596:	9a03      	ldr	r2, [sp, #12]
 800e598:	1a9b      	subs	r3, r3, r2
 800e59a:	930a      	str	r3, [sp, #40]	; 0x28
 800e59c:	4253      	negs	r3, r2
 800e59e:	930d      	str	r3, [sp, #52]	; 0x34
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	9313      	str	r3, [sp, #76]	; 0x4c
 800e5a4:	e7c5      	b.n	800e532 <_dtoa_r+0x1be>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e5ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5ae:	9307      	str	r3, [sp, #28]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	dc13      	bgt.n	800e5dc <_dtoa_r+0x268>
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	001a      	movs	r2, r3
 800e5b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5ba:	9307      	str	r3, [sp, #28]
 800e5bc:	9223      	str	r2, [sp, #140]	; 0x8c
 800e5be:	e00d      	b.n	800e5dc <_dtoa_r+0x268>
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	e7f1      	b.n	800e5a8 <_dtoa_r+0x234>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e5c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5ca:	4694      	mov	ip, r2
 800e5cc:	9b03      	ldr	r3, [sp, #12]
 800e5ce:	4463      	add	r3, ip
 800e5d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	9307      	str	r3, [sp, #28]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	dc00      	bgt.n	800e5dc <_dtoa_r+0x268>
 800e5da:	2301      	movs	r3, #1
 800e5dc:	9a04      	ldr	r2, [sp, #16]
 800e5de:	2100      	movs	r1, #0
 800e5e0:	69d0      	ldr	r0, [r2, #28]
 800e5e2:	2204      	movs	r2, #4
 800e5e4:	0015      	movs	r5, r2
 800e5e6:	3514      	adds	r5, #20
 800e5e8:	429d      	cmp	r5, r3
 800e5ea:	d91b      	bls.n	800e624 <_dtoa_r+0x2b0>
 800e5ec:	6041      	str	r1, [r0, #4]
 800e5ee:	9804      	ldr	r0, [sp, #16]
 800e5f0:	f001 f944 	bl	800f87c <_Balloc>
 800e5f4:	9006      	str	r0, [sp, #24]
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d117      	bne.n	800e62a <_dtoa_r+0x2b6>
 800e5fa:	21b0      	movs	r1, #176	; 0xb0
 800e5fc:	4b42      	ldr	r3, [pc, #264]	; (800e708 <_dtoa_r+0x394>)
 800e5fe:	482e      	ldr	r0, [pc, #184]	; (800e6b8 <_dtoa_r+0x344>)
 800e600:	9a06      	ldr	r2, [sp, #24]
 800e602:	31ff      	adds	r1, #255	; 0xff
 800e604:	e6cb      	b.n	800e39e <_dtoa_r+0x2a>
 800e606:	2301      	movs	r3, #1
 800e608:	e7dd      	b.n	800e5c6 <_dtoa_r+0x252>
 800e60a:	2300      	movs	r3, #0
 800e60c:	940f      	str	r4, [sp, #60]	; 0x3c
 800e60e:	9322      	str	r3, [sp, #136]	; 0x88
 800e610:	3b01      	subs	r3, #1
 800e612:	930b      	str	r3, [sp, #44]	; 0x2c
 800e614:	9307      	str	r3, [sp, #28]
 800e616:	2200      	movs	r2, #0
 800e618:	3313      	adds	r3, #19
 800e61a:	e7cf      	b.n	800e5bc <_dtoa_r+0x248>
 800e61c:	2301      	movs	r3, #1
 800e61e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e620:	3b02      	subs	r3, #2
 800e622:	e7f6      	b.n	800e612 <_dtoa_r+0x29e>
 800e624:	3101      	adds	r1, #1
 800e626:	0052      	lsls	r2, r2, #1
 800e628:	e7dc      	b.n	800e5e4 <_dtoa_r+0x270>
 800e62a:	9b04      	ldr	r3, [sp, #16]
 800e62c:	9a06      	ldr	r2, [sp, #24]
 800e62e:	69db      	ldr	r3, [r3, #28]
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	9b07      	ldr	r3, [sp, #28]
 800e634:	2b0e      	cmp	r3, #14
 800e636:	d900      	bls.n	800e63a <_dtoa_r+0x2c6>
 800e638:	e0e5      	b.n	800e806 <_dtoa_r+0x492>
 800e63a:	2c00      	cmp	r4, #0
 800e63c:	d100      	bne.n	800e640 <_dtoa_r+0x2cc>
 800e63e:	e0e2      	b.n	800e806 <_dtoa_r+0x492>
 800e640:	9b03      	ldr	r3, [sp, #12]
 800e642:	2b00      	cmp	r3, #0
 800e644:	dd64      	ble.n	800e710 <_dtoa_r+0x39c>
 800e646:	210f      	movs	r1, #15
 800e648:	9a03      	ldr	r2, [sp, #12]
 800e64a:	4b2b      	ldr	r3, [pc, #172]	; (800e6f8 <_dtoa_r+0x384>)
 800e64c:	400a      	ands	r2, r1
 800e64e:	00d2      	lsls	r2, r2, #3
 800e650:	189b      	adds	r3, r3, r2
 800e652:	681e      	ldr	r6, [r3, #0]
 800e654:	685f      	ldr	r7, [r3, #4]
 800e656:	9b03      	ldr	r3, [sp, #12]
 800e658:	2402      	movs	r4, #2
 800e65a:	111d      	asrs	r5, r3, #4
 800e65c:	05db      	lsls	r3, r3, #23
 800e65e:	d50a      	bpl.n	800e676 <_dtoa_r+0x302>
 800e660:	4b2a      	ldr	r3, [pc, #168]	; (800e70c <_dtoa_r+0x398>)
 800e662:	400d      	ands	r5, r1
 800e664:	6a1a      	ldr	r2, [r3, #32]
 800e666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e668:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e66a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e66c:	f7f3 f9fa 	bl	8001a64 <__aeabi_ddiv>
 800e670:	9008      	str	r0, [sp, #32]
 800e672:	9109      	str	r1, [sp, #36]	; 0x24
 800e674:	3401      	adds	r4, #1
 800e676:	4b25      	ldr	r3, [pc, #148]	; (800e70c <_dtoa_r+0x398>)
 800e678:	930e      	str	r3, [sp, #56]	; 0x38
 800e67a:	2d00      	cmp	r5, #0
 800e67c:	d108      	bne.n	800e690 <_dtoa_r+0x31c>
 800e67e:	9808      	ldr	r0, [sp, #32]
 800e680:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e682:	0032      	movs	r2, r6
 800e684:	003b      	movs	r3, r7
 800e686:	f7f3 f9ed 	bl	8001a64 <__aeabi_ddiv>
 800e68a:	9008      	str	r0, [sp, #32]
 800e68c:	9109      	str	r1, [sp, #36]	; 0x24
 800e68e:	e05a      	b.n	800e746 <_dtoa_r+0x3d2>
 800e690:	2301      	movs	r3, #1
 800e692:	421d      	tst	r5, r3
 800e694:	d009      	beq.n	800e6aa <_dtoa_r+0x336>
 800e696:	18e4      	adds	r4, r4, r3
 800e698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e69a:	0030      	movs	r0, r6
 800e69c:	681a      	ldr	r2, [r3, #0]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	0039      	movs	r1, r7
 800e6a2:	f7f3 fdd9 	bl	8002258 <__aeabi_dmul>
 800e6a6:	0006      	movs	r6, r0
 800e6a8:	000f      	movs	r7, r1
 800e6aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6ac:	106d      	asrs	r5, r5, #1
 800e6ae:	3308      	adds	r3, #8
 800e6b0:	e7e2      	b.n	800e678 <_dtoa_r+0x304>
 800e6b2:	46c0      	nop			; (mov r8, r8)
 800e6b4:	080112fa 	.word	0x080112fa
 800e6b8:	08011311 	.word	0x08011311
 800e6bc:	7ff00000 	.word	0x7ff00000
 800e6c0:	0000270f 	.word	0x0000270f
 800e6c4:	080112f6 	.word	0x080112f6
 800e6c8:	080112f9 	.word	0x080112f9
 800e6cc:	080112c1 	.word	0x080112c1
 800e6d0:	080112c2 	.word	0x080112c2
 800e6d4:	3ff00000 	.word	0x3ff00000
 800e6d8:	fffffc01 	.word	0xfffffc01
 800e6dc:	3ff80000 	.word	0x3ff80000
 800e6e0:	636f4361 	.word	0x636f4361
 800e6e4:	3fd287a7 	.word	0x3fd287a7
 800e6e8:	8b60c8b3 	.word	0x8b60c8b3
 800e6ec:	3fc68a28 	.word	0x3fc68a28
 800e6f0:	509f79fb 	.word	0x509f79fb
 800e6f4:	3fd34413 	.word	0x3fd34413
 800e6f8:	08011460 	.word	0x08011460
 800e6fc:	00000432 	.word	0x00000432
 800e700:	00000412 	.word	0x00000412
 800e704:	fe100000 	.word	0xfe100000
 800e708:	08011369 	.word	0x08011369
 800e70c:	08011438 	.word	0x08011438
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	2402      	movs	r4, #2
 800e714:	2b00      	cmp	r3, #0
 800e716:	d016      	beq.n	800e746 <_dtoa_r+0x3d2>
 800e718:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e71a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e71c:	220f      	movs	r2, #15
 800e71e:	425d      	negs	r5, r3
 800e720:	402a      	ands	r2, r5
 800e722:	4bdd      	ldr	r3, [pc, #884]	; (800ea98 <_dtoa_r+0x724>)
 800e724:	00d2      	lsls	r2, r2, #3
 800e726:	189b      	adds	r3, r3, r2
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	f7f3 fd94 	bl	8002258 <__aeabi_dmul>
 800e730:	2701      	movs	r7, #1
 800e732:	2300      	movs	r3, #0
 800e734:	9008      	str	r0, [sp, #32]
 800e736:	9109      	str	r1, [sp, #36]	; 0x24
 800e738:	4ed8      	ldr	r6, [pc, #864]	; (800ea9c <_dtoa_r+0x728>)
 800e73a:	112d      	asrs	r5, r5, #4
 800e73c:	2d00      	cmp	r5, #0
 800e73e:	d000      	beq.n	800e742 <_dtoa_r+0x3ce>
 800e740:	e091      	b.n	800e866 <_dtoa_r+0x4f2>
 800e742:	2b00      	cmp	r3, #0
 800e744:	d1a1      	bne.n	800e68a <_dtoa_r+0x316>
 800e746:	9e08      	ldr	r6, [sp, #32]
 800e748:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e74a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d100      	bne.n	800e752 <_dtoa_r+0x3de>
 800e750:	e094      	b.n	800e87c <_dtoa_r+0x508>
 800e752:	2200      	movs	r2, #0
 800e754:	0030      	movs	r0, r6
 800e756:	0039      	movs	r1, r7
 800e758:	4bd1      	ldr	r3, [pc, #836]	; (800eaa0 <_dtoa_r+0x72c>)
 800e75a:	f7f1 fe87 	bl	800046c <__aeabi_dcmplt>
 800e75e:	2800      	cmp	r0, #0
 800e760:	d100      	bne.n	800e764 <_dtoa_r+0x3f0>
 800e762:	e08b      	b.n	800e87c <_dtoa_r+0x508>
 800e764:	9b07      	ldr	r3, [sp, #28]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d100      	bne.n	800e76c <_dtoa_r+0x3f8>
 800e76a:	e087      	b.n	800e87c <_dtoa_r+0x508>
 800e76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e76e:	2b00      	cmp	r3, #0
 800e770:	dd45      	ble.n	800e7fe <_dtoa_r+0x48a>
 800e772:	9b03      	ldr	r3, [sp, #12]
 800e774:	2200      	movs	r2, #0
 800e776:	3b01      	subs	r3, #1
 800e778:	930e      	str	r3, [sp, #56]	; 0x38
 800e77a:	0030      	movs	r0, r6
 800e77c:	4bc9      	ldr	r3, [pc, #804]	; (800eaa4 <_dtoa_r+0x730>)
 800e77e:	0039      	movs	r1, r7
 800e780:	f7f3 fd6a 	bl	8002258 <__aeabi_dmul>
 800e784:	9008      	str	r0, [sp, #32]
 800e786:	9109      	str	r1, [sp, #36]	; 0x24
 800e788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e78a:	3401      	adds	r4, #1
 800e78c:	0020      	movs	r0, r4
 800e78e:	9e08      	ldr	r6, [sp, #32]
 800e790:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e792:	9312      	str	r3, [sp, #72]	; 0x48
 800e794:	f7f4 fbf8 	bl	8002f88 <__aeabi_i2d>
 800e798:	0032      	movs	r2, r6
 800e79a:	003b      	movs	r3, r7
 800e79c:	f7f3 fd5c 	bl	8002258 <__aeabi_dmul>
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	4bc1      	ldr	r3, [pc, #772]	; (800eaa8 <_dtoa_r+0x734>)
 800e7a4:	f7f2 fdfe 	bl	80013a4 <__aeabi_dadd>
 800e7a8:	4ac0      	ldr	r2, [pc, #768]	; (800eaac <_dtoa_r+0x738>)
 800e7aa:	9014      	str	r0, [sp, #80]	; 0x50
 800e7ac:	9115      	str	r1, [sp, #84]	; 0x54
 800e7ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800e7b2:	4694      	mov	ip, r2
 800e7b4:	9308      	str	r3, [sp, #32]
 800e7b6:	9409      	str	r4, [sp, #36]	; 0x24
 800e7b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7ba:	4463      	add	r3, ip
 800e7bc:	9318      	str	r3, [sp, #96]	; 0x60
 800e7be:	9309      	str	r3, [sp, #36]	; 0x24
 800e7c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d15e      	bne.n	800e884 <_dtoa_r+0x510>
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	4bb9      	ldr	r3, [pc, #740]	; (800eab0 <_dtoa_r+0x73c>)
 800e7ca:	0030      	movs	r0, r6
 800e7cc:	0039      	movs	r1, r7
 800e7ce:	f7f4 f805 	bl	80027dc <__aeabi_dsub>
 800e7d2:	9a08      	ldr	r2, [sp, #32]
 800e7d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e7d6:	0004      	movs	r4, r0
 800e7d8:	000d      	movs	r5, r1
 800e7da:	f7f1 fe5b 	bl	8000494 <__aeabi_dcmpgt>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d000      	beq.n	800e7e4 <_dtoa_r+0x470>
 800e7e2:	e2b3      	b.n	800ed4c <_dtoa_r+0x9d8>
 800e7e4:	48b3      	ldr	r0, [pc, #716]	; (800eab4 <_dtoa_r+0x740>)
 800e7e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e7e8:	4684      	mov	ip, r0
 800e7ea:	4461      	add	r1, ip
 800e7ec:	000b      	movs	r3, r1
 800e7ee:	0020      	movs	r0, r4
 800e7f0:	0029      	movs	r1, r5
 800e7f2:	9a08      	ldr	r2, [sp, #32]
 800e7f4:	f7f1 fe3a 	bl	800046c <__aeabi_dcmplt>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d000      	beq.n	800e7fe <_dtoa_r+0x48a>
 800e7fc:	e2a3      	b.n	800ed46 <_dtoa_r+0x9d2>
 800e7fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e800:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800e802:	9308      	str	r3, [sp, #32]
 800e804:	9409      	str	r4, [sp, #36]	; 0x24
 800e806:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e808:	2b00      	cmp	r3, #0
 800e80a:	da00      	bge.n	800e80e <_dtoa_r+0x49a>
 800e80c:	e179      	b.n	800eb02 <_dtoa_r+0x78e>
 800e80e:	9a03      	ldr	r2, [sp, #12]
 800e810:	2a0e      	cmp	r2, #14
 800e812:	dd00      	ble.n	800e816 <_dtoa_r+0x4a2>
 800e814:	e175      	b.n	800eb02 <_dtoa_r+0x78e>
 800e816:	4ba0      	ldr	r3, [pc, #640]	; (800ea98 <_dtoa_r+0x724>)
 800e818:	00d2      	lsls	r2, r2, #3
 800e81a:	189b      	adds	r3, r3, r2
 800e81c:	681e      	ldr	r6, [r3, #0]
 800e81e:	685f      	ldr	r7, [r3, #4]
 800e820:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e822:	2b00      	cmp	r3, #0
 800e824:	db00      	blt.n	800e828 <_dtoa_r+0x4b4>
 800e826:	e0e5      	b.n	800e9f4 <_dtoa_r+0x680>
 800e828:	9b07      	ldr	r3, [sp, #28]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	dd00      	ble.n	800e830 <_dtoa_r+0x4bc>
 800e82e:	e0e1      	b.n	800e9f4 <_dtoa_r+0x680>
 800e830:	d000      	beq.n	800e834 <_dtoa_r+0x4c0>
 800e832:	e288      	b.n	800ed46 <_dtoa_r+0x9d2>
 800e834:	2200      	movs	r2, #0
 800e836:	0030      	movs	r0, r6
 800e838:	0039      	movs	r1, r7
 800e83a:	4b9d      	ldr	r3, [pc, #628]	; (800eab0 <_dtoa_r+0x73c>)
 800e83c:	f7f3 fd0c 	bl	8002258 <__aeabi_dmul>
 800e840:	9a08      	ldr	r2, [sp, #32]
 800e842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e844:	f7f1 fe30 	bl	80004a8 <__aeabi_dcmpge>
 800e848:	9e07      	ldr	r6, [sp, #28]
 800e84a:	0037      	movs	r7, r6
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d000      	beq.n	800e852 <_dtoa_r+0x4de>
 800e850:	e25f      	b.n	800ed12 <_dtoa_r+0x99e>
 800e852:	9b06      	ldr	r3, [sp, #24]
 800e854:	9a06      	ldr	r2, [sp, #24]
 800e856:	3301      	adds	r3, #1
 800e858:	9308      	str	r3, [sp, #32]
 800e85a:	2331      	movs	r3, #49	; 0x31
 800e85c:	7013      	strb	r3, [r2, #0]
 800e85e:	9b03      	ldr	r3, [sp, #12]
 800e860:	3301      	adds	r3, #1
 800e862:	9303      	str	r3, [sp, #12]
 800e864:	e25a      	b.n	800ed1c <_dtoa_r+0x9a8>
 800e866:	423d      	tst	r5, r7
 800e868:	d005      	beq.n	800e876 <_dtoa_r+0x502>
 800e86a:	6832      	ldr	r2, [r6, #0]
 800e86c:	6873      	ldr	r3, [r6, #4]
 800e86e:	f7f3 fcf3 	bl	8002258 <__aeabi_dmul>
 800e872:	003b      	movs	r3, r7
 800e874:	3401      	adds	r4, #1
 800e876:	106d      	asrs	r5, r5, #1
 800e878:	3608      	adds	r6, #8
 800e87a:	e75f      	b.n	800e73c <_dtoa_r+0x3c8>
 800e87c:	9b03      	ldr	r3, [sp, #12]
 800e87e:	930e      	str	r3, [sp, #56]	; 0x38
 800e880:	9b07      	ldr	r3, [sp, #28]
 800e882:	e783      	b.n	800e78c <_dtoa_r+0x418>
 800e884:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e886:	4b84      	ldr	r3, [pc, #528]	; (800ea98 <_dtoa_r+0x724>)
 800e888:	3a01      	subs	r2, #1
 800e88a:	00d2      	lsls	r2, r2, #3
 800e88c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e88e:	189b      	adds	r3, r3, r2
 800e890:	9c08      	ldr	r4, [sp, #32]
 800e892:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	2900      	cmp	r1, #0
 800e89a:	d051      	beq.n	800e940 <_dtoa_r+0x5cc>
 800e89c:	2000      	movs	r0, #0
 800e89e:	4986      	ldr	r1, [pc, #536]	; (800eab8 <_dtoa_r+0x744>)
 800e8a0:	f7f3 f8e0 	bl	8001a64 <__aeabi_ddiv>
 800e8a4:	0022      	movs	r2, r4
 800e8a6:	002b      	movs	r3, r5
 800e8a8:	f7f3 ff98 	bl	80027dc <__aeabi_dsub>
 800e8ac:	9a06      	ldr	r2, [sp, #24]
 800e8ae:	0004      	movs	r4, r0
 800e8b0:	4694      	mov	ip, r2
 800e8b2:	000d      	movs	r5, r1
 800e8b4:	9b06      	ldr	r3, [sp, #24]
 800e8b6:	9314      	str	r3, [sp, #80]	; 0x50
 800e8b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8ba:	4463      	add	r3, ip
 800e8bc:	9318      	str	r3, [sp, #96]	; 0x60
 800e8be:	0039      	movs	r1, r7
 800e8c0:	0030      	movs	r0, r6
 800e8c2:	f7f4 fb2b 	bl	8002f1c <__aeabi_d2iz>
 800e8c6:	9012      	str	r0, [sp, #72]	; 0x48
 800e8c8:	f7f4 fb5e 	bl	8002f88 <__aeabi_i2d>
 800e8cc:	0002      	movs	r2, r0
 800e8ce:	000b      	movs	r3, r1
 800e8d0:	0030      	movs	r0, r6
 800e8d2:	0039      	movs	r1, r7
 800e8d4:	f7f3 ff82 	bl	80027dc <__aeabi_dsub>
 800e8d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e8dc:	3301      	adds	r3, #1
 800e8de:	9308      	str	r3, [sp, #32]
 800e8e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8e2:	0006      	movs	r6, r0
 800e8e4:	3330      	adds	r3, #48	; 0x30
 800e8e6:	7013      	strb	r3, [r2, #0]
 800e8e8:	0022      	movs	r2, r4
 800e8ea:	002b      	movs	r3, r5
 800e8ec:	000f      	movs	r7, r1
 800e8ee:	f7f1 fdbd 	bl	800046c <__aeabi_dcmplt>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	d174      	bne.n	800e9e0 <_dtoa_r+0x66c>
 800e8f6:	0032      	movs	r2, r6
 800e8f8:	003b      	movs	r3, r7
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	4968      	ldr	r1, [pc, #416]	; (800eaa0 <_dtoa_r+0x72c>)
 800e8fe:	f7f3 ff6d 	bl	80027dc <__aeabi_dsub>
 800e902:	0022      	movs	r2, r4
 800e904:	002b      	movs	r3, r5
 800e906:	f7f1 fdb1 	bl	800046c <__aeabi_dcmplt>
 800e90a:	2800      	cmp	r0, #0
 800e90c:	d000      	beq.n	800e910 <_dtoa_r+0x59c>
 800e90e:	e0d7      	b.n	800eac0 <_dtoa_r+0x74c>
 800e910:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e912:	9a08      	ldr	r2, [sp, #32]
 800e914:	4293      	cmp	r3, r2
 800e916:	d100      	bne.n	800e91a <_dtoa_r+0x5a6>
 800e918:	e771      	b.n	800e7fe <_dtoa_r+0x48a>
 800e91a:	2200      	movs	r2, #0
 800e91c:	0020      	movs	r0, r4
 800e91e:	0029      	movs	r1, r5
 800e920:	4b60      	ldr	r3, [pc, #384]	; (800eaa4 <_dtoa_r+0x730>)
 800e922:	f7f3 fc99 	bl	8002258 <__aeabi_dmul>
 800e926:	4b5f      	ldr	r3, [pc, #380]	; (800eaa4 <_dtoa_r+0x730>)
 800e928:	0004      	movs	r4, r0
 800e92a:	000d      	movs	r5, r1
 800e92c:	0030      	movs	r0, r6
 800e92e:	0039      	movs	r1, r7
 800e930:	2200      	movs	r2, #0
 800e932:	f7f3 fc91 	bl	8002258 <__aeabi_dmul>
 800e936:	9b08      	ldr	r3, [sp, #32]
 800e938:	0006      	movs	r6, r0
 800e93a:	000f      	movs	r7, r1
 800e93c:	9314      	str	r3, [sp, #80]	; 0x50
 800e93e:	e7be      	b.n	800e8be <_dtoa_r+0x54a>
 800e940:	0020      	movs	r0, r4
 800e942:	0029      	movs	r1, r5
 800e944:	f7f3 fc88 	bl	8002258 <__aeabi_dmul>
 800e948:	9a06      	ldr	r2, [sp, #24]
 800e94a:	9b06      	ldr	r3, [sp, #24]
 800e94c:	4694      	mov	ip, r2
 800e94e:	9308      	str	r3, [sp, #32]
 800e950:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e952:	9014      	str	r0, [sp, #80]	; 0x50
 800e954:	9115      	str	r1, [sp, #84]	; 0x54
 800e956:	4463      	add	r3, ip
 800e958:	9319      	str	r3, [sp, #100]	; 0x64
 800e95a:	0030      	movs	r0, r6
 800e95c:	0039      	movs	r1, r7
 800e95e:	f7f4 fadd 	bl	8002f1c <__aeabi_d2iz>
 800e962:	9018      	str	r0, [sp, #96]	; 0x60
 800e964:	f7f4 fb10 	bl	8002f88 <__aeabi_i2d>
 800e968:	0002      	movs	r2, r0
 800e96a:	000b      	movs	r3, r1
 800e96c:	0030      	movs	r0, r6
 800e96e:	0039      	movs	r1, r7
 800e970:	f7f3 ff34 	bl	80027dc <__aeabi_dsub>
 800e974:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800e976:	9b08      	ldr	r3, [sp, #32]
 800e978:	3630      	adds	r6, #48	; 0x30
 800e97a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e97c:	701e      	strb	r6, [r3, #0]
 800e97e:	3301      	adds	r3, #1
 800e980:	0004      	movs	r4, r0
 800e982:	000d      	movs	r5, r1
 800e984:	9308      	str	r3, [sp, #32]
 800e986:	4293      	cmp	r3, r2
 800e988:	d12d      	bne.n	800e9e6 <_dtoa_r+0x672>
 800e98a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e98c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e98e:	9a06      	ldr	r2, [sp, #24]
 800e990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e992:	4694      	mov	ip, r2
 800e994:	4463      	add	r3, ip
 800e996:	2200      	movs	r2, #0
 800e998:	9308      	str	r3, [sp, #32]
 800e99a:	4b47      	ldr	r3, [pc, #284]	; (800eab8 <_dtoa_r+0x744>)
 800e99c:	f7f2 fd02 	bl	80013a4 <__aeabi_dadd>
 800e9a0:	0002      	movs	r2, r0
 800e9a2:	000b      	movs	r3, r1
 800e9a4:	0020      	movs	r0, r4
 800e9a6:	0029      	movs	r1, r5
 800e9a8:	f7f1 fd74 	bl	8000494 <__aeabi_dcmpgt>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	d000      	beq.n	800e9b2 <_dtoa_r+0x63e>
 800e9b0:	e086      	b.n	800eac0 <_dtoa_r+0x74c>
 800e9b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e9b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	493f      	ldr	r1, [pc, #252]	; (800eab8 <_dtoa_r+0x744>)
 800e9ba:	f7f3 ff0f 	bl	80027dc <__aeabi_dsub>
 800e9be:	0002      	movs	r2, r0
 800e9c0:	000b      	movs	r3, r1
 800e9c2:	0020      	movs	r0, r4
 800e9c4:	0029      	movs	r1, r5
 800e9c6:	f7f1 fd51 	bl	800046c <__aeabi_dcmplt>
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d100      	bne.n	800e9d0 <_dtoa_r+0x65c>
 800e9ce:	e716      	b.n	800e7fe <_dtoa_r+0x48a>
 800e9d0:	9b08      	ldr	r3, [sp, #32]
 800e9d2:	001a      	movs	r2, r3
 800e9d4:	3a01      	subs	r2, #1
 800e9d6:	9208      	str	r2, [sp, #32]
 800e9d8:	7812      	ldrb	r2, [r2, #0]
 800e9da:	2a30      	cmp	r2, #48	; 0x30
 800e9dc:	d0f8      	beq.n	800e9d0 <_dtoa_r+0x65c>
 800e9de:	9308      	str	r3, [sp, #32]
 800e9e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9e2:	9303      	str	r3, [sp, #12]
 800e9e4:	e046      	b.n	800ea74 <_dtoa_r+0x700>
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	4b2e      	ldr	r3, [pc, #184]	; (800eaa4 <_dtoa_r+0x730>)
 800e9ea:	f7f3 fc35 	bl	8002258 <__aeabi_dmul>
 800e9ee:	0006      	movs	r6, r0
 800e9f0:	000f      	movs	r7, r1
 800e9f2:	e7b2      	b.n	800e95a <_dtoa_r+0x5e6>
 800e9f4:	9b06      	ldr	r3, [sp, #24]
 800e9f6:	9a06      	ldr	r2, [sp, #24]
 800e9f8:	930a      	str	r3, [sp, #40]	; 0x28
 800e9fa:	9b07      	ldr	r3, [sp, #28]
 800e9fc:	9c08      	ldr	r4, [sp, #32]
 800e9fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ea00:	3b01      	subs	r3, #1
 800ea02:	189b      	adds	r3, r3, r2
 800ea04:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea06:	0032      	movs	r2, r6
 800ea08:	003b      	movs	r3, r7
 800ea0a:	0020      	movs	r0, r4
 800ea0c:	0029      	movs	r1, r5
 800ea0e:	f7f3 f829 	bl	8001a64 <__aeabi_ddiv>
 800ea12:	f7f4 fa83 	bl	8002f1c <__aeabi_d2iz>
 800ea16:	9007      	str	r0, [sp, #28]
 800ea18:	f7f4 fab6 	bl	8002f88 <__aeabi_i2d>
 800ea1c:	0032      	movs	r2, r6
 800ea1e:	003b      	movs	r3, r7
 800ea20:	f7f3 fc1a 	bl	8002258 <__aeabi_dmul>
 800ea24:	0002      	movs	r2, r0
 800ea26:	000b      	movs	r3, r1
 800ea28:	0020      	movs	r0, r4
 800ea2a:	0029      	movs	r1, r5
 800ea2c:	f7f3 fed6 	bl	80027dc <__aeabi_dsub>
 800ea30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea32:	001a      	movs	r2, r3
 800ea34:	3201      	adds	r2, #1
 800ea36:	920a      	str	r2, [sp, #40]	; 0x28
 800ea38:	9208      	str	r2, [sp, #32]
 800ea3a:	9a07      	ldr	r2, [sp, #28]
 800ea3c:	3230      	adds	r2, #48	; 0x30
 800ea3e:	701a      	strb	r2, [r3, #0]
 800ea40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d14f      	bne.n	800eae6 <_dtoa_r+0x772>
 800ea46:	0002      	movs	r2, r0
 800ea48:	000b      	movs	r3, r1
 800ea4a:	f7f2 fcab 	bl	80013a4 <__aeabi_dadd>
 800ea4e:	0032      	movs	r2, r6
 800ea50:	003b      	movs	r3, r7
 800ea52:	0004      	movs	r4, r0
 800ea54:	000d      	movs	r5, r1
 800ea56:	f7f1 fd1d 	bl	8000494 <__aeabi_dcmpgt>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d12e      	bne.n	800eabc <_dtoa_r+0x748>
 800ea5e:	0032      	movs	r2, r6
 800ea60:	003b      	movs	r3, r7
 800ea62:	0020      	movs	r0, r4
 800ea64:	0029      	movs	r1, r5
 800ea66:	f7f1 fcfb 	bl	8000460 <__aeabi_dcmpeq>
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d002      	beq.n	800ea74 <_dtoa_r+0x700>
 800ea6e:	9b07      	ldr	r3, [sp, #28]
 800ea70:	07de      	lsls	r6, r3, #31
 800ea72:	d423      	bmi.n	800eabc <_dtoa_r+0x748>
 800ea74:	9905      	ldr	r1, [sp, #20]
 800ea76:	9804      	ldr	r0, [sp, #16]
 800ea78:	f000 ff44 	bl	800f904 <_Bfree>
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	9a08      	ldr	r2, [sp, #32]
 800ea80:	7013      	strb	r3, [r2, #0]
 800ea82:	9b03      	ldr	r3, [sp, #12]
 800ea84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ea86:	3301      	adds	r3, #1
 800ea88:	6013      	str	r3, [r2, #0]
 800ea8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d100      	bne.n	800ea92 <_dtoa_r+0x71e>
 800ea90:	e4ba      	b.n	800e408 <_dtoa_r+0x94>
 800ea92:	9a08      	ldr	r2, [sp, #32]
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	e4b7      	b.n	800e408 <_dtoa_r+0x94>
 800ea98:	08011460 	.word	0x08011460
 800ea9c:	08011438 	.word	0x08011438
 800eaa0:	3ff00000 	.word	0x3ff00000
 800eaa4:	40240000 	.word	0x40240000
 800eaa8:	401c0000 	.word	0x401c0000
 800eaac:	fcc00000 	.word	0xfcc00000
 800eab0:	40140000 	.word	0x40140000
 800eab4:	7cc00000 	.word	0x7cc00000
 800eab8:	3fe00000 	.word	0x3fe00000
 800eabc:	9b03      	ldr	r3, [sp, #12]
 800eabe:	930e      	str	r3, [sp, #56]	; 0x38
 800eac0:	9b08      	ldr	r3, [sp, #32]
 800eac2:	9308      	str	r3, [sp, #32]
 800eac4:	3b01      	subs	r3, #1
 800eac6:	781a      	ldrb	r2, [r3, #0]
 800eac8:	2a39      	cmp	r2, #57	; 0x39
 800eaca:	d108      	bne.n	800eade <_dtoa_r+0x76a>
 800eacc:	9a06      	ldr	r2, [sp, #24]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d1f7      	bne.n	800eac2 <_dtoa_r+0x74e>
 800ead2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ead4:	9906      	ldr	r1, [sp, #24]
 800ead6:	3201      	adds	r2, #1
 800ead8:	920e      	str	r2, [sp, #56]	; 0x38
 800eada:	2230      	movs	r2, #48	; 0x30
 800eadc:	700a      	strb	r2, [r1, #0]
 800eade:	781a      	ldrb	r2, [r3, #0]
 800eae0:	3201      	adds	r2, #1
 800eae2:	701a      	strb	r2, [r3, #0]
 800eae4:	e77c      	b.n	800e9e0 <_dtoa_r+0x66c>
 800eae6:	2200      	movs	r2, #0
 800eae8:	4ba9      	ldr	r3, [pc, #676]	; (800ed90 <_dtoa_r+0xa1c>)
 800eaea:	f7f3 fbb5 	bl	8002258 <__aeabi_dmul>
 800eaee:	2200      	movs	r2, #0
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	0004      	movs	r4, r0
 800eaf4:	000d      	movs	r5, r1
 800eaf6:	f7f1 fcb3 	bl	8000460 <__aeabi_dcmpeq>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	d100      	bne.n	800eb00 <_dtoa_r+0x78c>
 800eafe:	e782      	b.n	800ea06 <_dtoa_r+0x692>
 800eb00:	e7b8      	b.n	800ea74 <_dtoa_r+0x700>
 800eb02:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800eb04:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800eb06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800eb08:	2f00      	cmp	r7, #0
 800eb0a:	d012      	beq.n	800eb32 <_dtoa_r+0x7be>
 800eb0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800eb0e:	2a01      	cmp	r2, #1
 800eb10:	dc6e      	bgt.n	800ebf0 <_dtoa_r+0x87c>
 800eb12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eb14:	2a00      	cmp	r2, #0
 800eb16:	d065      	beq.n	800ebe4 <_dtoa_r+0x870>
 800eb18:	4a9e      	ldr	r2, [pc, #632]	; (800ed94 <_dtoa_r+0xa20>)
 800eb1a:	189b      	adds	r3, r3, r2
 800eb1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb1e:	2101      	movs	r1, #1
 800eb20:	18d2      	adds	r2, r2, r3
 800eb22:	920a      	str	r2, [sp, #40]	; 0x28
 800eb24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb26:	9804      	ldr	r0, [sp, #16]
 800eb28:	18d3      	adds	r3, r2, r3
 800eb2a:	930c      	str	r3, [sp, #48]	; 0x30
 800eb2c:	f000 ffe6 	bl	800fafc <__i2b>
 800eb30:	0007      	movs	r7, r0
 800eb32:	2c00      	cmp	r4, #0
 800eb34:	d00e      	beq.n	800eb54 <_dtoa_r+0x7e0>
 800eb36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	dd0b      	ble.n	800eb54 <_dtoa_r+0x7e0>
 800eb3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb3e:	0023      	movs	r3, r4
 800eb40:	4294      	cmp	r4, r2
 800eb42:	dd00      	ble.n	800eb46 <_dtoa_r+0x7d2>
 800eb44:	0013      	movs	r3, r2
 800eb46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb48:	1ae4      	subs	r4, r4, r3
 800eb4a:	1ad2      	subs	r2, r2, r3
 800eb4c:	920a      	str	r2, [sp, #40]	; 0x28
 800eb4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	930c      	str	r3, [sp, #48]	; 0x30
 800eb54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d01e      	beq.n	800eb98 <_dtoa_r+0x824>
 800eb5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d05c      	beq.n	800ec1a <_dtoa_r+0x8a6>
 800eb60:	2d00      	cmp	r5, #0
 800eb62:	dd10      	ble.n	800eb86 <_dtoa_r+0x812>
 800eb64:	0039      	movs	r1, r7
 800eb66:	002a      	movs	r2, r5
 800eb68:	9804      	ldr	r0, [sp, #16]
 800eb6a:	f001 f88f 	bl	800fc8c <__pow5mult>
 800eb6e:	9a05      	ldr	r2, [sp, #20]
 800eb70:	0001      	movs	r1, r0
 800eb72:	0007      	movs	r7, r0
 800eb74:	9804      	ldr	r0, [sp, #16]
 800eb76:	f000 ffd9 	bl	800fb2c <__multiply>
 800eb7a:	0006      	movs	r6, r0
 800eb7c:	9905      	ldr	r1, [sp, #20]
 800eb7e:	9804      	ldr	r0, [sp, #16]
 800eb80:	f000 fec0 	bl	800f904 <_Bfree>
 800eb84:	9605      	str	r6, [sp, #20]
 800eb86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb88:	1b5a      	subs	r2, r3, r5
 800eb8a:	42ab      	cmp	r3, r5
 800eb8c:	d004      	beq.n	800eb98 <_dtoa_r+0x824>
 800eb8e:	9905      	ldr	r1, [sp, #20]
 800eb90:	9804      	ldr	r0, [sp, #16]
 800eb92:	f001 f87b 	bl	800fc8c <__pow5mult>
 800eb96:	9005      	str	r0, [sp, #20]
 800eb98:	2101      	movs	r1, #1
 800eb9a:	9804      	ldr	r0, [sp, #16]
 800eb9c:	f000 ffae 	bl	800fafc <__i2b>
 800eba0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eba2:	0006      	movs	r6, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	dd3a      	ble.n	800ec1e <_dtoa_r+0x8aa>
 800eba8:	001a      	movs	r2, r3
 800ebaa:	0001      	movs	r1, r0
 800ebac:	9804      	ldr	r0, [sp, #16]
 800ebae:	f001 f86d 	bl	800fc8c <__pow5mult>
 800ebb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebb4:	0006      	movs	r6, r0
 800ebb6:	2500      	movs	r5, #0
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	dc38      	bgt.n	800ec2e <_dtoa_r+0x8ba>
 800ebbc:	2500      	movs	r5, #0
 800ebbe:	9b08      	ldr	r3, [sp, #32]
 800ebc0:	42ab      	cmp	r3, r5
 800ebc2:	d130      	bne.n	800ec26 <_dtoa_r+0x8b2>
 800ebc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebc6:	031b      	lsls	r3, r3, #12
 800ebc8:	42ab      	cmp	r3, r5
 800ebca:	d12c      	bne.n	800ec26 <_dtoa_r+0x8b2>
 800ebcc:	4b72      	ldr	r3, [pc, #456]	; (800ed98 <_dtoa_r+0xa24>)
 800ebce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebd0:	4213      	tst	r3, r2
 800ebd2:	d028      	beq.n	800ec26 <_dtoa_r+0x8b2>
 800ebd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebd6:	3501      	adds	r5, #1
 800ebd8:	3301      	adds	r3, #1
 800ebda:	930a      	str	r3, [sp, #40]	; 0x28
 800ebdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebde:	3301      	adds	r3, #1
 800ebe0:	930c      	str	r3, [sp, #48]	; 0x30
 800ebe2:	e020      	b.n	800ec26 <_dtoa_r+0x8b2>
 800ebe4:	2336      	movs	r3, #54	; 0x36
 800ebe6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ebe8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ebea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ebec:	1a9b      	subs	r3, r3, r2
 800ebee:	e795      	b.n	800eb1c <_dtoa_r+0x7a8>
 800ebf0:	9b07      	ldr	r3, [sp, #28]
 800ebf2:	1e5d      	subs	r5, r3, #1
 800ebf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebf6:	42ab      	cmp	r3, r5
 800ebf8:	db07      	blt.n	800ec0a <_dtoa_r+0x896>
 800ebfa:	1b5d      	subs	r5, r3, r5
 800ebfc:	9b07      	ldr	r3, [sp, #28]
 800ebfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	da8b      	bge.n	800eb1c <_dtoa_r+0x7a8>
 800ec04:	1ae4      	subs	r4, r4, r3
 800ec06:	2300      	movs	r3, #0
 800ec08:	e788      	b.n	800eb1c <_dtoa_r+0x7a8>
 800ec0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ec0e:	1aeb      	subs	r3, r5, r3
 800ec10:	18d3      	adds	r3, r2, r3
 800ec12:	950d      	str	r5, [sp, #52]	; 0x34
 800ec14:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec16:	2500      	movs	r5, #0
 800ec18:	e7f0      	b.n	800ebfc <_dtoa_r+0x888>
 800ec1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec1c:	e7b7      	b.n	800eb8e <_dtoa_r+0x81a>
 800ec1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec20:	2500      	movs	r5, #0
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	ddca      	ble.n	800ebbc <_dtoa_r+0x848>
 800ec26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec28:	2001      	movs	r0, #1
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d008      	beq.n	800ec40 <_dtoa_r+0x8cc>
 800ec2e:	6933      	ldr	r3, [r6, #16]
 800ec30:	3303      	adds	r3, #3
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	18f3      	adds	r3, r6, r3
 800ec36:	6858      	ldr	r0, [r3, #4]
 800ec38:	f000 ff18 	bl	800fa6c <__hi0bits>
 800ec3c:	2320      	movs	r3, #32
 800ec3e:	1a18      	subs	r0, r3, r0
 800ec40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec42:	1818      	adds	r0, r3, r0
 800ec44:	0002      	movs	r2, r0
 800ec46:	231f      	movs	r3, #31
 800ec48:	401a      	ands	r2, r3
 800ec4a:	4218      	tst	r0, r3
 800ec4c:	d047      	beq.n	800ecde <_dtoa_r+0x96a>
 800ec4e:	3301      	adds	r3, #1
 800ec50:	1a9b      	subs	r3, r3, r2
 800ec52:	2b04      	cmp	r3, #4
 800ec54:	dd3f      	ble.n	800ecd6 <_dtoa_r+0x962>
 800ec56:	231c      	movs	r3, #28
 800ec58:	1a9b      	subs	r3, r3, r2
 800ec5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec5c:	18e4      	adds	r4, r4, r3
 800ec5e:	18d2      	adds	r2, r2, r3
 800ec60:	920a      	str	r2, [sp, #40]	; 0x28
 800ec62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec64:	18d3      	adds	r3, r2, r3
 800ec66:	930c      	str	r3, [sp, #48]	; 0x30
 800ec68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	dd05      	ble.n	800ec7a <_dtoa_r+0x906>
 800ec6e:	001a      	movs	r2, r3
 800ec70:	9905      	ldr	r1, [sp, #20]
 800ec72:	9804      	ldr	r0, [sp, #16]
 800ec74:	f001 f866 	bl	800fd44 <__lshift>
 800ec78:	9005      	str	r0, [sp, #20]
 800ec7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	dd05      	ble.n	800ec8c <_dtoa_r+0x918>
 800ec80:	0031      	movs	r1, r6
 800ec82:	001a      	movs	r2, r3
 800ec84:	9804      	ldr	r0, [sp, #16]
 800ec86:	f001 f85d 	bl	800fd44 <__lshift>
 800ec8a:	0006      	movs	r6, r0
 800ec8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d027      	beq.n	800ece2 <_dtoa_r+0x96e>
 800ec92:	0031      	movs	r1, r6
 800ec94:	9805      	ldr	r0, [sp, #20]
 800ec96:	f001 f8c3 	bl	800fe20 <__mcmp>
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	da21      	bge.n	800ece2 <_dtoa_r+0x96e>
 800ec9e:	9b03      	ldr	r3, [sp, #12]
 800eca0:	220a      	movs	r2, #10
 800eca2:	3b01      	subs	r3, #1
 800eca4:	9303      	str	r3, [sp, #12]
 800eca6:	9905      	ldr	r1, [sp, #20]
 800eca8:	2300      	movs	r3, #0
 800ecaa:	9804      	ldr	r0, [sp, #16]
 800ecac:	f000 fe4e 	bl	800f94c <__multadd>
 800ecb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecb2:	9005      	str	r0, [sp, #20]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d100      	bne.n	800ecba <_dtoa_r+0x946>
 800ecb8:	e15d      	b.n	800ef76 <_dtoa_r+0xc02>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	0039      	movs	r1, r7
 800ecbe:	220a      	movs	r2, #10
 800ecc0:	9804      	ldr	r0, [sp, #16]
 800ecc2:	f000 fe43 	bl	800f94c <__multadd>
 800ecc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecc8:	0007      	movs	r7, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	dc49      	bgt.n	800ed62 <_dtoa_r+0x9ee>
 800ecce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ecd0:	2b02      	cmp	r3, #2
 800ecd2:	dc0e      	bgt.n	800ecf2 <_dtoa_r+0x97e>
 800ecd4:	e045      	b.n	800ed62 <_dtoa_r+0x9ee>
 800ecd6:	2b04      	cmp	r3, #4
 800ecd8:	d0c6      	beq.n	800ec68 <_dtoa_r+0x8f4>
 800ecda:	331c      	adds	r3, #28
 800ecdc:	e7bd      	b.n	800ec5a <_dtoa_r+0x8e6>
 800ecde:	0013      	movs	r3, r2
 800ece0:	e7fb      	b.n	800ecda <_dtoa_r+0x966>
 800ece2:	9b07      	ldr	r3, [sp, #28]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	dc36      	bgt.n	800ed56 <_dtoa_r+0x9e2>
 800ece8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	dd33      	ble.n	800ed56 <_dtoa_r+0x9e2>
 800ecee:	9b07      	ldr	r3, [sp, #28]
 800ecf0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d10c      	bne.n	800ed12 <_dtoa_r+0x99e>
 800ecf8:	0031      	movs	r1, r6
 800ecfa:	2205      	movs	r2, #5
 800ecfc:	9804      	ldr	r0, [sp, #16]
 800ecfe:	f000 fe25 	bl	800f94c <__multadd>
 800ed02:	0006      	movs	r6, r0
 800ed04:	0001      	movs	r1, r0
 800ed06:	9805      	ldr	r0, [sp, #20]
 800ed08:	f001 f88a 	bl	800fe20 <__mcmp>
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	dd00      	ble.n	800ed12 <_dtoa_r+0x99e>
 800ed10:	e59f      	b.n	800e852 <_dtoa_r+0x4de>
 800ed12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed14:	43db      	mvns	r3, r3
 800ed16:	9303      	str	r3, [sp, #12]
 800ed18:	9b06      	ldr	r3, [sp, #24]
 800ed1a:	9308      	str	r3, [sp, #32]
 800ed1c:	2500      	movs	r5, #0
 800ed1e:	0031      	movs	r1, r6
 800ed20:	9804      	ldr	r0, [sp, #16]
 800ed22:	f000 fdef 	bl	800f904 <_Bfree>
 800ed26:	2f00      	cmp	r7, #0
 800ed28:	d100      	bne.n	800ed2c <_dtoa_r+0x9b8>
 800ed2a:	e6a3      	b.n	800ea74 <_dtoa_r+0x700>
 800ed2c:	2d00      	cmp	r5, #0
 800ed2e:	d005      	beq.n	800ed3c <_dtoa_r+0x9c8>
 800ed30:	42bd      	cmp	r5, r7
 800ed32:	d003      	beq.n	800ed3c <_dtoa_r+0x9c8>
 800ed34:	0029      	movs	r1, r5
 800ed36:	9804      	ldr	r0, [sp, #16]
 800ed38:	f000 fde4 	bl	800f904 <_Bfree>
 800ed3c:	0039      	movs	r1, r7
 800ed3e:	9804      	ldr	r0, [sp, #16]
 800ed40:	f000 fde0 	bl	800f904 <_Bfree>
 800ed44:	e696      	b.n	800ea74 <_dtoa_r+0x700>
 800ed46:	2600      	movs	r6, #0
 800ed48:	0037      	movs	r7, r6
 800ed4a:	e7e2      	b.n	800ed12 <_dtoa_r+0x99e>
 800ed4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed4e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ed50:	9303      	str	r3, [sp, #12]
 800ed52:	0037      	movs	r7, r6
 800ed54:	e57d      	b.n	800e852 <_dtoa_r+0x4de>
 800ed56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d100      	bne.n	800ed5e <_dtoa_r+0x9ea>
 800ed5c:	e0c3      	b.n	800eee6 <_dtoa_r+0xb72>
 800ed5e:	9b07      	ldr	r3, [sp, #28]
 800ed60:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed62:	2c00      	cmp	r4, #0
 800ed64:	dd05      	ble.n	800ed72 <_dtoa_r+0x9fe>
 800ed66:	0039      	movs	r1, r7
 800ed68:	0022      	movs	r2, r4
 800ed6a:	9804      	ldr	r0, [sp, #16]
 800ed6c:	f000 ffea 	bl	800fd44 <__lshift>
 800ed70:	0007      	movs	r7, r0
 800ed72:	0038      	movs	r0, r7
 800ed74:	2d00      	cmp	r5, #0
 800ed76:	d024      	beq.n	800edc2 <_dtoa_r+0xa4e>
 800ed78:	6879      	ldr	r1, [r7, #4]
 800ed7a:	9804      	ldr	r0, [sp, #16]
 800ed7c:	f000 fd7e 	bl	800f87c <_Balloc>
 800ed80:	1e04      	subs	r4, r0, #0
 800ed82:	d111      	bne.n	800eda8 <_dtoa_r+0xa34>
 800ed84:	0022      	movs	r2, r4
 800ed86:	4b05      	ldr	r3, [pc, #20]	; (800ed9c <_dtoa_r+0xa28>)
 800ed88:	4805      	ldr	r0, [pc, #20]	; (800eda0 <_dtoa_r+0xa2c>)
 800ed8a:	4906      	ldr	r1, [pc, #24]	; (800eda4 <_dtoa_r+0xa30>)
 800ed8c:	f7ff fb07 	bl	800e39e <_dtoa_r+0x2a>
 800ed90:	40240000 	.word	0x40240000
 800ed94:	00000433 	.word	0x00000433
 800ed98:	7ff00000 	.word	0x7ff00000
 800ed9c:	08011369 	.word	0x08011369
 800eda0:	08011311 	.word	0x08011311
 800eda4:	000002ef 	.word	0x000002ef
 800eda8:	0039      	movs	r1, r7
 800edaa:	693a      	ldr	r2, [r7, #16]
 800edac:	310c      	adds	r1, #12
 800edae:	3202      	adds	r2, #2
 800edb0:	0092      	lsls	r2, r2, #2
 800edb2:	300c      	adds	r0, #12
 800edb4:	f7ff fa3e 	bl	800e234 <memcpy>
 800edb8:	2201      	movs	r2, #1
 800edba:	0021      	movs	r1, r4
 800edbc:	9804      	ldr	r0, [sp, #16]
 800edbe:	f000 ffc1 	bl	800fd44 <__lshift>
 800edc2:	9b06      	ldr	r3, [sp, #24]
 800edc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800edc6:	9307      	str	r3, [sp, #28]
 800edc8:	3b01      	subs	r3, #1
 800edca:	189b      	adds	r3, r3, r2
 800edcc:	2201      	movs	r2, #1
 800edce:	003d      	movs	r5, r7
 800edd0:	0007      	movs	r7, r0
 800edd2:	930e      	str	r3, [sp, #56]	; 0x38
 800edd4:	9b08      	ldr	r3, [sp, #32]
 800edd6:	4013      	ands	r3, r2
 800edd8:	930d      	str	r3, [sp, #52]	; 0x34
 800edda:	0031      	movs	r1, r6
 800eddc:	9805      	ldr	r0, [sp, #20]
 800edde:	f7ff fa39 	bl	800e254 <quorem>
 800ede2:	0029      	movs	r1, r5
 800ede4:	0004      	movs	r4, r0
 800ede6:	900b      	str	r0, [sp, #44]	; 0x2c
 800ede8:	9805      	ldr	r0, [sp, #20]
 800edea:	f001 f819 	bl	800fe20 <__mcmp>
 800edee:	003a      	movs	r2, r7
 800edf0:	900c      	str	r0, [sp, #48]	; 0x30
 800edf2:	0031      	movs	r1, r6
 800edf4:	9804      	ldr	r0, [sp, #16]
 800edf6:	f001 f82f 	bl	800fe58 <__mdiff>
 800edfa:	2201      	movs	r2, #1
 800edfc:	68c3      	ldr	r3, [r0, #12]
 800edfe:	3430      	adds	r4, #48	; 0x30
 800ee00:	9008      	str	r0, [sp, #32]
 800ee02:	920a      	str	r2, [sp, #40]	; 0x28
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d104      	bne.n	800ee12 <_dtoa_r+0xa9e>
 800ee08:	0001      	movs	r1, r0
 800ee0a:	9805      	ldr	r0, [sp, #20]
 800ee0c:	f001 f808 	bl	800fe20 <__mcmp>
 800ee10:	900a      	str	r0, [sp, #40]	; 0x28
 800ee12:	9908      	ldr	r1, [sp, #32]
 800ee14:	9804      	ldr	r0, [sp, #16]
 800ee16:	f000 fd75 	bl	800f904 <_Bfree>
 800ee1a:	9b07      	ldr	r3, [sp, #28]
 800ee1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee1e:	3301      	adds	r3, #1
 800ee20:	9308      	str	r3, [sp, #32]
 800ee22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ee24:	4313      	orrs	r3, r2
 800ee26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	d109      	bne.n	800ee40 <_dtoa_r+0xacc>
 800ee2c:	2c39      	cmp	r4, #57	; 0x39
 800ee2e:	d022      	beq.n	800ee76 <_dtoa_r+0xb02>
 800ee30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	dd01      	ble.n	800ee3a <_dtoa_r+0xac6>
 800ee36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ee38:	3431      	adds	r4, #49	; 0x31
 800ee3a:	9b07      	ldr	r3, [sp, #28]
 800ee3c:	701c      	strb	r4, [r3, #0]
 800ee3e:	e76e      	b.n	800ed1e <_dtoa_r+0x9aa>
 800ee40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	db04      	blt.n	800ee50 <_dtoa_r+0xadc>
 800ee46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	d11e      	bne.n	800ee8e <_dtoa_r+0xb1a>
 800ee50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	ddf1      	ble.n	800ee3a <_dtoa_r+0xac6>
 800ee56:	9905      	ldr	r1, [sp, #20]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	9804      	ldr	r0, [sp, #16]
 800ee5c:	f000 ff72 	bl	800fd44 <__lshift>
 800ee60:	0031      	movs	r1, r6
 800ee62:	9005      	str	r0, [sp, #20]
 800ee64:	f000 ffdc 	bl	800fe20 <__mcmp>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	dc02      	bgt.n	800ee72 <_dtoa_r+0xafe>
 800ee6c:	d1e5      	bne.n	800ee3a <_dtoa_r+0xac6>
 800ee6e:	07e3      	lsls	r3, r4, #31
 800ee70:	d5e3      	bpl.n	800ee3a <_dtoa_r+0xac6>
 800ee72:	2c39      	cmp	r4, #57	; 0x39
 800ee74:	d1df      	bne.n	800ee36 <_dtoa_r+0xac2>
 800ee76:	2339      	movs	r3, #57	; 0x39
 800ee78:	9a07      	ldr	r2, [sp, #28]
 800ee7a:	7013      	strb	r3, [r2, #0]
 800ee7c:	9b08      	ldr	r3, [sp, #32]
 800ee7e:	9308      	str	r3, [sp, #32]
 800ee80:	3b01      	subs	r3, #1
 800ee82:	781a      	ldrb	r2, [r3, #0]
 800ee84:	2a39      	cmp	r2, #57	; 0x39
 800ee86:	d063      	beq.n	800ef50 <_dtoa_r+0xbdc>
 800ee88:	3201      	adds	r2, #1
 800ee8a:	701a      	strb	r2, [r3, #0]
 800ee8c:	e747      	b.n	800ed1e <_dtoa_r+0x9aa>
 800ee8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	dd03      	ble.n	800ee9c <_dtoa_r+0xb28>
 800ee94:	2c39      	cmp	r4, #57	; 0x39
 800ee96:	d0ee      	beq.n	800ee76 <_dtoa_r+0xb02>
 800ee98:	3401      	adds	r4, #1
 800ee9a:	e7ce      	b.n	800ee3a <_dtoa_r+0xac6>
 800ee9c:	9b07      	ldr	r3, [sp, #28]
 800ee9e:	9a07      	ldr	r2, [sp, #28]
 800eea0:	701c      	strb	r4, [r3, #0]
 800eea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d03e      	beq.n	800ef26 <_dtoa_r+0xbb2>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	220a      	movs	r2, #10
 800eeac:	9905      	ldr	r1, [sp, #20]
 800eeae:	9804      	ldr	r0, [sp, #16]
 800eeb0:	f000 fd4c 	bl	800f94c <__multadd>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	9005      	str	r0, [sp, #20]
 800eeb8:	220a      	movs	r2, #10
 800eeba:	0029      	movs	r1, r5
 800eebc:	9804      	ldr	r0, [sp, #16]
 800eebe:	42bd      	cmp	r5, r7
 800eec0:	d106      	bne.n	800eed0 <_dtoa_r+0xb5c>
 800eec2:	f000 fd43 	bl	800f94c <__multadd>
 800eec6:	0005      	movs	r5, r0
 800eec8:	0007      	movs	r7, r0
 800eeca:	9b08      	ldr	r3, [sp, #32]
 800eecc:	9307      	str	r3, [sp, #28]
 800eece:	e784      	b.n	800edda <_dtoa_r+0xa66>
 800eed0:	f000 fd3c 	bl	800f94c <__multadd>
 800eed4:	0039      	movs	r1, r7
 800eed6:	0005      	movs	r5, r0
 800eed8:	2300      	movs	r3, #0
 800eeda:	220a      	movs	r2, #10
 800eedc:	9804      	ldr	r0, [sp, #16]
 800eede:	f000 fd35 	bl	800f94c <__multadd>
 800eee2:	0007      	movs	r7, r0
 800eee4:	e7f1      	b.n	800eeca <_dtoa_r+0xb56>
 800eee6:	9b07      	ldr	r3, [sp, #28]
 800eee8:	930b      	str	r3, [sp, #44]	; 0x2c
 800eeea:	2500      	movs	r5, #0
 800eeec:	0031      	movs	r1, r6
 800eeee:	9805      	ldr	r0, [sp, #20]
 800eef0:	f7ff f9b0 	bl	800e254 <quorem>
 800eef4:	9b06      	ldr	r3, [sp, #24]
 800eef6:	3030      	adds	r0, #48	; 0x30
 800eef8:	5558      	strb	r0, [r3, r5]
 800eefa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eefc:	3501      	adds	r5, #1
 800eefe:	0004      	movs	r4, r0
 800ef00:	42ab      	cmp	r3, r5
 800ef02:	dd07      	ble.n	800ef14 <_dtoa_r+0xba0>
 800ef04:	2300      	movs	r3, #0
 800ef06:	220a      	movs	r2, #10
 800ef08:	9905      	ldr	r1, [sp, #20]
 800ef0a:	9804      	ldr	r0, [sp, #16]
 800ef0c:	f000 fd1e 	bl	800f94c <__multadd>
 800ef10:	9005      	str	r0, [sp, #20]
 800ef12:	e7eb      	b.n	800eeec <_dtoa_r+0xb78>
 800ef14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef16:	2301      	movs	r3, #1
 800ef18:	2a00      	cmp	r2, #0
 800ef1a:	dd00      	ble.n	800ef1e <_dtoa_r+0xbaa>
 800ef1c:	0013      	movs	r3, r2
 800ef1e:	2500      	movs	r5, #0
 800ef20:	9a06      	ldr	r2, [sp, #24]
 800ef22:	18d3      	adds	r3, r2, r3
 800ef24:	9308      	str	r3, [sp, #32]
 800ef26:	9905      	ldr	r1, [sp, #20]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	9804      	ldr	r0, [sp, #16]
 800ef2c:	f000 ff0a 	bl	800fd44 <__lshift>
 800ef30:	0031      	movs	r1, r6
 800ef32:	9005      	str	r0, [sp, #20]
 800ef34:	f000 ff74 	bl	800fe20 <__mcmp>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	dc9f      	bgt.n	800ee7c <_dtoa_r+0xb08>
 800ef3c:	d101      	bne.n	800ef42 <_dtoa_r+0xbce>
 800ef3e:	07e4      	lsls	r4, r4, #31
 800ef40:	d49c      	bmi.n	800ee7c <_dtoa_r+0xb08>
 800ef42:	9b08      	ldr	r3, [sp, #32]
 800ef44:	9308      	str	r3, [sp, #32]
 800ef46:	3b01      	subs	r3, #1
 800ef48:	781a      	ldrb	r2, [r3, #0]
 800ef4a:	2a30      	cmp	r2, #48	; 0x30
 800ef4c:	d0fa      	beq.n	800ef44 <_dtoa_r+0xbd0>
 800ef4e:	e6e6      	b.n	800ed1e <_dtoa_r+0x9aa>
 800ef50:	9a06      	ldr	r2, [sp, #24]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d193      	bne.n	800ee7e <_dtoa_r+0xb0a>
 800ef56:	9b03      	ldr	r3, [sp, #12]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	9303      	str	r3, [sp, #12]
 800ef5c:	2331      	movs	r3, #49	; 0x31
 800ef5e:	7013      	strb	r3, [r2, #0]
 800ef60:	e6dd      	b.n	800ed1e <_dtoa_r+0x9aa>
 800ef62:	4b09      	ldr	r3, [pc, #36]	; (800ef88 <_dtoa_r+0xc14>)
 800ef64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ef66:	9306      	str	r3, [sp, #24]
 800ef68:	4b08      	ldr	r3, [pc, #32]	; (800ef8c <_dtoa_r+0xc18>)
 800ef6a:	2a00      	cmp	r2, #0
 800ef6c:	d001      	beq.n	800ef72 <_dtoa_r+0xbfe>
 800ef6e:	f7ff fa49 	bl	800e404 <_dtoa_r+0x90>
 800ef72:	f7ff fa49 	bl	800e408 <_dtoa_r+0x94>
 800ef76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	dcb6      	bgt.n	800eeea <_dtoa_r+0xb76>
 800ef7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef7e:	2b02      	cmp	r3, #2
 800ef80:	dd00      	ble.n	800ef84 <_dtoa_r+0xc10>
 800ef82:	e6b6      	b.n	800ecf2 <_dtoa_r+0x97e>
 800ef84:	e7b1      	b.n	800eeea <_dtoa_r+0xb76>
 800ef86:	46c0      	nop			; (mov r8, r8)
 800ef88:	080112ed 	.word	0x080112ed
 800ef8c:	080112f5 	.word	0x080112f5

0800ef90 <_free_r>:
 800ef90:	b570      	push	{r4, r5, r6, lr}
 800ef92:	0005      	movs	r5, r0
 800ef94:	2900      	cmp	r1, #0
 800ef96:	d010      	beq.n	800efba <_free_r+0x2a>
 800ef98:	1f0c      	subs	r4, r1, #4
 800ef9a:	6823      	ldr	r3, [r4, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	da00      	bge.n	800efa2 <_free_r+0x12>
 800efa0:	18e4      	adds	r4, r4, r3
 800efa2:	0028      	movs	r0, r5
 800efa4:	f000 fc5a 	bl	800f85c <__malloc_lock>
 800efa8:	4a1d      	ldr	r2, [pc, #116]	; (800f020 <_free_r+0x90>)
 800efaa:	6813      	ldr	r3, [r2, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d105      	bne.n	800efbc <_free_r+0x2c>
 800efb0:	6063      	str	r3, [r4, #4]
 800efb2:	6014      	str	r4, [r2, #0]
 800efb4:	0028      	movs	r0, r5
 800efb6:	f000 fc59 	bl	800f86c <__malloc_unlock>
 800efba:	bd70      	pop	{r4, r5, r6, pc}
 800efbc:	42a3      	cmp	r3, r4
 800efbe:	d908      	bls.n	800efd2 <_free_r+0x42>
 800efc0:	6820      	ldr	r0, [r4, #0]
 800efc2:	1821      	adds	r1, r4, r0
 800efc4:	428b      	cmp	r3, r1
 800efc6:	d1f3      	bne.n	800efb0 <_free_r+0x20>
 800efc8:	6819      	ldr	r1, [r3, #0]
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	1809      	adds	r1, r1, r0
 800efce:	6021      	str	r1, [r4, #0]
 800efd0:	e7ee      	b.n	800efb0 <_free_r+0x20>
 800efd2:	001a      	movs	r2, r3
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d001      	beq.n	800efde <_free_r+0x4e>
 800efda:	42a3      	cmp	r3, r4
 800efdc:	d9f9      	bls.n	800efd2 <_free_r+0x42>
 800efde:	6811      	ldr	r1, [r2, #0]
 800efe0:	1850      	adds	r0, r2, r1
 800efe2:	42a0      	cmp	r0, r4
 800efe4:	d10b      	bne.n	800effe <_free_r+0x6e>
 800efe6:	6820      	ldr	r0, [r4, #0]
 800efe8:	1809      	adds	r1, r1, r0
 800efea:	1850      	adds	r0, r2, r1
 800efec:	6011      	str	r1, [r2, #0]
 800efee:	4283      	cmp	r3, r0
 800eff0:	d1e0      	bne.n	800efb4 <_free_r+0x24>
 800eff2:	6818      	ldr	r0, [r3, #0]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	1841      	adds	r1, r0, r1
 800eff8:	6011      	str	r1, [r2, #0]
 800effa:	6053      	str	r3, [r2, #4]
 800effc:	e7da      	b.n	800efb4 <_free_r+0x24>
 800effe:	42a0      	cmp	r0, r4
 800f000:	d902      	bls.n	800f008 <_free_r+0x78>
 800f002:	230c      	movs	r3, #12
 800f004:	602b      	str	r3, [r5, #0]
 800f006:	e7d5      	b.n	800efb4 <_free_r+0x24>
 800f008:	6820      	ldr	r0, [r4, #0]
 800f00a:	1821      	adds	r1, r4, r0
 800f00c:	428b      	cmp	r3, r1
 800f00e:	d103      	bne.n	800f018 <_free_r+0x88>
 800f010:	6819      	ldr	r1, [r3, #0]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	1809      	adds	r1, r1, r0
 800f016:	6021      	str	r1, [r4, #0]
 800f018:	6063      	str	r3, [r4, #4]
 800f01a:	6054      	str	r4, [r2, #4]
 800f01c:	e7ca      	b.n	800efb4 <_free_r+0x24>
 800f01e:	46c0      	nop			; (mov r8, r8)
 800f020:	20005c50 	.word	0x20005c50

0800f024 <rshift>:
 800f024:	0002      	movs	r2, r0
 800f026:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f028:	6904      	ldr	r4, [r0, #16]
 800f02a:	114b      	asrs	r3, r1, #5
 800f02c:	b085      	sub	sp, #20
 800f02e:	3214      	adds	r2, #20
 800f030:	9302      	str	r3, [sp, #8]
 800f032:	114d      	asrs	r5, r1, #5
 800f034:	0013      	movs	r3, r2
 800f036:	42ac      	cmp	r4, r5
 800f038:	dd32      	ble.n	800f0a0 <rshift+0x7c>
 800f03a:	261f      	movs	r6, #31
 800f03c:	000f      	movs	r7, r1
 800f03e:	114b      	asrs	r3, r1, #5
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	00a5      	lsls	r5, r4, #2
 800f044:	18d3      	adds	r3, r2, r3
 800f046:	4037      	ands	r7, r6
 800f048:	1955      	adds	r5, r2, r5
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	9701      	str	r7, [sp, #4]
 800f04e:	4231      	tst	r1, r6
 800f050:	d10d      	bne.n	800f06e <rshift+0x4a>
 800f052:	0016      	movs	r6, r2
 800f054:	0019      	movs	r1, r3
 800f056:	428d      	cmp	r5, r1
 800f058:	d836      	bhi.n	800f0c8 <rshift+0xa4>
 800f05a:	9900      	ldr	r1, [sp, #0]
 800f05c:	2300      	movs	r3, #0
 800f05e:	3903      	subs	r1, #3
 800f060:	428d      	cmp	r5, r1
 800f062:	d302      	bcc.n	800f06a <rshift+0x46>
 800f064:	9b02      	ldr	r3, [sp, #8]
 800f066:	1ae4      	subs	r4, r4, r3
 800f068:	00a3      	lsls	r3, r4, #2
 800f06a:	18d3      	adds	r3, r2, r3
 800f06c:	e018      	b.n	800f0a0 <rshift+0x7c>
 800f06e:	2120      	movs	r1, #32
 800f070:	9e01      	ldr	r6, [sp, #4]
 800f072:	9f01      	ldr	r7, [sp, #4]
 800f074:	1b89      	subs	r1, r1, r6
 800f076:	9e00      	ldr	r6, [sp, #0]
 800f078:	9103      	str	r1, [sp, #12]
 800f07a:	ce02      	ldmia	r6!, {r1}
 800f07c:	4694      	mov	ip, r2
 800f07e:	40f9      	lsrs	r1, r7
 800f080:	42b5      	cmp	r5, r6
 800f082:	d816      	bhi.n	800f0b2 <rshift+0x8e>
 800f084:	9e00      	ldr	r6, [sp, #0]
 800f086:	2300      	movs	r3, #0
 800f088:	3601      	adds	r6, #1
 800f08a:	42b5      	cmp	r5, r6
 800f08c:	d303      	bcc.n	800f096 <rshift+0x72>
 800f08e:	9b02      	ldr	r3, [sp, #8]
 800f090:	1ae3      	subs	r3, r4, r3
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	3b04      	subs	r3, #4
 800f096:	18d3      	adds	r3, r2, r3
 800f098:	6019      	str	r1, [r3, #0]
 800f09a:	2900      	cmp	r1, #0
 800f09c:	d000      	beq.n	800f0a0 <rshift+0x7c>
 800f09e:	3304      	adds	r3, #4
 800f0a0:	1a99      	subs	r1, r3, r2
 800f0a2:	1089      	asrs	r1, r1, #2
 800f0a4:	6101      	str	r1, [r0, #16]
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d101      	bne.n	800f0ae <rshift+0x8a>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	6143      	str	r3, [r0, #20]
 800f0ae:	b005      	add	sp, #20
 800f0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0b2:	6837      	ldr	r7, [r6, #0]
 800f0b4:	9b03      	ldr	r3, [sp, #12]
 800f0b6:	409f      	lsls	r7, r3
 800f0b8:	430f      	orrs	r7, r1
 800f0ba:	4661      	mov	r1, ip
 800f0bc:	c180      	stmia	r1!, {r7}
 800f0be:	468c      	mov	ip, r1
 800f0c0:	9b01      	ldr	r3, [sp, #4]
 800f0c2:	ce02      	ldmia	r6!, {r1}
 800f0c4:	40d9      	lsrs	r1, r3
 800f0c6:	e7db      	b.n	800f080 <rshift+0x5c>
 800f0c8:	c980      	ldmia	r1!, {r7}
 800f0ca:	c680      	stmia	r6!, {r7}
 800f0cc:	e7c3      	b.n	800f056 <rshift+0x32>

0800f0ce <__hexdig_fun>:
 800f0ce:	0002      	movs	r2, r0
 800f0d0:	3a30      	subs	r2, #48	; 0x30
 800f0d2:	0003      	movs	r3, r0
 800f0d4:	2a09      	cmp	r2, #9
 800f0d6:	d802      	bhi.n	800f0de <__hexdig_fun+0x10>
 800f0d8:	3b20      	subs	r3, #32
 800f0da:	b2d8      	uxtb	r0, r3
 800f0dc:	4770      	bx	lr
 800f0de:	0002      	movs	r2, r0
 800f0e0:	3a61      	subs	r2, #97	; 0x61
 800f0e2:	2a05      	cmp	r2, #5
 800f0e4:	d801      	bhi.n	800f0ea <__hexdig_fun+0x1c>
 800f0e6:	3b47      	subs	r3, #71	; 0x47
 800f0e8:	e7f7      	b.n	800f0da <__hexdig_fun+0xc>
 800f0ea:	001a      	movs	r2, r3
 800f0ec:	3a41      	subs	r2, #65	; 0x41
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	2a05      	cmp	r2, #5
 800f0f2:	d8f3      	bhi.n	800f0dc <__hexdig_fun+0xe>
 800f0f4:	3b27      	subs	r3, #39	; 0x27
 800f0f6:	e7f0      	b.n	800f0da <__hexdig_fun+0xc>

0800f0f8 <__gethex>:
 800f0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0fa:	b089      	sub	sp, #36	; 0x24
 800f0fc:	9307      	str	r3, [sp, #28]
 800f0fe:	2302      	movs	r3, #2
 800f100:	9201      	str	r2, [sp, #4]
 800f102:	680a      	ldr	r2, [r1, #0]
 800f104:	425b      	negs	r3, r3
 800f106:	9003      	str	r0, [sp, #12]
 800f108:	9106      	str	r1, [sp, #24]
 800f10a:	1c96      	adds	r6, r2, #2
 800f10c:	1a9b      	subs	r3, r3, r2
 800f10e:	199a      	adds	r2, r3, r6
 800f110:	9600      	str	r6, [sp, #0]
 800f112:	9205      	str	r2, [sp, #20]
 800f114:	9a00      	ldr	r2, [sp, #0]
 800f116:	3601      	adds	r6, #1
 800f118:	7810      	ldrb	r0, [r2, #0]
 800f11a:	2830      	cmp	r0, #48	; 0x30
 800f11c:	d0f7      	beq.n	800f10e <__gethex+0x16>
 800f11e:	f7ff ffd6 	bl	800f0ce <__hexdig_fun>
 800f122:	2300      	movs	r3, #0
 800f124:	001d      	movs	r5, r3
 800f126:	9302      	str	r3, [sp, #8]
 800f128:	4298      	cmp	r0, r3
 800f12a:	d11d      	bne.n	800f168 <__gethex+0x70>
 800f12c:	2201      	movs	r2, #1
 800f12e:	49a6      	ldr	r1, [pc, #664]	; (800f3c8 <__gethex+0x2d0>)
 800f130:	9800      	ldr	r0, [sp, #0]
 800f132:	f7fe ffe3 	bl	800e0fc <strncmp>
 800f136:	0007      	movs	r7, r0
 800f138:	42a8      	cmp	r0, r5
 800f13a:	d169      	bne.n	800f210 <__gethex+0x118>
 800f13c:	9b00      	ldr	r3, [sp, #0]
 800f13e:	0034      	movs	r4, r6
 800f140:	7858      	ldrb	r0, [r3, #1]
 800f142:	f7ff ffc4 	bl	800f0ce <__hexdig_fun>
 800f146:	2301      	movs	r3, #1
 800f148:	9302      	str	r3, [sp, #8]
 800f14a:	42a8      	cmp	r0, r5
 800f14c:	d02f      	beq.n	800f1ae <__gethex+0xb6>
 800f14e:	9600      	str	r6, [sp, #0]
 800f150:	9b00      	ldr	r3, [sp, #0]
 800f152:	7818      	ldrb	r0, [r3, #0]
 800f154:	2830      	cmp	r0, #48	; 0x30
 800f156:	d009      	beq.n	800f16c <__gethex+0x74>
 800f158:	f7ff ffb9 	bl	800f0ce <__hexdig_fun>
 800f15c:	4242      	negs	r2, r0
 800f15e:	4142      	adcs	r2, r0
 800f160:	2301      	movs	r3, #1
 800f162:	0035      	movs	r5, r6
 800f164:	9202      	str	r2, [sp, #8]
 800f166:	9305      	str	r3, [sp, #20]
 800f168:	9c00      	ldr	r4, [sp, #0]
 800f16a:	e004      	b.n	800f176 <__gethex+0x7e>
 800f16c:	9b00      	ldr	r3, [sp, #0]
 800f16e:	3301      	adds	r3, #1
 800f170:	9300      	str	r3, [sp, #0]
 800f172:	e7ed      	b.n	800f150 <__gethex+0x58>
 800f174:	3401      	adds	r4, #1
 800f176:	7820      	ldrb	r0, [r4, #0]
 800f178:	f7ff ffa9 	bl	800f0ce <__hexdig_fun>
 800f17c:	1e07      	subs	r7, r0, #0
 800f17e:	d1f9      	bne.n	800f174 <__gethex+0x7c>
 800f180:	2201      	movs	r2, #1
 800f182:	0020      	movs	r0, r4
 800f184:	4990      	ldr	r1, [pc, #576]	; (800f3c8 <__gethex+0x2d0>)
 800f186:	f7fe ffb9 	bl	800e0fc <strncmp>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	d10d      	bne.n	800f1aa <__gethex+0xb2>
 800f18e:	2d00      	cmp	r5, #0
 800f190:	d106      	bne.n	800f1a0 <__gethex+0xa8>
 800f192:	3401      	adds	r4, #1
 800f194:	0025      	movs	r5, r4
 800f196:	7820      	ldrb	r0, [r4, #0]
 800f198:	f7ff ff99 	bl	800f0ce <__hexdig_fun>
 800f19c:	2800      	cmp	r0, #0
 800f19e:	d102      	bne.n	800f1a6 <__gethex+0xae>
 800f1a0:	1b2d      	subs	r5, r5, r4
 800f1a2:	00af      	lsls	r7, r5, #2
 800f1a4:	e003      	b.n	800f1ae <__gethex+0xb6>
 800f1a6:	3401      	adds	r4, #1
 800f1a8:	e7f5      	b.n	800f196 <__gethex+0x9e>
 800f1aa:	2d00      	cmp	r5, #0
 800f1ac:	d1f8      	bne.n	800f1a0 <__gethex+0xa8>
 800f1ae:	2220      	movs	r2, #32
 800f1b0:	7823      	ldrb	r3, [r4, #0]
 800f1b2:	0026      	movs	r6, r4
 800f1b4:	4393      	bics	r3, r2
 800f1b6:	2b50      	cmp	r3, #80	; 0x50
 800f1b8:	d11d      	bne.n	800f1f6 <__gethex+0xfe>
 800f1ba:	7863      	ldrb	r3, [r4, #1]
 800f1bc:	2b2b      	cmp	r3, #43	; 0x2b
 800f1be:	d02c      	beq.n	800f21a <__gethex+0x122>
 800f1c0:	2b2d      	cmp	r3, #45	; 0x2d
 800f1c2:	d02e      	beq.n	800f222 <__gethex+0x12a>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	1c66      	adds	r6, r4, #1
 800f1c8:	9304      	str	r3, [sp, #16]
 800f1ca:	7830      	ldrb	r0, [r6, #0]
 800f1cc:	f7ff ff7f 	bl	800f0ce <__hexdig_fun>
 800f1d0:	1e43      	subs	r3, r0, #1
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	2b18      	cmp	r3, #24
 800f1d6:	d82b      	bhi.n	800f230 <__gethex+0x138>
 800f1d8:	3810      	subs	r0, #16
 800f1da:	0005      	movs	r5, r0
 800f1dc:	7870      	ldrb	r0, [r6, #1]
 800f1de:	f7ff ff76 	bl	800f0ce <__hexdig_fun>
 800f1e2:	1e43      	subs	r3, r0, #1
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	3601      	adds	r6, #1
 800f1e8:	2b18      	cmp	r3, #24
 800f1ea:	d91c      	bls.n	800f226 <__gethex+0x12e>
 800f1ec:	9b04      	ldr	r3, [sp, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d000      	beq.n	800f1f4 <__gethex+0xfc>
 800f1f2:	426d      	negs	r5, r5
 800f1f4:	197f      	adds	r7, r7, r5
 800f1f6:	9b06      	ldr	r3, [sp, #24]
 800f1f8:	601e      	str	r6, [r3, #0]
 800f1fa:	9b02      	ldr	r3, [sp, #8]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d019      	beq.n	800f234 <__gethex+0x13c>
 800f200:	2600      	movs	r6, #0
 800f202:	9b05      	ldr	r3, [sp, #20]
 800f204:	42b3      	cmp	r3, r6
 800f206:	d100      	bne.n	800f20a <__gethex+0x112>
 800f208:	3606      	adds	r6, #6
 800f20a:	0030      	movs	r0, r6
 800f20c:	b009      	add	sp, #36	; 0x24
 800f20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f210:	2301      	movs	r3, #1
 800f212:	2700      	movs	r7, #0
 800f214:	9c00      	ldr	r4, [sp, #0]
 800f216:	9302      	str	r3, [sp, #8]
 800f218:	e7c9      	b.n	800f1ae <__gethex+0xb6>
 800f21a:	2300      	movs	r3, #0
 800f21c:	9304      	str	r3, [sp, #16]
 800f21e:	1ca6      	adds	r6, r4, #2
 800f220:	e7d3      	b.n	800f1ca <__gethex+0xd2>
 800f222:	2301      	movs	r3, #1
 800f224:	e7fa      	b.n	800f21c <__gethex+0x124>
 800f226:	230a      	movs	r3, #10
 800f228:	435d      	muls	r5, r3
 800f22a:	182d      	adds	r5, r5, r0
 800f22c:	3d10      	subs	r5, #16
 800f22e:	e7d5      	b.n	800f1dc <__gethex+0xe4>
 800f230:	0026      	movs	r6, r4
 800f232:	e7e0      	b.n	800f1f6 <__gethex+0xfe>
 800f234:	9b00      	ldr	r3, [sp, #0]
 800f236:	9902      	ldr	r1, [sp, #8]
 800f238:	1ae3      	subs	r3, r4, r3
 800f23a:	3b01      	subs	r3, #1
 800f23c:	2b07      	cmp	r3, #7
 800f23e:	dc0a      	bgt.n	800f256 <__gethex+0x15e>
 800f240:	9803      	ldr	r0, [sp, #12]
 800f242:	f000 fb1b 	bl	800f87c <_Balloc>
 800f246:	1e05      	subs	r5, r0, #0
 800f248:	d108      	bne.n	800f25c <__gethex+0x164>
 800f24a:	002a      	movs	r2, r5
 800f24c:	21e4      	movs	r1, #228	; 0xe4
 800f24e:	4b5f      	ldr	r3, [pc, #380]	; (800f3cc <__gethex+0x2d4>)
 800f250:	485f      	ldr	r0, [pc, #380]	; (800f3d0 <__gethex+0x2d8>)
 800f252:	f001 fbe7 	bl	8010a24 <__assert_func>
 800f256:	3101      	adds	r1, #1
 800f258:	105b      	asrs	r3, r3, #1
 800f25a:	e7ef      	b.n	800f23c <__gethex+0x144>
 800f25c:	0003      	movs	r3, r0
 800f25e:	3314      	adds	r3, #20
 800f260:	9302      	str	r3, [sp, #8]
 800f262:	9305      	str	r3, [sp, #20]
 800f264:	2300      	movs	r3, #0
 800f266:	001e      	movs	r6, r3
 800f268:	9304      	str	r3, [sp, #16]
 800f26a:	9b00      	ldr	r3, [sp, #0]
 800f26c:	42a3      	cmp	r3, r4
 800f26e:	d33f      	bcc.n	800f2f0 <__gethex+0x1f8>
 800f270:	9c05      	ldr	r4, [sp, #20]
 800f272:	9b02      	ldr	r3, [sp, #8]
 800f274:	c440      	stmia	r4!, {r6}
 800f276:	1ae4      	subs	r4, r4, r3
 800f278:	10a4      	asrs	r4, r4, #2
 800f27a:	0030      	movs	r0, r6
 800f27c:	612c      	str	r4, [r5, #16]
 800f27e:	f000 fbf5 	bl	800fa6c <__hi0bits>
 800f282:	9b01      	ldr	r3, [sp, #4]
 800f284:	0164      	lsls	r4, r4, #5
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	1a26      	subs	r6, r4, r0
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	429e      	cmp	r6, r3
 800f28e:	dd51      	ble.n	800f334 <__gethex+0x23c>
 800f290:	1af6      	subs	r6, r6, r3
 800f292:	0031      	movs	r1, r6
 800f294:	0028      	movs	r0, r5
 800f296:	f000 ff89 	bl	80101ac <__any_on>
 800f29a:	1e04      	subs	r4, r0, #0
 800f29c:	d016      	beq.n	800f2cc <__gethex+0x1d4>
 800f29e:	2401      	movs	r4, #1
 800f2a0:	231f      	movs	r3, #31
 800f2a2:	0020      	movs	r0, r4
 800f2a4:	1e72      	subs	r2, r6, #1
 800f2a6:	4013      	ands	r3, r2
 800f2a8:	4098      	lsls	r0, r3
 800f2aa:	0003      	movs	r3, r0
 800f2ac:	1151      	asrs	r1, r2, #5
 800f2ae:	9802      	ldr	r0, [sp, #8]
 800f2b0:	0089      	lsls	r1, r1, #2
 800f2b2:	5809      	ldr	r1, [r1, r0]
 800f2b4:	4219      	tst	r1, r3
 800f2b6:	d009      	beq.n	800f2cc <__gethex+0x1d4>
 800f2b8:	42a2      	cmp	r2, r4
 800f2ba:	dd06      	ble.n	800f2ca <__gethex+0x1d2>
 800f2bc:	0028      	movs	r0, r5
 800f2be:	1eb1      	subs	r1, r6, #2
 800f2c0:	f000 ff74 	bl	80101ac <__any_on>
 800f2c4:	3402      	adds	r4, #2
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	d100      	bne.n	800f2cc <__gethex+0x1d4>
 800f2ca:	2402      	movs	r4, #2
 800f2cc:	0031      	movs	r1, r6
 800f2ce:	0028      	movs	r0, r5
 800f2d0:	f7ff fea8 	bl	800f024 <rshift>
 800f2d4:	19bf      	adds	r7, r7, r6
 800f2d6:	9b01      	ldr	r3, [sp, #4]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	42bb      	cmp	r3, r7
 800f2dc:	da3a      	bge.n	800f354 <__gethex+0x25c>
 800f2de:	0029      	movs	r1, r5
 800f2e0:	9803      	ldr	r0, [sp, #12]
 800f2e2:	f000 fb0f 	bl	800f904 <_Bfree>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2ea:	26a3      	movs	r6, #163	; 0xa3
 800f2ec:	6013      	str	r3, [r2, #0]
 800f2ee:	e78c      	b.n	800f20a <__gethex+0x112>
 800f2f0:	3c01      	subs	r4, #1
 800f2f2:	7823      	ldrb	r3, [r4, #0]
 800f2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800f2f6:	d012      	beq.n	800f31e <__gethex+0x226>
 800f2f8:	9b04      	ldr	r3, [sp, #16]
 800f2fa:	2b20      	cmp	r3, #32
 800f2fc:	d104      	bne.n	800f308 <__gethex+0x210>
 800f2fe:	9b05      	ldr	r3, [sp, #20]
 800f300:	c340      	stmia	r3!, {r6}
 800f302:	2600      	movs	r6, #0
 800f304:	9305      	str	r3, [sp, #20]
 800f306:	9604      	str	r6, [sp, #16]
 800f308:	7820      	ldrb	r0, [r4, #0]
 800f30a:	f7ff fee0 	bl	800f0ce <__hexdig_fun>
 800f30e:	230f      	movs	r3, #15
 800f310:	4018      	ands	r0, r3
 800f312:	9b04      	ldr	r3, [sp, #16]
 800f314:	4098      	lsls	r0, r3
 800f316:	3304      	adds	r3, #4
 800f318:	4306      	orrs	r6, r0
 800f31a:	9304      	str	r3, [sp, #16]
 800f31c:	e7a5      	b.n	800f26a <__gethex+0x172>
 800f31e:	9b00      	ldr	r3, [sp, #0]
 800f320:	42a3      	cmp	r3, r4
 800f322:	d8e9      	bhi.n	800f2f8 <__gethex+0x200>
 800f324:	2201      	movs	r2, #1
 800f326:	0020      	movs	r0, r4
 800f328:	4927      	ldr	r1, [pc, #156]	; (800f3c8 <__gethex+0x2d0>)
 800f32a:	f7fe fee7 	bl	800e0fc <strncmp>
 800f32e:	2800      	cmp	r0, #0
 800f330:	d1e2      	bne.n	800f2f8 <__gethex+0x200>
 800f332:	e79a      	b.n	800f26a <__gethex+0x172>
 800f334:	9b00      	ldr	r3, [sp, #0]
 800f336:	2400      	movs	r4, #0
 800f338:	429e      	cmp	r6, r3
 800f33a:	dacc      	bge.n	800f2d6 <__gethex+0x1de>
 800f33c:	1b9e      	subs	r6, r3, r6
 800f33e:	0029      	movs	r1, r5
 800f340:	0032      	movs	r2, r6
 800f342:	9803      	ldr	r0, [sp, #12]
 800f344:	f000 fcfe 	bl	800fd44 <__lshift>
 800f348:	0003      	movs	r3, r0
 800f34a:	3314      	adds	r3, #20
 800f34c:	0005      	movs	r5, r0
 800f34e:	1bbf      	subs	r7, r7, r6
 800f350:	9302      	str	r3, [sp, #8]
 800f352:	e7c0      	b.n	800f2d6 <__gethex+0x1de>
 800f354:	9b01      	ldr	r3, [sp, #4]
 800f356:	685e      	ldr	r6, [r3, #4]
 800f358:	42be      	cmp	r6, r7
 800f35a:	dd70      	ble.n	800f43e <__gethex+0x346>
 800f35c:	9b00      	ldr	r3, [sp, #0]
 800f35e:	1bf6      	subs	r6, r6, r7
 800f360:	42b3      	cmp	r3, r6
 800f362:	dc37      	bgt.n	800f3d4 <__gethex+0x2dc>
 800f364:	9b01      	ldr	r3, [sp, #4]
 800f366:	68db      	ldr	r3, [r3, #12]
 800f368:	2b02      	cmp	r3, #2
 800f36a:	d024      	beq.n	800f3b6 <__gethex+0x2be>
 800f36c:	2b03      	cmp	r3, #3
 800f36e:	d026      	beq.n	800f3be <__gethex+0x2c6>
 800f370:	2b01      	cmp	r3, #1
 800f372:	d117      	bne.n	800f3a4 <__gethex+0x2ac>
 800f374:	9b00      	ldr	r3, [sp, #0]
 800f376:	42b3      	cmp	r3, r6
 800f378:	d114      	bne.n	800f3a4 <__gethex+0x2ac>
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d10b      	bne.n	800f396 <__gethex+0x29e>
 800f37e:	9b01      	ldr	r3, [sp, #4]
 800f380:	9a07      	ldr	r2, [sp, #28]
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	2662      	movs	r6, #98	; 0x62
 800f386:	6013      	str	r3, [r2, #0]
 800f388:	2301      	movs	r3, #1
 800f38a:	9a02      	ldr	r2, [sp, #8]
 800f38c:	612b      	str	r3, [r5, #16]
 800f38e:	6013      	str	r3, [r2, #0]
 800f390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f392:	601d      	str	r5, [r3, #0]
 800f394:	e739      	b.n	800f20a <__gethex+0x112>
 800f396:	9900      	ldr	r1, [sp, #0]
 800f398:	0028      	movs	r0, r5
 800f39a:	3901      	subs	r1, #1
 800f39c:	f000 ff06 	bl	80101ac <__any_on>
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d1ec      	bne.n	800f37e <__gethex+0x286>
 800f3a4:	0029      	movs	r1, r5
 800f3a6:	9803      	ldr	r0, [sp, #12]
 800f3a8:	f000 faac 	bl	800f904 <_Bfree>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3b0:	2650      	movs	r6, #80	; 0x50
 800f3b2:	6013      	str	r3, [r2, #0]
 800f3b4:	e729      	b.n	800f20a <__gethex+0x112>
 800f3b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d1f3      	bne.n	800f3a4 <__gethex+0x2ac>
 800f3bc:	e7df      	b.n	800f37e <__gethex+0x286>
 800f3be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d1dc      	bne.n	800f37e <__gethex+0x286>
 800f3c4:	e7ee      	b.n	800f3a4 <__gethex+0x2ac>
 800f3c6:	46c0      	nop			; (mov r8, r8)
 800f3c8:	0801115c 	.word	0x0801115c
 800f3cc:	08011369 	.word	0x08011369
 800f3d0:	0801137a 	.word	0x0801137a
 800f3d4:	1e77      	subs	r7, r6, #1
 800f3d6:	2c00      	cmp	r4, #0
 800f3d8:	d12f      	bne.n	800f43a <__gethex+0x342>
 800f3da:	2f00      	cmp	r7, #0
 800f3dc:	d004      	beq.n	800f3e8 <__gethex+0x2f0>
 800f3de:	0039      	movs	r1, r7
 800f3e0:	0028      	movs	r0, r5
 800f3e2:	f000 fee3 	bl	80101ac <__any_on>
 800f3e6:	0004      	movs	r4, r0
 800f3e8:	231f      	movs	r3, #31
 800f3ea:	117a      	asrs	r2, r7, #5
 800f3ec:	401f      	ands	r7, r3
 800f3ee:	3b1e      	subs	r3, #30
 800f3f0:	40bb      	lsls	r3, r7
 800f3f2:	9902      	ldr	r1, [sp, #8]
 800f3f4:	0092      	lsls	r2, r2, #2
 800f3f6:	5852      	ldr	r2, [r2, r1]
 800f3f8:	421a      	tst	r2, r3
 800f3fa:	d001      	beq.n	800f400 <__gethex+0x308>
 800f3fc:	2302      	movs	r3, #2
 800f3fe:	431c      	orrs	r4, r3
 800f400:	9b00      	ldr	r3, [sp, #0]
 800f402:	0031      	movs	r1, r6
 800f404:	1b9b      	subs	r3, r3, r6
 800f406:	2602      	movs	r6, #2
 800f408:	0028      	movs	r0, r5
 800f40a:	9300      	str	r3, [sp, #0]
 800f40c:	f7ff fe0a 	bl	800f024 <rshift>
 800f410:	9b01      	ldr	r3, [sp, #4]
 800f412:	685f      	ldr	r7, [r3, #4]
 800f414:	2c00      	cmp	r4, #0
 800f416:	d041      	beq.n	800f49c <__gethex+0x3a4>
 800f418:	9b01      	ldr	r3, [sp, #4]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	2b02      	cmp	r3, #2
 800f41e:	d010      	beq.n	800f442 <__gethex+0x34a>
 800f420:	2b03      	cmp	r3, #3
 800f422:	d012      	beq.n	800f44a <__gethex+0x352>
 800f424:	2b01      	cmp	r3, #1
 800f426:	d106      	bne.n	800f436 <__gethex+0x33e>
 800f428:	07a2      	lsls	r2, r4, #30
 800f42a:	d504      	bpl.n	800f436 <__gethex+0x33e>
 800f42c:	9a02      	ldr	r2, [sp, #8]
 800f42e:	6812      	ldr	r2, [r2, #0]
 800f430:	4314      	orrs	r4, r2
 800f432:	421c      	tst	r4, r3
 800f434:	d10c      	bne.n	800f450 <__gethex+0x358>
 800f436:	2310      	movs	r3, #16
 800f438:	e02f      	b.n	800f49a <__gethex+0x3a2>
 800f43a:	2401      	movs	r4, #1
 800f43c:	e7d4      	b.n	800f3e8 <__gethex+0x2f0>
 800f43e:	2601      	movs	r6, #1
 800f440:	e7e8      	b.n	800f414 <__gethex+0x31c>
 800f442:	2301      	movs	r3, #1
 800f444:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f446:	1a9b      	subs	r3, r3, r2
 800f448:	930f      	str	r3, [sp, #60]	; 0x3c
 800f44a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d0f2      	beq.n	800f436 <__gethex+0x33e>
 800f450:	692b      	ldr	r3, [r5, #16]
 800f452:	2000      	movs	r0, #0
 800f454:	9302      	str	r3, [sp, #8]
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	9304      	str	r3, [sp, #16]
 800f45a:	002b      	movs	r3, r5
 800f45c:	9a04      	ldr	r2, [sp, #16]
 800f45e:	3314      	adds	r3, #20
 800f460:	1899      	adds	r1, r3, r2
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	1c54      	adds	r4, r2, #1
 800f466:	d01e      	beq.n	800f4a6 <__gethex+0x3ae>
 800f468:	3201      	adds	r2, #1
 800f46a:	601a      	str	r2, [r3, #0]
 800f46c:	002b      	movs	r3, r5
 800f46e:	3314      	adds	r3, #20
 800f470:	2e02      	cmp	r6, #2
 800f472:	d141      	bne.n	800f4f8 <__gethex+0x400>
 800f474:	9a01      	ldr	r2, [sp, #4]
 800f476:	9900      	ldr	r1, [sp, #0]
 800f478:	6812      	ldr	r2, [r2, #0]
 800f47a:	3a01      	subs	r2, #1
 800f47c:	428a      	cmp	r2, r1
 800f47e:	d10b      	bne.n	800f498 <__gethex+0x3a0>
 800f480:	221f      	movs	r2, #31
 800f482:	9800      	ldr	r0, [sp, #0]
 800f484:	1149      	asrs	r1, r1, #5
 800f486:	4002      	ands	r2, r0
 800f488:	2001      	movs	r0, #1
 800f48a:	0004      	movs	r4, r0
 800f48c:	4094      	lsls	r4, r2
 800f48e:	0089      	lsls	r1, r1, #2
 800f490:	58cb      	ldr	r3, [r1, r3]
 800f492:	4223      	tst	r3, r4
 800f494:	d000      	beq.n	800f498 <__gethex+0x3a0>
 800f496:	2601      	movs	r6, #1
 800f498:	2320      	movs	r3, #32
 800f49a:	431e      	orrs	r6, r3
 800f49c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f49e:	601d      	str	r5, [r3, #0]
 800f4a0:	9b07      	ldr	r3, [sp, #28]
 800f4a2:	601f      	str	r7, [r3, #0]
 800f4a4:	e6b1      	b.n	800f20a <__gethex+0x112>
 800f4a6:	c301      	stmia	r3!, {r0}
 800f4a8:	4299      	cmp	r1, r3
 800f4aa:	d8da      	bhi.n	800f462 <__gethex+0x36a>
 800f4ac:	68ab      	ldr	r3, [r5, #8]
 800f4ae:	9a02      	ldr	r2, [sp, #8]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	db18      	blt.n	800f4e6 <__gethex+0x3ee>
 800f4b4:	6869      	ldr	r1, [r5, #4]
 800f4b6:	9803      	ldr	r0, [sp, #12]
 800f4b8:	3101      	adds	r1, #1
 800f4ba:	f000 f9df 	bl	800f87c <_Balloc>
 800f4be:	1e04      	subs	r4, r0, #0
 800f4c0:	d104      	bne.n	800f4cc <__gethex+0x3d4>
 800f4c2:	0022      	movs	r2, r4
 800f4c4:	2184      	movs	r1, #132	; 0x84
 800f4c6:	4b1c      	ldr	r3, [pc, #112]	; (800f538 <__gethex+0x440>)
 800f4c8:	481c      	ldr	r0, [pc, #112]	; (800f53c <__gethex+0x444>)
 800f4ca:	e6c2      	b.n	800f252 <__gethex+0x15a>
 800f4cc:	0029      	movs	r1, r5
 800f4ce:	692a      	ldr	r2, [r5, #16]
 800f4d0:	310c      	adds	r1, #12
 800f4d2:	3202      	adds	r2, #2
 800f4d4:	0092      	lsls	r2, r2, #2
 800f4d6:	300c      	adds	r0, #12
 800f4d8:	f7fe feac 	bl	800e234 <memcpy>
 800f4dc:	0029      	movs	r1, r5
 800f4de:	9803      	ldr	r0, [sp, #12]
 800f4e0:	f000 fa10 	bl	800f904 <_Bfree>
 800f4e4:	0025      	movs	r5, r4
 800f4e6:	692b      	ldr	r3, [r5, #16]
 800f4e8:	1c5a      	adds	r2, r3, #1
 800f4ea:	612a      	str	r2, [r5, #16]
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	3304      	adds	r3, #4
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	18eb      	adds	r3, r5, r3
 800f4f4:	605a      	str	r2, [r3, #4]
 800f4f6:	e7b9      	b.n	800f46c <__gethex+0x374>
 800f4f8:	692a      	ldr	r2, [r5, #16]
 800f4fa:	9902      	ldr	r1, [sp, #8]
 800f4fc:	428a      	cmp	r2, r1
 800f4fe:	dd09      	ble.n	800f514 <__gethex+0x41c>
 800f500:	2101      	movs	r1, #1
 800f502:	0028      	movs	r0, r5
 800f504:	f7ff fd8e 	bl	800f024 <rshift>
 800f508:	9b01      	ldr	r3, [sp, #4]
 800f50a:	3701      	adds	r7, #1
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	42bb      	cmp	r3, r7
 800f510:	dac1      	bge.n	800f496 <__gethex+0x39e>
 800f512:	e6e4      	b.n	800f2de <__gethex+0x1e6>
 800f514:	221f      	movs	r2, #31
 800f516:	9c00      	ldr	r4, [sp, #0]
 800f518:	9900      	ldr	r1, [sp, #0]
 800f51a:	2601      	movs	r6, #1
 800f51c:	4014      	ands	r4, r2
 800f51e:	4211      	tst	r1, r2
 800f520:	d0ba      	beq.n	800f498 <__gethex+0x3a0>
 800f522:	9a04      	ldr	r2, [sp, #16]
 800f524:	189b      	adds	r3, r3, r2
 800f526:	3b04      	subs	r3, #4
 800f528:	6818      	ldr	r0, [r3, #0]
 800f52a:	f000 fa9f 	bl	800fa6c <__hi0bits>
 800f52e:	2320      	movs	r3, #32
 800f530:	1b1b      	subs	r3, r3, r4
 800f532:	4298      	cmp	r0, r3
 800f534:	dbe4      	blt.n	800f500 <__gethex+0x408>
 800f536:	e7af      	b.n	800f498 <__gethex+0x3a0>
 800f538:	08011369 	.word	0x08011369
 800f53c:	0801137a 	.word	0x0801137a

0800f540 <L_shift>:
 800f540:	2308      	movs	r3, #8
 800f542:	b570      	push	{r4, r5, r6, lr}
 800f544:	2520      	movs	r5, #32
 800f546:	1a9a      	subs	r2, r3, r2
 800f548:	0092      	lsls	r2, r2, #2
 800f54a:	1aad      	subs	r5, r5, r2
 800f54c:	6843      	ldr	r3, [r0, #4]
 800f54e:	6804      	ldr	r4, [r0, #0]
 800f550:	001e      	movs	r6, r3
 800f552:	40ae      	lsls	r6, r5
 800f554:	40d3      	lsrs	r3, r2
 800f556:	4334      	orrs	r4, r6
 800f558:	6004      	str	r4, [r0, #0]
 800f55a:	6043      	str	r3, [r0, #4]
 800f55c:	3004      	adds	r0, #4
 800f55e:	4288      	cmp	r0, r1
 800f560:	d3f4      	bcc.n	800f54c <L_shift+0xc>
 800f562:	bd70      	pop	{r4, r5, r6, pc}

0800f564 <__match>:
 800f564:	b530      	push	{r4, r5, lr}
 800f566:	6803      	ldr	r3, [r0, #0]
 800f568:	780c      	ldrb	r4, [r1, #0]
 800f56a:	3301      	adds	r3, #1
 800f56c:	2c00      	cmp	r4, #0
 800f56e:	d102      	bne.n	800f576 <__match+0x12>
 800f570:	6003      	str	r3, [r0, #0]
 800f572:	2001      	movs	r0, #1
 800f574:	bd30      	pop	{r4, r5, pc}
 800f576:	781a      	ldrb	r2, [r3, #0]
 800f578:	0015      	movs	r5, r2
 800f57a:	3d41      	subs	r5, #65	; 0x41
 800f57c:	2d19      	cmp	r5, #25
 800f57e:	d800      	bhi.n	800f582 <__match+0x1e>
 800f580:	3220      	adds	r2, #32
 800f582:	3101      	adds	r1, #1
 800f584:	42a2      	cmp	r2, r4
 800f586:	d0ef      	beq.n	800f568 <__match+0x4>
 800f588:	2000      	movs	r0, #0
 800f58a:	e7f3      	b.n	800f574 <__match+0x10>

0800f58c <__hexnan>:
 800f58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f58e:	680b      	ldr	r3, [r1, #0]
 800f590:	b08b      	sub	sp, #44	; 0x2c
 800f592:	9201      	str	r2, [sp, #4]
 800f594:	9901      	ldr	r1, [sp, #4]
 800f596:	115a      	asrs	r2, r3, #5
 800f598:	0092      	lsls	r2, r2, #2
 800f59a:	188a      	adds	r2, r1, r2
 800f59c:	9202      	str	r2, [sp, #8]
 800f59e:	0019      	movs	r1, r3
 800f5a0:	221f      	movs	r2, #31
 800f5a2:	4011      	ands	r1, r2
 800f5a4:	9008      	str	r0, [sp, #32]
 800f5a6:	9106      	str	r1, [sp, #24]
 800f5a8:	4213      	tst	r3, r2
 800f5aa:	d002      	beq.n	800f5b2 <__hexnan+0x26>
 800f5ac:	9b02      	ldr	r3, [sp, #8]
 800f5ae:	3304      	adds	r3, #4
 800f5b0:	9302      	str	r3, [sp, #8]
 800f5b2:	9b02      	ldr	r3, [sp, #8]
 800f5b4:	2500      	movs	r5, #0
 800f5b6:	1f1f      	subs	r7, r3, #4
 800f5b8:	003e      	movs	r6, r7
 800f5ba:	003c      	movs	r4, r7
 800f5bc:	9b08      	ldr	r3, [sp, #32]
 800f5be:	603d      	str	r5, [r7, #0]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	9507      	str	r5, [sp, #28]
 800f5c4:	9305      	str	r3, [sp, #20]
 800f5c6:	9503      	str	r5, [sp, #12]
 800f5c8:	9b05      	ldr	r3, [sp, #20]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ce:	9b05      	ldr	r3, [sp, #20]
 800f5d0:	785b      	ldrb	r3, [r3, #1]
 800f5d2:	9304      	str	r3, [sp, #16]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d028      	beq.n	800f62a <__hexnan+0x9e>
 800f5d8:	9804      	ldr	r0, [sp, #16]
 800f5da:	f7ff fd78 	bl	800f0ce <__hexdig_fun>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d154      	bne.n	800f68c <__hexnan+0x100>
 800f5e2:	9b04      	ldr	r3, [sp, #16]
 800f5e4:	2b20      	cmp	r3, #32
 800f5e6:	d819      	bhi.n	800f61c <__hexnan+0x90>
 800f5e8:	9b03      	ldr	r3, [sp, #12]
 800f5ea:	9a07      	ldr	r2, [sp, #28]
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	dd12      	ble.n	800f616 <__hexnan+0x8a>
 800f5f0:	42b4      	cmp	r4, r6
 800f5f2:	d206      	bcs.n	800f602 <__hexnan+0x76>
 800f5f4:	2d07      	cmp	r5, #7
 800f5f6:	dc04      	bgt.n	800f602 <__hexnan+0x76>
 800f5f8:	002a      	movs	r2, r5
 800f5fa:	0031      	movs	r1, r6
 800f5fc:	0020      	movs	r0, r4
 800f5fe:	f7ff ff9f 	bl	800f540 <L_shift>
 800f602:	9b01      	ldr	r3, [sp, #4]
 800f604:	2508      	movs	r5, #8
 800f606:	429c      	cmp	r4, r3
 800f608:	d905      	bls.n	800f616 <__hexnan+0x8a>
 800f60a:	1f26      	subs	r6, r4, #4
 800f60c:	2500      	movs	r5, #0
 800f60e:	0034      	movs	r4, r6
 800f610:	9b03      	ldr	r3, [sp, #12]
 800f612:	6035      	str	r5, [r6, #0]
 800f614:	9307      	str	r3, [sp, #28]
 800f616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f618:	9305      	str	r3, [sp, #20]
 800f61a:	e7d5      	b.n	800f5c8 <__hexnan+0x3c>
 800f61c:	9b04      	ldr	r3, [sp, #16]
 800f61e:	2b29      	cmp	r3, #41	; 0x29
 800f620:	d159      	bne.n	800f6d6 <__hexnan+0x14a>
 800f622:	9b05      	ldr	r3, [sp, #20]
 800f624:	9a08      	ldr	r2, [sp, #32]
 800f626:	3302      	adds	r3, #2
 800f628:	6013      	str	r3, [r2, #0]
 800f62a:	9b03      	ldr	r3, [sp, #12]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d052      	beq.n	800f6d6 <__hexnan+0x14a>
 800f630:	42b4      	cmp	r4, r6
 800f632:	d206      	bcs.n	800f642 <__hexnan+0xb6>
 800f634:	2d07      	cmp	r5, #7
 800f636:	dc04      	bgt.n	800f642 <__hexnan+0xb6>
 800f638:	002a      	movs	r2, r5
 800f63a:	0031      	movs	r1, r6
 800f63c:	0020      	movs	r0, r4
 800f63e:	f7ff ff7f 	bl	800f540 <L_shift>
 800f642:	9b01      	ldr	r3, [sp, #4]
 800f644:	429c      	cmp	r4, r3
 800f646:	d935      	bls.n	800f6b4 <__hexnan+0x128>
 800f648:	001a      	movs	r2, r3
 800f64a:	0023      	movs	r3, r4
 800f64c:	cb02      	ldmia	r3!, {r1}
 800f64e:	c202      	stmia	r2!, {r1}
 800f650:	429f      	cmp	r7, r3
 800f652:	d2fb      	bcs.n	800f64c <__hexnan+0xc0>
 800f654:	9b02      	ldr	r3, [sp, #8]
 800f656:	1c62      	adds	r2, r4, #1
 800f658:	1ed9      	subs	r1, r3, #3
 800f65a:	2304      	movs	r3, #4
 800f65c:	4291      	cmp	r1, r2
 800f65e:	d305      	bcc.n	800f66c <__hexnan+0xe0>
 800f660:	9b02      	ldr	r3, [sp, #8]
 800f662:	3b04      	subs	r3, #4
 800f664:	1b1b      	subs	r3, r3, r4
 800f666:	089b      	lsrs	r3, r3, #2
 800f668:	3301      	adds	r3, #1
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	9a01      	ldr	r2, [sp, #4]
 800f66e:	18d3      	adds	r3, r2, r3
 800f670:	2200      	movs	r2, #0
 800f672:	c304      	stmia	r3!, {r2}
 800f674:	429f      	cmp	r7, r3
 800f676:	d2fc      	bcs.n	800f672 <__hexnan+0xe6>
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d104      	bne.n	800f688 <__hexnan+0xfc>
 800f67e:	9b01      	ldr	r3, [sp, #4]
 800f680:	429f      	cmp	r7, r3
 800f682:	d126      	bne.n	800f6d2 <__hexnan+0x146>
 800f684:	2301      	movs	r3, #1
 800f686:	603b      	str	r3, [r7, #0]
 800f688:	2005      	movs	r0, #5
 800f68a:	e025      	b.n	800f6d8 <__hexnan+0x14c>
 800f68c:	9b03      	ldr	r3, [sp, #12]
 800f68e:	3501      	adds	r5, #1
 800f690:	3301      	adds	r3, #1
 800f692:	9303      	str	r3, [sp, #12]
 800f694:	2d08      	cmp	r5, #8
 800f696:	dd06      	ble.n	800f6a6 <__hexnan+0x11a>
 800f698:	9b01      	ldr	r3, [sp, #4]
 800f69a:	429c      	cmp	r4, r3
 800f69c:	d9bb      	bls.n	800f616 <__hexnan+0x8a>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	2501      	movs	r5, #1
 800f6a2:	3c04      	subs	r4, #4
 800f6a4:	6023      	str	r3, [r4, #0]
 800f6a6:	220f      	movs	r2, #15
 800f6a8:	6823      	ldr	r3, [r4, #0]
 800f6aa:	4010      	ands	r0, r2
 800f6ac:	011b      	lsls	r3, r3, #4
 800f6ae:	4303      	orrs	r3, r0
 800f6b0:	6023      	str	r3, [r4, #0]
 800f6b2:	e7b0      	b.n	800f616 <__hexnan+0x8a>
 800f6b4:	9b06      	ldr	r3, [sp, #24]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d0de      	beq.n	800f678 <__hexnan+0xec>
 800f6ba:	2320      	movs	r3, #32
 800f6bc:	9a06      	ldr	r2, [sp, #24]
 800f6be:	9902      	ldr	r1, [sp, #8]
 800f6c0:	1a9b      	subs	r3, r3, r2
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	4252      	negs	r2, r2
 800f6c6:	40da      	lsrs	r2, r3
 800f6c8:	3904      	subs	r1, #4
 800f6ca:	680b      	ldr	r3, [r1, #0]
 800f6cc:	4013      	ands	r3, r2
 800f6ce:	600b      	str	r3, [r1, #0]
 800f6d0:	e7d2      	b.n	800f678 <__hexnan+0xec>
 800f6d2:	3f04      	subs	r7, #4
 800f6d4:	e7d0      	b.n	800f678 <__hexnan+0xec>
 800f6d6:	2004      	movs	r0, #4
 800f6d8:	b00b      	add	sp, #44	; 0x2c
 800f6da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6dc <malloc>:
 800f6dc:	b510      	push	{r4, lr}
 800f6de:	4b03      	ldr	r3, [pc, #12]	; (800f6ec <malloc+0x10>)
 800f6e0:	0001      	movs	r1, r0
 800f6e2:	6818      	ldr	r0, [r3, #0]
 800f6e4:	f000 f826 	bl	800f734 <_malloc_r>
 800f6e8:	bd10      	pop	{r4, pc}
 800f6ea:	46c0      	nop			; (mov r8, r8)
 800f6ec:	200001ec 	.word	0x200001ec

0800f6f0 <sbrk_aligned>:
 800f6f0:	b570      	push	{r4, r5, r6, lr}
 800f6f2:	4e0f      	ldr	r6, [pc, #60]	; (800f730 <sbrk_aligned+0x40>)
 800f6f4:	000d      	movs	r5, r1
 800f6f6:	6831      	ldr	r1, [r6, #0]
 800f6f8:	0004      	movs	r4, r0
 800f6fa:	2900      	cmp	r1, #0
 800f6fc:	d102      	bne.n	800f704 <sbrk_aligned+0x14>
 800f6fe:	f001 f97f 	bl	8010a00 <_sbrk_r>
 800f702:	6030      	str	r0, [r6, #0]
 800f704:	0029      	movs	r1, r5
 800f706:	0020      	movs	r0, r4
 800f708:	f001 f97a 	bl	8010a00 <_sbrk_r>
 800f70c:	1c43      	adds	r3, r0, #1
 800f70e:	d00a      	beq.n	800f726 <sbrk_aligned+0x36>
 800f710:	2303      	movs	r3, #3
 800f712:	1cc5      	adds	r5, r0, #3
 800f714:	439d      	bics	r5, r3
 800f716:	42a8      	cmp	r0, r5
 800f718:	d007      	beq.n	800f72a <sbrk_aligned+0x3a>
 800f71a:	1a29      	subs	r1, r5, r0
 800f71c:	0020      	movs	r0, r4
 800f71e:	f001 f96f 	bl	8010a00 <_sbrk_r>
 800f722:	3001      	adds	r0, #1
 800f724:	d101      	bne.n	800f72a <sbrk_aligned+0x3a>
 800f726:	2501      	movs	r5, #1
 800f728:	426d      	negs	r5, r5
 800f72a:	0028      	movs	r0, r5
 800f72c:	bd70      	pop	{r4, r5, r6, pc}
 800f72e:	46c0      	nop			; (mov r8, r8)
 800f730:	20005c54 	.word	0x20005c54

0800f734 <_malloc_r>:
 800f734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f736:	2203      	movs	r2, #3
 800f738:	1ccb      	adds	r3, r1, #3
 800f73a:	4393      	bics	r3, r2
 800f73c:	3308      	adds	r3, #8
 800f73e:	0006      	movs	r6, r0
 800f740:	001f      	movs	r7, r3
 800f742:	2b0c      	cmp	r3, #12
 800f744:	d238      	bcs.n	800f7b8 <_malloc_r+0x84>
 800f746:	270c      	movs	r7, #12
 800f748:	42b9      	cmp	r1, r7
 800f74a:	d837      	bhi.n	800f7bc <_malloc_r+0x88>
 800f74c:	0030      	movs	r0, r6
 800f74e:	f000 f885 	bl	800f85c <__malloc_lock>
 800f752:	4b38      	ldr	r3, [pc, #224]	; (800f834 <_malloc_r+0x100>)
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	001c      	movs	r4, r3
 800f75a:	2c00      	cmp	r4, #0
 800f75c:	d133      	bne.n	800f7c6 <_malloc_r+0x92>
 800f75e:	0039      	movs	r1, r7
 800f760:	0030      	movs	r0, r6
 800f762:	f7ff ffc5 	bl	800f6f0 <sbrk_aligned>
 800f766:	0004      	movs	r4, r0
 800f768:	1c43      	adds	r3, r0, #1
 800f76a:	d15e      	bne.n	800f82a <_malloc_r+0xf6>
 800f76c:	9b00      	ldr	r3, [sp, #0]
 800f76e:	681c      	ldr	r4, [r3, #0]
 800f770:	0025      	movs	r5, r4
 800f772:	2d00      	cmp	r5, #0
 800f774:	d14e      	bne.n	800f814 <_malloc_r+0xe0>
 800f776:	2c00      	cmp	r4, #0
 800f778:	d051      	beq.n	800f81e <_malloc_r+0xea>
 800f77a:	6823      	ldr	r3, [r4, #0]
 800f77c:	0029      	movs	r1, r5
 800f77e:	18e3      	adds	r3, r4, r3
 800f780:	0030      	movs	r0, r6
 800f782:	9301      	str	r3, [sp, #4]
 800f784:	f001 f93c 	bl	8010a00 <_sbrk_r>
 800f788:	9b01      	ldr	r3, [sp, #4]
 800f78a:	4283      	cmp	r3, r0
 800f78c:	d147      	bne.n	800f81e <_malloc_r+0xea>
 800f78e:	6823      	ldr	r3, [r4, #0]
 800f790:	0030      	movs	r0, r6
 800f792:	1aff      	subs	r7, r7, r3
 800f794:	0039      	movs	r1, r7
 800f796:	f7ff ffab 	bl	800f6f0 <sbrk_aligned>
 800f79a:	3001      	adds	r0, #1
 800f79c:	d03f      	beq.n	800f81e <_malloc_r+0xea>
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	19db      	adds	r3, r3, r7
 800f7a2:	6023      	str	r3, [r4, #0]
 800f7a4:	9b00      	ldr	r3, [sp, #0]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d040      	beq.n	800f82e <_malloc_r+0xfa>
 800f7ac:	685a      	ldr	r2, [r3, #4]
 800f7ae:	42a2      	cmp	r2, r4
 800f7b0:	d133      	bne.n	800f81a <_malloc_r+0xe6>
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	605a      	str	r2, [r3, #4]
 800f7b6:	e014      	b.n	800f7e2 <_malloc_r+0xae>
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	dac5      	bge.n	800f748 <_malloc_r+0x14>
 800f7bc:	230c      	movs	r3, #12
 800f7be:	2500      	movs	r5, #0
 800f7c0:	6033      	str	r3, [r6, #0]
 800f7c2:	0028      	movs	r0, r5
 800f7c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f7c6:	6821      	ldr	r1, [r4, #0]
 800f7c8:	1bc9      	subs	r1, r1, r7
 800f7ca:	d420      	bmi.n	800f80e <_malloc_r+0xda>
 800f7cc:	290b      	cmp	r1, #11
 800f7ce:	d918      	bls.n	800f802 <_malloc_r+0xce>
 800f7d0:	19e2      	adds	r2, r4, r7
 800f7d2:	6027      	str	r7, [r4, #0]
 800f7d4:	42a3      	cmp	r3, r4
 800f7d6:	d112      	bne.n	800f7fe <_malloc_r+0xca>
 800f7d8:	9b00      	ldr	r3, [sp, #0]
 800f7da:	601a      	str	r2, [r3, #0]
 800f7dc:	6863      	ldr	r3, [r4, #4]
 800f7de:	6011      	str	r1, [r2, #0]
 800f7e0:	6053      	str	r3, [r2, #4]
 800f7e2:	0030      	movs	r0, r6
 800f7e4:	0025      	movs	r5, r4
 800f7e6:	f000 f841 	bl	800f86c <__malloc_unlock>
 800f7ea:	2207      	movs	r2, #7
 800f7ec:	350b      	adds	r5, #11
 800f7ee:	1d23      	adds	r3, r4, #4
 800f7f0:	4395      	bics	r5, r2
 800f7f2:	1aea      	subs	r2, r5, r3
 800f7f4:	429d      	cmp	r5, r3
 800f7f6:	d0e4      	beq.n	800f7c2 <_malloc_r+0x8e>
 800f7f8:	1b5b      	subs	r3, r3, r5
 800f7fa:	50a3      	str	r3, [r4, r2]
 800f7fc:	e7e1      	b.n	800f7c2 <_malloc_r+0x8e>
 800f7fe:	605a      	str	r2, [r3, #4]
 800f800:	e7ec      	b.n	800f7dc <_malloc_r+0xa8>
 800f802:	6862      	ldr	r2, [r4, #4]
 800f804:	42a3      	cmp	r3, r4
 800f806:	d1d5      	bne.n	800f7b4 <_malloc_r+0x80>
 800f808:	9b00      	ldr	r3, [sp, #0]
 800f80a:	601a      	str	r2, [r3, #0]
 800f80c:	e7e9      	b.n	800f7e2 <_malloc_r+0xae>
 800f80e:	0023      	movs	r3, r4
 800f810:	6864      	ldr	r4, [r4, #4]
 800f812:	e7a2      	b.n	800f75a <_malloc_r+0x26>
 800f814:	002c      	movs	r4, r5
 800f816:	686d      	ldr	r5, [r5, #4]
 800f818:	e7ab      	b.n	800f772 <_malloc_r+0x3e>
 800f81a:	0013      	movs	r3, r2
 800f81c:	e7c4      	b.n	800f7a8 <_malloc_r+0x74>
 800f81e:	230c      	movs	r3, #12
 800f820:	0030      	movs	r0, r6
 800f822:	6033      	str	r3, [r6, #0]
 800f824:	f000 f822 	bl	800f86c <__malloc_unlock>
 800f828:	e7cb      	b.n	800f7c2 <_malloc_r+0x8e>
 800f82a:	6027      	str	r7, [r4, #0]
 800f82c:	e7d9      	b.n	800f7e2 <_malloc_r+0xae>
 800f82e:	605b      	str	r3, [r3, #4]
 800f830:	deff      	udf	#255	; 0xff
 800f832:	46c0      	nop			; (mov r8, r8)
 800f834:	20005c50 	.word	0x20005c50

0800f838 <__ascii_mbtowc>:
 800f838:	b082      	sub	sp, #8
 800f83a:	2900      	cmp	r1, #0
 800f83c:	d100      	bne.n	800f840 <__ascii_mbtowc+0x8>
 800f83e:	a901      	add	r1, sp, #4
 800f840:	1e10      	subs	r0, r2, #0
 800f842:	d006      	beq.n	800f852 <__ascii_mbtowc+0x1a>
 800f844:	2b00      	cmp	r3, #0
 800f846:	d006      	beq.n	800f856 <__ascii_mbtowc+0x1e>
 800f848:	7813      	ldrb	r3, [r2, #0]
 800f84a:	600b      	str	r3, [r1, #0]
 800f84c:	7810      	ldrb	r0, [r2, #0]
 800f84e:	1e43      	subs	r3, r0, #1
 800f850:	4198      	sbcs	r0, r3
 800f852:	b002      	add	sp, #8
 800f854:	4770      	bx	lr
 800f856:	2002      	movs	r0, #2
 800f858:	4240      	negs	r0, r0
 800f85a:	e7fa      	b.n	800f852 <__ascii_mbtowc+0x1a>

0800f85c <__malloc_lock>:
 800f85c:	b510      	push	{r4, lr}
 800f85e:	4802      	ldr	r0, [pc, #8]	; (800f868 <__malloc_lock+0xc>)
 800f860:	f7fe fcdb 	bl	800e21a <__retarget_lock_acquire_recursive>
 800f864:	bd10      	pop	{r4, pc}
 800f866:	46c0      	nop			; (mov r8, r8)
 800f868:	20005c4c 	.word	0x20005c4c

0800f86c <__malloc_unlock>:
 800f86c:	b510      	push	{r4, lr}
 800f86e:	4802      	ldr	r0, [pc, #8]	; (800f878 <__malloc_unlock+0xc>)
 800f870:	f7fe fcd4 	bl	800e21c <__retarget_lock_release_recursive>
 800f874:	bd10      	pop	{r4, pc}
 800f876:	46c0      	nop			; (mov r8, r8)
 800f878:	20005c4c 	.word	0x20005c4c

0800f87c <_Balloc>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	69c5      	ldr	r5, [r0, #28]
 800f880:	0006      	movs	r6, r0
 800f882:	000c      	movs	r4, r1
 800f884:	2d00      	cmp	r5, #0
 800f886:	d10e      	bne.n	800f8a6 <_Balloc+0x2a>
 800f888:	2010      	movs	r0, #16
 800f88a:	f7ff ff27 	bl	800f6dc <malloc>
 800f88e:	1e02      	subs	r2, r0, #0
 800f890:	61f0      	str	r0, [r6, #28]
 800f892:	d104      	bne.n	800f89e <_Balloc+0x22>
 800f894:	216b      	movs	r1, #107	; 0x6b
 800f896:	4b19      	ldr	r3, [pc, #100]	; (800f8fc <_Balloc+0x80>)
 800f898:	4819      	ldr	r0, [pc, #100]	; (800f900 <_Balloc+0x84>)
 800f89a:	f001 f8c3 	bl	8010a24 <__assert_func>
 800f89e:	6045      	str	r5, [r0, #4]
 800f8a0:	6085      	str	r5, [r0, #8]
 800f8a2:	6005      	str	r5, [r0, #0]
 800f8a4:	60c5      	str	r5, [r0, #12]
 800f8a6:	69f5      	ldr	r5, [r6, #28]
 800f8a8:	68eb      	ldr	r3, [r5, #12]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d013      	beq.n	800f8d6 <_Balloc+0x5a>
 800f8ae:	69f3      	ldr	r3, [r6, #28]
 800f8b0:	00a2      	lsls	r2, r4, #2
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	189b      	adds	r3, r3, r2
 800f8b6:	6818      	ldr	r0, [r3, #0]
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d118      	bne.n	800f8ee <_Balloc+0x72>
 800f8bc:	2101      	movs	r1, #1
 800f8be:	000d      	movs	r5, r1
 800f8c0:	40a5      	lsls	r5, r4
 800f8c2:	1d6a      	adds	r2, r5, #5
 800f8c4:	0030      	movs	r0, r6
 800f8c6:	0092      	lsls	r2, r2, #2
 800f8c8:	f001 f8ca 	bl	8010a60 <_calloc_r>
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d00c      	beq.n	800f8ea <_Balloc+0x6e>
 800f8d0:	6044      	str	r4, [r0, #4]
 800f8d2:	6085      	str	r5, [r0, #8]
 800f8d4:	e00d      	b.n	800f8f2 <_Balloc+0x76>
 800f8d6:	2221      	movs	r2, #33	; 0x21
 800f8d8:	2104      	movs	r1, #4
 800f8da:	0030      	movs	r0, r6
 800f8dc:	f001 f8c0 	bl	8010a60 <_calloc_r>
 800f8e0:	69f3      	ldr	r3, [r6, #28]
 800f8e2:	60e8      	str	r0, [r5, #12]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d1e1      	bne.n	800f8ae <_Balloc+0x32>
 800f8ea:	2000      	movs	r0, #0
 800f8ec:	bd70      	pop	{r4, r5, r6, pc}
 800f8ee:	6802      	ldr	r2, [r0, #0]
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	6103      	str	r3, [r0, #16]
 800f8f6:	60c3      	str	r3, [r0, #12]
 800f8f8:	e7f8      	b.n	800f8ec <_Balloc+0x70>
 800f8fa:	46c0      	nop			; (mov r8, r8)
 800f8fc:	080112fa 	.word	0x080112fa
 800f900:	080113da 	.word	0x080113da

0800f904 <_Bfree>:
 800f904:	b570      	push	{r4, r5, r6, lr}
 800f906:	69c6      	ldr	r6, [r0, #28]
 800f908:	0005      	movs	r5, r0
 800f90a:	000c      	movs	r4, r1
 800f90c:	2e00      	cmp	r6, #0
 800f90e:	d10e      	bne.n	800f92e <_Bfree+0x2a>
 800f910:	2010      	movs	r0, #16
 800f912:	f7ff fee3 	bl	800f6dc <malloc>
 800f916:	1e02      	subs	r2, r0, #0
 800f918:	61e8      	str	r0, [r5, #28]
 800f91a:	d104      	bne.n	800f926 <_Bfree+0x22>
 800f91c:	218f      	movs	r1, #143	; 0x8f
 800f91e:	4b09      	ldr	r3, [pc, #36]	; (800f944 <_Bfree+0x40>)
 800f920:	4809      	ldr	r0, [pc, #36]	; (800f948 <_Bfree+0x44>)
 800f922:	f001 f87f 	bl	8010a24 <__assert_func>
 800f926:	6046      	str	r6, [r0, #4]
 800f928:	6086      	str	r6, [r0, #8]
 800f92a:	6006      	str	r6, [r0, #0]
 800f92c:	60c6      	str	r6, [r0, #12]
 800f92e:	2c00      	cmp	r4, #0
 800f930:	d007      	beq.n	800f942 <_Bfree+0x3e>
 800f932:	69eb      	ldr	r3, [r5, #28]
 800f934:	6862      	ldr	r2, [r4, #4]
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	0092      	lsls	r2, r2, #2
 800f93a:	189b      	adds	r3, r3, r2
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	6022      	str	r2, [r4, #0]
 800f940:	601c      	str	r4, [r3, #0]
 800f942:	bd70      	pop	{r4, r5, r6, pc}
 800f944:	080112fa 	.word	0x080112fa
 800f948:	080113da 	.word	0x080113da

0800f94c <__multadd>:
 800f94c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f94e:	000e      	movs	r6, r1
 800f950:	9001      	str	r0, [sp, #4]
 800f952:	000c      	movs	r4, r1
 800f954:	001d      	movs	r5, r3
 800f956:	2000      	movs	r0, #0
 800f958:	690f      	ldr	r7, [r1, #16]
 800f95a:	3614      	adds	r6, #20
 800f95c:	6833      	ldr	r3, [r6, #0]
 800f95e:	3001      	adds	r0, #1
 800f960:	b299      	uxth	r1, r3
 800f962:	4351      	muls	r1, r2
 800f964:	0c1b      	lsrs	r3, r3, #16
 800f966:	4353      	muls	r3, r2
 800f968:	1949      	adds	r1, r1, r5
 800f96a:	0c0d      	lsrs	r5, r1, #16
 800f96c:	195b      	adds	r3, r3, r5
 800f96e:	0c1d      	lsrs	r5, r3, #16
 800f970:	b289      	uxth	r1, r1
 800f972:	041b      	lsls	r3, r3, #16
 800f974:	185b      	adds	r3, r3, r1
 800f976:	c608      	stmia	r6!, {r3}
 800f978:	4287      	cmp	r7, r0
 800f97a:	dcef      	bgt.n	800f95c <__multadd+0x10>
 800f97c:	2d00      	cmp	r5, #0
 800f97e:	d022      	beq.n	800f9c6 <__multadd+0x7a>
 800f980:	68a3      	ldr	r3, [r4, #8]
 800f982:	42bb      	cmp	r3, r7
 800f984:	dc19      	bgt.n	800f9ba <__multadd+0x6e>
 800f986:	6861      	ldr	r1, [r4, #4]
 800f988:	9801      	ldr	r0, [sp, #4]
 800f98a:	3101      	adds	r1, #1
 800f98c:	f7ff ff76 	bl	800f87c <_Balloc>
 800f990:	1e06      	subs	r6, r0, #0
 800f992:	d105      	bne.n	800f9a0 <__multadd+0x54>
 800f994:	0032      	movs	r2, r6
 800f996:	21ba      	movs	r1, #186	; 0xba
 800f998:	4b0c      	ldr	r3, [pc, #48]	; (800f9cc <__multadd+0x80>)
 800f99a:	480d      	ldr	r0, [pc, #52]	; (800f9d0 <__multadd+0x84>)
 800f99c:	f001 f842 	bl	8010a24 <__assert_func>
 800f9a0:	0021      	movs	r1, r4
 800f9a2:	6922      	ldr	r2, [r4, #16]
 800f9a4:	310c      	adds	r1, #12
 800f9a6:	3202      	adds	r2, #2
 800f9a8:	0092      	lsls	r2, r2, #2
 800f9aa:	300c      	adds	r0, #12
 800f9ac:	f7fe fc42 	bl	800e234 <memcpy>
 800f9b0:	0021      	movs	r1, r4
 800f9b2:	9801      	ldr	r0, [sp, #4]
 800f9b4:	f7ff ffa6 	bl	800f904 <_Bfree>
 800f9b8:	0034      	movs	r4, r6
 800f9ba:	1d3b      	adds	r3, r7, #4
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	18e3      	adds	r3, r4, r3
 800f9c0:	605d      	str	r5, [r3, #4]
 800f9c2:	1c7b      	adds	r3, r7, #1
 800f9c4:	6123      	str	r3, [r4, #16]
 800f9c6:	0020      	movs	r0, r4
 800f9c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f9ca:	46c0      	nop			; (mov r8, r8)
 800f9cc:	08011369 	.word	0x08011369
 800f9d0:	080113da 	.word	0x080113da

0800f9d4 <__s2b>:
 800f9d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9d6:	0006      	movs	r6, r0
 800f9d8:	0018      	movs	r0, r3
 800f9da:	000c      	movs	r4, r1
 800f9dc:	3008      	adds	r0, #8
 800f9de:	2109      	movs	r1, #9
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	0015      	movs	r5, r2
 800f9e4:	f7f0 fc40 	bl	8000268 <__divsi3>
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	4283      	cmp	r3, r0
 800f9ee:	db0a      	blt.n	800fa06 <__s2b+0x32>
 800f9f0:	0030      	movs	r0, r6
 800f9f2:	f7ff ff43 	bl	800f87c <_Balloc>
 800f9f6:	1e01      	subs	r1, r0, #0
 800f9f8:	d108      	bne.n	800fa0c <__s2b+0x38>
 800f9fa:	000a      	movs	r2, r1
 800f9fc:	4b19      	ldr	r3, [pc, #100]	; (800fa64 <__s2b+0x90>)
 800f9fe:	481a      	ldr	r0, [pc, #104]	; (800fa68 <__s2b+0x94>)
 800fa00:	31d3      	adds	r1, #211	; 0xd3
 800fa02:	f001 f80f 	bl	8010a24 <__assert_func>
 800fa06:	005b      	lsls	r3, r3, #1
 800fa08:	3101      	adds	r1, #1
 800fa0a:	e7ef      	b.n	800f9ec <__s2b+0x18>
 800fa0c:	9b08      	ldr	r3, [sp, #32]
 800fa0e:	6143      	str	r3, [r0, #20]
 800fa10:	2301      	movs	r3, #1
 800fa12:	6103      	str	r3, [r0, #16]
 800fa14:	2d09      	cmp	r5, #9
 800fa16:	dd18      	ble.n	800fa4a <__s2b+0x76>
 800fa18:	0023      	movs	r3, r4
 800fa1a:	3309      	adds	r3, #9
 800fa1c:	001f      	movs	r7, r3
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	1964      	adds	r4, r4, r5
 800fa22:	783b      	ldrb	r3, [r7, #0]
 800fa24:	220a      	movs	r2, #10
 800fa26:	0030      	movs	r0, r6
 800fa28:	3b30      	subs	r3, #48	; 0x30
 800fa2a:	f7ff ff8f 	bl	800f94c <__multadd>
 800fa2e:	3701      	adds	r7, #1
 800fa30:	0001      	movs	r1, r0
 800fa32:	42a7      	cmp	r7, r4
 800fa34:	d1f5      	bne.n	800fa22 <__s2b+0x4e>
 800fa36:	002c      	movs	r4, r5
 800fa38:	9b00      	ldr	r3, [sp, #0]
 800fa3a:	3c08      	subs	r4, #8
 800fa3c:	191c      	adds	r4, r3, r4
 800fa3e:	002f      	movs	r7, r5
 800fa40:	9b01      	ldr	r3, [sp, #4]
 800fa42:	429f      	cmp	r7, r3
 800fa44:	db04      	blt.n	800fa50 <__s2b+0x7c>
 800fa46:	0008      	movs	r0, r1
 800fa48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa4a:	2509      	movs	r5, #9
 800fa4c:	340a      	adds	r4, #10
 800fa4e:	e7f6      	b.n	800fa3e <__s2b+0x6a>
 800fa50:	1b63      	subs	r3, r4, r5
 800fa52:	5ddb      	ldrb	r3, [r3, r7]
 800fa54:	220a      	movs	r2, #10
 800fa56:	0030      	movs	r0, r6
 800fa58:	3b30      	subs	r3, #48	; 0x30
 800fa5a:	f7ff ff77 	bl	800f94c <__multadd>
 800fa5e:	3701      	adds	r7, #1
 800fa60:	0001      	movs	r1, r0
 800fa62:	e7ed      	b.n	800fa40 <__s2b+0x6c>
 800fa64:	08011369 	.word	0x08011369
 800fa68:	080113da 	.word	0x080113da

0800fa6c <__hi0bits>:
 800fa6c:	0003      	movs	r3, r0
 800fa6e:	0c02      	lsrs	r2, r0, #16
 800fa70:	2000      	movs	r0, #0
 800fa72:	4282      	cmp	r2, r0
 800fa74:	d101      	bne.n	800fa7a <__hi0bits+0xe>
 800fa76:	041b      	lsls	r3, r3, #16
 800fa78:	3010      	adds	r0, #16
 800fa7a:	0e1a      	lsrs	r2, r3, #24
 800fa7c:	d101      	bne.n	800fa82 <__hi0bits+0x16>
 800fa7e:	3008      	adds	r0, #8
 800fa80:	021b      	lsls	r3, r3, #8
 800fa82:	0f1a      	lsrs	r2, r3, #28
 800fa84:	d101      	bne.n	800fa8a <__hi0bits+0x1e>
 800fa86:	3004      	adds	r0, #4
 800fa88:	011b      	lsls	r3, r3, #4
 800fa8a:	0f9a      	lsrs	r2, r3, #30
 800fa8c:	d101      	bne.n	800fa92 <__hi0bits+0x26>
 800fa8e:	3002      	adds	r0, #2
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	db03      	blt.n	800fa9e <__hi0bits+0x32>
 800fa96:	3001      	adds	r0, #1
 800fa98:	005b      	lsls	r3, r3, #1
 800fa9a:	d400      	bmi.n	800fa9e <__hi0bits+0x32>
 800fa9c:	2020      	movs	r0, #32
 800fa9e:	4770      	bx	lr

0800faa0 <__lo0bits>:
 800faa0:	6803      	ldr	r3, [r0, #0]
 800faa2:	0001      	movs	r1, r0
 800faa4:	2207      	movs	r2, #7
 800faa6:	0018      	movs	r0, r3
 800faa8:	4010      	ands	r0, r2
 800faaa:	4213      	tst	r3, r2
 800faac:	d00d      	beq.n	800faca <__lo0bits+0x2a>
 800faae:	3a06      	subs	r2, #6
 800fab0:	2000      	movs	r0, #0
 800fab2:	4213      	tst	r3, r2
 800fab4:	d105      	bne.n	800fac2 <__lo0bits+0x22>
 800fab6:	3002      	adds	r0, #2
 800fab8:	4203      	tst	r3, r0
 800faba:	d003      	beq.n	800fac4 <__lo0bits+0x24>
 800fabc:	40d3      	lsrs	r3, r2
 800fabe:	0010      	movs	r0, r2
 800fac0:	600b      	str	r3, [r1, #0]
 800fac2:	4770      	bx	lr
 800fac4:	089b      	lsrs	r3, r3, #2
 800fac6:	600b      	str	r3, [r1, #0]
 800fac8:	e7fb      	b.n	800fac2 <__lo0bits+0x22>
 800faca:	b29a      	uxth	r2, r3
 800facc:	2a00      	cmp	r2, #0
 800face:	d101      	bne.n	800fad4 <__lo0bits+0x34>
 800fad0:	2010      	movs	r0, #16
 800fad2:	0c1b      	lsrs	r3, r3, #16
 800fad4:	b2da      	uxtb	r2, r3
 800fad6:	2a00      	cmp	r2, #0
 800fad8:	d101      	bne.n	800fade <__lo0bits+0x3e>
 800fada:	3008      	adds	r0, #8
 800fadc:	0a1b      	lsrs	r3, r3, #8
 800fade:	071a      	lsls	r2, r3, #28
 800fae0:	d101      	bne.n	800fae6 <__lo0bits+0x46>
 800fae2:	3004      	adds	r0, #4
 800fae4:	091b      	lsrs	r3, r3, #4
 800fae6:	079a      	lsls	r2, r3, #30
 800fae8:	d101      	bne.n	800faee <__lo0bits+0x4e>
 800faea:	3002      	adds	r0, #2
 800faec:	089b      	lsrs	r3, r3, #2
 800faee:	07da      	lsls	r2, r3, #31
 800faf0:	d4e9      	bmi.n	800fac6 <__lo0bits+0x26>
 800faf2:	3001      	adds	r0, #1
 800faf4:	085b      	lsrs	r3, r3, #1
 800faf6:	d1e6      	bne.n	800fac6 <__lo0bits+0x26>
 800faf8:	2020      	movs	r0, #32
 800fafa:	e7e2      	b.n	800fac2 <__lo0bits+0x22>

0800fafc <__i2b>:
 800fafc:	b510      	push	{r4, lr}
 800fafe:	000c      	movs	r4, r1
 800fb00:	2101      	movs	r1, #1
 800fb02:	f7ff febb 	bl	800f87c <_Balloc>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	d107      	bne.n	800fb1a <__i2b+0x1e>
 800fb0a:	2146      	movs	r1, #70	; 0x46
 800fb0c:	4c05      	ldr	r4, [pc, #20]	; (800fb24 <__i2b+0x28>)
 800fb0e:	0002      	movs	r2, r0
 800fb10:	4b05      	ldr	r3, [pc, #20]	; (800fb28 <__i2b+0x2c>)
 800fb12:	0020      	movs	r0, r4
 800fb14:	31ff      	adds	r1, #255	; 0xff
 800fb16:	f000 ff85 	bl	8010a24 <__assert_func>
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	6144      	str	r4, [r0, #20]
 800fb1e:	6103      	str	r3, [r0, #16]
 800fb20:	bd10      	pop	{r4, pc}
 800fb22:	46c0      	nop			; (mov r8, r8)
 800fb24:	080113da 	.word	0x080113da
 800fb28:	08011369 	.word	0x08011369

0800fb2c <__multiply>:
 800fb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb2e:	0015      	movs	r5, r2
 800fb30:	690a      	ldr	r2, [r1, #16]
 800fb32:	692b      	ldr	r3, [r5, #16]
 800fb34:	000c      	movs	r4, r1
 800fb36:	b08b      	sub	sp, #44	; 0x2c
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	da01      	bge.n	800fb40 <__multiply+0x14>
 800fb3c:	002c      	movs	r4, r5
 800fb3e:	000d      	movs	r5, r1
 800fb40:	6927      	ldr	r7, [r4, #16]
 800fb42:	692e      	ldr	r6, [r5, #16]
 800fb44:	6861      	ldr	r1, [r4, #4]
 800fb46:	19bb      	adds	r3, r7, r6
 800fb48:	9303      	str	r3, [sp, #12]
 800fb4a:	68a3      	ldr	r3, [r4, #8]
 800fb4c:	19ba      	adds	r2, r7, r6
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	da00      	bge.n	800fb54 <__multiply+0x28>
 800fb52:	3101      	adds	r1, #1
 800fb54:	f7ff fe92 	bl	800f87c <_Balloc>
 800fb58:	9002      	str	r0, [sp, #8]
 800fb5a:	2800      	cmp	r0, #0
 800fb5c:	d106      	bne.n	800fb6c <__multiply+0x40>
 800fb5e:	21b1      	movs	r1, #177	; 0xb1
 800fb60:	4b48      	ldr	r3, [pc, #288]	; (800fc84 <__multiply+0x158>)
 800fb62:	4849      	ldr	r0, [pc, #292]	; (800fc88 <__multiply+0x15c>)
 800fb64:	9a02      	ldr	r2, [sp, #8]
 800fb66:	0049      	lsls	r1, r1, #1
 800fb68:	f000 ff5c 	bl	8010a24 <__assert_func>
 800fb6c:	9b02      	ldr	r3, [sp, #8]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	3314      	adds	r3, #20
 800fb72:	469c      	mov	ip, r3
 800fb74:	19bb      	adds	r3, r7, r6
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4463      	add	r3, ip
 800fb7a:	9304      	str	r3, [sp, #16]
 800fb7c:	4663      	mov	r3, ip
 800fb7e:	9904      	ldr	r1, [sp, #16]
 800fb80:	428b      	cmp	r3, r1
 800fb82:	d32a      	bcc.n	800fbda <__multiply+0xae>
 800fb84:	0023      	movs	r3, r4
 800fb86:	00bf      	lsls	r7, r7, #2
 800fb88:	3314      	adds	r3, #20
 800fb8a:	3514      	adds	r5, #20
 800fb8c:	9308      	str	r3, [sp, #32]
 800fb8e:	00b6      	lsls	r6, r6, #2
 800fb90:	19db      	adds	r3, r3, r7
 800fb92:	9305      	str	r3, [sp, #20]
 800fb94:	19ab      	adds	r3, r5, r6
 800fb96:	9309      	str	r3, [sp, #36]	; 0x24
 800fb98:	2304      	movs	r3, #4
 800fb9a:	9306      	str	r3, [sp, #24]
 800fb9c:	0023      	movs	r3, r4
 800fb9e:	9a05      	ldr	r2, [sp, #20]
 800fba0:	3315      	adds	r3, #21
 800fba2:	9501      	str	r5, [sp, #4]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d305      	bcc.n	800fbb4 <__multiply+0x88>
 800fba8:	1b13      	subs	r3, r2, r4
 800fbaa:	3b15      	subs	r3, #21
 800fbac:	089b      	lsrs	r3, r3, #2
 800fbae:	3301      	adds	r3, #1
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	9306      	str	r3, [sp, #24]
 800fbb4:	9b01      	ldr	r3, [sp, #4]
 800fbb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d310      	bcc.n	800fbde <__multiply+0xb2>
 800fbbc:	9b03      	ldr	r3, [sp, #12]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	dd05      	ble.n	800fbce <__multiply+0xa2>
 800fbc2:	9b04      	ldr	r3, [sp, #16]
 800fbc4:	3b04      	subs	r3, #4
 800fbc6:	9304      	str	r3, [sp, #16]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d056      	beq.n	800fc7c <__multiply+0x150>
 800fbce:	9b02      	ldr	r3, [sp, #8]
 800fbd0:	9a03      	ldr	r2, [sp, #12]
 800fbd2:	0018      	movs	r0, r3
 800fbd4:	611a      	str	r2, [r3, #16]
 800fbd6:	b00b      	add	sp, #44	; 0x2c
 800fbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbda:	c304      	stmia	r3!, {r2}
 800fbdc:	e7cf      	b.n	800fb7e <__multiply+0x52>
 800fbde:	9b01      	ldr	r3, [sp, #4]
 800fbe0:	6818      	ldr	r0, [r3, #0]
 800fbe2:	b280      	uxth	r0, r0
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d01e      	beq.n	800fc26 <__multiply+0xfa>
 800fbe8:	4667      	mov	r7, ip
 800fbea:	2500      	movs	r5, #0
 800fbec:	9e08      	ldr	r6, [sp, #32]
 800fbee:	ce02      	ldmia	r6!, {r1}
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	9307      	str	r3, [sp, #28]
 800fbf4:	b28b      	uxth	r3, r1
 800fbf6:	4343      	muls	r3, r0
 800fbf8:	001a      	movs	r2, r3
 800fbfa:	466b      	mov	r3, sp
 800fbfc:	8b9b      	ldrh	r3, [r3, #28]
 800fbfe:	18d3      	adds	r3, r2, r3
 800fc00:	195b      	adds	r3, r3, r5
 800fc02:	0c0d      	lsrs	r5, r1, #16
 800fc04:	4345      	muls	r5, r0
 800fc06:	9a07      	ldr	r2, [sp, #28]
 800fc08:	0c11      	lsrs	r1, r2, #16
 800fc0a:	1869      	adds	r1, r5, r1
 800fc0c:	0c1a      	lsrs	r2, r3, #16
 800fc0e:	188a      	adds	r2, r1, r2
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	0c15      	lsrs	r5, r2, #16
 800fc14:	0412      	lsls	r2, r2, #16
 800fc16:	431a      	orrs	r2, r3
 800fc18:	9b05      	ldr	r3, [sp, #20]
 800fc1a:	c704      	stmia	r7!, {r2}
 800fc1c:	42b3      	cmp	r3, r6
 800fc1e:	d8e6      	bhi.n	800fbee <__multiply+0xc2>
 800fc20:	4663      	mov	r3, ip
 800fc22:	9a06      	ldr	r2, [sp, #24]
 800fc24:	509d      	str	r5, [r3, r2]
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	0c00      	lsrs	r0, r0, #16
 800fc2c:	d020      	beq.n	800fc70 <__multiply+0x144>
 800fc2e:	4663      	mov	r3, ip
 800fc30:	0025      	movs	r5, r4
 800fc32:	4661      	mov	r1, ip
 800fc34:	2700      	movs	r7, #0
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	3514      	adds	r5, #20
 800fc3a:	682a      	ldr	r2, [r5, #0]
 800fc3c:	680e      	ldr	r6, [r1, #0]
 800fc3e:	b292      	uxth	r2, r2
 800fc40:	4342      	muls	r2, r0
 800fc42:	0c36      	lsrs	r6, r6, #16
 800fc44:	1992      	adds	r2, r2, r6
 800fc46:	19d2      	adds	r2, r2, r7
 800fc48:	0416      	lsls	r6, r2, #16
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	431e      	orrs	r6, r3
 800fc4e:	600e      	str	r6, [r1, #0]
 800fc50:	cd40      	ldmia	r5!, {r6}
 800fc52:	684b      	ldr	r3, [r1, #4]
 800fc54:	0c36      	lsrs	r6, r6, #16
 800fc56:	4346      	muls	r6, r0
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	0c12      	lsrs	r2, r2, #16
 800fc5c:	18f3      	adds	r3, r6, r3
 800fc5e:	189b      	adds	r3, r3, r2
 800fc60:	9a05      	ldr	r2, [sp, #20]
 800fc62:	0c1f      	lsrs	r7, r3, #16
 800fc64:	3104      	adds	r1, #4
 800fc66:	42aa      	cmp	r2, r5
 800fc68:	d8e7      	bhi.n	800fc3a <__multiply+0x10e>
 800fc6a:	4662      	mov	r2, ip
 800fc6c:	9906      	ldr	r1, [sp, #24]
 800fc6e:	5053      	str	r3, [r2, r1]
 800fc70:	9b01      	ldr	r3, [sp, #4]
 800fc72:	3304      	adds	r3, #4
 800fc74:	9301      	str	r3, [sp, #4]
 800fc76:	2304      	movs	r3, #4
 800fc78:	449c      	add	ip, r3
 800fc7a:	e79b      	b.n	800fbb4 <__multiply+0x88>
 800fc7c:	9b03      	ldr	r3, [sp, #12]
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	9303      	str	r3, [sp, #12]
 800fc82:	e79b      	b.n	800fbbc <__multiply+0x90>
 800fc84:	08011369 	.word	0x08011369
 800fc88:	080113da 	.word	0x080113da

0800fc8c <__pow5mult>:
 800fc8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc8e:	2303      	movs	r3, #3
 800fc90:	0015      	movs	r5, r2
 800fc92:	0007      	movs	r7, r0
 800fc94:	000e      	movs	r6, r1
 800fc96:	401a      	ands	r2, r3
 800fc98:	421d      	tst	r5, r3
 800fc9a:	d008      	beq.n	800fcae <__pow5mult+0x22>
 800fc9c:	4925      	ldr	r1, [pc, #148]	; (800fd34 <__pow5mult+0xa8>)
 800fc9e:	3a01      	subs	r2, #1
 800fca0:	0092      	lsls	r2, r2, #2
 800fca2:	5852      	ldr	r2, [r2, r1]
 800fca4:	2300      	movs	r3, #0
 800fca6:	0031      	movs	r1, r6
 800fca8:	f7ff fe50 	bl	800f94c <__multadd>
 800fcac:	0006      	movs	r6, r0
 800fcae:	10ad      	asrs	r5, r5, #2
 800fcb0:	d03d      	beq.n	800fd2e <__pow5mult+0xa2>
 800fcb2:	69fc      	ldr	r4, [r7, #28]
 800fcb4:	2c00      	cmp	r4, #0
 800fcb6:	d10f      	bne.n	800fcd8 <__pow5mult+0x4c>
 800fcb8:	2010      	movs	r0, #16
 800fcba:	f7ff fd0f 	bl	800f6dc <malloc>
 800fcbe:	1e02      	subs	r2, r0, #0
 800fcc0:	61f8      	str	r0, [r7, #28]
 800fcc2:	d105      	bne.n	800fcd0 <__pow5mult+0x44>
 800fcc4:	21b4      	movs	r1, #180	; 0xb4
 800fcc6:	4b1c      	ldr	r3, [pc, #112]	; (800fd38 <__pow5mult+0xac>)
 800fcc8:	481c      	ldr	r0, [pc, #112]	; (800fd3c <__pow5mult+0xb0>)
 800fcca:	31ff      	adds	r1, #255	; 0xff
 800fccc:	f000 feaa 	bl	8010a24 <__assert_func>
 800fcd0:	6044      	str	r4, [r0, #4]
 800fcd2:	6084      	str	r4, [r0, #8]
 800fcd4:	6004      	str	r4, [r0, #0]
 800fcd6:	60c4      	str	r4, [r0, #12]
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	689c      	ldr	r4, [r3, #8]
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	2c00      	cmp	r4, #0
 800fce0:	d108      	bne.n	800fcf4 <__pow5mult+0x68>
 800fce2:	0038      	movs	r0, r7
 800fce4:	4916      	ldr	r1, [pc, #88]	; (800fd40 <__pow5mult+0xb4>)
 800fce6:	f7ff ff09 	bl	800fafc <__i2b>
 800fcea:	9b01      	ldr	r3, [sp, #4]
 800fcec:	0004      	movs	r4, r0
 800fcee:	6098      	str	r0, [r3, #8]
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	6003      	str	r3, [r0, #0]
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	421d      	tst	r5, r3
 800fcf8:	d00a      	beq.n	800fd10 <__pow5mult+0x84>
 800fcfa:	0031      	movs	r1, r6
 800fcfc:	0022      	movs	r2, r4
 800fcfe:	0038      	movs	r0, r7
 800fd00:	f7ff ff14 	bl	800fb2c <__multiply>
 800fd04:	0031      	movs	r1, r6
 800fd06:	9001      	str	r0, [sp, #4]
 800fd08:	0038      	movs	r0, r7
 800fd0a:	f7ff fdfb 	bl	800f904 <_Bfree>
 800fd0e:	9e01      	ldr	r6, [sp, #4]
 800fd10:	106d      	asrs	r5, r5, #1
 800fd12:	d00c      	beq.n	800fd2e <__pow5mult+0xa2>
 800fd14:	6820      	ldr	r0, [r4, #0]
 800fd16:	2800      	cmp	r0, #0
 800fd18:	d107      	bne.n	800fd2a <__pow5mult+0x9e>
 800fd1a:	0022      	movs	r2, r4
 800fd1c:	0021      	movs	r1, r4
 800fd1e:	0038      	movs	r0, r7
 800fd20:	f7ff ff04 	bl	800fb2c <__multiply>
 800fd24:	2300      	movs	r3, #0
 800fd26:	6020      	str	r0, [r4, #0]
 800fd28:	6003      	str	r3, [r0, #0]
 800fd2a:	0004      	movs	r4, r0
 800fd2c:	e7e2      	b.n	800fcf4 <__pow5mult+0x68>
 800fd2e:	0030      	movs	r0, r6
 800fd30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fd32:	46c0      	nop			; (mov r8, r8)
 800fd34:	08011528 	.word	0x08011528
 800fd38:	080112fa 	.word	0x080112fa
 800fd3c:	080113da 	.word	0x080113da
 800fd40:	00000271 	.word	0x00000271

0800fd44 <__lshift>:
 800fd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd46:	000c      	movs	r4, r1
 800fd48:	0017      	movs	r7, r2
 800fd4a:	6923      	ldr	r3, [r4, #16]
 800fd4c:	1155      	asrs	r5, r2, #5
 800fd4e:	b087      	sub	sp, #28
 800fd50:	18eb      	adds	r3, r5, r3
 800fd52:	9302      	str	r3, [sp, #8]
 800fd54:	3301      	adds	r3, #1
 800fd56:	9301      	str	r3, [sp, #4]
 800fd58:	6849      	ldr	r1, [r1, #4]
 800fd5a:	68a3      	ldr	r3, [r4, #8]
 800fd5c:	9004      	str	r0, [sp, #16]
 800fd5e:	9a01      	ldr	r2, [sp, #4]
 800fd60:	4293      	cmp	r3, r2
 800fd62:	db10      	blt.n	800fd86 <__lshift+0x42>
 800fd64:	9804      	ldr	r0, [sp, #16]
 800fd66:	f7ff fd89 	bl	800f87c <_Balloc>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	0002      	movs	r2, r0
 800fd6e:	0006      	movs	r6, r0
 800fd70:	0019      	movs	r1, r3
 800fd72:	3214      	adds	r2, #20
 800fd74:	4298      	cmp	r0, r3
 800fd76:	d10c      	bne.n	800fd92 <__lshift+0x4e>
 800fd78:	31df      	adds	r1, #223	; 0xdf
 800fd7a:	0032      	movs	r2, r6
 800fd7c:	4b26      	ldr	r3, [pc, #152]	; (800fe18 <__lshift+0xd4>)
 800fd7e:	4827      	ldr	r0, [pc, #156]	; (800fe1c <__lshift+0xd8>)
 800fd80:	31ff      	adds	r1, #255	; 0xff
 800fd82:	f000 fe4f 	bl	8010a24 <__assert_func>
 800fd86:	3101      	adds	r1, #1
 800fd88:	005b      	lsls	r3, r3, #1
 800fd8a:	e7e8      	b.n	800fd5e <__lshift+0x1a>
 800fd8c:	0098      	lsls	r0, r3, #2
 800fd8e:	5011      	str	r1, [r2, r0]
 800fd90:	3301      	adds	r3, #1
 800fd92:	42ab      	cmp	r3, r5
 800fd94:	dbfa      	blt.n	800fd8c <__lshift+0x48>
 800fd96:	43eb      	mvns	r3, r5
 800fd98:	17db      	asrs	r3, r3, #31
 800fd9a:	401d      	ands	r5, r3
 800fd9c:	211f      	movs	r1, #31
 800fd9e:	0023      	movs	r3, r4
 800fda0:	0038      	movs	r0, r7
 800fda2:	00ad      	lsls	r5, r5, #2
 800fda4:	1955      	adds	r5, r2, r5
 800fda6:	6922      	ldr	r2, [r4, #16]
 800fda8:	3314      	adds	r3, #20
 800fdaa:	0092      	lsls	r2, r2, #2
 800fdac:	4008      	ands	r0, r1
 800fdae:	4684      	mov	ip, r0
 800fdb0:	189a      	adds	r2, r3, r2
 800fdb2:	420f      	tst	r7, r1
 800fdb4:	d02a      	beq.n	800fe0c <__lshift+0xc8>
 800fdb6:	3101      	adds	r1, #1
 800fdb8:	1a09      	subs	r1, r1, r0
 800fdba:	9105      	str	r1, [sp, #20]
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	9503      	str	r5, [sp, #12]
 800fdc0:	4667      	mov	r7, ip
 800fdc2:	6818      	ldr	r0, [r3, #0]
 800fdc4:	40b8      	lsls	r0, r7
 800fdc6:	4308      	orrs	r0, r1
 800fdc8:	9903      	ldr	r1, [sp, #12]
 800fdca:	c101      	stmia	r1!, {r0}
 800fdcc:	9103      	str	r1, [sp, #12]
 800fdce:	9805      	ldr	r0, [sp, #20]
 800fdd0:	cb02      	ldmia	r3!, {r1}
 800fdd2:	40c1      	lsrs	r1, r0
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d8f3      	bhi.n	800fdc0 <__lshift+0x7c>
 800fdd8:	0020      	movs	r0, r4
 800fdda:	3015      	adds	r0, #21
 800fddc:	2304      	movs	r3, #4
 800fdde:	4282      	cmp	r2, r0
 800fde0:	d304      	bcc.n	800fdec <__lshift+0xa8>
 800fde2:	1b13      	subs	r3, r2, r4
 800fde4:	3b15      	subs	r3, #21
 800fde6:	089b      	lsrs	r3, r3, #2
 800fde8:	3301      	adds	r3, #1
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	50e9      	str	r1, [r5, r3]
 800fdee:	2900      	cmp	r1, #0
 800fdf0:	d002      	beq.n	800fdf8 <__lshift+0xb4>
 800fdf2:	9b02      	ldr	r3, [sp, #8]
 800fdf4:	3302      	adds	r3, #2
 800fdf6:	9301      	str	r3, [sp, #4]
 800fdf8:	9b01      	ldr	r3, [sp, #4]
 800fdfa:	9804      	ldr	r0, [sp, #16]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	0021      	movs	r1, r4
 800fe00:	6133      	str	r3, [r6, #16]
 800fe02:	f7ff fd7f 	bl	800f904 <_Bfree>
 800fe06:	0030      	movs	r0, r6
 800fe08:	b007      	add	sp, #28
 800fe0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe0c:	cb02      	ldmia	r3!, {r1}
 800fe0e:	c502      	stmia	r5!, {r1}
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d8fb      	bhi.n	800fe0c <__lshift+0xc8>
 800fe14:	e7f0      	b.n	800fdf8 <__lshift+0xb4>
 800fe16:	46c0      	nop			; (mov r8, r8)
 800fe18:	08011369 	.word	0x08011369
 800fe1c:	080113da 	.word	0x080113da

0800fe20 <__mcmp>:
 800fe20:	b530      	push	{r4, r5, lr}
 800fe22:	690b      	ldr	r3, [r1, #16]
 800fe24:	6904      	ldr	r4, [r0, #16]
 800fe26:	0002      	movs	r2, r0
 800fe28:	1ae0      	subs	r0, r4, r3
 800fe2a:	429c      	cmp	r4, r3
 800fe2c:	d10e      	bne.n	800fe4c <__mcmp+0x2c>
 800fe2e:	3214      	adds	r2, #20
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	3114      	adds	r1, #20
 800fe34:	0014      	movs	r4, r2
 800fe36:	18c9      	adds	r1, r1, r3
 800fe38:	18d2      	adds	r2, r2, r3
 800fe3a:	3a04      	subs	r2, #4
 800fe3c:	3904      	subs	r1, #4
 800fe3e:	6815      	ldr	r5, [r2, #0]
 800fe40:	680b      	ldr	r3, [r1, #0]
 800fe42:	429d      	cmp	r5, r3
 800fe44:	d003      	beq.n	800fe4e <__mcmp+0x2e>
 800fe46:	2001      	movs	r0, #1
 800fe48:	429d      	cmp	r5, r3
 800fe4a:	d303      	bcc.n	800fe54 <__mcmp+0x34>
 800fe4c:	bd30      	pop	{r4, r5, pc}
 800fe4e:	4294      	cmp	r4, r2
 800fe50:	d3f3      	bcc.n	800fe3a <__mcmp+0x1a>
 800fe52:	e7fb      	b.n	800fe4c <__mcmp+0x2c>
 800fe54:	4240      	negs	r0, r0
 800fe56:	e7f9      	b.n	800fe4c <__mcmp+0x2c>

0800fe58 <__mdiff>:
 800fe58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe5a:	000e      	movs	r6, r1
 800fe5c:	0007      	movs	r7, r0
 800fe5e:	0011      	movs	r1, r2
 800fe60:	0030      	movs	r0, r6
 800fe62:	b087      	sub	sp, #28
 800fe64:	0014      	movs	r4, r2
 800fe66:	f7ff ffdb 	bl	800fe20 <__mcmp>
 800fe6a:	1e05      	subs	r5, r0, #0
 800fe6c:	d110      	bne.n	800fe90 <__mdiff+0x38>
 800fe6e:	0001      	movs	r1, r0
 800fe70:	0038      	movs	r0, r7
 800fe72:	f7ff fd03 	bl	800f87c <_Balloc>
 800fe76:	1e02      	subs	r2, r0, #0
 800fe78:	d104      	bne.n	800fe84 <__mdiff+0x2c>
 800fe7a:	4b3f      	ldr	r3, [pc, #252]	; (800ff78 <__mdiff+0x120>)
 800fe7c:	483f      	ldr	r0, [pc, #252]	; (800ff7c <__mdiff+0x124>)
 800fe7e:	4940      	ldr	r1, [pc, #256]	; (800ff80 <__mdiff+0x128>)
 800fe80:	f000 fdd0 	bl	8010a24 <__assert_func>
 800fe84:	2301      	movs	r3, #1
 800fe86:	6145      	str	r5, [r0, #20]
 800fe88:	6103      	str	r3, [r0, #16]
 800fe8a:	0010      	movs	r0, r2
 800fe8c:	b007      	add	sp, #28
 800fe8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe90:	2301      	movs	r3, #1
 800fe92:	9301      	str	r3, [sp, #4]
 800fe94:	2800      	cmp	r0, #0
 800fe96:	db04      	blt.n	800fea2 <__mdiff+0x4a>
 800fe98:	0023      	movs	r3, r4
 800fe9a:	0034      	movs	r4, r6
 800fe9c:	001e      	movs	r6, r3
 800fe9e:	2300      	movs	r3, #0
 800fea0:	9301      	str	r3, [sp, #4]
 800fea2:	0038      	movs	r0, r7
 800fea4:	6861      	ldr	r1, [r4, #4]
 800fea6:	f7ff fce9 	bl	800f87c <_Balloc>
 800feaa:	1e02      	subs	r2, r0, #0
 800feac:	d103      	bne.n	800feb6 <__mdiff+0x5e>
 800feae:	4b32      	ldr	r3, [pc, #200]	; (800ff78 <__mdiff+0x120>)
 800feb0:	4832      	ldr	r0, [pc, #200]	; (800ff7c <__mdiff+0x124>)
 800feb2:	4934      	ldr	r1, [pc, #208]	; (800ff84 <__mdiff+0x12c>)
 800feb4:	e7e4      	b.n	800fe80 <__mdiff+0x28>
 800feb6:	9b01      	ldr	r3, [sp, #4]
 800feb8:	2700      	movs	r7, #0
 800feba:	60c3      	str	r3, [r0, #12]
 800febc:	6920      	ldr	r0, [r4, #16]
 800febe:	3414      	adds	r4, #20
 800fec0:	0083      	lsls	r3, r0, #2
 800fec2:	18e3      	adds	r3, r4, r3
 800fec4:	0021      	movs	r1, r4
 800fec6:	9401      	str	r4, [sp, #4]
 800fec8:	0034      	movs	r4, r6
 800feca:	9302      	str	r3, [sp, #8]
 800fecc:	6933      	ldr	r3, [r6, #16]
 800fece:	3414      	adds	r4, #20
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	18e3      	adds	r3, r4, r3
 800fed4:	9303      	str	r3, [sp, #12]
 800fed6:	0013      	movs	r3, r2
 800fed8:	3314      	adds	r3, #20
 800feda:	469c      	mov	ip, r3
 800fedc:	9305      	str	r3, [sp, #20]
 800fede:	9104      	str	r1, [sp, #16]
 800fee0:	9b04      	ldr	r3, [sp, #16]
 800fee2:	cc02      	ldmia	r4!, {r1}
 800fee4:	cb20      	ldmia	r3!, {r5}
 800fee6:	9304      	str	r3, [sp, #16]
 800fee8:	b2ab      	uxth	r3, r5
 800feea:	19df      	adds	r7, r3, r7
 800feec:	b28b      	uxth	r3, r1
 800feee:	1afb      	subs	r3, r7, r3
 800fef0:	0c09      	lsrs	r1, r1, #16
 800fef2:	0c2d      	lsrs	r5, r5, #16
 800fef4:	1a6d      	subs	r5, r5, r1
 800fef6:	1419      	asrs	r1, r3, #16
 800fef8:	1869      	adds	r1, r5, r1
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	140f      	asrs	r7, r1, #16
 800fefe:	0409      	lsls	r1, r1, #16
 800ff00:	4319      	orrs	r1, r3
 800ff02:	4663      	mov	r3, ip
 800ff04:	c302      	stmia	r3!, {r1}
 800ff06:	469c      	mov	ip, r3
 800ff08:	9b03      	ldr	r3, [sp, #12]
 800ff0a:	42a3      	cmp	r3, r4
 800ff0c:	d8e8      	bhi.n	800fee0 <__mdiff+0x88>
 800ff0e:	0031      	movs	r1, r6
 800ff10:	9c03      	ldr	r4, [sp, #12]
 800ff12:	3115      	adds	r1, #21
 800ff14:	2304      	movs	r3, #4
 800ff16:	428c      	cmp	r4, r1
 800ff18:	d304      	bcc.n	800ff24 <__mdiff+0xcc>
 800ff1a:	1ba3      	subs	r3, r4, r6
 800ff1c:	3b15      	subs	r3, #21
 800ff1e:	089b      	lsrs	r3, r3, #2
 800ff20:	3301      	adds	r3, #1
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	9901      	ldr	r1, [sp, #4]
 800ff26:	18cd      	adds	r5, r1, r3
 800ff28:	9905      	ldr	r1, [sp, #20]
 800ff2a:	002e      	movs	r6, r5
 800ff2c:	18cb      	adds	r3, r1, r3
 800ff2e:	469c      	mov	ip, r3
 800ff30:	9902      	ldr	r1, [sp, #8]
 800ff32:	428e      	cmp	r6, r1
 800ff34:	d310      	bcc.n	800ff58 <__mdiff+0x100>
 800ff36:	9e02      	ldr	r6, [sp, #8]
 800ff38:	1ee9      	subs	r1, r5, #3
 800ff3a:	2400      	movs	r4, #0
 800ff3c:	428e      	cmp	r6, r1
 800ff3e:	d304      	bcc.n	800ff4a <__mdiff+0xf2>
 800ff40:	0031      	movs	r1, r6
 800ff42:	3103      	adds	r1, #3
 800ff44:	1b49      	subs	r1, r1, r5
 800ff46:	0889      	lsrs	r1, r1, #2
 800ff48:	008c      	lsls	r4, r1, #2
 800ff4a:	191b      	adds	r3, r3, r4
 800ff4c:	3b04      	subs	r3, #4
 800ff4e:	6819      	ldr	r1, [r3, #0]
 800ff50:	2900      	cmp	r1, #0
 800ff52:	d00f      	beq.n	800ff74 <__mdiff+0x11c>
 800ff54:	6110      	str	r0, [r2, #16]
 800ff56:	e798      	b.n	800fe8a <__mdiff+0x32>
 800ff58:	ce02      	ldmia	r6!, {r1}
 800ff5a:	b28c      	uxth	r4, r1
 800ff5c:	19e4      	adds	r4, r4, r7
 800ff5e:	0c0f      	lsrs	r7, r1, #16
 800ff60:	1421      	asrs	r1, r4, #16
 800ff62:	1879      	adds	r1, r7, r1
 800ff64:	b2a4      	uxth	r4, r4
 800ff66:	140f      	asrs	r7, r1, #16
 800ff68:	0409      	lsls	r1, r1, #16
 800ff6a:	4321      	orrs	r1, r4
 800ff6c:	4664      	mov	r4, ip
 800ff6e:	c402      	stmia	r4!, {r1}
 800ff70:	46a4      	mov	ip, r4
 800ff72:	e7dd      	b.n	800ff30 <__mdiff+0xd8>
 800ff74:	3801      	subs	r0, #1
 800ff76:	e7e9      	b.n	800ff4c <__mdiff+0xf4>
 800ff78:	08011369 	.word	0x08011369
 800ff7c:	080113da 	.word	0x080113da
 800ff80:	00000237 	.word	0x00000237
 800ff84:	00000245 	.word	0x00000245

0800ff88 <__ulp>:
 800ff88:	2000      	movs	r0, #0
 800ff8a:	4b0b      	ldr	r3, [pc, #44]	; (800ffb8 <__ulp+0x30>)
 800ff8c:	4019      	ands	r1, r3
 800ff8e:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <__ulp+0x34>)
 800ff90:	18c9      	adds	r1, r1, r3
 800ff92:	4281      	cmp	r1, r0
 800ff94:	dc06      	bgt.n	800ffa4 <__ulp+0x1c>
 800ff96:	4249      	negs	r1, r1
 800ff98:	150b      	asrs	r3, r1, #20
 800ff9a:	2b13      	cmp	r3, #19
 800ff9c:	dc03      	bgt.n	800ffa6 <__ulp+0x1e>
 800ff9e:	2180      	movs	r1, #128	; 0x80
 800ffa0:	0309      	lsls	r1, r1, #12
 800ffa2:	4119      	asrs	r1, r3
 800ffa4:	4770      	bx	lr
 800ffa6:	3b14      	subs	r3, #20
 800ffa8:	2001      	movs	r0, #1
 800ffaa:	2b1e      	cmp	r3, #30
 800ffac:	dc02      	bgt.n	800ffb4 <__ulp+0x2c>
 800ffae:	2080      	movs	r0, #128	; 0x80
 800ffb0:	0600      	lsls	r0, r0, #24
 800ffb2:	40d8      	lsrs	r0, r3
 800ffb4:	2100      	movs	r1, #0
 800ffb6:	e7f5      	b.n	800ffa4 <__ulp+0x1c>
 800ffb8:	7ff00000 	.word	0x7ff00000
 800ffbc:	fcc00000 	.word	0xfcc00000

0800ffc0 <__b2d>:
 800ffc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffc2:	0006      	movs	r6, r0
 800ffc4:	6903      	ldr	r3, [r0, #16]
 800ffc6:	3614      	adds	r6, #20
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	18f3      	adds	r3, r6, r3
 800ffcc:	1f1d      	subs	r5, r3, #4
 800ffce:	682c      	ldr	r4, [r5, #0]
 800ffd0:	000f      	movs	r7, r1
 800ffd2:	0020      	movs	r0, r4
 800ffd4:	9301      	str	r3, [sp, #4]
 800ffd6:	f7ff fd49 	bl	800fa6c <__hi0bits>
 800ffda:	2220      	movs	r2, #32
 800ffdc:	1a12      	subs	r2, r2, r0
 800ffde:	603a      	str	r2, [r7, #0]
 800ffe0:	0003      	movs	r3, r0
 800ffe2:	4a1c      	ldr	r2, [pc, #112]	; (8010054 <__b2d+0x94>)
 800ffe4:	280a      	cmp	r0, #10
 800ffe6:	dc15      	bgt.n	8010014 <__b2d+0x54>
 800ffe8:	210b      	movs	r1, #11
 800ffea:	0027      	movs	r7, r4
 800ffec:	1a09      	subs	r1, r1, r0
 800ffee:	40cf      	lsrs	r7, r1
 800fff0:	433a      	orrs	r2, r7
 800fff2:	468c      	mov	ip, r1
 800fff4:	0011      	movs	r1, r2
 800fff6:	2200      	movs	r2, #0
 800fff8:	42ae      	cmp	r6, r5
 800fffa:	d202      	bcs.n	8010002 <__b2d+0x42>
 800fffc:	9a01      	ldr	r2, [sp, #4]
 800fffe:	3a08      	subs	r2, #8
 8010000:	6812      	ldr	r2, [r2, #0]
 8010002:	3315      	adds	r3, #21
 8010004:	409c      	lsls	r4, r3
 8010006:	4663      	mov	r3, ip
 8010008:	0027      	movs	r7, r4
 801000a:	40da      	lsrs	r2, r3
 801000c:	4317      	orrs	r7, r2
 801000e:	0038      	movs	r0, r7
 8010010:	b003      	add	sp, #12
 8010012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010014:	2700      	movs	r7, #0
 8010016:	42ae      	cmp	r6, r5
 8010018:	d202      	bcs.n	8010020 <__b2d+0x60>
 801001a:	9d01      	ldr	r5, [sp, #4]
 801001c:	3d08      	subs	r5, #8
 801001e:	682f      	ldr	r7, [r5, #0]
 8010020:	210b      	movs	r1, #11
 8010022:	4249      	negs	r1, r1
 8010024:	468c      	mov	ip, r1
 8010026:	449c      	add	ip, r3
 8010028:	2b0b      	cmp	r3, #11
 801002a:	d010      	beq.n	801004e <__b2d+0x8e>
 801002c:	4661      	mov	r1, ip
 801002e:	2320      	movs	r3, #32
 8010030:	408c      	lsls	r4, r1
 8010032:	1a5b      	subs	r3, r3, r1
 8010034:	0039      	movs	r1, r7
 8010036:	40d9      	lsrs	r1, r3
 8010038:	430c      	orrs	r4, r1
 801003a:	4322      	orrs	r2, r4
 801003c:	0011      	movs	r1, r2
 801003e:	2200      	movs	r2, #0
 8010040:	42b5      	cmp	r5, r6
 8010042:	d901      	bls.n	8010048 <__b2d+0x88>
 8010044:	3d04      	subs	r5, #4
 8010046:	682a      	ldr	r2, [r5, #0]
 8010048:	4664      	mov	r4, ip
 801004a:	40a7      	lsls	r7, r4
 801004c:	e7dd      	b.n	801000a <__b2d+0x4a>
 801004e:	4322      	orrs	r2, r4
 8010050:	0011      	movs	r1, r2
 8010052:	e7dc      	b.n	801000e <__b2d+0x4e>
 8010054:	3ff00000 	.word	0x3ff00000

08010058 <__d2b>:
 8010058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801005a:	2101      	movs	r1, #1
 801005c:	0014      	movs	r4, r2
 801005e:	001d      	movs	r5, r3
 8010060:	9f08      	ldr	r7, [sp, #32]
 8010062:	f7ff fc0b 	bl	800f87c <_Balloc>
 8010066:	1e06      	subs	r6, r0, #0
 8010068:	d105      	bne.n	8010076 <__d2b+0x1e>
 801006a:	0032      	movs	r2, r6
 801006c:	4b24      	ldr	r3, [pc, #144]	; (8010100 <__d2b+0xa8>)
 801006e:	4825      	ldr	r0, [pc, #148]	; (8010104 <__d2b+0xac>)
 8010070:	4925      	ldr	r1, [pc, #148]	; (8010108 <__d2b+0xb0>)
 8010072:	f000 fcd7 	bl	8010a24 <__assert_func>
 8010076:	032b      	lsls	r3, r5, #12
 8010078:	006d      	lsls	r5, r5, #1
 801007a:	0b1b      	lsrs	r3, r3, #12
 801007c:	0d6d      	lsrs	r5, r5, #21
 801007e:	d125      	bne.n	80100cc <__d2b+0x74>
 8010080:	9301      	str	r3, [sp, #4]
 8010082:	2c00      	cmp	r4, #0
 8010084:	d028      	beq.n	80100d8 <__d2b+0x80>
 8010086:	4668      	mov	r0, sp
 8010088:	9400      	str	r4, [sp, #0]
 801008a:	f7ff fd09 	bl	800faa0 <__lo0bits>
 801008e:	9b01      	ldr	r3, [sp, #4]
 8010090:	9900      	ldr	r1, [sp, #0]
 8010092:	2800      	cmp	r0, #0
 8010094:	d01e      	beq.n	80100d4 <__d2b+0x7c>
 8010096:	2220      	movs	r2, #32
 8010098:	001c      	movs	r4, r3
 801009a:	1a12      	subs	r2, r2, r0
 801009c:	4094      	lsls	r4, r2
 801009e:	0022      	movs	r2, r4
 80100a0:	40c3      	lsrs	r3, r0
 80100a2:	430a      	orrs	r2, r1
 80100a4:	6172      	str	r2, [r6, #20]
 80100a6:	9301      	str	r3, [sp, #4]
 80100a8:	9c01      	ldr	r4, [sp, #4]
 80100aa:	61b4      	str	r4, [r6, #24]
 80100ac:	1e63      	subs	r3, r4, #1
 80100ae:	419c      	sbcs	r4, r3
 80100b0:	3401      	adds	r4, #1
 80100b2:	6134      	str	r4, [r6, #16]
 80100b4:	2d00      	cmp	r5, #0
 80100b6:	d017      	beq.n	80100e8 <__d2b+0x90>
 80100b8:	2435      	movs	r4, #53	; 0x35
 80100ba:	4b14      	ldr	r3, [pc, #80]	; (801010c <__d2b+0xb4>)
 80100bc:	18ed      	adds	r5, r5, r3
 80100be:	182d      	adds	r5, r5, r0
 80100c0:	603d      	str	r5, [r7, #0]
 80100c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100c4:	1a24      	subs	r4, r4, r0
 80100c6:	601c      	str	r4, [r3, #0]
 80100c8:	0030      	movs	r0, r6
 80100ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80100cc:	2280      	movs	r2, #128	; 0x80
 80100ce:	0352      	lsls	r2, r2, #13
 80100d0:	4313      	orrs	r3, r2
 80100d2:	e7d5      	b.n	8010080 <__d2b+0x28>
 80100d4:	6171      	str	r1, [r6, #20]
 80100d6:	e7e7      	b.n	80100a8 <__d2b+0x50>
 80100d8:	a801      	add	r0, sp, #4
 80100da:	f7ff fce1 	bl	800faa0 <__lo0bits>
 80100de:	9b01      	ldr	r3, [sp, #4]
 80100e0:	2401      	movs	r4, #1
 80100e2:	6173      	str	r3, [r6, #20]
 80100e4:	3020      	adds	r0, #32
 80100e6:	e7e4      	b.n	80100b2 <__d2b+0x5a>
 80100e8:	4b09      	ldr	r3, [pc, #36]	; (8010110 <__d2b+0xb8>)
 80100ea:	18c0      	adds	r0, r0, r3
 80100ec:	4b09      	ldr	r3, [pc, #36]	; (8010114 <__d2b+0xbc>)
 80100ee:	6038      	str	r0, [r7, #0]
 80100f0:	18e3      	adds	r3, r4, r3
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	18f3      	adds	r3, r6, r3
 80100f6:	6958      	ldr	r0, [r3, #20]
 80100f8:	f7ff fcb8 	bl	800fa6c <__hi0bits>
 80100fc:	0164      	lsls	r4, r4, #5
 80100fe:	e7e0      	b.n	80100c2 <__d2b+0x6a>
 8010100:	08011369 	.word	0x08011369
 8010104:	080113da 	.word	0x080113da
 8010108:	0000030f 	.word	0x0000030f
 801010c:	fffffbcd 	.word	0xfffffbcd
 8010110:	fffffbce 	.word	0xfffffbce
 8010114:	3fffffff 	.word	0x3fffffff

08010118 <__ratio>:
 8010118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801011a:	b087      	sub	sp, #28
 801011c:	000f      	movs	r7, r1
 801011e:	a904      	add	r1, sp, #16
 8010120:	0006      	movs	r6, r0
 8010122:	f7ff ff4d 	bl	800ffc0 <__b2d>
 8010126:	9000      	str	r0, [sp, #0]
 8010128:	9101      	str	r1, [sp, #4]
 801012a:	9c00      	ldr	r4, [sp, #0]
 801012c:	9d01      	ldr	r5, [sp, #4]
 801012e:	0038      	movs	r0, r7
 8010130:	a905      	add	r1, sp, #20
 8010132:	f7ff ff45 	bl	800ffc0 <__b2d>
 8010136:	9002      	str	r0, [sp, #8]
 8010138:	9103      	str	r1, [sp, #12]
 801013a:	9a02      	ldr	r2, [sp, #8]
 801013c:	9b03      	ldr	r3, [sp, #12]
 801013e:	6930      	ldr	r0, [r6, #16]
 8010140:	6939      	ldr	r1, [r7, #16]
 8010142:	9e04      	ldr	r6, [sp, #16]
 8010144:	1a40      	subs	r0, r0, r1
 8010146:	9905      	ldr	r1, [sp, #20]
 8010148:	0140      	lsls	r0, r0, #5
 801014a:	1a71      	subs	r1, r6, r1
 801014c:	1841      	adds	r1, r0, r1
 801014e:	0508      	lsls	r0, r1, #20
 8010150:	2900      	cmp	r1, #0
 8010152:	dd07      	ble.n	8010164 <__ratio+0x4c>
 8010154:	9901      	ldr	r1, [sp, #4]
 8010156:	1845      	adds	r5, r0, r1
 8010158:	0020      	movs	r0, r4
 801015a:	0029      	movs	r1, r5
 801015c:	f7f1 fc82 	bl	8001a64 <__aeabi_ddiv>
 8010160:	b007      	add	sp, #28
 8010162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010164:	9903      	ldr	r1, [sp, #12]
 8010166:	1a0b      	subs	r3, r1, r0
 8010168:	e7f6      	b.n	8010158 <__ratio+0x40>

0801016a <__copybits>:
 801016a:	b570      	push	{r4, r5, r6, lr}
 801016c:	0014      	movs	r4, r2
 801016e:	0005      	movs	r5, r0
 8010170:	3901      	subs	r1, #1
 8010172:	6913      	ldr	r3, [r2, #16]
 8010174:	1149      	asrs	r1, r1, #5
 8010176:	3101      	adds	r1, #1
 8010178:	0089      	lsls	r1, r1, #2
 801017a:	3414      	adds	r4, #20
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	1841      	adds	r1, r0, r1
 8010180:	18e3      	adds	r3, r4, r3
 8010182:	42a3      	cmp	r3, r4
 8010184:	d80d      	bhi.n	80101a2 <__copybits+0x38>
 8010186:	0014      	movs	r4, r2
 8010188:	3411      	adds	r4, #17
 801018a:	2500      	movs	r5, #0
 801018c:	429c      	cmp	r4, r3
 801018e:	d803      	bhi.n	8010198 <__copybits+0x2e>
 8010190:	1a9b      	subs	r3, r3, r2
 8010192:	3b11      	subs	r3, #17
 8010194:	089b      	lsrs	r3, r3, #2
 8010196:	009d      	lsls	r5, r3, #2
 8010198:	2300      	movs	r3, #0
 801019a:	1940      	adds	r0, r0, r5
 801019c:	4281      	cmp	r1, r0
 801019e:	d803      	bhi.n	80101a8 <__copybits+0x3e>
 80101a0:	bd70      	pop	{r4, r5, r6, pc}
 80101a2:	cc40      	ldmia	r4!, {r6}
 80101a4:	c540      	stmia	r5!, {r6}
 80101a6:	e7ec      	b.n	8010182 <__copybits+0x18>
 80101a8:	c008      	stmia	r0!, {r3}
 80101aa:	e7f7      	b.n	801019c <__copybits+0x32>

080101ac <__any_on>:
 80101ac:	0002      	movs	r2, r0
 80101ae:	6900      	ldr	r0, [r0, #16]
 80101b0:	b510      	push	{r4, lr}
 80101b2:	3214      	adds	r2, #20
 80101b4:	114b      	asrs	r3, r1, #5
 80101b6:	4298      	cmp	r0, r3
 80101b8:	db13      	blt.n	80101e2 <__any_on+0x36>
 80101ba:	dd0c      	ble.n	80101d6 <__any_on+0x2a>
 80101bc:	241f      	movs	r4, #31
 80101be:	0008      	movs	r0, r1
 80101c0:	4020      	ands	r0, r4
 80101c2:	4221      	tst	r1, r4
 80101c4:	d007      	beq.n	80101d6 <__any_on+0x2a>
 80101c6:	0099      	lsls	r1, r3, #2
 80101c8:	588c      	ldr	r4, [r1, r2]
 80101ca:	0021      	movs	r1, r4
 80101cc:	40c1      	lsrs	r1, r0
 80101ce:	4081      	lsls	r1, r0
 80101d0:	2001      	movs	r0, #1
 80101d2:	428c      	cmp	r4, r1
 80101d4:	d104      	bne.n	80101e0 <__any_on+0x34>
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	18d3      	adds	r3, r2, r3
 80101da:	4293      	cmp	r3, r2
 80101dc:	d803      	bhi.n	80101e6 <__any_on+0x3a>
 80101de:	2000      	movs	r0, #0
 80101e0:	bd10      	pop	{r4, pc}
 80101e2:	0003      	movs	r3, r0
 80101e4:	e7f7      	b.n	80101d6 <__any_on+0x2a>
 80101e6:	3b04      	subs	r3, #4
 80101e8:	6819      	ldr	r1, [r3, #0]
 80101ea:	2900      	cmp	r1, #0
 80101ec:	d0f5      	beq.n	80101da <__any_on+0x2e>
 80101ee:	2001      	movs	r0, #1
 80101f0:	e7f6      	b.n	80101e0 <__any_on+0x34>

080101f2 <__ascii_wctomb>:
 80101f2:	0003      	movs	r3, r0
 80101f4:	1e08      	subs	r0, r1, #0
 80101f6:	d005      	beq.n	8010204 <__ascii_wctomb+0x12>
 80101f8:	2aff      	cmp	r2, #255	; 0xff
 80101fa:	d904      	bls.n	8010206 <__ascii_wctomb+0x14>
 80101fc:	228a      	movs	r2, #138	; 0x8a
 80101fe:	2001      	movs	r0, #1
 8010200:	601a      	str	r2, [r3, #0]
 8010202:	4240      	negs	r0, r0
 8010204:	4770      	bx	lr
 8010206:	2001      	movs	r0, #1
 8010208:	700a      	strb	r2, [r1, #0]
 801020a:	e7fb      	b.n	8010204 <__ascii_wctomb+0x12>

0801020c <__ssputs_r>:
 801020c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801020e:	b085      	sub	sp, #20
 8010210:	9301      	str	r3, [sp, #4]
 8010212:	9203      	str	r2, [sp, #12]
 8010214:	688e      	ldr	r6, [r1, #8]
 8010216:	9a01      	ldr	r2, [sp, #4]
 8010218:	0007      	movs	r7, r0
 801021a:	000c      	movs	r4, r1
 801021c:	680b      	ldr	r3, [r1, #0]
 801021e:	4296      	cmp	r6, r2
 8010220:	d831      	bhi.n	8010286 <__ssputs_r+0x7a>
 8010222:	898a      	ldrh	r2, [r1, #12]
 8010224:	2190      	movs	r1, #144	; 0x90
 8010226:	00c9      	lsls	r1, r1, #3
 8010228:	420a      	tst	r2, r1
 801022a:	d029      	beq.n	8010280 <__ssputs_r+0x74>
 801022c:	2003      	movs	r0, #3
 801022e:	6921      	ldr	r1, [r4, #16]
 8010230:	1a5b      	subs	r3, r3, r1
 8010232:	9302      	str	r3, [sp, #8]
 8010234:	6963      	ldr	r3, [r4, #20]
 8010236:	4343      	muls	r3, r0
 8010238:	0fdd      	lsrs	r5, r3, #31
 801023a:	18ed      	adds	r5, r5, r3
 801023c:	9b01      	ldr	r3, [sp, #4]
 801023e:	9802      	ldr	r0, [sp, #8]
 8010240:	3301      	adds	r3, #1
 8010242:	181b      	adds	r3, r3, r0
 8010244:	106d      	asrs	r5, r5, #1
 8010246:	42ab      	cmp	r3, r5
 8010248:	d900      	bls.n	801024c <__ssputs_r+0x40>
 801024a:	001d      	movs	r5, r3
 801024c:	0552      	lsls	r2, r2, #21
 801024e:	d529      	bpl.n	80102a4 <__ssputs_r+0x98>
 8010250:	0029      	movs	r1, r5
 8010252:	0038      	movs	r0, r7
 8010254:	f7ff fa6e 	bl	800f734 <_malloc_r>
 8010258:	1e06      	subs	r6, r0, #0
 801025a:	d02d      	beq.n	80102b8 <__ssputs_r+0xac>
 801025c:	9a02      	ldr	r2, [sp, #8]
 801025e:	6921      	ldr	r1, [r4, #16]
 8010260:	f7fd ffe8 	bl	800e234 <memcpy>
 8010264:	89a2      	ldrh	r2, [r4, #12]
 8010266:	4b19      	ldr	r3, [pc, #100]	; (80102cc <__ssputs_r+0xc0>)
 8010268:	401a      	ands	r2, r3
 801026a:	2380      	movs	r3, #128	; 0x80
 801026c:	4313      	orrs	r3, r2
 801026e:	81a3      	strh	r3, [r4, #12]
 8010270:	9b02      	ldr	r3, [sp, #8]
 8010272:	6126      	str	r6, [r4, #16]
 8010274:	18f6      	adds	r6, r6, r3
 8010276:	6026      	str	r6, [r4, #0]
 8010278:	6165      	str	r5, [r4, #20]
 801027a:	9e01      	ldr	r6, [sp, #4]
 801027c:	1aed      	subs	r5, r5, r3
 801027e:	60a5      	str	r5, [r4, #8]
 8010280:	9b01      	ldr	r3, [sp, #4]
 8010282:	429e      	cmp	r6, r3
 8010284:	d900      	bls.n	8010288 <__ssputs_r+0x7c>
 8010286:	9e01      	ldr	r6, [sp, #4]
 8010288:	0032      	movs	r2, r6
 801028a:	9903      	ldr	r1, [sp, #12]
 801028c:	6820      	ldr	r0, [r4, #0]
 801028e:	f000 fb7f 	bl	8010990 <memmove>
 8010292:	2000      	movs	r0, #0
 8010294:	68a3      	ldr	r3, [r4, #8]
 8010296:	1b9b      	subs	r3, r3, r6
 8010298:	60a3      	str	r3, [r4, #8]
 801029a:	6823      	ldr	r3, [r4, #0]
 801029c:	199b      	adds	r3, r3, r6
 801029e:	6023      	str	r3, [r4, #0]
 80102a0:	b005      	add	sp, #20
 80102a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102a4:	002a      	movs	r2, r5
 80102a6:	0038      	movs	r0, r7
 80102a8:	f000 fc07 	bl	8010aba <_realloc_r>
 80102ac:	1e06      	subs	r6, r0, #0
 80102ae:	d1df      	bne.n	8010270 <__ssputs_r+0x64>
 80102b0:	0038      	movs	r0, r7
 80102b2:	6921      	ldr	r1, [r4, #16]
 80102b4:	f7fe fe6c 	bl	800ef90 <_free_r>
 80102b8:	230c      	movs	r3, #12
 80102ba:	2001      	movs	r0, #1
 80102bc:	603b      	str	r3, [r7, #0]
 80102be:	89a2      	ldrh	r2, [r4, #12]
 80102c0:	3334      	adds	r3, #52	; 0x34
 80102c2:	4313      	orrs	r3, r2
 80102c4:	81a3      	strh	r3, [r4, #12]
 80102c6:	4240      	negs	r0, r0
 80102c8:	e7ea      	b.n	80102a0 <__ssputs_r+0x94>
 80102ca:	46c0      	nop			; (mov r8, r8)
 80102cc:	fffffb7f 	.word	0xfffffb7f

080102d0 <_svfiprintf_r>:
 80102d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102d2:	b0a1      	sub	sp, #132	; 0x84
 80102d4:	9003      	str	r0, [sp, #12]
 80102d6:	001d      	movs	r5, r3
 80102d8:	898b      	ldrh	r3, [r1, #12]
 80102da:	000f      	movs	r7, r1
 80102dc:	0016      	movs	r6, r2
 80102de:	061b      	lsls	r3, r3, #24
 80102e0:	d511      	bpl.n	8010306 <_svfiprintf_r+0x36>
 80102e2:	690b      	ldr	r3, [r1, #16]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d10e      	bne.n	8010306 <_svfiprintf_r+0x36>
 80102e8:	2140      	movs	r1, #64	; 0x40
 80102ea:	f7ff fa23 	bl	800f734 <_malloc_r>
 80102ee:	6038      	str	r0, [r7, #0]
 80102f0:	6138      	str	r0, [r7, #16]
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d105      	bne.n	8010302 <_svfiprintf_r+0x32>
 80102f6:	230c      	movs	r3, #12
 80102f8:	9a03      	ldr	r2, [sp, #12]
 80102fa:	3801      	subs	r0, #1
 80102fc:	6013      	str	r3, [r2, #0]
 80102fe:	b021      	add	sp, #132	; 0x84
 8010300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010302:	2340      	movs	r3, #64	; 0x40
 8010304:	617b      	str	r3, [r7, #20]
 8010306:	2300      	movs	r3, #0
 8010308:	ac08      	add	r4, sp, #32
 801030a:	6163      	str	r3, [r4, #20]
 801030c:	3320      	adds	r3, #32
 801030e:	7663      	strb	r3, [r4, #25]
 8010310:	3310      	adds	r3, #16
 8010312:	76a3      	strb	r3, [r4, #26]
 8010314:	9507      	str	r5, [sp, #28]
 8010316:	0035      	movs	r5, r6
 8010318:	782b      	ldrb	r3, [r5, #0]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d001      	beq.n	8010322 <_svfiprintf_r+0x52>
 801031e:	2b25      	cmp	r3, #37	; 0x25
 8010320:	d148      	bne.n	80103b4 <_svfiprintf_r+0xe4>
 8010322:	1bab      	subs	r3, r5, r6
 8010324:	9305      	str	r3, [sp, #20]
 8010326:	42b5      	cmp	r5, r6
 8010328:	d00b      	beq.n	8010342 <_svfiprintf_r+0x72>
 801032a:	0032      	movs	r2, r6
 801032c:	0039      	movs	r1, r7
 801032e:	9803      	ldr	r0, [sp, #12]
 8010330:	f7ff ff6c 	bl	801020c <__ssputs_r>
 8010334:	3001      	adds	r0, #1
 8010336:	d100      	bne.n	801033a <_svfiprintf_r+0x6a>
 8010338:	e0af      	b.n	801049a <_svfiprintf_r+0x1ca>
 801033a:	6963      	ldr	r3, [r4, #20]
 801033c:	9a05      	ldr	r2, [sp, #20]
 801033e:	189b      	adds	r3, r3, r2
 8010340:	6163      	str	r3, [r4, #20]
 8010342:	782b      	ldrb	r3, [r5, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d100      	bne.n	801034a <_svfiprintf_r+0x7a>
 8010348:	e0a7      	b.n	801049a <_svfiprintf_r+0x1ca>
 801034a:	2201      	movs	r2, #1
 801034c:	2300      	movs	r3, #0
 801034e:	4252      	negs	r2, r2
 8010350:	6062      	str	r2, [r4, #4]
 8010352:	a904      	add	r1, sp, #16
 8010354:	3254      	adds	r2, #84	; 0x54
 8010356:	1852      	adds	r2, r2, r1
 8010358:	1c6e      	adds	r6, r5, #1
 801035a:	6023      	str	r3, [r4, #0]
 801035c:	60e3      	str	r3, [r4, #12]
 801035e:	60a3      	str	r3, [r4, #8]
 8010360:	7013      	strb	r3, [r2, #0]
 8010362:	65a3      	str	r3, [r4, #88]	; 0x58
 8010364:	4b55      	ldr	r3, [pc, #340]	; (80104bc <_svfiprintf_r+0x1ec>)
 8010366:	2205      	movs	r2, #5
 8010368:	0018      	movs	r0, r3
 801036a:	7831      	ldrb	r1, [r6, #0]
 801036c:	9305      	str	r3, [sp, #20]
 801036e:	f7fd ff56 	bl	800e21e <memchr>
 8010372:	1c75      	adds	r5, r6, #1
 8010374:	2800      	cmp	r0, #0
 8010376:	d11f      	bne.n	80103b8 <_svfiprintf_r+0xe8>
 8010378:	6822      	ldr	r2, [r4, #0]
 801037a:	06d3      	lsls	r3, r2, #27
 801037c:	d504      	bpl.n	8010388 <_svfiprintf_r+0xb8>
 801037e:	2353      	movs	r3, #83	; 0x53
 8010380:	a904      	add	r1, sp, #16
 8010382:	185b      	adds	r3, r3, r1
 8010384:	2120      	movs	r1, #32
 8010386:	7019      	strb	r1, [r3, #0]
 8010388:	0713      	lsls	r3, r2, #28
 801038a:	d504      	bpl.n	8010396 <_svfiprintf_r+0xc6>
 801038c:	2353      	movs	r3, #83	; 0x53
 801038e:	a904      	add	r1, sp, #16
 8010390:	185b      	adds	r3, r3, r1
 8010392:	212b      	movs	r1, #43	; 0x2b
 8010394:	7019      	strb	r1, [r3, #0]
 8010396:	7833      	ldrb	r3, [r6, #0]
 8010398:	2b2a      	cmp	r3, #42	; 0x2a
 801039a:	d016      	beq.n	80103ca <_svfiprintf_r+0xfa>
 801039c:	0035      	movs	r5, r6
 801039e:	2100      	movs	r1, #0
 80103a0:	200a      	movs	r0, #10
 80103a2:	68e3      	ldr	r3, [r4, #12]
 80103a4:	782a      	ldrb	r2, [r5, #0]
 80103a6:	1c6e      	adds	r6, r5, #1
 80103a8:	3a30      	subs	r2, #48	; 0x30
 80103aa:	2a09      	cmp	r2, #9
 80103ac:	d94e      	bls.n	801044c <_svfiprintf_r+0x17c>
 80103ae:	2900      	cmp	r1, #0
 80103b0:	d111      	bne.n	80103d6 <_svfiprintf_r+0x106>
 80103b2:	e017      	b.n	80103e4 <_svfiprintf_r+0x114>
 80103b4:	3501      	adds	r5, #1
 80103b6:	e7af      	b.n	8010318 <_svfiprintf_r+0x48>
 80103b8:	9b05      	ldr	r3, [sp, #20]
 80103ba:	6822      	ldr	r2, [r4, #0]
 80103bc:	1ac0      	subs	r0, r0, r3
 80103be:	2301      	movs	r3, #1
 80103c0:	4083      	lsls	r3, r0
 80103c2:	4313      	orrs	r3, r2
 80103c4:	002e      	movs	r6, r5
 80103c6:	6023      	str	r3, [r4, #0]
 80103c8:	e7cc      	b.n	8010364 <_svfiprintf_r+0x94>
 80103ca:	9b07      	ldr	r3, [sp, #28]
 80103cc:	1d19      	adds	r1, r3, #4
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	9107      	str	r1, [sp, #28]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	db01      	blt.n	80103da <_svfiprintf_r+0x10a>
 80103d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80103d8:	e004      	b.n	80103e4 <_svfiprintf_r+0x114>
 80103da:	425b      	negs	r3, r3
 80103dc:	60e3      	str	r3, [r4, #12]
 80103de:	2302      	movs	r3, #2
 80103e0:	4313      	orrs	r3, r2
 80103e2:	6023      	str	r3, [r4, #0]
 80103e4:	782b      	ldrb	r3, [r5, #0]
 80103e6:	2b2e      	cmp	r3, #46	; 0x2e
 80103e8:	d10a      	bne.n	8010400 <_svfiprintf_r+0x130>
 80103ea:	786b      	ldrb	r3, [r5, #1]
 80103ec:	2b2a      	cmp	r3, #42	; 0x2a
 80103ee:	d135      	bne.n	801045c <_svfiprintf_r+0x18c>
 80103f0:	9b07      	ldr	r3, [sp, #28]
 80103f2:	3502      	adds	r5, #2
 80103f4:	1d1a      	adds	r2, r3, #4
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	9207      	str	r2, [sp, #28]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	db2b      	blt.n	8010456 <_svfiprintf_r+0x186>
 80103fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010400:	4e2f      	ldr	r6, [pc, #188]	; (80104c0 <_svfiprintf_r+0x1f0>)
 8010402:	2203      	movs	r2, #3
 8010404:	0030      	movs	r0, r6
 8010406:	7829      	ldrb	r1, [r5, #0]
 8010408:	f7fd ff09 	bl	800e21e <memchr>
 801040c:	2800      	cmp	r0, #0
 801040e:	d006      	beq.n	801041e <_svfiprintf_r+0x14e>
 8010410:	2340      	movs	r3, #64	; 0x40
 8010412:	1b80      	subs	r0, r0, r6
 8010414:	4083      	lsls	r3, r0
 8010416:	6822      	ldr	r2, [r4, #0]
 8010418:	3501      	adds	r5, #1
 801041a:	4313      	orrs	r3, r2
 801041c:	6023      	str	r3, [r4, #0]
 801041e:	7829      	ldrb	r1, [r5, #0]
 8010420:	2206      	movs	r2, #6
 8010422:	4828      	ldr	r0, [pc, #160]	; (80104c4 <_svfiprintf_r+0x1f4>)
 8010424:	1c6e      	adds	r6, r5, #1
 8010426:	7621      	strb	r1, [r4, #24]
 8010428:	f7fd fef9 	bl	800e21e <memchr>
 801042c:	2800      	cmp	r0, #0
 801042e:	d03c      	beq.n	80104aa <_svfiprintf_r+0x1da>
 8010430:	4b25      	ldr	r3, [pc, #148]	; (80104c8 <_svfiprintf_r+0x1f8>)
 8010432:	2b00      	cmp	r3, #0
 8010434:	d125      	bne.n	8010482 <_svfiprintf_r+0x1b2>
 8010436:	2207      	movs	r2, #7
 8010438:	9b07      	ldr	r3, [sp, #28]
 801043a:	3307      	adds	r3, #7
 801043c:	4393      	bics	r3, r2
 801043e:	3308      	adds	r3, #8
 8010440:	9307      	str	r3, [sp, #28]
 8010442:	6963      	ldr	r3, [r4, #20]
 8010444:	9a04      	ldr	r2, [sp, #16]
 8010446:	189b      	adds	r3, r3, r2
 8010448:	6163      	str	r3, [r4, #20]
 801044a:	e764      	b.n	8010316 <_svfiprintf_r+0x46>
 801044c:	4343      	muls	r3, r0
 801044e:	0035      	movs	r5, r6
 8010450:	2101      	movs	r1, #1
 8010452:	189b      	adds	r3, r3, r2
 8010454:	e7a6      	b.n	80103a4 <_svfiprintf_r+0xd4>
 8010456:	2301      	movs	r3, #1
 8010458:	425b      	negs	r3, r3
 801045a:	e7d0      	b.n	80103fe <_svfiprintf_r+0x12e>
 801045c:	2300      	movs	r3, #0
 801045e:	200a      	movs	r0, #10
 8010460:	001a      	movs	r2, r3
 8010462:	3501      	adds	r5, #1
 8010464:	6063      	str	r3, [r4, #4]
 8010466:	7829      	ldrb	r1, [r5, #0]
 8010468:	1c6e      	adds	r6, r5, #1
 801046a:	3930      	subs	r1, #48	; 0x30
 801046c:	2909      	cmp	r1, #9
 801046e:	d903      	bls.n	8010478 <_svfiprintf_r+0x1a8>
 8010470:	2b00      	cmp	r3, #0
 8010472:	d0c5      	beq.n	8010400 <_svfiprintf_r+0x130>
 8010474:	9209      	str	r2, [sp, #36]	; 0x24
 8010476:	e7c3      	b.n	8010400 <_svfiprintf_r+0x130>
 8010478:	4342      	muls	r2, r0
 801047a:	0035      	movs	r5, r6
 801047c:	2301      	movs	r3, #1
 801047e:	1852      	adds	r2, r2, r1
 8010480:	e7f1      	b.n	8010466 <_svfiprintf_r+0x196>
 8010482:	aa07      	add	r2, sp, #28
 8010484:	9200      	str	r2, [sp, #0]
 8010486:	0021      	movs	r1, r4
 8010488:	003a      	movs	r2, r7
 801048a:	4b10      	ldr	r3, [pc, #64]	; (80104cc <_svfiprintf_r+0x1fc>)
 801048c:	9803      	ldr	r0, [sp, #12]
 801048e:	f7fc fffd 	bl	800d48c <_printf_float>
 8010492:	9004      	str	r0, [sp, #16]
 8010494:	9b04      	ldr	r3, [sp, #16]
 8010496:	3301      	adds	r3, #1
 8010498:	d1d3      	bne.n	8010442 <_svfiprintf_r+0x172>
 801049a:	89bb      	ldrh	r3, [r7, #12]
 801049c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801049e:	065b      	lsls	r3, r3, #25
 80104a0:	d400      	bmi.n	80104a4 <_svfiprintf_r+0x1d4>
 80104a2:	e72c      	b.n	80102fe <_svfiprintf_r+0x2e>
 80104a4:	2001      	movs	r0, #1
 80104a6:	4240      	negs	r0, r0
 80104a8:	e729      	b.n	80102fe <_svfiprintf_r+0x2e>
 80104aa:	aa07      	add	r2, sp, #28
 80104ac:	9200      	str	r2, [sp, #0]
 80104ae:	0021      	movs	r1, r4
 80104b0:	003a      	movs	r2, r7
 80104b2:	4b06      	ldr	r3, [pc, #24]	; (80104cc <_svfiprintf_r+0x1fc>)
 80104b4:	9803      	ldr	r0, [sp, #12]
 80104b6:	f7fd faaf 	bl	800da18 <_printf_i>
 80104ba:	e7ea      	b.n	8010492 <_svfiprintf_r+0x1c2>
 80104bc:	08011534 	.word	0x08011534
 80104c0:	0801153a 	.word	0x0801153a
 80104c4:	0801153e 	.word	0x0801153e
 80104c8:	0800d48d 	.word	0x0800d48d
 80104cc:	0801020d 	.word	0x0801020d

080104d0 <__sfputc_r>:
 80104d0:	6893      	ldr	r3, [r2, #8]
 80104d2:	b510      	push	{r4, lr}
 80104d4:	3b01      	subs	r3, #1
 80104d6:	6093      	str	r3, [r2, #8]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	da04      	bge.n	80104e6 <__sfputc_r+0x16>
 80104dc:	6994      	ldr	r4, [r2, #24]
 80104de:	42a3      	cmp	r3, r4
 80104e0:	db07      	blt.n	80104f2 <__sfputc_r+0x22>
 80104e2:	290a      	cmp	r1, #10
 80104e4:	d005      	beq.n	80104f2 <__sfputc_r+0x22>
 80104e6:	6813      	ldr	r3, [r2, #0]
 80104e8:	1c58      	adds	r0, r3, #1
 80104ea:	6010      	str	r0, [r2, #0]
 80104ec:	7019      	strb	r1, [r3, #0]
 80104ee:	0008      	movs	r0, r1
 80104f0:	bd10      	pop	{r4, pc}
 80104f2:	f7fd fd55 	bl	800dfa0 <__swbuf_r>
 80104f6:	0001      	movs	r1, r0
 80104f8:	e7f9      	b.n	80104ee <__sfputc_r+0x1e>

080104fa <__sfputs_r>:
 80104fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104fc:	0006      	movs	r6, r0
 80104fe:	000f      	movs	r7, r1
 8010500:	0014      	movs	r4, r2
 8010502:	18d5      	adds	r5, r2, r3
 8010504:	42ac      	cmp	r4, r5
 8010506:	d101      	bne.n	801050c <__sfputs_r+0x12>
 8010508:	2000      	movs	r0, #0
 801050a:	e007      	b.n	801051c <__sfputs_r+0x22>
 801050c:	7821      	ldrb	r1, [r4, #0]
 801050e:	003a      	movs	r2, r7
 8010510:	0030      	movs	r0, r6
 8010512:	f7ff ffdd 	bl	80104d0 <__sfputc_r>
 8010516:	3401      	adds	r4, #1
 8010518:	1c43      	adds	r3, r0, #1
 801051a:	d1f3      	bne.n	8010504 <__sfputs_r+0xa>
 801051c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010520 <_vfiprintf_r>:
 8010520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010522:	b0a1      	sub	sp, #132	; 0x84
 8010524:	000f      	movs	r7, r1
 8010526:	0015      	movs	r5, r2
 8010528:	001e      	movs	r6, r3
 801052a:	9003      	str	r0, [sp, #12]
 801052c:	2800      	cmp	r0, #0
 801052e:	d004      	beq.n	801053a <_vfiprintf_r+0x1a>
 8010530:	6a03      	ldr	r3, [r0, #32]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d101      	bne.n	801053a <_vfiprintf_r+0x1a>
 8010536:	f7fd fc0f 	bl	800dd58 <__sinit>
 801053a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801053c:	07db      	lsls	r3, r3, #31
 801053e:	d405      	bmi.n	801054c <_vfiprintf_r+0x2c>
 8010540:	89bb      	ldrh	r3, [r7, #12]
 8010542:	059b      	lsls	r3, r3, #22
 8010544:	d402      	bmi.n	801054c <_vfiprintf_r+0x2c>
 8010546:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010548:	f7fd fe67 	bl	800e21a <__retarget_lock_acquire_recursive>
 801054c:	89bb      	ldrh	r3, [r7, #12]
 801054e:	071b      	lsls	r3, r3, #28
 8010550:	d502      	bpl.n	8010558 <_vfiprintf_r+0x38>
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d113      	bne.n	8010580 <_vfiprintf_r+0x60>
 8010558:	0039      	movs	r1, r7
 801055a:	9803      	ldr	r0, [sp, #12]
 801055c:	f7fd fd62 	bl	800e024 <__swsetup_r>
 8010560:	2800      	cmp	r0, #0
 8010562:	d00d      	beq.n	8010580 <_vfiprintf_r+0x60>
 8010564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010566:	07db      	lsls	r3, r3, #31
 8010568:	d503      	bpl.n	8010572 <_vfiprintf_r+0x52>
 801056a:	2001      	movs	r0, #1
 801056c:	4240      	negs	r0, r0
 801056e:	b021      	add	sp, #132	; 0x84
 8010570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010572:	89bb      	ldrh	r3, [r7, #12]
 8010574:	059b      	lsls	r3, r3, #22
 8010576:	d4f8      	bmi.n	801056a <_vfiprintf_r+0x4a>
 8010578:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801057a:	f7fd fe4f 	bl	800e21c <__retarget_lock_release_recursive>
 801057e:	e7f4      	b.n	801056a <_vfiprintf_r+0x4a>
 8010580:	2300      	movs	r3, #0
 8010582:	ac08      	add	r4, sp, #32
 8010584:	6163      	str	r3, [r4, #20]
 8010586:	3320      	adds	r3, #32
 8010588:	7663      	strb	r3, [r4, #25]
 801058a:	3310      	adds	r3, #16
 801058c:	76a3      	strb	r3, [r4, #26]
 801058e:	9607      	str	r6, [sp, #28]
 8010590:	002e      	movs	r6, r5
 8010592:	7833      	ldrb	r3, [r6, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d001      	beq.n	801059c <_vfiprintf_r+0x7c>
 8010598:	2b25      	cmp	r3, #37	; 0x25
 801059a:	d148      	bne.n	801062e <_vfiprintf_r+0x10e>
 801059c:	1b73      	subs	r3, r6, r5
 801059e:	9305      	str	r3, [sp, #20]
 80105a0:	42ae      	cmp	r6, r5
 80105a2:	d00b      	beq.n	80105bc <_vfiprintf_r+0x9c>
 80105a4:	002a      	movs	r2, r5
 80105a6:	0039      	movs	r1, r7
 80105a8:	9803      	ldr	r0, [sp, #12]
 80105aa:	f7ff ffa6 	bl	80104fa <__sfputs_r>
 80105ae:	3001      	adds	r0, #1
 80105b0:	d100      	bne.n	80105b4 <_vfiprintf_r+0x94>
 80105b2:	e0af      	b.n	8010714 <_vfiprintf_r+0x1f4>
 80105b4:	6963      	ldr	r3, [r4, #20]
 80105b6:	9a05      	ldr	r2, [sp, #20]
 80105b8:	189b      	adds	r3, r3, r2
 80105ba:	6163      	str	r3, [r4, #20]
 80105bc:	7833      	ldrb	r3, [r6, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d100      	bne.n	80105c4 <_vfiprintf_r+0xa4>
 80105c2:	e0a7      	b.n	8010714 <_vfiprintf_r+0x1f4>
 80105c4:	2201      	movs	r2, #1
 80105c6:	2300      	movs	r3, #0
 80105c8:	4252      	negs	r2, r2
 80105ca:	6062      	str	r2, [r4, #4]
 80105cc:	a904      	add	r1, sp, #16
 80105ce:	3254      	adds	r2, #84	; 0x54
 80105d0:	1852      	adds	r2, r2, r1
 80105d2:	1c75      	adds	r5, r6, #1
 80105d4:	6023      	str	r3, [r4, #0]
 80105d6:	60e3      	str	r3, [r4, #12]
 80105d8:	60a3      	str	r3, [r4, #8]
 80105da:	7013      	strb	r3, [r2, #0]
 80105dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80105de:	4b59      	ldr	r3, [pc, #356]	; (8010744 <_vfiprintf_r+0x224>)
 80105e0:	2205      	movs	r2, #5
 80105e2:	0018      	movs	r0, r3
 80105e4:	7829      	ldrb	r1, [r5, #0]
 80105e6:	9305      	str	r3, [sp, #20]
 80105e8:	f7fd fe19 	bl	800e21e <memchr>
 80105ec:	1c6e      	adds	r6, r5, #1
 80105ee:	2800      	cmp	r0, #0
 80105f0:	d11f      	bne.n	8010632 <_vfiprintf_r+0x112>
 80105f2:	6822      	ldr	r2, [r4, #0]
 80105f4:	06d3      	lsls	r3, r2, #27
 80105f6:	d504      	bpl.n	8010602 <_vfiprintf_r+0xe2>
 80105f8:	2353      	movs	r3, #83	; 0x53
 80105fa:	a904      	add	r1, sp, #16
 80105fc:	185b      	adds	r3, r3, r1
 80105fe:	2120      	movs	r1, #32
 8010600:	7019      	strb	r1, [r3, #0]
 8010602:	0713      	lsls	r3, r2, #28
 8010604:	d504      	bpl.n	8010610 <_vfiprintf_r+0xf0>
 8010606:	2353      	movs	r3, #83	; 0x53
 8010608:	a904      	add	r1, sp, #16
 801060a:	185b      	adds	r3, r3, r1
 801060c:	212b      	movs	r1, #43	; 0x2b
 801060e:	7019      	strb	r1, [r3, #0]
 8010610:	782b      	ldrb	r3, [r5, #0]
 8010612:	2b2a      	cmp	r3, #42	; 0x2a
 8010614:	d016      	beq.n	8010644 <_vfiprintf_r+0x124>
 8010616:	002e      	movs	r6, r5
 8010618:	2100      	movs	r1, #0
 801061a:	200a      	movs	r0, #10
 801061c:	68e3      	ldr	r3, [r4, #12]
 801061e:	7832      	ldrb	r2, [r6, #0]
 8010620:	1c75      	adds	r5, r6, #1
 8010622:	3a30      	subs	r2, #48	; 0x30
 8010624:	2a09      	cmp	r2, #9
 8010626:	d94e      	bls.n	80106c6 <_vfiprintf_r+0x1a6>
 8010628:	2900      	cmp	r1, #0
 801062a:	d111      	bne.n	8010650 <_vfiprintf_r+0x130>
 801062c:	e017      	b.n	801065e <_vfiprintf_r+0x13e>
 801062e:	3601      	adds	r6, #1
 8010630:	e7af      	b.n	8010592 <_vfiprintf_r+0x72>
 8010632:	9b05      	ldr	r3, [sp, #20]
 8010634:	6822      	ldr	r2, [r4, #0]
 8010636:	1ac0      	subs	r0, r0, r3
 8010638:	2301      	movs	r3, #1
 801063a:	4083      	lsls	r3, r0
 801063c:	4313      	orrs	r3, r2
 801063e:	0035      	movs	r5, r6
 8010640:	6023      	str	r3, [r4, #0]
 8010642:	e7cc      	b.n	80105de <_vfiprintf_r+0xbe>
 8010644:	9b07      	ldr	r3, [sp, #28]
 8010646:	1d19      	adds	r1, r3, #4
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	9107      	str	r1, [sp, #28]
 801064c:	2b00      	cmp	r3, #0
 801064e:	db01      	blt.n	8010654 <_vfiprintf_r+0x134>
 8010650:	930b      	str	r3, [sp, #44]	; 0x2c
 8010652:	e004      	b.n	801065e <_vfiprintf_r+0x13e>
 8010654:	425b      	negs	r3, r3
 8010656:	60e3      	str	r3, [r4, #12]
 8010658:	2302      	movs	r3, #2
 801065a:	4313      	orrs	r3, r2
 801065c:	6023      	str	r3, [r4, #0]
 801065e:	7833      	ldrb	r3, [r6, #0]
 8010660:	2b2e      	cmp	r3, #46	; 0x2e
 8010662:	d10a      	bne.n	801067a <_vfiprintf_r+0x15a>
 8010664:	7873      	ldrb	r3, [r6, #1]
 8010666:	2b2a      	cmp	r3, #42	; 0x2a
 8010668:	d135      	bne.n	80106d6 <_vfiprintf_r+0x1b6>
 801066a:	9b07      	ldr	r3, [sp, #28]
 801066c:	3602      	adds	r6, #2
 801066e:	1d1a      	adds	r2, r3, #4
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	9207      	str	r2, [sp, #28]
 8010674:	2b00      	cmp	r3, #0
 8010676:	db2b      	blt.n	80106d0 <_vfiprintf_r+0x1b0>
 8010678:	9309      	str	r3, [sp, #36]	; 0x24
 801067a:	4d33      	ldr	r5, [pc, #204]	; (8010748 <_vfiprintf_r+0x228>)
 801067c:	2203      	movs	r2, #3
 801067e:	0028      	movs	r0, r5
 8010680:	7831      	ldrb	r1, [r6, #0]
 8010682:	f7fd fdcc 	bl	800e21e <memchr>
 8010686:	2800      	cmp	r0, #0
 8010688:	d006      	beq.n	8010698 <_vfiprintf_r+0x178>
 801068a:	2340      	movs	r3, #64	; 0x40
 801068c:	1b40      	subs	r0, r0, r5
 801068e:	4083      	lsls	r3, r0
 8010690:	6822      	ldr	r2, [r4, #0]
 8010692:	3601      	adds	r6, #1
 8010694:	4313      	orrs	r3, r2
 8010696:	6023      	str	r3, [r4, #0]
 8010698:	7831      	ldrb	r1, [r6, #0]
 801069a:	2206      	movs	r2, #6
 801069c:	482b      	ldr	r0, [pc, #172]	; (801074c <_vfiprintf_r+0x22c>)
 801069e:	1c75      	adds	r5, r6, #1
 80106a0:	7621      	strb	r1, [r4, #24]
 80106a2:	f7fd fdbc 	bl	800e21e <memchr>
 80106a6:	2800      	cmp	r0, #0
 80106a8:	d043      	beq.n	8010732 <_vfiprintf_r+0x212>
 80106aa:	4b29      	ldr	r3, [pc, #164]	; (8010750 <_vfiprintf_r+0x230>)
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d125      	bne.n	80106fc <_vfiprintf_r+0x1dc>
 80106b0:	2207      	movs	r2, #7
 80106b2:	9b07      	ldr	r3, [sp, #28]
 80106b4:	3307      	adds	r3, #7
 80106b6:	4393      	bics	r3, r2
 80106b8:	3308      	adds	r3, #8
 80106ba:	9307      	str	r3, [sp, #28]
 80106bc:	6963      	ldr	r3, [r4, #20]
 80106be:	9a04      	ldr	r2, [sp, #16]
 80106c0:	189b      	adds	r3, r3, r2
 80106c2:	6163      	str	r3, [r4, #20]
 80106c4:	e764      	b.n	8010590 <_vfiprintf_r+0x70>
 80106c6:	4343      	muls	r3, r0
 80106c8:	002e      	movs	r6, r5
 80106ca:	2101      	movs	r1, #1
 80106cc:	189b      	adds	r3, r3, r2
 80106ce:	e7a6      	b.n	801061e <_vfiprintf_r+0xfe>
 80106d0:	2301      	movs	r3, #1
 80106d2:	425b      	negs	r3, r3
 80106d4:	e7d0      	b.n	8010678 <_vfiprintf_r+0x158>
 80106d6:	2300      	movs	r3, #0
 80106d8:	200a      	movs	r0, #10
 80106da:	001a      	movs	r2, r3
 80106dc:	3601      	adds	r6, #1
 80106de:	6063      	str	r3, [r4, #4]
 80106e0:	7831      	ldrb	r1, [r6, #0]
 80106e2:	1c75      	adds	r5, r6, #1
 80106e4:	3930      	subs	r1, #48	; 0x30
 80106e6:	2909      	cmp	r1, #9
 80106e8:	d903      	bls.n	80106f2 <_vfiprintf_r+0x1d2>
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d0c5      	beq.n	801067a <_vfiprintf_r+0x15a>
 80106ee:	9209      	str	r2, [sp, #36]	; 0x24
 80106f0:	e7c3      	b.n	801067a <_vfiprintf_r+0x15a>
 80106f2:	4342      	muls	r2, r0
 80106f4:	002e      	movs	r6, r5
 80106f6:	2301      	movs	r3, #1
 80106f8:	1852      	adds	r2, r2, r1
 80106fa:	e7f1      	b.n	80106e0 <_vfiprintf_r+0x1c0>
 80106fc:	aa07      	add	r2, sp, #28
 80106fe:	9200      	str	r2, [sp, #0]
 8010700:	0021      	movs	r1, r4
 8010702:	003a      	movs	r2, r7
 8010704:	4b13      	ldr	r3, [pc, #76]	; (8010754 <_vfiprintf_r+0x234>)
 8010706:	9803      	ldr	r0, [sp, #12]
 8010708:	f7fc fec0 	bl	800d48c <_printf_float>
 801070c:	9004      	str	r0, [sp, #16]
 801070e:	9b04      	ldr	r3, [sp, #16]
 8010710:	3301      	adds	r3, #1
 8010712:	d1d3      	bne.n	80106bc <_vfiprintf_r+0x19c>
 8010714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010716:	07db      	lsls	r3, r3, #31
 8010718:	d405      	bmi.n	8010726 <_vfiprintf_r+0x206>
 801071a:	89bb      	ldrh	r3, [r7, #12]
 801071c:	059b      	lsls	r3, r3, #22
 801071e:	d402      	bmi.n	8010726 <_vfiprintf_r+0x206>
 8010720:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010722:	f7fd fd7b 	bl	800e21c <__retarget_lock_release_recursive>
 8010726:	89bb      	ldrh	r3, [r7, #12]
 8010728:	065b      	lsls	r3, r3, #25
 801072a:	d500      	bpl.n	801072e <_vfiprintf_r+0x20e>
 801072c:	e71d      	b.n	801056a <_vfiprintf_r+0x4a>
 801072e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010730:	e71d      	b.n	801056e <_vfiprintf_r+0x4e>
 8010732:	aa07      	add	r2, sp, #28
 8010734:	9200      	str	r2, [sp, #0]
 8010736:	0021      	movs	r1, r4
 8010738:	003a      	movs	r2, r7
 801073a:	4b06      	ldr	r3, [pc, #24]	; (8010754 <_vfiprintf_r+0x234>)
 801073c:	9803      	ldr	r0, [sp, #12]
 801073e:	f7fd f96b 	bl	800da18 <_printf_i>
 8010742:	e7e3      	b.n	801070c <_vfiprintf_r+0x1ec>
 8010744:	08011534 	.word	0x08011534
 8010748:	0801153a 	.word	0x0801153a
 801074c:	0801153e 	.word	0x0801153e
 8010750:	0800d48d 	.word	0x0800d48d
 8010754:	080104fb 	.word	0x080104fb

08010758 <__sflush_r>:
 8010758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801075a:	898b      	ldrh	r3, [r1, #12]
 801075c:	0005      	movs	r5, r0
 801075e:	000c      	movs	r4, r1
 8010760:	071a      	lsls	r2, r3, #28
 8010762:	d45c      	bmi.n	801081e <__sflush_r+0xc6>
 8010764:	684a      	ldr	r2, [r1, #4]
 8010766:	2a00      	cmp	r2, #0
 8010768:	dc04      	bgt.n	8010774 <__sflush_r+0x1c>
 801076a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801076c:	2a00      	cmp	r2, #0
 801076e:	dc01      	bgt.n	8010774 <__sflush_r+0x1c>
 8010770:	2000      	movs	r0, #0
 8010772:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010774:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010776:	2f00      	cmp	r7, #0
 8010778:	d0fa      	beq.n	8010770 <__sflush_r+0x18>
 801077a:	2200      	movs	r2, #0
 801077c:	2080      	movs	r0, #128	; 0x80
 801077e:	682e      	ldr	r6, [r5, #0]
 8010780:	602a      	str	r2, [r5, #0]
 8010782:	001a      	movs	r2, r3
 8010784:	0140      	lsls	r0, r0, #5
 8010786:	6a21      	ldr	r1, [r4, #32]
 8010788:	4002      	ands	r2, r0
 801078a:	4203      	tst	r3, r0
 801078c:	d034      	beq.n	80107f8 <__sflush_r+0xa0>
 801078e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010790:	89a3      	ldrh	r3, [r4, #12]
 8010792:	075b      	lsls	r3, r3, #29
 8010794:	d506      	bpl.n	80107a4 <__sflush_r+0x4c>
 8010796:	6863      	ldr	r3, [r4, #4]
 8010798:	1ac0      	subs	r0, r0, r3
 801079a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801079c:	2b00      	cmp	r3, #0
 801079e:	d001      	beq.n	80107a4 <__sflush_r+0x4c>
 80107a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107a2:	1ac0      	subs	r0, r0, r3
 80107a4:	0002      	movs	r2, r0
 80107a6:	2300      	movs	r3, #0
 80107a8:	0028      	movs	r0, r5
 80107aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80107ac:	6a21      	ldr	r1, [r4, #32]
 80107ae:	47b8      	blx	r7
 80107b0:	89a2      	ldrh	r2, [r4, #12]
 80107b2:	1c43      	adds	r3, r0, #1
 80107b4:	d106      	bne.n	80107c4 <__sflush_r+0x6c>
 80107b6:	6829      	ldr	r1, [r5, #0]
 80107b8:	291d      	cmp	r1, #29
 80107ba:	d82c      	bhi.n	8010816 <__sflush_r+0xbe>
 80107bc:	4b2a      	ldr	r3, [pc, #168]	; (8010868 <__sflush_r+0x110>)
 80107be:	410b      	asrs	r3, r1
 80107c0:	07db      	lsls	r3, r3, #31
 80107c2:	d428      	bmi.n	8010816 <__sflush_r+0xbe>
 80107c4:	2300      	movs	r3, #0
 80107c6:	6063      	str	r3, [r4, #4]
 80107c8:	6923      	ldr	r3, [r4, #16]
 80107ca:	6023      	str	r3, [r4, #0]
 80107cc:	04d2      	lsls	r2, r2, #19
 80107ce:	d505      	bpl.n	80107dc <__sflush_r+0x84>
 80107d0:	1c43      	adds	r3, r0, #1
 80107d2:	d102      	bne.n	80107da <__sflush_r+0x82>
 80107d4:	682b      	ldr	r3, [r5, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d100      	bne.n	80107dc <__sflush_r+0x84>
 80107da:	6560      	str	r0, [r4, #84]	; 0x54
 80107dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107de:	602e      	str	r6, [r5, #0]
 80107e0:	2900      	cmp	r1, #0
 80107e2:	d0c5      	beq.n	8010770 <__sflush_r+0x18>
 80107e4:	0023      	movs	r3, r4
 80107e6:	3344      	adds	r3, #68	; 0x44
 80107e8:	4299      	cmp	r1, r3
 80107ea:	d002      	beq.n	80107f2 <__sflush_r+0x9a>
 80107ec:	0028      	movs	r0, r5
 80107ee:	f7fe fbcf 	bl	800ef90 <_free_r>
 80107f2:	2000      	movs	r0, #0
 80107f4:	6360      	str	r0, [r4, #52]	; 0x34
 80107f6:	e7bc      	b.n	8010772 <__sflush_r+0x1a>
 80107f8:	2301      	movs	r3, #1
 80107fa:	0028      	movs	r0, r5
 80107fc:	47b8      	blx	r7
 80107fe:	1c43      	adds	r3, r0, #1
 8010800:	d1c6      	bne.n	8010790 <__sflush_r+0x38>
 8010802:	682b      	ldr	r3, [r5, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d0c3      	beq.n	8010790 <__sflush_r+0x38>
 8010808:	2b1d      	cmp	r3, #29
 801080a:	d001      	beq.n	8010810 <__sflush_r+0xb8>
 801080c:	2b16      	cmp	r3, #22
 801080e:	d101      	bne.n	8010814 <__sflush_r+0xbc>
 8010810:	602e      	str	r6, [r5, #0]
 8010812:	e7ad      	b.n	8010770 <__sflush_r+0x18>
 8010814:	89a2      	ldrh	r2, [r4, #12]
 8010816:	2340      	movs	r3, #64	; 0x40
 8010818:	4313      	orrs	r3, r2
 801081a:	81a3      	strh	r3, [r4, #12]
 801081c:	e7a9      	b.n	8010772 <__sflush_r+0x1a>
 801081e:	690e      	ldr	r6, [r1, #16]
 8010820:	2e00      	cmp	r6, #0
 8010822:	d0a5      	beq.n	8010770 <__sflush_r+0x18>
 8010824:	680f      	ldr	r7, [r1, #0]
 8010826:	600e      	str	r6, [r1, #0]
 8010828:	1bba      	subs	r2, r7, r6
 801082a:	9201      	str	r2, [sp, #4]
 801082c:	2200      	movs	r2, #0
 801082e:	079b      	lsls	r3, r3, #30
 8010830:	d100      	bne.n	8010834 <__sflush_r+0xdc>
 8010832:	694a      	ldr	r2, [r1, #20]
 8010834:	60a2      	str	r2, [r4, #8]
 8010836:	9b01      	ldr	r3, [sp, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	dd99      	ble.n	8010770 <__sflush_r+0x18>
 801083c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801083e:	0032      	movs	r2, r6
 8010840:	001f      	movs	r7, r3
 8010842:	0028      	movs	r0, r5
 8010844:	9b01      	ldr	r3, [sp, #4]
 8010846:	6a21      	ldr	r1, [r4, #32]
 8010848:	47b8      	blx	r7
 801084a:	2800      	cmp	r0, #0
 801084c:	dc06      	bgt.n	801085c <__sflush_r+0x104>
 801084e:	2340      	movs	r3, #64	; 0x40
 8010850:	2001      	movs	r0, #1
 8010852:	89a2      	ldrh	r2, [r4, #12]
 8010854:	4240      	negs	r0, r0
 8010856:	4313      	orrs	r3, r2
 8010858:	81a3      	strh	r3, [r4, #12]
 801085a:	e78a      	b.n	8010772 <__sflush_r+0x1a>
 801085c:	9b01      	ldr	r3, [sp, #4]
 801085e:	1836      	adds	r6, r6, r0
 8010860:	1a1b      	subs	r3, r3, r0
 8010862:	9301      	str	r3, [sp, #4]
 8010864:	e7e7      	b.n	8010836 <__sflush_r+0xde>
 8010866:	46c0      	nop			; (mov r8, r8)
 8010868:	dfbffffe 	.word	0xdfbffffe

0801086c <_fflush_r>:
 801086c:	690b      	ldr	r3, [r1, #16]
 801086e:	b570      	push	{r4, r5, r6, lr}
 8010870:	0005      	movs	r5, r0
 8010872:	000c      	movs	r4, r1
 8010874:	2b00      	cmp	r3, #0
 8010876:	d102      	bne.n	801087e <_fflush_r+0x12>
 8010878:	2500      	movs	r5, #0
 801087a:	0028      	movs	r0, r5
 801087c:	bd70      	pop	{r4, r5, r6, pc}
 801087e:	2800      	cmp	r0, #0
 8010880:	d004      	beq.n	801088c <_fflush_r+0x20>
 8010882:	6a03      	ldr	r3, [r0, #32]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d101      	bne.n	801088c <_fflush_r+0x20>
 8010888:	f7fd fa66 	bl	800dd58 <__sinit>
 801088c:	220c      	movs	r2, #12
 801088e:	5ea3      	ldrsh	r3, [r4, r2]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d0f1      	beq.n	8010878 <_fflush_r+0xc>
 8010894:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010896:	07d2      	lsls	r2, r2, #31
 8010898:	d404      	bmi.n	80108a4 <_fflush_r+0x38>
 801089a:	059b      	lsls	r3, r3, #22
 801089c:	d402      	bmi.n	80108a4 <_fflush_r+0x38>
 801089e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108a0:	f7fd fcbb 	bl	800e21a <__retarget_lock_acquire_recursive>
 80108a4:	0028      	movs	r0, r5
 80108a6:	0021      	movs	r1, r4
 80108a8:	f7ff ff56 	bl	8010758 <__sflush_r>
 80108ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108ae:	0005      	movs	r5, r0
 80108b0:	07db      	lsls	r3, r3, #31
 80108b2:	d4e2      	bmi.n	801087a <_fflush_r+0xe>
 80108b4:	89a3      	ldrh	r3, [r4, #12]
 80108b6:	059b      	lsls	r3, r3, #22
 80108b8:	d4df      	bmi.n	801087a <_fflush_r+0xe>
 80108ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108bc:	f7fd fcae 	bl	800e21c <__retarget_lock_release_recursive>
 80108c0:	e7db      	b.n	801087a <_fflush_r+0xe>
	...

080108c4 <__swhatbuf_r>:
 80108c4:	b570      	push	{r4, r5, r6, lr}
 80108c6:	000e      	movs	r6, r1
 80108c8:	001d      	movs	r5, r3
 80108ca:	230e      	movs	r3, #14
 80108cc:	5ec9      	ldrsh	r1, [r1, r3]
 80108ce:	0014      	movs	r4, r2
 80108d0:	b096      	sub	sp, #88	; 0x58
 80108d2:	2900      	cmp	r1, #0
 80108d4:	da0c      	bge.n	80108f0 <__swhatbuf_r+0x2c>
 80108d6:	89b2      	ldrh	r2, [r6, #12]
 80108d8:	2380      	movs	r3, #128	; 0x80
 80108da:	0011      	movs	r1, r2
 80108dc:	4019      	ands	r1, r3
 80108de:	421a      	tst	r2, r3
 80108e0:	d013      	beq.n	801090a <__swhatbuf_r+0x46>
 80108e2:	2100      	movs	r1, #0
 80108e4:	3b40      	subs	r3, #64	; 0x40
 80108e6:	2000      	movs	r0, #0
 80108e8:	6029      	str	r1, [r5, #0]
 80108ea:	6023      	str	r3, [r4, #0]
 80108ec:	b016      	add	sp, #88	; 0x58
 80108ee:	bd70      	pop	{r4, r5, r6, pc}
 80108f0:	466a      	mov	r2, sp
 80108f2:	f000 f861 	bl	80109b8 <_fstat_r>
 80108f6:	2800      	cmp	r0, #0
 80108f8:	dbed      	blt.n	80108d6 <__swhatbuf_r+0x12>
 80108fa:	23f0      	movs	r3, #240	; 0xf0
 80108fc:	9901      	ldr	r1, [sp, #4]
 80108fe:	021b      	lsls	r3, r3, #8
 8010900:	4019      	ands	r1, r3
 8010902:	4b03      	ldr	r3, [pc, #12]	; (8010910 <__swhatbuf_r+0x4c>)
 8010904:	18c9      	adds	r1, r1, r3
 8010906:	424b      	negs	r3, r1
 8010908:	4159      	adcs	r1, r3
 801090a:	2380      	movs	r3, #128	; 0x80
 801090c:	00db      	lsls	r3, r3, #3
 801090e:	e7ea      	b.n	80108e6 <__swhatbuf_r+0x22>
 8010910:	ffffe000 	.word	0xffffe000

08010914 <__smakebuf_r>:
 8010914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010916:	2602      	movs	r6, #2
 8010918:	898b      	ldrh	r3, [r1, #12]
 801091a:	0005      	movs	r5, r0
 801091c:	000c      	movs	r4, r1
 801091e:	4233      	tst	r3, r6
 8010920:	d006      	beq.n	8010930 <__smakebuf_r+0x1c>
 8010922:	0023      	movs	r3, r4
 8010924:	3347      	adds	r3, #71	; 0x47
 8010926:	6023      	str	r3, [r4, #0]
 8010928:	6123      	str	r3, [r4, #16]
 801092a:	2301      	movs	r3, #1
 801092c:	6163      	str	r3, [r4, #20]
 801092e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8010930:	466a      	mov	r2, sp
 8010932:	ab01      	add	r3, sp, #4
 8010934:	f7ff ffc6 	bl	80108c4 <__swhatbuf_r>
 8010938:	9900      	ldr	r1, [sp, #0]
 801093a:	0007      	movs	r7, r0
 801093c:	0028      	movs	r0, r5
 801093e:	f7fe fef9 	bl	800f734 <_malloc_r>
 8010942:	2800      	cmp	r0, #0
 8010944:	d108      	bne.n	8010958 <__smakebuf_r+0x44>
 8010946:	220c      	movs	r2, #12
 8010948:	5ea3      	ldrsh	r3, [r4, r2]
 801094a:	059a      	lsls	r2, r3, #22
 801094c:	d4ef      	bmi.n	801092e <__smakebuf_r+0x1a>
 801094e:	2203      	movs	r2, #3
 8010950:	4393      	bics	r3, r2
 8010952:	431e      	orrs	r6, r3
 8010954:	81a6      	strh	r6, [r4, #12]
 8010956:	e7e4      	b.n	8010922 <__smakebuf_r+0xe>
 8010958:	2380      	movs	r3, #128	; 0x80
 801095a:	89a2      	ldrh	r2, [r4, #12]
 801095c:	6020      	str	r0, [r4, #0]
 801095e:	4313      	orrs	r3, r2
 8010960:	81a3      	strh	r3, [r4, #12]
 8010962:	9b00      	ldr	r3, [sp, #0]
 8010964:	6120      	str	r0, [r4, #16]
 8010966:	6163      	str	r3, [r4, #20]
 8010968:	9b01      	ldr	r3, [sp, #4]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00c      	beq.n	8010988 <__smakebuf_r+0x74>
 801096e:	0028      	movs	r0, r5
 8010970:	230e      	movs	r3, #14
 8010972:	5ee1      	ldrsh	r1, [r4, r3]
 8010974:	f000 f832 	bl	80109dc <_isatty_r>
 8010978:	2800      	cmp	r0, #0
 801097a:	d005      	beq.n	8010988 <__smakebuf_r+0x74>
 801097c:	2303      	movs	r3, #3
 801097e:	89a2      	ldrh	r2, [r4, #12]
 8010980:	439a      	bics	r2, r3
 8010982:	3b02      	subs	r3, #2
 8010984:	4313      	orrs	r3, r2
 8010986:	81a3      	strh	r3, [r4, #12]
 8010988:	89a3      	ldrh	r3, [r4, #12]
 801098a:	433b      	orrs	r3, r7
 801098c:	81a3      	strh	r3, [r4, #12]
 801098e:	e7ce      	b.n	801092e <__smakebuf_r+0x1a>

08010990 <memmove>:
 8010990:	b510      	push	{r4, lr}
 8010992:	4288      	cmp	r0, r1
 8010994:	d902      	bls.n	801099c <memmove+0xc>
 8010996:	188b      	adds	r3, r1, r2
 8010998:	4298      	cmp	r0, r3
 801099a:	d303      	bcc.n	80109a4 <memmove+0x14>
 801099c:	2300      	movs	r3, #0
 801099e:	e007      	b.n	80109b0 <memmove+0x20>
 80109a0:	5c8b      	ldrb	r3, [r1, r2]
 80109a2:	5483      	strb	r3, [r0, r2]
 80109a4:	3a01      	subs	r2, #1
 80109a6:	d2fb      	bcs.n	80109a0 <memmove+0x10>
 80109a8:	bd10      	pop	{r4, pc}
 80109aa:	5ccc      	ldrb	r4, [r1, r3]
 80109ac:	54c4      	strb	r4, [r0, r3]
 80109ae:	3301      	adds	r3, #1
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d1fa      	bne.n	80109aa <memmove+0x1a>
 80109b4:	e7f8      	b.n	80109a8 <memmove+0x18>
	...

080109b8 <_fstat_r>:
 80109b8:	2300      	movs	r3, #0
 80109ba:	b570      	push	{r4, r5, r6, lr}
 80109bc:	4d06      	ldr	r5, [pc, #24]	; (80109d8 <_fstat_r+0x20>)
 80109be:	0004      	movs	r4, r0
 80109c0:	0008      	movs	r0, r1
 80109c2:	0011      	movs	r1, r2
 80109c4:	602b      	str	r3, [r5, #0]
 80109c6:	f7f2 ff72 	bl	80038ae <_fstat>
 80109ca:	1c43      	adds	r3, r0, #1
 80109cc:	d103      	bne.n	80109d6 <_fstat_r+0x1e>
 80109ce:	682b      	ldr	r3, [r5, #0]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d000      	beq.n	80109d6 <_fstat_r+0x1e>
 80109d4:	6023      	str	r3, [r4, #0]
 80109d6:	bd70      	pop	{r4, r5, r6, pc}
 80109d8:	20005c48 	.word	0x20005c48

080109dc <_isatty_r>:
 80109dc:	2300      	movs	r3, #0
 80109de:	b570      	push	{r4, r5, r6, lr}
 80109e0:	4d06      	ldr	r5, [pc, #24]	; (80109fc <_isatty_r+0x20>)
 80109e2:	0004      	movs	r4, r0
 80109e4:	0008      	movs	r0, r1
 80109e6:	602b      	str	r3, [r5, #0]
 80109e8:	f7f2 ff6f 	bl	80038ca <_isatty>
 80109ec:	1c43      	adds	r3, r0, #1
 80109ee:	d103      	bne.n	80109f8 <_isatty_r+0x1c>
 80109f0:	682b      	ldr	r3, [r5, #0]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d000      	beq.n	80109f8 <_isatty_r+0x1c>
 80109f6:	6023      	str	r3, [r4, #0]
 80109f8:	bd70      	pop	{r4, r5, r6, pc}
 80109fa:	46c0      	nop			; (mov r8, r8)
 80109fc:	20005c48 	.word	0x20005c48

08010a00 <_sbrk_r>:
 8010a00:	2300      	movs	r3, #0
 8010a02:	b570      	push	{r4, r5, r6, lr}
 8010a04:	4d06      	ldr	r5, [pc, #24]	; (8010a20 <_sbrk_r+0x20>)
 8010a06:	0004      	movs	r4, r0
 8010a08:	0008      	movs	r0, r1
 8010a0a:	602b      	str	r3, [r5, #0]
 8010a0c:	f7f2 ff72 	bl	80038f4 <_sbrk>
 8010a10:	1c43      	adds	r3, r0, #1
 8010a12:	d103      	bne.n	8010a1c <_sbrk_r+0x1c>
 8010a14:	682b      	ldr	r3, [r5, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d000      	beq.n	8010a1c <_sbrk_r+0x1c>
 8010a1a:	6023      	str	r3, [r4, #0]
 8010a1c:	bd70      	pop	{r4, r5, r6, pc}
 8010a1e:	46c0      	nop			; (mov r8, r8)
 8010a20:	20005c48 	.word	0x20005c48

08010a24 <__assert_func>:
 8010a24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010a26:	0014      	movs	r4, r2
 8010a28:	001a      	movs	r2, r3
 8010a2a:	4b09      	ldr	r3, [pc, #36]	; (8010a50 <__assert_func+0x2c>)
 8010a2c:	0005      	movs	r5, r0
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	000e      	movs	r6, r1
 8010a32:	68d8      	ldr	r0, [r3, #12]
 8010a34:	4b07      	ldr	r3, [pc, #28]	; (8010a54 <__assert_func+0x30>)
 8010a36:	2c00      	cmp	r4, #0
 8010a38:	d101      	bne.n	8010a3e <__assert_func+0x1a>
 8010a3a:	4b07      	ldr	r3, [pc, #28]	; (8010a58 <__assert_func+0x34>)
 8010a3c:	001c      	movs	r4, r3
 8010a3e:	4907      	ldr	r1, [pc, #28]	; (8010a5c <__assert_func+0x38>)
 8010a40:	9301      	str	r3, [sp, #4]
 8010a42:	9402      	str	r4, [sp, #8]
 8010a44:	002b      	movs	r3, r5
 8010a46:	9600      	str	r6, [sp, #0]
 8010a48:	f000 f866 	bl	8010b18 <fiprintf>
 8010a4c:	f000 f874 	bl	8010b38 <abort>
 8010a50:	200001ec 	.word	0x200001ec
 8010a54:	08011545 	.word	0x08011545
 8010a58:	08011580 	.word	0x08011580
 8010a5c:	08011552 	.word	0x08011552

08010a60 <_calloc_r>:
 8010a60:	b570      	push	{r4, r5, r6, lr}
 8010a62:	0c0b      	lsrs	r3, r1, #16
 8010a64:	0c15      	lsrs	r5, r2, #16
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d11e      	bne.n	8010aa8 <_calloc_r+0x48>
 8010a6a:	2d00      	cmp	r5, #0
 8010a6c:	d10c      	bne.n	8010a88 <_calloc_r+0x28>
 8010a6e:	b289      	uxth	r1, r1
 8010a70:	b294      	uxth	r4, r2
 8010a72:	434c      	muls	r4, r1
 8010a74:	0021      	movs	r1, r4
 8010a76:	f7fe fe5d 	bl	800f734 <_malloc_r>
 8010a7a:	1e05      	subs	r5, r0, #0
 8010a7c:	d01b      	beq.n	8010ab6 <_calloc_r+0x56>
 8010a7e:	0022      	movs	r2, r4
 8010a80:	2100      	movs	r1, #0
 8010a82:	f7fd fb33 	bl	800e0ec <memset>
 8010a86:	e016      	b.n	8010ab6 <_calloc_r+0x56>
 8010a88:	1c2b      	adds	r3, r5, #0
 8010a8a:	1c0c      	adds	r4, r1, #0
 8010a8c:	b289      	uxth	r1, r1
 8010a8e:	b292      	uxth	r2, r2
 8010a90:	434a      	muls	r2, r1
 8010a92:	b2a1      	uxth	r1, r4
 8010a94:	b29c      	uxth	r4, r3
 8010a96:	434c      	muls	r4, r1
 8010a98:	0c13      	lsrs	r3, r2, #16
 8010a9a:	18e4      	adds	r4, r4, r3
 8010a9c:	0c23      	lsrs	r3, r4, #16
 8010a9e:	d107      	bne.n	8010ab0 <_calloc_r+0x50>
 8010aa0:	0424      	lsls	r4, r4, #16
 8010aa2:	b292      	uxth	r2, r2
 8010aa4:	4314      	orrs	r4, r2
 8010aa6:	e7e5      	b.n	8010a74 <_calloc_r+0x14>
 8010aa8:	2d00      	cmp	r5, #0
 8010aaa:	d101      	bne.n	8010ab0 <_calloc_r+0x50>
 8010aac:	1c14      	adds	r4, r2, #0
 8010aae:	e7ed      	b.n	8010a8c <_calloc_r+0x2c>
 8010ab0:	230c      	movs	r3, #12
 8010ab2:	2500      	movs	r5, #0
 8010ab4:	6003      	str	r3, [r0, #0]
 8010ab6:	0028      	movs	r0, r5
 8010ab8:	bd70      	pop	{r4, r5, r6, pc}

08010aba <_realloc_r>:
 8010aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010abc:	0007      	movs	r7, r0
 8010abe:	000e      	movs	r6, r1
 8010ac0:	0014      	movs	r4, r2
 8010ac2:	2900      	cmp	r1, #0
 8010ac4:	d105      	bne.n	8010ad2 <_realloc_r+0x18>
 8010ac6:	0011      	movs	r1, r2
 8010ac8:	f7fe fe34 	bl	800f734 <_malloc_r>
 8010acc:	0005      	movs	r5, r0
 8010ace:	0028      	movs	r0, r5
 8010ad0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010ad2:	2a00      	cmp	r2, #0
 8010ad4:	d103      	bne.n	8010ade <_realloc_r+0x24>
 8010ad6:	f7fe fa5b 	bl	800ef90 <_free_r>
 8010ada:	0025      	movs	r5, r4
 8010adc:	e7f7      	b.n	8010ace <_realloc_r+0x14>
 8010ade:	f000 f832 	bl	8010b46 <_malloc_usable_size_r>
 8010ae2:	9001      	str	r0, [sp, #4]
 8010ae4:	4284      	cmp	r4, r0
 8010ae6:	d803      	bhi.n	8010af0 <_realloc_r+0x36>
 8010ae8:	0035      	movs	r5, r6
 8010aea:	0843      	lsrs	r3, r0, #1
 8010aec:	42a3      	cmp	r3, r4
 8010aee:	d3ee      	bcc.n	8010ace <_realloc_r+0x14>
 8010af0:	0021      	movs	r1, r4
 8010af2:	0038      	movs	r0, r7
 8010af4:	f7fe fe1e 	bl	800f734 <_malloc_r>
 8010af8:	1e05      	subs	r5, r0, #0
 8010afa:	d0e8      	beq.n	8010ace <_realloc_r+0x14>
 8010afc:	9b01      	ldr	r3, [sp, #4]
 8010afe:	0022      	movs	r2, r4
 8010b00:	429c      	cmp	r4, r3
 8010b02:	d900      	bls.n	8010b06 <_realloc_r+0x4c>
 8010b04:	001a      	movs	r2, r3
 8010b06:	0031      	movs	r1, r6
 8010b08:	0028      	movs	r0, r5
 8010b0a:	f7fd fb93 	bl	800e234 <memcpy>
 8010b0e:	0031      	movs	r1, r6
 8010b10:	0038      	movs	r0, r7
 8010b12:	f7fe fa3d 	bl	800ef90 <_free_r>
 8010b16:	e7da      	b.n	8010ace <_realloc_r+0x14>

08010b18 <fiprintf>:
 8010b18:	b40e      	push	{r1, r2, r3}
 8010b1a:	b517      	push	{r0, r1, r2, r4, lr}
 8010b1c:	4c05      	ldr	r4, [pc, #20]	; (8010b34 <fiprintf+0x1c>)
 8010b1e:	ab05      	add	r3, sp, #20
 8010b20:	cb04      	ldmia	r3!, {r2}
 8010b22:	0001      	movs	r1, r0
 8010b24:	6820      	ldr	r0, [r4, #0]
 8010b26:	9301      	str	r3, [sp, #4]
 8010b28:	f7ff fcfa 	bl	8010520 <_vfiprintf_r>
 8010b2c:	bc1e      	pop	{r1, r2, r3, r4}
 8010b2e:	bc08      	pop	{r3}
 8010b30:	b003      	add	sp, #12
 8010b32:	4718      	bx	r3
 8010b34:	200001ec 	.word	0x200001ec

08010b38 <abort>:
 8010b38:	2006      	movs	r0, #6
 8010b3a:	b510      	push	{r4, lr}
 8010b3c:	f000 f836 	bl	8010bac <raise>
 8010b40:	2001      	movs	r0, #1
 8010b42:	f7f2 fe65 	bl	8003810 <_exit>

08010b46 <_malloc_usable_size_r>:
 8010b46:	1f0b      	subs	r3, r1, #4
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	1f18      	subs	r0, r3, #4
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	da01      	bge.n	8010b54 <_malloc_usable_size_r+0xe>
 8010b50:	580b      	ldr	r3, [r1, r0]
 8010b52:	18c0      	adds	r0, r0, r3
 8010b54:	4770      	bx	lr

08010b56 <_raise_r>:
 8010b56:	b570      	push	{r4, r5, r6, lr}
 8010b58:	0004      	movs	r4, r0
 8010b5a:	000d      	movs	r5, r1
 8010b5c:	291f      	cmp	r1, #31
 8010b5e:	d904      	bls.n	8010b6a <_raise_r+0x14>
 8010b60:	2316      	movs	r3, #22
 8010b62:	6003      	str	r3, [r0, #0]
 8010b64:	2001      	movs	r0, #1
 8010b66:	4240      	negs	r0, r0
 8010b68:	bd70      	pop	{r4, r5, r6, pc}
 8010b6a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d004      	beq.n	8010b7a <_raise_r+0x24>
 8010b70:	008a      	lsls	r2, r1, #2
 8010b72:	189b      	adds	r3, r3, r2
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	2a00      	cmp	r2, #0
 8010b78:	d108      	bne.n	8010b8c <_raise_r+0x36>
 8010b7a:	0020      	movs	r0, r4
 8010b7c:	f000 f832 	bl	8010be4 <_getpid_r>
 8010b80:	002a      	movs	r2, r5
 8010b82:	0001      	movs	r1, r0
 8010b84:	0020      	movs	r0, r4
 8010b86:	f000 f81b 	bl	8010bc0 <_kill_r>
 8010b8a:	e7ed      	b.n	8010b68 <_raise_r+0x12>
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	2a01      	cmp	r2, #1
 8010b90:	d0ea      	beq.n	8010b68 <_raise_r+0x12>
 8010b92:	1c51      	adds	r1, r2, #1
 8010b94:	d103      	bne.n	8010b9e <_raise_r+0x48>
 8010b96:	2316      	movs	r3, #22
 8010b98:	3001      	adds	r0, #1
 8010b9a:	6023      	str	r3, [r4, #0]
 8010b9c:	e7e4      	b.n	8010b68 <_raise_r+0x12>
 8010b9e:	2400      	movs	r4, #0
 8010ba0:	0028      	movs	r0, r5
 8010ba2:	601c      	str	r4, [r3, #0]
 8010ba4:	4790      	blx	r2
 8010ba6:	0020      	movs	r0, r4
 8010ba8:	e7de      	b.n	8010b68 <_raise_r+0x12>
	...

08010bac <raise>:
 8010bac:	b510      	push	{r4, lr}
 8010bae:	4b03      	ldr	r3, [pc, #12]	; (8010bbc <raise+0x10>)
 8010bb0:	0001      	movs	r1, r0
 8010bb2:	6818      	ldr	r0, [r3, #0]
 8010bb4:	f7ff ffcf 	bl	8010b56 <_raise_r>
 8010bb8:	bd10      	pop	{r4, pc}
 8010bba:	46c0      	nop			; (mov r8, r8)
 8010bbc:	200001ec 	.word	0x200001ec

08010bc0 <_kill_r>:
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	b570      	push	{r4, r5, r6, lr}
 8010bc4:	4d06      	ldr	r5, [pc, #24]	; (8010be0 <_kill_r+0x20>)
 8010bc6:	0004      	movs	r4, r0
 8010bc8:	0008      	movs	r0, r1
 8010bca:	0011      	movs	r1, r2
 8010bcc:	602b      	str	r3, [r5, #0]
 8010bce:	f7f2 fe0f 	bl	80037f0 <_kill>
 8010bd2:	1c43      	adds	r3, r0, #1
 8010bd4:	d103      	bne.n	8010bde <_kill_r+0x1e>
 8010bd6:	682b      	ldr	r3, [r5, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d000      	beq.n	8010bde <_kill_r+0x1e>
 8010bdc:	6023      	str	r3, [r4, #0]
 8010bde:	bd70      	pop	{r4, r5, r6, pc}
 8010be0:	20005c48 	.word	0x20005c48

08010be4 <_getpid_r>:
 8010be4:	b510      	push	{r4, lr}
 8010be6:	f7f2 fdfd 	bl	80037e4 <_getpid>
 8010bea:	bd10      	pop	{r4, pc}

08010bec <_init>:
 8010bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bee:	46c0      	nop			; (mov r8, r8)
 8010bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bf2:	bc08      	pop	{r3}
 8010bf4:	469e      	mov	lr, r3
 8010bf6:	4770      	bx	lr

08010bf8 <_fini>:
 8010bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bfa:	46c0      	nop			; (mov r8, r8)
 8010bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bfe:	bc08      	pop	{r3}
 8010c00:	469e      	mov	lr, r3
 8010c02:	4770      	bx	lr
