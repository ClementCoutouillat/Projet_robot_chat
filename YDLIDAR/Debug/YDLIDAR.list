
YDLIDAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000838c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08008570  08008570  00018570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb0  08008bb0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008bb0  08008bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb8  08008bb8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bbc  08008bbc  00018bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a94  200001d4  08008d94  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c68  08008d94  00021c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eed7  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025f6  00000000  00000000  0002f11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  00031718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e2  00000000  00000000  000322b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eabd  00000000  00000000  00032b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd0d  00000000  00000000  00051657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b969c  00000000  00000000  00061364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ed4  00000000  00000000  0011aa00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0011e8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008554 	.word	0x08008554

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08008554 	.word	0x08008554

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <calculateChecksum>:
#include "main.h"
#include "math.h"
ydlidar_t ydlidar;
extern UART_HandleTypeDef huart1;
uint16_t calculateChecksum(uint16_t *data, size_t length)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
    uint16_t checksum = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	e00a      	b.n	8000f1e <calculateChecksum+0x2a>
    {
        checksum ^= data[i];
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	881a      	ldrh	r2, [r3, #0]
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	4053      	eors	r3, r2
 8000f16:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d3f0      	bcc.n	8000f08 <calculateChecksum+0x14>
    }

    return checksum;
 8000f26:	89fb      	ldrh	r3, [r7, #14]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <getDeviceInfo>:
result_t getDeviceInfo(ydlidar_device_info_t *device_info)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    ydlidar_response_header_t response_header;
    sendCommand(YDLIDAR_CMD_GET_DEVICE_INFO);
 8000f3c:	2090      	movs	r0, #144	; 0x90
 8000f3e:	f000 f877 	bl	8001030 <sendCommand>

    receiveResponseHeader(&response_header);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f888 	bl	800105c <receiveResponseHeader>

    if (response_header.type_mode == YDLIDAR_RESPONSE_DEVICVE_TYPE_MODE && response_header.response_length == YDLIDAR_RESPONSE_DEVICE_INFO_SIZE)
 8000f4c:	7cbb      	ldrb	r3, [r7, #18]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d116      	bne.n	8000f80 <getDeviceInfo+0x4c>
 8000f52:	89fb      	ldrh	r3, [r7, #14]
 8000f54:	8a3a      	ldrh	r2, [r7, #16]
 8000f56:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000f5a:	0412      	lsls	r2, r2, #16
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	2b14      	cmp	r3, #20
 8000f60:	d10e      	bne.n	8000f80 <getDeviceInfo+0x4c>
    {
        uint8_t *infobuf = (uint8_t *)device_info;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	617b      	str	r3, [r7, #20]
        ydlidar.func.receive_response(infobuf, YDLIDAR_RESPONSE_DEVICE_INFO_SIZE);
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <getDeviceInfo+0x58>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2114      	movs	r1, #20
 8000f6c:	6978      	ldr	r0, [r7, #20]
 8000f6e:	4798      	blx	r3
        if (device_info->model == YDLIDAR_MODEL_X4)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b06      	cmp	r3, #6
 8000f76:	d101      	bne.n	8000f7c <getDeviceInfo+0x48>
        {
            return RESULT_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e002      	b.n	8000f82 <getDeviceInfo+0x4e>
        }
        else
        {
            return RESULT_FAIL;
 8000f7c:	23ff      	movs	r3, #255	; 0xff
 8000f7e:	e000      	b.n	8000f82 <getDeviceInfo+0x4e>
        }
    }
    else
    {
        return RESULT_FAIL;
 8000f80:	23ff      	movs	r3, #255	; 0xff
    }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001f0 	.word	0x200001f0

08000f90 <getDeviceHealth>:

result_t getDeviceHealth(ydlidar_device_health_t *device_health)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    ydlidar_response_header_t response_header;
    sendCommand(YDLIDAR_CMD_GET_DEVICE_HEALTH);
 8000f98:	2091      	movs	r0, #145	; 0x91
 8000f9a:	f000 f849 	bl	8001030 <sendCommand>
    receiveResponseHeader(&response_header);
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f85a 	bl	800105c <receiveResponseHeader>
    if (response_header.type_mode == YDLIDAR_RESPONSE_HEALTH_TYPE_MODE && response_header.response_length == YDLIDAR_RESPONSE_DEVICE_HEALTH_SIZE)
 8000fa8:	7cbb      	ldrb	r3, [r7, #18]
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d116      	bne.n	8000fdc <getDeviceHealth+0x4c>
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	8a3a      	ldrh	r2, [r7, #16]
 8000fb2:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000fb6:	0412      	lsls	r2, r2, #16
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d10e      	bne.n	8000fdc <getDeviceHealth+0x4c>
    {
        uint8_t *healthbuf = (uint8_t *)device_health;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	617b      	str	r3, [r7, #20]
        ydlidar.func.receive_response(healthbuf, YDLIDAR_RESPONSE_DEVICE_HEALTH_SIZE);
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <getDeviceHealth+0x58>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	6978      	ldr	r0, [r7, #20]
 8000fca:	4798      	blx	r3
        if (device_health->status == 0)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <getDeviceHealth+0x48>
        {
            return RESULT_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e002      	b.n	8000fde <getDeviceHealth+0x4e>
        }
        else
        {
            return RESULT_FAIL;
 8000fd8:	23ff      	movs	r3, #255	; 0xff
 8000fda:	e000      	b.n	8000fde <getDeviceHealth+0x4e>
        }
    }
    else
    {
        return RESULT_FAIL;
 8000fdc:	23ff      	movs	r3, #255	; 0xff
    }
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001f0 	.word	0x200001f0

08000fec <stopScan>:

void stopScan()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    sendCommand(YDLIDER_CMD_STOP);
 8000ff0:	2065      	movs	r0, #101	; 0x65
 8000ff2:	f000 f81d 	bl	8001030 <sendCommand>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <startScan>:

result_t startScan()
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
    stopScan();
 8001000:	f7ff fff4 	bl	8000fec <stopScan>
    HAL_Delay(1000);
 8001004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001008:	f001 f82e 	bl	8002068 <HAL_Delay>
    sendCommand(YDLIDER_CMD_SCAN);
 800100c:	2060      	movs	r0, #96	; 0x60
 800100e:	f000 f80f 	bl	8001030 <sendCommand>
    ydlidar_response_header_t response_header;
    receiveResponseHeader(&response_header);
 8001012:	463b      	mov	r3, r7
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f821 	bl	800105c <receiveResponseHeader>
    if (response_header.type_mode == YDLIDAR_RESPONSE_MEASUREMENT_TYPE_MODE)
 800101a:	79bb      	ldrb	r3, [r7, #6]
 800101c:	2b81      	cmp	r3, #129	; 0x81
 800101e:	d101      	bne.n	8001024 <startScan+0x2a>
    {
        return RESULT_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	e000      	b.n	8001026 <startScan+0x2c>
    }
    else
    {
        return RESULT_FAIL;
 8001024:	23ff      	movs	r3, #255	; 0xff
    }
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <sendCommand>:

void sendCommand(uint8_t cmd)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
    ydlidar_cmd_packet_t cmd_packet;
    cmd_packet.syncByte = YDLIDER_CMD_SYNC_BYTE;
 800103a:	23a5      	movs	r3, #165	; 0xa5
 800103c:	733b      	strb	r3, [r7, #12]
    cmd_packet.cmd_flag = cmd;
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	737b      	strb	r3, [r7, #13]
    ydlidar.func.send_command((uint8_t *)&cmd_packet, sizeof(cmd_packet));
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <sendCommand+0x28>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	2102      	movs	r1, #2
 800104c:	4610      	mov	r0, r2
 800104e:	4798      	blx	r3
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200001f0 	.word	0x200001f0

0800105c <receiveResponseHeader>:

result_t receiveResponseHeader(ydlidar_response_header_t *response_header)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
    uint8_t *header = (uint8_t *)response_header;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	60fb      	str	r3, [r7, #12]
    ydlidar.func.receive_response(header, YDLIDAR_RESPONSE_HEADER_SIZE);
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <receiveResponseHeader+0x20>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2107      	movs	r1, #7
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	4798      	blx	r3
    printf("[DEBUG] Response mode: %d\n", response_header->response_mode);
    printf("[DEBUG] Response type mode: %x\n", response_header->type_mode);
    printf("[DEBUG] Response type mode: %d\n", response_header->type_mode);

#endif
    return RESULT_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200001f0 	.word	0x200001f0

08001080 <startReceiveScanData>:
uint8_t scanPoints[10][MAX_SAMPLE_DATA_SIZE];
uint8_t SCAN_CIRCLE_INDEX = 0;
void startReceiveScanData(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    ydlidar.func.receive_data_dma(scanPoints[SCAN_CIRCLE_INDEX], sizeof(scanPoints[SCAN_CIRCLE_INDEX]));
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <startReceiveScanData+0x28>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <startReceiveScanData+0x2c>)
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	4611      	mov	r1, r2
 800108e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001092:	fb01 f202 	mul.w	r2, r1, r2
 8001096:	4906      	ldr	r1, [pc, #24]	; (80010b0 <startReceiveScanData+0x30>)
 8001098:	440a      	add	r2, r1
 800109a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800109e:	4610      	mov	r0, r2
 80010a0:	4798      	blx	r3
    // check the start flag
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200001f0 	.word	0x200001f0
 80010ac:	20001990 	.word	0x20001990
 80010b0:	20000220 	.word	0x20000220

080010b4 <parseDistance>:

// distance parse
void parseDistance(uint16_t *rawDistance, int LSN, double *realDistance)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < LSN; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e017      	b.n	80010f6 <parseDistance+0x42>
    {
        realDistance[i] = (double)rawDistance[i] / 4.0f;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa3f 	bl	8000554 <__aeabi_ui2d>
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	18d4      	adds	r4, r2, r3
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <parseDistance+0x54>)
 80010e4:	f7ff fbda 	bl	800089c <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < LSN; i++)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dbe3      	blt.n	80010c6 <parseDistance+0x12>
    }
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	40100000 	.word	0x40100000

0800110c <AngleFirstLevelParse>:

// angle first level parse
void AngleFirstLevelParse(uint16_t FSA, uint16_t LSA, int LSN, double *angles)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b08f      	sub	sp, #60	; 0x3c
 8001110:	af00      	add	r7, sp, #0
 8001112:	60ba      	str	r2, [r7, #8]
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4603      	mov	r3, r0
 8001118:	81fb      	strh	r3, [r7, #14]
 800111a:	460b      	mov	r3, r1
 800111c:	81bb      	strh	r3, [r7, #12]
    // calculate start angle and end angle
    double startAngle = (double)(FSA >> 1) / 64.0;
 800111e:	89fb      	ldrh	r3, [r7, #14]
 8001120:	085b      	lsrs	r3, r3, #1
 8001122:	b29b      	uxth	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa25 	bl	8000574 <__aeabi_i2d>
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <AngleFirstLevelParse+0xcc>)
 8001130:	f7ff fbb4 	bl	800089c <__aeabi_ddiv>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double endAngle = (double)(LSA >> 1) / 64.0;
 800113c:	89bb      	ldrh	r3, [r7, #12]
 800113e:	085b      	lsrs	r3, r3, #1
 8001140:	b29b      	uxth	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa16 	bl	8000574 <__aeabi_i2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <AngleFirstLevelParse+0xcc>)
 800114e:	f7ff fba5 	bl	800089c <__aeabi_ddiv>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // calculate angle range
    double angleRange = endAngle - startAngle;
 800115a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800115e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001162:	f7ff f8b9 	bl	80002d8 <__aeabi_dsub>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // calculate angle resolution
    double angleResolution = angleRange / (double)(LSN - 1);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3b01      	subs	r3, #1
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9fe 	bl	8000574 <__aeabi_i2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001180:	f7ff fb8c 	bl	800089c <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < LSN; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
 8001190:	e019      	b.n	80011c6 <AngleFirstLevelParse+0xba>
    {
        angles[i] = startAngle + angleResolution * i;
 8001192:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001194:	f7ff f9ee 	bl	8000574 <__aeabi_i2d>
 8001198:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800119c:	f7ff fa54 	bl	8000648 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	18d4      	adds	r4, r2, r3
 80011b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011b4:	f7ff f892 	bl	80002dc <__adddf3>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < LSN; i++)
 80011c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c2:	3301      	adds	r3, #1
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
 80011c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dbe1      	blt.n	8001192 <AngleFirstLevelParse+0x86>
    }
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	373c      	adds	r7, #60	; 0x3c
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	40500000 	.word	0x40500000
 80011dc:	00000000 	.word	0x00000000

080011e0 <AngleSecondLevelParse>:

// angle second level parse
void AngleSecondLevelParse(double *angles, int LSN, double *distances)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
    // IF Distance𝑖 == 0 AngCorrect𝑖 = 0
    // ELSE AngCorrect𝑖 = tand−1(21.8 ∗ 155.3−Distance𝑖 155.3∗Distance𝑖) for (int i = 1; i < LSN; i++)
    double AngCorrect = 0.0;
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < LSN; i++)
 80011f8:	2301      	movs	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e05f      	b.n	80012be <AngleSecondLevelParse+0xde>
    {
        if (distances[i] != 0)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	f7ff fc81 	bl	8000b18 <__aeabi_dcmpeq>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d135      	bne.n	8001288 <AngleSecondLevelParse+0xa8>
        {
            AngCorrect = atan(21.8 * (155.3 - distances[i]) / (155.3 * distances[i]));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	a129      	add	r1, pc, #164	; (adr r1, 80012d0 <AngleSecondLevelParse+0xf0>)
 800122a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800122e:	f7ff f853 	bl	80002d8 <__aeabi_dsub>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	a327      	add	r3, pc, #156	; (adr r3, 80012d8 <AngleSecondLevelParse+0xf8>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff fa02 	bl	8000648 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4614      	mov	r4, r2
 800124a:	461d      	mov	r5, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001258:	a31d      	add	r3, pc, #116	; (adr r3, 80012d0 <AngleSecondLevelParse+0xf0>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff f9f3 	bl	8000648 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4620      	mov	r0, r4
 8001268:	4629      	mov	r1, r5
 800126a:	f7ff fb17 	bl	800089c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	ec43 2b17 	vmov	d7, r2, r3
 8001276:	eeb0 0a47 	vmov.f32	s0, s14
 800127a:	eef0 0a67 	vmov.f32	s1, s15
 800127e:	f006 ffbf 	bl	8008200 <atan>
 8001282:	ed87 0b06 	vstr	d0, [r7, #24]
 8001286:	e005      	b.n	8001294 <AngleSecondLevelParse+0xb4>
        }
        else
        {
            AngCorrect = 0.0;
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }
        angles[i] += AngCorrect;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	18d4      	adds	r4, r2, r3
 80012a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ac:	f7ff f816 	bl	80002dc <__adddf3>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 1; i < LSN; i++)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	db9b      	blt.n	80011fe <AngleSecondLevelParse+0x1e>
    }
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdb0      	pop	{r4, r5, r7, pc}
 80012d0:	9999999a 	.word	0x9999999a
 80012d4:	40636999 	.word	0x40636999
 80012d8:	cccccccd 	.word	0xcccccccd
 80012dc:	4035cccc 	.word	0x4035cccc

080012e0 <dataProcess>:
int8_t processScanDataIndex = 0;
void dataProcess(void)
{
 80012e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012e4:	b09b      	sub	sp, #108	; 0x6c
 80012e6:	af04      	add	r7, sp, #16
    if (processScanDataIndex >= 10)
 80012e8:	4baa      	ldr	r3, [pc, #680]	; (8001594 <dataProcess+0x2b4>)
 80012ea:	f993 3000 	ldrsb.w	r3, [r3]
 80012ee:	2b09      	cmp	r3, #9
 80012f0:	dd02      	ble.n	80012f8 <dataProcess+0x18>
    {
        processScanDataIndex = 0;
 80012f2:	4aa8      	ldr	r2, [pc, #672]	; (8001594 <dataProcess+0x2b4>)
 80012f4:	2300      	movs	r3, #0
 80012f6:	7013      	strb	r3, [r2, #0]
    }
    if (processScanDataIndex == SCAN_CIRCLE_INDEX)
 80012f8:	4ba6      	ldr	r3, [pc, #664]	; (8001594 <dataProcess+0x2b4>)
 80012fa:	f993 3000 	ldrsb.w	r3, [r3]
 80012fe:	461a      	mov	r2, r3
 8001300:	4ba5      	ldr	r3, [pc, #660]	; (8001598 <dataProcess+0x2b8>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	f000 8165 	beq.w	80015d4 <dataProcess+0x2f4>
    {
        return;
    }
    printf("[DEBUG] processScanDataIndex = %d\n", processScanDataIndex);
 800130a:	4ba2      	ldr	r3, [pc, #648]	; (8001594 <dataProcess+0x2b4>)
 800130c:	f993 3000 	ldrsb.w	r3, [r3]
 8001310:	4619      	mov	r1, r3
 8001312:	48a2      	ldr	r0, [pc, #648]	; (800159c <dataProcess+0x2bc>)
 8001314:	f004 ff34 	bl	8006180 <iprintf>
    uint8_t *data = (uint8_t *)&scanPoints[processScanDataIndex];
 8001318:	4b9e      	ldr	r3, [pc, #632]	; (8001594 <dataProcess+0x2b4>)
 800131a:	f993 3000 	ldrsb.w	r3, [r3]
 800131e:	461a      	mov	r2, r3
 8001320:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	4a9d      	ldr	r2, [pc, #628]	; (80015a0 <dataProcess+0x2c0>)
 800132a:	4413      	add	r3, r2
 800132c:	64bb      	str	r3, [r7, #72]	; 0x48
    uint16_t checkSumrResult = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    for (int i = 0; i < MAX_SAMPLE_DATA_SIZE; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	657b      	str	r3, [r7, #84]	; 0x54
 8001338:	e13d      	b.n	80015b6 <dataProcess+0x2d6>
    {
        if (data[i] == 0xAA && data[i + 1] == 0x55)
 800133a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2baa      	cmp	r3, #170	; 0xaa
 8001344:	f040 8134 	bne.w	80015b0 <dataProcess+0x2d0>
 8001348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134a:	3301      	adds	r3, #1
 800134c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b55      	cmp	r3, #85	; 0x55
 8001354:	f040 812c 	bne.w	80015b0 <dataProcess+0x2d0>
        {
 8001358:	466b      	mov	r3, sp
 800135a:	461e      	mov	r6, r3

            ydlidar_data_packet_t *data_packet = (ydlidar_data_packet_t *)&data[i];
 800135c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800135e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001360:	4413      	add	r3, r2
 8001362:	643b      	str	r3, [r7, #64]	; 0x40
            if (data_packet->size_LSN == 1)
 8001364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001366:	78db      	ldrb	r3, [r3, #3]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <dataProcess+0x90>
            {
                continue; // skip the start data packet
 800136c:	46b5      	mov	sp, r6
 800136e:	e11f      	b.n	80015b0 <dataProcess+0x2d0>
            }
            checkSumrResult = calculateChecksum((uint16_t *)&data[i], 4);
 8001370:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001374:	4413      	add	r3, r2
 8001376:	2104      	movs	r1, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fdbb 	bl	8000ef4 <calculateChecksum>
 800137e:	4603      	mov	r3, r0
 8001380:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            uint16_t sampleDatas_SI[data_packet->size_LSN];
 8001384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001386:	78d9      	ldrb	r1, [r3, #3]
 8001388:	460b      	mov	r3, r1
 800138a:	3b01      	subs	r3, #1
 800138c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800138e:	b2cb      	uxtb	r3, r1
 8001390:	2200      	movs	r2, #0
 8001392:	461c      	mov	r4, r3
 8001394:	4615      	mov	r5, r2
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	012b      	lsls	r3, r5, #4
 80013a0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013a4:	0122      	lsls	r2, r4, #4
 80013a6:	b2cb      	uxtb	r3, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	4698      	mov	r8, r3
 80013ac:	4691      	mov	r9, r2
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80013ba:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80013be:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80013c2:	460b      	mov	r3, r1
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	3307      	adds	r3, #7
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	ebad 0d03 	sub.w	sp, sp, r3
 80013d0:	ab04      	add	r3, sp, #16
 80013d2:	3301      	adds	r3, #1
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
            uint16_t *sampledata = (uint16_t *)&data[i + sizeof(ydlidar_data_packet_t)];
 80013da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013dc:	f103 020a 	add.w	r2, r3, #10
 80013e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013e2:	4413      	add	r3, r2
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34

            for (int j = 0; j < data_packet->size_LSN; j++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	653b      	str	r3, [r7, #80]	; 0x50
 80013ea:	e00b      	b.n	8001404 <dataProcess+0x124>
            {
                sampleDatas_SI[j] = sampledata[j];
 80013ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ee:	005a      	lsls	r2, r3, #1
 80013f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f2:	4413      	add	r3, r2
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80013f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80013fa:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
            for (int j = 0; j < data_packet->size_LSN; j++)
 80013fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001400:	3301      	adds	r3, #1
 8001402:	653b      	str	r3, [r7, #80]	; 0x50
 8001404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001406:	78db      	ldrb	r3, [r3, #3]
 8001408:	461a      	mov	r2, r3
 800140a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800140c:	4293      	cmp	r3, r2
 800140e:	dbed      	blt.n	80013ec <dataProcess+0x10c>
            }
            checkSumrResult += calculateChecksum(sampledata, data_packet->size_LSN);
 8001410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001412:	78db      	ldrb	r3, [r3, #3]
 8001414:	4619      	mov	r1, r3
 8001416:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001418:	f7ff fd6c 	bl	8000ef4 <calculateChecksum>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001424:	4413      	add	r3, r2
 8001426:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            if (checkSumrResult == data_packet->crc_CS)
 800142a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800142c:	891b      	ldrh	r3, [r3, #8]
 800142e:	b29a      	uxth	r2, r3
 8001430:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001434:	4293      	cmp	r3, r2
 8001436:	f040 80b7 	bne.w	80015a8 <dataProcess+0x2c8>
            {
 800143a:	466b      	mov	r3, sp
 800143c:	607b      	str	r3, [r7, #4]
                double distances[data_packet->size_LSN];
 800143e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001440:	78d9      	ldrb	r1, [r3, #3]
 8001442:	460b      	mov	r3, r1
 8001444:	3b01      	subs	r3, #1
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
 8001448:	b2cb      	uxtb	r3, r1
 800144a:	2200      	movs	r2, #0
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	61fa      	str	r2, [r7, #28]
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	69f8      	ldr	r0, [r7, #28]
 800145a:	0183      	lsls	r3, r0, #6
 800145c:	69b8      	ldr	r0, [r7, #24]
 800145e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001462:	69b8      	ldr	r0, [r7, #24]
 8001464:	0182      	lsls	r2, r0, #6
 8001466:	b2cb      	uxtb	r3, r1
 8001468:	2200      	movs	r2, #0
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	617a      	str	r2, [r7, #20]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	0183      	lsls	r3, r0, #6
 800147a:	6938      	ldr	r0, [r7, #16]
 800147c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001480:	6938      	ldr	r0, [r7, #16]
 8001482:	0182      	lsls	r2, r0, #6
 8001484:	460b      	mov	r3, r1
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	3307      	adds	r3, #7
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	ebad 0d03 	sub.w	sp, sp, r3
 8001492:	ab04      	add	r3, sp, #16
 8001494:	3307      	adds	r3, #7
 8001496:	08db      	lsrs	r3, r3, #3
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
                double angles[data_packet->size_LSN];
 800149c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800149e:	78d9      	ldrb	r1, [r3, #3]
 80014a0:	460b      	mov	r3, r1
 80014a2:	3b01      	subs	r3, #1
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014a6:	b2cb      	uxtb	r3, r1
 80014a8:	2200      	movs	r2, #0
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	60fa      	str	r2, [r7, #12]
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	0183      	lsls	r3, r0, #6
 80014ba:	68b8      	ldr	r0, [r7, #8]
 80014bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014c0:	68b8      	ldr	r0, [r7, #8]
 80014c2:	0182      	lsls	r2, r0, #6
 80014c4:	b2cb      	uxtb	r3, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	469a      	mov	sl, r3
 80014ca:	4693      	mov	fp, r2
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014e0:	460b      	mov	r3, r1
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	3307      	adds	r3, #7
 80014e6:	08db      	lsrs	r3, r3, #3
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	ebad 0d03 	sub.w	sp, sp, r3
 80014ee:	ab04      	add	r3, sp, #16
 80014f0:	3307      	adds	r3, #7
 80014f2:	08db      	lsrs	r3, r3, #3
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
                parseDistance(sampleDatas_SI, data_packet->size_LSN, distances);
 80014f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fa:	78db      	ldrb	r3, [r3, #3]
 80014fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014fe:	4619      	mov	r1, r3
 8001500:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001502:	f7ff fdd7 	bl	80010b4 <parseDistance>
                AngleFirstLevelParse(data_packet->startAngle_FSA, data_packet->endAngle_LSA, data_packet->size_LSN, (double *)angles);
 8001506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001508:	889b      	ldrh	r3, [r3, #4]
 800150a:	b298      	uxth	r0, r3
 800150c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150e:	88db      	ldrh	r3, [r3, #6]
 8001510:	b299      	uxth	r1, r3
 8001512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001514:	78db      	ldrb	r3, [r3, #3]
 8001516:	461a      	mov	r2, r3
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	f7ff fdf7 	bl	800110c <AngleFirstLevelParse>
                AngleSecondLevelParse((double *)angles, data_packet->size_LSN, (double *)distances);
 800151e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001520:	78db      	ldrb	r3, [r3, #3]
 8001522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001524:	4619      	mov	r1, r3
 8001526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001528:	f7ff fe5a 	bl	80011e0 <AngleSecondLevelParse>
                for (int j = 0; j < data_packet->size_LSN; j++)
 800152c:	2300      	movs	r3, #0
 800152e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001530:	e027      	b.n	8001582 <dataProcess+0x2a2>
                {
                    if (distances[j] != 0)
 8001532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	f7ff fae7 	bl	8000b18 <__aeabi_dcmpeq>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d115      	bne.n	800157c <dataProcess+0x29c>
                    {
                        printf("[DEBUG] angles[%d] : %f => distances[%d] : %f\n", j, angles[j], j, distances[j]);
 8001550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800155e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800156c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001576:	480b      	ldr	r0, [pc, #44]	; (80015a4 <dataProcess+0x2c4>)
 8001578:	f004 fe02 	bl	8006180 <iprintf>
                for (int j = 0; j < data_packet->size_LSN; j++)
 800157c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800157e:	3301      	adds	r3, #1
 8001580:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001584:	78db      	ldrb	r3, [r3, #3]
 8001586:	461a      	mov	r2, r3
 8001588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800158a:	4293      	cmp	r3, r2
 800158c:	dbd1      	blt.n	8001532 <dataProcess+0x252>
 800158e:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8001592:	e00c      	b.n	80015ae <dataProcess+0x2ce>
 8001594:	20001991 	.word	0x20001991
 8001598:	20001990 	.word	0x20001990
 800159c:	08008570 	.word	0x08008570
 80015a0:	20000220 	.word	0x20000220
 80015a4:	08008594 	.word	0x08008594
                    }
                }
            }
            else
            {
                printf("[ERROR] Checksum error!\n");
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <dataProcess+0x300>)
 80015aa:	f004 fe57 	bl	800625c <puts>
 80015ae:	46b5      	mov	sp, r6
    for (int i = 0; i < MAX_SAMPLE_DATA_SIZE; i++)
 80015b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b2:	3301      	adds	r3, #1
 80015b4:	657b      	str	r3, [r7, #84]	; 0x54
 80015b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80015bc:	f6ff aebd 	blt.w	800133a <dataProcess+0x5a>
            printf("[DEBUG] data_packet->crc_CS = %x\n", data_packet->crc_CS);
            printf("[DEBUG] calculate checksum = %x\n", checkSumrResult);
#endif
        }
    }
    processScanDataIndex++;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <dataProcess+0x304>)
 80015c2:	f993 3000 	ldrsb.w	r3, [r3]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <dataProcess+0x304>)
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e000      	b.n	80015d6 <dataProcess+0x2f6>
        return;
 80015d4:	bf00      	nop
}
 80015d6:	375c      	adds	r7, #92	; 0x5c
 80015d8:	46bd      	mov	sp, r7
 80015da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015de:	bf00      	nop
 80015e0:	080085c4 	.word	0x080085c4
 80015e4:	20001991 	.word	0x20001991

080015e8 <restartScan>:
{
    sendCommand(YDLIDAR_CMD_RESET);
}

void restartScan(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
    stopScan();
 80015ee:	f7ff fcfd 	bl	8000fec <stopScan>
    HAL_Delay(1000);
 80015f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015f6:	f000 fd37 	bl	8002068 <HAL_Delay>
    ydlidar_device_info_t deviceinfo;
    if (getDeviceInfo(&deviceinfo) == RESULT_OK)
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fc98 	bl	8000f34 <getDeviceInfo>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d155      	bne.n	80016b6 <restartScan+0xce>
    {
        printf("[YDLIDAR INFO] Connection established in [%s]\n", deviceinfo.model == YDLIDAR_MODEL_X4 ? "X4" : "NOT MODEL X4");
 800160a:	7a3b      	ldrb	r3, [r7, #8]
 800160c:	2b06      	cmp	r3, #6
 800160e:	d101      	bne.n	8001614 <restartScan+0x2c>
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <restartScan+0xdc>)
 8001612:	e000      	b.n	8001616 <restartScan+0x2e>
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <restartScan+0xe0>)
 8001616:	4619      	mov	r1, r3
 8001618:	482c      	ldr	r0, [pc, #176]	; (80016cc <restartScan+0xe4>)
 800161a:	f004 fdb1 	bl	8006180 <iprintf>
        printf("[YDLIDAR INFO] Firmware version: %d.%d\n", deviceinfo.major_firmware_version, deviceinfo.minor_firmware_version);
 800161e:	7a7b      	ldrb	r3, [r7, #9]
 8001620:	4619      	mov	r1, r3
 8001622:	7abb      	ldrb	r3, [r7, #10]
 8001624:	461a      	mov	r2, r3
 8001626:	482a      	ldr	r0, [pc, #168]	; (80016d0 <restartScan+0xe8>)
 8001628:	f004 fdaa 	bl	8006180 <iprintf>
        printf("[YDLIDAR INFO] Hardware version: %d\n", deviceinfo.hardware_version);
 800162c:	7afb      	ldrb	r3, [r7, #11]
 800162e:	4619      	mov	r1, r3
 8001630:	4828      	ldr	r0, [pc, #160]	; (80016d4 <restartScan+0xec>)
 8001632:	f004 fda5 	bl	8006180 <iprintf>
        printf("[YDLIDAR INFO] Serial number: ");
 8001636:	4828      	ldr	r0, [pc, #160]	; (80016d8 <restartScan+0xf0>)
 8001638:	f004 fda2 	bl	8006180 <iprintf>
        for (int i = 0; i < 16; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	e00b      	b.n	800165a <restartScan+0x72>
        {
            printf("%x", deviceinfo.serialnum[i]);
 8001642:	f107 020c 	add.w	r2, r7, #12
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	4823      	ldr	r0, [pc, #140]	; (80016dc <restartScan+0xf4>)
 8001650:	f004 fd96 	bl	8006180 <iprintf>
        for (int i = 0; i < 16; i++)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	3301      	adds	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	ddf0      	ble.n	8001642 <restartScan+0x5a>
        }
        printf("\n");
 8001660:	200a      	movs	r0, #10
 8001662:	f004 fd9f 	bl	80061a4 <putchar>
        ydlidar_device_health_t healthinfo;
        HAL_Delay(1000);
 8001666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800166a:	f000 fcfd 	bl	8002068 <HAL_Delay>
        if (getDeviceHealth(&healthinfo) == RESULT_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fc8d 	bl	8000f90 <getDeviceHealth>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d118      	bne.n	80016ae <restartScan+0xc6>
        {
            printf("[YDLIDAR INFO] YDLIDAR running correctly! The health status: %s\n", healthinfo.status == 0 ? "well" : "bad");
 800167c:	793b      	ldrb	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <restartScan+0x9e>
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <restartScan+0xf8>)
 8001684:	e000      	b.n	8001688 <restartScan+0xa0>
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <restartScan+0xfc>)
 8001688:	4619      	mov	r1, r3
 800168a:	4817      	ldr	r0, [pc, #92]	; (80016e8 <restartScan+0x100>)
 800168c:	f004 fd78 	bl	8006180 <iprintf>
            if (startScan() == RESULT_OK)
 8001690:	f7ff fcb3 	bl	8000ffa <startScan>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <restartScan+0xbe>
            {
                startReceiveScanData();
 800169a:	f7ff fcf1 	bl	8001080 <startReceiveScanData>
                printf("\nNow YDLIDAR is scanning ...... \n");
 800169e:	4813      	ldr	r0, [pc, #76]	; (80016ec <restartScan+0x104>)
 80016a0:	f004 fddc 	bl	800625c <puts>
    }
    else
    {
        printf("YDLIDAR get DeviceInfo Error!!!'\n");
    }
}
 80016a4:	e00a      	b.n	80016bc <restartScan+0xd4>
                printf("start YDLIDAR is failed!  Continue........ \n");
 80016a6:	4812      	ldr	r0, [pc, #72]	; (80016f0 <restartScan+0x108>)
 80016a8:	f004 fdd8 	bl	800625c <puts>
}
 80016ac:	e006      	b.n	80016bc <restartScan+0xd4>
            printf("cannot retrieve YDLIDAR health\n ");
 80016ae:	4811      	ldr	r0, [pc, #68]	; (80016f4 <restartScan+0x10c>)
 80016b0:	f004 fd66 	bl	8006180 <iprintf>
}
 80016b4:	e002      	b.n	80016bc <restartScan+0xd4>
        printf("YDLIDAR get DeviceInfo Error!!!'\n");
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <restartScan+0x110>)
 80016b8:	f004 fdd0 	bl	800625c <puts>
}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	080085dc 	.word	0x080085dc
 80016c8:	080085e0 	.word	0x080085e0
 80016cc:	080085f0 	.word	0x080085f0
 80016d0:	08008620 	.word	0x08008620
 80016d4:	08008648 	.word	0x08008648
 80016d8:	08008670 	.word	0x08008670
 80016dc:	08008690 	.word	0x08008690
 80016e0:	08008694 	.word	0x08008694
 80016e4:	0800869c 	.word	0x0800869c
 80016e8:	080086a0 	.word	0x080086a0
 80016ec:	080086e4 	.word	0x080086e4
 80016f0:	08008708 	.word	0x08008708
 80016f4:	08008734 	.word	0x08008734
 80016f8:	08008758 	.word	0x08008758

080016fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_DMA_Init+0x50>)
 8001704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <MX_DMA_Init+0x50>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6493      	str	r3, [r2, #72]	; 0x48
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_DMA_Init+0x50>)
 8001710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_DMA_Init+0x50>)
 800171c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <MX_DMA_Init+0x50>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6493      	str	r3, [r2, #72]	; 0x48
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_DMA_Init+0x50>)
 8001728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	200b      	movs	r0, #11
 8001738:	f000 fd93 	bl	8002262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800173c:	200b      	movs	r0, #11
 800173e:	f000 fdaa 	bl	8002296 <HAL_NVIC_EnableIRQ>

}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000

08001750 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <MX_GPIO_Init+0xc4>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a2a      	ldr	r2, [pc, #168]	; (8001814 <MX_GPIO_Init+0xc4>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <MX_GPIO_Init+0xc4>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <MX_GPIO_Init+0xc4>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a24      	ldr	r2, [pc, #144]	; (8001814 <MX_GPIO_Init+0xc4>)
 8001784:	f043 0320 	orr.w	r3, r3, #32
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <MX_GPIO_Init+0xc4>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <MX_GPIO_Init+0xc4>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <MX_GPIO_Init+0xc4>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <MX_GPIO_Init+0xc4>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_GPIO_Init+0xc4>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a18      	ldr	r2, [pc, #96]	; (8001814 <MX_GPIO_Init+0xc4>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_GPIO_Init+0xc4>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2120      	movs	r1, #32
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ce:	f001 fa31 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	480b      	ldr	r0, [pc, #44]	; (8001818 <MX_GPIO_Init+0xc8>)
 80017ea:	f001 f8a1 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ee:	2320      	movs	r3, #32
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f001 f892 	bl	8002930 <HAL_GPIO_Init>

}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021000 	.word	0x40021000
 8001818:	48000800 	.word	0x48000800

0800181c <uartSendCommand>:
#include "usart.h"
#include "Ydlidar.h"
extern uint8_t SCAN_CIRCLE_INDEX;
extern uint8_t processScanDataIndex;
int8_t uartSendCommand(uint8_t *cmd, uint32_t size)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(&huart1, cmd, size, 1000);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b29a      	uxth	r2, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <uartSendCommand+0x24>)
 8001832:	f002 fa59 	bl	8003ce8 <HAL_UART_Transmit>
    return 0;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20001a28 	.word	0x20001a28

08001844 <uartReceiveResponse>:

int8_t uartReceiveResponse(uint8_t *data, uint32_t size)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive(&huart1, data, size, 1000);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b29a      	uxth	r2, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4803      	ldr	r0, [pc, #12]	; (8001868 <uartReceiveResponse+0x24>)
 800185a:	f002 fadb 	bl	8003e14 <HAL_UART_Receive>
    return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20001a28 	.word	0x20001a28

0800186c <uartReceiveDataDMA>:
int8_t uartReceiveDataDMA(uint8_t *data, uint32_t size)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive_DMA(&huart1, data, size);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <uartReceiveDataDMA+0x24>)
 8001880:	f002 fb9c 	bl	8003fbc <HAL_UART_Receive_DMA>
    return 0;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20001a28 	.word	0x20001a28

08001894 <HAL_UART_RxCpltCallback>:

// uart callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_UART_RxCpltCallback+0x38>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d10e      	bne.n	80018c4 <HAL_UART_RxCpltCallback+0x30>
    {
        SCAN_CIRCLE_INDEX++;
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_UART_RxCpltCallback+0x3c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_UART_RxCpltCallback+0x3c>)
 80018b0:	701a      	strb	r2, [r3, #0]
        if (SCAN_CIRCLE_INDEX >= 10)
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_UART_RxCpltCallback+0x3c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b09      	cmp	r3, #9
 80018b8:	d902      	bls.n	80018c0 <HAL_UART_RxCpltCallback+0x2c>
        {
            SCAN_CIRCLE_INDEX = 0;
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_UART_RxCpltCallback+0x3c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
        }

        startReceiveScanData();
 80018c0:	f7ff fbde 	bl	8001080 <startReceiveScanData>
    }
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40013800 	.word	0x40013800
 80018d0:	20001990 	.word	0x20001990

080018d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80018d8:	f000 fb55 	bl	8001f86 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80018dc:	f000 f82c 	bl	8001938 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80018e0:	f7ff ff36 	bl	8001750 <MX_GPIO_Init>
    MX_DMA_Init();
 80018e4:	f7ff ff0a 	bl	80016fc <MX_DMA_Init>
    MX_LPUART1_UART_Init();
 80018e8:	f000 f9c2 	bl	8001c70 <MX_LPUART1_UART_Init>
    MX_USART1_UART_Init();
 80018ec:	f000 fa0a 	bl	8001d04 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    ydlidar.func.send_command = uartSendCommand;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <main+0x50>)
 80018f2:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <main+0x54>)
 80018f4:	601a      	str	r2, [r3, #0]
    ydlidar.func.receive_response = uartReceiveResponse;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <main+0x50>)
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <main+0x58>)
 80018fa:	605a      	str	r2, [r3, #4]
    ydlidar.func.receive_data_dma = uartReceiveDataDMA;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <main+0x50>)
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <main+0x5c>)
 8001900:	609a      	str	r2, [r3, #8]
    printf(">>>>>>>>>>>>>>>>>>>YDLIDAR X4 Driver<<<<<<<<<<<<<<<<<<<<<\n");
 8001902:	480c      	ldr	r0, [pc, #48]	; (8001934 <main+0x60>)
 8001904:	f004 fcaa 	bl	800625c <puts>
    restartScan();
 8001908:	f7ff fe6e 	bl	80015e8 <restartScan>
    {

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        dataProcess();
 800190c:	f7ff fce8 	bl	80012e0 <dataProcess>

        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001910:	2120      	movs	r1, #32
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f001 f9a5 	bl	8002c64 <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 800191a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800191e:	f000 fba3 	bl	8002068 <HAL_Delay>
        dataProcess();
 8001922:	e7f3      	b.n	800190c <main+0x38>
 8001924:	200001f0 	.word	0x200001f0
 8001928:	0800181d 	.word	0x0800181d
 800192c:	08001845 	.word	0x08001845
 8001930:	0800186d 	.word	0x0800186d
 8001934:	0800877c 	.word	0x0800877c

08001938 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b094      	sub	sp, #80	; 0x50
 800193c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0318 	add.w	r3, r7, #24
 8001942:	2238      	movs	r2, #56	; 0x38
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f004 fd68 	bl	800641c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800195a:	2000      	movs	r0, #0
 800195c:	f001 f99c 	bl	8002c98 <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001960:	2302      	movs	r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196a:	2340      	movs	r3, #64	; 0x40
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800196e:	2302      	movs	r3, #2
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001972:	2302      	movs	r3, #2
 8001974:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001976:	2304      	movs	r3, #4
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 85;
 800197a:	2355      	movs	r3, #85	; 0x55
 800197c:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800197e:	2302      	movs	r3, #2
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001982:	2302      	movs	r3, #2
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001986:	2302      	movs	r3, #2
 8001988:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198a:	f107 0318 	add.w	r3, r7, #24
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fa36 	bl	8002e00 <HAL_RCC_OscConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x66>
    {
        Error_Handler();
 800199a:	f000 f818 	bl	80019ce <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800199e:	230f      	movs	r3, #15
 80019a0:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a2:	2303      	movs	r3, #3
 80019a4:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2104      	movs	r1, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fd3a 	bl	8003430 <HAL_RCC_ClockConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x8e>
    {
        Error_Handler();
 80019c2:	f000 f804 	bl	80019ce <Error_Handler>
    }
}
 80019c6:	bf00      	nop
 80019c8:	3750      	adds	r7, #80	; 0x50
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d2:	b672      	cpsid	i
}
 80019d4:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80019d6:	e7fe      	b.n	80019d6 <Error_Handler+0x8>

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_MspInit+0x44>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_MspInit+0x44>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_MspInit+0x44>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_MspInit+0x44>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6593      	str	r3, [r2, #88]	; 0x58
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_MspInit+0x44>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a0e:	f001 f9e7 	bl	8002de0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART2 and Loop until the end of transmission */
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001a28:	1d39      	adds	r1, r7, #4
 8001a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4803      	ldr	r0, [pc, #12]	; (8001a40 <__io_putchar+0x20>)
 8001a32:	f002 f959 	bl	8003ce8 <HAL_UART_Transmit>

    return ch;
 8001a36:	687b      	ldr	r3, [r7, #4]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20001998 	.word	0x20001998

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <NMI_Handler+0x4>

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <MemManage_Handler+0x4>

08001a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a90:	f000 facc 	bl	800202c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <DMA1_Channel1_IRQHandler+0x10>)
 8001a9e:	f000 fdf8 	bl	8002692 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20001ab8 	.word	0x20001ab8

08001aac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <USART1_IRQHandler+0x10>)
 8001ab2:	f002 fad9 	bl	8004068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20001a28 	.word	0x20001a28

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ada:	f004 fcf1 	bl	80064c0 <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b02:	e7fe      	b.n	8001b02 <_exit+0x12>

08001b04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e00a      	b.n	8001b2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b16:	f3af 8000 	nop.w
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	60ba      	str	r2, [r7, #8]
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbf0      	blt.n	8001b16 <_read+0x12>
  }

  return len;
 8001b34:	687b      	ldr	r3, [r7, #4]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e009      	b.n	8001b64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	60ba      	str	r2, [r7, #8]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff61 	bl	8001a20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dbf1      	blt.n	8001b50 <_write+0x12>
  }
  return len;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_close>:

int _close(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_isatty>:

int _isatty(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f004 fc56 	bl	80064c0 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20008000 	.word	0x20008000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	20001994 	.word	0x20001994
 8001c48:	20001c68 	.word	0x20001c68

08001c4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c74:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001c76:	4a22      	ldr	r2, [pc, #136]	; (8001d00 <MX_LPUART1_UART_Init+0x90>)
 8001c78:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001cb2:	4812      	ldr	r0, [pc, #72]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001cb4:	f001 ffc8 	bl	8003c48 <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cbe:	f7ff fe86 	bl	80019ce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001cc6:	f003 fc69 	bl	800559c <HAL_UARTEx_SetTxFifoThreshold>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001cd0:	f7ff fe7d 	bl	80019ce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4809      	ldr	r0, [pc, #36]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001cd8:	f003 fc9e 	bl	8005618 <HAL_UARTEx_SetRxFifoThreshold>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001ce2:	f7ff fe74 	bl	80019ce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001ce8:	f003 fc1f 	bl	800552a <HAL_UARTEx_DisableFifoMode>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001cf2:	f7ff fe6c 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20001998 	.word	0x20001998
 8001d00:	40008000 	.word	0x40008000

08001d04 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d0a:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <MX_USART1_UART_Init+0x94>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 128000;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d10:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8001d14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d4c:	4811      	ldr	r0, [pc, #68]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d4e:	f001 ff7b 	bl	8003c48 <HAL_UART_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d58:	f7ff fe39 	bl	80019ce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	480d      	ldr	r0, [pc, #52]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d60:	f003 fc1c 	bl	800559c <HAL_UARTEx_SetTxFifoThreshold>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d6a:	f7ff fe30 	bl	80019ce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4808      	ldr	r0, [pc, #32]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d72:	f003 fc51 	bl	8005618 <HAL_UARTEx_SetRxFifoThreshold>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d7c:	f7ff fe27 	bl	80019ce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d80:	4804      	ldr	r0, [pc, #16]	; (8001d94 <MX_USART1_UART_Init+0x90>)
 8001d82:	f003 fbd2 	bl	800552a <HAL_UARTEx_DisableFifoMode>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d8c:	f7ff fe1f 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20001a28 	.word	0x20001a28
 8001d98:	40013800 	.word	0x40013800

08001d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b09c      	sub	sp, #112	; 0x70
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db4:	f107 0318 	add.w	r3, r7, #24
 8001db8:	2244      	movs	r2, #68	; 0x44
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f004 fb2d 	bl	800641c <memset>
  if(uartHandle->Instance==LPUART1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a55      	ldr	r2, [pc, #340]	; (8001f1c <HAL_UART_MspInit+0x180>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d137      	bne.n	8001e3c <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001dcc:	2320      	movs	r3, #32
 8001dce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fd45 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001de4:	f7ff fdf3 	bl	80019ce <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001de8:	4b4d      	ldr	r3, [pc, #308]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	4a4c      	ldr	r2, [pc, #304]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001df4:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e04:	4a46      	ldr	r2, [pc, #280]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0c:	4b44      	ldr	r3, [pc, #272]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001e18:	230c      	movs	r3, #12
 8001e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e28:	230c      	movs	r3, #12
 8001e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e36:	f000 fd7b 	bl	8002930 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e3a:	e06b      	b.n	8001f14 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a38      	ldr	r2, [pc, #224]	; (8001f24 <HAL_UART_MspInit+0x188>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d166      	bne.n	8001f14 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4e:	f107 0318 	add.w	r3, r7, #24
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 fd08 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001e5e:	f7ff fdb6 	bl	80019ce <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_UART_MspInit+0x184>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e92:	2330      	movs	r3, #48	; 0x30
 8001e94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eaa:	4619      	mov	r1, r3
 8001eac:	481e      	ldr	r0, [pc, #120]	; (8001f28 <HAL_UART_MspInit+0x18c>)
 8001eae:	f000 fd3f 	bl	8002930 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_UART_MspInit+0x194>)
 8001eb6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001eba:	2218      	movs	r2, #24
 8001ebc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001ecc:	2280      	movs	r2, #128	; 0x80
 8001ece:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ee8:	4810      	ldr	r0, [pc, #64]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001eea:	f000 f9ef 	bl	80022cc <HAL_DMA_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8001ef4:	f7ff fd6b 	bl	80019ce <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001efc:	67da      	str	r2, [r3, #124]	; 0x7c
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_UART_MspInit+0x190>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	2025      	movs	r0, #37	; 0x25
 8001f0a:	f000 f9aa 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f0e:	2025      	movs	r0, #37	; 0x25
 8001f10:	f000 f9c1 	bl	8002296 <HAL_NVIC_EnableIRQ>
}
 8001f14:	bf00      	nop
 8001f16:	3770      	adds	r7, #112	; 0x70
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40008000 	.word	0x40008000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40013800 	.word	0x40013800
 8001f28:	48000800 	.word	0x48000800
 8001f2c:	20001ab8 	.word	0x20001ab8
 8001f30:	40020008 	.word	0x40020008

08001f34 <Reset_Handler>:
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <LoopForever+0x2>)
 8001f36:	4685      	mov	sp, r0
 8001f38:	480d      	ldr	r0, [pc, #52]	; (8001f70 <LoopForever+0x6>)
 8001f3a:	490e      	ldr	r1, [pc, #56]	; (8001f74 <LoopForever+0xa>)
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <LoopForever+0xe>)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:
 8001f42:	58d4      	ldr	r4, [r2, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:
 8001f48:	18c4      	adds	r4, r0, r3
 8001f4a:	428c      	cmp	r4, r1
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
 8001f4e:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <LoopForever+0x12>)
 8001f50:	4c0b      	ldr	r4, [pc, #44]	; (8001f80 <LoopForever+0x16>)
 8001f52:	2300      	movs	r3, #0
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:
 8001f5a:	42a2      	cmp	r2, r4
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>
 8001f5e:	f7ff fe75 	bl	8001c4c <SystemInit>
 8001f62:	f004 fab3 	bl	80064cc <__libc_init_array>
 8001f66:	f7ff fcb5 	bl	80018d4 <main>

08001f6a <LoopForever>:
 8001f6a:	e7fe      	b.n	8001f6a <LoopForever>
 8001f6c:	20008000 	.word	0x20008000
 8001f70:	20000000 	.word	0x20000000
 8001f74:	200001d4 	.word	0x200001d4
 8001f78:	08008bc0 	.word	0x08008bc0
 8001f7c:	200001d4 	.word	0x200001d4
 8001f80:	20001c68 	.word	0x20001c68

08001f84 <ADC1_2_IRQHandler>:
 8001f84:	e7fe      	b.n	8001f84 <ADC1_2_IRQHandler>

08001f86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f000 f95b 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f80e 	bl	8001fb8 <HAL_InitTick>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	71fb      	strb	r3, [r7, #7]
 8001fa6:	e001      	b.n	8001fac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fa8:	f7ff fd16 	bl	80019d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fac:	79fb      	ldrb	r3, [r7, #7]

}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_InitTick+0x68>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d022      	beq.n	8002012 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_InitTick+0x6c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_InitTick+0x68>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f966 	bl	80022b2 <HAL_SYSTICK_Config>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10f      	bne.n	800200c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	d809      	bhi.n	8002006 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffa:	f000 f932 	bl	8002262 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_InitTick+0x70>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e007      	b.n	8002016 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	e004      	b.n	8002016 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e001      	b.n	8002016 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000008 	.word	0x20000008
 8002024:	20000000 	.word	0x20000000
 8002028:	20000004 	.word	0x20000004

0800202c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_IncTick+0x1c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_IncTick+0x20>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4413      	add	r3, r2
 800203a:	4a03      	ldr	r2, [pc, #12]	; (8002048 <HAL_IncTick+0x1c>)
 800203c:	6013      	str	r3, [r2, #0]
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	20001b18 	.word	0x20001b18
 800204c:	20000008 	.word	0x20000008

08002050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_GetTick+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20001b18 	.word	0x20001b18

08002068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff ffee 	bl	8002050 <HAL_GetTick>
 8002074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d004      	beq.n	800208c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_Delay+0x40>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800208c:	bf00      	nop
 800208e:	f7ff ffdf 	bl	8002050 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	429a      	cmp	r2, r3
 800209c:	d8f7      	bhi.n	800208e <HAL_Delay+0x26>
  {
  }
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000008 	.word	0x20000008

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db0b      	blt.n	800213a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <__NVIC_EnableIRQ+0x38>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f7ff ff8e 	bl	800214c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff29 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff40 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff90 	bl	80021a0 <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5f 	bl	800214c <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff33 	bl	8002110 <__NVIC_EnableIRQ>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ffa4 	bl	8002208 <SysTick_Config>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e08d      	b.n	80023fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_DMA_Init+0x138>)
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d80f      	bhi.n	800230a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b45      	ldr	r3, [pc, #276]	; (8002408 <HAL_DMA_Init+0x13c>)
 80022f2:	4413      	add	r3, r2
 80022f4:	4a45      	ldr	r2, [pc, #276]	; (800240c <HAL_DMA_Init+0x140>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	009a      	lsls	r2, r3, #2
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a42      	ldr	r2, [pc, #264]	; (8002410 <HAL_DMA_Init+0x144>)
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
 8002308:	e00e      	b.n	8002328 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_DMA_Init+0x148>)
 8002312:	4413      	add	r3, r2
 8002314:	4a3d      	ldr	r2, [pc, #244]	; (800240c <HAL_DMA_Init+0x140>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	009a      	lsls	r2, r3, #2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a3c      	ldr	r2, [pc, #240]	; (8002418 <HAL_DMA_Init+0x14c>)
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800234c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fa76 	bl	800286c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002388:	d102      	bne.n	8002390 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d010      	beq.n	80023d0 <HAL_DMA_Init+0x104>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d80c      	bhi.n	80023d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fa96 	bl	80028e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	e008      	b.n	80023e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40020407 	.word	0x40020407
 8002408:	bffdfff8 	.word	0xbffdfff8
 800240c:	cccccccd 	.word	0xcccccccd
 8002410:	40020000 	.word	0x40020000
 8002414:	bffdfbf8 	.word	0xbffdfbf8
 8002418:	40020400 	.word	0x40020400

0800241c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_DMA_Start_IT+0x20>
 8002438:	2302      	movs	r3, #2
 800243a:	e066      	b.n	800250a <HAL_DMA_Start_IT+0xee>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d155      	bne.n	80024fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f9bb 	bl	80027f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 020e 	orr.w	r2, r2, #14
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e00f      	b.n	80024b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0204 	bic.w	r2, r2, #4
 80024a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 020a 	orr.w	r2, r2, #10
 80024b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e005      	b.n	8002508 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002508:	7dfb      	ldrb	r3, [r7, #23]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002512:	b480      	push	{r7}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d005      	beq.n	8002536 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2204      	movs	r2, #4
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e037      	b.n	80025a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 020e 	bic.w	r2, r2, #14
 8002544:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002554:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f003 021f 	and.w	r2, r3, #31
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002582:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00c      	beq.n	80025a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800259a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d00d      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2204      	movs	r2, #4
 80025e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e047      	b.n	8002688 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 020e 	bic.w	r2, r2, #14
 8002606:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002622:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002644:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800265c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002666:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
    }
  }
  return status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	2204      	movs	r2, #4
 80026b4:	409a      	lsls	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d026      	beq.n	800270c <HAL_DMA_IRQHandler+0x7a>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d021      	beq.n	800270c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0204 	bic.w	r2, r2, #4
 80026e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f003 021f 	and.w	r2, r3, #31
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2104      	movs	r1, #4
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d071      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800270a:	e06c      	b.n	80027e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2202      	movs	r2, #2
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d02e      	beq.n	800277e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d029      	beq.n	800277e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 020a 	bic.w	r2, r2, #10
 8002746:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2102      	movs	r1, #2
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d038      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800277c:	e033      	b.n	80027e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	2208      	movs	r2, #8
 8002788:	409a      	lsls	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02a      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d025      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 020e 	bic.w	r2, r2, #14
 80027aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f202 	lsl.w	r2, r1, r2
 80027be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d004      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
}
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002806:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002818:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f003 021f 	and.w	r2, r3, #31
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b10      	cmp	r3, #16
 800283c:	d108      	bne.n	8002850 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800284e:	e007      	b.n	8002860 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	60da      	str	r2, [r3, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800287c:	429a      	cmp	r2, r3
 800287e:	d802      	bhi.n	8002886 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	e001      	b.n	800288a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002888:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3b08      	subs	r3, #8
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	009a      	lsls	r2, r3, #2
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80028b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	2201      	movs	r2, #1
 80028c0:	409a      	lsls	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40020407 	.word	0x40020407
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020820 	.word	0x40020820
 80028e0:	cccccccd 	.word	0xcccccccd
 80028e4:	40020880 	.word	0x40020880

080028e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	461a      	mov	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a08      	ldr	r2, [pc, #32]	; (800292c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800290a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3b01      	subs	r3, #1
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2201      	movs	r2, #1
 8002916:	409a      	lsls	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	1000823f 	.word	0x1000823f
 800292c:	40020940 	.word	0x40020940

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800293e:	e15a      	b.n	8002bf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 814c 	beq.w	8002bf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d005      	beq.n	8002970 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800296c:	2b02      	cmp	r3, #2
 800296e:	d130      	bne.n	80029d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029a6:	2201      	movs	r2, #1
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 0201 	and.w	r2, r3, #1
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d017      	beq.n	8002a0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	2203      	movs	r2, #3
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d123      	bne.n	8002a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	08da      	lsrs	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3208      	adds	r2, #8
 8002a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	08da      	lsrs	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3208      	adds	r2, #8
 8002a5c:	6939      	ldr	r1, [r7, #16]
 8002a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0203 	and.w	r2, r3, #3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80a6 	beq.w	8002bf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa4:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <HAL_GPIO_Init+0x2e4>)
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa8:	4a5a      	ldr	r2, [pc, #360]	; (8002c14 <HAL_GPIO_Init+0x2e4>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6613      	str	r3, [r2, #96]	; 0x60
 8002ab0:	4b58      	ldr	r3, [pc, #352]	; (8002c14 <HAL_GPIO_Init+0x2e4>)
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002abc:	4a56      	ldr	r2, [pc, #344]	; (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ae6:	d01f      	beq.n	8002b28 <HAL_GPIO_Init+0x1f8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a4c      	ldr	r2, [pc, #304]	; (8002c1c <HAL_GPIO_Init+0x2ec>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d019      	beq.n	8002b24 <HAL_GPIO_Init+0x1f4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a4b      	ldr	r2, [pc, #300]	; (8002c20 <HAL_GPIO_Init+0x2f0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <HAL_GPIO_Init+0x1f0>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a4a      	ldr	r2, [pc, #296]	; (8002c24 <HAL_GPIO_Init+0x2f4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00d      	beq.n	8002b1c <HAL_GPIO_Init+0x1ec>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a49      	ldr	r2, [pc, #292]	; (8002c28 <HAL_GPIO_Init+0x2f8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <HAL_GPIO_Init+0x1e8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a48      	ldr	r2, [pc, #288]	; (8002c2c <HAL_GPIO_Init+0x2fc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_GPIO_Init+0x1e4>
 8002b10:	2305      	movs	r3, #5
 8002b12:	e00a      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b14:	2306      	movs	r3, #6
 8002b16:	e008      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	e006      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e004      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e002      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	f002 0203 	and.w	r2, r2, #3
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	4093      	lsls	r3, r2
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b3a:	4937      	ldr	r1, [pc, #220]	; (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b48:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b6c:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b72:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b96:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b9c:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bea:	4a11      	ldr	r2, [pc, #68]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f47f ae9d 	bne.w	8002940 <HAL_GPIO_Init+0x10>
  }
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	48000400 	.word	0x48000400
 8002c20:	48000800 	.word	0x48000800
 8002c24:	48000c00 	.word	0x48000c00
 8002c28:	48001000 	.word	0x48001000
 8002c2c:	48001400 	.word	0x48001400
 8002c30:	40010400 	.word	0x40010400

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	041a      	lsls	r2, r3, #16
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	43d9      	mvns	r1, r3
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	400b      	ands	r3, r1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d141      	bne.n	8002d2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ca6:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb2:	d131      	bne.n	8002d18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cb4:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cba:	4a46      	ldr	r2, [pc, #280]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ccc:	4a41      	ldr	r2, [pc, #260]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cd4:	4b40      	ldr	r3, [pc, #256]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2232      	movs	r2, #50	; 0x32
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	4a3f      	ldr	r2, [pc, #252]	; (8002ddc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	0c9b      	lsrs	r3, r3, #18
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cea:	e002      	b.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf2:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfe:	d102      	bne.n	8002d06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f2      	bne.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d06:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d12:	d158      	bne.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e057      	b.n	8002dc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1e:	4a2d      	ldr	r2, [pc, #180]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d28:	e04d      	b.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d30:	d141      	bne.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d32:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3e:	d131      	bne.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d50:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d58:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2232      	movs	r2, #50	; 0x32
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d70:	0c9b      	lsrs	r3, r3, #18
 8002d72:	3301      	adds	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d76:	e002      	b.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	d102      	bne.n	8002d92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f2      	bne.n	8002d78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9e:	d112      	bne.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e011      	b.n	8002dc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002daa:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002db4:	e007      	b.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40007000 	.word	0x40007000
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	431bde83 	.word	0x431bde83

08002de0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dee:	6093      	str	r3, [r2, #8]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40007000 	.word	0x40007000

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e306      	b.n	8003420 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d075      	beq.n	8002f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1e:	4b97      	ldr	r3, [pc, #604]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e28:	4b94      	ldr	r3, [pc, #592]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	d102      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3e>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d002      	beq.n	8002e44 <HAL_RCC_OscConfig+0x44>
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d10b      	bne.n	8002e5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	4b8d      	ldr	r3, [pc, #564]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d05b      	beq.n	8002f08 <HAL_RCC_OscConfig+0x108>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d157      	bne.n	8002f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e2e1      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e64:	d106      	bne.n	8002e74 <HAL_RCC_OscConfig+0x74>
 8002e66:	4b85      	ldr	r3, [pc, #532]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a84      	ldr	r2, [pc, #528]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e01d      	b.n	8002eb0 <HAL_RCC_OscConfig+0xb0>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x98>
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7e      	ldr	r2, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a7b      	ldr	r2, [pc, #492]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0xb0>
 8002e98:	4b78      	ldr	r3, [pc, #480]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a77      	ldr	r2, [pc, #476]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a74      	ldr	r2, [pc, #464]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7ff f8ca 	bl	8002050 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7ff f8c6 	bl	8002050 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e2a6      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed2:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xc0>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7ff f8b6 	bl	8002050 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7ff f8b2 	bl	8002050 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e292      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002efa:	4b60      	ldr	r3, [pc, #384]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xe8>
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d075      	beq.n	8003002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f16:	4b59      	ldr	r3, [pc, #356]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f20:	4b56      	ldr	r3, [pc, #344]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_OscConfig+0x136>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d002      	beq.n	8002f3c <HAL_RCC_OscConfig+0x13c>
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d11f      	bne.n	8002f7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f3c:	4b4f      	ldr	r3, [pc, #316]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_OscConfig+0x154>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e265      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f54:	4b49      	ldr	r3, [pc, #292]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	4946      	ldr	r1, [pc, #280]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f68:	4b45      	ldr	r3, [pc, #276]	; (8003080 <HAL_RCC_OscConfig+0x280>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f823 	bl	8001fb8 <HAL_InitTick>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d043      	beq.n	8003000 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e251      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d023      	beq.n	8002fcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f84:	4b3d      	ldr	r3, [pc, #244]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a3c      	ldr	r2, [pc, #240]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7ff f85e 	bl	8002050 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f98:	f7ff f85a 	bl	8002050 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e23a      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002faa:	4b34      	ldr	r3, [pc, #208]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	061b      	lsls	r3, r3, #24
 8002fc4:	492d      	ldr	r1, [pc, #180]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
 8002fca:	e01a      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7ff f83a 	bl	8002050 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7ff f836 	bl	8002050 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e216      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1e0>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d041      	beq.n	8003092 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01c      	beq.n	8003050 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8003018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301c:	4a17      	ldr	r2, [pc, #92]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003026:	f7ff f813 	bl	8002050 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302e:	f7ff f80f 	bl	8002050 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e1ef      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003040:	4b0e      	ldr	r3, [pc, #56]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0ef      	beq.n	800302e <HAL_RCC_OscConfig+0x22e>
 800304e:	e020      	b.n	8003092 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8003052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003056:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_RCC_OscConfig+0x27c>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7fe fff6 	bl	8002050 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003066:	e00d      	b.n	8003084 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003068:	f7fe fff2 	bl	8002050 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d906      	bls.n	8003084 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1d2      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003084:	4b8c      	ldr	r3, [pc, #560]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1ea      	bne.n	8003068 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80a6 	beq.w	80031ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a0:	2300      	movs	r3, #0
 80030a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030a4:	4b84      	ldr	r3, [pc, #528]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_OscConfig+0x2b4>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x2b6>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	4b7f      	ldr	r3, [pc, #508]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	4a7e      	ldr	r2, [pc, #504]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
 80030c6:	4b7c      	ldr	r3, [pc, #496]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030d2:	2301      	movs	r3, #1
 80030d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d6:	4b79      	ldr	r3, [pc, #484]	; (80032bc <HAL_RCC_OscConfig+0x4bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d118      	bne.n	8003114 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e2:	4b76      	ldr	r3, [pc, #472]	; (80032bc <HAL_RCC_OscConfig+0x4bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a75      	ldr	r2, [pc, #468]	; (80032bc <HAL_RCC_OscConfig+0x4bc>)
 80030e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ee:	f7fe ffaf 	bl	8002050 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f6:	f7fe ffab 	bl	8002050 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e18b      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003108:	4b6c      	ldr	r3, [pc, #432]	; (80032bc <HAL_RCC_OscConfig+0x4bc>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d108      	bne.n	800312e <HAL_RCC_OscConfig+0x32e>
 800311c:	4b66      	ldr	r3, [pc, #408]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	4a65      	ldr	r2, [pc, #404]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800312c:	e024      	b.n	8003178 <HAL_RCC_OscConfig+0x378>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b05      	cmp	r3, #5
 8003134:	d110      	bne.n	8003158 <HAL_RCC_OscConfig+0x358>
 8003136:	4b60      	ldr	r3, [pc, #384]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	4a5e      	ldr	r2, [pc, #376]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	f043 0304 	orr.w	r3, r3, #4
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003146:	4b5c      	ldr	r3, [pc, #368]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	4a5a      	ldr	r2, [pc, #360]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003156:	e00f      	b.n	8003178 <HAL_RCC_OscConfig+0x378>
 8003158:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	4a56      	ldr	r2, [pc, #344]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003168:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	4a52      	ldr	r2, [pc, #328]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d016      	beq.n	80031ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe ff66 	bl	8002050 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7fe ff62 	bl	8002050 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e140      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319e:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ed      	beq.n	8003188 <HAL_RCC_OscConfig+0x388>
 80031ac:	e015      	b.n	80031da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe ff4f 	bl	8002050 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fe ff4b 	bl	8002050 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e129      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031cc:	4b3a      	ldr	r3, [pc, #232]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ed      	bne.n	80031b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031da:	7ffb      	ldrb	r3, [r7, #31]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e0:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	4a34      	ldr	r2, [pc, #208]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 80031e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d03c      	beq.n	8003272 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01c      	beq.n	800323a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003200:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003206:	4a2c      	ldr	r2, [pc, #176]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe ff1e 	bl	8002050 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003218:	f7fe ff1a 	bl	8002050 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0fa      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800322a:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 800322c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ef      	beq.n	8003218 <HAL_RCC_OscConfig+0x418>
 8003238:	e01b      	b.n	8003272 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800323a:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 800323c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003240:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324a:	f7fe ff01 	bl	8002050 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003252:	f7fe fefd 	bl	8002050 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0dd      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ef      	bne.n	8003252 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80d1 	beq.w	800341e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b0c      	cmp	r3, #12
 8003286:	f000 808b 	beq.w	80033a0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d15e      	bne.n	8003350 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a08      	ldr	r2, [pc, #32]	; (80032b8 <HAL_RCC_OscConfig+0x4b8>)
 8003298:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800329c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329e:	f7fe fed7 	bl	8002050 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a4:	e00c      	b.n	80032c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe fed3 	bl	8002050 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d905      	bls.n	80032c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0b3      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c0:	4b59      	ldr	r3, [pc, #356]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ec      	bne.n	80032a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032cc:	4b56      	ldr	r3, [pc, #344]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4b56      	ldr	r3, [pc, #344]	; (800342c <HAL_RCC_OscConfig+0x62c>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6a11      	ldr	r1, [r2, #32]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032dc:	3a01      	subs	r2, #1
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	4311      	orrs	r1, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032e6:	0212      	lsls	r2, r2, #8
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ee:	0852      	lsrs	r2, r2, #1
 80032f0:	3a01      	subs	r2, #1
 80032f2:	0552      	lsls	r2, r2, #21
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032fa:	0852      	lsrs	r2, r2, #1
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0652      	lsls	r2, r2, #25
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003306:	06d2      	lsls	r2, r2, #27
 8003308:	430a      	orrs	r2, r1
 800330a:	4947      	ldr	r1, [pc, #284]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 800330c:	4313      	orrs	r3, r2
 800330e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003310:	4b45      	ldr	r3, [pc, #276]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a44      	ldr	r2, [pc, #272]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800331c:	4b42      	ldr	r3, [pc, #264]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a41      	ldr	r2, [pc, #260]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 8003322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003326:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fe92 	bl	8002050 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003330:	f7fe fe8e 	bl	8002050 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e06e      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003342:	4b39      	ldr	r3, [pc, #228]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x530>
 800334e:	e066      	b.n	800341e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b35      	ldr	r3, [pc, #212]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a34      	ldr	r2, [pc, #208]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 8003356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800335c:	4b32      	ldr	r3, [pc, #200]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a31      	ldr	r2, [pc, #196]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a2e      	ldr	r2, [pc, #184]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 800336e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003376:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fe6a 	bl	8002050 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fe fe66 	bl	8002050 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e046      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003392:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x580>
 800339e:	e03e      	b.n	800341e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e039      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80033ac:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f003 0203 	and.w	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d12c      	bne.n	800341a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	3b01      	subs	r3, #1
 80033cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d123      	bne.n	800341a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d11b      	bne.n	800341a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d113      	bne.n	800341a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	3b01      	subs	r3, #1
 8003400:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d109      	bne.n	800341a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	3b01      	subs	r3, #1
 8003414:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d001      	beq.n	800341e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3720      	adds	r7, #32
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	019f800c 	.word	0x019f800c

08003430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e11e      	b.n	8003686 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b91      	ldr	r3, [pc, #580]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d910      	bls.n	8003478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b8e      	ldr	r3, [pc, #568]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 020f 	bic.w	r2, r3, #15
 800345e:	498c      	ldr	r1, [pc, #560]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b8a      	ldr	r3, [pc, #552]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e106      	b.n	8003686 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d073      	beq.n	800356c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d129      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348c:	4b81      	ldr	r3, [pc, #516]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0f4      	b.n	8003686 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800349c:	f000 f99e 	bl	80037dc <RCC_GetSysClockFreqFromPLLSource>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4a7c      	ldr	r2, [pc, #496]	; (8003698 <HAL_RCC_ClockConfig+0x268>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d93f      	bls.n	800352a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034aa:	4b7a      	ldr	r3, [pc, #488]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d033      	beq.n	800352a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d12f      	bne.n	800352a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ca:	4b72      	ldr	r3, [pc, #456]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d2:	4a70      	ldr	r2, [pc, #448]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 80034d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e024      	b.n	800352a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d107      	bne.n	80034f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e8:	4b6a      	ldr	r3, [pc, #424]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0c6      	b.n	8003686 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f8:	4b66      	ldr	r3, [pc, #408]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0be      	b.n	8003686 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003508:	f000 f8ce 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 800350c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4a61      	ldr	r2, [pc, #388]	; (8003698 <HAL_RCC_ClockConfig+0x268>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d909      	bls.n	800352a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003516:	4b5f      	ldr	r3, [pc, #380]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800351e:	4a5d      	ldr	r2, [pc, #372]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 8003520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003524:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800352a:	4b5a      	ldr	r3, [pc, #360]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 0203 	bic.w	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4957      	ldr	r1, [pc, #348]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353c:	f7fe fd88 	bl	8002050 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003542:	e00a      	b.n	800355a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003544:	f7fe fd84 	bl	8002050 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e095      	b.n	8003686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	4b4e      	ldr	r3, [pc, #312]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 020c 	and.w	r2, r3, #12
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	429a      	cmp	r2, r3
 800356a:	d1eb      	bne.n	8003544 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d023      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003584:	4b43      	ldr	r3, [pc, #268]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a42      	ldr	r2, [pc, #264]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 800358a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800358e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800359c:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035a4:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 80035a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ac:	4b39      	ldr	r3, [pc, #228]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4936      	ldr	r1, [pc, #216]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
 80035be:	e008      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b80      	cmp	r3, #128	; 0x80
 80035c4:	d105      	bne.n	80035d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035c6:	4b33      	ldr	r3, [pc, #204]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4a32      	ldr	r2, [pc, #200]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 80035cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d2:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d21d      	bcs.n	800361c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 020f 	bic.w	r2, r3, #15
 80035e8:	4929      	ldr	r1, [pc, #164]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035f0:	f7fe fd2e 	bl	8002050 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fe fd2a 	bl	8002050 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e03b      	b.n	8003686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d1ed      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003628:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4917      	ldr	r1, [pc, #92]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	490f      	ldr	r1, [pc, #60]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800365a:	f000 f825 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 800365e:	4602      	mov	r2, r0
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <HAL_RCC_ClockConfig+0x264>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	490c      	ldr	r1, [pc, #48]	; (800369c <HAL_RCC_ClockConfig+0x26c>)
 800366c:	5ccb      	ldrb	r3, [r1, r3]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <HAL_RCC_ClockConfig+0x270>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <HAL_RCC_ClockConfig+0x274>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fc9a 	bl	8001fb8 <HAL_InitTick>
 8003684:	4603      	mov	r3, r0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40022000 	.word	0x40022000
 8003694:	40021000 	.word	0x40021000
 8003698:	04c4b400 	.word	0x04c4b400
 800369c:	080087b8 	.word	0x080087b8
 80036a0:	20000000 	.word	0x20000000
 80036a4:	20000004 	.word	0x20000004

080036a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036ae:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d102      	bne.n	80036c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036ba:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	e047      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d102      	bne.n	80036d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036cc:	4b26      	ldr	r3, [pc, #152]	; (8003768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	e03e      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d136      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	3301      	adds	r3, #1
 80036f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d10c      	bne.n	8003716 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036fc:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	4a16      	ldr	r2, [pc, #88]	; (8003760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003706:	68d2      	ldr	r2, [r2, #12]
 8003708:	0a12      	lsrs	r2, r2, #8
 800370a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	617b      	str	r3, [r7, #20]
      break;
 8003714:	e00c      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003716:	4a13      	ldr	r2, [pc, #76]	; (8003764 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003720:	68d2      	ldr	r2, [r2, #12]
 8003722:	0a12      	lsrs	r2, r2, #8
 8003724:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
      break;
 800372e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	0e5b      	lsrs	r3, r3, #25
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	3301      	adds	r3, #1
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e001      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003750:	693b      	ldr	r3, [r7, #16]
}
 8003752:	4618      	mov	r0, r3
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	00f42400 	.word	0x00f42400
 8003768:	016e3600 	.word	0x016e3600

0800376c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <HAL_RCC_GetHCLKFreq+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000000 	.word	0x20000000

08003784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003788:	f7ff fff0 	bl	800376c <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4904      	ldr	r1, [pc, #16]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	080087c8 	.word	0x080087c8

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037b4:	f7ff ffda 	bl	800376c <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0adb      	lsrs	r3, r3, #11
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4904      	ldr	r1, [pc, #16]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	080087c8 	.word	0x080087c8

080037dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037e2:	4b1e      	ldr	r3, [pc, #120]	; (800385c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3301      	adds	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d10c      	bne.n	800381a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003800:	4a17      	ldr	r2, [pc, #92]	; (8003860 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800380a:	68d2      	ldr	r2, [r2, #12]
 800380c:	0a12      	lsrs	r2, r2, #8
 800380e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	617b      	str	r3, [r7, #20]
    break;
 8003818:	e00c      	b.n	8003834 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	4a0e      	ldr	r2, [pc, #56]	; (800385c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003824:	68d2      	ldr	r2, [r2, #12]
 8003826:	0a12      	lsrs	r2, r2, #8
 8003828:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800382c:	fb02 f303 	mul.w	r3, r2, r3
 8003830:	617b      	str	r3, [r7, #20]
    break;
 8003832:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0e5b      	lsrs	r3, r3, #25
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	3301      	adds	r3, #1
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800384e:	687b      	ldr	r3, [r7, #4]
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40021000 	.word	0x40021000
 8003860:	016e3600 	.word	0x016e3600
 8003864:	00f42400 	.word	0x00f42400

08003868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003870:	2300      	movs	r3, #0
 8003872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003874:	2300      	movs	r3, #0
 8003876:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8098 	beq.w	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388a:	4b43      	ldr	r3, [pc, #268]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10d      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	4b40      	ldr	r3, [pc, #256]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	4a3f      	ldr	r2, [pc, #252]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6593      	str	r3, [r2, #88]	; 0x58
 80038a2:	4b3d      	ldr	r3, [pc, #244]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ae:	2301      	movs	r3, #1
 80038b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038b2:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a39      	ldr	r2, [pc, #228]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038be:	f7fe fbc7 	bl	8002050 <HAL_GetTick>
 80038c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c4:	e009      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c6:	f7fe fbc3 	bl	8002050 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d902      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	74fb      	strb	r3, [r7, #19]
        break;
 80038d8:	e005      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038da:	4b30      	ldr	r3, [pc, #192]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0ef      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d159      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038ec:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01e      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	429a      	cmp	r2, r3
 8003906:	d019      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003908:	4b23      	ldr	r3, [pc, #140]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003912:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003914:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800392c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003934:	4a18      	ldr	r2, [pc, #96]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d016      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fe fb83 	bl	8002050 <HAL_GetTick>
 800394a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800394c:	e00b      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fe fb7f 	bl	8002050 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d902      	bls.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	74fb      	strb	r3, [r7, #19]
            break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003966:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ec      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10b      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003990:	e008      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003992:	7cfb      	ldrb	r3, [r7, #19]
 8003994:	74bb      	strb	r3, [r7, #18]
 8003996:	e005      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003998:	40021000 	.word	0x40021000
 800399c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a4:	7c7b      	ldrb	r3, [r7, #17]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039aa:	4ba6      	ldr	r3, [pc, #664]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	4aa5      	ldr	r2, [pc, #660]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039c2:	4ba0      	ldr	r3, [pc, #640]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f023 0203 	bic.w	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	499c      	ldr	r1, [pc, #624]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e4:	4b97      	ldr	r3, [pc, #604]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f023 020c 	bic.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	4994      	ldr	r1, [pc, #592]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a06:	4b8f      	ldr	r3, [pc, #572]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	498b      	ldr	r1, [pc, #556]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a28:	4b86      	ldr	r3, [pc, #536]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	4983      	ldr	r1, [pc, #524]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a4a:	4b7e      	ldr	r3, [pc, #504]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	497a      	ldr	r1, [pc, #488]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a6c:	4b75      	ldr	r3, [pc, #468]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	4972      	ldr	r1, [pc, #456]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4969      	ldr	r1, [pc, #420]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ab0:	4b64      	ldr	r3, [pc, #400]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	4961      	ldr	r1, [pc, #388]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad2:	4b5c      	ldr	r3, [pc, #368]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	4958      	ldr	r1, [pc, #352]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d015      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af4:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	4950      	ldr	r1, [pc, #320]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b14:	4b4b      	ldr	r3, [pc, #300]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a4a      	ldr	r2, [pc, #296]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d015      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b2c:	4b45      	ldr	r3, [pc, #276]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	4942      	ldr	r1, [pc, #264]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b4c:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a3c      	ldr	r2, [pc, #240]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b64:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4934      	ldr	r1, [pc, #208]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b82:	d105      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b84:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a2e      	ldr	r2, [pc, #184]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d015      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b9c:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	4926      	ldr	r1, [pc, #152]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bbc:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	4918      	ldr	r1, [pc, #96]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf2:	d105      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bfe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	490a      	ldr	r1, [pc, #40]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a04      	ldr	r2, [pc, #16]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c38:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000

08003c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e042      	b.n	8003ce0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7fe f895 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2224      	movs	r2, #36	; 0x24
 8003c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fd2e 	bl	80046ec <UART_SetConfig>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e022      	b.n	8003ce0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 ffee 	bl	8004c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f001 f875 	bl	8004dc8 <UART_CheckIdleState>
 8003cde:	4603      	mov	r3, r0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	f040 8083 	bne.w	8003e0a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_UART_Transmit+0x28>
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e07b      	b.n	8003e0c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Transmit+0x3a>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e074      	b.n	8003e0c <HAL_UART_Transmit+0x124>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2221      	movs	r2, #33	; 0x21
 8003d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d3a:	f7fe f989 	bl	8002050 <HAL_GetTick>
 8003d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	88fa      	ldrh	r2, [r7, #6]
 8003d44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d58:	d108      	bne.n	8003d6c <HAL_UART_Transmit+0x84>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d104      	bne.n	8003d6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	e003      	b.n	8003d74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003d7c:	e02c      	b.n	8003dd8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2200      	movs	r2, #0
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f001 f868 	bl	8004e5e <UART_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e039      	b.n	8003e0c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	3302      	adds	r3, #2
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	e007      	b.n	8003dc6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	781a      	ldrb	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1cc      	bne.n	8003d7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2200      	movs	r2, #0
 8003dec:	2140      	movs	r1, #64	; 0x40
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f001 f835 	bl	8004e5e <UART_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e006      	b.n	8003e0c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	f040 80c0 	bne.w	8003fb0 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_UART_Receive+0x28>
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0b8      	b.n	8003fb2 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Receive+0x3a>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e0b1      	b.n	8003fb2 <HAL_UART_Receive+0x19e>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2222      	movs	r2, #34	; 0x22
 8003e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e6c:	f7fe f8f0 	bl	8002050 <HAL_GetTick>
 8003e70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8a:	d10e      	bne.n	8003eaa <HAL_UART_Receive+0x96>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <HAL_UART_Receive+0x8c>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e9e:	e02d      	b.n	8003efc <HAL_UART_Receive+0xe8>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	22ff      	movs	r2, #255	; 0xff
 8003ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ea8:	e028      	b.n	8003efc <HAL_UART_Receive+0xe8>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10d      	bne.n	8003ece <HAL_UART_Receive+0xba>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d104      	bne.n	8003ec4 <HAL_UART_Receive+0xb0>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	22ff      	movs	r2, #255	; 0xff
 8003ebe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ec2:	e01b      	b.n	8003efc <HAL_UART_Receive+0xe8>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	227f      	movs	r2, #127	; 0x7f
 8003ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ecc:	e016      	b.n	8003efc <HAL_UART_Receive+0xe8>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ed6:	d10d      	bne.n	8003ef4 <HAL_UART_Receive+0xe0>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <HAL_UART_Receive+0xd6>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	227f      	movs	r2, #127	; 0x7f
 8003ee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ee8:	e008      	b.n	8003efc <HAL_UART_Receive+0xe8>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	223f      	movs	r2, #63	; 0x3f
 8003eee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ef2:	e003      	b.n	8003efc <HAL_UART_Receive+0xe8>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003f02:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0c:	d108      	bne.n	8003f20 <HAL_UART_Receive+0x10c>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d104      	bne.n	8003f20 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	e003      	b.n	8003f28 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f30:	e032      	b.n	8003f98 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 ff8e 	bl	8004e5e <UART_WaitOnFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e032      	b.n	8003fb2 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	8a7b      	ldrh	r3, [r7, #18]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	3302      	adds	r3, #2
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e00c      	b.n	8003f86 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	8a7b      	ldrh	r3, [r7, #18]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	4013      	ands	r3, r2
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	3301      	adds	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1c6      	bne.n	8003f32 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d142      	bne.n	800405a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_UART_Receive_DMA+0x24>
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e03b      	b.n	800405c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Receive_DMA+0x36>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e034      	b.n	800405c <HAL_UART_Receive_DMA+0xa0>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a17      	ldr	r2, [pc, #92]	; (8004064 <HAL_UART_Receive_DMA+0xa8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01f      	beq.n	800404a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d018      	beq.n	800404a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	613b      	str	r3, [r7, #16]
   return(result);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	623b      	str	r3, [r7, #32]
 8004038:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	69f9      	ldr	r1, [r7, #28]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	61bb      	str	r3, [r7, #24]
   return(result);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e6      	bne.n	8004018 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	461a      	mov	r2, r3
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 ffcd 	bl	8004ff0 <UART_Start_Receive_DMA>
 8004056:	4603      	mov	r3, r0
 8004058:	e000      	b.n	800405c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
  }
}
 800405c:	4618      	mov	r0, r3
 800405e:	3728      	adds	r7, #40	; 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40008000 	.word	0x40008000

08004068 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b0ba      	sub	sp, #232	; 0xe8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800408e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004092:	f640 030f 	movw	r3, #2063	; 0x80f
 8004096:	4013      	ands	r3, r2
 8004098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800409c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11b      	bne.n	80040dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80040a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d105      	bne.n	80040c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 82d6 	beq.w	800467e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
      }
      return;
 80040da:	e2d0      	b.n	800467e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 811f 	beq.w	8004324 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80040e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80040ea:	4b8b      	ldr	r3, [pc, #556]	; (8004318 <HAL_UART_IRQHandler+0x2b0>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80040f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040f6:	4b89      	ldr	r3, [pc, #548]	; (800431c <HAL_UART_IRQHandler+0x2b4>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8112 	beq.w	8004324 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d011      	beq.n	8004130 <HAL_UART_IRQHandler+0xc8>
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2201      	movs	r2, #1
 800411e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004126:	f043 0201 	orr.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d011      	beq.n	8004160 <HAL_UART_IRQHandler+0xf8>
 800413c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2202      	movs	r2, #2
 800414e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004156:	f043 0204 	orr.w	r2, r3, #4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d011      	beq.n	8004190 <HAL_UART_IRQHandler+0x128>
 800416c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2204      	movs	r2, #4
 800417e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004186:	f043 0202 	orr.w	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d017      	beq.n	80041cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80041a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80041ac:	4b5a      	ldr	r3, [pc, #360]	; (8004318 <HAL_UART_IRQHandler+0x2b0>)
 80041ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00b      	beq.n	80041cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2208      	movs	r2, #8
 80041ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c2:	f043 0208 	orr.w	r2, r3, #8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d012      	beq.n	80041fe <HAL_UART_IRQHandler+0x196>
 80041d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00c      	beq.n	80041fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 823c 	beq.w	8004682 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d013      	beq.n	800423e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d105      	bne.n	800422e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004244:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d005      	beq.n	8004262 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800425a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800425e:	2b00      	cmp	r3, #0
 8004260:	d04f      	beq.n	8004302 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 ffad 	bl	80051c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b40      	cmp	r3, #64	; 0x40
 8004274:	d141      	bne.n	80042fa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3308      	adds	r3, #8
 800427c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800428c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3308      	adds	r3, #8
 800429e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1d9      	bne.n	8004276 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d013      	beq.n	80042f2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ce:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_UART_IRQHandler+0x2b8>)
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe f974 	bl	80025c4 <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d017      	beq.n	8004312 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80042ec:	4610      	mov	r0, r2
 80042ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	e00f      	b.n	8004312 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f9e4 	bl	80046c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	e00b      	b.n	8004312 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9e0 	bl	80046c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	e007      	b.n	8004312 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9dc 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004310:	e1b7      	b.n	8004682 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004312:	bf00      	nop
    return;
 8004314:	e1b5      	b.n	8004682 <HAL_UART_IRQHandler+0x61a>
 8004316:	bf00      	nop
 8004318:	10000001 	.word	0x10000001
 800431c:	04000120 	.word	0x04000120
 8004320:	0800546d 	.word	0x0800546d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004328:	2b01      	cmp	r3, #1
 800432a:	f040 814a 	bne.w	80045c2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8143 	beq.w	80045c2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 813c 	beq.w	80045c2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2210      	movs	r2, #16
 8004350:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	f040 80b5 	bne.w	80044cc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800436e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8187 	beq.w	8004686 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800437e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004382:	429a      	cmp	r2, r3
 8004384:	f080 817f 	bcs.w	8004686 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800438e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 8086 	bne.w	80044b0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1da      	bne.n	80043a4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3308      	adds	r3, #8
 80043f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004412:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004416:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800441a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e1      	bne.n	80043ee <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3308      	adds	r3, #8
 8004430:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800443a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800443c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800444e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004450:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004454:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800445c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e3      	bne.n	800442a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800447e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004480:	f023 0310 	bic.w	r3, r3, #16
 8004484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004492:	65bb      	str	r3, [r7, #88]	; 0x58
 8004494:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e4      	bne.n	8004470 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe f831 	bl	8002512 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f905 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044ca:	e0dc      	b.n	8004686 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044d8:	b29b      	uxth	r3, r3
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80ce 	beq.w	800468a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80044ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80c9 	beq.w	800468a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800450c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800451a:	647b      	str	r3, [r7, #68]	; 0x44
 800451c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e4      	bne.n	80044f8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	623b      	str	r3, [r7, #32]
   return(result);
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004556:	633a      	str	r2, [r7, #48]	; 0x30
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800455c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e1      	bne.n	800452e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	60fb      	str	r3, [r7, #12]
   return(result);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0310 	bic.w	r3, r3, #16
 8004592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	69b9      	ldr	r1, [r7, #24]
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	617b      	str	r3, [r7, #20]
   return(result);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e4      	bne.n	800457e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045b8:	4619      	mov	r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f88a 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045c0:	e063      	b.n	800468a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00e      	beq.n	80045ec <HAL_UART_IRQHandler+0x584>
 80045ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 ff82 	bl	80054ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045ea:	e051      	b.n	8004690 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80045ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d014      	beq.n	8004622 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80045f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004614:	2b00      	cmp	r3, #0
 8004616:	d03a      	beq.n	800468e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
    }
    return;
 8004620:	e035      	b.n	800468e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_UART_IRQHandler+0x5da>
 800462e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 ff2c 	bl	8005498 <UART_EndTransmit_IT>
    return;
 8004640:	e026      	b.n	8004690 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004646:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_UART_IRQHandler+0x5fa>
 800464e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004652:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 ff5b 	bl	8005516 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004660:	e016      	b.n	8004690 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d010      	beq.n	8004690 <HAL_UART_IRQHandler+0x628>
 800466e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004672:	2b00      	cmp	r3, #0
 8004674:	da0c      	bge.n	8004690 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 ff43 	bl	8005502 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800467c:	e008      	b.n	8004690 <HAL_UART_IRQHandler+0x628>
      return;
 800467e:	bf00      	nop
 8004680:	e006      	b.n	8004690 <HAL_UART_IRQHandler+0x628>
    return;
 8004682:	bf00      	nop
 8004684:	e004      	b.n	8004690 <HAL_UART_IRQHandler+0x628>
      return;
 8004686:	bf00      	nop
 8004688:	e002      	b.n	8004690 <HAL_UART_IRQHandler+0x628>
      return;
 800468a:	bf00      	nop
 800468c:	e000      	b.n	8004690 <HAL_UART_IRQHandler+0x628>
    return;
 800468e:	bf00      	nop
  }
}
 8004690:	37e8      	adds	r7, #232	; 0xe8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop

08004698 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f0:	b08c      	sub	sp, #48	; 0x30
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	431a      	orrs	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	431a      	orrs	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	4313      	orrs	r3, r2
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4bab      	ldr	r3, [pc, #684]	; (80049c8 <UART_SetConfig+0x2dc>)
 800471c:	4013      	ands	r3, r2
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004724:	430b      	orrs	r3, r1
 8004726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4aa0      	ldr	r2, [pc, #640]	; (80049cc <UART_SetConfig+0x2e0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004754:	4313      	orrs	r3, r2
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004762:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800476c:	430b      	orrs	r3, r1
 800476e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f023 010f 	bic.w	r1, r3, #15
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a91      	ldr	r2, [pc, #580]	; (80049d0 <UART_SetConfig+0x2e4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d125      	bne.n	80047dc <UART_SetConfig+0xf0>
 8004790:	4b90      	ldr	r3, [pc, #576]	; (80049d4 <UART_SetConfig+0x2e8>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b03      	cmp	r3, #3
 800479c:	d81a      	bhi.n	80047d4 <UART_SetConfig+0xe8>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <UART_SetConfig+0xb8>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	080047c5 	.word	0x080047c5
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047cd 	.word	0x080047cd
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ba:	e0d6      	b.n	800496a <UART_SetConfig+0x27e>
 80047bc:	2302      	movs	r3, #2
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047c2:	e0d2      	b.n	800496a <UART_SetConfig+0x27e>
 80047c4:	2304      	movs	r3, #4
 80047c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ca:	e0ce      	b.n	800496a <UART_SetConfig+0x27e>
 80047cc:	2308      	movs	r3, #8
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047d2:	e0ca      	b.n	800496a <UART_SetConfig+0x27e>
 80047d4:	2310      	movs	r3, #16
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047da:	e0c6      	b.n	800496a <UART_SetConfig+0x27e>
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a7d      	ldr	r2, [pc, #500]	; (80049d8 <UART_SetConfig+0x2ec>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d138      	bne.n	8004858 <UART_SetConfig+0x16c>
 80047e6:	4b7b      	ldr	r3, [pc, #492]	; (80049d4 <UART_SetConfig+0x2e8>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	d82d      	bhi.n	8004850 <UART_SetConfig+0x164>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x110>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	08004831 	.word	0x08004831
 8004800:	08004851 	.word	0x08004851
 8004804:	08004851 	.word	0x08004851
 8004808:	08004851 	.word	0x08004851
 800480c:	08004841 	.word	0x08004841
 8004810:	08004851 	.word	0x08004851
 8004814:	08004851 	.word	0x08004851
 8004818:	08004851 	.word	0x08004851
 800481c:	08004839 	.word	0x08004839
 8004820:	08004851 	.word	0x08004851
 8004824:	08004851 	.word	0x08004851
 8004828:	08004851 	.word	0x08004851
 800482c:	08004849 	.word	0x08004849
 8004830:	2300      	movs	r3, #0
 8004832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004836:	e098      	b.n	800496a <UART_SetConfig+0x27e>
 8004838:	2302      	movs	r3, #2
 800483a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800483e:	e094      	b.n	800496a <UART_SetConfig+0x27e>
 8004840:	2304      	movs	r3, #4
 8004842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004846:	e090      	b.n	800496a <UART_SetConfig+0x27e>
 8004848:	2308      	movs	r3, #8
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484e:	e08c      	b.n	800496a <UART_SetConfig+0x27e>
 8004850:	2310      	movs	r3, #16
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004856:	e088      	b.n	800496a <UART_SetConfig+0x27e>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5f      	ldr	r2, [pc, #380]	; (80049dc <UART_SetConfig+0x2f0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d125      	bne.n	80048ae <UART_SetConfig+0x1c2>
 8004862:	4b5c      	ldr	r3, [pc, #368]	; (80049d4 <UART_SetConfig+0x2e8>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d016      	beq.n	800489e <UART_SetConfig+0x1b2>
 8004870:	2b30      	cmp	r3, #48	; 0x30
 8004872:	d818      	bhi.n	80048a6 <UART_SetConfig+0x1ba>
 8004874:	2b20      	cmp	r3, #32
 8004876:	d00a      	beq.n	800488e <UART_SetConfig+0x1a2>
 8004878:	2b20      	cmp	r3, #32
 800487a:	d814      	bhi.n	80048a6 <UART_SetConfig+0x1ba>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <UART_SetConfig+0x19a>
 8004880:	2b10      	cmp	r3, #16
 8004882:	d008      	beq.n	8004896 <UART_SetConfig+0x1aa>
 8004884:	e00f      	b.n	80048a6 <UART_SetConfig+0x1ba>
 8004886:	2300      	movs	r3, #0
 8004888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488c:	e06d      	b.n	800496a <UART_SetConfig+0x27e>
 800488e:	2302      	movs	r3, #2
 8004890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004894:	e069      	b.n	800496a <UART_SetConfig+0x27e>
 8004896:	2304      	movs	r3, #4
 8004898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800489c:	e065      	b.n	800496a <UART_SetConfig+0x27e>
 800489e:	2308      	movs	r3, #8
 80048a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a4:	e061      	b.n	800496a <UART_SetConfig+0x27e>
 80048a6:	2310      	movs	r3, #16
 80048a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ac:	e05d      	b.n	800496a <UART_SetConfig+0x27e>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a4b      	ldr	r2, [pc, #300]	; (80049e0 <UART_SetConfig+0x2f4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d125      	bne.n	8004904 <UART_SetConfig+0x218>
 80048b8:	4b46      	ldr	r3, [pc, #280]	; (80049d4 <UART_SetConfig+0x2e8>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048c2:	2bc0      	cmp	r3, #192	; 0xc0
 80048c4:	d016      	beq.n	80048f4 <UART_SetConfig+0x208>
 80048c6:	2bc0      	cmp	r3, #192	; 0xc0
 80048c8:	d818      	bhi.n	80048fc <UART_SetConfig+0x210>
 80048ca:	2b80      	cmp	r3, #128	; 0x80
 80048cc:	d00a      	beq.n	80048e4 <UART_SetConfig+0x1f8>
 80048ce:	2b80      	cmp	r3, #128	; 0x80
 80048d0:	d814      	bhi.n	80048fc <UART_SetConfig+0x210>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <UART_SetConfig+0x1f0>
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d008      	beq.n	80048ec <UART_SetConfig+0x200>
 80048da:	e00f      	b.n	80048fc <UART_SetConfig+0x210>
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e2:	e042      	b.n	800496a <UART_SetConfig+0x27e>
 80048e4:	2302      	movs	r3, #2
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ea:	e03e      	b.n	800496a <UART_SetConfig+0x27e>
 80048ec:	2304      	movs	r3, #4
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f2:	e03a      	b.n	800496a <UART_SetConfig+0x27e>
 80048f4:	2308      	movs	r3, #8
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fa:	e036      	b.n	800496a <UART_SetConfig+0x27e>
 80048fc:	2310      	movs	r3, #16
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004902:	e032      	b.n	800496a <UART_SetConfig+0x27e>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a30      	ldr	r2, [pc, #192]	; (80049cc <UART_SetConfig+0x2e0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d12a      	bne.n	8004964 <UART_SetConfig+0x278>
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <UART_SetConfig+0x2e8>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800491c:	d01a      	beq.n	8004954 <UART_SetConfig+0x268>
 800491e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004922:	d81b      	bhi.n	800495c <UART_SetConfig+0x270>
 8004924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004928:	d00c      	beq.n	8004944 <UART_SetConfig+0x258>
 800492a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492e:	d815      	bhi.n	800495c <UART_SetConfig+0x270>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <UART_SetConfig+0x250>
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004938:	d008      	beq.n	800494c <UART_SetConfig+0x260>
 800493a:	e00f      	b.n	800495c <UART_SetConfig+0x270>
 800493c:	2300      	movs	r3, #0
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004942:	e012      	b.n	800496a <UART_SetConfig+0x27e>
 8004944:	2302      	movs	r3, #2
 8004946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494a:	e00e      	b.n	800496a <UART_SetConfig+0x27e>
 800494c:	2304      	movs	r3, #4
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004952:	e00a      	b.n	800496a <UART_SetConfig+0x27e>
 8004954:	2308      	movs	r3, #8
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495a:	e006      	b.n	800496a <UART_SetConfig+0x27e>
 800495c:	2310      	movs	r3, #16
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004962:	e002      	b.n	800496a <UART_SetConfig+0x27e>
 8004964:	2310      	movs	r3, #16
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <UART_SetConfig+0x2e0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	f040 80a8 	bne.w	8004ac6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800497a:	2b08      	cmp	r3, #8
 800497c:	d834      	bhi.n	80049e8 <UART_SetConfig+0x2fc>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x298>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049e9 	.word	0x080049e9
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049e9 	.word	0x080049e9
 8004994:	080049b7 	.word	0x080049b7
 8004998:	080049e9 	.word	0x080049e9
 800499c:	080049e9 	.word	0x080049e9
 80049a0:	080049e9 	.word	0x080049e9
 80049a4:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe feec 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 80049ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049ae:	e021      	b.n	80049f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <UART_SetConfig+0x2f8>)
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049b4:	e01e      	b.n	80049f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fe fe77 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 80049ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049bc:	e01a      	b.n	80049f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049c4:	e016      	b.n	80049f4 <UART_SetConfig+0x308>
 80049c6:	bf00      	nop
 80049c8:	cfff69f3 	.word	0xcfff69f3
 80049cc:	40008000 	.word	0x40008000
 80049d0:	40013800 	.word	0x40013800
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40004400 	.word	0x40004400
 80049dc:	40004800 	.word	0x40004800
 80049e0:	40004c00 	.word	0x40004c00
 80049e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 812a 	beq.w	8004c50 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	4a9e      	ldr	r2, [pc, #632]	; (8004c7c <UART_SetConfig+0x590>)
 8004a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4413      	add	r3, r2
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d305      	bcc.n	8004a2c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d903      	bls.n	8004a34 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a32:	e10d      	b.n	8004c50 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	2200      	movs	r2, #0
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	60fa      	str	r2, [r7, #12]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	4a8e      	ldr	r2, [pc, #568]	; (8004c7c <UART_SetConfig+0x590>)
 8004a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2200      	movs	r2, #0
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a56:	f7fc f8cf 	bl	8000bf8 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	020b      	lsls	r3, r1, #8
 8004a6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a70:	0202      	lsls	r2, r0, #8
 8004a72:	6979      	ldr	r1, [r7, #20]
 8004a74:	6849      	ldr	r1, [r1, #4]
 8004a76:	0849      	lsrs	r1, r1, #1
 8004a78:	2000      	movs	r0, #0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	eb12 0804 	adds.w	r8, r2, r4
 8004a82:	eb43 0905 	adc.w	r9, r3, r5
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	469a      	mov	sl, r3
 8004a8e:	4693      	mov	fp, r2
 8004a90:	4652      	mov	r2, sl
 8004a92:	465b      	mov	r3, fp
 8004a94:	4640      	mov	r0, r8
 8004a96:	4649      	mov	r1, r9
 8004a98:	f7fc f8ae 	bl	8000bf8 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aaa:	d308      	bcc.n	8004abe <UART_SetConfig+0x3d2>
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab2:	d204      	bcs.n	8004abe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6a3a      	ldr	r2, [r7, #32]
 8004aba:	60da      	str	r2, [r3, #12]
 8004abc:	e0c8      	b.n	8004c50 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ac4:	e0c4      	b.n	8004c50 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ace:	d167      	bne.n	8004ba0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d828      	bhi.n	8004b2a <UART_SetConfig+0x43e>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <UART_SetConfig+0x3f4>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b05 	.word	0x08004b05
 8004ae4:	08004b0d 	.word	0x08004b0d
 8004ae8:	08004b15 	.word	0x08004b15
 8004aec:	08004b2b 	.word	0x08004b2b
 8004af0:	08004b1b 	.word	0x08004b1b
 8004af4:	08004b2b 	.word	0x08004b2b
 8004af8:	08004b2b 	.word	0x08004b2b
 8004afc:	08004b2b 	.word	0x08004b2b
 8004b00:	08004b23 	.word	0x08004b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b04:	f7fe fe3e 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8004b08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b0a:	e014      	b.n	8004b36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b0c:	f7fe fe50 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8004b10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b12:	e010      	b.n	8004b36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b14:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <UART_SetConfig+0x594>)
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b18:	e00d      	b.n	8004b36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1a:	f7fe fdc5 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8004b1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b20:	e009      	b.n	8004b36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b28:	e005      	b.n	8004b36 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8089 	beq.w	8004c50 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	4a4e      	ldr	r2, [pc, #312]	; (8004c7c <UART_SetConfig+0x590>)
 8004b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b50:	005a      	lsls	r2, r3, #1
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	441a      	add	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	2b0f      	cmp	r3, #15
 8004b68:	d916      	bls.n	8004b98 <UART_SetConfig+0x4ac>
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b70:	d212      	bcs.n	8004b98 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f023 030f 	bic.w	r3, r3, #15
 8004b7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	8bfb      	ldrh	r3, [r7, #30]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	8bfa      	ldrh	r2, [r7, #30]
 8004b94:	60da      	str	r2, [r3, #12]
 8004b96:	e05b      	b.n	8004c50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b9e:	e057      	b.n	8004c50 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ba0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d828      	bhi.n	8004bfa <UART_SetConfig+0x50e>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x4c4>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004be5 	.word	0x08004be5
 8004bbc:	08004bfb 	.word	0x08004bfb
 8004bc0:	08004beb 	.word	0x08004beb
 8004bc4:	08004bfb 	.word	0x08004bfb
 8004bc8:	08004bfb 	.word	0x08004bfb
 8004bcc:	08004bfb 	.word	0x08004bfb
 8004bd0:	08004bf3 	.word	0x08004bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f7fe fdd6 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8004bd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bda:	e014      	b.n	8004c06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7fe fde8 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8004be0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004be2:	e010      	b.n	8004c06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be4:	4b26      	ldr	r3, [pc, #152]	; (8004c80 <UART_SetConfig+0x594>)
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004be8:	e00d      	b.n	8004c06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bea:	f7fe fd5d 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8004bee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bf0:	e009      	b.n	8004c06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bf8:	e005      	b.n	8004c06 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c04:	bf00      	nop
    }

    if (pclk != 0U)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d021      	beq.n	8004c50 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	4a1a      	ldr	r2, [pc, #104]	; (8004c7c <UART_SetConfig+0x590>)
 8004c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c16:	461a      	mov	r2, r3
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	441a      	add	r2, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	2b0f      	cmp	r3, #15
 8004c34:	d909      	bls.n	8004c4a <UART_SetConfig+0x55e>
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3c:	d205      	bcs.n	8004c4a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60da      	str	r2, [r3, #12]
 8004c48:	e002      	b.n	8004c50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2200      	movs	r2, #0
 8004c64:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004c6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3730      	adds	r7, #48	; 0x30
 8004c74:	46bd      	mov	sp, r7
 8004c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7a:	bf00      	nop
 8004c7c:	080087d0 	.word	0x080087d0
 8004c80:	00f42400 	.word	0x00f42400

08004c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01a      	beq.n	8004d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d82:	d10a      	bne.n	8004d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd8:	f7fd f93a 	bl	8002050 <HAL_GetTick>
 8004ddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d10e      	bne.n	8004e0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f82f 	bl	8004e5e <UART_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e025      	b.n	8004e56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d10e      	bne.n	8004e36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f819 	bl	8004e5e <UART_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e00f      	b.n	8004e56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b09c      	sub	sp, #112	; 0x70
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6e:	e0a9      	b.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	f000 80a5 	beq.w	8004fc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7a:	f7fd f8e9 	bl	8002050 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d302      	bcc.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d140      	bne.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ea4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eb0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004eb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e6      	bne.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ee2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ee4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e5      	bne.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e069      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d051      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2e:	d149      	bne.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
 8004f5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e6      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3308      	adds	r3, #8
 8004f8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f8c:	623a      	str	r2, [r7, #32]
 8004f8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	69f9      	ldr	r1, [r7, #28]
 8004f92:	6a3a      	ldr	r2, [r7, #32]
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e010      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	f43f af46 	beq.w	8004e70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3770      	adds	r7, #112	; 0x70
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b096      	sub	sp, #88	; 0x58
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2222      	movs	r2, #34	; 0x22
 8005018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d02c      	beq.n	800507e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005028:	4a42      	ldr	r2, [pc, #264]	; (8005134 <UART_Start_Receive_DMA+0x144>)
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005030:	4a41      	ldr	r2, [pc, #260]	; (8005138 <UART_Start_Receive_DMA+0x148>)
 8005032:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005038:	4a40      	ldr	r2, [pc, #256]	; (800513c <UART_Start_Receive_DMA+0x14c>)
 800503a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005040:	2200      	movs	r2, #0
 8005042:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3324      	adds	r3, #36	; 0x24
 800504e:	4619      	mov	r1, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005054:	461a      	mov	r2, r3
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	f7fd f9e0 	bl	800241c <HAL_DMA_Start_IT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2210      	movs	r2, #16
 8005066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e055      	b.n	800512a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d018      	beq.n	80050c0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a2:	657b      	str	r3, [r7, #84]	; 0x54
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ae:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e6      	bne.n	800508e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	653b      	str	r3, [r7, #80]	; 0x50
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050e0:	637a      	str	r2, [r7, #52]	; 0x34
 80050e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	613b      	str	r3, [r7, #16]
   return(result);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005114:	623a      	str	r2, [r7, #32]
 8005116:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	69f9      	ldr	r1, [r7, #28]
 800511a:	6a3a      	ldr	r2, [r7, #32]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	61bb      	str	r3, [r7, #24]
   return(result);
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3758      	adds	r7, #88	; 0x58
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	0800528f 	.word	0x0800528f
 8005138:	080053b5 	.word	0x080053b5
 800513c:	080053ed 	.word	0x080053ed

08005140 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b08f      	sub	sp, #60	; 0x3c
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	61fb      	str	r3, [r7, #28]
   return(result);
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005168:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800516c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	60bb      	str	r3, [r7, #8]
   return(result);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005190:	633b      	str	r3, [r7, #48]	; 0x30
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3308      	adds	r3, #8
 8005198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519a:	61ba      	str	r2, [r7, #24]
 800519c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6979      	ldr	r1, [r7, #20]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	613b      	str	r3, [r7, #16]
   return(result);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e5      	bne.n	800517a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80051b6:	bf00      	nop
 80051b8:	373c      	adds	r7, #60	; 0x3c
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b095      	sub	sp, #84	; 0x54
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e8:	643b      	str	r3, [r7, #64]	; 0x40
 80051ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e6      	bne.n	80051ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3308      	adds	r3, #8
 8005202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	61fb      	str	r3, [r7, #28]
   return(result);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005212:	f023 0301 	bic.w	r3, r3, #1
 8005216:	64bb      	str	r3, [r7, #72]	; 0x48
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e3      	bne.n	80051fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d118      	bne.n	800526e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	60bb      	str	r3, [r7, #8]
   return(result);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f023 0310 	bic.w	r3, r3, #16
 8005250:	647b      	str	r3, [r7, #68]	; 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6979      	ldr	r1, [r7, #20]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	613b      	str	r3, [r7, #16]
   return(result);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e6      	bne.n	800523c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005282:	bf00      	nop
 8005284:	3754      	adds	r7, #84	; 0x54
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b09c      	sub	sp, #112	; 0x70
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d171      	bne.n	800538e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80052c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80052d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e6      	bne.n	80052b2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3308      	adds	r3, #8
 80052ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	667b      	str	r3, [r7, #100]	; 0x64
 80052fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3308      	adds	r3, #8
 8005302:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005304:	647a      	str	r2, [r7, #68]	; 0x44
 8005306:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800530a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e5      	bne.n	80052e4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	623b      	str	r3, [r7, #32]
   return(result);
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532e:	663b      	str	r3, [r7, #96]	; 0x60
 8005330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005338:	633a      	str	r2, [r7, #48]	; 0x30
 800533a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800533e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	2220      	movs	r2, #32
 8005350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d118      	bne.n	800538e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	60fb      	str	r3, [r7, #12]
   return(result);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 0310 	bic.w	r3, r3, #16
 8005370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	69b9      	ldr	r1, [r7, #24]
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	617b      	str	r3, [r7, #20]
   return(result);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e6      	bne.n	800535c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005392:	2b01      	cmp	r3, #1
 8005394:	d107      	bne.n	80053a6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005398:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800539c:	4619      	mov	r1, r3
 800539e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053a0:	f7ff f998 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053a4:	e002      	b.n	80053ac <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80053a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053a8:	f7fc fa74 	bl	8001894 <HAL_UART_RxCpltCallback>
}
 80053ac:	bf00      	nop
 80053ae:	3770      	adds	r7, #112	; 0x70
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d109      	bne.n	80053de <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	4619      	mov	r1, r3
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff f97c 	bl	80046d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053dc:	e002      	b.n	80053e4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7ff f964 	bl	80046ac <HAL_UART_RxHalfCpltCallback>
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005400:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d109      	bne.n	800542c <UART_DMAError+0x40>
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b21      	cmp	r3, #33	; 0x21
 800541c:	d106      	bne.n	800542c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2200      	movs	r2, #0
 8005422:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005426:	6978      	ldr	r0, [r7, #20]
 8005428:	f7ff fe8a 	bl	8005140 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d109      	bne.n	800544e <UART_DMAError+0x62>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b22      	cmp	r3, #34	; 0x22
 800543e:	d106      	bne.n	800544e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005448:	6978      	ldr	r0, [r7, #20]
 800544a:	f7ff feba 	bl	80051c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005454:	f043 0210 	orr.w	r2, r3, #16
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800545e:	6978      	ldr	r0, [r7, #20]
 8005460:	f7ff f92e 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005464:	bf00      	nop
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f7ff f918 	bl	80046c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6979      	ldr	r1, [r7, #20]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	613b      	str	r3, [r7, #16]
   return(result);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e6      	bne.n	80054a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff f8d9 	bl	8004698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e6:	bf00      	nop
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_UARTEx_DisableFifoMode+0x16>
 800553c:	2302      	movs	r3, #2
 800553e:	e027      	b.n	8005590 <HAL_UARTEx_DisableFifoMode+0x66>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2224      	movs	r2, #36	; 0x24
 800554c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800556e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e02d      	b.n	8005610 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2224      	movs	r2, #36	; 0x24
 80055c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f84f 	bl	8005694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800562c:	2302      	movs	r3, #2
 800562e:	e02d      	b.n	800568c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2224      	movs	r2, #36	; 0x24
 800563c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f811 	bl	8005694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d108      	bne.n	80056b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056b4:	e031      	b.n	800571a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056b6:	2308      	movs	r3, #8
 80056b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056ba:	2308      	movs	r3, #8
 80056bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	0e5b      	lsrs	r3, r3, #25
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	0f5b      	lsrs	r3, r3, #29
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056de:	7bbb      	ldrb	r3, [r7, #14]
 80056e0:	7b3a      	ldrb	r2, [r7, #12]
 80056e2:	4911      	ldr	r1, [pc, #68]	; (8005728 <UARTEx_SetNbDataToProcess+0x94>)
 80056e4:	5c8a      	ldrb	r2, [r1, r2]
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056ea:	7b3a      	ldrb	r2, [r7, #12]
 80056ec:	490f      	ldr	r1, [pc, #60]	; (800572c <UARTEx_SetNbDataToProcess+0x98>)
 80056ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	7b7a      	ldrb	r2, [r7, #13]
 8005700:	4909      	ldr	r1, [pc, #36]	; (8005728 <UARTEx_SetNbDataToProcess+0x94>)
 8005702:	5c8a      	ldrb	r2, [r1, r2]
 8005704:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005708:	7b7a      	ldrb	r2, [r7, #13]
 800570a:	4908      	ldr	r1, [pc, #32]	; (800572c <UARTEx_SetNbDataToProcess+0x98>)
 800570c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800570e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005712:	b29a      	uxth	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	080087e8 	.word	0x080087e8
 800572c:	080087f0 	.word	0x080087f0

08005730 <__cvt>:
 8005730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005734:	ec55 4b10 	vmov	r4, r5, d0
 8005738:	2d00      	cmp	r5, #0
 800573a:	460e      	mov	r6, r1
 800573c:	4619      	mov	r1, r3
 800573e:	462b      	mov	r3, r5
 8005740:	bfbb      	ittet	lt
 8005742:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005746:	461d      	movlt	r5, r3
 8005748:	2300      	movge	r3, #0
 800574a:	232d      	movlt	r3, #45	; 0x2d
 800574c:	700b      	strb	r3, [r1, #0]
 800574e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005750:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005754:	4691      	mov	r9, r2
 8005756:	f023 0820 	bic.w	r8, r3, #32
 800575a:	bfbc      	itt	lt
 800575c:	4622      	movlt	r2, r4
 800575e:	4614      	movlt	r4, r2
 8005760:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005764:	d005      	beq.n	8005772 <__cvt+0x42>
 8005766:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800576a:	d100      	bne.n	800576e <__cvt+0x3e>
 800576c:	3601      	adds	r6, #1
 800576e:	2102      	movs	r1, #2
 8005770:	e000      	b.n	8005774 <__cvt+0x44>
 8005772:	2103      	movs	r1, #3
 8005774:	ab03      	add	r3, sp, #12
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	ab02      	add	r3, sp, #8
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	ec45 4b10 	vmov	d0, r4, r5
 8005780:	4653      	mov	r3, sl
 8005782:	4632      	mov	r2, r6
 8005784:	f000 ff54 	bl	8006630 <_dtoa_r>
 8005788:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800578c:	4607      	mov	r7, r0
 800578e:	d102      	bne.n	8005796 <__cvt+0x66>
 8005790:	f019 0f01 	tst.w	r9, #1
 8005794:	d022      	beq.n	80057dc <__cvt+0xac>
 8005796:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800579a:	eb07 0906 	add.w	r9, r7, r6
 800579e:	d110      	bne.n	80057c2 <__cvt+0x92>
 80057a0:	783b      	ldrb	r3, [r7, #0]
 80057a2:	2b30      	cmp	r3, #48	; 0x30
 80057a4:	d10a      	bne.n	80057bc <__cvt+0x8c>
 80057a6:	2200      	movs	r2, #0
 80057a8:	2300      	movs	r3, #0
 80057aa:	4620      	mov	r0, r4
 80057ac:	4629      	mov	r1, r5
 80057ae:	f7fb f9b3 	bl	8000b18 <__aeabi_dcmpeq>
 80057b2:	b918      	cbnz	r0, 80057bc <__cvt+0x8c>
 80057b4:	f1c6 0601 	rsb	r6, r6, #1
 80057b8:	f8ca 6000 	str.w	r6, [sl]
 80057bc:	f8da 3000 	ldr.w	r3, [sl]
 80057c0:	4499      	add	r9, r3
 80057c2:	2200      	movs	r2, #0
 80057c4:	2300      	movs	r3, #0
 80057c6:	4620      	mov	r0, r4
 80057c8:	4629      	mov	r1, r5
 80057ca:	f7fb f9a5 	bl	8000b18 <__aeabi_dcmpeq>
 80057ce:	b108      	cbz	r0, 80057d4 <__cvt+0xa4>
 80057d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80057d4:	2230      	movs	r2, #48	; 0x30
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	454b      	cmp	r3, r9
 80057da:	d307      	bcc.n	80057ec <__cvt+0xbc>
 80057dc:	9b03      	ldr	r3, [sp, #12]
 80057de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057e0:	1bdb      	subs	r3, r3, r7
 80057e2:	4638      	mov	r0, r7
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	b004      	add	sp, #16
 80057e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	9103      	str	r1, [sp, #12]
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e7f0      	b.n	80057d6 <__cvt+0xa6>

080057f4 <__exponent>:
 80057f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f6:	4603      	mov	r3, r0
 80057f8:	2900      	cmp	r1, #0
 80057fa:	bfb8      	it	lt
 80057fc:	4249      	neglt	r1, r1
 80057fe:	f803 2b02 	strb.w	r2, [r3], #2
 8005802:	bfb4      	ite	lt
 8005804:	222d      	movlt	r2, #45	; 0x2d
 8005806:	222b      	movge	r2, #43	; 0x2b
 8005808:	2909      	cmp	r1, #9
 800580a:	7042      	strb	r2, [r0, #1]
 800580c:	dd2a      	ble.n	8005864 <__exponent+0x70>
 800580e:	f10d 0207 	add.w	r2, sp, #7
 8005812:	4617      	mov	r7, r2
 8005814:	260a      	movs	r6, #10
 8005816:	4694      	mov	ip, r2
 8005818:	fb91 f5f6 	sdiv	r5, r1, r6
 800581c:	fb06 1415 	mls	r4, r6, r5, r1
 8005820:	3430      	adds	r4, #48	; 0x30
 8005822:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005826:	460c      	mov	r4, r1
 8005828:	2c63      	cmp	r4, #99	; 0x63
 800582a:	f102 32ff 	add.w	r2, r2, #4294967295
 800582e:	4629      	mov	r1, r5
 8005830:	dcf1      	bgt.n	8005816 <__exponent+0x22>
 8005832:	3130      	adds	r1, #48	; 0x30
 8005834:	f1ac 0402 	sub.w	r4, ip, #2
 8005838:	f802 1c01 	strb.w	r1, [r2, #-1]
 800583c:	1c41      	adds	r1, r0, #1
 800583e:	4622      	mov	r2, r4
 8005840:	42ba      	cmp	r2, r7
 8005842:	d30a      	bcc.n	800585a <__exponent+0x66>
 8005844:	f10d 0209 	add.w	r2, sp, #9
 8005848:	eba2 020c 	sub.w	r2, r2, ip
 800584c:	42bc      	cmp	r4, r7
 800584e:	bf88      	it	hi
 8005850:	2200      	movhi	r2, #0
 8005852:	4413      	add	r3, r2
 8005854:	1a18      	subs	r0, r3, r0
 8005856:	b003      	add	sp, #12
 8005858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800585e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005862:	e7ed      	b.n	8005840 <__exponent+0x4c>
 8005864:	2330      	movs	r3, #48	; 0x30
 8005866:	3130      	adds	r1, #48	; 0x30
 8005868:	7083      	strb	r3, [r0, #2]
 800586a:	70c1      	strb	r1, [r0, #3]
 800586c:	1d03      	adds	r3, r0, #4
 800586e:	e7f1      	b.n	8005854 <__exponent+0x60>

08005870 <_printf_float>:
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	ed2d 8b02 	vpush	{d8}
 8005878:	b08d      	sub	sp, #52	; 0x34
 800587a:	460c      	mov	r4, r1
 800587c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005880:	4616      	mov	r6, r2
 8005882:	461f      	mov	r7, r3
 8005884:	4605      	mov	r5, r0
 8005886:	f000 fdd1 	bl	800642c <_localeconv_r>
 800588a:	f8d0 a000 	ldr.w	sl, [r0]
 800588e:	4650      	mov	r0, sl
 8005890:	f7fa fd16 	bl	80002c0 <strlen>
 8005894:	2300      	movs	r3, #0
 8005896:	930a      	str	r3, [sp, #40]	; 0x28
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	9305      	str	r3, [sp, #20]
 800589c:	f8d8 3000 	ldr.w	r3, [r8]
 80058a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80058a4:	3307      	adds	r3, #7
 80058a6:	f023 0307 	bic.w	r3, r3, #7
 80058aa:	f103 0208 	add.w	r2, r3, #8
 80058ae:	f8c8 2000 	str.w	r2, [r8]
 80058b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058ba:	9307      	str	r3, [sp, #28]
 80058bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80058c0:	ee08 0a10 	vmov	s16, r0
 80058c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80058c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058cc:	4b9e      	ldr	r3, [pc, #632]	; (8005b48 <_printf_float+0x2d8>)
 80058ce:	f04f 32ff 	mov.w	r2, #4294967295
 80058d2:	f7fb f953 	bl	8000b7c <__aeabi_dcmpun>
 80058d6:	bb88      	cbnz	r0, 800593c <_printf_float+0xcc>
 80058d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058dc:	4b9a      	ldr	r3, [pc, #616]	; (8005b48 <_printf_float+0x2d8>)
 80058de:	f04f 32ff 	mov.w	r2, #4294967295
 80058e2:	f7fb f92d 	bl	8000b40 <__aeabi_dcmple>
 80058e6:	bb48      	cbnz	r0, 800593c <_printf_float+0xcc>
 80058e8:	2200      	movs	r2, #0
 80058ea:	2300      	movs	r3, #0
 80058ec:	4640      	mov	r0, r8
 80058ee:	4649      	mov	r1, r9
 80058f0:	f7fb f91c 	bl	8000b2c <__aeabi_dcmplt>
 80058f4:	b110      	cbz	r0, 80058fc <_printf_float+0x8c>
 80058f6:	232d      	movs	r3, #45	; 0x2d
 80058f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fc:	4a93      	ldr	r2, [pc, #588]	; (8005b4c <_printf_float+0x2dc>)
 80058fe:	4b94      	ldr	r3, [pc, #592]	; (8005b50 <_printf_float+0x2e0>)
 8005900:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005904:	bf94      	ite	ls
 8005906:	4690      	movls	r8, r2
 8005908:	4698      	movhi	r8, r3
 800590a:	2303      	movs	r3, #3
 800590c:	6123      	str	r3, [r4, #16]
 800590e:	9b05      	ldr	r3, [sp, #20]
 8005910:	f023 0304 	bic.w	r3, r3, #4
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	f04f 0900 	mov.w	r9, #0
 800591a:	9700      	str	r7, [sp, #0]
 800591c:	4633      	mov	r3, r6
 800591e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005920:	4621      	mov	r1, r4
 8005922:	4628      	mov	r0, r5
 8005924:	f000 f9da 	bl	8005cdc <_printf_common>
 8005928:	3001      	adds	r0, #1
 800592a:	f040 8090 	bne.w	8005a4e <_printf_float+0x1de>
 800592e:	f04f 30ff 	mov.w	r0, #4294967295
 8005932:	b00d      	add	sp, #52	; 0x34
 8005934:	ecbd 8b02 	vpop	{d8}
 8005938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	4640      	mov	r0, r8
 8005942:	4649      	mov	r1, r9
 8005944:	f7fb f91a 	bl	8000b7c <__aeabi_dcmpun>
 8005948:	b140      	cbz	r0, 800595c <_printf_float+0xec>
 800594a:	464b      	mov	r3, r9
 800594c:	2b00      	cmp	r3, #0
 800594e:	bfbc      	itt	lt
 8005950:	232d      	movlt	r3, #45	; 0x2d
 8005952:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005956:	4a7f      	ldr	r2, [pc, #508]	; (8005b54 <_printf_float+0x2e4>)
 8005958:	4b7f      	ldr	r3, [pc, #508]	; (8005b58 <_printf_float+0x2e8>)
 800595a:	e7d1      	b.n	8005900 <_printf_float+0x90>
 800595c:	6863      	ldr	r3, [r4, #4]
 800595e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005962:	9206      	str	r2, [sp, #24]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	d13f      	bne.n	80059e8 <_printf_float+0x178>
 8005968:	2306      	movs	r3, #6
 800596a:	6063      	str	r3, [r4, #4]
 800596c:	9b05      	ldr	r3, [sp, #20]
 800596e:	6861      	ldr	r1, [r4, #4]
 8005970:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005974:	2300      	movs	r3, #0
 8005976:	9303      	str	r3, [sp, #12]
 8005978:	ab0a      	add	r3, sp, #40	; 0x28
 800597a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800597e:	ab09      	add	r3, sp, #36	; 0x24
 8005980:	ec49 8b10 	vmov	d0, r8, r9
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	6022      	str	r2, [r4, #0]
 8005988:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800598c:	4628      	mov	r0, r5
 800598e:	f7ff fecf 	bl	8005730 <__cvt>
 8005992:	9b06      	ldr	r3, [sp, #24]
 8005994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005996:	2b47      	cmp	r3, #71	; 0x47
 8005998:	4680      	mov	r8, r0
 800599a:	d108      	bne.n	80059ae <_printf_float+0x13e>
 800599c:	1cc8      	adds	r0, r1, #3
 800599e:	db02      	blt.n	80059a6 <_printf_float+0x136>
 80059a0:	6863      	ldr	r3, [r4, #4]
 80059a2:	4299      	cmp	r1, r3
 80059a4:	dd41      	ble.n	8005a2a <_printf_float+0x1ba>
 80059a6:	f1ab 0302 	sub.w	r3, fp, #2
 80059aa:	fa5f fb83 	uxtb.w	fp, r3
 80059ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059b2:	d820      	bhi.n	80059f6 <_printf_float+0x186>
 80059b4:	3901      	subs	r1, #1
 80059b6:	465a      	mov	r2, fp
 80059b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059bc:	9109      	str	r1, [sp, #36]	; 0x24
 80059be:	f7ff ff19 	bl	80057f4 <__exponent>
 80059c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059c4:	1813      	adds	r3, r2, r0
 80059c6:	2a01      	cmp	r2, #1
 80059c8:	4681      	mov	r9, r0
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	dc02      	bgt.n	80059d4 <_printf_float+0x164>
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	07d2      	lsls	r2, r2, #31
 80059d2:	d501      	bpl.n	80059d8 <_printf_float+0x168>
 80059d4:	3301      	adds	r3, #1
 80059d6:	6123      	str	r3, [r4, #16]
 80059d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d09c      	beq.n	800591a <_printf_float+0xaa>
 80059e0:	232d      	movs	r3, #45	; 0x2d
 80059e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e6:	e798      	b.n	800591a <_printf_float+0xaa>
 80059e8:	9a06      	ldr	r2, [sp, #24]
 80059ea:	2a47      	cmp	r2, #71	; 0x47
 80059ec:	d1be      	bne.n	800596c <_printf_float+0xfc>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1bc      	bne.n	800596c <_printf_float+0xfc>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e7b9      	b.n	800596a <_printf_float+0xfa>
 80059f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80059fa:	d118      	bne.n	8005a2e <_printf_float+0x1be>
 80059fc:	2900      	cmp	r1, #0
 80059fe:	6863      	ldr	r3, [r4, #4]
 8005a00:	dd0b      	ble.n	8005a1a <_printf_float+0x1aa>
 8005a02:	6121      	str	r1, [r4, #16]
 8005a04:	b913      	cbnz	r3, 8005a0c <_printf_float+0x19c>
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	07d0      	lsls	r0, r2, #31
 8005a0a:	d502      	bpl.n	8005a12 <_printf_float+0x1a2>
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	440b      	add	r3, r1
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a14:	f04f 0900 	mov.w	r9, #0
 8005a18:	e7de      	b.n	80059d8 <_printf_float+0x168>
 8005a1a:	b913      	cbnz	r3, 8005a22 <_printf_float+0x1b2>
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	07d2      	lsls	r2, r2, #31
 8005a20:	d501      	bpl.n	8005a26 <_printf_float+0x1b6>
 8005a22:	3302      	adds	r3, #2
 8005a24:	e7f4      	b.n	8005a10 <_printf_float+0x1a0>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e7f2      	b.n	8005a10 <_printf_float+0x1a0>
 8005a2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a30:	4299      	cmp	r1, r3
 8005a32:	db05      	blt.n	8005a40 <_printf_float+0x1d0>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	6121      	str	r1, [r4, #16]
 8005a38:	07d8      	lsls	r0, r3, #31
 8005a3a:	d5ea      	bpl.n	8005a12 <_printf_float+0x1a2>
 8005a3c:	1c4b      	adds	r3, r1, #1
 8005a3e:	e7e7      	b.n	8005a10 <_printf_float+0x1a0>
 8005a40:	2900      	cmp	r1, #0
 8005a42:	bfd4      	ite	le
 8005a44:	f1c1 0202 	rsble	r2, r1, #2
 8005a48:	2201      	movgt	r2, #1
 8005a4a:	4413      	add	r3, r2
 8005a4c:	e7e0      	b.n	8005a10 <_printf_float+0x1a0>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	055a      	lsls	r2, r3, #21
 8005a52:	d407      	bmi.n	8005a64 <_printf_float+0x1f4>
 8005a54:	6923      	ldr	r3, [r4, #16]
 8005a56:	4642      	mov	r2, r8
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	d12c      	bne.n	8005abc <_printf_float+0x24c>
 8005a62:	e764      	b.n	800592e <_printf_float+0xbe>
 8005a64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a68:	f240 80e0 	bls.w	8005c2c <_printf_float+0x3bc>
 8005a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a70:	2200      	movs	r2, #0
 8005a72:	2300      	movs	r3, #0
 8005a74:	f7fb f850 	bl	8000b18 <__aeabi_dcmpeq>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d034      	beq.n	8005ae6 <_printf_float+0x276>
 8005a7c:	4a37      	ldr	r2, [pc, #220]	; (8005b5c <_printf_float+0x2ec>)
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	f43f af51 	beq.w	800592e <_printf_float+0xbe>
 8005a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a90:	429a      	cmp	r2, r3
 8005a92:	db02      	blt.n	8005a9a <_printf_float+0x22a>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	07d8      	lsls	r0, r3, #31
 8005a98:	d510      	bpl.n	8005abc <_printf_float+0x24c>
 8005a9a:	ee18 3a10 	vmov	r3, s16
 8005a9e:	4652      	mov	r2, sl
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	47b8      	blx	r7
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	f43f af41 	beq.w	800592e <_printf_float+0xbe>
 8005aac:	f04f 0800 	mov.w	r8, #0
 8005ab0:	f104 091a 	add.w	r9, r4, #26
 8005ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	4543      	cmp	r3, r8
 8005aba:	dc09      	bgt.n	8005ad0 <_printf_float+0x260>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	079b      	lsls	r3, r3, #30
 8005ac0:	f100 8107 	bmi.w	8005cd2 <_printf_float+0x462>
 8005ac4:	68e0      	ldr	r0, [r4, #12]
 8005ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac8:	4298      	cmp	r0, r3
 8005aca:	bfb8      	it	lt
 8005acc:	4618      	movlt	r0, r3
 8005ace:	e730      	b.n	8005932 <_printf_float+0xc2>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	464a      	mov	r2, r9
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b8      	blx	r7
 8005ada:	3001      	adds	r0, #1
 8005adc:	f43f af27 	beq.w	800592e <_printf_float+0xbe>
 8005ae0:	f108 0801 	add.w	r8, r8, #1
 8005ae4:	e7e6      	b.n	8005ab4 <_printf_float+0x244>
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	dc39      	bgt.n	8005b60 <_printf_float+0x2f0>
 8005aec:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <_printf_float+0x2ec>)
 8005aee:	2301      	movs	r3, #1
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	f43f af19 	beq.w	800592e <_printf_float+0xbe>
 8005afc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005b00:	4313      	orrs	r3, r2
 8005b02:	d102      	bne.n	8005b0a <_printf_float+0x29a>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	07d9      	lsls	r1, r3, #31
 8005b08:	d5d8      	bpl.n	8005abc <_printf_float+0x24c>
 8005b0a:	ee18 3a10 	vmov	r3, s16
 8005b0e:	4652      	mov	r2, sl
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	f43f af09 	beq.w	800592e <_printf_float+0xbe>
 8005b1c:	f04f 0900 	mov.w	r9, #0
 8005b20:	f104 0a1a 	add.w	sl, r4, #26
 8005b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b26:	425b      	negs	r3, r3
 8005b28:	454b      	cmp	r3, r9
 8005b2a:	dc01      	bgt.n	8005b30 <_printf_float+0x2c0>
 8005b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2e:	e792      	b.n	8005a56 <_printf_float+0x1e6>
 8005b30:	2301      	movs	r3, #1
 8005b32:	4652      	mov	r2, sl
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f aef7 	beq.w	800592e <_printf_float+0xbe>
 8005b40:	f109 0901 	add.w	r9, r9, #1
 8005b44:	e7ee      	b.n	8005b24 <_printf_float+0x2b4>
 8005b46:	bf00      	nop
 8005b48:	7fefffff 	.word	0x7fefffff
 8005b4c:	080087f8 	.word	0x080087f8
 8005b50:	080087fc 	.word	0x080087fc
 8005b54:	08008800 	.word	0x08008800
 8005b58:	08008804 	.word	0x08008804
 8005b5c:	08008808 	.word	0x08008808
 8005b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b64:	429a      	cmp	r2, r3
 8005b66:	bfa8      	it	ge
 8005b68:	461a      	movge	r2, r3
 8005b6a:	2a00      	cmp	r2, #0
 8005b6c:	4691      	mov	r9, r2
 8005b6e:	dc37      	bgt.n	8005be0 <_printf_float+0x370>
 8005b70:	f04f 0b00 	mov.w	fp, #0
 8005b74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b78:	f104 021a 	add.w	r2, r4, #26
 8005b7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b7e:	9305      	str	r3, [sp, #20]
 8005b80:	eba3 0309 	sub.w	r3, r3, r9
 8005b84:	455b      	cmp	r3, fp
 8005b86:	dc33      	bgt.n	8005bf0 <_printf_float+0x380>
 8005b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	db3b      	blt.n	8005c08 <_printf_float+0x398>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	07da      	lsls	r2, r3, #31
 8005b94:	d438      	bmi.n	8005c08 <_printf_float+0x398>
 8005b96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005b9a:	eba2 0903 	sub.w	r9, r2, r3
 8005b9e:	9b05      	ldr	r3, [sp, #20]
 8005ba0:	1ad2      	subs	r2, r2, r3
 8005ba2:	4591      	cmp	r9, r2
 8005ba4:	bfa8      	it	ge
 8005ba6:	4691      	movge	r9, r2
 8005ba8:	f1b9 0f00 	cmp.w	r9, #0
 8005bac:	dc35      	bgt.n	8005c1a <_printf_float+0x3aa>
 8005bae:	f04f 0800 	mov.w	r8, #0
 8005bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bb6:	f104 0a1a 	add.w	sl, r4, #26
 8005bba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	eba3 0309 	sub.w	r3, r3, r9
 8005bc4:	4543      	cmp	r3, r8
 8005bc6:	f77f af79 	ble.w	8005abc <_printf_float+0x24c>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4652      	mov	r2, sl
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f43f aeaa 	beq.w	800592e <_printf_float+0xbe>
 8005bda:	f108 0801 	add.w	r8, r8, #1
 8005bde:	e7ec      	b.n	8005bba <_printf_float+0x34a>
 8005be0:	4613      	mov	r3, r2
 8005be2:	4631      	mov	r1, r6
 8005be4:	4642      	mov	r2, r8
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	d1c0      	bne.n	8005b70 <_printf_float+0x300>
 8005bee:	e69e      	b.n	800592e <_printf_float+0xbe>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	9205      	str	r2, [sp, #20]
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f43f ae97 	beq.w	800592e <_printf_float+0xbe>
 8005c00:	9a05      	ldr	r2, [sp, #20]
 8005c02:	f10b 0b01 	add.w	fp, fp, #1
 8005c06:	e7b9      	b.n	8005b7c <_printf_float+0x30c>
 8005c08:	ee18 3a10 	vmov	r3, s16
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	d1be      	bne.n	8005b96 <_printf_float+0x326>
 8005c18:	e689      	b.n	800592e <_printf_float+0xbe>
 8005c1a:	9a05      	ldr	r2, [sp, #20]
 8005c1c:	464b      	mov	r3, r9
 8005c1e:	4442      	add	r2, r8
 8005c20:	4631      	mov	r1, r6
 8005c22:	4628      	mov	r0, r5
 8005c24:	47b8      	blx	r7
 8005c26:	3001      	adds	r0, #1
 8005c28:	d1c1      	bne.n	8005bae <_printf_float+0x33e>
 8005c2a:	e680      	b.n	800592e <_printf_float+0xbe>
 8005c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c2e:	2a01      	cmp	r2, #1
 8005c30:	dc01      	bgt.n	8005c36 <_printf_float+0x3c6>
 8005c32:	07db      	lsls	r3, r3, #31
 8005c34:	d53a      	bpl.n	8005cac <_printf_float+0x43c>
 8005c36:	2301      	movs	r3, #1
 8005c38:	4642      	mov	r2, r8
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	47b8      	blx	r7
 8005c40:	3001      	adds	r0, #1
 8005c42:	f43f ae74 	beq.w	800592e <_printf_float+0xbe>
 8005c46:	ee18 3a10 	vmov	r3, s16
 8005c4a:	4652      	mov	r2, sl
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b8      	blx	r7
 8005c52:	3001      	adds	r0, #1
 8005c54:	f43f ae6b 	beq.w	800592e <_printf_float+0xbe>
 8005c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005c64:	f7fa ff58 	bl	8000b18 <__aeabi_dcmpeq>
 8005c68:	b9d8      	cbnz	r0, 8005ca2 <_printf_float+0x432>
 8005c6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005c6e:	f108 0201 	add.w	r2, r8, #1
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d10e      	bne.n	8005c9a <_printf_float+0x42a>
 8005c7c:	e657      	b.n	800592e <_printf_float+0xbe>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4652      	mov	r2, sl
 8005c82:	4631      	mov	r1, r6
 8005c84:	4628      	mov	r0, r5
 8005c86:	47b8      	blx	r7
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f43f ae50 	beq.w	800592e <_printf_float+0xbe>
 8005c8e:	f108 0801 	add.w	r8, r8, #1
 8005c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c94:	3b01      	subs	r3, #1
 8005c96:	4543      	cmp	r3, r8
 8005c98:	dcf1      	bgt.n	8005c7e <_printf_float+0x40e>
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ca0:	e6da      	b.n	8005a58 <_printf_float+0x1e8>
 8005ca2:	f04f 0800 	mov.w	r8, #0
 8005ca6:	f104 0a1a 	add.w	sl, r4, #26
 8005caa:	e7f2      	b.n	8005c92 <_printf_float+0x422>
 8005cac:	2301      	movs	r3, #1
 8005cae:	4642      	mov	r2, r8
 8005cb0:	e7df      	b.n	8005c72 <_printf_float+0x402>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	464a      	mov	r2, r9
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b8      	blx	r7
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	f43f ae36 	beq.w	800592e <_printf_float+0xbe>
 8005cc2:	f108 0801 	add.w	r8, r8, #1
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cca:	1a5b      	subs	r3, r3, r1
 8005ccc:	4543      	cmp	r3, r8
 8005cce:	dcf0      	bgt.n	8005cb2 <_printf_float+0x442>
 8005cd0:	e6f8      	b.n	8005ac4 <_printf_float+0x254>
 8005cd2:	f04f 0800 	mov.w	r8, #0
 8005cd6:	f104 0919 	add.w	r9, r4, #25
 8005cda:	e7f4      	b.n	8005cc6 <_printf_float+0x456>

08005cdc <_printf_common>:
 8005cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	4616      	mov	r6, r2
 8005ce2:	4699      	mov	r9, r3
 8005ce4:	688a      	ldr	r2, [r1, #8]
 8005ce6:	690b      	ldr	r3, [r1, #16]
 8005ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cec:	4293      	cmp	r3, r2
 8005cee:	bfb8      	it	lt
 8005cf0:	4613      	movlt	r3, r2
 8005cf2:	6033      	str	r3, [r6, #0]
 8005cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cf8:	4607      	mov	r7, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	b10a      	cbz	r2, 8005d02 <_printf_common+0x26>
 8005cfe:	3301      	adds	r3, #1
 8005d00:	6033      	str	r3, [r6, #0]
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	0699      	lsls	r1, r3, #26
 8005d06:	bf42      	ittt	mi
 8005d08:	6833      	ldrmi	r3, [r6, #0]
 8005d0a:	3302      	addmi	r3, #2
 8005d0c:	6033      	strmi	r3, [r6, #0]
 8005d0e:	6825      	ldr	r5, [r4, #0]
 8005d10:	f015 0506 	ands.w	r5, r5, #6
 8005d14:	d106      	bne.n	8005d24 <_printf_common+0x48>
 8005d16:	f104 0a19 	add.w	sl, r4, #25
 8005d1a:	68e3      	ldr	r3, [r4, #12]
 8005d1c:	6832      	ldr	r2, [r6, #0]
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	42ab      	cmp	r3, r5
 8005d22:	dc26      	bgt.n	8005d72 <_printf_common+0x96>
 8005d24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d28:	1e13      	subs	r3, r2, #0
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	bf18      	it	ne
 8005d2e:	2301      	movne	r3, #1
 8005d30:	0692      	lsls	r2, r2, #26
 8005d32:	d42b      	bmi.n	8005d8c <_printf_common+0xb0>
 8005d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d38:	4649      	mov	r1, r9
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	47c0      	blx	r8
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d01e      	beq.n	8005d80 <_printf_common+0xa4>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	6922      	ldr	r2, [r4, #16]
 8005d46:	f003 0306 	and.w	r3, r3, #6
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	bf02      	ittt	eq
 8005d4e:	68e5      	ldreq	r5, [r4, #12]
 8005d50:	6833      	ldreq	r3, [r6, #0]
 8005d52:	1aed      	subeq	r5, r5, r3
 8005d54:	68a3      	ldr	r3, [r4, #8]
 8005d56:	bf0c      	ite	eq
 8005d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d5c:	2500      	movne	r5, #0
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	bfc4      	itt	gt
 8005d62:	1a9b      	subgt	r3, r3, r2
 8005d64:	18ed      	addgt	r5, r5, r3
 8005d66:	2600      	movs	r6, #0
 8005d68:	341a      	adds	r4, #26
 8005d6a:	42b5      	cmp	r5, r6
 8005d6c:	d11a      	bne.n	8005da4 <_printf_common+0xc8>
 8005d6e:	2000      	movs	r0, #0
 8005d70:	e008      	b.n	8005d84 <_printf_common+0xa8>
 8005d72:	2301      	movs	r3, #1
 8005d74:	4652      	mov	r2, sl
 8005d76:	4649      	mov	r1, r9
 8005d78:	4638      	mov	r0, r7
 8005d7a:	47c0      	blx	r8
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d103      	bne.n	8005d88 <_printf_common+0xac>
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d88:	3501      	adds	r5, #1
 8005d8a:	e7c6      	b.n	8005d1a <_printf_common+0x3e>
 8005d8c:	18e1      	adds	r1, r4, r3
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	2030      	movs	r0, #48	; 0x30
 8005d92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d96:	4422      	add	r2, r4
 8005d98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005da0:	3302      	adds	r3, #2
 8005da2:	e7c7      	b.n	8005d34 <_printf_common+0x58>
 8005da4:	2301      	movs	r3, #1
 8005da6:	4622      	mov	r2, r4
 8005da8:	4649      	mov	r1, r9
 8005daa:	4638      	mov	r0, r7
 8005dac:	47c0      	blx	r8
 8005dae:	3001      	adds	r0, #1
 8005db0:	d0e6      	beq.n	8005d80 <_printf_common+0xa4>
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7d9      	b.n	8005d6a <_printf_common+0x8e>
	...

08005db8 <_printf_i>:
 8005db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dbc:	7e0f      	ldrb	r7, [r1, #24]
 8005dbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dc0:	2f78      	cmp	r7, #120	; 0x78
 8005dc2:	4691      	mov	r9, r2
 8005dc4:	4680      	mov	r8, r0
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	469a      	mov	sl, r3
 8005dca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dce:	d807      	bhi.n	8005de0 <_printf_i+0x28>
 8005dd0:	2f62      	cmp	r7, #98	; 0x62
 8005dd2:	d80a      	bhi.n	8005dea <_printf_i+0x32>
 8005dd4:	2f00      	cmp	r7, #0
 8005dd6:	f000 80d4 	beq.w	8005f82 <_printf_i+0x1ca>
 8005dda:	2f58      	cmp	r7, #88	; 0x58
 8005ddc:	f000 80c0 	beq.w	8005f60 <_printf_i+0x1a8>
 8005de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005de8:	e03a      	b.n	8005e60 <_printf_i+0xa8>
 8005dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dee:	2b15      	cmp	r3, #21
 8005df0:	d8f6      	bhi.n	8005de0 <_printf_i+0x28>
 8005df2:	a101      	add	r1, pc, #4	; (adr r1, 8005df8 <_printf_i+0x40>)
 8005df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005df8:	08005e51 	.word	0x08005e51
 8005dfc:	08005e65 	.word	0x08005e65
 8005e00:	08005de1 	.word	0x08005de1
 8005e04:	08005de1 	.word	0x08005de1
 8005e08:	08005de1 	.word	0x08005de1
 8005e0c:	08005de1 	.word	0x08005de1
 8005e10:	08005e65 	.word	0x08005e65
 8005e14:	08005de1 	.word	0x08005de1
 8005e18:	08005de1 	.word	0x08005de1
 8005e1c:	08005de1 	.word	0x08005de1
 8005e20:	08005de1 	.word	0x08005de1
 8005e24:	08005f69 	.word	0x08005f69
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005f23 	.word	0x08005f23
 8005e30:	08005de1 	.word	0x08005de1
 8005e34:	08005de1 	.word	0x08005de1
 8005e38:	08005f8b 	.word	0x08005f8b
 8005e3c:	08005de1 	.word	0x08005de1
 8005e40:	08005e91 	.word	0x08005e91
 8005e44:	08005de1 	.word	0x08005de1
 8005e48:	08005de1 	.word	0x08005de1
 8005e4c:	08005f2b 	.word	0x08005f2b
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	602a      	str	r2, [r5, #0]
 8005e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e60:	2301      	movs	r3, #1
 8005e62:	e09f      	b.n	8005fa4 <_printf_i+0x1ec>
 8005e64:	6820      	ldr	r0, [r4, #0]
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	0607      	lsls	r7, r0, #24
 8005e6a:	f103 0104 	add.w	r1, r3, #4
 8005e6e:	6029      	str	r1, [r5, #0]
 8005e70:	d501      	bpl.n	8005e76 <_printf_i+0xbe>
 8005e72:	681e      	ldr	r6, [r3, #0]
 8005e74:	e003      	b.n	8005e7e <_printf_i+0xc6>
 8005e76:	0646      	lsls	r6, r0, #25
 8005e78:	d5fb      	bpl.n	8005e72 <_printf_i+0xba>
 8005e7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e7e:	2e00      	cmp	r6, #0
 8005e80:	da03      	bge.n	8005e8a <_printf_i+0xd2>
 8005e82:	232d      	movs	r3, #45	; 0x2d
 8005e84:	4276      	negs	r6, r6
 8005e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e8a:	485a      	ldr	r0, [pc, #360]	; (8005ff4 <_printf_i+0x23c>)
 8005e8c:	230a      	movs	r3, #10
 8005e8e:	e012      	b.n	8005eb6 <_printf_i+0xfe>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	6820      	ldr	r0, [r4, #0]
 8005e94:	1d19      	adds	r1, r3, #4
 8005e96:	6029      	str	r1, [r5, #0]
 8005e98:	0605      	lsls	r5, r0, #24
 8005e9a:	d501      	bpl.n	8005ea0 <_printf_i+0xe8>
 8005e9c:	681e      	ldr	r6, [r3, #0]
 8005e9e:	e002      	b.n	8005ea6 <_printf_i+0xee>
 8005ea0:	0641      	lsls	r1, r0, #25
 8005ea2:	d5fb      	bpl.n	8005e9c <_printf_i+0xe4>
 8005ea4:	881e      	ldrh	r6, [r3, #0]
 8005ea6:	4853      	ldr	r0, [pc, #332]	; (8005ff4 <_printf_i+0x23c>)
 8005ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8005eaa:	bf0c      	ite	eq
 8005eac:	2308      	moveq	r3, #8
 8005eae:	230a      	movne	r3, #10
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eb6:	6865      	ldr	r5, [r4, #4]
 8005eb8:	60a5      	str	r5, [r4, #8]
 8005eba:	2d00      	cmp	r5, #0
 8005ebc:	bfa2      	ittt	ge
 8005ebe:	6821      	ldrge	r1, [r4, #0]
 8005ec0:	f021 0104 	bicge.w	r1, r1, #4
 8005ec4:	6021      	strge	r1, [r4, #0]
 8005ec6:	b90e      	cbnz	r6, 8005ecc <_printf_i+0x114>
 8005ec8:	2d00      	cmp	r5, #0
 8005eca:	d04b      	beq.n	8005f64 <_printf_i+0x1ac>
 8005ecc:	4615      	mov	r5, r2
 8005ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8005ed6:	5dc7      	ldrb	r7, [r0, r7]
 8005ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005edc:	4637      	mov	r7, r6
 8005ede:	42bb      	cmp	r3, r7
 8005ee0:	460e      	mov	r6, r1
 8005ee2:	d9f4      	bls.n	8005ece <_printf_i+0x116>
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d10b      	bne.n	8005f00 <_printf_i+0x148>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	07de      	lsls	r6, r3, #31
 8005eec:	d508      	bpl.n	8005f00 <_printf_i+0x148>
 8005eee:	6923      	ldr	r3, [r4, #16]
 8005ef0:	6861      	ldr	r1, [r4, #4]
 8005ef2:	4299      	cmp	r1, r3
 8005ef4:	bfde      	ittt	le
 8005ef6:	2330      	movle	r3, #48	; 0x30
 8005ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f00:	1b52      	subs	r2, r2, r5
 8005f02:	6122      	str	r2, [r4, #16]
 8005f04:	f8cd a000 	str.w	sl, [sp]
 8005f08:	464b      	mov	r3, r9
 8005f0a:	aa03      	add	r2, sp, #12
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4640      	mov	r0, r8
 8005f10:	f7ff fee4 	bl	8005cdc <_printf_common>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d14a      	bne.n	8005fae <_printf_i+0x1f6>
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	b004      	add	sp, #16
 8005f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	f043 0320 	orr.w	r3, r3, #32
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	4833      	ldr	r0, [pc, #204]	; (8005ff8 <_printf_i+0x240>)
 8005f2c:	2778      	movs	r7, #120	; 0x78
 8005f2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	6829      	ldr	r1, [r5, #0]
 8005f36:	061f      	lsls	r7, r3, #24
 8005f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f3c:	d402      	bmi.n	8005f44 <_printf_i+0x18c>
 8005f3e:	065f      	lsls	r7, r3, #25
 8005f40:	bf48      	it	mi
 8005f42:	b2b6      	uxthmi	r6, r6
 8005f44:	07df      	lsls	r7, r3, #31
 8005f46:	bf48      	it	mi
 8005f48:	f043 0320 	orrmi.w	r3, r3, #32
 8005f4c:	6029      	str	r1, [r5, #0]
 8005f4e:	bf48      	it	mi
 8005f50:	6023      	strmi	r3, [r4, #0]
 8005f52:	b91e      	cbnz	r6, 8005f5c <_printf_i+0x1a4>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	f023 0320 	bic.w	r3, r3, #32
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	e7a7      	b.n	8005eb0 <_printf_i+0xf8>
 8005f60:	4824      	ldr	r0, [pc, #144]	; (8005ff4 <_printf_i+0x23c>)
 8005f62:	e7e4      	b.n	8005f2e <_printf_i+0x176>
 8005f64:	4615      	mov	r5, r2
 8005f66:	e7bd      	b.n	8005ee4 <_printf_i+0x12c>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	6826      	ldr	r6, [r4, #0]
 8005f6c:	6961      	ldr	r1, [r4, #20]
 8005f6e:	1d18      	adds	r0, r3, #4
 8005f70:	6028      	str	r0, [r5, #0]
 8005f72:	0635      	lsls	r5, r6, #24
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	d501      	bpl.n	8005f7c <_printf_i+0x1c4>
 8005f78:	6019      	str	r1, [r3, #0]
 8005f7a:	e002      	b.n	8005f82 <_printf_i+0x1ca>
 8005f7c:	0670      	lsls	r0, r6, #25
 8005f7e:	d5fb      	bpl.n	8005f78 <_printf_i+0x1c0>
 8005f80:	8019      	strh	r1, [r3, #0]
 8005f82:	2300      	movs	r3, #0
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	4615      	mov	r5, r2
 8005f88:	e7bc      	b.n	8005f04 <_printf_i+0x14c>
 8005f8a:	682b      	ldr	r3, [r5, #0]
 8005f8c:	1d1a      	adds	r2, r3, #4
 8005f8e:	602a      	str	r2, [r5, #0]
 8005f90:	681d      	ldr	r5, [r3, #0]
 8005f92:	6862      	ldr	r2, [r4, #4]
 8005f94:	2100      	movs	r1, #0
 8005f96:	4628      	mov	r0, r5
 8005f98:	f7fa f942 	bl	8000220 <memchr>
 8005f9c:	b108      	cbz	r0, 8005fa2 <_printf_i+0x1ea>
 8005f9e:	1b40      	subs	r0, r0, r5
 8005fa0:	6060      	str	r0, [r4, #4]
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	6123      	str	r3, [r4, #16]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fac:	e7aa      	b.n	8005f04 <_printf_i+0x14c>
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	462a      	mov	r2, r5
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	47d0      	blx	sl
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d0ad      	beq.n	8005f18 <_printf_i+0x160>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	079b      	lsls	r3, r3, #30
 8005fc0:	d413      	bmi.n	8005fea <_printf_i+0x232>
 8005fc2:	68e0      	ldr	r0, [r4, #12]
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	4298      	cmp	r0, r3
 8005fc8:	bfb8      	it	lt
 8005fca:	4618      	movlt	r0, r3
 8005fcc:	e7a6      	b.n	8005f1c <_printf_i+0x164>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4632      	mov	r2, r6
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	47d0      	blx	sl
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d09d      	beq.n	8005f18 <_printf_i+0x160>
 8005fdc:	3501      	adds	r5, #1
 8005fde:	68e3      	ldr	r3, [r4, #12]
 8005fe0:	9903      	ldr	r1, [sp, #12]
 8005fe2:	1a5b      	subs	r3, r3, r1
 8005fe4:	42ab      	cmp	r3, r5
 8005fe6:	dcf2      	bgt.n	8005fce <_printf_i+0x216>
 8005fe8:	e7eb      	b.n	8005fc2 <_printf_i+0x20a>
 8005fea:	2500      	movs	r5, #0
 8005fec:	f104 0619 	add.w	r6, r4, #25
 8005ff0:	e7f5      	b.n	8005fde <_printf_i+0x226>
 8005ff2:	bf00      	nop
 8005ff4:	0800880a 	.word	0x0800880a
 8005ff8:	0800881b 	.word	0x0800881b

08005ffc <std>:
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	b510      	push	{r4, lr}
 8006000:	4604      	mov	r4, r0
 8006002:	e9c0 3300 	strd	r3, r3, [r0]
 8006006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800600a:	6083      	str	r3, [r0, #8]
 800600c:	8181      	strh	r1, [r0, #12]
 800600e:	6643      	str	r3, [r0, #100]	; 0x64
 8006010:	81c2      	strh	r2, [r0, #14]
 8006012:	6183      	str	r3, [r0, #24]
 8006014:	4619      	mov	r1, r3
 8006016:	2208      	movs	r2, #8
 8006018:	305c      	adds	r0, #92	; 0x5c
 800601a:	f000 f9ff 	bl	800641c <memset>
 800601e:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <std+0x58>)
 8006020:	6263      	str	r3, [r4, #36]	; 0x24
 8006022:	4b0d      	ldr	r3, [pc, #52]	; (8006058 <std+0x5c>)
 8006024:	62a3      	str	r3, [r4, #40]	; 0x28
 8006026:	4b0d      	ldr	r3, [pc, #52]	; (800605c <std+0x60>)
 8006028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800602a:	4b0d      	ldr	r3, [pc, #52]	; (8006060 <std+0x64>)
 800602c:	6323      	str	r3, [r4, #48]	; 0x30
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <std+0x68>)
 8006030:	6224      	str	r4, [r4, #32]
 8006032:	429c      	cmp	r4, r3
 8006034:	d006      	beq.n	8006044 <std+0x48>
 8006036:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800603a:	4294      	cmp	r4, r2
 800603c:	d002      	beq.n	8006044 <std+0x48>
 800603e:	33d0      	adds	r3, #208	; 0xd0
 8006040:	429c      	cmp	r4, r3
 8006042:	d105      	bne.n	8006050 <std+0x54>
 8006044:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800604c:	f000 ba62 	b.w	8006514 <__retarget_lock_init_recursive>
 8006050:	bd10      	pop	{r4, pc}
 8006052:	bf00      	nop
 8006054:	0800626d 	.word	0x0800626d
 8006058:	0800628f 	.word	0x0800628f
 800605c:	080062c7 	.word	0x080062c7
 8006060:	080062eb 	.word	0x080062eb
 8006064:	20001b1c 	.word	0x20001b1c

08006068 <stdio_exit_handler>:
 8006068:	4a02      	ldr	r2, [pc, #8]	; (8006074 <stdio_exit_handler+0xc>)
 800606a:	4903      	ldr	r1, [pc, #12]	; (8006078 <stdio_exit_handler+0x10>)
 800606c:	4803      	ldr	r0, [pc, #12]	; (800607c <stdio_exit_handler+0x14>)
 800606e:	f000 b869 	b.w	8006144 <_fwalk_sglue>
 8006072:	bf00      	nop
 8006074:	2000000c 	.word	0x2000000c
 8006078:	08007ea1 	.word	0x08007ea1
 800607c:	20000018 	.word	0x20000018

08006080 <cleanup_stdio>:
 8006080:	6841      	ldr	r1, [r0, #4]
 8006082:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <cleanup_stdio+0x34>)
 8006084:	4299      	cmp	r1, r3
 8006086:	b510      	push	{r4, lr}
 8006088:	4604      	mov	r4, r0
 800608a:	d001      	beq.n	8006090 <cleanup_stdio+0x10>
 800608c:	f001 ff08 	bl	8007ea0 <_fflush_r>
 8006090:	68a1      	ldr	r1, [r4, #8]
 8006092:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <cleanup_stdio+0x38>)
 8006094:	4299      	cmp	r1, r3
 8006096:	d002      	beq.n	800609e <cleanup_stdio+0x1e>
 8006098:	4620      	mov	r0, r4
 800609a:	f001 ff01 	bl	8007ea0 <_fflush_r>
 800609e:	68e1      	ldr	r1, [r4, #12]
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <cleanup_stdio+0x3c>)
 80060a2:	4299      	cmp	r1, r3
 80060a4:	d004      	beq.n	80060b0 <cleanup_stdio+0x30>
 80060a6:	4620      	mov	r0, r4
 80060a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ac:	f001 bef8 	b.w	8007ea0 <_fflush_r>
 80060b0:	bd10      	pop	{r4, pc}
 80060b2:	bf00      	nop
 80060b4:	20001b1c 	.word	0x20001b1c
 80060b8:	20001b84 	.word	0x20001b84
 80060bc:	20001bec 	.word	0x20001bec

080060c0 <global_stdio_init.part.0>:
 80060c0:	b510      	push	{r4, lr}
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <global_stdio_init.part.0+0x30>)
 80060c4:	4c0b      	ldr	r4, [pc, #44]	; (80060f4 <global_stdio_init.part.0+0x34>)
 80060c6:	4a0c      	ldr	r2, [pc, #48]	; (80060f8 <global_stdio_init.part.0+0x38>)
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	4620      	mov	r0, r4
 80060cc:	2200      	movs	r2, #0
 80060ce:	2104      	movs	r1, #4
 80060d0:	f7ff ff94 	bl	8005ffc <std>
 80060d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80060d8:	2201      	movs	r2, #1
 80060da:	2109      	movs	r1, #9
 80060dc:	f7ff ff8e 	bl	8005ffc <std>
 80060e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80060e4:	2202      	movs	r2, #2
 80060e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ea:	2112      	movs	r1, #18
 80060ec:	f7ff bf86 	b.w	8005ffc <std>
 80060f0:	20001c54 	.word	0x20001c54
 80060f4:	20001b1c 	.word	0x20001b1c
 80060f8:	08006069 	.word	0x08006069

080060fc <__sfp_lock_acquire>:
 80060fc:	4801      	ldr	r0, [pc, #4]	; (8006104 <__sfp_lock_acquire+0x8>)
 80060fe:	f000 ba0a 	b.w	8006516 <__retarget_lock_acquire_recursive>
 8006102:	bf00      	nop
 8006104:	20001c5d 	.word	0x20001c5d

08006108 <__sfp_lock_release>:
 8006108:	4801      	ldr	r0, [pc, #4]	; (8006110 <__sfp_lock_release+0x8>)
 800610a:	f000 ba05 	b.w	8006518 <__retarget_lock_release_recursive>
 800610e:	bf00      	nop
 8006110:	20001c5d 	.word	0x20001c5d

08006114 <__sinit>:
 8006114:	b510      	push	{r4, lr}
 8006116:	4604      	mov	r4, r0
 8006118:	f7ff fff0 	bl	80060fc <__sfp_lock_acquire>
 800611c:	6a23      	ldr	r3, [r4, #32]
 800611e:	b11b      	cbz	r3, 8006128 <__sinit+0x14>
 8006120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006124:	f7ff bff0 	b.w	8006108 <__sfp_lock_release>
 8006128:	4b04      	ldr	r3, [pc, #16]	; (800613c <__sinit+0x28>)
 800612a:	6223      	str	r3, [r4, #32]
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <__sinit+0x2c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1f5      	bne.n	8006120 <__sinit+0xc>
 8006134:	f7ff ffc4 	bl	80060c0 <global_stdio_init.part.0>
 8006138:	e7f2      	b.n	8006120 <__sinit+0xc>
 800613a:	bf00      	nop
 800613c:	08006081 	.word	0x08006081
 8006140:	20001c54 	.word	0x20001c54

08006144 <_fwalk_sglue>:
 8006144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006148:	4607      	mov	r7, r0
 800614a:	4688      	mov	r8, r1
 800614c:	4614      	mov	r4, r2
 800614e:	2600      	movs	r6, #0
 8006150:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006154:	f1b9 0901 	subs.w	r9, r9, #1
 8006158:	d505      	bpl.n	8006166 <_fwalk_sglue+0x22>
 800615a:	6824      	ldr	r4, [r4, #0]
 800615c:	2c00      	cmp	r4, #0
 800615e:	d1f7      	bne.n	8006150 <_fwalk_sglue+0xc>
 8006160:	4630      	mov	r0, r6
 8006162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006166:	89ab      	ldrh	r3, [r5, #12]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d907      	bls.n	800617c <_fwalk_sglue+0x38>
 800616c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006170:	3301      	adds	r3, #1
 8006172:	d003      	beq.n	800617c <_fwalk_sglue+0x38>
 8006174:	4629      	mov	r1, r5
 8006176:	4638      	mov	r0, r7
 8006178:	47c0      	blx	r8
 800617a:	4306      	orrs	r6, r0
 800617c:	3568      	adds	r5, #104	; 0x68
 800617e:	e7e9      	b.n	8006154 <_fwalk_sglue+0x10>

08006180 <iprintf>:
 8006180:	b40f      	push	{r0, r1, r2, r3}
 8006182:	b507      	push	{r0, r1, r2, lr}
 8006184:	4906      	ldr	r1, [pc, #24]	; (80061a0 <iprintf+0x20>)
 8006186:	ab04      	add	r3, sp, #16
 8006188:	6808      	ldr	r0, [r1, #0]
 800618a:	f853 2b04 	ldr.w	r2, [r3], #4
 800618e:	6881      	ldr	r1, [r0, #8]
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	f001 fce5 	bl	8007b60 <_vfiprintf_r>
 8006196:	b003      	add	sp, #12
 8006198:	f85d eb04 	ldr.w	lr, [sp], #4
 800619c:	b004      	add	sp, #16
 800619e:	4770      	bx	lr
 80061a0:	20000064 	.word	0x20000064

080061a4 <putchar>:
 80061a4:	4b02      	ldr	r3, [pc, #8]	; (80061b0 <putchar+0xc>)
 80061a6:	4601      	mov	r1, r0
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	6882      	ldr	r2, [r0, #8]
 80061ac:	f001 bf02 	b.w	8007fb4 <_putc_r>
 80061b0:	20000064 	.word	0x20000064

080061b4 <_puts_r>:
 80061b4:	6a03      	ldr	r3, [r0, #32]
 80061b6:	b570      	push	{r4, r5, r6, lr}
 80061b8:	6884      	ldr	r4, [r0, #8]
 80061ba:	4605      	mov	r5, r0
 80061bc:	460e      	mov	r6, r1
 80061be:	b90b      	cbnz	r3, 80061c4 <_puts_r+0x10>
 80061c0:	f7ff ffa8 	bl	8006114 <__sinit>
 80061c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061c6:	07db      	lsls	r3, r3, #31
 80061c8:	d405      	bmi.n	80061d6 <_puts_r+0x22>
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	0598      	lsls	r0, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_puts_r+0x22>
 80061d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d2:	f000 f9a0 	bl	8006516 <__retarget_lock_acquire_recursive>
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	0719      	lsls	r1, r3, #28
 80061da:	d513      	bpl.n	8006204 <_puts_r+0x50>
 80061dc:	6923      	ldr	r3, [r4, #16]
 80061de:	b18b      	cbz	r3, 8006204 <_puts_r+0x50>
 80061e0:	3e01      	subs	r6, #1
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061e8:	3b01      	subs	r3, #1
 80061ea:	60a3      	str	r3, [r4, #8]
 80061ec:	b9e9      	cbnz	r1, 800622a <_puts_r+0x76>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	da2e      	bge.n	8006250 <_puts_r+0x9c>
 80061f2:	4622      	mov	r2, r4
 80061f4:	210a      	movs	r1, #10
 80061f6:	4628      	mov	r0, r5
 80061f8:	f000 f87b 	bl	80062f2 <__swbuf_r>
 80061fc:	3001      	adds	r0, #1
 80061fe:	d007      	beq.n	8006210 <_puts_r+0x5c>
 8006200:	250a      	movs	r5, #10
 8006202:	e007      	b.n	8006214 <_puts_r+0x60>
 8006204:	4621      	mov	r1, r4
 8006206:	4628      	mov	r0, r5
 8006208:	f000 f8b0 	bl	800636c <__swsetup_r>
 800620c:	2800      	cmp	r0, #0
 800620e:	d0e7      	beq.n	80061e0 <_puts_r+0x2c>
 8006210:	f04f 35ff 	mov.w	r5, #4294967295
 8006214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006216:	07da      	lsls	r2, r3, #31
 8006218:	d405      	bmi.n	8006226 <_puts_r+0x72>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	059b      	lsls	r3, r3, #22
 800621e:	d402      	bmi.n	8006226 <_puts_r+0x72>
 8006220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006222:	f000 f979 	bl	8006518 <__retarget_lock_release_recursive>
 8006226:	4628      	mov	r0, r5
 8006228:	bd70      	pop	{r4, r5, r6, pc}
 800622a:	2b00      	cmp	r3, #0
 800622c:	da04      	bge.n	8006238 <_puts_r+0x84>
 800622e:	69a2      	ldr	r2, [r4, #24]
 8006230:	429a      	cmp	r2, r3
 8006232:	dc06      	bgt.n	8006242 <_puts_r+0x8e>
 8006234:	290a      	cmp	r1, #10
 8006236:	d004      	beq.n	8006242 <_puts_r+0x8e>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	6022      	str	r2, [r4, #0]
 800623e:	7019      	strb	r1, [r3, #0]
 8006240:	e7cf      	b.n	80061e2 <_puts_r+0x2e>
 8006242:	4622      	mov	r2, r4
 8006244:	4628      	mov	r0, r5
 8006246:	f000 f854 	bl	80062f2 <__swbuf_r>
 800624a:	3001      	adds	r0, #1
 800624c:	d1c9      	bne.n	80061e2 <_puts_r+0x2e>
 800624e:	e7df      	b.n	8006210 <_puts_r+0x5c>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	250a      	movs	r5, #10
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	6022      	str	r2, [r4, #0]
 8006258:	701d      	strb	r5, [r3, #0]
 800625a:	e7db      	b.n	8006214 <_puts_r+0x60>

0800625c <puts>:
 800625c:	4b02      	ldr	r3, [pc, #8]	; (8006268 <puts+0xc>)
 800625e:	4601      	mov	r1, r0
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	f7ff bfa7 	b.w	80061b4 <_puts_r>
 8006266:	bf00      	nop
 8006268:	20000064 	.word	0x20000064

0800626c <__sread>:
 800626c:	b510      	push	{r4, lr}
 800626e:	460c      	mov	r4, r1
 8006270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006274:	f000 f900 	bl	8006478 <_read_r>
 8006278:	2800      	cmp	r0, #0
 800627a:	bfab      	itete	ge
 800627c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800627e:	89a3      	ldrhlt	r3, [r4, #12]
 8006280:	181b      	addge	r3, r3, r0
 8006282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006286:	bfac      	ite	ge
 8006288:	6563      	strge	r3, [r4, #84]	; 0x54
 800628a:	81a3      	strhlt	r3, [r4, #12]
 800628c:	bd10      	pop	{r4, pc}

0800628e <__swrite>:
 800628e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006292:	461f      	mov	r7, r3
 8006294:	898b      	ldrh	r3, [r1, #12]
 8006296:	05db      	lsls	r3, r3, #23
 8006298:	4605      	mov	r5, r0
 800629a:	460c      	mov	r4, r1
 800629c:	4616      	mov	r6, r2
 800629e:	d505      	bpl.n	80062ac <__swrite+0x1e>
 80062a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a4:	2302      	movs	r3, #2
 80062a6:	2200      	movs	r2, #0
 80062a8:	f000 f8d4 	bl	8006454 <_lseek_r>
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062b6:	81a3      	strh	r3, [r4, #12]
 80062b8:	4632      	mov	r2, r6
 80062ba:	463b      	mov	r3, r7
 80062bc:	4628      	mov	r0, r5
 80062be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062c2:	f000 b8eb 	b.w	800649c <_write_r>

080062c6 <__sseek>:
 80062c6:	b510      	push	{r4, lr}
 80062c8:	460c      	mov	r4, r1
 80062ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ce:	f000 f8c1 	bl	8006454 <_lseek_r>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	bf15      	itete	ne
 80062d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80062da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062e2:	81a3      	strheq	r3, [r4, #12]
 80062e4:	bf18      	it	ne
 80062e6:	81a3      	strhne	r3, [r4, #12]
 80062e8:	bd10      	pop	{r4, pc}

080062ea <__sclose>:
 80062ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ee:	f000 b8a1 	b.w	8006434 <_close_r>

080062f2 <__swbuf_r>:
 80062f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f4:	460e      	mov	r6, r1
 80062f6:	4614      	mov	r4, r2
 80062f8:	4605      	mov	r5, r0
 80062fa:	b118      	cbz	r0, 8006304 <__swbuf_r+0x12>
 80062fc:	6a03      	ldr	r3, [r0, #32]
 80062fe:	b90b      	cbnz	r3, 8006304 <__swbuf_r+0x12>
 8006300:	f7ff ff08 	bl	8006114 <__sinit>
 8006304:	69a3      	ldr	r3, [r4, #24]
 8006306:	60a3      	str	r3, [r4, #8]
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	071a      	lsls	r2, r3, #28
 800630c:	d525      	bpl.n	800635a <__swbuf_r+0x68>
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	b31b      	cbz	r3, 800635a <__swbuf_r+0x68>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	6922      	ldr	r2, [r4, #16]
 8006316:	1a98      	subs	r0, r3, r2
 8006318:	6963      	ldr	r3, [r4, #20]
 800631a:	b2f6      	uxtb	r6, r6
 800631c:	4283      	cmp	r3, r0
 800631e:	4637      	mov	r7, r6
 8006320:	dc04      	bgt.n	800632c <__swbuf_r+0x3a>
 8006322:	4621      	mov	r1, r4
 8006324:	4628      	mov	r0, r5
 8006326:	f001 fdbb 	bl	8007ea0 <_fflush_r>
 800632a:	b9e0      	cbnz	r0, 8006366 <__swbuf_r+0x74>
 800632c:	68a3      	ldr	r3, [r4, #8]
 800632e:	3b01      	subs	r3, #1
 8006330:	60a3      	str	r3, [r4, #8]
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	6022      	str	r2, [r4, #0]
 8006338:	701e      	strb	r6, [r3, #0]
 800633a:	6962      	ldr	r2, [r4, #20]
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	429a      	cmp	r2, r3
 8006340:	d004      	beq.n	800634c <__swbuf_r+0x5a>
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	07db      	lsls	r3, r3, #31
 8006346:	d506      	bpl.n	8006356 <__swbuf_r+0x64>
 8006348:	2e0a      	cmp	r6, #10
 800634a:	d104      	bne.n	8006356 <__swbuf_r+0x64>
 800634c:	4621      	mov	r1, r4
 800634e:	4628      	mov	r0, r5
 8006350:	f001 fda6 	bl	8007ea0 <_fflush_r>
 8006354:	b938      	cbnz	r0, 8006366 <__swbuf_r+0x74>
 8006356:	4638      	mov	r0, r7
 8006358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800635a:	4621      	mov	r1, r4
 800635c:	4628      	mov	r0, r5
 800635e:	f000 f805 	bl	800636c <__swsetup_r>
 8006362:	2800      	cmp	r0, #0
 8006364:	d0d5      	beq.n	8006312 <__swbuf_r+0x20>
 8006366:	f04f 37ff 	mov.w	r7, #4294967295
 800636a:	e7f4      	b.n	8006356 <__swbuf_r+0x64>

0800636c <__swsetup_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <__swsetup_r+0xac>)
 8006370:	4605      	mov	r5, r0
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	460c      	mov	r4, r1
 8006376:	b118      	cbz	r0, 8006380 <__swsetup_r+0x14>
 8006378:	6a03      	ldr	r3, [r0, #32]
 800637a:	b90b      	cbnz	r3, 8006380 <__swsetup_r+0x14>
 800637c:	f7ff feca 	bl	8006114 <__sinit>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006386:	0718      	lsls	r0, r3, #28
 8006388:	d422      	bmi.n	80063d0 <__swsetup_r+0x64>
 800638a:	06d9      	lsls	r1, r3, #27
 800638c:	d407      	bmi.n	800639e <__swsetup_r+0x32>
 800638e:	2309      	movs	r3, #9
 8006390:	602b      	str	r3, [r5, #0]
 8006392:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006396:	81a3      	strh	r3, [r4, #12]
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
 800639c:	e034      	b.n	8006408 <__swsetup_r+0x9c>
 800639e:	0758      	lsls	r0, r3, #29
 80063a0:	d512      	bpl.n	80063c8 <__swsetup_r+0x5c>
 80063a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063a4:	b141      	cbz	r1, 80063b8 <__swsetup_r+0x4c>
 80063a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063aa:	4299      	cmp	r1, r3
 80063ac:	d002      	beq.n	80063b4 <__swsetup_r+0x48>
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 ff30 	bl	8007214 <_free_r>
 80063b4:	2300      	movs	r3, #0
 80063b6:	6363      	str	r3, [r4, #52]	; 0x34
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	2300      	movs	r3, #0
 80063c2:	6063      	str	r3, [r4, #4]
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	6023      	str	r3, [r4, #0]
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	f043 0308 	orr.w	r3, r3, #8
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	b94b      	cbnz	r3, 80063e8 <__swsetup_r+0x7c>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063de:	d003      	beq.n	80063e8 <__swsetup_r+0x7c>
 80063e0:	4621      	mov	r1, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	f001 fdaa 	bl	8007f3c <__smakebuf_r>
 80063e8:	89a0      	ldrh	r0, [r4, #12]
 80063ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063ee:	f010 0301 	ands.w	r3, r0, #1
 80063f2:	d00a      	beq.n	800640a <__swsetup_r+0x9e>
 80063f4:	2300      	movs	r3, #0
 80063f6:	60a3      	str	r3, [r4, #8]
 80063f8:	6963      	ldr	r3, [r4, #20]
 80063fa:	425b      	negs	r3, r3
 80063fc:	61a3      	str	r3, [r4, #24]
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	b943      	cbnz	r3, 8006414 <__swsetup_r+0xa8>
 8006402:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006406:	d1c4      	bne.n	8006392 <__swsetup_r+0x26>
 8006408:	bd38      	pop	{r3, r4, r5, pc}
 800640a:	0781      	lsls	r1, r0, #30
 800640c:	bf58      	it	pl
 800640e:	6963      	ldrpl	r3, [r4, #20]
 8006410:	60a3      	str	r3, [r4, #8]
 8006412:	e7f4      	b.n	80063fe <__swsetup_r+0x92>
 8006414:	2000      	movs	r0, #0
 8006416:	e7f7      	b.n	8006408 <__swsetup_r+0x9c>
 8006418:	20000064 	.word	0x20000064

0800641c <memset>:
 800641c:	4402      	add	r2, r0
 800641e:	4603      	mov	r3, r0
 8006420:	4293      	cmp	r3, r2
 8006422:	d100      	bne.n	8006426 <memset+0xa>
 8006424:	4770      	bx	lr
 8006426:	f803 1b01 	strb.w	r1, [r3], #1
 800642a:	e7f9      	b.n	8006420 <memset+0x4>

0800642c <_localeconv_r>:
 800642c:	4800      	ldr	r0, [pc, #0]	; (8006430 <_localeconv_r+0x4>)
 800642e:	4770      	bx	lr
 8006430:	20000158 	.word	0x20000158

08006434 <_close_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4d06      	ldr	r5, [pc, #24]	; (8006450 <_close_r+0x1c>)
 8006438:	2300      	movs	r3, #0
 800643a:	4604      	mov	r4, r0
 800643c:	4608      	mov	r0, r1
 800643e:	602b      	str	r3, [r5, #0]
 8006440:	f7fb fb99 	bl	8001b76 <_close>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d102      	bne.n	800644e <_close_r+0x1a>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	b103      	cbz	r3, 800644e <_close_r+0x1a>
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	20001c58 	.word	0x20001c58

08006454 <_lseek_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d07      	ldr	r5, [pc, #28]	; (8006474 <_lseek_r+0x20>)
 8006458:	4604      	mov	r4, r0
 800645a:	4608      	mov	r0, r1
 800645c:	4611      	mov	r1, r2
 800645e:	2200      	movs	r2, #0
 8006460:	602a      	str	r2, [r5, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	f7fb fbae 	bl	8001bc4 <_lseek>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_lseek_r+0x1e>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_lseek_r+0x1e>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	20001c58 	.word	0x20001c58

08006478 <_read_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d07      	ldr	r5, [pc, #28]	; (8006498 <_read_r+0x20>)
 800647c:	4604      	mov	r4, r0
 800647e:	4608      	mov	r0, r1
 8006480:	4611      	mov	r1, r2
 8006482:	2200      	movs	r2, #0
 8006484:	602a      	str	r2, [r5, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	f7fb fb3c 	bl	8001b04 <_read>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_read_r+0x1e>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_read_r+0x1e>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	20001c58 	.word	0x20001c58

0800649c <_write_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d07      	ldr	r5, [pc, #28]	; (80064bc <_write_r+0x20>)
 80064a0:	4604      	mov	r4, r0
 80064a2:	4608      	mov	r0, r1
 80064a4:	4611      	mov	r1, r2
 80064a6:	2200      	movs	r2, #0
 80064a8:	602a      	str	r2, [r5, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f7fb fb47 	bl	8001b3e <_write>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_write_r+0x1e>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_write_r+0x1e>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	20001c58 	.word	0x20001c58

080064c0 <__errno>:
 80064c0:	4b01      	ldr	r3, [pc, #4]	; (80064c8 <__errno+0x8>)
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20000064 	.word	0x20000064

080064cc <__libc_init_array>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4d0d      	ldr	r5, [pc, #52]	; (8006504 <__libc_init_array+0x38>)
 80064d0:	4c0d      	ldr	r4, [pc, #52]	; (8006508 <__libc_init_array+0x3c>)
 80064d2:	1b64      	subs	r4, r4, r5
 80064d4:	10a4      	asrs	r4, r4, #2
 80064d6:	2600      	movs	r6, #0
 80064d8:	42a6      	cmp	r6, r4
 80064da:	d109      	bne.n	80064f0 <__libc_init_array+0x24>
 80064dc:	4d0b      	ldr	r5, [pc, #44]	; (800650c <__libc_init_array+0x40>)
 80064de:	4c0c      	ldr	r4, [pc, #48]	; (8006510 <__libc_init_array+0x44>)
 80064e0:	f002 f838 	bl	8008554 <_init>
 80064e4:	1b64      	subs	r4, r4, r5
 80064e6:	10a4      	asrs	r4, r4, #2
 80064e8:	2600      	movs	r6, #0
 80064ea:	42a6      	cmp	r6, r4
 80064ec:	d105      	bne.n	80064fa <__libc_init_array+0x2e>
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f4:	4798      	blx	r3
 80064f6:	3601      	adds	r6, #1
 80064f8:	e7ee      	b.n	80064d8 <__libc_init_array+0xc>
 80064fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fe:	4798      	blx	r3
 8006500:	3601      	adds	r6, #1
 8006502:	e7f2      	b.n	80064ea <__libc_init_array+0x1e>
 8006504:	08008bb8 	.word	0x08008bb8
 8006508:	08008bb8 	.word	0x08008bb8
 800650c:	08008bb8 	.word	0x08008bb8
 8006510:	08008bbc 	.word	0x08008bbc

08006514 <__retarget_lock_init_recursive>:
 8006514:	4770      	bx	lr

08006516 <__retarget_lock_acquire_recursive>:
 8006516:	4770      	bx	lr

08006518 <__retarget_lock_release_recursive>:
 8006518:	4770      	bx	lr

0800651a <quorem>:
 800651a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651e:	6903      	ldr	r3, [r0, #16]
 8006520:	690c      	ldr	r4, [r1, #16]
 8006522:	42a3      	cmp	r3, r4
 8006524:	4607      	mov	r7, r0
 8006526:	db7e      	blt.n	8006626 <quorem+0x10c>
 8006528:	3c01      	subs	r4, #1
 800652a:	f101 0814 	add.w	r8, r1, #20
 800652e:	f100 0514 	add.w	r5, r0, #20
 8006532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800653c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006540:	3301      	adds	r3, #1
 8006542:	429a      	cmp	r2, r3
 8006544:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006548:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800654c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006550:	d331      	bcc.n	80065b6 <quorem+0x9c>
 8006552:	f04f 0e00 	mov.w	lr, #0
 8006556:	4640      	mov	r0, r8
 8006558:	46ac      	mov	ip, r5
 800655a:	46f2      	mov	sl, lr
 800655c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006560:	b293      	uxth	r3, r2
 8006562:	fb06 e303 	mla	r3, r6, r3, lr
 8006566:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800656a:	0c1a      	lsrs	r2, r3, #16
 800656c:	b29b      	uxth	r3, r3
 800656e:	ebaa 0303 	sub.w	r3, sl, r3
 8006572:	f8dc a000 	ldr.w	sl, [ip]
 8006576:	fa13 f38a 	uxtah	r3, r3, sl
 800657a:	fb06 220e 	mla	r2, r6, lr, r2
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	9b00      	ldr	r3, [sp, #0]
 8006582:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006586:	b292      	uxth	r2, r2
 8006588:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800658c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006590:	f8bd 3000 	ldrh.w	r3, [sp]
 8006594:	4581      	cmp	r9, r0
 8006596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800659a:	f84c 3b04 	str.w	r3, [ip], #4
 800659e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065a2:	d2db      	bcs.n	800655c <quorem+0x42>
 80065a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80065a8:	b92b      	cbnz	r3, 80065b6 <quorem+0x9c>
 80065aa:	9b01      	ldr	r3, [sp, #4]
 80065ac:	3b04      	subs	r3, #4
 80065ae:	429d      	cmp	r5, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	d32c      	bcc.n	800660e <quorem+0xf4>
 80065b4:	613c      	str	r4, [r7, #16]
 80065b6:	4638      	mov	r0, r7
 80065b8:	f001 f9a8 	bl	800790c <__mcmp>
 80065bc:	2800      	cmp	r0, #0
 80065be:	db22      	blt.n	8006606 <quorem+0xec>
 80065c0:	3601      	adds	r6, #1
 80065c2:	4629      	mov	r1, r5
 80065c4:	2000      	movs	r0, #0
 80065c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80065ca:	f8d1 c000 	ldr.w	ip, [r1]
 80065ce:	b293      	uxth	r3, r2
 80065d0:	1ac3      	subs	r3, r0, r3
 80065d2:	0c12      	lsrs	r2, r2, #16
 80065d4:	fa13 f38c 	uxtah	r3, r3, ip
 80065d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80065dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065e6:	45c1      	cmp	r9, r8
 80065e8:	f841 3b04 	str.w	r3, [r1], #4
 80065ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065f0:	d2e9      	bcs.n	80065c6 <quorem+0xac>
 80065f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065fa:	b922      	cbnz	r2, 8006606 <quorem+0xec>
 80065fc:	3b04      	subs	r3, #4
 80065fe:	429d      	cmp	r5, r3
 8006600:	461a      	mov	r2, r3
 8006602:	d30a      	bcc.n	800661a <quorem+0x100>
 8006604:	613c      	str	r4, [r7, #16]
 8006606:	4630      	mov	r0, r6
 8006608:	b003      	add	sp, #12
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	3b04      	subs	r3, #4
 8006612:	2a00      	cmp	r2, #0
 8006614:	d1ce      	bne.n	80065b4 <quorem+0x9a>
 8006616:	3c01      	subs	r4, #1
 8006618:	e7c9      	b.n	80065ae <quorem+0x94>
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	3b04      	subs	r3, #4
 800661e:	2a00      	cmp	r2, #0
 8006620:	d1f0      	bne.n	8006604 <quorem+0xea>
 8006622:	3c01      	subs	r4, #1
 8006624:	e7eb      	b.n	80065fe <quorem+0xe4>
 8006626:	2000      	movs	r0, #0
 8006628:	e7ee      	b.n	8006608 <quorem+0xee>
 800662a:	0000      	movs	r0, r0
 800662c:	0000      	movs	r0, r0
	...

08006630 <_dtoa_r>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	ed2d 8b04 	vpush	{d8-d9}
 8006638:	69c5      	ldr	r5, [r0, #28]
 800663a:	b093      	sub	sp, #76	; 0x4c
 800663c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006640:	ec57 6b10 	vmov	r6, r7, d0
 8006644:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006648:	9107      	str	r1, [sp, #28]
 800664a:	4604      	mov	r4, r0
 800664c:	920a      	str	r2, [sp, #40]	; 0x28
 800664e:	930d      	str	r3, [sp, #52]	; 0x34
 8006650:	b975      	cbnz	r5, 8006670 <_dtoa_r+0x40>
 8006652:	2010      	movs	r0, #16
 8006654:	f000 fe2a 	bl	80072ac <malloc>
 8006658:	4602      	mov	r2, r0
 800665a:	61e0      	str	r0, [r4, #28]
 800665c:	b920      	cbnz	r0, 8006668 <_dtoa_r+0x38>
 800665e:	4bae      	ldr	r3, [pc, #696]	; (8006918 <_dtoa_r+0x2e8>)
 8006660:	21ef      	movs	r1, #239	; 0xef
 8006662:	48ae      	ldr	r0, [pc, #696]	; (800691c <_dtoa_r+0x2ec>)
 8006664:	f001 fd1a 	bl	800809c <__assert_func>
 8006668:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800666c:	6005      	str	r5, [r0, #0]
 800666e:	60c5      	str	r5, [r0, #12]
 8006670:	69e3      	ldr	r3, [r4, #28]
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	b151      	cbz	r1, 800668c <_dtoa_r+0x5c>
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	604a      	str	r2, [r1, #4]
 800667a:	2301      	movs	r3, #1
 800667c:	4093      	lsls	r3, r2
 800667e:	608b      	str	r3, [r1, #8]
 8006680:	4620      	mov	r0, r4
 8006682:	f000 ff07 	bl	8007494 <_Bfree>
 8006686:	69e3      	ldr	r3, [r4, #28]
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	1e3b      	subs	r3, r7, #0
 800668e:	bfbb      	ittet	lt
 8006690:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006694:	9303      	strlt	r3, [sp, #12]
 8006696:	2300      	movge	r3, #0
 8006698:	2201      	movlt	r2, #1
 800669a:	bfac      	ite	ge
 800669c:	f8c8 3000 	strge.w	r3, [r8]
 80066a0:	f8c8 2000 	strlt.w	r2, [r8]
 80066a4:	4b9e      	ldr	r3, [pc, #632]	; (8006920 <_dtoa_r+0x2f0>)
 80066a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80066aa:	ea33 0308 	bics.w	r3, r3, r8
 80066ae:	d11b      	bne.n	80066e8 <_dtoa_r+0xb8>
 80066b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80066bc:	4333      	orrs	r3, r6
 80066be:	f000 8593 	beq.w	80071e8 <_dtoa_r+0xbb8>
 80066c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c4:	b963      	cbnz	r3, 80066e0 <_dtoa_r+0xb0>
 80066c6:	4b97      	ldr	r3, [pc, #604]	; (8006924 <_dtoa_r+0x2f4>)
 80066c8:	e027      	b.n	800671a <_dtoa_r+0xea>
 80066ca:	4b97      	ldr	r3, [pc, #604]	; (8006928 <_dtoa_r+0x2f8>)
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	9800      	ldr	r0, [sp, #0]
 80066d6:	b013      	add	sp, #76	; 0x4c
 80066d8:	ecbd 8b04 	vpop	{d8-d9}
 80066dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e0:	4b90      	ldr	r3, [pc, #576]	; (8006924 <_dtoa_r+0x2f4>)
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	3303      	adds	r3, #3
 80066e6:	e7f3      	b.n	80066d0 <_dtoa_r+0xa0>
 80066e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066ec:	2200      	movs	r2, #0
 80066ee:	ec51 0b17 	vmov	r0, r1, d7
 80066f2:	eeb0 8a47 	vmov.f32	s16, s14
 80066f6:	eef0 8a67 	vmov.f32	s17, s15
 80066fa:	2300      	movs	r3, #0
 80066fc:	f7fa fa0c 	bl	8000b18 <__aeabi_dcmpeq>
 8006700:	4681      	mov	r9, r0
 8006702:	b160      	cbz	r0, 800671e <_dtoa_r+0xee>
 8006704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006706:	2301      	movs	r3, #1
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8568 	beq.w	80071e2 <_dtoa_r+0xbb2>
 8006712:	4b86      	ldr	r3, [pc, #536]	; (800692c <_dtoa_r+0x2fc>)
 8006714:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	3b01      	subs	r3, #1
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	e7da      	b.n	80066d4 <_dtoa_r+0xa4>
 800671e:	aa10      	add	r2, sp, #64	; 0x40
 8006720:	a911      	add	r1, sp, #68	; 0x44
 8006722:	4620      	mov	r0, r4
 8006724:	eeb0 0a48 	vmov.f32	s0, s16
 8006728:	eef0 0a68 	vmov.f32	s1, s17
 800672c:	f001 f994 	bl	8007a58 <__d2b>
 8006730:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006734:	4682      	mov	sl, r0
 8006736:	2d00      	cmp	r5, #0
 8006738:	d07f      	beq.n	800683a <_dtoa_r+0x20a>
 800673a:	ee18 3a90 	vmov	r3, s17
 800673e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006742:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006746:	ec51 0b18 	vmov	r0, r1, d8
 800674a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800674e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006752:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006756:	4619      	mov	r1, r3
 8006758:	2200      	movs	r2, #0
 800675a:	4b75      	ldr	r3, [pc, #468]	; (8006930 <_dtoa_r+0x300>)
 800675c:	f7f9 fdbc 	bl	80002d8 <__aeabi_dsub>
 8006760:	a367      	add	r3, pc, #412	; (adr r3, 8006900 <_dtoa_r+0x2d0>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 ff6f 	bl	8000648 <__aeabi_dmul>
 800676a:	a367      	add	r3, pc, #412	; (adr r3, 8006908 <_dtoa_r+0x2d8>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7f9 fdb4 	bl	80002dc <__adddf3>
 8006774:	4606      	mov	r6, r0
 8006776:	4628      	mov	r0, r5
 8006778:	460f      	mov	r7, r1
 800677a:	f7f9 fefb 	bl	8000574 <__aeabi_i2d>
 800677e:	a364      	add	r3, pc, #400	; (adr r3, 8006910 <_dtoa_r+0x2e0>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7f9 ff60 	bl	8000648 <__aeabi_dmul>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4630      	mov	r0, r6
 800678e:	4639      	mov	r1, r7
 8006790:	f7f9 fda4 	bl	80002dc <__adddf3>
 8006794:	4606      	mov	r6, r0
 8006796:	460f      	mov	r7, r1
 8006798:	f7fa fa06 	bl	8000ba8 <__aeabi_d2iz>
 800679c:	2200      	movs	r2, #0
 800679e:	4683      	mov	fp, r0
 80067a0:	2300      	movs	r3, #0
 80067a2:	4630      	mov	r0, r6
 80067a4:	4639      	mov	r1, r7
 80067a6:	f7fa f9c1 	bl	8000b2c <__aeabi_dcmplt>
 80067aa:	b148      	cbz	r0, 80067c0 <_dtoa_r+0x190>
 80067ac:	4658      	mov	r0, fp
 80067ae:	f7f9 fee1 	bl	8000574 <__aeabi_i2d>
 80067b2:	4632      	mov	r2, r6
 80067b4:	463b      	mov	r3, r7
 80067b6:	f7fa f9af 	bl	8000b18 <__aeabi_dcmpeq>
 80067ba:	b908      	cbnz	r0, 80067c0 <_dtoa_r+0x190>
 80067bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067c0:	f1bb 0f16 	cmp.w	fp, #22
 80067c4:	d857      	bhi.n	8006876 <_dtoa_r+0x246>
 80067c6:	4b5b      	ldr	r3, [pc, #364]	; (8006934 <_dtoa_r+0x304>)
 80067c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	ec51 0b18 	vmov	r0, r1, d8
 80067d4:	f7fa f9aa 	bl	8000b2c <__aeabi_dcmplt>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d04e      	beq.n	800687a <_dtoa_r+0x24a>
 80067dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067e0:	2300      	movs	r3, #0
 80067e2:	930c      	str	r3, [sp, #48]	; 0x30
 80067e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067e6:	1b5b      	subs	r3, r3, r5
 80067e8:	1e5a      	subs	r2, r3, #1
 80067ea:	bf45      	ittet	mi
 80067ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80067f0:	9305      	strmi	r3, [sp, #20]
 80067f2:	2300      	movpl	r3, #0
 80067f4:	2300      	movmi	r3, #0
 80067f6:	9206      	str	r2, [sp, #24]
 80067f8:	bf54      	ite	pl
 80067fa:	9305      	strpl	r3, [sp, #20]
 80067fc:	9306      	strmi	r3, [sp, #24]
 80067fe:	f1bb 0f00 	cmp.w	fp, #0
 8006802:	db3c      	blt.n	800687e <_dtoa_r+0x24e>
 8006804:	9b06      	ldr	r3, [sp, #24]
 8006806:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800680a:	445b      	add	r3, fp
 800680c:	9306      	str	r3, [sp, #24]
 800680e:	2300      	movs	r3, #0
 8006810:	9308      	str	r3, [sp, #32]
 8006812:	9b07      	ldr	r3, [sp, #28]
 8006814:	2b09      	cmp	r3, #9
 8006816:	d868      	bhi.n	80068ea <_dtoa_r+0x2ba>
 8006818:	2b05      	cmp	r3, #5
 800681a:	bfc4      	itt	gt
 800681c:	3b04      	subgt	r3, #4
 800681e:	9307      	strgt	r3, [sp, #28]
 8006820:	9b07      	ldr	r3, [sp, #28]
 8006822:	f1a3 0302 	sub.w	r3, r3, #2
 8006826:	bfcc      	ite	gt
 8006828:	2500      	movgt	r5, #0
 800682a:	2501      	movle	r5, #1
 800682c:	2b03      	cmp	r3, #3
 800682e:	f200 8085 	bhi.w	800693c <_dtoa_r+0x30c>
 8006832:	e8df f003 	tbb	[pc, r3]
 8006836:	3b2e      	.short	0x3b2e
 8006838:	5839      	.short	0x5839
 800683a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800683e:	441d      	add	r5, r3
 8006840:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006844:	2b20      	cmp	r3, #32
 8006846:	bfc1      	itttt	gt
 8006848:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800684c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006850:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006854:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006858:	bfd6      	itet	le
 800685a:	f1c3 0320 	rsble	r3, r3, #32
 800685e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006862:	fa06 f003 	lslle.w	r0, r6, r3
 8006866:	f7f9 fe75 	bl	8000554 <__aeabi_ui2d>
 800686a:	2201      	movs	r2, #1
 800686c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006870:	3d01      	subs	r5, #1
 8006872:	920e      	str	r2, [sp, #56]	; 0x38
 8006874:	e76f      	b.n	8006756 <_dtoa_r+0x126>
 8006876:	2301      	movs	r3, #1
 8006878:	e7b3      	b.n	80067e2 <_dtoa_r+0x1b2>
 800687a:	900c      	str	r0, [sp, #48]	; 0x30
 800687c:	e7b2      	b.n	80067e4 <_dtoa_r+0x1b4>
 800687e:	9b05      	ldr	r3, [sp, #20]
 8006880:	eba3 030b 	sub.w	r3, r3, fp
 8006884:	9305      	str	r3, [sp, #20]
 8006886:	f1cb 0300 	rsb	r3, fp, #0
 800688a:	9308      	str	r3, [sp, #32]
 800688c:	2300      	movs	r3, #0
 800688e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006890:	e7bf      	b.n	8006812 <_dtoa_r+0x1e2>
 8006892:	2300      	movs	r3, #0
 8006894:	9309      	str	r3, [sp, #36]	; 0x24
 8006896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc52      	bgt.n	8006942 <_dtoa_r+0x312>
 800689c:	2301      	movs	r3, #1
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	461a      	mov	r2, r3
 80068a4:	920a      	str	r2, [sp, #40]	; 0x28
 80068a6:	e00b      	b.n	80068c0 <_dtoa_r+0x290>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e7f3      	b.n	8006894 <_dtoa_r+0x264>
 80068ac:	2300      	movs	r3, #0
 80068ae:	9309      	str	r3, [sp, #36]	; 0x24
 80068b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b2:	445b      	add	r3, fp
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	3301      	adds	r3, #1
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	9304      	str	r3, [sp, #16]
 80068bc:	bfb8      	it	lt
 80068be:	2301      	movlt	r3, #1
 80068c0:	69e0      	ldr	r0, [r4, #28]
 80068c2:	2100      	movs	r1, #0
 80068c4:	2204      	movs	r2, #4
 80068c6:	f102 0614 	add.w	r6, r2, #20
 80068ca:	429e      	cmp	r6, r3
 80068cc:	d93d      	bls.n	800694a <_dtoa_r+0x31a>
 80068ce:	6041      	str	r1, [r0, #4]
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 fd9f 	bl	8007414 <_Balloc>
 80068d6:	9000      	str	r0, [sp, #0]
 80068d8:	2800      	cmp	r0, #0
 80068da:	d139      	bne.n	8006950 <_dtoa_r+0x320>
 80068dc:	4b16      	ldr	r3, [pc, #88]	; (8006938 <_dtoa_r+0x308>)
 80068de:	4602      	mov	r2, r0
 80068e0:	f240 11af 	movw	r1, #431	; 0x1af
 80068e4:	e6bd      	b.n	8006662 <_dtoa_r+0x32>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e7e1      	b.n	80068ae <_dtoa_r+0x27e>
 80068ea:	2501      	movs	r5, #1
 80068ec:	2300      	movs	r3, #0
 80068ee:	9307      	str	r3, [sp, #28]
 80068f0:	9509      	str	r5, [sp, #36]	; 0x24
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	9304      	str	r3, [sp, #16]
 80068fa:	2200      	movs	r2, #0
 80068fc:	2312      	movs	r3, #18
 80068fe:	e7d1      	b.n	80068a4 <_dtoa_r+0x274>
 8006900:	636f4361 	.word	0x636f4361
 8006904:	3fd287a7 	.word	0x3fd287a7
 8006908:	8b60c8b3 	.word	0x8b60c8b3
 800690c:	3fc68a28 	.word	0x3fc68a28
 8006910:	509f79fb 	.word	0x509f79fb
 8006914:	3fd34413 	.word	0x3fd34413
 8006918:	08008839 	.word	0x08008839
 800691c:	08008850 	.word	0x08008850
 8006920:	7ff00000 	.word	0x7ff00000
 8006924:	08008835 	.word	0x08008835
 8006928:	0800882c 	.word	0x0800882c
 800692c:	08008809 	.word	0x08008809
 8006930:	3ff80000 	.word	0x3ff80000
 8006934:	08008940 	.word	0x08008940
 8006938:	080088a8 	.word	0x080088a8
 800693c:	2301      	movs	r3, #1
 800693e:	9309      	str	r3, [sp, #36]	; 0x24
 8006940:	e7d7      	b.n	80068f2 <_dtoa_r+0x2c2>
 8006942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	9304      	str	r3, [sp, #16]
 8006948:	e7ba      	b.n	80068c0 <_dtoa_r+0x290>
 800694a:	3101      	adds	r1, #1
 800694c:	0052      	lsls	r2, r2, #1
 800694e:	e7ba      	b.n	80068c6 <_dtoa_r+0x296>
 8006950:	69e3      	ldr	r3, [r4, #28]
 8006952:	9a00      	ldr	r2, [sp, #0]
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	2b0e      	cmp	r3, #14
 800695a:	f200 80a8 	bhi.w	8006aae <_dtoa_r+0x47e>
 800695e:	2d00      	cmp	r5, #0
 8006960:	f000 80a5 	beq.w	8006aae <_dtoa_r+0x47e>
 8006964:	f1bb 0f00 	cmp.w	fp, #0
 8006968:	dd38      	ble.n	80069dc <_dtoa_r+0x3ac>
 800696a:	4bc0      	ldr	r3, [pc, #768]	; (8006c6c <_dtoa_r+0x63c>)
 800696c:	f00b 020f 	and.w	r2, fp, #15
 8006970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006974:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006978:	e9d3 6700 	ldrd	r6, r7, [r3]
 800697c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006980:	d019      	beq.n	80069b6 <_dtoa_r+0x386>
 8006982:	4bbb      	ldr	r3, [pc, #748]	; (8006c70 <_dtoa_r+0x640>)
 8006984:	ec51 0b18 	vmov	r0, r1, d8
 8006988:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800698c:	f7f9 ff86 	bl	800089c <__aeabi_ddiv>
 8006990:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006994:	f008 080f 	and.w	r8, r8, #15
 8006998:	2503      	movs	r5, #3
 800699a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c70 <_dtoa_r+0x640>
 800699e:	f1b8 0f00 	cmp.w	r8, #0
 80069a2:	d10a      	bne.n	80069ba <_dtoa_r+0x38a>
 80069a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a8:	4632      	mov	r2, r6
 80069aa:	463b      	mov	r3, r7
 80069ac:	f7f9 ff76 	bl	800089c <__aeabi_ddiv>
 80069b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b4:	e02b      	b.n	8006a0e <_dtoa_r+0x3de>
 80069b6:	2502      	movs	r5, #2
 80069b8:	e7ef      	b.n	800699a <_dtoa_r+0x36a>
 80069ba:	f018 0f01 	tst.w	r8, #1
 80069be:	d008      	beq.n	80069d2 <_dtoa_r+0x3a2>
 80069c0:	4630      	mov	r0, r6
 80069c2:	4639      	mov	r1, r7
 80069c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069c8:	f7f9 fe3e 	bl	8000648 <__aeabi_dmul>
 80069cc:	3501      	adds	r5, #1
 80069ce:	4606      	mov	r6, r0
 80069d0:	460f      	mov	r7, r1
 80069d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069d6:	f109 0908 	add.w	r9, r9, #8
 80069da:	e7e0      	b.n	800699e <_dtoa_r+0x36e>
 80069dc:	f000 809f 	beq.w	8006b1e <_dtoa_r+0x4ee>
 80069e0:	f1cb 0600 	rsb	r6, fp, #0
 80069e4:	4ba1      	ldr	r3, [pc, #644]	; (8006c6c <_dtoa_r+0x63c>)
 80069e6:	4fa2      	ldr	r7, [pc, #648]	; (8006c70 <_dtoa_r+0x640>)
 80069e8:	f006 020f 	and.w	r2, r6, #15
 80069ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	ec51 0b18 	vmov	r0, r1, d8
 80069f8:	f7f9 fe26 	bl	8000648 <__aeabi_dmul>
 80069fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a00:	1136      	asrs	r6, r6, #4
 8006a02:	2300      	movs	r3, #0
 8006a04:	2502      	movs	r5, #2
 8006a06:	2e00      	cmp	r6, #0
 8006a08:	d17e      	bne.n	8006b08 <_dtoa_r+0x4d8>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1d0      	bne.n	80069b0 <_dtoa_r+0x380>
 8006a0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8084 	beq.w	8006b22 <_dtoa_r+0x4f2>
 8006a1a:	4b96      	ldr	r3, [pc, #600]	; (8006c74 <_dtoa_r+0x644>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7fa f883 	bl	8000b2c <__aeabi_dcmplt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d07b      	beq.n	8006b22 <_dtoa_r+0x4f2>
 8006a2a:	9b04      	ldr	r3, [sp, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d078      	beq.n	8006b22 <_dtoa_r+0x4f2>
 8006a30:	9b01      	ldr	r3, [sp, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	dd39      	ble.n	8006aaa <_dtoa_r+0x47a>
 8006a36:	4b90      	ldr	r3, [pc, #576]	; (8006c78 <_dtoa_r+0x648>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	f7f9 fe03 	bl	8000648 <__aeabi_dmul>
 8006a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a46:	9e01      	ldr	r6, [sp, #4]
 8006a48:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a52:	4628      	mov	r0, r5
 8006a54:	f7f9 fd8e 	bl	8000574 <__aeabi_i2d>
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	f7f9 fdf4 	bl	8000648 <__aeabi_dmul>
 8006a60:	4b86      	ldr	r3, [pc, #536]	; (8006c7c <_dtoa_r+0x64c>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	f7f9 fc3a 	bl	80002dc <__adddf3>
 8006a68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a70:	9303      	str	r3, [sp, #12]
 8006a72:	2e00      	cmp	r6, #0
 8006a74:	d158      	bne.n	8006b28 <_dtoa_r+0x4f8>
 8006a76:	4b82      	ldr	r3, [pc, #520]	; (8006c80 <_dtoa_r+0x650>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	f7f9 fc2b 	bl	80002d8 <__aeabi_dsub>
 8006a82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a86:	4680      	mov	r8, r0
 8006a88:	4689      	mov	r9, r1
 8006a8a:	f7fa f86d 	bl	8000b68 <__aeabi_dcmpgt>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f040 8296 	bne.w	8006fc0 <_dtoa_r+0x990>
 8006a94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a98:	4640      	mov	r0, r8
 8006a9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7fa f844 	bl	8000b2c <__aeabi_dcmplt>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f040 8289 	bne.w	8006fbc <_dtoa_r+0x98c>
 8006aaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f2c0 814e 	blt.w	8006d52 <_dtoa_r+0x722>
 8006ab6:	f1bb 0f0e 	cmp.w	fp, #14
 8006aba:	f300 814a 	bgt.w	8006d52 <_dtoa_r+0x722>
 8006abe:	4b6b      	ldr	r3, [pc, #428]	; (8006c6c <_dtoa_r+0x63c>)
 8006ac0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ac4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f280 80dc 	bge.w	8006c88 <_dtoa_r+0x658>
 8006ad0:	9b04      	ldr	r3, [sp, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f300 80d8 	bgt.w	8006c88 <_dtoa_r+0x658>
 8006ad8:	f040 826f 	bne.w	8006fba <_dtoa_r+0x98a>
 8006adc:	4b68      	ldr	r3, [pc, #416]	; (8006c80 <_dtoa_r+0x650>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	f7f9 fdb0 	bl	8000648 <__aeabi_dmul>
 8006ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aec:	f7fa f832 	bl	8000b54 <__aeabi_dcmpge>
 8006af0:	9e04      	ldr	r6, [sp, #16]
 8006af2:	4637      	mov	r7, r6
 8006af4:	2800      	cmp	r0, #0
 8006af6:	f040 8245 	bne.w	8006f84 <_dtoa_r+0x954>
 8006afa:	9d00      	ldr	r5, [sp, #0]
 8006afc:	2331      	movs	r3, #49	; 0x31
 8006afe:	f805 3b01 	strb.w	r3, [r5], #1
 8006b02:	f10b 0b01 	add.w	fp, fp, #1
 8006b06:	e241      	b.n	8006f8c <_dtoa_r+0x95c>
 8006b08:	07f2      	lsls	r2, r6, #31
 8006b0a:	d505      	bpl.n	8006b18 <_dtoa_r+0x4e8>
 8006b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b10:	f7f9 fd9a 	bl	8000648 <__aeabi_dmul>
 8006b14:	3501      	adds	r5, #1
 8006b16:	2301      	movs	r3, #1
 8006b18:	1076      	asrs	r6, r6, #1
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	e773      	b.n	8006a06 <_dtoa_r+0x3d6>
 8006b1e:	2502      	movs	r5, #2
 8006b20:	e775      	b.n	8006a0e <_dtoa_r+0x3de>
 8006b22:	9e04      	ldr	r6, [sp, #16]
 8006b24:	465f      	mov	r7, fp
 8006b26:	e792      	b.n	8006a4e <_dtoa_r+0x41e>
 8006b28:	9900      	ldr	r1, [sp, #0]
 8006b2a:	4b50      	ldr	r3, [pc, #320]	; (8006c6c <_dtoa_r+0x63c>)
 8006b2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b30:	4431      	add	r1, r6
 8006b32:	9102      	str	r1, [sp, #8]
 8006b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b36:	eeb0 9a47 	vmov.f32	s18, s14
 8006b3a:	eef0 9a67 	vmov.f32	s19, s15
 8006b3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b46:	2900      	cmp	r1, #0
 8006b48:	d044      	beq.n	8006bd4 <_dtoa_r+0x5a4>
 8006b4a:	494e      	ldr	r1, [pc, #312]	; (8006c84 <_dtoa_r+0x654>)
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	f7f9 fea5 	bl	800089c <__aeabi_ddiv>
 8006b52:	ec53 2b19 	vmov	r2, r3, d9
 8006b56:	f7f9 fbbf 	bl	80002d8 <__aeabi_dsub>
 8006b5a:	9d00      	ldr	r5, [sp, #0]
 8006b5c:	ec41 0b19 	vmov	d9, r0, r1
 8006b60:	4649      	mov	r1, r9
 8006b62:	4640      	mov	r0, r8
 8006b64:	f7fa f820 	bl	8000ba8 <__aeabi_d2iz>
 8006b68:	4606      	mov	r6, r0
 8006b6a:	f7f9 fd03 	bl	8000574 <__aeabi_i2d>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4640      	mov	r0, r8
 8006b74:	4649      	mov	r1, r9
 8006b76:	f7f9 fbaf 	bl	80002d8 <__aeabi_dsub>
 8006b7a:	3630      	adds	r6, #48	; 0x30
 8006b7c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b80:	ec53 2b19 	vmov	r2, r3, d9
 8006b84:	4680      	mov	r8, r0
 8006b86:	4689      	mov	r9, r1
 8006b88:	f7f9 ffd0 	bl	8000b2c <__aeabi_dcmplt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d164      	bne.n	8006c5a <_dtoa_r+0x62a>
 8006b90:	4642      	mov	r2, r8
 8006b92:	464b      	mov	r3, r9
 8006b94:	4937      	ldr	r1, [pc, #220]	; (8006c74 <_dtoa_r+0x644>)
 8006b96:	2000      	movs	r0, #0
 8006b98:	f7f9 fb9e 	bl	80002d8 <__aeabi_dsub>
 8006b9c:	ec53 2b19 	vmov	r2, r3, d9
 8006ba0:	f7f9 ffc4 	bl	8000b2c <__aeabi_dcmplt>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	f040 80b6 	bne.w	8006d16 <_dtoa_r+0x6e6>
 8006baa:	9b02      	ldr	r3, [sp, #8]
 8006bac:	429d      	cmp	r5, r3
 8006bae:	f43f af7c 	beq.w	8006aaa <_dtoa_r+0x47a>
 8006bb2:	4b31      	ldr	r3, [pc, #196]	; (8006c78 <_dtoa_r+0x648>)
 8006bb4:	ec51 0b19 	vmov	r0, r1, d9
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f7f9 fd45 	bl	8000648 <__aeabi_dmul>
 8006bbe:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <_dtoa_r+0x648>)
 8006bc0:	ec41 0b19 	vmov	d9, r0, r1
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	4649      	mov	r1, r9
 8006bca:	f7f9 fd3d 	bl	8000648 <__aeabi_dmul>
 8006bce:	4680      	mov	r8, r0
 8006bd0:	4689      	mov	r9, r1
 8006bd2:	e7c5      	b.n	8006b60 <_dtoa_r+0x530>
 8006bd4:	ec51 0b17 	vmov	r0, r1, d7
 8006bd8:	f7f9 fd36 	bl	8000648 <__aeabi_dmul>
 8006bdc:	9b02      	ldr	r3, [sp, #8]
 8006bde:	9d00      	ldr	r5, [sp, #0]
 8006be0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006be2:	ec41 0b19 	vmov	d9, r0, r1
 8006be6:	4649      	mov	r1, r9
 8006be8:	4640      	mov	r0, r8
 8006bea:	f7f9 ffdd 	bl	8000ba8 <__aeabi_d2iz>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	f7f9 fcc0 	bl	8000574 <__aeabi_i2d>
 8006bf4:	3630      	adds	r6, #48	; 0x30
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	f7f9 fb6b 	bl	80002d8 <__aeabi_dsub>
 8006c02:	f805 6b01 	strb.w	r6, [r5], #1
 8006c06:	9b02      	ldr	r3, [sp, #8]
 8006c08:	429d      	cmp	r5, r3
 8006c0a:	4680      	mov	r8, r0
 8006c0c:	4689      	mov	r9, r1
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	d124      	bne.n	8006c5e <_dtoa_r+0x62e>
 8006c14:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <_dtoa_r+0x654>)
 8006c16:	ec51 0b19 	vmov	r0, r1, d9
 8006c1a:	f7f9 fb5f 	bl	80002dc <__adddf3>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 ff9f 	bl	8000b68 <__aeabi_dcmpgt>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d173      	bne.n	8006d16 <_dtoa_r+0x6e6>
 8006c2e:	ec53 2b19 	vmov	r2, r3, d9
 8006c32:	4914      	ldr	r1, [pc, #80]	; (8006c84 <_dtoa_r+0x654>)
 8006c34:	2000      	movs	r0, #0
 8006c36:	f7f9 fb4f 	bl	80002d8 <__aeabi_dsub>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4640      	mov	r0, r8
 8006c40:	4649      	mov	r1, r9
 8006c42:	f7f9 ff73 	bl	8000b2c <__aeabi_dcmplt>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f43f af2f 	beq.w	8006aaa <_dtoa_r+0x47a>
 8006c4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c4e:	1e6b      	subs	r3, r5, #1
 8006c50:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c56:	2b30      	cmp	r3, #48	; 0x30
 8006c58:	d0f8      	beq.n	8006c4c <_dtoa_r+0x61c>
 8006c5a:	46bb      	mov	fp, r7
 8006c5c:	e04a      	b.n	8006cf4 <_dtoa_r+0x6c4>
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <_dtoa_r+0x648>)
 8006c60:	f7f9 fcf2 	bl	8000648 <__aeabi_dmul>
 8006c64:	4680      	mov	r8, r0
 8006c66:	4689      	mov	r9, r1
 8006c68:	e7bd      	b.n	8006be6 <_dtoa_r+0x5b6>
 8006c6a:	bf00      	nop
 8006c6c:	08008940 	.word	0x08008940
 8006c70:	08008918 	.word	0x08008918
 8006c74:	3ff00000 	.word	0x3ff00000
 8006c78:	40240000 	.word	0x40240000
 8006c7c:	401c0000 	.word	0x401c0000
 8006c80:	40140000 	.word	0x40140000
 8006c84:	3fe00000 	.word	0x3fe00000
 8006c88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c8c:	9d00      	ldr	r5, [sp, #0]
 8006c8e:	4642      	mov	r2, r8
 8006c90:	464b      	mov	r3, r9
 8006c92:	4630      	mov	r0, r6
 8006c94:	4639      	mov	r1, r7
 8006c96:	f7f9 fe01 	bl	800089c <__aeabi_ddiv>
 8006c9a:	f7f9 ff85 	bl	8000ba8 <__aeabi_d2iz>
 8006c9e:	9001      	str	r0, [sp, #4]
 8006ca0:	f7f9 fc68 	bl	8000574 <__aeabi_i2d>
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	f7f9 fcce 	bl	8000648 <__aeabi_dmul>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	f7f9 fb10 	bl	80002d8 <__aeabi_dsub>
 8006cb8:	9e01      	ldr	r6, [sp, #4]
 8006cba:	9f04      	ldr	r7, [sp, #16]
 8006cbc:	3630      	adds	r6, #48	; 0x30
 8006cbe:	f805 6b01 	strb.w	r6, [r5], #1
 8006cc2:	9e00      	ldr	r6, [sp, #0]
 8006cc4:	1bae      	subs	r6, r5, r6
 8006cc6:	42b7      	cmp	r7, r6
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	d134      	bne.n	8006d38 <_dtoa_r+0x708>
 8006cce:	f7f9 fb05 	bl	80002dc <__adddf3>
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	460f      	mov	r7, r1
 8006cda:	f7f9 ff45 	bl	8000b68 <__aeabi_dcmpgt>
 8006cde:	b9c8      	cbnz	r0, 8006d14 <_dtoa_r+0x6e4>
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f7f9 ff16 	bl	8000b18 <__aeabi_dcmpeq>
 8006cec:	b110      	cbz	r0, 8006cf4 <_dtoa_r+0x6c4>
 8006cee:	9b01      	ldr	r3, [sp, #4]
 8006cf0:	07db      	lsls	r3, r3, #31
 8006cf2:	d40f      	bmi.n	8006d14 <_dtoa_r+0x6e4>
 8006cf4:	4651      	mov	r1, sl
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 fbcc 	bl	8007494 <_Bfree>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d00:	702b      	strb	r3, [r5, #0]
 8006d02:	f10b 0301 	add.w	r3, fp, #1
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f43f ace2 	beq.w	80066d4 <_dtoa_r+0xa4>
 8006d10:	601d      	str	r5, [r3, #0]
 8006d12:	e4df      	b.n	80066d4 <_dtoa_r+0xa4>
 8006d14:	465f      	mov	r7, fp
 8006d16:	462b      	mov	r3, r5
 8006d18:	461d      	mov	r5, r3
 8006d1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d1e:	2a39      	cmp	r2, #57	; 0x39
 8006d20:	d106      	bne.n	8006d30 <_dtoa_r+0x700>
 8006d22:	9a00      	ldr	r2, [sp, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1f7      	bne.n	8006d18 <_dtoa_r+0x6e8>
 8006d28:	9900      	ldr	r1, [sp, #0]
 8006d2a:	2230      	movs	r2, #48	; 0x30
 8006d2c:	3701      	adds	r7, #1
 8006d2e:	700a      	strb	r2, [r1, #0]
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	3201      	adds	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	e790      	b.n	8006c5a <_dtoa_r+0x62a>
 8006d38:	4ba3      	ldr	r3, [pc, #652]	; (8006fc8 <_dtoa_r+0x998>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f7f9 fc84 	bl	8000648 <__aeabi_dmul>
 8006d40:	2200      	movs	r2, #0
 8006d42:	2300      	movs	r3, #0
 8006d44:	4606      	mov	r6, r0
 8006d46:	460f      	mov	r7, r1
 8006d48:	f7f9 fee6 	bl	8000b18 <__aeabi_dcmpeq>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d09e      	beq.n	8006c8e <_dtoa_r+0x65e>
 8006d50:	e7d0      	b.n	8006cf4 <_dtoa_r+0x6c4>
 8006d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d54:	2a00      	cmp	r2, #0
 8006d56:	f000 80ca 	beq.w	8006eee <_dtoa_r+0x8be>
 8006d5a:	9a07      	ldr	r2, [sp, #28]
 8006d5c:	2a01      	cmp	r2, #1
 8006d5e:	f300 80ad 	bgt.w	8006ebc <_dtoa_r+0x88c>
 8006d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	f000 80a5 	beq.w	8006eb4 <_dtoa_r+0x884>
 8006d6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d6e:	9e08      	ldr	r6, [sp, #32]
 8006d70:	9d05      	ldr	r5, [sp, #20]
 8006d72:	9a05      	ldr	r2, [sp, #20]
 8006d74:	441a      	add	r2, r3
 8006d76:	9205      	str	r2, [sp, #20]
 8006d78:	9a06      	ldr	r2, [sp, #24]
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	441a      	add	r2, r3
 8006d7e:	4620      	mov	r0, r4
 8006d80:	9206      	str	r2, [sp, #24]
 8006d82:	f000 fc3d 	bl	8007600 <__i2b>
 8006d86:	4607      	mov	r7, r0
 8006d88:	b165      	cbz	r5, 8006da4 <_dtoa_r+0x774>
 8006d8a:	9b06      	ldr	r3, [sp, #24]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	dd09      	ble.n	8006da4 <_dtoa_r+0x774>
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	9a05      	ldr	r2, [sp, #20]
 8006d94:	bfa8      	it	ge
 8006d96:	462b      	movge	r3, r5
 8006d98:	1ad2      	subs	r2, r2, r3
 8006d9a:	9205      	str	r2, [sp, #20]
 8006d9c:	9a06      	ldr	r2, [sp, #24]
 8006d9e:	1aed      	subs	r5, r5, r3
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	9306      	str	r3, [sp, #24]
 8006da4:	9b08      	ldr	r3, [sp, #32]
 8006da6:	b1f3      	cbz	r3, 8006de6 <_dtoa_r+0x7b6>
 8006da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80a3 	beq.w	8006ef6 <_dtoa_r+0x8c6>
 8006db0:	2e00      	cmp	r6, #0
 8006db2:	dd10      	ble.n	8006dd6 <_dtoa_r+0x7a6>
 8006db4:	4639      	mov	r1, r7
 8006db6:	4632      	mov	r2, r6
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 fce1 	bl	8007780 <__pow5mult>
 8006dbe:	4652      	mov	r2, sl
 8006dc0:	4601      	mov	r1, r0
 8006dc2:	4607      	mov	r7, r0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 fc31 	bl	800762c <__multiply>
 8006dca:	4651      	mov	r1, sl
 8006dcc:	4680      	mov	r8, r0
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 fb60 	bl	8007494 <_Bfree>
 8006dd4:	46c2      	mov	sl, r8
 8006dd6:	9b08      	ldr	r3, [sp, #32]
 8006dd8:	1b9a      	subs	r2, r3, r6
 8006dda:	d004      	beq.n	8006de6 <_dtoa_r+0x7b6>
 8006ddc:	4651      	mov	r1, sl
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 fcce 	bl	8007780 <__pow5mult>
 8006de4:	4682      	mov	sl, r0
 8006de6:	2101      	movs	r1, #1
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fc09 	bl	8007600 <__i2b>
 8006dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	4606      	mov	r6, r0
 8006df4:	f340 8081 	ble.w	8006efa <_dtoa_r+0x8ca>
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 fcbf 	bl	8007780 <__pow5mult>
 8006e02:	9b07      	ldr	r3, [sp, #28]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	4606      	mov	r6, r0
 8006e08:	dd7a      	ble.n	8006f00 <_dtoa_r+0x8d0>
 8006e0a:	f04f 0800 	mov.w	r8, #0
 8006e0e:	6933      	ldr	r3, [r6, #16]
 8006e10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e14:	6918      	ldr	r0, [r3, #16]
 8006e16:	f000 fba5 	bl	8007564 <__hi0bits>
 8006e1a:	f1c0 0020 	rsb	r0, r0, #32
 8006e1e:	9b06      	ldr	r3, [sp, #24]
 8006e20:	4418      	add	r0, r3
 8006e22:	f010 001f 	ands.w	r0, r0, #31
 8006e26:	f000 8094 	beq.w	8006f52 <_dtoa_r+0x922>
 8006e2a:	f1c0 0320 	rsb	r3, r0, #32
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	f340 8085 	ble.w	8006f3e <_dtoa_r+0x90e>
 8006e34:	9b05      	ldr	r3, [sp, #20]
 8006e36:	f1c0 001c 	rsb	r0, r0, #28
 8006e3a:	4403      	add	r3, r0
 8006e3c:	9305      	str	r3, [sp, #20]
 8006e3e:	9b06      	ldr	r3, [sp, #24]
 8006e40:	4403      	add	r3, r0
 8006e42:	4405      	add	r5, r0
 8006e44:	9306      	str	r3, [sp, #24]
 8006e46:	9b05      	ldr	r3, [sp, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	dd05      	ble.n	8006e58 <_dtoa_r+0x828>
 8006e4c:	4651      	mov	r1, sl
 8006e4e:	461a      	mov	r2, r3
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fcef 	bl	8007834 <__lshift>
 8006e56:	4682      	mov	sl, r0
 8006e58:	9b06      	ldr	r3, [sp, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd05      	ble.n	8006e6a <_dtoa_r+0x83a>
 8006e5e:	4631      	mov	r1, r6
 8006e60:	461a      	mov	r2, r3
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fce6 	bl	8007834 <__lshift>
 8006e68:	4606      	mov	r6, r0
 8006e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d072      	beq.n	8006f56 <_dtoa_r+0x926>
 8006e70:	4631      	mov	r1, r6
 8006e72:	4650      	mov	r0, sl
 8006e74:	f000 fd4a 	bl	800790c <__mcmp>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	da6c      	bge.n	8006f56 <_dtoa_r+0x926>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	4651      	mov	r1, sl
 8006e80:	220a      	movs	r2, #10
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 fb28 	bl	80074d8 <__multadd>
 8006e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e8e:	4682      	mov	sl, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 81b0 	beq.w	80071f6 <_dtoa_r+0xbc6>
 8006e96:	2300      	movs	r3, #0
 8006e98:	4639      	mov	r1, r7
 8006e9a:	220a      	movs	r2, #10
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 fb1b 	bl	80074d8 <__multadd>
 8006ea2:	9b01      	ldr	r3, [sp, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	f300 8096 	bgt.w	8006fd8 <_dtoa_r+0x9a8>
 8006eac:	9b07      	ldr	r3, [sp, #28]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	dc59      	bgt.n	8006f66 <_dtoa_r+0x936>
 8006eb2:	e091      	b.n	8006fd8 <_dtoa_r+0x9a8>
 8006eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eba:	e758      	b.n	8006d6e <_dtoa_r+0x73e>
 8006ebc:	9b04      	ldr	r3, [sp, #16]
 8006ebe:	1e5e      	subs	r6, r3, #1
 8006ec0:	9b08      	ldr	r3, [sp, #32]
 8006ec2:	42b3      	cmp	r3, r6
 8006ec4:	bfbf      	itttt	lt
 8006ec6:	9b08      	ldrlt	r3, [sp, #32]
 8006ec8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006eca:	9608      	strlt	r6, [sp, #32]
 8006ecc:	1af3      	sublt	r3, r6, r3
 8006ece:	bfb4      	ite	lt
 8006ed0:	18d2      	addlt	r2, r2, r3
 8006ed2:	1b9e      	subge	r6, r3, r6
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	bfbc      	itt	lt
 8006ed8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006eda:	2600      	movlt	r6, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bfb7      	itett	lt
 8006ee0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ee4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ee8:	1a9d      	sublt	r5, r3, r2
 8006eea:	2300      	movlt	r3, #0
 8006eec:	e741      	b.n	8006d72 <_dtoa_r+0x742>
 8006eee:	9e08      	ldr	r6, [sp, #32]
 8006ef0:	9d05      	ldr	r5, [sp, #20]
 8006ef2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ef4:	e748      	b.n	8006d88 <_dtoa_r+0x758>
 8006ef6:	9a08      	ldr	r2, [sp, #32]
 8006ef8:	e770      	b.n	8006ddc <_dtoa_r+0x7ac>
 8006efa:	9b07      	ldr	r3, [sp, #28]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	dc19      	bgt.n	8006f34 <_dtoa_r+0x904>
 8006f00:	9b02      	ldr	r3, [sp, #8]
 8006f02:	b9bb      	cbnz	r3, 8006f34 <_dtoa_r+0x904>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f0a:	b99b      	cbnz	r3, 8006f34 <_dtoa_r+0x904>
 8006f0c:	9b03      	ldr	r3, [sp, #12]
 8006f0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f12:	0d1b      	lsrs	r3, r3, #20
 8006f14:	051b      	lsls	r3, r3, #20
 8006f16:	b183      	cbz	r3, 8006f3a <_dtoa_r+0x90a>
 8006f18:	9b05      	ldr	r3, [sp, #20]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	9305      	str	r3, [sp, #20]
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	3301      	adds	r3, #1
 8006f22:	9306      	str	r3, [sp, #24]
 8006f24:	f04f 0801 	mov.w	r8, #1
 8006f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f47f af6f 	bne.w	8006e0e <_dtoa_r+0x7de>
 8006f30:	2001      	movs	r0, #1
 8006f32:	e774      	b.n	8006e1e <_dtoa_r+0x7ee>
 8006f34:	f04f 0800 	mov.w	r8, #0
 8006f38:	e7f6      	b.n	8006f28 <_dtoa_r+0x8f8>
 8006f3a:	4698      	mov	r8, r3
 8006f3c:	e7f4      	b.n	8006f28 <_dtoa_r+0x8f8>
 8006f3e:	d082      	beq.n	8006e46 <_dtoa_r+0x816>
 8006f40:	9a05      	ldr	r2, [sp, #20]
 8006f42:	331c      	adds	r3, #28
 8006f44:	441a      	add	r2, r3
 8006f46:	9205      	str	r2, [sp, #20]
 8006f48:	9a06      	ldr	r2, [sp, #24]
 8006f4a:	441a      	add	r2, r3
 8006f4c:	441d      	add	r5, r3
 8006f4e:	9206      	str	r2, [sp, #24]
 8006f50:	e779      	b.n	8006e46 <_dtoa_r+0x816>
 8006f52:	4603      	mov	r3, r0
 8006f54:	e7f4      	b.n	8006f40 <_dtoa_r+0x910>
 8006f56:	9b04      	ldr	r3, [sp, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	dc37      	bgt.n	8006fcc <_dtoa_r+0x99c>
 8006f5c:	9b07      	ldr	r3, [sp, #28]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	dd34      	ble.n	8006fcc <_dtoa_r+0x99c>
 8006f62:	9b04      	ldr	r3, [sp, #16]
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	b963      	cbnz	r3, 8006f84 <_dtoa_r+0x954>
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	2205      	movs	r2, #5
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 fab2 	bl	80074d8 <__multadd>
 8006f74:	4601      	mov	r1, r0
 8006f76:	4606      	mov	r6, r0
 8006f78:	4650      	mov	r0, sl
 8006f7a:	f000 fcc7 	bl	800790c <__mcmp>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f73f adbb 	bgt.w	8006afa <_dtoa_r+0x4ca>
 8006f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f86:	9d00      	ldr	r5, [sp, #0]
 8006f88:	ea6f 0b03 	mvn.w	fp, r3
 8006f8c:	f04f 0800 	mov.w	r8, #0
 8006f90:	4631      	mov	r1, r6
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fa7e 	bl	8007494 <_Bfree>
 8006f98:	2f00      	cmp	r7, #0
 8006f9a:	f43f aeab 	beq.w	8006cf4 <_dtoa_r+0x6c4>
 8006f9e:	f1b8 0f00 	cmp.w	r8, #0
 8006fa2:	d005      	beq.n	8006fb0 <_dtoa_r+0x980>
 8006fa4:	45b8      	cmp	r8, r7
 8006fa6:	d003      	beq.n	8006fb0 <_dtoa_r+0x980>
 8006fa8:	4641      	mov	r1, r8
 8006faa:	4620      	mov	r0, r4
 8006fac:	f000 fa72 	bl	8007494 <_Bfree>
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fa6e 	bl	8007494 <_Bfree>
 8006fb8:	e69c      	b.n	8006cf4 <_dtoa_r+0x6c4>
 8006fba:	2600      	movs	r6, #0
 8006fbc:	4637      	mov	r7, r6
 8006fbe:	e7e1      	b.n	8006f84 <_dtoa_r+0x954>
 8006fc0:	46bb      	mov	fp, r7
 8006fc2:	4637      	mov	r7, r6
 8006fc4:	e599      	b.n	8006afa <_dtoa_r+0x4ca>
 8006fc6:	bf00      	nop
 8006fc8:	40240000 	.word	0x40240000
 8006fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 80c8 	beq.w	8007164 <_dtoa_r+0xb34>
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	dd05      	ble.n	8006fe8 <_dtoa_r+0x9b8>
 8006fdc:	4639      	mov	r1, r7
 8006fde:	462a      	mov	r2, r5
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fc27 	bl	8007834 <__lshift>
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	f1b8 0f00 	cmp.w	r8, #0
 8006fec:	d05b      	beq.n	80070a6 <_dtoa_r+0xa76>
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 fa0f 	bl	8007414 <_Balloc>
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	b928      	cbnz	r0, 8007006 <_dtoa_r+0x9d6>
 8006ffa:	4b83      	ldr	r3, [pc, #524]	; (8007208 <_dtoa_r+0xbd8>)
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007002:	f7ff bb2e 	b.w	8006662 <_dtoa_r+0x32>
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	3202      	adds	r2, #2
 800700a:	0092      	lsls	r2, r2, #2
 800700c:	f107 010c 	add.w	r1, r7, #12
 8007010:	300c      	adds	r0, #12
 8007012:	f001 f835 	bl	8008080 <memcpy>
 8007016:	2201      	movs	r2, #1
 8007018:	4629      	mov	r1, r5
 800701a:	4620      	mov	r0, r4
 800701c:	f000 fc0a 	bl	8007834 <__lshift>
 8007020:	9b00      	ldr	r3, [sp, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	e9dd 2300 	ldrd	r2, r3, [sp]
 800702a:	4413      	add	r3, r2
 800702c:	9308      	str	r3, [sp, #32]
 800702e:	9b02      	ldr	r3, [sp, #8]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	46b8      	mov	r8, r7
 8007036:	9306      	str	r3, [sp, #24]
 8007038:	4607      	mov	r7, r0
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	4631      	mov	r1, r6
 800703e:	3b01      	subs	r3, #1
 8007040:	4650      	mov	r0, sl
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	f7ff fa69 	bl	800651a <quorem>
 8007048:	4641      	mov	r1, r8
 800704a:	9002      	str	r0, [sp, #8]
 800704c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007050:	4650      	mov	r0, sl
 8007052:	f000 fc5b 	bl	800790c <__mcmp>
 8007056:	463a      	mov	r2, r7
 8007058:	9005      	str	r0, [sp, #20]
 800705a:	4631      	mov	r1, r6
 800705c:	4620      	mov	r0, r4
 800705e:	f000 fc71 	bl	8007944 <__mdiff>
 8007062:	68c2      	ldr	r2, [r0, #12]
 8007064:	4605      	mov	r5, r0
 8007066:	bb02      	cbnz	r2, 80070aa <_dtoa_r+0xa7a>
 8007068:	4601      	mov	r1, r0
 800706a:	4650      	mov	r0, sl
 800706c:	f000 fc4e 	bl	800790c <__mcmp>
 8007070:	4602      	mov	r2, r0
 8007072:	4629      	mov	r1, r5
 8007074:	4620      	mov	r0, r4
 8007076:	9209      	str	r2, [sp, #36]	; 0x24
 8007078:	f000 fa0c 	bl	8007494 <_Bfree>
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007080:	9d04      	ldr	r5, [sp, #16]
 8007082:	ea43 0102 	orr.w	r1, r3, r2
 8007086:	9b06      	ldr	r3, [sp, #24]
 8007088:	4319      	orrs	r1, r3
 800708a:	d110      	bne.n	80070ae <_dtoa_r+0xa7e>
 800708c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007090:	d029      	beq.n	80070e6 <_dtoa_r+0xab6>
 8007092:	9b05      	ldr	r3, [sp, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	dd02      	ble.n	800709e <_dtoa_r+0xa6e>
 8007098:	9b02      	ldr	r3, [sp, #8]
 800709a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800709e:	9b01      	ldr	r3, [sp, #4]
 80070a0:	f883 9000 	strb.w	r9, [r3]
 80070a4:	e774      	b.n	8006f90 <_dtoa_r+0x960>
 80070a6:	4638      	mov	r0, r7
 80070a8:	e7ba      	b.n	8007020 <_dtoa_r+0x9f0>
 80070aa:	2201      	movs	r2, #1
 80070ac:	e7e1      	b.n	8007072 <_dtoa_r+0xa42>
 80070ae:	9b05      	ldr	r3, [sp, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	db04      	blt.n	80070be <_dtoa_r+0xa8e>
 80070b4:	9907      	ldr	r1, [sp, #28]
 80070b6:	430b      	orrs	r3, r1
 80070b8:	9906      	ldr	r1, [sp, #24]
 80070ba:	430b      	orrs	r3, r1
 80070bc:	d120      	bne.n	8007100 <_dtoa_r+0xad0>
 80070be:	2a00      	cmp	r2, #0
 80070c0:	dded      	ble.n	800709e <_dtoa_r+0xa6e>
 80070c2:	4651      	mov	r1, sl
 80070c4:	2201      	movs	r2, #1
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 fbb4 	bl	8007834 <__lshift>
 80070cc:	4631      	mov	r1, r6
 80070ce:	4682      	mov	sl, r0
 80070d0:	f000 fc1c 	bl	800790c <__mcmp>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	dc03      	bgt.n	80070e0 <_dtoa_r+0xab0>
 80070d8:	d1e1      	bne.n	800709e <_dtoa_r+0xa6e>
 80070da:	f019 0f01 	tst.w	r9, #1
 80070de:	d0de      	beq.n	800709e <_dtoa_r+0xa6e>
 80070e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070e4:	d1d8      	bne.n	8007098 <_dtoa_r+0xa68>
 80070e6:	9a01      	ldr	r2, [sp, #4]
 80070e8:	2339      	movs	r3, #57	; 0x39
 80070ea:	7013      	strb	r3, [r2, #0]
 80070ec:	462b      	mov	r3, r5
 80070ee:	461d      	mov	r5, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070f6:	2a39      	cmp	r2, #57	; 0x39
 80070f8:	d06c      	beq.n	80071d4 <_dtoa_r+0xba4>
 80070fa:	3201      	adds	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	e747      	b.n	8006f90 <_dtoa_r+0x960>
 8007100:	2a00      	cmp	r2, #0
 8007102:	dd07      	ble.n	8007114 <_dtoa_r+0xae4>
 8007104:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007108:	d0ed      	beq.n	80070e6 <_dtoa_r+0xab6>
 800710a:	9a01      	ldr	r2, [sp, #4]
 800710c:	f109 0301 	add.w	r3, r9, #1
 8007110:	7013      	strb	r3, [r2, #0]
 8007112:	e73d      	b.n	8006f90 <_dtoa_r+0x960>
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	9a08      	ldr	r2, [sp, #32]
 8007118:	f803 9c01 	strb.w	r9, [r3, #-1]
 800711c:	4293      	cmp	r3, r2
 800711e:	d043      	beq.n	80071a8 <_dtoa_r+0xb78>
 8007120:	4651      	mov	r1, sl
 8007122:	2300      	movs	r3, #0
 8007124:	220a      	movs	r2, #10
 8007126:	4620      	mov	r0, r4
 8007128:	f000 f9d6 	bl	80074d8 <__multadd>
 800712c:	45b8      	cmp	r8, r7
 800712e:	4682      	mov	sl, r0
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	f04f 020a 	mov.w	r2, #10
 8007138:	4641      	mov	r1, r8
 800713a:	4620      	mov	r0, r4
 800713c:	d107      	bne.n	800714e <_dtoa_r+0xb1e>
 800713e:	f000 f9cb 	bl	80074d8 <__multadd>
 8007142:	4680      	mov	r8, r0
 8007144:	4607      	mov	r7, r0
 8007146:	9b04      	ldr	r3, [sp, #16]
 8007148:	3301      	adds	r3, #1
 800714a:	9304      	str	r3, [sp, #16]
 800714c:	e775      	b.n	800703a <_dtoa_r+0xa0a>
 800714e:	f000 f9c3 	bl	80074d8 <__multadd>
 8007152:	4639      	mov	r1, r7
 8007154:	4680      	mov	r8, r0
 8007156:	2300      	movs	r3, #0
 8007158:	220a      	movs	r2, #10
 800715a:	4620      	mov	r0, r4
 800715c:	f000 f9bc 	bl	80074d8 <__multadd>
 8007160:	4607      	mov	r7, r0
 8007162:	e7f0      	b.n	8007146 <_dtoa_r+0xb16>
 8007164:	9b04      	ldr	r3, [sp, #16]
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	9d00      	ldr	r5, [sp, #0]
 800716a:	4631      	mov	r1, r6
 800716c:	4650      	mov	r0, sl
 800716e:	f7ff f9d4 	bl	800651a <quorem>
 8007172:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007176:	9b00      	ldr	r3, [sp, #0]
 8007178:	f805 9b01 	strb.w	r9, [r5], #1
 800717c:	1aea      	subs	r2, r5, r3
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	4293      	cmp	r3, r2
 8007182:	dd07      	ble.n	8007194 <_dtoa_r+0xb64>
 8007184:	4651      	mov	r1, sl
 8007186:	2300      	movs	r3, #0
 8007188:	220a      	movs	r2, #10
 800718a:	4620      	mov	r0, r4
 800718c:	f000 f9a4 	bl	80074d8 <__multadd>
 8007190:	4682      	mov	sl, r0
 8007192:	e7ea      	b.n	800716a <_dtoa_r+0xb3a>
 8007194:	9b01      	ldr	r3, [sp, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	bfc8      	it	gt
 800719a:	461d      	movgt	r5, r3
 800719c:	9b00      	ldr	r3, [sp, #0]
 800719e:	bfd8      	it	le
 80071a0:	2501      	movle	r5, #1
 80071a2:	441d      	add	r5, r3
 80071a4:	f04f 0800 	mov.w	r8, #0
 80071a8:	4651      	mov	r1, sl
 80071aa:	2201      	movs	r2, #1
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fb41 	bl	8007834 <__lshift>
 80071b2:	4631      	mov	r1, r6
 80071b4:	4682      	mov	sl, r0
 80071b6:	f000 fba9 	bl	800790c <__mcmp>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	dc96      	bgt.n	80070ec <_dtoa_r+0xabc>
 80071be:	d102      	bne.n	80071c6 <_dtoa_r+0xb96>
 80071c0:	f019 0f01 	tst.w	r9, #1
 80071c4:	d192      	bne.n	80070ec <_dtoa_r+0xabc>
 80071c6:	462b      	mov	r3, r5
 80071c8:	461d      	mov	r5, r3
 80071ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071ce:	2a30      	cmp	r2, #48	; 0x30
 80071d0:	d0fa      	beq.n	80071c8 <_dtoa_r+0xb98>
 80071d2:	e6dd      	b.n	8006f90 <_dtoa_r+0x960>
 80071d4:	9a00      	ldr	r2, [sp, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d189      	bne.n	80070ee <_dtoa_r+0xabe>
 80071da:	f10b 0b01 	add.w	fp, fp, #1
 80071de:	2331      	movs	r3, #49	; 0x31
 80071e0:	e796      	b.n	8007110 <_dtoa_r+0xae0>
 80071e2:	4b0a      	ldr	r3, [pc, #40]	; (800720c <_dtoa_r+0xbdc>)
 80071e4:	f7ff ba99 	b.w	800671a <_dtoa_r+0xea>
 80071e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f47f aa6d 	bne.w	80066ca <_dtoa_r+0x9a>
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <_dtoa_r+0xbe0>)
 80071f2:	f7ff ba92 	b.w	800671a <_dtoa_r+0xea>
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	dcb5      	bgt.n	8007168 <_dtoa_r+0xb38>
 80071fc:	9b07      	ldr	r3, [sp, #28]
 80071fe:	2b02      	cmp	r3, #2
 8007200:	f73f aeb1 	bgt.w	8006f66 <_dtoa_r+0x936>
 8007204:	e7b0      	b.n	8007168 <_dtoa_r+0xb38>
 8007206:	bf00      	nop
 8007208:	080088a8 	.word	0x080088a8
 800720c:	08008808 	.word	0x08008808
 8007210:	0800882c 	.word	0x0800882c

08007214 <_free_r>:
 8007214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007216:	2900      	cmp	r1, #0
 8007218:	d044      	beq.n	80072a4 <_free_r+0x90>
 800721a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800721e:	9001      	str	r0, [sp, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f1a1 0404 	sub.w	r4, r1, #4
 8007226:	bfb8      	it	lt
 8007228:	18e4      	addlt	r4, r4, r3
 800722a:	f000 f8e7 	bl	80073fc <__malloc_lock>
 800722e:	4a1e      	ldr	r2, [pc, #120]	; (80072a8 <_free_r+0x94>)
 8007230:	9801      	ldr	r0, [sp, #4]
 8007232:	6813      	ldr	r3, [r2, #0]
 8007234:	b933      	cbnz	r3, 8007244 <_free_r+0x30>
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	6014      	str	r4, [r2, #0]
 800723a:	b003      	add	sp, #12
 800723c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007240:	f000 b8e2 	b.w	8007408 <__malloc_unlock>
 8007244:	42a3      	cmp	r3, r4
 8007246:	d908      	bls.n	800725a <_free_r+0x46>
 8007248:	6825      	ldr	r5, [r4, #0]
 800724a:	1961      	adds	r1, r4, r5
 800724c:	428b      	cmp	r3, r1
 800724e:	bf01      	itttt	eq
 8007250:	6819      	ldreq	r1, [r3, #0]
 8007252:	685b      	ldreq	r3, [r3, #4]
 8007254:	1949      	addeq	r1, r1, r5
 8007256:	6021      	streq	r1, [r4, #0]
 8007258:	e7ed      	b.n	8007236 <_free_r+0x22>
 800725a:	461a      	mov	r2, r3
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	b10b      	cbz	r3, 8007264 <_free_r+0x50>
 8007260:	42a3      	cmp	r3, r4
 8007262:	d9fa      	bls.n	800725a <_free_r+0x46>
 8007264:	6811      	ldr	r1, [r2, #0]
 8007266:	1855      	adds	r5, r2, r1
 8007268:	42a5      	cmp	r5, r4
 800726a:	d10b      	bne.n	8007284 <_free_r+0x70>
 800726c:	6824      	ldr	r4, [r4, #0]
 800726e:	4421      	add	r1, r4
 8007270:	1854      	adds	r4, r2, r1
 8007272:	42a3      	cmp	r3, r4
 8007274:	6011      	str	r1, [r2, #0]
 8007276:	d1e0      	bne.n	800723a <_free_r+0x26>
 8007278:	681c      	ldr	r4, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	6053      	str	r3, [r2, #4]
 800727e:	440c      	add	r4, r1
 8007280:	6014      	str	r4, [r2, #0]
 8007282:	e7da      	b.n	800723a <_free_r+0x26>
 8007284:	d902      	bls.n	800728c <_free_r+0x78>
 8007286:	230c      	movs	r3, #12
 8007288:	6003      	str	r3, [r0, #0]
 800728a:	e7d6      	b.n	800723a <_free_r+0x26>
 800728c:	6825      	ldr	r5, [r4, #0]
 800728e:	1961      	adds	r1, r4, r5
 8007290:	428b      	cmp	r3, r1
 8007292:	bf04      	itt	eq
 8007294:	6819      	ldreq	r1, [r3, #0]
 8007296:	685b      	ldreq	r3, [r3, #4]
 8007298:	6063      	str	r3, [r4, #4]
 800729a:	bf04      	itt	eq
 800729c:	1949      	addeq	r1, r1, r5
 800729e:	6021      	streq	r1, [r4, #0]
 80072a0:	6054      	str	r4, [r2, #4]
 80072a2:	e7ca      	b.n	800723a <_free_r+0x26>
 80072a4:	b003      	add	sp, #12
 80072a6:	bd30      	pop	{r4, r5, pc}
 80072a8:	20001c60 	.word	0x20001c60

080072ac <malloc>:
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <malloc+0xc>)
 80072ae:	4601      	mov	r1, r0
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	f000 b823 	b.w	80072fc <_malloc_r>
 80072b6:	bf00      	nop
 80072b8:	20000064 	.word	0x20000064

080072bc <sbrk_aligned>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	4e0e      	ldr	r6, [pc, #56]	; (80072f8 <sbrk_aligned+0x3c>)
 80072c0:	460c      	mov	r4, r1
 80072c2:	6831      	ldr	r1, [r6, #0]
 80072c4:	4605      	mov	r5, r0
 80072c6:	b911      	cbnz	r1, 80072ce <sbrk_aligned+0x12>
 80072c8:	f000 feca 	bl	8008060 <_sbrk_r>
 80072cc:	6030      	str	r0, [r6, #0]
 80072ce:	4621      	mov	r1, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 fec5 	bl	8008060 <_sbrk_r>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	d00a      	beq.n	80072f0 <sbrk_aligned+0x34>
 80072da:	1cc4      	adds	r4, r0, #3
 80072dc:	f024 0403 	bic.w	r4, r4, #3
 80072e0:	42a0      	cmp	r0, r4
 80072e2:	d007      	beq.n	80072f4 <sbrk_aligned+0x38>
 80072e4:	1a21      	subs	r1, r4, r0
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 feba 	bl	8008060 <_sbrk_r>
 80072ec:	3001      	adds	r0, #1
 80072ee:	d101      	bne.n	80072f4 <sbrk_aligned+0x38>
 80072f0:	f04f 34ff 	mov.w	r4, #4294967295
 80072f4:	4620      	mov	r0, r4
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	20001c64 	.word	0x20001c64

080072fc <_malloc_r>:
 80072fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007300:	1ccd      	adds	r5, r1, #3
 8007302:	f025 0503 	bic.w	r5, r5, #3
 8007306:	3508      	adds	r5, #8
 8007308:	2d0c      	cmp	r5, #12
 800730a:	bf38      	it	cc
 800730c:	250c      	movcc	r5, #12
 800730e:	2d00      	cmp	r5, #0
 8007310:	4607      	mov	r7, r0
 8007312:	db01      	blt.n	8007318 <_malloc_r+0x1c>
 8007314:	42a9      	cmp	r1, r5
 8007316:	d905      	bls.n	8007324 <_malloc_r+0x28>
 8007318:	230c      	movs	r3, #12
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	2600      	movs	r6, #0
 800731e:	4630      	mov	r0, r6
 8007320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007324:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073f8 <_malloc_r+0xfc>
 8007328:	f000 f868 	bl	80073fc <__malloc_lock>
 800732c:	f8d8 3000 	ldr.w	r3, [r8]
 8007330:	461c      	mov	r4, r3
 8007332:	bb5c      	cbnz	r4, 800738c <_malloc_r+0x90>
 8007334:	4629      	mov	r1, r5
 8007336:	4638      	mov	r0, r7
 8007338:	f7ff ffc0 	bl	80072bc <sbrk_aligned>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	4604      	mov	r4, r0
 8007340:	d155      	bne.n	80073ee <_malloc_r+0xf2>
 8007342:	f8d8 4000 	ldr.w	r4, [r8]
 8007346:	4626      	mov	r6, r4
 8007348:	2e00      	cmp	r6, #0
 800734a:	d145      	bne.n	80073d8 <_malloc_r+0xdc>
 800734c:	2c00      	cmp	r4, #0
 800734e:	d048      	beq.n	80073e2 <_malloc_r+0xe6>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	4631      	mov	r1, r6
 8007354:	4638      	mov	r0, r7
 8007356:	eb04 0903 	add.w	r9, r4, r3
 800735a:	f000 fe81 	bl	8008060 <_sbrk_r>
 800735e:	4581      	cmp	r9, r0
 8007360:	d13f      	bne.n	80073e2 <_malloc_r+0xe6>
 8007362:	6821      	ldr	r1, [r4, #0]
 8007364:	1a6d      	subs	r5, r5, r1
 8007366:	4629      	mov	r1, r5
 8007368:	4638      	mov	r0, r7
 800736a:	f7ff ffa7 	bl	80072bc <sbrk_aligned>
 800736e:	3001      	adds	r0, #1
 8007370:	d037      	beq.n	80073e2 <_malloc_r+0xe6>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	442b      	add	r3, r5
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	f8d8 3000 	ldr.w	r3, [r8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d038      	beq.n	80073f2 <_malloc_r+0xf6>
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	42a2      	cmp	r2, r4
 8007384:	d12b      	bne.n	80073de <_malloc_r+0xe2>
 8007386:	2200      	movs	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
 800738a:	e00f      	b.n	80073ac <_malloc_r+0xb0>
 800738c:	6822      	ldr	r2, [r4, #0]
 800738e:	1b52      	subs	r2, r2, r5
 8007390:	d41f      	bmi.n	80073d2 <_malloc_r+0xd6>
 8007392:	2a0b      	cmp	r2, #11
 8007394:	d917      	bls.n	80073c6 <_malloc_r+0xca>
 8007396:	1961      	adds	r1, r4, r5
 8007398:	42a3      	cmp	r3, r4
 800739a:	6025      	str	r5, [r4, #0]
 800739c:	bf18      	it	ne
 800739e:	6059      	strne	r1, [r3, #4]
 80073a0:	6863      	ldr	r3, [r4, #4]
 80073a2:	bf08      	it	eq
 80073a4:	f8c8 1000 	streq.w	r1, [r8]
 80073a8:	5162      	str	r2, [r4, r5]
 80073aa:	604b      	str	r3, [r1, #4]
 80073ac:	4638      	mov	r0, r7
 80073ae:	f104 060b 	add.w	r6, r4, #11
 80073b2:	f000 f829 	bl	8007408 <__malloc_unlock>
 80073b6:	f026 0607 	bic.w	r6, r6, #7
 80073ba:	1d23      	adds	r3, r4, #4
 80073bc:	1af2      	subs	r2, r6, r3
 80073be:	d0ae      	beq.n	800731e <_malloc_r+0x22>
 80073c0:	1b9b      	subs	r3, r3, r6
 80073c2:	50a3      	str	r3, [r4, r2]
 80073c4:	e7ab      	b.n	800731e <_malloc_r+0x22>
 80073c6:	42a3      	cmp	r3, r4
 80073c8:	6862      	ldr	r2, [r4, #4]
 80073ca:	d1dd      	bne.n	8007388 <_malloc_r+0x8c>
 80073cc:	f8c8 2000 	str.w	r2, [r8]
 80073d0:	e7ec      	b.n	80073ac <_malloc_r+0xb0>
 80073d2:	4623      	mov	r3, r4
 80073d4:	6864      	ldr	r4, [r4, #4]
 80073d6:	e7ac      	b.n	8007332 <_malloc_r+0x36>
 80073d8:	4634      	mov	r4, r6
 80073da:	6876      	ldr	r6, [r6, #4]
 80073dc:	e7b4      	b.n	8007348 <_malloc_r+0x4c>
 80073de:	4613      	mov	r3, r2
 80073e0:	e7cc      	b.n	800737c <_malloc_r+0x80>
 80073e2:	230c      	movs	r3, #12
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	4638      	mov	r0, r7
 80073e8:	f000 f80e 	bl	8007408 <__malloc_unlock>
 80073ec:	e797      	b.n	800731e <_malloc_r+0x22>
 80073ee:	6025      	str	r5, [r4, #0]
 80073f0:	e7dc      	b.n	80073ac <_malloc_r+0xb0>
 80073f2:	605b      	str	r3, [r3, #4]
 80073f4:	deff      	udf	#255	; 0xff
 80073f6:	bf00      	nop
 80073f8:	20001c60 	.word	0x20001c60

080073fc <__malloc_lock>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__malloc_lock+0x8>)
 80073fe:	f7ff b88a 	b.w	8006516 <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	20001c5c 	.word	0x20001c5c

08007408 <__malloc_unlock>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__malloc_unlock+0x8>)
 800740a:	f7ff b885 	b.w	8006518 <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	20001c5c 	.word	0x20001c5c

08007414 <_Balloc>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	69c6      	ldr	r6, [r0, #28]
 8007418:	4604      	mov	r4, r0
 800741a:	460d      	mov	r5, r1
 800741c:	b976      	cbnz	r6, 800743c <_Balloc+0x28>
 800741e:	2010      	movs	r0, #16
 8007420:	f7ff ff44 	bl	80072ac <malloc>
 8007424:	4602      	mov	r2, r0
 8007426:	61e0      	str	r0, [r4, #28]
 8007428:	b920      	cbnz	r0, 8007434 <_Balloc+0x20>
 800742a:	4b18      	ldr	r3, [pc, #96]	; (800748c <_Balloc+0x78>)
 800742c:	4818      	ldr	r0, [pc, #96]	; (8007490 <_Balloc+0x7c>)
 800742e:	216b      	movs	r1, #107	; 0x6b
 8007430:	f000 fe34 	bl	800809c <__assert_func>
 8007434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007438:	6006      	str	r6, [r0, #0]
 800743a:	60c6      	str	r6, [r0, #12]
 800743c:	69e6      	ldr	r6, [r4, #28]
 800743e:	68f3      	ldr	r3, [r6, #12]
 8007440:	b183      	cbz	r3, 8007464 <_Balloc+0x50>
 8007442:	69e3      	ldr	r3, [r4, #28]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800744a:	b9b8      	cbnz	r0, 800747c <_Balloc+0x68>
 800744c:	2101      	movs	r1, #1
 800744e:	fa01 f605 	lsl.w	r6, r1, r5
 8007452:	1d72      	adds	r2, r6, #5
 8007454:	0092      	lsls	r2, r2, #2
 8007456:	4620      	mov	r0, r4
 8007458:	f000 fe3e 	bl	80080d8 <_calloc_r>
 800745c:	b160      	cbz	r0, 8007478 <_Balloc+0x64>
 800745e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007462:	e00e      	b.n	8007482 <_Balloc+0x6e>
 8007464:	2221      	movs	r2, #33	; 0x21
 8007466:	2104      	movs	r1, #4
 8007468:	4620      	mov	r0, r4
 800746a:	f000 fe35 	bl	80080d8 <_calloc_r>
 800746e:	69e3      	ldr	r3, [r4, #28]
 8007470:	60f0      	str	r0, [r6, #12]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e4      	bne.n	8007442 <_Balloc+0x2e>
 8007478:	2000      	movs	r0, #0
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	6802      	ldr	r2, [r0, #0]
 800747e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007482:	2300      	movs	r3, #0
 8007484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007488:	e7f7      	b.n	800747a <_Balloc+0x66>
 800748a:	bf00      	nop
 800748c:	08008839 	.word	0x08008839
 8007490:	080088b9 	.word	0x080088b9

08007494 <_Bfree>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	69c6      	ldr	r6, [r0, #28]
 8007498:	4605      	mov	r5, r0
 800749a:	460c      	mov	r4, r1
 800749c:	b976      	cbnz	r6, 80074bc <_Bfree+0x28>
 800749e:	2010      	movs	r0, #16
 80074a0:	f7ff ff04 	bl	80072ac <malloc>
 80074a4:	4602      	mov	r2, r0
 80074a6:	61e8      	str	r0, [r5, #28]
 80074a8:	b920      	cbnz	r0, 80074b4 <_Bfree+0x20>
 80074aa:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <_Bfree+0x3c>)
 80074ac:	4809      	ldr	r0, [pc, #36]	; (80074d4 <_Bfree+0x40>)
 80074ae:	218f      	movs	r1, #143	; 0x8f
 80074b0:	f000 fdf4 	bl	800809c <__assert_func>
 80074b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074b8:	6006      	str	r6, [r0, #0]
 80074ba:	60c6      	str	r6, [r0, #12]
 80074bc:	b13c      	cbz	r4, 80074ce <_Bfree+0x3a>
 80074be:	69eb      	ldr	r3, [r5, #28]
 80074c0:	6862      	ldr	r2, [r4, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074c8:	6021      	str	r1, [r4, #0]
 80074ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
 80074d0:	08008839 	.word	0x08008839
 80074d4:	080088b9 	.word	0x080088b9

080074d8 <__multadd>:
 80074d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074dc:	690d      	ldr	r5, [r1, #16]
 80074de:	4607      	mov	r7, r0
 80074e0:	460c      	mov	r4, r1
 80074e2:	461e      	mov	r6, r3
 80074e4:	f101 0c14 	add.w	ip, r1, #20
 80074e8:	2000      	movs	r0, #0
 80074ea:	f8dc 3000 	ldr.w	r3, [ip]
 80074ee:	b299      	uxth	r1, r3
 80074f0:	fb02 6101 	mla	r1, r2, r1, r6
 80074f4:	0c1e      	lsrs	r6, r3, #16
 80074f6:	0c0b      	lsrs	r3, r1, #16
 80074f8:	fb02 3306 	mla	r3, r2, r6, r3
 80074fc:	b289      	uxth	r1, r1
 80074fe:	3001      	adds	r0, #1
 8007500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007504:	4285      	cmp	r5, r0
 8007506:	f84c 1b04 	str.w	r1, [ip], #4
 800750a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800750e:	dcec      	bgt.n	80074ea <__multadd+0x12>
 8007510:	b30e      	cbz	r6, 8007556 <__multadd+0x7e>
 8007512:	68a3      	ldr	r3, [r4, #8]
 8007514:	42ab      	cmp	r3, r5
 8007516:	dc19      	bgt.n	800754c <__multadd+0x74>
 8007518:	6861      	ldr	r1, [r4, #4]
 800751a:	4638      	mov	r0, r7
 800751c:	3101      	adds	r1, #1
 800751e:	f7ff ff79 	bl	8007414 <_Balloc>
 8007522:	4680      	mov	r8, r0
 8007524:	b928      	cbnz	r0, 8007532 <__multadd+0x5a>
 8007526:	4602      	mov	r2, r0
 8007528:	4b0c      	ldr	r3, [pc, #48]	; (800755c <__multadd+0x84>)
 800752a:	480d      	ldr	r0, [pc, #52]	; (8007560 <__multadd+0x88>)
 800752c:	21ba      	movs	r1, #186	; 0xba
 800752e:	f000 fdb5 	bl	800809c <__assert_func>
 8007532:	6922      	ldr	r2, [r4, #16]
 8007534:	3202      	adds	r2, #2
 8007536:	f104 010c 	add.w	r1, r4, #12
 800753a:	0092      	lsls	r2, r2, #2
 800753c:	300c      	adds	r0, #12
 800753e:	f000 fd9f 	bl	8008080 <memcpy>
 8007542:	4621      	mov	r1, r4
 8007544:	4638      	mov	r0, r7
 8007546:	f7ff ffa5 	bl	8007494 <_Bfree>
 800754a:	4644      	mov	r4, r8
 800754c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007550:	3501      	adds	r5, #1
 8007552:	615e      	str	r6, [r3, #20]
 8007554:	6125      	str	r5, [r4, #16]
 8007556:	4620      	mov	r0, r4
 8007558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800755c:	080088a8 	.word	0x080088a8
 8007560:	080088b9 	.word	0x080088b9

08007564 <__hi0bits>:
 8007564:	0c03      	lsrs	r3, r0, #16
 8007566:	041b      	lsls	r3, r3, #16
 8007568:	b9d3      	cbnz	r3, 80075a0 <__hi0bits+0x3c>
 800756a:	0400      	lsls	r0, r0, #16
 800756c:	2310      	movs	r3, #16
 800756e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007572:	bf04      	itt	eq
 8007574:	0200      	lsleq	r0, r0, #8
 8007576:	3308      	addeq	r3, #8
 8007578:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800757c:	bf04      	itt	eq
 800757e:	0100      	lsleq	r0, r0, #4
 8007580:	3304      	addeq	r3, #4
 8007582:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007586:	bf04      	itt	eq
 8007588:	0080      	lsleq	r0, r0, #2
 800758a:	3302      	addeq	r3, #2
 800758c:	2800      	cmp	r0, #0
 800758e:	db05      	blt.n	800759c <__hi0bits+0x38>
 8007590:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007594:	f103 0301 	add.w	r3, r3, #1
 8007598:	bf08      	it	eq
 800759a:	2320      	moveq	r3, #32
 800759c:	4618      	mov	r0, r3
 800759e:	4770      	bx	lr
 80075a0:	2300      	movs	r3, #0
 80075a2:	e7e4      	b.n	800756e <__hi0bits+0xa>

080075a4 <__lo0bits>:
 80075a4:	6803      	ldr	r3, [r0, #0]
 80075a6:	f013 0207 	ands.w	r2, r3, #7
 80075aa:	d00c      	beq.n	80075c6 <__lo0bits+0x22>
 80075ac:	07d9      	lsls	r1, r3, #31
 80075ae:	d422      	bmi.n	80075f6 <__lo0bits+0x52>
 80075b0:	079a      	lsls	r2, r3, #30
 80075b2:	bf49      	itett	mi
 80075b4:	085b      	lsrmi	r3, r3, #1
 80075b6:	089b      	lsrpl	r3, r3, #2
 80075b8:	6003      	strmi	r3, [r0, #0]
 80075ba:	2201      	movmi	r2, #1
 80075bc:	bf5c      	itt	pl
 80075be:	6003      	strpl	r3, [r0, #0]
 80075c0:	2202      	movpl	r2, #2
 80075c2:	4610      	mov	r0, r2
 80075c4:	4770      	bx	lr
 80075c6:	b299      	uxth	r1, r3
 80075c8:	b909      	cbnz	r1, 80075ce <__lo0bits+0x2a>
 80075ca:	0c1b      	lsrs	r3, r3, #16
 80075cc:	2210      	movs	r2, #16
 80075ce:	b2d9      	uxtb	r1, r3
 80075d0:	b909      	cbnz	r1, 80075d6 <__lo0bits+0x32>
 80075d2:	3208      	adds	r2, #8
 80075d4:	0a1b      	lsrs	r3, r3, #8
 80075d6:	0719      	lsls	r1, r3, #28
 80075d8:	bf04      	itt	eq
 80075da:	091b      	lsreq	r3, r3, #4
 80075dc:	3204      	addeq	r2, #4
 80075de:	0799      	lsls	r1, r3, #30
 80075e0:	bf04      	itt	eq
 80075e2:	089b      	lsreq	r3, r3, #2
 80075e4:	3202      	addeq	r2, #2
 80075e6:	07d9      	lsls	r1, r3, #31
 80075e8:	d403      	bmi.n	80075f2 <__lo0bits+0x4e>
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	f102 0201 	add.w	r2, r2, #1
 80075f0:	d003      	beq.n	80075fa <__lo0bits+0x56>
 80075f2:	6003      	str	r3, [r0, #0]
 80075f4:	e7e5      	b.n	80075c2 <__lo0bits+0x1e>
 80075f6:	2200      	movs	r2, #0
 80075f8:	e7e3      	b.n	80075c2 <__lo0bits+0x1e>
 80075fa:	2220      	movs	r2, #32
 80075fc:	e7e1      	b.n	80075c2 <__lo0bits+0x1e>
	...

08007600 <__i2b>:
 8007600:	b510      	push	{r4, lr}
 8007602:	460c      	mov	r4, r1
 8007604:	2101      	movs	r1, #1
 8007606:	f7ff ff05 	bl	8007414 <_Balloc>
 800760a:	4602      	mov	r2, r0
 800760c:	b928      	cbnz	r0, 800761a <__i2b+0x1a>
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <__i2b+0x24>)
 8007610:	4805      	ldr	r0, [pc, #20]	; (8007628 <__i2b+0x28>)
 8007612:	f240 1145 	movw	r1, #325	; 0x145
 8007616:	f000 fd41 	bl	800809c <__assert_func>
 800761a:	2301      	movs	r3, #1
 800761c:	6144      	str	r4, [r0, #20]
 800761e:	6103      	str	r3, [r0, #16]
 8007620:	bd10      	pop	{r4, pc}
 8007622:	bf00      	nop
 8007624:	080088a8 	.word	0x080088a8
 8007628:	080088b9 	.word	0x080088b9

0800762c <__multiply>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	4691      	mov	r9, r2
 8007632:	690a      	ldr	r2, [r1, #16]
 8007634:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007638:	429a      	cmp	r2, r3
 800763a:	bfb8      	it	lt
 800763c:	460b      	movlt	r3, r1
 800763e:	460c      	mov	r4, r1
 8007640:	bfbc      	itt	lt
 8007642:	464c      	movlt	r4, r9
 8007644:	4699      	movlt	r9, r3
 8007646:	6927      	ldr	r7, [r4, #16]
 8007648:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800764c:	68a3      	ldr	r3, [r4, #8]
 800764e:	6861      	ldr	r1, [r4, #4]
 8007650:	eb07 060a 	add.w	r6, r7, sl
 8007654:	42b3      	cmp	r3, r6
 8007656:	b085      	sub	sp, #20
 8007658:	bfb8      	it	lt
 800765a:	3101      	addlt	r1, #1
 800765c:	f7ff feda 	bl	8007414 <_Balloc>
 8007660:	b930      	cbnz	r0, 8007670 <__multiply+0x44>
 8007662:	4602      	mov	r2, r0
 8007664:	4b44      	ldr	r3, [pc, #272]	; (8007778 <__multiply+0x14c>)
 8007666:	4845      	ldr	r0, [pc, #276]	; (800777c <__multiply+0x150>)
 8007668:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800766c:	f000 fd16 	bl	800809c <__assert_func>
 8007670:	f100 0514 	add.w	r5, r0, #20
 8007674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007678:	462b      	mov	r3, r5
 800767a:	2200      	movs	r2, #0
 800767c:	4543      	cmp	r3, r8
 800767e:	d321      	bcc.n	80076c4 <__multiply+0x98>
 8007680:	f104 0314 	add.w	r3, r4, #20
 8007684:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007688:	f109 0314 	add.w	r3, r9, #20
 800768c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007690:	9202      	str	r2, [sp, #8]
 8007692:	1b3a      	subs	r2, r7, r4
 8007694:	3a15      	subs	r2, #21
 8007696:	f022 0203 	bic.w	r2, r2, #3
 800769a:	3204      	adds	r2, #4
 800769c:	f104 0115 	add.w	r1, r4, #21
 80076a0:	428f      	cmp	r7, r1
 80076a2:	bf38      	it	cc
 80076a4:	2204      	movcc	r2, #4
 80076a6:	9201      	str	r2, [sp, #4]
 80076a8:	9a02      	ldr	r2, [sp, #8]
 80076aa:	9303      	str	r3, [sp, #12]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d80c      	bhi.n	80076ca <__multiply+0x9e>
 80076b0:	2e00      	cmp	r6, #0
 80076b2:	dd03      	ble.n	80076bc <__multiply+0x90>
 80076b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d05b      	beq.n	8007774 <__multiply+0x148>
 80076bc:	6106      	str	r6, [r0, #16]
 80076be:	b005      	add	sp, #20
 80076c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c4:	f843 2b04 	str.w	r2, [r3], #4
 80076c8:	e7d8      	b.n	800767c <__multiply+0x50>
 80076ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80076ce:	f1ba 0f00 	cmp.w	sl, #0
 80076d2:	d024      	beq.n	800771e <__multiply+0xf2>
 80076d4:	f104 0e14 	add.w	lr, r4, #20
 80076d8:	46a9      	mov	r9, r5
 80076da:	f04f 0c00 	mov.w	ip, #0
 80076de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076e2:	f8d9 1000 	ldr.w	r1, [r9]
 80076e6:	fa1f fb82 	uxth.w	fp, r2
 80076ea:	b289      	uxth	r1, r1
 80076ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80076f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80076f4:	f8d9 2000 	ldr.w	r2, [r9]
 80076f8:	4461      	add	r1, ip
 80076fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007702:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007706:	b289      	uxth	r1, r1
 8007708:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800770c:	4577      	cmp	r7, lr
 800770e:	f849 1b04 	str.w	r1, [r9], #4
 8007712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007716:	d8e2      	bhi.n	80076de <__multiply+0xb2>
 8007718:	9a01      	ldr	r2, [sp, #4]
 800771a:	f845 c002 	str.w	ip, [r5, r2]
 800771e:	9a03      	ldr	r2, [sp, #12]
 8007720:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007724:	3304      	adds	r3, #4
 8007726:	f1b9 0f00 	cmp.w	r9, #0
 800772a:	d021      	beq.n	8007770 <__multiply+0x144>
 800772c:	6829      	ldr	r1, [r5, #0]
 800772e:	f104 0c14 	add.w	ip, r4, #20
 8007732:	46ae      	mov	lr, r5
 8007734:	f04f 0a00 	mov.w	sl, #0
 8007738:	f8bc b000 	ldrh.w	fp, [ip]
 800773c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007740:	fb09 220b 	mla	r2, r9, fp, r2
 8007744:	4452      	add	r2, sl
 8007746:	b289      	uxth	r1, r1
 8007748:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800774c:	f84e 1b04 	str.w	r1, [lr], #4
 8007750:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007754:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007758:	f8be 1000 	ldrh.w	r1, [lr]
 800775c:	fb09 110a 	mla	r1, r9, sl, r1
 8007760:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007764:	4567      	cmp	r7, ip
 8007766:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800776a:	d8e5      	bhi.n	8007738 <__multiply+0x10c>
 800776c:	9a01      	ldr	r2, [sp, #4]
 800776e:	50a9      	str	r1, [r5, r2]
 8007770:	3504      	adds	r5, #4
 8007772:	e799      	b.n	80076a8 <__multiply+0x7c>
 8007774:	3e01      	subs	r6, #1
 8007776:	e79b      	b.n	80076b0 <__multiply+0x84>
 8007778:	080088a8 	.word	0x080088a8
 800777c:	080088b9 	.word	0x080088b9

08007780 <__pow5mult>:
 8007780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007784:	4615      	mov	r5, r2
 8007786:	f012 0203 	ands.w	r2, r2, #3
 800778a:	4606      	mov	r6, r0
 800778c:	460f      	mov	r7, r1
 800778e:	d007      	beq.n	80077a0 <__pow5mult+0x20>
 8007790:	4c25      	ldr	r4, [pc, #148]	; (8007828 <__pow5mult+0xa8>)
 8007792:	3a01      	subs	r2, #1
 8007794:	2300      	movs	r3, #0
 8007796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800779a:	f7ff fe9d 	bl	80074d8 <__multadd>
 800779e:	4607      	mov	r7, r0
 80077a0:	10ad      	asrs	r5, r5, #2
 80077a2:	d03d      	beq.n	8007820 <__pow5mult+0xa0>
 80077a4:	69f4      	ldr	r4, [r6, #28]
 80077a6:	b97c      	cbnz	r4, 80077c8 <__pow5mult+0x48>
 80077a8:	2010      	movs	r0, #16
 80077aa:	f7ff fd7f 	bl	80072ac <malloc>
 80077ae:	4602      	mov	r2, r0
 80077b0:	61f0      	str	r0, [r6, #28]
 80077b2:	b928      	cbnz	r0, 80077c0 <__pow5mult+0x40>
 80077b4:	4b1d      	ldr	r3, [pc, #116]	; (800782c <__pow5mult+0xac>)
 80077b6:	481e      	ldr	r0, [pc, #120]	; (8007830 <__pow5mult+0xb0>)
 80077b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80077bc:	f000 fc6e 	bl	800809c <__assert_func>
 80077c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077c4:	6004      	str	r4, [r0, #0]
 80077c6:	60c4      	str	r4, [r0, #12]
 80077c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80077cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077d0:	b94c      	cbnz	r4, 80077e6 <__pow5mult+0x66>
 80077d2:	f240 2171 	movw	r1, #625	; 0x271
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7ff ff12 	bl	8007600 <__i2b>
 80077dc:	2300      	movs	r3, #0
 80077de:	f8c8 0008 	str.w	r0, [r8, #8]
 80077e2:	4604      	mov	r4, r0
 80077e4:	6003      	str	r3, [r0, #0]
 80077e6:	f04f 0900 	mov.w	r9, #0
 80077ea:	07eb      	lsls	r3, r5, #31
 80077ec:	d50a      	bpl.n	8007804 <__pow5mult+0x84>
 80077ee:	4639      	mov	r1, r7
 80077f0:	4622      	mov	r2, r4
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7ff ff1a 	bl	800762c <__multiply>
 80077f8:	4639      	mov	r1, r7
 80077fa:	4680      	mov	r8, r0
 80077fc:	4630      	mov	r0, r6
 80077fe:	f7ff fe49 	bl	8007494 <_Bfree>
 8007802:	4647      	mov	r7, r8
 8007804:	106d      	asrs	r5, r5, #1
 8007806:	d00b      	beq.n	8007820 <__pow5mult+0xa0>
 8007808:	6820      	ldr	r0, [r4, #0]
 800780a:	b938      	cbnz	r0, 800781c <__pow5mult+0x9c>
 800780c:	4622      	mov	r2, r4
 800780e:	4621      	mov	r1, r4
 8007810:	4630      	mov	r0, r6
 8007812:	f7ff ff0b 	bl	800762c <__multiply>
 8007816:	6020      	str	r0, [r4, #0]
 8007818:	f8c0 9000 	str.w	r9, [r0]
 800781c:	4604      	mov	r4, r0
 800781e:	e7e4      	b.n	80077ea <__pow5mult+0x6a>
 8007820:	4638      	mov	r0, r7
 8007822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007826:	bf00      	nop
 8007828:	08008a08 	.word	0x08008a08
 800782c:	08008839 	.word	0x08008839
 8007830:	080088b9 	.word	0x080088b9

08007834 <__lshift>:
 8007834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007838:	460c      	mov	r4, r1
 800783a:	6849      	ldr	r1, [r1, #4]
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	4607      	mov	r7, r0
 8007846:	4691      	mov	r9, r2
 8007848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800784c:	f108 0601 	add.w	r6, r8, #1
 8007850:	42b3      	cmp	r3, r6
 8007852:	db0b      	blt.n	800786c <__lshift+0x38>
 8007854:	4638      	mov	r0, r7
 8007856:	f7ff fddd 	bl	8007414 <_Balloc>
 800785a:	4605      	mov	r5, r0
 800785c:	b948      	cbnz	r0, 8007872 <__lshift+0x3e>
 800785e:	4602      	mov	r2, r0
 8007860:	4b28      	ldr	r3, [pc, #160]	; (8007904 <__lshift+0xd0>)
 8007862:	4829      	ldr	r0, [pc, #164]	; (8007908 <__lshift+0xd4>)
 8007864:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007868:	f000 fc18 	bl	800809c <__assert_func>
 800786c:	3101      	adds	r1, #1
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	e7ee      	b.n	8007850 <__lshift+0x1c>
 8007872:	2300      	movs	r3, #0
 8007874:	f100 0114 	add.w	r1, r0, #20
 8007878:	f100 0210 	add.w	r2, r0, #16
 800787c:	4618      	mov	r0, r3
 800787e:	4553      	cmp	r3, sl
 8007880:	db33      	blt.n	80078ea <__lshift+0xb6>
 8007882:	6920      	ldr	r0, [r4, #16]
 8007884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007888:	f104 0314 	add.w	r3, r4, #20
 800788c:	f019 091f 	ands.w	r9, r9, #31
 8007890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007898:	d02b      	beq.n	80078f2 <__lshift+0xbe>
 800789a:	f1c9 0e20 	rsb	lr, r9, #32
 800789e:	468a      	mov	sl, r1
 80078a0:	2200      	movs	r2, #0
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	fa00 f009 	lsl.w	r0, r0, r9
 80078a8:	4310      	orrs	r0, r2
 80078aa:	f84a 0b04 	str.w	r0, [sl], #4
 80078ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b2:	459c      	cmp	ip, r3
 80078b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80078b8:	d8f3      	bhi.n	80078a2 <__lshift+0x6e>
 80078ba:	ebac 0304 	sub.w	r3, ip, r4
 80078be:	3b15      	subs	r3, #21
 80078c0:	f023 0303 	bic.w	r3, r3, #3
 80078c4:	3304      	adds	r3, #4
 80078c6:	f104 0015 	add.w	r0, r4, #21
 80078ca:	4584      	cmp	ip, r0
 80078cc:	bf38      	it	cc
 80078ce:	2304      	movcc	r3, #4
 80078d0:	50ca      	str	r2, [r1, r3]
 80078d2:	b10a      	cbz	r2, 80078d8 <__lshift+0xa4>
 80078d4:	f108 0602 	add.w	r6, r8, #2
 80078d8:	3e01      	subs	r6, #1
 80078da:	4638      	mov	r0, r7
 80078dc:	612e      	str	r6, [r5, #16]
 80078de:	4621      	mov	r1, r4
 80078e0:	f7ff fdd8 	bl	8007494 <_Bfree>
 80078e4:	4628      	mov	r0, r5
 80078e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80078ee:	3301      	adds	r3, #1
 80078f0:	e7c5      	b.n	800787e <__lshift+0x4a>
 80078f2:	3904      	subs	r1, #4
 80078f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80078fc:	459c      	cmp	ip, r3
 80078fe:	d8f9      	bhi.n	80078f4 <__lshift+0xc0>
 8007900:	e7ea      	b.n	80078d8 <__lshift+0xa4>
 8007902:	bf00      	nop
 8007904:	080088a8 	.word	0x080088a8
 8007908:	080088b9 	.word	0x080088b9

0800790c <__mcmp>:
 800790c:	b530      	push	{r4, r5, lr}
 800790e:	6902      	ldr	r2, [r0, #16]
 8007910:	690c      	ldr	r4, [r1, #16]
 8007912:	1b12      	subs	r2, r2, r4
 8007914:	d10e      	bne.n	8007934 <__mcmp+0x28>
 8007916:	f100 0314 	add.w	r3, r0, #20
 800791a:	3114      	adds	r1, #20
 800791c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007920:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007924:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007928:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800792c:	42a5      	cmp	r5, r4
 800792e:	d003      	beq.n	8007938 <__mcmp+0x2c>
 8007930:	d305      	bcc.n	800793e <__mcmp+0x32>
 8007932:	2201      	movs	r2, #1
 8007934:	4610      	mov	r0, r2
 8007936:	bd30      	pop	{r4, r5, pc}
 8007938:	4283      	cmp	r3, r0
 800793a:	d3f3      	bcc.n	8007924 <__mcmp+0x18>
 800793c:	e7fa      	b.n	8007934 <__mcmp+0x28>
 800793e:	f04f 32ff 	mov.w	r2, #4294967295
 8007942:	e7f7      	b.n	8007934 <__mcmp+0x28>

08007944 <__mdiff>:
 8007944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	460c      	mov	r4, r1
 800794a:	4606      	mov	r6, r0
 800794c:	4611      	mov	r1, r2
 800794e:	4620      	mov	r0, r4
 8007950:	4690      	mov	r8, r2
 8007952:	f7ff ffdb 	bl	800790c <__mcmp>
 8007956:	1e05      	subs	r5, r0, #0
 8007958:	d110      	bne.n	800797c <__mdiff+0x38>
 800795a:	4629      	mov	r1, r5
 800795c:	4630      	mov	r0, r6
 800795e:	f7ff fd59 	bl	8007414 <_Balloc>
 8007962:	b930      	cbnz	r0, 8007972 <__mdiff+0x2e>
 8007964:	4b3a      	ldr	r3, [pc, #232]	; (8007a50 <__mdiff+0x10c>)
 8007966:	4602      	mov	r2, r0
 8007968:	f240 2137 	movw	r1, #567	; 0x237
 800796c:	4839      	ldr	r0, [pc, #228]	; (8007a54 <__mdiff+0x110>)
 800796e:	f000 fb95 	bl	800809c <__assert_func>
 8007972:	2301      	movs	r3, #1
 8007974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797c:	bfa4      	itt	ge
 800797e:	4643      	movge	r3, r8
 8007980:	46a0      	movge	r8, r4
 8007982:	4630      	mov	r0, r6
 8007984:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007988:	bfa6      	itte	ge
 800798a:	461c      	movge	r4, r3
 800798c:	2500      	movge	r5, #0
 800798e:	2501      	movlt	r5, #1
 8007990:	f7ff fd40 	bl	8007414 <_Balloc>
 8007994:	b920      	cbnz	r0, 80079a0 <__mdiff+0x5c>
 8007996:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <__mdiff+0x10c>)
 8007998:	4602      	mov	r2, r0
 800799a:	f240 2145 	movw	r1, #581	; 0x245
 800799e:	e7e5      	b.n	800796c <__mdiff+0x28>
 80079a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079a4:	6926      	ldr	r6, [r4, #16]
 80079a6:	60c5      	str	r5, [r0, #12]
 80079a8:	f104 0914 	add.w	r9, r4, #20
 80079ac:	f108 0514 	add.w	r5, r8, #20
 80079b0:	f100 0e14 	add.w	lr, r0, #20
 80079b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80079b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079bc:	f108 0210 	add.w	r2, r8, #16
 80079c0:	46f2      	mov	sl, lr
 80079c2:	2100      	movs	r1, #0
 80079c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80079c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80079cc:	fa11 f88b 	uxtah	r8, r1, fp
 80079d0:	b299      	uxth	r1, r3
 80079d2:	0c1b      	lsrs	r3, r3, #16
 80079d4:	eba8 0801 	sub.w	r8, r8, r1
 80079d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079e0:	fa1f f888 	uxth.w	r8, r8
 80079e4:	1419      	asrs	r1, r3, #16
 80079e6:	454e      	cmp	r6, r9
 80079e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079ec:	f84a 3b04 	str.w	r3, [sl], #4
 80079f0:	d8e8      	bhi.n	80079c4 <__mdiff+0x80>
 80079f2:	1b33      	subs	r3, r6, r4
 80079f4:	3b15      	subs	r3, #21
 80079f6:	f023 0303 	bic.w	r3, r3, #3
 80079fa:	3304      	adds	r3, #4
 80079fc:	3415      	adds	r4, #21
 80079fe:	42a6      	cmp	r6, r4
 8007a00:	bf38      	it	cc
 8007a02:	2304      	movcc	r3, #4
 8007a04:	441d      	add	r5, r3
 8007a06:	4473      	add	r3, lr
 8007a08:	469e      	mov	lr, r3
 8007a0a:	462e      	mov	r6, r5
 8007a0c:	4566      	cmp	r6, ip
 8007a0e:	d30e      	bcc.n	8007a2e <__mdiff+0xea>
 8007a10:	f10c 0203 	add.w	r2, ip, #3
 8007a14:	1b52      	subs	r2, r2, r5
 8007a16:	f022 0203 	bic.w	r2, r2, #3
 8007a1a:	3d03      	subs	r5, #3
 8007a1c:	45ac      	cmp	ip, r5
 8007a1e:	bf38      	it	cc
 8007a20:	2200      	movcc	r2, #0
 8007a22:	4413      	add	r3, r2
 8007a24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007a28:	b17a      	cbz	r2, 8007a4a <__mdiff+0x106>
 8007a2a:	6107      	str	r7, [r0, #16]
 8007a2c:	e7a4      	b.n	8007978 <__mdiff+0x34>
 8007a2e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a32:	fa11 f288 	uxtah	r2, r1, r8
 8007a36:	1414      	asrs	r4, r2, #16
 8007a38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a3c:	b292      	uxth	r2, r2
 8007a3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a42:	f84e 2b04 	str.w	r2, [lr], #4
 8007a46:	1421      	asrs	r1, r4, #16
 8007a48:	e7e0      	b.n	8007a0c <__mdiff+0xc8>
 8007a4a:	3f01      	subs	r7, #1
 8007a4c:	e7ea      	b.n	8007a24 <__mdiff+0xe0>
 8007a4e:	bf00      	nop
 8007a50:	080088a8 	.word	0x080088a8
 8007a54:	080088b9 	.word	0x080088b9

08007a58 <__d2b>:
 8007a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	460f      	mov	r7, r1
 8007a5e:	2101      	movs	r1, #1
 8007a60:	ec59 8b10 	vmov	r8, r9, d0
 8007a64:	4616      	mov	r6, r2
 8007a66:	f7ff fcd5 	bl	8007414 <_Balloc>
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	b930      	cbnz	r0, 8007a7c <__d2b+0x24>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	4b24      	ldr	r3, [pc, #144]	; (8007b04 <__d2b+0xac>)
 8007a72:	4825      	ldr	r0, [pc, #148]	; (8007b08 <__d2b+0xb0>)
 8007a74:	f240 310f 	movw	r1, #783	; 0x30f
 8007a78:	f000 fb10 	bl	800809c <__assert_func>
 8007a7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a84:	bb2d      	cbnz	r5, 8007ad2 <__d2b+0x7a>
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	f1b8 0300 	subs.w	r3, r8, #0
 8007a8c:	d026      	beq.n	8007adc <__d2b+0x84>
 8007a8e:	4668      	mov	r0, sp
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	f7ff fd87 	bl	80075a4 <__lo0bits>
 8007a96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a9a:	b1e8      	cbz	r0, 8007ad8 <__d2b+0x80>
 8007a9c:	f1c0 0320 	rsb	r3, r0, #32
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	40c2      	lsrs	r2, r0
 8007aa8:	6163      	str	r3, [r4, #20]
 8007aaa:	9201      	str	r2, [sp, #4]
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	61a3      	str	r3, [r4, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bf14      	ite	ne
 8007ab4:	2202      	movne	r2, #2
 8007ab6:	2201      	moveq	r2, #1
 8007ab8:	6122      	str	r2, [r4, #16]
 8007aba:	b1bd      	cbz	r5, 8007aec <__d2b+0x94>
 8007abc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ac0:	4405      	add	r5, r0
 8007ac2:	603d      	str	r5, [r7, #0]
 8007ac4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ac8:	6030      	str	r0, [r6, #0]
 8007aca:	4620      	mov	r0, r4
 8007acc:	b003      	add	sp, #12
 8007ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ad6:	e7d6      	b.n	8007a86 <__d2b+0x2e>
 8007ad8:	6161      	str	r1, [r4, #20]
 8007ada:	e7e7      	b.n	8007aac <__d2b+0x54>
 8007adc:	a801      	add	r0, sp, #4
 8007ade:	f7ff fd61 	bl	80075a4 <__lo0bits>
 8007ae2:	9b01      	ldr	r3, [sp, #4]
 8007ae4:	6163      	str	r3, [r4, #20]
 8007ae6:	3020      	adds	r0, #32
 8007ae8:	2201      	movs	r2, #1
 8007aea:	e7e5      	b.n	8007ab8 <__d2b+0x60>
 8007aec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007af0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007af4:	6038      	str	r0, [r7, #0]
 8007af6:	6918      	ldr	r0, [r3, #16]
 8007af8:	f7ff fd34 	bl	8007564 <__hi0bits>
 8007afc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b00:	e7e2      	b.n	8007ac8 <__d2b+0x70>
 8007b02:	bf00      	nop
 8007b04:	080088a8 	.word	0x080088a8
 8007b08:	080088b9 	.word	0x080088b9

08007b0c <__sfputc_r>:
 8007b0c:	6893      	ldr	r3, [r2, #8]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	b410      	push	{r4}
 8007b14:	6093      	str	r3, [r2, #8]
 8007b16:	da08      	bge.n	8007b2a <__sfputc_r+0x1e>
 8007b18:	6994      	ldr	r4, [r2, #24]
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	db01      	blt.n	8007b22 <__sfputc_r+0x16>
 8007b1e:	290a      	cmp	r1, #10
 8007b20:	d103      	bne.n	8007b2a <__sfputc_r+0x1e>
 8007b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b26:	f7fe bbe4 	b.w	80062f2 <__swbuf_r>
 8007b2a:	6813      	ldr	r3, [r2, #0]
 8007b2c:	1c58      	adds	r0, r3, #1
 8007b2e:	6010      	str	r0, [r2, #0]
 8007b30:	7019      	strb	r1, [r3, #0]
 8007b32:	4608      	mov	r0, r1
 8007b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <__sfputs_r>:
 8007b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	460f      	mov	r7, r1
 8007b40:	4614      	mov	r4, r2
 8007b42:	18d5      	adds	r5, r2, r3
 8007b44:	42ac      	cmp	r4, r5
 8007b46:	d101      	bne.n	8007b4c <__sfputs_r+0x12>
 8007b48:	2000      	movs	r0, #0
 8007b4a:	e007      	b.n	8007b5c <__sfputs_r+0x22>
 8007b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b50:	463a      	mov	r2, r7
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ffda 	bl	8007b0c <__sfputc_r>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d1f3      	bne.n	8007b44 <__sfputs_r+0xa>
 8007b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b60 <_vfiprintf_r>:
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	460d      	mov	r5, r1
 8007b66:	b09d      	sub	sp, #116	; 0x74
 8007b68:	4614      	mov	r4, r2
 8007b6a:	4698      	mov	r8, r3
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	b118      	cbz	r0, 8007b78 <_vfiprintf_r+0x18>
 8007b70:	6a03      	ldr	r3, [r0, #32]
 8007b72:	b90b      	cbnz	r3, 8007b78 <_vfiprintf_r+0x18>
 8007b74:	f7fe face 	bl	8006114 <__sinit>
 8007b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b7a:	07d9      	lsls	r1, r3, #31
 8007b7c:	d405      	bmi.n	8007b8a <_vfiprintf_r+0x2a>
 8007b7e:	89ab      	ldrh	r3, [r5, #12]
 8007b80:	059a      	lsls	r2, r3, #22
 8007b82:	d402      	bmi.n	8007b8a <_vfiprintf_r+0x2a>
 8007b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b86:	f7fe fcc6 	bl	8006516 <__retarget_lock_acquire_recursive>
 8007b8a:	89ab      	ldrh	r3, [r5, #12]
 8007b8c:	071b      	lsls	r3, r3, #28
 8007b8e:	d501      	bpl.n	8007b94 <_vfiprintf_r+0x34>
 8007b90:	692b      	ldr	r3, [r5, #16]
 8007b92:	b99b      	cbnz	r3, 8007bbc <_vfiprintf_r+0x5c>
 8007b94:	4629      	mov	r1, r5
 8007b96:	4630      	mov	r0, r6
 8007b98:	f7fe fbe8 	bl	800636c <__swsetup_r>
 8007b9c:	b170      	cbz	r0, 8007bbc <_vfiprintf_r+0x5c>
 8007b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ba0:	07dc      	lsls	r4, r3, #31
 8007ba2:	d504      	bpl.n	8007bae <_vfiprintf_r+0x4e>
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	b01d      	add	sp, #116	; 0x74
 8007baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bae:	89ab      	ldrh	r3, [r5, #12]
 8007bb0:	0598      	lsls	r0, r3, #22
 8007bb2:	d4f7      	bmi.n	8007ba4 <_vfiprintf_r+0x44>
 8007bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bb6:	f7fe fcaf 	bl	8006518 <__retarget_lock_release_recursive>
 8007bba:	e7f3      	b.n	8007ba4 <_vfiprintf_r+0x44>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc0:	2320      	movs	r3, #32
 8007bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bca:	2330      	movs	r3, #48	; 0x30
 8007bcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007d80 <_vfiprintf_r+0x220>
 8007bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bd4:	f04f 0901 	mov.w	r9, #1
 8007bd8:	4623      	mov	r3, r4
 8007bda:	469a      	mov	sl, r3
 8007bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007be0:	b10a      	cbz	r2, 8007be6 <_vfiprintf_r+0x86>
 8007be2:	2a25      	cmp	r2, #37	; 0x25
 8007be4:	d1f9      	bne.n	8007bda <_vfiprintf_r+0x7a>
 8007be6:	ebba 0b04 	subs.w	fp, sl, r4
 8007bea:	d00b      	beq.n	8007c04 <_vfiprintf_r+0xa4>
 8007bec:	465b      	mov	r3, fp
 8007bee:	4622      	mov	r2, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ffa1 	bl	8007b3a <__sfputs_r>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	f000 80a9 	beq.w	8007d50 <_vfiprintf_r+0x1f0>
 8007bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c00:	445a      	add	r2, fp
 8007c02:	9209      	str	r2, [sp, #36]	; 0x24
 8007c04:	f89a 3000 	ldrb.w	r3, [sl]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 80a1 	beq.w	8007d50 <_vfiprintf_r+0x1f0>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f04f 32ff 	mov.w	r2, #4294967295
 8007c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c18:	f10a 0a01 	add.w	sl, sl, #1
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	9307      	str	r3, [sp, #28]
 8007c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c24:	931a      	str	r3, [sp, #104]	; 0x68
 8007c26:	4654      	mov	r4, sl
 8007c28:	2205      	movs	r2, #5
 8007c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2e:	4854      	ldr	r0, [pc, #336]	; (8007d80 <_vfiprintf_r+0x220>)
 8007c30:	f7f8 faf6 	bl	8000220 <memchr>
 8007c34:	9a04      	ldr	r2, [sp, #16]
 8007c36:	b9d8      	cbnz	r0, 8007c70 <_vfiprintf_r+0x110>
 8007c38:	06d1      	lsls	r1, r2, #27
 8007c3a:	bf44      	itt	mi
 8007c3c:	2320      	movmi	r3, #32
 8007c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c42:	0713      	lsls	r3, r2, #28
 8007c44:	bf44      	itt	mi
 8007c46:	232b      	movmi	r3, #43	; 0x2b
 8007c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c50:	2b2a      	cmp	r3, #42	; 0x2a
 8007c52:	d015      	beq.n	8007c80 <_vfiprintf_r+0x120>
 8007c54:	9a07      	ldr	r2, [sp, #28]
 8007c56:	4654      	mov	r4, sl
 8007c58:	2000      	movs	r0, #0
 8007c5a:	f04f 0c0a 	mov.w	ip, #10
 8007c5e:	4621      	mov	r1, r4
 8007c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c64:	3b30      	subs	r3, #48	; 0x30
 8007c66:	2b09      	cmp	r3, #9
 8007c68:	d94d      	bls.n	8007d06 <_vfiprintf_r+0x1a6>
 8007c6a:	b1b0      	cbz	r0, 8007c9a <_vfiprintf_r+0x13a>
 8007c6c:	9207      	str	r2, [sp, #28]
 8007c6e:	e014      	b.n	8007c9a <_vfiprintf_r+0x13a>
 8007c70:	eba0 0308 	sub.w	r3, r0, r8
 8007c74:	fa09 f303 	lsl.w	r3, r9, r3
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	9304      	str	r3, [sp, #16]
 8007c7c:	46a2      	mov	sl, r4
 8007c7e:	e7d2      	b.n	8007c26 <_vfiprintf_r+0xc6>
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	1d19      	adds	r1, r3, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	9103      	str	r1, [sp, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	bfbb      	ittet	lt
 8007c8c:	425b      	neglt	r3, r3
 8007c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8007c92:	9307      	strge	r3, [sp, #28]
 8007c94:	9307      	strlt	r3, [sp, #28]
 8007c96:	bfb8      	it	lt
 8007c98:	9204      	strlt	r2, [sp, #16]
 8007c9a:	7823      	ldrb	r3, [r4, #0]
 8007c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8007c9e:	d10c      	bne.n	8007cba <_vfiprintf_r+0x15a>
 8007ca0:	7863      	ldrb	r3, [r4, #1]
 8007ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca4:	d134      	bne.n	8007d10 <_vfiprintf_r+0x1b0>
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	1d1a      	adds	r2, r3, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	9203      	str	r2, [sp, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bfb8      	it	lt
 8007cb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cb6:	3402      	adds	r4, #2
 8007cb8:	9305      	str	r3, [sp, #20]
 8007cba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007d90 <_vfiprintf_r+0x230>
 8007cbe:	7821      	ldrb	r1, [r4, #0]
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	f7f8 faac 	bl	8000220 <memchr>
 8007cc8:	b138      	cbz	r0, 8007cda <_vfiprintf_r+0x17a>
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	eba0 000a 	sub.w	r0, r0, sl
 8007cd0:	2240      	movs	r2, #64	; 0x40
 8007cd2:	4082      	lsls	r2, r0
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	3401      	adds	r4, #1
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cde:	4829      	ldr	r0, [pc, #164]	; (8007d84 <_vfiprintf_r+0x224>)
 8007ce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ce4:	2206      	movs	r2, #6
 8007ce6:	f7f8 fa9b 	bl	8000220 <memchr>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d03f      	beq.n	8007d6e <_vfiprintf_r+0x20e>
 8007cee:	4b26      	ldr	r3, [pc, #152]	; (8007d88 <_vfiprintf_r+0x228>)
 8007cf0:	bb1b      	cbnz	r3, 8007d3a <_vfiprintf_r+0x1da>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	3307      	adds	r3, #7
 8007cf6:	f023 0307 	bic.w	r3, r3, #7
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	9303      	str	r3, [sp, #12]
 8007cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d00:	443b      	add	r3, r7
 8007d02:	9309      	str	r3, [sp, #36]	; 0x24
 8007d04:	e768      	b.n	8007bd8 <_vfiprintf_r+0x78>
 8007d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	e7a6      	b.n	8007c5e <_vfiprintf_r+0xfe>
 8007d10:	2300      	movs	r3, #0
 8007d12:	3401      	adds	r4, #1
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	4619      	mov	r1, r3
 8007d18:	f04f 0c0a 	mov.w	ip, #10
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d22:	3a30      	subs	r2, #48	; 0x30
 8007d24:	2a09      	cmp	r2, #9
 8007d26:	d903      	bls.n	8007d30 <_vfiprintf_r+0x1d0>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0c6      	beq.n	8007cba <_vfiprintf_r+0x15a>
 8007d2c:	9105      	str	r1, [sp, #20]
 8007d2e:	e7c4      	b.n	8007cba <_vfiprintf_r+0x15a>
 8007d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d34:	4604      	mov	r4, r0
 8007d36:	2301      	movs	r3, #1
 8007d38:	e7f0      	b.n	8007d1c <_vfiprintf_r+0x1bc>
 8007d3a:	ab03      	add	r3, sp, #12
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	462a      	mov	r2, r5
 8007d40:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <_vfiprintf_r+0x22c>)
 8007d42:	a904      	add	r1, sp, #16
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7fd fd93 	bl	8005870 <_printf_float>
 8007d4a:	4607      	mov	r7, r0
 8007d4c:	1c78      	adds	r0, r7, #1
 8007d4e:	d1d6      	bne.n	8007cfe <_vfiprintf_r+0x19e>
 8007d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d52:	07d9      	lsls	r1, r3, #31
 8007d54:	d405      	bmi.n	8007d62 <_vfiprintf_r+0x202>
 8007d56:	89ab      	ldrh	r3, [r5, #12]
 8007d58:	059a      	lsls	r2, r3, #22
 8007d5a:	d402      	bmi.n	8007d62 <_vfiprintf_r+0x202>
 8007d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d5e:	f7fe fbdb 	bl	8006518 <__retarget_lock_release_recursive>
 8007d62:	89ab      	ldrh	r3, [r5, #12]
 8007d64:	065b      	lsls	r3, r3, #25
 8007d66:	f53f af1d 	bmi.w	8007ba4 <_vfiprintf_r+0x44>
 8007d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d6c:	e71c      	b.n	8007ba8 <_vfiprintf_r+0x48>
 8007d6e:	ab03      	add	r3, sp, #12
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	462a      	mov	r2, r5
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <_vfiprintf_r+0x22c>)
 8007d76:	a904      	add	r1, sp, #16
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7fe f81d 	bl	8005db8 <_printf_i>
 8007d7e:	e7e4      	b.n	8007d4a <_vfiprintf_r+0x1ea>
 8007d80:	08008a14 	.word	0x08008a14
 8007d84:	08008a1e 	.word	0x08008a1e
 8007d88:	08005871 	.word	0x08005871
 8007d8c:	08007b3b 	.word	0x08007b3b
 8007d90:	08008a1a 	.word	0x08008a1a

08007d94 <__sflush_r>:
 8007d94:	898a      	ldrh	r2, [r1, #12]
 8007d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	0710      	lsls	r0, r2, #28
 8007d9e:	460c      	mov	r4, r1
 8007da0:	d458      	bmi.n	8007e54 <__sflush_r+0xc0>
 8007da2:	684b      	ldr	r3, [r1, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dc05      	bgt.n	8007db4 <__sflush_r+0x20>
 8007da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	dc02      	bgt.n	8007db4 <__sflush_r+0x20>
 8007dae:	2000      	movs	r0, #0
 8007db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	d0f9      	beq.n	8007dae <__sflush_r+0x1a>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dc0:	682f      	ldr	r7, [r5, #0]
 8007dc2:	6a21      	ldr	r1, [r4, #32]
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	d032      	beq.n	8007e2e <__sflush_r+0x9a>
 8007dc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	075a      	lsls	r2, r3, #29
 8007dce:	d505      	bpl.n	8007ddc <__sflush_r+0x48>
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	1ac0      	subs	r0, r0, r3
 8007dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dd6:	b10b      	cbz	r3, 8007ddc <__sflush_r+0x48>
 8007dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dda:	1ac0      	subs	r0, r0, r3
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4602      	mov	r2, r0
 8007de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007de2:	6a21      	ldr	r1, [r4, #32]
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b0      	blx	r6
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	d106      	bne.n	8007dfc <__sflush_r+0x68>
 8007dee:	6829      	ldr	r1, [r5, #0]
 8007df0:	291d      	cmp	r1, #29
 8007df2:	d82b      	bhi.n	8007e4c <__sflush_r+0xb8>
 8007df4:	4a29      	ldr	r2, [pc, #164]	; (8007e9c <__sflush_r+0x108>)
 8007df6:	410a      	asrs	r2, r1
 8007df8:	07d6      	lsls	r6, r2, #31
 8007dfa:	d427      	bmi.n	8007e4c <__sflush_r+0xb8>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	6062      	str	r2, [r4, #4]
 8007e00:	04d9      	lsls	r1, r3, #19
 8007e02:	6922      	ldr	r2, [r4, #16]
 8007e04:	6022      	str	r2, [r4, #0]
 8007e06:	d504      	bpl.n	8007e12 <__sflush_r+0x7e>
 8007e08:	1c42      	adds	r2, r0, #1
 8007e0a:	d101      	bne.n	8007e10 <__sflush_r+0x7c>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b903      	cbnz	r3, 8007e12 <__sflush_r+0x7e>
 8007e10:	6560      	str	r0, [r4, #84]	; 0x54
 8007e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e14:	602f      	str	r7, [r5, #0]
 8007e16:	2900      	cmp	r1, #0
 8007e18:	d0c9      	beq.n	8007dae <__sflush_r+0x1a>
 8007e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d002      	beq.n	8007e28 <__sflush_r+0x94>
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7ff f9f6 	bl	8007214 <_free_r>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	6360      	str	r0, [r4, #52]	; 0x34
 8007e2c:	e7c0      	b.n	8007db0 <__sflush_r+0x1c>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4628      	mov	r0, r5
 8007e32:	47b0      	blx	r6
 8007e34:	1c41      	adds	r1, r0, #1
 8007e36:	d1c8      	bne.n	8007dca <__sflush_r+0x36>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0c5      	beq.n	8007dca <__sflush_r+0x36>
 8007e3e:	2b1d      	cmp	r3, #29
 8007e40:	d001      	beq.n	8007e46 <__sflush_r+0xb2>
 8007e42:	2b16      	cmp	r3, #22
 8007e44:	d101      	bne.n	8007e4a <__sflush_r+0xb6>
 8007e46:	602f      	str	r7, [r5, #0]
 8007e48:	e7b1      	b.n	8007dae <__sflush_r+0x1a>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e50:	81a3      	strh	r3, [r4, #12]
 8007e52:	e7ad      	b.n	8007db0 <__sflush_r+0x1c>
 8007e54:	690f      	ldr	r7, [r1, #16]
 8007e56:	2f00      	cmp	r7, #0
 8007e58:	d0a9      	beq.n	8007dae <__sflush_r+0x1a>
 8007e5a:	0793      	lsls	r3, r2, #30
 8007e5c:	680e      	ldr	r6, [r1, #0]
 8007e5e:	bf08      	it	eq
 8007e60:	694b      	ldreq	r3, [r1, #20]
 8007e62:	600f      	str	r7, [r1, #0]
 8007e64:	bf18      	it	ne
 8007e66:	2300      	movne	r3, #0
 8007e68:	eba6 0807 	sub.w	r8, r6, r7
 8007e6c:	608b      	str	r3, [r1, #8]
 8007e6e:	f1b8 0f00 	cmp.w	r8, #0
 8007e72:	dd9c      	ble.n	8007dae <__sflush_r+0x1a>
 8007e74:	6a21      	ldr	r1, [r4, #32]
 8007e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e78:	4643      	mov	r3, r8
 8007e7a:	463a      	mov	r2, r7
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b0      	blx	r6
 8007e80:	2800      	cmp	r0, #0
 8007e82:	dc06      	bgt.n	8007e92 <__sflush_r+0xfe>
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e90:	e78e      	b.n	8007db0 <__sflush_r+0x1c>
 8007e92:	4407      	add	r7, r0
 8007e94:	eba8 0800 	sub.w	r8, r8, r0
 8007e98:	e7e9      	b.n	8007e6e <__sflush_r+0xda>
 8007e9a:	bf00      	nop
 8007e9c:	dfbffffe 	.word	0xdfbffffe

08007ea0 <_fflush_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	690b      	ldr	r3, [r1, #16]
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	b913      	cbnz	r3, 8007eb0 <_fflush_r+0x10>
 8007eaa:	2500      	movs	r5, #0
 8007eac:	4628      	mov	r0, r5
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
 8007eb0:	b118      	cbz	r0, 8007eba <_fflush_r+0x1a>
 8007eb2:	6a03      	ldr	r3, [r0, #32]
 8007eb4:	b90b      	cbnz	r3, 8007eba <_fflush_r+0x1a>
 8007eb6:	f7fe f92d 	bl	8006114 <__sinit>
 8007eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f3      	beq.n	8007eaa <_fflush_r+0xa>
 8007ec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ec4:	07d0      	lsls	r0, r2, #31
 8007ec6:	d404      	bmi.n	8007ed2 <_fflush_r+0x32>
 8007ec8:	0599      	lsls	r1, r3, #22
 8007eca:	d402      	bmi.n	8007ed2 <_fflush_r+0x32>
 8007ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ece:	f7fe fb22 	bl	8006516 <__retarget_lock_acquire_recursive>
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	f7ff ff5d 	bl	8007d94 <__sflush_r>
 8007eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007edc:	07da      	lsls	r2, r3, #31
 8007ede:	4605      	mov	r5, r0
 8007ee0:	d4e4      	bmi.n	8007eac <_fflush_r+0xc>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	059b      	lsls	r3, r3, #22
 8007ee6:	d4e1      	bmi.n	8007eac <_fflush_r+0xc>
 8007ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eea:	f7fe fb15 	bl	8006518 <__retarget_lock_release_recursive>
 8007eee:	e7dd      	b.n	8007eac <_fflush_r+0xc>

08007ef0 <__swhatbuf_r>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef8:	2900      	cmp	r1, #0
 8007efa:	b096      	sub	sp, #88	; 0x58
 8007efc:	4615      	mov	r5, r2
 8007efe:	461e      	mov	r6, r3
 8007f00:	da0d      	bge.n	8007f1e <__swhatbuf_r+0x2e>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f08:	f04f 0100 	mov.w	r1, #0
 8007f0c:	bf0c      	ite	eq
 8007f0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007f12:	2340      	movne	r3, #64	; 0x40
 8007f14:	2000      	movs	r0, #0
 8007f16:	6031      	str	r1, [r6, #0]
 8007f18:	602b      	str	r3, [r5, #0]
 8007f1a:	b016      	add	sp, #88	; 0x58
 8007f1c:	bd70      	pop	{r4, r5, r6, pc}
 8007f1e:	466a      	mov	r2, sp
 8007f20:	f000 f87c 	bl	800801c <_fstat_r>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	dbec      	blt.n	8007f02 <__swhatbuf_r+0x12>
 8007f28:	9901      	ldr	r1, [sp, #4]
 8007f2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007f2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007f32:	4259      	negs	r1, r3
 8007f34:	4159      	adcs	r1, r3
 8007f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f3a:	e7eb      	b.n	8007f14 <__swhatbuf_r+0x24>

08007f3c <__smakebuf_r>:
 8007f3c:	898b      	ldrh	r3, [r1, #12]
 8007f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f40:	079d      	lsls	r5, r3, #30
 8007f42:	4606      	mov	r6, r0
 8007f44:	460c      	mov	r4, r1
 8007f46:	d507      	bpl.n	8007f58 <__smakebuf_r+0x1c>
 8007f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	6123      	str	r3, [r4, #16]
 8007f50:	2301      	movs	r3, #1
 8007f52:	6163      	str	r3, [r4, #20]
 8007f54:	b002      	add	sp, #8
 8007f56:	bd70      	pop	{r4, r5, r6, pc}
 8007f58:	ab01      	add	r3, sp, #4
 8007f5a:	466a      	mov	r2, sp
 8007f5c:	f7ff ffc8 	bl	8007ef0 <__swhatbuf_r>
 8007f60:	9900      	ldr	r1, [sp, #0]
 8007f62:	4605      	mov	r5, r0
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7ff f9c9 	bl	80072fc <_malloc_r>
 8007f6a:	b948      	cbnz	r0, 8007f80 <__smakebuf_r+0x44>
 8007f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f70:	059a      	lsls	r2, r3, #22
 8007f72:	d4ef      	bmi.n	8007f54 <__smakebuf_r+0x18>
 8007f74:	f023 0303 	bic.w	r3, r3, #3
 8007f78:	f043 0302 	orr.w	r3, r3, #2
 8007f7c:	81a3      	strh	r3, [r4, #12]
 8007f7e:	e7e3      	b.n	8007f48 <__smakebuf_r+0xc>
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	6020      	str	r0, [r4, #0]
 8007f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f88:	81a3      	strh	r3, [r4, #12]
 8007f8a:	9b00      	ldr	r3, [sp, #0]
 8007f8c:	6163      	str	r3, [r4, #20]
 8007f8e:	9b01      	ldr	r3, [sp, #4]
 8007f90:	6120      	str	r0, [r4, #16]
 8007f92:	b15b      	cbz	r3, 8007fac <__smakebuf_r+0x70>
 8007f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f000 f851 	bl	8008040 <_isatty_r>
 8007f9e:	b128      	cbz	r0, 8007fac <__smakebuf_r+0x70>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f023 0303 	bic.w	r3, r3, #3
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	431d      	orrs	r5, r3
 8007fb0:	81a5      	strh	r5, [r4, #12]
 8007fb2:	e7cf      	b.n	8007f54 <__smakebuf_r+0x18>

08007fb4 <_putc_r>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	460d      	mov	r5, r1
 8007fb8:	4614      	mov	r4, r2
 8007fba:	4606      	mov	r6, r0
 8007fbc:	b118      	cbz	r0, 8007fc6 <_putc_r+0x12>
 8007fbe:	6a03      	ldr	r3, [r0, #32]
 8007fc0:	b90b      	cbnz	r3, 8007fc6 <_putc_r+0x12>
 8007fc2:	f7fe f8a7 	bl	8006114 <__sinit>
 8007fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fc8:	07d8      	lsls	r0, r3, #31
 8007fca:	d405      	bmi.n	8007fd8 <_putc_r+0x24>
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	0599      	lsls	r1, r3, #22
 8007fd0:	d402      	bmi.n	8007fd8 <_putc_r+0x24>
 8007fd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd4:	f7fe fa9f 	bl	8006516 <__retarget_lock_acquire_recursive>
 8007fd8:	68a3      	ldr	r3, [r4, #8]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	60a3      	str	r3, [r4, #8]
 8007fe0:	da05      	bge.n	8007fee <_putc_r+0x3a>
 8007fe2:	69a2      	ldr	r2, [r4, #24]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	db12      	blt.n	800800e <_putc_r+0x5a>
 8007fe8:	b2eb      	uxtb	r3, r5
 8007fea:	2b0a      	cmp	r3, #10
 8007fec:	d00f      	beq.n	800800e <_putc_r+0x5a>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	6022      	str	r2, [r4, #0]
 8007ff4:	701d      	strb	r5, [r3, #0]
 8007ff6:	b2ed      	uxtb	r5, r5
 8007ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ffa:	07da      	lsls	r2, r3, #31
 8007ffc:	d405      	bmi.n	800800a <_putc_r+0x56>
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	059b      	lsls	r3, r3, #22
 8008002:	d402      	bmi.n	800800a <_putc_r+0x56>
 8008004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008006:	f7fe fa87 	bl	8006518 <__retarget_lock_release_recursive>
 800800a:	4628      	mov	r0, r5
 800800c:	bd70      	pop	{r4, r5, r6, pc}
 800800e:	4629      	mov	r1, r5
 8008010:	4622      	mov	r2, r4
 8008012:	4630      	mov	r0, r6
 8008014:	f7fe f96d 	bl	80062f2 <__swbuf_r>
 8008018:	4605      	mov	r5, r0
 800801a:	e7ed      	b.n	8007ff8 <_putc_r+0x44>

0800801c <_fstat_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4d07      	ldr	r5, [pc, #28]	; (800803c <_fstat_r+0x20>)
 8008020:	2300      	movs	r3, #0
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	602b      	str	r3, [r5, #0]
 800802a:	f7f9 fdb0 	bl	8001b8e <_fstat>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	d102      	bne.n	8008038 <_fstat_r+0x1c>
 8008032:	682b      	ldr	r3, [r5, #0]
 8008034:	b103      	cbz	r3, 8008038 <_fstat_r+0x1c>
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	bd38      	pop	{r3, r4, r5, pc}
 800803a:	bf00      	nop
 800803c:	20001c58 	.word	0x20001c58

08008040 <_isatty_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4d06      	ldr	r5, [pc, #24]	; (800805c <_isatty_r+0x1c>)
 8008044:	2300      	movs	r3, #0
 8008046:	4604      	mov	r4, r0
 8008048:	4608      	mov	r0, r1
 800804a:	602b      	str	r3, [r5, #0]
 800804c:	f7f9 fdaf 	bl	8001bae <_isatty>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_isatty_r+0x1a>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	b103      	cbz	r3, 800805a <_isatty_r+0x1a>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	20001c58 	.word	0x20001c58

08008060 <_sbrk_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4d06      	ldr	r5, [pc, #24]	; (800807c <_sbrk_r+0x1c>)
 8008064:	2300      	movs	r3, #0
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	602b      	str	r3, [r5, #0]
 800806c:	f7f9 fdb8 	bl	8001be0 <_sbrk>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_sbrk_r+0x1a>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	b103      	cbz	r3, 800807a <_sbrk_r+0x1a>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	20001c58 	.word	0x20001c58

08008080 <memcpy>:
 8008080:	440a      	add	r2, r1
 8008082:	4291      	cmp	r1, r2
 8008084:	f100 33ff 	add.w	r3, r0, #4294967295
 8008088:	d100      	bne.n	800808c <memcpy+0xc>
 800808a:	4770      	bx	lr
 800808c:	b510      	push	{r4, lr}
 800808e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008096:	4291      	cmp	r1, r2
 8008098:	d1f9      	bne.n	800808e <memcpy+0xe>
 800809a:	bd10      	pop	{r4, pc}

0800809c <__assert_func>:
 800809c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800809e:	4614      	mov	r4, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <__assert_func+0x2c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4605      	mov	r5, r0
 80080a8:	68d8      	ldr	r0, [r3, #12]
 80080aa:	b14c      	cbz	r4, 80080c0 <__assert_func+0x24>
 80080ac:	4b07      	ldr	r3, [pc, #28]	; (80080cc <__assert_func+0x30>)
 80080ae:	9100      	str	r1, [sp, #0]
 80080b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080b4:	4906      	ldr	r1, [pc, #24]	; (80080d0 <__assert_func+0x34>)
 80080b6:	462b      	mov	r3, r5
 80080b8:	f000 f844 	bl	8008144 <fiprintf>
 80080bc:	f000 f854 	bl	8008168 <abort>
 80080c0:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <__assert_func+0x38>)
 80080c2:	461c      	mov	r4, r3
 80080c4:	e7f3      	b.n	80080ae <__assert_func+0x12>
 80080c6:	bf00      	nop
 80080c8:	20000064 	.word	0x20000064
 80080cc:	08008a2f 	.word	0x08008a2f
 80080d0:	08008a3c 	.word	0x08008a3c
 80080d4:	08008a6a 	.word	0x08008a6a

080080d8 <_calloc_r>:
 80080d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080da:	fba1 2402 	umull	r2, r4, r1, r2
 80080de:	b94c      	cbnz	r4, 80080f4 <_calloc_r+0x1c>
 80080e0:	4611      	mov	r1, r2
 80080e2:	9201      	str	r2, [sp, #4]
 80080e4:	f7ff f90a 	bl	80072fc <_malloc_r>
 80080e8:	9a01      	ldr	r2, [sp, #4]
 80080ea:	4605      	mov	r5, r0
 80080ec:	b930      	cbnz	r0, 80080fc <_calloc_r+0x24>
 80080ee:	4628      	mov	r0, r5
 80080f0:	b003      	add	sp, #12
 80080f2:	bd30      	pop	{r4, r5, pc}
 80080f4:	220c      	movs	r2, #12
 80080f6:	6002      	str	r2, [r0, #0]
 80080f8:	2500      	movs	r5, #0
 80080fa:	e7f8      	b.n	80080ee <_calloc_r+0x16>
 80080fc:	4621      	mov	r1, r4
 80080fe:	f7fe f98d 	bl	800641c <memset>
 8008102:	e7f4      	b.n	80080ee <_calloc_r+0x16>

08008104 <__ascii_mbtowc>:
 8008104:	b082      	sub	sp, #8
 8008106:	b901      	cbnz	r1, 800810a <__ascii_mbtowc+0x6>
 8008108:	a901      	add	r1, sp, #4
 800810a:	b142      	cbz	r2, 800811e <__ascii_mbtowc+0x1a>
 800810c:	b14b      	cbz	r3, 8008122 <__ascii_mbtowc+0x1e>
 800810e:	7813      	ldrb	r3, [r2, #0]
 8008110:	600b      	str	r3, [r1, #0]
 8008112:	7812      	ldrb	r2, [r2, #0]
 8008114:	1e10      	subs	r0, r2, #0
 8008116:	bf18      	it	ne
 8008118:	2001      	movne	r0, #1
 800811a:	b002      	add	sp, #8
 800811c:	4770      	bx	lr
 800811e:	4610      	mov	r0, r2
 8008120:	e7fb      	b.n	800811a <__ascii_mbtowc+0x16>
 8008122:	f06f 0001 	mvn.w	r0, #1
 8008126:	e7f8      	b.n	800811a <__ascii_mbtowc+0x16>

08008128 <__ascii_wctomb>:
 8008128:	b149      	cbz	r1, 800813e <__ascii_wctomb+0x16>
 800812a:	2aff      	cmp	r2, #255	; 0xff
 800812c:	bf85      	ittet	hi
 800812e:	238a      	movhi	r3, #138	; 0x8a
 8008130:	6003      	strhi	r3, [r0, #0]
 8008132:	700a      	strbls	r2, [r1, #0]
 8008134:	f04f 30ff 	movhi.w	r0, #4294967295
 8008138:	bf98      	it	ls
 800813a:	2001      	movls	r0, #1
 800813c:	4770      	bx	lr
 800813e:	4608      	mov	r0, r1
 8008140:	4770      	bx	lr
	...

08008144 <fiprintf>:
 8008144:	b40e      	push	{r1, r2, r3}
 8008146:	b503      	push	{r0, r1, lr}
 8008148:	4601      	mov	r1, r0
 800814a:	ab03      	add	r3, sp, #12
 800814c:	4805      	ldr	r0, [pc, #20]	; (8008164 <fiprintf+0x20>)
 800814e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008152:	6800      	ldr	r0, [r0, #0]
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	f7ff fd03 	bl	8007b60 <_vfiprintf_r>
 800815a:	b002      	add	sp, #8
 800815c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008160:	b003      	add	sp, #12
 8008162:	4770      	bx	lr
 8008164:	20000064 	.word	0x20000064

08008168 <abort>:
 8008168:	b508      	push	{r3, lr}
 800816a:	2006      	movs	r0, #6
 800816c:	f000 f82c 	bl	80081c8 <raise>
 8008170:	2001      	movs	r0, #1
 8008172:	f7f9 fcbd 	bl	8001af0 <_exit>

08008176 <_raise_r>:
 8008176:	291f      	cmp	r1, #31
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4604      	mov	r4, r0
 800817c:	460d      	mov	r5, r1
 800817e:	d904      	bls.n	800818a <_raise_r+0x14>
 8008180:	2316      	movs	r3, #22
 8008182:	6003      	str	r3, [r0, #0]
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	bd38      	pop	{r3, r4, r5, pc}
 800818a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800818c:	b112      	cbz	r2, 8008194 <_raise_r+0x1e>
 800818e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008192:	b94b      	cbnz	r3, 80081a8 <_raise_r+0x32>
 8008194:	4620      	mov	r0, r4
 8008196:	f000 f831 	bl	80081fc <_getpid_r>
 800819a:	462a      	mov	r2, r5
 800819c:	4601      	mov	r1, r0
 800819e:	4620      	mov	r0, r4
 80081a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a4:	f000 b818 	b.w	80081d8 <_kill_r>
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d00a      	beq.n	80081c2 <_raise_r+0x4c>
 80081ac:	1c59      	adds	r1, r3, #1
 80081ae:	d103      	bne.n	80081b8 <_raise_r+0x42>
 80081b0:	2316      	movs	r3, #22
 80081b2:	6003      	str	r3, [r0, #0]
 80081b4:	2001      	movs	r0, #1
 80081b6:	e7e7      	b.n	8008188 <_raise_r+0x12>
 80081b8:	2400      	movs	r4, #0
 80081ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081be:	4628      	mov	r0, r5
 80081c0:	4798      	blx	r3
 80081c2:	2000      	movs	r0, #0
 80081c4:	e7e0      	b.n	8008188 <_raise_r+0x12>
	...

080081c8 <raise>:
 80081c8:	4b02      	ldr	r3, [pc, #8]	; (80081d4 <raise+0xc>)
 80081ca:	4601      	mov	r1, r0
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	f7ff bfd2 	b.w	8008176 <_raise_r>
 80081d2:	bf00      	nop
 80081d4:	20000064 	.word	0x20000064

080081d8 <_kill_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d07      	ldr	r5, [pc, #28]	; (80081f8 <_kill_r+0x20>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	4611      	mov	r1, r2
 80081e4:	602b      	str	r3, [r5, #0]
 80081e6:	f7f9 fc73 	bl	8001ad0 <_kill>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	d102      	bne.n	80081f4 <_kill_r+0x1c>
 80081ee:	682b      	ldr	r3, [r5, #0]
 80081f0:	b103      	cbz	r3, 80081f4 <_kill_r+0x1c>
 80081f2:	6023      	str	r3, [r4, #0]
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
 80081f6:	bf00      	nop
 80081f8:	20001c58 	.word	0x20001c58

080081fc <_getpid_r>:
 80081fc:	f7f9 bc60 	b.w	8001ac0 <_getpid>

08008200 <atan>:
 8008200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	ec55 4b10 	vmov	r4, r5, d0
 8008208:	4bc3      	ldr	r3, [pc, #780]	; (8008518 <atan+0x318>)
 800820a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800820e:	429e      	cmp	r6, r3
 8008210:	46ab      	mov	fp, r5
 8008212:	dd18      	ble.n	8008246 <atan+0x46>
 8008214:	4bc1      	ldr	r3, [pc, #772]	; (800851c <atan+0x31c>)
 8008216:	429e      	cmp	r6, r3
 8008218:	dc01      	bgt.n	800821e <atan+0x1e>
 800821a:	d109      	bne.n	8008230 <atan+0x30>
 800821c:	b144      	cbz	r4, 8008230 <atan+0x30>
 800821e:	4622      	mov	r2, r4
 8008220:	462b      	mov	r3, r5
 8008222:	4620      	mov	r0, r4
 8008224:	4629      	mov	r1, r5
 8008226:	f7f8 f859 	bl	80002dc <__adddf3>
 800822a:	4604      	mov	r4, r0
 800822c:	460d      	mov	r5, r1
 800822e:	e006      	b.n	800823e <atan+0x3e>
 8008230:	f1bb 0f00 	cmp.w	fp, #0
 8008234:	f300 8131 	bgt.w	800849a <atan+0x29a>
 8008238:	a59b      	add	r5, pc, #620	; (adr r5, 80084a8 <atan+0x2a8>)
 800823a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800823e:	ec45 4b10 	vmov	d0, r4, r5
 8008242:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008246:	4bb6      	ldr	r3, [pc, #728]	; (8008520 <atan+0x320>)
 8008248:	429e      	cmp	r6, r3
 800824a:	dc14      	bgt.n	8008276 <atan+0x76>
 800824c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008250:	429e      	cmp	r6, r3
 8008252:	dc0d      	bgt.n	8008270 <atan+0x70>
 8008254:	a396      	add	r3, pc, #600	; (adr r3, 80084b0 <atan+0x2b0>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	ee10 0a10 	vmov	r0, s0
 800825e:	4629      	mov	r1, r5
 8008260:	f7f8 f83c 	bl	80002dc <__adddf3>
 8008264:	4baf      	ldr	r3, [pc, #700]	; (8008524 <atan+0x324>)
 8008266:	2200      	movs	r2, #0
 8008268:	f7f8 fc7e 	bl	8000b68 <__aeabi_dcmpgt>
 800826c:	2800      	cmp	r0, #0
 800826e:	d1e6      	bne.n	800823e <atan+0x3e>
 8008270:	f04f 3aff 	mov.w	sl, #4294967295
 8008274:	e02b      	b.n	80082ce <atan+0xce>
 8008276:	f000 f963 	bl	8008540 <fabs>
 800827a:	4bab      	ldr	r3, [pc, #684]	; (8008528 <atan+0x328>)
 800827c:	429e      	cmp	r6, r3
 800827e:	ec55 4b10 	vmov	r4, r5, d0
 8008282:	f300 80bf 	bgt.w	8008404 <atan+0x204>
 8008286:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800828a:	429e      	cmp	r6, r3
 800828c:	f300 80a0 	bgt.w	80083d0 <atan+0x1d0>
 8008290:	ee10 2a10 	vmov	r2, s0
 8008294:	ee10 0a10 	vmov	r0, s0
 8008298:	462b      	mov	r3, r5
 800829a:	4629      	mov	r1, r5
 800829c:	f7f8 f81e 	bl	80002dc <__adddf3>
 80082a0:	4ba0      	ldr	r3, [pc, #640]	; (8008524 <atan+0x324>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	f7f8 f818 	bl	80002d8 <__aeabi_dsub>
 80082a8:	2200      	movs	r2, #0
 80082aa:	4606      	mov	r6, r0
 80082ac:	460f      	mov	r7, r1
 80082ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082b2:	4620      	mov	r0, r4
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7f8 f811 	bl	80002dc <__adddf3>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4630      	mov	r0, r6
 80082c0:	4639      	mov	r1, r7
 80082c2:	f7f8 faeb 	bl	800089c <__aeabi_ddiv>
 80082c6:	f04f 0a00 	mov.w	sl, #0
 80082ca:	4604      	mov	r4, r0
 80082cc:	460d      	mov	r5, r1
 80082ce:	4622      	mov	r2, r4
 80082d0:	462b      	mov	r3, r5
 80082d2:	4620      	mov	r0, r4
 80082d4:	4629      	mov	r1, r5
 80082d6:	f7f8 f9b7 	bl	8000648 <__aeabi_dmul>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4680      	mov	r8, r0
 80082e0:	4689      	mov	r9, r1
 80082e2:	f7f8 f9b1 	bl	8000648 <__aeabi_dmul>
 80082e6:	a374      	add	r3, pc, #464	; (adr r3, 80084b8 <atan+0x2b8>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	4606      	mov	r6, r0
 80082ee:	460f      	mov	r7, r1
 80082f0:	f7f8 f9aa 	bl	8000648 <__aeabi_dmul>
 80082f4:	a372      	add	r3, pc, #456	; (adr r3, 80084c0 <atan+0x2c0>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f7 ffef 	bl	80002dc <__adddf3>
 80082fe:	4632      	mov	r2, r6
 8008300:	463b      	mov	r3, r7
 8008302:	f7f8 f9a1 	bl	8000648 <__aeabi_dmul>
 8008306:	a370      	add	r3, pc, #448	; (adr r3, 80084c8 <atan+0x2c8>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	f7f7 ffe6 	bl	80002dc <__adddf3>
 8008310:	4632      	mov	r2, r6
 8008312:	463b      	mov	r3, r7
 8008314:	f7f8 f998 	bl	8000648 <__aeabi_dmul>
 8008318:	a36d      	add	r3, pc, #436	; (adr r3, 80084d0 <atan+0x2d0>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f7 ffdd 	bl	80002dc <__adddf3>
 8008322:	4632      	mov	r2, r6
 8008324:	463b      	mov	r3, r7
 8008326:	f7f8 f98f 	bl	8000648 <__aeabi_dmul>
 800832a:	a36b      	add	r3, pc, #428	; (adr r3, 80084d8 <atan+0x2d8>)
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f7f7 ffd4 	bl	80002dc <__adddf3>
 8008334:	4632      	mov	r2, r6
 8008336:	463b      	mov	r3, r7
 8008338:	f7f8 f986 	bl	8000648 <__aeabi_dmul>
 800833c:	a368      	add	r3, pc, #416	; (adr r3, 80084e0 <atan+0x2e0>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f7f7 ffcb 	bl	80002dc <__adddf3>
 8008346:	4642      	mov	r2, r8
 8008348:	464b      	mov	r3, r9
 800834a:	f7f8 f97d 	bl	8000648 <__aeabi_dmul>
 800834e:	a366      	add	r3, pc, #408	; (adr r3, 80084e8 <atan+0x2e8>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	4680      	mov	r8, r0
 8008356:	4689      	mov	r9, r1
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 f974 	bl	8000648 <__aeabi_dmul>
 8008360:	a363      	add	r3, pc, #396	; (adr r3, 80084f0 <atan+0x2f0>)
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f7f7 ffb7 	bl	80002d8 <__aeabi_dsub>
 800836a:	4632      	mov	r2, r6
 800836c:	463b      	mov	r3, r7
 800836e:	f7f8 f96b 	bl	8000648 <__aeabi_dmul>
 8008372:	a361      	add	r3, pc, #388	; (adr r3, 80084f8 <atan+0x2f8>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f7f7 ffae 	bl	80002d8 <__aeabi_dsub>
 800837c:	4632      	mov	r2, r6
 800837e:	463b      	mov	r3, r7
 8008380:	f7f8 f962 	bl	8000648 <__aeabi_dmul>
 8008384:	a35e      	add	r3, pc, #376	; (adr r3, 8008500 <atan+0x300>)
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	f7f7 ffa5 	bl	80002d8 <__aeabi_dsub>
 800838e:	4632      	mov	r2, r6
 8008390:	463b      	mov	r3, r7
 8008392:	f7f8 f959 	bl	8000648 <__aeabi_dmul>
 8008396:	a35c      	add	r3, pc, #368	; (adr r3, 8008508 <atan+0x308>)
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	f7f7 ff9c 	bl	80002d8 <__aeabi_dsub>
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	f7f8 f950 	bl	8000648 <__aeabi_dmul>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4640      	mov	r0, r8
 80083ae:	4649      	mov	r1, r9
 80083b0:	f7f7 ff94 	bl	80002dc <__adddf3>
 80083b4:	4622      	mov	r2, r4
 80083b6:	462b      	mov	r3, r5
 80083b8:	f7f8 f946 	bl	8000648 <__aeabi_dmul>
 80083bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	d14b      	bne.n	800845e <atan+0x25e>
 80083c6:	4620      	mov	r0, r4
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7f7 ff85 	bl	80002d8 <__aeabi_dsub>
 80083ce:	e72c      	b.n	800822a <atan+0x2a>
 80083d0:	ee10 0a10 	vmov	r0, s0
 80083d4:	4b53      	ldr	r3, [pc, #332]	; (8008524 <atan+0x324>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	4629      	mov	r1, r5
 80083da:	f7f7 ff7d 	bl	80002d8 <__aeabi_dsub>
 80083de:	4b51      	ldr	r3, [pc, #324]	; (8008524 <atan+0x324>)
 80083e0:	4606      	mov	r6, r0
 80083e2:	460f      	mov	r7, r1
 80083e4:	2200      	movs	r2, #0
 80083e6:	4620      	mov	r0, r4
 80083e8:	4629      	mov	r1, r5
 80083ea:	f7f7 ff77 	bl	80002dc <__adddf3>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f8 fa51 	bl	800089c <__aeabi_ddiv>
 80083fa:	f04f 0a01 	mov.w	sl, #1
 80083fe:	4604      	mov	r4, r0
 8008400:	460d      	mov	r5, r1
 8008402:	e764      	b.n	80082ce <atan+0xce>
 8008404:	4b49      	ldr	r3, [pc, #292]	; (800852c <atan+0x32c>)
 8008406:	429e      	cmp	r6, r3
 8008408:	da1d      	bge.n	8008446 <atan+0x246>
 800840a:	ee10 0a10 	vmov	r0, s0
 800840e:	4b48      	ldr	r3, [pc, #288]	; (8008530 <atan+0x330>)
 8008410:	2200      	movs	r2, #0
 8008412:	4629      	mov	r1, r5
 8008414:	f7f7 ff60 	bl	80002d8 <__aeabi_dsub>
 8008418:	4b45      	ldr	r3, [pc, #276]	; (8008530 <atan+0x330>)
 800841a:	4606      	mov	r6, r0
 800841c:	460f      	mov	r7, r1
 800841e:	2200      	movs	r2, #0
 8008420:	4620      	mov	r0, r4
 8008422:	4629      	mov	r1, r5
 8008424:	f7f8 f910 	bl	8000648 <__aeabi_dmul>
 8008428:	4b3e      	ldr	r3, [pc, #248]	; (8008524 <atan+0x324>)
 800842a:	2200      	movs	r2, #0
 800842c:	f7f7 ff56 	bl	80002dc <__adddf3>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4630      	mov	r0, r6
 8008436:	4639      	mov	r1, r7
 8008438:	f7f8 fa30 	bl	800089c <__aeabi_ddiv>
 800843c:	f04f 0a02 	mov.w	sl, #2
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	e743      	b.n	80082ce <atan+0xce>
 8008446:	462b      	mov	r3, r5
 8008448:	ee10 2a10 	vmov	r2, s0
 800844c:	4939      	ldr	r1, [pc, #228]	; (8008534 <atan+0x334>)
 800844e:	2000      	movs	r0, #0
 8008450:	f7f8 fa24 	bl	800089c <__aeabi_ddiv>
 8008454:	f04f 0a03 	mov.w	sl, #3
 8008458:	4604      	mov	r4, r0
 800845a:	460d      	mov	r5, r1
 800845c:	e737      	b.n	80082ce <atan+0xce>
 800845e:	4b36      	ldr	r3, [pc, #216]	; (8008538 <atan+0x338>)
 8008460:	4e36      	ldr	r6, [pc, #216]	; (800853c <atan+0x33c>)
 8008462:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	f7f7 ff35 	bl	80002d8 <__aeabi_dsub>
 800846e:	4622      	mov	r2, r4
 8008470:	462b      	mov	r3, r5
 8008472:	f7f7 ff31 	bl	80002d8 <__aeabi_dsub>
 8008476:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008482:	f7f7 ff29 	bl	80002d8 <__aeabi_dsub>
 8008486:	f1bb 0f00 	cmp.w	fp, #0
 800848a:	4604      	mov	r4, r0
 800848c:	460d      	mov	r5, r1
 800848e:	f6bf aed6 	bge.w	800823e <atan+0x3e>
 8008492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008496:	461d      	mov	r5, r3
 8008498:	e6d1      	b.n	800823e <atan+0x3e>
 800849a:	a51d      	add	r5, pc, #116	; (adr r5, 8008510 <atan+0x310>)
 800849c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084a0:	e6cd      	b.n	800823e <atan+0x3e>
 80084a2:	bf00      	nop
 80084a4:	f3af 8000 	nop.w
 80084a8:	54442d18 	.word	0x54442d18
 80084ac:	bff921fb 	.word	0xbff921fb
 80084b0:	8800759c 	.word	0x8800759c
 80084b4:	7e37e43c 	.word	0x7e37e43c
 80084b8:	e322da11 	.word	0xe322da11
 80084bc:	3f90ad3a 	.word	0x3f90ad3a
 80084c0:	24760deb 	.word	0x24760deb
 80084c4:	3fa97b4b 	.word	0x3fa97b4b
 80084c8:	a0d03d51 	.word	0xa0d03d51
 80084cc:	3fb10d66 	.word	0x3fb10d66
 80084d0:	c54c206e 	.word	0xc54c206e
 80084d4:	3fb745cd 	.word	0x3fb745cd
 80084d8:	920083ff 	.word	0x920083ff
 80084dc:	3fc24924 	.word	0x3fc24924
 80084e0:	5555550d 	.word	0x5555550d
 80084e4:	3fd55555 	.word	0x3fd55555
 80084e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80084ec:	bfa2b444 	.word	0xbfa2b444
 80084f0:	52defd9a 	.word	0x52defd9a
 80084f4:	3fadde2d 	.word	0x3fadde2d
 80084f8:	af749a6d 	.word	0xaf749a6d
 80084fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8008500:	fe231671 	.word	0xfe231671
 8008504:	3fbc71c6 	.word	0x3fbc71c6
 8008508:	9998ebc4 	.word	0x9998ebc4
 800850c:	3fc99999 	.word	0x3fc99999
 8008510:	54442d18 	.word	0x54442d18
 8008514:	3ff921fb 	.word	0x3ff921fb
 8008518:	440fffff 	.word	0x440fffff
 800851c:	7ff00000 	.word	0x7ff00000
 8008520:	3fdbffff 	.word	0x3fdbffff
 8008524:	3ff00000 	.word	0x3ff00000
 8008528:	3ff2ffff 	.word	0x3ff2ffff
 800852c:	40038000 	.word	0x40038000
 8008530:	3ff80000 	.word	0x3ff80000
 8008534:	bff00000 	.word	0xbff00000
 8008538:	08008b90 	.word	0x08008b90
 800853c:	08008b70 	.word	0x08008b70

08008540 <fabs>:
 8008540:	ec51 0b10 	vmov	r0, r1, d0
 8008544:	ee10 2a10 	vmov	r2, s0
 8008548:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800854c:	ec43 2b10 	vmov	d0, r2, r3
 8008550:	4770      	bx	lr
	...

08008554 <_init>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	bf00      	nop
 8008558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855a:	bc08      	pop	{r3}
 800855c:	469e      	mov	lr, r3
 800855e:	4770      	bx	lr

08008560 <_fini>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr
