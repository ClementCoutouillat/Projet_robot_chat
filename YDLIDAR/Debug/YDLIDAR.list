
YDLIDAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08005e80  08005e80  00015e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006160  08006160  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006168  08006168  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006168  08006168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019fc  20000068  080061d8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a64  080061d8  00021a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bc4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dba  00000000  00000000  00029c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  0002ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000683  00000000  00000000  0002c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000150ad  00000000  00000000  0002c963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b596  00000000  00000000  00041a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079771  00000000  00000000  0004cfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b7c  00000000  00000000  000c6718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000c9294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e64 	.word	0x08005e64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005e64 	.word	0x08005e64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be0:	f080 811c 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8119 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8107 	bcs.w	8000e20 <__udivmoddi4+0x294>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8104 	bls.w	8000e20 <__udivmoddi4+0x294>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ed 	beq.w	8000e16 <__udivmoddi4+0x28a>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2be>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8090 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2c2>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d00:	4323      	orrs	r3, r4
 8000d02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb08 f50e 	mul.w	r5, r8, lr
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2b4>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2b4>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d44:	fb09 4413 	mls	r4, r9, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2ac>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2ac>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	42ac      	cmp	r4, r5
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46ae      	mov	lr, r5
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x29c>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x298>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40ca      	lsrs	r2, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	f1c3 0120 	rsb	r1, r3, #32
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	fa20 f201 	lsr.w	r2, r0, r1
 8000da8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dac:	409d      	lsls	r5, r3
 8000dae:	432a      	orrs	r2, r5
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dca:	428d      	cmp	r5, r1
 8000dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x258>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1b49      	subs	r1, r1, r5
 8000de6:	b292      	uxth	r2, r2
 8000de8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dec:	fb07 1115 	mls	r1, r7, r5, r1
 8000df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df4:	fb05 f10e 	mul.w	r1, r5, lr
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x282>
 8000dfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000e00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000e06:	4291      	cmp	r1, r2
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000e0a:	3d02      	subs	r5, #2
 8000e0c:	4462      	add	r2, ip
 8000e0e:	1a52      	subs	r2, r2, r1
 8000e10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e6e6      	b.n	8000bee <__udivmoddi4+0x62>
 8000e20:	4610      	mov	r0, r2
 8000e22:	e6fb      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e24:	4548      	cmp	r0, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e30:	3b01      	subs	r3, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e34:	4645      	mov	r5, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e38:	462b      	mov	r3, r5
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x258>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x14e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <calculateChecksum>:
 * @param data  The data to be calculated
 * @param length  The length of the data to be calculated
 * @return uint16_t
 */
uint16_t calculateChecksum(uint16_t *data, size_t length)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
    uint16_t checksum = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	e00a      	b.n	8000e82 <calculateChecksum+0x2a>
    {
        checksum ^= data[i];
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	881a      	ldrh	r2, [r3, #0]
 8000e76:	89fb      	ldrh	r3, [r7, #14]
 8000e78:	4053      	eors	r3, r2
 8000e7a:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d3f0      	bcc.n	8000e6c <calculateChecksum+0x14>
    }

    return checksum;
 8000e8a:	89fb      	ldrh	r3, [r7, #14]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <getDeviceInfo>:
 *
 * @param device_info  The device info Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t getDeviceInfo(ydlidar_device_info_t *device_info)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    ydlidar_response_header_t response_header;
    sendCommand(YDLIDAR_CMD_GET_DEVICE_INFO);
 8000ea0:	2090      	movs	r0, #144	; 0x90
 8000ea2:	f000 f877 	bl	8000f94 <sendCommand>

    receiveResponseHeader(&response_header);
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f888 	bl	8000fc0 <receiveResponseHeader>

    if (response_header.type_mode == YDLIDAR_RESPONSE_DEVICVE_TYPE_MODE && response_header.response_length == YDLIDAR_RESPONSE_DEVICE_INFO_SIZE)
 8000eb0:	7cbb      	ldrb	r3, [r7, #18]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d116      	bne.n	8000ee4 <getDeviceInfo+0x4c>
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	8a3a      	ldrh	r2, [r7, #16]
 8000eba:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000ebe:	0412      	lsls	r2, r2, #16
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	2b14      	cmp	r3, #20
 8000ec4:	d10e      	bne.n	8000ee4 <getDeviceInfo+0x4c>
    {
        uint8_t *infobuf = (uint8_t *)device_info;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	617b      	str	r3, [r7, #20]
        ydlidar.func.receive_response(infobuf, YDLIDAR_RESPONSE_DEVICE_INFO_SIZE);
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <getDeviceInfo+0x58>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2114      	movs	r1, #20
 8000ed0:	6978      	ldr	r0, [r7, #20]
 8000ed2:	4798      	blx	r3
        if (device_info->model == YDLIDAR_MODEL_X4)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b06      	cmp	r3, #6
 8000eda:	d101      	bne.n	8000ee0 <getDeviceInfo+0x48>
        {
            return RESULT_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	e002      	b.n	8000ee6 <getDeviceInfo+0x4e>
        }
        else
        {
            return RESULT_FAIL;
 8000ee0:	23ff      	movs	r3, #255	; 0xff
 8000ee2:	e000      	b.n	8000ee6 <getDeviceInfo+0x4e>
        }
    }
    else
    {
        return RESULT_FAIL;
 8000ee4:	23ff      	movs	r3, #255	; 0xff
    }
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000084 	.word	0x20000084

08000ef4 <getDeviceHealth>:
 *
 * @param device_health  The device health Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t getDeviceHealth(ydlidar_device_health_t *device_health)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    ydlidar_response_header_t response_header;
    sendCommand(YDLIDAR_CMD_GET_DEVICE_HEALTH);
 8000efc:	2091      	movs	r0, #145	; 0x91
 8000efe:	f000 f849 	bl	8000f94 <sendCommand>
    receiveResponseHeader(&response_header);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f85a 	bl	8000fc0 <receiveResponseHeader>
    if (response_header.type_mode == YDLIDAR_RESPONSE_HEALTH_TYPE_MODE && response_header.response_length == YDLIDAR_RESPONSE_DEVICE_HEALTH_SIZE)
 8000f0c:	7cbb      	ldrb	r3, [r7, #18]
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d116      	bne.n	8000f40 <getDeviceHealth+0x4c>
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	8a3a      	ldrh	r2, [r7, #16]
 8000f16:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000f1a:	0412      	lsls	r2, r2, #16
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d10e      	bne.n	8000f40 <getDeviceHealth+0x4c>
    {
        uint8_t *healthbuf = (uint8_t *)device_health;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	617b      	str	r3, [r7, #20]
        ydlidar.func.receive_response(healthbuf, YDLIDAR_RESPONSE_DEVICE_HEALTH_SIZE);
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <getDeviceHealth+0x58>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	4798      	blx	r3
        if (device_health->status == 0)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <getDeviceHealth+0x48>
        {
            return RESULT_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e002      	b.n	8000f42 <getDeviceHealth+0x4e>
        }
        else
        {
            return RESULT_FAIL;
 8000f3c:	23ff      	movs	r3, #255	; 0xff
 8000f3e:	e000      	b.n	8000f42 <getDeviceHealth+0x4e>
        }
    }
    else
    {
        return RESULT_FAIL;
 8000f40:	23ff      	movs	r3, #255	; 0xff
    }
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000084 	.word	0x20000084

08000f50 <stopScan>:
/**
 * @brief  This function is used to stop the scan
 *
 */
void stopScan()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    sendCommand(YDLIDER_CMD_STOP);
 8000f54:	2065      	movs	r0, #101	; 0x65
 8000f56:	f000 f81d 	bl	8000f94 <sendCommand>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <startScan>:
 * @brief  This function is used to start the scan
 *
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t startScan()
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
    stopScan();
 8000f64:	f7ff fff4 	bl	8000f50 <stopScan>
    HAL_Delay(1000);
 8000f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6c:	f000 ffda 	bl	8001f24 <HAL_Delay>
    sendCommand(YDLIDER_CMD_SCAN);
 8000f70:	2060      	movs	r0, #96	; 0x60
 8000f72:	f000 f80f 	bl	8000f94 <sendCommand>
    ydlidar_response_header_t response_header;
    receiveResponseHeader(&response_header);
 8000f76:	463b      	mov	r3, r7
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f821 	bl	8000fc0 <receiveResponseHeader>
    if (response_header.type_mode == YDLIDAR_RESPONSE_MEASUREMENT_TYPE_MODE)
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	2b81      	cmp	r3, #129	; 0x81
 8000f82:	d101      	bne.n	8000f88 <startScan+0x2a>
    {
        return RESULT_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e000      	b.n	8000f8a <startScan+0x2c>
    }
    else
    {
        return RESULT_FAIL;
 8000f88:	23ff      	movs	r3, #255	; 0xff
    }
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <sendCommand>:
 * @brief This function is used to send the command
 *
 * @param cmd  The command to be sent
 */
void sendCommand(uint8_t cmd)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    ydlidar_cmd_packet_t cmd_packet;
    cmd_packet.syncByte = YDLIDER_CMD_SYNC_BYTE;
 8000f9e:	23a5      	movs	r3, #165	; 0xa5
 8000fa0:	733b      	strb	r3, [r7, #12]
    cmd_packet.cmd_flag = cmd;
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	737b      	strb	r3, [r7, #13]
    ydlidar.func.send_command((uint8_t *)&cmd_packet, sizeof(cmd_packet));
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <sendCommand+0x28>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f107 020c 	add.w	r2, r7, #12
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4798      	blx	r3
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000084 	.word	0x20000084

08000fc0 <receiveResponseHeader>:
 *
 * @param response_header  The response header Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t receiveResponseHeader(ydlidar_response_header_t *response_header)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    uint8_t *header = (uint8_t *)response_header;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	60fb      	str	r3, [r7, #12]
    ydlidar.func.receive_response(header, YDLIDAR_RESPONSE_HEADER_SIZE);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <receiveResponseHeader+0x20>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2107      	movs	r1, #7
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	4798      	blx	r3
    printf("[DEBUG] Response mode: %d\n", response_header->response_mode);
    printf("[DEBUG] Response type mode: %x\n", response_header->type_mode);
    printf("[DEBUG] Response type mode: %d\n", response_header->type_mode);

#endif
    return RESULT_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000084 	.word	0x20000084

08000fe4 <startReceiveScanData>:
/**
 * @brief  This function is used to start receive the scan data
 *
 */
void startReceiveScanData(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    ydlidar.func.receive_data_dma(scanPoints[SCAN_CIRCLE_INDEX], sizeof(scanPoints[SCAN_CIRCLE_INDEX]));
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <startReceiveScanData+0x28>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a08      	ldr	r2, [pc, #32]	; (8001010 <startReceiveScanData+0x2c>)
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000ff6:	fb01 f202 	mul.w	r2, r1, r2
 8000ffa:	4906      	ldr	r1, [pc, #24]	; (8001014 <startReceiveScanData+0x30>)
 8000ffc:	440a      	add	r2, r1
 8000ffe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001002:	4610      	mov	r0, r2
 8001004:	4798      	blx	r3
    // check the start flag
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000084 	.word	0x20000084
 8001010:	20001824 	.word	0x20001824
 8001014:	200000b4 	.word	0x200000b4

08001018 <parseDistance>:
 * @param rawDistance  The raw distance data
 * @param LSN  The number of the sample data
 * @param realDistance  The real distance after parse
 */
void parseDistance(uint16_t *rawDistance, int LSN, double *realDistance)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < LSN; i++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e017      	b.n	800105a <parseDistance+0x42>
    {
        realDistance[i] = (double)rawDistance[i] / 4.0f;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa7d 	bl	8000534 <__aeabi_ui2d>
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	18d4      	adds	r4, r2, r3
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <parseDistance+0x54>)
 8001048:	f7ff fc18 	bl	800087c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < LSN; i++)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	429a      	cmp	r2, r3
 8001060:	dbe3      	blt.n	800102a <parseDistance+0x12>
    }
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	40100000 	.word	0x40100000

08001070 <AngleFirstLevelParse>:
 * @param LSA  The end angle
 * @param LSN  The number of the sample data
 * @param angles  The angle after parse
 */
void AngleFirstLevelParse(uint16_t FSA, uint16_t LSA, int LSN, double *angles)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b08f      	sub	sp, #60	; 0x3c
 8001074:	af00      	add	r7, sp, #0
 8001076:	60ba      	str	r2, [r7, #8]
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4603      	mov	r3, r0
 800107c:	81fb      	strh	r3, [r7, #14]
 800107e:	460b      	mov	r3, r1
 8001080:	81bb      	strh	r3, [r7, #12]
    // calculate start angle and end angle
    double startAngle = (double)(FSA >> 1) / 64.0;
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	085b      	lsrs	r3, r3, #1
 8001086:	b29b      	uxth	r3, r3
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa63 	bl	8000554 <__aeabi_i2d>
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <AngleFirstLevelParse+0xcc>)
 8001094:	f7ff fbf2 	bl	800087c <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double endAngle = (double)(LSA >> 1) / 64.0;
 80010a0:	89bb      	ldrh	r3, [r7, #12]
 80010a2:	085b      	lsrs	r3, r3, #1
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa54 	bl	8000554 <__aeabi_i2d>
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <AngleFirstLevelParse+0xcc>)
 80010b2:	f7ff fbe3 	bl	800087c <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // calculate angle range
    double angleRange = endAngle - startAngle;
 80010be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010c6:	f7ff f8f7 	bl	80002b8 <__aeabi_dsub>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // calculate angle resolution
    double angleResolution = angleRange / (double)(LSN - 1);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa3c 	bl	8000554 <__aeabi_i2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e4:	f7ff fbca 	bl	800087c <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < LSN; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
 80010f4:	e019      	b.n	800112a <AngleFirstLevelParse+0xba>
    {
        angles[i] = startAngle + angleResolution * i;
 80010f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010f8:	f7ff fa2c 	bl	8000554 <__aeabi_i2d>
 80010fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001100:	f7ff fa92 	bl	8000628 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	18d4      	adds	r4, r2, r3
 8001114:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001118:	f7ff f8d0 	bl	80002bc <__adddf3>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < LSN; i++)
 8001124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001126:	3301      	adds	r3, #1
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
 800112a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	429a      	cmp	r2, r3
 8001130:	dbe1      	blt.n	80010f6 <AngleFirstLevelParse+0x86>
    }
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	373c      	adds	r7, #60	; 0x3c
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	40500000 	.word	0x40500000

08001140 <AngleSecondLevelParse>:
 * @param angles  The angle after first level parse
 * @param LSN  The number of the sample data
 * @param distances  The distance after parse
 */
void AngleSecondLevelParse(double *angles, int LSN, double *distances)
{
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
    // IF Distance𝑖 == 0 AngCorrect𝑖 = 0
    // ELSE AngCorrect𝑖 = tand−1(21.8 ∗ 155.3−Distance𝑖 155.3∗Distance𝑖) for (int i = 1; i < LSN; i++)
    double AngCorrect = 0.0;
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < LSN; i++)
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e05f      	b.n	800121e <AngleSecondLevelParse+0xde>
    {
        if (distances[i] != 0)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	f7ff fcc1 	bl	8000af8 <__aeabi_dcmpeq>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d135      	bne.n	80011e8 <AngleSecondLevelParse+0xa8>
        {
            AngCorrect = atan(21.8 * (155.3 - distances[i]) / (155.3 * distances[i]));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	a129      	add	r1, pc, #164	; (adr r1, 8001230 <AngleSecondLevelParse+0xf0>)
 800118a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800118e:	f7ff f893 	bl	80002b8 <__aeabi_dsub>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a327      	add	r3, pc, #156	; (adr r3, 8001238 <AngleSecondLevelParse+0xf8>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fa42 	bl	8000628 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4614      	mov	r4, r2
 80011aa:	461d      	mov	r5, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b8:	a31d      	add	r3, pc, #116	; (adr r3, 8001230 <AngleSecondLevelParse+0xf0>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fa33 	bl	8000628 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4620      	mov	r0, r4
 80011c8:	4629      	mov	r1, r5
 80011ca:	f7ff fb57 	bl	800087c <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	ec43 2b17 	vmov	d7, r2, r3
 80011d6:	eeb0 0a47 	vmov.f32	s0, s14
 80011da:	eef0 0a67 	vmov.f32	s1, s15
 80011de:	f004 fc97 	bl	8005b10 <atan>
 80011e2:	ed87 0b06 	vstr	d0, [r7, #24]
 80011e6:	e005      	b.n	80011f4 <AngleSecondLevelParse+0xb4>
        }
        else
        {
            AngCorrect = 0.0;
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }
        angles[i] += AngCorrect;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	18d4      	adds	r4, r2, r3
 8001208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800120c:	f7ff f856 	bl	80002bc <__adddf3>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 1; i < LSN; i++)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	429a      	cmp	r2, r3
 8001224:	db9b      	blt.n	800115e <AngleSecondLevelParse+0x1e>
    }
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bdb0      	pop	{r4, r5, r7, pc}
 8001230:	9999999a 	.word	0x9999999a
 8001234:	40636999 	.word	0x40636999
 8001238:	cccccccd 	.word	0xcccccccd
 800123c:	4035cccc 	.word	0x4035cccc

08001240 <dataProcess>:
/**
 * @brief  This function is used to process the scan data
 *
 */
void dataProcess(void)
{
 8001240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001244:	b09b      	sub	sp, #108	; 0x6c
 8001246:	af04      	add	r7, sp, #16
    if (processScanDataIndex >= 10)
 8001248:	4baa      	ldr	r3, [pc, #680]	; (80014f4 <dataProcess+0x2b4>)
 800124a:	f993 3000 	ldrsb.w	r3, [r3]
 800124e:	2b09      	cmp	r3, #9
 8001250:	dd02      	ble.n	8001258 <dataProcess+0x18>
    {
        processScanDataIndex = 0;
 8001252:	4aa8      	ldr	r2, [pc, #672]	; (80014f4 <dataProcess+0x2b4>)
 8001254:	2300      	movs	r3, #0
 8001256:	7013      	strb	r3, [r2, #0]
    }
    if (processScanDataIndex == SCAN_CIRCLE_INDEX)
 8001258:	4ba6      	ldr	r3, [pc, #664]	; (80014f4 <dataProcess+0x2b4>)
 800125a:	f993 3000 	ldrsb.w	r3, [r3]
 800125e:	461a      	mov	r2, r3
 8001260:	4ba5      	ldr	r3, [pc, #660]	; (80014f8 <dataProcess+0x2b8>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	f000 8165 	beq.w	8001534 <dataProcess+0x2f4>
    {
        return;
    }
    printf("[DEBUG] processScanDataIndex = %d\n", processScanDataIndex);
 800126a:	4ba2      	ldr	r3, [pc, #648]	; (80014f4 <dataProcess+0x2b4>)
 800126c:	f993 3000 	ldrsb.w	r3, [r3]
 8001270:	4619      	mov	r1, r3
 8001272:	48a2      	ldr	r0, [pc, #648]	; (80014fc <dataProcess+0x2bc>)
 8001274:	f003 fd40 	bl	8004cf8 <iprintf>
    uint8_t *data = (uint8_t *)&scanPoints[processScanDataIndex];
 8001278:	4b9e      	ldr	r3, [pc, #632]	; (80014f4 <dataProcess+0x2b4>)
 800127a:	f993 3000 	ldrsb.w	r3, [r3]
 800127e:	461a      	mov	r2, r3
 8001280:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	4a9d      	ldr	r2, [pc, #628]	; (8001500 <dataProcess+0x2c0>)
 800128a:	4413      	add	r3, r2
 800128c:	64bb      	str	r3, [r7, #72]	; 0x48
    uint16_t checkSumrResult = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    for (int i = 0; i < MAX_SAMPLE_DATA_SIZE; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	657b      	str	r3, [r7, #84]	; 0x54
 8001298:	e13d      	b.n	8001516 <dataProcess+0x2d6>
    {
        if (data[i] == 0xAA && data[i + 1] == 0x55) // check the start flag
 800129a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800129c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2baa      	cmp	r3, #170	; 0xaa
 80012a4:	f040 8134 	bne.w	8001510 <dataProcess+0x2d0>
 80012a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012aa:	3301      	adds	r3, #1
 80012ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b55      	cmp	r3, #85	; 0x55
 80012b4:	f040 812c 	bne.w	8001510 <dataProcess+0x2d0>
        {
 80012b8:	466b      	mov	r3, sp
 80012ba:	461e      	mov	r6, r3

            ydlidar_data_packet_t *data_packet = (ydlidar_data_packet_t *)&data[i];
 80012bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012c0:	4413      	add	r3, r2
 80012c2:	643b      	str	r3, [r7, #64]	; 0x40
            if (data_packet->size_LSN == 1)
 80012c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c6:	78db      	ldrb	r3, [r3, #3]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <dataProcess+0x90>
            {
                continue; // skip the start data packet
 80012cc:	46b5      	mov	sp, r6
 80012ce:	e11f      	b.n	8001510 <dataProcess+0x2d0>
            }
            checkSumrResult = calculateChecksum((uint16_t *)&data[i], 4); // calculate the checksum
 80012d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012d4:	4413      	add	r3, r2
 80012d6:	2104      	movs	r1, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fdbd 	bl	8000e58 <calculateChecksum>
 80012de:	4603      	mov	r3, r0
 80012e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            uint16_t sampleDatas_SI[data_packet->size_LSN];
 80012e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012e6:	78d9      	ldrb	r1, [r3, #3]
 80012e8:	460b      	mov	r3, r1
 80012ea:	3b01      	subs	r3, #1
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ee:	b2cb      	uxtb	r3, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	461c      	mov	r4, r3
 80012f4:	4615      	mov	r5, r2
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	012b      	lsls	r3, r5, #4
 8001300:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001304:	0122      	lsls	r2, r4, #4
 8001306:	b2cb      	uxtb	r3, r1
 8001308:	2200      	movs	r2, #0
 800130a:	4698      	mov	r8, r3
 800130c:	4691      	mov	r9, r2
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800131a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800131e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001322:	460b      	mov	r3, r1
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	3307      	adds	r3, #7
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	ebad 0d03 	sub.w	sp, sp, r3
 8001330:	ab04      	add	r3, sp, #16
 8001332:	3301      	adds	r3, #1
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
            uint16_t *sampledata = (uint16_t *)&data[i + sizeof(ydlidar_data_packet_t)];
 800133a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133c:	f103 020a 	add.w	r2, r3, #10
 8001340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001342:	4413      	add	r3, r2
 8001344:	637b      	str	r3, [r7, #52]	; 0x34

            for (int j = 0; j < data_packet->size_LSN; j++) // convert the data to uint16_t
 8001346:	2300      	movs	r3, #0
 8001348:	653b      	str	r3, [r7, #80]	; 0x50
 800134a:	e00b      	b.n	8001364 <dataProcess+0x124>
            {
                sampleDatas_SI[j] = sampledata[j];
 800134c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800134e:	005a      	lsls	r2, r3, #1
 8001350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001352:	4413      	add	r3, r2
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001358:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800135a:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
            for (int j = 0; j < data_packet->size_LSN; j++) // convert the data to uint16_t
 800135e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001360:	3301      	adds	r3, #1
 8001362:	653b      	str	r3, [r7, #80]	; 0x50
 8001364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001366:	78db      	ldrb	r3, [r3, #3]
 8001368:	461a      	mov	r2, r3
 800136a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800136c:	4293      	cmp	r3, r2
 800136e:	dbed      	blt.n	800134c <dataProcess+0x10c>
            }
            checkSumrResult += calculateChecksum(sampledata, data_packet->size_LSN); // calculate the checksum
 8001370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001372:	78db      	ldrb	r3, [r3, #3]
 8001374:	4619      	mov	r1, r3
 8001376:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001378:	f7ff fd6e 	bl	8000e58 <calculateChecksum>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001384:	4413      	add	r3, r2
 8001386:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            if (checkSumrResult == data_packet->crc_CS)
 800138a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800138c:	891b      	ldrh	r3, [r3, #8]
 800138e:	b29a      	uxth	r2, r3
 8001390:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001394:	4293      	cmp	r3, r2
 8001396:	f040 80b7 	bne.w	8001508 <dataProcess+0x2c8>
            {
 800139a:	466b      	mov	r3, sp
 800139c:	607b      	str	r3, [r7, #4]
                double distances[data_packet->size_LSN];
 800139e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a0:	78d9      	ldrb	r1, [r3, #3]
 80013a2:	460b      	mov	r3, r1
 80013a4:	3b01      	subs	r3, #1
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
 80013a8:	b2cb      	uxtb	r3, r1
 80013aa:	2200      	movs	r2, #0
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	61fa      	str	r2, [r7, #28]
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	69f8      	ldr	r0, [r7, #28]
 80013ba:	0183      	lsls	r3, r0, #6
 80013bc:	69b8      	ldr	r0, [r7, #24]
 80013be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80013c2:	69b8      	ldr	r0, [r7, #24]
 80013c4:	0182      	lsls	r2, r0, #6
 80013c6:	b2cb      	uxtb	r3, r1
 80013c8:	2200      	movs	r2, #0
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	617a      	str	r2, [r7, #20]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	0183      	lsls	r3, r0, #6
 80013da:	6938      	ldr	r0, [r7, #16]
 80013dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80013e0:	6938      	ldr	r0, [r7, #16]
 80013e2:	0182      	lsls	r2, r0, #6
 80013e4:	460b      	mov	r3, r1
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	3307      	adds	r3, #7
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	ebad 0d03 	sub.w	sp, sp, r3
 80013f2:	ab04      	add	r3, sp, #16
 80013f4:	3307      	adds	r3, #7
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                double angles[data_packet->size_LSN];
 80013fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013fe:	78d9      	ldrb	r1, [r3, #3]
 8001400:	460b      	mov	r3, r1
 8001402:	3b01      	subs	r3, #1
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
 8001406:	b2cb      	uxtb	r3, r1
 8001408:	2200      	movs	r2, #0
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	60fa      	str	r2, [r7, #12]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	0183      	lsls	r3, r0, #6
 800141a:	68b8      	ldr	r0, [r7, #8]
 800141c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	0182      	lsls	r2, r0, #6
 8001424:	b2cb      	uxtb	r3, r1
 8001426:	2200      	movs	r2, #0
 8001428:	469a      	mov	sl, r3
 800142a:	4693      	mov	fp, r2
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001438:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800143c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001440:	460b      	mov	r3, r1
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	3307      	adds	r3, #7
 8001446:	08db      	lsrs	r3, r3, #3
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	ebad 0d03 	sub.w	sp, sp, r3
 800144e:	ab04      	add	r3, sp, #16
 8001450:	3307      	adds	r3, #7
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
                parseDistance(sampleDatas_SI, data_packet->size_LSN, distances);                                                       // parse the distance
 8001458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800145a:	78db      	ldrb	r3, [r3, #3]
 800145c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800145e:	4619      	mov	r1, r3
 8001460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001462:	f7ff fdd9 	bl	8001018 <parseDistance>
                AngleFirstLevelParse(data_packet->startAngle_FSA, data_packet->endAngle_LSA, data_packet->size_LSN, (double *)angles); // parse the first level angle
 8001466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001468:	889b      	ldrh	r3, [r3, #4]
 800146a:	b298      	uxth	r0, r3
 800146c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800146e:	88db      	ldrh	r3, [r3, #6]
 8001470:	b299      	uxth	r1, r3
 8001472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001474:	78db      	ldrb	r3, [r3, #3]
 8001476:	461a      	mov	r2, r3
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	f7ff fdf9 	bl	8001070 <AngleFirstLevelParse>
                AngleSecondLevelParse((double *)angles, data_packet->size_LSN, (double *)distances);                                   // parse the second level angle
 800147e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001480:	78db      	ldrb	r3, [r3, #3]
 8001482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001484:	4619      	mov	r1, r3
 8001486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001488:	f7ff fe5a 	bl	8001140 <AngleSecondLevelParse>
                for (int j = 0; j < data_packet->size_LSN; j++)
 800148c:	2300      	movs	r3, #0
 800148e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001490:	e027      	b.n	80014e2 <dataProcess+0x2a2>
                {
                    if (distances[j] != 0)
 8001492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	f7ff fb27 	bl	8000af8 <__aeabi_dcmpeq>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d115      	bne.n	80014dc <dataProcess+0x29c>
                    {
                        printf("[DEBUG] angles[%d] : %f => distances[%d] : %f\n", j, angles[j], j, distances[j]);
 80014b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <dataProcess+0x2c4>)
 80014d8:	f003 fc0e 	bl	8004cf8 <iprintf>
                for (int j = 0; j < data_packet->size_LSN; j++)
 80014dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014de:	3301      	adds	r3, #1
 80014e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014e4:	78db      	ldrb	r3, [r3, #3]
 80014e6:	461a      	mov	r2, r3
 80014e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ea:	4293      	cmp	r3, r2
 80014ec:	dbd1      	blt.n	8001492 <dataProcess+0x252>
 80014ee:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80014f2:	e00c      	b.n	800150e <dataProcess+0x2ce>
 80014f4:	20001825 	.word	0x20001825
 80014f8:	20001824 	.word	0x20001824
 80014fc:	08005e80 	.word	0x08005e80
 8001500:	200000b4 	.word	0x200000b4
 8001504:	08005ea4 	.word	0x08005ea4
                    }
                }
            }
            else
            {
                printf("[ERROR] Checksum error!\n");
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <dataProcess+0x300>)
 800150a:	f003 fc63 	bl	8004dd4 <puts>
 800150e:	46b5      	mov	sp, r6
    for (int i = 0; i < MAX_SAMPLE_DATA_SIZE; i++)
 8001510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001512:	3301      	adds	r3, #1
 8001514:	657b      	str	r3, [r7, #84]	; 0x54
 8001516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001518:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800151c:	f6ff aebd 	blt.w	800129a <dataProcess+0x5a>
            printf("[DEBUG] data_packet->crc_CS = %x\n", data_packet->crc_CS);
            printf("[DEBUG] calculate checksum = %x\n", checkSumrResult);
#endif
        }
    }
    processScanDataIndex++;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <dataProcess+0x304>)
 8001522:	f993 3000 	ldrsb.w	r3, [r3]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	3301      	adds	r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	b25a      	sxtb	r2, r3
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <dataProcess+0x304>)
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	e000      	b.n	8001536 <dataProcess+0x2f6>
        return;
 8001534:	bf00      	nop
}
 8001536:	375c      	adds	r7, #92	; 0x5c
 8001538:	46bd      	mov	sp, r7
 800153a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800153e:	bf00      	nop
 8001540:	08005ed4 	.word	0x08005ed4
 8001544:	20001825 	.word	0x20001825

08001548 <restartScan>:
/**
 * @brief  This function is used to restart the scan
 *
 */
void restartScan(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
    stopScan();
 800154e:	f7ff fcff 	bl	8000f50 <stopScan>
    HAL_Delay(1000);
 8001552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001556:	f000 fce5 	bl	8001f24 <HAL_Delay>
    ydlidar_device_info_t deviceinfo;
    if (getDeviceInfo(&deviceinfo) == RESULT_OK)
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fc9a 	bl	8000e98 <getDeviceInfo>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d155      	bne.n	8001616 <restartScan+0xce>
    {
        printf("[YDLIDAR INFO] Connection established in [%s]\n", deviceinfo.model == YDLIDAR_MODEL_X4 ? "X4" : "NOT MODEL X4");
 800156a:	7a3b      	ldrb	r3, [r7, #8]
 800156c:	2b06      	cmp	r3, #6
 800156e:	d101      	bne.n	8001574 <restartScan+0x2c>
 8001570:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <restartScan+0xdc>)
 8001572:	e000      	b.n	8001576 <restartScan+0x2e>
 8001574:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <restartScan+0xe0>)
 8001576:	4619      	mov	r1, r3
 8001578:	482c      	ldr	r0, [pc, #176]	; (800162c <restartScan+0xe4>)
 800157a:	f003 fbbd 	bl	8004cf8 <iprintf>
        printf("[YDLIDAR INFO] Firmware version: %d.%d\n", deviceinfo.major_firmware_version, deviceinfo.minor_firmware_version);
 800157e:	7a7b      	ldrb	r3, [r7, #9]
 8001580:	4619      	mov	r1, r3
 8001582:	7abb      	ldrb	r3, [r7, #10]
 8001584:	461a      	mov	r2, r3
 8001586:	482a      	ldr	r0, [pc, #168]	; (8001630 <restartScan+0xe8>)
 8001588:	f003 fbb6 	bl	8004cf8 <iprintf>
        printf("[YDLIDAR INFO] Hardware version: %d\n", deviceinfo.hardware_version);
 800158c:	7afb      	ldrb	r3, [r7, #11]
 800158e:	4619      	mov	r1, r3
 8001590:	4828      	ldr	r0, [pc, #160]	; (8001634 <restartScan+0xec>)
 8001592:	f003 fbb1 	bl	8004cf8 <iprintf>
        printf("[YDLIDAR INFO] Serial number: ");
 8001596:	4828      	ldr	r0, [pc, #160]	; (8001638 <restartScan+0xf0>)
 8001598:	f003 fbae 	bl	8004cf8 <iprintf>
        for (int i = 0; i < 16; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	e00b      	b.n	80015ba <restartScan+0x72>
        {
            printf("%x", deviceinfo.serialnum[i]);
 80015a2:	f107 020c 	add.w	r2, r7, #12
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4823      	ldr	r0, [pc, #140]	; (800163c <restartScan+0xf4>)
 80015b0:	f003 fba2 	bl	8004cf8 <iprintf>
        for (int i = 0; i < 16; i++)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	3301      	adds	r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	ddf0      	ble.n	80015a2 <restartScan+0x5a>
        }
        printf("\n");
 80015c0:	200a      	movs	r0, #10
 80015c2:	f003 fbab 	bl	8004d1c <putchar>
        ydlidar_device_health_t healthinfo;
        HAL_Delay(1000);
 80015c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ca:	f000 fcab 	bl	8001f24 <HAL_Delay>
        if (getDeviceHealth(&healthinfo) == RESULT_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fc8f 	bl	8000ef4 <getDeviceHealth>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d118      	bne.n	800160e <restartScan+0xc6>
        {
            printf("[YDLIDAR INFO] YDLIDAR running correctly! The health status: %s\n", healthinfo.status == 0 ? "well" : "bad");
 80015dc:	793b      	ldrb	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <restartScan+0x9e>
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <restartScan+0xf8>)
 80015e4:	e000      	b.n	80015e8 <restartScan+0xa0>
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <restartScan+0xfc>)
 80015e8:	4619      	mov	r1, r3
 80015ea:	4817      	ldr	r0, [pc, #92]	; (8001648 <restartScan+0x100>)
 80015ec:	f003 fb84 	bl	8004cf8 <iprintf>
            if (startScan() == RESULT_OK)
 80015f0:	f7ff fcb5 	bl	8000f5e <startScan>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d105      	bne.n	8001606 <restartScan+0xbe>
            {
                startReceiveScanData();
 80015fa:	f7ff fcf3 	bl	8000fe4 <startReceiveScanData>
                printf("\nNow YDLIDAR is scanning ...... \n");
 80015fe:	4813      	ldr	r0, [pc, #76]	; (800164c <restartScan+0x104>)
 8001600:	f003 fbe8 	bl	8004dd4 <puts>
    }
    else
    {
        printf("YDLIDAR get DeviceInfo Error!!!'\n");
    }
}
 8001604:	e00a      	b.n	800161c <restartScan+0xd4>
                printf("start YDLIDAR is failed!  Continue........ \n");
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <restartScan+0x108>)
 8001608:	f003 fbe4 	bl	8004dd4 <puts>
}
 800160c:	e006      	b.n	800161c <restartScan+0xd4>
            printf("cannot retrieve YDLIDAR health\n ");
 800160e:	4811      	ldr	r0, [pc, #68]	; (8001654 <restartScan+0x10c>)
 8001610:	f003 fb72 	bl	8004cf8 <iprintf>
}
 8001614:	e002      	b.n	800161c <restartScan+0xd4>
        printf("YDLIDAR get DeviceInfo Error!!!'\n");
 8001616:	4810      	ldr	r0, [pc, #64]	; (8001658 <restartScan+0x110>)
 8001618:	f003 fbdc 	bl	8004dd4 <puts>
}
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	08005eec 	.word	0x08005eec
 8001628:	08005ef0 	.word	0x08005ef0
 800162c:	08005f00 	.word	0x08005f00
 8001630:	08005f30 	.word	0x08005f30
 8001634:	08005f58 	.word	0x08005f58
 8001638:	08005f80 	.word	0x08005f80
 800163c:	08005fa0 	.word	0x08005fa0
 8001640:	08005fa4 	.word	0x08005fa4
 8001644:	08005fac 	.word	0x08005fac
 8001648:	08005fb0 	.word	0x08005fb0
 800164c:	08005ff4 	.word	0x08005ff4
 8001650:	08006018 	.word	0x08006018
 8001654:	08006044 	.word	0x08006044
 8001658:	08006068 	.word	0x08006068

0800165c <uartSendCommand>:
#include "Ydlidar.h"
extern UART_HandleTypeDef huart1;
extern uint8_t SCAN_CIRCLE_INDEX;
extern uint8_t processScanDataIndex;
int8_t uartSendCommand(uint8_t *cmd, uint32_t size)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(&huart1, cmd, size, 1000);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b29a      	uxth	r2, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <uartSendCommand+0x24>)
 8001672:	f002 f828 	bl	80036c6 <HAL_UART_Transmit>
    return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20001828 	.word	0x20001828

08001684 <uartReceiveResponse>:

int8_t uartReceiveResponse(uint8_t *data, uint32_t size)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive(&huart1, data, size, 1000);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b29a      	uxth	r2, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <uartReceiveResponse+0x24>)
 800169a:	f002 f8a6 	bl	80037ea <HAL_UART_Receive>
    return 0;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20001828 	.word	0x20001828

080016ac <uartReceiveDataDMA>:
int8_t uartReceiveDataDMA(uint8_t *data, uint32_t size)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive_DMA(&huart1, data, size);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <uartReceiveDataDMA+0x24>)
 80016c0:	f002 f935 	bl	800392e <HAL_UART_Receive_DMA>
    return 0;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20001828 	.word	0x20001828

080016d4 <HAL_UART_RxCpltCallback>:

// uart callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_UART_RxCpltCallback+0x38>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10e      	bne.n	8001704 <HAL_UART_RxCpltCallback+0x30>
    {
        SCAN_CIRCLE_INDEX++;
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_UART_RxCpltCallback+0x3c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_UART_RxCpltCallback+0x3c>)
 80016f0:	701a      	strb	r2, [r3, #0]
        if (SCAN_CIRCLE_INDEX >= 10)
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_UART_RxCpltCallback+0x3c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b09      	cmp	r3, #9
 80016f8:	d902      	bls.n	8001700 <HAL_UART_RxCpltCallback+0x2c>
        {
            SCAN_CIRCLE_INDEX = 0;
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_UART_RxCpltCallback+0x3c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
        }

        startReceiveScanData();
 8001700:	f7ff fc70 	bl	8000fe4 <startReceiveScanData>
    }
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40011000 	.word	0x40011000
 8001710:	20001824 	.word	0x20001824

08001714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001718:	f000 fb92 	bl	8001e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171c:	f000 f82e 	bl	800177c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001720:	f000 f90c 	bl	800193c <MX_GPIO_Init>
  MX_DMA_Init();
 8001724:	f000 f8ea 	bl	80018fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001728:	f000 f8be 	bl	80018a8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800172c:	f000 f892 	bl	8001854 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    ydlidar.func.send_command = uartSendCommand;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <main+0x50>)
 8001732:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <main+0x54>)
 8001734:	601a      	str	r2, [r3, #0]
    ydlidar.func.receive_response = uartReceiveResponse;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <main+0x50>)
 8001738:	4a0c      	ldr	r2, [pc, #48]	; (800176c <main+0x58>)
 800173a:	605a      	str	r2, [r3, #4]
    ydlidar.func.receive_data_dma = uartReceiveDataDMA;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <main+0x50>)
 800173e:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <main+0x5c>)
 8001740:	609a      	str	r2, [r3, #8]
    printf(">>>>>>>>>>>>>>>>>>>YDLIDAR X4 Driver<<<<<<<<<<<<<<<<<<<<<\n");
 8001742:	480c      	ldr	r0, [pc, #48]	; (8001774 <main+0x60>)
 8001744:	f003 fb46 	bl	8004dd4 <puts>
    restartScan();
 8001748:	f7ff fefe 	bl	8001548 <restartScan>
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        dataProcess();
 800174c:	f7ff fd78 	bl	8001240 <dataProcess>
        // led toggle
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001750:	2120      	movs	r1, #32
 8001752:	4809      	ldr	r0, [pc, #36]	; (8001778 <main+0x64>)
 8001754:	f001 faab 	bl	8002cae <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8001758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175c:	f000 fbe2 	bl	8001f24 <HAL_Delay>
        dataProcess();
 8001760:	e7f4      	b.n	800174c <main+0x38>
 8001762:	bf00      	nop
 8001764:	20000084 	.word	0x20000084
 8001768:	0800165d 	.word	0x0800165d
 800176c:	08001685 	.word	0x08001685
 8001770:	080016ad 	.word	0x080016ad
 8001774:	0800608c 	.word	0x0800608c
 8001778:	40020000 	.word	0x40020000

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	; 0x50
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2234      	movs	r2, #52	; 0x34
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fc02 	bl	8004f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <SystemClock_Config+0xd0>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a28      	ldr	r2, [pc, #160]	; (800184c <SystemClock_Config+0xd0>)
 80017aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <SystemClock_Config+0xd0>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017bc:	2300      	movs	r3, #0
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <SystemClock_Config+0xd4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a22      	ldr	r2, [pc, #136]	; (8001850 <SystemClock_Config+0xd4>)
 80017c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <SystemClock_Config+0xd4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d8:	2302      	movs	r3, #2
 80017da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017dc:	2301      	movs	r3, #1
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e0:	2310      	movs	r3, #16
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e4:	2302      	movs	r3, #2
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017ec:	2310      	movs	r3, #16
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017f6:	2304      	movs	r3, #4
 80017f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017fa:	2304      	movs	r3, #4
 80017fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017fe:	2302      	movs	r3, #2
 8001800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fc8c 	bl	8003124 <HAL_RCC_OscConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001812:	f000 f901 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001816:	230f      	movs	r3, #15
 8001818:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181a:	2302      	movs	r3, #2
 800181c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	2102      	movs	r1, #2
 8001832:	4618      	mov	r0, r3
 8001834:	f001 fa56 	bl	8002ce4 <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800183e:	f000 f8eb 	bl	8001a18 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3750      	adds	r7, #80	; 0x50
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <MX_USART1_UART_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800188c:	f001 fece 	bl	800362c <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001896:	f000 f8bf 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20001828 	.word	0x20001828
 80018a4:	40011000 	.word	0x40011000

080018a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <MX_USART2_UART_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f001 fea4 	bl	800362c <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ea:	f000 f895 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000186c 	.word	0x2000186c
 80018f8:	40004400 	.word	0x40004400

080018fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_DMA_Init+0x3c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <MX_DMA_Init+0x3c>)
 800190c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_DMA_Init+0x3c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	203a      	movs	r0, #58	; 0x3a
 8001924:	f000 fbfd 	bl	8002122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001928:	203a      	movs	r0, #58	; 0x3a
 800192a:	f000 fc16 	bl	800215a <HAL_NVIC_EnableIRQ>

}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <MX_GPIO_Init+0xd0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a2c      	ldr	r2, [pc, #176]	; (8001a0c <MX_GPIO_Init+0xd0>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <MX_GPIO_Init+0xd0>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <MX_GPIO_Init+0xd0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a25      	ldr	r2, [pc, #148]	; (8001a0c <MX_GPIO_Init+0xd0>)
 8001978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <MX_GPIO_Init+0xd0>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <MX_GPIO_Init+0xd0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <MX_GPIO_Init+0xd0>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <MX_GPIO_Init+0xd0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_GPIO_Init+0xd0>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <MX_GPIO_Init+0xd0>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_GPIO_Init+0xd0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2120      	movs	r1, #32
 80019c6:	4812      	ldr	r0, [pc, #72]	; (8001a10 <MX_GPIO_Init+0xd4>)
 80019c8:	f001 f958 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	480c      	ldr	r0, [pc, #48]	; (8001a14 <MX_GPIO_Init+0xd8>)
 80019e4:	f000 ffd6 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019e8:	2320      	movs	r3, #32
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4804      	ldr	r0, [pc, #16]	; (8001a10 <MX_GPIO_Init+0xd4>)
 8001a00:	f000 ffc8 	bl	8002994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020800 	.word	0x40020800

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001a20:	e7fe      	b.n	8001a20 <Error_Handler+0x8>
	...

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a62:	2007      	movs	r0, #7
 8001a64:	f000 fb52 	bl	800210c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	; 0x30
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a4d      	ldr	r2, [pc, #308]	; (8001bc8 <HAL_UART_MspInit+0x154>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d163      	bne.n	8001b5e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a4b      	ldr	r2, [pc, #300]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	61bb      	str	r3, [r7, #24]
 8001ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a44      	ldr	r2, [pc, #272]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ace:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4839      	ldr	r0, [pc, #228]	; (8001bd0 <HAL_UART_MspInit+0x15c>)
 8001aec:	f000 ff52 	bl	8002994 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001af2:	4a39      	ldr	r2, [pc, #228]	; (8001bd8 <HAL_UART_MspInit+0x164>)
 8001af4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001af6:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001af8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001afc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001afe:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b10:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b30:	4828      	ldr	r0, [pc, #160]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b32:	f000 fb2d 	bl	8002190 <HAL_DMA_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b3c:	f7ff ff6c 	bl	8001a18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
 8001b46:	4a23      	ldr	r2, [pc, #140]	; (8001bd4 <HAL_UART_MspInit+0x160>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2025      	movs	r0, #37	; 0x25
 8001b52:	f000 fae6 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b56:	2025      	movs	r0, #37	; 0x25
 8001b58:	f000 faff 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b5c:	e030      	b.n	8001bc0 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <HAL_UART_MspInit+0x168>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d12b      	bne.n	8001bc0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a16      	ldr	r2, [pc, #88]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6313      	str	r3, [r2, #48]	; 0x30
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_UART_MspInit+0x158>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_UART_MspInit+0x15c>)
 8001bbc:	f000 feea 	bl	8002994 <HAL_GPIO_Init>
}
 8001bc0:	bf00      	nop
 8001bc2:	3730      	adds	r7, #48	; 0x30
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40011000 	.word	0x40011000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	200018b0 	.word	0x200018b0
 8001bd8:	40026440 	.word	0x40026440
 8001bdc:	40004400 	.word	0x40004400

08001be0 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART2 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001be8:	1d39      	adds	r1, r7, #4
 8001bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <__io_putchar+0x20>)
 8001bf2:	f001 fd68 	bl	80036c6 <HAL_UART_Transmit>

    return ch;
 8001bf6:	687b      	ldr	r3, [r7, #4]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000186c 	.word	0x2000186c

08001c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <NMI_Handler+0x4>

08001c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <MemManage_Handler+0x4>

08001c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c50:	f000 f948 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <USART1_IRQHandler+0x10>)
 8001c5e:	f001 fe97 	bl	8003990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20001828 	.word	0x20001828

08001c6c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <DMA2_Stream2_IRQHandler+0x10>)
 8001c72:	f000 fc25 	bl	80024c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200018b0 	.word	0x200018b0

08001c80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e00a      	b.n	8001ca8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c92:	f3af 8000 	nop.w
 8001c96:	4601      	mov	r1, r0
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	60ba      	str	r2, [r7, #8]
 8001c9e:	b2ca      	uxtb	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf0      	blt.n	8001c92 <_read+0x12>
  }

  return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e009      	b.n	8001ce0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	60ba      	str	r2, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff83 	bl	8001be0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf1      	blt.n	8001ccc <_write+0x12>
  }
  return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_close>:

int _close(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_isatty>:

int _isatty(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f003 f950 	bl	8005030 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20008000 	.word	0x20008000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	20001910 	.word	0x20001910
 8001dc4:	20001a68 	.word	0x20001a68

08001dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <SystemInit+0x20>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <SystemInit+0x20>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480d      	ldr	r0, [pc, #52]	; (8001e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001df2:	490e      	ldr	r1, [pc, #56]	; (8001e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001df4:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e08:	4c0b      	ldr	r4, [pc, #44]	; (8001e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e16:	f7ff ffd7 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f003 f90f 	bl	800503c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1e:	f7ff fc79 	bl	8001714 <main>
  bx  lr    
 8001e22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001e30:	08006170 	.word	0x08006170
  ldr r2, =_sbss
 8001e34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001e38:	20001a64 	.word	0x20001a64

08001e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC_IRQHandler>
	...

08001e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <HAL_Init+0x40>)
 8001e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_Init+0x40>)
 8001e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_Init+0x40>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f000 f94f 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 f808 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e74:	f7ff fdd6 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x54>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x58>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f967 	bl	8002176 <HAL_SYSTICK_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00e      	b.n	8001ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d80a      	bhi.n	8001ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f000 f92f 	bl	8002122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_InitTick+0x5c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008
 8001f08:	20001914 	.word	0x20001914

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20001914 	.word	0x20001914

08001f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff ffee 	bl	8001f0c <HAL_GetTick>
 8001f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d005      	beq.n	8001f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_Delay+0x44>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f4a:	bf00      	nop
 8001f4c:	f7ff ffde 	bl	8001f0c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d8f7      	bhi.n	8001f4c <HAL_Delay+0x28>
  {
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000008 	.word	0x20000008

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d8:	d301      	bcc.n	80020de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <SysTick_Config+0x40>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e6:	210f      	movs	r1, #15
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f7ff ff8e 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SysTick_Config+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SysTick_Config+0x40>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff29 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff3e 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ff8e 	bl	8002060 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5d 	bl	800200c <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff31 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffa2 	bl	80020c8 <SysTick_Config>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff feb6 	bl	8001f0c <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e099      	b.n	80022e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021cc:	e00f      	b.n	80021ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ce:	f7ff fe9d 	bl	8001f0c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d908      	bls.n	80021ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2203      	movs	r2, #3
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e078      	b.n	80022e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1e8      	bne.n	80021ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <HAL_DMA_Init+0x158>)
 8002208:	4013      	ands	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800221a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	2b04      	cmp	r3, #4
 8002246:	d107      	bne.n	8002258 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	4313      	orrs	r3, r2
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f023 0307 	bic.w	r3, r3, #7
 800226e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	2b04      	cmp	r3, #4
 8002280:	d117      	bne.n	80022b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00e      	beq.n	80022b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fb01 	bl	800289c <DMA_CheckFifoParam>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2240      	movs	r2, #64	; 0x40
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022ae:	2301      	movs	r3, #1
 80022b0:	e016      	b.n	80022e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fab8 	bl	8002830 <DMA_CalcBaseAndBitshift>
 80022c0:	4603      	mov	r3, r0
 80022c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c8:	223f      	movs	r2, #63	; 0x3f
 80022ca:	409a      	lsls	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	f010803f 	.word	0xf010803f

080022ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_DMA_Start_IT+0x26>
 800230e:	2302      	movs	r3, #2
 8002310:	e040      	b.n	8002394 <HAL_DMA_Start_IT+0xa8>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d12f      	bne.n	8002386 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fa4a 	bl	80027d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	223f      	movs	r2, #63	; 0x3f
 8002346:	409a      	lsls	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0216 	orr.w	r2, r2, #22
 800235a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0208 	orr.w	r2, r2, #8
 8002372:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e005      	b.n	8002392 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800238e:	2302      	movs	r3, #2
 8002390:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002392:	7dfb      	ldrb	r3, [r7, #23]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023aa:	f7ff fdaf 	bl	8001f0c <HAL_GetTick>
 80023ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d008      	beq.n	80023ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e052      	b.n	8002474 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0216 	bic.w	r2, r2, #22
 80023dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <HAL_DMA_Abort+0x62>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0208 	bic.w	r2, r2, #8
 800240c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241e:	e013      	b.n	8002448 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002420:	f7ff fd74 	bl	8001f0c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b05      	cmp	r3, #5
 800242c:	d90c      	bls.n	8002448 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2203      	movs	r2, #3
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e015      	b.n	8002474 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1e4      	bne.n	8002420 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	223f      	movs	r2, #63	; 0x3f
 800245c:	409a      	lsls	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d004      	beq.n	800249a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00c      	b.n	80024b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2205      	movs	r2, #5
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024cc:	4b8e      	ldr	r3, [pc, #568]	; (8002708 <HAL_DMA_IRQHandler+0x248>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a8e      	ldr	r2, [pc, #568]	; (800270c <HAL_DMA_IRQHandler+0x24c>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0a9b      	lsrs	r3, r3, #10
 80024d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	2208      	movs	r2, #8
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01a      	beq.n	800252c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2208      	movs	r2, #8
 800251a:	409a      	lsls	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	2201      	movs	r2, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d012      	beq.n	8002562 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2201      	movs	r2, #1
 8002550:	409a      	lsls	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	f043 0202 	orr.w	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	2204      	movs	r2, #4
 8002568:	409a      	lsls	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d012      	beq.n	8002598 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2204      	movs	r2, #4
 8002586:	409a      	lsls	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f043 0204 	orr.w	r2, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	2210      	movs	r2, #16
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d043      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d03c      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	2210      	movs	r2, #16
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d018      	beq.n	8002602 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d108      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d024      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
 80025ee:	e01f      	b.n	8002630 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01b      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
 8002600:	e016      	b.n	8002630 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0208 	bic.w	r2, r2, #8
 800261e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	2220      	movs	r2, #32
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 808f 	beq.w	8002760 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8087 	beq.w	8002760 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	2220      	movs	r2, #32
 8002658:	409a      	lsls	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b05      	cmp	r3, #5
 8002668:	d136      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0216 	bic.w	r2, r2, #22
 8002678:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002688:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <HAL_DMA_IRQHandler+0x1da>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0208 	bic.w	r2, r2, #8
 80026a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	223f      	movs	r2, #63	; 0x3f
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d07e      	beq.n	80027cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
        }
        return;
 80026d6:	e079      	b.n	80027cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d031      	beq.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
 8002704:	e02c      	b.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
 8002706:	bf00      	nop
 8002708:	20000000 	.word	0x20000000
 800270c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d023      	beq.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
 8002720:	e01e      	b.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10f      	bne.n	8002750 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0210 	bic.w	r2, r2, #16
 800273e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	2b00      	cmp	r3, #0
 8002766:	d032      	beq.n	80027ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d022      	beq.n	80027ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2205      	movs	r2, #5
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3301      	adds	r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	d307      	bcc.n	80027a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f2      	bne.n	800278c <HAL_DMA_IRQHandler+0x2cc>
 80027a6:	e000      	b.n	80027aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
 80027ca:	e000      	b.n	80027ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80027cc:	bf00      	nop
    }
  }
}
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	d108      	bne.n	8002814 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002812:	e007      	b.n	8002824 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	60da      	str	r2, [r3, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3b10      	subs	r3, #16
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <DMA_CalcBaseAndBitshift+0x64>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800284a:	4a13      	ldr	r2, [pc, #76]	; (8002898 <DMA_CalcBaseAndBitshift+0x68>)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d909      	bls.n	8002872 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002866:	f023 0303 	bic.w	r3, r3, #3
 800286a:	1d1a      	adds	r2, r3, #4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	659a      	str	r2, [r3, #88]	; 0x58
 8002870:	e007      	b.n	8002882 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	aaaaaaab 	.word	0xaaaaaaab
 8002898:	080060e0 	.word	0x080060e0

0800289c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11f      	bne.n	80028f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d856      	bhi.n	800296a <DMA_CheckFifoParam+0xce>
 80028bc:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <DMA_CheckFifoParam+0x28>)
 80028be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c2:	bf00      	nop
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	080028e7 	.word	0x080028e7
 80028cc:	080028d5 	.word	0x080028d5
 80028d0:	0800296b 	.word	0x0800296b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d046      	beq.n	800296e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e4:	e043      	b.n	800296e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ee:	d140      	bne.n	8002972 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f4:	e03d      	b.n	8002972 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fe:	d121      	bne.n	8002944 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d837      	bhi.n	8002976 <DMA_CheckFifoParam+0xda>
 8002906:	a201      	add	r2, pc, #4	; (adr r2, 800290c <DMA_CheckFifoParam+0x70>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	0800291d 	.word	0x0800291d
 8002910:	08002923 	.word	0x08002923
 8002914:	0800291d 	.word	0x0800291d
 8002918:	08002935 	.word	0x08002935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      break;
 8002920:	e030      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d025      	beq.n	800297a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002932:	e022      	b.n	800297a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800293c:	d11f      	bne.n	800297e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002942:	e01c      	b.n	800297e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d903      	bls.n	8002952 <DMA_CheckFifoParam+0xb6>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d003      	beq.n	8002958 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002950:	e018      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
      break;
 8002956:	e015      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      break;
 8002968:	e00b      	b.n	8002982 <DMA_CheckFifoParam+0xe6>
      break;
 800296a:	bf00      	nop
 800296c:	e00a      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
 8002970:	e008      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e006      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 8002976:	bf00      	nop
 8002978:	e004      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
 800297c:	e002      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;   
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
    }
  } 
  
  return status; 
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e14d      	b.n	8002c4c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	f040 813c 	bne.w	8002c46 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d005      	beq.n	80029e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d130      	bne.n	8002a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	2203      	movs	r2, #3
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0201 	and.w	r2, r3, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d017      	beq.n	8002a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d123      	bne.n	8002ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8096 	beq.w	8002c46 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b51      	ldr	r3, [pc, #324]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	4a50      	ldr	r2, [pc, #320]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b36:	4a4c      	ldr	r2, [pc, #304]	; (8002c68 <HAL_GPIO_Init+0x2d4>)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a43      	ldr	r2, [pc, #268]	; (8002c6c <HAL_GPIO_Init+0x2d8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00d      	beq.n	8002b7e <HAL_GPIO_Init+0x1ea>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a42      	ldr	r2, [pc, #264]	; (8002c70 <HAL_GPIO_Init+0x2dc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <HAL_GPIO_Init+0x1e6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a41      	ldr	r2, [pc, #260]	; (8002c74 <HAL_GPIO_Init+0x2e0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_GPIO_Init+0x1e2>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e004      	b.n	8002b80 <HAL_GPIO_Init+0x1ec>
 8002b76:	2307      	movs	r3, #7
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_Init+0x1ec>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_Init+0x1ec>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f002 0203 	and.w	r2, r2, #3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b90:	4935      	ldr	r1, [pc, #212]	; (8002c68 <HAL_GPIO_Init+0x2d4>)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a2d      	ldr	r2, [pc, #180]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bec:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c16:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1c:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	f67f aeae 	bls.w	80029b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40013c00 	.word	0x40013c00

08002c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c8c:	787b      	ldrb	r3, [r7, #1]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c98:	e003      	b.n	8002ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	041a      	lsls	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	619a      	str	r2, [r3, #24]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cc0:	887a      	ldrh	r2, [r7, #2]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	041a      	lsls	r2, r3, #16
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	400b      	ands	r3, r1
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	619a      	str	r2, [r3, #24]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0cc      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d90c      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b65      	ldr	r3, [pc, #404]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0b8      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d38:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d50:	4b53      	ldr	r3, [pc, #332]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a52      	ldr	r2, [pc, #328]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	494d      	ldr	r1, [pc, #308]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d044      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d119      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e07f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d003      	beq.n	8002da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4b3f      	ldr	r3, [pc, #252]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e06f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db2:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e067      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc2:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4934      	ldr	r1, [pc, #208]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd4:	f7ff f89a 	bl	8001f0c <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ddc:	f7ff f896 	bl	8001f0c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e04f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 020c 	and.w	r2, r3, #12
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1eb      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d20c      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e032      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4916      	ldr	r1, [pc, #88]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e6a:	f000 f821 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	490a      	ldr	r1, [pc, #40]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7c:	5ccb      	ldrb	r3, [r1, r3]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fffa 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023c00 	.word	0x40023c00
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	080060c8 	.word	0x080060c8
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b094      	sub	sp, #80	; 0x50
 8002eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	647b      	str	r3, [r7, #68]	; 0x44
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec8:	4b79      	ldr	r3, [pc, #484]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	f200 80e1 	bhi.w	800309c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d003      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ee2:	e0db      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee4:	4b73      	ldr	r3, [pc, #460]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ee6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ee8:	e0db      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eea:	4b73      	ldr	r3, [pc, #460]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eee:	e0d8      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efa:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d063      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f06:	4b6a      	ldr	r3, [pc, #424]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f22:	4622      	mov	r2, r4
 8002f24:	462b      	mov	r3, r5
 8002f26:	f04f 0000 	mov.w	r0, #0
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	0159      	lsls	r1, r3, #5
 8002f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f34:	0150      	lsls	r0, r2, #5
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	1a51      	subs	r1, r2, r1
 8002f3e:	6139      	str	r1, [r7, #16]
 8002f40:	4629      	mov	r1, r5
 8002f42:	eb63 0301 	sbc.w	r3, r3, r1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f54:	4659      	mov	r1, fp
 8002f56:	018b      	lsls	r3, r1, #6
 8002f58:	4651      	mov	r1, sl
 8002f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5e:	4651      	mov	r1, sl
 8002f60:	018a      	lsls	r2, r1, #6
 8002f62:	4651      	mov	r1, sl
 8002f64:	ebb2 0801 	subs.w	r8, r2, r1
 8002f68:	4659      	mov	r1, fp
 8002f6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f82:	4690      	mov	r8, r2
 8002f84:	4699      	mov	r9, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	eb18 0303 	adds.w	r3, r8, r3
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	462b      	mov	r3, r5
 8002f90:	eb49 0303 	adc.w	r3, r9, r3
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	024b      	lsls	r3, r1, #9
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fac:	4621      	mov	r1, r4
 8002fae:	024a      	lsls	r2, r1, #9
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc0:	f7fd fdcc 	bl	8000b5c <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fcc:	e058      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fce:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	4611      	mov	r1, r2
 8002fda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fde:	623b      	str	r3, [r7, #32]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe8:	4642      	mov	r2, r8
 8002fea:	464b      	mov	r3, r9
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	0159      	lsls	r1, r3, #5
 8002ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffa:	0150      	lsls	r0, r2, #5
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4641      	mov	r1, r8
 8003002:	ebb2 0a01 	subs.w	sl, r2, r1
 8003006:	4649      	mov	r1, r9
 8003008:	eb63 0b01 	sbc.w	fp, r3, r1
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003018:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800301c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003020:	ebb2 040a 	subs.w	r4, r2, sl
 8003024:	eb63 050b 	sbc.w	r5, r3, fp
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	00eb      	lsls	r3, r5, #3
 8003032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003036:	00e2      	lsls	r2, r4, #3
 8003038:	4614      	mov	r4, r2
 800303a:	461d      	mov	r5, r3
 800303c:	4643      	mov	r3, r8
 800303e:	18e3      	adds	r3, r4, r3
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	464b      	mov	r3, r9
 8003044:	eb45 0303 	adc.w	r3, r5, r3
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003056:	4629      	mov	r1, r5
 8003058:	028b      	lsls	r3, r1, #10
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003060:	4621      	mov	r1, r4
 8003062:	028a      	lsls	r2, r1, #10
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306a:	2200      	movs	r2, #0
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	61fa      	str	r2, [r7, #28]
 8003070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003074:	f7fd fd72 	bl	8000b5c <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800309e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3750      	adds	r7, #80	; 0x50
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200

080030bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a9b      	lsrs	r3, r3, #10
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	080060d8 	.word	0x080060d8

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffdc 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0b5b      	lsrs	r3, r3, #13
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	080060d8 	.word	0x080060d8

08003124 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e273      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d075      	beq.n	800322e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003142:	4b88      	ldr	r3, [pc, #544]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b04      	cmp	r3, #4
 800314c:	d00c      	beq.n	8003168 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314e:	4b85      	ldr	r3, [pc, #532]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003156:	2b08      	cmp	r3, #8
 8003158:	d112      	bne.n	8003180 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315a:	4b82      	ldr	r3, [pc, #520]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003166:	d10b      	bne.n	8003180 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003168:	4b7e      	ldr	r3, [pc, #504]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d05b      	beq.n	800322c <HAL_RCC_OscConfig+0x108>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d157      	bne.n	800322c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e24e      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003188:	d106      	bne.n	8003198 <HAL_RCC_OscConfig+0x74>
 800318a:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a75      	ldr	r2, [pc, #468]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e01d      	b.n	80031d4 <HAL_RCC_OscConfig+0xb0>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0x98>
 80031a2:	4b70      	ldr	r3, [pc, #448]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a6f      	ldr	r2, [pc, #444]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80031a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6c      	ldr	r2, [pc, #432]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0xb0>
 80031bc:	4b69      	ldr	r3, [pc, #420]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a68      	ldr	r2, [pc, #416]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80031c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b66      	ldr	r3, [pc, #408]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a65      	ldr	r2, [pc, #404]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80031ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d013      	beq.n	8003204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fe96 	bl	8001f0c <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fe92 	bl	8001f0c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e213      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b5b      	ldr	r3, [pc, #364]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0xc0>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fe82 	bl	8001f0c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800320c:	f7fe fe7e 	bl	8001f0c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e1ff      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	4b51      	ldr	r3, [pc, #324]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0xe8>
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d063      	beq.n	8003302 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800323a:	4b4a      	ldr	r3, [pc, #296]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003246:	4b47      	ldr	r3, [pc, #284]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800324e:	2b08      	cmp	r3, #8
 8003250:	d11c      	bne.n	800328c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003252:	4b44      	ldr	r3, [pc, #272]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d116      	bne.n	800328c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325e:	4b41      	ldr	r3, [pc, #260]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_RCC_OscConfig+0x152>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d001      	beq.n	8003276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e1d3      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003276:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4937      	ldr	r1, [pc, #220]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	e03a      	b.n	8003302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003294:	4b34      	ldr	r3, [pc, #208]	; (8003368 <HAL_RCC_OscConfig+0x244>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe fe37 	bl	8001f0c <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a2:	f7fe fe33 	bl	8001f0c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1b4      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4925      	ldr	r1, [pc, #148]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	600b      	str	r3, [r1, #0]
 80032d4:	e015      	b.n	8003302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d6:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_RCC_OscConfig+0x244>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fe16 	bl	8001f0c <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e4:	f7fe fe12 	bl	8001f0c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e193      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d036      	beq.n	800337c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d016      	beq.n	8003344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <HAL_RCC_OscConfig+0x248>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fe fdf6 	bl	8001f0c <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003324:	f7fe fdf2 	bl	8001f0c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e173      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_OscConfig+0x240>)
 8003338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x200>
 8003342:	e01b      	b.n	800337c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_RCC_OscConfig+0x248>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fe fddf 	bl	8001f0c <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003350:	e00e      	b.n	8003370 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003352:	f7fe fddb 	bl	8001f0c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d907      	bls.n	8003370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e15c      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
 8003364:	40023800 	.word	0x40023800
 8003368:	42470000 	.word	0x42470000
 800336c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	4b8a      	ldr	r3, [pc, #552]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ea      	bne.n	8003352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8097 	beq.w	80034b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338e:	4b83      	ldr	r3, [pc, #524]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10f      	bne.n	80033ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	4b7f      	ldr	r3, [pc, #508]	; (800359c <HAL_RCC_OscConfig+0x478>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	4a7e      	ldr	r2, [pc, #504]	; (800359c <HAL_RCC_OscConfig+0x478>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
 80033aa:	4b7c      	ldr	r3, [pc, #496]	; (800359c <HAL_RCC_OscConfig+0x478>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ba:	4b79      	ldr	r3, [pc, #484]	; (80035a0 <HAL_RCC_OscConfig+0x47c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d118      	bne.n	80033f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c6:	4b76      	ldr	r3, [pc, #472]	; (80035a0 <HAL_RCC_OscConfig+0x47c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a75      	ldr	r2, [pc, #468]	; (80035a0 <HAL_RCC_OscConfig+0x47c>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d2:	f7fe fd9b 	bl	8001f0c <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033da:	f7fe fd97 	bl	8001f0c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e118      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	4b6c      	ldr	r3, [pc, #432]	; (80035a0 <HAL_RCC_OscConfig+0x47c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x2ea>
 8003400:	4b66      	ldr	r3, [pc, #408]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	4a65      	ldr	r2, [pc, #404]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6713      	str	r3, [r2, #112]	; 0x70
 800340c:	e01c      	b.n	8003448 <HAL_RCC_OscConfig+0x324>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b05      	cmp	r3, #5
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x30c>
 8003416:	4b61      	ldr	r3, [pc, #388]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	4a60      	ldr	r2, [pc, #384]	; (800359c <HAL_RCC_OscConfig+0x478>)
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	6713      	str	r3, [r2, #112]	; 0x70
 8003422:	4b5e      	ldr	r3, [pc, #376]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	4a5d      	ldr	r2, [pc, #372]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6713      	str	r3, [r2, #112]	; 0x70
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0x324>
 8003430:	4b5a      	ldr	r3, [pc, #360]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	4a59      	ldr	r2, [pc, #356]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	6713      	str	r3, [r2, #112]	; 0x70
 800343c:	4b57      	ldr	r3, [pc, #348]	; (800359c <HAL_RCC_OscConfig+0x478>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	4a56      	ldr	r2, [pc, #344]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003442:	f023 0304 	bic.w	r3, r3, #4
 8003446:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d015      	beq.n	800347c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe fd5c 	bl	8001f0c <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003456:	e00a      	b.n	800346e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003458:	f7fe fd58 	bl	8001f0c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e0d7      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346e:	4b4b      	ldr	r3, [pc, #300]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0ee      	beq.n	8003458 <HAL_RCC_OscConfig+0x334>
 800347a:	e014      	b.n	80034a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fe fd46 	bl	8001f0c <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003482:	e00a      	b.n	800349a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003484:	f7fe fd42 	bl	8001f0c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e0c1      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349a:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_RCC_OscConfig+0x478>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1ee      	bne.n	8003484 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ac:	4b3b      	ldr	r3, [pc, #236]	; (800359c <HAL_RCC_OscConfig+0x478>)
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	4a3a      	ldr	r2, [pc, #232]	; (800359c <HAL_RCC_OscConfig+0x478>)
 80034b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80ad 	beq.w	800361c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034c2:	4b36      	ldr	r3, [pc, #216]	; (800359c <HAL_RCC_OscConfig+0x478>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d060      	beq.n	8003590 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d145      	bne.n	8003562 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_RCC_OscConfig+0x480>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe fd16 	bl	8001f0c <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe fd12 	bl	8001f0c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e093      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	4b29      	ldr	r3, [pc, #164]	; (800359c <HAL_RCC_OscConfig+0x478>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69da      	ldr	r2, [r3, #28]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	019b      	lsls	r3, r3, #6
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	3b01      	subs	r3, #1
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	061b      	lsls	r3, r3, #24
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	071b      	lsls	r3, r3, #28
 800352e:	491b      	ldr	r1, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x480>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fe fce7 	bl	8001f0c <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003542:	f7fe fce3 	bl	8001f0c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e064      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x41e>
 8003560:	e05c      	b.n	800361c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_OscConfig+0x480>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe fcd0 	bl	8001f0c <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe fccc 	bl	8001f0c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04d      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_OscConfig+0x478>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x44c>
 800358e:	e045      	b.n	800361c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e040      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
 800359c:	40023800 	.word	0x40023800
 80035a0:	40007000 	.word	0x40007000
 80035a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035a8:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <HAL_RCC_OscConfig+0x504>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d030      	beq.n	8003618 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d129      	bne.n	8003618 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d122      	bne.n	8003618 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d119      	bne.n	8003618 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d10f      	bne.n	8003618 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d107      	bne.n	8003618 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800

0800362c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e03f      	b.n	80036be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fa0e 	bl	8001a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800366e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f001 f80b 	bl	800468c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003694:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b08a      	sub	sp, #40	; 0x28
 80036ca:	af02      	add	r7, sp, #8
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d17c      	bne.n	80037e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_UART_Transmit+0x2c>
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e075      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Transmit+0x3e>
 8003700:	2302      	movs	r3, #2
 8003702:	e06e      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2221      	movs	r2, #33	; 0x21
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371a:	f7fe fbf7 	bl	8001f0c <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	88fa      	ldrh	r2, [r7, #6]
 800372a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003734:	d108      	bne.n	8003748 <HAL_UART_Transmit+0x82>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e003      	b.n	8003750 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003758:	e02a      	b.n	80037b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2180      	movs	r1, #128	; 0x80
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fcc3 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e036      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003788:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	3302      	adds	r3, #2
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	e007      	b.n	80037a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1cf      	bne.n	800375a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2140      	movs	r1, #64	; 0x40
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fc93 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e006      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b08a      	sub	sp, #40	; 0x28
 80037ee:	af02      	add	r7, sp, #8
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b20      	cmp	r3, #32
 8003808:	f040 808c 	bne.w	8003924 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_UART_Receive+0x2e>
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e084      	b.n	8003926 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_UART_Receive+0x40>
 8003826:	2302      	movs	r3, #2
 8003828:	e07d      	b.n	8003926 <HAL_UART_Receive+0x13c>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2222      	movs	r2, #34	; 0x22
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003846:	f7fe fb61 	bl	8001f0c <HAL_GetTick>
 800384a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	88fa      	ldrh	r2, [r7, #6]
 8003856:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003860:	d108      	bne.n	8003874 <HAL_UART_Receive+0x8a>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e003      	b.n	800387c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003884:	e043      	b.n	800390e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	2120      	movs	r1, #32
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fc2d 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e042      	b.n	8003926 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10c      	bne.n	80038c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	3302      	adds	r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e01f      	b.n	8003900 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d007      	beq.n	80038da <HAL_UART_Receive+0xf0>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <HAL_UART_Receive+0xfe>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e008      	b.n	80038fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3301      	adds	r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1b6      	bne.n	8003886 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	e000      	b.n	8003926 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
  }
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	4613      	mov	r3, r2
 800393a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b20      	cmp	r3, #32
 8003946:	d11d      	bne.n	8003984 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_UART_Receive_DMA+0x26>
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e016      	b.n	8003986 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_UART_Receive_DMA+0x38>
 8003962:	2302      	movs	r3, #2
 8003964:	e00f      	b.n	8003986 <HAL_UART_Receive_DMA+0x58>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	461a      	mov	r2, r3
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fc26 	bl	80041cc <UART_Start_Receive_DMA>
 8003980:	4603      	mov	r3, r0
 8003982:	e000      	b.n	8003986 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b0ba      	sub	sp, #232	; 0xe8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_UART_IRQHandler+0x66>
 80039e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fd91 	bl	8004516 <UART_Receive_IT>
      return;
 80039f4:	e256      	b.n	8003ea4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80de 	beq.w	8003bbc <HAL_UART_IRQHandler+0x22c>
 8003a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80d1 	beq.w	8003bbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_UART_IRQHandler+0xae>
 8003a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_UART_IRQHandler+0xd2>
 8003a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0202 	orr.w	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_UART_IRQHandler+0xf6>
 8003a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0204 	orr.w	r2, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d011      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x126>
 8003a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0208 	orr.w	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 81ed 	beq.w	8003e9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_UART_IRQHandler+0x14e>
 8003acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fd1c 	bl	8004516 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <HAL_UART_IRQHandler+0x17a>
 8003b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d04f      	beq.n	8003baa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fc24 	bl	8004358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d141      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3314      	adds	r3, #20
 8003b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3314      	adds	r3, #20
 8003b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1d9      	bne.n	8003b1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d013      	beq.n	8003b9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	4a7d      	ldr	r2, [pc, #500]	; (8003d6c <HAL_UART_IRQHandler+0x3dc>)
 8003b78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fc7c 	bl	800247c <HAL_DMA_Abort_IT>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d016      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b94:	4610      	mov	r0, r2
 8003b96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	e00e      	b.n	8003bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f99a 	bl	8003ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	e00a      	b.n	8003bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f996 	bl	8003ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	e006      	b.n	8003bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f992 	bl	8003ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bb6:	e170      	b.n	8003e9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	bf00      	nop
    return;
 8003bba:	e16e      	b.n	8003e9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	f040 814a 	bne.w	8003e5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8143 	beq.w	8003e5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 813c 	beq.w	8003e5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	f040 80b4 	bne.w	8003d70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8140 	beq.w	8003e9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c26:	429a      	cmp	r2, r3
 8003c28:	f080 8139 	bcs.w	8003e9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3e:	f000 8088 	beq.w	8003d52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1d9      	bne.n	8003c42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3314      	adds	r3, #20
 8003cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e1      	bne.n	8003c8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3314      	adds	r3, #20
 8003cd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3314      	adds	r3, #20
 8003cea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cf0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e3      	bne.n	8003cca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d22:	f023 0310 	bic.w	r3, r3, #16
 8003d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d34:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e3      	bne.n	8003d10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe fb25 	bl	800239c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8c0 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d68:	e099      	b.n	8003e9e <HAL_UART_IRQHandler+0x50e>
 8003d6a:	bf00      	nop
 8003d6c:	0800441f 	.word	0x0800441f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 808b 	beq.w	8003ea2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8086 	beq.w	8003ea2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dba:	647a      	str	r2, [r7, #68]	; 0x44
 8003dbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e3      	bne.n	8003d96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3314      	adds	r3, #20
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3314      	adds	r3, #20
 8003dee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003df2:	633a      	str	r2, [r7, #48]	; 0x30
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e3      	bne.n	8003dce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0310 	bic.w	r3, r3, #16
 8003e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e38:	61fa      	str	r2, [r7, #28]
 8003e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	69b9      	ldr	r1, [r7, #24]
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	617b      	str	r3, [r7, #20]
   return(result);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e3      	bne.n	8003e14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f848 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e58:	e023      	b.n	8003ea2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_UART_IRQHandler+0x4ea>
 8003e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fae7 	bl	8004446 <UART_Transmit_IT>
    return;
 8003e78:	e014      	b.n	8003ea4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00e      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x514>
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fb27 	bl	80044e6 <UART_EndTransmit_IT>
    return;
 8003e98:	e004      	b.n	8003ea4 <HAL_UART_IRQHandler+0x514>
    return;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <HAL_UART_IRQHandler+0x514>
      return;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <HAL_UART_IRQHandler+0x514>
      return;
 8003ea2:	bf00      	nop
  }
}
 8003ea4:	37e8      	adds	r7, #232	; 0xe8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop

08003eac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b09c      	sub	sp, #112	; 0x70
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d172      	bne.n	8004002 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	2200      	movs	r2, #0
 8003f20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f42:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e5      	bne.n	8003f22 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3314      	adds	r3, #20
 8003f74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f76:	647a      	str	r2, [r7, #68]	; 0x44
 8003f78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e5      	bne.n	8003f56 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3314      	adds	r3, #20
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	623b      	str	r3, [r7, #32]
   return(result);
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa0:	663b      	str	r3, [r7, #96]	; 0x60
 8003fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3314      	adds	r3, #20
 8003fa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003faa:	633a      	str	r2, [r7, #48]	; 0x30
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e5      	bne.n	8003f8a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d119      	bne.n	8004002 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f023 0310 	bic.w	r3, r3, #16
 8003fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fee:	61fa      	str	r2, [r7, #28]
 8003ff0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	69b9      	ldr	r1, [r7, #24]
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	617b      	str	r3, [r7, #20]
   return(result);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e5      	bne.n	8003fce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	2b01      	cmp	r3, #1
 8004008:	d106      	bne.n	8004018 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800400a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800400e:	4619      	mov	r1, r3
 8004010:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004012:	f7ff ff69 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004016:	e002      	b.n	800401e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004018:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800401a:	f7fd fb5b 	bl	80016d4 <HAL_UART_RxCpltCallback>
}
 800401e:	bf00      	nop
 8004020:	3770      	adds	r7, #112	; 0x70
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	2b01      	cmp	r3, #1
 800403a:	d108      	bne.n	800404e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	b29b      	uxth	r3, r3
 8004044:	4619      	mov	r1, r3
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7ff ff4e 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800404c:	e002      	b.n	8004054 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff ff36 	bl	8003ec0 <HAL_UART_RxHalfCpltCallback>
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b21      	cmp	r3, #33	; 0x21
 800408e:	d108      	bne.n	80040a2 <UART_DMAError+0x46>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2200      	movs	r2, #0
 800409a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800409c:	68b8      	ldr	r0, [r7, #8]
 800409e:	f000 f933 	bl	8004308 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b22      	cmp	r3, #34	; 0x22
 80040c2:	d108      	bne.n	80040d6 <UART_DMAError+0x7a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2200      	movs	r2, #0
 80040ce:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80040d0:	68b8      	ldr	r0, [r7, #8]
 80040d2:	f000 f941 	bl	8004358 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f043 0210 	orr.w	r2, r3, #16
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e2:	68b8      	ldr	r0, [r7, #8]
 80040e4:	f7ff fef6 	bl	8003ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b090      	sub	sp, #64	; 0x40
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004100:	e050      	b.n	80041a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d04c      	beq.n	80041a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800410a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <UART_WaitOnFlagUntilTimeout+0x30>
 8004110:	f7fd fefc 	bl	8001f0c <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800411c:	429a      	cmp	r2, r3
 800411e:	d241      	bcs.n	80041a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004140:	637a      	str	r2, [r7, #52]	; 0x34
 8004142:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3314      	adds	r3, #20
 800415a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	613b      	str	r3, [r7, #16]
   return(result);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	63bb      	str	r3, [r7, #56]	; 0x38
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004174:	623a      	str	r2, [r7, #32]
 8004176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	69f9      	ldr	r1, [r7, #28]
 800417a:	6a3a      	ldr	r2, [r7, #32]
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	61bb      	str	r3, [r7, #24]
   return(result);
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e5      	bne.n	8004154 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e00f      	b.n	80041c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d09f      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3740      	adds	r7, #64	; 0x40
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b098      	sub	sp, #96	; 0x60
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	88fa      	ldrh	r2, [r7, #6]
 80041e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2222      	movs	r2, #34	; 0x22
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	4a40      	ldr	r2, [pc, #256]	; (80042fc <UART_Start_Receive_DMA+0x130>)
 80041fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	4a3f      	ldr	r2, [pc, #252]	; (8004300 <UART_Start_Receive_DMA+0x134>)
 8004202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	4a3e      	ldr	r2, [pc, #248]	; (8004304 <UART_Start_Receive_DMA+0x138>)
 800420a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	2200      	movs	r2, #0
 8004212:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004214:	f107 0308 	add.w	r3, r7, #8
 8004218:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	f7fe f85e 	bl	80022ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d019      	beq.n	800428a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	65bb      	str	r3, [r7, #88]	; 0x58
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004276:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004278:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800427c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e5      	bne.n	8004256 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3314      	adds	r3, #20
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	657b      	str	r3, [r7, #84]	; 0x54
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3314      	adds	r3, #20
 80042a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e5      	bne.n	800428a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3314      	adds	r3, #20
 80042c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	617b      	str	r3, [r7, #20]
   return(result);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d4:	653b      	str	r3, [r7, #80]	; 0x50
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3314      	adds	r3, #20
 80042dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042de:	627a      	str	r2, [r7, #36]	; 0x24
 80042e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6a39      	ldr	r1, [r7, #32]
 80042e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3760      	adds	r7, #96	; 0x60
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	08003f01 	.word	0x08003f01
 8004300:	08004027 	.word	0x08004027
 8004304:	0800405d 	.word	0x0800405d

08004308 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	61ba      	str	r2, [r7, #24]
 8004332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6979      	ldr	r1, [r7, #20]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	613b      	str	r3, [r7, #16]
   return(result);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e5      	bne.n	8004310 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800434c:	bf00      	nop
 800434e:	3724      	adds	r7, #36	; 0x24
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004358:	b480      	push	{r7}
 800435a:	b095      	sub	sp, #84	; 0x54
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004380:	643a      	str	r2, [r7, #64]	; 0x40
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e5      	bne.n	8004360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3314      	adds	r3, #20
 800439a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e5      	bne.n	8004394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d119      	bne.n	8004404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f023 0310 	bic.w	r3, r3, #16
 80043e6:	647b      	str	r3, [r7, #68]	; 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043f0:	61ba      	str	r2, [r7, #24]
 80043f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6979      	ldr	r1, [r7, #20]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	613b      	str	r3, [r7, #16]
   return(result);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e5      	bne.n	80043d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004412:	bf00      	nop
 8004414:	3754      	adds	r7, #84	; 0x54
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff fd4b 	bl	8003ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b21      	cmp	r3, #33	; 0x21
 8004458:	d13e      	bne.n	80044d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004462:	d114      	bne.n	800448e <UART_Transmit_IT+0x48>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d110      	bne.n	800448e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004480:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	1c9a      	adds	r2, r3, #2
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	621a      	str	r2, [r3, #32]
 800448c:	e008      	b.n	80044a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	1c59      	adds	r1, r3, #1
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6211      	str	r1, [r2, #32]
 8004498:	781a      	ldrb	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4619      	mov	r1, r3
 80044ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10f      	bne.n	80044d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fcd0 	bl	8003eac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b08c      	sub	sp, #48	; 0x30
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b22      	cmp	r3, #34	; 0x22
 8004528:	f040 80ab 	bne.w	8004682 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004534:	d117      	bne.n	8004566 <UART_Receive_IT+0x50>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d113      	bne.n	8004566 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004554:	b29a      	uxth	r2, r3
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	1c9a      	adds	r2, r3, #2
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	629a      	str	r2, [r3, #40]	; 0x28
 8004564:	e026      	b.n	80045b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d007      	beq.n	800458a <UART_Receive_IT+0x74>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <UART_Receive_IT+0x82>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e008      	b.n	80045aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29b      	uxth	r3, r3
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4619      	mov	r1, r3
 80045c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d15a      	bne.n	800467e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0220 	bic.w	r2, r2, #32
 80045d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0201 	bic.w	r2, r2, #1
 80045f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2b01      	cmp	r3, #1
 8004606:	d135      	bne.n	8004674 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	330c      	adds	r3, #12
 8004614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	613b      	str	r3, [r7, #16]
   return(result);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f023 0310 	bic.w	r3, r3, #16
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	623a      	str	r2, [r7, #32]
 8004630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	69f9      	ldr	r1, [r7, #28]
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	61bb      	str	r3, [r7, #24]
   return(result);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b10      	cmp	r3, #16
 800464e:	d10a      	bne.n	8004666 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff fc3b 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
 8004672:	e002      	b.n	800467a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7fd f82d 	bl	80016d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	e002      	b.n	8004684 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3730      	adds	r7, #48	; 0x30
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800468c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004690:	b0c0      	sub	sp, #256	; 0x100
 8004692:	af00      	add	r7, sp, #0
 8004694:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	68d9      	ldr	r1, [r3, #12]
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	ea40 0301 	orr.w	r3, r0, r1
 80046b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046e4:	f021 010c 	bic.w	r1, r1, #12
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046f2:	430b      	orrs	r3, r1
 80046f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	6999      	ldr	r1, [r3, #24]
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	ea40 0301 	orr.w	r3, r0, r1
 8004712:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b8f      	ldr	r3, [pc, #572]	; (8004958 <UART_SetConfig+0x2cc>)
 800471c:	429a      	cmp	r2, r3
 800471e:	d005      	beq.n	800472c <UART_SetConfig+0xa0>
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b8d      	ldr	r3, [pc, #564]	; (800495c <UART_SetConfig+0x2d0>)
 8004728:	429a      	cmp	r2, r3
 800472a:	d104      	bne.n	8004736 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800472c:	f7fe fce6 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8004730:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004734:	e003      	b.n	800473e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004736:	f7fe fccd 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 800473a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004748:	f040 810c 	bne.w	8004964 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800474c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004750:	2200      	movs	r2, #0
 8004752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004756:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800475a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800475e:	4622      	mov	r2, r4
 8004760:	462b      	mov	r3, r5
 8004762:	1891      	adds	r1, r2, r2
 8004764:	65b9      	str	r1, [r7, #88]	; 0x58
 8004766:	415b      	adcs	r3, r3
 8004768:	65fb      	str	r3, [r7, #92]	; 0x5c
 800476a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800476e:	4621      	mov	r1, r4
 8004770:	eb12 0801 	adds.w	r8, r2, r1
 8004774:	4629      	mov	r1, r5
 8004776:	eb43 0901 	adc.w	r9, r3, r1
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800478a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800478e:	4690      	mov	r8, r2
 8004790:	4699      	mov	r9, r3
 8004792:	4623      	mov	r3, r4
 8004794:	eb18 0303 	adds.w	r3, r8, r3
 8004798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800479c:	462b      	mov	r3, r5
 800479e:	eb49 0303 	adc.w	r3, r9, r3
 80047a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047ba:	460b      	mov	r3, r1
 80047bc:	18db      	adds	r3, r3, r3
 80047be:	653b      	str	r3, [r7, #80]	; 0x50
 80047c0:	4613      	mov	r3, r2
 80047c2:	eb42 0303 	adc.w	r3, r2, r3
 80047c6:	657b      	str	r3, [r7, #84]	; 0x54
 80047c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047d0:	f7fc f9c4 	bl	8000b5c <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4b61      	ldr	r3, [pc, #388]	; (8004960 <UART_SetConfig+0x2d4>)
 80047da:	fba3 2302 	umull	r2, r3, r3, r2
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	011c      	lsls	r4, r3, #4
 80047e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047f4:	4642      	mov	r2, r8
 80047f6:	464b      	mov	r3, r9
 80047f8:	1891      	adds	r1, r2, r2
 80047fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80047fc:	415b      	adcs	r3, r3
 80047fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004800:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004804:	4641      	mov	r1, r8
 8004806:	eb12 0a01 	adds.w	sl, r2, r1
 800480a:	4649      	mov	r1, r9
 800480c:	eb43 0b01 	adc.w	fp, r3, r1
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800481c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004824:	4692      	mov	sl, r2
 8004826:	469b      	mov	fp, r3
 8004828:	4643      	mov	r3, r8
 800482a:	eb1a 0303 	adds.w	r3, sl, r3
 800482e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004832:	464b      	mov	r3, r9
 8004834:	eb4b 0303 	adc.w	r3, fp, r3
 8004838:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004848:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800484c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004850:	460b      	mov	r3, r1
 8004852:	18db      	adds	r3, r3, r3
 8004854:	643b      	str	r3, [r7, #64]	; 0x40
 8004856:	4613      	mov	r3, r2
 8004858:	eb42 0303 	adc.w	r3, r2, r3
 800485c:	647b      	str	r3, [r7, #68]	; 0x44
 800485e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004862:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004866:	f7fc f979 	bl	8000b5c <__aeabi_uldivmod>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4611      	mov	r1, r2
 8004870:	4b3b      	ldr	r3, [pc, #236]	; (8004960 <UART_SetConfig+0x2d4>)
 8004872:	fba3 2301 	umull	r2, r3, r3, r1
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2264      	movs	r2, #100	; 0x64
 800487a:	fb02 f303 	mul.w	r3, r2, r3
 800487e:	1acb      	subs	r3, r1, r3
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004886:	4b36      	ldr	r3, [pc, #216]	; (8004960 <UART_SetConfig+0x2d4>)
 8004888:	fba3 2302 	umull	r2, r3, r3, r2
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004894:	441c      	add	r4, r3
 8004896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800489a:	2200      	movs	r2, #0
 800489c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048a8:	4642      	mov	r2, r8
 80048aa:	464b      	mov	r3, r9
 80048ac:	1891      	adds	r1, r2, r2
 80048ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80048b0:	415b      	adcs	r3, r3
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048b8:	4641      	mov	r1, r8
 80048ba:	1851      	adds	r1, r2, r1
 80048bc:	6339      	str	r1, [r7, #48]	; 0x30
 80048be:	4649      	mov	r1, r9
 80048c0:	414b      	adcs	r3, r1
 80048c2:	637b      	str	r3, [r7, #52]	; 0x34
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048d0:	4659      	mov	r1, fp
 80048d2:	00cb      	lsls	r3, r1, #3
 80048d4:	4651      	mov	r1, sl
 80048d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048da:	4651      	mov	r1, sl
 80048dc:	00ca      	lsls	r2, r1, #3
 80048de:	4610      	mov	r0, r2
 80048e0:	4619      	mov	r1, r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	4642      	mov	r2, r8
 80048e6:	189b      	adds	r3, r3, r2
 80048e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048ec:	464b      	mov	r3, r9
 80048ee:	460a      	mov	r2, r1
 80048f0:	eb42 0303 	adc.w	r3, r2, r3
 80048f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004904:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004908:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800490c:	460b      	mov	r3, r1
 800490e:	18db      	adds	r3, r3, r3
 8004910:	62bb      	str	r3, [r7, #40]	; 0x28
 8004912:	4613      	mov	r3, r2
 8004914:	eb42 0303 	adc.w	r3, r2, r3
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800491e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004922:	f7fc f91b 	bl	8000b5c <__aeabi_uldivmod>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <UART_SetConfig+0x2d4>)
 800492c:	fba3 1302 	umull	r1, r3, r3, r2
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	2164      	movs	r1, #100	; 0x64
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	3332      	adds	r3, #50	; 0x32
 800493e:	4a08      	ldr	r2, [pc, #32]	; (8004960 <UART_SetConfig+0x2d4>)
 8004940:	fba2 2303 	umull	r2, r3, r2, r3
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	f003 0207 	and.w	r2, r3, #7
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4422      	add	r2, r4
 8004952:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004954:	e106      	b.n	8004b64 <UART_SetConfig+0x4d8>
 8004956:	bf00      	nop
 8004958:	40011000 	.word	0x40011000
 800495c:	40011400 	.word	0x40011400
 8004960:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004968:	2200      	movs	r2, #0
 800496a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800496e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004972:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004976:	4642      	mov	r2, r8
 8004978:	464b      	mov	r3, r9
 800497a:	1891      	adds	r1, r2, r2
 800497c:	6239      	str	r1, [r7, #32]
 800497e:	415b      	adcs	r3, r3
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
 8004982:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004986:	4641      	mov	r1, r8
 8004988:	1854      	adds	r4, r2, r1
 800498a:	4649      	mov	r1, r9
 800498c:	eb43 0501 	adc.w	r5, r3, r1
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	00eb      	lsls	r3, r5, #3
 800499a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800499e:	00e2      	lsls	r2, r4, #3
 80049a0:	4614      	mov	r4, r2
 80049a2:	461d      	mov	r5, r3
 80049a4:	4643      	mov	r3, r8
 80049a6:	18e3      	adds	r3, r4, r3
 80049a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049ac:	464b      	mov	r3, r9
 80049ae:	eb45 0303 	adc.w	r3, r5, r3
 80049b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049d2:	4629      	mov	r1, r5
 80049d4:	008b      	lsls	r3, r1, #2
 80049d6:	4621      	mov	r1, r4
 80049d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049dc:	4621      	mov	r1, r4
 80049de:	008a      	lsls	r2, r1, #2
 80049e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049e4:	f7fc f8ba 	bl	8000b5c <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4b60      	ldr	r3, [pc, #384]	; (8004b70 <UART_SetConfig+0x4e4>)
 80049ee:	fba3 2302 	umull	r2, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	011c      	lsls	r4, r3, #4
 80049f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a08:	4642      	mov	r2, r8
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	1891      	adds	r1, r2, r2
 8004a0e:	61b9      	str	r1, [r7, #24]
 8004a10:	415b      	adcs	r3, r3
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a18:	4641      	mov	r1, r8
 8004a1a:	1851      	adds	r1, r2, r1
 8004a1c:	6139      	str	r1, [r7, #16]
 8004a1e:	4649      	mov	r1, r9
 8004a20:	414b      	adcs	r3, r1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a30:	4659      	mov	r1, fp
 8004a32:	00cb      	lsls	r3, r1, #3
 8004a34:	4651      	mov	r1, sl
 8004a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a3a:	4651      	mov	r1, sl
 8004a3c:	00ca      	lsls	r2, r1, #3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4619      	mov	r1, r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	4642      	mov	r2, r8
 8004a46:	189b      	adds	r3, r3, r2
 8004a48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a4c:	464b      	mov	r3, r9
 8004a4e:	460a      	mov	r2, r1
 8004a50:	eb42 0303 	adc.w	r3, r2, r3
 8004a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a70:	4649      	mov	r1, r9
 8004a72:	008b      	lsls	r3, r1, #2
 8004a74:	4641      	mov	r1, r8
 8004a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a7a:	4641      	mov	r1, r8
 8004a7c:	008a      	lsls	r2, r1, #2
 8004a7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a82:	f7fc f86b 	bl	8000b5c <__aeabi_uldivmod>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4b38      	ldr	r3, [pc, #224]	; (8004b70 <UART_SetConfig+0x4e4>)
 8004a8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	2264      	movs	r2, #100	; 0x64
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	1acb      	subs	r3, r1, r3
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	3332      	adds	r3, #50	; 0x32
 8004aa0:	4a33      	ldr	r2, [pc, #204]	; (8004b70 <UART_SetConfig+0x4e4>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aac:	441c      	add	r4, r3
 8004aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ab6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ab8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004abc:	4642      	mov	r2, r8
 8004abe:	464b      	mov	r3, r9
 8004ac0:	1891      	adds	r1, r2, r2
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	415b      	adcs	r3, r3
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004acc:	4641      	mov	r1, r8
 8004ace:	1851      	adds	r1, r2, r1
 8004ad0:	6039      	str	r1, [r7, #0]
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	414b      	adcs	r3, r1
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ae4:	4659      	mov	r1, fp
 8004ae6:	00cb      	lsls	r3, r1, #3
 8004ae8:	4651      	mov	r1, sl
 8004aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aee:	4651      	mov	r1, sl
 8004af0:	00ca      	lsls	r2, r1, #3
 8004af2:	4610      	mov	r0, r2
 8004af4:	4619      	mov	r1, r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	4642      	mov	r2, r8
 8004afa:	189b      	adds	r3, r3, r2
 8004afc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004afe:	464b      	mov	r3, r9
 8004b00:	460a      	mov	r2, r1
 8004b02:	eb42 0303 	adc.w	r3, r2, r3
 8004b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	663b      	str	r3, [r7, #96]	; 0x60
 8004b12:	667a      	str	r2, [r7, #100]	; 0x64
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b20:	4649      	mov	r1, r9
 8004b22:	008b      	lsls	r3, r1, #2
 8004b24:	4641      	mov	r1, r8
 8004b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	008a      	lsls	r2, r1, #2
 8004b2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b32:	f7fc f813 	bl	8000b5c <__aeabi_uldivmod>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <UART_SetConfig+0x4e4>)
 8004b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	2164      	movs	r1, #100	; 0x64
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	3332      	adds	r3, #50	; 0x32
 8004b4e:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <UART_SetConfig+0x4e4>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	f003 020f 	and.w	r2, r3, #15
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4422      	add	r2, r4
 8004b62:	609a      	str	r2, [r3, #8]
}
 8004b64:	bf00      	nop
 8004b66:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b70:	51eb851f 	.word	0x51eb851f

08004b74 <std>:
 8004b74:	2300      	movs	r3, #0
 8004b76:	b510      	push	{r4, lr}
 8004b78:	4604      	mov	r4, r0
 8004b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b82:	6083      	str	r3, [r0, #8]
 8004b84:	8181      	strh	r1, [r0, #12]
 8004b86:	6643      	str	r3, [r0, #100]	; 0x64
 8004b88:	81c2      	strh	r2, [r0, #14]
 8004b8a:	6183      	str	r3, [r0, #24]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	2208      	movs	r2, #8
 8004b90:	305c      	adds	r0, #92	; 0x5c
 8004b92:	f000 f9ff 	bl	8004f94 <memset>
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <std+0x58>)
 8004b98:	6263      	str	r3, [r4, #36]	; 0x24
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <std+0x5c>)
 8004b9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <std+0x60>)
 8004ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <std+0x64>)
 8004ba4:	6323      	str	r3, [r4, #48]	; 0x30
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <std+0x68>)
 8004ba8:	6224      	str	r4, [r4, #32]
 8004baa:	429c      	cmp	r4, r3
 8004bac:	d006      	beq.n	8004bbc <std+0x48>
 8004bae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004bb2:	4294      	cmp	r4, r2
 8004bb4:	d002      	beq.n	8004bbc <std+0x48>
 8004bb6:	33d0      	adds	r3, #208	; 0xd0
 8004bb8:	429c      	cmp	r4, r3
 8004bba:	d105      	bne.n	8004bc8 <std+0x54>
 8004bbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc4:	f000 ba5e 	b.w	8005084 <__retarget_lock_init_recursive>
 8004bc8:	bd10      	pop	{r4, pc}
 8004bca:	bf00      	nop
 8004bcc:	08004de5 	.word	0x08004de5
 8004bd0:	08004e07 	.word	0x08004e07
 8004bd4:	08004e3f 	.word	0x08004e3f
 8004bd8:	08004e63 	.word	0x08004e63
 8004bdc:	20001918 	.word	0x20001918

08004be0 <stdio_exit_handler>:
 8004be0:	4a02      	ldr	r2, [pc, #8]	; (8004bec <stdio_exit_handler+0xc>)
 8004be2:	4903      	ldr	r1, [pc, #12]	; (8004bf0 <stdio_exit_handler+0x10>)
 8004be4:	4803      	ldr	r0, [pc, #12]	; (8004bf4 <stdio_exit_handler+0x14>)
 8004be6:	f000 b869 	b.w	8004cbc <_fwalk_sglue>
 8004bea:	bf00      	nop
 8004bec:	2000000c 	.word	0x2000000c
 8004bf0:	08005931 	.word	0x08005931
 8004bf4:	20000018 	.word	0x20000018

08004bf8 <cleanup_stdio>:
 8004bf8:	6841      	ldr	r1, [r0, #4]
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <cleanup_stdio+0x34>)
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	4604      	mov	r4, r0
 8004c02:	d001      	beq.n	8004c08 <cleanup_stdio+0x10>
 8004c04:	f000 fe94 	bl	8005930 <_fflush_r>
 8004c08:	68a1      	ldr	r1, [r4, #8]
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <cleanup_stdio+0x38>)
 8004c0c:	4299      	cmp	r1, r3
 8004c0e:	d002      	beq.n	8004c16 <cleanup_stdio+0x1e>
 8004c10:	4620      	mov	r0, r4
 8004c12:	f000 fe8d 	bl	8005930 <_fflush_r>
 8004c16:	68e1      	ldr	r1, [r4, #12]
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <cleanup_stdio+0x3c>)
 8004c1a:	4299      	cmp	r1, r3
 8004c1c:	d004      	beq.n	8004c28 <cleanup_stdio+0x30>
 8004c1e:	4620      	mov	r0, r4
 8004c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c24:	f000 be84 	b.w	8005930 <_fflush_r>
 8004c28:	bd10      	pop	{r4, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20001918 	.word	0x20001918
 8004c30:	20001980 	.word	0x20001980
 8004c34:	200019e8 	.word	0x200019e8

08004c38 <global_stdio_init.part.0>:
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <global_stdio_init.part.0+0x30>)
 8004c3c:	4c0b      	ldr	r4, [pc, #44]	; (8004c6c <global_stdio_init.part.0+0x34>)
 8004c3e:	4a0c      	ldr	r2, [pc, #48]	; (8004c70 <global_stdio_init.part.0+0x38>)
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	4620      	mov	r0, r4
 8004c44:	2200      	movs	r2, #0
 8004c46:	2104      	movs	r1, #4
 8004c48:	f7ff ff94 	bl	8004b74 <std>
 8004c4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c50:	2201      	movs	r2, #1
 8004c52:	2109      	movs	r1, #9
 8004c54:	f7ff ff8e 	bl	8004b74 <std>
 8004c58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c62:	2112      	movs	r1, #18
 8004c64:	f7ff bf86 	b.w	8004b74 <std>
 8004c68:	20001a50 	.word	0x20001a50
 8004c6c:	20001918 	.word	0x20001918
 8004c70:	08004be1 	.word	0x08004be1

08004c74 <__sfp_lock_acquire>:
 8004c74:	4801      	ldr	r0, [pc, #4]	; (8004c7c <__sfp_lock_acquire+0x8>)
 8004c76:	f000 ba06 	b.w	8005086 <__retarget_lock_acquire_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	20001a59 	.word	0x20001a59

08004c80 <__sfp_lock_release>:
 8004c80:	4801      	ldr	r0, [pc, #4]	; (8004c88 <__sfp_lock_release+0x8>)
 8004c82:	f000 ba01 	b.w	8005088 <__retarget_lock_release_recursive>
 8004c86:	bf00      	nop
 8004c88:	20001a59 	.word	0x20001a59

08004c8c <__sinit>:
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	4604      	mov	r4, r0
 8004c90:	f7ff fff0 	bl	8004c74 <__sfp_lock_acquire>
 8004c94:	6a23      	ldr	r3, [r4, #32]
 8004c96:	b11b      	cbz	r3, 8004ca0 <__sinit+0x14>
 8004c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c9c:	f7ff bff0 	b.w	8004c80 <__sfp_lock_release>
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <__sinit+0x28>)
 8004ca2:	6223      	str	r3, [r4, #32]
 8004ca4:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <__sinit+0x2c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f5      	bne.n	8004c98 <__sinit+0xc>
 8004cac:	f7ff ffc4 	bl	8004c38 <global_stdio_init.part.0>
 8004cb0:	e7f2      	b.n	8004c98 <__sinit+0xc>
 8004cb2:	bf00      	nop
 8004cb4:	08004bf9 	.word	0x08004bf9
 8004cb8:	20001a50 	.word	0x20001a50

08004cbc <_fwalk_sglue>:
 8004cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	4688      	mov	r8, r1
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ccc:	f1b9 0901 	subs.w	r9, r9, #1
 8004cd0:	d505      	bpl.n	8004cde <_fwalk_sglue+0x22>
 8004cd2:	6824      	ldr	r4, [r4, #0]
 8004cd4:	2c00      	cmp	r4, #0
 8004cd6:	d1f7      	bne.n	8004cc8 <_fwalk_sglue+0xc>
 8004cd8:	4630      	mov	r0, r6
 8004cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cde:	89ab      	ldrh	r3, [r5, #12]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d907      	bls.n	8004cf4 <_fwalk_sglue+0x38>
 8004ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	d003      	beq.n	8004cf4 <_fwalk_sglue+0x38>
 8004cec:	4629      	mov	r1, r5
 8004cee:	4638      	mov	r0, r7
 8004cf0:	47c0      	blx	r8
 8004cf2:	4306      	orrs	r6, r0
 8004cf4:	3568      	adds	r5, #104	; 0x68
 8004cf6:	e7e9      	b.n	8004ccc <_fwalk_sglue+0x10>

08004cf8 <iprintf>:
 8004cf8:	b40f      	push	{r0, r1, r2, r3}
 8004cfa:	b507      	push	{r0, r1, r2, lr}
 8004cfc:	4906      	ldr	r1, [pc, #24]	; (8004d18 <iprintf+0x20>)
 8004cfe:	ab04      	add	r3, sp, #16
 8004d00:	6808      	ldr	r0, [r1, #0]
 8004d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d06:	6881      	ldr	r1, [r0, #8]
 8004d08:	9301      	str	r3, [sp, #4]
 8004d0a:	f000 fae1 	bl	80052d0 <_vfiprintf_r>
 8004d0e:	b003      	add	sp, #12
 8004d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d14:	b004      	add	sp, #16
 8004d16:	4770      	bx	lr
 8004d18:	20000064 	.word	0x20000064

08004d1c <putchar>:
 8004d1c:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <putchar+0xc>)
 8004d1e:	4601      	mov	r1, r0
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	6882      	ldr	r2, [r0, #8]
 8004d24:	f000 be8e 	b.w	8005a44 <_putc_r>
 8004d28:	20000064 	.word	0x20000064

08004d2c <_puts_r>:
 8004d2c:	6a03      	ldr	r3, [r0, #32]
 8004d2e:	b570      	push	{r4, r5, r6, lr}
 8004d30:	6884      	ldr	r4, [r0, #8]
 8004d32:	4605      	mov	r5, r0
 8004d34:	460e      	mov	r6, r1
 8004d36:	b90b      	cbnz	r3, 8004d3c <_puts_r+0x10>
 8004d38:	f7ff ffa8 	bl	8004c8c <__sinit>
 8004d3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d3e:	07db      	lsls	r3, r3, #31
 8004d40:	d405      	bmi.n	8004d4e <_puts_r+0x22>
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	0598      	lsls	r0, r3, #22
 8004d46:	d402      	bmi.n	8004d4e <_puts_r+0x22>
 8004d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d4a:	f000 f99c 	bl	8005086 <__retarget_lock_acquire_recursive>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	0719      	lsls	r1, r3, #28
 8004d52:	d513      	bpl.n	8004d7c <_puts_r+0x50>
 8004d54:	6923      	ldr	r3, [r4, #16]
 8004d56:	b18b      	cbz	r3, 8004d7c <_puts_r+0x50>
 8004d58:	3e01      	subs	r6, #1
 8004d5a:	68a3      	ldr	r3, [r4, #8]
 8004d5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d60:	3b01      	subs	r3, #1
 8004d62:	60a3      	str	r3, [r4, #8]
 8004d64:	b9e9      	cbnz	r1, 8004da2 <_puts_r+0x76>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	da2e      	bge.n	8004dc8 <_puts_r+0x9c>
 8004d6a:	4622      	mov	r2, r4
 8004d6c:	210a      	movs	r1, #10
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 f87b 	bl	8004e6a <__swbuf_r>
 8004d74:	3001      	adds	r0, #1
 8004d76:	d007      	beq.n	8004d88 <_puts_r+0x5c>
 8004d78:	250a      	movs	r5, #10
 8004d7a:	e007      	b.n	8004d8c <_puts_r+0x60>
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f000 f8b0 	bl	8004ee4 <__swsetup_r>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d0e7      	beq.n	8004d58 <_puts_r+0x2c>
 8004d88:	f04f 35ff 	mov.w	r5, #4294967295
 8004d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d8e:	07da      	lsls	r2, r3, #31
 8004d90:	d405      	bmi.n	8004d9e <_puts_r+0x72>
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	059b      	lsls	r3, r3, #22
 8004d96:	d402      	bmi.n	8004d9e <_puts_r+0x72>
 8004d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d9a:	f000 f975 	bl	8005088 <__retarget_lock_release_recursive>
 8004d9e:	4628      	mov	r0, r5
 8004da0:	bd70      	pop	{r4, r5, r6, pc}
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da04      	bge.n	8004db0 <_puts_r+0x84>
 8004da6:	69a2      	ldr	r2, [r4, #24]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	dc06      	bgt.n	8004dba <_puts_r+0x8e>
 8004dac:	290a      	cmp	r1, #10
 8004dae:	d004      	beq.n	8004dba <_puts_r+0x8e>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	6022      	str	r2, [r4, #0]
 8004db6:	7019      	strb	r1, [r3, #0]
 8004db8:	e7cf      	b.n	8004d5a <_puts_r+0x2e>
 8004dba:	4622      	mov	r2, r4
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f000 f854 	bl	8004e6a <__swbuf_r>
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d1c9      	bne.n	8004d5a <_puts_r+0x2e>
 8004dc6:	e7df      	b.n	8004d88 <_puts_r+0x5c>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	250a      	movs	r5, #10
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	6022      	str	r2, [r4, #0]
 8004dd0:	701d      	strb	r5, [r3, #0]
 8004dd2:	e7db      	b.n	8004d8c <_puts_r+0x60>

08004dd4 <puts>:
 8004dd4:	4b02      	ldr	r3, [pc, #8]	; (8004de0 <puts+0xc>)
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	f7ff bfa7 	b.w	8004d2c <_puts_r>
 8004dde:	bf00      	nop
 8004de0:	20000064 	.word	0x20000064

08004de4 <__sread>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	460c      	mov	r4, r1
 8004de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dec:	f000 f8fc 	bl	8004fe8 <_read_r>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	bfab      	itete	ge
 8004df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004df6:	89a3      	ldrhlt	r3, [r4, #12]
 8004df8:	181b      	addge	r3, r3, r0
 8004dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dfe:	bfac      	ite	ge
 8004e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e02:	81a3      	strhlt	r3, [r4, #12]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__swrite>:
 8004e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0a:	461f      	mov	r7, r3
 8004e0c:	898b      	ldrh	r3, [r1, #12]
 8004e0e:	05db      	lsls	r3, r3, #23
 8004e10:	4605      	mov	r5, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	4616      	mov	r6, r2
 8004e16:	d505      	bpl.n	8004e24 <__swrite+0x1e>
 8004e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f000 f8d0 	bl	8004fc4 <_lseek_r>
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e2e:	81a3      	strh	r3, [r4, #12]
 8004e30:	4632      	mov	r2, r6
 8004e32:	463b      	mov	r3, r7
 8004e34:	4628      	mov	r0, r5
 8004e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3a:	f000 b8e7 	b.w	800500c <_write_r>

08004e3e <__sseek>:
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	460c      	mov	r4, r1
 8004e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e46:	f000 f8bd 	bl	8004fc4 <_lseek_r>
 8004e4a:	1c43      	adds	r3, r0, #1
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	bf15      	itete	ne
 8004e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e5a:	81a3      	strheq	r3, [r4, #12]
 8004e5c:	bf18      	it	ne
 8004e5e:	81a3      	strhne	r3, [r4, #12]
 8004e60:	bd10      	pop	{r4, pc}

08004e62 <__sclose>:
 8004e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e66:	f000 b89d 	b.w	8004fa4 <_close_r>

08004e6a <__swbuf_r>:
 8004e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6c:	460e      	mov	r6, r1
 8004e6e:	4614      	mov	r4, r2
 8004e70:	4605      	mov	r5, r0
 8004e72:	b118      	cbz	r0, 8004e7c <__swbuf_r+0x12>
 8004e74:	6a03      	ldr	r3, [r0, #32]
 8004e76:	b90b      	cbnz	r3, 8004e7c <__swbuf_r+0x12>
 8004e78:	f7ff ff08 	bl	8004c8c <__sinit>
 8004e7c:	69a3      	ldr	r3, [r4, #24]
 8004e7e:	60a3      	str	r3, [r4, #8]
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	071a      	lsls	r2, r3, #28
 8004e84:	d525      	bpl.n	8004ed2 <__swbuf_r+0x68>
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	b31b      	cbz	r3, 8004ed2 <__swbuf_r+0x68>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	6922      	ldr	r2, [r4, #16]
 8004e8e:	1a98      	subs	r0, r3, r2
 8004e90:	6963      	ldr	r3, [r4, #20]
 8004e92:	b2f6      	uxtb	r6, r6
 8004e94:	4283      	cmp	r3, r0
 8004e96:	4637      	mov	r7, r6
 8004e98:	dc04      	bgt.n	8004ea4 <__swbuf_r+0x3a>
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 fd47 	bl	8005930 <_fflush_r>
 8004ea2:	b9e0      	cbnz	r0, 8004ede <__swbuf_r+0x74>
 8004ea4:	68a3      	ldr	r3, [r4, #8]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	60a3      	str	r3, [r4, #8]
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	6022      	str	r2, [r4, #0]
 8004eb0:	701e      	strb	r6, [r3, #0]
 8004eb2:	6962      	ldr	r2, [r4, #20]
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d004      	beq.n	8004ec4 <__swbuf_r+0x5a>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	07db      	lsls	r3, r3, #31
 8004ebe:	d506      	bpl.n	8004ece <__swbuf_r+0x64>
 8004ec0:	2e0a      	cmp	r6, #10
 8004ec2:	d104      	bne.n	8004ece <__swbuf_r+0x64>
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 fd32 	bl	8005930 <_fflush_r>
 8004ecc:	b938      	cbnz	r0, 8004ede <__swbuf_r+0x74>
 8004ece:	4638      	mov	r0, r7
 8004ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f000 f805 	bl	8004ee4 <__swsetup_r>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d0d5      	beq.n	8004e8a <__swbuf_r+0x20>
 8004ede:	f04f 37ff 	mov.w	r7, #4294967295
 8004ee2:	e7f4      	b.n	8004ece <__swbuf_r+0x64>

08004ee4 <__swsetup_r>:
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <__swsetup_r+0xac>)
 8004ee8:	4605      	mov	r5, r0
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	460c      	mov	r4, r1
 8004eee:	b118      	cbz	r0, 8004ef8 <__swsetup_r+0x14>
 8004ef0:	6a03      	ldr	r3, [r0, #32]
 8004ef2:	b90b      	cbnz	r3, 8004ef8 <__swsetup_r+0x14>
 8004ef4:	f7ff feca 	bl	8004c8c <__sinit>
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004efe:	0718      	lsls	r0, r3, #28
 8004f00:	d422      	bmi.n	8004f48 <__swsetup_r+0x64>
 8004f02:	06d9      	lsls	r1, r3, #27
 8004f04:	d407      	bmi.n	8004f16 <__swsetup_r+0x32>
 8004f06:	2309      	movs	r3, #9
 8004f08:	602b      	str	r3, [r5, #0]
 8004f0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f0e:	81a3      	strh	r3, [r4, #12]
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	e034      	b.n	8004f80 <__swsetup_r+0x9c>
 8004f16:	0758      	lsls	r0, r3, #29
 8004f18:	d512      	bpl.n	8004f40 <__swsetup_r+0x5c>
 8004f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f1c:	b141      	cbz	r1, 8004f30 <__swsetup_r+0x4c>
 8004f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f22:	4299      	cmp	r1, r3
 8004f24:	d002      	beq.n	8004f2c <__swsetup_r+0x48>
 8004f26:	4628      	mov	r0, r5
 8004f28:	f000 f8b0 	bl	800508c <_free_r>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6063      	str	r3, [r4, #4]
 8004f3c:	6923      	ldr	r3, [r4, #16]
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	f043 0308 	orr.w	r3, r3, #8
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	b94b      	cbnz	r3, 8004f60 <__swsetup_r+0x7c>
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f56:	d003      	beq.n	8004f60 <__swsetup_r+0x7c>
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 fd36 	bl	80059cc <__smakebuf_r>
 8004f60:	89a0      	ldrh	r0, [r4, #12]
 8004f62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f66:	f010 0301 	ands.w	r3, r0, #1
 8004f6a:	d00a      	beq.n	8004f82 <__swsetup_r+0x9e>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60a3      	str	r3, [r4, #8]
 8004f70:	6963      	ldr	r3, [r4, #20]
 8004f72:	425b      	negs	r3, r3
 8004f74:	61a3      	str	r3, [r4, #24]
 8004f76:	6923      	ldr	r3, [r4, #16]
 8004f78:	b943      	cbnz	r3, 8004f8c <__swsetup_r+0xa8>
 8004f7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f7e:	d1c4      	bne.n	8004f0a <__swsetup_r+0x26>
 8004f80:	bd38      	pop	{r3, r4, r5, pc}
 8004f82:	0781      	lsls	r1, r0, #30
 8004f84:	bf58      	it	pl
 8004f86:	6963      	ldrpl	r3, [r4, #20]
 8004f88:	60a3      	str	r3, [r4, #8]
 8004f8a:	e7f4      	b.n	8004f76 <__swsetup_r+0x92>
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	e7f7      	b.n	8004f80 <__swsetup_r+0x9c>
 8004f90:	20000064 	.word	0x20000064

08004f94 <memset>:
 8004f94:	4402      	add	r2, r0
 8004f96:	4603      	mov	r3, r0
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d100      	bne.n	8004f9e <memset+0xa>
 8004f9c:	4770      	bx	lr
 8004f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004fa2:	e7f9      	b.n	8004f98 <memset+0x4>

08004fa4 <_close_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4d06      	ldr	r5, [pc, #24]	; (8004fc0 <_close_r+0x1c>)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4604      	mov	r4, r0
 8004fac:	4608      	mov	r0, r1
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	f7fc fe9f 	bl	8001cf2 <_close>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_close_r+0x1a>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_close_r+0x1a>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	20001a54 	.word	0x20001a54

08004fc4 <_lseek_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4d07      	ldr	r5, [pc, #28]	; (8004fe4 <_lseek_r+0x20>)
 8004fc8:	4604      	mov	r4, r0
 8004fca:	4608      	mov	r0, r1
 8004fcc:	4611      	mov	r1, r2
 8004fce:	2200      	movs	r2, #0
 8004fd0:	602a      	str	r2, [r5, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f7fc feb4 	bl	8001d40 <_lseek>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <_lseek_r+0x1e>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	b103      	cbz	r3, 8004fe2 <_lseek_r+0x1e>
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	20001a54 	.word	0x20001a54

08004fe8 <_read_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4d07      	ldr	r5, [pc, #28]	; (8005008 <_read_r+0x20>)
 8004fec:	4604      	mov	r4, r0
 8004fee:	4608      	mov	r0, r1
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	602a      	str	r2, [r5, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f7fc fe42 	bl	8001c80 <_read>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_read_r+0x1e>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	b103      	cbz	r3, 8005006 <_read_r+0x1e>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	20001a54 	.word	0x20001a54

0800500c <_write_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4d07      	ldr	r5, [pc, #28]	; (800502c <_write_r+0x20>)
 8005010:	4604      	mov	r4, r0
 8005012:	4608      	mov	r0, r1
 8005014:	4611      	mov	r1, r2
 8005016:	2200      	movs	r2, #0
 8005018:	602a      	str	r2, [r5, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	f7fc fe4d 	bl	8001cba <_write>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d102      	bne.n	800502a <_write_r+0x1e>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	b103      	cbz	r3, 800502a <_write_r+0x1e>
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	bd38      	pop	{r3, r4, r5, pc}
 800502c:	20001a54 	.word	0x20001a54

08005030 <__errno>:
 8005030:	4b01      	ldr	r3, [pc, #4]	; (8005038 <__errno+0x8>)
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	20000064 	.word	0x20000064

0800503c <__libc_init_array>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	4d0d      	ldr	r5, [pc, #52]	; (8005074 <__libc_init_array+0x38>)
 8005040:	4c0d      	ldr	r4, [pc, #52]	; (8005078 <__libc_init_array+0x3c>)
 8005042:	1b64      	subs	r4, r4, r5
 8005044:	10a4      	asrs	r4, r4, #2
 8005046:	2600      	movs	r6, #0
 8005048:	42a6      	cmp	r6, r4
 800504a:	d109      	bne.n	8005060 <__libc_init_array+0x24>
 800504c:	4d0b      	ldr	r5, [pc, #44]	; (800507c <__libc_init_array+0x40>)
 800504e:	4c0c      	ldr	r4, [pc, #48]	; (8005080 <__libc_init_array+0x44>)
 8005050:	f000 ff08 	bl	8005e64 <_init>
 8005054:	1b64      	subs	r4, r4, r5
 8005056:	10a4      	asrs	r4, r4, #2
 8005058:	2600      	movs	r6, #0
 800505a:	42a6      	cmp	r6, r4
 800505c:	d105      	bne.n	800506a <__libc_init_array+0x2e>
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	f855 3b04 	ldr.w	r3, [r5], #4
 8005064:	4798      	blx	r3
 8005066:	3601      	adds	r6, #1
 8005068:	e7ee      	b.n	8005048 <__libc_init_array+0xc>
 800506a:	f855 3b04 	ldr.w	r3, [r5], #4
 800506e:	4798      	blx	r3
 8005070:	3601      	adds	r6, #1
 8005072:	e7f2      	b.n	800505a <__libc_init_array+0x1e>
 8005074:	08006168 	.word	0x08006168
 8005078:	08006168 	.word	0x08006168
 800507c:	08006168 	.word	0x08006168
 8005080:	0800616c 	.word	0x0800616c

08005084 <__retarget_lock_init_recursive>:
 8005084:	4770      	bx	lr

08005086 <__retarget_lock_acquire_recursive>:
 8005086:	4770      	bx	lr

08005088 <__retarget_lock_release_recursive>:
 8005088:	4770      	bx	lr
	...

0800508c <_free_r>:
 800508c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800508e:	2900      	cmp	r1, #0
 8005090:	d044      	beq.n	800511c <_free_r+0x90>
 8005092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005096:	9001      	str	r0, [sp, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f1a1 0404 	sub.w	r4, r1, #4
 800509e:	bfb8      	it	lt
 80050a0:	18e4      	addlt	r4, r4, r3
 80050a2:	f000 f8df 	bl	8005264 <__malloc_lock>
 80050a6:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <_free_r+0x94>)
 80050a8:	9801      	ldr	r0, [sp, #4]
 80050aa:	6813      	ldr	r3, [r2, #0]
 80050ac:	b933      	cbnz	r3, 80050bc <_free_r+0x30>
 80050ae:	6063      	str	r3, [r4, #4]
 80050b0:	6014      	str	r4, [r2, #0]
 80050b2:	b003      	add	sp, #12
 80050b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b8:	f000 b8da 	b.w	8005270 <__malloc_unlock>
 80050bc:	42a3      	cmp	r3, r4
 80050be:	d908      	bls.n	80050d2 <_free_r+0x46>
 80050c0:	6825      	ldr	r5, [r4, #0]
 80050c2:	1961      	adds	r1, r4, r5
 80050c4:	428b      	cmp	r3, r1
 80050c6:	bf01      	itttt	eq
 80050c8:	6819      	ldreq	r1, [r3, #0]
 80050ca:	685b      	ldreq	r3, [r3, #4]
 80050cc:	1949      	addeq	r1, r1, r5
 80050ce:	6021      	streq	r1, [r4, #0]
 80050d0:	e7ed      	b.n	80050ae <_free_r+0x22>
 80050d2:	461a      	mov	r2, r3
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	b10b      	cbz	r3, 80050dc <_free_r+0x50>
 80050d8:	42a3      	cmp	r3, r4
 80050da:	d9fa      	bls.n	80050d2 <_free_r+0x46>
 80050dc:	6811      	ldr	r1, [r2, #0]
 80050de:	1855      	adds	r5, r2, r1
 80050e0:	42a5      	cmp	r5, r4
 80050e2:	d10b      	bne.n	80050fc <_free_r+0x70>
 80050e4:	6824      	ldr	r4, [r4, #0]
 80050e6:	4421      	add	r1, r4
 80050e8:	1854      	adds	r4, r2, r1
 80050ea:	42a3      	cmp	r3, r4
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	d1e0      	bne.n	80050b2 <_free_r+0x26>
 80050f0:	681c      	ldr	r4, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	6053      	str	r3, [r2, #4]
 80050f6:	440c      	add	r4, r1
 80050f8:	6014      	str	r4, [r2, #0]
 80050fa:	e7da      	b.n	80050b2 <_free_r+0x26>
 80050fc:	d902      	bls.n	8005104 <_free_r+0x78>
 80050fe:	230c      	movs	r3, #12
 8005100:	6003      	str	r3, [r0, #0]
 8005102:	e7d6      	b.n	80050b2 <_free_r+0x26>
 8005104:	6825      	ldr	r5, [r4, #0]
 8005106:	1961      	adds	r1, r4, r5
 8005108:	428b      	cmp	r3, r1
 800510a:	bf04      	itt	eq
 800510c:	6819      	ldreq	r1, [r3, #0]
 800510e:	685b      	ldreq	r3, [r3, #4]
 8005110:	6063      	str	r3, [r4, #4]
 8005112:	bf04      	itt	eq
 8005114:	1949      	addeq	r1, r1, r5
 8005116:	6021      	streq	r1, [r4, #0]
 8005118:	6054      	str	r4, [r2, #4]
 800511a:	e7ca      	b.n	80050b2 <_free_r+0x26>
 800511c:	b003      	add	sp, #12
 800511e:	bd30      	pop	{r4, r5, pc}
 8005120:	20001a5c 	.word	0x20001a5c

08005124 <sbrk_aligned>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4e0e      	ldr	r6, [pc, #56]	; (8005160 <sbrk_aligned+0x3c>)
 8005128:	460c      	mov	r4, r1
 800512a:	6831      	ldr	r1, [r6, #0]
 800512c:	4605      	mov	r5, r0
 800512e:	b911      	cbnz	r1, 8005136 <sbrk_aligned+0x12>
 8005130:	f000 fcde 	bl	8005af0 <_sbrk_r>
 8005134:	6030      	str	r0, [r6, #0]
 8005136:	4621      	mov	r1, r4
 8005138:	4628      	mov	r0, r5
 800513a:	f000 fcd9 	bl	8005af0 <_sbrk_r>
 800513e:	1c43      	adds	r3, r0, #1
 8005140:	d00a      	beq.n	8005158 <sbrk_aligned+0x34>
 8005142:	1cc4      	adds	r4, r0, #3
 8005144:	f024 0403 	bic.w	r4, r4, #3
 8005148:	42a0      	cmp	r0, r4
 800514a:	d007      	beq.n	800515c <sbrk_aligned+0x38>
 800514c:	1a21      	subs	r1, r4, r0
 800514e:	4628      	mov	r0, r5
 8005150:	f000 fcce 	bl	8005af0 <_sbrk_r>
 8005154:	3001      	adds	r0, #1
 8005156:	d101      	bne.n	800515c <sbrk_aligned+0x38>
 8005158:	f04f 34ff 	mov.w	r4, #4294967295
 800515c:	4620      	mov	r0, r4
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	20001a60 	.word	0x20001a60

08005164 <_malloc_r>:
 8005164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005168:	1ccd      	adds	r5, r1, #3
 800516a:	f025 0503 	bic.w	r5, r5, #3
 800516e:	3508      	adds	r5, #8
 8005170:	2d0c      	cmp	r5, #12
 8005172:	bf38      	it	cc
 8005174:	250c      	movcc	r5, #12
 8005176:	2d00      	cmp	r5, #0
 8005178:	4607      	mov	r7, r0
 800517a:	db01      	blt.n	8005180 <_malloc_r+0x1c>
 800517c:	42a9      	cmp	r1, r5
 800517e:	d905      	bls.n	800518c <_malloc_r+0x28>
 8005180:	230c      	movs	r3, #12
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	2600      	movs	r6, #0
 8005186:	4630      	mov	r0, r6
 8005188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800518c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005260 <_malloc_r+0xfc>
 8005190:	f000 f868 	bl	8005264 <__malloc_lock>
 8005194:	f8d8 3000 	ldr.w	r3, [r8]
 8005198:	461c      	mov	r4, r3
 800519a:	bb5c      	cbnz	r4, 80051f4 <_malloc_r+0x90>
 800519c:	4629      	mov	r1, r5
 800519e:	4638      	mov	r0, r7
 80051a0:	f7ff ffc0 	bl	8005124 <sbrk_aligned>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	4604      	mov	r4, r0
 80051a8:	d155      	bne.n	8005256 <_malloc_r+0xf2>
 80051aa:	f8d8 4000 	ldr.w	r4, [r8]
 80051ae:	4626      	mov	r6, r4
 80051b0:	2e00      	cmp	r6, #0
 80051b2:	d145      	bne.n	8005240 <_malloc_r+0xdc>
 80051b4:	2c00      	cmp	r4, #0
 80051b6:	d048      	beq.n	800524a <_malloc_r+0xe6>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	4631      	mov	r1, r6
 80051bc:	4638      	mov	r0, r7
 80051be:	eb04 0903 	add.w	r9, r4, r3
 80051c2:	f000 fc95 	bl	8005af0 <_sbrk_r>
 80051c6:	4581      	cmp	r9, r0
 80051c8:	d13f      	bne.n	800524a <_malloc_r+0xe6>
 80051ca:	6821      	ldr	r1, [r4, #0]
 80051cc:	1a6d      	subs	r5, r5, r1
 80051ce:	4629      	mov	r1, r5
 80051d0:	4638      	mov	r0, r7
 80051d2:	f7ff ffa7 	bl	8005124 <sbrk_aligned>
 80051d6:	3001      	adds	r0, #1
 80051d8:	d037      	beq.n	800524a <_malloc_r+0xe6>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	442b      	add	r3, r5
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	f8d8 3000 	ldr.w	r3, [r8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d038      	beq.n	800525a <_malloc_r+0xf6>
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	42a2      	cmp	r2, r4
 80051ec:	d12b      	bne.n	8005246 <_malloc_r+0xe2>
 80051ee:	2200      	movs	r2, #0
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	e00f      	b.n	8005214 <_malloc_r+0xb0>
 80051f4:	6822      	ldr	r2, [r4, #0]
 80051f6:	1b52      	subs	r2, r2, r5
 80051f8:	d41f      	bmi.n	800523a <_malloc_r+0xd6>
 80051fa:	2a0b      	cmp	r2, #11
 80051fc:	d917      	bls.n	800522e <_malloc_r+0xca>
 80051fe:	1961      	adds	r1, r4, r5
 8005200:	42a3      	cmp	r3, r4
 8005202:	6025      	str	r5, [r4, #0]
 8005204:	bf18      	it	ne
 8005206:	6059      	strne	r1, [r3, #4]
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	bf08      	it	eq
 800520c:	f8c8 1000 	streq.w	r1, [r8]
 8005210:	5162      	str	r2, [r4, r5]
 8005212:	604b      	str	r3, [r1, #4]
 8005214:	4638      	mov	r0, r7
 8005216:	f104 060b 	add.w	r6, r4, #11
 800521a:	f000 f829 	bl	8005270 <__malloc_unlock>
 800521e:	f026 0607 	bic.w	r6, r6, #7
 8005222:	1d23      	adds	r3, r4, #4
 8005224:	1af2      	subs	r2, r6, r3
 8005226:	d0ae      	beq.n	8005186 <_malloc_r+0x22>
 8005228:	1b9b      	subs	r3, r3, r6
 800522a:	50a3      	str	r3, [r4, r2]
 800522c:	e7ab      	b.n	8005186 <_malloc_r+0x22>
 800522e:	42a3      	cmp	r3, r4
 8005230:	6862      	ldr	r2, [r4, #4]
 8005232:	d1dd      	bne.n	80051f0 <_malloc_r+0x8c>
 8005234:	f8c8 2000 	str.w	r2, [r8]
 8005238:	e7ec      	b.n	8005214 <_malloc_r+0xb0>
 800523a:	4623      	mov	r3, r4
 800523c:	6864      	ldr	r4, [r4, #4]
 800523e:	e7ac      	b.n	800519a <_malloc_r+0x36>
 8005240:	4634      	mov	r4, r6
 8005242:	6876      	ldr	r6, [r6, #4]
 8005244:	e7b4      	b.n	80051b0 <_malloc_r+0x4c>
 8005246:	4613      	mov	r3, r2
 8005248:	e7cc      	b.n	80051e4 <_malloc_r+0x80>
 800524a:	230c      	movs	r3, #12
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	4638      	mov	r0, r7
 8005250:	f000 f80e 	bl	8005270 <__malloc_unlock>
 8005254:	e797      	b.n	8005186 <_malloc_r+0x22>
 8005256:	6025      	str	r5, [r4, #0]
 8005258:	e7dc      	b.n	8005214 <_malloc_r+0xb0>
 800525a:	605b      	str	r3, [r3, #4]
 800525c:	deff      	udf	#255	; 0xff
 800525e:	bf00      	nop
 8005260:	20001a5c 	.word	0x20001a5c

08005264 <__malloc_lock>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__malloc_lock+0x8>)
 8005266:	f7ff bf0e 	b.w	8005086 <__retarget_lock_acquire_recursive>
 800526a:	bf00      	nop
 800526c:	20001a58 	.word	0x20001a58

08005270 <__malloc_unlock>:
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <__malloc_unlock+0x8>)
 8005272:	f7ff bf09 	b.w	8005088 <__retarget_lock_release_recursive>
 8005276:	bf00      	nop
 8005278:	20001a58 	.word	0x20001a58

0800527c <__sfputc_r>:
 800527c:	6893      	ldr	r3, [r2, #8]
 800527e:	3b01      	subs	r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	b410      	push	{r4}
 8005284:	6093      	str	r3, [r2, #8]
 8005286:	da08      	bge.n	800529a <__sfputc_r+0x1e>
 8005288:	6994      	ldr	r4, [r2, #24]
 800528a:	42a3      	cmp	r3, r4
 800528c:	db01      	blt.n	8005292 <__sfputc_r+0x16>
 800528e:	290a      	cmp	r1, #10
 8005290:	d103      	bne.n	800529a <__sfputc_r+0x1e>
 8005292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005296:	f7ff bde8 	b.w	8004e6a <__swbuf_r>
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	1c58      	adds	r0, r3, #1
 800529e:	6010      	str	r0, [r2, #0]
 80052a0:	7019      	strb	r1, [r3, #0]
 80052a2:	4608      	mov	r0, r1
 80052a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <__sfputs_r>:
 80052aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ac:	4606      	mov	r6, r0
 80052ae:	460f      	mov	r7, r1
 80052b0:	4614      	mov	r4, r2
 80052b2:	18d5      	adds	r5, r2, r3
 80052b4:	42ac      	cmp	r4, r5
 80052b6:	d101      	bne.n	80052bc <__sfputs_r+0x12>
 80052b8:	2000      	movs	r0, #0
 80052ba:	e007      	b.n	80052cc <__sfputs_r+0x22>
 80052bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c0:	463a      	mov	r2, r7
 80052c2:	4630      	mov	r0, r6
 80052c4:	f7ff ffda 	bl	800527c <__sfputc_r>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d1f3      	bne.n	80052b4 <__sfputs_r+0xa>
 80052cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052d0 <_vfiprintf_r>:
 80052d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	460d      	mov	r5, r1
 80052d6:	b09d      	sub	sp, #116	; 0x74
 80052d8:	4614      	mov	r4, r2
 80052da:	4698      	mov	r8, r3
 80052dc:	4606      	mov	r6, r0
 80052de:	b118      	cbz	r0, 80052e8 <_vfiprintf_r+0x18>
 80052e0:	6a03      	ldr	r3, [r0, #32]
 80052e2:	b90b      	cbnz	r3, 80052e8 <_vfiprintf_r+0x18>
 80052e4:	f7ff fcd2 	bl	8004c8c <__sinit>
 80052e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052ea:	07d9      	lsls	r1, r3, #31
 80052ec:	d405      	bmi.n	80052fa <_vfiprintf_r+0x2a>
 80052ee:	89ab      	ldrh	r3, [r5, #12]
 80052f0:	059a      	lsls	r2, r3, #22
 80052f2:	d402      	bmi.n	80052fa <_vfiprintf_r+0x2a>
 80052f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052f6:	f7ff fec6 	bl	8005086 <__retarget_lock_acquire_recursive>
 80052fa:	89ab      	ldrh	r3, [r5, #12]
 80052fc:	071b      	lsls	r3, r3, #28
 80052fe:	d501      	bpl.n	8005304 <_vfiprintf_r+0x34>
 8005300:	692b      	ldr	r3, [r5, #16]
 8005302:	b99b      	cbnz	r3, 800532c <_vfiprintf_r+0x5c>
 8005304:	4629      	mov	r1, r5
 8005306:	4630      	mov	r0, r6
 8005308:	f7ff fdec 	bl	8004ee4 <__swsetup_r>
 800530c:	b170      	cbz	r0, 800532c <_vfiprintf_r+0x5c>
 800530e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005310:	07dc      	lsls	r4, r3, #31
 8005312:	d504      	bpl.n	800531e <_vfiprintf_r+0x4e>
 8005314:	f04f 30ff 	mov.w	r0, #4294967295
 8005318:	b01d      	add	sp, #116	; 0x74
 800531a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531e:	89ab      	ldrh	r3, [r5, #12]
 8005320:	0598      	lsls	r0, r3, #22
 8005322:	d4f7      	bmi.n	8005314 <_vfiprintf_r+0x44>
 8005324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005326:	f7ff feaf 	bl	8005088 <__retarget_lock_release_recursive>
 800532a:	e7f3      	b.n	8005314 <_vfiprintf_r+0x44>
 800532c:	2300      	movs	r3, #0
 800532e:	9309      	str	r3, [sp, #36]	; 0x24
 8005330:	2320      	movs	r3, #32
 8005332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005336:	f8cd 800c 	str.w	r8, [sp, #12]
 800533a:	2330      	movs	r3, #48	; 0x30
 800533c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80054f0 <_vfiprintf_r+0x220>
 8005340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005344:	f04f 0901 	mov.w	r9, #1
 8005348:	4623      	mov	r3, r4
 800534a:	469a      	mov	sl, r3
 800534c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005350:	b10a      	cbz	r2, 8005356 <_vfiprintf_r+0x86>
 8005352:	2a25      	cmp	r2, #37	; 0x25
 8005354:	d1f9      	bne.n	800534a <_vfiprintf_r+0x7a>
 8005356:	ebba 0b04 	subs.w	fp, sl, r4
 800535a:	d00b      	beq.n	8005374 <_vfiprintf_r+0xa4>
 800535c:	465b      	mov	r3, fp
 800535e:	4622      	mov	r2, r4
 8005360:	4629      	mov	r1, r5
 8005362:	4630      	mov	r0, r6
 8005364:	f7ff ffa1 	bl	80052aa <__sfputs_r>
 8005368:	3001      	adds	r0, #1
 800536a:	f000 80a9 	beq.w	80054c0 <_vfiprintf_r+0x1f0>
 800536e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005370:	445a      	add	r2, fp
 8005372:	9209      	str	r2, [sp, #36]	; 0x24
 8005374:	f89a 3000 	ldrb.w	r3, [sl]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80a1 	beq.w	80054c0 <_vfiprintf_r+0x1f0>
 800537e:	2300      	movs	r3, #0
 8005380:	f04f 32ff 	mov.w	r2, #4294967295
 8005384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005388:	f10a 0a01 	add.w	sl, sl, #1
 800538c:	9304      	str	r3, [sp, #16]
 800538e:	9307      	str	r3, [sp, #28]
 8005390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005394:	931a      	str	r3, [sp, #104]	; 0x68
 8005396:	4654      	mov	r4, sl
 8005398:	2205      	movs	r2, #5
 800539a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800539e:	4854      	ldr	r0, [pc, #336]	; (80054f0 <_vfiprintf_r+0x220>)
 80053a0:	f7fa ff36 	bl	8000210 <memchr>
 80053a4:	9a04      	ldr	r2, [sp, #16]
 80053a6:	b9d8      	cbnz	r0, 80053e0 <_vfiprintf_r+0x110>
 80053a8:	06d1      	lsls	r1, r2, #27
 80053aa:	bf44      	itt	mi
 80053ac:	2320      	movmi	r3, #32
 80053ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053b2:	0713      	lsls	r3, r2, #28
 80053b4:	bf44      	itt	mi
 80053b6:	232b      	movmi	r3, #43	; 0x2b
 80053b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053bc:	f89a 3000 	ldrb.w	r3, [sl]
 80053c0:	2b2a      	cmp	r3, #42	; 0x2a
 80053c2:	d015      	beq.n	80053f0 <_vfiprintf_r+0x120>
 80053c4:	9a07      	ldr	r2, [sp, #28]
 80053c6:	4654      	mov	r4, sl
 80053c8:	2000      	movs	r0, #0
 80053ca:	f04f 0c0a 	mov.w	ip, #10
 80053ce:	4621      	mov	r1, r4
 80053d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053d4:	3b30      	subs	r3, #48	; 0x30
 80053d6:	2b09      	cmp	r3, #9
 80053d8:	d94d      	bls.n	8005476 <_vfiprintf_r+0x1a6>
 80053da:	b1b0      	cbz	r0, 800540a <_vfiprintf_r+0x13a>
 80053dc:	9207      	str	r2, [sp, #28]
 80053de:	e014      	b.n	800540a <_vfiprintf_r+0x13a>
 80053e0:	eba0 0308 	sub.w	r3, r0, r8
 80053e4:	fa09 f303 	lsl.w	r3, r9, r3
 80053e8:	4313      	orrs	r3, r2
 80053ea:	9304      	str	r3, [sp, #16]
 80053ec:	46a2      	mov	sl, r4
 80053ee:	e7d2      	b.n	8005396 <_vfiprintf_r+0xc6>
 80053f0:	9b03      	ldr	r3, [sp, #12]
 80053f2:	1d19      	adds	r1, r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	9103      	str	r1, [sp, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bfbb      	ittet	lt
 80053fc:	425b      	neglt	r3, r3
 80053fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005402:	9307      	strge	r3, [sp, #28]
 8005404:	9307      	strlt	r3, [sp, #28]
 8005406:	bfb8      	it	lt
 8005408:	9204      	strlt	r2, [sp, #16]
 800540a:	7823      	ldrb	r3, [r4, #0]
 800540c:	2b2e      	cmp	r3, #46	; 0x2e
 800540e:	d10c      	bne.n	800542a <_vfiprintf_r+0x15a>
 8005410:	7863      	ldrb	r3, [r4, #1]
 8005412:	2b2a      	cmp	r3, #42	; 0x2a
 8005414:	d134      	bne.n	8005480 <_vfiprintf_r+0x1b0>
 8005416:	9b03      	ldr	r3, [sp, #12]
 8005418:	1d1a      	adds	r2, r3, #4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	9203      	str	r2, [sp, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	bfb8      	it	lt
 8005422:	f04f 33ff 	movlt.w	r3, #4294967295
 8005426:	3402      	adds	r4, #2
 8005428:	9305      	str	r3, [sp, #20]
 800542a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005500 <_vfiprintf_r+0x230>
 800542e:	7821      	ldrb	r1, [r4, #0]
 8005430:	2203      	movs	r2, #3
 8005432:	4650      	mov	r0, sl
 8005434:	f7fa feec 	bl	8000210 <memchr>
 8005438:	b138      	cbz	r0, 800544a <_vfiprintf_r+0x17a>
 800543a:	9b04      	ldr	r3, [sp, #16]
 800543c:	eba0 000a 	sub.w	r0, r0, sl
 8005440:	2240      	movs	r2, #64	; 0x40
 8005442:	4082      	lsls	r2, r0
 8005444:	4313      	orrs	r3, r2
 8005446:	3401      	adds	r4, #1
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800544e:	4829      	ldr	r0, [pc, #164]	; (80054f4 <_vfiprintf_r+0x224>)
 8005450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005454:	2206      	movs	r2, #6
 8005456:	f7fa fedb 	bl	8000210 <memchr>
 800545a:	2800      	cmp	r0, #0
 800545c:	d03f      	beq.n	80054de <_vfiprintf_r+0x20e>
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <_vfiprintf_r+0x228>)
 8005460:	bb1b      	cbnz	r3, 80054aa <_vfiprintf_r+0x1da>
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	3307      	adds	r3, #7
 8005466:	f023 0307 	bic.w	r3, r3, #7
 800546a:	3308      	adds	r3, #8
 800546c:	9303      	str	r3, [sp, #12]
 800546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005470:	443b      	add	r3, r7
 8005472:	9309      	str	r3, [sp, #36]	; 0x24
 8005474:	e768      	b.n	8005348 <_vfiprintf_r+0x78>
 8005476:	fb0c 3202 	mla	r2, ip, r2, r3
 800547a:	460c      	mov	r4, r1
 800547c:	2001      	movs	r0, #1
 800547e:	e7a6      	b.n	80053ce <_vfiprintf_r+0xfe>
 8005480:	2300      	movs	r3, #0
 8005482:	3401      	adds	r4, #1
 8005484:	9305      	str	r3, [sp, #20]
 8005486:	4619      	mov	r1, r3
 8005488:	f04f 0c0a 	mov.w	ip, #10
 800548c:	4620      	mov	r0, r4
 800548e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005492:	3a30      	subs	r2, #48	; 0x30
 8005494:	2a09      	cmp	r2, #9
 8005496:	d903      	bls.n	80054a0 <_vfiprintf_r+0x1d0>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0c6      	beq.n	800542a <_vfiprintf_r+0x15a>
 800549c:	9105      	str	r1, [sp, #20]
 800549e:	e7c4      	b.n	800542a <_vfiprintf_r+0x15a>
 80054a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80054a4:	4604      	mov	r4, r0
 80054a6:	2301      	movs	r3, #1
 80054a8:	e7f0      	b.n	800548c <_vfiprintf_r+0x1bc>
 80054aa:	ab03      	add	r3, sp, #12
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	462a      	mov	r2, r5
 80054b0:	4b12      	ldr	r3, [pc, #72]	; (80054fc <_vfiprintf_r+0x22c>)
 80054b2:	a904      	add	r1, sp, #16
 80054b4:	4630      	mov	r0, r6
 80054b6:	f3af 8000 	nop.w
 80054ba:	4607      	mov	r7, r0
 80054bc:	1c78      	adds	r0, r7, #1
 80054be:	d1d6      	bne.n	800546e <_vfiprintf_r+0x19e>
 80054c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054c2:	07d9      	lsls	r1, r3, #31
 80054c4:	d405      	bmi.n	80054d2 <_vfiprintf_r+0x202>
 80054c6:	89ab      	ldrh	r3, [r5, #12]
 80054c8:	059a      	lsls	r2, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <_vfiprintf_r+0x202>
 80054cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ce:	f7ff fddb 	bl	8005088 <__retarget_lock_release_recursive>
 80054d2:	89ab      	ldrh	r3, [r5, #12]
 80054d4:	065b      	lsls	r3, r3, #25
 80054d6:	f53f af1d 	bmi.w	8005314 <_vfiprintf_r+0x44>
 80054da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054dc:	e71c      	b.n	8005318 <_vfiprintf_r+0x48>
 80054de:	ab03      	add	r3, sp, #12
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	462a      	mov	r2, r5
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <_vfiprintf_r+0x22c>)
 80054e6:	a904      	add	r1, sp, #16
 80054e8:	4630      	mov	r0, r6
 80054ea:	f000 f879 	bl	80055e0 <_printf_i>
 80054ee:	e7e4      	b.n	80054ba <_vfiprintf_r+0x1ea>
 80054f0:	080060e8 	.word	0x080060e8
 80054f4:	080060f2 	.word	0x080060f2
 80054f8:	00000000 	.word	0x00000000
 80054fc:	080052ab 	.word	0x080052ab
 8005500:	080060ee 	.word	0x080060ee

08005504 <_printf_common>:
 8005504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	4616      	mov	r6, r2
 800550a:	4699      	mov	r9, r3
 800550c:	688a      	ldr	r2, [r1, #8]
 800550e:	690b      	ldr	r3, [r1, #16]
 8005510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005514:	4293      	cmp	r3, r2
 8005516:	bfb8      	it	lt
 8005518:	4613      	movlt	r3, r2
 800551a:	6033      	str	r3, [r6, #0]
 800551c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005520:	4607      	mov	r7, r0
 8005522:	460c      	mov	r4, r1
 8005524:	b10a      	cbz	r2, 800552a <_printf_common+0x26>
 8005526:	3301      	adds	r3, #1
 8005528:	6033      	str	r3, [r6, #0]
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	0699      	lsls	r1, r3, #26
 800552e:	bf42      	ittt	mi
 8005530:	6833      	ldrmi	r3, [r6, #0]
 8005532:	3302      	addmi	r3, #2
 8005534:	6033      	strmi	r3, [r6, #0]
 8005536:	6825      	ldr	r5, [r4, #0]
 8005538:	f015 0506 	ands.w	r5, r5, #6
 800553c:	d106      	bne.n	800554c <_printf_common+0x48>
 800553e:	f104 0a19 	add.w	sl, r4, #25
 8005542:	68e3      	ldr	r3, [r4, #12]
 8005544:	6832      	ldr	r2, [r6, #0]
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	42ab      	cmp	r3, r5
 800554a:	dc26      	bgt.n	800559a <_printf_common+0x96>
 800554c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005550:	1e13      	subs	r3, r2, #0
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	bf18      	it	ne
 8005556:	2301      	movne	r3, #1
 8005558:	0692      	lsls	r2, r2, #26
 800555a:	d42b      	bmi.n	80055b4 <_printf_common+0xb0>
 800555c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005560:	4649      	mov	r1, r9
 8005562:	4638      	mov	r0, r7
 8005564:	47c0      	blx	r8
 8005566:	3001      	adds	r0, #1
 8005568:	d01e      	beq.n	80055a8 <_printf_common+0xa4>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	6922      	ldr	r2, [r4, #16]
 800556e:	f003 0306 	and.w	r3, r3, #6
 8005572:	2b04      	cmp	r3, #4
 8005574:	bf02      	ittt	eq
 8005576:	68e5      	ldreq	r5, [r4, #12]
 8005578:	6833      	ldreq	r3, [r6, #0]
 800557a:	1aed      	subeq	r5, r5, r3
 800557c:	68a3      	ldr	r3, [r4, #8]
 800557e:	bf0c      	ite	eq
 8005580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005584:	2500      	movne	r5, #0
 8005586:	4293      	cmp	r3, r2
 8005588:	bfc4      	itt	gt
 800558a:	1a9b      	subgt	r3, r3, r2
 800558c:	18ed      	addgt	r5, r5, r3
 800558e:	2600      	movs	r6, #0
 8005590:	341a      	adds	r4, #26
 8005592:	42b5      	cmp	r5, r6
 8005594:	d11a      	bne.n	80055cc <_printf_common+0xc8>
 8005596:	2000      	movs	r0, #0
 8005598:	e008      	b.n	80055ac <_printf_common+0xa8>
 800559a:	2301      	movs	r3, #1
 800559c:	4652      	mov	r2, sl
 800559e:	4649      	mov	r1, r9
 80055a0:	4638      	mov	r0, r7
 80055a2:	47c0      	blx	r8
 80055a4:	3001      	adds	r0, #1
 80055a6:	d103      	bne.n	80055b0 <_printf_common+0xac>
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b0:	3501      	adds	r5, #1
 80055b2:	e7c6      	b.n	8005542 <_printf_common+0x3e>
 80055b4:	18e1      	adds	r1, r4, r3
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	2030      	movs	r0, #48	; 0x30
 80055ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055be:	4422      	add	r2, r4
 80055c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055c8:	3302      	adds	r3, #2
 80055ca:	e7c7      	b.n	800555c <_printf_common+0x58>
 80055cc:	2301      	movs	r3, #1
 80055ce:	4622      	mov	r2, r4
 80055d0:	4649      	mov	r1, r9
 80055d2:	4638      	mov	r0, r7
 80055d4:	47c0      	blx	r8
 80055d6:	3001      	adds	r0, #1
 80055d8:	d0e6      	beq.n	80055a8 <_printf_common+0xa4>
 80055da:	3601      	adds	r6, #1
 80055dc:	e7d9      	b.n	8005592 <_printf_common+0x8e>
	...

080055e0 <_printf_i>:
 80055e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055e4:	7e0f      	ldrb	r7, [r1, #24]
 80055e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055e8:	2f78      	cmp	r7, #120	; 0x78
 80055ea:	4691      	mov	r9, r2
 80055ec:	4680      	mov	r8, r0
 80055ee:	460c      	mov	r4, r1
 80055f0:	469a      	mov	sl, r3
 80055f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055f6:	d807      	bhi.n	8005608 <_printf_i+0x28>
 80055f8:	2f62      	cmp	r7, #98	; 0x62
 80055fa:	d80a      	bhi.n	8005612 <_printf_i+0x32>
 80055fc:	2f00      	cmp	r7, #0
 80055fe:	f000 80d4 	beq.w	80057aa <_printf_i+0x1ca>
 8005602:	2f58      	cmp	r7, #88	; 0x58
 8005604:	f000 80c0 	beq.w	8005788 <_printf_i+0x1a8>
 8005608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800560c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005610:	e03a      	b.n	8005688 <_printf_i+0xa8>
 8005612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005616:	2b15      	cmp	r3, #21
 8005618:	d8f6      	bhi.n	8005608 <_printf_i+0x28>
 800561a:	a101      	add	r1, pc, #4	; (adr r1, 8005620 <_printf_i+0x40>)
 800561c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005620:	08005679 	.word	0x08005679
 8005624:	0800568d 	.word	0x0800568d
 8005628:	08005609 	.word	0x08005609
 800562c:	08005609 	.word	0x08005609
 8005630:	08005609 	.word	0x08005609
 8005634:	08005609 	.word	0x08005609
 8005638:	0800568d 	.word	0x0800568d
 800563c:	08005609 	.word	0x08005609
 8005640:	08005609 	.word	0x08005609
 8005644:	08005609 	.word	0x08005609
 8005648:	08005609 	.word	0x08005609
 800564c:	08005791 	.word	0x08005791
 8005650:	080056b9 	.word	0x080056b9
 8005654:	0800574b 	.word	0x0800574b
 8005658:	08005609 	.word	0x08005609
 800565c:	08005609 	.word	0x08005609
 8005660:	080057b3 	.word	0x080057b3
 8005664:	08005609 	.word	0x08005609
 8005668:	080056b9 	.word	0x080056b9
 800566c:	08005609 	.word	0x08005609
 8005670:	08005609 	.word	0x08005609
 8005674:	08005753 	.word	0x08005753
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	1d1a      	adds	r2, r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	602a      	str	r2, [r5, #0]
 8005680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005688:	2301      	movs	r3, #1
 800568a:	e09f      	b.n	80057cc <_printf_i+0x1ec>
 800568c:	6820      	ldr	r0, [r4, #0]
 800568e:	682b      	ldr	r3, [r5, #0]
 8005690:	0607      	lsls	r7, r0, #24
 8005692:	f103 0104 	add.w	r1, r3, #4
 8005696:	6029      	str	r1, [r5, #0]
 8005698:	d501      	bpl.n	800569e <_printf_i+0xbe>
 800569a:	681e      	ldr	r6, [r3, #0]
 800569c:	e003      	b.n	80056a6 <_printf_i+0xc6>
 800569e:	0646      	lsls	r6, r0, #25
 80056a0:	d5fb      	bpl.n	800569a <_printf_i+0xba>
 80056a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	da03      	bge.n	80056b2 <_printf_i+0xd2>
 80056aa:	232d      	movs	r3, #45	; 0x2d
 80056ac:	4276      	negs	r6, r6
 80056ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b2:	485a      	ldr	r0, [pc, #360]	; (800581c <_printf_i+0x23c>)
 80056b4:	230a      	movs	r3, #10
 80056b6:	e012      	b.n	80056de <_printf_i+0xfe>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	6820      	ldr	r0, [r4, #0]
 80056bc:	1d19      	adds	r1, r3, #4
 80056be:	6029      	str	r1, [r5, #0]
 80056c0:	0605      	lsls	r5, r0, #24
 80056c2:	d501      	bpl.n	80056c8 <_printf_i+0xe8>
 80056c4:	681e      	ldr	r6, [r3, #0]
 80056c6:	e002      	b.n	80056ce <_printf_i+0xee>
 80056c8:	0641      	lsls	r1, r0, #25
 80056ca:	d5fb      	bpl.n	80056c4 <_printf_i+0xe4>
 80056cc:	881e      	ldrh	r6, [r3, #0]
 80056ce:	4853      	ldr	r0, [pc, #332]	; (800581c <_printf_i+0x23c>)
 80056d0:	2f6f      	cmp	r7, #111	; 0x6f
 80056d2:	bf0c      	ite	eq
 80056d4:	2308      	moveq	r3, #8
 80056d6:	230a      	movne	r3, #10
 80056d8:	2100      	movs	r1, #0
 80056da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056de:	6865      	ldr	r5, [r4, #4]
 80056e0:	60a5      	str	r5, [r4, #8]
 80056e2:	2d00      	cmp	r5, #0
 80056e4:	bfa2      	ittt	ge
 80056e6:	6821      	ldrge	r1, [r4, #0]
 80056e8:	f021 0104 	bicge.w	r1, r1, #4
 80056ec:	6021      	strge	r1, [r4, #0]
 80056ee:	b90e      	cbnz	r6, 80056f4 <_printf_i+0x114>
 80056f0:	2d00      	cmp	r5, #0
 80056f2:	d04b      	beq.n	800578c <_printf_i+0x1ac>
 80056f4:	4615      	mov	r5, r2
 80056f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80056fa:	fb03 6711 	mls	r7, r3, r1, r6
 80056fe:	5dc7      	ldrb	r7, [r0, r7]
 8005700:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005704:	4637      	mov	r7, r6
 8005706:	42bb      	cmp	r3, r7
 8005708:	460e      	mov	r6, r1
 800570a:	d9f4      	bls.n	80056f6 <_printf_i+0x116>
 800570c:	2b08      	cmp	r3, #8
 800570e:	d10b      	bne.n	8005728 <_printf_i+0x148>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	07de      	lsls	r6, r3, #31
 8005714:	d508      	bpl.n	8005728 <_printf_i+0x148>
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	6861      	ldr	r1, [r4, #4]
 800571a:	4299      	cmp	r1, r3
 800571c:	bfde      	ittt	le
 800571e:	2330      	movle	r3, #48	; 0x30
 8005720:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005724:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005728:	1b52      	subs	r2, r2, r5
 800572a:	6122      	str	r2, [r4, #16]
 800572c:	f8cd a000 	str.w	sl, [sp]
 8005730:	464b      	mov	r3, r9
 8005732:	aa03      	add	r2, sp, #12
 8005734:	4621      	mov	r1, r4
 8005736:	4640      	mov	r0, r8
 8005738:	f7ff fee4 	bl	8005504 <_printf_common>
 800573c:	3001      	adds	r0, #1
 800573e:	d14a      	bne.n	80057d6 <_printf_i+0x1f6>
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	b004      	add	sp, #16
 8005746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	f043 0320 	orr.w	r3, r3, #32
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	4833      	ldr	r0, [pc, #204]	; (8005820 <_printf_i+0x240>)
 8005754:	2778      	movs	r7, #120	; 0x78
 8005756:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	6829      	ldr	r1, [r5, #0]
 800575e:	061f      	lsls	r7, r3, #24
 8005760:	f851 6b04 	ldr.w	r6, [r1], #4
 8005764:	d402      	bmi.n	800576c <_printf_i+0x18c>
 8005766:	065f      	lsls	r7, r3, #25
 8005768:	bf48      	it	mi
 800576a:	b2b6      	uxthmi	r6, r6
 800576c:	07df      	lsls	r7, r3, #31
 800576e:	bf48      	it	mi
 8005770:	f043 0320 	orrmi.w	r3, r3, #32
 8005774:	6029      	str	r1, [r5, #0]
 8005776:	bf48      	it	mi
 8005778:	6023      	strmi	r3, [r4, #0]
 800577a:	b91e      	cbnz	r6, 8005784 <_printf_i+0x1a4>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	f023 0320 	bic.w	r3, r3, #32
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	2310      	movs	r3, #16
 8005786:	e7a7      	b.n	80056d8 <_printf_i+0xf8>
 8005788:	4824      	ldr	r0, [pc, #144]	; (800581c <_printf_i+0x23c>)
 800578a:	e7e4      	b.n	8005756 <_printf_i+0x176>
 800578c:	4615      	mov	r5, r2
 800578e:	e7bd      	b.n	800570c <_printf_i+0x12c>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	6826      	ldr	r6, [r4, #0]
 8005794:	6961      	ldr	r1, [r4, #20]
 8005796:	1d18      	adds	r0, r3, #4
 8005798:	6028      	str	r0, [r5, #0]
 800579a:	0635      	lsls	r5, r6, #24
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	d501      	bpl.n	80057a4 <_printf_i+0x1c4>
 80057a0:	6019      	str	r1, [r3, #0]
 80057a2:	e002      	b.n	80057aa <_printf_i+0x1ca>
 80057a4:	0670      	lsls	r0, r6, #25
 80057a6:	d5fb      	bpl.n	80057a0 <_printf_i+0x1c0>
 80057a8:	8019      	strh	r1, [r3, #0]
 80057aa:	2300      	movs	r3, #0
 80057ac:	6123      	str	r3, [r4, #16]
 80057ae:	4615      	mov	r5, r2
 80057b0:	e7bc      	b.n	800572c <_printf_i+0x14c>
 80057b2:	682b      	ldr	r3, [r5, #0]
 80057b4:	1d1a      	adds	r2, r3, #4
 80057b6:	602a      	str	r2, [r5, #0]
 80057b8:	681d      	ldr	r5, [r3, #0]
 80057ba:	6862      	ldr	r2, [r4, #4]
 80057bc:	2100      	movs	r1, #0
 80057be:	4628      	mov	r0, r5
 80057c0:	f7fa fd26 	bl	8000210 <memchr>
 80057c4:	b108      	cbz	r0, 80057ca <_printf_i+0x1ea>
 80057c6:	1b40      	subs	r0, r0, r5
 80057c8:	6060      	str	r0, [r4, #4]
 80057ca:	6863      	ldr	r3, [r4, #4]
 80057cc:	6123      	str	r3, [r4, #16]
 80057ce:	2300      	movs	r3, #0
 80057d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d4:	e7aa      	b.n	800572c <_printf_i+0x14c>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	462a      	mov	r2, r5
 80057da:	4649      	mov	r1, r9
 80057dc:	4640      	mov	r0, r8
 80057de:	47d0      	blx	sl
 80057e0:	3001      	adds	r0, #1
 80057e2:	d0ad      	beq.n	8005740 <_printf_i+0x160>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	079b      	lsls	r3, r3, #30
 80057e8:	d413      	bmi.n	8005812 <_printf_i+0x232>
 80057ea:	68e0      	ldr	r0, [r4, #12]
 80057ec:	9b03      	ldr	r3, [sp, #12]
 80057ee:	4298      	cmp	r0, r3
 80057f0:	bfb8      	it	lt
 80057f2:	4618      	movlt	r0, r3
 80057f4:	e7a6      	b.n	8005744 <_printf_i+0x164>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4632      	mov	r2, r6
 80057fa:	4649      	mov	r1, r9
 80057fc:	4640      	mov	r0, r8
 80057fe:	47d0      	blx	sl
 8005800:	3001      	adds	r0, #1
 8005802:	d09d      	beq.n	8005740 <_printf_i+0x160>
 8005804:	3501      	adds	r5, #1
 8005806:	68e3      	ldr	r3, [r4, #12]
 8005808:	9903      	ldr	r1, [sp, #12]
 800580a:	1a5b      	subs	r3, r3, r1
 800580c:	42ab      	cmp	r3, r5
 800580e:	dcf2      	bgt.n	80057f6 <_printf_i+0x216>
 8005810:	e7eb      	b.n	80057ea <_printf_i+0x20a>
 8005812:	2500      	movs	r5, #0
 8005814:	f104 0619 	add.w	r6, r4, #25
 8005818:	e7f5      	b.n	8005806 <_printf_i+0x226>
 800581a:	bf00      	nop
 800581c:	080060f9 	.word	0x080060f9
 8005820:	0800610a 	.word	0x0800610a

08005824 <__sflush_r>:
 8005824:	898a      	ldrh	r2, [r1, #12]
 8005826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582a:	4605      	mov	r5, r0
 800582c:	0710      	lsls	r0, r2, #28
 800582e:	460c      	mov	r4, r1
 8005830:	d458      	bmi.n	80058e4 <__sflush_r+0xc0>
 8005832:	684b      	ldr	r3, [r1, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	dc05      	bgt.n	8005844 <__sflush_r+0x20>
 8005838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	dc02      	bgt.n	8005844 <__sflush_r+0x20>
 800583e:	2000      	movs	r0, #0
 8005840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005846:	2e00      	cmp	r6, #0
 8005848:	d0f9      	beq.n	800583e <__sflush_r+0x1a>
 800584a:	2300      	movs	r3, #0
 800584c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005850:	682f      	ldr	r7, [r5, #0]
 8005852:	6a21      	ldr	r1, [r4, #32]
 8005854:	602b      	str	r3, [r5, #0]
 8005856:	d032      	beq.n	80058be <__sflush_r+0x9a>
 8005858:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	075a      	lsls	r2, r3, #29
 800585e:	d505      	bpl.n	800586c <__sflush_r+0x48>
 8005860:	6863      	ldr	r3, [r4, #4]
 8005862:	1ac0      	subs	r0, r0, r3
 8005864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005866:	b10b      	cbz	r3, 800586c <__sflush_r+0x48>
 8005868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800586a:	1ac0      	subs	r0, r0, r3
 800586c:	2300      	movs	r3, #0
 800586e:	4602      	mov	r2, r0
 8005870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005872:	6a21      	ldr	r1, [r4, #32]
 8005874:	4628      	mov	r0, r5
 8005876:	47b0      	blx	r6
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	d106      	bne.n	800588c <__sflush_r+0x68>
 800587e:	6829      	ldr	r1, [r5, #0]
 8005880:	291d      	cmp	r1, #29
 8005882:	d82b      	bhi.n	80058dc <__sflush_r+0xb8>
 8005884:	4a29      	ldr	r2, [pc, #164]	; (800592c <__sflush_r+0x108>)
 8005886:	410a      	asrs	r2, r1
 8005888:	07d6      	lsls	r6, r2, #31
 800588a:	d427      	bmi.n	80058dc <__sflush_r+0xb8>
 800588c:	2200      	movs	r2, #0
 800588e:	6062      	str	r2, [r4, #4]
 8005890:	04d9      	lsls	r1, r3, #19
 8005892:	6922      	ldr	r2, [r4, #16]
 8005894:	6022      	str	r2, [r4, #0]
 8005896:	d504      	bpl.n	80058a2 <__sflush_r+0x7e>
 8005898:	1c42      	adds	r2, r0, #1
 800589a:	d101      	bne.n	80058a0 <__sflush_r+0x7c>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b903      	cbnz	r3, 80058a2 <__sflush_r+0x7e>
 80058a0:	6560      	str	r0, [r4, #84]	; 0x54
 80058a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058a4:	602f      	str	r7, [r5, #0]
 80058a6:	2900      	cmp	r1, #0
 80058a8:	d0c9      	beq.n	800583e <__sflush_r+0x1a>
 80058aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ae:	4299      	cmp	r1, r3
 80058b0:	d002      	beq.n	80058b8 <__sflush_r+0x94>
 80058b2:	4628      	mov	r0, r5
 80058b4:	f7ff fbea 	bl	800508c <_free_r>
 80058b8:	2000      	movs	r0, #0
 80058ba:	6360      	str	r0, [r4, #52]	; 0x34
 80058bc:	e7c0      	b.n	8005840 <__sflush_r+0x1c>
 80058be:	2301      	movs	r3, #1
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b0      	blx	r6
 80058c4:	1c41      	adds	r1, r0, #1
 80058c6:	d1c8      	bne.n	800585a <__sflush_r+0x36>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0c5      	beq.n	800585a <__sflush_r+0x36>
 80058ce:	2b1d      	cmp	r3, #29
 80058d0:	d001      	beq.n	80058d6 <__sflush_r+0xb2>
 80058d2:	2b16      	cmp	r3, #22
 80058d4:	d101      	bne.n	80058da <__sflush_r+0xb6>
 80058d6:	602f      	str	r7, [r5, #0]
 80058d8:	e7b1      	b.n	800583e <__sflush_r+0x1a>
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e0:	81a3      	strh	r3, [r4, #12]
 80058e2:	e7ad      	b.n	8005840 <__sflush_r+0x1c>
 80058e4:	690f      	ldr	r7, [r1, #16]
 80058e6:	2f00      	cmp	r7, #0
 80058e8:	d0a9      	beq.n	800583e <__sflush_r+0x1a>
 80058ea:	0793      	lsls	r3, r2, #30
 80058ec:	680e      	ldr	r6, [r1, #0]
 80058ee:	bf08      	it	eq
 80058f0:	694b      	ldreq	r3, [r1, #20]
 80058f2:	600f      	str	r7, [r1, #0]
 80058f4:	bf18      	it	ne
 80058f6:	2300      	movne	r3, #0
 80058f8:	eba6 0807 	sub.w	r8, r6, r7
 80058fc:	608b      	str	r3, [r1, #8]
 80058fe:	f1b8 0f00 	cmp.w	r8, #0
 8005902:	dd9c      	ble.n	800583e <__sflush_r+0x1a>
 8005904:	6a21      	ldr	r1, [r4, #32]
 8005906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005908:	4643      	mov	r3, r8
 800590a:	463a      	mov	r2, r7
 800590c:	4628      	mov	r0, r5
 800590e:	47b0      	blx	r6
 8005910:	2800      	cmp	r0, #0
 8005912:	dc06      	bgt.n	8005922 <__sflush_r+0xfe>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	e78e      	b.n	8005840 <__sflush_r+0x1c>
 8005922:	4407      	add	r7, r0
 8005924:	eba8 0800 	sub.w	r8, r8, r0
 8005928:	e7e9      	b.n	80058fe <__sflush_r+0xda>
 800592a:	bf00      	nop
 800592c:	dfbffffe 	.word	0xdfbffffe

08005930 <_fflush_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	690b      	ldr	r3, [r1, #16]
 8005934:	4605      	mov	r5, r0
 8005936:	460c      	mov	r4, r1
 8005938:	b913      	cbnz	r3, 8005940 <_fflush_r+0x10>
 800593a:	2500      	movs	r5, #0
 800593c:	4628      	mov	r0, r5
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	b118      	cbz	r0, 800594a <_fflush_r+0x1a>
 8005942:	6a03      	ldr	r3, [r0, #32]
 8005944:	b90b      	cbnz	r3, 800594a <_fflush_r+0x1a>
 8005946:	f7ff f9a1 	bl	8004c8c <__sinit>
 800594a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f3      	beq.n	800593a <_fflush_r+0xa>
 8005952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005954:	07d0      	lsls	r0, r2, #31
 8005956:	d404      	bmi.n	8005962 <_fflush_r+0x32>
 8005958:	0599      	lsls	r1, r3, #22
 800595a:	d402      	bmi.n	8005962 <_fflush_r+0x32>
 800595c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595e:	f7ff fb92 	bl	8005086 <__retarget_lock_acquire_recursive>
 8005962:	4628      	mov	r0, r5
 8005964:	4621      	mov	r1, r4
 8005966:	f7ff ff5d 	bl	8005824 <__sflush_r>
 800596a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800596c:	07da      	lsls	r2, r3, #31
 800596e:	4605      	mov	r5, r0
 8005970:	d4e4      	bmi.n	800593c <_fflush_r+0xc>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	059b      	lsls	r3, r3, #22
 8005976:	d4e1      	bmi.n	800593c <_fflush_r+0xc>
 8005978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800597a:	f7ff fb85 	bl	8005088 <__retarget_lock_release_recursive>
 800597e:	e7dd      	b.n	800593c <_fflush_r+0xc>

08005980 <__swhatbuf_r>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	460c      	mov	r4, r1
 8005984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005988:	2900      	cmp	r1, #0
 800598a:	b096      	sub	sp, #88	; 0x58
 800598c:	4615      	mov	r5, r2
 800598e:	461e      	mov	r6, r3
 8005990:	da0d      	bge.n	80059ae <__swhatbuf_r+0x2e>
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005998:	f04f 0100 	mov.w	r1, #0
 800599c:	bf0c      	ite	eq
 800599e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80059a2:	2340      	movne	r3, #64	; 0x40
 80059a4:	2000      	movs	r0, #0
 80059a6:	6031      	str	r1, [r6, #0]
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	b016      	add	sp, #88	; 0x58
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	466a      	mov	r2, sp
 80059b0:	f000 f87c 	bl	8005aac <_fstat_r>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	dbec      	blt.n	8005992 <__swhatbuf_r+0x12>
 80059b8:	9901      	ldr	r1, [sp, #4]
 80059ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80059be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80059c2:	4259      	negs	r1, r3
 80059c4:	4159      	adcs	r1, r3
 80059c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059ca:	e7eb      	b.n	80059a4 <__swhatbuf_r+0x24>

080059cc <__smakebuf_r>:
 80059cc:	898b      	ldrh	r3, [r1, #12]
 80059ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059d0:	079d      	lsls	r5, r3, #30
 80059d2:	4606      	mov	r6, r0
 80059d4:	460c      	mov	r4, r1
 80059d6:	d507      	bpl.n	80059e8 <__smakebuf_r+0x1c>
 80059d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	6123      	str	r3, [r4, #16]
 80059e0:	2301      	movs	r3, #1
 80059e2:	6163      	str	r3, [r4, #20]
 80059e4:	b002      	add	sp, #8
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	ab01      	add	r3, sp, #4
 80059ea:	466a      	mov	r2, sp
 80059ec:	f7ff ffc8 	bl	8005980 <__swhatbuf_r>
 80059f0:	9900      	ldr	r1, [sp, #0]
 80059f2:	4605      	mov	r5, r0
 80059f4:	4630      	mov	r0, r6
 80059f6:	f7ff fbb5 	bl	8005164 <_malloc_r>
 80059fa:	b948      	cbnz	r0, 8005a10 <__smakebuf_r+0x44>
 80059fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a00:	059a      	lsls	r2, r3, #22
 8005a02:	d4ef      	bmi.n	80059e4 <__smakebuf_r+0x18>
 8005a04:	f023 0303 	bic.w	r3, r3, #3
 8005a08:	f043 0302 	orr.w	r3, r3, #2
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	e7e3      	b.n	80059d8 <__smakebuf_r+0xc>
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	6020      	str	r0, [r4, #0]
 8005a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a18:	81a3      	strh	r3, [r4, #12]
 8005a1a:	9b00      	ldr	r3, [sp, #0]
 8005a1c:	6163      	str	r3, [r4, #20]
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	6120      	str	r0, [r4, #16]
 8005a22:	b15b      	cbz	r3, 8005a3c <__smakebuf_r+0x70>
 8005a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f000 f851 	bl	8005ad0 <_isatty_r>
 8005a2e:	b128      	cbz	r0, 8005a3c <__smakebuf_r+0x70>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	81a3      	strh	r3, [r4, #12]
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	431d      	orrs	r5, r3
 8005a40:	81a5      	strh	r5, [r4, #12]
 8005a42:	e7cf      	b.n	80059e4 <__smakebuf_r+0x18>

08005a44 <_putc_r>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	460d      	mov	r5, r1
 8005a48:	4614      	mov	r4, r2
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	b118      	cbz	r0, 8005a56 <_putc_r+0x12>
 8005a4e:	6a03      	ldr	r3, [r0, #32]
 8005a50:	b90b      	cbnz	r3, 8005a56 <_putc_r+0x12>
 8005a52:	f7ff f91b 	bl	8004c8c <__sinit>
 8005a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a58:	07d8      	lsls	r0, r3, #31
 8005a5a:	d405      	bmi.n	8005a68 <_putc_r+0x24>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	0599      	lsls	r1, r3, #22
 8005a60:	d402      	bmi.n	8005a68 <_putc_r+0x24>
 8005a62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a64:	f7ff fb0f 	bl	8005086 <__retarget_lock_acquire_recursive>
 8005a68:	68a3      	ldr	r3, [r4, #8]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	da05      	bge.n	8005a7e <_putc_r+0x3a>
 8005a72:	69a2      	ldr	r2, [r4, #24]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	db12      	blt.n	8005a9e <_putc_r+0x5a>
 8005a78:	b2eb      	uxtb	r3, r5
 8005a7a:	2b0a      	cmp	r3, #10
 8005a7c:	d00f      	beq.n	8005a9e <_putc_r+0x5a>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	6022      	str	r2, [r4, #0]
 8005a84:	701d      	strb	r5, [r3, #0]
 8005a86:	b2ed      	uxtb	r5, r5
 8005a88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a8a:	07da      	lsls	r2, r3, #31
 8005a8c:	d405      	bmi.n	8005a9a <_putc_r+0x56>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	059b      	lsls	r3, r3, #22
 8005a92:	d402      	bmi.n	8005a9a <_putc_r+0x56>
 8005a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a96:	f7ff faf7 	bl	8005088 <__retarget_lock_release_recursive>
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f7ff f9e1 	bl	8004e6a <__swbuf_r>
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	e7ed      	b.n	8005a88 <_putc_r+0x44>

08005aac <_fstat_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4d07      	ldr	r5, [pc, #28]	; (8005acc <_fstat_r+0x20>)
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	f7fc f926 	bl	8001d0a <_fstat>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	d102      	bne.n	8005ac8 <_fstat_r+0x1c>
 8005ac2:	682b      	ldr	r3, [r5, #0]
 8005ac4:	b103      	cbz	r3, 8005ac8 <_fstat_r+0x1c>
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	bd38      	pop	{r3, r4, r5, pc}
 8005aca:	bf00      	nop
 8005acc:	20001a54 	.word	0x20001a54

08005ad0 <_isatty_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	4d06      	ldr	r5, [pc, #24]	; (8005aec <_isatty_r+0x1c>)
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	4608      	mov	r0, r1
 8005ada:	602b      	str	r3, [r5, #0]
 8005adc:	f7fc f925 	bl	8001d2a <_isatty>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d102      	bne.n	8005aea <_isatty_r+0x1a>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	b103      	cbz	r3, 8005aea <_isatty_r+0x1a>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	20001a54 	.word	0x20001a54

08005af0 <_sbrk_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4d06      	ldr	r5, [pc, #24]	; (8005b0c <_sbrk_r+0x1c>)
 8005af4:	2300      	movs	r3, #0
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	f7fc f92e 	bl	8001d5c <_sbrk>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_sbrk_r+0x1a>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_sbrk_r+0x1a>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	20001a54 	.word	0x20001a54

08005b10 <atan>:
 8005b10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	ec55 4b10 	vmov	r4, r5, d0
 8005b18:	4bc3      	ldr	r3, [pc, #780]	; (8005e28 <atan+0x318>)
 8005b1a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005b1e:	429e      	cmp	r6, r3
 8005b20:	46ab      	mov	fp, r5
 8005b22:	dd18      	ble.n	8005b56 <atan+0x46>
 8005b24:	4bc1      	ldr	r3, [pc, #772]	; (8005e2c <atan+0x31c>)
 8005b26:	429e      	cmp	r6, r3
 8005b28:	dc01      	bgt.n	8005b2e <atan+0x1e>
 8005b2a:	d109      	bne.n	8005b40 <atan+0x30>
 8005b2c:	b144      	cbz	r4, 8005b40 <atan+0x30>
 8005b2e:	4622      	mov	r2, r4
 8005b30:	462b      	mov	r3, r5
 8005b32:	4620      	mov	r0, r4
 8005b34:	4629      	mov	r1, r5
 8005b36:	f7fa fbc1 	bl	80002bc <__adddf3>
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	e006      	b.n	8005b4e <atan+0x3e>
 8005b40:	f1bb 0f00 	cmp.w	fp, #0
 8005b44:	f300 8131 	bgt.w	8005daa <atan+0x29a>
 8005b48:	a59b      	add	r5, pc, #620	; (adr r5, 8005db8 <atan+0x2a8>)
 8005b4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005b4e:	ec45 4b10 	vmov	d0, r4, r5
 8005b52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	4bb6      	ldr	r3, [pc, #728]	; (8005e30 <atan+0x320>)
 8005b58:	429e      	cmp	r6, r3
 8005b5a:	dc14      	bgt.n	8005b86 <atan+0x76>
 8005b5c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005b60:	429e      	cmp	r6, r3
 8005b62:	dc0d      	bgt.n	8005b80 <atan+0x70>
 8005b64:	a396      	add	r3, pc, #600	; (adr r3, 8005dc0 <atan+0x2b0>)
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	ee10 0a10 	vmov	r0, s0
 8005b6e:	4629      	mov	r1, r5
 8005b70:	f7fa fba4 	bl	80002bc <__adddf3>
 8005b74:	4baf      	ldr	r3, [pc, #700]	; (8005e34 <atan+0x324>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	f7fa ffe6 	bl	8000b48 <__aeabi_dcmpgt>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d1e6      	bne.n	8005b4e <atan+0x3e>
 8005b80:	f04f 3aff 	mov.w	sl, #4294967295
 8005b84:	e02b      	b.n	8005bde <atan+0xce>
 8005b86:	f000 f963 	bl	8005e50 <fabs>
 8005b8a:	4bab      	ldr	r3, [pc, #684]	; (8005e38 <atan+0x328>)
 8005b8c:	429e      	cmp	r6, r3
 8005b8e:	ec55 4b10 	vmov	r4, r5, d0
 8005b92:	f300 80bf 	bgt.w	8005d14 <atan+0x204>
 8005b96:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005b9a:	429e      	cmp	r6, r3
 8005b9c:	f300 80a0 	bgt.w	8005ce0 <atan+0x1d0>
 8005ba0:	ee10 2a10 	vmov	r2, s0
 8005ba4:	ee10 0a10 	vmov	r0, s0
 8005ba8:	462b      	mov	r3, r5
 8005baa:	4629      	mov	r1, r5
 8005bac:	f7fa fb86 	bl	80002bc <__adddf3>
 8005bb0:	4ba0      	ldr	r3, [pc, #640]	; (8005e34 <atan+0x324>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f7fa fb80 	bl	80002b8 <__aeabi_dsub>
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460f      	mov	r7, r1
 8005bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	f7fa fb79 	bl	80002bc <__adddf3>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4630      	mov	r0, r6
 8005bd0:	4639      	mov	r1, r7
 8005bd2:	f7fa fe53 	bl	800087c <__aeabi_ddiv>
 8005bd6:	f04f 0a00 	mov.w	sl, #0
 8005bda:	4604      	mov	r4, r0
 8005bdc:	460d      	mov	r5, r1
 8005bde:	4622      	mov	r2, r4
 8005be0:	462b      	mov	r3, r5
 8005be2:	4620      	mov	r0, r4
 8005be4:	4629      	mov	r1, r5
 8005be6:	f7fa fd1f 	bl	8000628 <__aeabi_dmul>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4680      	mov	r8, r0
 8005bf0:	4689      	mov	r9, r1
 8005bf2:	f7fa fd19 	bl	8000628 <__aeabi_dmul>
 8005bf6:	a374      	add	r3, pc, #464	; (adr r3, 8005dc8 <atan+0x2b8>)
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	460f      	mov	r7, r1
 8005c00:	f7fa fd12 	bl	8000628 <__aeabi_dmul>
 8005c04:	a372      	add	r3, pc, #456	; (adr r3, 8005dd0 <atan+0x2c0>)
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f7fa fb57 	bl	80002bc <__adddf3>
 8005c0e:	4632      	mov	r2, r6
 8005c10:	463b      	mov	r3, r7
 8005c12:	f7fa fd09 	bl	8000628 <__aeabi_dmul>
 8005c16:	a370      	add	r3, pc, #448	; (adr r3, 8005dd8 <atan+0x2c8>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f7fa fb4e 	bl	80002bc <__adddf3>
 8005c20:	4632      	mov	r2, r6
 8005c22:	463b      	mov	r3, r7
 8005c24:	f7fa fd00 	bl	8000628 <__aeabi_dmul>
 8005c28:	a36d      	add	r3, pc, #436	; (adr r3, 8005de0 <atan+0x2d0>)
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f7fa fb45 	bl	80002bc <__adddf3>
 8005c32:	4632      	mov	r2, r6
 8005c34:	463b      	mov	r3, r7
 8005c36:	f7fa fcf7 	bl	8000628 <__aeabi_dmul>
 8005c3a:	a36b      	add	r3, pc, #428	; (adr r3, 8005de8 <atan+0x2d8>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f7fa fb3c 	bl	80002bc <__adddf3>
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	f7fa fcee 	bl	8000628 <__aeabi_dmul>
 8005c4c:	a368      	add	r3, pc, #416	; (adr r3, 8005df0 <atan+0x2e0>)
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f7fa fb33 	bl	80002bc <__adddf3>
 8005c56:	4642      	mov	r2, r8
 8005c58:	464b      	mov	r3, r9
 8005c5a:	f7fa fce5 	bl	8000628 <__aeabi_dmul>
 8005c5e:	a366      	add	r3, pc, #408	; (adr r3, 8005df8 <atan+0x2e8>)
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	4680      	mov	r8, r0
 8005c66:	4689      	mov	r9, r1
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f7fa fcdc 	bl	8000628 <__aeabi_dmul>
 8005c70:	a363      	add	r3, pc, #396	; (adr r3, 8005e00 <atan+0x2f0>)
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f7fa fb1f 	bl	80002b8 <__aeabi_dsub>
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	f7fa fcd3 	bl	8000628 <__aeabi_dmul>
 8005c82:	a361      	add	r3, pc, #388	; (adr r3, 8005e08 <atan+0x2f8>)
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	f7fa fb16 	bl	80002b8 <__aeabi_dsub>
 8005c8c:	4632      	mov	r2, r6
 8005c8e:	463b      	mov	r3, r7
 8005c90:	f7fa fcca 	bl	8000628 <__aeabi_dmul>
 8005c94:	a35e      	add	r3, pc, #376	; (adr r3, 8005e10 <atan+0x300>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f7fa fb0d 	bl	80002b8 <__aeabi_dsub>
 8005c9e:	4632      	mov	r2, r6
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	f7fa fcc1 	bl	8000628 <__aeabi_dmul>
 8005ca6:	a35c      	add	r3, pc, #368	; (adr r3, 8005e18 <atan+0x308>)
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f7fa fb04 	bl	80002b8 <__aeabi_dsub>
 8005cb0:	4632      	mov	r2, r6
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	f7fa fcb8 	bl	8000628 <__aeabi_dmul>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	f7fa fafc 	bl	80002bc <__adddf3>
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	462b      	mov	r3, r5
 8005cc8:	f7fa fcae 	bl	8000628 <__aeabi_dmul>
 8005ccc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	d14b      	bne.n	8005d6e <atan+0x25e>
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7fa faed 	bl	80002b8 <__aeabi_dsub>
 8005cde:	e72c      	b.n	8005b3a <atan+0x2a>
 8005ce0:	ee10 0a10 	vmov	r0, s0
 8005ce4:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <atan+0x324>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4629      	mov	r1, r5
 8005cea:	f7fa fae5 	bl	80002b8 <__aeabi_dsub>
 8005cee:	4b51      	ldr	r3, [pc, #324]	; (8005e34 <atan+0x324>)
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	460f      	mov	r7, r1
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	f7fa fadf 	bl	80002bc <__adddf3>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4630      	mov	r0, r6
 8005d04:	4639      	mov	r1, r7
 8005d06:	f7fa fdb9 	bl	800087c <__aeabi_ddiv>
 8005d0a:	f04f 0a01 	mov.w	sl, #1
 8005d0e:	4604      	mov	r4, r0
 8005d10:	460d      	mov	r5, r1
 8005d12:	e764      	b.n	8005bde <atan+0xce>
 8005d14:	4b49      	ldr	r3, [pc, #292]	; (8005e3c <atan+0x32c>)
 8005d16:	429e      	cmp	r6, r3
 8005d18:	da1d      	bge.n	8005d56 <atan+0x246>
 8005d1a:	ee10 0a10 	vmov	r0, s0
 8005d1e:	4b48      	ldr	r3, [pc, #288]	; (8005e40 <atan+0x330>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	4629      	mov	r1, r5
 8005d24:	f7fa fac8 	bl	80002b8 <__aeabi_dsub>
 8005d28:	4b45      	ldr	r3, [pc, #276]	; (8005e40 <atan+0x330>)
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	460f      	mov	r7, r1
 8005d2e:	2200      	movs	r2, #0
 8005d30:	4620      	mov	r0, r4
 8005d32:	4629      	mov	r1, r5
 8005d34:	f7fa fc78 	bl	8000628 <__aeabi_dmul>
 8005d38:	4b3e      	ldr	r3, [pc, #248]	; (8005e34 <atan+0x324>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f7fa fabe 	bl	80002bc <__adddf3>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4630      	mov	r0, r6
 8005d46:	4639      	mov	r1, r7
 8005d48:	f7fa fd98 	bl	800087c <__aeabi_ddiv>
 8005d4c:	f04f 0a02 	mov.w	sl, #2
 8005d50:	4604      	mov	r4, r0
 8005d52:	460d      	mov	r5, r1
 8005d54:	e743      	b.n	8005bde <atan+0xce>
 8005d56:	462b      	mov	r3, r5
 8005d58:	ee10 2a10 	vmov	r2, s0
 8005d5c:	4939      	ldr	r1, [pc, #228]	; (8005e44 <atan+0x334>)
 8005d5e:	2000      	movs	r0, #0
 8005d60:	f7fa fd8c 	bl	800087c <__aeabi_ddiv>
 8005d64:	f04f 0a03 	mov.w	sl, #3
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	e737      	b.n	8005bde <atan+0xce>
 8005d6e:	4b36      	ldr	r3, [pc, #216]	; (8005e48 <atan+0x338>)
 8005d70:	4e36      	ldr	r6, [pc, #216]	; (8005e4c <atan+0x33c>)
 8005d72:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa fa9d 	bl	80002b8 <__aeabi_dsub>
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	f7fa fa99 	bl	80002b8 <__aeabi_dsub>
 8005d86:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005d92:	f7fa fa91 	bl	80002b8 <__aeabi_dsub>
 8005d96:	f1bb 0f00 	cmp.w	fp, #0
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	460d      	mov	r5, r1
 8005d9e:	f6bf aed6 	bge.w	8005b4e <atan+0x3e>
 8005da2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005da6:	461d      	mov	r5, r3
 8005da8:	e6d1      	b.n	8005b4e <atan+0x3e>
 8005daa:	a51d      	add	r5, pc, #116	; (adr r5, 8005e20 <atan+0x310>)
 8005dac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005db0:	e6cd      	b.n	8005b4e <atan+0x3e>
 8005db2:	bf00      	nop
 8005db4:	f3af 8000 	nop.w
 8005db8:	54442d18 	.word	0x54442d18
 8005dbc:	bff921fb 	.word	0xbff921fb
 8005dc0:	8800759c 	.word	0x8800759c
 8005dc4:	7e37e43c 	.word	0x7e37e43c
 8005dc8:	e322da11 	.word	0xe322da11
 8005dcc:	3f90ad3a 	.word	0x3f90ad3a
 8005dd0:	24760deb 	.word	0x24760deb
 8005dd4:	3fa97b4b 	.word	0x3fa97b4b
 8005dd8:	a0d03d51 	.word	0xa0d03d51
 8005ddc:	3fb10d66 	.word	0x3fb10d66
 8005de0:	c54c206e 	.word	0xc54c206e
 8005de4:	3fb745cd 	.word	0x3fb745cd
 8005de8:	920083ff 	.word	0x920083ff
 8005dec:	3fc24924 	.word	0x3fc24924
 8005df0:	5555550d 	.word	0x5555550d
 8005df4:	3fd55555 	.word	0x3fd55555
 8005df8:	2c6a6c2f 	.word	0x2c6a6c2f
 8005dfc:	bfa2b444 	.word	0xbfa2b444
 8005e00:	52defd9a 	.word	0x52defd9a
 8005e04:	3fadde2d 	.word	0x3fadde2d
 8005e08:	af749a6d 	.word	0xaf749a6d
 8005e0c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005e10:	fe231671 	.word	0xfe231671
 8005e14:	3fbc71c6 	.word	0x3fbc71c6
 8005e18:	9998ebc4 	.word	0x9998ebc4
 8005e1c:	3fc99999 	.word	0x3fc99999
 8005e20:	54442d18 	.word	0x54442d18
 8005e24:	3ff921fb 	.word	0x3ff921fb
 8005e28:	440fffff 	.word	0x440fffff
 8005e2c:	7ff00000 	.word	0x7ff00000
 8005e30:	3fdbffff 	.word	0x3fdbffff
 8005e34:	3ff00000 	.word	0x3ff00000
 8005e38:	3ff2ffff 	.word	0x3ff2ffff
 8005e3c:	40038000 	.word	0x40038000
 8005e40:	3ff80000 	.word	0x3ff80000
 8005e44:	bff00000 	.word	0xbff00000
 8005e48:	08006140 	.word	0x08006140
 8005e4c:	08006120 	.word	0x08006120

08005e50 <fabs>:
 8005e50:	ec51 0b10 	vmov	r0, r1, d0
 8005e54:	ee10 2a10 	vmov	r2, s0
 8005e58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e5c:	ec43 2b10 	vmov	d0, r2, r3
 8005e60:	4770      	bx	lr
	...

08005e64 <_init>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	bf00      	nop
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr

08005e70 <_fini>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr
