
YDLIDAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007994  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  08007b68  08007b68  00017b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008298  08008298  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008298  08008298  00018298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082a0  080082a0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a0  080082a0  000182a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082a4  080082a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080082a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200001d4  0800847c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800847c  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009dae  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd9  00000000  00000000  00029ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069a  00000000  00000000  0002c658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000150ef  00000000  00000000  0002ccf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b779  00000000  00000000  00041de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079824  00000000  00000000  0004d55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003270  00000000  00000000  000c6d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000c9ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b4c 	.word	0x08007b4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007b4c 	.word	0x08007b4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <calculateChecksum>:
 * @param data  The data to be calculated
 * @param length  The length of the data to be calculated
 * @return uint16_t
 */
uint16_t calculateChecksum(uint8_t *data, size_t length)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    uint16_t checksum = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	82fb      	strh	r3, [r7, #22]

    for (int i = 0; i < 2 * length + 1; i += 2)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	e01b      	b.n	8000f30 <calculateChecksum+0x4c>
    {
        if (i == 8)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d102      	bne.n	8000f04 <calculateChecksum+0x20>
        {
            i += 2; //
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	3302      	adds	r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        uint16_t tmp = (uint16_t)data[i] << 8 | (uint16_t)data[i + 1];
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	3301      	adds	r3, #1
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	440b      	add	r3, r1
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	81fb      	strh	r3, [r7, #14]
        checksum ^= tmp;
 8000f22:	8afa      	ldrh	r2, [r7, #22]
 8000f24:	89fb      	ldrh	r3, [r7, #14]
 8000f26:	4053      	eors	r3, r2
 8000f28:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < 2 * length + 1; i += 2)
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8dd      	bhi.n	8000ef8 <calculateChecksum+0x14>
    }
    // 交换checksum的字节序
    checksum = (checksum >> 8) | (checksum << 8);
 8000f3c:	8afb      	ldrh	r3, [r7, #22]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	8afb      	ldrh	r3, [r7, #22]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	82fb      	strh	r3, [r7, #22]
    return checksum;
 8000f50:	8afb      	ldrh	r3, [r7, #22]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <getDeviceInfo>:
 *
 * @param device_info  The device info Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t getDeviceInfo(ydlidar_device_info_t *device_info)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    ydlidar_response_header_t response_header;
    sendCommand(YDLIDAR_CMD_GET_DEVICE_INFO);
 8000f68:	2090      	movs	r0, #144	; 0x90
 8000f6a:	f000 f877 	bl	800105c <sendCommand>

    receiveResponseHeader(&response_header);
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f888 	bl	8001088 <receiveResponseHeader>

    if (response_header.type_mode == YDLIDAR_RESPONSE_DEVICVE_TYPE_MODE && response_header.response_length == YDLIDAR_RESPONSE_DEVICE_INFO_SIZE)
 8000f78:	7cbb      	ldrb	r3, [r7, #18]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d116      	bne.n	8000fac <getDeviceInfo+0x4c>
 8000f7e:	89fb      	ldrh	r3, [r7, #14]
 8000f80:	8a3a      	ldrh	r2, [r7, #16]
 8000f82:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000f86:	0412      	lsls	r2, r2, #16
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	2b14      	cmp	r3, #20
 8000f8c:	d10e      	bne.n	8000fac <getDeviceInfo+0x4c>
    {
        uint8_t *infobuf = (uint8_t *)device_info;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	617b      	str	r3, [r7, #20]
        ydlidar.func.receive_response(infobuf, YDLIDAR_RESPONSE_DEVICE_INFO_SIZE);
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <getDeviceInfo+0x58>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2114      	movs	r1, #20
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	4798      	blx	r3
        if (device_info->model == YDLIDAR_MODEL_X4)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b06      	cmp	r3, #6
 8000fa2:	d101      	bne.n	8000fa8 <getDeviceInfo+0x48>
        {
            return RESULT_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e002      	b.n	8000fae <getDeviceInfo+0x4e>
        }
        else
        {
            return RESULT_FAIL;
 8000fa8:	23ff      	movs	r3, #255	; 0xff
 8000faa:	e000      	b.n	8000fae <getDeviceInfo+0x4e>
        }
    }
    else
    {
        return RESULT_FAIL;
 8000fac:	23ff      	movs	r3, #255	; 0xff
    }
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001f0 	.word	0x200001f0

08000fbc <getDeviceHealth>:
 *
 * @param device_health  The device health Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t getDeviceHealth(ydlidar_device_health_t *device_health)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    ydlidar_response_header_t response_header;
    sendCommand(YDLIDAR_CMD_GET_DEVICE_HEALTH);
 8000fc4:	2091      	movs	r0, #145	; 0x91
 8000fc6:	f000 f849 	bl	800105c <sendCommand>
    receiveResponseHeader(&response_header);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f85a 	bl	8001088 <receiveResponseHeader>
    if (response_header.type_mode == YDLIDAR_RESPONSE_HEALTH_TYPE_MODE && response_header.response_length == YDLIDAR_RESPONSE_DEVICE_HEALTH_SIZE)
 8000fd4:	7cbb      	ldrb	r3, [r7, #18]
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d116      	bne.n	8001008 <getDeviceHealth+0x4c>
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	8a3a      	ldrh	r2, [r7, #16]
 8000fde:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000fe2:	0412      	lsls	r2, r2, #16
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d10e      	bne.n	8001008 <getDeviceHealth+0x4c>
    {
        uint8_t *healthbuf = (uint8_t *)device_health;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	617b      	str	r3, [r7, #20]
        ydlidar.func.receive_response(healthbuf, YDLIDAR_RESPONSE_DEVICE_HEALTH_SIZE);
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <getDeviceHealth+0x58>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	6978      	ldr	r0, [r7, #20]
 8000ff6:	4798      	blx	r3
        if (device_health->status == 0)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <getDeviceHealth+0x48>
        {
            return RESULT_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	e002      	b.n	800100a <getDeviceHealth+0x4e>
        }
        else
        {
            return RESULT_FAIL;
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	e000      	b.n	800100a <getDeviceHealth+0x4e>
        }
    }
    else
    {
        return RESULT_FAIL;
 8001008:	23ff      	movs	r3, #255	; 0xff
    }
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200001f0 	.word	0x200001f0

08001018 <stopScan>:
/**
 * @brief  This function is used to stop the scan
 *
 */
void stopScan()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
    sendCommand(YDLIDER_CMD_STOP);
 800101c:	2065      	movs	r0, #101	; 0x65
 800101e:	f000 f81d 	bl	800105c <sendCommand>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}

08001026 <startScan>:
 * @brief  This function is used to start the scan
 *
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t startScan()
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
    stopScan();
 800102c:	f7ff fff4 	bl	8001018 <stopScan>
    HAL_Delay(1000);
 8001030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001034:	f001 f88e 	bl	8002154 <HAL_Delay>
    sendCommand(YDLIDER_CMD_SCAN);
 8001038:	2060      	movs	r0, #96	; 0x60
 800103a:	f000 f80f 	bl	800105c <sendCommand>
    ydlidar_response_header_t response_header;
    receiveResponseHeader(&response_header);
 800103e:	463b      	mov	r3, r7
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f821 	bl	8001088 <receiveResponseHeader>
    if (response_header.type_mode == YDLIDAR_RESPONSE_MEASUREMENT_TYPE_MODE)
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	2b81      	cmp	r3, #129	; 0x81
 800104a:	d101      	bne.n	8001050 <startScan+0x2a>
    {
        return RESULT_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	e000      	b.n	8001052 <startScan+0x2c>
    }
    else
    {
        return RESULT_FAIL;
 8001050:	23ff      	movs	r3, #255	; 0xff
    }
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <sendCommand>:
 * @brief This function is used to send the command
 *
 * @param cmd  The command to be sent
 */
void sendCommand(uint8_t cmd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
    ydlidar_cmd_packet_t cmd_packet;
    cmd_packet.syncByte = YDLIDER_CMD_SYNC_BYTE;
 8001066:	23a5      	movs	r3, #165	; 0xa5
 8001068:	733b      	strb	r3, [r7, #12]
    cmd_packet.cmd_flag = cmd;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	737b      	strb	r3, [r7, #13]
    ydlidar.func.send_command((uint8_t *)&cmd_packet, sizeof(cmd_packet));
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <sendCommand+0x28>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	2102      	movs	r1, #2
 8001078:	4610      	mov	r0, r2
 800107a:	4798      	blx	r3
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200001f0 	.word	0x200001f0

08001088 <receiveResponseHeader>:
 *
 * @param response_header  The response header Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t receiveResponseHeader(ydlidar_response_header_t *response_header)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    uint8_t *header = (uint8_t *)response_header;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60fb      	str	r3, [r7, #12]
    ydlidar.func.receive_response(header, YDLIDAR_RESPONSE_HEADER_SIZE);
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <receiveResponseHeader+0x20>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2107      	movs	r1, #7
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	4798      	blx	r3
    printf("[DEBUG] Response mode: %d\r\n", response_header->response_mode);
    printf("[DEBUG] Response type mode: %x\r\n", response_header->type_mode);
    printf("[DEBUG] Response type mode: %d\r\n", response_header->type_mode);

#endif
    return RESULT_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200001f0 	.word	0x200001f0

080010ac <parseDistance>:
 * @param rawDistance  The raw distance data
 * @param LSN  The number of the sample data
 * @param realDistance  The real distance after parse
 */
void parseDistance(uint16_t *rawDistance, int LSN, double *realDistance)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < LSN; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e017      	b.n	80010ee <parseDistance+0x42>
    {
        realDistance[i] = (double)rawDistance[i] / 4.0f;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4413      	add	r3, r2
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa3b 	bl	8000544 <__aeabi_ui2d>
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	18d4      	adds	r4, r2, r3
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <parseDistance+0x54>)
 80010dc:	f7ff fbd6 	bl	800088c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < LSN; i++)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	dbe3      	blt.n	80010be <parseDistance+0x12>
    }
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	40100000 	.word	0x40100000

08001104 <AngleFirstLevelParse>:
 * @param LSA  The end angle
 * @param LSN  The number of the sample data
 * @param angles  The angle after parse
 */
void AngleFirstLevelParse(uint16_t FSA, uint16_t LSA, int LSN, double *angles)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b08f      	sub	sp, #60	; 0x3c
 8001108:	af00      	add	r7, sp, #0
 800110a:	60ba      	str	r2, [r7, #8]
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4603      	mov	r3, r0
 8001110:	81fb      	strh	r3, [r7, #14]
 8001112:	460b      	mov	r3, r1
 8001114:	81bb      	strh	r3, [r7, #12]
    // calculate start angle and end angle
    double startAngle = (double)(FSA >> 1) / 64.0;
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	085b      	lsrs	r3, r3, #1
 800111a:	b29b      	uxth	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa21 	bl	8000564 <__aeabi_i2d>
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <AngleFirstLevelParse+0xcc>)
 8001128:	f7ff fbb0 	bl	800088c <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double endAngle = (double)(LSA >> 1) / 64.0;
 8001134:	89bb      	ldrh	r3, [r7, #12]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	b29b      	uxth	r3, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa12 	bl	8000564 <__aeabi_i2d>
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <AngleFirstLevelParse+0xcc>)
 8001146:	f7ff fba1 	bl	800088c <__aeabi_ddiv>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // calculate angle range
    double angleRange = endAngle - startAngle;
 8001152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001156:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800115a:	f7ff f8b5 	bl	80002c8 <__aeabi_dsub>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // calculate angle resolution
    double angleResolution = angleRange / (double)(LSN - 1);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3b01      	subs	r3, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9fa 	bl	8000564 <__aeabi_i2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001178:	f7ff fb88 	bl	800088c <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < LSN; i++)
 8001184:	2300      	movs	r3, #0
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
 8001188:	e019      	b.n	80011be <AngleFirstLevelParse+0xba>
    {
        angles[i] = startAngle + angleResolution * i;
 800118a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800118c:	f7ff f9ea 	bl	8000564 <__aeabi_i2d>
 8001190:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001194:	f7ff fa50 	bl	8000638 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	18d4      	adds	r4, r2, r3
 80011a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011ac:	f7ff f88e 	bl	80002cc <__adddf3>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < LSN; i++)
 80011b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ba:	3301      	adds	r3, #1
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
 80011be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dbe1      	blt.n	800118a <AngleFirstLevelParse+0x86>
    }
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	373c      	adds	r7, #60	; 0x3c
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	40500000 	.word	0x40500000
 80011d4:	00000000 	.word	0x00000000

080011d8 <AngleSecondLevelParse>:
 * @param angles  The angle after first level parse
 * @param LSN  The number of the sample data
 * @param distances  The distance after parse
 */
void AngleSecondLevelParse(double *angles, int LSN, double *distances)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
    // IF Distance𝑖 == 0 AngCorrect𝑖 = 0
    // ELSE AngCorrect𝑖 = tand−1(21.8 ∗ 155.3−Distance𝑖 155.3∗Distance𝑖) for (int i = 1; i < LSN; i++)
    double AngCorrect = 0.0;
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < LSN; i++)
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e05f      	b.n	80012b6 <AngleSecondLevelParse+0xde>
    {
        if (distances[i] != 0)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	f7ff fc7d 	bl	8000b08 <__aeabi_dcmpeq>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d135      	bne.n	8001280 <AngleSecondLevelParse+0xa8>
        {
            AngCorrect = atan(21.8 * (155.3 - distances[i]) / (155.3 * distances[i]));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	a129      	add	r1, pc, #164	; (adr r1, 80012c8 <AngleSecondLevelParse+0xf0>)
 8001222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001226:	f7ff f84f 	bl	80002c8 <__aeabi_dsub>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	a327      	add	r3, pc, #156	; (adr r3, 80012d0 <AngleSecondLevelParse+0xf8>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9fe 	bl	8000638 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4614      	mov	r4, r2
 8001242:	461d      	mov	r5, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001250:	a31d      	add	r3, pc, #116	; (adr r3, 80012c8 <AngleSecondLevelParse+0xf0>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f9ef 	bl	8000638 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f7ff fb13 	bl	800088c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	ec43 2b17 	vmov	d7, r2, r3
 800126e:	eeb0 0a47 	vmov.f32	s0, s14
 8001272:	eef0 0a67 	vmov.f32	s1, s15
 8001276:	f006 fabf 	bl	80077f8 <atan>
 800127a:	ed87 0b06 	vstr	d0, [r7, #24]
 800127e:	e005      	b.n	800128c <AngleSecondLevelParse+0xb4>
        }
        else
        {
            AngCorrect = 0.0;
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }
        angles[i] += AngCorrect;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	18d4      	adds	r4, r2, r3
 80012a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012a4:	f7ff f812 	bl	80002cc <__adddf3>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 1; i < LSN; i++)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	db9b      	blt.n	80011f6 <AngleSecondLevelParse+0x1e>
    }
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdb0      	pop	{r4, r5, r7, pc}
 80012c8:	9999999a 	.word	0x9999999a
 80012cc:	40636999 	.word	0x40636999
 80012d0:	cccccccd 	.word	0xcccccccd
 80012d4:	4035cccc 	.word	0x4035cccc

080012d8 <startReceiveScanData>:
/**
 * @brief  This function is used to start receive the scan data
 *
 */
void startReceiveScanData(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
    ydlidar.func.receive_data_dma(scanPoints[SCAN_CIRCLE_INDEX], sizeof(scanPoints[SCAN_CIRCLE_INDEX]));
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <startReceiveScanData+0x28>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <startReceiveScanData+0x2c>)
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	4611      	mov	r1, r2
 80012e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80012ea:	fb01 f202 	mul.w	r2, r1, r2
 80012ee:	4906      	ldr	r1, [pc, #24]	; (8001308 <startReceiveScanData+0x30>)
 80012f0:	440a      	add	r2, r1
 80012f2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80012f6:	4610      	mov	r0, r2
 80012f8:	4798      	blx	r3
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001f0 	.word	0x200001f0
 8001304:	200004f0 	.word	0x200004f0
 8001308:	20000220 	.word	0x20000220

0800130c <dataProcess>:
bool receiveFlag = false;
uint32_t receiveCount = 0;
ydlidar_data_packet_t *data_packet;

void dataProcess(void)
{
 800130c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001310:	b09b      	sub	sp, #108	; 0x6c
 8001312:	af04      	add	r7, sp, #16
    if (receiveFlag == false)
 8001314:	4bb0      	ldr	r3, [pc, #704]	; (80015d8 <dataProcess+0x2cc>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	f083 0301 	eor.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <dataProcess+0x1e>
    {
        printf("[DEBUG] receiveFlag = false,wai t for receive data\r\n");
 8001322:	48ae      	ldr	r0, [pc, #696]	; (80015dc <dataProcess+0x2d0>)
 8001324:	f004 facc 	bl	80058c0 <puts>
        return;
 8001328:	e1cc      	b.n	80016c4 <dataProcess+0x3b8>
    }
    // printf("[DEBUG] PROCESS_SCAN_DATA_INDEX = %d, SCAN_CIRCLE_INDEX = %d\r\n", PROCESS_SCAN_DATA_INDEX, SCAN_CIRCLE_INDEX);

    uint8_t *data = (uint8_t *)&scanPoints[PROCESS_SCAN_DATA_INDEX];
 800132a:	4bad      	ldr	r3, [pc, #692]	; (80015e0 <dataProcess+0x2d4>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	4aaa      	ldr	r2, [pc, #680]	; (80015e4 <dataProcess+0x2d8>)
 800133a:	4413      	add	r3, r2
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef YDLIDAR_DEBUG_LEVEL_2
    for (int i = 0; i < MAX_SCAN_POINTS; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	657b      	str	r3, [r7, #84]	; 0x54
 8001342:	e00a      	b.n	800135a <dataProcess+0x4e>
    {
        printf("%02x ", data[i]);
 8001344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	48a6      	ldr	r0, [pc, #664]	; (80015e8 <dataProcess+0x2dc>)
 8001350:	f004 fa50 	bl	80057f4 <iprintf>
    for (int i = 0; i < MAX_SCAN_POINTS; i++)
 8001354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001356:	3301      	adds	r3, #1
 8001358:	657b      	str	r3, [r7, #84]	; 0x54
 800135a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001360:	dbf0      	blt.n	8001344 <dataProcess+0x38>
    }
    printf("\r\n");
 8001362:	48a2      	ldr	r0, [pc, #648]	; (80015ec <dataProcess+0x2e0>)
 8001364:	f004 faac 	bl	80058c0 <puts>
#endif
    uint16_t checkSumrResult = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    uint16_t dataIndex = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    while (dataIndex < MAX_SCAN_POINTS)
 8001374:	e17d      	b.n	8001672 <dataProcess+0x366>
    {
        if (data[dataIndex] == 0xAA && data[dataIndex + 1] == 0x55) // check the start flag
 8001376:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800137a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800137c:	4413      	add	r3, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2baa      	cmp	r3, #170	; 0xaa
 8001382:	f040 8171 	bne.w	8001668 <dataProcess+0x35c>
 8001386:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800138a:	3301      	adds	r3, #1
 800138c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b55      	cmp	r3, #85	; 0x55
 8001394:	f040 8168 	bne.w	8001668 <dataProcess+0x35c>
        {
 8001398:	466b      	mov	r3, sp
 800139a:	461e      	mov	r6, r3
            data_packet = (ydlidar_data_packet_t *)&data[dataIndex];
 800139c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80013a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a2:	441a      	add	r2, r3
 80013a4:	4b92      	ldr	r3, [pc, #584]	; (80015f0 <dataProcess+0x2e4>)
 80013a6:	601a      	str	r2, [r3, #0]
            printf("[DEBUG] data_packet->type_CT = %2x\r\n", data_packet->type_CT);
            printf("[DEBUG] data_packet->size_LSN = %2x\r\n", data_packet->size_LSN);
            printf("[DEBUG] data_packet->startAngle_FSA = %4x\r\n", data_packet->startAngle_FSA);
            printf("[DEBUG] data_packet->endAngle_LSA = %4x\r\n", data_packet->endAngle_LSA);
#endif
            if (data_packet->size_LSN == 1)
 80013a8:	4b91      	ldr	r3, [pc, #580]	; (80015f0 <dataProcess+0x2e4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	78db      	ldrb	r3, [r3, #3]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10d      	bne.n	80013ce <dataProcess+0xc2>
            {
                // continue; // skip the start data packet
                dataIndex += sizeof(ydlidar_data_packet_t) + data_packet->size_LSN * sizeof(uint16_t);
 80013b2:	4b8f      	ldr	r3, [pc, #572]	; (80015f0 <dataProcess+0x2e4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	78db      	ldrb	r3, [r3, #3]
 80013b8:	3305      	adds	r3, #5
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80013c4:	4413      	add	r3, r2
 80013c6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                continue;
 80013ca:	46b5      	mov	sp, r6
 80013cc:	e151      	b.n	8001672 <dataProcess+0x366>
            }
            if (dataIndex + sizeof(ydlidar_data_packet_t) + data_packet->size_LSN * sizeof(uint16_t) > MAX_SCAN_POINTS)
 80013ce:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80013d2:	4b87      	ldr	r3, [pc, #540]	; (80015f0 <dataProcess+0x2e4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	78db      	ldrb	r3, [r3, #3]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	330a      	adds	r3, #10
 80013de:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80013e2:	d901      	bls.n	80013e8 <dataProcess+0xdc>
            {
                break;
 80013e4:	46b5      	mov	sp, r6
 80013e6:	e14a      	b.n	800167e <dataProcess+0x372>
            }
            checkSumrResult = calculateChecksum((uint8_t *)&data[dataIndex], data_packet->size_LSN + 4); // calculate the checksum
 80013e8:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80013ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ee:	441a      	add	r2, r3
 80013f0:	4b7f      	ldr	r3, [pc, #508]	; (80015f0 <dataProcess+0x2e4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	78db      	ldrb	r3, [r3, #3]
 80013f6:	3304      	adds	r3, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4610      	mov	r0, r2
 80013fc:	f7ff fd72 	bl	8000ee4 <calculateChecksum>
 8001400:	4603      	mov	r3, r0
 8001402:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            uint16_t sampleDatas_SI[data_packet->size_LSN];
 8001406:	4b7a      	ldr	r3, [pc, #488]	; (80015f0 <dataProcess+0x2e4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	78d9      	ldrb	r1, [r3, #3]
 800140c:	460b      	mov	r3, r1
 800140e:	3b01      	subs	r3, #1
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001412:	b2cb      	uxtb	r3, r1
 8001414:	2200      	movs	r2, #0
 8001416:	461c      	mov	r4, r3
 8001418:	4615      	mov	r5, r2
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	012b      	lsls	r3, r5, #4
 8001424:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001428:	0122      	lsls	r2, r4, #4
 800142a:	b2cb      	uxtb	r3, r1
 800142c:	2200      	movs	r2, #0
 800142e:	4698      	mov	r8, r3
 8001430:	4691      	mov	r9, r2
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800143e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001442:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001446:	460b      	mov	r3, r1
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	3307      	adds	r3, #7
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	ebad 0d03 	sub.w	sp, sp, r3
 8001454:	ab04      	add	r3, sp, #16
 8001456:	3301      	adds	r3, #1
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
            uint16_t *sampledata = (uint16_t *)&data[dataIndex + sizeof(ydlidar_data_packet_t)];
 800145e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001462:	f103 020a 	add.w	r2, r3, #10
 8001466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001468:	4413      	add	r3, r2
 800146a:	637b      	str	r3, [r7, #52]	; 0x34

            for (int j = 0; j < data_packet->size_LSN; j++) // convert the data to uint16_t
 800146c:	2300      	movs	r3, #0
 800146e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001470:	e00b      	b.n	800148a <dataProcess+0x17e>
            {
                sampleDatas_SI[j] = sampledata[j];
 8001472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001478:	4413      	add	r3, r2
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800147e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001480:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
            for (int j = 0; j < data_packet->size_LSN; j++) // convert the data to uint16_t
 8001484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001486:	3301      	adds	r3, #1
 8001488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800148a:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <dataProcess+0x2e4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	78db      	ldrb	r3, [r3, #3]
 8001490:	461a      	mov	r2, r3
 8001492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001494:	4293      	cmp	r3, r2
 8001496:	dbec      	blt.n	8001472 <dataProcess+0x166>
            }
            // checkSumrResult += calculateChecksum(sampledata, data_packet->size_LSN); // calculate the checksum
#ifdef YDLIDAR_DEBUG_LEVEL_2
            printf("[DEBUG] dataIndex = %d\r\n", dataIndex);
 8001498:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800149c:	4619      	mov	r1, r3
 800149e:	4855      	ldr	r0, [pc, #340]	; (80015f4 <dataProcess+0x2e8>)
 80014a0:	f004 f9a8 	bl	80057f4 <iprintf>
            printf("[DEBUG] checkSumrResult = %4x\r\n", checkSumrResult);
 80014a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80014a8:	4619      	mov	r1, r3
 80014aa:	4853      	ldr	r0, [pc, #332]	; (80015f8 <dataProcess+0x2ec>)
 80014ac:	f004 f9a2 	bl	80057f4 <iprintf>
            printf("[DEBUG] data_packet->crc_CS = %4x\r\n", data_packet->crc_CS);
 80014b0:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <dataProcess+0x2e4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	891b      	ldrh	r3, [r3, #8]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4619      	mov	r1, r3
 80014ba:	4850      	ldr	r0, [pc, #320]	; (80015fc <dataProcess+0x2f0>)
 80014bc:	f004 f99a 	bl	80057f4 <iprintf>
#endif
            if (checkSumrResult == data_packet->crc_CS)
 80014c0:	4b4b      	ldr	r3, [pc, #300]	; (80015f0 <dataProcess+0x2e4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	891b      	ldrh	r3, [r3, #8]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80014cc:	4293      	cmp	r3, r2
 80014ce:	f040 80ba 	bne.w	8001646 <dataProcess+0x33a>
            {
 80014d2:	466b      	mov	r3, sp
 80014d4:	607b      	str	r3, [r7, #4]
                double distances[data_packet->size_LSN];
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <dataProcess+0x2e4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	78d9      	ldrb	r1, [r3, #3]
 80014dc:	460b      	mov	r3, r1
 80014de:	3b01      	subs	r3, #1
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
 80014e2:	b2cb      	uxtb	r3, r1
 80014e4:	2200      	movs	r2, #0
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	61fa      	str	r2, [r7, #28]
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	69f8      	ldr	r0, [r7, #28]
 80014f4:	0183      	lsls	r3, r0, #6
 80014f6:	69b8      	ldr	r0, [r7, #24]
 80014f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014fc:	69b8      	ldr	r0, [r7, #24]
 80014fe:	0182      	lsls	r2, r0, #6
 8001500:	b2cb      	uxtb	r3, r1
 8001502:	2200      	movs	r2, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	617a      	str	r2, [r7, #20]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	6978      	ldr	r0, [r7, #20]
 8001512:	0183      	lsls	r3, r0, #6
 8001514:	6938      	ldr	r0, [r7, #16]
 8001516:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800151a:	6938      	ldr	r0, [r7, #16]
 800151c:	0182      	lsls	r2, r0, #6
 800151e:	460b      	mov	r3, r1
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	3307      	adds	r3, #7
 8001524:	08db      	lsrs	r3, r3, #3
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	ebad 0d03 	sub.w	sp, sp, r3
 800152c:	ab04      	add	r3, sp, #16
 800152e:	3307      	adds	r3, #7
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
                double angles[data_packet->size_LSN];
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <dataProcess+0x2e4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	78d9      	ldrb	r1, [r3, #3]
 800153c:	460b      	mov	r3, r1
 800153e:	3b01      	subs	r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
 8001542:	b2cb      	uxtb	r3, r1
 8001544:	2200      	movs	r2, #0
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	60fa      	str	r2, [r7, #12]
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	0183      	lsls	r3, r0, #6
 8001556:	68b8      	ldr	r0, [r7, #8]
 8001558:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800155c:	68b8      	ldr	r0, [r7, #8]
 800155e:	0182      	lsls	r2, r0, #6
 8001560:	b2cb      	uxtb	r3, r1
 8001562:	2200      	movs	r2, #0
 8001564:	469a      	mov	sl, r3
 8001566:	4693      	mov	fp, r2
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001574:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001578:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800157c:	460b      	mov	r3, r1
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	3307      	adds	r3, #7
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	ebad 0d03 	sub.w	sp, sp, r3
 800158a:	ab04      	add	r3, sp, #16
 800158c:	3307      	adds	r3, #7
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
                parseDistance(sampleDatas_SI, data_packet->size_LSN, distances);                                                       // parse the distance
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <dataProcess+0x2e4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	78db      	ldrb	r3, [r3, #3]
 800159a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800159c:	4619      	mov	r1, r3
 800159e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80015a0:	f7ff fd84 	bl	80010ac <parseDistance>
                AngleFirstLevelParse(data_packet->startAngle_FSA, data_packet->endAngle_LSA, data_packet->size_LSN, (double *)angles); // parse the first level angle
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <dataProcess+0x2e4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	b298      	uxth	r0, r3
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <dataProcess+0x2e4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	88db      	ldrh	r3, [r3, #6]
 80015b2:	b299      	uxth	r1, r3
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <dataProcess+0x2e4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	78db      	ldrb	r3, [r3, #3]
 80015ba:	461a      	mov	r2, r3
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	f7ff fda1 	bl	8001104 <AngleFirstLevelParse>
                AngleSecondLevelParse((double *)angles, data_packet->size_LSN, (double *)distances);                                   // parse the second level angle
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <dataProcess+0x2e4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	78db      	ldrb	r3, [r3, #3]
 80015c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ca:	4619      	mov	r1, r3
 80015cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015ce:	f7ff fe03 	bl	80011d8 <AngleSecondLevelParse>
#ifdef YDLIDAR_DEBUG_LEVEL_2
                for (int j = 0; j < data_packet->size_LSN; j++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80015d6:	e02c      	b.n	8001632 <dataProcess+0x326>
 80015d8:	200004f2 	.word	0x200004f2
 80015dc:	08007b68 	.word	0x08007b68
 80015e0:	200004f1 	.word	0x200004f1
 80015e4:	20000220 	.word	0x20000220
 80015e8:	08007b9c 	.word	0x08007b9c
 80015ec:	08007ba4 	.word	0x08007ba4
 80015f0:	200004f8 	.word	0x200004f8
 80015f4:	08007ba8 	.word	0x08007ba8
 80015f8:	08007bc4 	.word	0x08007bc4
 80015fc:	08007be4 	.word	0x08007be4
                {
                    printf("[DEBUG] angles[%02d] : %011.6f => distances[%02d] : %011.6f mm\r\n", j, angles[j], j, distances[j]);
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800161c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001626:	4829      	ldr	r0, [pc, #164]	; (80016cc <dataProcess+0x3c0>)
 8001628:	f004 f8e4 	bl	80057f4 <iprintf>
                for (int j = 0; j < data_packet->size_LSN; j++)
 800162c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800162e:	3301      	adds	r3, #1
 8001630:	64bb      	str	r3, [r7, #72]	; 0x48
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <dataProcess+0x3c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	78db      	ldrb	r3, [r3, #3]
 8001638:	461a      	mov	r2, r3
 800163a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800163c:	4293      	cmp	r3, r2
 800163e:	dbdf      	blt.n	8001600 <dataProcess+0x2f4>
 8001640:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8001644:	e002      	b.n	800164c <dataProcess+0x340>
#endif
            }
#ifdef YDLIDAR_DEBUG_LEVEL_2
            else
            {
                printf("[ERROR] Checksum error!\r\n");
 8001646:	4823      	ldr	r0, [pc, #140]	; (80016d4 <dataProcess+0x3c8>)
 8001648:	f004 f93a 	bl	80058c0 <puts>
            }
#endif
            dataIndex += data_packet->size_LSN * sizeof(uint16_t) + sizeof(ydlidar_data_packet_t);
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <dataProcess+0x3c4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	78db      	ldrb	r3, [r3, #3]
 8001652:	3305      	adds	r3, #5
 8001654:	b29b      	uxth	r3, r3
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800165e:	4413      	add	r3, r2
 8001660:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001664:	46b5      	mov	sp, r6
        {
 8001666:	e004      	b.n	8001672 <dataProcess+0x366>
        }
        else
        {
            dataIndex++;
 8001668:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800166c:	3301      	adds	r3, #1
 800166e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    while (dataIndex < MAX_SCAN_POINTS)
 8001672:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001676:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800167a:	f4ff ae7c 	bcc.w	8001376 <dataProcess+0x6a>
        }
    }
    receiveFlag = false;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <dataProcess+0x3cc>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    // clear the buffer
    memset(scanPoints[PROCESS_SCAN_DATA_INDEX], 0, sizeof(scanPoints[PROCESS_SCAN_DATA_INDEX]));
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <dataProcess+0x3d0>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <dataProcess+0x3d4>)
 8001694:	4413      	add	r3, r2
 8001696:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f004 f9ef 	bl	8005a80 <memset>
    printf("receiveCount = %ld\r\n", receiveCount);
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <dataProcess+0x3d8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	480f      	ldr	r0, [pc, #60]	; (80016e8 <dataProcess+0x3dc>)
 80016aa:	f004 f8a3 	bl	80057f4 <iprintf>
    PROCESS_SCAN_DATA_INDEX = (PROCESS_SCAN_DATA_INDEX + 1) % MAX_SCAN_BUFFER_SIZE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <dataProcess+0x3d0>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	bfb8      	it	lt
 80016bc:	425b      	neglt	r3, r3
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <dataProcess+0x3d0>)
 80016c2:	701a      	strb	r2, [r3, #0]
}
 80016c4:	375c      	adds	r7, #92	; 0x5c
 80016c6:	46bd      	mov	sp, r7
 80016c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016cc:	08007c08 	.word	0x08007c08
 80016d0:	200004f8 	.word	0x200004f8
 80016d4:	08007c4c 	.word	0x08007c4c
 80016d8:	200004f2 	.word	0x200004f2
 80016dc:	200004f1 	.word	0x200004f1
 80016e0:	20000220 	.word	0x20000220
 80016e4:	200004f4 	.word	0x200004f4
 80016e8:	08007c68 	.word	0x08007c68

080016ec <restartScan>:
/**
 * @brief  This function is used to restart the scan
 *
 */
void restartScan(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
    stopScan();
 80016f2:	f7ff fc91 	bl	8001018 <stopScan>
    HAL_Delay(1000);
 80016f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016fa:	f000 fd2b 	bl	8002154 <HAL_Delay>
    ydlidar_device_info_t deviceinfo;
    if (getDeviceInfo(&deviceinfo) == RESULT_OK)
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fc2c 	bl	8000f60 <getDeviceInfo>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d155      	bne.n	80017ba <restartScan+0xce>
    {
        printf("[YDLIDAR INFO] Connection established in [%s]\r\n", deviceinfo.model == YDLIDAR_MODEL_X4 ? "X4" : "NOT MODEL X4");
 800170e:	7a3b      	ldrb	r3, [r7, #8]
 8001710:	2b06      	cmp	r3, #6
 8001712:	d101      	bne.n	8001718 <restartScan+0x2c>
 8001714:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <restartScan+0xdc>)
 8001716:	e000      	b.n	800171a <restartScan+0x2e>
 8001718:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <restartScan+0xe0>)
 800171a:	4619      	mov	r1, r3
 800171c:	482c      	ldr	r0, [pc, #176]	; (80017d0 <restartScan+0xe4>)
 800171e:	f004 f869 	bl	80057f4 <iprintf>
        printf("[YDLIDAR INFO] Firmware version: %d.%d\r\n", deviceinfo.major_firmware_version, deviceinfo.minor_firmware_version);
 8001722:	7a7b      	ldrb	r3, [r7, #9]
 8001724:	4619      	mov	r1, r3
 8001726:	7abb      	ldrb	r3, [r7, #10]
 8001728:	461a      	mov	r2, r3
 800172a:	482a      	ldr	r0, [pc, #168]	; (80017d4 <restartScan+0xe8>)
 800172c:	f004 f862 	bl	80057f4 <iprintf>
        printf("[YDLIDAR INFO] Hardware version: %d\r\n", deviceinfo.hardware_version);
 8001730:	7afb      	ldrb	r3, [r7, #11]
 8001732:	4619      	mov	r1, r3
 8001734:	4828      	ldr	r0, [pc, #160]	; (80017d8 <restartScan+0xec>)
 8001736:	f004 f85d 	bl	80057f4 <iprintf>
        printf("[YDLIDAR INFO] Serial number: ");
 800173a:	4828      	ldr	r0, [pc, #160]	; (80017dc <restartScan+0xf0>)
 800173c:	f004 f85a 	bl	80057f4 <iprintf>
        for (int i = 0; i < 16; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	e00b      	b.n	800175e <restartScan+0x72>
        {
            printf("%x", deviceinfo.serialnum[i]);
 8001746:	f107 020c 	add.w	r2, r7, #12
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	4413      	add	r3, r2
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	4823      	ldr	r0, [pc, #140]	; (80017e0 <restartScan+0xf4>)
 8001754:	f004 f84e 	bl	80057f4 <iprintf>
        for (int i = 0; i < 16; i++)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	3301      	adds	r3, #1
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	ddf0      	ble.n	8001746 <restartScan+0x5a>
        }
        printf("\r\n");
 8001764:	481f      	ldr	r0, [pc, #124]	; (80017e4 <restartScan+0xf8>)
 8001766:	f004 f8ab 	bl	80058c0 <puts>
        ydlidar_device_health_t healthinfo;
        HAL_Delay(1000);
 800176a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800176e:	f000 fcf1 	bl	8002154 <HAL_Delay>
        if (getDeviceHealth(&healthinfo) == RESULT_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fc21 	bl	8000fbc <getDeviceHealth>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d118      	bne.n	80017b2 <restartScan+0xc6>
        {
            printf("[YDLIDAR INFO] YDLIDAR running correctly! The health status: %s\r\n", healthinfo.status == 0 ? "well" : "bad");
 8001780:	793b      	ldrb	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <restartScan+0x9e>
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <restartScan+0xfc>)
 8001788:	e000      	b.n	800178c <restartScan+0xa0>
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <restartScan+0x100>)
 800178c:	4619      	mov	r1, r3
 800178e:	4818      	ldr	r0, [pc, #96]	; (80017f0 <restartScan+0x104>)
 8001790:	f004 f830 	bl	80057f4 <iprintf>
            if (startScan() == RESULT_OK)
 8001794:	f7ff fc47 	bl	8001026 <startScan>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d105      	bne.n	80017aa <restartScan+0xbe>
            {
                startReceiveScanData();
 800179e:	f7ff fd9b 	bl	80012d8 <startReceiveScanData>
                printf("\r\nNow YDLIDAR is scanning ...... \r\n");
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <restartScan+0x108>)
 80017a4:	f004 f88c 	bl	80058c0 <puts>
    }
    else
    {
        printf("YDLIDAR get DeviceInfo Error!!!'\r\n");
    }
}
 80017a8:	e00a      	b.n	80017c0 <restartScan+0xd4>
                printf("start YDLIDAR is failed!  Continue........ \r\n");
 80017aa:	4813      	ldr	r0, [pc, #76]	; (80017f8 <restartScan+0x10c>)
 80017ac:	f004 f888 	bl	80058c0 <puts>
}
 80017b0:	e006      	b.n	80017c0 <restartScan+0xd4>
            printf("cannot retrieve YDLIDAR health\r\n ");
 80017b2:	4812      	ldr	r0, [pc, #72]	; (80017fc <restartScan+0x110>)
 80017b4:	f004 f81e 	bl	80057f4 <iprintf>
}
 80017b8:	e002      	b.n	80017c0 <restartScan+0xd4>
        printf("YDLIDAR get DeviceInfo Error!!!'\r\n");
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <restartScan+0x114>)
 80017bc:	f004 f880 	bl	80058c0 <puts>
}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	08007cdc 	.word	0x08007cdc
 80017cc:	08007ce0 	.word	0x08007ce0
 80017d0:	08007cf0 	.word	0x08007cf0
 80017d4:	08007d20 	.word	0x08007d20
 80017d8:	08007d4c 	.word	0x08007d4c
 80017dc:	08007d74 	.word	0x08007d74
 80017e0:	08007d94 	.word	0x08007d94
 80017e4:	08007ba4 	.word	0x08007ba4
 80017e8:	08007d98 	.word	0x08007d98
 80017ec:	08007da0 	.word	0x08007da0
 80017f0:	08007da4 	.word	0x08007da4
 80017f4:	08007de8 	.word	0x08007de8
 80017f8:	08007e0c 	.word	0x08007e0c
 80017fc:	08007e3c 	.word	0x08007e3c
 8001800:	08007e60 	.word	0x08007e60

08001804 <uartSendCommand>:
extern uint8_t SCAN_CIRCLE_INDEX;
extern uint8_t PROCESS_SCAN_DATA_INDEX;
extern bool receiveFlag;
extern uint32_t receiveCount;
int8_t uartSendCommand(uint8_t *cmd, uint32_t size)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(&huart1, cmd, size, 1000);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b29a      	uxth	r2, r3
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <uartSendCommand+0x24>)
 800181a:	f002 f86c 	bl	80038f6 <HAL_UART_Transmit>
    return 0;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200004fc 	.word	0x200004fc

0800182c <uartReceiveResponse>:

int8_t uartReceiveResponse(uint8_t *data, uint32_t size)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive(&huart1, data, size, 1000);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b29a      	uxth	r2, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <uartReceiveResponse+0x24>)
 8001842:	f002 f8ea 	bl	8003a1a <HAL_UART_Receive>
    return 0;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200004fc 	.word	0x200004fc

08001854 <uartReceiveDataDMA>:
int8_t uartReceiveDataDMA(uint8_t *data, uint32_t size)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive_DMA(&huart1, data, size);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b29b      	uxth	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4804      	ldr	r0, [pc, #16]	; (8001878 <uartReceiveDataDMA+0x24>)
 8001868:	f002 f979 	bl	8003b5e <HAL_UART_Receive_DMA>
    return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200004fc 	.word	0x200004fc

0800187c <HAL_UART_RxCpltCallback>:

// uart callback function

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a18      	ldr	r2, [pc, #96]	; (80018ec <HAL_UART_RxCpltCallback+0x70>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d129      	bne.n	80018e2 <HAL_UART_RxCpltCallback+0x66>
    {
        receiveCount++;
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_UART_RxCpltCallback+0x74>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	4a16      	ldr	r2, [pc, #88]	; (80018f0 <HAL_UART_RxCpltCallback+0x74>)
 8001896:	6013      	str	r3, [r2, #0]
        SCAN_CIRCLE_INDEX = SCAN_CIRCLE_INDEX++ % MAX_SCAN_BUFFER_SIZE;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_UART_RxCpltCallback+0x78>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	b2d1      	uxtb	r1, r2
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <HAL_UART_RxCpltCallback+0x78>)
 80018a2:	7011      	strb	r1, [r2, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_UART_RxCpltCallback+0x78>)
 80018ac:	701a      	strb	r2, [r3, #0]
        if (SCAN_CIRCLE_INDEX == PROCESS_SCAN_DATA_INDEX)
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_UART_RxCpltCallback+0x78>)
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_UART_RxCpltCallback+0x7c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d10e      	bne.n	80018d8 <HAL_UART_RxCpltCallback+0x5c>
        {
            receiveFlag = false;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_UART_RxCpltCallback+0x80>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
            SCAN_CIRCLE_INDEX = (SCAN_CIRCLE_INDEX + MAX_SCAN_BUFFER_SIZE - 1) % MAX_SCAN_BUFFER_SIZE;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_UART_RxCpltCallback+0x78>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	bfb8      	it	lt
 80018ce:	425b      	neglt	r3, r3
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_UART_RxCpltCallback+0x78>)
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e002      	b.n	80018de <HAL_UART_RxCpltCallback+0x62>
        }
        else
        {
            receiveFlag = true;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_UART_RxCpltCallback+0x80>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
        }
        startReceiveScanData();
 80018de:	f7ff fcfb 	bl	80012d8 <startReceiveScanData>
    }
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40011000 	.word	0x40011000
 80018f0:	200004f4 	.word	0x200004f4
 80018f4:	200004f0 	.word	0x200004f0
 80018f8:	200004f1 	.word	0x200004f1
 80018fc:	200004f2 	.word	0x200004f2

08001900 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001904:	f000 fbb4 	bl	8002070 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001908:	f000 f82e 	bl	8001968 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800190c:	f000 f90c 	bl	8001b28 <MX_GPIO_Init>
    MX_DMA_Init();
 8001910:	f000 f8ea 	bl	8001ae8 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8001914:	f000 f8be 	bl	8001a94 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8001918:	f000 f892 	bl	8001a40 <MX_USART1_UART_Init>
//    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
//    __HAL_DMA_DISABLE_IT(&hdma_usart1_tx, DMA_IT_TC);


    /* USER CODE BEGIN 2 */
    ydlidar.func.send_command = uartSendCommand;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <main+0x50>)
 800191e:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <main+0x54>)
 8001920:	601a      	str	r2, [r3, #0]
    ydlidar.func.receive_response = uartReceiveResponse;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <main+0x50>)
 8001924:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <main+0x58>)
 8001926:	605a      	str	r2, [r3, #4]
    ydlidar.func.receive_data_dma = uartReceiveDataDMA;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <main+0x50>)
 800192a:	4a0c      	ldr	r2, [pc, #48]	; (800195c <main+0x5c>)
 800192c:	609a      	str	r2, [r3, #8]
    printf(">>>>>>>>>>>>>>>>>>>YDLIDAR X4 Driver<<<<<<<<<<<<<<<<<<<<<\r\n");
 800192e:	480c      	ldr	r0, [pc, #48]	; (8001960 <main+0x60>)
 8001930:	f003 ffc6 	bl	80058c0 <puts>
    restartScan();
 8001934:	f7ff feda 	bl	80016ec <restartScan>
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        dataProcess();
 8001938:	f7ff fce8 	bl	800130c <dataProcess>
        // led toggle
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800193c:	2120      	movs	r1, #32
 800193e:	4809      	ldr	r0, [pc, #36]	; (8001964 <main+0x64>)
 8001940:	f001 facd 	bl	8002ede <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8001944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001948:	f000 fc04 	bl	8002154 <HAL_Delay>
        dataProcess();
 800194c:	e7f4      	b.n	8001938 <main+0x38>
 800194e:	bf00      	nop
 8001950:	200001f0 	.word	0x200001f0
 8001954:	08001805 	.word	0x08001805
 8001958:	0800182d 	.word	0x0800182d
 800195c:	08001855 	.word	0x08001855
 8001960:	08007e84 	.word	0x08007e84
 8001964:	40020000 	.word	0x40020000

08001968 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	2234      	movs	r2, #52	; 0x34
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f004 f882 	bl	8005a80 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <SystemClock_Config+0xd0>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <SystemClock_Config+0xd0>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <SystemClock_Config+0xd0>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a8:	2300      	movs	r3, #0
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <SystemClock_Config+0xd4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <SystemClock_Config+0xd4>)
 80019b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <SystemClock_Config+0xd4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c4:	2302      	movs	r3, #2
 80019c6:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019cc:	2310      	movs	r3, #16
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d0:	2302      	movs	r3, #2
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 80019d8:	2310      	movs	r3, #16
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 80019dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019e0:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019e2:	2304      	movs	r3, #4
 80019e4:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80019e6:	2304      	movs	r3, #4
 80019e8:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80019ea:	2302      	movs	r3, #2
 80019ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fcae 	bl	8003354 <HAL_RCC_OscConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0x9a>
    {
        Error_Handler();
 80019fe:	f000 f901 	bl	8001c04 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a02:	230f      	movs	r3, #15
 8001a04:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a06:	2302      	movs	r3, #2
 8001a08:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a12:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 fa78 	bl	8002f14 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0xc6>
    {
        Error_Handler();
 8001a2a:	f000 f8eb 	bl	8001c04 <Error_Handler>
    }
}
 8001a2e:	bf00      	nop
 8001a30:	3750      	adds	r7, #80	; 0x50
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <MX_USART1_UART_Init+0x50>)
 8001a48:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 128000;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a4c:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8001a50:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_USART1_UART_Init+0x4c>)
 8001a78:	f001 fef0 	bl	800385c <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8001a82:	f000 f8bf 	bl	8001c04 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200004fc 	.word	0x200004fc
 8001a90:	40011000 	.word	0x40011000

08001a94 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_USART2_UART_Init+0x50>)
 8001a9c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001acc:	f001 fec6 	bl	800385c <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8001ad6:	f000 f895 	bl	8001c04 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000540 	.word	0x20000540
 8001ae4:	40004400 	.word	0x40004400

08001ae8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_DMA_Init+0x3c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <MX_DMA_Init+0x3c>)
 8001af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_DMA_Init+0x3c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	203a      	movs	r0, #58	; 0x3a
 8001b10:	f000 fc1f 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b14:	203a      	movs	r0, #58	; 0x3a
 8001b16:	f000 fc38 	bl	800238a <HAL_NVIC_EnableIRQ>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_GPIO_Init+0xd0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	4812      	ldr	r0, [pc, #72]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001bb4:	f001 f97a 	bl	8002eac <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bbe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480c      	ldr	r0, [pc, #48]	; (8001c00 <MX_GPIO_Init+0xd8>)
 8001bd0:	f000 fff8 	bl	8002bc4 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001bec:	f000 ffea 	bl	8002bc4 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020800 	.word	0x40020800

08001c04 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001c0c:	e7fe      	b.n	8001c0c <Error_Handler+0x8>
	...

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c4e:	2007      	movs	r0, #7
 8001c50:	f000 fb74 	bl	800233c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <HAL_UART_MspInit+0x154>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d163      	bne.n	8001d4a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b49      	ldr	r3, [pc, #292]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a44      	ldr	r2, [pc, #272]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ccc:	2307      	movs	r3, #7
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4839      	ldr	r0, [pc, #228]	; (8001dbc <HAL_UART_MspInit+0x15c>)
 8001cd8:	f000 ff74 	bl	8002bc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001cdc:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001cde:	4a39      	ldr	r2, [pc, #228]	; (8001dc4 <HAL_UART_MspInit+0x164>)
 8001ce0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ce2:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001ce4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cea:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf0:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf6:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cfe:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d04:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d16:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d1c:	4828      	ldr	r0, [pc, #160]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001d1e:	f000 fb4f 	bl	80023c0 <HAL_DMA_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001d28:	f7ff ff6c 	bl	8001c04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
 8001d32:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <HAL_UART_MspInit+0x160>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2025      	movs	r0, #37	; 0x25
 8001d3e:	f000 fb08 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d42:	2025      	movs	r0, #37	; 0x25
 8001d44:	f000 fb21 	bl	800238a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d48:	e030      	b.n	8001dac <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_UART_MspInit+0x168>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d12b      	bne.n	8001dac <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d62:	6413      	str	r3, [r2, #64]	; 0x40
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_UART_MspInit+0x158>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_UART_MspInit+0x15c>)
 8001da8:	f000 ff0c 	bl	8002bc4 <HAL_GPIO_Init>
}
 8001dac:	bf00      	nop
 8001dae:	3730      	adds	r7, #48	; 0x30
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	20000584 	.word	0x20000584
 8001dc4:	40026440 	.word	0x40026440
 8001dc8:	40004400 	.word	0x40004400

08001dcc <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART2 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001dd4:	1d39      	adds	r1, r7, #4
 8001dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <__io_putchar+0x20>)
 8001dde:	f001 fd8a 	bl	80038f6 <HAL_UART_Transmit>

    return ch;
 8001de2:	687b      	ldr	r3, [r7, #4]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000540 	.word	0x20000540

08001df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <NMI_Handler+0x4>

08001df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <HardFault_Handler+0x4>

08001dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <MemManage_Handler+0x4>

08001e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <BusFault_Handler+0x4>

08001e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <UsageFault_Handler+0x4>

08001e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3c:	f000 f96a 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <USART1_IRQHandler+0x10>)
 8001e4a:	f001 feb9 	bl	8003bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200004fc 	.word	0x200004fc

08001e58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <DMA2_Stream2_IRQHandler+0x10>)
 8001e5e:	f000 fc47 	bl	80026f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000584 	.word	0x20000584

08001e6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return 1;
 8001e70:	2301      	movs	r3, #1
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_kill>:

int _kill(int pid, int sig)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e86:	f003 fe4d 	bl	8005b24 <__errno>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2216      	movs	r2, #22
 8001e8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_exit>:

void _exit (int status)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ffe7 	bl	8001e7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eae:	e7fe      	b.n	8001eae <_exit+0x12>

08001eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e00a      	b.n	8001ed8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec2:	f3af 8000 	nop.w
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60ba      	str	r2, [r7, #8]
 8001ece:	b2ca      	uxtb	r2, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbf0      	blt.n	8001ec2 <_read+0x12>
  }

  return len;
 8001ee0:	687b      	ldr	r3, [r7, #4]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e009      	b.n	8001f10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff61 	bl	8001dcc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dbf1      	blt.n	8001efc <_write+0x12>
  }
  return len;
 8001f18:	687b      	ldr	r3, [r7, #4]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_close>:

int _close(int file)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_isatty>:

int _isatty(int file)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f94:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <_sbrk+0x5c>)
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <_sbrk+0x60>)
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <_sbrk+0x64>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <_sbrk+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d207      	bcs.n	8001fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fbc:	f003 fdb2 	bl	8005b24 <__errno>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e009      	b.n	8001fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <_sbrk+0x64>)
 8001fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fde:	68fb      	ldr	r3, [r7, #12]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20008000 	.word	0x20008000
 8001fec:	00000400 	.word	0x00000400
 8001ff0:	200005e4 	.word	0x200005e4
 8001ff4:	20000738 	.word	0x20000738

08001ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <SystemInit+0x20>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <SystemInit+0x20>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002022:	490e      	ldr	r1, [pc, #56]	; (800205c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002024:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002038:	4c0b      	ldr	r4, [pc, #44]	; (8002068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002046:	f7ff ffd7 	bl	8001ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204a:	f003 fd71 	bl	8005b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204e:	f7ff fc57 	bl	8001900 <main>
  bx  lr    
 8002052:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002054:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002060:	080082a8 	.word	0x080082a8
  ldr r2, =_sbss
 8002064:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002068:	20000738 	.word	0x20000738

0800206c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC_IRQHandler>
	...

08002070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_Init+0x40>)
 800207a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <HAL_Init+0x40>)
 8002086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_Init+0x40>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f000 f94f 	bl	800233c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 f808 	bl	80020b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a4:	f7ff fdb4 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023c00 	.word	0x40023c00

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_InitTick+0x54>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x58>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f967 	bl	80023a6 <HAL_SYSTICK_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00e      	b.n	8002100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d80a      	bhi.n	80020fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f000 f92f 	bl	8002352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_InitTick+0x5c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000000 	.word	0x20000000
 800210c:	20000008 	.word	0x20000008
 8002110:	20000004 	.word	0x20000004

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_IncTick+0x20>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_IncTick+0x24>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000008 	.word	0x20000008
 8002138:	200005e8 	.word	0x200005e8

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	200005e8 	.word	0x200005e8

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff ffee 	bl	800213c <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffde 	bl	800213c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008

0800219c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ce:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <__NVIC_GetPriorityGrouping+0x18>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 0307 	and.w	r3, r3, #7
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db0b      	blt.n	800222a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f003 021f 	and.w	r2, r3, #31
 8002218:	4907      	ldr	r1, [pc, #28]	; (8002238 <__NVIC_EnableIRQ+0x38>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2001      	movs	r0, #1
 8002222:	fa00 f202 	lsl.w	r2, r0, r2
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000e100 	.word	0xe000e100

0800223c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db0a      	blt.n	8002266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	490c      	ldr	r1, [pc, #48]	; (8002288 <__NVIC_SetPriority+0x4c>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	0112      	lsls	r2, r2, #4
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	440b      	add	r3, r1
 8002260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002264:	e00a      	b.n	800227c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4908      	ldr	r1, [pc, #32]	; (800228c <__NVIC_SetPriority+0x50>)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	3b04      	subs	r3, #4
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	440b      	add	r3, r1
 800227a:	761a      	strb	r2, [r3, #24]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000e100 	.word	0xe000e100
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f1c3 0307 	rsb	r3, r3, #7
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	bf28      	it	cs
 80022ae:	2304      	movcs	r3, #4
 80022b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d902      	bls.n	80022c0 <NVIC_EncodePriority+0x30>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3b03      	subs	r3, #3
 80022be:	e000      	b.n	80022c2 <NVIC_EncodePriority+0x32>
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	401a      	ands	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	43d9      	mvns	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	4313      	orrs	r3, r2
         );
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	; 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002308:	d301      	bcc.n	800230e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230a:	2301      	movs	r3, #1
 800230c:	e00f      	b.n	800232e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <SysTick_Config+0x40>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002316:	210f      	movs	r1, #15
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f7ff ff8e 	bl	800223c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <SysTick_Config+0x40>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002326:	4b04      	ldr	r3, [pc, #16]	; (8002338 <SysTick_Config+0x40>)
 8002328:	2207      	movs	r2, #7
 800232a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	e000e010 	.word	0xe000e010

0800233c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff29 	bl	800219c <__NVIC_SetPriorityGrouping>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002364:	f7ff ff3e 	bl	80021e4 <__NVIC_GetPriorityGrouping>
 8002368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff ff8e 	bl	8002290 <NVIC_EncodePriority>
 8002374:	4602      	mov	r2, r0
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff5d 	bl	800223c <__NVIC_SetPriority>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff31 	bl	8002200 <__NVIC_EnableIRQ>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffa2 	bl	80022f8 <SysTick_Config>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff feb6 	bl	800213c <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e099      	b.n	8002510 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fc:	e00f      	b.n	800241e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023fe:	f7ff fe9d 	bl	800213c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b05      	cmp	r3, #5
 800240a:	d908      	bls.n	800241e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2203      	movs	r2, #3
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e078      	b.n	8002510 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1e8      	bne.n	80023fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_DMA_Init+0x158>)
 8002438:	4013      	ands	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2b04      	cmp	r3, #4
 8002476:	d107      	bne.n	8002488 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4313      	orrs	r3, r2
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f023 0307 	bic.w	r3, r3, #7
 800249e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d117      	bne.n	80024e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00e      	beq.n	80024e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fb01 	bl	8002acc <DMA_CheckFifoParam>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024de:	2301      	movs	r3, #1
 80024e0:	e016      	b.n	8002510 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fab8 	bl	8002a60 <DMA_CalcBaseAndBitshift>
 80024f0:	4603      	mov	r3, r0
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	223f      	movs	r2, #63	; 0x3f
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	f010803f 	.word	0xf010803f

0800251c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_DMA_Start_IT+0x26>
 800253e:	2302      	movs	r3, #2
 8002540:	e040      	b.n	80025c4 <HAL_DMA_Start_IT+0xa8>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d12f      	bne.n	80025b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fa4a 	bl	8002a04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	223f      	movs	r2, #63	; 0x3f
 8002576:	409a      	lsls	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0216 	orr.w	r2, r2, #22
 800258a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0208 	orr.w	r2, r2, #8
 80025a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e005      	b.n	80025c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025be:	2302      	movs	r3, #2
 80025c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025da:	f7ff fdaf 	bl	800213c <HAL_GetTick>
 80025de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d008      	beq.n	80025fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2280      	movs	r2, #128	; 0x80
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e052      	b.n	80026a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0216 	bic.w	r2, r2, #22
 800260c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <HAL_DMA_Abort+0x62>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0208 	bic.w	r2, r2, #8
 800263c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264e:	e013      	b.n	8002678 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002650:	f7ff fd74 	bl	800213c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b05      	cmp	r3, #5
 800265c:	d90c      	bls.n	8002678 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2203      	movs	r2, #3
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e015      	b.n	80026a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e4      	bne.n	8002650 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	223f      	movs	r2, #63	; 0x3f
 800268c:	409a      	lsls	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d004      	beq.n	80026ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00c      	b.n	80026e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2205      	movs	r2, #5
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026fc:	4b8e      	ldr	r3, [pc, #568]	; (8002938 <HAL_DMA_IRQHandler+0x248>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a8e      	ldr	r2, [pc, #568]	; (800293c <HAL_DMA_IRQHandler+0x24c>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0a9b      	lsrs	r3, r3, #10
 8002708:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2208      	movs	r2, #8
 800271c:	409a      	lsls	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01a      	beq.n	800275c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0204 	bic.w	r2, r2, #4
 8002742:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2208      	movs	r2, #8
 800274a:	409a      	lsls	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	2201      	movs	r2, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d012      	beq.n	8002792 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00b      	beq.n	8002792 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	2201      	movs	r2, #1
 8002780:	409a      	lsls	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f043 0202 	orr.w	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	2204      	movs	r2, #4
 8002798:	409a      	lsls	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d012      	beq.n	80027c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	2204      	movs	r2, #4
 80027b6:	409a      	lsls	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	2210      	movs	r2, #16
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d043      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d03c      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	2210      	movs	r2, #16
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d018      	beq.n	8002832 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d108      	bne.n	8002820 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d024      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
 800281e:	e01f      	b.n	8002860 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01b      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
 8002830:	e016      	b.n	8002860 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0208 	bic.w	r2, r2, #8
 800284e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2220      	movs	r2, #32
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 808f 	beq.w	8002990 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8087 	beq.w	8002990 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	2220      	movs	r2, #32
 8002888:	409a      	lsls	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b05      	cmp	r3, #5
 8002898:	d136      	bne.n	8002908 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0216 	bic.w	r2, r2, #22
 80028a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <HAL_DMA_IRQHandler+0x1da>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0208 	bic.w	r2, r2, #8
 80028d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	223f      	movs	r2, #63	; 0x3f
 80028e0:	409a      	lsls	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d07e      	beq.n	80029fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
        }
        return;
 8002906:	e079      	b.n	80029fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01d      	beq.n	8002952 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10d      	bne.n	8002940 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	2b00      	cmp	r3, #0
 800292a:	d031      	beq.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
 8002934:	e02c      	b.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000
 800293c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d023      	beq.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
 8002950:	e01e      	b.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10f      	bne.n	8002980 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0210 	bic.w	r2, r2, #16
 800296e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	2b00      	cmp	r3, #0
 8002996:	d032      	beq.n	80029fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2205      	movs	r2, #5
 80029a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	3301      	adds	r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d307      	bcc.n	80029d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f2      	bne.n	80029bc <HAL_DMA_IRQHandler+0x2cc>
 80029d6:	e000      	b.n	80029da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
 80029fa:	e000      	b.n	80029fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80029fc:	bf00      	nop
    }
  }
}
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b40      	cmp	r3, #64	; 0x40
 8002a30:	d108      	bne.n	8002a44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a42:	e007      	b.n	8002a54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	60da      	str	r2, [r3, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	3b10      	subs	r3, #16
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <DMA_CalcBaseAndBitshift+0x64>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a7a:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <DMA_CalcBaseAndBitshift+0x68>)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d909      	bls.n	8002aa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a96:	f023 0303 	bic.w	r3, r3, #3
 8002a9a:	1d1a      	adds	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002aa0:	e007      	b.n	8002ab2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	aaaaaaab 	.word	0xaaaaaaab
 8002ac8:	08007ed8 	.word	0x08007ed8

08002acc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11f      	bne.n	8002b26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d856      	bhi.n	8002b9a <DMA_CheckFifoParam+0xce>
 8002aec:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <DMA_CheckFifoParam+0x28>)
 8002aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af2:	bf00      	nop
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002b17 	.word	0x08002b17
 8002afc:	08002b05 	.word	0x08002b05
 8002b00:	08002b9b 	.word	0x08002b9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d046      	beq.n	8002b9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b14:	e043      	b.n	8002b9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b1e:	d140      	bne.n	8002ba2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b24:	e03d      	b.n	8002ba2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2e:	d121      	bne.n	8002b74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d837      	bhi.n	8002ba6 <DMA_CheckFifoParam+0xda>
 8002b36:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <DMA_CheckFifoParam+0x70>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002b4d 	.word	0x08002b4d
 8002b40:	08002b53 	.word	0x08002b53
 8002b44:	08002b4d 	.word	0x08002b4d
 8002b48:	08002b65 	.word	0x08002b65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b50:	e030      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d025      	beq.n	8002baa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b62:	e022      	b.n	8002baa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b6c:	d11f      	bne.n	8002bae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b72:	e01c      	b.n	8002bae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d903      	bls.n	8002b82 <DMA_CheckFifoParam+0xb6>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d003      	beq.n	8002b88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b80:	e018      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
      break;
 8002b86:	e015      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00e      	beq.n	8002bb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      break;
 8002b98:	e00b      	b.n	8002bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e00a      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e008      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e006      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e004      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e002      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bae:	bf00      	nop
 8002bb0:	e000      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb2:	bf00      	nop
    }
  } 
  
  return status; 
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop

08002bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	e14d      	b.n	8002e7c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be0:	2201      	movs	r2, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	f040 813c 	bne.w	8002e76 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d005      	beq.n	8002c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d130      	bne.n	8002c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 0201 	and.w	r2, r3, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d017      	beq.n	8002cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d123      	bne.n	8002d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	08da      	lsrs	r2, r3, #3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3208      	adds	r2, #8
 8002cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	220f      	movs	r2, #15
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	08da      	lsrs	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3208      	adds	r2, #8
 8002d02:	69b9      	ldr	r1, [r7, #24]
 8002d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0203 	and.w	r2, r3, #3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8096 	beq.w	8002e76 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b51      	ldr	r3, [pc, #324]	; (8002e94 <HAL_GPIO_Init+0x2d0>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a50      	ldr	r2, [pc, #320]	; (8002e94 <HAL_GPIO_Init+0x2d0>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b4e      	ldr	r3, [pc, #312]	; (8002e94 <HAL_GPIO_Init+0x2d0>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d66:	4a4c      	ldr	r2, [pc, #304]	; (8002e98 <HAL_GPIO_Init+0x2d4>)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a43      	ldr	r2, [pc, #268]	; (8002e9c <HAL_GPIO_Init+0x2d8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00d      	beq.n	8002dae <HAL_GPIO_Init+0x1ea>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a42      	ldr	r2, [pc, #264]	; (8002ea0 <HAL_GPIO_Init+0x2dc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d007      	beq.n	8002daa <HAL_GPIO_Init+0x1e6>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a41      	ldr	r2, [pc, #260]	; (8002ea4 <HAL_GPIO_Init+0x2e0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d101      	bne.n	8002da6 <HAL_GPIO_Init+0x1e2>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e004      	b.n	8002db0 <HAL_GPIO_Init+0x1ec>
 8002da6:	2307      	movs	r3, #7
 8002da8:	e002      	b.n	8002db0 <HAL_GPIO_Init+0x1ec>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_GPIO_Init+0x1ec>
 8002dae:	2300      	movs	r3, #0
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	f002 0203 	and.w	r2, r2, #3
 8002db6:	0092      	lsls	r2, r2, #2
 8002db8:	4093      	lsls	r3, r2
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc0:	4935      	ldr	r1, [pc, #212]	; (8002e98 <HAL_GPIO_Init+0x2d4>)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dce:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <HAL_GPIO_Init+0x2e4>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002df2:	4a2d      	ldr	r2, [pc, #180]	; (8002ea8 <HAL_GPIO_Init+0x2e4>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_GPIO_Init+0x2e4>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e1c:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <HAL_GPIO_Init+0x2e4>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_GPIO_Init+0x2e4>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e46:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <HAL_GPIO_Init+0x2e4>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_GPIO_Init+0x2e4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <HAL_GPIO_Init+0x2e4>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b0f      	cmp	r3, #15
 8002e80:	f67f aeae 	bls.w	8002be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3724      	adds	r7, #36	; 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	40020400 	.word	0x40020400
 8002ea4:	40020800 	.word	0x40020800
 8002ea8:	40013c00 	.word	0x40013c00

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec8:	e003      	b.n	8002ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	041a      	lsls	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	619a      	str	r2, [r3, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	400b      	ands	r3, r1
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	619a      	str	r2, [r3, #24]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0cc      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b68      	ldr	r3, [pc, #416]	; (80030cc <HAL_RCC_ClockConfig+0x1b8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d90c      	bls.n	8002f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b65      	ldr	r3, [pc, #404]	; (80030cc <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b63      	ldr	r3, [pc, #396]	; (80030cc <HAL_RCC_ClockConfig+0x1b8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0b8      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f68:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a58      	ldr	r2, [pc, #352]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f80:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a52      	ldr	r2, [pc, #328]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	494d      	ldr	r1, [pc, #308]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d044      	beq.n	8003034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d119      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e07f      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e06f      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe2:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e067      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff2:	4b37      	ldr	r3, [pc, #220]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4934      	ldr	r1, [pc, #208]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003004:	f7ff f89a 	bl	800213c <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7ff f896 	bl	800213c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e04f      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 020c 	and.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	429a      	cmp	r2, r3
 8003032:	d1eb      	bne.n	800300c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003034:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_RCC_ClockConfig+0x1b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d20c      	bcs.n	800305c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b22      	ldr	r3, [pc, #136]	; (80030cc <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e032      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4916      	ldr	r1, [pc, #88]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	490e      	ldr	r1, [pc, #56]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800309a:	f000 f821 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	490a      	ldr	r1, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	5ccb      	ldrb	r3, [r1, r3]
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fffa 	bl	80020b4 <HAL_InitTick>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023c00 	.word	0x40023c00
 80030d0:	40023800 	.word	0x40023800
 80030d4:	08007ec0 	.word	0x08007ec0
 80030d8:	20000000 	.word	0x20000000
 80030dc:	20000004 	.word	0x20000004

080030e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e4:	b094      	sub	sp, #80	; 0x50
 80030e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	647b      	str	r3, [r7, #68]	; 0x44
 80030ec:	2300      	movs	r3, #0
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f0:	2300      	movs	r3, #0
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f8:	4b79      	ldr	r3, [pc, #484]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b08      	cmp	r3, #8
 8003102:	d00d      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x40>
 8003104:	2b08      	cmp	r3, #8
 8003106:	f200 80e1 	bhi.w	80032cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x34>
 800310e:	2b04      	cmp	r3, #4
 8003110:	d003      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0x3a>
 8003112:	e0db      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003114:	4b73      	ldr	r3, [pc, #460]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003116:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003118:	e0db      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311a:	4b73      	ldr	r3, [pc, #460]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800311c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800311e:	e0d8      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003120:	4b6f      	ldr	r3, [pc, #444]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003128:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312a:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003136:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	099b      	lsrs	r3, r3, #6
 800313c:	2200      	movs	r2, #0
 800313e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003140:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003148:	633b      	str	r3, [r7, #48]	; 0x30
 800314a:	2300      	movs	r3, #0
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
 800314e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003152:	4622      	mov	r2, r4
 8003154:	462b      	mov	r3, r5
 8003156:	f04f 0000 	mov.w	r0, #0
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	0159      	lsls	r1, r3, #5
 8003160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003164:	0150      	lsls	r0, r2, #5
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4621      	mov	r1, r4
 800316c:	1a51      	subs	r1, r2, r1
 800316e:	6139      	str	r1, [r7, #16]
 8003170:	4629      	mov	r1, r5
 8003172:	eb63 0301 	sbc.w	r3, r3, r1
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003184:	4659      	mov	r1, fp
 8003186:	018b      	lsls	r3, r1, #6
 8003188:	4651      	mov	r1, sl
 800318a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800318e:	4651      	mov	r1, sl
 8003190:	018a      	lsls	r2, r1, #6
 8003192:	4651      	mov	r1, sl
 8003194:	ebb2 0801 	subs.w	r8, r2, r1
 8003198:	4659      	mov	r1, fp
 800319a:	eb63 0901 	sbc.w	r9, r3, r1
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b2:	4690      	mov	r8, r2
 80031b4:	4699      	mov	r9, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	eb18 0303 	adds.w	r3, r8, r3
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	462b      	mov	r3, r5
 80031c0:	eb49 0303 	adc.w	r3, r9, r3
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031d2:	4629      	mov	r1, r5
 80031d4:	024b      	lsls	r3, r1, #9
 80031d6:	4621      	mov	r1, r4
 80031d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031dc:	4621      	mov	r1, r4
 80031de:	024a      	lsls	r2, r1, #9
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e6:	2200      	movs	r2, #0
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031f0:	f7fd fcfa 	bl	8000be8 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4613      	mov	r3, r2
 80031fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031fc:	e058      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fe:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	099b      	lsrs	r3, r3, #6
 8003204:	2200      	movs	r2, #0
 8003206:	4618      	mov	r0, r3
 8003208:	4611      	mov	r1, r2
 800320a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
 8003214:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003218:	4642      	mov	r2, r8
 800321a:	464b      	mov	r3, r9
 800321c:	f04f 0000 	mov.w	r0, #0
 8003220:	f04f 0100 	mov.w	r1, #0
 8003224:	0159      	lsls	r1, r3, #5
 8003226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322a:	0150      	lsls	r0, r2, #5
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4641      	mov	r1, r8
 8003232:	ebb2 0a01 	subs.w	sl, r2, r1
 8003236:	4649      	mov	r1, r9
 8003238:	eb63 0b01 	sbc.w	fp, r3, r1
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003248:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800324c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003250:	ebb2 040a 	subs.w	r4, r2, sl
 8003254:	eb63 050b 	sbc.w	r5, r3, fp
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	00eb      	lsls	r3, r5, #3
 8003262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003266:	00e2      	lsls	r2, r4, #3
 8003268:	4614      	mov	r4, r2
 800326a:	461d      	mov	r5, r3
 800326c:	4643      	mov	r3, r8
 800326e:	18e3      	adds	r3, r4, r3
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	464b      	mov	r3, r9
 8003274:	eb45 0303 	adc.w	r3, r5, r3
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003286:	4629      	mov	r1, r5
 8003288:	028b      	lsls	r3, r1, #10
 800328a:	4621      	mov	r1, r4
 800328c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003290:	4621      	mov	r1, r4
 8003292:	028a      	lsls	r2, r1, #10
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329a:	2200      	movs	r2, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	61fa      	str	r2, [r7, #28]
 80032a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a4:	f7fd fca0 	bl	8000be8 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	3301      	adds	r3, #1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ca:	e002      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3750      	adds	r7, #80	; 0x50
 80032d8:	46bd      	mov	sp, r7
 80032da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	00f42400 	.word	0x00f42400
 80032e8:	007a1200 	.word	0x007a1200

080032ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000000 	.word	0x20000000

08003304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003308:	f7ff fff0 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 800330c:	4602      	mov	r2, r0
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	0a9b      	lsrs	r3, r3, #10
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	4903      	ldr	r1, [pc, #12]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800331a:	5ccb      	ldrb	r3, [r1, r3]
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40023800 	.word	0x40023800
 8003328:	08007ed0 	.word	0x08007ed0

0800332c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003330:	f7ff ffdc 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	0b5b      	lsrs	r3, r3, #13
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	; (8003350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40023800 	.word	0x40023800
 8003350:	08007ed0 	.word	0x08007ed0

08003354 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e273      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d075      	beq.n	800345e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b04      	cmp	r3, #4
 800337c:	d00c      	beq.n	8003398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b85      	ldr	r3, [pc, #532]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003386:	2b08      	cmp	r3, #8
 8003388:	d112      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338a:	4b82      	ldr	r3, [pc, #520]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003396:	d10b      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	4b7e      	ldr	r3, [pc, #504]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05b      	beq.n	800345c <HAL_RCC_OscConfig+0x108>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d157      	bne.n	800345c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e24e      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d106      	bne.n	80033c8 <HAL_RCC_OscConfig+0x74>
 80033ba:	4b76      	ldr	r3, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a75      	ldr	r2, [pc, #468]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xb0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x98>
 80033d2:	4b70      	ldr	r3, [pc, #448]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6f      	ldr	r2, [pc, #444]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b6d      	ldr	r3, [pc, #436]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6c      	ldr	r2, [pc, #432]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xb0>
 80033ec:	4b69      	ldr	r3, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a68      	ldr	r2, [pc, #416]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b66      	ldr	r3, [pc, #408]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a65      	ldr	r2, [pc, #404]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe fe96 	bl	800213c <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fe92 	bl	800213c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e213      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xc0>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe fe82 	bl	800213c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe fe7e 	bl	800213c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1ff      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	4b51      	ldr	r3, [pc, #324]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0xe8>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800346a:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800347e:	2b08      	cmp	r3, #8
 8003480:	d11c      	bne.n	80034bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003482:	4b44      	ldr	r3, [pc, #272]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_RCC_OscConfig+0x152>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e1d3      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a6:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4937      	ldr	r1, [pc, #220]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	e03a      	b.n	8003532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	4b34      	ldr	r3, [pc, #208]	; (8003598 <HAL_RCC_OscConfig+0x244>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fe fe37 	bl	800213c <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d2:	f7fe fe33 	bl	800213c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e1b4      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f0:	4b28      	ldr	r3, [pc, #160]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4925      	ldr	r1, [pc, #148]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	e015      	b.n	8003532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003506:	4b24      	ldr	r3, [pc, #144]	; (8003598 <HAL_RCC_OscConfig+0x244>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe fe16 	bl	800213c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003514:	f7fe fe12 	bl	800213c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e193      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d036      	beq.n	80035ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d016      	beq.n	8003574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_RCC_OscConfig+0x248>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fe fdf6 	bl	800213c <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003554:	f7fe fdf2 	bl	800213c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e173      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_RCC_OscConfig+0x240>)
 8003568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x200>
 8003572:	e01b      	b.n	80035ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_OscConfig+0x248>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fe fddf 	bl	800213c <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	e00e      	b.n	80035a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003582:	f7fe fddb 	bl	800213c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d907      	bls.n	80035a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e15c      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
 8003594:	40023800 	.word	0x40023800
 8003598:	42470000 	.word	0x42470000
 800359c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	4b8a      	ldr	r3, [pc, #552]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80035a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ea      	bne.n	8003582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8097 	beq.w	80036e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035be:	4b83      	ldr	r3, [pc, #524]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10f      	bne.n	80035ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	4b7f      	ldr	r3, [pc, #508]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a7e      	ldr	r2, [pc, #504]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b7c      	ldr	r3, [pc, #496]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <HAL_RCC_OscConfig+0x47c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d118      	bne.n	8003628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f6:	4b76      	ldr	r3, [pc, #472]	; (80037d0 <HAL_RCC_OscConfig+0x47c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a75      	ldr	r2, [pc, #468]	; (80037d0 <HAL_RCC_OscConfig+0x47c>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003602:	f7fe fd9b 	bl	800213c <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360a:	f7fe fd97 	bl	800213c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e118      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	4b6c      	ldr	r3, [pc, #432]	; (80037d0 <HAL_RCC_OscConfig+0x47c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x2ea>
 8003630:	4b66      	ldr	r3, [pc, #408]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a65      	ldr	r2, [pc, #404]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
 800363c:	e01c      	b.n	8003678 <HAL_RCC_OscConfig+0x324>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b05      	cmp	r3, #5
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x30c>
 8003646:	4b61      	ldr	r3, [pc, #388]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a60      	ldr	r2, [pc, #384]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
 8003652:	4b5e      	ldr	r3, [pc, #376]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	4a5d      	ldr	r2, [pc, #372]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6713      	str	r3, [r2, #112]	; 0x70
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0x324>
 8003660:	4b5a      	ldr	r3, [pc, #360]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4a59      	ldr	r2, [pc, #356]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	; 0x70
 800366c:	4b57      	ldr	r3, [pc, #348]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	4a56      	ldr	r2, [pc, #344]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fe fd5c 	bl	800213c <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7fe fd58 	bl	800213c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0d7      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	4b4b      	ldr	r3, [pc, #300]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ee      	beq.n	8003688 <HAL_RCC_OscConfig+0x334>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fe fd46 	bl	800213c <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7fe fd42 	bl	800213c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0c1      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ca:	4b40      	ldr	r3, [pc, #256]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ee      	bne.n	80036b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036dc:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	4a3a      	ldr	r2, [pc, #232]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80036e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80ad 	beq.w	800384c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f2:	4b36      	ldr	r3, [pc, #216]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d060      	beq.n	80037c0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d145      	bne.n	8003792 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b33      	ldr	r3, [pc, #204]	; (80037d4 <HAL_RCC_OscConfig+0x480>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe fd16 	bl	800213c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fd12 	bl	800213c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e093      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	019b      	lsls	r3, r3, #6
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	3b01      	subs	r3, #1
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	071b      	lsls	r3, r3, #28
 800375e:	491b      	ldr	r1, [pc, #108]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <HAL_RCC_OscConfig+0x480>)
 8003766:	2201      	movs	r2, #1
 8003768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fe fce7 	bl	800213c <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003772:	f7fe fce3 	bl	800213c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e064      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x41e>
 8003790:	e05c      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_RCC_OscConfig+0x480>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe fcd0 	bl	800213c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe fccc 	bl	800213c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04d      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_OscConfig+0x478>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x44c>
 80037be:	e045      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e040      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40007000 	.word	0x40007000
 80037d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037d8:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d030      	beq.n	8003848 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d129      	bne.n	8003848 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d122      	bne.n	8003848 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800380e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003810:	4293      	cmp	r3, r2
 8003812:	d119      	bne.n	8003848 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	3b01      	subs	r3, #1
 8003822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d10f      	bne.n	8003848 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800

0800385c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e03f      	b.n	80038ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fe f9ec 	bl	8001c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800389e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f001 f80b 	bl	80048bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08a      	sub	sp, #40	; 0x28
 80038fa:	af02      	add	r7, sp, #8
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d17c      	bne.n	8003a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_Transmit+0x2c>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e075      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_UART_Transmit+0x3e>
 8003930:	2302      	movs	r3, #2
 8003932:	e06e      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2221      	movs	r2, #33	; 0x21
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800394a:	f7fe fbf7 	bl	800213c <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	d108      	bne.n	8003978 <HAL_UART_Transmit+0x82>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e003      	b.n	8003980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003988:	e02a      	b.n	80039e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fcc3 	bl	8004320 <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e036      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3302      	adds	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	e007      	b.n	80039d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1cf      	bne.n	800398a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2140      	movs	r1, #64	; 0x40
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fc93 	bl	8004320 <UART_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e006      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e000      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
  }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b08a      	sub	sp, #40	; 0x28
 8003a1e:	af02      	add	r7, sp, #8
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	f040 808c 	bne.w	8003b54 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_UART_Receive+0x2e>
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e084      	b.n	8003b56 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Receive+0x40>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e07d      	b.n	8003b56 <HAL_UART_Receive+0x13c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2222      	movs	r2, #34	; 0x22
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a76:	f7fe fb61 	bl	800213c <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	88fa      	ldrh	r2, [r7, #6]
 8003a86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a90:	d108      	bne.n	8003aa4 <HAL_UART_Receive+0x8a>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d104      	bne.n	8003aa4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	e003      	b.n	8003aac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ab4:	e043      	b.n	8003b3e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	2120      	movs	r1, #32
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fc2d 	bl	8004320 <UART_WaitOnFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e042      	b.n	8003b56 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10c      	bne.n	8003af0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	3302      	adds	r3, #2
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e01f      	b.n	8003b30 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	d007      	beq.n	8003b0a <HAL_UART_Receive+0xf0>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <HAL_UART_Receive+0xfe>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	e008      	b.n	8003b2a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1b6      	bne.n	8003ab6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d11d      	bne.n	8003bb4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_UART_Receive_DMA+0x26>
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e016      	b.n	8003bb6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Receive_DMA+0x38>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e00f      	b.n	8003bb6 <HAL_UART_Receive_DMA+0x58>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fc26 	bl	80043fc <UART_Start_Receive_DMA>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	e000      	b.n	8003bb6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
  }
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b0ba      	sub	sp, #232	; 0xe8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d009      	beq.n	8003c26 <HAL_UART_IRQHandler+0x66>
 8003c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fd91 	bl	8004746 <UART_Receive_IT>
      return;
 8003c24:	e256      	b.n	80040d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80de 	beq.w	8003dec <HAL_UART_IRQHandler+0x22c>
 8003c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80d1 	beq.w	8003dec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_UART_IRQHandler+0xae>
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_UART_IRQHandler+0xd2>
 8003c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f043 0202 	orr.w	r2, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_UART_IRQHandler+0xf6>
 8003c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f043 0204 	orr.w	r2, r3, #4
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d011      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x126>
 8003cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f043 0208 	orr.w	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 81ed 	beq.w	80040ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_UART_IRQHandler+0x14e>
 8003cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fd1c 	bl	8004746 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <HAL_UART_IRQHandler+0x17a>
 8003d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d04f      	beq.n	8003dda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fc24 	bl	8004588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d141      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1d9      	bne.n	8003d4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d013      	beq.n	8003dca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	4a7d      	ldr	r2, [pc, #500]	; (8003f9c <HAL_UART_IRQHandler+0x3dc>)
 8003da8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fc7c 	bl	80026ac <HAL_DMA_Abort_IT>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e00e      	b.n	8003de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f99a 	bl	8004104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e00a      	b.n	8003de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f996 	bl	8004104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	e006      	b.n	8003de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f992 	bl	8004104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003de6:	e170      	b.n	80040ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	bf00      	nop
    return;
 8003dea:	e16e      	b.n	80040ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 814a 	bne.w	800408a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8143 	beq.w	800408a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 813c 	beq.w	800408a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	f040 80b4 	bne.w	8003fa0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8140 	beq.w	80040ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e56:	429a      	cmp	r2, r3
 8003e58:	f080 8139 	bcs.w	80040ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6e:	f000 8088 	beq.w	8003f82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	330c      	adds	r3, #12
 8003e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1d9      	bne.n	8003e72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3314      	adds	r3, #20
 8003ede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ee2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e1      	bne.n	8003ebe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3314      	adds	r3, #20
 8003f00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3314      	adds	r3, #20
 8003f1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e3      	bne.n	8003efa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	330c      	adds	r3, #12
 8003f46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f52:	f023 0310 	bic.w	r3, r3, #16
 8003f56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	330c      	adds	r3, #12
 8003f60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f64:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e3      	bne.n	8003f40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe fb25 	bl	80025cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8c0 	bl	8004118 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f98:	e099      	b.n	80040ce <HAL_UART_IRQHandler+0x50e>
 8003f9a:	bf00      	nop
 8003f9c:	0800464f 	.word	0x0800464f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 808b 	beq.w	80040d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8086 	beq.w	80040d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fea:	647a      	str	r2, [r7, #68]	; 0x44
 8003fec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e3      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3314      	adds	r3, #20
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	623b      	str	r3, [r7, #32]
   return(result);
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3314      	adds	r3, #20
 800401e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004022:	633a      	str	r2, [r7, #48]	; 0x30
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e3      	bne.n	8003ffe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	60fb      	str	r3, [r7, #12]
   return(result);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0310 	bic.w	r3, r3, #16
 800405a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	330c      	adds	r3, #12
 8004064:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004068:	61fa      	str	r2, [r7, #28]
 800406a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	69b9      	ldr	r1, [r7, #24]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	617b      	str	r3, [r7, #20]
   return(result);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e3      	bne.n	8004044 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800407c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f848 	bl	8004118 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004088:	e023      	b.n	80040d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_UART_IRQHandler+0x4ea>
 8004096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fae7 	bl	8004676 <UART_Transmit_IT>
    return;
 80040a8:	e014      	b.n	80040d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00e      	beq.n	80040d4 <HAL_UART_IRQHandler+0x514>
 80040b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fb27 	bl	8004716 <UART_EndTransmit_IT>
    return;
 80040c8:	e004      	b.n	80040d4 <HAL_UART_IRQHandler+0x514>
    return;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <HAL_UART_IRQHandler+0x514>
      return;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_UART_IRQHandler+0x514>
      return;
 80040d2:	bf00      	nop
  }
}
 80040d4:	37e8      	adds	r7, #232	; 0xe8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop

080040dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b09c      	sub	sp, #112	; 0x70
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d172      	bne.n	8004232 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800414c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414e:	2200      	movs	r2, #0
 8004150:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004168:	66bb      	str	r3, [r7, #104]	; 0x68
 800416a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	330c      	adds	r3, #12
 8004170:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004172:	65ba      	str	r2, [r7, #88]	; 0x58
 8004174:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e5      	bne.n	8004152 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	667b      	str	r3, [r7, #100]	; 0x64
 800419e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3314      	adds	r3, #20
 80041a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041a6:	647a      	str	r2, [r7, #68]	; 0x44
 80041a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	623b      	str	r3, [r7, #32]
   return(result);
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d0:	663b      	str	r3, [r7, #96]	; 0x60
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3314      	adds	r3, #20
 80041d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041da:	633a      	str	r2, [r7, #48]	; 0x30
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e5      	bne.n	80041ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d119      	bne.n	8004232 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	60fb      	str	r3, [r7, #12]
   return(result);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f023 0310 	bic.w	r3, r3, #16
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800421e:	61fa      	str	r2, [r7, #28]
 8004220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	69b9      	ldr	r1, [r7, #24]
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	617b      	str	r3, [r7, #20]
   return(result);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e5      	bne.n	80041fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	2b01      	cmp	r3, #1
 8004238:	d106      	bne.n	8004248 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800423a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800423e:	4619      	mov	r1, r3
 8004240:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004242:	f7ff ff69 	bl	8004118 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004246:	e002      	b.n	800424e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004248:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800424a:	f7fd fb17 	bl	800187c <HAL_UART_RxCpltCallback>
}
 800424e:	bf00      	nop
 8004250:	3770      	adds	r7, #112	; 0x70
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	2b01      	cmp	r3, #1
 800426a:	d108      	bne.n	800427e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	b29b      	uxth	r3, r3
 8004274:	4619      	mov	r1, r3
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff ff4e 	bl	8004118 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800427c:	e002      	b.n	8004284 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7ff ff36 	bl	80040f0 <HAL_UART_RxHalfCpltCallback>
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b21      	cmp	r3, #33	; 0x21
 80042be:	d108      	bne.n	80042d2 <UART_DMAError+0x46>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2200      	movs	r2, #0
 80042ca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042cc:	68b8      	ldr	r0, [r7, #8]
 80042ce:	f000 f933 	bl	8004538 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b22      	cmp	r3, #34	; 0x22
 80042f2:	d108      	bne.n	8004306 <UART_DMAError+0x7a>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2200      	movs	r2, #0
 80042fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004300:	68b8      	ldr	r0, [r7, #8]
 8004302:	f000 f941 	bl	8004588 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f043 0210 	orr.w	r2, r3, #16
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004312:	68b8      	ldr	r0, [r7, #8]
 8004314:	f7ff fef6 	bl	8004104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004318:	bf00      	nop
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b090      	sub	sp, #64	; 0x40
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	4613      	mov	r3, r2
 800432e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004330:	e050      	b.n	80043d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d04c      	beq.n	80043d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800433a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <UART_WaitOnFlagUntilTimeout+0x30>
 8004340:	f7fd fefc 	bl	800213c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434c:	429a      	cmp	r2, r3
 800434e:	d241      	bcs.n	80043d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004370:	637a      	str	r2, [r7, #52]	; 0x34
 8004372:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e5      	bne.n	8004350 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	613b      	str	r3, [r7, #16]
   return(result);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	63bb      	str	r3, [r7, #56]	; 0x38
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3314      	adds	r3, #20
 80043a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043a4:	623a      	str	r2, [r7, #32]
 80043a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	69f9      	ldr	r1, [r7, #28]
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e5      	bne.n	8004384 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e00f      	b.n	80043f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4013      	ands	r3, r2
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d09f      	beq.n	8004332 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3740      	adds	r7, #64	; 0x40
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b098      	sub	sp, #96	; 0x60
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	88fa      	ldrh	r2, [r7, #6]
 8004414:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2222      	movs	r2, #34	; 0x22
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	4a40      	ldr	r2, [pc, #256]	; (800452c <UART_Start_Receive_DMA+0x130>)
 800442a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	4a3f      	ldr	r2, [pc, #252]	; (8004530 <UART_Start_Receive_DMA+0x134>)
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	4a3e      	ldr	r2, [pc, #248]	; (8004534 <UART_Start_Receive_DMA+0x138>)
 800443a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	2200      	movs	r2, #0
 8004442:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004444:	f107 0308 	add.w	r3, r7, #8
 8004448:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3304      	adds	r3, #4
 8004454:	4619      	mov	r1, r3
 8004456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	f7fe f85e 	bl	800251c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004460:	2300      	movs	r3, #0
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d019      	beq.n	80044ba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449c:	65bb      	str	r3, [r7, #88]	; 0x58
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e5      	bne.n	8004486 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	657b      	str	r3, [r7, #84]	; 0x54
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3314      	adds	r3, #20
 80044d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044da:	63ba      	str	r2, [r7, #56]	; 0x38
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e5      	bne.n	80044ba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	617b      	str	r3, [r7, #20]
   return(result);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004504:	653b      	str	r3, [r7, #80]	; 0x50
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3314      	adds	r3, #20
 800450c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800450e:	627a      	str	r2, [r7, #36]	; 0x24
 8004510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6a39      	ldr	r1, [r7, #32]
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	61fb      	str	r3, [r7, #28]
   return(result);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e5      	bne.n	80044ee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3760      	adds	r7, #96	; 0x60
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	08004131 	.word	0x08004131
 8004530:	08004257 	.word	0x08004257
 8004534:	0800428d 	.word	0x0800428d

08004538 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004538:	b480      	push	{r7}
 800453a:	b089      	sub	sp, #36	; 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	61ba      	str	r2, [r7, #24]
 8004562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6979      	ldr	r1, [r7, #20]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	613b      	str	r3, [r7, #16]
   return(result);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e5      	bne.n	8004540 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800457c:	bf00      	nop
 800457e:	3724      	adds	r7, #36	; 0x24
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b095      	sub	sp, #84	; 0x54
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b0:	643a      	str	r2, [r7, #64]	; 0x40
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e5      	bne.n	8004590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	64bb      	str	r3, [r7, #72]	; 0x48
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e5      	bne.n	80045c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d119      	bne.n	8004634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f023 0310 	bic.w	r3, r3, #16
 8004616:	647b      	str	r3, [r7, #68]	; 0x44
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004620:	61ba      	str	r2, [r7, #24]
 8004622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	613b      	str	r3, [r7, #16]
   return(result);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004642:	bf00      	nop
 8004644:	3754      	adds	r7, #84	; 0x54
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff fd4b 	bl	8004104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b21      	cmp	r3, #33	; 0x21
 8004688:	d13e      	bne.n	8004708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	d114      	bne.n	80046be <UART_Transmit_IT+0x48>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d110      	bne.n	80046be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	1c9a      	adds	r2, r3, #2
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	621a      	str	r2, [r3, #32]
 80046bc:	e008      	b.n	80046d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6211      	str	r1, [r2, #32]
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29b      	uxth	r3, r3
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4619      	mov	r1, r3
 80046de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fcd0 	bl	80040dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b08c      	sub	sp, #48	; 0x30
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b22      	cmp	r3, #34	; 0x22
 8004758:	f040 80ab 	bne.w	80048b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	d117      	bne.n	8004796 <UART_Receive_IT+0x50>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d113      	bne.n	8004796 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	b29a      	uxth	r2, r3
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	1c9a      	adds	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28
 8004794:	e026      	b.n	80047e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d007      	beq.n	80047ba <UART_Receive_IT+0x74>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <UART_Receive_IT+0x82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e008      	b.n	80047da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4619      	mov	r1, r3
 80047f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d15a      	bne.n	80048ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0220 	bic.w	r2, r2, #32
 8004806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	2b01      	cmp	r3, #1
 8004836:	d135      	bne.n	80048a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	613b      	str	r3, [r7, #16]
   return(result);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f023 0310 	bic.w	r3, r3, #16
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485e:	623a      	str	r2, [r7, #32]
 8004860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	69f9      	ldr	r1, [r7, #28]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	61bb      	str	r3, [r7, #24]
   return(result);
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e5      	bne.n	800483e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b10      	cmp	r3, #16
 800487e:	d10a      	bne.n	8004896 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fc3b 	bl	8004118 <HAL_UARTEx_RxEventCallback>
 80048a2:	e002      	b.n	80048aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fc ffe9 	bl	800187c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e002      	b.n	80048b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3730      	adds	r7, #48	; 0x30
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c0:	b0c0      	sub	sp, #256	; 0x100
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	68d9      	ldr	r1, [r3, #12]
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	ea40 0301 	orr.w	r3, r0, r1
 80048e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004914:	f021 010c 	bic.w	r1, r1, #12
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004922:	430b      	orrs	r3, r1
 8004924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	6999      	ldr	r1, [r3, #24]
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	ea40 0301 	orr.w	r3, r0, r1
 8004942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b8f      	ldr	r3, [pc, #572]	; (8004b88 <UART_SetConfig+0x2cc>)
 800494c:	429a      	cmp	r2, r3
 800494e:	d005      	beq.n	800495c <UART_SetConfig+0xa0>
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	4b8d      	ldr	r3, [pc, #564]	; (8004b8c <UART_SetConfig+0x2d0>)
 8004958:	429a      	cmp	r2, r3
 800495a:	d104      	bne.n	8004966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fe fce6 	bl	800332c <HAL_RCC_GetPCLK2Freq>
 8004960:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004964:	e003      	b.n	800496e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004966:	f7fe fccd 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 800496a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004978:	f040 810c 	bne.w	8004b94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800497c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004980:	2200      	movs	r2, #0
 8004982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004986:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800498a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800498e:	4622      	mov	r2, r4
 8004990:	462b      	mov	r3, r5
 8004992:	1891      	adds	r1, r2, r2
 8004994:	65b9      	str	r1, [r7, #88]	; 0x58
 8004996:	415b      	adcs	r3, r3
 8004998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800499a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800499e:	4621      	mov	r1, r4
 80049a0:	eb12 0801 	adds.w	r8, r2, r1
 80049a4:	4629      	mov	r1, r5
 80049a6:	eb43 0901 	adc.w	r9, r3, r1
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049be:	4690      	mov	r8, r2
 80049c0:	4699      	mov	r9, r3
 80049c2:	4623      	mov	r3, r4
 80049c4:	eb18 0303 	adds.w	r3, r8, r3
 80049c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049cc:	462b      	mov	r3, r5
 80049ce:	eb49 0303 	adc.w	r3, r9, r3
 80049d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049ea:	460b      	mov	r3, r1
 80049ec:	18db      	adds	r3, r3, r3
 80049ee:	653b      	str	r3, [r7, #80]	; 0x50
 80049f0:	4613      	mov	r3, r2
 80049f2:	eb42 0303 	adc.w	r3, r2, r3
 80049f6:	657b      	str	r3, [r7, #84]	; 0x54
 80049f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a00:	f7fc f8f2 	bl	8000be8 <__aeabi_uldivmod>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4b61      	ldr	r3, [pc, #388]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	011c      	lsls	r4, r3, #4
 8004a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a24:	4642      	mov	r2, r8
 8004a26:	464b      	mov	r3, r9
 8004a28:	1891      	adds	r1, r2, r2
 8004a2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a2c:	415b      	adcs	r3, r3
 8004a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a34:	4641      	mov	r1, r8
 8004a36:	eb12 0a01 	adds.w	sl, r2, r1
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a54:	4692      	mov	sl, r2
 8004a56:	469b      	mov	fp, r3
 8004a58:	4643      	mov	r3, r8
 8004a5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a62:	464b      	mov	r3, r9
 8004a64:	eb4b 0303 	adc.w	r3, fp, r3
 8004a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a80:	460b      	mov	r3, r1
 8004a82:	18db      	adds	r3, r3, r3
 8004a84:	643b      	str	r3, [r7, #64]	; 0x40
 8004a86:	4613      	mov	r3, r2
 8004a88:	eb42 0303 	adc.w	r3, r2, r3
 8004a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a96:	f7fc f8a7 	bl	8000be8 <__aeabi_uldivmod>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4b3b      	ldr	r3, [pc, #236]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2264      	movs	r2, #100	; 0x64
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	1acb      	subs	r3, r1, r3
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ab6:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac4:	441c      	add	r4, r3
 8004ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	1891      	adds	r1, r2, r2
 8004ade:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ae0:	415b      	adcs	r3, r3
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ae8:	4641      	mov	r1, r8
 8004aea:	1851      	adds	r1, r2, r1
 8004aec:	6339      	str	r1, [r7, #48]	; 0x30
 8004aee:	4649      	mov	r1, r9
 8004af0:	414b      	adcs	r3, r1
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b00:	4659      	mov	r1, fp
 8004b02:	00cb      	lsls	r3, r1, #3
 8004b04:	4651      	mov	r1, sl
 8004b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b0a:	4651      	mov	r1, sl
 8004b0c:	00ca      	lsls	r2, r1, #3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	4642      	mov	r2, r8
 8004b16:	189b      	adds	r3, r3, r2
 8004b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	460a      	mov	r2, r1
 8004b20:	eb42 0303 	adc.w	r3, r2, r3
 8004b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	18db      	adds	r3, r3, r3
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b42:	4613      	mov	r3, r2
 8004b44:	eb42 0303 	adc.w	r3, r2, r3
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b52:	f7fc f849 	bl	8000be8 <__aeabi_uldivmod>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	2164      	movs	r1, #100	; 0x64
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	3332      	adds	r3, #50	; 0x32
 8004b6e:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <UART_SetConfig+0x2d4>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	f003 0207 	and.w	r2, r3, #7
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4422      	add	r2, r4
 8004b82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b84:	e106      	b.n	8004d94 <UART_SetConfig+0x4d8>
 8004b86:	bf00      	nop
 8004b88:	40011000 	.word	0x40011000
 8004b8c:	40011400 	.word	0x40011400
 8004b90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ba6:	4642      	mov	r2, r8
 8004ba8:	464b      	mov	r3, r9
 8004baa:	1891      	adds	r1, r2, r2
 8004bac:	6239      	str	r1, [r7, #32]
 8004bae:	415b      	adcs	r3, r3
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	1854      	adds	r4, r2, r1
 8004bba:	4649      	mov	r1, r9
 8004bbc:	eb43 0501 	adc.w	r5, r3, r1
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	00eb      	lsls	r3, r5, #3
 8004bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bce:	00e2      	lsls	r2, r4, #3
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	461d      	mov	r5, r3
 8004bd4:	4643      	mov	r3, r8
 8004bd6:	18e3      	adds	r3, r4, r3
 8004bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bdc:	464b      	mov	r3, r9
 8004bde:	eb45 0303 	adc.w	r3, r5, r3
 8004be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c02:	4629      	mov	r1, r5
 8004c04:	008b      	lsls	r3, r1, #2
 8004c06:	4621      	mov	r1, r4
 8004c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	008a      	lsls	r2, r1, #2
 8004c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c14:	f7fb ffe8 	bl	8000be8 <__aeabi_uldivmod>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4b60      	ldr	r3, [pc, #384]	; (8004da0 <UART_SetConfig+0x4e4>)
 8004c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	011c      	lsls	r4, r3, #4
 8004c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c38:	4642      	mov	r2, r8
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	1891      	adds	r1, r2, r2
 8004c3e:	61b9      	str	r1, [r7, #24]
 8004c40:	415b      	adcs	r3, r3
 8004c42:	61fb      	str	r3, [r7, #28]
 8004c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c48:	4641      	mov	r1, r8
 8004c4a:	1851      	adds	r1, r2, r1
 8004c4c:	6139      	str	r1, [r7, #16]
 8004c4e:	4649      	mov	r1, r9
 8004c50:	414b      	adcs	r3, r1
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c60:	4659      	mov	r1, fp
 8004c62:	00cb      	lsls	r3, r1, #3
 8004c64:	4651      	mov	r1, sl
 8004c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	00ca      	lsls	r2, r1, #3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	4619      	mov	r1, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	4642      	mov	r2, r8
 8004c76:	189b      	adds	r3, r3, r2
 8004c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	460a      	mov	r2, r1
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	008b      	lsls	r3, r1, #2
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004caa:	4641      	mov	r1, r8
 8004cac:	008a      	lsls	r2, r1, #2
 8004cae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cb2:	f7fb ff99 	bl	8000be8 <__aeabi_uldivmod>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4b38      	ldr	r3, [pc, #224]	; (8004da0 <UART_SetConfig+0x4e4>)
 8004cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2264      	movs	r2, #100	; 0x64
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	1acb      	subs	r3, r1, r3
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	3332      	adds	r3, #50	; 0x32
 8004cd0:	4a33      	ldr	r2, [pc, #204]	; (8004da0 <UART_SetConfig+0x4e4>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cdc:	441c      	add	r4, r3
 8004cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ce8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	1891      	adds	r1, r2, r2
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	415b      	adcs	r3, r3
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	1851      	adds	r1, r2, r1
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	4649      	mov	r1, r9
 8004d04:	414b      	adcs	r3, r1
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d14:	4659      	mov	r1, fp
 8004d16:	00cb      	lsls	r3, r1, #3
 8004d18:	4651      	mov	r1, sl
 8004d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1e:	4651      	mov	r1, sl
 8004d20:	00ca      	lsls	r2, r1, #3
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	4642      	mov	r2, r8
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d2e:	464b      	mov	r3, r9
 8004d30:	460a      	mov	r2, r1
 8004d32:	eb42 0303 	adc.w	r3, r2, r3
 8004d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	663b      	str	r3, [r7, #96]	; 0x60
 8004d42:	667a      	str	r2, [r7, #100]	; 0x64
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d50:	4649      	mov	r1, r9
 8004d52:	008b      	lsls	r3, r1, #2
 8004d54:	4641      	mov	r1, r8
 8004d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	008a      	lsls	r2, r1, #2
 8004d5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d62:	f7fb ff41 	bl	8000be8 <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <UART_SetConfig+0x4e4>)
 8004d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	2164      	movs	r1, #100	; 0x64
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	3332      	adds	r3, #50	; 0x32
 8004d7e:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <UART_SetConfig+0x4e4>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	f003 020f 	and.w	r2, r3, #15
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4422      	add	r2, r4
 8004d92:	609a      	str	r2, [r3, #8]
}
 8004d94:	bf00      	nop
 8004d96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da0:	51eb851f 	.word	0x51eb851f

08004da4 <__cvt>:
 8004da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da8:	ec55 4b10 	vmov	r4, r5, d0
 8004dac:	2d00      	cmp	r5, #0
 8004dae:	460e      	mov	r6, r1
 8004db0:	4619      	mov	r1, r3
 8004db2:	462b      	mov	r3, r5
 8004db4:	bfbb      	ittet	lt
 8004db6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004dba:	461d      	movlt	r5, r3
 8004dbc:	2300      	movge	r3, #0
 8004dbe:	232d      	movlt	r3, #45	; 0x2d
 8004dc0:	700b      	strb	r3, [r1, #0]
 8004dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004dc8:	4691      	mov	r9, r2
 8004dca:	f023 0820 	bic.w	r8, r3, #32
 8004dce:	bfbc      	itt	lt
 8004dd0:	4622      	movlt	r2, r4
 8004dd2:	4614      	movlt	r4, r2
 8004dd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dd8:	d005      	beq.n	8004de6 <__cvt+0x42>
 8004dda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dde:	d100      	bne.n	8004de2 <__cvt+0x3e>
 8004de0:	3601      	adds	r6, #1
 8004de2:	2102      	movs	r1, #2
 8004de4:	e000      	b.n	8004de8 <__cvt+0x44>
 8004de6:	2103      	movs	r1, #3
 8004de8:	ab03      	add	r3, sp, #12
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	ab02      	add	r3, sp, #8
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	ec45 4b10 	vmov	d0, r4, r5
 8004df4:	4653      	mov	r3, sl
 8004df6:	4632      	mov	r2, r6
 8004df8:	f000 ff4a 	bl	8005c90 <_dtoa_r>
 8004dfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e00:	4607      	mov	r7, r0
 8004e02:	d102      	bne.n	8004e0a <__cvt+0x66>
 8004e04:	f019 0f01 	tst.w	r9, #1
 8004e08:	d022      	beq.n	8004e50 <__cvt+0xac>
 8004e0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e0e:	eb07 0906 	add.w	r9, r7, r6
 8004e12:	d110      	bne.n	8004e36 <__cvt+0x92>
 8004e14:	783b      	ldrb	r3, [r7, #0]
 8004e16:	2b30      	cmp	r3, #48	; 0x30
 8004e18:	d10a      	bne.n	8004e30 <__cvt+0x8c>
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	4620      	mov	r0, r4
 8004e20:	4629      	mov	r1, r5
 8004e22:	f7fb fe71 	bl	8000b08 <__aeabi_dcmpeq>
 8004e26:	b918      	cbnz	r0, 8004e30 <__cvt+0x8c>
 8004e28:	f1c6 0601 	rsb	r6, r6, #1
 8004e2c:	f8ca 6000 	str.w	r6, [sl]
 8004e30:	f8da 3000 	ldr.w	r3, [sl]
 8004e34:	4499      	add	r9, r3
 8004e36:	2200      	movs	r2, #0
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	f7fb fe63 	bl	8000b08 <__aeabi_dcmpeq>
 8004e42:	b108      	cbz	r0, 8004e48 <__cvt+0xa4>
 8004e44:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e48:	2230      	movs	r2, #48	; 0x30
 8004e4a:	9b03      	ldr	r3, [sp, #12]
 8004e4c:	454b      	cmp	r3, r9
 8004e4e:	d307      	bcc.n	8004e60 <__cvt+0xbc>
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e54:	1bdb      	subs	r3, r3, r7
 8004e56:	4638      	mov	r0, r7
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	b004      	add	sp, #16
 8004e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e60:	1c59      	adds	r1, r3, #1
 8004e62:	9103      	str	r1, [sp, #12]
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e7f0      	b.n	8004e4a <__cvt+0xa6>

08004e68 <__exponent>:
 8004e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	bfb8      	it	lt
 8004e70:	4249      	neglt	r1, r1
 8004e72:	f803 2b02 	strb.w	r2, [r3], #2
 8004e76:	bfb4      	ite	lt
 8004e78:	222d      	movlt	r2, #45	; 0x2d
 8004e7a:	222b      	movge	r2, #43	; 0x2b
 8004e7c:	2909      	cmp	r1, #9
 8004e7e:	7042      	strb	r2, [r0, #1]
 8004e80:	dd2a      	ble.n	8004ed8 <__exponent+0x70>
 8004e82:	f10d 0207 	add.w	r2, sp, #7
 8004e86:	4617      	mov	r7, r2
 8004e88:	260a      	movs	r6, #10
 8004e8a:	4694      	mov	ip, r2
 8004e8c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e90:	fb06 1415 	mls	r4, r6, r5, r1
 8004e94:	3430      	adds	r4, #48	; 0x30
 8004e96:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	2c63      	cmp	r4, #99	; 0x63
 8004e9e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	dcf1      	bgt.n	8004e8a <__exponent+0x22>
 8004ea6:	3130      	adds	r1, #48	; 0x30
 8004ea8:	f1ac 0402 	sub.w	r4, ip, #2
 8004eac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004eb0:	1c41      	adds	r1, r0, #1
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	42ba      	cmp	r2, r7
 8004eb6:	d30a      	bcc.n	8004ece <__exponent+0x66>
 8004eb8:	f10d 0209 	add.w	r2, sp, #9
 8004ebc:	eba2 020c 	sub.w	r2, r2, ip
 8004ec0:	42bc      	cmp	r4, r7
 8004ec2:	bf88      	it	hi
 8004ec4:	2200      	movhi	r2, #0
 8004ec6:	4413      	add	r3, r2
 8004ec8:	1a18      	subs	r0, r3, r0
 8004eca:	b003      	add	sp, #12
 8004ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ece:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ed2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ed6:	e7ed      	b.n	8004eb4 <__exponent+0x4c>
 8004ed8:	2330      	movs	r3, #48	; 0x30
 8004eda:	3130      	adds	r1, #48	; 0x30
 8004edc:	7083      	strb	r3, [r0, #2]
 8004ede:	70c1      	strb	r1, [r0, #3]
 8004ee0:	1d03      	adds	r3, r0, #4
 8004ee2:	e7f1      	b.n	8004ec8 <__exponent+0x60>

08004ee4 <_printf_float>:
 8004ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee8:	ed2d 8b02 	vpush	{d8}
 8004eec:	b08d      	sub	sp, #52	; 0x34
 8004eee:	460c      	mov	r4, r1
 8004ef0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ef4:	4616      	mov	r6, r2
 8004ef6:	461f      	mov	r7, r3
 8004ef8:	4605      	mov	r5, r0
 8004efa:	f000 fdc9 	bl	8005a90 <_localeconv_r>
 8004efe:	f8d0 a000 	ldr.w	sl, [r0]
 8004f02:	4650      	mov	r0, sl
 8004f04:	f7fb f9d4 	bl	80002b0 <strlen>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	9305      	str	r3, [sp, #20]
 8004f10:	f8d8 3000 	ldr.w	r3, [r8]
 8004f14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f18:	3307      	adds	r3, #7
 8004f1a:	f023 0307 	bic.w	r3, r3, #7
 8004f1e:	f103 0208 	add.w	r2, r3, #8
 8004f22:	f8c8 2000 	str.w	r2, [r8]
 8004f26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f2e:	9307      	str	r3, [sp, #28]
 8004f30:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f34:	ee08 0a10 	vmov	s16, r0
 8004f38:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004f3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f40:	4b9e      	ldr	r3, [pc, #632]	; (80051bc <_printf_float+0x2d8>)
 8004f42:	f04f 32ff 	mov.w	r2, #4294967295
 8004f46:	f7fb fe11 	bl	8000b6c <__aeabi_dcmpun>
 8004f4a:	bb88      	cbnz	r0, 8004fb0 <_printf_float+0xcc>
 8004f4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f50:	4b9a      	ldr	r3, [pc, #616]	; (80051bc <_printf_float+0x2d8>)
 8004f52:	f04f 32ff 	mov.w	r2, #4294967295
 8004f56:	f7fb fdeb 	bl	8000b30 <__aeabi_dcmple>
 8004f5a:	bb48      	cbnz	r0, 8004fb0 <_printf_float+0xcc>
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2300      	movs	r3, #0
 8004f60:	4640      	mov	r0, r8
 8004f62:	4649      	mov	r1, r9
 8004f64:	f7fb fdda 	bl	8000b1c <__aeabi_dcmplt>
 8004f68:	b110      	cbz	r0, 8004f70 <_printf_float+0x8c>
 8004f6a:	232d      	movs	r3, #45	; 0x2d
 8004f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f70:	4a93      	ldr	r2, [pc, #588]	; (80051c0 <_printf_float+0x2dc>)
 8004f72:	4b94      	ldr	r3, [pc, #592]	; (80051c4 <_printf_float+0x2e0>)
 8004f74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f78:	bf94      	ite	ls
 8004f7a:	4690      	movls	r8, r2
 8004f7c:	4698      	movhi	r8, r3
 8004f7e:	2303      	movs	r3, #3
 8004f80:	6123      	str	r3, [r4, #16]
 8004f82:	9b05      	ldr	r3, [sp, #20]
 8004f84:	f023 0304 	bic.w	r3, r3, #4
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	f04f 0900 	mov.w	r9, #0
 8004f8e:	9700      	str	r7, [sp, #0]
 8004f90:	4633      	mov	r3, r6
 8004f92:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f94:	4621      	mov	r1, r4
 8004f96:	4628      	mov	r0, r5
 8004f98:	f000 f9da 	bl	8005350 <_printf_common>
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	f040 8090 	bne.w	80050c2 <_printf_float+0x1de>
 8004fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa6:	b00d      	add	sp, #52	; 0x34
 8004fa8:	ecbd 8b02 	vpop	{d8}
 8004fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	f7fb fdd8 	bl	8000b6c <__aeabi_dcmpun>
 8004fbc:	b140      	cbz	r0, 8004fd0 <_printf_float+0xec>
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bfbc      	itt	lt
 8004fc4:	232d      	movlt	r3, #45	; 0x2d
 8004fc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fca:	4a7f      	ldr	r2, [pc, #508]	; (80051c8 <_printf_float+0x2e4>)
 8004fcc:	4b7f      	ldr	r3, [pc, #508]	; (80051cc <_printf_float+0x2e8>)
 8004fce:	e7d1      	b.n	8004f74 <_printf_float+0x90>
 8004fd0:	6863      	ldr	r3, [r4, #4]
 8004fd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004fd6:	9206      	str	r2, [sp, #24]
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	d13f      	bne.n	800505c <_printf_float+0x178>
 8004fdc:	2306      	movs	r3, #6
 8004fde:	6063      	str	r3, [r4, #4]
 8004fe0:	9b05      	ldr	r3, [sp, #20]
 8004fe2:	6861      	ldr	r1, [r4, #4]
 8004fe4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fe8:	2300      	movs	r3, #0
 8004fea:	9303      	str	r3, [sp, #12]
 8004fec:	ab0a      	add	r3, sp, #40	; 0x28
 8004fee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ff2:	ab09      	add	r3, sp, #36	; 0x24
 8004ff4:	ec49 8b10 	vmov	d0, r8, r9
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	6022      	str	r2, [r4, #0]
 8004ffc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005000:	4628      	mov	r0, r5
 8005002:	f7ff fecf 	bl	8004da4 <__cvt>
 8005006:	9b06      	ldr	r3, [sp, #24]
 8005008:	9909      	ldr	r1, [sp, #36]	; 0x24
 800500a:	2b47      	cmp	r3, #71	; 0x47
 800500c:	4680      	mov	r8, r0
 800500e:	d108      	bne.n	8005022 <_printf_float+0x13e>
 8005010:	1cc8      	adds	r0, r1, #3
 8005012:	db02      	blt.n	800501a <_printf_float+0x136>
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	4299      	cmp	r1, r3
 8005018:	dd41      	ble.n	800509e <_printf_float+0x1ba>
 800501a:	f1ab 0302 	sub.w	r3, fp, #2
 800501e:	fa5f fb83 	uxtb.w	fp, r3
 8005022:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005026:	d820      	bhi.n	800506a <_printf_float+0x186>
 8005028:	3901      	subs	r1, #1
 800502a:	465a      	mov	r2, fp
 800502c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005030:	9109      	str	r1, [sp, #36]	; 0x24
 8005032:	f7ff ff19 	bl	8004e68 <__exponent>
 8005036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005038:	1813      	adds	r3, r2, r0
 800503a:	2a01      	cmp	r2, #1
 800503c:	4681      	mov	r9, r0
 800503e:	6123      	str	r3, [r4, #16]
 8005040:	dc02      	bgt.n	8005048 <_printf_float+0x164>
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	07d2      	lsls	r2, r2, #31
 8005046:	d501      	bpl.n	800504c <_printf_float+0x168>
 8005048:	3301      	adds	r3, #1
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005050:	2b00      	cmp	r3, #0
 8005052:	d09c      	beq.n	8004f8e <_printf_float+0xaa>
 8005054:	232d      	movs	r3, #45	; 0x2d
 8005056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800505a:	e798      	b.n	8004f8e <_printf_float+0xaa>
 800505c:	9a06      	ldr	r2, [sp, #24]
 800505e:	2a47      	cmp	r2, #71	; 0x47
 8005060:	d1be      	bne.n	8004fe0 <_printf_float+0xfc>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1bc      	bne.n	8004fe0 <_printf_float+0xfc>
 8005066:	2301      	movs	r3, #1
 8005068:	e7b9      	b.n	8004fde <_printf_float+0xfa>
 800506a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800506e:	d118      	bne.n	80050a2 <_printf_float+0x1be>
 8005070:	2900      	cmp	r1, #0
 8005072:	6863      	ldr	r3, [r4, #4]
 8005074:	dd0b      	ble.n	800508e <_printf_float+0x1aa>
 8005076:	6121      	str	r1, [r4, #16]
 8005078:	b913      	cbnz	r3, 8005080 <_printf_float+0x19c>
 800507a:	6822      	ldr	r2, [r4, #0]
 800507c:	07d0      	lsls	r0, r2, #31
 800507e:	d502      	bpl.n	8005086 <_printf_float+0x1a2>
 8005080:	3301      	adds	r3, #1
 8005082:	440b      	add	r3, r1
 8005084:	6123      	str	r3, [r4, #16]
 8005086:	65a1      	str	r1, [r4, #88]	; 0x58
 8005088:	f04f 0900 	mov.w	r9, #0
 800508c:	e7de      	b.n	800504c <_printf_float+0x168>
 800508e:	b913      	cbnz	r3, 8005096 <_printf_float+0x1b2>
 8005090:	6822      	ldr	r2, [r4, #0]
 8005092:	07d2      	lsls	r2, r2, #31
 8005094:	d501      	bpl.n	800509a <_printf_float+0x1b6>
 8005096:	3302      	adds	r3, #2
 8005098:	e7f4      	b.n	8005084 <_printf_float+0x1a0>
 800509a:	2301      	movs	r3, #1
 800509c:	e7f2      	b.n	8005084 <_printf_float+0x1a0>
 800509e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80050a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a4:	4299      	cmp	r1, r3
 80050a6:	db05      	blt.n	80050b4 <_printf_float+0x1d0>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	6121      	str	r1, [r4, #16]
 80050ac:	07d8      	lsls	r0, r3, #31
 80050ae:	d5ea      	bpl.n	8005086 <_printf_float+0x1a2>
 80050b0:	1c4b      	adds	r3, r1, #1
 80050b2:	e7e7      	b.n	8005084 <_printf_float+0x1a0>
 80050b4:	2900      	cmp	r1, #0
 80050b6:	bfd4      	ite	le
 80050b8:	f1c1 0202 	rsble	r2, r1, #2
 80050bc:	2201      	movgt	r2, #1
 80050be:	4413      	add	r3, r2
 80050c0:	e7e0      	b.n	8005084 <_printf_float+0x1a0>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	055a      	lsls	r2, r3, #21
 80050c6:	d407      	bmi.n	80050d8 <_printf_float+0x1f4>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	4642      	mov	r2, r8
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	d12c      	bne.n	8005130 <_printf_float+0x24c>
 80050d6:	e764      	b.n	8004fa2 <_printf_float+0xbe>
 80050d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050dc:	f240 80e0 	bls.w	80052a0 <_printf_float+0x3bc>
 80050e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050e4:	2200      	movs	r2, #0
 80050e6:	2300      	movs	r3, #0
 80050e8:	f7fb fd0e 	bl	8000b08 <__aeabi_dcmpeq>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d034      	beq.n	800515a <_printf_float+0x276>
 80050f0:	4a37      	ldr	r2, [pc, #220]	; (80051d0 <_printf_float+0x2ec>)
 80050f2:	2301      	movs	r3, #1
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	f43f af51 	beq.w	8004fa2 <_printf_float+0xbe>
 8005100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005104:	429a      	cmp	r2, r3
 8005106:	db02      	blt.n	800510e <_printf_float+0x22a>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	07d8      	lsls	r0, r3, #31
 800510c:	d510      	bpl.n	8005130 <_printf_float+0x24c>
 800510e:	ee18 3a10 	vmov	r3, s16
 8005112:	4652      	mov	r2, sl
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	47b8      	blx	r7
 800511a:	3001      	adds	r0, #1
 800511c:	f43f af41 	beq.w	8004fa2 <_printf_float+0xbe>
 8005120:	f04f 0800 	mov.w	r8, #0
 8005124:	f104 091a 	add.w	r9, r4, #26
 8005128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800512a:	3b01      	subs	r3, #1
 800512c:	4543      	cmp	r3, r8
 800512e:	dc09      	bgt.n	8005144 <_printf_float+0x260>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	079b      	lsls	r3, r3, #30
 8005134:	f100 8107 	bmi.w	8005346 <_printf_float+0x462>
 8005138:	68e0      	ldr	r0, [r4, #12]
 800513a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800513c:	4298      	cmp	r0, r3
 800513e:	bfb8      	it	lt
 8005140:	4618      	movlt	r0, r3
 8005142:	e730      	b.n	8004fa6 <_printf_float+0xc2>
 8005144:	2301      	movs	r3, #1
 8005146:	464a      	mov	r2, r9
 8005148:	4631      	mov	r1, r6
 800514a:	4628      	mov	r0, r5
 800514c:	47b8      	blx	r7
 800514e:	3001      	adds	r0, #1
 8005150:	f43f af27 	beq.w	8004fa2 <_printf_float+0xbe>
 8005154:	f108 0801 	add.w	r8, r8, #1
 8005158:	e7e6      	b.n	8005128 <_printf_float+0x244>
 800515a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	dc39      	bgt.n	80051d4 <_printf_float+0x2f0>
 8005160:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <_printf_float+0x2ec>)
 8005162:	2301      	movs	r3, #1
 8005164:	4631      	mov	r1, r6
 8005166:	4628      	mov	r0, r5
 8005168:	47b8      	blx	r7
 800516a:	3001      	adds	r0, #1
 800516c:	f43f af19 	beq.w	8004fa2 <_printf_float+0xbe>
 8005170:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005174:	4313      	orrs	r3, r2
 8005176:	d102      	bne.n	800517e <_printf_float+0x29a>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	07d9      	lsls	r1, r3, #31
 800517c:	d5d8      	bpl.n	8005130 <_printf_float+0x24c>
 800517e:	ee18 3a10 	vmov	r3, s16
 8005182:	4652      	mov	r2, sl
 8005184:	4631      	mov	r1, r6
 8005186:	4628      	mov	r0, r5
 8005188:	47b8      	blx	r7
 800518a:	3001      	adds	r0, #1
 800518c:	f43f af09 	beq.w	8004fa2 <_printf_float+0xbe>
 8005190:	f04f 0900 	mov.w	r9, #0
 8005194:	f104 0a1a 	add.w	sl, r4, #26
 8005198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800519a:	425b      	negs	r3, r3
 800519c:	454b      	cmp	r3, r9
 800519e:	dc01      	bgt.n	80051a4 <_printf_float+0x2c0>
 80051a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a2:	e792      	b.n	80050ca <_printf_float+0x1e6>
 80051a4:	2301      	movs	r3, #1
 80051a6:	4652      	mov	r2, sl
 80051a8:	4631      	mov	r1, r6
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b8      	blx	r7
 80051ae:	3001      	adds	r0, #1
 80051b0:	f43f aef7 	beq.w	8004fa2 <_printf_float+0xbe>
 80051b4:	f109 0901 	add.w	r9, r9, #1
 80051b8:	e7ee      	b.n	8005198 <_printf_float+0x2b4>
 80051ba:	bf00      	nop
 80051bc:	7fefffff 	.word	0x7fefffff
 80051c0:	08007ee0 	.word	0x08007ee0
 80051c4:	08007ee4 	.word	0x08007ee4
 80051c8:	08007ee8 	.word	0x08007ee8
 80051cc:	08007eec 	.word	0x08007eec
 80051d0:	08007ef0 	.word	0x08007ef0
 80051d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051d8:	429a      	cmp	r2, r3
 80051da:	bfa8      	it	ge
 80051dc:	461a      	movge	r2, r3
 80051de:	2a00      	cmp	r2, #0
 80051e0:	4691      	mov	r9, r2
 80051e2:	dc37      	bgt.n	8005254 <_printf_float+0x370>
 80051e4:	f04f 0b00 	mov.w	fp, #0
 80051e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ec:	f104 021a 	add.w	r2, r4, #26
 80051f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051f2:	9305      	str	r3, [sp, #20]
 80051f4:	eba3 0309 	sub.w	r3, r3, r9
 80051f8:	455b      	cmp	r3, fp
 80051fa:	dc33      	bgt.n	8005264 <_printf_float+0x380>
 80051fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005200:	429a      	cmp	r2, r3
 8005202:	db3b      	blt.n	800527c <_printf_float+0x398>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	07da      	lsls	r2, r3, #31
 8005208:	d438      	bmi.n	800527c <_printf_float+0x398>
 800520a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800520e:	eba2 0903 	sub.w	r9, r2, r3
 8005212:	9b05      	ldr	r3, [sp, #20]
 8005214:	1ad2      	subs	r2, r2, r3
 8005216:	4591      	cmp	r9, r2
 8005218:	bfa8      	it	ge
 800521a:	4691      	movge	r9, r2
 800521c:	f1b9 0f00 	cmp.w	r9, #0
 8005220:	dc35      	bgt.n	800528e <_printf_float+0x3aa>
 8005222:	f04f 0800 	mov.w	r8, #0
 8005226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800522a:	f104 0a1a 	add.w	sl, r4, #26
 800522e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	eba3 0309 	sub.w	r3, r3, r9
 8005238:	4543      	cmp	r3, r8
 800523a:	f77f af79 	ble.w	8005130 <_printf_float+0x24c>
 800523e:	2301      	movs	r3, #1
 8005240:	4652      	mov	r2, sl
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	f43f aeaa 	beq.w	8004fa2 <_printf_float+0xbe>
 800524e:	f108 0801 	add.w	r8, r8, #1
 8005252:	e7ec      	b.n	800522e <_printf_float+0x34a>
 8005254:	4613      	mov	r3, r2
 8005256:	4631      	mov	r1, r6
 8005258:	4642      	mov	r2, r8
 800525a:	4628      	mov	r0, r5
 800525c:	47b8      	blx	r7
 800525e:	3001      	adds	r0, #1
 8005260:	d1c0      	bne.n	80051e4 <_printf_float+0x300>
 8005262:	e69e      	b.n	8004fa2 <_printf_float+0xbe>
 8005264:	2301      	movs	r3, #1
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	9205      	str	r2, [sp, #20]
 800526c:	47b8      	blx	r7
 800526e:	3001      	adds	r0, #1
 8005270:	f43f ae97 	beq.w	8004fa2 <_printf_float+0xbe>
 8005274:	9a05      	ldr	r2, [sp, #20]
 8005276:	f10b 0b01 	add.w	fp, fp, #1
 800527a:	e7b9      	b.n	80051f0 <_printf_float+0x30c>
 800527c:	ee18 3a10 	vmov	r3, s16
 8005280:	4652      	mov	r2, sl
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	d1be      	bne.n	800520a <_printf_float+0x326>
 800528c:	e689      	b.n	8004fa2 <_printf_float+0xbe>
 800528e:	9a05      	ldr	r2, [sp, #20]
 8005290:	464b      	mov	r3, r9
 8005292:	4442      	add	r2, r8
 8005294:	4631      	mov	r1, r6
 8005296:	4628      	mov	r0, r5
 8005298:	47b8      	blx	r7
 800529a:	3001      	adds	r0, #1
 800529c:	d1c1      	bne.n	8005222 <_printf_float+0x33e>
 800529e:	e680      	b.n	8004fa2 <_printf_float+0xbe>
 80052a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052a2:	2a01      	cmp	r2, #1
 80052a4:	dc01      	bgt.n	80052aa <_printf_float+0x3c6>
 80052a6:	07db      	lsls	r3, r3, #31
 80052a8:	d53a      	bpl.n	8005320 <_printf_float+0x43c>
 80052aa:	2301      	movs	r3, #1
 80052ac:	4642      	mov	r2, r8
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	47b8      	blx	r7
 80052b4:	3001      	adds	r0, #1
 80052b6:	f43f ae74 	beq.w	8004fa2 <_printf_float+0xbe>
 80052ba:	ee18 3a10 	vmov	r3, s16
 80052be:	4652      	mov	r2, sl
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f ae6b 	beq.w	8004fa2 <_printf_float+0xbe>
 80052cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052d0:	2200      	movs	r2, #0
 80052d2:	2300      	movs	r3, #0
 80052d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80052d8:	f7fb fc16 	bl	8000b08 <__aeabi_dcmpeq>
 80052dc:	b9d8      	cbnz	r0, 8005316 <_printf_float+0x432>
 80052de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80052e2:	f108 0201 	add.w	r2, r8, #1
 80052e6:	4631      	mov	r1, r6
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b8      	blx	r7
 80052ec:	3001      	adds	r0, #1
 80052ee:	d10e      	bne.n	800530e <_printf_float+0x42a>
 80052f0:	e657      	b.n	8004fa2 <_printf_float+0xbe>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4652      	mov	r2, sl
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f ae50 	beq.w	8004fa2 <_printf_float+0xbe>
 8005302:	f108 0801 	add.w	r8, r8, #1
 8005306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005308:	3b01      	subs	r3, #1
 800530a:	4543      	cmp	r3, r8
 800530c:	dcf1      	bgt.n	80052f2 <_printf_float+0x40e>
 800530e:	464b      	mov	r3, r9
 8005310:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005314:	e6da      	b.n	80050cc <_printf_float+0x1e8>
 8005316:	f04f 0800 	mov.w	r8, #0
 800531a:	f104 0a1a 	add.w	sl, r4, #26
 800531e:	e7f2      	b.n	8005306 <_printf_float+0x422>
 8005320:	2301      	movs	r3, #1
 8005322:	4642      	mov	r2, r8
 8005324:	e7df      	b.n	80052e6 <_printf_float+0x402>
 8005326:	2301      	movs	r3, #1
 8005328:	464a      	mov	r2, r9
 800532a:	4631      	mov	r1, r6
 800532c:	4628      	mov	r0, r5
 800532e:	47b8      	blx	r7
 8005330:	3001      	adds	r0, #1
 8005332:	f43f ae36 	beq.w	8004fa2 <_printf_float+0xbe>
 8005336:	f108 0801 	add.w	r8, r8, #1
 800533a:	68e3      	ldr	r3, [r4, #12]
 800533c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800533e:	1a5b      	subs	r3, r3, r1
 8005340:	4543      	cmp	r3, r8
 8005342:	dcf0      	bgt.n	8005326 <_printf_float+0x442>
 8005344:	e6f8      	b.n	8005138 <_printf_float+0x254>
 8005346:	f04f 0800 	mov.w	r8, #0
 800534a:	f104 0919 	add.w	r9, r4, #25
 800534e:	e7f4      	b.n	800533a <_printf_float+0x456>

08005350 <_printf_common>:
 8005350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005354:	4616      	mov	r6, r2
 8005356:	4699      	mov	r9, r3
 8005358:	688a      	ldr	r2, [r1, #8]
 800535a:	690b      	ldr	r3, [r1, #16]
 800535c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005360:	4293      	cmp	r3, r2
 8005362:	bfb8      	it	lt
 8005364:	4613      	movlt	r3, r2
 8005366:	6033      	str	r3, [r6, #0]
 8005368:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800536c:	4607      	mov	r7, r0
 800536e:	460c      	mov	r4, r1
 8005370:	b10a      	cbz	r2, 8005376 <_printf_common+0x26>
 8005372:	3301      	adds	r3, #1
 8005374:	6033      	str	r3, [r6, #0]
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	0699      	lsls	r1, r3, #26
 800537a:	bf42      	ittt	mi
 800537c:	6833      	ldrmi	r3, [r6, #0]
 800537e:	3302      	addmi	r3, #2
 8005380:	6033      	strmi	r3, [r6, #0]
 8005382:	6825      	ldr	r5, [r4, #0]
 8005384:	f015 0506 	ands.w	r5, r5, #6
 8005388:	d106      	bne.n	8005398 <_printf_common+0x48>
 800538a:	f104 0a19 	add.w	sl, r4, #25
 800538e:	68e3      	ldr	r3, [r4, #12]
 8005390:	6832      	ldr	r2, [r6, #0]
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	42ab      	cmp	r3, r5
 8005396:	dc26      	bgt.n	80053e6 <_printf_common+0x96>
 8005398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800539c:	1e13      	subs	r3, r2, #0
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	bf18      	it	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	0692      	lsls	r2, r2, #26
 80053a6:	d42b      	bmi.n	8005400 <_printf_common+0xb0>
 80053a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053ac:	4649      	mov	r1, r9
 80053ae:	4638      	mov	r0, r7
 80053b0:	47c0      	blx	r8
 80053b2:	3001      	adds	r0, #1
 80053b4:	d01e      	beq.n	80053f4 <_printf_common+0xa4>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	6922      	ldr	r2, [r4, #16]
 80053ba:	f003 0306 	and.w	r3, r3, #6
 80053be:	2b04      	cmp	r3, #4
 80053c0:	bf02      	ittt	eq
 80053c2:	68e5      	ldreq	r5, [r4, #12]
 80053c4:	6833      	ldreq	r3, [r6, #0]
 80053c6:	1aed      	subeq	r5, r5, r3
 80053c8:	68a3      	ldr	r3, [r4, #8]
 80053ca:	bf0c      	ite	eq
 80053cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053d0:	2500      	movne	r5, #0
 80053d2:	4293      	cmp	r3, r2
 80053d4:	bfc4      	itt	gt
 80053d6:	1a9b      	subgt	r3, r3, r2
 80053d8:	18ed      	addgt	r5, r5, r3
 80053da:	2600      	movs	r6, #0
 80053dc:	341a      	adds	r4, #26
 80053de:	42b5      	cmp	r5, r6
 80053e0:	d11a      	bne.n	8005418 <_printf_common+0xc8>
 80053e2:	2000      	movs	r0, #0
 80053e4:	e008      	b.n	80053f8 <_printf_common+0xa8>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4652      	mov	r2, sl
 80053ea:	4649      	mov	r1, r9
 80053ec:	4638      	mov	r0, r7
 80053ee:	47c0      	blx	r8
 80053f0:	3001      	adds	r0, #1
 80053f2:	d103      	bne.n	80053fc <_printf_common+0xac>
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fc:	3501      	adds	r5, #1
 80053fe:	e7c6      	b.n	800538e <_printf_common+0x3e>
 8005400:	18e1      	adds	r1, r4, r3
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	2030      	movs	r0, #48	; 0x30
 8005406:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800540a:	4422      	add	r2, r4
 800540c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005414:	3302      	adds	r3, #2
 8005416:	e7c7      	b.n	80053a8 <_printf_common+0x58>
 8005418:	2301      	movs	r3, #1
 800541a:	4622      	mov	r2, r4
 800541c:	4649      	mov	r1, r9
 800541e:	4638      	mov	r0, r7
 8005420:	47c0      	blx	r8
 8005422:	3001      	adds	r0, #1
 8005424:	d0e6      	beq.n	80053f4 <_printf_common+0xa4>
 8005426:	3601      	adds	r6, #1
 8005428:	e7d9      	b.n	80053de <_printf_common+0x8e>
	...

0800542c <_printf_i>:
 800542c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005430:	7e0f      	ldrb	r7, [r1, #24]
 8005432:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005434:	2f78      	cmp	r7, #120	; 0x78
 8005436:	4691      	mov	r9, r2
 8005438:	4680      	mov	r8, r0
 800543a:	460c      	mov	r4, r1
 800543c:	469a      	mov	sl, r3
 800543e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005442:	d807      	bhi.n	8005454 <_printf_i+0x28>
 8005444:	2f62      	cmp	r7, #98	; 0x62
 8005446:	d80a      	bhi.n	800545e <_printf_i+0x32>
 8005448:	2f00      	cmp	r7, #0
 800544a:	f000 80d4 	beq.w	80055f6 <_printf_i+0x1ca>
 800544e:	2f58      	cmp	r7, #88	; 0x58
 8005450:	f000 80c0 	beq.w	80055d4 <_printf_i+0x1a8>
 8005454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800545c:	e03a      	b.n	80054d4 <_printf_i+0xa8>
 800545e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005462:	2b15      	cmp	r3, #21
 8005464:	d8f6      	bhi.n	8005454 <_printf_i+0x28>
 8005466:	a101      	add	r1, pc, #4	; (adr r1, 800546c <_printf_i+0x40>)
 8005468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800546c:	080054c5 	.word	0x080054c5
 8005470:	080054d9 	.word	0x080054d9
 8005474:	08005455 	.word	0x08005455
 8005478:	08005455 	.word	0x08005455
 800547c:	08005455 	.word	0x08005455
 8005480:	08005455 	.word	0x08005455
 8005484:	080054d9 	.word	0x080054d9
 8005488:	08005455 	.word	0x08005455
 800548c:	08005455 	.word	0x08005455
 8005490:	08005455 	.word	0x08005455
 8005494:	08005455 	.word	0x08005455
 8005498:	080055dd 	.word	0x080055dd
 800549c:	08005505 	.word	0x08005505
 80054a0:	08005597 	.word	0x08005597
 80054a4:	08005455 	.word	0x08005455
 80054a8:	08005455 	.word	0x08005455
 80054ac:	080055ff 	.word	0x080055ff
 80054b0:	08005455 	.word	0x08005455
 80054b4:	08005505 	.word	0x08005505
 80054b8:	08005455 	.word	0x08005455
 80054bc:	08005455 	.word	0x08005455
 80054c0:	0800559f 	.word	0x0800559f
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	1d1a      	adds	r2, r3, #4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	602a      	str	r2, [r5, #0]
 80054cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054d4:	2301      	movs	r3, #1
 80054d6:	e09f      	b.n	8005618 <_printf_i+0x1ec>
 80054d8:	6820      	ldr	r0, [r4, #0]
 80054da:	682b      	ldr	r3, [r5, #0]
 80054dc:	0607      	lsls	r7, r0, #24
 80054de:	f103 0104 	add.w	r1, r3, #4
 80054e2:	6029      	str	r1, [r5, #0]
 80054e4:	d501      	bpl.n	80054ea <_printf_i+0xbe>
 80054e6:	681e      	ldr	r6, [r3, #0]
 80054e8:	e003      	b.n	80054f2 <_printf_i+0xc6>
 80054ea:	0646      	lsls	r6, r0, #25
 80054ec:	d5fb      	bpl.n	80054e6 <_printf_i+0xba>
 80054ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	da03      	bge.n	80054fe <_printf_i+0xd2>
 80054f6:	232d      	movs	r3, #45	; 0x2d
 80054f8:	4276      	negs	r6, r6
 80054fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054fe:	485a      	ldr	r0, [pc, #360]	; (8005668 <_printf_i+0x23c>)
 8005500:	230a      	movs	r3, #10
 8005502:	e012      	b.n	800552a <_printf_i+0xfe>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	6820      	ldr	r0, [r4, #0]
 8005508:	1d19      	adds	r1, r3, #4
 800550a:	6029      	str	r1, [r5, #0]
 800550c:	0605      	lsls	r5, r0, #24
 800550e:	d501      	bpl.n	8005514 <_printf_i+0xe8>
 8005510:	681e      	ldr	r6, [r3, #0]
 8005512:	e002      	b.n	800551a <_printf_i+0xee>
 8005514:	0641      	lsls	r1, r0, #25
 8005516:	d5fb      	bpl.n	8005510 <_printf_i+0xe4>
 8005518:	881e      	ldrh	r6, [r3, #0]
 800551a:	4853      	ldr	r0, [pc, #332]	; (8005668 <_printf_i+0x23c>)
 800551c:	2f6f      	cmp	r7, #111	; 0x6f
 800551e:	bf0c      	ite	eq
 8005520:	2308      	moveq	r3, #8
 8005522:	230a      	movne	r3, #10
 8005524:	2100      	movs	r1, #0
 8005526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800552a:	6865      	ldr	r5, [r4, #4]
 800552c:	60a5      	str	r5, [r4, #8]
 800552e:	2d00      	cmp	r5, #0
 8005530:	bfa2      	ittt	ge
 8005532:	6821      	ldrge	r1, [r4, #0]
 8005534:	f021 0104 	bicge.w	r1, r1, #4
 8005538:	6021      	strge	r1, [r4, #0]
 800553a:	b90e      	cbnz	r6, 8005540 <_printf_i+0x114>
 800553c:	2d00      	cmp	r5, #0
 800553e:	d04b      	beq.n	80055d8 <_printf_i+0x1ac>
 8005540:	4615      	mov	r5, r2
 8005542:	fbb6 f1f3 	udiv	r1, r6, r3
 8005546:	fb03 6711 	mls	r7, r3, r1, r6
 800554a:	5dc7      	ldrb	r7, [r0, r7]
 800554c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005550:	4637      	mov	r7, r6
 8005552:	42bb      	cmp	r3, r7
 8005554:	460e      	mov	r6, r1
 8005556:	d9f4      	bls.n	8005542 <_printf_i+0x116>
 8005558:	2b08      	cmp	r3, #8
 800555a:	d10b      	bne.n	8005574 <_printf_i+0x148>
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	07de      	lsls	r6, r3, #31
 8005560:	d508      	bpl.n	8005574 <_printf_i+0x148>
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	6861      	ldr	r1, [r4, #4]
 8005566:	4299      	cmp	r1, r3
 8005568:	bfde      	ittt	le
 800556a:	2330      	movle	r3, #48	; 0x30
 800556c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005570:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005574:	1b52      	subs	r2, r2, r5
 8005576:	6122      	str	r2, [r4, #16]
 8005578:	f8cd a000 	str.w	sl, [sp]
 800557c:	464b      	mov	r3, r9
 800557e:	aa03      	add	r2, sp, #12
 8005580:	4621      	mov	r1, r4
 8005582:	4640      	mov	r0, r8
 8005584:	f7ff fee4 	bl	8005350 <_printf_common>
 8005588:	3001      	adds	r0, #1
 800558a:	d14a      	bne.n	8005622 <_printf_i+0x1f6>
 800558c:	f04f 30ff 	mov.w	r0, #4294967295
 8005590:	b004      	add	sp, #16
 8005592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f043 0320 	orr.w	r3, r3, #32
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	4833      	ldr	r0, [pc, #204]	; (800566c <_printf_i+0x240>)
 80055a0:	2778      	movs	r7, #120	; 0x78
 80055a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	6829      	ldr	r1, [r5, #0]
 80055aa:	061f      	lsls	r7, r3, #24
 80055ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80055b0:	d402      	bmi.n	80055b8 <_printf_i+0x18c>
 80055b2:	065f      	lsls	r7, r3, #25
 80055b4:	bf48      	it	mi
 80055b6:	b2b6      	uxthmi	r6, r6
 80055b8:	07df      	lsls	r7, r3, #31
 80055ba:	bf48      	it	mi
 80055bc:	f043 0320 	orrmi.w	r3, r3, #32
 80055c0:	6029      	str	r1, [r5, #0]
 80055c2:	bf48      	it	mi
 80055c4:	6023      	strmi	r3, [r4, #0]
 80055c6:	b91e      	cbnz	r6, 80055d0 <_printf_i+0x1a4>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	f023 0320 	bic.w	r3, r3, #32
 80055ce:	6023      	str	r3, [r4, #0]
 80055d0:	2310      	movs	r3, #16
 80055d2:	e7a7      	b.n	8005524 <_printf_i+0xf8>
 80055d4:	4824      	ldr	r0, [pc, #144]	; (8005668 <_printf_i+0x23c>)
 80055d6:	e7e4      	b.n	80055a2 <_printf_i+0x176>
 80055d8:	4615      	mov	r5, r2
 80055da:	e7bd      	b.n	8005558 <_printf_i+0x12c>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	6826      	ldr	r6, [r4, #0]
 80055e0:	6961      	ldr	r1, [r4, #20]
 80055e2:	1d18      	adds	r0, r3, #4
 80055e4:	6028      	str	r0, [r5, #0]
 80055e6:	0635      	lsls	r5, r6, #24
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	d501      	bpl.n	80055f0 <_printf_i+0x1c4>
 80055ec:	6019      	str	r1, [r3, #0]
 80055ee:	e002      	b.n	80055f6 <_printf_i+0x1ca>
 80055f0:	0670      	lsls	r0, r6, #25
 80055f2:	d5fb      	bpl.n	80055ec <_printf_i+0x1c0>
 80055f4:	8019      	strh	r1, [r3, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	6123      	str	r3, [r4, #16]
 80055fa:	4615      	mov	r5, r2
 80055fc:	e7bc      	b.n	8005578 <_printf_i+0x14c>
 80055fe:	682b      	ldr	r3, [r5, #0]
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	602a      	str	r2, [r5, #0]
 8005604:	681d      	ldr	r5, [r3, #0]
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	2100      	movs	r1, #0
 800560a:	4628      	mov	r0, r5
 800560c:	f7fa fe00 	bl	8000210 <memchr>
 8005610:	b108      	cbz	r0, 8005616 <_printf_i+0x1ea>
 8005612:	1b40      	subs	r0, r0, r5
 8005614:	6060      	str	r0, [r4, #4]
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	2300      	movs	r3, #0
 800561c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005620:	e7aa      	b.n	8005578 <_printf_i+0x14c>
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	462a      	mov	r2, r5
 8005626:	4649      	mov	r1, r9
 8005628:	4640      	mov	r0, r8
 800562a:	47d0      	blx	sl
 800562c:	3001      	adds	r0, #1
 800562e:	d0ad      	beq.n	800558c <_printf_i+0x160>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	079b      	lsls	r3, r3, #30
 8005634:	d413      	bmi.n	800565e <_printf_i+0x232>
 8005636:	68e0      	ldr	r0, [r4, #12]
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	4298      	cmp	r0, r3
 800563c:	bfb8      	it	lt
 800563e:	4618      	movlt	r0, r3
 8005640:	e7a6      	b.n	8005590 <_printf_i+0x164>
 8005642:	2301      	movs	r3, #1
 8005644:	4632      	mov	r2, r6
 8005646:	4649      	mov	r1, r9
 8005648:	4640      	mov	r0, r8
 800564a:	47d0      	blx	sl
 800564c:	3001      	adds	r0, #1
 800564e:	d09d      	beq.n	800558c <_printf_i+0x160>
 8005650:	3501      	adds	r5, #1
 8005652:	68e3      	ldr	r3, [r4, #12]
 8005654:	9903      	ldr	r1, [sp, #12]
 8005656:	1a5b      	subs	r3, r3, r1
 8005658:	42ab      	cmp	r3, r5
 800565a:	dcf2      	bgt.n	8005642 <_printf_i+0x216>
 800565c:	e7eb      	b.n	8005636 <_printf_i+0x20a>
 800565e:	2500      	movs	r5, #0
 8005660:	f104 0619 	add.w	r6, r4, #25
 8005664:	e7f5      	b.n	8005652 <_printf_i+0x226>
 8005666:	bf00      	nop
 8005668:	08007ef2 	.word	0x08007ef2
 800566c:	08007f03 	.word	0x08007f03

08005670 <std>:
 8005670:	2300      	movs	r3, #0
 8005672:	b510      	push	{r4, lr}
 8005674:	4604      	mov	r4, r0
 8005676:	e9c0 3300 	strd	r3, r3, [r0]
 800567a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800567e:	6083      	str	r3, [r0, #8]
 8005680:	8181      	strh	r1, [r0, #12]
 8005682:	6643      	str	r3, [r0, #100]	; 0x64
 8005684:	81c2      	strh	r2, [r0, #14]
 8005686:	6183      	str	r3, [r0, #24]
 8005688:	4619      	mov	r1, r3
 800568a:	2208      	movs	r2, #8
 800568c:	305c      	adds	r0, #92	; 0x5c
 800568e:	f000 f9f7 	bl	8005a80 <memset>
 8005692:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <std+0x58>)
 8005694:	6263      	str	r3, [r4, #36]	; 0x24
 8005696:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <std+0x5c>)
 8005698:	62a3      	str	r3, [r4, #40]	; 0x28
 800569a:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <std+0x60>)
 800569c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800569e:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <std+0x64>)
 80056a0:	6323      	str	r3, [r4, #48]	; 0x30
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <std+0x68>)
 80056a4:	6224      	str	r4, [r4, #32]
 80056a6:	429c      	cmp	r4, r3
 80056a8:	d006      	beq.n	80056b8 <std+0x48>
 80056aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80056ae:	4294      	cmp	r4, r2
 80056b0:	d002      	beq.n	80056b8 <std+0x48>
 80056b2:	33d0      	adds	r3, #208	; 0xd0
 80056b4:	429c      	cmp	r4, r3
 80056b6:	d105      	bne.n	80056c4 <std+0x54>
 80056b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c0:	f000 ba5a 	b.w	8005b78 <__retarget_lock_init_recursive>
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	bf00      	nop
 80056c8:	080058d1 	.word	0x080058d1
 80056cc:	080058f3 	.word	0x080058f3
 80056d0:	0800592b 	.word	0x0800592b
 80056d4:	0800594f 	.word	0x0800594f
 80056d8:	200005ec 	.word	0x200005ec

080056dc <stdio_exit_handler>:
 80056dc:	4a02      	ldr	r2, [pc, #8]	; (80056e8 <stdio_exit_handler+0xc>)
 80056de:	4903      	ldr	r1, [pc, #12]	; (80056ec <stdio_exit_handler+0x10>)
 80056e0:	4803      	ldr	r0, [pc, #12]	; (80056f0 <stdio_exit_handler+0x14>)
 80056e2:	f000 b869 	b.w	80057b8 <_fwalk_sglue>
 80056e6:	bf00      	nop
 80056e8:	2000000c 	.word	0x2000000c
 80056ec:	08007501 	.word	0x08007501
 80056f0:	20000018 	.word	0x20000018

080056f4 <cleanup_stdio>:
 80056f4:	6841      	ldr	r1, [r0, #4]
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <cleanup_stdio+0x34>)
 80056f8:	4299      	cmp	r1, r3
 80056fa:	b510      	push	{r4, lr}
 80056fc:	4604      	mov	r4, r0
 80056fe:	d001      	beq.n	8005704 <cleanup_stdio+0x10>
 8005700:	f001 fefe 	bl	8007500 <_fflush_r>
 8005704:	68a1      	ldr	r1, [r4, #8]
 8005706:	4b09      	ldr	r3, [pc, #36]	; (800572c <cleanup_stdio+0x38>)
 8005708:	4299      	cmp	r1, r3
 800570a:	d002      	beq.n	8005712 <cleanup_stdio+0x1e>
 800570c:	4620      	mov	r0, r4
 800570e:	f001 fef7 	bl	8007500 <_fflush_r>
 8005712:	68e1      	ldr	r1, [r4, #12]
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <cleanup_stdio+0x3c>)
 8005716:	4299      	cmp	r1, r3
 8005718:	d004      	beq.n	8005724 <cleanup_stdio+0x30>
 800571a:	4620      	mov	r0, r4
 800571c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005720:	f001 beee 	b.w	8007500 <_fflush_r>
 8005724:	bd10      	pop	{r4, pc}
 8005726:	bf00      	nop
 8005728:	200005ec 	.word	0x200005ec
 800572c:	20000654 	.word	0x20000654
 8005730:	200006bc 	.word	0x200006bc

08005734 <global_stdio_init.part.0>:
 8005734:	b510      	push	{r4, lr}
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <global_stdio_init.part.0+0x30>)
 8005738:	4c0b      	ldr	r4, [pc, #44]	; (8005768 <global_stdio_init.part.0+0x34>)
 800573a:	4a0c      	ldr	r2, [pc, #48]	; (800576c <global_stdio_init.part.0+0x38>)
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	4620      	mov	r0, r4
 8005740:	2200      	movs	r2, #0
 8005742:	2104      	movs	r1, #4
 8005744:	f7ff ff94 	bl	8005670 <std>
 8005748:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800574c:	2201      	movs	r2, #1
 800574e:	2109      	movs	r1, #9
 8005750:	f7ff ff8e 	bl	8005670 <std>
 8005754:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005758:	2202      	movs	r2, #2
 800575a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800575e:	2112      	movs	r1, #18
 8005760:	f7ff bf86 	b.w	8005670 <std>
 8005764:	20000724 	.word	0x20000724
 8005768:	200005ec 	.word	0x200005ec
 800576c:	080056dd 	.word	0x080056dd

08005770 <__sfp_lock_acquire>:
 8005770:	4801      	ldr	r0, [pc, #4]	; (8005778 <__sfp_lock_acquire+0x8>)
 8005772:	f000 ba02 	b.w	8005b7a <__retarget_lock_acquire_recursive>
 8005776:	bf00      	nop
 8005778:	2000072d 	.word	0x2000072d

0800577c <__sfp_lock_release>:
 800577c:	4801      	ldr	r0, [pc, #4]	; (8005784 <__sfp_lock_release+0x8>)
 800577e:	f000 b9fd 	b.w	8005b7c <__retarget_lock_release_recursive>
 8005782:	bf00      	nop
 8005784:	2000072d 	.word	0x2000072d

08005788 <__sinit>:
 8005788:	b510      	push	{r4, lr}
 800578a:	4604      	mov	r4, r0
 800578c:	f7ff fff0 	bl	8005770 <__sfp_lock_acquire>
 8005790:	6a23      	ldr	r3, [r4, #32]
 8005792:	b11b      	cbz	r3, 800579c <__sinit+0x14>
 8005794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005798:	f7ff bff0 	b.w	800577c <__sfp_lock_release>
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <__sinit+0x28>)
 800579e:	6223      	str	r3, [r4, #32]
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <__sinit+0x2c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f5      	bne.n	8005794 <__sinit+0xc>
 80057a8:	f7ff ffc4 	bl	8005734 <global_stdio_init.part.0>
 80057ac:	e7f2      	b.n	8005794 <__sinit+0xc>
 80057ae:	bf00      	nop
 80057b0:	080056f5 	.word	0x080056f5
 80057b4:	20000724 	.word	0x20000724

080057b8 <_fwalk_sglue>:
 80057b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057bc:	4607      	mov	r7, r0
 80057be:	4688      	mov	r8, r1
 80057c0:	4614      	mov	r4, r2
 80057c2:	2600      	movs	r6, #0
 80057c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057c8:	f1b9 0901 	subs.w	r9, r9, #1
 80057cc:	d505      	bpl.n	80057da <_fwalk_sglue+0x22>
 80057ce:	6824      	ldr	r4, [r4, #0]
 80057d0:	2c00      	cmp	r4, #0
 80057d2:	d1f7      	bne.n	80057c4 <_fwalk_sglue+0xc>
 80057d4:	4630      	mov	r0, r6
 80057d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057da:	89ab      	ldrh	r3, [r5, #12]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d907      	bls.n	80057f0 <_fwalk_sglue+0x38>
 80057e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057e4:	3301      	adds	r3, #1
 80057e6:	d003      	beq.n	80057f0 <_fwalk_sglue+0x38>
 80057e8:	4629      	mov	r1, r5
 80057ea:	4638      	mov	r0, r7
 80057ec:	47c0      	blx	r8
 80057ee:	4306      	orrs	r6, r0
 80057f0:	3568      	adds	r5, #104	; 0x68
 80057f2:	e7e9      	b.n	80057c8 <_fwalk_sglue+0x10>

080057f4 <iprintf>:
 80057f4:	b40f      	push	{r0, r1, r2, r3}
 80057f6:	b507      	push	{r0, r1, r2, lr}
 80057f8:	4906      	ldr	r1, [pc, #24]	; (8005814 <iprintf+0x20>)
 80057fa:	ab04      	add	r3, sp, #16
 80057fc:	6808      	ldr	r0, [r1, #0]
 80057fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005802:	6881      	ldr	r1, [r0, #8]
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	f001 fcdb 	bl	80071c0 <_vfiprintf_r>
 800580a:	b003      	add	sp, #12
 800580c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005810:	b004      	add	sp, #16
 8005812:	4770      	bx	lr
 8005814:	20000064 	.word	0x20000064

08005818 <_puts_r>:
 8005818:	6a03      	ldr	r3, [r0, #32]
 800581a:	b570      	push	{r4, r5, r6, lr}
 800581c:	6884      	ldr	r4, [r0, #8]
 800581e:	4605      	mov	r5, r0
 8005820:	460e      	mov	r6, r1
 8005822:	b90b      	cbnz	r3, 8005828 <_puts_r+0x10>
 8005824:	f7ff ffb0 	bl	8005788 <__sinit>
 8005828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800582a:	07db      	lsls	r3, r3, #31
 800582c:	d405      	bmi.n	800583a <_puts_r+0x22>
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	0598      	lsls	r0, r3, #22
 8005832:	d402      	bmi.n	800583a <_puts_r+0x22>
 8005834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005836:	f000 f9a0 	bl	8005b7a <__retarget_lock_acquire_recursive>
 800583a:	89a3      	ldrh	r3, [r4, #12]
 800583c:	0719      	lsls	r1, r3, #28
 800583e:	d513      	bpl.n	8005868 <_puts_r+0x50>
 8005840:	6923      	ldr	r3, [r4, #16]
 8005842:	b18b      	cbz	r3, 8005868 <_puts_r+0x50>
 8005844:	3e01      	subs	r6, #1
 8005846:	68a3      	ldr	r3, [r4, #8]
 8005848:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800584c:	3b01      	subs	r3, #1
 800584e:	60a3      	str	r3, [r4, #8]
 8005850:	b9e9      	cbnz	r1, 800588e <_puts_r+0x76>
 8005852:	2b00      	cmp	r3, #0
 8005854:	da2e      	bge.n	80058b4 <_puts_r+0x9c>
 8005856:	4622      	mov	r2, r4
 8005858:	210a      	movs	r1, #10
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f87b 	bl	8005956 <__swbuf_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d007      	beq.n	8005874 <_puts_r+0x5c>
 8005864:	250a      	movs	r5, #10
 8005866:	e007      	b.n	8005878 <_puts_r+0x60>
 8005868:	4621      	mov	r1, r4
 800586a:	4628      	mov	r0, r5
 800586c:	f000 f8b0 	bl	80059d0 <__swsetup_r>
 8005870:	2800      	cmp	r0, #0
 8005872:	d0e7      	beq.n	8005844 <_puts_r+0x2c>
 8005874:	f04f 35ff 	mov.w	r5, #4294967295
 8005878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800587a:	07da      	lsls	r2, r3, #31
 800587c:	d405      	bmi.n	800588a <_puts_r+0x72>
 800587e:	89a3      	ldrh	r3, [r4, #12]
 8005880:	059b      	lsls	r3, r3, #22
 8005882:	d402      	bmi.n	800588a <_puts_r+0x72>
 8005884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005886:	f000 f979 	bl	8005b7c <__retarget_lock_release_recursive>
 800588a:	4628      	mov	r0, r5
 800588c:	bd70      	pop	{r4, r5, r6, pc}
 800588e:	2b00      	cmp	r3, #0
 8005890:	da04      	bge.n	800589c <_puts_r+0x84>
 8005892:	69a2      	ldr	r2, [r4, #24]
 8005894:	429a      	cmp	r2, r3
 8005896:	dc06      	bgt.n	80058a6 <_puts_r+0x8e>
 8005898:	290a      	cmp	r1, #10
 800589a:	d004      	beq.n	80058a6 <_puts_r+0x8e>
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	6022      	str	r2, [r4, #0]
 80058a2:	7019      	strb	r1, [r3, #0]
 80058a4:	e7cf      	b.n	8005846 <_puts_r+0x2e>
 80058a6:	4622      	mov	r2, r4
 80058a8:	4628      	mov	r0, r5
 80058aa:	f000 f854 	bl	8005956 <__swbuf_r>
 80058ae:	3001      	adds	r0, #1
 80058b0:	d1c9      	bne.n	8005846 <_puts_r+0x2e>
 80058b2:	e7df      	b.n	8005874 <_puts_r+0x5c>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	250a      	movs	r5, #10
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	6022      	str	r2, [r4, #0]
 80058bc:	701d      	strb	r5, [r3, #0]
 80058be:	e7db      	b.n	8005878 <_puts_r+0x60>

080058c0 <puts>:
 80058c0:	4b02      	ldr	r3, [pc, #8]	; (80058cc <puts+0xc>)
 80058c2:	4601      	mov	r1, r0
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	f7ff bfa7 	b.w	8005818 <_puts_r>
 80058ca:	bf00      	nop
 80058cc:	20000064 	.word	0x20000064

080058d0 <__sread>:
 80058d0:	b510      	push	{r4, lr}
 80058d2:	460c      	mov	r4, r1
 80058d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d8:	f000 f900 	bl	8005adc <_read_r>
 80058dc:	2800      	cmp	r0, #0
 80058de:	bfab      	itete	ge
 80058e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058e2:	89a3      	ldrhlt	r3, [r4, #12]
 80058e4:	181b      	addge	r3, r3, r0
 80058e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058ea:	bfac      	ite	ge
 80058ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80058ee:	81a3      	strhlt	r3, [r4, #12]
 80058f0:	bd10      	pop	{r4, pc}

080058f2 <__swrite>:
 80058f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f6:	461f      	mov	r7, r3
 80058f8:	898b      	ldrh	r3, [r1, #12]
 80058fa:	05db      	lsls	r3, r3, #23
 80058fc:	4605      	mov	r5, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	4616      	mov	r6, r2
 8005902:	d505      	bpl.n	8005910 <__swrite+0x1e>
 8005904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005908:	2302      	movs	r3, #2
 800590a:	2200      	movs	r2, #0
 800590c:	f000 f8d4 	bl	8005ab8 <_lseek_r>
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	4632      	mov	r2, r6
 800591e:	463b      	mov	r3, r7
 8005920:	4628      	mov	r0, r5
 8005922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005926:	f000 b8eb 	b.w	8005b00 <_write_r>

0800592a <__sseek>:
 800592a:	b510      	push	{r4, lr}
 800592c:	460c      	mov	r4, r1
 800592e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005932:	f000 f8c1 	bl	8005ab8 <_lseek_r>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	bf15      	itete	ne
 800593c:	6560      	strne	r0, [r4, #84]	; 0x54
 800593e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005946:	81a3      	strheq	r3, [r4, #12]
 8005948:	bf18      	it	ne
 800594a:	81a3      	strhne	r3, [r4, #12]
 800594c:	bd10      	pop	{r4, pc}

0800594e <__sclose>:
 800594e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005952:	f000 b8a1 	b.w	8005a98 <_close_r>

08005956 <__swbuf_r>:
 8005956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005958:	460e      	mov	r6, r1
 800595a:	4614      	mov	r4, r2
 800595c:	4605      	mov	r5, r0
 800595e:	b118      	cbz	r0, 8005968 <__swbuf_r+0x12>
 8005960:	6a03      	ldr	r3, [r0, #32]
 8005962:	b90b      	cbnz	r3, 8005968 <__swbuf_r+0x12>
 8005964:	f7ff ff10 	bl	8005788 <__sinit>
 8005968:	69a3      	ldr	r3, [r4, #24]
 800596a:	60a3      	str	r3, [r4, #8]
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	071a      	lsls	r2, r3, #28
 8005970:	d525      	bpl.n	80059be <__swbuf_r+0x68>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	b31b      	cbz	r3, 80059be <__swbuf_r+0x68>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	6922      	ldr	r2, [r4, #16]
 800597a:	1a98      	subs	r0, r3, r2
 800597c:	6963      	ldr	r3, [r4, #20]
 800597e:	b2f6      	uxtb	r6, r6
 8005980:	4283      	cmp	r3, r0
 8005982:	4637      	mov	r7, r6
 8005984:	dc04      	bgt.n	8005990 <__swbuf_r+0x3a>
 8005986:	4621      	mov	r1, r4
 8005988:	4628      	mov	r0, r5
 800598a:	f001 fdb9 	bl	8007500 <_fflush_r>
 800598e:	b9e0      	cbnz	r0, 80059ca <__swbuf_r+0x74>
 8005990:	68a3      	ldr	r3, [r4, #8]
 8005992:	3b01      	subs	r3, #1
 8005994:	60a3      	str	r3, [r4, #8]
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	6022      	str	r2, [r4, #0]
 800599c:	701e      	strb	r6, [r3, #0]
 800599e:	6962      	ldr	r2, [r4, #20]
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d004      	beq.n	80059b0 <__swbuf_r+0x5a>
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	07db      	lsls	r3, r3, #31
 80059aa:	d506      	bpl.n	80059ba <__swbuf_r+0x64>
 80059ac:	2e0a      	cmp	r6, #10
 80059ae:	d104      	bne.n	80059ba <__swbuf_r+0x64>
 80059b0:	4621      	mov	r1, r4
 80059b2:	4628      	mov	r0, r5
 80059b4:	f001 fda4 	bl	8007500 <_fflush_r>
 80059b8:	b938      	cbnz	r0, 80059ca <__swbuf_r+0x74>
 80059ba:	4638      	mov	r0, r7
 80059bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059be:	4621      	mov	r1, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 f805 	bl	80059d0 <__swsetup_r>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d0d5      	beq.n	8005976 <__swbuf_r+0x20>
 80059ca:	f04f 37ff 	mov.w	r7, #4294967295
 80059ce:	e7f4      	b.n	80059ba <__swbuf_r+0x64>

080059d0 <__swsetup_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4b2a      	ldr	r3, [pc, #168]	; (8005a7c <__swsetup_r+0xac>)
 80059d4:	4605      	mov	r5, r0
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	460c      	mov	r4, r1
 80059da:	b118      	cbz	r0, 80059e4 <__swsetup_r+0x14>
 80059dc:	6a03      	ldr	r3, [r0, #32]
 80059de:	b90b      	cbnz	r3, 80059e4 <__swsetup_r+0x14>
 80059e0:	f7ff fed2 	bl	8005788 <__sinit>
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059ea:	0718      	lsls	r0, r3, #28
 80059ec:	d422      	bmi.n	8005a34 <__swsetup_r+0x64>
 80059ee:	06d9      	lsls	r1, r3, #27
 80059f0:	d407      	bmi.n	8005a02 <__swsetup_r+0x32>
 80059f2:	2309      	movs	r3, #9
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059fa:	81a3      	strh	r3, [r4, #12]
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005a00:	e034      	b.n	8005a6c <__swsetup_r+0x9c>
 8005a02:	0758      	lsls	r0, r3, #29
 8005a04:	d512      	bpl.n	8005a2c <__swsetup_r+0x5c>
 8005a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a08:	b141      	cbz	r1, 8005a1c <__swsetup_r+0x4c>
 8005a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	d002      	beq.n	8005a18 <__swsetup_r+0x48>
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 ff2e 	bl	8006874 <_free_r>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6363      	str	r3, [r4, #52]	; 0x34
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	2300      	movs	r3, #0
 8005a26:	6063      	str	r3, [r4, #4]
 8005a28:	6923      	ldr	r3, [r4, #16]
 8005a2a:	6023      	str	r3, [r4, #0]
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	f043 0308 	orr.w	r3, r3, #8
 8005a32:	81a3      	strh	r3, [r4, #12]
 8005a34:	6923      	ldr	r3, [r4, #16]
 8005a36:	b94b      	cbnz	r3, 8005a4c <__swsetup_r+0x7c>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a42:	d003      	beq.n	8005a4c <__swsetup_r+0x7c>
 8005a44:	4621      	mov	r1, r4
 8005a46:	4628      	mov	r0, r5
 8005a48:	f001 fda8 	bl	800759c <__smakebuf_r>
 8005a4c:	89a0      	ldrh	r0, [r4, #12]
 8005a4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a52:	f010 0301 	ands.w	r3, r0, #1
 8005a56:	d00a      	beq.n	8005a6e <__swsetup_r+0x9e>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60a3      	str	r3, [r4, #8]
 8005a5c:	6963      	ldr	r3, [r4, #20]
 8005a5e:	425b      	negs	r3, r3
 8005a60:	61a3      	str	r3, [r4, #24]
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	b943      	cbnz	r3, 8005a78 <__swsetup_r+0xa8>
 8005a66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a6a:	d1c4      	bne.n	80059f6 <__swsetup_r+0x26>
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
 8005a6e:	0781      	lsls	r1, r0, #30
 8005a70:	bf58      	it	pl
 8005a72:	6963      	ldrpl	r3, [r4, #20]
 8005a74:	60a3      	str	r3, [r4, #8]
 8005a76:	e7f4      	b.n	8005a62 <__swsetup_r+0x92>
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e7f7      	b.n	8005a6c <__swsetup_r+0x9c>
 8005a7c:	20000064 	.word	0x20000064

08005a80 <memset>:
 8005a80:	4402      	add	r2, r0
 8005a82:	4603      	mov	r3, r0
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d100      	bne.n	8005a8a <memset+0xa>
 8005a88:	4770      	bx	lr
 8005a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a8e:	e7f9      	b.n	8005a84 <memset+0x4>

08005a90 <_localeconv_r>:
 8005a90:	4800      	ldr	r0, [pc, #0]	; (8005a94 <_localeconv_r+0x4>)
 8005a92:	4770      	bx	lr
 8005a94:	20000158 	.word	0x20000158

08005a98 <_close_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d06      	ldr	r5, [pc, #24]	; (8005ab4 <_close_r+0x1c>)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	f7fc fa3d 	bl	8001f22 <_close>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_close_r+0x1a>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_close_r+0x1a>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20000728 	.word	0x20000728

08005ab8 <_lseek_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	; (8005ad8 <_lseek_r+0x20>)
 8005abc:	4604      	mov	r4, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fc fa52 	bl	8001f70 <_lseek>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_lseek_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_lseek_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20000728 	.word	0x20000728

08005adc <_read_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	; (8005afc <_read_r+0x20>)
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fc f9e0 	bl	8001eb0 <_read>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_read_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_read_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20000728 	.word	0x20000728

08005b00 <_write_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	; (8005b20 <_write_r+0x20>)
 8005b04:	4604      	mov	r4, r0
 8005b06:	4608      	mov	r0, r1
 8005b08:	4611      	mov	r1, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7fc f9eb 	bl	8001eea <_write>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_write_r+0x1e>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_write_r+0x1e>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20000728 	.word	0x20000728

08005b24 <__errno>:
 8005b24:	4b01      	ldr	r3, [pc, #4]	; (8005b2c <__errno+0x8>)
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000064 	.word	0x20000064

08005b30 <__libc_init_array>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	4d0d      	ldr	r5, [pc, #52]	; (8005b68 <__libc_init_array+0x38>)
 8005b34:	4c0d      	ldr	r4, [pc, #52]	; (8005b6c <__libc_init_array+0x3c>)
 8005b36:	1b64      	subs	r4, r4, r5
 8005b38:	10a4      	asrs	r4, r4, #2
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	42a6      	cmp	r6, r4
 8005b3e:	d109      	bne.n	8005b54 <__libc_init_array+0x24>
 8005b40:	4d0b      	ldr	r5, [pc, #44]	; (8005b70 <__libc_init_array+0x40>)
 8005b42:	4c0c      	ldr	r4, [pc, #48]	; (8005b74 <__libc_init_array+0x44>)
 8005b44:	f002 f802 	bl	8007b4c <_init>
 8005b48:	1b64      	subs	r4, r4, r5
 8005b4a:	10a4      	asrs	r4, r4, #2
 8005b4c:	2600      	movs	r6, #0
 8005b4e:	42a6      	cmp	r6, r4
 8005b50:	d105      	bne.n	8005b5e <__libc_init_array+0x2e>
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b58:	4798      	blx	r3
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	e7ee      	b.n	8005b3c <__libc_init_array+0xc>
 8005b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b62:	4798      	blx	r3
 8005b64:	3601      	adds	r6, #1
 8005b66:	e7f2      	b.n	8005b4e <__libc_init_array+0x1e>
 8005b68:	080082a0 	.word	0x080082a0
 8005b6c:	080082a0 	.word	0x080082a0
 8005b70:	080082a0 	.word	0x080082a0
 8005b74:	080082a4 	.word	0x080082a4

08005b78 <__retarget_lock_init_recursive>:
 8005b78:	4770      	bx	lr

08005b7a <__retarget_lock_acquire_recursive>:
 8005b7a:	4770      	bx	lr

08005b7c <__retarget_lock_release_recursive>:
 8005b7c:	4770      	bx	lr

08005b7e <quorem>:
 8005b7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b82:	6903      	ldr	r3, [r0, #16]
 8005b84:	690c      	ldr	r4, [r1, #16]
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	4607      	mov	r7, r0
 8005b8a:	db7e      	blt.n	8005c8a <quorem+0x10c>
 8005b8c:	3c01      	subs	r4, #1
 8005b8e:	f101 0814 	add.w	r8, r1, #20
 8005b92:	f100 0514 	add.w	r5, r0, #20
 8005b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bb4:	d331      	bcc.n	8005c1a <quorem+0x9c>
 8005bb6:	f04f 0e00 	mov.w	lr, #0
 8005bba:	4640      	mov	r0, r8
 8005bbc:	46ac      	mov	ip, r5
 8005bbe:	46f2      	mov	sl, lr
 8005bc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005bc4:	b293      	uxth	r3, r2
 8005bc6:	fb06 e303 	mla	r3, r6, r3, lr
 8005bca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bce:	0c1a      	lsrs	r2, r3, #16
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	ebaa 0303 	sub.w	r3, sl, r3
 8005bd6:	f8dc a000 	ldr.w	sl, [ip]
 8005bda:	fa13 f38a 	uxtah	r3, r3, sl
 8005bde:	fb06 220e 	mla	r2, r6, lr, r2
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	9b00      	ldr	r3, [sp, #0]
 8005be6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bea:	b292      	uxth	r2, r2
 8005bec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005bf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bf4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005bf8:	4581      	cmp	r9, r0
 8005bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bfe:	f84c 3b04 	str.w	r3, [ip], #4
 8005c02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c06:	d2db      	bcs.n	8005bc0 <quorem+0x42>
 8005c08:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c0c:	b92b      	cbnz	r3, 8005c1a <quorem+0x9c>
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	3b04      	subs	r3, #4
 8005c12:	429d      	cmp	r5, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	d32c      	bcc.n	8005c72 <quorem+0xf4>
 8005c18:	613c      	str	r4, [r7, #16]
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	f001 f9a6 	bl	8006f6c <__mcmp>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	db22      	blt.n	8005c6a <quorem+0xec>
 8005c24:	3601      	adds	r6, #1
 8005c26:	4629      	mov	r1, r5
 8005c28:	2000      	movs	r0, #0
 8005c2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c2e:	f8d1 c000 	ldr.w	ip, [r1]
 8005c32:	b293      	uxth	r3, r2
 8005c34:	1ac3      	subs	r3, r0, r3
 8005c36:	0c12      	lsrs	r2, r2, #16
 8005c38:	fa13 f38c 	uxtah	r3, r3, ip
 8005c3c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c4a:	45c1      	cmp	r9, r8
 8005c4c:	f841 3b04 	str.w	r3, [r1], #4
 8005c50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c54:	d2e9      	bcs.n	8005c2a <quorem+0xac>
 8005c56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c5e:	b922      	cbnz	r2, 8005c6a <quorem+0xec>
 8005c60:	3b04      	subs	r3, #4
 8005c62:	429d      	cmp	r5, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	d30a      	bcc.n	8005c7e <quorem+0x100>
 8005c68:	613c      	str	r4, [r7, #16]
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	b003      	add	sp, #12
 8005c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	3b04      	subs	r3, #4
 8005c76:	2a00      	cmp	r2, #0
 8005c78:	d1ce      	bne.n	8005c18 <quorem+0x9a>
 8005c7a:	3c01      	subs	r4, #1
 8005c7c:	e7c9      	b.n	8005c12 <quorem+0x94>
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	3b04      	subs	r3, #4
 8005c82:	2a00      	cmp	r2, #0
 8005c84:	d1f0      	bne.n	8005c68 <quorem+0xea>
 8005c86:	3c01      	subs	r4, #1
 8005c88:	e7eb      	b.n	8005c62 <quorem+0xe4>
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	e7ee      	b.n	8005c6c <quorem+0xee>
	...

08005c90 <_dtoa_r>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	ed2d 8b04 	vpush	{d8-d9}
 8005c98:	69c5      	ldr	r5, [r0, #28]
 8005c9a:	b093      	sub	sp, #76	; 0x4c
 8005c9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ca0:	ec57 6b10 	vmov	r6, r7, d0
 8005ca4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ca8:	9107      	str	r1, [sp, #28]
 8005caa:	4604      	mov	r4, r0
 8005cac:	920a      	str	r2, [sp, #40]	; 0x28
 8005cae:	930d      	str	r3, [sp, #52]	; 0x34
 8005cb0:	b975      	cbnz	r5, 8005cd0 <_dtoa_r+0x40>
 8005cb2:	2010      	movs	r0, #16
 8005cb4:	f000 fe2a 	bl	800690c <malloc>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	61e0      	str	r0, [r4, #28]
 8005cbc:	b920      	cbnz	r0, 8005cc8 <_dtoa_r+0x38>
 8005cbe:	4bae      	ldr	r3, [pc, #696]	; (8005f78 <_dtoa_r+0x2e8>)
 8005cc0:	21ef      	movs	r1, #239	; 0xef
 8005cc2:	48ae      	ldr	r0, [pc, #696]	; (8005f7c <_dtoa_r+0x2ec>)
 8005cc4:	f001 fce6 	bl	8007694 <__assert_func>
 8005cc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ccc:	6005      	str	r5, [r0, #0]
 8005cce:	60c5      	str	r5, [r0, #12]
 8005cd0:	69e3      	ldr	r3, [r4, #28]
 8005cd2:	6819      	ldr	r1, [r3, #0]
 8005cd4:	b151      	cbz	r1, 8005cec <_dtoa_r+0x5c>
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	604a      	str	r2, [r1, #4]
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4093      	lsls	r3, r2
 8005cde:	608b      	str	r3, [r1, #8]
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 ff07 	bl	8006af4 <_Bfree>
 8005ce6:	69e3      	ldr	r3, [r4, #28]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	1e3b      	subs	r3, r7, #0
 8005cee:	bfbb      	ittet	lt
 8005cf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cf4:	9303      	strlt	r3, [sp, #12]
 8005cf6:	2300      	movge	r3, #0
 8005cf8:	2201      	movlt	r2, #1
 8005cfa:	bfac      	ite	ge
 8005cfc:	f8c8 3000 	strge.w	r3, [r8]
 8005d00:	f8c8 2000 	strlt.w	r2, [r8]
 8005d04:	4b9e      	ldr	r3, [pc, #632]	; (8005f80 <_dtoa_r+0x2f0>)
 8005d06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d0a:	ea33 0308 	bics.w	r3, r3, r8
 8005d0e:	d11b      	bne.n	8005d48 <_dtoa_r+0xb8>
 8005d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d12:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005d1c:	4333      	orrs	r3, r6
 8005d1e:	f000 8593 	beq.w	8006848 <_dtoa_r+0xbb8>
 8005d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d24:	b963      	cbnz	r3, 8005d40 <_dtoa_r+0xb0>
 8005d26:	4b97      	ldr	r3, [pc, #604]	; (8005f84 <_dtoa_r+0x2f4>)
 8005d28:	e027      	b.n	8005d7a <_dtoa_r+0xea>
 8005d2a:	4b97      	ldr	r3, [pc, #604]	; (8005f88 <_dtoa_r+0x2f8>)
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	9800      	ldr	r0, [sp, #0]
 8005d36:	b013      	add	sp, #76	; 0x4c
 8005d38:	ecbd 8b04 	vpop	{d8-d9}
 8005d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d40:	4b90      	ldr	r3, [pc, #576]	; (8005f84 <_dtoa_r+0x2f4>)
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	3303      	adds	r3, #3
 8005d46:	e7f3      	b.n	8005d30 <_dtoa_r+0xa0>
 8005d48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	ec51 0b17 	vmov	r0, r1, d7
 8005d52:	eeb0 8a47 	vmov.f32	s16, s14
 8005d56:	eef0 8a67 	vmov.f32	s17, s15
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f7fa fed4 	bl	8000b08 <__aeabi_dcmpeq>
 8005d60:	4681      	mov	r9, r0
 8005d62:	b160      	cbz	r0, 8005d7e <_dtoa_r+0xee>
 8005d64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d66:	2301      	movs	r3, #1
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8568 	beq.w	8006842 <_dtoa_r+0xbb2>
 8005d72:	4b86      	ldr	r3, [pc, #536]	; (8005f8c <_dtoa_r+0x2fc>)
 8005d74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	e7da      	b.n	8005d34 <_dtoa_r+0xa4>
 8005d7e:	aa10      	add	r2, sp, #64	; 0x40
 8005d80:	a911      	add	r1, sp, #68	; 0x44
 8005d82:	4620      	mov	r0, r4
 8005d84:	eeb0 0a48 	vmov.f32	s0, s16
 8005d88:	eef0 0a68 	vmov.f32	s1, s17
 8005d8c:	f001 f994 	bl	80070b8 <__d2b>
 8005d90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005d94:	4682      	mov	sl, r0
 8005d96:	2d00      	cmp	r5, #0
 8005d98:	d07f      	beq.n	8005e9a <_dtoa_r+0x20a>
 8005d9a:	ee18 3a90 	vmov	r3, s17
 8005d9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005da6:	ec51 0b18 	vmov	r0, r1, d8
 8005daa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005dae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005db2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005db6:	4619      	mov	r1, r3
 8005db8:	2200      	movs	r2, #0
 8005dba:	4b75      	ldr	r3, [pc, #468]	; (8005f90 <_dtoa_r+0x300>)
 8005dbc:	f7fa fa84 	bl	80002c8 <__aeabi_dsub>
 8005dc0:	a367      	add	r3, pc, #412	; (adr r3, 8005f60 <_dtoa_r+0x2d0>)
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f7fa fc37 	bl	8000638 <__aeabi_dmul>
 8005dca:	a367      	add	r3, pc, #412	; (adr r3, 8005f68 <_dtoa_r+0x2d8>)
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f7fa fa7c 	bl	80002cc <__adddf3>
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	460f      	mov	r7, r1
 8005dda:	f7fa fbc3 	bl	8000564 <__aeabi_i2d>
 8005dde:	a364      	add	r3, pc, #400	; (adr r3, 8005f70 <_dtoa_r+0x2e0>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa fc28 	bl	8000638 <__aeabi_dmul>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4630      	mov	r0, r6
 8005dee:	4639      	mov	r1, r7
 8005df0:	f7fa fa6c 	bl	80002cc <__adddf3>
 8005df4:	4606      	mov	r6, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	f7fa fece 	bl	8000b98 <__aeabi_d2iz>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	4683      	mov	fp, r0
 8005e00:	2300      	movs	r3, #0
 8005e02:	4630      	mov	r0, r6
 8005e04:	4639      	mov	r1, r7
 8005e06:	f7fa fe89 	bl	8000b1c <__aeabi_dcmplt>
 8005e0a:	b148      	cbz	r0, 8005e20 <_dtoa_r+0x190>
 8005e0c:	4658      	mov	r0, fp
 8005e0e:	f7fa fba9 	bl	8000564 <__aeabi_i2d>
 8005e12:	4632      	mov	r2, r6
 8005e14:	463b      	mov	r3, r7
 8005e16:	f7fa fe77 	bl	8000b08 <__aeabi_dcmpeq>
 8005e1a:	b908      	cbnz	r0, 8005e20 <_dtoa_r+0x190>
 8005e1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e20:	f1bb 0f16 	cmp.w	fp, #22
 8005e24:	d857      	bhi.n	8005ed6 <_dtoa_r+0x246>
 8005e26:	4b5b      	ldr	r3, [pc, #364]	; (8005f94 <_dtoa_r+0x304>)
 8005e28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	ec51 0b18 	vmov	r0, r1, d8
 8005e34:	f7fa fe72 	bl	8000b1c <__aeabi_dcmplt>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d04e      	beq.n	8005eda <_dtoa_r+0x24a>
 8005e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e40:	2300      	movs	r3, #0
 8005e42:	930c      	str	r3, [sp, #48]	; 0x30
 8005e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e46:	1b5b      	subs	r3, r3, r5
 8005e48:	1e5a      	subs	r2, r3, #1
 8005e4a:	bf45      	ittet	mi
 8005e4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005e50:	9305      	strmi	r3, [sp, #20]
 8005e52:	2300      	movpl	r3, #0
 8005e54:	2300      	movmi	r3, #0
 8005e56:	9206      	str	r2, [sp, #24]
 8005e58:	bf54      	ite	pl
 8005e5a:	9305      	strpl	r3, [sp, #20]
 8005e5c:	9306      	strmi	r3, [sp, #24]
 8005e5e:	f1bb 0f00 	cmp.w	fp, #0
 8005e62:	db3c      	blt.n	8005ede <_dtoa_r+0x24e>
 8005e64:	9b06      	ldr	r3, [sp, #24]
 8005e66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005e6a:	445b      	add	r3, fp
 8005e6c:	9306      	str	r3, [sp, #24]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9308      	str	r3, [sp, #32]
 8005e72:	9b07      	ldr	r3, [sp, #28]
 8005e74:	2b09      	cmp	r3, #9
 8005e76:	d868      	bhi.n	8005f4a <_dtoa_r+0x2ba>
 8005e78:	2b05      	cmp	r3, #5
 8005e7a:	bfc4      	itt	gt
 8005e7c:	3b04      	subgt	r3, #4
 8005e7e:	9307      	strgt	r3, [sp, #28]
 8005e80:	9b07      	ldr	r3, [sp, #28]
 8005e82:	f1a3 0302 	sub.w	r3, r3, #2
 8005e86:	bfcc      	ite	gt
 8005e88:	2500      	movgt	r5, #0
 8005e8a:	2501      	movle	r5, #1
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	f200 8085 	bhi.w	8005f9c <_dtoa_r+0x30c>
 8005e92:	e8df f003 	tbb	[pc, r3]
 8005e96:	3b2e      	.short	0x3b2e
 8005e98:	5839      	.short	0x5839
 8005e9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005e9e:	441d      	add	r5, r3
 8005ea0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	bfc1      	itttt	gt
 8005ea8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005eac:	fa08 f803 	lslgt.w	r8, r8, r3
 8005eb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005eb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005eb8:	bfd6      	itet	le
 8005eba:	f1c3 0320 	rsble	r3, r3, #32
 8005ebe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005ec2:	fa06 f003 	lslle.w	r0, r6, r3
 8005ec6:	f7fa fb3d 	bl	8000544 <__aeabi_ui2d>
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ed0:	3d01      	subs	r5, #1
 8005ed2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ed4:	e76f      	b.n	8005db6 <_dtoa_r+0x126>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e7b3      	b.n	8005e42 <_dtoa_r+0x1b2>
 8005eda:	900c      	str	r0, [sp, #48]	; 0x30
 8005edc:	e7b2      	b.n	8005e44 <_dtoa_r+0x1b4>
 8005ede:	9b05      	ldr	r3, [sp, #20]
 8005ee0:	eba3 030b 	sub.w	r3, r3, fp
 8005ee4:	9305      	str	r3, [sp, #20]
 8005ee6:	f1cb 0300 	rsb	r3, fp, #0
 8005eea:	9308      	str	r3, [sp, #32]
 8005eec:	2300      	movs	r3, #0
 8005eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ef0:	e7bf      	b.n	8005e72 <_dtoa_r+0x1e2>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dc52      	bgt.n	8005fa2 <_dtoa_r+0x312>
 8005efc:	2301      	movs	r3, #1
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	9304      	str	r3, [sp, #16]
 8005f02:	461a      	mov	r2, r3
 8005f04:	920a      	str	r2, [sp, #40]	; 0x28
 8005f06:	e00b      	b.n	8005f20 <_dtoa_r+0x290>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e7f3      	b.n	8005ef4 <_dtoa_r+0x264>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f12:	445b      	add	r3, fp
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	3301      	adds	r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	bfb8      	it	lt
 8005f1e:	2301      	movlt	r3, #1
 8005f20:	69e0      	ldr	r0, [r4, #28]
 8005f22:	2100      	movs	r1, #0
 8005f24:	2204      	movs	r2, #4
 8005f26:	f102 0614 	add.w	r6, r2, #20
 8005f2a:	429e      	cmp	r6, r3
 8005f2c:	d93d      	bls.n	8005faa <_dtoa_r+0x31a>
 8005f2e:	6041      	str	r1, [r0, #4]
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fd9f 	bl	8006a74 <_Balloc>
 8005f36:	9000      	str	r0, [sp, #0]
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d139      	bne.n	8005fb0 <_dtoa_r+0x320>
 8005f3c:	4b16      	ldr	r3, [pc, #88]	; (8005f98 <_dtoa_r+0x308>)
 8005f3e:	4602      	mov	r2, r0
 8005f40:	f240 11af 	movw	r1, #431	; 0x1af
 8005f44:	e6bd      	b.n	8005cc2 <_dtoa_r+0x32>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e7e1      	b.n	8005f0e <_dtoa_r+0x27e>
 8005f4a:	2501      	movs	r5, #1
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9307      	str	r3, [sp, #28]
 8005f50:	9509      	str	r5, [sp, #36]	; 0x24
 8005f52:	f04f 33ff 	mov.w	r3, #4294967295
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	9304      	str	r3, [sp, #16]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2312      	movs	r3, #18
 8005f5e:	e7d1      	b.n	8005f04 <_dtoa_r+0x274>
 8005f60:	636f4361 	.word	0x636f4361
 8005f64:	3fd287a7 	.word	0x3fd287a7
 8005f68:	8b60c8b3 	.word	0x8b60c8b3
 8005f6c:	3fc68a28 	.word	0x3fc68a28
 8005f70:	509f79fb 	.word	0x509f79fb
 8005f74:	3fd34413 	.word	0x3fd34413
 8005f78:	08007f21 	.word	0x08007f21
 8005f7c:	08007f38 	.word	0x08007f38
 8005f80:	7ff00000 	.word	0x7ff00000
 8005f84:	08007f1d 	.word	0x08007f1d
 8005f88:	08007f14 	.word	0x08007f14
 8005f8c:	08007ef1 	.word	0x08007ef1
 8005f90:	3ff80000 	.word	0x3ff80000
 8005f94:	08008028 	.word	0x08008028
 8005f98:	08007f90 	.word	0x08007f90
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa0:	e7d7      	b.n	8005f52 <_dtoa_r+0x2c2>
 8005fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	9304      	str	r3, [sp, #16]
 8005fa8:	e7ba      	b.n	8005f20 <_dtoa_r+0x290>
 8005faa:	3101      	adds	r1, #1
 8005fac:	0052      	lsls	r2, r2, #1
 8005fae:	e7ba      	b.n	8005f26 <_dtoa_r+0x296>
 8005fb0:	69e3      	ldr	r3, [r4, #28]
 8005fb2:	9a00      	ldr	r2, [sp, #0]
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	9b04      	ldr	r3, [sp, #16]
 8005fb8:	2b0e      	cmp	r3, #14
 8005fba:	f200 80a8 	bhi.w	800610e <_dtoa_r+0x47e>
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	f000 80a5 	beq.w	800610e <_dtoa_r+0x47e>
 8005fc4:	f1bb 0f00 	cmp.w	fp, #0
 8005fc8:	dd38      	ble.n	800603c <_dtoa_r+0x3ac>
 8005fca:	4bc0      	ldr	r3, [pc, #768]	; (80062cc <_dtoa_r+0x63c>)
 8005fcc:	f00b 020f 	and.w	r2, fp, #15
 8005fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005fd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005fdc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005fe0:	d019      	beq.n	8006016 <_dtoa_r+0x386>
 8005fe2:	4bbb      	ldr	r3, [pc, #748]	; (80062d0 <_dtoa_r+0x640>)
 8005fe4:	ec51 0b18 	vmov	r0, r1, d8
 8005fe8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fec:	f7fa fc4e 	bl	800088c <__aeabi_ddiv>
 8005ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff4:	f008 080f 	and.w	r8, r8, #15
 8005ff8:	2503      	movs	r5, #3
 8005ffa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80062d0 <_dtoa_r+0x640>
 8005ffe:	f1b8 0f00 	cmp.w	r8, #0
 8006002:	d10a      	bne.n	800601a <_dtoa_r+0x38a>
 8006004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006008:	4632      	mov	r2, r6
 800600a:	463b      	mov	r3, r7
 800600c:	f7fa fc3e 	bl	800088c <__aeabi_ddiv>
 8006010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006014:	e02b      	b.n	800606e <_dtoa_r+0x3de>
 8006016:	2502      	movs	r5, #2
 8006018:	e7ef      	b.n	8005ffa <_dtoa_r+0x36a>
 800601a:	f018 0f01 	tst.w	r8, #1
 800601e:	d008      	beq.n	8006032 <_dtoa_r+0x3a2>
 8006020:	4630      	mov	r0, r6
 8006022:	4639      	mov	r1, r7
 8006024:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006028:	f7fa fb06 	bl	8000638 <__aeabi_dmul>
 800602c:	3501      	adds	r5, #1
 800602e:	4606      	mov	r6, r0
 8006030:	460f      	mov	r7, r1
 8006032:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006036:	f109 0908 	add.w	r9, r9, #8
 800603a:	e7e0      	b.n	8005ffe <_dtoa_r+0x36e>
 800603c:	f000 809f 	beq.w	800617e <_dtoa_r+0x4ee>
 8006040:	f1cb 0600 	rsb	r6, fp, #0
 8006044:	4ba1      	ldr	r3, [pc, #644]	; (80062cc <_dtoa_r+0x63c>)
 8006046:	4fa2      	ldr	r7, [pc, #648]	; (80062d0 <_dtoa_r+0x640>)
 8006048:	f006 020f 	and.w	r2, r6, #15
 800604c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	ec51 0b18 	vmov	r0, r1, d8
 8006058:	f7fa faee 	bl	8000638 <__aeabi_dmul>
 800605c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006060:	1136      	asrs	r6, r6, #4
 8006062:	2300      	movs	r3, #0
 8006064:	2502      	movs	r5, #2
 8006066:	2e00      	cmp	r6, #0
 8006068:	d17e      	bne.n	8006168 <_dtoa_r+0x4d8>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1d0      	bne.n	8006010 <_dtoa_r+0x380>
 800606e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006070:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 8084 	beq.w	8006182 <_dtoa_r+0x4f2>
 800607a:	4b96      	ldr	r3, [pc, #600]	; (80062d4 <_dtoa_r+0x644>)
 800607c:	2200      	movs	r2, #0
 800607e:	4640      	mov	r0, r8
 8006080:	4649      	mov	r1, r9
 8006082:	f7fa fd4b 	bl	8000b1c <__aeabi_dcmplt>
 8006086:	2800      	cmp	r0, #0
 8006088:	d07b      	beq.n	8006182 <_dtoa_r+0x4f2>
 800608a:	9b04      	ldr	r3, [sp, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d078      	beq.n	8006182 <_dtoa_r+0x4f2>
 8006090:	9b01      	ldr	r3, [sp, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	dd39      	ble.n	800610a <_dtoa_r+0x47a>
 8006096:	4b90      	ldr	r3, [pc, #576]	; (80062d8 <_dtoa_r+0x648>)
 8006098:	2200      	movs	r2, #0
 800609a:	4640      	mov	r0, r8
 800609c:	4649      	mov	r1, r9
 800609e:	f7fa facb 	bl	8000638 <__aeabi_dmul>
 80060a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060a6:	9e01      	ldr	r6, [sp, #4]
 80060a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80060ac:	3501      	adds	r5, #1
 80060ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80060b2:	4628      	mov	r0, r5
 80060b4:	f7fa fa56 	bl	8000564 <__aeabi_i2d>
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	f7fa fabc 	bl	8000638 <__aeabi_dmul>
 80060c0:	4b86      	ldr	r3, [pc, #536]	; (80062dc <_dtoa_r+0x64c>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	f7fa f902 	bl	80002cc <__adddf3>
 80060c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80060cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d0:	9303      	str	r3, [sp, #12]
 80060d2:	2e00      	cmp	r6, #0
 80060d4:	d158      	bne.n	8006188 <_dtoa_r+0x4f8>
 80060d6:	4b82      	ldr	r3, [pc, #520]	; (80062e0 <_dtoa_r+0x650>)
 80060d8:	2200      	movs	r2, #0
 80060da:	4640      	mov	r0, r8
 80060dc:	4649      	mov	r1, r9
 80060de:	f7fa f8f3 	bl	80002c8 <__aeabi_dsub>
 80060e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060e6:	4680      	mov	r8, r0
 80060e8:	4689      	mov	r9, r1
 80060ea:	f7fa fd35 	bl	8000b58 <__aeabi_dcmpgt>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	f040 8296 	bne.w	8006620 <_dtoa_r+0x990>
 80060f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80060f8:	4640      	mov	r0, r8
 80060fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060fe:	4649      	mov	r1, r9
 8006100:	f7fa fd0c 	bl	8000b1c <__aeabi_dcmplt>
 8006104:	2800      	cmp	r0, #0
 8006106:	f040 8289 	bne.w	800661c <_dtoa_r+0x98c>
 800610a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800610e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006110:	2b00      	cmp	r3, #0
 8006112:	f2c0 814e 	blt.w	80063b2 <_dtoa_r+0x722>
 8006116:	f1bb 0f0e 	cmp.w	fp, #14
 800611a:	f300 814a 	bgt.w	80063b2 <_dtoa_r+0x722>
 800611e:	4b6b      	ldr	r3, [pc, #428]	; (80062cc <_dtoa_r+0x63c>)
 8006120:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006124:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	f280 80dc 	bge.w	80062e8 <_dtoa_r+0x658>
 8006130:	9b04      	ldr	r3, [sp, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f300 80d8 	bgt.w	80062e8 <_dtoa_r+0x658>
 8006138:	f040 826f 	bne.w	800661a <_dtoa_r+0x98a>
 800613c:	4b68      	ldr	r3, [pc, #416]	; (80062e0 <_dtoa_r+0x650>)
 800613e:	2200      	movs	r2, #0
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa fa78 	bl	8000638 <__aeabi_dmul>
 8006148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800614c:	f7fa fcfa 	bl	8000b44 <__aeabi_dcmpge>
 8006150:	9e04      	ldr	r6, [sp, #16]
 8006152:	4637      	mov	r7, r6
 8006154:	2800      	cmp	r0, #0
 8006156:	f040 8245 	bne.w	80065e4 <_dtoa_r+0x954>
 800615a:	9d00      	ldr	r5, [sp, #0]
 800615c:	2331      	movs	r3, #49	; 0x31
 800615e:	f805 3b01 	strb.w	r3, [r5], #1
 8006162:	f10b 0b01 	add.w	fp, fp, #1
 8006166:	e241      	b.n	80065ec <_dtoa_r+0x95c>
 8006168:	07f2      	lsls	r2, r6, #31
 800616a:	d505      	bpl.n	8006178 <_dtoa_r+0x4e8>
 800616c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006170:	f7fa fa62 	bl	8000638 <__aeabi_dmul>
 8006174:	3501      	adds	r5, #1
 8006176:	2301      	movs	r3, #1
 8006178:	1076      	asrs	r6, r6, #1
 800617a:	3708      	adds	r7, #8
 800617c:	e773      	b.n	8006066 <_dtoa_r+0x3d6>
 800617e:	2502      	movs	r5, #2
 8006180:	e775      	b.n	800606e <_dtoa_r+0x3de>
 8006182:	9e04      	ldr	r6, [sp, #16]
 8006184:	465f      	mov	r7, fp
 8006186:	e792      	b.n	80060ae <_dtoa_r+0x41e>
 8006188:	9900      	ldr	r1, [sp, #0]
 800618a:	4b50      	ldr	r3, [pc, #320]	; (80062cc <_dtoa_r+0x63c>)
 800618c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006190:	4431      	add	r1, r6
 8006192:	9102      	str	r1, [sp, #8]
 8006194:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006196:	eeb0 9a47 	vmov.f32	s18, s14
 800619a:	eef0 9a67 	vmov.f32	s19, s15
 800619e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061a6:	2900      	cmp	r1, #0
 80061a8:	d044      	beq.n	8006234 <_dtoa_r+0x5a4>
 80061aa:	494e      	ldr	r1, [pc, #312]	; (80062e4 <_dtoa_r+0x654>)
 80061ac:	2000      	movs	r0, #0
 80061ae:	f7fa fb6d 	bl	800088c <__aeabi_ddiv>
 80061b2:	ec53 2b19 	vmov	r2, r3, d9
 80061b6:	f7fa f887 	bl	80002c8 <__aeabi_dsub>
 80061ba:	9d00      	ldr	r5, [sp, #0]
 80061bc:	ec41 0b19 	vmov	d9, r0, r1
 80061c0:	4649      	mov	r1, r9
 80061c2:	4640      	mov	r0, r8
 80061c4:	f7fa fce8 	bl	8000b98 <__aeabi_d2iz>
 80061c8:	4606      	mov	r6, r0
 80061ca:	f7fa f9cb 	bl	8000564 <__aeabi_i2d>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4640      	mov	r0, r8
 80061d4:	4649      	mov	r1, r9
 80061d6:	f7fa f877 	bl	80002c8 <__aeabi_dsub>
 80061da:	3630      	adds	r6, #48	; 0x30
 80061dc:	f805 6b01 	strb.w	r6, [r5], #1
 80061e0:	ec53 2b19 	vmov	r2, r3, d9
 80061e4:	4680      	mov	r8, r0
 80061e6:	4689      	mov	r9, r1
 80061e8:	f7fa fc98 	bl	8000b1c <__aeabi_dcmplt>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d164      	bne.n	80062ba <_dtoa_r+0x62a>
 80061f0:	4642      	mov	r2, r8
 80061f2:	464b      	mov	r3, r9
 80061f4:	4937      	ldr	r1, [pc, #220]	; (80062d4 <_dtoa_r+0x644>)
 80061f6:	2000      	movs	r0, #0
 80061f8:	f7fa f866 	bl	80002c8 <__aeabi_dsub>
 80061fc:	ec53 2b19 	vmov	r2, r3, d9
 8006200:	f7fa fc8c 	bl	8000b1c <__aeabi_dcmplt>
 8006204:	2800      	cmp	r0, #0
 8006206:	f040 80b6 	bne.w	8006376 <_dtoa_r+0x6e6>
 800620a:	9b02      	ldr	r3, [sp, #8]
 800620c:	429d      	cmp	r5, r3
 800620e:	f43f af7c 	beq.w	800610a <_dtoa_r+0x47a>
 8006212:	4b31      	ldr	r3, [pc, #196]	; (80062d8 <_dtoa_r+0x648>)
 8006214:	ec51 0b19 	vmov	r0, r1, d9
 8006218:	2200      	movs	r2, #0
 800621a:	f7fa fa0d 	bl	8000638 <__aeabi_dmul>
 800621e:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <_dtoa_r+0x648>)
 8006220:	ec41 0b19 	vmov	d9, r0, r1
 8006224:	2200      	movs	r2, #0
 8006226:	4640      	mov	r0, r8
 8006228:	4649      	mov	r1, r9
 800622a:	f7fa fa05 	bl	8000638 <__aeabi_dmul>
 800622e:	4680      	mov	r8, r0
 8006230:	4689      	mov	r9, r1
 8006232:	e7c5      	b.n	80061c0 <_dtoa_r+0x530>
 8006234:	ec51 0b17 	vmov	r0, r1, d7
 8006238:	f7fa f9fe 	bl	8000638 <__aeabi_dmul>
 800623c:	9b02      	ldr	r3, [sp, #8]
 800623e:	9d00      	ldr	r5, [sp, #0]
 8006240:	930f      	str	r3, [sp, #60]	; 0x3c
 8006242:	ec41 0b19 	vmov	d9, r0, r1
 8006246:	4649      	mov	r1, r9
 8006248:	4640      	mov	r0, r8
 800624a:	f7fa fca5 	bl	8000b98 <__aeabi_d2iz>
 800624e:	4606      	mov	r6, r0
 8006250:	f7fa f988 	bl	8000564 <__aeabi_i2d>
 8006254:	3630      	adds	r6, #48	; 0x30
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4640      	mov	r0, r8
 800625c:	4649      	mov	r1, r9
 800625e:	f7fa f833 	bl	80002c8 <__aeabi_dsub>
 8006262:	f805 6b01 	strb.w	r6, [r5], #1
 8006266:	9b02      	ldr	r3, [sp, #8]
 8006268:	429d      	cmp	r5, r3
 800626a:	4680      	mov	r8, r0
 800626c:	4689      	mov	r9, r1
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	d124      	bne.n	80062be <_dtoa_r+0x62e>
 8006274:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <_dtoa_r+0x654>)
 8006276:	ec51 0b19 	vmov	r0, r1, d9
 800627a:	f7fa f827 	bl	80002cc <__adddf3>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4640      	mov	r0, r8
 8006284:	4649      	mov	r1, r9
 8006286:	f7fa fc67 	bl	8000b58 <__aeabi_dcmpgt>
 800628a:	2800      	cmp	r0, #0
 800628c:	d173      	bne.n	8006376 <_dtoa_r+0x6e6>
 800628e:	ec53 2b19 	vmov	r2, r3, d9
 8006292:	4914      	ldr	r1, [pc, #80]	; (80062e4 <_dtoa_r+0x654>)
 8006294:	2000      	movs	r0, #0
 8006296:	f7fa f817 	bl	80002c8 <__aeabi_dsub>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4640      	mov	r0, r8
 80062a0:	4649      	mov	r1, r9
 80062a2:	f7fa fc3b 	bl	8000b1c <__aeabi_dcmplt>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	f43f af2f 	beq.w	800610a <_dtoa_r+0x47a>
 80062ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062ae:	1e6b      	subs	r3, r5, #1
 80062b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062b6:	2b30      	cmp	r3, #48	; 0x30
 80062b8:	d0f8      	beq.n	80062ac <_dtoa_r+0x61c>
 80062ba:	46bb      	mov	fp, r7
 80062bc:	e04a      	b.n	8006354 <_dtoa_r+0x6c4>
 80062be:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <_dtoa_r+0x648>)
 80062c0:	f7fa f9ba 	bl	8000638 <__aeabi_dmul>
 80062c4:	4680      	mov	r8, r0
 80062c6:	4689      	mov	r9, r1
 80062c8:	e7bd      	b.n	8006246 <_dtoa_r+0x5b6>
 80062ca:	bf00      	nop
 80062cc:	08008028 	.word	0x08008028
 80062d0:	08008000 	.word	0x08008000
 80062d4:	3ff00000 	.word	0x3ff00000
 80062d8:	40240000 	.word	0x40240000
 80062dc:	401c0000 	.word	0x401c0000
 80062e0:	40140000 	.word	0x40140000
 80062e4:	3fe00000 	.word	0x3fe00000
 80062e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062ec:	9d00      	ldr	r5, [sp, #0]
 80062ee:	4642      	mov	r2, r8
 80062f0:	464b      	mov	r3, r9
 80062f2:	4630      	mov	r0, r6
 80062f4:	4639      	mov	r1, r7
 80062f6:	f7fa fac9 	bl	800088c <__aeabi_ddiv>
 80062fa:	f7fa fc4d 	bl	8000b98 <__aeabi_d2iz>
 80062fe:	9001      	str	r0, [sp, #4]
 8006300:	f7fa f930 	bl	8000564 <__aeabi_i2d>
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
 8006308:	f7fa f996 	bl	8000638 <__aeabi_dmul>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	f7f9 ffd8 	bl	80002c8 <__aeabi_dsub>
 8006318:	9e01      	ldr	r6, [sp, #4]
 800631a:	9f04      	ldr	r7, [sp, #16]
 800631c:	3630      	adds	r6, #48	; 0x30
 800631e:	f805 6b01 	strb.w	r6, [r5], #1
 8006322:	9e00      	ldr	r6, [sp, #0]
 8006324:	1bae      	subs	r6, r5, r6
 8006326:	42b7      	cmp	r7, r6
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	d134      	bne.n	8006398 <_dtoa_r+0x708>
 800632e:	f7f9 ffcd 	bl	80002cc <__adddf3>
 8006332:	4642      	mov	r2, r8
 8006334:	464b      	mov	r3, r9
 8006336:	4606      	mov	r6, r0
 8006338:	460f      	mov	r7, r1
 800633a:	f7fa fc0d 	bl	8000b58 <__aeabi_dcmpgt>
 800633e:	b9c8      	cbnz	r0, 8006374 <_dtoa_r+0x6e4>
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	4630      	mov	r0, r6
 8006346:	4639      	mov	r1, r7
 8006348:	f7fa fbde 	bl	8000b08 <__aeabi_dcmpeq>
 800634c:	b110      	cbz	r0, 8006354 <_dtoa_r+0x6c4>
 800634e:	9b01      	ldr	r3, [sp, #4]
 8006350:	07db      	lsls	r3, r3, #31
 8006352:	d40f      	bmi.n	8006374 <_dtoa_r+0x6e4>
 8006354:	4651      	mov	r1, sl
 8006356:	4620      	mov	r0, r4
 8006358:	f000 fbcc 	bl	8006af4 <_Bfree>
 800635c:	2300      	movs	r3, #0
 800635e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006360:	702b      	strb	r3, [r5, #0]
 8006362:	f10b 0301 	add.w	r3, fp, #1
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800636a:	2b00      	cmp	r3, #0
 800636c:	f43f ace2 	beq.w	8005d34 <_dtoa_r+0xa4>
 8006370:	601d      	str	r5, [r3, #0]
 8006372:	e4df      	b.n	8005d34 <_dtoa_r+0xa4>
 8006374:	465f      	mov	r7, fp
 8006376:	462b      	mov	r3, r5
 8006378:	461d      	mov	r5, r3
 800637a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800637e:	2a39      	cmp	r2, #57	; 0x39
 8006380:	d106      	bne.n	8006390 <_dtoa_r+0x700>
 8006382:	9a00      	ldr	r2, [sp, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d1f7      	bne.n	8006378 <_dtoa_r+0x6e8>
 8006388:	9900      	ldr	r1, [sp, #0]
 800638a:	2230      	movs	r2, #48	; 0x30
 800638c:	3701      	adds	r7, #1
 800638e:	700a      	strb	r2, [r1, #0]
 8006390:	781a      	ldrb	r2, [r3, #0]
 8006392:	3201      	adds	r2, #1
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e790      	b.n	80062ba <_dtoa_r+0x62a>
 8006398:	4ba3      	ldr	r3, [pc, #652]	; (8006628 <_dtoa_r+0x998>)
 800639a:	2200      	movs	r2, #0
 800639c:	f7fa f94c 	bl	8000638 <__aeabi_dmul>
 80063a0:	2200      	movs	r2, #0
 80063a2:	2300      	movs	r3, #0
 80063a4:	4606      	mov	r6, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	f7fa fbae 	bl	8000b08 <__aeabi_dcmpeq>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d09e      	beq.n	80062ee <_dtoa_r+0x65e>
 80063b0:	e7d0      	b.n	8006354 <_dtoa_r+0x6c4>
 80063b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	f000 80ca 	beq.w	800654e <_dtoa_r+0x8be>
 80063ba:	9a07      	ldr	r2, [sp, #28]
 80063bc:	2a01      	cmp	r2, #1
 80063be:	f300 80ad 	bgt.w	800651c <_dtoa_r+0x88c>
 80063c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	f000 80a5 	beq.w	8006514 <_dtoa_r+0x884>
 80063ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063ce:	9e08      	ldr	r6, [sp, #32]
 80063d0:	9d05      	ldr	r5, [sp, #20]
 80063d2:	9a05      	ldr	r2, [sp, #20]
 80063d4:	441a      	add	r2, r3
 80063d6:	9205      	str	r2, [sp, #20]
 80063d8:	9a06      	ldr	r2, [sp, #24]
 80063da:	2101      	movs	r1, #1
 80063dc:	441a      	add	r2, r3
 80063de:	4620      	mov	r0, r4
 80063e0:	9206      	str	r2, [sp, #24]
 80063e2:	f000 fc3d 	bl	8006c60 <__i2b>
 80063e6:	4607      	mov	r7, r0
 80063e8:	b165      	cbz	r5, 8006404 <_dtoa_r+0x774>
 80063ea:	9b06      	ldr	r3, [sp, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dd09      	ble.n	8006404 <_dtoa_r+0x774>
 80063f0:	42ab      	cmp	r3, r5
 80063f2:	9a05      	ldr	r2, [sp, #20]
 80063f4:	bfa8      	it	ge
 80063f6:	462b      	movge	r3, r5
 80063f8:	1ad2      	subs	r2, r2, r3
 80063fa:	9205      	str	r2, [sp, #20]
 80063fc:	9a06      	ldr	r2, [sp, #24]
 80063fe:	1aed      	subs	r5, r5, r3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	9306      	str	r3, [sp, #24]
 8006404:	9b08      	ldr	r3, [sp, #32]
 8006406:	b1f3      	cbz	r3, 8006446 <_dtoa_r+0x7b6>
 8006408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 80a3 	beq.w	8006556 <_dtoa_r+0x8c6>
 8006410:	2e00      	cmp	r6, #0
 8006412:	dd10      	ble.n	8006436 <_dtoa_r+0x7a6>
 8006414:	4639      	mov	r1, r7
 8006416:	4632      	mov	r2, r6
 8006418:	4620      	mov	r0, r4
 800641a:	f000 fce1 	bl	8006de0 <__pow5mult>
 800641e:	4652      	mov	r2, sl
 8006420:	4601      	mov	r1, r0
 8006422:	4607      	mov	r7, r0
 8006424:	4620      	mov	r0, r4
 8006426:	f000 fc31 	bl	8006c8c <__multiply>
 800642a:	4651      	mov	r1, sl
 800642c:	4680      	mov	r8, r0
 800642e:	4620      	mov	r0, r4
 8006430:	f000 fb60 	bl	8006af4 <_Bfree>
 8006434:	46c2      	mov	sl, r8
 8006436:	9b08      	ldr	r3, [sp, #32]
 8006438:	1b9a      	subs	r2, r3, r6
 800643a:	d004      	beq.n	8006446 <_dtoa_r+0x7b6>
 800643c:	4651      	mov	r1, sl
 800643e:	4620      	mov	r0, r4
 8006440:	f000 fcce 	bl	8006de0 <__pow5mult>
 8006444:	4682      	mov	sl, r0
 8006446:	2101      	movs	r1, #1
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fc09 	bl	8006c60 <__i2b>
 800644e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	4606      	mov	r6, r0
 8006454:	f340 8081 	ble.w	800655a <_dtoa_r+0x8ca>
 8006458:	461a      	mov	r2, r3
 800645a:	4601      	mov	r1, r0
 800645c:	4620      	mov	r0, r4
 800645e:	f000 fcbf 	bl	8006de0 <__pow5mult>
 8006462:	9b07      	ldr	r3, [sp, #28]
 8006464:	2b01      	cmp	r3, #1
 8006466:	4606      	mov	r6, r0
 8006468:	dd7a      	ble.n	8006560 <_dtoa_r+0x8d0>
 800646a:	f04f 0800 	mov.w	r8, #0
 800646e:	6933      	ldr	r3, [r6, #16]
 8006470:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006474:	6918      	ldr	r0, [r3, #16]
 8006476:	f000 fba5 	bl	8006bc4 <__hi0bits>
 800647a:	f1c0 0020 	rsb	r0, r0, #32
 800647e:	9b06      	ldr	r3, [sp, #24]
 8006480:	4418      	add	r0, r3
 8006482:	f010 001f 	ands.w	r0, r0, #31
 8006486:	f000 8094 	beq.w	80065b2 <_dtoa_r+0x922>
 800648a:	f1c0 0320 	rsb	r3, r0, #32
 800648e:	2b04      	cmp	r3, #4
 8006490:	f340 8085 	ble.w	800659e <_dtoa_r+0x90e>
 8006494:	9b05      	ldr	r3, [sp, #20]
 8006496:	f1c0 001c 	rsb	r0, r0, #28
 800649a:	4403      	add	r3, r0
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	9b06      	ldr	r3, [sp, #24]
 80064a0:	4403      	add	r3, r0
 80064a2:	4405      	add	r5, r0
 80064a4:	9306      	str	r3, [sp, #24]
 80064a6:	9b05      	ldr	r3, [sp, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	dd05      	ble.n	80064b8 <_dtoa_r+0x828>
 80064ac:	4651      	mov	r1, sl
 80064ae:	461a      	mov	r2, r3
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 fcef 	bl	8006e94 <__lshift>
 80064b6:	4682      	mov	sl, r0
 80064b8:	9b06      	ldr	r3, [sp, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd05      	ble.n	80064ca <_dtoa_r+0x83a>
 80064be:	4631      	mov	r1, r6
 80064c0:	461a      	mov	r2, r3
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fce6 	bl	8006e94 <__lshift>
 80064c8:	4606      	mov	r6, r0
 80064ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d072      	beq.n	80065b6 <_dtoa_r+0x926>
 80064d0:	4631      	mov	r1, r6
 80064d2:	4650      	mov	r0, sl
 80064d4:	f000 fd4a 	bl	8006f6c <__mcmp>
 80064d8:	2800      	cmp	r0, #0
 80064da:	da6c      	bge.n	80065b6 <_dtoa_r+0x926>
 80064dc:	2300      	movs	r3, #0
 80064de:	4651      	mov	r1, sl
 80064e0:	220a      	movs	r2, #10
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 fb28 	bl	8006b38 <__multadd>
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064ee:	4682      	mov	sl, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 81b0 	beq.w	8006856 <_dtoa_r+0xbc6>
 80064f6:	2300      	movs	r3, #0
 80064f8:	4639      	mov	r1, r7
 80064fa:	220a      	movs	r2, #10
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 fb1b 	bl	8006b38 <__multadd>
 8006502:	9b01      	ldr	r3, [sp, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	4607      	mov	r7, r0
 8006508:	f300 8096 	bgt.w	8006638 <_dtoa_r+0x9a8>
 800650c:	9b07      	ldr	r3, [sp, #28]
 800650e:	2b02      	cmp	r3, #2
 8006510:	dc59      	bgt.n	80065c6 <_dtoa_r+0x936>
 8006512:	e091      	b.n	8006638 <_dtoa_r+0x9a8>
 8006514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800651a:	e758      	b.n	80063ce <_dtoa_r+0x73e>
 800651c:	9b04      	ldr	r3, [sp, #16]
 800651e:	1e5e      	subs	r6, r3, #1
 8006520:	9b08      	ldr	r3, [sp, #32]
 8006522:	42b3      	cmp	r3, r6
 8006524:	bfbf      	itttt	lt
 8006526:	9b08      	ldrlt	r3, [sp, #32]
 8006528:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800652a:	9608      	strlt	r6, [sp, #32]
 800652c:	1af3      	sublt	r3, r6, r3
 800652e:	bfb4      	ite	lt
 8006530:	18d2      	addlt	r2, r2, r3
 8006532:	1b9e      	subge	r6, r3, r6
 8006534:	9b04      	ldr	r3, [sp, #16]
 8006536:	bfbc      	itt	lt
 8006538:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800653a:	2600      	movlt	r6, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	bfb7      	itett	lt
 8006540:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006544:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006548:	1a9d      	sublt	r5, r3, r2
 800654a:	2300      	movlt	r3, #0
 800654c:	e741      	b.n	80063d2 <_dtoa_r+0x742>
 800654e:	9e08      	ldr	r6, [sp, #32]
 8006550:	9d05      	ldr	r5, [sp, #20]
 8006552:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006554:	e748      	b.n	80063e8 <_dtoa_r+0x758>
 8006556:	9a08      	ldr	r2, [sp, #32]
 8006558:	e770      	b.n	800643c <_dtoa_r+0x7ac>
 800655a:	9b07      	ldr	r3, [sp, #28]
 800655c:	2b01      	cmp	r3, #1
 800655e:	dc19      	bgt.n	8006594 <_dtoa_r+0x904>
 8006560:	9b02      	ldr	r3, [sp, #8]
 8006562:	b9bb      	cbnz	r3, 8006594 <_dtoa_r+0x904>
 8006564:	9b03      	ldr	r3, [sp, #12]
 8006566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800656a:	b99b      	cbnz	r3, 8006594 <_dtoa_r+0x904>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006572:	0d1b      	lsrs	r3, r3, #20
 8006574:	051b      	lsls	r3, r3, #20
 8006576:	b183      	cbz	r3, 800659a <_dtoa_r+0x90a>
 8006578:	9b05      	ldr	r3, [sp, #20]
 800657a:	3301      	adds	r3, #1
 800657c:	9305      	str	r3, [sp, #20]
 800657e:	9b06      	ldr	r3, [sp, #24]
 8006580:	3301      	adds	r3, #1
 8006582:	9306      	str	r3, [sp, #24]
 8006584:	f04f 0801 	mov.w	r8, #1
 8006588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800658a:	2b00      	cmp	r3, #0
 800658c:	f47f af6f 	bne.w	800646e <_dtoa_r+0x7de>
 8006590:	2001      	movs	r0, #1
 8006592:	e774      	b.n	800647e <_dtoa_r+0x7ee>
 8006594:	f04f 0800 	mov.w	r8, #0
 8006598:	e7f6      	b.n	8006588 <_dtoa_r+0x8f8>
 800659a:	4698      	mov	r8, r3
 800659c:	e7f4      	b.n	8006588 <_dtoa_r+0x8f8>
 800659e:	d082      	beq.n	80064a6 <_dtoa_r+0x816>
 80065a0:	9a05      	ldr	r2, [sp, #20]
 80065a2:	331c      	adds	r3, #28
 80065a4:	441a      	add	r2, r3
 80065a6:	9205      	str	r2, [sp, #20]
 80065a8:	9a06      	ldr	r2, [sp, #24]
 80065aa:	441a      	add	r2, r3
 80065ac:	441d      	add	r5, r3
 80065ae:	9206      	str	r2, [sp, #24]
 80065b0:	e779      	b.n	80064a6 <_dtoa_r+0x816>
 80065b2:	4603      	mov	r3, r0
 80065b4:	e7f4      	b.n	80065a0 <_dtoa_r+0x910>
 80065b6:	9b04      	ldr	r3, [sp, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	dc37      	bgt.n	800662c <_dtoa_r+0x99c>
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	dd34      	ble.n	800662c <_dtoa_r+0x99c>
 80065c2:	9b04      	ldr	r3, [sp, #16]
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	9b01      	ldr	r3, [sp, #4]
 80065c8:	b963      	cbnz	r3, 80065e4 <_dtoa_r+0x954>
 80065ca:	4631      	mov	r1, r6
 80065cc:	2205      	movs	r2, #5
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 fab2 	bl	8006b38 <__multadd>
 80065d4:	4601      	mov	r1, r0
 80065d6:	4606      	mov	r6, r0
 80065d8:	4650      	mov	r0, sl
 80065da:	f000 fcc7 	bl	8006f6c <__mcmp>
 80065de:	2800      	cmp	r0, #0
 80065e0:	f73f adbb 	bgt.w	800615a <_dtoa_r+0x4ca>
 80065e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e6:	9d00      	ldr	r5, [sp, #0]
 80065e8:	ea6f 0b03 	mvn.w	fp, r3
 80065ec:	f04f 0800 	mov.w	r8, #0
 80065f0:	4631      	mov	r1, r6
 80065f2:	4620      	mov	r0, r4
 80065f4:	f000 fa7e 	bl	8006af4 <_Bfree>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	f43f aeab 	beq.w	8006354 <_dtoa_r+0x6c4>
 80065fe:	f1b8 0f00 	cmp.w	r8, #0
 8006602:	d005      	beq.n	8006610 <_dtoa_r+0x980>
 8006604:	45b8      	cmp	r8, r7
 8006606:	d003      	beq.n	8006610 <_dtoa_r+0x980>
 8006608:	4641      	mov	r1, r8
 800660a:	4620      	mov	r0, r4
 800660c:	f000 fa72 	bl	8006af4 <_Bfree>
 8006610:	4639      	mov	r1, r7
 8006612:	4620      	mov	r0, r4
 8006614:	f000 fa6e 	bl	8006af4 <_Bfree>
 8006618:	e69c      	b.n	8006354 <_dtoa_r+0x6c4>
 800661a:	2600      	movs	r6, #0
 800661c:	4637      	mov	r7, r6
 800661e:	e7e1      	b.n	80065e4 <_dtoa_r+0x954>
 8006620:	46bb      	mov	fp, r7
 8006622:	4637      	mov	r7, r6
 8006624:	e599      	b.n	800615a <_dtoa_r+0x4ca>
 8006626:	bf00      	nop
 8006628:	40240000 	.word	0x40240000
 800662c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80c8 	beq.w	80067c4 <_dtoa_r+0xb34>
 8006634:	9b04      	ldr	r3, [sp, #16]
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	2d00      	cmp	r5, #0
 800663a:	dd05      	ble.n	8006648 <_dtoa_r+0x9b8>
 800663c:	4639      	mov	r1, r7
 800663e:	462a      	mov	r2, r5
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fc27 	bl	8006e94 <__lshift>
 8006646:	4607      	mov	r7, r0
 8006648:	f1b8 0f00 	cmp.w	r8, #0
 800664c:	d05b      	beq.n	8006706 <_dtoa_r+0xa76>
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	4620      	mov	r0, r4
 8006652:	f000 fa0f 	bl	8006a74 <_Balloc>
 8006656:	4605      	mov	r5, r0
 8006658:	b928      	cbnz	r0, 8006666 <_dtoa_r+0x9d6>
 800665a:	4b83      	ldr	r3, [pc, #524]	; (8006868 <_dtoa_r+0xbd8>)
 800665c:	4602      	mov	r2, r0
 800665e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006662:	f7ff bb2e 	b.w	8005cc2 <_dtoa_r+0x32>
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	3202      	adds	r2, #2
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	f107 010c 	add.w	r1, r7, #12
 8006670:	300c      	adds	r0, #12
 8006672:	f001 f801 	bl	8007678 <memcpy>
 8006676:	2201      	movs	r2, #1
 8006678:	4629      	mov	r1, r5
 800667a:	4620      	mov	r0, r4
 800667c:	f000 fc0a 	bl	8006e94 <__lshift>
 8006680:	9b00      	ldr	r3, [sp, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	e9dd 2300 	ldrd	r2, r3, [sp]
 800668a:	4413      	add	r3, r2
 800668c:	9308      	str	r3, [sp, #32]
 800668e:	9b02      	ldr	r3, [sp, #8]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	46b8      	mov	r8, r7
 8006696:	9306      	str	r3, [sp, #24]
 8006698:	4607      	mov	r7, r0
 800669a:	9b04      	ldr	r3, [sp, #16]
 800669c:	4631      	mov	r1, r6
 800669e:	3b01      	subs	r3, #1
 80066a0:	4650      	mov	r0, sl
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	f7ff fa6b 	bl	8005b7e <quorem>
 80066a8:	4641      	mov	r1, r8
 80066aa:	9002      	str	r0, [sp, #8]
 80066ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066b0:	4650      	mov	r0, sl
 80066b2:	f000 fc5b 	bl	8006f6c <__mcmp>
 80066b6:	463a      	mov	r2, r7
 80066b8:	9005      	str	r0, [sp, #20]
 80066ba:	4631      	mov	r1, r6
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 fc71 	bl	8006fa4 <__mdiff>
 80066c2:	68c2      	ldr	r2, [r0, #12]
 80066c4:	4605      	mov	r5, r0
 80066c6:	bb02      	cbnz	r2, 800670a <_dtoa_r+0xa7a>
 80066c8:	4601      	mov	r1, r0
 80066ca:	4650      	mov	r0, sl
 80066cc:	f000 fc4e 	bl	8006f6c <__mcmp>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4629      	mov	r1, r5
 80066d4:	4620      	mov	r0, r4
 80066d6:	9209      	str	r2, [sp, #36]	; 0x24
 80066d8:	f000 fa0c 	bl	8006af4 <_Bfree>
 80066dc:	9b07      	ldr	r3, [sp, #28]
 80066de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e0:	9d04      	ldr	r5, [sp, #16]
 80066e2:	ea43 0102 	orr.w	r1, r3, r2
 80066e6:	9b06      	ldr	r3, [sp, #24]
 80066e8:	4319      	orrs	r1, r3
 80066ea:	d110      	bne.n	800670e <_dtoa_r+0xa7e>
 80066ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066f0:	d029      	beq.n	8006746 <_dtoa_r+0xab6>
 80066f2:	9b05      	ldr	r3, [sp, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dd02      	ble.n	80066fe <_dtoa_r+0xa6e>
 80066f8:	9b02      	ldr	r3, [sp, #8]
 80066fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	f883 9000 	strb.w	r9, [r3]
 8006704:	e774      	b.n	80065f0 <_dtoa_r+0x960>
 8006706:	4638      	mov	r0, r7
 8006708:	e7ba      	b.n	8006680 <_dtoa_r+0x9f0>
 800670a:	2201      	movs	r2, #1
 800670c:	e7e1      	b.n	80066d2 <_dtoa_r+0xa42>
 800670e:	9b05      	ldr	r3, [sp, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	db04      	blt.n	800671e <_dtoa_r+0xa8e>
 8006714:	9907      	ldr	r1, [sp, #28]
 8006716:	430b      	orrs	r3, r1
 8006718:	9906      	ldr	r1, [sp, #24]
 800671a:	430b      	orrs	r3, r1
 800671c:	d120      	bne.n	8006760 <_dtoa_r+0xad0>
 800671e:	2a00      	cmp	r2, #0
 8006720:	dded      	ble.n	80066fe <_dtoa_r+0xa6e>
 8006722:	4651      	mov	r1, sl
 8006724:	2201      	movs	r2, #1
 8006726:	4620      	mov	r0, r4
 8006728:	f000 fbb4 	bl	8006e94 <__lshift>
 800672c:	4631      	mov	r1, r6
 800672e:	4682      	mov	sl, r0
 8006730:	f000 fc1c 	bl	8006f6c <__mcmp>
 8006734:	2800      	cmp	r0, #0
 8006736:	dc03      	bgt.n	8006740 <_dtoa_r+0xab0>
 8006738:	d1e1      	bne.n	80066fe <_dtoa_r+0xa6e>
 800673a:	f019 0f01 	tst.w	r9, #1
 800673e:	d0de      	beq.n	80066fe <_dtoa_r+0xa6e>
 8006740:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006744:	d1d8      	bne.n	80066f8 <_dtoa_r+0xa68>
 8006746:	9a01      	ldr	r2, [sp, #4]
 8006748:	2339      	movs	r3, #57	; 0x39
 800674a:	7013      	strb	r3, [r2, #0]
 800674c:	462b      	mov	r3, r5
 800674e:	461d      	mov	r5, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006756:	2a39      	cmp	r2, #57	; 0x39
 8006758:	d06c      	beq.n	8006834 <_dtoa_r+0xba4>
 800675a:	3201      	adds	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e747      	b.n	80065f0 <_dtoa_r+0x960>
 8006760:	2a00      	cmp	r2, #0
 8006762:	dd07      	ble.n	8006774 <_dtoa_r+0xae4>
 8006764:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006768:	d0ed      	beq.n	8006746 <_dtoa_r+0xab6>
 800676a:	9a01      	ldr	r2, [sp, #4]
 800676c:	f109 0301 	add.w	r3, r9, #1
 8006770:	7013      	strb	r3, [r2, #0]
 8006772:	e73d      	b.n	80065f0 <_dtoa_r+0x960>
 8006774:	9b04      	ldr	r3, [sp, #16]
 8006776:	9a08      	ldr	r2, [sp, #32]
 8006778:	f803 9c01 	strb.w	r9, [r3, #-1]
 800677c:	4293      	cmp	r3, r2
 800677e:	d043      	beq.n	8006808 <_dtoa_r+0xb78>
 8006780:	4651      	mov	r1, sl
 8006782:	2300      	movs	r3, #0
 8006784:	220a      	movs	r2, #10
 8006786:	4620      	mov	r0, r4
 8006788:	f000 f9d6 	bl	8006b38 <__multadd>
 800678c:	45b8      	cmp	r8, r7
 800678e:	4682      	mov	sl, r0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	f04f 020a 	mov.w	r2, #10
 8006798:	4641      	mov	r1, r8
 800679a:	4620      	mov	r0, r4
 800679c:	d107      	bne.n	80067ae <_dtoa_r+0xb1e>
 800679e:	f000 f9cb 	bl	8006b38 <__multadd>
 80067a2:	4680      	mov	r8, r0
 80067a4:	4607      	mov	r7, r0
 80067a6:	9b04      	ldr	r3, [sp, #16]
 80067a8:	3301      	adds	r3, #1
 80067aa:	9304      	str	r3, [sp, #16]
 80067ac:	e775      	b.n	800669a <_dtoa_r+0xa0a>
 80067ae:	f000 f9c3 	bl	8006b38 <__multadd>
 80067b2:	4639      	mov	r1, r7
 80067b4:	4680      	mov	r8, r0
 80067b6:	2300      	movs	r3, #0
 80067b8:	220a      	movs	r2, #10
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 f9bc 	bl	8006b38 <__multadd>
 80067c0:	4607      	mov	r7, r0
 80067c2:	e7f0      	b.n	80067a6 <_dtoa_r+0xb16>
 80067c4:	9b04      	ldr	r3, [sp, #16]
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	9d00      	ldr	r5, [sp, #0]
 80067ca:	4631      	mov	r1, r6
 80067cc:	4650      	mov	r0, sl
 80067ce:	f7ff f9d6 	bl	8005b7e <quorem>
 80067d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067d6:	9b00      	ldr	r3, [sp, #0]
 80067d8:	f805 9b01 	strb.w	r9, [r5], #1
 80067dc:	1aea      	subs	r2, r5, r3
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	dd07      	ble.n	80067f4 <_dtoa_r+0xb64>
 80067e4:	4651      	mov	r1, sl
 80067e6:	2300      	movs	r3, #0
 80067e8:	220a      	movs	r2, #10
 80067ea:	4620      	mov	r0, r4
 80067ec:	f000 f9a4 	bl	8006b38 <__multadd>
 80067f0:	4682      	mov	sl, r0
 80067f2:	e7ea      	b.n	80067ca <_dtoa_r+0xb3a>
 80067f4:	9b01      	ldr	r3, [sp, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfc8      	it	gt
 80067fa:	461d      	movgt	r5, r3
 80067fc:	9b00      	ldr	r3, [sp, #0]
 80067fe:	bfd8      	it	le
 8006800:	2501      	movle	r5, #1
 8006802:	441d      	add	r5, r3
 8006804:	f04f 0800 	mov.w	r8, #0
 8006808:	4651      	mov	r1, sl
 800680a:	2201      	movs	r2, #1
 800680c:	4620      	mov	r0, r4
 800680e:	f000 fb41 	bl	8006e94 <__lshift>
 8006812:	4631      	mov	r1, r6
 8006814:	4682      	mov	sl, r0
 8006816:	f000 fba9 	bl	8006f6c <__mcmp>
 800681a:	2800      	cmp	r0, #0
 800681c:	dc96      	bgt.n	800674c <_dtoa_r+0xabc>
 800681e:	d102      	bne.n	8006826 <_dtoa_r+0xb96>
 8006820:	f019 0f01 	tst.w	r9, #1
 8006824:	d192      	bne.n	800674c <_dtoa_r+0xabc>
 8006826:	462b      	mov	r3, r5
 8006828:	461d      	mov	r5, r3
 800682a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800682e:	2a30      	cmp	r2, #48	; 0x30
 8006830:	d0fa      	beq.n	8006828 <_dtoa_r+0xb98>
 8006832:	e6dd      	b.n	80065f0 <_dtoa_r+0x960>
 8006834:	9a00      	ldr	r2, [sp, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d189      	bne.n	800674e <_dtoa_r+0xabe>
 800683a:	f10b 0b01 	add.w	fp, fp, #1
 800683e:	2331      	movs	r3, #49	; 0x31
 8006840:	e796      	b.n	8006770 <_dtoa_r+0xae0>
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <_dtoa_r+0xbdc>)
 8006844:	f7ff ba99 	b.w	8005d7a <_dtoa_r+0xea>
 8006848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800684a:	2b00      	cmp	r3, #0
 800684c:	f47f aa6d 	bne.w	8005d2a <_dtoa_r+0x9a>
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <_dtoa_r+0xbe0>)
 8006852:	f7ff ba92 	b.w	8005d7a <_dtoa_r+0xea>
 8006856:	9b01      	ldr	r3, [sp, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	dcb5      	bgt.n	80067c8 <_dtoa_r+0xb38>
 800685c:	9b07      	ldr	r3, [sp, #28]
 800685e:	2b02      	cmp	r3, #2
 8006860:	f73f aeb1 	bgt.w	80065c6 <_dtoa_r+0x936>
 8006864:	e7b0      	b.n	80067c8 <_dtoa_r+0xb38>
 8006866:	bf00      	nop
 8006868:	08007f90 	.word	0x08007f90
 800686c:	08007ef0 	.word	0x08007ef0
 8006870:	08007f14 	.word	0x08007f14

08006874 <_free_r>:
 8006874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006876:	2900      	cmp	r1, #0
 8006878:	d044      	beq.n	8006904 <_free_r+0x90>
 800687a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800687e:	9001      	str	r0, [sp, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	f1a1 0404 	sub.w	r4, r1, #4
 8006886:	bfb8      	it	lt
 8006888:	18e4      	addlt	r4, r4, r3
 800688a:	f000 f8e7 	bl	8006a5c <__malloc_lock>
 800688e:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <_free_r+0x94>)
 8006890:	9801      	ldr	r0, [sp, #4]
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	b933      	cbnz	r3, 80068a4 <_free_r+0x30>
 8006896:	6063      	str	r3, [r4, #4]
 8006898:	6014      	str	r4, [r2, #0]
 800689a:	b003      	add	sp, #12
 800689c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068a0:	f000 b8e2 	b.w	8006a68 <__malloc_unlock>
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	d908      	bls.n	80068ba <_free_r+0x46>
 80068a8:	6825      	ldr	r5, [r4, #0]
 80068aa:	1961      	adds	r1, r4, r5
 80068ac:	428b      	cmp	r3, r1
 80068ae:	bf01      	itttt	eq
 80068b0:	6819      	ldreq	r1, [r3, #0]
 80068b2:	685b      	ldreq	r3, [r3, #4]
 80068b4:	1949      	addeq	r1, r1, r5
 80068b6:	6021      	streq	r1, [r4, #0]
 80068b8:	e7ed      	b.n	8006896 <_free_r+0x22>
 80068ba:	461a      	mov	r2, r3
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	b10b      	cbz	r3, 80068c4 <_free_r+0x50>
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	d9fa      	bls.n	80068ba <_free_r+0x46>
 80068c4:	6811      	ldr	r1, [r2, #0]
 80068c6:	1855      	adds	r5, r2, r1
 80068c8:	42a5      	cmp	r5, r4
 80068ca:	d10b      	bne.n	80068e4 <_free_r+0x70>
 80068cc:	6824      	ldr	r4, [r4, #0]
 80068ce:	4421      	add	r1, r4
 80068d0:	1854      	adds	r4, r2, r1
 80068d2:	42a3      	cmp	r3, r4
 80068d4:	6011      	str	r1, [r2, #0]
 80068d6:	d1e0      	bne.n	800689a <_free_r+0x26>
 80068d8:	681c      	ldr	r4, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	6053      	str	r3, [r2, #4]
 80068de:	440c      	add	r4, r1
 80068e0:	6014      	str	r4, [r2, #0]
 80068e2:	e7da      	b.n	800689a <_free_r+0x26>
 80068e4:	d902      	bls.n	80068ec <_free_r+0x78>
 80068e6:	230c      	movs	r3, #12
 80068e8:	6003      	str	r3, [r0, #0]
 80068ea:	e7d6      	b.n	800689a <_free_r+0x26>
 80068ec:	6825      	ldr	r5, [r4, #0]
 80068ee:	1961      	adds	r1, r4, r5
 80068f0:	428b      	cmp	r3, r1
 80068f2:	bf04      	itt	eq
 80068f4:	6819      	ldreq	r1, [r3, #0]
 80068f6:	685b      	ldreq	r3, [r3, #4]
 80068f8:	6063      	str	r3, [r4, #4]
 80068fa:	bf04      	itt	eq
 80068fc:	1949      	addeq	r1, r1, r5
 80068fe:	6021      	streq	r1, [r4, #0]
 8006900:	6054      	str	r4, [r2, #4]
 8006902:	e7ca      	b.n	800689a <_free_r+0x26>
 8006904:	b003      	add	sp, #12
 8006906:	bd30      	pop	{r4, r5, pc}
 8006908:	20000730 	.word	0x20000730

0800690c <malloc>:
 800690c:	4b02      	ldr	r3, [pc, #8]	; (8006918 <malloc+0xc>)
 800690e:	4601      	mov	r1, r0
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	f000 b823 	b.w	800695c <_malloc_r>
 8006916:	bf00      	nop
 8006918:	20000064 	.word	0x20000064

0800691c <sbrk_aligned>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	4e0e      	ldr	r6, [pc, #56]	; (8006958 <sbrk_aligned+0x3c>)
 8006920:	460c      	mov	r4, r1
 8006922:	6831      	ldr	r1, [r6, #0]
 8006924:	4605      	mov	r5, r0
 8006926:	b911      	cbnz	r1, 800692e <sbrk_aligned+0x12>
 8006928:	f000 fe96 	bl	8007658 <_sbrk_r>
 800692c:	6030      	str	r0, [r6, #0]
 800692e:	4621      	mov	r1, r4
 8006930:	4628      	mov	r0, r5
 8006932:	f000 fe91 	bl	8007658 <_sbrk_r>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	d00a      	beq.n	8006950 <sbrk_aligned+0x34>
 800693a:	1cc4      	adds	r4, r0, #3
 800693c:	f024 0403 	bic.w	r4, r4, #3
 8006940:	42a0      	cmp	r0, r4
 8006942:	d007      	beq.n	8006954 <sbrk_aligned+0x38>
 8006944:	1a21      	subs	r1, r4, r0
 8006946:	4628      	mov	r0, r5
 8006948:	f000 fe86 	bl	8007658 <_sbrk_r>
 800694c:	3001      	adds	r0, #1
 800694e:	d101      	bne.n	8006954 <sbrk_aligned+0x38>
 8006950:	f04f 34ff 	mov.w	r4, #4294967295
 8006954:	4620      	mov	r0, r4
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	20000734 	.word	0x20000734

0800695c <_malloc_r>:
 800695c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006960:	1ccd      	adds	r5, r1, #3
 8006962:	f025 0503 	bic.w	r5, r5, #3
 8006966:	3508      	adds	r5, #8
 8006968:	2d0c      	cmp	r5, #12
 800696a:	bf38      	it	cc
 800696c:	250c      	movcc	r5, #12
 800696e:	2d00      	cmp	r5, #0
 8006970:	4607      	mov	r7, r0
 8006972:	db01      	blt.n	8006978 <_malloc_r+0x1c>
 8006974:	42a9      	cmp	r1, r5
 8006976:	d905      	bls.n	8006984 <_malloc_r+0x28>
 8006978:	230c      	movs	r3, #12
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	2600      	movs	r6, #0
 800697e:	4630      	mov	r0, r6
 8006980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006984:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a58 <_malloc_r+0xfc>
 8006988:	f000 f868 	bl	8006a5c <__malloc_lock>
 800698c:	f8d8 3000 	ldr.w	r3, [r8]
 8006990:	461c      	mov	r4, r3
 8006992:	bb5c      	cbnz	r4, 80069ec <_malloc_r+0x90>
 8006994:	4629      	mov	r1, r5
 8006996:	4638      	mov	r0, r7
 8006998:	f7ff ffc0 	bl	800691c <sbrk_aligned>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	4604      	mov	r4, r0
 80069a0:	d155      	bne.n	8006a4e <_malloc_r+0xf2>
 80069a2:	f8d8 4000 	ldr.w	r4, [r8]
 80069a6:	4626      	mov	r6, r4
 80069a8:	2e00      	cmp	r6, #0
 80069aa:	d145      	bne.n	8006a38 <_malloc_r+0xdc>
 80069ac:	2c00      	cmp	r4, #0
 80069ae:	d048      	beq.n	8006a42 <_malloc_r+0xe6>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	4631      	mov	r1, r6
 80069b4:	4638      	mov	r0, r7
 80069b6:	eb04 0903 	add.w	r9, r4, r3
 80069ba:	f000 fe4d 	bl	8007658 <_sbrk_r>
 80069be:	4581      	cmp	r9, r0
 80069c0:	d13f      	bne.n	8006a42 <_malloc_r+0xe6>
 80069c2:	6821      	ldr	r1, [r4, #0]
 80069c4:	1a6d      	subs	r5, r5, r1
 80069c6:	4629      	mov	r1, r5
 80069c8:	4638      	mov	r0, r7
 80069ca:	f7ff ffa7 	bl	800691c <sbrk_aligned>
 80069ce:	3001      	adds	r0, #1
 80069d0:	d037      	beq.n	8006a42 <_malloc_r+0xe6>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	442b      	add	r3, r5
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	f8d8 3000 	ldr.w	r3, [r8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d038      	beq.n	8006a52 <_malloc_r+0xf6>
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	42a2      	cmp	r2, r4
 80069e4:	d12b      	bne.n	8006a3e <_malloc_r+0xe2>
 80069e6:	2200      	movs	r2, #0
 80069e8:	605a      	str	r2, [r3, #4]
 80069ea:	e00f      	b.n	8006a0c <_malloc_r+0xb0>
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	1b52      	subs	r2, r2, r5
 80069f0:	d41f      	bmi.n	8006a32 <_malloc_r+0xd6>
 80069f2:	2a0b      	cmp	r2, #11
 80069f4:	d917      	bls.n	8006a26 <_malloc_r+0xca>
 80069f6:	1961      	adds	r1, r4, r5
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	6025      	str	r5, [r4, #0]
 80069fc:	bf18      	it	ne
 80069fe:	6059      	strne	r1, [r3, #4]
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	bf08      	it	eq
 8006a04:	f8c8 1000 	streq.w	r1, [r8]
 8006a08:	5162      	str	r2, [r4, r5]
 8006a0a:	604b      	str	r3, [r1, #4]
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f104 060b 	add.w	r6, r4, #11
 8006a12:	f000 f829 	bl	8006a68 <__malloc_unlock>
 8006a16:	f026 0607 	bic.w	r6, r6, #7
 8006a1a:	1d23      	adds	r3, r4, #4
 8006a1c:	1af2      	subs	r2, r6, r3
 8006a1e:	d0ae      	beq.n	800697e <_malloc_r+0x22>
 8006a20:	1b9b      	subs	r3, r3, r6
 8006a22:	50a3      	str	r3, [r4, r2]
 8006a24:	e7ab      	b.n	800697e <_malloc_r+0x22>
 8006a26:	42a3      	cmp	r3, r4
 8006a28:	6862      	ldr	r2, [r4, #4]
 8006a2a:	d1dd      	bne.n	80069e8 <_malloc_r+0x8c>
 8006a2c:	f8c8 2000 	str.w	r2, [r8]
 8006a30:	e7ec      	b.n	8006a0c <_malloc_r+0xb0>
 8006a32:	4623      	mov	r3, r4
 8006a34:	6864      	ldr	r4, [r4, #4]
 8006a36:	e7ac      	b.n	8006992 <_malloc_r+0x36>
 8006a38:	4634      	mov	r4, r6
 8006a3a:	6876      	ldr	r6, [r6, #4]
 8006a3c:	e7b4      	b.n	80069a8 <_malloc_r+0x4c>
 8006a3e:	4613      	mov	r3, r2
 8006a40:	e7cc      	b.n	80069dc <_malloc_r+0x80>
 8006a42:	230c      	movs	r3, #12
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	4638      	mov	r0, r7
 8006a48:	f000 f80e 	bl	8006a68 <__malloc_unlock>
 8006a4c:	e797      	b.n	800697e <_malloc_r+0x22>
 8006a4e:	6025      	str	r5, [r4, #0]
 8006a50:	e7dc      	b.n	8006a0c <_malloc_r+0xb0>
 8006a52:	605b      	str	r3, [r3, #4]
 8006a54:	deff      	udf	#255	; 0xff
 8006a56:	bf00      	nop
 8006a58:	20000730 	.word	0x20000730

08006a5c <__malloc_lock>:
 8006a5c:	4801      	ldr	r0, [pc, #4]	; (8006a64 <__malloc_lock+0x8>)
 8006a5e:	f7ff b88c 	b.w	8005b7a <__retarget_lock_acquire_recursive>
 8006a62:	bf00      	nop
 8006a64:	2000072c 	.word	0x2000072c

08006a68 <__malloc_unlock>:
 8006a68:	4801      	ldr	r0, [pc, #4]	; (8006a70 <__malloc_unlock+0x8>)
 8006a6a:	f7ff b887 	b.w	8005b7c <__retarget_lock_release_recursive>
 8006a6e:	bf00      	nop
 8006a70:	2000072c 	.word	0x2000072c

08006a74 <_Balloc>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	69c6      	ldr	r6, [r0, #28]
 8006a78:	4604      	mov	r4, r0
 8006a7a:	460d      	mov	r5, r1
 8006a7c:	b976      	cbnz	r6, 8006a9c <_Balloc+0x28>
 8006a7e:	2010      	movs	r0, #16
 8006a80:	f7ff ff44 	bl	800690c <malloc>
 8006a84:	4602      	mov	r2, r0
 8006a86:	61e0      	str	r0, [r4, #28]
 8006a88:	b920      	cbnz	r0, 8006a94 <_Balloc+0x20>
 8006a8a:	4b18      	ldr	r3, [pc, #96]	; (8006aec <_Balloc+0x78>)
 8006a8c:	4818      	ldr	r0, [pc, #96]	; (8006af0 <_Balloc+0x7c>)
 8006a8e:	216b      	movs	r1, #107	; 0x6b
 8006a90:	f000 fe00 	bl	8007694 <__assert_func>
 8006a94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a98:	6006      	str	r6, [r0, #0]
 8006a9a:	60c6      	str	r6, [r0, #12]
 8006a9c:	69e6      	ldr	r6, [r4, #28]
 8006a9e:	68f3      	ldr	r3, [r6, #12]
 8006aa0:	b183      	cbz	r3, 8006ac4 <_Balloc+0x50>
 8006aa2:	69e3      	ldr	r3, [r4, #28]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006aaa:	b9b8      	cbnz	r0, 8006adc <_Balloc+0x68>
 8006aac:	2101      	movs	r1, #1
 8006aae:	fa01 f605 	lsl.w	r6, r1, r5
 8006ab2:	1d72      	adds	r2, r6, #5
 8006ab4:	0092      	lsls	r2, r2, #2
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 fe0a 	bl	80076d0 <_calloc_r>
 8006abc:	b160      	cbz	r0, 8006ad8 <_Balloc+0x64>
 8006abe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ac2:	e00e      	b.n	8006ae2 <_Balloc+0x6e>
 8006ac4:	2221      	movs	r2, #33	; 0x21
 8006ac6:	2104      	movs	r1, #4
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fe01 	bl	80076d0 <_calloc_r>
 8006ace:	69e3      	ldr	r3, [r4, #28]
 8006ad0:	60f0      	str	r0, [r6, #12]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e4      	bne.n	8006aa2 <_Balloc+0x2e>
 8006ad8:	2000      	movs	r0, #0
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
 8006adc:	6802      	ldr	r2, [r0, #0]
 8006ade:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ae8:	e7f7      	b.n	8006ada <_Balloc+0x66>
 8006aea:	bf00      	nop
 8006aec:	08007f21 	.word	0x08007f21
 8006af0:	08007fa1 	.word	0x08007fa1

08006af4 <_Bfree>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	69c6      	ldr	r6, [r0, #28]
 8006af8:	4605      	mov	r5, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	b976      	cbnz	r6, 8006b1c <_Bfree+0x28>
 8006afe:	2010      	movs	r0, #16
 8006b00:	f7ff ff04 	bl	800690c <malloc>
 8006b04:	4602      	mov	r2, r0
 8006b06:	61e8      	str	r0, [r5, #28]
 8006b08:	b920      	cbnz	r0, 8006b14 <_Bfree+0x20>
 8006b0a:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <_Bfree+0x3c>)
 8006b0c:	4809      	ldr	r0, [pc, #36]	; (8006b34 <_Bfree+0x40>)
 8006b0e:	218f      	movs	r1, #143	; 0x8f
 8006b10:	f000 fdc0 	bl	8007694 <__assert_func>
 8006b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b18:	6006      	str	r6, [r0, #0]
 8006b1a:	60c6      	str	r6, [r0, #12]
 8006b1c:	b13c      	cbz	r4, 8006b2e <_Bfree+0x3a>
 8006b1e:	69eb      	ldr	r3, [r5, #28]
 8006b20:	6862      	ldr	r2, [r4, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b28:	6021      	str	r1, [r4, #0]
 8006b2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	08007f21 	.word	0x08007f21
 8006b34:	08007fa1 	.word	0x08007fa1

08006b38 <__multadd>:
 8006b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3c:	690d      	ldr	r5, [r1, #16]
 8006b3e:	4607      	mov	r7, r0
 8006b40:	460c      	mov	r4, r1
 8006b42:	461e      	mov	r6, r3
 8006b44:	f101 0c14 	add.w	ip, r1, #20
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f8dc 3000 	ldr.w	r3, [ip]
 8006b4e:	b299      	uxth	r1, r3
 8006b50:	fb02 6101 	mla	r1, r2, r1, r6
 8006b54:	0c1e      	lsrs	r6, r3, #16
 8006b56:	0c0b      	lsrs	r3, r1, #16
 8006b58:	fb02 3306 	mla	r3, r2, r6, r3
 8006b5c:	b289      	uxth	r1, r1
 8006b5e:	3001      	adds	r0, #1
 8006b60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b64:	4285      	cmp	r5, r0
 8006b66:	f84c 1b04 	str.w	r1, [ip], #4
 8006b6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b6e:	dcec      	bgt.n	8006b4a <__multadd+0x12>
 8006b70:	b30e      	cbz	r6, 8006bb6 <__multadd+0x7e>
 8006b72:	68a3      	ldr	r3, [r4, #8]
 8006b74:	42ab      	cmp	r3, r5
 8006b76:	dc19      	bgt.n	8006bac <__multadd+0x74>
 8006b78:	6861      	ldr	r1, [r4, #4]
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	3101      	adds	r1, #1
 8006b7e:	f7ff ff79 	bl	8006a74 <_Balloc>
 8006b82:	4680      	mov	r8, r0
 8006b84:	b928      	cbnz	r0, 8006b92 <__multadd+0x5a>
 8006b86:	4602      	mov	r2, r0
 8006b88:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <__multadd+0x84>)
 8006b8a:	480d      	ldr	r0, [pc, #52]	; (8006bc0 <__multadd+0x88>)
 8006b8c:	21ba      	movs	r1, #186	; 0xba
 8006b8e:	f000 fd81 	bl	8007694 <__assert_func>
 8006b92:	6922      	ldr	r2, [r4, #16]
 8006b94:	3202      	adds	r2, #2
 8006b96:	f104 010c 	add.w	r1, r4, #12
 8006b9a:	0092      	lsls	r2, r2, #2
 8006b9c:	300c      	adds	r0, #12
 8006b9e:	f000 fd6b 	bl	8007678 <memcpy>
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f7ff ffa5 	bl	8006af4 <_Bfree>
 8006baa:	4644      	mov	r4, r8
 8006bac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bb0:	3501      	adds	r5, #1
 8006bb2:	615e      	str	r6, [r3, #20]
 8006bb4:	6125      	str	r5, [r4, #16]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bbc:	08007f90 	.word	0x08007f90
 8006bc0:	08007fa1 	.word	0x08007fa1

08006bc4 <__hi0bits>:
 8006bc4:	0c03      	lsrs	r3, r0, #16
 8006bc6:	041b      	lsls	r3, r3, #16
 8006bc8:	b9d3      	cbnz	r3, 8006c00 <__hi0bits+0x3c>
 8006bca:	0400      	lsls	r0, r0, #16
 8006bcc:	2310      	movs	r3, #16
 8006bce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006bd2:	bf04      	itt	eq
 8006bd4:	0200      	lsleq	r0, r0, #8
 8006bd6:	3308      	addeq	r3, #8
 8006bd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006bdc:	bf04      	itt	eq
 8006bde:	0100      	lsleq	r0, r0, #4
 8006be0:	3304      	addeq	r3, #4
 8006be2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006be6:	bf04      	itt	eq
 8006be8:	0080      	lsleq	r0, r0, #2
 8006bea:	3302      	addeq	r3, #2
 8006bec:	2800      	cmp	r0, #0
 8006bee:	db05      	blt.n	8006bfc <__hi0bits+0x38>
 8006bf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006bf4:	f103 0301 	add.w	r3, r3, #1
 8006bf8:	bf08      	it	eq
 8006bfa:	2320      	moveq	r3, #32
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	4770      	bx	lr
 8006c00:	2300      	movs	r3, #0
 8006c02:	e7e4      	b.n	8006bce <__hi0bits+0xa>

08006c04 <__lo0bits>:
 8006c04:	6803      	ldr	r3, [r0, #0]
 8006c06:	f013 0207 	ands.w	r2, r3, #7
 8006c0a:	d00c      	beq.n	8006c26 <__lo0bits+0x22>
 8006c0c:	07d9      	lsls	r1, r3, #31
 8006c0e:	d422      	bmi.n	8006c56 <__lo0bits+0x52>
 8006c10:	079a      	lsls	r2, r3, #30
 8006c12:	bf49      	itett	mi
 8006c14:	085b      	lsrmi	r3, r3, #1
 8006c16:	089b      	lsrpl	r3, r3, #2
 8006c18:	6003      	strmi	r3, [r0, #0]
 8006c1a:	2201      	movmi	r2, #1
 8006c1c:	bf5c      	itt	pl
 8006c1e:	6003      	strpl	r3, [r0, #0]
 8006c20:	2202      	movpl	r2, #2
 8006c22:	4610      	mov	r0, r2
 8006c24:	4770      	bx	lr
 8006c26:	b299      	uxth	r1, r3
 8006c28:	b909      	cbnz	r1, 8006c2e <__lo0bits+0x2a>
 8006c2a:	0c1b      	lsrs	r3, r3, #16
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	b2d9      	uxtb	r1, r3
 8006c30:	b909      	cbnz	r1, 8006c36 <__lo0bits+0x32>
 8006c32:	3208      	adds	r2, #8
 8006c34:	0a1b      	lsrs	r3, r3, #8
 8006c36:	0719      	lsls	r1, r3, #28
 8006c38:	bf04      	itt	eq
 8006c3a:	091b      	lsreq	r3, r3, #4
 8006c3c:	3204      	addeq	r2, #4
 8006c3e:	0799      	lsls	r1, r3, #30
 8006c40:	bf04      	itt	eq
 8006c42:	089b      	lsreq	r3, r3, #2
 8006c44:	3202      	addeq	r2, #2
 8006c46:	07d9      	lsls	r1, r3, #31
 8006c48:	d403      	bmi.n	8006c52 <__lo0bits+0x4e>
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	f102 0201 	add.w	r2, r2, #1
 8006c50:	d003      	beq.n	8006c5a <__lo0bits+0x56>
 8006c52:	6003      	str	r3, [r0, #0]
 8006c54:	e7e5      	b.n	8006c22 <__lo0bits+0x1e>
 8006c56:	2200      	movs	r2, #0
 8006c58:	e7e3      	b.n	8006c22 <__lo0bits+0x1e>
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	e7e1      	b.n	8006c22 <__lo0bits+0x1e>
	...

08006c60 <__i2b>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	460c      	mov	r4, r1
 8006c64:	2101      	movs	r1, #1
 8006c66:	f7ff ff05 	bl	8006a74 <_Balloc>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	b928      	cbnz	r0, 8006c7a <__i2b+0x1a>
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <__i2b+0x24>)
 8006c70:	4805      	ldr	r0, [pc, #20]	; (8006c88 <__i2b+0x28>)
 8006c72:	f240 1145 	movw	r1, #325	; 0x145
 8006c76:	f000 fd0d 	bl	8007694 <__assert_func>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	6144      	str	r4, [r0, #20]
 8006c7e:	6103      	str	r3, [r0, #16]
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08007f90 	.word	0x08007f90
 8006c88:	08007fa1 	.word	0x08007fa1

08006c8c <__multiply>:
 8006c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c90:	4691      	mov	r9, r2
 8006c92:	690a      	ldr	r2, [r1, #16]
 8006c94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	bfb8      	it	lt
 8006c9c:	460b      	movlt	r3, r1
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	bfbc      	itt	lt
 8006ca2:	464c      	movlt	r4, r9
 8006ca4:	4699      	movlt	r9, r3
 8006ca6:	6927      	ldr	r7, [r4, #16]
 8006ca8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006cac:	68a3      	ldr	r3, [r4, #8]
 8006cae:	6861      	ldr	r1, [r4, #4]
 8006cb0:	eb07 060a 	add.w	r6, r7, sl
 8006cb4:	42b3      	cmp	r3, r6
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	bfb8      	it	lt
 8006cba:	3101      	addlt	r1, #1
 8006cbc:	f7ff feda 	bl	8006a74 <_Balloc>
 8006cc0:	b930      	cbnz	r0, 8006cd0 <__multiply+0x44>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	4b44      	ldr	r3, [pc, #272]	; (8006dd8 <__multiply+0x14c>)
 8006cc6:	4845      	ldr	r0, [pc, #276]	; (8006ddc <__multiply+0x150>)
 8006cc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ccc:	f000 fce2 	bl	8007694 <__assert_func>
 8006cd0:	f100 0514 	add.w	r5, r0, #20
 8006cd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cd8:	462b      	mov	r3, r5
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4543      	cmp	r3, r8
 8006cde:	d321      	bcc.n	8006d24 <__multiply+0x98>
 8006ce0:	f104 0314 	add.w	r3, r4, #20
 8006ce4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ce8:	f109 0314 	add.w	r3, r9, #20
 8006cec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006cf0:	9202      	str	r2, [sp, #8]
 8006cf2:	1b3a      	subs	r2, r7, r4
 8006cf4:	3a15      	subs	r2, #21
 8006cf6:	f022 0203 	bic.w	r2, r2, #3
 8006cfa:	3204      	adds	r2, #4
 8006cfc:	f104 0115 	add.w	r1, r4, #21
 8006d00:	428f      	cmp	r7, r1
 8006d02:	bf38      	it	cc
 8006d04:	2204      	movcc	r2, #4
 8006d06:	9201      	str	r2, [sp, #4]
 8006d08:	9a02      	ldr	r2, [sp, #8]
 8006d0a:	9303      	str	r3, [sp, #12]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d80c      	bhi.n	8006d2a <__multiply+0x9e>
 8006d10:	2e00      	cmp	r6, #0
 8006d12:	dd03      	ble.n	8006d1c <__multiply+0x90>
 8006d14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d05b      	beq.n	8006dd4 <__multiply+0x148>
 8006d1c:	6106      	str	r6, [r0, #16]
 8006d1e:	b005      	add	sp, #20
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d24:	f843 2b04 	str.w	r2, [r3], #4
 8006d28:	e7d8      	b.n	8006cdc <__multiply+0x50>
 8006d2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d2e:	f1ba 0f00 	cmp.w	sl, #0
 8006d32:	d024      	beq.n	8006d7e <__multiply+0xf2>
 8006d34:	f104 0e14 	add.w	lr, r4, #20
 8006d38:	46a9      	mov	r9, r5
 8006d3a:	f04f 0c00 	mov.w	ip, #0
 8006d3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d42:	f8d9 1000 	ldr.w	r1, [r9]
 8006d46:	fa1f fb82 	uxth.w	fp, r2
 8006d4a:	b289      	uxth	r1, r1
 8006d4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d54:	f8d9 2000 	ldr.w	r2, [r9]
 8006d58:	4461      	add	r1, ip
 8006d5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d66:	b289      	uxth	r1, r1
 8006d68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d6c:	4577      	cmp	r7, lr
 8006d6e:	f849 1b04 	str.w	r1, [r9], #4
 8006d72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d76:	d8e2      	bhi.n	8006d3e <__multiply+0xb2>
 8006d78:	9a01      	ldr	r2, [sp, #4]
 8006d7a:	f845 c002 	str.w	ip, [r5, r2]
 8006d7e:	9a03      	ldr	r2, [sp, #12]
 8006d80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d84:	3304      	adds	r3, #4
 8006d86:	f1b9 0f00 	cmp.w	r9, #0
 8006d8a:	d021      	beq.n	8006dd0 <__multiply+0x144>
 8006d8c:	6829      	ldr	r1, [r5, #0]
 8006d8e:	f104 0c14 	add.w	ip, r4, #20
 8006d92:	46ae      	mov	lr, r5
 8006d94:	f04f 0a00 	mov.w	sl, #0
 8006d98:	f8bc b000 	ldrh.w	fp, [ip]
 8006d9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006da0:	fb09 220b 	mla	r2, r9, fp, r2
 8006da4:	4452      	add	r2, sl
 8006da6:	b289      	uxth	r1, r1
 8006da8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006dac:	f84e 1b04 	str.w	r1, [lr], #4
 8006db0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006db4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006db8:	f8be 1000 	ldrh.w	r1, [lr]
 8006dbc:	fb09 110a 	mla	r1, r9, sl, r1
 8006dc0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006dc4:	4567      	cmp	r7, ip
 8006dc6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006dca:	d8e5      	bhi.n	8006d98 <__multiply+0x10c>
 8006dcc:	9a01      	ldr	r2, [sp, #4]
 8006dce:	50a9      	str	r1, [r5, r2]
 8006dd0:	3504      	adds	r5, #4
 8006dd2:	e799      	b.n	8006d08 <__multiply+0x7c>
 8006dd4:	3e01      	subs	r6, #1
 8006dd6:	e79b      	b.n	8006d10 <__multiply+0x84>
 8006dd8:	08007f90 	.word	0x08007f90
 8006ddc:	08007fa1 	.word	0x08007fa1

08006de0 <__pow5mult>:
 8006de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de4:	4615      	mov	r5, r2
 8006de6:	f012 0203 	ands.w	r2, r2, #3
 8006dea:	4606      	mov	r6, r0
 8006dec:	460f      	mov	r7, r1
 8006dee:	d007      	beq.n	8006e00 <__pow5mult+0x20>
 8006df0:	4c25      	ldr	r4, [pc, #148]	; (8006e88 <__pow5mult+0xa8>)
 8006df2:	3a01      	subs	r2, #1
 8006df4:	2300      	movs	r3, #0
 8006df6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dfa:	f7ff fe9d 	bl	8006b38 <__multadd>
 8006dfe:	4607      	mov	r7, r0
 8006e00:	10ad      	asrs	r5, r5, #2
 8006e02:	d03d      	beq.n	8006e80 <__pow5mult+0xa0>
 8006e04:	69f4      	ldr	r4, [r6, #28]
 8006e06:	b97c      	cbnz	r4, 8006e28 <__pow5mult+0x48>
 8006e08:	2010      	movs	r0, #16
 8006e0a:	f7ff fd7f 	bl	800690c <malloc>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	61f0      	str	r0, [r6, #28]
 8006e12:	b928      	cbnz	r0, 8006e20 <__pow5mult+0x40>
 8006e14:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <__pow5mult+0xac>)
 8006e16:	481e      	ldr	r0, [pc, #120]	; (8006e90 <__pow5mult+0xb0>)
 8006e18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006e1c:	f000 fc3a 	bl	8007694 <__assert_func>
 8006e20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e24:	6004      	str	r4, [r0, #0]
 8006e26:	60c4      	str	r4, [r0, #12]
 8006e28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006e2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e30:	b94c      	cbnz	r4, 8006e46 <__pow5mult+0x66>
 8006e32:	f240 2171 	movw	r1, #625	; 0x271
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7ff ff12 	bl	8006c60 <__i2b>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e42:	4604      	mov	r4, r0
 8006e44:	6003      	str	r3, [r0, #0]
 8006e46:	f04f 0900 	mov.w	r9, #0
 8006e4a:	07eb      	lsls	r3, r5, #31
 8006e4c:	d50a      	bpl.n	8006e64 <__pow5mult+0x84>
 8006e4e:	4639      	mov	r1, r7
 8006e50:	4622      	mov	r2, r4
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7ff ff1a 	bl	8006c8c <__multiply>
 8006e58:	4639      	mov	r1, r7
 8006e5a:	4680      	mov	r8, r0
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f7ff fe49 	bl	8006af4 <_Bfree>
 8006e62:	4647      	mov	r7, r8
 8006e64:	106d      	asrs	r5, r5, #1
 8006e66:	d00b      	beq.n	8006e80 <__pow5mult+0xa0>
 8006e68:	6820      	ldr	r0, [r4, #0]
 8006e6a:	b938      	cbnz	r0, 8006e7c <__pow5mult+0x9c>
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7ff ff0b 	bl	8006c8c <__multiply>
 8006e76:	6020      	str	r0, [r4, #0]
 8006e78:	f8c0 9000 	str.w	r9, [r0]
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	e7e4      	b.n	8006e4a <__pow5mult+0x6a>
 8006e80:	4638      	mov	r0, r7
 8006e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e86:	bf00      	nop
 8006e88:	080080f0 	.word	0x080080f0
 8006e8c:	08007f21 	.word	0x08007f21
 8006e90:	08007fa1 	.word	0x08007fa1

08006e94 <__lshift>:
 8006e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	460c      	mov	r4, r1
 8006e9a:	6849      	ldr	r1, [r1, #4]
 8006e9c:	6923      	ldr	r3, [r4, #16]
 8006e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ea2:	68a3      	ldr	r3, [r4, #8]
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	4691      	mov	r9, r2
 8006ea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006eac:	f108 0601 	add.w	r6, r8, #1
 8006eb0:	42b3      	cmp	r3, r6
 8006eb2:	db0b      	blt.n	8006ecc <__lshift+0x38>
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f7ff fddd 	bl	8006a74 <_Balloc>
 8006eba:	4605      	mov	r5, r0
 8006ebc:	b948      	cbnz	r0, 8006ed2 <__lshift+0x3e>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	4b28      	ldr	r3, [pc, #160]	; (8006f64 <__lshift+0xd0>)
 8006ec2:	4829      	ldr	r0, [pc, #164]	; (8006f68 <__lshift+0xd4>)
 8006ec4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006ec8:	f000 fbe4 	bl	8007694 <__assert_func>
 8006ecc:	3101      	adds	r1, #1
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	e7ee      	b.n	8006eb0 <__lshift+0x1c>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f100 0114 	add.w	r1, r0, #20
 8006ed8:	f100 0210 	add.w	r2, r0, #16
 8006edc:	4618      	mov	r0, r3
 8006ede:	4553      	cmp	r3, sl
 8006ee0:	db33      	blt.n	8006f4a <__lshift+0xb6>
 8006ee2:	6920      	ldr	r0, [r4, #16]
 8006ee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ee8:	f104 0314 	add.w	r3, r4, #20
 8006eec:	f019 091f 	ands.w	r9, r9, #31
 8006ef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ef4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ef8:	d02b      	beq.n	8006f52 <__lshift+0xbe>
 8006efa:	f1c9 0e20 	rsb	lr, r9, #32
 8006efe:	468a      	mov	sl, r1
 8006f00:	2200      	movs	r2, #0
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	fa00 f009 	lsl.w	r0, r0, r9
 8006f08:	4310      	orrs	r0, r2
 8006f0a:	f84a 0b04 	str.w	r0, [sl], #4
 8006f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f12:	459c      	cmp	ip, r3
 8006f14:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f18:	d8f3      	bhi.n	8006f02 <__lshift+0x6e>
 8006f1a:	ebac 0304 	sub.w	r3, ip, r4
 8006f1e:	3b15      	subs	r3, #21
 8006f20:	f023 0303 	bic.w	r3, r3, #3
 8006f24:	3304      	adds	r3, #4
 8006f26:	f104 0015 	add.w	r0, r4, #21
 8006f2a:	4584      	cmp	ip, r0
 8006f2c:	bf38      	it	cc
 8006f2e:	2304      	movcc	r3, #4
 8006f30:	50ca      	str	r2, [r1, r3]
 8006f32:	b10a      	cbz	r2, 8006f38 <__lshift+0xa4>
 8006f34:	f108 0602 	add.w	r6, r8, #2
 8006f38:	3e01      	subs	r6, #1
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	612e      	str	r6, [r5, #16]
 8006f3e:	4621      	mov	r1, r4
 8006f40:	f7ff fdd8 	bl	8006af4 <_Bfree>
 8006f44:	4628      	mov	r0, r5
 8006f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f4e:	3301      	adds	r3, #1
 8006f50:	e7c5      	b.n	8006ede <__lshift+0x4a>
 8006f52:	3904      	subs	r1, #4
 8006f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f5c:	459c      	cmp	ip, r3
 8006f5e:	d8f9      	bhi.n	8006f54 <__lshift+0xc0>
 8006f60:	e7ea      	b.n	8006f38 <__lshift+0xa4>
 8006f62:	bf00      	nop
 8006f64:	08007f90 	.word	0x08007f90
 8006f68:	08007fa1 	.word	0x08007fa1

08006f6c <__mcmp>:
 8006f6c:	b530      	push	{r4, r5, lr}
 8006f6e:	6902      	ldr	r2, [r0, #16]
 8006f70:	690c      	ldr	r4, [r1, #16]
 8006f72:	1b12      	subs	r2, r2, r4
 8006f74:	d10e      	bne.n	8006f94 <__mcmp+0x28>
 8006f76:	f100 0314 	add.w	r3, r0, #20
 8006f7a:	3114      	adds	r1, #20
 8006f7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f8c:	42a5      	cmp	r5, r4
 8006f8e:	d003      	beq.n	8006f98 <__mcmp+0x2c>
 8006f90:	d305      	bcc.n	8006f9e <__mcmp+0x32>
 8006f92:	2201      	movs	r2, #1
 8006f94:	4610      	mov	r0, r2
 8006f96:	bd30      	pop	{r4, r5, pc}
 8006f98:	4283      	cmp	r3, r0
 8006f9a:	d3f3      	bcc.n	8006f84 <__mcmp+0x18>
 8006f9c:	e7fa      	b.n	8006f94 <__mcmp+0x28>
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa2:	e7f7      	b.n	8006f94 <__mcmp+0x28>

08006fa4 <__mdiff>:
 8006fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa8:	460c      	mov	r4, r1
 8006faa:	4606      	mov	r6, r0
 8006fac:	4611      	mov	r1, r2
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4690      	mov	r8, r2
 8006fb2:	f7ff ffdb 	bl	8006f6c <__mcmp>
 8006fb6:	1e05      	subs	r5, r0, #0
 8006fb8:	d110      	bne.n	8006fdc <__mdiff+0x38>
 8006fba:	4629      	mov	r1, r5
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff fd59 	bl	8006a74 <_Balloc>
 8006fc2:	b930      	cbnz	r0, 8006fd2 <__mdiff+0x2e>
 8006fc4:	4b3a      	ldr	r3, [pc, #232]	; (80070b0 <__mdiff+0x10c>)
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	f240 2137 	movw	r1, #567	; 0x237
 8006fcc:	4839      	ldr	r0, [pc, #228]	; (80070b4 <__mdiff+0x110>)
 8006fce:	f000 fb61 	bl	8007694 <__assert_func>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	bfa4      	itt	ge
 8006fde:	4643      	movge	r3, r8
 8006fe0:	46a0      	movge	r8, r4
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006fe8:	bfa6      	itte	ge
 8006fea:	461c      	movge	r4, r3
 8006fec:	2500      	movge	r5, #0
 8006fee:	2501      	movlt	r5, #1
 8006ff0:	f7ff fd40 	bl	8006a74 <_Balloc>
 8006ff4:	b920      	cbnz	r0, 8007000 <__mdiff+0x5c>
 8006ff6:	4b2e      	ldr	r3, [pc, #184]	; (80070b0 <__mdiff+0x10c>)
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	f240 2145 	movw	r1, #581	; 0x245
 8006ffe:	e7e5      	b.n	8006fcc <__mdiff+0x28>
 8007000:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007004:	6926      	ldr	r6, [r4, #16]
 8007006:	60c5      	str	r5, [r0, #12]
 8007008:	f104 0914 	add.w	r9, r4, #20
 800700c:	f108 0514 	add.w	r5, r8, #20
 8007010:	f100 0e14 	add.w	lr, r0, #20
 8007014:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800701c:	f108 0210 	add.w	r2, r8, #16
 8007020:	46f2      	mov	sl, lr
 8007022:	2100      	movs	r1, #0
 8007024:	f859 3b04 	ldr.w	r3, [r9], #4
 8007028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800702c:	fa11 f88b 	uxtah	r8, r1, fp
 8007030:	b299      	uxth	r1, r3
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	eba8 0801 	sub.w	r8, r8, r1
 8007038:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800703c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007040:	fa1f f888 	uxth.w	r8, r8
 8007044:	1419      	asrs	r1, r3, #16
 8007046:	454e      	cmp	r6, r9
 8007048:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800704c:	f84a 3b04 	str.w	r3, [sl], #4
 8007050:	d8e8      	bhi.n	8007024 <__mdiff+0x80>
 8007052:	1b33      	subs	r3, r6, r4
 8007054:	3b15      	subs	r3, #21
 8007056:	f023 0303 	bic.w	r3, r3, #3
 800705a:	3304      	adds	r3, #4
 800705c:	3415      	adds	r4, #21
 800705e:	42a6      	cmp	r6, r4
 8007060:	bf38      	it	cc
 8007062:	2304      	movcc	r3, #4
 8007064:	441d      	add	r5, r3
 8007066:	4473      	add	r3, lr
 8007068:	469e      	mov	lr, r3
 800706a:	462e      	mov	r6, r5
 800706c:	4566      	cmp	r6, ip
 800706e:	d30e      	bcc.n	800708e <__mdiff+0xea>
 8007070:	f10c 0203 	add.w	r2, ip, #3
 8007074:	1b52      	subs	r2, r2, r5
 8007076:	f022 0203 	bic.w	r2, r2, #3
 800707a:	3d03      	subs	r5, #3
 800707c:	45ac      	cmp	ip, r5
 800707e:	bf38      	it	cc
 8007080:	2200      	movcc	r2, #0
 8007082:	4413      	add	r3, r2
 8007084:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007088:	b17a      	cbz	r2, 80070aa <__mdiff+0x106>
 800708a:	6107      	str	r7, [r0, #16]
 800708c:	e7a4      	b.n	8006fd8 <__mdiff+0x34>
 800708e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007092:	fa11 f288 	uxtah	r2, r1, r8
 8007096:	1414      	asrs	r4, r2, #16
 8007098:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800709c:	b292      	uxth	r2, r2
 800709e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80070a2:	f84e 2b04 	str.w	r2, [lr], #4
 80070a6:	1421      	asrs	r1, r4, #16
 80070a8:	e7e0      	b.n	800706c <__mdiff+0xc8>
 80070aa:	3f01      	subs	r7, #1
 80070ac:	e7ea      	b.n	8007084 <__mdiff+0xe0>
 80070ae:	bf00      	nop
 80070b0:	08007f90 	.word	0x08007f90
 80070b4:	08007fa1 	.word	0x08007fa1

080070b8 <__d2b>:
 80070b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070bc:	460f      	mov	r7, r1
 80070be:	2101      	movs	r1, #1
 80070c0:	ec59 8b10 	vmov	r8, r9, d0
 80070c4:	4616      	mov	r6, r2
 80070c6:	f7ff fcd5 	bl	8006a74 <_Balloc>
 80070ca:	4604      	mov	r4, r0
 80070cc:	b930      	cbnz	r0, 80070dc <__d2b+0x24>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b24      	ldr	r3, [pc, #144]	; (8007164 <__d2b+0xac>)
 80070d2:	4825      	ldr	r0, [pc, #148]	; (8007168 <__d2b+0xb0>)
 80070d4:	f240 310f 	movw	r1, #783	; 0x30f
 80070d8:	f000 fadc 	bl	8007694 <__assert_func>
 80070dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070e4:	bb2d      	cbnz	r5, 8007132 <__d2b+0x7a>
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	f1b8 0300 	subs.w	r3, r8, #0
 80070ec:	d026      	beq.n	800713c <__d2b+0x84>
 80070ee:	4668      	mov	r0, sp
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	f7ff fd87 	bl	8006c04 <__lo0bits>
 80070f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070fa:	b1e8      	cbz	r0, 8007138 <__d2b+0x80>
 80070fc:	f1c0 0320 	rsb	r3, r0, #32
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	430b      	orrs	r3, r1
 8007106:	40c2      	lsrs	r2, r0
 8007108:	6163      	str	r3, [r4, #20]
 800710a:	9201      	str	r2, [sp, #4]
 800710c:	9b01      	ldr	r3, [sp, #4]
 800710e:	61a3      	str	r3, [r4, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	bf14      	ite	ne
 8007114:	2202      	movne	r2, #2
 8007116:	2201      	moveq	r2, #1
 8007118:	6122      	str	r2, [r4, #16]
 800711a:	b1bd      	cbz	r5, 800714c <__d2b+0x94>
 800711c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007120:	4405      	add	r5, r0
 8007122:	603d      	str	r5, [r7, #0]
 8007124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007128:	6030      	str	r0, [r6, #0]
 800712a:	4620      	mov	r0, r4
 800712c:	b003      	add	sp, #12
 800712e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007136:	e7d6      	b.n	80070e6 <__d2b+0x2e>
 8007138:	6161      	str	r1, [r4, #20]
 800713a:	e7e7      	b.n	800710c <__d2b+0x54>
 800713c:	a801      	add	r0, sp, #4
 800713e:	f7ff fd61 	bl	8006c04 <__lo0bits>
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	6163      	str	r3, [r4, #20]
 8007146:	3020      	adds	r0, #32
 8007148:	2201      	movs	r2, #1
 800714a:	e7e5      	b.n	8007118 <__d2b+0x60>
 800714c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007154:	6038      	str	r0, [r7, #0]
 8007156:	6918      	ldr	r0, [r3, #16]
 8007158:	f7ff fd34 	bl	8006bc4 <__hi0bits>
 800715c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007160:	e7e2      	b.n	8007128 <__d2b+0x70>
 8007162:	bf00      	nop
 8007164:	08007f90 	.word	0x08007f90
 8007168:	08007fa1 	.word	0x08007fa1

0800716c <__sfputc_r>:
 800716c:	6893      	ldr	r3, [r2, #8]
 800716e:	3b01      	subs	r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	b410      	push	{r4}
 8007174:	6093      	str	r3, [r2, #8]
 8007176:	da08      	bge.n	800718a <__sfputc_r+0x1e>
 8007178:	6994      	ldr	r4, [r2, #24]
 800717a:	42a3      	cmp	r3, r4
 800717c:	db01      	blt.n	8007182 <__sfputc_r+0x16>
 800717e:	290a      	cmp	r1, #10
 8007180:	d103      	bne.n	800718a <__sfputc_r+0x1e>
 8007182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007186:	f7fe bbe6 	b.w	8005956 <__swbuf_r>
 800718a:	6813      	ldr	r3, [r2, #0]
 800718c:	1c58      	adds	r0, r3, #1
 800718e:	6010      	str	r0, [r2, #0]
 8007190:	7019      	strb	r1, [r3, #0]
 8007192:	4608      	mov	r0, r1
 8007194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007198:	4770      	bx	lr

0800719a <__sfputs_r>:
 800719a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719c:	4606      	mov	r6, r0
 800719e:	460f      	mov	r7, r1
 80071a0:	4614      	mov	r4, r2
 80071a2:	18d5      	adds	r5, r2, r3
 80071a4:	42ac      	cmp	r4, r5
 80071a6:	d101      	bne.n	80071ac <__sfputs_r+0x12>
 80071a8:	2000      	movs	r0, #0
 80071aa:	e007      	b.n	80071bc <__sfputs_r+0x22>
 80071ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b0:	463a      	mov	r2, r7
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7ff ffda 	bl	800716c <__sfputc_r>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d1f3      	bne.n	80071a4 <__sfputs_r+0xa>
 80071bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071c0 <_vfiprintf_r>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	460d      	mov	r5, r1
 80071c6:	b09d      	sub	sp, #116	; 0x74
 80071c8:	4614      	mov	r4, r2
 80071ca:	4698      	mov	r8, r3
 80071cc:	4606      	mov	r6, r0
 80071ce:	b118      	cbz	r0, 80071d8 <_vfiprintf_r+0x18>
 80071d0:	6a03      	ldr	r3, [r0, #32]
 80071d2:	b90b      	cbnz	r3, 80071d8 <_vfiprintf_r+0x18>
 80071d4:	f7fe fad8 	bl	8005788 <__sinit>
 80071d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071da:	07d9      	lsls	r1, r3, #31
 80071dc:	d405      	bmi.n	80071ea <_vfiprintf_r+0x2a>
 80071de:	89ab      	ldrh	r3, [r5, #12]
 80071e0:	059a      	lsls	r2, r3, #22
 80071e2:	d402      	bmi.n	80071ea <_vfiprintf_r+0x2a>
 80071e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071e6:	f7fe fcc8 	bl	8005b7a <__retarget_lock_acquire_recursive>
 80071ea:	89ab      	ldrh	r3, [r5, #12]
 80071ec:	071b      	lsls	r3, r3, #28
 80071ee:	d501      	bpl.n	80071f4 <_vfiprintf_r+0x34>
 80071f0:	692b      	ldr	r3, [r5, #16]
 80071f2:	b99b      	cbnz	r3, 800721c <_vfiprintf_r+0x5c>
 80071f4:	4629      	mov	r1, r5
 80071f6:	4630      	mov	r0, r6
 80071f8:	f7fe fbea 	bl	80059d0 <__swsetup_r>
 80071fc:	b170      	cbz	r0, 800721c <_vfiprintf_r+0x5c>
 80071fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007200:	07dc      	lsls	r4, r3, #31
 8007202:	d504      	bpl.n	800720e <_vfiprintf_r+0x4e>
 8007204:	f04f 30ff 	mov.w	r0, #4294967295
 8007208:	b01d      	add	sp, #116	; 0x74
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	89ab      	ldrh	r3, [r5, #12]
 8007210:	0598      	lsls	r0, r3, #22
 8007212:	d4f7      	bmi.n	8007204 <_vfiprintf_r+0x44>
 8007214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007216:	f7fe fcb1 	bl	8005b7c <__retarget_lock_release_recursive>
 800721a:	e7f3      	b.n	8007204 <_vfiprintf_r+0x44>
 800721c:	2300      	movs	r3, #0
 800721e:	9309      	str	r3, [sp, #36]	; 0x24
 8007220:	2320      	movs	r3, #32
 8007222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007226:	f8cd 800c 	str.w	r8, [sp, #12]
 800722a:	2330      	movs	r3, #48	; 0x30
 800722c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80073e0 <_vfiprintf_r+0x220>
 8007230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007234:	f04f 0901 	mov.w	r9, #1
 8007238:	4623      	mov	r3, r4
 800723a:	469a      	mov	sl, r3
 800723c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007240:	b10a      	cbz	r2, 8007246 <_vfiprintf_r+0x86>
 8007242:	2a25      	cmp	r2, #37	; 0x25
 8007244:	d1f9      	bne.n	800723a <_vfiprintf_r+0x7a>
 8007246:	ebba 0b04 	subs.w	fp, sl, r4
 800724a:	d00b      	beq.n	8007264 <_vfiprintf_r+0xa4>
 800724c:	465b      	mov	r3, fp
 800724e:	4622      	mov	r2, r4
 8007250:	4629      	mov	r1, r5
 8007252:	4630      	mov	r0, r6
 8007254:	f7ff ffa1 	bl	800719a <__sfputs_r>
 8007258:	3001      	adds	r0, #1
 800725a:	f000 80a9 	beq.w	80073b0 <_vfiprintf_r+0x1f0>
 800725e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007260:	445a      	add	r2, fp
 8007262:	9209      	str	r2, [sp, #36]	; 0x24
 8007264:	f89a 3000 	ldrb.w	r3, [sl]
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 80a1 	beq.w	80073b0 <_vfiprintf_r+0x1f0>
 800726e:	2300      	movs	r3, #0
 8007270:	f04f 32ff 	mov.w	r2, #4294967295
 8007274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007278:	f10a 0a01 	add.w	sl, sl, #1
 800727c:	9304      	str	r3, [sp, #16]
 800727e:	9307      	str	r3, [sp, #28]
 8007280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007284:	931a      	str	r3, [sp, #104]	; 0x68
 8007286:	4654      	mov	r4, sl
 8007288:	2205      	movs	r2, #5
 800728a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800728e:	4854      	ldr	r0, [pc, #336]	; (80073e0 <_vfiprintf_r+0x220>)
 8007290:	f7f8 ffbe 	bl	8000210 <memchr>
 8007294:	9a04      	ldr	r2, [sp, #16]
 8007296:	b9d8      	cbnz	r0, 80072d0 <_vfiprintf_r+0x110>
 8007298:	06d1      	lsls	r1, r2, #27
 800729a:	bf44      	itt	mi
 800729c:	2320      	movmi	r3, #32
 800729e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a2:	0713      	lsls	r3, r2, #28
 80072a4:	bf44      	itt	mi
 80072a6:	232b      	movmi	r3, #43	; 0x2b
 80072a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ac:	f89a 3000 	ldrb.w	r3, [sl]
 80072b0:	2b2a      	cmp	r3, #42	; 0x2a
 80072b2:	d015      	beq.n	80072e0 <_vfiprintf_r+0x120>
 80072b4:	9a07      	ldr	r2, [sp, #28]
 80072b6:	4654      	mov	r4, sl
 80072b8:	2000      	movs	r0, #0
 80072ba:	f04f 0c0a 	mov.w	ip, #10
 80072be:	4621      	mov	r1, r4
 80072c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c4:	3b30      	subs	r3, #48	; 0x30
 80072c6:	2b09      	cmp	r3, #9
 80072c8:	d94d      	bls.n	8007366 <_vfiprintf_r+0x1a6>
 80072ca:	b1b0      	cbz	r0, 80072fa <_vfiprintf_r+0x13a>
 80072cc:	9207      	str	r2, [sp, #28]
 80072ce:	e014      	b.n	80072fa <_vfiprintf_r+0x13a>
 80072d0:	eba0 0308 	sub.w	r3, r0, r8
 80072d4:	fa09 f303 	lsl.w	r3, r9, r3
 80072d8:	4313      	orrs	r3, r2
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	46a2      	mov	sl, r4
 80072de:	e7d2      	b.n	8007286 <_vfiprintf_r+0xc6>
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	1d19      	adds	r1, r3, #4
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	9103      	str	r1, [sp, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	bfbb      	ittet	lt
 80072ec:	425b      	neglt	r3, r3
 80072ee:	f042 0202 	orrlt.w	r2, r2, #2
 80072f2:	9307      	strge	r3, [sp, #28]
 80072f4:	9307      	strlt	r3, [sp, #28]
 80072f6:	bfb8      	it	lt
 80072f8:	9204      	strlt	r2, [sp, #16]
 80072fa:	7823      	ldrb	r3, [r4, #0]
 80072fc:	2b2e      	cmp	r3, #46	; 0x2e
 80072fe:	d10c      	bne.n	800731a <_vfiprintf_r+0x15a>
 8007300:	7863      	ldrb	r3, [r4, #1]
 8007302:	2b2a      	cmp	r3, #42	; 0x2a
 8007304:	d134      	bne.n	8007370 <_vfiprintf_r+0x1b0>
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	1d1a      	adds	r2, r3, #4
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	9203      	str	r2, [sp, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfb8      	it	lt
 8007312:	f04f 33ff 	movlt.w	r3, #4294967295
 8007316:	3402      	adds	r4, #2
 8007318:	9305      	str	r3, [sp, #20]
 800731a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80073f0 <_vfiprintf_r+0x230>
 800731e:	7821      	ldrb	r1, [r4, #0]
 8007320:	2203      	movs	r2, #3
 8007322:	4650      	mov	r0, sl
 8007324:	f7f8 ff74 	bl	8000210 <memchr>
 8007328:	b138      	cbz	r0, 800733a <_vfiprintf_r+0x17a>
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	eba0 000a 	sub.w	r0, r0, sl
 8007330:	2240      	movs	r2, #64	; 0x40
 8007332:	4082      	lsls	r2, r0
 8007334:	4313      	orrs	r3, r2
 8007336:	3401      	adds	r4, #1
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733e:	4829      	ldr	r0, [pc, #164]	; (80073e4 <_vfiprintf_r+0x224>)
 8007340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007344:	2206      	movs	r2, #6
 8007346:	f7f8 ff63 	bl	8000210 <memchr>
 800734a:	2800      	cmp	r0, #0
 800734c:	d03f      	beq.n	80073ce <_vfiprintf_r+0x20e>
 800734e:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <_vfiprintf_r+0x228>)
 8007350:	bb1b      	cbnz	r3, 800739a <_vfiprintf_r+0x1da>
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	3307      	adds	r3, #7
 8007356:	f023 0307 	bic.w	r3, r3, #7
 800735a:	3308      	adds	r3, #8
 800735c:	9303      	str	r3, [sp, #12]
 800735e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007360:	443b      	add	r3, r7
 8007362:	9309      	str	r3, [sp, #36]	; 0x24
 8007364:	e768      	b.n	8007238 <_vfiprintf_r+0x78>
 8007366:	fb0c 3202 	mla	r2, ip, r2, r3
 800736a:	460c      	mov	r4, r1
 800736c:	2001      	movs	r0, #1
 800736e:	e7a6      	b.n	80072be <_vfiprintf_r+0xfe>
 8007370:	2300      	movs	r3, #0
 8007372:	3401      	adds	r4, #1
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	4619      	mov	r1, r3
 8007378:	f04f 0c0a 	mov.w	ip, #10
 800737c:	4620      	mov	r0, r4
 800737e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007382:	3a30      	subs	r2, #48	; 0x30
 8007384:	2a09      	cmp	r2, #9
 8007386:	d903      	bls.n	8007390 <_vfiprintf_r+0x1d0>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0c6      	beq.n	800731a <_vfiprintf_r+0x15a>
 800738c:	9105      	str	r1, [sp, #20]
 800738e:	e7c4      	b.n	800731a <_vfiprintf_r+0x15a>
 8007390:	fb0c 2101 	mla	r1, ip, r1, r2
 8007394:	4604      	mov	r4, r0
 8007396:	2301      	movs	r3, #1
 8007398:	e7f0      	b.n	800737c <_vfiprintf_r+0x1bc>
 800739a:	ab03      	add	r3, sp, #12
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	462a      	mov	r2, r5
 80073a0:	4b12      	ldr	r3, [pc, #72]	; (80073ec <_vfiprintf_r+0x22c>)
 80073a2:	a904      	add	r1, sp, #16
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7fd fd9d 	bl	8004ee4 <_printf_float>
 80073aa:	4607      	mov	r7, r0
 80073ac:	1c78      	adds	r0, r7, #1
 80073ae:	d1d6      	bne.n	800735e <_vfiprintf_r+0x19e>
 80073b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073b2:	07d9      	lsls	r1, r3, #31
 80073b4:	d405      	bmi.n	80073c2 <_vfiprintf_r+0x202>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	059a      	lsls	r2, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_vfiprintf_r+0x202>
 80073bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073be:	f7fe fbdd 	bl	8005b7c <__retarget_lock_release_recursive>
 80073c2:	89ab      	ldrh	r3, [r5, #12]
 80073c4:	065b      	lsls	r3, r3, #25
 80073c6:	f53f af1d 	bmi.w	8007204 <_vfiprintf_r+0x44>
 80073ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073cc:	e71c      	b.n	8007208 <_vfiprintf_r+0x48>
 80073ce:	ab03      	add	r3, sp, #12
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	462a      	mov	r2, r5
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <_vfiprintf_r+0x22c>)
 80073d6:	a904      	add	r1, sp, #16
 80073d8:	4630      	mov	r0, r6
 80073da:	f7fe f827 	bl	800542c <_printf_i>
 80073de:	e7e4      	b.n	80073aa <_vfiprintf_r+0x1ea>
 80073e0:	080080fc 	.word	0x080080fc
 80073e4:	08008106 	.word	0x08008106
 80073e8:	08004ee5 	.word	0x08004ee5
 80073ec:	0800719b 	.word	0x0800719b
 80073f0:	08008102 	.word	0x08008102

080073f4 <__sflush_r>:
 80073f4:	898a      	ldrh	r2, [r1, #12]
 80073f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fa:	4605      	mov	r5, r0
 80073fc:	0710      	lsls	r0, r2, #28
 80073fe:	460c      	mov	r4, r1
 8007400:	d458      	bmi.n	80074b4 <__sflush_r+0xc0>
 8007402:	684b      	ldr	r3, [r1, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	dc05      	bgt.n	8007414 <__sflush_r+0x20>
 8007408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800740a:	2b00      	cmp	r3, #0
 800740c:	dc02      	bgt.n	8007414 <__sflush_r+0x20>
 800740e:	2000      	movs	r0, #0
 8007410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007416:	2e00      	cmp	r6, #0
 8007418:	d0f9      	beq.n	800740e <__sflush_r+0x1a>
 800741a:	2300      	movs	r3, #0
 800741c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007420:	682f      	ldr	r7, [r5, #0]
 8007422:	6a21      	ldr	r1, [r4, #32]
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	d032      	beq.n	800748e <__sflush_r+0x9a>
 8007428:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	075a      	lsls	r2, r3, #29
 800742e:	d505      	bpl.n	800743c <__sflush_r+0x48>
 8007430:	6863      	ldr	r3, [r4, #4]
 8007432:	1ac0      	subs	r0, r0, r3
 8007434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007436:	b10b      	cbz	r3, 800743c <__sflush_r+0x48>
 8007438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800743a:	1ac0      	subs	r0, r0, r3
 800743c:	2300      	movs	r3, #0
 800743e:	4602      	mov	r2, r0
 8007440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007442:	6a21      	ldr	r1, [r4, #32]
 8007444:	4628      	mov	r0, r5
 8007446:	47b0      	blx	r6
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	d106      	bne.n	800745c <__sflush_r+0x68>
 800744e:	6829      	ldr	r1, [r5, #0]
 8007450:	291d      	cmp	r1, #29
 8007452:	d82b      	bhi.n	80074ac <__sflush_r+0xb8>
 8007454:	4a29      	ldr	r2, [pc, #164]	; (80074fc <__sflush_r+0x108>)
 8007456:	410a      	asrs	r2, r1
 8007458:	07d6      	lsls	r6, r2, #31
 800745a:	d427      	bmi.n	80074ac <__sflush_r+0xb8>
 800745c:	2200      	movs	r2, #0
 800745e:	6062      	str	r2, [r4, #4]
 8007460:	04d9      	lsls	r1, r3, #19
 8007462:	6922      	ldr	r2, [r4, #16]
 8007464:	6022      	str	r2, [r4, #0]
 8007466:	d504      	bpl.n	8007472 <__sflush_r+0x7e>
 8007468:	1c42      	adds	r2, r0, #1
 800746a:	d101      	bne.n	8007470 <__sflush_r+0x7c>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b903      	cbnz	r3, 8007472 <__sflush_r+0x7e>
 8007470:	6560      	str	r0, [r4, #84]	; 0x54
 8007472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007474:	602f      	str	r7, [r5, #0]
 8007476:	2900      	cmp	r1, #0
 8007478:	d0c9      	beq.n	800740e <__sflush_r+0x1a>
 800747a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800747e:	4299      	cmp	r1, r3
 8007480:	d002      	beq.n	8007488 <__sflush_r+0x94>
 8007482:	4628      	mov	r0, r5
 8007484:	f7ff f9f6 	bl	8006874 <_free_r>
 8007488:	2000      	movs	r0, #0
 800748a:	6360      	str	r0, [r4, #52]	; 0x34
 800748c:	e7c0      	b.n	8007410 <__sflush_r+0x1c>
 800748e:	2301      	movs	r3, #1
 8007490:	4628      	mov	r0, r5
 8007492:	47b0      	blx	r6
 8007494:	1c41      	adds	r1, r0, #1
 8007496:	d1c8      	bne.n	800742a <__sflush_r+0x36>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0c5      	beq.n	800742a <__sflush_r+0x36>
 800749e:	2b1d      	cmp	r3, #29
 80074a0:	d001      	beq.n	80074a6 <__sflush_r+0xb2>
 80074a2:	2b16      	cmp	r3, #22
 80074a4:	d101      	bne.n	80074aa <__sflush_r+0xb6>
 80074a6:	602f      	str	r7, [r5, #0]
 80074a8:	e7b1      	b.n	800740e <__sflush_r+0x1a>
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	e7ad      	b.n	8007410 <__sflush_r+0x1c>
 80074b4:	690f      	ldr	r7, [r1, #16]
 80074b6:	2f00      	cmp	r7, #0
 80074b8:	d0a9      	beq.n	800740e <__sflush_r+0x1a>
 80074ba:	0793      	lsls	r3, r2, #30
 80074bc:	680e      	ldr	r6, [r1, #0]
 80074be:	bf08      	it	eq
 80074c0:	694b      	ldreq	r3, [r1, #20]
 80074c2:	600f      	str	r7, [r1, #0]
 80074c4:	bf18      	it	ne
 80074c6:	2300      	movne	r3, #0
 80074c8:	eba6 0807 	sub.w	r8, r6, r7
 80074cc:	608b      	str	r3, [r1, #8]
 80074ce:	f1b8 0f00 	cmp.w	r8, #0
 80074d2:	dd9c      	ble.n	800740e <__sflush_r+0x1a>
 80074d4:	6a21      	ldr	r1, [r4, #32]
 80074d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074d8:	4643      	mov	r3, r8
 80074da:	463a      	mov	r2, r7
 80074dc:	4628      	mov	r0, r5
 80074de:	47b0      	blx	r6
 80074e0:	2800      	cmp	r0, #0
 80074e2:	dc06      	bgt.n	80074f2 <__sflush_r+0xfe>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ea:	81a3      	strh	r3, [r4, #12]
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295
 80074f0:	e78e      	b.n	8007410 <__sflush_r+0x1c>
 80074f2:	4407      	add	r7, r0
 80074f4:	eba8 0800 	sub.w	r8, r8, r0
 80074f8:	e7e9      	b.n	80074ce <__sflush_r+0xda>
 80074fa:	bf00      	nop
 80074fc:	dfbffffe 	.word	0xdfbffffe

08007500 <_fflush_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	690b      	ldr	r3, [r1, #16]
 8007504:	4605      	mov	r5, r0
 8007506:	460c      	mov	r4, r1
 8007508:	b913      	cbnz	r3, 8007510 <_fflush_r+0x10>
 800750a:	2500      	movs	r5, #0
 800750c:	4628      	mov	r0, r5
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	b118      	cbz	r0, 800751a <_fflush_r+0x1a>
 8007512:	6a03      	ldr	r3, [r0, #32]
 8007514:	b90b      	cbnz	r3, 800751a <_fflush_r+0x1a>
 8007516:	f7fe f937 	bl	8005788 <__sinit>
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f3      	beq.n	800750a <_fflush_r+0xa>
 8007522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007524:	07d0      	lsls	r0, r2, #31
 8007526:	d404      	bmi.n	8007532 <_fflush_r+0x32>
 8007528:	0599      	lsls	r1, r3, #22
 800752a:	d402      	bmi.n	8007532 <_fflush_r+0x32>
 800752c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800752e:	f7fe fb24 	bl	8005b7a <__retarget_lock_acquire_recursive>
 8007532:	4628      	mov	r0, r5
 8007534:	4621      	mov	r1, r4
 8007536:	f7ff ff5d 	bl	80073f4 <__sflush_r>
 800753a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800753c:	07da      	lsls	r2, r3, #31
 800753e:	4605      	mov	r5, r0
 8007540:	d4e4      	bmi.n	800750c <_fflush_r+0xc>
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	059b      	lsls	r3, r3, #22
 8007546:	d4e1      	bmi.n	800750c <_fflush_r+0xc>
 8007548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754a:	f7fe fb17 	bl	8005b7c <__retarget_lock_release_recursive>
 800754e:	e7dd      	b.n	800750c <_fflush_r+0xc>

08007550 <__swhatbuf_r>:
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	460c      	mov	r4, r1
 8007554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007558:	2900      	cmp	r1, #0
 800755a:	b096      	sub	sp, #88	; 0x58
 800755c:	4615      	mov	r5, r2
 800755e:	461e      	mov	r6, r3
 8007560:	da0d      	bge.n	800757e <__swhatbuf_r+0x2e>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007568:	f04f 0100 	mov.w	r1, #0
 800756c:	bf0c      	ite	eq
 800756e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007572:	2340      	movne	r3, #64	; 0x40
 8007574:	2000      	movs	r0, #0
 8007576:	6031      	str	r1, [r6, #0]
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	b016      	add	sp, #88	; 0x58
 800757c:	bd70      	pop	{r4, r5, r6, pc}
 800757e:	466a      	mov	r2, sp
 8007580:	f000 f848 	bl	8007614 <_fstat_r>
 8007584:	2800      	cmp	r0, #0
 8007586:	dbec      	blt.n	8007562 <__swhatbuf_r+0x12>
 8007588:	9901      	ldr	r1, [sp, #4]
 800758a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800758e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007592:	4259      	negs	r1, r3
 8007594:	4159      	adcs	r1, r3
 8007596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800759a:	e7eb      	b.n	8007574 <__swhatbuf_r+0x24>

0800759c <__smakebuf_r>:
 800759c:	898b      	ldrh	r3, [r1, #12]
 800759e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075a0:	079d      	lsls	r5, r3, #30
 80075a2:	4606      	mov	r6, r0
 80075a4:	460c      	mov	r4, r1
 80075a6:	d507      	bpl.n	80075b8 <__smakebuf_r+0x1c>
 80075a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	6123      	str	r3, [r4, #16]
 80075b0:	2301      	movs	r3, #1
 80075b2:	6163      	str	r3, [r4, #20]
 80075b4:	b002      	add	sp, #8
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
 80075b8:	ab01      	add	r3, sp, #4
 80075ba:	466a      	mov	r2, sp
 80075bc:	f7ff ffc8 	bl	8007550 <__swhatbuf_r>
 80075c0:	9900      	ldr	r1, [sp, #0]
 80075c2:	4605      	mov	r5, r0
 80075c4:	4630      	mov	r0, r6
 80075c6:	f7ff f9c9 	bl	800695c <_malloc_r>
 80075ca:	b948      	cbnz	r0, 80075e0 <__smakebuf_r+0x44>
 80075cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d0:	059a      	lsls	r2, r3, #22
 80075d2:	d4ef      	bmi.n	80075b4 <__smakebuf_r+0x18>
 80075d4:	f023 0303 	bic.w	r3, r3, #3
 80075d8:	f043 0302 	orr.w	r3, r3, #2
 80075dc:	81a3      	strh	r3, [r4, #12]
 80075de:	e7e3      	b.n	80075a8 <__smakebuf_r+0xc>
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	6020      	str	r0, [r4, #0]
 80075e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	6163      	str	r3, [r4, #20]
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	6120      	str	r0, [r4, #16]
 80075f2:	b15b      	cbz	r3, 800760c <__smakebuf_r+0x70>
 80075f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 f81d 	bl	8007638 <_isatty_r>
 80075fe:	b128      	cbz	r0, 800760c <__smakebuf_r+0x70>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	f043 0301 	orr.w	r3, r3, #1
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	431d      	orrs	r5, r3
 8007610:	81a5      	strh	r5, [r4, #12]
 8007612:	e7cf      	b.n	80075b4 <__smakebuf_r+0x18>

08007614 <_fstat_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	; (8007634 <_fstat_r+0x20>)
 8007618:	2300      	movs	r3, #0
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	602b      	str	r3, [r5, #0]
 8007622:	f7fa fc8a 	bl	8001f3a <_fstat>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d102      	bne.n	8007630 <_fstat_r+0x1c>
 800762a:	682b      	ldr	r3, [r5, #0]
 800762c:	b103      	cbz	r3, 8007630 <_fstat_r+0x1c>
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	20000728 	.word	0x20000728

08007638 <_isatty_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d06      	ldr	r5, [pc, #24]	; (8007654 <_isatty_r+0x1c>)
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	602b      	str	r3, [r5, #0]
 8007644:	f7fa fc89 	bl	8001f5a <_isatty>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_isatty_r+0x1a>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b103      	cbz	r3, 8007652 <_isatty_r+0x1a>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	20000728 	.word	0x20000728

08007658 <_sbrk_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	; (8007674 <_sbrk_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7fa fc92 	bl	8001f8c <_sbrk>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_sbrk_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_sbrk_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	20000728 	.word	0x20000728

08007678 <memcpy>:
 8007678:	440a      	add	r2, r1
 800767a:	4291      	cmp	r1, r2
 800767c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007680:	d100      	bne.n	8007684 <memcpy+0xc>
 8007682:	4770      	bx	lr
 8007684:	b510      	push	{r4, lr}
 8007686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800768a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800768e:	4291      	cmp	r1, r2
 8007690:	d1f9      	bne.n	8007686 <memcpy+0xe>
 8007692:	bd10      	pop	{r4, pc}

08007694 <__assert_func>:
 8007694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007696:	4614      	mov	r4, r2
 8007698:	461a      	mov	r2, r3
 800769a:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <__assert_func+0x2c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4605      	mov	r5, r0
 80076a0:	68d8      	ldr	r0, [r3, #12]
 80076a2:	b14c      	cbz	r4, 80076b8 <__assert_func+0x24>
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <__assert_func+0x30>)
 80076a6:	9100      	str	r1, [sp, #0]
 80076a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076ac:	4906      	ldr	r1, [pc, #24]	; (80076c8 <__assert_func+0x34>)
 80076ae:	462b      	mov	r3, r5
 80076b0:	f000 f844 	bl	800773c <fiprintf>
 80076b4:	f000 f854 	bl	8007760 <abort>
 80076b8:	4b04      	ldr	r3, [pc, #16]	; (80076cc <__assert_func+0x38>)
 80076ba:	461c      	mov	r4, r3
 80076bc:	e7f3      	b.n	80076a6 <__assert_func+0x12>
 80076be:	bf00      	nop
 80076c0:	20000064 	.word	0x20000064
 80076c4:	08008117 	.word	0x08008117
 80076c8:	08008124 	.word	0x08008124
 80076cc:	08008152 	.word	0x08008152

080076d0 <_calloc_r>:
 80076d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076d2:	fba1 2402 	umull	r2, r4, r1, r2
 80076d6:	b94c      	cbnz	r4, 80076ec <_calloc_r+0x1c>
 80076d8:	4611      	mov	r1, r2
 80076da:	9201      	str	r2, [sp, #4]
 80076dc:	f7ff f93e 	bl	800695c <_malloc_r>
 80076e0:	9a01      	ldr	r2, [sp, #4]
 80076e2:	4605      	mov	r5, r0
 80076e4:	b930      	cbnz	r0, 80076f4 <_calloc_r+0x24>
 80076e6:	4628      	mov	r0, r5
 80076e8:	b003      	add	sp, #12
 80076ea:	bd30      	pop	{r4, r5, pc}
 80076ec:	220c      	movs	r2, #12
 80076ee:	6002      	str	r2, [r0, #0]
 80076f0:	2500      	movs	r5, #0
 80076f2:	e7f8      	b.n	80076e6 <_calloc_r+0x16>
 80076f4:	4621      	mov	r1, r4
 80076f6:	f7fe f9c3 	bl	8005a80 <memset>
 80076fa:	e7f4      	b.n	80076e6 <_calloc_r+0x16>

080076fc <__ascii_mbtowc>:
 80076fc:	b082      	sub	sp, #8
 80076fe:	b901      	cbnz	r1, 8007702 <__ascii_mbtowc+0x6>
 8007700:	a901      	add	r1, sp, #4
 8007702:	b142      	cbz	r2, 8007716 <__ascii_mbtowc+0x1a>
 8007704:	b14b      	cbz	r3, 800771a <__ascii_mbtowc+0x1e>
 8007706:	7813      	ldrb	r3, [r2, #0]
 8007708:	600b      	str	r3, [r1, #0]
 800770a:	7812      	ldrb	r2, [r2, #0]
 800770c:	1e10      	subs	r0, r2, #0
 800770e:	bf18      	it	ne
 8007710:	2001      	movne	r0, #1
 8007712:	b002      	add	sp, #8
 8007714:	4770      	bx	lr
 8007716:	4610      	mov	r0, r2
 8007718:	e7fb      	b.n	8007712 <__ascii_mbtowc+0x16>
 800771a:	f06f 0001 	mvn.w	r0, #1
 800771e:	e7f8      	b.n	8007712 <__ascii_mbtowc+0x16>

08007720 <__ascii_wctomb>:
 8007720:	b149      	cbz	r1, 8007736 <__ascii_wctomb+0x16>
 8007722:	2aff      	cmp	r2, #255	; 0xff
 8007724:	bf85      	ittet	hi
 8007726:	238a      	movhi	r3, #138	; 0x8a
 8007728:	6003      	strhi	r3, [r0, #0]
 800772a:	700a      	strbls	r2, [r1, #0]
 800772c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007730:	bf98      	it	ls
 8007732:	2001      	movls	r0, #1
 8007734:	4770      	bx	lr
 8007736:	4608      	mov	r0, r1
 8007738:	4770      	bx	lr
	...

0800773c <fiprintf>:
 800773c:	b40e      	push	{r1, r2, r3}
 800773e:	b503      	push	{r0, r1, lr}
 8007740:	4601      	mov	r1, r0
 8007742:	ab03      	add	r3, sp, #12
 8007744:	4805      	ldr	r0, [pc, #20]	; (800775c <fiprintf+0x20>)
 8007746:	f853 2b04 	ldr.w	r2, [r3], #4
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	f7ff fd37 	bl	80071c0 <_vfiprintf_r>
 8007752:	b002      	add	sp, #8
 8007754:	f85d eb04 	ldr.w	lr, [sp], #4
 8007758:	b003      	add	sp, #12
 800775a:	4770      	bx	lr
 800775c:	20000064 	.word	0x20000064

08007760 <abort>:
 8007760:	b508      	push	{r3, lr}
 8007762:	2006      	movs	r0, #6
 8007764:	f000 f82c 	bl	80077c0 <raise>
 8007768:	2001      	movs	r0, #1
 800776a:	f7fa fb97 	bl	8001e9c <_exit>

0800776e <_raise_r>:
 800776e:	291f      	cmp	r1, #31
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4604      	mov	r4, r0
 8007774:	460d      	mov	r5, r1
 8007776:	d904      	bls.n	8007782 <_raise_r+0x14>
 8007778:	2316      	movs	r3, #22
 800777a:	6003      	str	r3, [r0, #0]
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	bd38      	pop	{r3, r4, r5, pc}
 8007782:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007784:	b112      	cbz	r2, 800778c <_raise_r+0x1e>
 8007786:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800778a:	b94b      	cbnz	r3, 80077a0 <_raise_r+0x32>
 800778c:	4620      	mov	r0, r4
 800778e:	f000 f831 	bl	80077f4 <_getpid_r>
 8007792:	462a      	mov	r2, r5
 8007794:	4601      	mov	r1, r0
 8007796:	4620      	mov	r0, r4
 8007798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800779c:	f000 b818 	b.w	80077d0 <_kill_r>
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d00a      	beq.n	80077ba <_raise_r+0x4c>
 80077a4:	1c59      	adds	r1, r3, #1
 80077a6:	d103      	bne.n	80077b0 <_raise_r+0x42>
 80077a8:	2316      	movs	r3, #22
 80077aa:	6003      	str	r3, [r0, #0]
 80077ac:	2001      	movs	r0, #1
 80077ae:	e7e7      	b.n	8007780 <_raise_r+0x12>
 80077b0:	2400      	movs	r4, #0
 80077b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077b6:	4628      	mov	r0, r5
 80077b8:	4798      	blx	r3
 80077ba:	2000      	movs	r0, #0
 80077bc:	e7e0      	b.n	8007780 <_raise_r+0x12>
	...

080077c0 <raise>:
 80077c0:	4b02      	ldr	r3, [pc, #8]	; (80077cc <raise+0xc>)
 80077c2:	4601      	mov	r1, r0
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	f7ff bfd2 	b.w	800776e <_raise_r>
 80077ca:	bf00      	nop
 80077cc:	20000064 	.word	0x20000064

080077d0 <_kill_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4d07      	ldr	r5, [pc, #28]	; (80077f0 <_kill_r+0x20>)
 80077d4:	2300      	movs	r3, #0
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	4611      	mov	r1, r2
 80077dc:	602b      	str	r3, [r5, #0]
 80077de:	f7fa fb4d 	bl	8001e7c <_kill>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	d102      	bne.n	80077ec <_kill_r+0x1c>
 80077e6:	682b      	ldr	r3, [r5, #0]
 80077e8:	b103      	cbz	r3, 80077ec <_kill_r+0x1c>
 80077ea:	6023      	str	r3, [r4, #0]
 80077ec:	bd38      	pop	{r3, r4, r5, pc}
 80077ee:	bf00      	nop
 80077f0:	20000728 	.word	0x20000728

080077f4 <_getpid_r>:
 80077f4:	f7fa bb3a 	b.w	8001e6c <_getpid>

080077f8 <atan>:
 80077f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	ec55 4b10 	vmov	r4, r5, d0
 8007800:	4bc3      	ldr	r3, [pc, #780]	; (8007b10 <atan+0x318>)
 8007802:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007806:	429e      	cmp	r6, r3
 8007808:	46ab      	mov	fp, r5
 800780a:	dd18      	ble.n	800783e <atan+0x46>
 800780c:	4bc1      	ldr	r3, [pc, #772]	; (8007b14 <atan+0x31c>)
 800780e:	429e      	cmp	r6, r3
 8007810:	dc01      	bgt.n	8007816 <atan+0x1e>
 8007812:	d109      	bne.n	8007828 <atan+0x30>
 8007814:	b144      	cbz	r4, 8007828 <atan+0x30>
 8007816:	4622      	mov	r2, r4
 8007818:	462b      	mov	r3, r5
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	f7f8 fd55 	bl	80002cc <__adddf3>
 8007822:	4604      	mov	r4, r0
 8007824:	460d      	mov	r5, r1
 8007826:	e006      	b.n	8007836 <atan+0x3e>
 8007828:	f1bb 0f00 	cmp.w	fp, #0
 800782c:	f300 8131 	bgt.w	8007a92 <atan+0x29a>
 8007830:	a59b      	add	r5, pc, #620	; (adr r5, 8007aa0 <atan+0x2a8>)
 8007832:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007836:	ec45 4b10 	vmov	d0, r4, r5
 800783a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783e:	4bb6      	ldr	r3, [pc, #728]	; (8007b18 <atan+0x320>)
 8007840:	429e      	cmp	r6, r3
 8007842:	dc14      	bgt.n	800786e <atan+0x76>
 8007844:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007848:	429e      	cmp	r6, r3
 800784a:	dc0d      	bgt.n	8007868 <atan+0x70>
 800784c:	a396      	add	r3, pc, #600	; (adr r3, 8007aa8 <atan+0x2b0>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	ee10 0a10 	vmov	r0, s0
 8007856:	4629      	mov	r1, r5
 8007858:	f7f8 fd38 	bl	80002cc <__adddf3>
 800785c:	4baf      	ldr	r3, [pc, #700]	; (8007b1c <atan+0x324>)
 800785e:	2200      	movs	r2, #0
 8007860:	f7f9 f97a 	bl	8000b58 <__aeabi_dcmpgt>
 8007864:	2800      	cmp	r0, #0
 8007866:	d1e6      	bne.n	8007836 <atan+0x3e>
 8007868:	f04f 3aff 	mov.w	sl, #4294967295
 800786c:	e02b      	b.n	80078c6 <atan+0xce>
 800786e:	f000 f963 	bl	8007b38 <fabs>
 8007872:	4bab      	ldr	r3, [pc, #684]	; (8007b20 <atan+0x328>)
 8007874:	429e      	cmp	r6, r3
 8007876:	ec55 4b10 	vmov	r4, r5, d0
 800787a:	f300 80bf 	bgt.w	80079fc <atan+0x204>
 800787e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007882:	429e      	cmp	r6, r3
 8007884:	f300 80a0 	bgt.w	80079c8 <atan+0x1d0>
 8007888:	ee10 2a10 	vmov	r2, s0
 800788c:	ee10 0a10 	vmov	r0, s0
 8007890:	462b      	mov	r3, r5
 8007892:	4629      	mov	r1, r5
 8007894:	f7f8 fd1a 	bl	80002cc <__adddf3>
 8007898:	4ba0      	ldr	r3, [pc, #640]	; (8007b1c <atan+0x324>)
 800789a:	2200      	movs	r2, #0
 800789c:	f7f8 fd14 	bl	80002c8 <__aeabi_dsub>
 80078a0:	2200      	movs	r2, #0
 80078a2:	4606      	mov	r6, r0
 80078a4:	460f      	mov	r7, r1
 80078a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078aa:	4620      	mov	r0, r4
 80078ac:	4629      	mov	r1, r5
 80078ae:	f7f8 fd0d 	bl	80002cc <__adddf3>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4630      	mov	r0, r6
 80078b8:	4639      	mov	r1, r7
 80078ba:	f7f8 ffe7 	bl	800088c <__aeabi_ddiv>
 80078be:	f04f 0a00 	mov.w	sl, #0
 80078c2:	4604      	mov	r4, r0
 80078c4:	460d      	mov	r5, r1
 80078c6:	4622      	mov	r2, r4
 80078c8:	462b      	mov	r3, r5
 80078ca:	4620      	mov	r0, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	f7f8 feb3 	bl	8000638 <__aeabi_dmul>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4680      	mov	r8, r0
 80078d8:	4689      	mov	r9, r1
 80078da:	f7f8 fead 	bl	8000638 <__aeabi_dmul>
 80078de:	a374      	add	r3, pc, #464	; (adr r3, 8007ab0 <atan+0x2b8>)
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	4606      	mov	r6, r0
 80078e6:	460f      	mov	r7, r1
 80078e8:	f7f8 fea6 	bl	8000638 <__aeabi_dmul>
 80078ec:	a372      	add	r3, pc, #456	; (adr r3, 8007ab8 <atan+0x2c0>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f7f8 fceb 	bl	80002cc <__adddf3>
 80078f6:	4632      	mov	r2, r6
 80078f8:	463b      	mov	r3, r7
 80078fa:	f7f8 fe9d 	bl	8000638 <__aeabi_dmul>
 80078fe:	a370      	add	r3, pc, #448	; (adr r3, 8007ac0 <atan+0x2c8>)
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f7f8 fce2 	bl	80002cc <__adddf3>
 8007908:	4632      	mov	r2, r6
 800790a:	463b      	mov	r3, r7
 800790c:	f7f8 fe94 	bl	8000638 <__aeabi_dmul>
 8007910:	a36d      	add	r3, pc, #436	; (adr r3, 8007ac8 <atan+0x2d0>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f7f8 fcd9 	bl	80002cc <__adddf3>
 800791a:	4632      	mov	r2, r6
 800791c:	463b      	mov	r3, r7
 800791e:	f7f8 fe8b 	bl	8000638 <__aeabi_dmul>
 8007922:	a36b      	add	r3, pc, #428	; (adr r3, 8007ad0 <atan+0x2d8>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	f7f8 fcd0 	bl	80002cc <__adddf3>
 800792c:	4632      	mov	r2, r6
 800792e:	463b      	mov	r3, r7
 8007930:	f7f8 fe82 	bl	8000638 <__aeabi_dmul>
 8007934:	a368      	add	r3, pc, #416	; (adr r3, 8007ad8 <atan+0x2e0>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f7f8 fcc7 	bl	80002cc <__adddf3>
 800793e:	4642      	mov	r2, r8
 8007940:	464b      	mov	r3, r9
 8007942:	f7f8 fe79 	bl	8000638 <__aeabi_dmul>
 8007946:	a366      	add	r3, pc, #408	; (adr r3, 8007ae0 <atan+0x2e8>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	4680      	mov	r8, r0
 800794e:	4689      	mov	r9, r1
 8007950:	4630      	mov	r0, r6
 8007952:	4639      	mov	r1, r7
 8007954:	f7f8 fe70 	bl	8000638 <__aeabi_dmul>
 8007958:	a363      	add	r3, pc, #396	; (adr r3, 8007ae8 <atan+0x2f0>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 fcb3 	bl	80002c8 <__aeabi_dsub>
 8007962:	4632      	mov	r2, r6
 8007964:	463b      	mov	r3, r7
 8007966:	f7f8 fe67 	bl	8000638 <__aeabi_dmul>
 800796a:	a361      	add	r3, pc, #388	; (adr r3, 8007af0 <atan+0x2f8>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f7f8 fcaa 	bl	80002c8 <__aeabi_dsub>
 8007974:	4632      	mov	r2, r6
 8007976:	463b      	mov	r3, r7
 8007978:	f7f8 fe5e 	bl	8000638 <__aeabi_dmul>
 800797c:	a35e      	add	r3, pc, #376	; (adr r3, 8007af8 <atan+0x300>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f7f8 fca1 	bl	80002c8 <__aeabi_dsub>
 8007986:	4632      	mov	r2, r6
 8007988:	463b      	mov	r3, r7
 800798a:	f7f8 fe55 	bl	8000638 <__aeabi_dmul>
 800798e:	a35c      	add	r3, pc, #368	; (adr r3, 8007b00 <atan+0x308>)
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f7f8 fc98 	bl	80002c8 <__aeabi_dsub>
 8007998:	4632      	mov	r2, r6
 800799a:	463b      	mov	r3, r7
 800799c:	f7f8 fe4c 	bl	8000638 <__aeabi_dmul>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4640      	mov	r0, r8
 80079a6:	4649      	mov	r1, r9
 80079a8:	f7f8 fc90 	bl	80002cc <__adddf3>
 80079ac:	4622      	mov	r2, r4
 80079ae:	462b      	mov	r3, r5
 80079b0:	f7f8 fe42 	bl	8000638 <__aeabi_dmul>
 80079b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	d14b      	bne.n	8007a56 <atan+0x25e>
 80079be:	4620      	mov	r0, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7f8 fc81 	bl	80002c8 <__aeabi_dsub>
 80079c6:	e72c      	b.n	8007822 <atan+0x2a>
 80079c8:	ee10 0a10 	vmov	r0, s0
 80079cc:	4b53      	ldr	r3, [pc, #332]	; (8007b1c <atan+0x324>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7f8 fc79 	bl	80002c8 <__aeabi_dsub>
 80079d6:	4b51      	ldr	r3, [pc, #324]	; (8007b1c <atan+0x324>)
 80079d8:	4606      	mov	r6, r0
 80079da:	460f      	mov	r7, r1
 80079dc:	2200      	movs	r2, #0
 80079de:	4620      	mov	r0, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	f7f8 fc73 	bl	80002cc <__adddf3>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4630      	mov	r0, r6
 80079ec:	4639      	mov	r1, r7
 80079ee:	f7f8 ff4d 	bl	800088c <__aeabi_ddiv>
 80079f2:	f04f 0a01 	mov.w	sl, #1
 80079f6:	4604      	mov	r4, r0
 80079f8:	460d      	mov	r5, r1
 80079fa:	e764      	b.n	80078c6 <atan+0xce>
 80079fc:	4b49      	ldr	r3, [pc, #292]	; (8007b24 <atan+0x32c>)
 80079fe:	429e      	cmp	r6, r3
 8007a00:	da1d      	bge.n	8007a3e <atan+0x246>
 8007a02:	ee10 0a10 	vmov	r0, s0
 8007a06:	4b48      	ldr	r3, [pc, #288]	; (8007b28 <atan+0x330>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7f8 fc5c 	bl	80002c8 <__aeabi_dsub>
 8007a10:	4b45      	ldr	r3, [pc, #276]	; (8007b28 <atan+0x330>)
 8007a12:	4606      	mov	r6, r0
 8007a14:	460f      	mov	r7, r1
 8007a16:	2200      	movs	r2, #0
 8007a18:	4620      	mov	r0, r4
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	f7f8 fe0c 	bl	8000638 <__aeabi_dmul>
 8007a20:	4b3e      	ldr	r3, [pc, #248]	; (8007b1c <atan+0x324>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	f7f8 fc52 	bl	80002cc <__adddf3>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	4639      	mov	r1, r7
 8007a30:	f7f8 ff2c 	bl	800088c <__aeabi_ddiv>
 8007a34:	f04f 0a02 	mov.w	sl, #2
 8007a38:	4604      	mov	r4, r0
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	e743      	b.n	80078c6 <atan+0xce>
 8007a3e:	462b      	mov	r3, r5
 8007a40:	ee10 2a10 	vmov	r2, s0
 8007a44:	4939      	ldr	r1, [pc, #228]	; (8007b2c <atan+0x334>)
 8007a46:	2000      	movs	r0, #0
 8007a48:	f7f8 ff20 	bl	800088c <__aeabi_ddiv>
 8007a4c:	f04f 0a03 	mov.w	sl, #3
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	e737      	b.n	80078c6 <atan+0xce>
 8007a56:	4b36      	ldr	r3, [pc, #216]	; (8007b30 <atan+0x338>)
 8007a58:	4e36      	ldr	r6, [pc, #216]	; (8007b34 <atan+0x33c>)
 8007a5a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f7f8 fc31 	bl	80002c8 <__aeabi_dsub>
 8007a66:	4622      	mov	r2, r4
 8007a68:	462b      	mov	r3, r5
 8007a6a:	f7f8 fc2d 	bl	80002c8 <__aeabi_dsub>
 8007a6e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007a7a:	f7f8 fc25 	bl	80002c8 <__aeabi_dsub>
 8007a7e:	f1bb 0f00 	cmp.w	fp, #0
 8007a82:	4604      	mov	r4, r0
 8007a84:	460d      	mov	r5, r1
 8007a86:	f6bf aed6 	bge.w	8007836 <atan+0x3e>
 8007a8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a8e:	461d      	mov	r5, r3
 8007a90:	e6d1      	b.n	8007836 <atan+0x3e>
 8007a92:	a51d      	add	r5, pc, #116	; (adr r5, 8007b08 <atan+0x310>)
 8007a94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a98:	e6cd      	b.n	8007836 <atan+0x3e>
 8007a9a:	bf00      	nop
 8007a9c:	f3af 8000 	nop.w
 8007aa0:	54442d18 	.word	0x54442d18
 8007aa4:	bff921fb 	.word	0xbff921fb
 8007aa8:	8800759c 	.word	0x8800759c
 8007aac:	7e37e43c 	.word	0x7e37e43c
 8007ab0:	e322da11 	.word	0xe322da11
 8007ab4:	3f90ad3a 	.word	0x3f90ad3a
 8007ab8:	24760deb 	.word	0x24760deb
 8007abc:	3fa97b4b 	.word	0x3fa97b4b
 8007ac0:	a0d03d51 	.word	0xa0d03d51
 8007ac4:	3fb10d66 	.word	0x3fb10d66
 8007ac8:	c54c206e 	.word	0xc54c206e
 8007acc:	3fb745cd 	.word	0x3fb745cd
 8007ad0:	920083ff 	.word	0x920083ff
 8007ad4:	3fc24924 	.word	0x3fc24924
 8007ad8:	5555550d 	.word	0x5555550d
 8007adc:	3fd55555 	.word	0x3fd55555
 8007ae0:	2c6a6c2f 	.word	0x2c6a6c2f
 8007ae4:	bfa2b444 	.word	0xbfa2b444
 8007ae8:	52defd9a 	.word	0x52defd9a
 8007aec:	3fadde2d 	.word	0x3fadde2d
 8007af0:	af749a6d 	.word	0xaf749a6d
 8007af4:	3fb3b0f2 	.word	0x3fb3b0f2
 8007af8:	fe231671 	.word	0xfe231671
 8007afc:	3fbc71c6 	.word	0x3fbc71c6
 8007b00:	9998ebc4 	.word	0x9998ebc4
 8007b04:	3fc99999 	.word	0x3fc99999
 8007b08:	54442d18 	.word	0x54442d18
 8007b0c:	3ff921fb 	.word	0x3ff921fb
 8007b10:	440fffff 	.word	0x440fffff
 8007b14:	7ff00000 	.word	0x7ff00000
 8007b18:	3fdbffff 	.word	0x3fdbffff
 8007b1c:	3ff00000 	.word	0x3ff00000
 8007b20:	3ff2ffff 	.word	0x3ff2ffff
 8007b24:	40038000 	.word	0x40038000
 8007b28:	3ff80000 	.word	0x3ff80000
 8007b2c:	bff00000 	.word	0xbff00000
 8007b30:	08008278 	.word	0x08008278
 8007b34:	08008258 	.word	0x08008258

08007b38 <fabs>:
 8007b38:	ec51 0b10 	vmov	r0, r1, d0
 8007b3c:	ee10 2a10 	vmov	r2, s0
 8007b40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b44:	ec43 2b10 	vmov	d0, r2, r3
 8007b48:	4770      	bx	lr
	...

08007b4c <_init>:
 8007b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4e:	bf00      	nop
 8007b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b52:	bc08      	pop	{r3}
 8007b54:	469e      	mov	lr, r3
 8007b56:	4770      	bx	lr

08007b58 <_fini>:
 8007b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5a:	bf00      	nop
 8007b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5e:	bc08      	pop	{r3}
 8007b60:	469e      	mov	lr, r3
 8007b62:	4770      	bx	lr
