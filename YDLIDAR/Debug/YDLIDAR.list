
YDLIDAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007090  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  08007260  08007260  00017260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c4  080078c4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078cc  080078cc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080078d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001d4  08007aa8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08007aa8  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d31  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dee  00000000  00000000  00029f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002bd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069a  00000000  00000000  0002c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000150e9  00000000  00000000  0002cc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b64d  00000000  00000000  00041d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000797f6  00000000  00000000  0004d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003204  00000000  00000000  000c6bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000c9dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007248 	.word	0x08007248

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007248 	.word	0x08007248

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <getDeviceInfo>:
 *
 * @param device_info  The device info Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t getDeviceInfo(ydlidar_device_info_t *device_info)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    ydlidar_response_header_t response_header;
    sendCommand(YDLIDAR_CMD_GET_DEVICE_INFO);
 8000eec:	2090      	movs	r0, #144	; 0x90
 8000eee:	f000 f877 	bl	8000fe0 <sendCommand>

    receiveResponseHeader(&response_header);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f888 	bl	800100c <receiveResponseHeader>

    if (response_header.type_mode == YDLIDAR_RESPONSE_DEVICVE_TYPE_MODE && response_header.response_length == YDLIDAR_RESPONSE_DEVICE_INFO_SIZE)
 8000efc:	7cbb      	ldrb	r3, [r7, #18]
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d116      	bne.n	8000f30 <getDeviceInfo+0x4c>
 8000f02:	89fb      	ldrh	r3, [r7, #14]
 8000f04:	8a3a      	ldrh	r2, [r7, #16]
 8000f06:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000f0a:	0412      	lsls	r2, r2, #16
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	2b14      	cmp	r3, #20
 8000f10:	d10e      	bne.n	8000f30 <getDeviceInfo+0x4c>
    {
        uint8_t *infobuf = (uint8_t *)device_info;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	617b      	str	r3, [r7, #20]
        ydlidar.func.receive_response(infobuf, YDLIDAR_RESPONSE_DEVICE_INFO_SIZE);
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <getDeviceInfo+0x58>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2114      	movs	r1, #20
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	4798      	blx	r3
        if (device_info->model == YDLIDAR_MODEL_X4)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b06      	cmp	r3, #6
 8000f26:	d101      	bne.n	8000f2c <getDeviceInfo+0x48>
        {
            return RESULT_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e002      	b.n	8000f32 <getDeviceInfo+0x4e>
        }
        else
        {
            return RESULT_FAIL;
 8000f2c:	23ff      	movs	r3, #255	; 0xff
 8000f2e:	e000      	b.n	8000f32 <getDeviceInfo+0x4e>
        }
    }
    else
    {
        return RESULT_FAIL;
 8000f30:	23ff      	movs	r3, #255	; 0xff
    }
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001f0 	.word	0x200001f0

08000f40 <getDeviceHealth>:
 *
 * @param device_health  The device health Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t getDeviceHealth(ydlidar_device_health_t *device_health)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    ydlidar_response_header_t response_header;
    sendCommand(YDLIDAR_CMD_GET_DEVICE_HEALTH);
 8000f48:	2091      	movs	r0, #145	; 0x91
 8000f4a:	f000 f849 	bl	8000fe0 <sendCommand>
    receiveResponseHeader(&response_header);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f85a 	bl	800100c <receiveResponseHeader>
    if (response_header.type_mode == YDLIDAR_RESPONSE_HEALTH_TYPE_MODE && response_header.response_length == YDLIDAR_RESPONSE_DEVICE_HEALTH_SIZE)
 8000f58:	7cbb      	ldrb	r3, [r7, #18]
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d116      	bne.n	8000f8c <getDeviceHealth+0x4c>
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	8a3a      	ldrh	r2, [r7, #16]
 8000f62:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000f66:	0412      	lsls	r2, r2, #16
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d10e      	bne.n	8000f8c <getDeviceHealth+0x4c>
    {
        uint8_t *healthbuf = (uint8_t *)device_health;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	617b      	str	r3, [r7, #20]
        ydlidar.func.receive_response(healthbuf, YDLIDAR_RESPONSE_DEVICE_HEALTH_SIZE);
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <getDeviceHealth+0x58>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2103      	movs	r1, #3
 8000f78:	6978      	ldr	r0, [r7, #20]
 8000f7a:	4798      	blx	r3
        if (device_health->status == 0)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <getDeviceHealth+0x48>
        {
            return RESULT_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e002      	b.n	8000f8e <getDeviceHealth+0x4e>
        }
        else
        {
            return RESULT_FAIL;
 8000f88:	23ff      	movs	r3, #255	; 0xff
 8000f8a:	e000      	b.n	8000f8e <getDeviceHealth+0x4e>
        }
    }
    else
    {
        return RESULT_FAIL;
 8000f8c:	23ff      	movs	r3, #255	; 0xff
    }
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200001f0 	.word	0x200001f0

08000f9c <stopScan>:
/**
 * @brief  This function is used to stop the scan
 *
 */
void stopScan()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    sendCommand(YDLIDER_CMD_STOP);
 8000fa0:	2065      	movs	r0, #101	; 0x65
 8000fa2:	f000 f81d 	bl	8000fe0 <sendCommand>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <startScan>:
 * @brief  This function is used to start the scan
 *
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t startScan()
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
    stopScan();
 8000fb0:	f7ff fff4 	bl	8000f9c <stopScan>
    HAL_Delay(1000);
 8000fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb8:	f000 fdf4 	bl	8001ba4 <HAL_Delay>
    sendCommand(YDLIDER_CMD_SCAN);
 8000fbc:	2060      	movs	r0, #96	; 0x60
 8000fbe:	f000 f80f 	bl	8000fe0 <sendCommand>
    ydlidar_response_header_t response_header;
    receiveResponseHeader(&response_header);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f821 	bl	800100c <receiveResponseHeader>
    if (response_header.type_mode == YDLIDAR_RESPONSE_MEASUREMENT_TYPE_MODE)
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b81      	cmp	r3, #129	; 0x81
 8000fce:	d101      	bne.n	8000fd4 <startScan+0x2a>
    {
        return RESULT_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e000      	b.n	8000fd6 <startScan+0x2c>
    }
    else
    {
        return RESULT_FAIL;
 8000fd4:	23ff      	movs	r3, #255	; 0xff
    }
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <sendCommand>:
 * @brief This function is used to send the command
 *
 * @param cmd  The command to be sent
 */
void sendCommand(uint8_t cmd)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
    ydlidar_cmd_packet_t cmd_packet;
    cmd_packet.syncByte = YDLIDER_CMD_SYNC_BYTE;
 8000fea:	23a5      	movs	r3, #165	; 0xa5
 8000fec:	733b      	strb	r3, [r7, #12]
    cmd_packet.cmd_flag = cmd;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	737b      	strb	r3, [r7, #13]
    ydlidar.func.send_command((uint8_t *)&cmd_packet, sizeof(cmd_packet));
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <sendCommand+0x28>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4798      	blx	r3
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200001f0 	.word	0x200001f0

0800100c <receiveResponseHeader>:
 *
 * @param response_header  The response header Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t receiveResponseHeader(ydlidar_response_header_t *response_header)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    uint8_t *header = (uint8_t *)response_header;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	60fb      	str	r3, [r7, #12]
    ydlidar.func.receive_response(header, YDLIDAR_RESPONSE_HEADER_SIZE);
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <receiveResponseHeader+0x20>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2107      	movs	r1, #7
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	4798      	blx	r3
    printf("[DEBUG] Response mode: %d\r\n", response_header->response_mode);
    printf("[DEBUG] Response type mode: %x\r\n", response_header->type_mode);
    printf("[DEBUG] Response type mode: %d\r\n", response_header->type_mode);

#endif
    return RESULT_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200001f0 	.word	0x200001f0

08001030 <startReceiveScanData>:
/**
 * @brief  This function is used to start receive the scan data
 *
 */
void startReceiveScanData(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    ydlidar.func.receive_data_dma(scanPoints[SCAN_CIRCLE_INDEX], sizeof(scanPoints[SCAN_CIRCLE_INDEX]));
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <startReceiveScanData+0x24>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <startReceiveScanData+0x28>)
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	4611      	mov	r1, r2
 800103e:	2264      	movs	r2, #100	; 0x64
 8001040:	fb01 f202 	mul.w	r2, r1, r2
 8001044:	4905      	ldr	r1, [pc, #20]	; (800105c <startReceiveScanData+0x2c>)
 8001046:	440a      	add	r2, r1
 8001048:	2164      	movs	r1, #100	; 0x64
 800104a:	4610      	mov	r0, r2
 800104c:	4798      	blx	r3
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001f0 	.word	0x200001f0
 8001058:	200002e8 	.word	0x200002e8
 800105c:	20000220 	.word	0x20000220

08001060 <dataProcess>:
 * @brief  This function is used to process the scan data
 *
 */
bool receiveFlag = false;
void dataProcess(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
    printf("[DEBUG] receiveFlag = %d\r\n", receiveFlag);
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <dataProcess+0xa0>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	4825      	ldr	r0, [pc, #148]	; (8001104 <dataProcess+0xa4>)
 800106e:	f004 f8e9 	bl	8005244 <iprintf>
    if (receiveFlag == false)
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <dataProcess+0xa0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f083 0301 	eor.w	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d13a      	bne.n	80010f6 <dataProcess+0x96>
    {
        return;
    }
    printf("[DEBUG] PROCESS_SCAN_DATA_INDEX = %d, SCAN_CIRCLE_INDEX = %d\r\n", PROCESS_SCAN_DATA_INDEX, SCAN_CIRCLE_INDEX);
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <dataProcess+0xa8>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <dataProcess+0xac>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4820      	ldr	r0, [pc, #128]	; (8001110 <dataProcess+0xb0>)
 800108e:	f004 f8d9 	bl	8005244 <iprintf>

    uint8_t *data = (uint8_t *)&scanPoints[PROCESS_SCAN_DATA_INDEX];
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <dataProcess+0xa8>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <dataProcess+0xb4>)
 80010a0:	4413      	add	r3, r2
 80010a2:	603b      	str	r3, [r7, #0]
    // #ifdef YDLIDAR_DEBUG_LEVEL_2
    printf("[DEBUG] data = ");
 80010a4:	481c      	ldr	r0, [pc, #112]	; (8001118 <dataProcess+0xb8>)
 80010a6:	f004 f8cd 	bl	8005244 <iprintf>
    for (int i = 0; i < MAX_SCAN_POINTS; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	e00a      	b.n	80010c6 <dataProcess+0x66>
    {
        printf("%02x ", data[i]);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4818      	ldr	r0, [pc, #96]	; (800111c <dataProcess+0xbc>)
 80010bc:	f004 f8c2 	bl	8005244 <iprintf>
    for (int i = 0; i < MAX_SCAN_POINTS; i++)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3301      	adds	r3, #1
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b63      	cmp	r3, #99	; 0x63
 80010ca:	ddf1      	ble.n	80010b0 <dataProcess+0x50>
    }
    printf("\r\n");
 80010cc:	4814      	ldr	r0, [pc, #80]	; (8001120 <dataProcess+0xc0>)
 80010ce:	f004 f91f 	bl	8005310 <puts>
    memset(scanPoints[PROCESS_SCAN_DATA_INDEX], 0, sizeof(scanPoints[PROCESS_SCAN_DATA_INDEX]));
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <dataProcess+0xa8>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <dataProcess+0xb4>)
 80010e0:	4413      	add	r3, r2
 80010e2:	2264      	movs	r2, #100	; 0x64
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 f9f2 	bl	80054d0 <memset>
    HAL_Delay(5000);
 80010ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80010f0:	f000 fd58 	bl	8001ba4 <HAL_Delay>
    return;
 80010f4:	e000      	b.n	80010f8 <dataProcess+0x98>
        return;
 80010f6:	bf00      	nop
    }
    receiveFlag = false;
    // clear the buffer
    memset(scanPoints[PROCESS_SCAN_DATA_INDEX], 0, sizeof(scanPoints[PROCESS_SCAN_DATA_INDEX]));
    PROCESS_SCAN_DATA_INDEX = (PROCESS_SCAN_DATA_INDEX + 1) % MAX_SCAN_BUFFER_SIZE;
}
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200002ea 	.word	0x200002ea
 8001104:	08007260 	.word	0x08007260
 8001108:	200002e9 	.word	0x200002e9
 800110c:	200002e8 	.word	0x200002e8
 8001110:	0800727c 	.word	0x0800727c
 8001114:	20000220 	.word	0x20000220
 8001118:	080072bc 	.word	0x080072bc
 800111c:	080072cc 	.word	0x080072cc
 8001120:	080072d4 	.word	0x080072d4

08001124 <restartScan>:
/**
 * @brief  This function is used to restart the scan
 *
 */
void restartScan(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
    stopScan();
 800112a:	f7ff ff37 	bl	8000f9c <stopScan>
    HAL_Delay(1000);
 800112e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001132:	f000 fd37 	bl	8001ba4 <HAL_Delay>
    ydlidar_device_info_t deviceinfo;
    if (getDeviceInfo(&deviceinfo) == RESULT_OK)
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fed2 	bl	8000ee4 <getDeviceInfo>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d155      	bne.n	80011f2 <restartScan+0xce>
    {
        printf("[YDLIDAR INFO] Connection established in [%s]\r\n", deviceinfo.model == YDLIDAR_MODEL_X4 ? "X4" : "NOT MODEL X4");
 8001146:	7a3b      	ldrb	r3, [r7, #8]
 8001148:	2b06      	cmp	r3, #6
 800114a:	d101      	bne.n	8001150 <restartScan+0x2c>
 800114c:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <restartScan+0xdc>)
 800114e:	e000      	b.n	8001152 <restartScan+0x2e>
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <restartScan+0xe0>)
 8001152:	4619      	mov	r1, r3
 8001154:	482c      	ldr	r0, [pc, #176]	; (8001208 <restartScan+0xe4>)
 8001156:	f004 f875 	bl	8005244 <iprintf>
        printf("[YDLIDAR INFO] Firmware version: %d.%d\r\n", deviceinfo.major_firmware_version, deviceinfo.minor_firmware_version);
 800115a:	7a7b      	ldrb	r3, [r7, #9]
 800115c:	4619      	mov	r1, r3
 800115e:	7abb      	ldrb	r3, [r7, #10]
 8001160:	461a      	mov	r2, r3
 8001162:	482a      	ldr	r0, [pc, #168]	; (800120c <restartScan+0xe8>)
 8001164:	f004 f86e 	bl	8005244 <iprintf>
        printf("[YDLIDAR INFO] Hardware version: %d\r\n", deviceinfo.hardware_version);
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	4619      	mov	r1, r3
 800116c:	4828      	ldr	r0, [pc, #160]	; (8001210 <restartScan+0xec>)
 800116e:	f004 f869 	bl	8005244 <iprintf>
        printf("[YDLIDAR INFO] Serial number: ");
 8001172:	4828      	ldr	r0, [pc, #160]	; (8001214 <restartScan+0xf0>)
 8001174:	f004 f866 	bl	8005244 <iprintf>
        for (int i = 0; i < 16; i++)
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	e00b      	b.n	8001196 <restartScan+0x72>
        {
            printf("%x", deviceinfo.serialnum[i]);
 800117e:	f107 020c 	add.w	r2, r7, #12
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	4823      	ldr	r0, [pc, #140]	; (8001218 <restartScan+0xf4>)
 800118c:	f004 f85a 	bl	8005244 <iprintf>
        for (int i = 0; i < 16; i++)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	3301      	adds	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	ddf0      	ble.n	800117e <restartScan+0x5a>
        }
        printf("\r\n");
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <restartScan+0xf8>)
 800119e:	f004 f8b7 	bl	8005310 <puts>
        ydlidar_device_health_t healthinfo;
        HAL_Delay(1000);
 80011a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a6:	f000 fcfd 	bl	8001ba4 <HAL_Delay>
        if (getDeviceHealth(&healthinfo) == RESULT_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fec7 	bl	8000f40 <getDeviceHealth>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d118      	bne.n	80011ea <restartScan+0xc6>
        {
            printf("[YDLIDAR INFO] YDLIDAR running correctly! The health status: %s\r\n", healthinfo.status == 0 ? "well" : "bad");
 80011b8:	793b      	ldrb	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <restartScan+0x9e>
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <restartScan+0xfc>)
 80011c0:	e000      	b.n	80011c4 <restartScan+0xa0>
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <restartScan+0x100>)
 80011c4:	4619      	mov	r1, r3
 80011c6:	4818      	ldr	r0, [pc, #96]	; (8001228 <restartScan+0x104>)
 80011c8:	f004 f83c 	bl	8005244 <iprintf>
            if (startScan() == RESULT_OK)
 80011cc:	f7ff feed 	bl	8000faa <startScan>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <restartScan+0xbe>
            {
                startReceiveScanData();
 80011d6:	f7ff ff2b 	bl	8001030 <startReceiveScanData>
                printf("\r\nNow YDLIDAR is scanning ...... \r\n");
 80011da:	4814      	ldr	r0, [pc, #80]	; (800122c <restartScan+0x108>)
 80011dc:	f004 f898 	bl	8005310 <puts>
    }
    else
    {
        printf("YDLIDAR get DeviceInfo Error!!!'\r\n");
    }
}
 80011e0:	e00a      	b.n	80011f8 <restartScan+0xd4>
                printf("start YDLIDAR is failed!  Continue........ \r\n");
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <restartScan+0x10c>)
 80011e4:	f004 f894 	bl	8005310 <puts>
}
 80011e8:	e006      	b.n	80011f8 <restartScan+0xd4>
            printf("cannot retrieve YDLIDAR health\r\n ");
 80011ea:	4812      	ldr	r0, [pc, #72]	; (8001234 <restartScan+0x110>)
 80011ec:	f004 f82a 	bl	8005244 <iprintf>
}
 80011f0:	e002      	b.n	80011f8 <restartScan+0xd4>
        printf("YDLIDAR get DeviceInfo Error!!!'\r\n");
 80011f2:	4811      	ldr	r0, [pc, #68]	; (8001238 <restartScan+0x114>)
 80011f4:	f004 f88c 	bl	8005310 <puts>
}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	08007350 	.word	0x08007350
 8001204:	08007354 	.word	0x08007354
 8001208:	08007364 	.word	0x08007364
 800120c:	08007394 	.word	0x08007394
 8001210:	080073c0 	.word	0x080073c0
 8001214:	080073e8 	.word	0x080073e8
 8001218:	08007408 	.word	0x08007408
 800121c:	080072d4 	.word	0x080072d4
 8001220:	0800740c 	.word	0x0800740c
 8001224:	08007414 	.word	0x08007414
 8001228:	08007418 	.word	0x08007418
 800122c:	0800745c 	.word	0x0800745c
 8001230:	08007480 	.word	0x08007480
 8001234:	080074b0 	.word	0x080074b0
 8001238:	080074d4 	.word	0x080074d4

0800123c <uartSendCommand>:
extern DMA_HandleTypeDef hdma_usart1_rx;
extern uint8_t SCAN_CIRCLE_INDEX;
extern uint8_t PROCESS_SCAN_DATA_INDEX;
extern bool receiveFlag;
int8_t uartSendCommand(uint8_t *cmd, uint32_t size)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(&huart1, cmd, size, 1000);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b29a      	uxth	r2, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <uartSendCommand+0x24>)
 8001252:	f002 f878 	bl	8003346 <HAL_UART_Transmit>
    return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200002ec 	.word	0x200002ec

08001264 <uartReceiveResponse>:

int8_t uartReceiveResponse(uint8_t *data, uint32_t size)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive(&huart1, data, size, 1000);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b29a      	uxth	r2, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <uartReceiveResponse+0x24>)
 800127a:	f002 f8f6 	bl	800346a <HAL_UART_Receive>
    return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200002ec 	.word	0x200002ec

0800128c <uartReceiveDataDMA>:
int8_t uartReceiveDataDMA(uint8_t *data, uint32_t size)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive_DMA(&huart1, data, size);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4804      	ldr	r0, [pc, #16]	; (80012b0 <uartReceiveDataDMA+0x24>)
 80012a0:	f002 f985 	bl	80035ae <HAL_UART_Receive_DMA>
    return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200002ec 	.word	0x200002ec

080012b4 <HAL_UART_RxCpltCallback>:

// uart callback function

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a15      	ldr	r2, [pc, #84]	; (8001318 <HAL_UART_RxCpltCallback+0x64>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d123      	bne.n	800130e <HAL_UART_RxCpltCallback+0x5a>
    {
        receiveFlag = true;
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_UART_RxCpltCallback+0x68>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
        SCAN_CIRCLE_INDEX = SCAN_CIRCLE_INDEX++ % MAX_SCAN_BUFFER_SIZE;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_UART_RxCpltCallback+0x6c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	b2d1      	uxtb	r1, r2
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <HAL_UART_RxCpltCallback+0x6c>)
 80012d6:	7011      	strb	r1, [r2, #0]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_UART_RxCpltCallback+0x6c>)
 80012e0:	701a      	strb	r2, [r3, #0]
        if (SCAN_CIRCLE_INDEX == PROCESS_SCAN_DATA_INDEX)
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_UART_RxCpltCallback+0x6c>)
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_UART_RxCpltCallback+0x70>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d10d      	bne.n	800130a <HAL_UART_RxCpltCallback+0x56>
        {
            receiveFlag = false;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_UART_RxCpltCallback+0x68>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
            SCAN_CIRCLE_INDEX = (SCAN_CIRCLE_INDEX + MAX_SCAN_BUFFER_SIZE - 1) % MAX_SCAN_BUFFER_SIZE;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_UART_RxCpltCallback+0x6c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	bfb8      	it	lt
 8001302:	425b      	neglt	r3, r3
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_UART_RxCpltCallback+0x6c>)
 8001308:	701a      	strb	r2, [r3, #0]
        }
        startReceiveScanData();
 800130a:	f7ff fe91 	bl	8001030 <startReceiveScanData>
    }
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40011000 	.word	0x40011000
 800131c:	200002ea 	.word	0x200002ea
 8001320:	200002e8 	.word	0x200002e8
 8001324:	200002e9 	.word	0x200002e9

08001328 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800132c:	f000 fbc8 	bl	8001ac0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001330:	f000 f842 	bl	80013b8 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001334:	f000 f920 	bl	8001578 <MX_GPIO_Init>
    MX_DMA_Init();
 8001338:	f000 f8fe 	bl	8001538 <MX_DMA_Init>
    MX_USART2_UART_Init();
 800133c:	f000 f8d2 	bl	80014e4 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8001340:	f000 f8a6 	bl	8001490 <MX_USART1_UART_Init>
    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <main+0x70>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <main+0x70>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0210 	orr.w	r2, r2, #16
 8001352:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE_IT(&hdma_usart1_tx, DMA_IT_TC);
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <main+0x74>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <main+0x74>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0210 	bic.w	r2, r2, #16
 8001362:	601a      	str	r2, [r3, #0]


    /* USER CODE BEGIN 2 */
    ydlidar.func.send_command = uartSendCommand;
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <main+0x78>)
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <main+0x7c>)
 8001368:	601a      	str	r2, [r3, #0]
    ydlidar.func.receive_response = uartReceiveResponse;
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <main+0x78>)
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <main+0x80>)
 800136e:	605a      	str	r2, [r3, #4]
    ydlidar.func.receive_data_dma = uartReceiveDataDMA;
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <main+0x78>)
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <main+0x84>)
 8001374:	609a      	str	r2, [r3, #8]
    printf(">>>>>>>>>>>>>>>>>>>YDLIDAR X4 Driver<<<<<<<<<<<<<<<<<<<<<\r\n");
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <main+0x88>)
 8001378:	f003 ffca 	bl	8005310 <puts>
    restartScan();
 800137c:	f7ff fed2 	bl	8001124 <restartScan>
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        dataProcess();
 8001380:	f7ff fe6e 	bl	8001060 <dataProcess>
        // led toggle
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001384:	2120      	movs	r1, #32
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <main+0x8c>)
 8001388:	f001 fad1 	bl	800292e <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 800138c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001390:	f000 fc08 	bl	8001ba4 <HAL_Delay>
        dataProcess();
 8001394:	e7f4      	b.n	8001380 <main+0x58>
 8001396:	bf00      	nop
 8001398:	20000374 	.word	0x20000374
 800139c:	200003d4 	.word	0x200003d4
 80013a0:	200001f0 	.word	0x200001f0
 80013a4:	0800123d 	.word	0x0800123d
 80013a8:	08001265 	.word	0x08001265
 80013ac:	0800128d 	.word	0x0800128d
 80013b0:	080074f8 	.word	0x080074f8
 80013b4:	40020000 	.word	0x40020000

080013b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	2234      	movs	r2, #52	; 0x34
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 f882 	bl	80054d0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <SystemClock_Config+0xd0>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	4a28      	ldr	r2, [pc, #160]	; (8001488 <SystemClock_Config+0xd0>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ea:	6413      	str	r3, [r2, #64]	; 0x40
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <SystemClock_Config+0xd0>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <SystemClock_Config+0xd4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <SystemClock_Config+0xd4>)
 8001402:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <SystemClock_Config+0xd4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001414:	2302      	movs	r3, #2
 8001416:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001418:	2301      	movs	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141c:	2310      	movs	r3, #16
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001420:	2302      	movs	r3, #2
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001424:	2300      	movs	r3, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 8001428:	2310      	movs	r3, #16
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 800142c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001430:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001432:	2304      	movs	r3, #4
 8001434:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001436:	2304      	movs	r3, #4
 8001438:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fcae 	bl	8002da4 <HAL_RCC_OscConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x9a>
    {
        Error_Handler();
 800144e:	f000 f901 	bl	8001654 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001452:	230f      	movs	r3, #15
 8001454:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2302      	movs	r3, #2
 8001458:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800145e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001462:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2102      	movs	r1, #2
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fa78 	bl	8002964 <HAL_RCC_ClockConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0xc6>
    {
        Error_Handler();
 800147a:	f000 f8eb 	bl	8001654 <Error_Handler>
    }
}
 800147e:	bf00      	nop
 8001480:	3750      	adds	r7, #80	; 0x50
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40007000 	.word	0x40007000

08001490 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <MX_USART1_UART_Init+0x50>)
 8001498:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 128000;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 800149c:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 80014a0:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014c8:	f001 fef0 	bl	80032ac <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 80014d2:	f000 f8bf 	bl	8001654 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200002ec 	.word	0x200002ec
 80014e0:	40011000 	.word	0x40011000

080014e4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <MX_USART2_UART_Init+0x50>)
 80014ec:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 800151c:	f001 fec6 	bl	80032ac <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8001526:	f000 f895 	bl	8001654 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000330 	.word	0x20000330
 8001534:	40004400 	.word	0x40004400

08001538 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_DMA_Init+0x3c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <MX_DMA_Init+0x3c>)
 8001548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_DMA_Init+0x3c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	203a      	movs	r0, #58	; 0x3a
 8001560:	f000 fc1f 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001564:	203a      	movs	r0, #58	; 0x3a
 8001566:	f000 fc38 	bl	8001dda <HAL_NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <MX_GPIO_Init+0xd0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a2c      	ldr	r2, [pc, #176]	; (8001648 <MX_GPIO_Init+0xd0>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a25      	ldr	r2, [pc, #148]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2120      	movs	r1, #32
 8001602:	4812      	ldr	r0, [pc, #72]	; (800164c <MX_GPIO_Init+0xd4>)
 8001604:	f001 f97a 	bl	80028fc <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	480c      	ldr	r0, [pc, #48]	; (8001650 <MX_GPIO_Init+0xd8>)
 8001620:	f000 fff8 	bl	8002614 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8001624:	2320      	movs	r3, #32
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_GPIO_Init+0xd4>)
 800163c:	f000 ffea 	bl	8002614 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020800 	.word	0x40020800

08001654 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_MspInit+0x4c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_MspInit+0x4c>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800169e:	2007      	movs	r0, #7
 80016a0:	f000 fb74 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	; 0x30
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a4d      	ldr	r2, [pc, #308]	; (8001804 <HAL_UART_MspInit+0x154>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d163      	bne.n	800179a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <HAL_UART_MspInit+0x158>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a4b      	ldr	r2, [pc, #300]	; (8001808 <HAL_UART_MspInit+0x158>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b49      	ldr	r3, [pc, #292]	; (8001808 <HAL_UART_MspInit+0x158>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	4b45      	ldr	r3, [pc, #276]	; (8001808 <HAL_UART_MspInit+0x158>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a44      	ldr	r2, [pc, #272]	; (8001808 <HAL_UART_MspInit+0x158>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b42      	ldr	r3, [pc, #264]	; (8001808 <HAL_UART_MspInit+0x158>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800170a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800171c:	2307      	movs	r3, #7
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	4839      	ldr	r0, [pc, #228]	; (800180c <HAL_UART_MspInit+0x15c>)
 8001728:	f000 ff74 	bl	8002614 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800172c:	4b38      	ldr	r3, [pc, #224]	; (8001810 <HAL_UART_MspInit+0x160>)
 800172e:	4a39      	ldr	r2, [pc, #228]	; (8001814 <HAL_UART_MspInit+0x164>)
 8001730:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001732:	4b37      	ldr	r3, [pc, #220]	; (8001810 <HAL_UART_MspInit+0x160>)
 8001734:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001738:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800173a:	4b35      	ldr	r3, [pc, #212]	; (8001810 <HAL_UART_MspInit+0x160>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001740:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_UART_MspInit+0x160>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001746:	4b32      	ldr	r3, [pc, #200]	; (8001810 <HAL_UART_MspInit+0x160>)
 8001748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_UART_MspInit+0x160>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001754:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_UART_MspInit+0x160>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_UART_MspInit+0x160>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_UART_MspInit+0x160>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HAL_UART_MspInit+0x160>)
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800176c:	4828      	ldr	r0, [pc, #160]	; (8001810 <HAL_UART_MspInit+0x160>)
 800176e:	f000 fb4f 	bl	8001e10 <HAL_DMA_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001778:	f7ff ff6c 	bl	8001654 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a24      	ldr	r2, [pc, #144]	; (8001810 <HAL_UART_MspInit+0x160>)
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
 8001782:	4a23      	ldr	r2, [pc, #140]	; (8001810 <HAL_UART_MspInit+0x160>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	2025      	movs	r0, #37	; 0x25
 800178e:	f000 fb08 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001792:	2025      	movs	r0, #37	; 0x25
 8001794:	f000 fb21 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001798:	e030      	b.n	80017fc <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_UART_MspInit+0x168>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d12b      	bne.n	80017fc <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_UART_MspInit+0x158>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a16      	ldr	r2, [pc, #88]	; (8001808 <HAL_UART_MspInit+0x158>)
 80017ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_UART_MspInit+0x158>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_UART_MspInit+0x158>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_UART_MspInit+0x158>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6313      	str	r3, [r2, #48]	; 0x30
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_UART_MspInit+0x158>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017dc:	230c      	movs	r3, #12
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ec:	2307      	movs	r3, #7
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_UART_MspInit+0x15c>)
 80017f8:	f000 ff0c 	bl	8002614 <HAL_GPIO_Init>
}
 80017fc:	bf00      	nop
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40011000 	.word	0x40011000
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	20000374 	.word	0x20000374
 8001814:	40026440 	.word	0x40026440
 8001818:	40004400 	.word	0x40004400

0800181c <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART2 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001824:	1d39      	adds	r1, r7, #4
 8001826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182a:	2201      	movs	r2, #1
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <__io_putchar+0x20>)
 800182e:	f001 fd8a 	bl	8003346 <HAL_UART_Transmit>

    return ch;
 8001832:	687b      	ldr	r3, [r7, #4]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000330 	.word	0x20000330

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 f96a 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <USART1_IRQHandler+0x10>)
 800189a:	f001 feb9 	bl	8003610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200002ec 	.word	0x200002ec

080018a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <DMA2_Stream2_IRQHandler+0x10>)
 80018ae:	f000 fc47 	bl	8002140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000374 	.word	0x20000374

080018bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return 1;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_kill>:

int _kill(int pid, int sig)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d6:	f003 fe4d 	bl	8005574 <__errno>
 80018da:	4603      	mov	r3, r0
 80018dc:	2216      	movs	r2, #22
 80018de:	601a      	str	r2, [r3, #0]
  return -1;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_exit>:

void _exit (int status)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffe7 	bl	80018cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80018fe:	e7fe      	b.n	80018fe <_exit+0x12>

08001900 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e00a      	b.n	8001928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001912:	f3af 8000 	nop.w
 8001916:	4601      	mov	r1, r0
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	b2ca      	uxtb	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf0      	blt.n	8001912 <_read+0x12>
  }

  return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e009      	b.n	8001960 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff61 	bl	800181c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf1      	blt.n	800194c <_write+0x12>
  }
  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_close>:

int _close(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800199a:	605a      	str	r2, [r3, #4]
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_isatty>:

int _isatty(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f003 fdb2 	bl	8005574 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20008000 	.word	0x20008000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	20000434 	.word	0x20000434
 8001a44:	20000588 	.word	0x20000588

08001a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a72:	490e      	ldr	r1, [pc, #56]	; (8001aac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a88:	4c0b      	ldr	r4, [pc, #44]	; (8001ab8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a96:	f7ff ffd7 	bl	8001a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f003 fd71 	bl	8005580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7ff fc43 	bl	8001328 <main>
  bx  lr    
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001aa4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ab0:	080078d4 	.word	0x080078d4
  ldr r2, =_sbss
 8001ab4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ab8:	20000588 	.word	0x20000588

08001abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_Init+0x40>)
 8001aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_Init+0x40>)
 8001ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_Init+0x40>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f000 f94f 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f000 f808 	bl	8001b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af4:	f7ff fdb4 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x54>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x58>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f967 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00e      	b.n	8001b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b0f      	cmp	r3, #15
 8001b36:	d80a      	bhi.n	8001b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f000 f92f 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b44:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <HAL_InitTick+0x5c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e000      	b.n	8001b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20000438 	.word	0x20000438

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000438 	.word	0x20000438

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff29 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff3e 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff8e 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5d 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff31 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa2 	bl	8001d48 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff feb6 	bl	8001b8c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e099      	b.n	8001f60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4c:	e00f      	b.n	8001e6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4e:	f7ff fe9d 	bl	8001b8c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d908      	bls.n	8001e6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2203      	movs	r2, #3
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e078      	b.n	8001f60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1e8      	bne.n	8001e4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_DMA_Init+0x158>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d107      	bne.n	8001ed8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f023 0307 	bic.w	r3, r3, #7
 8001eee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d117      	bne.n	8001f32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00e      	beq.n	8001f32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fb01 	bl	800251c <DMA_CheckFifoParam>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2240      	movs	r2, #64	; 0x40
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e016      	b.n	8001f60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fab8 	bl	80024b0 <DMA_CalcBaseAndBitshift>
 8001f40:	4603      	mov	r3, r0
 8001f42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	223f      	movs	r2, #63	; 0x3f
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	f010803f 	.word	0xf010803f

08001f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_DMA_Start_IT+0x26>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e040      	b.n	8002014 <HAL_DMA_Start_IT+0xa8>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d12f      	bne.n	8002006 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fa4a 	bl	8002454 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0216 	orr.w	r2, r2, #22
 8001fda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0208 	orr.w	r2, r2, #8
 8001ff2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e005      	b.n	8002012 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800200e:	2302      	movs	r3, #2
 8002010:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002012:	7dfb      	ldrb	r3, [r7, #23]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800202a:	f7ff fdaf 	bl	8001b8c <HAL_GetTick>
 800202e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d008      	beq.n	800204e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2280      	movs	r2, #128	; 0x80
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e052      	b.n	80020f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0216 	bic.w	r2, r2, #22
 800205c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800206c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <HAL_DMA_Abort+0x62>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0208 	bic.w	r2, r2, #8
 800208c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209e:	e013      	b.n	80020c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a0:	f7ff fd74 	bl	8001b8c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d90c      	bls.n	80020c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2203      	movs	r2, #3
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e015      	b.n	80020f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1e4      	bne.n	80020a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	223f      	movs	r2, #63	; 0x3f
 80020dc:	409a      	lsls	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d004      	beq.n	800211a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2280      	movs	r2, #128	; 0x80
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00c      	b.n	8002134 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2205      	movs	r2, #5
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800214c:	4b8e      	ldr	r3, [pc, #568]	; (8002388 <HAL_DMA_IRQHandler+0x248>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a8e      	ldr	r2, [pc, #568]	; (800238c <HAL_DMA_IRQHandler+0x24c>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0a9b      	lsrs	r3, r3, #10
 8002158:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2208      	movs	r2, #8
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01a      	beq.n	80021ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0204 	bic.w	r2, r2, #4
 8002192:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	2208      	movs	r2, #8
 800219a:	409a      	lsls	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2201      	movs	r2, #1
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d012      	beq.n	80021e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	2201      	movs	r2, #1
 80021d0:	409a      	lsls	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	2204      	movs	r2, #4
 80021e8:	409a      	lsls	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d012      	beq.n	8002218 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002204:	2204      	movs	r2, #4
 8002206:	409a      	lsls	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f043 0204 	orr.w	r2, r3, #4
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	2210      	movs	r2, #16
 800221e:	409a      	lsls	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d043      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d03c      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223a:	2210      	movs	r2, #16
 800223c:	409a      	lsls	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d018      	beq.n	8002282 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d024      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
 800226e:	e01f      	b.n	80022b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01b      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	e016      	b.n	80022b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0208 	bic.w	r2, r2, #8
 800229e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	2220      	movs	r2, #32
 80022b6:	409a      	lsls	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 808f 	beq.w	80023e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8087 	beq.w	80023e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d6:	2220      	movs	r2, #32
 80022d8:	409a      	lsls	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d136      	bne.n	8002358 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0216 	bic.w	r2, r2, #22
 80022f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002308:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <HAL_DMA_IRQHandler+0x1da>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0208 	bic.w	r2, r2, #8
 8002328:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	223f      	movs	r2, #63	; 0x3f
 8002330:	409a      	lsls	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234a:	2b00      	cmp	r3, #0
 800234c:	d07e      	beq.n	800244c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
        }
        return;
 8002356:	e079      	b.n	800244c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01d      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10d      	bne.n	8002390 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	2b00      	cmp	r3, #0
 800237a:	d031      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4798      	blx	r3
 8002384:	e02c      	b.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
 8002386:	bf00      	nop
 8002388:	20000000 	.word	0x20000000
 800238c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d023      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4798      	blx	r3
 80023a0:	e01e      	b.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10f      	bne.n	80023d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0210 	bic.w	r2, r2, #16
 80023be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d032      	beq.n	800244e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d022      	beq.n	800243a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2205      	movs	r2, #5
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	3301      	adds	r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	d307      	bcc.n	8002428 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f2      	bne.n	800240c <HAL_DMA_IRQHandler+0x2cc>
 8002426:	e000      	b.n	800242a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002428:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
 800244a:	e000      	b.n	800244e <HAL_DMA_IRQHandler+0x30e>
        return;
 800244c:	bf00      	nop
    }
  }
}
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002470:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d108      	bne.n	8002494 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002492:	e007      	b.n	80024a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	60da      	str	r2, [r3, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3b10      	subs	r3, #16
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <DMA_CalcBaseAndBitshift+0x64>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ca:	4a13      	ldr	r2, [pc, #76]	; (8002518 <DMA_CalcBaseAndBitshift+0x68>)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d909      	bls.n	80024f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	1d1a      	adds	r2, r3, #4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	659a      	str	r2, [r3, #88]	; 0x58
 80024f0:	e007      	b.n	8002502 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	aaaaaaab 	.word	0xaaaaaaab
 8002518:	0800754c 	.word	0x0800754c

0800251c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11f      	bne.n	8002576 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d856      	bhi.n	80025ea <DMA_CheckFifoParam+0xce>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <DMA_CheckFifoParam+0x28>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002555 	.word	0x08002555
 8002548:	08002567 	.word	0x08002567
 800254c:	08002555 	.word	0x08002555
 8002550:	080025eb 	.word	0x080025eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d046      	beq.n	80025ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002564:	e043      	b.n	80025ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800256e:	d140      	bne.n	80025f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002574:	e03d      	b.n	80025f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257e:	d121      	bne.n	80025c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d837      	bhi.n	80025f6 <DMA_CheckFifoParam+0xda>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <DMA_CheckFifoParam+0x70>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	0800259d 	.word	0x0800259d
 8002590:	080025a3 	.word	0x080025a3
 8002594:	0800259d 	.word	0x0800259d
 8002598:	080025b5 	.word	0x080025b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      break;
 80025a0:	e030      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d025      	beq.n	80025fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b2:	e022      	b.n	80025fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025bc:	d11f      	bne.n	80025fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025c2:	e01c      	b.n	80025fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d903      	bls.n	80025d2 <DMA_CheckFifoParam+0xb6>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d003      	beq.n	80025d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025d0:	e018      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
      break;
 80025d6:	e015      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00e      	beq.n	8002602 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
      break;
 80025e8:	e00b      	b.n	8002602 <DMA_CheckFifoParam+0xe6>
      break;
 80025ea:	bf00      	nop
 80025ec:	e00a      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e008      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
 80025f4:	e006      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e004      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e002      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;   
 80025fe:	bf00      	nop
 8002600:	e000      	b.n	8002604 <DMA_CheckFifoParam+0xe8>
      break;
 8002602:	bf00      	nop
    }
  } 
  
  return status; 
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	e14d      	b.n	80028cc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002630:	2201      	movs	r2, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	429a      	cmp	r2, r3
 800264a:	f040 813c 	bne.w	80028c6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d005      	beq.n	8002666 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002662:	2b02      	cmp	r3, #2
 8002664:	d130      	bne.n	80026c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800269c:	2201      	movs	r2, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 0201 	and.w	r2, r3, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d017      	beq.n	8002704 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	2203      	movs	r2, #3
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d123      	bne.n	8002758 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	08da      	lsrs	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3208      	adds	r2, #8
 8002718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	220f      	movs	r2, #15
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	08da      	lsrs	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3208      	adds	r2, #8
 8002752:	69b9      	ldr	r1, [r7, #24]
 8002754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0203 	and.w	r2, r3, #3
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8096 	beq.w	80028c6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b51      	ldr	r3, [pc, #324]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4a50      	ldr	r2, [pc, #320]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 80027a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	4b4e      	ldr	r3, [pc, #312]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b6:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <HAL_GPIO_Init+0x2d4>)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	220f      	movs	r2, #15
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a43      	ldr	r2, [pc, #268]	; (80028ec <HAL_GPIO_Init+0x2d8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00d      	beq.n	80027fe <HAL_GPIO_Init+0x1ea>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a42      	ldr	r2, [pc, #264]	; (80028f0 <HAL_GPIO_Init+0x2dc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d007      	beq.n	80027fa <HAL_GPIO_Init+0x1e6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a41      	ldr	r2, [pc, #260]	; (80028f4 <HAL_GPIO_Init+0x2e0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_GPIO_Init+0x1e2>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e004      	b.n	8002800 <HAL_GPIO_Init+0x1ec>
 80027f6:	2307      	movs	r3, #7
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_Init+0x1ec>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x1ec>
 80027fe:	2300      	movs	r3, #0
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4093      	lsls	r3, r2
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002810:	4935      	ldr	r1, [pc, #212]	; (80028e8 <HAL_GPIO_Init+0x2d4>)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <HAL_GPIO_Init+0x2e4>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a2d      	ldr	r2, [pc, #180]	; (80028f8 <HAL_GPIO_Init+0x2e4>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <HAL_GPIO_Init+0x2e4>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <HAL_GPIO_Init+0x2e4>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_GPIO_Init+0x2e4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <HAL_GPIO_Init+0x2e4>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_GPIO_Init+0x2e4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <HAL_GPIO_Init+0x2e4>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	f67f aeae 	bls.w	8002630 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002918:	e003      	b.n	8002922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800292e:	b480      	push	{r7}
 8002930:	b085      	sub	sp, #20
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002940:	887a      	ldrh	r2, [r7, #2]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4013      	ands	r3, r2
 8002946:	041a      	lsls	r2, r3, #16
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	43d9      	mvns	r1, r3
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	400b      	ands	r3, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	619a      	str	r2, [r3, #24]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0cc      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d90c      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0b8      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	494d      	ldr	r1, [pc, #308]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d044      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d119      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e067      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 0203 	bic.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4934      	ldr	r1, [pc, #208]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a54:	f7ff f89a 	bl	8001b8c <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7ff f896 	bl	8001b8c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e04f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 020c 	and.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1eb      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d20c      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e032      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4916      	ldr	r1, [pc, #88]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	490e      	ldr	r1, [pc, #56]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aea:	f000 f821 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	490a      	ldr	r1, [pc, #40]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	5ccb      	ldrb	r3, [r1, r3]
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fffa 	bl	8001b04 <HAL_InitTick>

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08007534 	.word	0x08007534
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000004 	.word	0x20000004

08002b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b34:	b094      	sub	sp, #80	; 0x50
 8002b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b40:	2300      	movs	r3, #0
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b48:	4b79      	ldr	r3, [pc, #484]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d00d      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x40>
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	f200 80e1 	bhi.w	8002d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x34>
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b62:	e0db      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b73      	ldr	r3, [pc, #460]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b68:	e0db      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6a:	4b73      	ldr	r3, [pc, #460]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b6e:	e0d8      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b70:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d063      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	f04f 0000 	mov.w	r0, #0
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	0159      	lsls	r1, r3, #5
 8002bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb4:	0150      	lsls	r0, r2, #5
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4621      	mov	r1, r4
 8002bbc:	1a51      	subs	r1, r2, r1
 8002bbe:	6139      	str	r1, [r7, #16]
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	018b      	lsls	r3, r1, #6
 8002bd8:	4651      	mov	r1, sl
 8002bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bde:	4651      	mov	r1, sl
 8002be0:	018a      	lsls	r2, r1, #6
 8002be2:	4651      	mov	r1, sl
 8002be4:	ebb2 0801 	subs.w	r8, r2, r1
 8002be8:	4659      	mov	r1, fp
 8002bea:	eb63 0901 	sbc.w	r9, r3, r1
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c02:	4690      	mov	r8, r2
 8002c04:	4699      	mov	r9, r3
 8002c06:	4623      	mov	r3, r4
 8002c08:	eb18 0303 	adds.w	r3, r8, r3
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	462b      	mov	r3, r5
 8002c10:	eb49 0303 	adc.w	r3, r9, r3
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c22:	4629      	mov	r1, r5
 8002c24:	024b      	lsls	r3, r1, #9
 8002c26:	4621      	mov	r1, r4
 8002c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	024a      	lsls	r2, r1, #9
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c36:	2200      	movs	r2, #0
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c40:	f7fd ffd2 	bl	8000be8 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c4c:	e058      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	2200      	movs	r2, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	4611      	mov	r1, r2
 8002c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c68:	4642      	mov	r2, r8
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	0159      	lsls	r1, r3, #5
 8002c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7a:	0150      	lsls	r0, r2, #5
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4641      	mov	r1, r8
 8002c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c86:	4649      	mov	r1, r9
 8002c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	00eb      	lsls	r3, r5, #3
 8002cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb6:	00e2      	lsls	r2, r4, #3
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
 8002cbc:	4643      	mov	r3, r8
 8002cbe:	18e3      	adds	r3, r4, r3
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	eb45 0303 	adc.w	r3, r5, r3
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	028b      	lsls	r3, r1, #10
 8002cda:	4621      	mov	r1, r4
 8002cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	028a      	lsls	r2, r1, #10
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cea:	2200      	movs	r2, #0
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	61fa      	str	r2, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	f7fd ff78 	bl	8000be8 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3750      	adds	r7, #80	; 0x50
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000000 	.word	0x20000000

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d58:	f7ff fff0 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0a9b      	lsrs	r3, r3, #10
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08007544 	.word	0x08007544

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d80:	f7ff ffdc 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0b5b      	lsrs	r3, r3, #13
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08007544 	.word	0x08007544

08002da4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e273      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d075      	beq.n	8002eae <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dc2:	4b88      	ldr	r3, [pc, #544]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d00c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dce:	4b85      	ldr	r3, [pc, #532]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d112      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b82      	ldr	r3, [pc, #520]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de6:	d10b      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	4b7e      	ldr	r3, [pc, #504]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d05b      	beq.n	8002eac <HAL_RCC_OscConfig+0x108>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d157      	bne.n	8002eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e24e      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x74>
 8002e0a:	4b76      	ldr	r3, [pc, #472]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a75      	ldr	r2, [pc, #468]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e01d      	b.n	8002e54 <HAL_RCC_OscConfig+0xb0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x98>
 8002e22:	4b70      	ldr	r3, [pc, #448]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6f      	ldr	r2, [pc, #444]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b6d      	ldr	r3, [pc, #436]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6c      	ldr	r2, [pc, #432]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0xb0>
 8002e3c:	4b69      	ldr	r3, [pc, #420]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a68      	ldr	r2, [pc, #416]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a65      	ldr	r2, [pc, #404]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fe96 	bl	8001b8c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fe92 	bl	8001b8c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	; 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e213      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0xc0>
 8002e82:	e014      	b.n	8002eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe fe82 	bl	8001b8c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fe7e 	bl	8001b8c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1ff      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0xe8>
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d063      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002eba:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d11c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed2:	4b44      	ldr	r3, [pc, #272]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d116      	bne.n	8002f0c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x152>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e1d3      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4937      	ldr	r1, [pc, #220]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	e03a      	b.n	8002f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f14:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <HAL_RCC_OscConfig+0x244>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fe37 	bl	8001b8c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f22:	f7fe fe33 	bl	8001b8c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e1b4      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f34:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f40:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4925      	ldr	r1, [pc, #148]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
 8002f54:	e015      	b.n	8002f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCC_OscConfig+0x244>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fe16 	bl	8001b8c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f64:	f7fe fe12 	bl	8001b8c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e193      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d036      	beq.n	8002ffc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f96:	4b15      	ldr	r3, [pc, #84]	; (8002fec <HAL_RCC_OscConfig+0x248>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fe fdf6 	bl	8001b8c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fe fdf2 	bl	8001b8c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e173      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x200>
 8002fc2:	e01b      	b.n	8002ffc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCC_OscConfig+0x248>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fca:	f7fe fddf 	bl	8001b8c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	e00e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd2:	f7fe fddb 	bl	8001b8c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d907      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e15c      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	42470000 	.word	0x42470000
 8002fec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff0:	4b8a      	ldr	r3, [pc, #552]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8002ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ea      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8097 	beq.w	8003138 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300e:	4b83      	ldr	r3, [pc, #524]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	4b7f      	ldr	r3, [pc, #508]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a7e      	ldr	r2, [pc, #504]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b7c      	ldr	r3, [pc, #496]	; (800321c <HAL_RCC_OscConfig+0x478>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	4b79      	ldr	r3, [pc, #484]	; (8003220 <HAL_RCC_OscConfig+0x47c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d118      	bne.n	8003078 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003046:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCC_OscConfig+0x47c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a75      	ldr	r2, [pc, #468]	; (8003220 <HAL_RCC_OscConfig+0x47c>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003052:	f7fe fd9b 	bl	8001b8c <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305a:	f7fe fd97 	bl	8001b8c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e118      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	4b6c      	ldr	r3, [pc, #432]	; (8003220 <HAL_RCC_OscConfig+0x47c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x2ea>
 8003080:	4b66      	ldr	r3, [pc, #408]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a65      	ldr	r2, [pc, #404]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
 800308c:	e01c      	b.n	80030c8 <HAL_RCC_OscConfig+0x324>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x30c>
 8003096:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	4a60      	ldr	r2, [pc, #384]	; (800321c <HAL_RCC_OscConfig+0x478>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70
 80030a2:	4b5e      	ldr	r3, [pc, #376]	; (800321c <HAL_RCC_OscConfig+0x478>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a5d      	ldr	r2, [pc, #372]	; (800321c <HAL_RCC_OscConfig+0x478>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0x324>
 80030b0:	4b5a      	ldr	r3, [pc, #360]	; (800321c <HAL_RCC_OscConfig+0x478>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	4a59      	ldr	r2, [pc, #356]	; (800321c <HAL_RCC_OscConfig+0x478>)
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	6713      	str	r3, [r2, #112]	; 0x70
 80030bc:	4b57      	ldr	r3, [pc, #348]	; (800321c <HAL_RCC_OscConfig+0x478>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4a56      	ldr	r2, [pc, #344]	; (800321c <HAL_RCC_OscConfig+0x478>)
 80030c2:	f023 0304 	bic.w	r3, r3, #4
 80030c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d015      	beq.n	80030fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe fd5c 	bl	8001b8c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7fe fd58 	bl	8001b8c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0d7      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	4b4b      	ldr	r3, [pc, #300]	; (800321c <HAL_RCC_OscConfig+0x478>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0ee      	beq.n	80030d8 <HAL_RCC_OscConfig+0x334>
 80030fa:	e014      	b.n	8003126 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe fd46 	bl	8001b8c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe fd42 	bl	8001b8c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0c1      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311a:	4b40      	ldr	r3, [pc, #256]	; (800321c <HAL_RCC_OscConfig+0x478>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1ee      	bne.n	8003104 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312c:	4b3b      	ldr	r3, [pc, #236]	; (800321c <HAL_RCC_OscConfig+0x478>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	4a3a      	ldr	r2, [pc, #232]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8003132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003136:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80ad 	beq.w	800329c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003142:	4b36      	ldr	r3, [pc, #216]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b08      	cmp	r3, #8
 800314c:	d060      	beq.n	8003210 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d145      	bne.n	80031e2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b33      	ldr	r3, [pc, #204]	; (8003224 <HAL_RCC_OscConfig+0x480>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fd16 	bl	8001b8c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe fd12 	bl	8001b8c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e093      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	3b01      	subs	r3, #1
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	071b      	lsls	r3, r3, #28
 80031ae:	491b      	ldr	r1, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x478>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x480>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ba:	f7fe fce7 	bl	8001b8c <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe fce3 	bl	8001b8c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e064      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_OscConfig+0x478>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x41e>
 80031e0:	e05c      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_RCC_OscConfig+0x480>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fcd0 	bl	8001b8c <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fccc 	bl	8001b8c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e04d      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCC_OscConfig+0x478>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x44c>
 800320e:	e045      	b.n	800329c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e040      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
 800321c:	40023800 	.word	0x40023800
 8003220:	40007000 	.word	0x40007000
 8003224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003228:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d030      	beq.n	8003298 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d129      	bne.n	8003298 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d122      	bne.n	8003298 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800325e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003260:	4293      	cmp	r3, r2
 8003262:	d119      	bne.n	8003298 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	3b01      	subs	r3, #1
 8003272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d10f      	bne.n	8003298 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e03f      	b.n	800333e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe f9ec 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f001 f80b 	bl	800430c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b08a      	sub	sp, #40	; 0x28
 800334a:	af02      	add	r7, sp, #8
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b20      	cmp	r3, #32
 8003364:	d17c      	bne.n	8003460 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_UART_Transmit+0x2c>
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e075      	b.n	8003462 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_UART_Transmit+0x3e>
 8003380:	2302      	movs	r3, #2
 8003382:	e06e      	b.n	8003462 <HAL_UART_Transmit+0x11c>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2221      	movs	r2, #33	; 0x21
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339a:	f7fe fbf7 	bl	8001b8c <HAL_GetTick>
 800339e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	88fa      	ldrh	r2, [r7, #6]
 80033aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b4:	d108      	bne.n	80033c8 <HAL_UART_Transmit+0x82>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	e003      	b.n	80033d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033d8:	e02a      	b.n	8003430 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fcc3 	bl	8003d70 <UART_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e036      	b.n	8003462 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003408:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	3302      	adds	r3, #2
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	e007      	b.n	8003422 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	3301      	adds	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1cf      	bne.n	80033da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fc93 	bl	8003d70 <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e006      	b.n	8003462 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b08a      	sub	sp, #40	; 0x28
 800346e:	af02      	add	r7, sp, #8
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b20      	cmp	r3, #32
 8003488:	f040 808c 	bne.w	80035a4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_UART_Receive+0x2e>
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e084      	b.n	80035a6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Receive+0x40>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e07d      	b.n	80035a6 <HAL_UART_Receive+0x13c>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2222      	movs	r2, #34	; 0x22
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034c6:	f7fe fb61 	bl	8001b8c <HAL_GetTick>
 80034ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d108      	bne.n	80034f4 <HAL_UART_Receive+0x8a>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	e003      	b.n	80034fc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003504:	e043      	b.n	800358e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2200      	movs	r2, #0
 800350e:	2120      	movs	r1, #32
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fc2d 	bl	8003d70 <UART_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e042      	b.n	80035a6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10c      	bne.n	8003540 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	b29b      	uxth	r3, r3
 800352e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003532:	b29a      	uxth	r2, r3
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	3302      	adds	r3, #2
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	e01f      	b.n	8003580 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003548:	d007      	beq.n	800355a <HAL_UART_Receive+0xf0>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <HAL_UART_Receive+0xfe>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e008      	b.n	800357a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003574:	b2da      	uxtb	r2, r3
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3301      	adds	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1b6      	bne.n	8003506 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e000      	b.n	80035a6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	4613      	mov	r3, r2
 80035ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d11d      	bne.n	8003604 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_UART_Receive_DMA+0x26>
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e016      	b.n	8003606 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Receive_DMA+0x38>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e00f      	b.n	8003606 <HAL_UART_Receive_DMA+0x58>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	461a      	mov	r2, r3
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fc26 	bl	8003e4c <UART_Start_Receive_DMA>
 8003600:	4603      	mov	r3, r0
 8003602:	e000      	b.n	8003606 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b0ba      	sub	sp, #232	; 0xe8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800364e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_UART_IRQHandler+0x66>
 8003662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fd91 	bl	8004196 <UART_Receive_IT>
      return;
 8003674:	e256      	b.n	8003b24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80de 	beq.w	800383c <HAL_UART_IRQHandler+0x22c>
 8003680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d106      	bne.n	800369a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003690:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80d1 	beq.w	800383c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_UART_IRQHandler+0xae>
 80036a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f043 0201 	orr.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_UART_IRQHandler+0xd2>
 80036ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f043 0202 	orr.w	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_UART_IRQHandler+0xf6>
 80036ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f043 0204 	orr.w	r2, r3, #4
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d011      	beq.n	8003736 <HAL_UART_IRQHandler+0x126>
 8003712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800371e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0208 	orr.w	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 81ed 	beq.w	8003b1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_UART_IRQHandler+0x14e>
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fd1c 	bl	8004196 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <HAL_UART_IRQHandler+0x17a>
 8003782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d04f      	beq.n	800382a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fc24 	bl	8003fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	2b40      	cmp	r3, #64	; 0x40
 800379c:	d141      	bne.n	8003822 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3314      	adds	r3, #20
 80037c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1d9      	bne.n	800379e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d013      	beq.n	800381a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4a7d      	ldr	r2, [pc, #500]	; (80039ec <HAL_UART_IRQHandler+0x3dc>)
 80037f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe fc7c 	bl	80020fc <HAL_DMA_Abort_IT>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003814:	4610      	mov	r0, r2
 8003816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	e00e      	b.n	8003838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f99a 	bl	8003b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	e00a      	b.n	8003838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f996 	bl	8003b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	e006      	b.n	8003838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f992 	bl	8003b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003836:	e170      	b.n	8003b1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	bf00      	nop
    return;
 800383a:	e16e      	b.n	8003b1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	2b01      	cmp	r3, #1
 8003842:	f040 814a 	bne.w	8003ada <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8143 	beq.w	8003ada <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 813c 	beq.w	8003ada <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	f040 80b4 	bne.w	80039f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003894:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8140 	beq.w	8003b1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038a6:	429a      	cmp	r2, r3
 80038a8:	f080 8139 	bcs.w	8003b1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	f000 8088 	beq.w	80039d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1d9      	bne.n	80038c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800391e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3314      	adds	r3, #20
 800392e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003932:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003936:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800393a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e1      	bne.n	800390e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800395a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800395c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800396e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003970:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003974:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800397c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e3      	bne.n	800394a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a2:	f023 0310 	bic.w	r3, r3, #16
 80039a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80039b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e3      	bne.n	8003990 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fb25 	bl	800201c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f8c0 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039e8:	e099      	b.n	8003b1e <HAL_UART_IRQHandler+0x50e>
 80039ea:	bf00      	nop
 80039ec:	0800409f 	.word	0x0800409f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 808b 	beq.w	8003b22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8086 	beq.w	8003b22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a3a:	647a      	str	r2, [r7, #68]	; 0x44
 8003a3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3314      	adds	r3, #20
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a72:	633a      	str	r2, [r7, #48]	; 0x30
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e3      	bne.n	8003a4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0310 	bic.w	r3, r3, #16
 8003aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ab8:	61fa      	str	r2, [r7, #28]
 8003aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e3      	bne.n	8003a94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f848 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ad8:	e023      	b.n	8003b22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_UART_IRQHandler+0x4ea>
 8003ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fae7 	bl	80040c6 <UART_Transmit_IT>
    return;
 8003af8:	e014      	b.n	8003b24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00e      	beq.n	8003b24 <HAL_UART_IRQHandler+0x514>
 8003b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fb27 	bl	8004166 <UART_EndTransmit_IT>
    return;
 8003b18:	e004      	b.n	8003b24 <HAL_UART_IRQHandler+0x514>
    return;
 8003b1a:	bf00      	nop
 8003b1c:	e002      	b.n	8003b24 <HAL_UART_IRQHandler+0x514>
      return;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <HAL_UART_IRQHandler+0x514>
      return;
 8003b22:	bf00      	nop
  }
}
 8003b24:	37e8      	adds	r7, #232	; 0xe8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop

08003b2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b09c      	sub	sp, #112	; 0x70
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d172      	bne.n	8003c82 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bc4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e5      	bne.n	8003ba2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3314      	adds	r3, #20
 8003bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	667b      	str	r3, [r7, #100]	; 0x64
 8003bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bf6:	647a      	str	r2, [r7, #68]	; 0x44
 8003bf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e5      	bne.n	8003bd6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	623b      	str	r3, [r7, #32]
   return(result);
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c20:	663b      	str	r3, [r7, #96]	; 0x60
 8003c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3314      	adds	r3, #20
 8003c28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c2a:	633a      	str	r2, [r7, #48]	; 0x30
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e5      	bne.n	8003c0a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d119      	bne.n	8003c82 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f023 0310 	bic.w	r3, r3, #16
 8003c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c6e:	61fa      	str	r2, [r7, #28]
 8003c70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	69b9      	ldr	r1, [r7, #24]
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d106      	bne.n	8003c98 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c92:	f7ff ff69 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c96:	e002      	b.n	8003c9e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003c98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c9a:	f7fd fb0b 	bl	80012b4 <HAL_UART_RxCpltCallback>
}
 8003c9e:	bf00      	nop
 8003ca0:	3770      	adds	r7, #112	; 0x70
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d108      	bne.n	8003cce <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff ff4e 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ccc:	e002      	b.n	8003cd4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff ff36 	bl	8003b40 <HAL_UART_RxHalfCpltCallback>
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b80      	cmp	r3, #128	; 0x80
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b21      	cmp	r3, #33	; 0x21
 8003d0e:	d108      	bne.n	8003d22 <UART_DMAError+0x46>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d1c:	68b8      	ldr	r0, [r7, #8]
 8003d1e:	f000 f933 	bl	8003f88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b22      	cmp	r3, #34	; 0x22
 8003d42:	d108      	bne.n	8003d56 <UART_DMAError+0x7a>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d50:	68b8      	ldr	r0, [r7, #8]
 8003d52:	f000 f941 	bl	8003fd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f043 0210 	orr.w	r2, r3, #16
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d62:	68b8      	ldr	r0, [r7, #8]
 8003d64:	f7ff fef6 	bl	8003b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d68:	bf00      	nop
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b090      	sub	sp, #64	; 0x40
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d80:	e050      	b.n	8003e24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d04c      	beq.n	8003e24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d90:	f7fd fefc 	bl	8001b8c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d241      	bcs.n	8003e24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc0:	637a      	str	r2, [r7, #52]	; 0x34
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3314      	adds	r3, #20
 8003dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	613b      	str	r3, [r7, #16]
   return(result);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df4:	623a      	str	r2, [r7, #32]
 8003df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	69f9      	ldr	r1, [r7, #28]
 8003dfa:	6a3a      	ldr	r2, [r7, #32]
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e5      	bne.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e00f      	b.n	8003e44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d09f      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3740      	adds	r7, #64	; 0x40
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b098      	sub	sp, #96	; 0x60
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2222      	movs	r2, #34	; 0x22
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	4a40      	ldr	r2, [pc, #256]	; (8003f7c <UART_Start_Receive_DMA+0x130>)
 8003e7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	4a3f      	ldr	r2, [pc, #252]	; (8003f80 <UART_Start_Receive_DMA+0x134>)
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	4a3e      	ldr	r2, [pc, #248]	; (8003f84 <UART_Start_Receive_DMA+0x138>)
 8003e8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	2200      	movs	r2, #0
 8003e92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	f7fe f85e 	bl	8001f6c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d019      	beq.n	8003f0a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ef6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	657b      	str	r3, [r7, #84]	; 0x54
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f2a:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3314      	adds	r3, #20
 8003f44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f5e:	627a      	str	r2, [r7, #36]	; 0x24
 8003f60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6a39      	ldr	r1, [r7, #32]
 8003f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e5      	bne.n	8003f3e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3760      	adds	r7, #96	; 0x60
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	08003b81 	.word	0x08003b81
 8003f80:	08003ca7 	.word	0x08003ca7
 8003f84:	08003cdd 	.word	0x08003cdd

08003f88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	61ba      	str	r2, [r7, #24]
 8003fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6979      	ldr	r1, [r7, #20]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003fcc:	bf00      	nop
 8003fce:	3724      	adds	r7, #36	; 0x24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b095      	sub	sp, #84	; 0x54
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004000:	643a      	str	r2, [r7, #64]	; 0x40
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e5      	bne.n	8003fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	61fb      	str	r3, [r7, #28]
   return(result);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3314      	adds	r3, #20
 8004032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004034:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800403a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	2b01      	cmp	r3, #1
 800404e:	d119      	bne.n	8004084 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f023 0310 	bic.w	r3, r3, #16
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004070:	61ba      	str	r2, [r7, #24]
 8004072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6979      	ldr	r1, [r7, #20]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	613b      	str	r3, [r7, #16]
   return(result);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004092:	bf00      	nop
 8004094:	3754      	adds	r7, #84	; 0x54
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff fd4b 	bl	8003b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b21      	cmp	r3, #33	; 0x21
 80040d8:	d13e      	bne.n	8004158 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e2:	d114      	bne.n	800410e <UART_Transmit_IT+0x48>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d110      	bne.n	800410e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004100:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	1c9a      	adds	r2, r3, #2
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	621a      	str	r2, [r3, #32]
 800410c:	e008      	b.n	8004120 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	1c59      	adds	r1, r3, #1
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6211      	str	r1, [r2, #32]
 8004118:	781a      	ldrb	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29b      	uxth	r3, r3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4619      	mov	r1, r3
 800412e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10f      	bne.n	8004154 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004142:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004152:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	e000      	b.n	800415a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
  }
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800417c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fcd0 	bl	8003b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b08c      	sub	sp, #48	; 0x30
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b22      	cmp	r3, #34	; 0x22
 80041a8:	f040 80ab 	bne.w	8004302 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b4:	d117      	bne.n	80041e6 <UART_Receive_IT+0x50>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d113      	bne.n	80041e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	1c9a      	adds	r2, r3, #2
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
 80041e4:	e026      	b.n	8004234 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f8:	d007      	beq.n	800420a <UART_Receive_IT+0x74>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <UART_Receive_IT+0x82>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e008      	b.n	800422a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004224:	b2da      	uxtb	r2, r3
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29b      	uxth	r3, r3
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	4619      	mov	r1, r3
 8004242:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004244:	2b00      	cmp	r3, #0
 8004246:	d15a      	bne.n	80042fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0220 	bic.w	r2, r2, #32
 8004256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	2b01      	cmp	r3, #1
 8004286:	d135      	bne.n	80042f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	613b      	str	r3, [r7, #16]
   return(result);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f023 0310 	bic.w	r3, r3, #16
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ae:	623a      	str	r2, [r7, #32]
 80042b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	69f9      	ldr	r1, [r7, #28]
 80042b4:	6a3a      	ldr	r2, [r7, #32]
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e5      	bne.n	800428e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d10a      	bne.n	80042e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fc3b 	bl	8003b68 <HAL_UARTEx_RxEventCallback>
 80042f2:	e002      	b.n	80042fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7fc ffdd 	bl	80012b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e002      	b.n	8004304 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3730      	adds	r7, #48	; 0x30
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800430c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004310:	b0c0      	sub	sp, #256	; 0x100
 8004312:	af00      	add	r7, sp, #0
 8004314:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	68d9      	ldr	r1, [r3, #12]
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	ea40 0301 	orr.w	r3, r0, r1
 8004334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	431a      	orrs	r2, r3
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	431a      	orrs	r2, r3
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004364:	f021 010c 	bic.w	r1, r1, #12
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004372:	430b      	orrs	r3, r1
 8004374:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004386:	6999      	ldr	r1, [r3, #24]
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	ea40 0301 	orr.w	r3, r0, r1
 8004392:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b8f      	ldr	r3, [pc, #572]	; (80045d8 <UART_SetConfig+0x2cc>)
 800439c:	429a      	cmp	r2, r3
 800439e:	d005      	beq.n	80043ac <UART_SetConfig+0xa0>
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b8d      	ldr	r3, [pc, #564]	; (80045dc <UART_SetConfig+0x2d0>)
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d104      	bne.n	80043b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ac:	f7fe fce6 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 80043b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043b4:	e003      	b.n	80043be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043b6:	f7fe fccd 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 80043ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c8:	f040 810c 	bne.w	80045e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043de:	4622      	mov	r2, r4
 80043e0:	462b      	mov	r3, r5
 80043e2:	1891      	adds	r1, r2, r2
 80043e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80043e6:	415b      	adcs	r3, r3
 80043e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043ee:	4621      	mov	r1, r4
 80043f0:	eb12 0801 	adds.w	r8, r2, r1
 80043f4:	4629      	mov	r1, r5
 80043f6:	eb43 0901 	adc.w	r9, r3, r1
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800440a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800440e:	4690      	mov	r8, r2
 8004410:	4699      	mov	r9, r3
 8004412:	4623      	mov	r3, r4
 8004414:	eb18 0303 	adds.w	r3, r8, r3
 8004418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800441c:	462b      	mov	r3, r5
 800441e:	eb49 0303 	adc.w	r3, r9, r3
 8004422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004432:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004436:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800443a:	460b      	mov	r3, r1
 800443c:	18db      	adds	r3, r3, r3
 800443e:	653b      	str	r3, [r7, #80]	; 0x50
 8004440:	4613      	mov	r3, r2
 8004442:	eb42 0303 	adc.w	r3, r2, r3
 8004446:	657b      	str	r3, [r7, #84]	; 0x54
 8004448:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800444c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004450:	f7fc fbca 	bl	8000be8 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4b61      	ldr	r3, [pc, #388]	; (80045e0 <UART_SetConfig+0x2d4>)
 800445a:	fba3 2302 	umull	r2, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	011c      	lsls	r4, r3, #4
 8004462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800446c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004470:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	64b9      	str	r1, [r7, #72]	; 0x48
 800447c:	415b      	adcs	r3, r3
 800447e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004480:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004484:	4641      	mov	r1, r8
 8004486:	eb12 0a01 	adds.w	sl, r2, r1
 800448a:	4649      	mov	r1, r9
 800448c:	eb43 0b01 	adc.w	fp, r3, r1
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800449c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044a4:	4692      	mov	sl, r2
 80044a6:	469b      	mov	fp, r3
 80044a8:	4643      	mov	r3, r8
 80044aa:	eb1a 0303 	adds.w	r3, sl, r3
 80044ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044b2:	464b      	mov	r3, r9
 80044b4:	eb4b 0303 	adc.w	r3, fp, r3
 80044b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044d0:	460b      	mov	r3, r1
 80044d2:	18db      	adds	r3, r3, r3
 80044d4:	643b      	str	r3, [r7, #64]	; 0x40
 80044d6:	4613      	mov	r3, r2
 80044d8:	eb42 0303 	adc.w	r3, r2, r3
 80044dc:	647b      	str	r3, [r7, #68]	; 0x44
 80044de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044e6:	f7fc fb7f 	bl	8000be8 <__aeabi_uldivmod>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	4b3b      	ldr	r3, [pc, #236]	; (80045e0 <UART_SetConfig+0x2d4>)
 80044f2:	fba3 2301 	umull	r2, r3, r3, r1
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	2264      	movs	r2, #100	; 0x64
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	1acb      	subs	r3, r1, r3
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004506:	4b36      	ldr	r3, [pc, #216]	; (80045e0 <UART_SetConfig+0x2d4>)
 8004508:	fba3 2302 	umull	r2, r3, r3, r2
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004514:	441c      	add	r4, r3
 8004516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451a:	2200      	movs	r2, #0
 800451c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004520:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004524:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004528:	4642      	mov	r2, r8
 800452a:	464b      	mov	r3, r9
 800452c:	1891      	adds	r1, r2, r2
 800452e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004530:	415b      	adcs	r3, r3
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004538:	4641      	mov	r1, r8
 800453a:	1851      	adds	r1, r2, r1
 800453c:	6339      	str	r1, [r7, #48]	; 0x30
 800453e:	4649      	mov	r1, r9
 8004540:	414b      	adcs	r3, r1
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004550:	4659      	mov	r1, fp
 8004552:	00cb      	lsls	r3, r1, #3
 8004554:	4651      	mov	r1, sl
 8004556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455a:	4651      	mov	r1, sl
 800455c:	00ca      	lsls	r2, r1, #3
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	4603      	mov	r3, r0
 8004564:	4642      	mov	r2, r8
 8004566:	189b      	adds	r3, r3, r2
 8004568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800456c:	464b      	mov	r3, r9
 800456e:	460a      	mov	r2, r1
 8004570:	eb42 0303 	adc.w	r3, r2, r3
 8004574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004584:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800458c:	460b      	mov	r3, r1
 800458e:	18db      	adds	r3, r3, r3
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
 8004592:	4613      	mov	r3, r2
 8004594:	eb42 0303 	adc.w	r3, r2, r3
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800459a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800459e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045a2:	f7fc fb21 	bl	8000be8 <__aeabi_uldivmod>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <UART_SetConfig+0x2d4>)
 80045ac:	fba3 1302 	umull	r1, r3, r3, r2
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	2164      	movs	r1, #100	; 0x64
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	3332      	adds	r3, #50	; 0x32
 80045be:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <UART_SetConfig+0x2d4>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	f003 0207 	and.w	r2, r3, #7
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4422      	add	r2, r4
 80045d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045d4:	e106      	b.n	80047e4 <UART_SetConfig+0x4d8>
 80045d6:	bf00      	nop
 80045d8:	40011000 	.word	0x40011000
 80045dc:	40011400 	.word	0x40011400
 80045e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045f6:	4642      	mov	r2, r8
 80045f8:	464b      	mov	r3, r9
 80045fa:	1891      	adds	r1, r2, r2
 80045fc:	6239      	str	r1, [r7, #32]
 80045fe:	415b      	adcs	r3, r3
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
 8004602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004606:	4641      	mov	r1, r8
 8004608:	1854      	adds	r4, r2, r1
 800460a:	4649      	mov	r1, r9
 800460c:	eb43 0501 	adc.w	r5, r3, r1
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	00eb      	lsls	r3, r5, #3
 800461a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800461e:	00e2      	lsls	r2, r4, #3
 8004620:	4614      	mov	r4, r2
 8004622:	461d      	mov	r5, r3
 8004624:	4643      	mov	r3, r8
 8004626:	18e3      	adds	r3, r4, r3
 8004628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800462c:	464b      	mov	r3, r9
 800462e:	eb45 0303 	adc.w	r3, r5, r3
 8004632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004642:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004652:	4629      	mov	r1, r5
 8004654:	008b      	lsls	r3, r1, #2
 8004656:	4621      	mov	r1, r4
 8004658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800465c:	4621      	mov	r1, r4
 800465e:	008a      	lsls	r2, r1, #2
 8004660:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004664:	f7fc fac0 	bl	8000be8 <__aeabi_uldivmod>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4b60      	ldr	r3, [pc, #384]	; (80047f0 <UART_SetConfig+0x4e4>)
 800466e:	fba3 2302 	umull	r2, r3, r3, r2
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	011c      	lsls	r4, r3, #4
 8004676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004680:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004684:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004688:	4642      	mov	r2, r8
 800468a:	464b      	mov	r3, r9
 800468c:	1891      	adds	r1, r2, r2
 800468e:	61b9      	str	r1, [r7, #24]
 8004690:	415b      	adcs	r3, r3
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004698:	4641      	mov	r1, r8
 800469a:	1851      	adds	r1, r2, r1
 800469c:	6139      	str	r1, [r7, #16]
 800469e:	4649      	mov	r1, r9
 80046a0:	414b      	adcs	r3, r1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046b0:	4659      	mov	r1, fp
 80046b2:	00cb      	lsls	r3, r1, #3
 80046b4:	4651      	mov	r1, sl
 80046b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ba:	4651      	mov	r1, sl
 80046bc:	00ca      	lsls	r2, r1, #3
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	4603      	mov	r3, r0
 80046c4:	4642      	mov	r2, r8
 80046c6:	189b      	adds	r3, r3, r2
 80046c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046cc:	464b      	mov	r3, r9
 80046ce:	460a      	mov	r2, r1
 80046d0:	eb42 0303 	adc.w	r3, r2, r3
 80046d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80046e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046f0:	4649      	mov	r1, r9
 80046f2:	008b      	lsls	r3, r1, #2
 80046f4:	4641      	mov	r1, r8
 80046f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046fa:	4641      	mov	r1, r8
 80046fc:	008a      	lsls	r2, r1, #2
 80046fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004702:	f7fc fa71 	bl	8000be8 <__aeabi_uldivmod>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4611      	mov	r1, r2
 800470c:	4b38      	ldr	r3, [pc, #224]	; (80047f0 <UART_SetConfig+0x4e4>)
 800470e:	fba3 2301 	umull	r2, r3, r3, r1
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	2264      	movs	r2, #100	; 0x64
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	1acb      	subs	r3, r1, r3
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	3332      	adds	r3, #50	; 0x32
 8004720:	4a33      	ldr	r2, [pc, #204]	; (80047f0 <UART_SetConfig+0x4e4>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800472c:	441c      	add	r4, r3
 800472e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004732:	2200      	movs	r2, #0
 8004734:	673b      	str	r3, [r7, #112]	; 0x70
 8004736:	677a      	str	r2, [r7, #116]	; 0x74
 8004738:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800473c:	4642      	mov	r2, r8
 800473e:	464b      	mov	r3, r9
 8004740:	1891      	adds	r1, r2, r2
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	415b      	adcs	r3, r3
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800474c:	4641      	mov	r1, r8
 800474e:	1851      	adds	r1, r2, r1
 8004750:	6039      	str	r1, [r7, #0]
 8004752:	4649      	mov	r1, r9
 8004754:	414b      	adcs	r3, r1
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004764:	4659      	mov	r1, fp
 8004766:	00cb      	lsls	r3, r1, #3
 8004768:	4651      	mov	r1, sl
 800476a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800476e:	4651      	mov	r1, sl
 8004770:	00ca      	lsls	r2, r1, #3
 8004772:	4610      	mov	r0, r2
 8004774:	4619      	mov	r1, r3
 8004776:	4603      	mov	r3, r0
 8004778:	4642      	mov	r2, r8
 800477a:	189b      	adds	r3, r3, r2
 800477c:	66bb      	str	r3, [r7, #104]	; 0x68
 800477e:	464b      	mov	r3, r9
 8004780:	460a      	mov	r2, r1
 8004782:	eb42 0303 	adc.w	r3, r2, r3
 8004786:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	663b      	str	r3, [r7, #96]	; 0x60
 8004792:	667a      	str	r2, [r7, #100]	; 0x64
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047a0:	4649      	mov	r1, r9
 80047a2:	008b      	lsls	r3, r1, #2
 80047a4:	4641      	mov	r1, r8
 80047a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047aa:	4641      	mov	r1, r8
 80047ac:	008a      	lsls	r2, r1, #2
 80047ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047b2:	f7fc fa19 	bl	8000be8 <__aeabi_uldivmod>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <UART_SetConfig+0x4e4>)
 80047bc:	fba3 1302 	umull	r1, r3, r3, r2
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	2164      	movs	r1, #100	; 0x64
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	3332      	adds	r3, #50	; 0x32
 80047ce:	4a08      	ldr	r2, [pc, #32]	; (80047f0 <UART_SetConfig+0x4e4>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	f003 020f 	and.w	r2, r3, #15
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4422      	add	r2, r4
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047ea:	46bd      	mov	sp, r7
 80047ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047f0:	51eb851f 	.word	0x51eb851f

080047f4 <__cvt>:
 80047f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047f8:	ec55 4b10 	vmov	r4, r5, d0
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	460e      	mov	r6, r1
 8004800:	4619      	mov	r1, r3
 8004802:	462b      	mov	r3, r5
 8004804:	bfbb      	ittet	lt
 8004806:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800480a:	461d      	movlt	r5, r3
 800480c:	2300      	movge	r3, #0
 800480e:	232d      	movlt	r3, #45	; 0x2d
 8004810:	700b      	strb	r3, [r1, #0]
 8004812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004814:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004818:	4691      	mov	r9, r2
 800481a:	f023 0820 	bic.w	r8, r3, #32
 800481e:	bfbc      	itt	lt
 8004820:	4622      	movlt	r2, r4
 8004822:	4614      	movlt	r4, r2
 8004824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004828:	d005      	beq.n	8004836 <__cvt+0x42>
 800482a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800482e:	d100      	bne.n	8004832 <__cvt+0x3e>
 8004830:	3601      	adds	r6, #1
 8004832:	2102      	movs	r1, #2
 8004834:	e000      	b.n	8004838 <__cvt+0x44>
 8004836:	2103      	movs	r1, #3
 8004838:	ab03      	add	r3, sp, #12
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	ab02      	add	r3, sp, #8
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	ec45 4b10 	vmov	d0, r4, r5
 8004844:	4653      	mov	r3, sl
 8004846:	4632      	mov	r2, r6
 8004848:	f000 ff4a 	bl	80056e0 <_dtoa_r>
 800484c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004850:	4607      	mov	r7, r0
 8004852:	d102      	bne.n	800485a <__cvt+0x66>
 8004854:	f019 0f01 	tst.w	r9, #1
 8004858:	d022      	beq.n	80048a0 <__cvt+0xac>
 800485a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800485e:	eb07 0906 	add.w	r9, r7, r6
 8004862:	d110      	bne.n	8004886 <__cvt+0x92>
 8004864:	783b      	ldrb	r3, [r7, #0]
 8004866:	2b30      	cmp	r3, #48	; 0x30
 8004868:	d10a      	bne.n	8004880 <__cvt+0x8c>
 800486a:	2200      	movs	r2, #0
 800486c:	2300      	movs	r3, #0
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fc f949 	bl	8000b08 <__aeabi_dcmpeq>
 8004876:	b918      	cbnz	r0, 8004880 <__cvt+0x8c>
 8004878:	f1c6 0601 	rsb	r6, r6, #1
 800487c:	f8ca 6000 	str.w	r6, [sl]
 8004880:	f8da 3000 	ldr.w	r3, [sl]
 8004884:	4499      	add	r9, r3
 8004886:	2200      	movs	r2, #0
 8004888:	2300      	movs	r3, #0
 800488a:	4620      	mov	r0, r4
 800488c:	4629      	mov	r1, r5
 800488e:	f7fc f93b 	bl	8000b08 <__aeabi_dcmpeq>
 8004892:	b108      	cbz	r0, 8004898 <__cvt+0xa4>
 8004894:	f8cd 900c 	str.w	r9, [sp, #12]
 8004898:	2230      	movs	r2, #48	; 0x30
 800489a:	9b03      	ldr	r3, [sp, #12]
 800489c:	454b      	cmp	r3, r9
 800489e:	d307      	bcc.n	80048b0 <__cvt+0xbc>
 80048a0:	9b03      	ldr	r3, [sp, #12]
 80048a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048a4:	1bdb      	subs	r3, r3, r7
 80048a6:	4638      	mov	r0, r7
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	b004      	add	sp, #16
 80048ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b0:	1c59      	adds	r1, r3, #1
 80048b2:	9103      	str	r1, [sp, #12]
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e7f0      	b.n	800489a <__cvt+0xa6>

080048b8 <__exponent>:
 80048b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ba:	4603      	mov	r3, r0
 80048bc:	2900      	cmp	r1, #0
 80048be:	bfb8      	it	lt
 80048c0:	4249      	neglt	r1, r1
 80048c2:	f803 2b02 	strb.w	r2, [r3], #2
 80048c6:	bfb4      	ite	lt
 80048c8:	222d      	movlt	r2, #45	; 0x2d
 80048ca:	222b      	movge	r2, #43	; 0x2b
 80048cc:	2909      	cmp	r1, #9
 80048ce:	7042      	strb	r2, [r0, #1]
 80048d0:	dd2a      	ble.n	8004928 <__exponent+0x70>
 80048d2:	f10d 0207 	add.w	r2, sp, #7
 80048d6:	4617      	mov	r7, r2
 80048d8:	260a      	movs	r6, #10
 80048da:	4694      	mov	ip, r2
 80048dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80048e0:	fb06 1415 	mls	r4, r6, r5, r1
 80048e4:	3430      	adds	r4, #48	; 0x30
 80048e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80048ea:	460c      	mov	r4, r1
 80048ec:	2c63      	cmp	r4, #99	; 0x63
 80048ee:	f102 32ff 	add.w	r2, r2, #4294967295
 80048f2:	4629      	mov	r1, r5
 80048f4:	dcf1      	bgt.n	80048da <__exponent+0x22>
 80048f6:	3130      	adds	r1, #48	; 0x30
 80048f8:	f1ac 0402 	sub.w	r4, ip, #2
 80048fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004900:	1c41      	adds	r1, r0, #1
 8004902:	4622      	mov	r2, r4
 8004904:	42ba      	cmp	r2, r7
 8004906:	d30a      	bcc.n	800491e <__exponent+0x66>
 8004908:	f10d 0209 	add.w	r2, sp, #9
 800490c:	eba2 020c 	sub.w	r2, r2, ip
 8004910:	42bc      	cmp	r4, r7
 8004912:	bf88      	it	hi
 8004914:	2200      	movhi	r2, #0
 8004916:	4413      	add	r3, r2
 8004918:	1a18      	subs	r0, r3, r0
 800491a:	b003      	add	sp, #12
 800491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800491e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004922:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004926:	e7ed      	b.n	8004904 <__exponent+0x4c>
 8004928:	2330      	movs	r3, #48	; 0x30
 800492a:	3130      	adds	r1, #48	; 0x30
 800492c:	7083      	strb	r3, [r0, #2]
 800492e:	70c1      	strb	r1, [r0, #3]
 8004930:	1d03      	adds	r3, r0, #4
 8004932:	e7f1      	b.n	8004918 <__exponent+0x60>

08004934 <_printf_float>:
 8004934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004938:	ed2d 8b02 	vpush	{d8}
 800493c:	b08d      	sub	sp, #52	; 0x34
 800493e:	460c      	mov	r4, r1
 8004940:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004944:	4616      	mov	r6, r2
 8004946:	461f      	mov	r7, r3
 8004948:	4605      	mov	r5, r0
 800494a:	f000 fdc9 	bl	80054e0 <_localeconv_r>
 800494e:	f8d0 a000 	ldr.w	sl, [r0]
 8004952:	4650      	mov	r0, sl
 8004954:	f7fb fcac 	bl	80002b0 <strlen>
 8004958:	2300      	movs	r3, #0
 800495a:	930a      	str	r3, [sp, #40]	; 0x28
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	9305      	str	r3, [sp, #20]
 8004960:	f8d8 3000 	ldr.w	r3, [r8]
 8004964:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004968:	3307      	adds	r3, #7
 800496a:	f023 0307 	bic.w	r3, r3, #7
 800496e:	f103 0208 	add.w	r2, r3, #8
 8004972:	f8c8 2000 	str.w	r2, [r8]
 8004976:	e9d3 8900 	ldrd	r8, r9, [r3]
 800497a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800497e:	9307      	str	r3, [sp, #28]
 8004980:	f8cd 8018 	str.w	r8, [sp, #24]
 8004984:	ee08 0a10 	vmov	s16, r0
 8004988:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800498c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004990:	4b9e      	ldr	r3, [pc, #632]	; (8004c0c <_printf_float+0x2d8>)
 8004992:	f04f 32ff 	mov.w	r2, #4294967295
 8004996:	f7fc f8e9 	bl	8000b6c <__aeabi_dcmpun>
 800499a:	bb88      	cbnz	r0, 8004a00 <_printf_float+0xcc>
 800499c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049a0:	4b9a      	ldr	r3, [pc, #616]	; (8004c0c <_printf_float+0x2d8>)
 80049a2:	f04f 32ff 	mov.w	r2, #4294967295
 80049a6:	f7fc f8c3 	bl	8000b30 <__aeabi_dcmple>
 80049aa:	bb48      	cbnz	r0, 8004a00 <_printf_float+0xcc>
 80049ac:	2200      	movs	r2, #0
 80049ae:	2300      	movs	r3, #0
 80049b0:	4640      	mov	r0, r8
 80049b2:	4649      	mov	r1, r9
 80049b4:	f7fc f8b2 	bl	8000b1c <__aeabi_dcmplt>
 80049b8:	b110      	cbz	r0, 80049c0 <_printf_float+0x8c>
 80049ba:	232d      	movs	r3, #45	; 0x2d
 80049bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c0:	4a93      	ldr	r2, [pc, #588]	; (8004c10 <_printf_float+0x2dc>)
 80049c2:	4b94      	ldr	r3, [pc, #592]	; (8004c14 <_printf_float+0x2e0>)
 80049c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80049c8:	bf94      	ite	ls
 80049ca:	4690      	movls	r8, r2
 80049cc:	4698      	movhi	r8, r3
 80049ce:	2303      	movs	r3, #3
 80049d0:	6123      	str	r3, [r4, #16]
 80049d2:	9b05      	ldr	r3, [sp, #20]
 80049d4:	f023 0304 	bic.w	r3, r3, #4
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	f04f 0900 	mov.w	r9, #0
 80049de:	9700      	str	r7, [sp, #0]
 80049e0:	4633      	mov	r3, r6
 80049e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80049e4:	4621      	mov	r1, r4
 80049e6:	4628      	mov	r0, r5
 80049e8:	f000 f9da 	bl	8004da0 <_printf_common>
 80049ec:	3001      	adds	r0, #1
 80049ee:	f040 8090 	bne.w	8004b12 <_printf_float+0x1de>
 80049f2:	f04f 30ff 	mov.w	r0, #4294967295
 80049f6:	b00d      	add	sp, #52	; 0x34
 80049f8:	ecbd 8b02 	vpop	{d8}
 80049fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a00:	4642      	mov	r2, r8
 8004a02:	464b      	mov	r3, r9
 8004a04:	4640      	mov	r0, r8
 8004a06:	4649      	mov	r1, r9
 8004a08:	f7fc f8b0 	bl	8000b6c <__aeabi_dcmpun>
 8004a0c:	b140      	cbz	r0, 8004a20 <_printf_float+0xec>
 8004a0e:	464b      	mov	r3, r9
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bfbc      	itt	lt
 8004a14:	232d      	movlt	r3, #45	; 0x2d
 8004a16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a1a:	4a7f      	ldr	r2, [pc, #508]	; (8004c18 <_printf_float+0x2e4>)
 8004a1c:	4b7f      	ldr	r3, [pc, #508]	; (8004c1c <_printf_float+0x2e8>)
 8004a1e:	e7d1      	b.n	80049c4 <_printf_float+0x90>
 8004a20:	6863      	ldr	r3, [r4, #4]
 8004a22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a26:	9206      	str	r2, [sp, #24]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	d13f      	bne.n	8004aac <_printf_float+0x178>
 8004a2c:	2306      	movs	r3, #6
 8004a2e:	6063      	str	r3, [r4, #4]
 8004a30:	9b05      	ldr	r3, [sp, #20]
 8004a32:	6861      	ldr	r1, [r4, #4]
 8004a34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9303      	str	r3, [sp, #12]
 8004a3c:	ab0a      	add	r3, sp, #40	; 0x28
 8004a3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a42:	ab09      	add	r3, sp, #36	; 0x24
 8004a44:	ec49 8b10 	vmov	d0, r8, r9
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6022      	str	r2, [r4, #0]
 8004a4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a50:	4628      	mov	r0, r5
 8004a52:	f7ff fecf 	bl	80047f4 <__cvt>
 8004a56:	9b06      	ldr	r3, [sp, #24]
 8004a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a5a:	2b47      	cmp	r3, #71	; 0x47
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	d108      	bne.n	8004a72 <_printf_float+0x13e>
 8004a60:	1cc8      	adds	r0, r1, #3
 8004a62:	db02      	blt.n	8004a6a <_printf_float+0x136>
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	4299      	cmp	r1, r3
 8004a68:	dd41      	ble.n	8004aee <_printf_float+0x1ba>
 8004a6a:	f1ab 0302 	sub.w	r3, fp, #2
 8004a6e:	fa5f fb83 	uxtb.w	fp, r3
 8004a72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a76:	d820      	bhi.n	8004aba <_printf_float+0x186>
 8004a78:	3901      	subs	r1, #1
 8004a7a:	465a      	mov	r2, fp
 8004a7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a80:	9109      	str	r1, [sp, #36]	; 0x24
 8004a82:	f7ff ff19 	bl	80048b8 <__exponent>
 8004a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a88:	1813      	adds	r3, r2, r0
 8004a8a:	2a01      	cmp	r2, #1
 8004a8c:	4681      	mov	r9, r0
 8004a8e:	6123      	str	r3, [r4, #16]
 8004a90:	dc02      	bgt.n	8004a98 <_printf_float+0x164>
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	07d2      	lsls	r2, r2, #31
 8004a96:	d501      	bpl.n	8004a9c <_printf_float+0x168>
 8004a98:	3301      	adds	r3, #1
 8004a9a:	6123      	str	r3, [r4, #16]
 8004a9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d09c      	beq.n	80049de <_printf_float+0xaa>
 8004aa4:	232d      	movs	r3, #45	; 0x2d
 8004aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aaa:	e798      	b.n	80049de <_printf_float+0xaa>
 8004aac:	9a06      	ldr	r2, [sp, #24]
 8004aae:	2a47      	cmp	r2, #71	; 0x47
 8004ab0:	d1be      	bne.n	8004a30 <_printf_float+0xfc>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1bc      	bne.n	8004a30 <_printf_float+0xfc>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e7b9      	b.n	8004a2e <_printf_float+0xfa>
 8004aba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004abe:	d118      	bne.n	8004af2 <_printf_float+0x1be>
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	6863      	ldr	r3, [r4, #4]
 8004ac4:	dd0b      	ble.n	8004ade <_printf_float+0x1aa>
 8004ac6:	6121      	str	r1, [r4, #16]
 8004ac8:	b913      	cbnz	r3, 8004ad0 <_printf_float+0x19c>
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	07d0      	lsls	r0, r2, #31
 8004ace:	d502      	bpl.n	8004ad6 <_printf_float+0x1a2>
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	440b      	add	r3, r1
 8004ad4:	6123      	str	r3, [r4, #16]
 8004ad6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ad8:	f04f 0900 	mov.w	r9, #0
 8004adc:	e7de      	b.n	8004a9c <_printf_float+0x168>
 8004ade:	b913      	cbnz	r3, 8004ae6 <_printf_float+0x1b2>
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	07d2      	lsls	r2, r2, #31
 8004ae4:	d501      	bpl.n	8004aea <_printf_float+0x1b6>
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	e7f4      	b.n	8004ad4 <_printf_float+0x1a0>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e7f2      	b.n	8004ad4 <_printf_float+0x1a0>
 8004aee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004af4:	4299      	cmp	r1, r3
 8004af6:	db05      	blt.n	8004b04 <_printf_float+0x1d0>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	6121      	str	r1, [r4, #16]
 8004afc:	07d8      	lsls	r0, r3, #31
 8004afe:	d5ea      	bpl.n	8004ad6 <_printf_float+0x1a2>
 8004b00:	1c4b      	adds	r3, r1, #1
 8004b02:	e7e7      	b.n	8004ad4 <_printf_float+0x1a0>
 8004b04:	2900      	cmp	r1, #0
 8004b06:	bfd4      	ite	le
 8004b08:	f1c1 0202 	rsble	r2, r1, #2
 8004b0c:	2201      	movgt	r2, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	e7e0      	b.n	8004ad4 <_printf_float+0x1a0>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	055a      	lsls	r2, r3, #21
 8004b16:	d407      	bmi.n	8004b28 <_printf_float+0x1f4>
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	4642      	mov	r2, r8
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b8      	blx	r7
 8004b22:	3001      	adds	r0, #1
 8004b24:	d12c      	bne.n	8004b80 <_printf_float+0x24c>
 8004b26:	e764      	b.n	80049f2 <_printf_float+0xbe>
 8004b28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b2c:	f240 80e0 	bls.w	8004cf0 <_printf_float+0x3bc>
 8004b30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b34:	2200      	movs	r2, #0
 8004b36:	2300      	movs	r3, #0
 8004b38:	f7fb ffe6 	bl	8000b08 <__aeabi_dcmpeq>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d034      	beq.n	8004baa <_printf_float+0x276>
 8004b40:	4a37      	ldr	r2, [pc, #220]	; (8004c20 <_printf_float+0x2ec>)
 8004b42:	2301      	movs	r3, #1
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	f43f af51 	beq.w	80049f2 <_printf_float+0xbe>
 8004b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b54:	429a      	cmp	r2, r3
 8004b56:	db02      	blt.n	8004b5e <_printf_float+0x22a>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	07d8      	lsls	r0, r3, #31
 8004b5c:	d510      	bpl.n	8004b80 <_printf_float+0x24c>
 8004b5e:	ee18 3a10 	vmov	r3, s16
 8004b62:	4652      	mov	r2, sl
 8004b64:	4631      	mov	r1, r6
 8004b66:	4628      	mov	r0, r5
 8004b68:	47b8      	blx	r7
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	f43f af41 	beq.w	80049f2 <_printf_float+0xbe>
 8004b70:	f04f 0800 	mov.w	r8, #0
 8004b74:	f104 091a 	add.w	r9, r4, #26
 8004b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	4543      	cmp	r3, r8
 8004b7e:	dc09      	bgt.n	8004b94 <_printf_float+0x260>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	079b      	lsls	r3, r3, #30
 8004b84:	f100 8107 	bmi.w	8004d96 <_printf_float+0x462>
 8004b88:	68e0      	ldr	r0, [r4, #12]
 8004b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b8c:	4298      	cmp	r0, r3
 8004b8e:	bfb8      	it	lt
 8004b90:	4618      	movlt	r0, r3
 8004b92:	e730      	b.n	80049f6 <_printf_float+0xc2>
 8004b94:	2301      	movs	r3, #1
 8004b96:	464a      	mov	r2, r9
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	f43f af27 	beq.w	80049f2 <_printf_float+0xbe>
 8004ba4:	f108 0801 	add.w	r8, r8, #1
 8004ba8:	e7e6      	b.n	8004b78 <_printf_float+0x244>
 8004baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	dc39      	bgt.n	8004c24 <_printf_float+0x2f0>
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <_printf_float+0x2ec>)
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4631      	mov	r1, r6
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	47b8      	blx	r7
 8004bba:	3001      	adds	r0, #1
 8004bbc:	f43f af19 	beq.w	80049f2 <_printf_float+0xbe>
 8004bc0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	d102      	bne.n	8004bce <_printf_float+0x29a>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	07d9      	lsls	r1, r3, #31
 8004bcc:	d5d8      	bpl.n	8004b80 <_printf_float+0x24c>
 8004bce:	ee18 3a10 	vmov	r3, s16
 8004bd2:	4652      	mov	r2, sl
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f af09 	beq.w	80049f2 <_printf_float+0xbe>
 8004be0:	f04f 0900 	mov.w	r9, #0
 8004be4:	f104 0a1a 	add.w	sl, r4, #26
 8004be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bea:	425b      	negs	r3, r3
 8004bec:	454b      	cmp	r3, r9
 8004bee:	dc01      	bgt.n	8004bf4 <_printf_float+0x2c0>
 8004bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf2:	e792      	b.n	8004b1a <_printf_float+0x1e6>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4652      	mov	r2, sl
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	47b8      	blx	r7
 8004bfe:	3001      	adds	r0, #1
 8004c00:	f43f aef7 	beq.w	80049f2 <_printf_float+0xbe>
 8004c04:	f109 0901 	add.w	r9, r9, #1
 8004c08:	e7ee      	b.n	8004be8 <_printf_float+0x2b4>
 8004c0a:	bf00      	nop
 8004c0c:	7fefffff 	.word	0x7fefffff
 8004c10:	08007554 	.word	0x08007554
 8004c14:	08007558 	.word	0x08007558
 8004c18:	0800755c 	.word	0x0800755c
 8004c1c:	08007560 	.word	0x08007560
 8004c20:	08007564 	.word	0x08007564
 8004c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	bfa8      	it	ge
 8004c2c:	461a      	movge	r2, r3
 8004c2e:	2a00      	cmp	r2, #0
 8004c30:	4691      	mov	r9, r2
 8004c32:	dc37      	bgt.n	8004ca4 <_printf_float+0x370>
 8004c34:	f04f 0b00 	mov.w	fp, #0
 8004c38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c3c:	f104 021a 	add.w	r2, r4, #26
 8004c40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c42:	9305      	str	r3, [sp, #20]
 8004c44:	eba3 0309 	sub.w	r3, r3, r9
 8004c48:	455b      	cmp	r3, fp
 8004c4a:	dc33      	bgt.n	8004cb4 <_printf_float+0x380>
 8004c4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c50:	429a      	cmp	r2, r3
 8004c52:	db3b      	blt.n	8004ccc <_printf_float+0x398>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	07da      	lsls	r2, r3, #31
 8004c58:	d438      	bmi.n	8004ccc <_printf_float+0x398>
 8004c5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c5e:	eba2 0903 	sub.w	r9, r2, r3
 8004c62:	9b05      	ldr	r3, [sp, #20]
 8004c64:	1ad2      	subs	r2, r2, r3
 8004c66:	4591      	cmp	r9, r2
 8004c68:	bfa8      	it	ge
 8004c6a:	4691      	movge	r9, r2
 8004c6c:	f1b9 0f00 	cmp.w	r9, #0
 8004c70:	dc35      	bgt.n	8004cde <_printf_float+0x3aa>
 8004c72:	f04f 0800 	mov.w	r8, #0
 8004c76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c7a:	f104 0a1a 	add.w	sl, r4, #26
 8004c7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	eba3 0309 	sub.w	r3, r3, r9
 8004c88:	4543      	cmp	r3, r8
 8004c8a:	f77f af79 	ble.w	8004b80 <_printf_float+0x24c>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4652      	mov	r2, sl
 8004c92:	4631      	mov	r1, r6
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b8      	blx	r7
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f43f aeaa 	beq.w	80049f2 <_printf_float+0xbe>
 8004c9e:	f108 0801 	add.w	r8, r8, #1
 8004ca2:	e7ec      	b.n	8004c7e <_printf_float+0x34a>
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	4642      	mov	r2, r8
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d1c0      	bne.n	8004c34 <_printf_float+0x300>
 8004cb2:	e69e      	b.n	80049f2 <_printf_float+0xbe>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	9205      	str	r2, [sp, #20]
 8004cbc:	47b8      	blx	r7
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	f43f ae97 	beq.w	80049f2 <_printf_float+0xbe>
 8004cc4:	9a05      	ldr	r2, [sp, #20]
 8004cc6:	f10b 0b01 	add.w	fp, fp, #1
 8004cca:	e7b9      	b.n	8004c40 <_printf_float+0x30c>
 8004ccc:	ee18 3a10 	vmov	r3, s16
 8004cd0:	4652      	mov	r2, sl
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d1be      	bne.n	8004c5a <_printf_float+0x326>
 8004cdc:	e689      	b.n	80049f2 <_printf_float+0xbe>
 8004cde:	9a05      	ldr	r2, [sp, #20]
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	4442      	add	r2, r8
 8004ce4:	4631      	mov	r1, r6
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	47b8      	blx	r7
 8004cea:	3001      	adds	r0, #1
 8004cec:	d1c1      	bne.n	8004c72 <_printf_float+0x33e>
 8004cee:	e680      	b.n	80049f2 <_printf_float+0xbe>
 8004cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cf2:	2a01      	cmp	r2, #1
 8004cf4:	dc01      	bgt.n	8004cfa <_printf_float+0x3c6>
 8004cf6:	07db      	lsls	r3, r3, #31
 8004cf8:	d53a      	bpl.n	8004d70 <_printf_float+0x43c>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	f43f ae74 	beq.w	80049f2 <_printf_float+0xbe>
 8004d0a:	ee18 3a10 	vmov	r3, s16
 8004d0e:	4652      	mov	r2, sl
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f ae6b 	beq.w	80049f2 <_printf_float+0xbe>
 8004d1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d20:	2200      	movs	r2, #0
 8004d22:	2300      	movs	r3, #0
 8004d24:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004d28:	f7fb feee 	bl	8000b08 <__aeabi_dcmpeq>
 8004d2c:	b9d8      	cbnz	r0, 8004d66 <_printf_float+0x432>
 8004d2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004d32:	f108 0201 	add.w	r2, r8, #1
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d10e      	bne.n	8004d5e <_printf_float+0x42a>
 8004d40:	e657      	b.n	80049f2 <_printf_float+0xbe>
 8004d42:	2301      	movs	r3, #1
 8004d44:	4652      	mov	r2, sl
 8004d46:	4631      	mov	r1, r6
 8004d48:	4628      	mov	r0, r5
 8004d4a:	47b8      	blx	r7
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	f43f ae50 	beq.w	80049f2 <_printf_float+0xbe>
 8004d52:	f108 0801 	add.w	r8, r8, #1
 8004d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	4543      	cmp	r3, r8
 8004d5c:	dcf1      	bgt.n	8004d42 <_printf_float+0x40e>
 8004d5e:	464b      	mov	r3, r9
 8004d60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d64:	e6da      	b.n	8004b1c <_printf_float+0x1e8>
 8004d66:	f04f 0800 	mov.w	r8, #0
 8004d6a:	f104 0a1a 	add.w	sl, r4, #26
 8004d6e:	e7f2      	b.n	8004d56 <_printf_float+0x422>
 8004d70:	2301      	movs	r3, #1
 8004d72:	4642      	mov	r2, r8
 8004d74:	e7df      	b.n	8004d36 <_printf_float+0x402>
 8004d76:	2301      	movs	r3, #1
 8004d78:	464a      	mov	r2, r9
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f ae36 	beq.w	80049f2 <_printf_float+0xbe>
 8004d86:	f108 0801 	add.w	r8, r8, #1
 8004d8a:	68e3      	ldr	r3, [r4, #12]
 8004d8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d8e:	1a5b      	subs	r3, r3, r1
 8004d90:	4543      	cmp	r3, r8
 8004d92:	dcf0      	bgt.n	8004d76 <_printf_float+0x442>
 8004d94:	e6f8      	b.n	8004b88 <_printf_float+0x254>
 8004d96:	f04f 0800 	mov.w	r8, #0
 8004d9a:	f104 0919 	add.w	r9, r4, #25
 8004d9e:	e7f4      	b.n	8004d8a <_printf_float+0x456>

08004da0 <_printf_common>:
 8004da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da4:	4616      	mov	r6, r2
 8004da6:	4699      	mov	r9, r3
 8004da8:	688a      	ldr	r2, [r1, #8]
 8004daa:	690b      	ldr	r3, [r1, #16]
 8004dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004db0:	4293      	cmp	r3, r2
 8004db2:	bfb8      	it	lt
 8004db4:	4613      	movlt	r3, r2
 8004db6:	6033      	str	r3, [r6, #0]
 8004db8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dbc:	4607      	mov	r7, r0
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	b10a      	cbz	r2, 8004dc6 <_printf_common+0x26>
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	6033      	str	r3, [r6, #0]
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	0699      	lsls	r1, r3, #26
 8004dca:	bf42      	ittt	mi
 8004dcc:	6833      	ldrmi	r3, [r6, #0]
 8004dce:	3302      	addmi	r3, #2
 8004dd0:	6033      	strmi	r3, [r6, #0]
 8004dd2:	6825      	ldr	r5, [r4, #0]
 8004dd4:	f015 0506 	ands.w	r5, r5, #6
 8004dd8:	d106      	bne.n	8004de8 <_printf_common+0x48>
 8004dda:	f104 0a19 	add.w	sl, r4, #25
 8004dde:	68e3      	ldr	r3, [r4, #12]
 8004de0:	6832      	ldr	r2, [r6, #0]
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	dc26      	bgt.n	8004e36 <_printf_common+0x96>
 8004de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dec:	1e13      	subs	r3, r2, #0
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	bf18      	it	ne
 8004df2:	2301      	movne	r3, #1
 8004df4:	0692      	lsls	r2, r2, #26
 8004df6:	d42b      	bmi.n	8004e50 <_printf_common+0xb0>
 8004df8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	4638      	mov	r0, r7
 8004e00:	47c0      	blx	r8
 8004e02:	3001      	adds	r0, #1
 8004e04:	d01e      	beq.n	8004e44 <_printf_common+0xa4>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	6922      	ldr	r2, [r4, #16]
 8004e0a:	f003 0306 	and.w	r3, r3, #6
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	bf02      	ittt	eq
 8004e12:	68e5      	ldreq	r5, [r4, #12]
 8004e14:	6833      	ldreq	r3, [r6, #0]
 8004e16:	1aed      	subeq	r5, r5, r3
 8004e18:	68a3      	ldr	r3, [r4, #8]
 8004e1a:	bf0c      	ite	eq
 8004e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e20:	2500      	movne	r5, #0
 8004e22:	4293      	cmp	r3, r2
 8004e24:	bfc4      	itt	gt
 8004e26:	1a9b      	subgt	r3, r3, r2
 8004e28:	18ed      	addgt	r5, r5, r3
 8004e2a:	2600      	movs	r6, #0
 8004e2c:	341a      	adds	r4, #26
 8004e2e:	42b5      	cmp	r5, r6
 8004e30:	d11a      	bne.n	8004e68 <_printf_common+0xc8>
 8004e32:	2000      	movs	r0, #0
 8004e34:	e008      	b.n	8004e48 <_printf_common+0xa8>
 8004e36:	2301      	movs	r3, #1
 8004e38:	4652      	mov	r2, sl
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	4638      	mov	r0, r7
 8004e3e:	47c0      	blx	r8
 8004e40:	3001      	adds	r0, #1
 8004e42:	d103      	bne.n	8004e4c <_printf_common+0xac>
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4c:	3501      	adds	r5, #1
 8004e4e:	e7c6      	b.n	8004dde <_printf_common+0x3e>
 8004e50:	18e1      	adds	r1, r4, r3
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	2030      	movs	r0, #48	; 0x30
 8004e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e5a:	4422      	add	r2, r4
 8004e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e64:	3302      	adds	r3, #2
 8004e66:	e7c7      	b.n	8004df8 <_printf_common+0x58>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	4638      	mov	r0, r7
 8004e70:	47c0      	blx	r8
 8004e72:	3001      	adds	r0, #1
 8004e74:	d0e6      	beq.n	8004e44 <_printf_common+0xa4>
 8004e76:	3601      	adds	r6, #1
 8004e78:	e7d9      	b.n	8004e2e <_printf_common+0x8e>
	...

08004e7c <_printf_i>:
 8004e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e80:	7e0f      	ldrb	r7, [r1, #24]
 8004e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e84:	2f78      	cmp	r7, #120	; 0x78
 8004e86:	4691      	mov	r9, r2
 8004e88:	4680      	mov	r8, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	469a      	mov	sl, r3
 8004e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e92:	d807      	bhi.n	8004ea4 <_printf_i+0x28>
 8004e94:	2f62      	cmp	r7, #98	; 0x62
 8004e96:	d80a      	bhi.n	8004eae <_printf_i+0x32>
 8004e98:	2f00      	cmp	r7, #0
 8004e9a:	f000 80d4 	beq.w	8005046 <_printf_i+0x1ca>
 8004e9e:	2f58      	cmp	r7, #88	; 0x58
 8004ea0:	f000 80c0 	beq.w	8005024 <_printf_i+0x1a8>
 8004ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004eac:	e03a      	b.n	8004f24 <_printf_i+0xa8>
 8004eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004eb2:	2b15      	cmp	r3, #21
 8004eb4:	d8f6      	bhi.n	8004ea4 <_printf_i+0x28>
 8004eb6:	a101      	add	r1, pc, #4	; (adr r1, 8004ebc <_printf_i+0x40>)
 8004eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ebc:	08004f15 	.word	0x08004f15
 8004ec0:	08004f29 	.word	0x08004f29
 8004ec4:	08004ea5 	.word	0x08004ea5
 8004ec8:	08004ea5 	.word	0x08004ea5
 8004ecc:	08004ea5 	.word	0x08004ea5
 8004ed0:	08004ea5 	.word	0x08004ea5
 8004ed4:	08004f29 	.word	0x08004f29
 8004ed8:	08004ea5 	.word	0x08004ea5
 8004edc:	08004ea5 	.word	0x08004ea5
 8004ee0:	08004ea5 	.word	0x08004ea5
 8004ee4:	08004ea5 	.word	0x08004ea5
 8004ee8:	0800502d 	.word	0x0800502d
 8004eec:	08004f55 	.word	0x08004f55
 8004ef0:	08004fe7 	.word	0x08004fe7
 8004ef4:	08004ea5 	.word	0x08004ea5
 8004ef8:	08004ea5 	.word	0x08004ea5
 8004efc:	0800504f 	.word	0x0800504f
 8004f00:	08004ea5 	.word	0x08004ea5
 8004f04:	08004f55 	.word	0x08004f55
 8004f08:	08004ea5 	.word	0x08004ea5
 8004f0c:	08004ea5 	.word	0x08004ea5
 8004f10:	08004fef 	.word	0x08004fef
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	1d1a      	adds	r2, r3, #4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	602a      	str	r2, [r5, #0]
 8004f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f24:	2301      	movs	r3, #1
 8004f26:	e09f      	b.n	8005068 <_printf_i+0x1ec>
 8004f28:	6820      	ldr	r0, [r4, #0]
 8004f2a:	682b      	ldr	r3, [r5, #0]
 8004f2c:	0607      	lsls	r7, r0, #24
 8004f2e:	f103 0104 	add.w	r1, r3, #4
 8004f32:	6029      	str	r1, [r5, #0]
 8004f34:	d501      	bpl.n	8004f3a <_printf_i+0xbe>
 8004f36:	681e      	ldr	r6, [r3, #0]
 8004f38:	e003      	b.n	8004f42 <_printf_i+0xc6>
 8004f3a:	0646      	lsls	r6, r0, #25
 8004f3c:	d5fb      	bpl.n	8004f36 <_printf_i+0xba>
 8004f3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	da03      	bge.n	8004f4e <_printf_i+0xd2>
 8004f46:	232d      	movs	r3, #45	; 0x2d
 8004f48:	4276      	negs	r6, r6
 8004f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f4e:	485a      	ldr	r0, [pc, #360]	; (80050b8 <_printf_i+0x23c>)
 8004f50:	230a      	movs	r3, #10
 8004f52:	e012      	b.n	8004f7a <_printf_i+0xfe>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	6820      	ldr	r0, [r4, #0]
 8004f58:	1d19      	adds	r1, r3, #4
 8004f5a:	6029      	str	r1, [r5, #0]
 8004f5c:	0605      	lsls	r5, r0, #24
 8004f5e:	d501      	bpl.n	8004f64 <_printf_i+0xe8>
 8004f60:	681e      	ldr	r6, [r3, #0]
 8004f62:	e002      	b.n	8004f6a <_printf_i+0xee>
 8004f64:	0641      	lsls	r1, r0, #25
 8004f66:	d5fb      	bpl.n	8004f60 <_printf_i+0xe4>
 8004f68:	881e      	ldrh	r6, [r3, #0]
 8004f6a:	4853      	ldr	r0, [pc, #332]	; (80050b8 <_printf_i+0x23c>)
 8004f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8004f6e:	bf0c      	ite	eq
 8004f70:	2308      	moveq	r3, #8
 8004f72:	230a      	movne	r3, #10
 8004f74:	2100      	movs	r1, #0
 8004f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f7a:	6865      	ldr	r5, [r4, #4]
 8004f7c:	60a5      	str	r5, [r4, #8]
 8004f7e:	2d00      	cmp	r5, #0
 8004f80:	bfa2      	ittt	ge
 8004f82:	6821      	ldrge	r1, [r4, #0]
 8004f84:	f021 0104 	bicge.w	r1, r1, #4
 8004f88:	6021      	strge	r1, [r4, #0]
 8004f8a:	b90e      	cbnz	r6, 8004f90 <_printf_i+0x114>
 8004f8c:	2d00      	cmp	r5, #0
 8004f8e:	d04b      	beq.n	8005028 <_printf_i+0x1ac>
 8004f90:	4615      	mov	r5, r2
 8004f92:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f96:	fb03 6711 	mls	r7, r3, r1, r6
 8004f9a:	5dc7      	ldrb	r7, [r0, r7]
 8004f9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fa0:	4637      	mov	r7, r6
 8004fa2:	42bb      	cmp	r3, r7
 8004fa4:	460e      	mov	r6, r1
 8004fa6:	d9f4      	bls.n	8004f92 <_printf_i+0x116>
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d10b      	bne.n	8004fc4 <_printf_i+0x148>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	07de      	lsls	r6, r3, #31
 8004fb0:	d508      	bpl.n	8004fc4 <_printf_i+0x148>
 8004fb2:	6923      	ldr	r3, [r4, #16]
 8004fb4:	6861      	ldr	r1, [r4, #4]
 8004fb6:	4299      	cmp	r1, r3
 8004fb8:	bfde      	ittt	le
 8004fba:	2330      	movle	r3, #48	; 0x30
 8004fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fc4:	1b52      	subs	r2, r2, r5
 8004fc6:	6122      	str	r2, [r4, #16]
 8004fc8:	f8cd a000 	str.w	sl, [sp]
 8004fcc:	464b      	mov	r3, r9
 8004fce:	aa03      	add	r2, sp, #12
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f7ff fee4 	bl	8004da0 <_printf_common>
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d14a      	bne.n	8005072 <_printf_i+0x1f6>
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe0:	b004      	add	sp, #16
 8004fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	f043 0320 	orr.w	r3, r3, #32
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	4833      	ldr	r0, [pc, #204]	; (80050bc <_printf_i+0x240>)
 8004ff0:	2778      	movs	r7, #120	; 0x78
 8004ff2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	6829      	ldr	r1, [r5, #0]
 8004ffa:	061f      	lsls	r7, r3, #24
 8004ffc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005000:	d402      	bmi.n	8005008 <_printf_i+0x18c>
 8005002:	065f      	lsls	r7, r3, #25
 8005004:	bf48      	it	mi
 8005006:	b2b6      	uxthmi	r6, r6
 8005008:	07df      	lsls	r7, r3, #31
 800500a:	bf48      	it	mi
 800500c:	f043 0320 	orrmi.w	r3, r3, #32
 8005010:	6029      	str	r1, [r5, #0]
 8005012:	bf48      	it	mi
 8005014:	6023      	strmi	r3, [r4, #0]
 8005016:	b91e      	cbnz	r6, 8005020 <_printf_i+0x1a4>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	f023 0320 	bic.w	r3, r3, #32
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	2310      	movs	r3, #16
 8005022:	e7a7      	b.n	8004f74 <_printf_i+0xf8>
 8005024:	4824      	ldr	r0, [pc, #144]	; (80050b8 <_printf_i+0x23c>)
 8005026:	e7e4      	b.n	8004ff2 <_printf_i+0x176>
 8005028:	4615      	mov	r5, r2
 800502a:	e7bd      	b.n	8004fa8 <_printf_i+0x12c>
 800502c:	682b      	ldr	r3, [r5, #0]
 800502e:	6826      	ldr	r6, [r4, #0]
 8005030:	6961      	ldr	r1, [r4, #20]
 8005032:	1d18      	adds	r0, r3, #4
 8005034:	6028      	str	r0, [r5, #0]
 8005036:	0635      	lsls	r5, r6, #24
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	d501      	bpl.n	8005040 <_printf_i+0x1c4>
 800503c:	6019      	str	r1, [r3, #0]
 800503e:	e002      	b.n	8005046 <_printf_i+0x1ca>
 8005040:	0670      	lsls	r0, r6, #25
 8005042:	d5fb      	bpl.n	800503c <_printf_i+0x1c0>
 8005044:	8019      	strh	r1, [r3, #0]
 8005046:	2300      	movs	r3, #0
 8005048:	6123      	str	r3, [r4, #16]
 800504a:	4615      	mov	r5, r2
 800504c:	e7bc      	b.n	8004fc8 <_printf_i+0x14c>
 800504e:	682b      	ldr	r3, [r5, #0]
 8005050:	1d1a      	adds	r2, r3, #4
 8005052:	602a      	str	r2, [r5, #0]
 8005054:	681d      	ldr	r5, [r3, #0]
 8005056:	6862      	ldr	r2, [r4, #4]
 8005058:	2100      	movs	r1, #0
 800505a:	4628      	mov	r0, r5
 800505c:	f7fb f8d8 	bl	8000210 <memchr>
 8005060:	b108      	cbz	r0, 8005066 <_printf_i+0x1ea>
 8005062:	1b40      	subs	r0, r0, r5
 8005064:	6060      	str	r0, [r4, #4]
 8005066:	6863      	ldr	r3, [r4, #4]
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	2300      	movs	r3, #0
 800506c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005070:	e7aa      	b.n	8004fc8 <_printf_i+0x14c>
 8005072:	6923      	ldr	r3, [r4, #16]
 8005074:	462a      	mov	r2, r5
 8005076:	4649      	mov	r1, r9
 8005078:	4640      	mov	r0, r8
 800507a:	47d0      	blx	sl
 800507c:	3001      	adds	r0, #1
 800507e:	d0ad      	beq.n	8004fdc <_printf_i+0x160>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	079b      	lsls	r3, r3, #30
 8005084:	d413      	bmi.n	80050ae <_printf_i+0x232>
 8005086:	68e0      	ldr	r0, [r4, #12]
 8005088:	9b03      	ldr	r3, [sp, #12]
 800508a:	4298      	cmp	r0, r3
 800508c:	bfb8      	it	lt
 800508e:	4618      	movlt	r0, r3
 8005090:	e7a6      	b.n	8004fe0 <_printf_i+0x164>
 8005092:	2301      	movs	r3, #1
 8005094:	4632      	mov	r2, r6
 8005096:	4649      	mov	r1, r9
 8005098:	4640      	mov	r0, r8
 800509a:	47d0      	blx	sl
 800509c:	3001      	adds	r0, #1
 800509e:	d09d      	beq.n	8004fdc <_printf_i+0x160>
 80050a0:	3501      	adds	r5, #1
 80050a2:	68e3      	ldr	r3, [r4, #12]
 80050a4:	9903      	ldr	r1, [sp, #12]
 80050a6:	1a5b      	subs	r3, r3, r1
 80050a8:	42ab      	cmp	r3, r5
 80050aa:	dcf2      	bgt.n	8005092 <_printf_i+0x216>
 80050ac:	e7eb      	b.n	8005086 <_printf_i+0x20a>
 80050ae:	2500      	movs	r5, #0
 80050b0:	f104 0619 	add.w	r6, r4, #25
 80050b4:	e7f5      	b.n	80050a2 <_printf_i+0x226>
 80050b6:	bf00      	nop
 80050b8:	08007566 	.word	0x08007566
 80050bc:	08007577 	.word	0x08007577

080050c0 <std>:
 80050c0:	2300      	movs	r3, #0
 80050c2:	b510      	push	{r4, lr}
 80050c4:	4604      	mov	r4, r0
 80050c6:	e9c0 3300 	strd	r3, r3, [r0]
 80050ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050ce:	6083      	str	r3, [r0, #8]
 80050d0:	8181      	strh	r1, [r0, #12]
 80050d2:	6643      	str	r3, [r0, #100]	; 0x64
 80050d4:	81c2      	strh	r2, [r0, #14]
 80050d6:	6183      	str	r3, [r0, #24]
 80050d8:	4619      	mov	r1, r3
 80050da:	2208      	movs	r2, #8
 80050dc:	305c      	adds	r0, #92	; 0x5c
 80050de:	f000 f9f7 	bl	80054d0 <memset>
 80050e2:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <std+0x58>)
 80050e4:	6263      	str	r3, [r4, #36]	; 0x24
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <std+0x5c>)
 80050e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <std+0x60>)
 80050ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <std+0x64>)
 80050f0:	6323      	str	r3, [r4, #48]	; 0x30
 80050f2:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <std+0x68>)
 80050f4:	6224      	str	r4, [r4, #32]
 80050f6:	429c      	cmp	r4, r3
 80050f8:	d006      	beq.n	8005108 <std+0x48>
 80050fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050fe:	4294      	cmp	r4, r2
 8005100:	d002      	beq.n	8005108 <std+0x48>
 8005102:	33d0      	adds	r3, #208	; 0xd0
 8005104:	429c      	cmp	r4, r3
 8005106:	d105      	bne.n	8005114 <std+0x54>
 8005108:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800510c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005110:	f000 ba5a 	b.w	80055c8 <__retarget_lock_init_recursive>
 8005114:	bd10      	pop	{r4, pc}
 8005116:	bf00      	nop
 8005118:	08005321 	.word	0x08005321
 800511c:	08005343 	.word	0x08005343
 8005120:	0800537b 	.word	0x0800537b
 8005124:	0800539f 	.word	0x0800539f
 8005128:	2000043c 	.word	0x2000043c

0800512c <stdio_exit_handler>:
 800512c:	4a02      	ldr	r2, [pc, #8]	; (8005138 <stdio_exit_handler+0xc>)
 800512e:	4903      	ldr	r1, [pc, #12]	; (800513c <stdio_exit_handler+0x10>)
 8005130:	4803      	ldr	r0, [pc, #12]	; (8005140 <stdio_exit_handler+0x14>)
 8005132:	f000 b869 	b.w	8005208 <_fwalk_sglue>
 8005136:	bf00      	nop
 8005138:	2000000c 	.word	0x2000000c
 800513c:	08006f51 	.word	0x08006f51
 8005140:	20000018 	.word	0x20000018

08005144 <cleanup_stdio>:
 8005144:	6841      	ldr	r1, [r0, #4]
 8005146:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <cleanup_stdio+0x34>)
 8005148:	4299      	cmp	r1, r3
 800514a:	b510      	push	{r4, lr}
 800514c:	4604      	mov	r4, r0
 800514e:	d001      	beq.n	8005154 <cleanup_stdio+0x10>
 8005150:	f001 fefe 	bl	8006f50 <_fflush_r>
 8005154:	68a1      	ldr	r1, [r4, #8]
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <cleanup_stdio+0x38>)
 8005158:	4299      	cmp	r1, r3
 800515a:	d002      	beq.n	8005162 <cleanup_stdio+0x1e>
 800515c:	4620      	mov	r0, r4
 800515e:	f001 fef7 	bl	8006f50 <_fflush_r>
 8005162:	68e1      	ldr	r1, [r4, #12]
 8005164:	4b06      	ldr	r3, [pc, #24]	; (8005180 <cleanup_stdio+0x3c>)
 8005166:	4299      	cmp	r1, r3
 8005168:	d004      	beq.n	8005174 <cleanup_stdio+0x30>
 800516a:	4620      	mov	r0, r4
 800516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005170:	f001 beee 	b.w	8006f50 <_fflush_r>
 8005174:	bd10      	pop	{r4, pc}
 8005176:	bf00      	nop
 8005178:	2000043c 	.word	0x2000043c
 800517c:	200004a4 	.word	0x200004a4
 8005180:	2000050c 	.word	0x2000050c

08005184 <global_stdio_init.part.0>:
 8005184:	b510      	push	{r4, lr}
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <global_stdio_init.part.0+0x30>)
 8005188:	4c0b      	ldr	r4, [pc, #44]	; (80051b8 <global_stdio_init.part.0+0x34>)
 800518a:	4a0c      	ldr	r2, [pc, #48]	; (80051bc <global_stdio_init.part.0+0x38>)
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	4620      	mov	r0, r4
 8005190:	2200      	movs	r2, #0
 8005192:	2104      	movs	r1, #4
 8005194:	f7ff ff94 	bl	80050c0 <std>
 8005198:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800519c:	2201      	movs	r2, #1
 800519e:	2109      	movs	r1, #9
 80051a0:	f7ff ff8e 	bl	80050c0 <std>
 80051a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80051a8:	2202      	movs	r2, #2
 80051aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ae:	2112      	movs	r1, #18
 80051b0:	f7ff bf86 	b.w	80050c0 <std>
 80051b4:	20000574 	.word	0x20000574
 80051b8:	2000043c 	.word	0x2000043c
 80051bc:	0800512d 	.word	0x0800512d

080051c0 <__sfp_lock_acquire>:
 80051c0:	4801      	ldr	r0, [pc, #4]	; (80051c8 <__sfp_lock_acquire+0x8>)
 80051c2:	f000 ba02 	b.w	80055ca <__retarget_lock_acquire_recursive>
 80051c6:	bf00      	nop
 80051c8:	2000057d 	.word	0x2000057d

080051cc <__sfp_lock_release>:
 80051cc:	4801      	ldr	r0, [pc, #4]	; (80051d4 <__sfp_lock_release+0x8>)
 80051ce:	f000 b9fd 	b.w	80055cc <__retarget_lock_release_recursive>
 80051d2:	bf00      	nop
 80051d4:	2000057d 	.word	0x2000057d

080051d8 <__sinit>:
 80051d8:	b510      	push	{r4, lr}
 80051da:	4604      	mov	r4, r0
 80051dc:	f7ff fff0 	bl	80051c0 <__sfp_lock_acquire>
 80051e0:	6a23      	ldr	r3, [r4, #32]
 80051e2:	b11b      	cbz	r3, 80051ec <__sinit+0x14>
 80051e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e8:	f7ff bff0 	b.w	80051cc <__sfp_lock_release>
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <__sinit+0x28>)
 80051ee:	6223      	str	r3, [r4, #32]
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <__sinit+0x2c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f5      	bne.n	80051e4 <__sinit+0xc>
 80051f8:	f7ff ffc4 	bl	8005184 <global_stdio_init.part.0>
 80051fc:	e7f2      	b.n	80051e4 <__sinit+0xc>
 80051fe:	bf00      	nop
 8005200:	08005145 	.word	0x08005145
 8005204:	20000574 	.word	0x20000574

08005208 <_fwalk_sglue>:
 8005208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800520c:	4607      	mov	r7, r0
 800520e:	4688      	mov	r8, r1
 8005210:	4614      	mov	r4, r2
 8005212:	2600      	movs	r6, #0
 8005214:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005218:	f1b9 0901 	subs.w	r9, r9, #1
 800521c:	d505      	bpl.n	800522a <_fwalk_sglue+0x22>
 800521e:	6824      	ldr	r4, [r4, #0]
 8005220:	2c00      	cmp	r4, #0
 8005222:	d1f7      	bne.n	8005214 <_fwalk_sglue+0xc>
 8005224:	4630      	mov	r0, r6
 8005226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800522a:	89ab      	ldrh	r3, [r5, #12]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d907      	bls.n	8005240 <_fwalk_sglue+0x38>
 8005230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005234:	3301      	adds	r3, #1
 8005236:	d003      	beq.n	8005240 <_fwalk_sglue+0x38>
 8005238:	4629      	mov	r1, r5
 800523a:	4638      	mov	r0, r7
 800523c:	47c0      	blx	r8
 800523e:	4306      	orrs	r6, r0
 8005240:	3568      	adds	r5, #104	; 0x68
 8005242:	e7e9      	b.n	8005218 <_fwalk_sglue+0x10>

08005244 <iprintf>:
 8005244:	b40f      	push	{r0, r1, r2, r3}
 8005246:	b507      	push	{r0, r1, r2, lr}
 8005248:	4906      	ldr	r1, [pc, #24]	; (8005264 <iprintf+0x20>)
 800524a:	ab04      	add	r3, sp, #16
 800524c:	6808      	ldr	r0, [r1, #0]
 800524e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005252:	6881      	ldr	r1, [r0, #8]
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	f001 fcdb 	bl	8006c10 <_vfiprintf_r>
 800525a:	b003      	add	sp, #12
 800525c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005260:	b004      	add	sp, #16
 8005262:	4770      	bx	lr
 8005264:	20000064 	.word	0x20000064

08005268 <_puts_r>:
 8005268:	6a03      	ldr	r3, [r0, #32]
 800526a:	b570      	push	{r4, r5, r6, lr}
 800526c:	6884      	ldr	r4, [r0, #8]
 800526e:	4605      	mov	r5, r0
 8005270:	460e      	mov	r6, r1
 8005272:	b90b      	cbnz	r3, 8005278 <_puts_r+0x10>
 8005274:	f7ff ffb0 	bl	80051d8 <__sinit>
 8005278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800527a:	07db      	lsls	r3, r3, #31
 800527c:	d405      	bmi.n	800528a <_puts_r+0x22>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	0598      	lsls	r0, r3, #22
 8005282:	d402      	bmi.n	800528a <_puts_r+0x22>
 8005284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005286:	f000 f9a0 	bl	80055ca <__retarget_lock_acquire_recursive>
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	0719      	lsls	r1, r3, #28
 800528e:	d513      	bpl.n	80052b8 <_puts_r+0x50>
 8005290:	6923      	ldr	r3, [r4, #16]
 8005292:	b18b      	cbz	r3, 80052b8 <_puts_r+0x50>
 8005294:	3e01      	subs	r6, #1
 8005296:	68a3      	ldr	r3, [r4, #8]
 8005298:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800529c:	3b01      	subs	r3, #1
 800529e:	60a3      	str	r3, [r4, #8]
 80052a0:	b9e9      	cbnz	r1, 80052de <_puts_r+0x76>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da2e      	bge.n	8005304 <_puts_r+0x9c>
 80052a6:	4622      	mov	r2, r4
 80052a8:	210a      	movs	r1, #10
 80052aa:	4628      	mov	r0, r5
 80052ac:	f000 f87b 	bl	80053a6 <__swbuf_r>
 80052b0:	3001      	adds	r0, #1
 80052b2:	d007      	beq.n	80052c4 <_puts_r+0x5c>
 80052b4:	250a      	movs	r5, #10
 80052b6:	e007      	b.n	80052c8 <_puts_r+0x60>
 80052b8:	4621      	mov	r1, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 f8b0 	bl	8005420 <__swsetup_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d0e7      	beq.n	8005294 <_puts_r+0x2c>
 80052c4:	f04f 35ff 	mov.w	r5, #4294967295
 80052c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ca:	07da      	lsls	r2, r3, #31
 80052cc:	d405      	bmi.n	80052da <_puts_r+0x72>
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	059b      	lsls	r3, r3, #22
 80052d2:	d402      	bmi.n	80052da <_puts_r+0x72>
 80052d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052d6:	f000 f979 	bl	80055cc <__retarget_lock_release_recursive>
 80052da:	4628      	mov	r0, r5
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da04      	bge.n	80052ec <_puts_r+0x84>
 80052e2:	69a2      	ldr	r2, [r4, #24]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	dc06      	bgt.n	80052f6 <_puts_r+0x8e>
 80052e8:	290a      	cmp	r1, #10
 80052ea:	d004      	beq.n	80052f6 <_puts_r+0x8e>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	6022      	str	r2, [r4, #0]
 80052f2:	7019      	strb	r1, [r3, #0]
 80052f4:	e7cf      	b.n	8005296 <_puts_r+0x2e>
 80052f6:	4622      	mov	r2, r4
 80052f8:	4628      	mov	r0, r5
 80052fa:	f000 f854 	bl	80053a6 <__swbuf_r>
 80052fe:	3001      	adds	r0, #1
 8005300:	d1c9      	bne.n	8005296 <_puts_r+0x2e>
 8005302:	e7df      	b.n	80052c4 <_puts_r+0x5c>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	250a      	movs	r5, #10
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	6022      	str	r2, [r4, #0]
 800530c:	701d      	strb	r5, [r3, #0]
 800530e:	e7db      	b.n	80052c8 <_puts_r+0x60>

08005310 <puts>:
 8005310:	4b02      	ldr	r3, [pc, #8]	; (800531c <puts+0xc>)
 8005312:	4601      	mov	r1, r0
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	f7ff bfa7 	b.w	8005268 <_puts_r>
 800531a:	bf00      	nop
 800531c:	20000064 	.word	0x20000064

08005320 <__sread>:
 8005320:	b510      	push	{r4, lr}
 8005322:	460c      	mov	r4, r1
 8005324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005328:	f000 f900 	bl	800552c <_read_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	bfab      	itete	ge
 8005330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005332:	89a3      	ldrhlt	r3, [r4, #12]
 8005334:	181b      	addge	r3, r3, r0
 8005336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800533a:	bfac      	ite	ge
 800533c:	6563      	strge	r3, [r4, #84]	; 0x54
 800533e:	81a3      	strhlt	r3, [r4, #12]
 8005340:	bd10      	pop	{r4, pc}

08005342 <__swrite>:
 8005342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005346:	461f      	mov	r7, r3
 8005348:	898b      	ldrh	r3, [r1, #12]
 800534a:	05db      	lsls	r3, r3, #23
 800534c:	4605      	mov	r5, r0
 800534e:	460c      	mov	r4, r1
 8005350:	4616      	mov	r6, r2
 8005352:	d505      	bpl.n	8005360 <__swrite+0x1e>
 8005354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005358:	2302      	movs	r3, #2
 800535a:	2200      	movs	r2, #0
 800535c:	f000 f8d4 	bl	8005508 <_lseek_r>
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800536a:	81a3      	strh	r3, [r4, #12]
 800536c:	4632      	mov	r2, r6
 800536e:	463b      	mov	r3, r7
 8005370:	4628      	mov	r0, r5
 8005372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005376:	f000 b8eb 	b.w	8005550 <_write_r>

0800537a <__sseek>:
 800537a:	b510      	push	{r4, lr}
 800537c:	460c      	mov	r4, r1
 800537e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005382:	f000 f8c1 	bl	8005508 <_lseek_r>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	bf15      	itete	ne
 800538c:	6560      	strne	r0, [r4, #84]	; 0x54
 800538e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005396:	81a3      	strheq	r3, [r4, #12]
 8005398:	bf18      	it	ne
 800539a:	81a3      	strhne	r3, [r4, #12]
 800539c:	bd10      	pop	{r4, pc}

0800539e <__sclose>:
 800539e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a2:	f000 b8a1 	b.w	80054e8 <_close_r>

080053a6 <__swbuf_r>:
 80053a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a8:	460e      	mov	r6, r1
 80053aa:	4614      	mov	r4, r2
 80053ac:	4605      	mov	r5, r0
 80053ae:	b118      	cbz	r0, 80053b8 <__swbuf_r+0x12>
 80053b0:	6a03      	ldr	r3, [r0, #32]
 80053b2:	b90b      	cbnz	r3, 80053b8 <__swbuf_r+0x12>
 80053b4:	f7ff ff10 	bl	80051d8 <__sinit>
 80053b8:	69a3      	ldr	r3, [r4, #24]
 80053ba:	60a3      	str	r3, [r4, #8]
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	071a      	lsls	r2, r3, #28
 80053c0:	d525      	bpl.n	800540e <__swbuf_r+0x68>
 80053c2:	6923      	ldr	r3, [r4, #16]
 80053c4:	b31b      	cbz	r3, 800540e <__swbuf_r+0x68>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	6922      	ldr	r2, [r4, #16]
 80053ca:	1a98      	subs	r0, r3, r2
 80053cc:	6963      	ldr	r3, [r4, #20]
 80053ce:	b2f6      	uxtb	r6, r6
 80053d0:	4283      	cmp	r3, r0
 80053d2:	4637      	mov	r7, r6
 80053d4:	dc04      	bgt.n	80053e0 <__swbuf_r+0x3a>
 80053d6:	4621      	mov	r1, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	f001 fdb9 	bl	8006f50 <_fflush_r>
 80053de:	b9e0      	cbnz	r0, 800541a <__swbuf_r+0x74>
 80053e0:	68a3      	ldr	r3, [r4, #8]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	60a3      	str	r3, [r4, #8]
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	6022      	str	r2, [r4, #0]
 80053ec:	701e      	strb	r6, [r3, #0]
 80053ee:	6962      	ldr	r2, [r4, #20]
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d004      	beq.n	8005400 <__swbuf_r+0x5a>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	07db      	lsls	r3, r3, #31
 80053fa:	d506      	bpl.n	800540a <__swbuf_r+0x64>
 80053fc:	2e0a      	cmp	r6, #10
 80053fe:	d104      	bne.n	800540a <__swbuf_r+0x64>
 8005400:	4621      	mov	r1, r4
 8005402:	4628      	mov	r0, r5
 8005404:	f001 fda4 	bl	8006f50 <_fflush_r>
 8005408:	b938      	cbnz	r0, 800541a <__swbuf_r+0x74>
 800540a:	4638      	mov	r0, r7
 800540c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800540e:	4621      	mov	r1, r4
 8005410:	4628      	mov	r0, r5
 8005412:	f000 f805 	bl	8005420 <__swsetup_r>
 8005416:	2800      	cmp	r0, #0
 8005418:	d0d5      	beq.n	80053c6 <__swbuf_r+0x20>
 800541a:	f04f 37ff 	mov.w	r7, #4294967295
 800541e:	e7f4      	b.n	800540a <__swbuf_r+0x64>

08005420 <__swsetup_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <__swsetup_r+0xac>)
 8005424:	4605      	mov	r5, r0
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	460c      	mov	r4, r1
 800542a:	b118      	cbz	r0, 8005434 <__swsetup_r+0x14>
 800542c:	6a03      	ldr	r3, [r0, #32]
 800542e:	b90b      	cbnz	r3, 8005434 <__swsetup_r+0x14>
 8005430:	f7ff fed2 	bl	80051d8 <__sinit>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800543a:	0718      	lsls	r0, r3, #28
 800543c:	d422      	bmi.n	8005484 <__swsetup_r+0x64>
 800543e:	06d9      	lsls	r1, r3, #27
 8005440:	d407      	bmi.n	8005452 <__swsetup_r+0x32>
 8005442:	2309      	movs	r3, #9
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800544a:	81a3      	strh	r3, [r4, #12]
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	e034      	b.n	80054bc <__swsetup_r+0x9c>
 8005452:	0758      	lsls	r0, r3, #29
 8005454:	d512      	bpl.n	800547c <__swsetup_r+0x5c>
 8005456:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005458:	b141      	cbz	r1, 800546c <__swsetup_r+0x4c>
 800545a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800545e:	4299      	cmp	r1, r3
 8005460:	d002      	beq.n	8005468 <__swsetup_r+0x48>
 8005462:	4628      	mov	r0, r5
 8005464:	f000 ff2e 	bl	80062c4 <_free_r>
 8005468:	2300      	movs	r3, #0
 800546a:	6363      	str	r3, [r4, #52]	; 0x34
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	2300      	movs	r3, #0
 8005476:	6063      	str	r3, [r4, #4]
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	f043 0308 	orr.w	r3, r3, #8
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	b94b      	cbnz	r3, 800549c <__swsetup_r+0x7c>
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800548e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005492:	d003      	beq.n	800549c <__swsetup_r+0x7c>
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f001 fda8 	bl	8006fec <__smakebuf_r>
 800549c:	89a0      	ldrh	r0, [r4, #12]
 800549e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054a2:	f010 0301 	ands.w	r3, r0, #1
 80054a6:	d00a      	beq.n	80054be <__swsetup_r+0x9e>
 80054a8:	2300      	movs	r3, #0
 80054aa:	60a3      	str	r3, [r4, #8]
 80054ac:	6963      	ldr	r3, [r4, #20]
 80054ae:	425b      	negs	r3, r3
 80054b0:	61a3      	str	r3, [r4, #24]
 80054b2:	6923      	ldr	r3, [r4, #16]
 80054b4:	b943      	cbnz	r3, 80054c8 <__swsetup_r+0xa8>
 80054b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054ba:	d1c4      	bne.n	8005446 <__swsetup_r+0x26>
 80054bc:	bd38      	pop	{r3, r4, r5, pc}
 80054be:	0781      	lsls	r1, r0, #30
 80054c0:	bf58      	it	pl
 80054c2:	6963      	ldrpl	r3, [r4, #20]
 80054c4:	60a3      	str	r3, [r4, #8]
 80054c6:	e7f4      	b.n	80054b2 <__swsetup_r+0x92>
 80054c8:	2000      	movs	r0, #0
 80054ca:	e7f7      	b.n	80054bc <__swsetup_r+0x9c>
 80054cc:	20000064 	.word	0x20000064

080054d0 <memset>:
 80054d0:	4402      	add	r2, r0
 80054d2:	4603      	mov	r3, r0
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d100      	bne.n	80054da <memset+0xa>
 80054d8:	4770      	bx	lr
 80054da:	f803 1b01 	strb.w	r1, [r3], #1
 80054de:	e7f9      	b.n	80054d4 <memset+0x4>

080054e0 <_localeconv_r>:
 80054e0:	4800      	ldr	r0, [pc, #0]	; (80054e4 <_localeconv_r+0x4>)
 80054e2:	4770      	bx	lr
 80054e4:	20000158 	.word	0x20000158

080054e8 <_close_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d06      	ldr	r5, [pc, #24]	; (8005504 <_close_r+0x1c>)
 80054ec:	2300      	movs	r3, #0
 80054ee:	4604      	mov	r4, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	602b      	str	r3, [r5, #0]
 80054f4:	f7fc fa3d 	bl	8001972 <_close>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d102      	bne.n	8005502 <_close_r+0x1a>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	b103      	cbz	r3, 8005502 <_close_r+0x1a>
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	20000578 	.word	0x20000578

08005508 <_lseek_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4d07      	ldr	r5, [pc, #28]	; (8005528 <_lseek_r+0x20>)
 800550c:	4604      	mov	r4, r0
 800550e:	4608      	mov	r0, r1
 8005510:	4611      	mov	r1, r2
 8005512:	2200      	movs	r2, #0
 8005514:	602a      	str	r2, [r5, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	f7fc fa52 	bl	80019c0 <_lseek>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d102      	bne.n	8005526 <_lseek_r+0x1e>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	b103      	cbz	r3, 8005526 <_lseek_r+0x1e>
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	20000578 	.word	0x20000578

0800552c <_read_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4d07      	ldr	r5, [pc, #28]	; (800554c <_read_r+0x20>)
 8005530:	4604      	mov	r4, r0
 8005532:	4608      	mov	r0, r1
 8005534:	4611      	mov	r1, r2
 8005536:	2200      	movs	r2, #0
 8005538:	602a      	str	r2, [r5, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	f7fc f9e0 	bl	8001900 <_read>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_read_r+0x1e>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	b103      	cbz	r3, 800554a <_read_r+0x1e>
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	20000578 	.word	0x20000578

08005550 <_write_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d07      	ldr	r5, [pc, #28]	; (8005570 <_write_r+0x20>)
 8005554:	4604      	mov	r4, r0
 8005556:	4608      	mov	r0, r1
 8005558:	4611      	mov	r1, r2
 800555a:	2200      	movs	r2, #0
 800555c:	602a      	str	r2, [r5, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	f7fc f9eb 	bl	800193a <_write>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_write_r+0x1e>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_write_r+0x1e>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	20000578 	.word	0x20000578

08005574 <__errno>:
 8005574:	4b01      	ldr	r3, [pc, #4]	; (800557c <__errno+0x8>)
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000064 	.word	0x20000064

08005580 <__libc_init_array>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	4d0d      	ldr	r5, [pc, #52]	; (80055b8 <__libc_init_array+0x38>)
 8005584:	4c0d      	ldr	r4, [pc, #52]	; (80055bc <__libc_init_array+0x3c>)
 8005586:	1b64      	subs	r4, r4, r5
 8005588:	10a4      	asrs	r4, r4, #2
 800558a:	2600      	movs	r6, #0
 800558c:	42a6      	cmp	r6, r4
 800558e:	d109      	bne.n	80055a4 <__libc_init_array+0x24>
 8005590:	4d0b      	ldr	r5, [pc, #44]	; (80055c0 <__libc_init_array+0x40>)
 8005592:	4c0c      	ldr	r4, [pc, #48]	; (80055c4 <__libc_init_array+0x44>)
 8005594:	f001 fe58 	bl	8007248 <_init>
 8005598:	1b64      	subs	r4, r4, r5
 800559a:	10a4      	asrs	r4, r4, #2
 800559c:	2600      	movs	r6, #0
 800559e:	42a6      	cmp	r6, r4
 80055a0:	d105      	bne.n	80055ae <__libc_init_array+0x2e>
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a8:	4798      	blx	r3
 80055aa:	3601      	adds	r6, #1
 80055ac:	e7ee      	b.n	800558c <__libc_init_array+0xc>
 80055ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b2:	4798      	blx	r3
 80055b4:	3601      	adds	r6, #1
 80055b6:	e7f2      	b.n	800559e <__libc_init_array+0x1e>
 80055b8:	080078cc 	.word	0x080078cc
 80055bc:	080078cc 	.word	0x080078cc
 80055c0:	080078cc 	.word	0x080078cc
 80055c4:	080078d0 	.word	0x080078d0

080055c8 <__retarget_lock_init_recursive>:
 80055c8:	4770      	bx	lr

080055ca <__retarget_lock_acquire_recursive>:
 80055ca:	4770      	bx	lr

080055cc <__retarget_lock_release_recursive>:
 80055cc:	4770      	bx	lr

080055ce <quorem>:
 80055ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d2:	6903      	ldr	r3, [r0, #16]
 80055d4:	690c      	ldr	r4, [r1, #16]
 80055d6:	42a3      	cmp	r3, r4
 80055d8:	4607      	mov	r7, r0
 80055da:	db7e      	blt.n	80056da <quorem+0x10c>
 80055dc:	3c01      	subs	r4, #1
 80055de:	f101 0814 	add.w	r8, r1, #20
 80055e2:	f100 0514 	add.w	r5, r0, #20
 80055e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055f4:	3301      	adds	r3, #1
 80055f6:	429a      	cmp	r2, r3
 80055f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005600:	fbb2 f6f3 	udiv	r6, r2, r3
 8005604:	d331      	bcc.n	800566a <quorem+0x9c>
 8005606:	f04f 0e00 	mov.w	lr, #0
 800560a:	4640      	mov	r0, r8
 800560c:	46ac      	mov	ip, r5
 800560e:	46f2      	mov	sl, lr
 8005610:	f850 2b04 	ldr.w	r2, [r0], #4
 8005614:	b293      	uxth	r3, r2
 8005616:	fb06 e303 	mla	r3, r6, r3, lr
 800561a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800561e:	0c1a      	lsrs	r2, r3, #16
 8005620:	b29b      	uxth	r3, r3
 8005622:	ebaa 0303 	sub.w	r3, sl, r3
 8005626:	f8dc a000 	ldr.w	sl, [ip]
 800562a:	fa13 f38a 	uxtah	r3, r3, sl
 800562e:	fb06 220e 	mla	r2, r6, lr, r2
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	9b00      	ldr	r3, [sp, #0]
 8005636:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800563a:	b292      	uxth	r2, r2
 800563c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005644:	f8bd 3000 	ldrh.w	r3, [sp]
 8005648:	4581      	cmp	r9, r0
 800564a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800564e:	f84c 3b04 	str.w	r3, [ip], #4
 8005652:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005656:	d2db      	bcs.n	8005610 <quorem+0x42>
 8005658:	f855 300b 	ldr.w	r3, [r5, fp]
 800565c:	b92b      	cbnz	r3, 800566a <quorem+0x9c>
 800565e:	9b01      	ldr	r3, [sp, #4]
 8005660:	3b04      	subs	r3, #4
 8005662:	429d      	cmp	r5, r3
 8005664:	461a      	mov	r2, r3
 8005666:	d32c      	bcc.n	80056c2 <quorem+0xf4>
 8005668:	613c      	str	r4, [r7, #16]
 800566a:	4638      	mov	r0, r7
 800566c:	f001 f9a6 	bl	80069bc <__mcmp>
 8005670:	2800      	cmp	r0, #0
 8005672:	db22      	blt.n	80056ba <quorem+0xec>
 8005674:	3601      	adds	r6, #1
 8005676:	4629      	mov	r1, r5
 8005678:	2000      	movs	r0, #0
 800567a:	f858 2b04 	ldr.w	r2, [r8], #4
 800567e:	f8d1 c000 	ldr.w	ip, [r1]
 8005682:	b293      	uxth	r3, r2
 8005684:	1ac3      	subs	r3, r0, r3
 8005686:	0c12      	lsrs	r2, r2, #16
 8005688:	fa13 f38c 	uxtah	r3, r3, ip
 800568c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005690:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005694:	b29b      	uxth	r3, r3
 8005696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800569a:	45c1      	cmp	r9, r8
 800569c:	f841 3b04 	str.w	r3, [r1], #4
 80056a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056a4:	d2e9      	bcs.n	800567a <quorem+0xac>
 80056a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ae:	b922      	cbnz	r2, 80056ba <quorem+0xec>
 80056b0:	3b04      	subs	r3, #4
 80056b2:	429d      	cmp	r5, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	d30a      	bcc.n	80056ce <quorem+0x100>
 80056b8:	613c      	str	r4, [r7, #16]
 80056ba:	4630      	mov	r0, r6
 80056bc:	b003      	add	sp, #12
 80056be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	3b04      	subs	r3, #4
 80056c6:	2a00      	cmp	r2, #0
 80056c8:	d1ce      	bne.n	8005668 <quorem+0x9a>
 80056ca:	3c01      	subs	r4, #1
 80056cc:	e7c9      	b.n	8005662 <quorem+0x94>
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	3b04      	subs	r3, #4
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d1f0      	bne.n	80056b8 <quorem+0xea>
 80056d6:	3c01      	subs	r4, #1
 80056d8:	e7eb      	b.n	80056b2 <quorem+0xe4>
 80056da:	2000      	movs	r0, #0
 80056dc:	e7ee      	b.n	80056bc <quorem+0xee>
	...

080056e0 <_dtoa_r>:
 80056e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	ed2d 8b04 	vpush	{d8-d9}
 80056e8:	69c5      	ldr	r5, [r0, #28]
 80056ea:	b093      	sub	sp, #76	; 0x4c
 80056ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056f0:	ec57 6b10 	vmov	r6, r7, d0
 80056f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056f8:	9107      	str	r1, [sp, #28]
 80056fa:	4604      	mov	r4, r0
 80056fc:	920a      	str	r2, [sp, #40]	; 0x28
 80056fe:	930d      	str	r3, [sp, #52]	; 0x34
 8005700:	b975      	cbnz	r5, 8005720 <_dtoa_r+0x40>
 8005702:	2010      	movs	r0, #16
 8005704:	f000 fe2a 	bl	800635c <malloc>
 8005708:	4602      	mov	r2, r0
 800570a:	61e0      	str	r0, [r4, #28]
 800570c:	b920      	cbnz	r0, 8005718 <_dtoa_r+0x38>
 800570e:	4bae      	ldr	r3, [pc, #696]	; (80059c8 <_dtoa_r+0x2e8>)
 8005710:	21ef      	movs	r1, #239	; 0xef
 8005712:	48ae      	ldr	r0, [pc, #696]	; (80059cc <_dtoa_r+0x2ec>)
 8005714:	f001 fce6 	bl	80070e4 <__assert_func>
 8005718:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800571c:	6005      	str	r5, [r0, #0]
 800571e:	60c5      	str	r5, [r0, #12]
 8005720:	69e3      	ldr	r3, [r4, #28]
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	b151      	cbz	r1, 800573c <_dtoa_r+0x5c>
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	604a      	str	r2, [r1, #4]
 800572a:	2301      	movs	r3, #1
 800572c:	4093      	lsls	r3, r2
 800572e:	608b      	str	r3, [r1, #8]
 8005730:	4620      	mov	r0, r4
 8005732:	f000 ff07 	bl	8006544 <_Bfree>
 8005736:	69e3      	ldr	r3, [r4, #28]
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	1e3b      	subs	r3, r7, #0
 800573e:	bfbb      	ittet	lt
 8005740:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005744:	9303      	strlt	r3, [sp, #12]
 8005746:	2300      	movge	r3, #0
 8005748:	2201      	movlt	r2, #1
 800574a:	bfac      	ite	ge
 800574c:	f8c8 3000 	strge.w	r3, [r8]
 8005750:	f8c8 2000 	strlt.w	r2, [r8]
 8005754:	4b9e      	ldr	r3, [pc, #632]	; (80059d0 <_dtoa_r+0x2f0>)
 8005756:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800575a:	ea33 0308 	bics.w	r3, r3, r8
 800575e:	d11b      	bne.n	8005798 <_dtoa_r+0xb8>
 8005760:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005762:	f242 730f 	movw	r3, #9999	; 0x270f
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800576c:	4333      	orrs	r3, r6
 800576e:	f000 8593 	beq.w	8006298 <_dtoa_r+0xbb8>
 8005772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005774:	b963      	cbnz	r3, 8005790 <_dtoa_r+0xb0>
 8005776:	4b97      	ldr	r3, [pc, #604]	; (80059d4 <_dtoa_r+0x2f4>)
 8005778:	e027      	b.n	80057ca <_dtoa_r+0xea>
 800577a:	4b97      	ldr	r3, [pc, #604]	; (80059d8 <_dtoa_r+0x2f8>)
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	3308      	adds	r3, #8
 8005780:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	9800      	ldr	r0, [sp, #0]
 8005786:	b013      	add	sp, #76	; 0x4c
 8005788:	ecbd 8b04 	vpop	{d8-d9}
 800578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005790:	4b90      	ldr	r3, [pc, #576]	; (80059d4 <_dtoa_r+0x2f4>)
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	3303      	adds	r3, #3
 8005796:	e7f3      	b.n	8005780 <_dtoa_r+0xa0>
 8005798:	ed9d 7b02 	vldr	d7, [sp, #8]
 800579c:	2200      	movs	r2, #0
 800579e:	ec51 0b17 	vmov	r0, r1, d7
 80057a2:	eeb0 8a47 	vmov.f32	s16, s14
 80057a6:	eef0 8a67 	vmov.f32	s17, s15
 80057aa:	2300      	movs	r3, #0
 80057ac:	f7fb f9ac 	bl	8000b08 <__aeabi_dcmpeq>
 80057b0:	4681      	mov	r9, r0
 80057b2:	b160      	cbz	r0, 80057ce <_dtoa_r+0xee>
 80057b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057b6:	2301      	movs	r3, #1
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8568 	beq.w	8006292 <_dtoa_r+0xbb2>
 80057c2:	4b86      	ldr	r3, [pc, #536]	; (80059dc <_dtoa_r+0x2fc>)
 80057c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	e7da      	b.n	8005784 <_dtoa_r+0xa4>
 80057ce:	aa10      	add	r2, sp, #64	; 0x40
 80057d0:	a911      	add	r1, sp, #68	; 0x44
 80057d2:	4620      	mov	r0, r4
 80057d4:	eeb0 0a48 	vmov.f32	s0, s16
 80057d8:	eef0 0a68 	vmov.f32	s1, s17
 80057dc:	f001 f994 	bl	8006b08 <__d2b>
 80057e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80057e4:	4682      	mov	sl, r0
 80057e6:	2d00      	cmp	r5, #0
 80057e8:	d07f      	beq.n	80058ea <_dtoa_r+0x20a>
 80057ea:	ee18 3a90 	vmov	r3, s17
 80057ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80057f6:	ec51 0b18 	vmov	r0, r1, d8
 80057fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80057fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005802:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005806:	4619      	mov	r1, r3
 8005808:	2200      	movs	r2, #0
 800580a:	4b75      	ldr	r3, [pc, #468]	; (80059e0 <_dtoa_r+0x300>)
 800580c:	f7fa fd5c 	bl	80002c8 <__aeabi_dsub>
 8005810:	a367      	add	r3, pc, #412	; (adr r3, 80059b0 <_dtoa_r+0x2d0>)
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f7fa ff0f 	bl	8000638 <__aeabi_dmul>
 800581a:	a367      	add	r3, pc, #412	; (adr r3, 80059b8 <_dtoa_r+0x2d8>)
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f7fa fd54 	bl	80002cc <__adddf3>
 8005824:	4606      	mov	r6, r0
 8005826:	4628      	mov	r0, r5
 8005828:	460f      	mov	r7, r1
 800582a:	f7fa fe9b 	bl	8000564 <__aeabi_i2d>
 800582e:	a364      	add	r3, pc, #400	; (adr r3, 80059c0 <_dtoa_r+0x2e0>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fa ff00 	bl	8000638 <__aeabi_dmul>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4630      	mov	r0, r6
 800583e:	4639      	mov	r1, r7
 8005840:	f7fa fd44 	bl	80002cc <__adddf3>
 8005844:	4606      	mov	r6, r0
 8005846:	460f      	mov	r7, r1
 8005848:	f7fb f9a6 	bl	8000b98 <__aeabi_d2iz>
 800584c:	2200      	movs	r2, #0
 800584e:	4683      	mov	fp, r0
 8005850:	2300      	movs	r3, #0
 8005852:	4630      	mov	r0, r6
 8005854:	4639      	mov	r1, r7
 8005856:	f7fb f961 	bl	8000b1c <__aeabi_dcmplt>
 800585a:	b148      	cbz	r0, 8005870 <_dtoa_r+0x190>
 800585c:	4658      	mov	r0, fp
 800585e:	f7fa fe81 	bl	8000564 <__aeabi_i2d>
 8005862:	4632      	mov	r2, r6
 8005864:	463b      	mov	r3, r7
 8005866:	f7fb f94f 	bl	8000b08 <__aeabi_dcmpeq>
 800586a:	b908      	cbnz	r0, 8005870 <_dtoa_r+0x190>
 800586c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005870:	f1bb 0f16 	cmp.w	fp, #22
 8005874:	d857      	bhi.n	8005926 <_dtoa_r+0x246>
 8005876:	4b5b      	ldr	r3, [pc, #364]	; (80059e4 <_dtoa_r+0x304>)
 8005878:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	ec51 0b18 	vmov	r0, r1, d8
 8005884:	f7fb f94a 	bl	8000b1c <__aeabi_dcmplt>
 8005888:	2800      	cmp	r0, #0
 800588a:	d04e      	beq.n	800592a <_dtoa_r+0x24a>
 800588c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005890:	2300      	movs	r3, #0
 8005892:	930c      	str	r3, [sp, #48]	; 0x30
 8005894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005896:	1b5b      	subs	r3, r3, r5
 8005898:	1e5a      	subs	r2, r3, #1
 800589a:	bf45      	ittet	mi
 800589c:	f1c3 0301 	rsbmi	r3, r3, #1
 80058a0:	9305      	strmi	r3, [sp, #20]
 80058a2:	2300      	movpl	r3, #0
 80058a4:	2300      	movmi	r3, #0
 80058a6:	9206      	str	r2, [sp, #24]
 80058a8:	bf54      	ite	pl
 80058aa:	9305      	strpl	r3, [sp, #20]
 80058ac:	9306      	strmi	r3, [sp, #24]
 80058ae:	f1bb 0f00 	cmp.w	fp, #0
 80058b2:	db3c      	blt.n	800592e <_dtoa_r+0x24e>
 80058b4:	9b06      	ldr	r3, [sp, #24]
 80058b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80058ba:	445b      	add	r3, fp
 80058bc:	9306      	str	r3, [sp, #24]
 80058be:	2300      	movs	r3, #0
 80058c0:	9308      	str	r3, [sp, #32]
 80058c2:	9b07      	ldr	r3, [sp, #28]
 80058c4:	2b09      	cmp	r3, #9
 80058c6:	d868      	bhi.n	800599a <_dtoa_r+0x2ba>
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	bfc4      	itt	gt
 80058cc:	3b04      	subgt	r3, #4
 80058ce:	9307      	strgt	r3, [sp, #28]
 80058d0:	9b07      	ldr	r3, [sp, #28]
 80058d2:	f1a3 0302 	sub.w	r3, r3, #2
 80058d6:	bfcc      	ite	gt
 80058d8:	2500      	movgt	r5, #0
 80058da:	2501      	movle	r5, #1
 80058dc:	2b03      	cmp	r3, #3
 80058de:	f200 8085 	bhi.w	80059ec <_dtoa_r+0x30c>
 80058e2:	e8df f003 	tbb	[pc, r3]
 80058e6:	3b2e      	.short	0x3b2e
 80058e8:	5839      	.short	0x5839
 80058ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80058ee:	441d      	add	r5, r3
 80058f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	bfc1      	itttt	gt
 80058f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005900:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005904:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005908:	bfd6      	itet	le
 800590a:	f1c3 0320 	rsble	r3, r3, #32
 800590e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005912:	fa06 f003 	lslle.w	r0, r6, r3
 8005916:	f7fa fe15 	bl	8000544 <__aeabi_ui2d>
 800591a:	2201      	movs	r2, #1
 800591c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005920:	3d01      	subs	r5, #1
 8005922:	920e      	str	r2, [sp, #56]	; 0x38
 8005924:	e76f      	b.n	8005806 <_dtoa_r+0x126>
 8005926:	2301      	movs	r3, #1
 8005928:	e7b3      	b.n	8005892 <_dtoa_r+0x1b2>
 800592a:	900c      	str	r0, [sp, #48]	; 0x30
 800592c:	e7b2      	b.n	8005894 <_dtoa_r+0x1b4>
 800592e:	9b05      	ldr	r3, [sp, #20]
 8005930:	eba3 030b 	sub.w	r3, r3, fp
 8005934:	9305      	str	r3, [sp, #20]
 8005936:	f1cb 0300 	rsb	r3, fp, #0
 800593a:	9308      	str	r3, [sp, #32]
 800593c:	2300      	movs	r3, #0
 800593e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005940:	e7bf      	b.n	80058c2 <_dtoa_r+0x1e2>
 8005942:	2300      	movs	r3, #0
 8005944:	9309      	str	r3, [sp, #36]	; 0x24
 8005946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	dc52      	bgt.n	80059f2 <_dtoa_r+0x312>
 800594c:	2301      	movs	r3, #1
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	9304      	str	r3, [sp, #16]
 8005952:	461a      	mov	r2, r3
 8005954:	920a      	str	r2, [sp, #40]	; 0x28
 8005956:	e00b      	b.n	8005970 <_dtoa_r+0x290>
 8005958:	2301      	movs	r3, #1
 800595a:	e7f3      	b.n	8005944 <_dtoa_r+0x264>
 800595c:	2300      	movs	r3, #0
 800595e:	9309      	str	r3, [sp, #36]	; 0x24
 8005960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005962:	445b      	add	r3, fp
 8005964:	9301      	str	r3, [sp, #4]
 8005966:	3301      	adds	r3, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	9304      	str	r3, [sp, #16]
 800596c:	bfb8      	it	lt
 800596e:	2301      	movlt	r3, #1
 8005970:	69e0      	ldr	r0, [r4, #28]
 8005972:	2100      	movs	r1, #0
 8005974:	2204      	movs	r2, #4
 8005976:	f102 0614 	add.w	r6, r2, #20
 800597a:	429e      	cmp	r6, r3
 800597c:	d93d      	bls.n	80059fa <_dtoa_r+0x31a>
 800597e:	6041      	str	r1, [r0, #4]
 8005980:	4620      	mov	r0, r4
 8005982:	f000 fd9f 	bl	80064c4 <_Balloc>
 8005986:	9000      	str	r0, [sp, #0]
 8005988:	2800      	cmp	r0, #0
 800598a:	d139      	bne.n	8005a00 <_dtoa_r+0x320>
 800598c:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <_dtoa_r+0x308>)
 800598e:	4602      	mov	r2, r0
 8005990:	f240 11af 	movw	r1, #431	; 0x1af
 8005994:	e6bd      	b.n	8005712 <_dtoa_r+0x32>
 8005996:	2301      	movs	r3, #1
 8005998:	e7e1      	b.n	800595e <_dtoa_r+0x27e>
 800599a:	2501      	movs	r5, #1
 800599c:	2300      	movs	r3, #0
 800599e:	9307      	str	r3, [sp, #28]
 80059a0:	9509      	str	r5, [sp, #36]	; 0x24
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	9304      	str	r3, [sp, #16]
 80059aa:	2200      	movs	r2, #0
 80059ac:	2312      	movs	r3, #18
 80059ae:	e7d1      	b.n	8005954 <_dtoa_r+0x274>
 80059b0:	636f4361 	.word	0x636f4361
 80059b4:	3fd287a7 	.word	0x3fd287a7
 80059b8:	8b60c8b3 	.word	0x8b60c8b3
 80059bc:	3fc68a28 	.word	0x3fc68a28
 80059c0:	509f79fb 	.word	0x509f79fb
 80059c4:	3fd34413 	.word	0x3fd34413
 80059c8:	08007595 	.word	0x08007595
 80059cc:	080075ac 	.word	0x080075ac
 80059d0:	7ff00000 	.word	0x7ff00000
 80059d4:	08007591 	.word	0x08007591
 80059d8:	08007588 	.word	0x08007588
 80059dc:	08007565 	.word	0x08007565
 80059e0:	3ff80000 	.word	0x3ff80000
 80059e4:	08007698 	.word	0x08007698
 80059e8:	08007604 	.word	0x08007604
 80059ec:	2301      	movs	r3, #1
 80059ee:	9309      	str	r3, [sp, #36]	; 0x24
 80059f0:	e7d7      	b.n	80059a2 <_dtoa_r+0x2c2>
 80059f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	e7ba      	b.n	8005970 <_dtoa_r+0x290>
 80059fa:	3101      	adds	r1, #1
 80059fc:	0052      	lsls	r2, r2, #1
 80059fe:	e7ba      	b.n	8005976 <_dtoa_r+0x296>
 8005a00:	69e3      	ldr	r3, [r4, #28]
 8005a02:	9a00      	ldr	r2, [sp, #0]
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	9b04      	ldr	r3, [sp, #16]
 8005a08:	2b0e      	cmp	r3, #14
 8005a0a:	f200 80a8 	bhi.w	8005b5e <_dtoa_r+0x47e>
 8005a0e:	2d00      	cmp	r5, #0
 8005a10:	f000 80a5 	beq.w	8005b5e <_dtoa_r+0x47e>
 8005a14:	f1bb 0f00 	cmp.w	fp, #0
 8005a18:	dd38      	ble.n	8005a8c <_dtoa_r+0x3ac>
 8005a1a:	4bc0      	ldr	r3, [pc, #768]	; (8005d1c <_dtoa_r+0x63c>)
 8005a1c:	f00b 020f 	and.w	r2, fp, #15
 8005a20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005a28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005a2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005a30:	d019      	beq.n	8005a66 <_dtoa_r+0x386>
 8005a32:	4bbb      	ldr	r3, [pc, #748]	; (8005d20 <_dtoa_r+0x640>)
 8005a34:	ec51 0b18 	vmov	r0, r1, d8
 8005a38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a3c:	f7fa ff26 	bl	800088c <__aeabi_ddiv>
 8005a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a44:	f008 080f 	and.w	r8, r8, #15
 8005a48:	2503      	movs	r5, #3
 8005a4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005d20 <_dtoa_r+0x640>
 8005a4e:	f1b8 0f00 	cmp.w	r8, #0
 8005a52:	d10a      	bne.n	8005a6a <_dtoa_r+0x38a>
 8005a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a58:	4632      	mov	r2, r6
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	f7fa ff16 	bl	800088c <__aeabi_ddiv>
 8005a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a64:	e02b      	b.n	8005abe <_dtoa_r+0x3de>
 8005a66:	2502      	movs	r5, #2
 8005a68:	e7ef      	b.n	8005a4a <_dtoa_r+0x36a>
 8005a6a:	f018 0f01 	tst.w	r8, #1
 8005a6e:	d008      	beq.n	8005a82 <_dtoa_r+0x3a2>
 8005a70:	4630      	mov	r0, r6
 8005a72:	4639      	mov	r1, r7
 8005a74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005a78:	f7fa fdde 	bl	8000638 <__aeabi_dmul>
 8005a7c:	3501      	adds	r5, #1
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460f      	mov	r7, r1
 8005a82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a86:	f109 0908 	add.w	r9, r9, #8
 8005a8a:	e7e0      	b.n	8005a4e <_dtoa_r+0x36e>
 8005a8c:	f000 809f 	beq.w	8005bce <_dtoa_r+0x4ee>
 8005a90:	f1cb 0600 	rsb	r6, fp, #0
 8005a94:	4ba1      	ldr	r3, [pc, #644]	; (8005d1c <_dtoa_r+0x63c>)
 8005a96:	4fa2      	ldr	r7, [pc, #648]	; (8005d20 <_dtoa_r+0x640>)
 8005a98:	f006 020f 	and.w	r2, r6, #15
 8005a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	ec51 0b18 	vmov	r0, r1, d8
 8005aa8:	f7fa fdc6 	bl	8000638 <__aeabi_dmul>
 8005aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ab0:	1136      	asrs	r6, r6, #4
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	2502      	movs	r5, #2
 8005ab6:	2e00      	cmp	r6, #0
 8005ab8:	d17e      	bne.n	8005bb8 <_dtoa_r+0x4d8>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1d0      	bne.n	8005a60 <_dtoa_r+0x380>
 8005abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ac0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8084 	beq.w	8005bd2 <_dtoa_r+0x4f2>
 8005aca:	4b96      	ldr	r3, [pc, #600]	; (8005d24 <_dtoa_r+0x644>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f7fb f823 	bl	8000b1c <__aeabi_dcmplt>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d07b      	beq.n	8005bd2 <_dtoa_r+0x4f2>
 8005ada:	9b04      	ldr	r3, [sp, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d078      	beq.n	8005bd2 <_dtoa_r+0x4f2>
 8005ae0:	9b01      	ldr	r3, [sp, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	dd39      	ble.n	8005b5a <_dtoa_r+0x47a>
 8005ae6:	4b90      	ldr	r3, [pc, #576]	; (8005d28 <_dtoa_r+0x648>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4640      	mov	r0, r8
 8005aec:	4649      	mov	r1, r9
 8005aee:	f7fa fda3 	bl	8000638 <__aeabi_dmul>
 8005af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005af6:	9e01      	ldr	r6, [sp, #4]
 8005af8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005afc:	3501      	adds	r5, #1
 8005afe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005b02:	4628      	mov	r0, r5
 8005b04:	f7fa fd2e 	bl	8000564 <__aeabi_i2d>
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	f7fa fd94 	bl	8000638 <__aeabi_dmul>
 8005b10:	4b86      	ldr	r3, [pc, #536]	; (8005d2c <_dtoa_r+0x64c>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	f7fa fbda 	bl	80002cc <__adddf3>
 8005b18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b20:	9303      	str	r3, [sp, #12]
 8005b22:	2e00      	cmp	r6, #0
 8005b24:	d158      	bne.n	8005bd8 <_dtoa_r+0x4f8>
 8005b26:	4b82      	ldr	r3, [pc, #520]	; (8005d30 <_dtoa_r+0x650>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	f7fa fbcb 	bl	80002c8 <__aeabi_dsub>
 8005b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b36:	4680      	mov	r8, r0
 8005b38:	4689      	mov	r9, r1
 8005b3a:	f7fb f80d 	bl	8000b58 <__aeabi_dcmpgt>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	f040 8296 	bne.w	8006070 <_dtoa_r+0x990>
 8005b44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005b48:	4640      	mov	r0, r8
 8005b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b4e:	4649      	mov	r1, r9
 8005b50:	f7fa ffe4 	bl	8000b1c <__aeabi_dcmplt>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	f040 8289 	bne.w	800606c <_dtoa_r+0x98c>
 8005b5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005b5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f2c0 814e 	blt.w	8005e02 <_dtoa_r+0x722>
 8005b66:	f1bb 0f0e 	cmp.w	fp, #14
 8005b6a:	f300 814a 	bgt.w	8005e02 <_dtoa_r+0x722>
 8005b6e:	4b6b      	ldr	r3, [pc, #428]	; (8005d1c <_dtoa_r+0x63c>)
 8005b70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f280 80dc 	bge.w	8005d38 <_dtoa_r+0x658>
 8005b80:	9b04      	ldr	r3, [sp, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f300 80d8 	bgt.w	8005d38 <_dtoa_r+0x658>
 8005b88:	f040 826f 	bne.w	800606a <_dtoa_r+0x98a>
 8005b8c:	4b68      	ldr	r3, [pc, #416]	; (8005d30 <_dtoa_r+0x650>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	4640      	mov	r0, r8
 8005b92:	4649      	mov	r1, r9
 8005b94:	f7fa fd50 	bl	8000638 <__aeabi_dmul>
 8005b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b9c:	f7fa ffd2 	bl	8000b44 <__aeabi_dcmpge>
 8005ba0:	9e04      	ldr	r6, [sp, #16]
 8005ba2:	4637      	mov	r7, r6
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	f040 8245 	bne.w	8006034 <_dtoa_r+0x954>
 8005baa:	9d00      	ldr	r5, [sp, #0]
 8005bac:	2331      	movs	r3, #49	; 0x31
 8005bae:	f805 3b01 	strb.w	r3, [r5], #1
 8005bb2:	f10b 0b01 	add.w	fp, fp, #1
 8005bb6:	e241      	b.n	800603c <_dtoa_r+0x95c>
 8005bb8:	07f2      	lsls	r2, r6, #31
 8005bba:	d505      	bpl.n	8005bc8 <_dtoa_r+0x4e8>
 8005bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc0:	f7fa fd3a 	bl	8000638 <__aeabi_dmul>
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	1076      	asrs	r6, r6, #1
 8005bca:	3708      	adds	r7, #8
 8005bcc:	e773      	b.n	8005ab6 <_dtoa_r+0x3d6>
 8005bce:	2502      	movs	r5, #2
 8005bd0:	e775      	b.n	8005abe <_dtoa_r+0x3de>
 8005bd2:	9e04      	ldr	r6, [sp, #16]
 8005bd4:	465f      	mov	r7, fp
 8005bd6:	e792      	b.n	8005afe <_dtoa_r+0x41e>
 8005bd8:	9900      	ldr	r1, [sp, #0]
 8005bda:	4b50      	ldr	r3, [pc, #320]	; (8005d1c <_dtoa_r+0x63c>)
 8005bdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005be0:	4431      	add	r1, r6
 8005be2:	9102      	str	r1, [sp, #8]
 8005be4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005be6:	eeb0 9a47 	vmov.f32	s18, s14
 8005bea:	eef0 9a67 	vmov.f32	s19, s15
 8005bee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005bf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bf6:	2900      	cmp	r1, #0
 8005bf8:	d044      	beq.n	8005c84 <_dtoa_r+0x5a4>
 8005bfa:	494e      	ldr	r1, [pc, #312]	; (8005d34 <_dtoa_r+0x654>)
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	f7fa fe45 	bl	800088c <__aeabi_ddiv>
 8005c02:	ec53 2b19 	vmov	r2, r3, d9
 8005c06:	f7fa fb5f 	bl	80002c8 <__aeabi_dsub>
 8005c0a:	9d00      	ldr	r5, [sp, #0]
 8005c0c:	ec41 0b19 	vmov	d9, r0, r1
 8005c10:	4649      	mov	r1, r9
 8005c12:	4640      	mov	r0, r8
 8005c14:	f7fa ffc0 	bl	8000b98 <__aeabi_d2iz>
 8005c18:	4606      	mov	r6, r0
 8005c1a:	f7fa fca3 	bl	8000564 <__aeabi_i2d>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4640      	mov	r0, r8
 8005c24:	4649      	mov	r1, r9
 8005c26:	f7fa fb4f 	bl	80002c8 <__aeabi_dsub>
 8005c2a:	3630      	adds	r6, #48	; 0x30
 8005c2c:	f805 6b01 	strb.w	r6, [r5], #1
 8005c30:	ec53 2b19 	vmov	r2, r3, d9
 8005c34:	4680      	mov	r8, r0
 8005c36:	4689      	mov	r9, r1
 8005c38:	f7fa ff70 	bl	8000b1c <__aeabi_dcmplt>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d164      	bne.n	8005d0a <_dtoa_r+0x62a>
 8005c40:	4642      	mov	r2, r8
 8005c42:	464b      	mov	r3, r9
 8005c44:	4937      	ldr	r1, [pc, #220]	; (8005d24 <_dtoa_r+0x644>)
 8005c46:	2000      	movs	r0, #0
 8005c48:	f7fa fb3e 	bl	80002c8 <__aeabi_dsub>
 8005c4c:	ec53 2b19 	vmov	r2, r3, d9
 8005c50:	f7fa ff64 	bl	8000b1c <__aeabi_dcmplt>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	f040 80b6 	bne.w	8005dc6 <_dtoa_r+0x6e6>
 8005c5a:	9b02      	ldr	r3, [sp, #8]
 8005c5c:	429d      	cmp	r5, r3
 8005c5e:	f43f af7c 	beq.w	8005b5a <_dtoa_r+0x47a>
 8005c62:	4b31      	ldr	r3, [pc, #196]	; (8005d28 <_dtoa_r+0x648>)
 8005c64:	ec51 0b19 	vmov	r0, r1, d9
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f7fa fce5 	bl	8000638 <__aeabi_dmul>
 8005c6e:	4b2e      	ldr	r3, [pc, #184]	; (8005d28 <_dtoa_r+0x648>)
 8005c70:	ec41 0b19 	vmov	d9, r0, r1
 8005c74:	2200      	movs	r2, #0
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f7fa fcdd 	bl	8000638 <__aeabi_dmul>
 8005c7e:	4680      	mov	r8, r0
 8005c80:	4689      	mov	r9, r1
 8005c82:	e7c5      	b.n	8005c10 <_dtoa_r+0x530>
 8005c84:	ec51 0b17 	vmov	r0, r1, d7
 8005c88:	f7fa fcd6 	bl	8000638 <__aeabi_dmul>
 8005c8c:	9b02      	ldr	r3, [sp, #8]
 8005c8e:	9d00      	ldr	r5, [sp, #0]
 8005c90:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c92:	ec41 0b19 	vmov	d9, r0, r1
 8005c96:	4649      	mov	r1, r9
 8005c98:	4640      	mov	r0, r8
 8005c9a:	f7fa ff7d 	bl	8000b98 <__aeabi_d2iz>
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	f7fa fc60 	bl	8000564 <__aeabi_i2d>
 8005ca4:	3630      	adds	r6, #48	; 0x30
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4640      	mov	r0, r8
 8005cac:	4649      	mov	r1, r9
 8005cae:	f7fa fb0b 	bl	80002c8 <__aeabi_dsub>
 8005cb2:	f805 6b01 	strb.w	r6, [r5], #1
 8005cb6:	9b02      	ldr	r3, [sp, #8]
 8005cb8:	429d      	cmp	r5, r3
 8005cba:	4680      	mov	r8, r0
 8005cbc:	4689      	mov	r9, r1
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	d124      	bne.n	8005d0e <_dtoa_r+0x62e>
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <_dtoa_r+0x654>)
 8005cc6:	ec51 0b19 	vmov	r0, r1, d9
 8005cca:	f7fa faff 	bl	80002cc <__adddf3>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	f7fa ff3f 	bl	8000b58 <__aeabi_dcmpgt>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d173      	bne.n	8005dc6 <_dtoa_r+0x6e6>
 8005cde:	ec53 2b19 	vmov	r2, r3, d9
 8005ce2:	4914      	ldr	r1, [pc, #80]	; (8005d34 <_dtoa_r+0x654>)
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f7fa faef 	bl	80002c8 <__aeabi_dsub>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4640      	mov	r0, r8
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	f7fa ff13 	bl	8000b1c <__aeabi_dcmplt>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	f43f af2f 	beq.w	8005b5a <_dtoa_r+0x47a>
 8005cfc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005cfe:	1e6b      	subs	r3, r5, #1
 8005d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d06:	2b30      	cmp	r3, #48	; 0x30
 8005d08:	d0f8      	beq.n	8005cfc <_dtoa_r+0x61c>
 8005d0a:	46bb      	mov	fp, r7
 8005d0c:	e04a      	b.n	8005da4 <_dtoa_r+0x6c4>
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <_dtoa_r+0x648>)
 8005d10:	f7fa fc92 	bl	8000638 <__aeabi_dmul>
 8005d14:	4680      	mov	r8, r0
 8005d16:	4689      	mov	r9, r1
 8005d18:	e7bd      	b.n	8005c96 <_dtoa_r+0x5b6>
 8005d1a:	bf00      	nop
 8005d1c:	08007698 	.word	0x08007698
 8005d20:	08007670 	.word	0x08007670
 8005d24:	3ff00000 	.word	0x3ff00000
 8005d28:	40240000 	.word	0x40240000
 8005d2c:	401c0000 	.word	0x401c0000
 8005d30:	40140000 	.word	0x40140000
 8005d34:	3fe00000 	.word	0x3fe00000
 8005d38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d3c:	9d00      	ldr	r5, [sp, #0]
 8005d3e:	4642      	mov	r2, r8
 8005d40:	464b      	mov	r3, r9
 8005d42:	4630      	mov	r0, r6
 8005d44:	4639      	mov	r1, r7
 8005d46:	f7fa fda1 	bl	800088c <__aeabi_ddiv>
 8005d4a:	f7fa ff25 	bl	8000b98 <__aeabi_d2iz>
 8005d4e:	9001      	str	r0, [sp, #4]
 8005d50:	f7fa fc08 	bl	8000564 <__aeabi_i2d>
 8005d54:	4642      	mov	r2, r8
 8005d56:	464b      	mov	r3, r9
 8005d58:	f7fa fc6e 	bl	8000638 <__aeabi_dmul>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4630      	mov	r0, r6
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa fab0 	bl	80002c8 <__aeabi_dsub>
 8005d68:	9e01      	ldr	r6, [sp, #4]
 8005d6a:	9f04      	ldr	r7, [sp, #16]
 8005d6c:	3630      	adds	r6, #48	; 0x30
 8005d6e:	f805 6b01 	strb.w	r6, [r5], #1
 8005d72:	9e00      	ldr	r6, [sp, #0]
 8005d74:	1bae      	subs	r6, r5, r6
 8005d76:	42b7      	cmp	r7, r6
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	d134      	bne.n	8005de8 <_dtoa_r+0x708>
 8005d7e:	f7fa faa5 	bl	80002cc <__adddf3>
 8005d82:	4642      	mov	r2, r8
 8005d84:	464b      	mov	r3, r9
 8005d86:	4606      	mov	r6, r0
 8005d88:	460f      	mov	r7, r1
 8005d8a:	f7fa fee5 	bl	8000b58 <__aeabi_dcmpgt>
 8005d8e:	b9c8      	cbnz	r0, 8005dc4 <_dtoa_r+0x6e4>
 8005d90:	4642      	mov	r2, r8
 8005d92:	464b      	mov	r3, r9
 8005d94:	4630      	mov	r0, r6
 8005d96:	4639      	mov	r1, r7
 8005d98:	f7fa feb6 	bl	8000b08 <__aeabi_dcmpeq>
 8005d9c:	b110      	cbz	r0, 8005da4 <_dtoa_r+0x6c4>
 8005d9e:	9b01      	ldr	r3, [sp, #4]
 8005da0:	07db      	lsls	r3, r3, #31
 8005da2:	d40f      	bmi.n	8005dc4 <_dtoa_r+0x6e4>
 8005da4:	4651      	mov	r1, sl
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 fbcc 	bl	8006544 <_Bfree>
 8005dac:	2300      	movs	r3, #0
 8005dae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005db0:	702b      	strb	r3, [r5, #0]
 8005db2:	f10b 0301 	add.w	r3, fp, #1
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f43f ace2 	beq.w	8005784 <_dtoa_r+0xa4>
 8005dc0:	601d      	str	r5, [r3, #0]
 8005dc2:	e4df      	b.n	8005784 <_dtoa_r+0xa4>
 8005dc4:	465f      	mov	r7, fp
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	461d      	mov	r5, r3
 8005dca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dce:	2a39      	cmp	r2, #57	; 0x39
 8005dd0:	d106      	bne.n	8005de0 <_dtoa_r+0x700>
 8005dd2:	9a00      	ldr	r2, [sp, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d1f7      	bne.n	8005dc8 <_dtoa_r+0x6e8>
 8005dd8:	9900      	ldr	r1, [sp, #0]
 8005dda:	2230      	movs	r2, #48	; 0x30
 8005ddc:	3701      	adds	r7, #1
 8005dde:	700a      	strb	r2, [r1, #0]
 8005de0:	781a      	ldrb	r2, [r3, #0]
 8005de2:	3201      	adds	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	e790      	b.n	8005d0a <_dtoa_r+0x62a>
 8005de8:	4ba3      	ldr	r3, [pc, #652]	; (8006078 <_dtoa_r+0x998>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	f7fa fc24 	bl	8000638 <__aeabi_dmul>
 8005df0:	2200      	movs	r2, #0
 8005df2:	2300      	movs	r3, #0
 8005df4:	4606      	mov	r6, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	f7fa fe86 	bl	8000b08 <__aeabi_dcmpeq>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d09e      	beq.n	8005d3e <_dtoa_r+0x65e>
 8005e00:	e7d0      	b.n	8005da4 <_dtoa_r+0x6c4>
 8005e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	f000 80ca 	beq.w	8005f9e <_dtoa_r+0x8be>
 8005e0a:	9a07      	ldr	r2, [sp, #28]
 8005e0c:	2a01      	cmp	r2, #1
 8005e0e:	f300 80ad 	bgt.w	8005f6c <_dtoa_r+0x88c>
 8005e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e14:	2a00      	cmp	r2, #0
 8005e16:	f000 80a5 	beq.w	8005f64 <_dtoa_r+0x884>
 8005e1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e1e:	9e08      	ldr	r6, [sp, #32]
 8005e20:	9d05      	ldr	r5, [sp, #20]
 8005e22:	9a05      	ldr	r2, [sp, #20]
 8005e24:	441a      	add	r2, r3
 8005e26:	9205      	str	r2, [sp, #20]
 8005e28:	9a06      	ldr	r2, [sp, #24]
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	441a      	add	r2, r3
 8005e2e:	4620      	mov	r0, r4
 8005e30:	9206      	str	r2, [sp, #24]
 8005e32:	f000 fc3d 	bl	80066b0 <__i2b>
 8005e36:	4607      	mov	r7, r0
 8005e38:	b165      	cbz	r5, 8005e54 <_dtoa_r+0x774>
 8005e3a:	9b06      	ldr	r3, [sp, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dd09      	ble.n	8005e54 <_dtoa_r+0x774>
 8005e40:	42ab      	cmp	r3, r5
 8005e42:	9a05      	ldr	r2, [sp, #20]
 8005e44:	bfa8      	it	ge
 8005e46:	462b      	movge	r3, r5
 8005e48:	1ad2      	subs	r2, r2, r3
 8005e4a:	9205      	str	r2, [sp, #20]
 8005e4c:	9a06      	ldr	r2, [sp, #24]
 8005e4e:	1aed      	subs	r5, r5, r3
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	9306      	str	r3, [sp, #24]
 8005e54:	9b08      	ldr	r3, [sp, #32]
 8005e56:	b1f3      	cbz	r3, 8005e96 <_dtoa_r+0x7b6>
 8005e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80a3 	beq.w	8005fa6 <_dtoa_r+0x8c6>
 8005e60:	2e00      	cmp	r6, #0
 8005e62:	dd10      	ble.n	8005e86 <_dtoa_r+0x7a6>
 8005e64:	4639      	mov	r1, r7
 8005e66:	4632      	mov	r2, r6
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f000 fce1 	bl	8006830 <__pow5mult>
 8005e6e:	4652      	mov	r2, sl
 8005e70:	4601      	mov	r1, r0
 8005e72:	4607      	mov	r7, r0
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 fc31 	bl	80066dc <__multiply>
 8005e7a:	4651      	mov	r1, sl
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 fb60 	bl	8006544 <_Bfree>
 8005e84:	46c2      	mov	sl, r8
 8005e86:	9b08      	ldr	r3, [sp, #32]
 8005e88:	1b9a      	subs	r2, r3, r6
 8005e8a:	d004      	beq.n	8005e96 <_dtoa_r+0x7b6>
 8005e8c:	4651      	mov	r1, sl
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 fcce 	bl	8006830 <__pow5mult>
 8005e94:	4682      	mov	sl, r0
 8005e96:	2101      	movs	r1, #1
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 fc09 	bl	80066b0 <__i2b>
 8005e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	f340 8081 	ble.w	8005faa <_dtoa_r+0x8ca>
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4601      	mov	r1, r0
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 fcbf 	bl	8006830 <__pow5mult>
 8005eb2:	9b07      	ldr	r3, [sp, #28]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	dd7a      	ble.n	8005fb0 <_dtoa_r+0x8d0>
 8005eba:	f04f 0800 	mov.w	r8, #0
 8005ebe:	6933      	ldr	r3, [r6, #16]
 8005ec0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ec4:	6918      	ldr	r0, [r3, #16]
 8005ec6:	f000 fba5 	bl	8006614 <__hi0bits>
 8005eca:	f1c0 0020 	rsb	r0, r0, #32
 8005ece:	9b06      	ldr	r3, [sp, #24]
 8005ed0:	4418      	add	r0, r3
 8005ed2:	f010 001f 	ands.w	r0, r0, #31
 8005ed6:	f000 8094 	beq.w	8006002 <_dtoa_r+0x922>
 8005eda:	f1c0 0320 	rsb	r3, r0, #32
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	f340 8085 	ble.w	8005fee <_dtoa_r+0x90e>
 8005ee4:	9b05      	ldr	r3, [sp, #20]
 8005ee6:	f1c0 001c 	rsb	r0, r0, #28
 8005eea:	4403      	add	r3, r0
 8005eec:	9305      	str	r3, [sp, #20]
 8005eee:	9b06      	ldr	r3, [sp, #24]
 8005ef0:	4403      	add	r3, r0
 8005ef2:	4405      	add	r5, r0
 8005ef4:	9306      	str	r3, [sp, #24]
 8005ef6:	9b05      	ldr	r3, [sp, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dd05      	ble.n	8005f08 <_dtoa_r+0x828>
 8005efc:	4651      	mov	r1, sl
 8005efe:	461a      	mov	r2, r3
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 fcef 	bl	80068e4 <__lshift>
 8005f06:	4682      	mov	sl, r0
 8005f08:	9b06      	ldr	r3, [sp, #24]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	dd05      	ble.n	8005f1a <_dtoa_r+0x83a>
 8005f0e:	4631      	mov	r1, r6
 8005f10:	461a      	mov	r2, r3
 8005f12:	4620      	mov	r0, r4
 8005f14:	f000 fce6 	bl	80068e4 <__lshift>
 8005f18:	4606      	mov	r6, r0
 8005f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d072      	beq.n	8006006 <_dtoa_r+0x926>
 8005f20:	4631      	mov	r1, r6
 8005f22:	4650      	mov	r0, sl
 8005f24:	f000 fd4a 	bl	80069bc <__mcmp>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	da6c      	bge.n	8006006 <_dtoa_r+0x926>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4651      	mov	r1, sl
 8005f30:	220a      	movs	r2, #10
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 fb28 	bl	8006588 <__multadd>
 8005f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f3e:	4682      	mov	sl, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 81b0 	beq.w	80062a6 <_dtoa_r+0xbc6>
 8005f46:	2300      	movs	r3, #0
 8005f48:	4639      	mov	r1, r7
 8005f4a:	220a      	movs	r2, #10
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 fb1b 	bl	8006588 <__multadd>
 8005f52:	9b01      	ldr	r3, [sp, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	4607      	mov	r7, r0
 8005f58:	f300 8096 	bgt.w	8006088 <_dtoa_r+0x9a8>
 8005f5c:	9b07      	ldr	r3, [sp, #28]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	dc59      	bgt.n	8006016 <_dtoa_r+0x936>
 8005f62:	e091      	b.n	8006088 <_dtoa_r+0x9a8>
 8005f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f6a:	e758      	b.n	8005e1e <_dtoa_r+0x73e>
 8005f6c:	9b04      	ldr	r3, [sp, #16]
 8005f6e:	1e5e      	subs	r6, r3, #1
 8005f70:	9b08      	ldr	r3, [sp, #32]
 8005f72:	42b3      	cmp	r3, r6
 8005f74:	bfbf      	itttt	lt
 8005f76:	9b08      	ldrlt	r3, [sp, #32]
 8005f78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005f7a:	9608      	strlt	r6, [sp, #32]
 8005f7c:	1af3      	sublt	r3, r6, r3
 8005f7e:	bfb4      	ite	lt
 8005f80:	18d2      	addlt	r2, r2, r3
 8005f82:	1b9e      	subge	r6, r3, r6
 8005f84:	9b04      	ldr	r3, [sp, #16]
 8005f86:	bfbc      	itt	lt
 8005f88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005f8a:	2600      	movlt	r6, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bfb7      	itett	lt
 8005f90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005f94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005f98:	1a9d      	sublt	r5, r3, r2
 8005f9a:	2300      	movlt	r3, #0
 8005f9c:	e741      	b.n	8005e22 <_dtoa_r+0x742>
 8005f9e:	9e08      	ldr	r6, [sp, #32]
 8005fa0:	9d05      	ldr	r5, [sp, #20]
 8005fa2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005fa4:	e748      	b.n	8005e38 <_dtoa_r+0x758>
 8005fa6:	9a08      	ldr	r2, [sp, #32]
 8005fa8:	e770      	b.n	8005e8c <_dtoa_r+0x7ac>
 8005faa:	9b07      	ldr	r3, [sp, #28]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	dc19      	bgt.n	8005fe4 <_dtoa_r+0x904>
 8005fb0:	9b02      	ldr	r3, [sp, #8]
 8005fb2:	b9bb      	cbnz	r3, 8005fe4 <_dtoa_r+0x904>
 8005fb4:	9b03      	ldr	r3, [sp, #12]
 8005fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fba:	b99b      	cbnz	r3, 8005fe4 <_dtoa_r+0x904>
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fc2:	0d1b      	lsrs	r3, r3, #20
 8005fc4:	051b      	lsls	r3, r3, #20
 8005fc6:	b183      	cbz	r3, 8005fea <_dtoa_r+0x90a>
 8005fc8:	9b05      	ldr	r3, [sp, #20]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	9305      	str	r3, [sp, #20]
 8005fce:	9b06      	ldr	r3, [sp, #24]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	9306      	str	r3, [sp, #24]
 8005fd4:	f04f 0801 	mov.w	r8, #1
 8005fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f47f af6f 	bne.w	8005ebe <_dtoa_r+0x7de>
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	e774      	b.n	8005ece <_dtoa_r+0x7ee>
 8005fe4:	f04f 0800 	mov.w	r8, #0
 8005fe8:	e7f6      	b.n	8005fd8 <_dtoa_r+0x8f8>
 8005fea:	4698      	mov	r8, r3
 8005fec:	e7f4      	b.n	8005fd8 <_dtoa_r+0x8f8>
 8005fee:	d082      	beq.n	8005ef6 <_dtoa_r+0x816>
 8005ff0:	9a05      	ldr	r2, [sp, #20]
 8005ff2:	331c      	adds	r3, #28
 8005ff4:	441a      	add	r2, r3
 8005ff6:	9205      	str	r2, [sp, #20]
 8005ff8:	9a06      	ldr	r2, [sp, #24]
 8005ffa:	441a      	add	r2, r3
 8005ffc:	441d      	add	r5, r3
 8005ffe:	9206      	str	r2, [sp, #24]
 8006000:	e779      	b.n	8005ef6 <_dtoa_r+0x816>
 8006002:	4603      	mov	r3, r0
 8006004:	e7f4      	b.n	8005ff0 <_dtoa_r+0x910>
 8006006:	9b04      	ldr	r3, [sp, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	dc37      	bgt.n	800607c <_dtoa_r+0x99c>
 800600c:	9b07      	ldr	r3, [sp, #28]
 800600e:	2b02      	cmp	r3, #2
 8006010:	dd34      	ble.n	800607c <_dtoa_r+0x99c>
 8006012:	9b04      	ldr	r3, [sp, #16]
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	9b01      	ldr	r3, [sp, #4]
 8006018:	b963      	cbnz	r3, 8006034 <_dtoa_r+0x954>
 800601a:	4631      	mov	r1, r6
 800601c:	2205      	movs	r2, #5
 800601e:	4620      	mov	r0, r4
 8006020:	f000 fab2 	bl	8006588 <__multadd>
 8006024:	4601      	mov	r1, r0
 8006026:	4606      	mov	r6, r0
 8006028:	4650      	mov	r0, sl
 800602a:	f000 fcc7 	bl	80069bc <__mcmp>
 800602e:	2800      	cmp	r0, #0
 8006030:	f73f adbb 	bgt.w	8005baa <_dtoa_r+0x4ca>
 8006034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006036:	9d00      	ldr	r5, [sp, #0]
 8006038:	ea6f 0b03 	mvn.w	fp, r3
 800603c:	f04f 0800 	mov.w	r8, #0
 8006040:	4631      	mov	r1, r6
 8006042:	4620      	mov	r0, r4
 8006044:	f000 fa7e 	bl	8006544 <_Bfree>
 8006048:	2f00      	cmp	r7, #0
 800604a:	f43f aeab 	beq.w	8005da4 <_dtoa_r+0x6c4>
 800604e:	f1b8 0f00 	cmp.w	r8, #0
 8006052:	d005      	beq.n	8006060 <_dtoa_r+0x980>
 8006054:	45b8      	cmp	r8, r7
 8006056:	d003      	beq.n	8006060 <_dtoa_r+0x980>
 8006058:	4641      	mov	r1, r8
 800605a:	4620      	mov	r0, r4
 800605c:	f000 fa72 	bl	8006544 <_Bfree>
 8006060:	4639      	mov	r1, r7
 8006062:	4620      	mov	r0, r4
 8006064:	f000 fa6e 	bl	8006544 <_Bfree>
 8006068:	e69c      	b.n	8005da4 <_dtoa_r+0x6c4>
 800606a:	2600      	movs	r6, #0
 800606c:	4637      	mov	r7, r6
 800606e:	e7e1      	b.n	8006034 <_dtoa_r+0x954>
 8006070:	46bb      	mov	fp, r7
 8006072:	4637      	mov	r7, r6
 8006074:	e599      	b.n	8005baa <_dtoa_r+0x4ca>
 8006076:	bf00      	nop
 8006078:	40240000 	.word	0x40240000
 800607c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 80c8 	beq.w	8006214 <_dtoa_r+0xb34>
 8006084:	9b04      	ldr	r3, [sp, #16]
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	2d00      	cmp	r5, #0
 800608a:	dd05      	ble.n	8006098 <_dtoa_r+0x9b8>
 800608c:	4639      	mov	r1, r7
 800608e:	462a      	mov	r2, r5
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fc27 	bl	80068e4 <__lshift>
 8006096:	4607      	mov	r7, r0
 8006098:	f1b8 0f00 	cmp.w	r8, #0
 800609c:	d05b      	beq.n	8006156 <_dtoa_r+0xa76>
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 fa0f 	bl	80064c4 <_Balloc>
 80060a6:	4605      	mov	r5, r0
 80060a8:	b928      	cbnz	r0, 80060b6 <_dtoa_r+0x9d6>
 80060aa:	4b83      	ldr	r3, [pc, #524]	; (80062b8 <_dtoa_r+0xbd8>)
 80060ac:	4602      	mov	r2, r0
 80060ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80060b2:	f7ff bb2e 	b.w	8005712 <_dtoa_r+0x32>
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	3202      	adds	r2, #2
 80060ba:	0092      	lsls	r2, r2, #2
 80060bc:	f107 010c 	add.w	r1, r7, #12
 80060c0:	300c      	adds	r0, #12
 80060c2:	f001 f801 	bl	80070c8 <memcpy>
 80060c6:	2201      	movs	r2, #1
 80060c8:	4629      	mov	r1, r5
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 fc0a 	bl	80068e4 <__lshift>
 80060d0:	9b00      	ldr	r3, [sp, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	9304      	str	r3, [sp, #16]
 80060d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060da:	4413      	add	r3, r2
 80060dc:	9308      	str	r3, [sp, #32]
 80060de:	9b02      	ldr	r3, [sp, #8]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	46b8      	mov	r8, r7
 80060e6:	9306      	str	r3, [sp, #24]
 80060e8:	4607      	mov	r7, r0
 80060ea:	9b04      	ldr	r3, [sp, #16]
 80060ec:	4631      	mov	r1, r6
 80060ee:	3b01      	subs	r3, #1
 80060f0:	4650      	mov	r0, sl
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	f7ff fa6b 	bl	80055ce <quorem>
 80060f8:	4641      	mov	r1, r8
 80060fa:	9002      	str	r0, [sp, #8]
 80060fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006100:	4650      	mov	r0, sl
 8006102:	f000 fc5b 	bl	80069bc <__mcmp>
 8006106:	463a      	mov	r2, r7
 8006108:	9005      	str	r0, [sp, #20]
 800610a:	4631      	mov	r1, r6
 800610c:	4620      	mov	r0, r4
 800610e:	f000 fc71 	bl	80069f4 <__mdiff>
 8006112:	68c2      	ldr	r2, [r0, #12]
 8006114:	4605      	mov	r5, r0
 8006116:	bb02      	cbnz	r2, 800615a <_dtoa_r+0xa7a>
 8006118:	4601      	mov	r1, r0
 800611a:	4650      	mov	r0, sl
 800611c:	f000 fc4e 	bl	80069bc <__mcmp>
 8006120:	4602      	mov	r2, r0
 8006122:	4629      	mov	r1, r5
 8006124:	4620      	mov	r0, r4
 8006126:	9209      	str	r2, [sp, #36]	; 0x24
 8006128:	f000 fa0c 	bl	8006544 <_Bfree>
 800612c:	9b07      	ldr	r3, [sp, #28]
 800612e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006130:	9d04      	ldr	r5, [sp, #16]
 8006132:	ea43 0102 	orr.w	r1, r3, r2
 8006136:	9b06      	ldr	r3, [sp, #24]
 8006138:	4319      	orrs	r1, r3
 800613a:	d110      	bne.n	800615e <_dtoa_r+0xa7e>
 800613c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006140:	d029      	beq.n	8006196 <_dtoa_r+0xab6>
 8006142:	9b05      	ldr	r3, [sp, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	dd02      	ble.n	800614e <_dtoa_r+0xa6e>
 8006148:	9b02      	ldr	r3, [sp, #8]
 800614a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800614e:	9b01      	ldr	r3, [sp, #4]
 8006150:	f883 9000 	strb.w	r9, [r3]
 8006154:	e774      	b.n	8006040 <_dtoa_r+0x960>
 8006156:	4638      	mov	r0, r7
 8006158:	e7ba      	b.n	80060d0 <_dtoa_r+0x9f0>
 800615a:	2201      	movs	r2, #1
 800615c:	e7e1      	b.n	8006122 <_dtoa_r+0xa42>
 800615e:	9b05      	ldr	r3, [sp, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	db04      	blt.n	800616e <_dtoa_r+0xa8e>
 8006164:	9907      	ldr	r1, [sp, #28]
 8006166:	430b      	orrs	r3, r1
 8006168:	9906      	ldr	r1, [sp, #24]
 800616a:	430b      	orrs	r3, r1
 800616c:	d120      	bne.n	80061b0 <_dtoa_r+0xad0>
 800616e:	2a00      	cmp	r2, #0
 8006170:	dded      	ble.n	800614e <_dtoa_r+0xa6e>
 8006172:	4651      	mov	r1, sl
 8006174:	2201      	movs	r2, #1
 8006176:	4620      	mov	r0, r4
 8006178:	f000 fbb4 	bl	80068e4 <__lshift>
 800617c:	4631      	mov	r1, r6
 800617e:	4682      	mov	sl, r0
 8006180:	f000 fc1c 	bl	80069bc <__mcmp>
 8006184:	2800      	cmp	r0, #0
 8006186:	dc03      	bgt.n	8006190 <_dtoa_r+0xab0>
 8006188:	d1e1      	bne.n	800614e <_dtoa_r+0xa6e>
 800618a:	f019 0f01 	tst.w	r9, #1
 800618e:	d0de      	beq.n	800614e <_dtoa_r+0xa6e>
 8006190:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006194:	d1d8      	bne.n	8006148 <_dtoa_r+0xa68>
 8006196:	9a01      	ldr	r2, [sp, #4]
 8006198:	2339      	movs	r3, #57	; 0x39
 800619a:	7013      	strb	r3, [r2, #0]
 800619c:	462b      	mov	r3, r5
 800619e:	461d      	mov	r5, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80061a6:	2a39      	cmp	r2, #57	; 0x39
 80061a8:	d06c      	beq.n	8006284 <_dtoa_r+0xba4>
 80061aa:	3201      	adds	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	e747      	b.n	8006040 <_dtoa_r+0x960>
 80061b0:	2a00      	cmp	r2, #0
 80061b2:	dd07      	ble.n	80061c4 <_dtoa_r+0xae4>
 80061b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80061b8:	d0ed      	beq.n	8006196 <_dtoa_r+0xab6>
 80061ba:	9a01      	ldr	r2, [sp, #4]
 80061bc:	f109 0301 	add.w	r3, r9, #1
 80061c0:	7013      	strb	r3, [r2, #0]
 80061c2:	e73d      	b.n	8006040 <_dtoa_r+0x960>
 80061c4:	9b04      	ldr	r3, [sp, #16]
 80061c6:	9a08      	ldr	r2, [sp, #32]
 80061c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d043      	beq.n	8006258 <_dtoa_r+0xb78>
 80061d0:	4651      	mov	r1, sl
 80061d2:	2300      	movs	r3, #0
 80061d4:	220a      	movs	r2, #10
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 f9d6 	bl	8006588 <__multadd>
 80061dc:	45b8      	cmp	r8, r7
 80061de:	4682      	mov	sl, r0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	f04f 020a 	mov.w	r2, #10
 80061e8:	4641      	mov	r1, r8
 80061ea:	4620      	mov	r0, r4
 80061ec:	d107      	bne.n	80061fe <_dtoa_r+0xb1e>
 80061ee:	f000 f9cb 	bl	8006588 <__multadd>
 80061f2:	4680      	mov	r8, r0
 80061f4:	4607      	mov	r7, r0
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	3301      	adds	r3, #1
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	e775      	b.n	80060ea <_dtoa_r+0xa0a>
 80061fe:	f000 f9c3 	bl	8006588 <__multadd>
 8006202:	4639      	mov	r1, r7
 8006204:	4680      	mov	r8, r0
 8006206:	2300      	movs	r3, #0
 8006208:	220a      	movs	r2, #10
 800620a:	4620      	mov	r0, r4
 800620c:	f000 f9bc 	bl	8006588 <__multadd>
 8006210:	4607      	mov	r7, r0
 8006212:	e7f0      	b.n	80061f6 <_dtoa_r+0xb16>
 8006214:	9b04      	ldr	r3, [sp, #16]
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	9d00      	ldr	r5, [sp, #0]
 800621a:	4631      	mov	r1, r6
 800621c:	4650      	mov	r0, sl
 800621e:	f7ff f9d6 	bl	80055ce <quorem>
 8006222:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006226:	9b00      	ldr	r3, [sp, #0]
 8006228:	f805 9b01 	strb.w	r9, [r5], #1
 800622c:	1aea      	subs	r2, r5, r3
 800622e:	9b01      	ldr	r3, [sp, #4]
 8006230:	4293      	cmp	r3, r2
 8006232:	dd07      	ble.n	8006244 <_dtoa_r+0xb64>
 8006234:	4651      	mov	r1, sl
 8006236:	2300      	movs	r3, #0
 8006238:	220a      	movs	r2, #10
 800623a:	4620      	mov	r0, r4
 800623c:	f000 f9a4 	bl	8006588 <__multadd>
 8006240:	4682      	mov	sl, r0
 8006242:	e7ea      	b.n	800621a <_dtoa_r+0xb3a>
 8006244:	9b01      	ldr	r3, [sp, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	bfc8      	it	gt
 800624a:	461d      	movgt	r5, r3
 800624c:	9b00      	ldr	r3, [sp, #0]
 800624e:	bfd8      	it	le
 8006250:	2501      	movle	r5, #1
 8006252:	441d      	add	r5, r3
 8006254:	f04f 0800 	mov.w	r8, #0
 8006258:	4651      	mov	r1, sl
 800625a:	2201      	movs	r2, #1
 800625c:	4620      	mov	r0, r4
 800625e:	f000 fb41 	bl	80068e4 <__lshift>
 8006262:	4631      	mov	r1, r6
 8006264:	4682      	mov	sl, r0
 8006266:	f000 fba9 	bl	80069bc <__mcmp>
 800626a:	2800      	cmp	r0, #0
 800626c:	dc96      	bgt.n	800619c <_dtoa_r+0xabc>
 800626e:	d102      	bne.n	8006276 <_dtoa_r+0xb96>
 8006270:	f019 0f01 	tst.w	r9, #1
 8006274:	d192      	bne.n	800619c <_dtoa_r+0xabc>
 8006276:	462b      	mov	r3, r5
 8006278:	461d      	mov	r5, r3
 800627a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800627e:	2a30      	cmp	r2, #48	; 0x30
 8006280:	d0fa      	beq.n	8006278 <_dtoa_r+0xb98>
 8006282:	e6dd      	b.n	8006040 <_dtoa_r+0x960>
 8006284:	9a00      	ldr	r2, [sp, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d189      	bne.n	800619e <_dtoa_r+0xabe>
 800628a:	f10b 0b01 	add.w	fp, fp, #1
 800628e:	2331      	movs	r3, #49	; 0x31
 8006290:	e796      	b.n	80061c0 <_dtoa_r+0xae0>
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <_dtoa_r+0xbdc>)
 8006294:	f7ff ba99 	b.w	80057ca <_dtoa_r+0xea>
 8006298:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800629a:	2b00      	cmp	r3, #0
 800629c:	f47f aa6d 	bne.w	800577a <_dtoa_r+0x9a>
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <_dtoa_r+0xbe0>)
 80062a2:	f7ff ba92 	b.w	80057ca <_dtoa_r+0xea>
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	dcb5      	bgt.n	8006218 <_dtoa_r+0xb38>
 80062ac:	9b07      	ldr	r3, [sp, #28]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	f73f aeb1 	bgt.w	8006016 <_dtoa_r+0x936>
 80062b4:	e7b0      	b.n	8006218 <_dtoa_r+0xb38>
 80062b6:	bf00      	nop
 80062b8:	08007604 	.word	0x08007604
 80062bc:	08007564 	.word	0x08007564
 80062c0:	08007588 	.word	0x08007588

080062c4 <_free_r>:
 80062c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062c6:	2900      	cmp	r1, #0
 80062c8:	d044      	beq.n	8006354 <_free_r+0x90>
 80062ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ce:	9001      	str	r0, [sp, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f1a1 0404 	sub.w	r4, r1, #4
 80062d6:	bfb8      	it	lt
 80062d8:	18e4      	addlt	r4, r4, r3
 80062da:	f000 f8e7 	bl	80064ac <__malloc_lock>
 80062de:	4a1e      	ldr	r2, [pc, #120]	; (8006358 <_free_r+0x94>)
 80062e0:	9801      	ldr	r0, [sp, #4]
 80062e2:	6813      	ldr	r3, [r2, #0]
 80062e4:	b933      	cbnz	r3, 80062f4 <_free_r+0x30>
 80062e6:	6063      	str	r3, [r4, #4]
 80062e8:	6014      	str	r4, [r2, #0]
 80062ea:	b003      	add	sp, #12
 80062ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062f0:	f000 b8e2 	b.w	80064b8 <__malloc_unlock>
 80062f4:	42a3      	cmp	r3, r4
 80062f6:	d908      	bls.n	800630a <_free_r+0x46>
 80062f8:	6825      	ldr	r5, [r4, #0]
 80062fa:	1961      	adds	r1, r4, r5
 80062fc:	428b      	cmp	r3, r1
 80062fe:	bf01      	itttt	eq
 8006300:	6819      	ldreq	r1, [r3, #0]
 8006302:	685b      	ldreq	r3, [r3, #4]
 8006304:	1949      	addeq	r1, r1, r5
 8006306:	6021      	streq	r1, [r4, #0]
 8006308:	e7ed      	b.n	80062e6 <_free_r+0x22>
 800630a:	461a      	mov	r2, r3
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	b10b      	cbz	r3, 8006314 <_free_r+0x50>
 8006310:	42a3      	cmp	r3, r4
 8006312:	d9fa      	bls.n	800630a <_free_r+0x46>
 8006314:	6811      	ldr	r1, [r2, #0]
 8006316:	1855      	adds	r5, r2, r1
 8006318:	42a5      	cmp	r5, r4
 800631a:	d10b      	bne.n	8006334 <_free_r+0x70>
 800631c:	6824      	ldr	r4, [r4, #0]
 800631e:	4421      	add	r1, r4
 8006320:	1854      	adds	r4, r2, r1
 8006322:	42a3      	cmp	r3, r4
 8006324:	6011      	str	r1, [r2, #0]
 8006326:	d1e0      	bne.n	80062ea <_free_r+0x26>
 8006328:	681c      	ldr	r4, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	6053      	str	r3, [r2, #4]
 800632e:	440c      	add	r4, r1
 8006330:	6014      	str	r4, [r2, #0]
 8006332:	e7da      	b.n	80062ea <_free_r+0x26>
 8006334:	d902      	bls.n	800633c <_free_r+0x78>
 8006336:	230c      	movs	r3, #12
 8006338:	6003      	str	r3, [r0, #0]
 800633a:	e7d6      	b.n	80062ea <_free_r+0x26>
 800633c:	6825      	ldr	r5, [r4, #0]
 800633e:	1961      	adds	r1, r4, r5
 8006340:	428b      	cmp	r3, r1
 8006342:	bf04      	itt	eq
 8006344:	6819      	ldreq	r1, [r3, #0]
 8006346:	685b      	ldreq	r3, [r3, #4]
 8006348:	6063      	str	r3, [r4, #4]
 800634a:	bf04      	itt	eq
 800634c:	1949      	addeq	r1, r1, r5
 800634e:	6021      	streq	r1, [r4, #0]
 8006350:	6054      	str	r4, [r2, #4]
 8006352:	e7ca      	b.n	80062ea <_free_r+0x26>
 8006354:	b003      	add	sp, #12
 8006356:	bd30      	pop	{r4, r5, pc}
 8006358:	20000580 	.word	0x20000580

0800635c <malloc>:
 800635c:	4b02      	ldr	r3, [pc, #8]	; (8006368 <malloc+0xc>)
 800635e:	4601      	mov	r1, r0
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	f000 b823 	b.w	80063ac <_malloc_r>
 8006366:	bf00      	nop
 8006368:	20000064 	.word	0x20000064

0800636c <sbrk_aligned>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	4e0e      	ldr	r6, [pc, #56]	; (80063a8 <sbrk_aligned+0x3c>)
 8006370:	460c      	mov	r4, r1
 8006372:	6831      	ldr	r1, [r6, #0]
 8006374:	4605      	mov	r5, r0
 8006376:	b911      	cbnz	r1, 800637e <sbrk_aligned+0x12>
 8006378:	f000 fe96 	bl	80070a8 <_sbrk_r>
 800637c:	6030      	str	r0, [r6, #0]
 800637e:	4621      	mov	r1, r4
 8006380:	4628      	mov	r0, r5
 8006382:	f000 fe91 	bl	80070a8 <_sbrk_r>
 8006386:	1c43      	adds	r3, r0, #1
 8006388:	d00a      	beq.n	80063a0 <sbrk_aligned+0x34>
 800638a:	1cc4      	adds	r4, r0, #3
 800638c:	f024 0403 	bic.w	r4, r4, #3
 8006390:	42a0      	cmp	r0, r4
 8006392:	d007      	beq.n	80063a4 <sbrk_aligned+0x38>
 8006394:	1a21      	subs	r1, r4, r0
 8006396:	4628      	mov	r0, r5
 8006398:	f000 fe86 	bl	80070a8 <_sbrk_r>
 800639c:	3001      	adds	r0, #1
 800639e:	d101      	bne.n	80063a4 <sbrk_aligned+0x38>
 80063a0:	f04f 34ff 	mov.w	r4, #4294967295
 80063a4:	4620      	mov	r0, r4
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
 80063a8:	20000584 	.word	0x20000584

080063ac <_malloc_r>:
 80063ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b0:	1ccd      	adds	r5, r1, #3
 80063b2:	f025 0503 	bic.w	r5, r5, #3
 80063b6:	3508      	adds	r5, #8
 80063b8:	2d0c      	cmp	r5, #12
 80063ba:	bf38      	it	cc
 80063bc:	250c      	movcc	r5, #12
 80063be:	2d00      	cmp	r5, #0
 80063c0:	4607      	mov	r7, r0
 80063c2:	db01      	blt.n	80063c8 <_malloc_r+0x1c>
 80063c4:	42a9      	cmp	r1, r5
 80063c6:	d905      	bls.n	80063d4 <_malloc_r+0x28>
 80063c8:	230c      	movs	r3, #12
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	2600      	movs	r6, #0
 80063ce:	4630      	mov	r0, r6
 80063d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80064a8 <_malloc_r+0xfc>
 80063d8:	f000 f868 	bl	80064ac <__malloc_lock>
 80063dc:	f8d8 3000 	ldr.w	r3, [r8]
 80063e0:	461c      	mov	r4, r3
 80063e2:	bb5c      	cbnz	r4, 800643c <_malloc_r+0x90>
 80063e4:	4629      	mov	r1, r5
 80063e6:	4638      	mov	r0, r7
 80063e8:	f7ff ffc0 	bl	800636c <sbrk_aligned>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	4604      	mov	r4, r0
 80063f0:	d155      	bne.n	800649e <_malloc_r+0xf2>
 80063f2:	f8d8 4000 	ldr.w	r4, [r8]
 80063f6:	4626      	mov	r6, r4
 80063f8:	2e00      	cmp	r6, #0
 80063fa:	d145      	bne.n	8006488 <_malloc_r+0xdc>
 80063fc:	2c00      	cmp	r4, #0
 80063fe:	d048      	beq.n	8006492 <_malloc_r+0xe6>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	4631      	mov	r1, r6
 8006404:	4638      	mov	r0, r7
 8006406:	eb04 0903 	add.w	r9, r4, r3
 800640a:	f000 fe4d 	bl	80070a8 <_sbrk_r>
 800640e:	4581      	cmp	r9, r0
 8006410:	d13f      	bne.n	8006492 <_malloc_r+0xe6>
 8006412:	6821      	ldr	r1, [r4, #0]
 8006414:	1a6d      	subs	r5, r5, r1
 8006416:	4629      	mov	r1, r5
 8006418:	4638      	mov	r0, r7
 800641a:	f7ff ffa7 	bl	800636c <sbrk_aligned>
 800641e:	3001      	adds	r0, #1
 8006420:	d037      	beq.n	8006492 <_malloc_r+0xe6>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	442b      	add	r3, r5
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	f8d8 3000 	ldr.w	r3, [r8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d038      	beq.n	80064a2 <_malloc_r+0xf6>
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	42a2      	cmp	r2, r4
 8006434:	d12b      	bne.n	800648e <_malloc_r+0xe2>
 8006436:	2200      	movs	r2, #0
 8006438:	605a      	str	r2, [r3, #4]
 800643a:	e00f      	b.n	800645c <_malloc_r+0xb0>
 800643c:	6822      	ldr	r2, [r4, #0]
 800643e:	1b52      	subs	r2, r2, r5
 8006440:	d41f      	bmi.n	8006482 <_malloc_r+0xd6>
 8006442:	2a0b      	cmp	r2, #11
 8006444:	d917      	bls.n	8006476 <_malloc_r+0xca>
 8006446:	1961      	adds	r1, r4, r5
 8006448:	42a3      	cmp	r3, r4
 800644a:	6025      	str	r5, [r4, #0]
 800644c:	bf18      	it	ne
 800644e:	6059      	strne	r1, [r3, #4]
 8006450:	6863      	ldr	r3, [r4, #4]
 8006452:	bf08      	it	eq
 8006454:	f8c8 1000 	streq.w	r1, [r8]
 8006458:	5162      	str	r2, [r4, r5]
 800645a:	604b      	str	r3, [r1, #4]
 800645c:	4638      	mov	r0, r7
 800645e:	f104 060b 	add.w	r6, r4, #11
 8006462:	f000 f829 	bl	80064b8 <__malloc_unlock>
 8006466:	f026 0607 	bic.w	r6, r6, #7
 800646a:	1d23      	adds	r3, r4, #4
 800646c:	1af2      	subs	r2, r6, r3
 800646e:	d0ae      	beq.n	80063ce <_malloc_r+0x22>
 8006470:	1b9b      	subs	r3, r3, r6
 8006472:	50a3      	str	r3, [r4, r2]
 8006474:	e7ab      	b.n	80063ce <_malloc_r+0x22>
 8006476:	42a3      	cmp	r3, r4
 8006478:	6862      	ldr	r2, [r4, #4]
 800647a:	d1dd      	bne.n	8006438 <_malloc_r+0x8c>
 800647c:	f8c8 2000 	str.w	r2, [r8]
 8006480:	e7ec      	b.n	800645c <_malloc_r+0xb0>
 8006482:	4623      	mov	r3, r4
 8006484:	6864      	ldr	r4, [r4, #4]
 8006486:	e7ac      	b.n	80063e2 <_malloc_r+0x36>
 8006488:	4634      	mov	r4, r6
 800648a:	6876      	ldr	r6, [r6, #4]
 800648c:	e7b4      	b.n	80063f8 <_malloc_r+0x4c>
 800648e:	4613      	mov	r3, r2
 8006490:	e7cc      	b.n	800642c <_malloc_r+0x80>
 8006492:	230c      	movs	r3, #12
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	4638      	mov	r0, r7
 8006498:	f000 f80e 	bl	80064b8 <__malloc_unlock>
 800649c:	e797      	b.n	80063ce <_malloc_r+0x22>
 800649e:	6025      	str	r5, [r4, #0]
 80064a0:	e7dc      	b.n	800645c <_malloc_r+0xb0>
 80064a2:	605b      	str	r3, [r3, #4]
 80064a4:	deff      	udf	#255	; 0xff
 80064a6:	bf00      	nop
 80064a8:	20000580 	.word	0x20000580

080064ac <__malloc_lock>:
 80064ac:	4801      	ldr	r0, [pc, #4]	; (80064b4 <__malloc_lock+0x8>)
 80064ae:	f7ff b88c 	b.w	80055ca <__retarget_lock_acquire_recursive>
 80064b2:	bf00      	nop
 80064b4:	2000057c 	.word	0x2000057c

080064b8 <__malloc_unlock>:
 80064b8:	4801      	ldr	r0, [pc, #4]	; (80064c0 <__malloc_unlock+0x8>)
 80064ba:	f7ff b887 	b.w	80055cc <__retarget_lock_release_recursive>
 80064be:	bf00      	nop
 80064c0:	2000057c 	.word	0x2000057c

080064c4 <_Balloc>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	69c6      	ldr	r6, [r0, #28]
 80064c8:	4604      	mov	r4, r0
 80064ca:	460d      	mov	r5, r1
 80064cc:	b976      	cbnz	r6, 80064ec <_Balloc+0x28>
 80064ce:	2010      	movs	r0, #16
 80064d0:	f7ff ff44 	bl	800635c <malloc>
 80064d4:	4602      	mov	r2, r0
 80064d6:	61e0      	str	r0, [r4, #28]
 80064d8:	b920      	cbnz	r0, 80064e4 <_Balloc+0x20>
 80064da:	4b18      	ldr	r3, [pc, #96]	; (800653c <_Balloc+0x78>)
 80064dc:	4818      	ldr	r0, [pc, #96]	; (8006540 <_Balloc+0x7c>)
 80064de:	216b      	movs	r1, #107	; 0x6b
 80064e0:	f000 fe00 	bl	80070e4 <__assert_func>
 80064e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064e8:	6006      	str	r6, [r0, #0]
 80064ea:	60c6      	str	r6, [r0, #12]
 80064ec:	69e6      	ldr	r6, [r4, #28]
 80064ee:	68f3      	ldr	r3, [r6, #12]
 80064f0:	b183      	cbz	r3, 8006514 <_Balloc+0x50>
 80064f2:	69e3      	ldr	r3, [r4, #28]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064fa:	b9b8      	cbnz	r0, 800652c <_Balloc+0x68>
 80064fc:	2101      	movs	r1, #1
 80064fe:	fa01 f605 	lsl.w	r6, r1, r5
 8006502:	1d72      	adds	r2, r6, #5
 8006504:	0092      	lsls	r2, r2, #2
 8006506:	4620      	mov	r0, r4
 8006508:	f000 fe0a 	bl	8007120 <_calloc_r>
 800650c:	b160      	cbz	r0, 8006528 <_Balloc+0x64>
 800650e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006512:	e00e      	b.n	8006532 <_Balloc+0x6e>
 8006514:	2221      	movs	r2, #33	; 0x21
 8006516:	2104      	movs	r1, #4
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fe01 	bl	8007120 <_calloc_r>
 800651e:	69e3      	ldr	r3, [r4, #28]
 8006520:	60f0      	str	r0, [r6, #12]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e4      	bne.n	80064f2 <_Balloc+0x2e>
 8006528:	2000      	movs	r0, #0
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	6802      	ldr	r2, [r0, #0]
 800652e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006532:	2300      	movs	r3, #0
 8006534:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006538:	e7f7      	b.n	800652a <_Balloc+0x66>
 800653a:	bf00      	nop
 800653c:	08007595 	.word	0x08007595
 8006540:	08007615 	.word	0x08007615

08006544 <_Bfree>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	69c6      	ldr	r6, [r0, #28]
 8006548:	4605      	mov	r5, r0
 800654a:	460c      	mov	r4, r1
 800654c:	b976      	cbnz	r6, 800656c <_Bfree+0x28>
 800654e:	2010      	movs	r0, #16
 8006550:	f7ff ff04 	bl	800635c <malloc>
 8006554:	4602      	mov	r2, r0
 8006556:	61e8      	str	r0, [r5, #28]
 8006558:	b920      	cbnz	r0, 8006564 <_Bfree+0x20>
 800655a:	4b09      	ldr	r3, [pc, #36]	; (8006580 <_Bfree+0x3c>)
 800655c:	4809      	ldr	r0, [pc, #36]	; (8006584 <_Bfree+0x40>)
 800655e:	218f      	movs	r1, #143	; 0x8f
 8006560:	f000 fdc0 	bl	80070e4 <__assert_func>
 8006564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006568:	6006      	str	r6, [r0, #0]
 800656a:	60c6      	str	r6, [r0, #12]
 800656c:	b13c      	cbz	r4, 800657e <_Bfree+0x3a>
 800656e:	69eb      	ldr	r3, [r5, #28]
 8006570:	6862      	ldr	r2, [r4, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006578:	6021      	str	r1, [r4, #0]
 800657a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	08007595 	.word	0x08007595
 8006584:	08007615 	.word	0x08007615

08006588 <__multadd>:
 8006588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658c:	690d      	ldr	r5, [r1, #16]
 800658e:	4607      	mov	r7, r0
 8006590:	460c      	mov	r4, r1
 8006592:	461e      	mov	r6, r3
 8006594:	f101 0c14 	add.w	ip, r1, #20
 8006598:	2000      	movs	r0, #0
 800659a:	f8dc 3000 	ldr.w	r3, [ip]
 800659e:	b299      	uxth	r1, r3
 80065a0:	fb02 6101 	mla	r1, r2, r1, r6
 80065a4:	0c1e      	lsrs	r6, r3, #16
 80065a6:	0c0b      	lsrs	r3, r1, #16
 80065a8:	fb02 3306 	mla	r3, r2, r6, r3
 80065ac:	b289      	uxth	r1, r1
 80065ae:	3001      	adds	r0, #1
 80065b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065b4:	4285      	cmp	r5, r0
 80065b6:	f84c 1b04 	str.w	r1, [ip], #4
 80065ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065be:	dcec      	bgt.n	800659a <__multadd+0x12>
 80065c0:	b30e      	cbz	r6, 8006606 <__multadd+0x7e>
 80065c2:	68a3      	ldr	r3, [r4, #8]
 80065c4:	42ab      	cmp	r3, r5
 80065c6:	dc19      	bgt.n	80065fc <__multadd+0x74>
 80065c8:	6861      	ldr	r1, [r4, #4]
 80065ca:	4638      	mov	r0, r7
 80065cc:	3101      	adds	r1, #1
 80065ce:	f7ff ff79 	bl	80064c4 <_Balloc>
 80065d2:	4680      	mov	r8, r0
 80065d4:	b928      	cbnz	r0, 80065e2 <__multadd+0x5a>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <__multadd+0x84>)
 80065da:	480d      	ldr	r0, [pc, #52]	; (8006610 <__multadd+0x88>)
 80065dc:	21ba      	movs	r1, #186	; 0xba
 80065de:	f000 fd81 	bl	80070e4 <__assert_func>
 80065e2:	6922      	ldr	r2, [r4, #16]
 80065e4:	3202      	adds	r2, #2
 80065e6:	f104 010c 	add.w	r1, r4, #12
 80065ea:	0092      	lsls	r2, r2, #2
 80065ec:	300c      	adds	r0, #12
 80065ee:	f000 fd6b 	bl	80070c8 <memcpy>
 80065f2:	4621      	mov	r1, r4
 80065f4:	4638      	mov	r0, r7
 80065f6:	f7ff ffa5 	bl	8006544 <_Bfree>
 80065fa:	4644      	mov	r4, r8
 80065fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006600:	3501      	adds	r5, #1
 8006602:	615e      	str	r6, [r3, #20]
 8006604:	6125      	str	r5, [r4, #16]
 8006606:	4620      	mov	r0, r4
 8006608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660c:	08007604 	.word	0x08007604
 8006610:	08007615 	.word	0x08007615

08006614 <__hi0bits>:
 8006614:	0c03      	lsrs	r3, r0, #16
 8006616:	041b      	lsls	r3, r3, #16
 8006618:	b9d3      	cbnz	r3, 8006650 <__hi0bits+0x3c>
 800661a:	0400      	lsls	r0, r0, #16
 800661c:	2310      	movs	r3, #16
 800661e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006622:	bf04      	itt	eq
 8006624:	0200      	lsleq	r0, r0, #8
 8006626:	3308      	addeq	r3, #8
 8006628:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800662c:	bf04      	itt	eq
 800662e:	0100      	lsleq	r0, r0, #4
 8006630:	3304      	addeq	r3, #4
 8006632:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006636:	bf04      	itt	eq
 8006638:	0080      	lsleq	r0, r0, #2
 800663a:	3302      	addeq	r3, #2
 800663c:	2800      	cmp	r0, #0
 800663e:	db05      	blt.n	800664c <__hi0bits+0x38>
 8006640:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006644:	f103 0301 	add.w	r3, r3, #1
 8006648:	bf08      	it	eq
 800664a:	2320      	moveq	r3, #32
 800664c:	4618      	mov	r0, r3
 800664e:	4770      	bx	lr
 8006650:	2300      	movs	r3, #0
 8006652:	e7e4      	b.n	800661e <__hi0bits+0xa>

08006654 <__lo0bits>:
 8006654:	6803      	ldr	r3, [r0, #0]
 8006656:	f013 0207 	ands.w	r2, r3, #7
 800665a:	d00c      	beq.n	8006676 <__lo0bits+0x22>
 800665c:	07d9      	lsls	r1, r3, #31
 800665e:	d422      	bmi.n	80066a6 <__lo0bits+0x52>
 8006660:	079a      	lsls	r2, r3, #30
 8006662:	bf49      	itett	mi
 8006664:	085b      	lsrmi	r3, r3, #1
 8006666:	089b      	lsrpl	r3, r3, #2
 8006668:	6003      	strmi	r3, [r0, #0]
 800666a:	2201      	movmi	r2, #1
 800666c:	bf5c      	itt	pl
 800666e:	6003      	strpl	r3, [r0, #0]
 8006670:	2202      	movpl	r2, #2
 8006672:	4610      	mov	r0, r2
 8006674:	4770      	bx	lr
 8006676:	b299      	uxth	r1, r3
 8006678:	b909      	cbnz	r1, 800667e <__lo0bits+0x2a>
 800667a:	0c1b      	lsrs	r3, r3, #16
 800667c:	2210      	movs	r2, #16
 800667e:	b2d9      	uxtb	r1, r3
 8006680:	b909      	cbnz	r1, 8006686 <__lo0bits+0x32>
 8006682:	3208      	adds	r2, #8
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	0719      	lsls	r1, r3, #28
 8006688:	bf04      	itt	eq
 800668a:	091b      	lsreq	r3, r3, #4
 800668c:	3204      	addeq	r2, #4
 800668e:	0799      	lsls	r1, r3, #30
 8006690:	bf04      	itt	eq
 8006692:	089b      	lsreq	r3, r3, #2
 8006694:	3202      	addeq	r2, #2
 8006696:	07d9      	lsls	r1, r3, #31
 8006698:	d403      	bmi.n	80066a2 <__lo0bits+0x4e>
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	f102 0201 	add.w	r2, r2, #1
 80066a0:	d003      	beq.n	80066aa <__lo0bits+0x56>
 80066a2:	6003      	str	r3, [r0, #0]
 80066a4:	e7e5      	b.n	8006672 <__lo0bits+0x1e>
 80066a6:	2200      	movs	r2, #0
 80066a8:	e7e3      	b.n	8006672 <__lo0bits+0x1e>
 80066aa:	2220      	movs	r2, #32
 80066ac:	e7e1      	b.n	8006672 <__lo0bits+0x1e>
	...

080066b0 <__i2b>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	460c      	mov	r4, r1
 80066b4:	2101      	movs	r1, #1
 80066b6:	f7ff ff05 	bl	80064c4 <_Balloc>
 80066ba:	4602      	mov	r2, r0
 80066bc:	b928      	cbnz	r0, 80066ca <__i2b+0x1a>
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <__i2b+0x24>)
 80066c0:	4805      	ldr	r0, [pc, #20]	; (80066d8 <__i2b+0x28>)
 80066c2:	f240 1145 	movw	r1, #325	; 0x145
 80066c6:	f000 fd0d 	bl	80070e4 <__assert_func>
 80066ca:	2301      	movs	r3, #1
 80066cc:	6144      	str	r4, [r0, #20]
 80066ce:	6103      	str	r3, [r0, #16]
 80066d0:	bd10      	pop	{r4, pc}
 80066d2:	bf00      	nop
 80066d4:	08007604 	.word	0x08007604
 80066d8:	08007615 	.word	0x08007615

080066dc <__multiply>:
 80066dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e0:	4691      	mov	r9, r2
 80066e2:	690a      	ldr	r2, [r1, #16]
 80066e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	bfb8      	it	lt
 80066ec:	460b      	movlt	r3, r1
 80066ee:	460c      	mov	r4, r1
 80066f0:	bfbc      	itt	lt
 80066f2:	464c      	movlt	r4, r9
 80066f4:	4699      	movlt	r9, r3
 80066f6:	6927      	ldr	r7, [r4, #16]
 80066f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	6861      	ldr	r1, [r4, #4]
 8006700:	eb07 060a 	add.w	r6, r7, sl
 8006704:	42b3      	cmp	r3, r6
 8006706:	b085      	sub	sp, #20
 8006708:	bfb8      	it	lt
 800670a:	3101      	addlt	r1, #1
 800670c:	f7ff feda 	bl	80064c4 <_Balloc>
 8006710:	b930      	cbnz	r0, 8006720 <__multiply+0x44>
 8006712:	4602      	mov	r2, r0
 8006714:	4b44      	ldr	r3, [pc, #272]	; (8006828 <__multiply+0x14c>)
 8006716:	4845      	ldr	r0, [pc, #276]	; (800682c <__multiply+0x150>)
 8006718:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800671c:	f000 fce2 	bl	80070e4 <__assert_func>
 8006720:	f100 0514 	add.w	r5, r0, #20
 8006724:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006728:	462b      	mov	r3, r5
 800672a:	2200      	movs	r2, #0
 800672c:	4543      	cmp	r3, r8
 800672e:	d321      	bcc.n	8006774 <__multiply+0x98>
 8006730:	f104 0314 	add.w	r3, r4, #20
 8006734:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006738:	f109 0314 	add.w	r3, r9, #20
 800673c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006740:	9202      	str	r2, [sp, #8]
 8006742:	1b3a      	subs	r2, r7, r4
 8006744:	3a15      	subs	r2, #21
 8006746:	f022 0203 	bic.w	r2, r2, #3
 800674a:	3204      	adds	r2, #4
 800674c:	f104 0115 	add.w	r1, r4, #21
 8006750:	428f      	cmp	r7, r1
 8006752:	bf38      	it	cc
 8006754:	2204      	movcc	r2, #4
 8006756:	9201      	str	r2, [sp, #4]
 8006758:	9a02      	ldr	r2, [sp, #8]
 800675a:	9303      	str	r3, [sp, #12]
 800675c:	429a      	cmp	r2, r3
 800675e:	d80c      	bhi.n	800677a <__multiply+0x9e>
 8006760:	2e00      	cmp	r6, #0
 8006762:	dd03      	ble.n	800676c <__multiply+0x90>
 8006764:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006768:	2b00      	cmp	r3, #0
 800676a:	d05b      	beq.n	8006824 <__multiply+0x148>
 800676c:	6106      	str	r6, [r0, #16]
 800676e:	b005      	add	sp, #20
 8006770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006774:	f843 2b04 	str.w	r2, [r3], #4
 8006778:	e7d8      	b.n	800672c <__multiply+0x50>
 800677a:	f8b3 a000 	ldrh.w	sl, [r3]
 800677e:	f1ba 0f00 	cmp.w	sl, #0
 8006782:	d024      	beq.n	80067ce <__multiply+0xf2>
 8006784:	f104 0e14 	add.w	lr, r4, #20
 8006788:	46a9      	mov	r9, r5
 800678a:	f04f 0c00 	mov.w	ip, #0
 800678e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006792:	f8d9 1000 	ldr.w	r1, [r9]
 8006796:	fa1f fb82 	uxth.w	fp, r2
 800679a:	b289      	uxth	r1, r1
 800679c:	fb0a 110b 	mla	r1, sl, fp, r1
 80067a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80067a4:	f8d9 2000 	ldr.w	r2, [r9]
 80067a8:	4461      	add	r1, ip
 80067aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80067b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80067b6:	b289      	uxth	r1, r1
 80067b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067bc:	4577      	cmp	r7, lr
 80067be:	f849 1b04 	str.w	r1, [r9], #4
 80067c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067c6:	d8e2      	bhi.n	800678e <__multiply+0xb2>
 80067c8:	9a01      	ldr	r2, [sp, #4]
 80067ca:	f845 c002 	str.w	ip, [r5, r2]
 80067ce:	9a03      	ldr	r2, [sp, #12]
 80067d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067d4:	3304      	adds	r3, #4
 80067d6:	f1b9 0f00 	cmp.w	r9, #0
 80067da:	d021      	beq.n	8006820 <__multiply+0x144>
 80067dc:	6829      	ldr	r1, [r5, #0]
 80067de:	f104 0c14 	add.w	ip, r4, #20
 80067e2:	46ae      	mov	lr, r5
 80067e4:	f04f 0a00 	mov.w	sl, #0
 80067e8:	f8bc b000 	ldrh.w	fp, [ip]
 80067ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067f0:	fb09 220b 	mla	r2, r9, fp, r2
 80067f4:	4452      	add	r2, sl
 80067f6:	b289      	uxth	r1, r1
 80067f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067fc:	f84e 1b04 	str.w	r1, [lr], #4
 8006800:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006804:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006808:	f8be 1000 	ldrh.w	r1, [lr]
 800680c:	fb09 110a 	mla	r1, r9, sl, r1
 8006810:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006814:	4567      	cmp	r7, ip
 8006816:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800681a:	d8e5      	bhi.n	80067e8 <__multiply+0x10c>
 800681c:	9a01      	ldr	r2, [sp, #4]
 800681e:	50a9      	str	r1, [r5, r2]
 8006820:	3504      	adds	r5, #4
 8006822:	e799      	b.n	8006758 <__multiply+0x7c>
 8006824:	3e01      	subs	r6, #1
 8006826:	e79b      	b.n	8006760 <__multiply+0x84>
 8006828:	08007604 	.word	0x08007604
 800682c:	08007615 	.word	0x08007615

08006830 <__pow5mult>:
 8006830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006834:	4615      	mov	r5, r2
 8006836:	f012 0203 	ands.w	r2, r2, #3
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	d007      	beq.n	8006850 <__pow5mult+0x20>
 8006840:	4c25      	ldr	r4, [pc, #148]	; (80068d8 <__pow5mult+0xa8>)
 8006842:	3a01      	subs	r2, #1
 8006844:	2300      	movs	r3, #0
 8006846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800684a:	f7ff fe9d 	bl	8006588 <__multadd>
 800684e:	4607      	mov	r7, r0
 8006850:	10ad      	asrs	r5, r5, #2
 8006852:	d03d      	beq.n	80068d0 <__pow5mult+0xa0>
 8006854:	69f4      	ldr	r4, [r6, #28]
 8006856:	b97c      	cbnz	r4, 8006878 <__pow5mult+0x48>
 8006858:	2010      	movs	r0, #16
 800685a:	f7ff fd7f 	bl	800635c <malloc>
 800685e:	4602      	mov	r2, r0
 8006860:	61f0      	str	r0, [r6, #28]
 8006862:	b928      	cbnz	r0, 8006870 <__pow5mult+0x40>
 8006864:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <__pow5mult+0xac>)
 8006866:	481e      	ldr	r0, [pc, #120]	; (80068e0 <__pow5mult+0xb0>)
 8006868:	f240 11b3 	movw	r1, #435	; 0x1b3
 800686c:	f000 fc3a 	bl	80070e4 <__assert_func>
 8006870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006874:	6004      	str	r4, [r0, #0]
 8006876:	60c4      	str	r4, [r0, #12]
 8006878:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800687c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006880:	b94c      	cbnz	r4, 8006896 <__pow5mult+0x66>
 8006882:	f240 2171 	movw	r1, #625	; 0x271
 8006886:	4630      	mov	r0, r6
 8006888:	f7ff ff12 	bl	80066b0 <__i2b>
 800688c:	2300      	movs	r3, #0
 800688e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006892:	4604      	mov	r4, r0
 8006894:	6003      	str	r3, [r0, #0]
 8006896:	f04f 0900 	mov.w	r9, #0
 800689a:	07eb      	lsls	r3, r5, #31
 800689c:	d50a      	bpl.n	80068b4 <__pow5mult+0x84>
 800689e:	4639      	mov	r1, r7
 80068a0:	4622      	mov	r2, r4
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7ff ff1a 	bl	80066dc <__multiply>
 80068a8:	4639      	mov	r1, r7
 80068aa:	4680      	mov	r8, r0
 80068ac:	4630      	mov	r0, r6
 80068ae:	f7ff fe49 	bl	8006544 <_Bfree>
 80068b2:	4647      	mov	r7, r8
 80068b4:	106d      	asrs	r5, r5, #1
 80068b6:	d00b      	beq.n	80068d0 <__pow5mult+0xa0>
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	b938      	cbnz	r0, 80068cc <__pow5mult+0x9c>
 80068bc:	4622      	mov	r2, r4
 80068be:	4621      	mov	r1, r4
 80068c0:	4630      	mov	r0, r6
 80068c2:	f7ff ff0b 	bl	80066dc <__multiply>
 80068c6:	6020      	str	r0, [r4, #0]
 80068c8:	f8c0 9000 	str.w	r9, [r0]
 80068cc:	4604      	mov	r4, r0
 80068ce:	e7e4      	b.n	800689a <__pow5mult+0x6a>
 80068d0:	4638      	mov	r0, r7
 80068d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068d6:	bf00      	nop
 80068d8:	08007760 	.word	0x08007760
 80068dc:	08007595 	.word	0x08007595
 80068e0:	08007615 	.word	0x08007615

080068e4 <__lshift>:
 80068e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	460c      	mov	r4, r1
 80068ea:	6849      	ldr	r1, [r1, #4]
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068f2:	68a3      	ldr	r3, [r4, #8]
 80068f4:	4607      	mov	r7, r0
 80068f6:	4691      	mov	r9, r2
 80068f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068fc:	f108 0601 	add.w	r6, r8, #1
 8006900:	42b3      	cmp	r3, r6
 8006902:	db0b      	blt.n	800691c <__lshift+0x38>
 8006904:	4638      	mov	r0, r7
 8006906:	f7ff fddd 	bl	80064c4 <_Balloc>
 800690a:	4605      	mov	r5, r0
 800690c:	b948      	cbnz	r0, 8006922 <__lshift+0x3e>
 800690e:	4602      	mov	r2, r0
 8006910:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <__lshift+0xd0>)
 8006912:	4829      	ldr	r0, [pc, #164]	; (80069b8 <__lshift+0xd4>)
 8006914:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006918:	f000 fbe4 	bl	80070e4 <__assert_func>
 800691c:	3101      	adds	r1, #1
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	e7ee      	b.n	8006900 <__lshift+0x1c>
 8006922:	2300      	movs	r3, #0
 8006924:	f100 0114 	add.w	r1, r0, #20
 8006928:	f100 0210 	add.w	r2, r0, #16
 800692c:	4618      	mov	r0, r3
 800692e:	4553      	cmp	r3, sl
 8006930:	db33      	blt.n	800699a <__lshift+0xb6>
 8006932:	6920      	ldr	r0, [r4, #16]
 8006934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006938:	f104 0314 	add.w	r3, r4, #20
 800693c:	f019 091f 	ands.w	r9, r9, #31
 8006940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006948:	d02b      	beq.n	80069a2 <__lshift+0xbe>
 800694a:	f1c9 0e20 	rsb	lr, r9, #32
 800694e:	468a      	mov	sl, r1
 8006950:	2200      	movs	r2, #0
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	fa00 f009 	lsl.w	r0, r0, r9
 8006958:	4310      	orrs	r0, r2
 800695a:	f84a 0b04 	str.w	r0, [sl], #4
 800695e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006962:	459c      	cmp	ip, r3
 8006964:	fa22 f20e 	lsr.w	r2, r2, lr
 8006968:	d8f3      	bhi.n	8006952 <__lshift+0x6e>
 800696a:	ebac 0304 	sub.w	r3, ip, r4
 800696e:	3b15      	subs	r3, #21
 8006970:	f023 0303 	bic.w	r3, r3, #3
 8006974:	3304      	adds	r3, #4
 8006976:	f104 0015 	add.w	r0, r4, #21
 800697a:	4584      	cmp	ip, r0
 800697c:	bf38      	it	cc
 800697e:	2304      	movcc	r3, #4
 8006980:	50ca      	str	r2, [r1, r3]
 8006982:	b10a      	cbz	r2, 8006988 <__lshift+0xa4>
 8006984:	f108 0602 	add.w	r6, r8, #2
 8006988:	3e01      	subs	r6, #1
 800698a:	4638      	mov	r0, r7
 800698c:	612e      	str	r6, [r5, #16]
 800698e:	4621      	mov	r1, r4
 8006990:	f7ff fdd8 	bl	8006544 <_Bfree>
 8006994:	4628      	mov	r0, r5
 8006996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699a:	f842 0f04 	str.w	r0, [r2, #4]!
 800699e:	3301      	adds	r3, #1
 80069a0:	e7c5      	b.n	800692e <__lshift+0x4a>
 80069a2:	3904      	subs	r1, #4
 80069a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80069ac:	459c      	cmp	ip, r3
 80069ae:	d8f9      	bhi.n	80069a4 <__lshift+0xc0>
 80069b0:	e7ea      	b.n	8006988 <__lshift+0xa4>
 80069b2:	bf00      	nop
 80069b4:	08007604 	.word	0x08007604
 80069b8:	08007615 	.word	0x08007615

080069bc <__mcmp>:
 80069bc:	b530      	push	{r4, r5, lr}
 80069be:	6902      	ldr	r2, [r0, #16]
 80069c0:	690c      	ldr	r4, [r1, #16]
 80069c2:	1b12      	subs	r2, r2, r4
 80069c4:	d10e      	bne.n	80069e4 <__mcmp+0x28>
 80069c6:	f100 0314 	add.w	r3, r0, #20
 80069ca:	3114      	adds	r1, #20
 80069cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069dc:	42a5      	cmp	r5, r4
 80069de:	d003      	beq.n	80069e8 <__mcmp+0x2c>
 80069e0:	d305      	bcc.n	80069ee <__mcmp+0x32>
 80069e2:	2201      	movs	r2, #1
 80069e4:	4610      	mov	r0, r2
 80069e6:	bd30      	pop	{r4, r5, pc}
 80069e8:	4283      	cmp	r3, r0
 80069ea:	d3f3      	bcc.n	80069d4 <__mcmp+0x18>
 80069ec:	e7fa      	b.n	80069e4 <__mcmp+0x28>
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	e7f7      	b.n	80069e4 <__mcmp+0x28>

080069f4 <__mdiff>:
 80069f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f8:	460c      	mov	r4, r1
 80069fa:	4606      	mov	r6, r0
 80069fc:	4611      	mov	r1, r2
 80069fe:	4620      	mov	r0, r4
 8006a00:	4690      	mov	r8, r2
 8006a02:	f7ff ffdb 	bl	80069bc <__mcmp>
 8006a06:	1e05      	subs	r5, r0, #0
 8006a08:	d110      	bne.n	8006a2c <__mdiff+0x38>
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f7ff fd59 	bl	80064c4 <_Balloc>
 8006a12:	b930      	cbnz	r0, 8006a22 <__mdiff+0x2e>
 8006a14:	4b3a      	ldr	r3, [pc, #232]	; (8006b00 <__mdiff+0x10c>)
 8006a16:	4602      	mov	r2, r0
 8006a18:	f240 2137 	movw	r1, #567	; 0x237
 8006a1c:	4839      	ldr	r0, [pc, #228]	; (8006b04 <__mdiff+0x110>)
 8006a1e:	f000 fb61 	bl	80070e4 <__assert_func>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	bfa4      	itt	ge
 8006a2e:	4643      	movge	r3, r8
 8006a30:	46a0      	movge	r8, r4
 8006a32:	4630      	mov	r0, r6
 8006a34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a38:	bfa6      	itte	ge
 8006a3a:	461c      	movge	r4, r3
 8006a3c:	2500      	movge	r5, #0
 8006a3e:	2501      	movlt	r5, #1
 8006a40:	f7ff fd40 	bl	80064c4 <_Balloc>
 8006a44:	b920      	cbnz	r0, 8006a50 <__mdiff+0x5c>
 8006a46:	4b2e      	ldr	r3, [pc, #184]	; (8006b00 <__mdiff+0x10c>)
 8006a48:	4602      	mov	r2, r0
 8006a4a:	f240 2145 	movw	r1, #581	; 0x245
 8006a4e:	e7e5      	b.n	8006a1c <__mdiff+0x28>
 8006a50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a54:	6926      	ldr	r6, [r4, #16]
 8006a56:	60c5      	str	r5, [r0, #12]
 8006a58:	f104 0914 	add.w	r9, r4, #20
 8006a5c:	f108 0514 	add.w	r5, r8, #20
 8006a60:	f100 0e14 	add.w	lr, r0, #20
 8006a64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a6c:	f108 0210 	add.w	r2, r8, #16
 8006a70:	46f2      	mov	sl, lr
 8006a72:	2100      	movs	r1, #0
 8006a74:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a7c:	fa11 f88b 	uxtah	r8, r1, fp
 8006a80:	b299      	uxth	r1, r3
 8006a82:	0c1b      	lsrs	r3, r3, #16
 8006a84:	eba8 0801 	sub.w	r8, r8, r1
 8006a88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a90:	fa1f f888 	uxth.w	r8, r8
 8006a94:	1419      	asrs	r1, r3, #16
 8006a96:	454e      	cmp	r6, r9
 8006a98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a9c:	f84a 3b04 	str.w	r3, [sl], #4
 8006aa0:	d8e8      	bhi.n	8006a74 <__mdiff+0x80>
 8006aa2:	1b33      	subs	r3, r6, r4
 8006aa4:	3b15      	subs	r3, #21
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	3304      	adds	r3, #4
 8006aac:	3415      	adds	r4, #21
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	bf38      	it	cc
 8006ab2:	2304      	movcc	r3, #4
 8006ab4:	441d      	add	r5, r3
 8006ab6:	4473      	add	r3, lr
 8006ab8:	469e      	mov	lr, r3
 8006aba:	462e      	mov	r6, r5
 8006abc:	4566      	cmp	r6, ip
 8006abe:	d30e      	bcc.n	8006ade <__mdiff+0xea>
 8006ac0:	f10c 0203 	add.w	r2, ip, #3
 8006ac4:	1b52      	subs	r2, r2, r5
 8006ac6:	f022 0203 	bic.w	r2, r2, #3
 8006aca:	3d03      	subs	r5, #3
 8006acc:	45ac      	cmp	ip, r5
 8006ace:	bf38      	it	cc
 8006ad0:	2200      	movcc	r2, #0
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006ad8:	b17a      	cbz	r2, 8006afa <__mdiff+0x106>
 8006ada:	6107      	str	r7, [r0, #16]
 8006adc:	e7a4      	b.n	8006a28 <__mdiff+0x34>
 8006ade:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ae2:	fa11 f288 	uxtah	r2, r1, r8
 8006ae6:	1414      	asrs	r4, r2, #16
 8006ae8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006aec:	b292      	uxth	r2, r2
 8006aee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006af2:	f84e 2b04 	str.w	r2, [lr], #4
 8006af6:	1421      	asrs	r1, r4, #16
 8006af8:	e7e0      	b.n	8006abc <__mdiff+0xc8>
 8006afa:	3f01      	subs	r7, #1
 8006afc:	e7ea      	b.n	8006ad4 <__mdiff+0xe0>
 8006afe:	bf00      	nop
 8006b00:	08007604 	.word	0x08007604
 8006b04:	08007615 	.word	0x08007615

08006b08 <__d2b>:
 8006b08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b0c:	460f      	mov	r7, r1
 8006b0e:	2101      	movs	r1, #1
 8006b10:	ec59 8b10 	vmov	r8, r9, d0
 8006b14:	4616      	mov	r6, r2
 8006b16:	f7ff fcd5 	bl	80064c4 <_Balloc>
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	b930      	cbnz	r0, 8006b2c <__d2b+0x24>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <__d2b+0xac>)
 8006b22:	4825      	ldr	r0, [pc, #148]	; (8006bb8 <__d2b+0xb0>)
 8006b24:	f240 310f 	movw	r1, #783	; 0x30f
 8006b28:	f000 fadc 	bl	80070e4 <__assert_func>
 8006b2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b34:	bb2d      	cbnz	r5, 8006b82 <__d2b+0x7a>
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	f1b8 0300 	subs.w	r3, r8, #0
 8006b3c:	d026      	beq.n	8006b8c <__d2b+0x84>
 8006b3e:	4668      	mov	r0, sp
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	f7ff fd87 	bl	8006654 <__lo0bits>
 8006b46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b4a:	b1e8      	cbz	r0, 8006b88 <__d2b+0x80>
 8006b4c:	f1c0 0320 	rsb	r3, r0, #32
 8006b50:	fa02 f303 	lsl.w	r3, r2, r3
 8006b54:	430b      	orrs	r3, r1
 8006b56:	40c2      	lsrs	r2, r0
 8006b58:	6163      	str	r3, [r4, #20]
 8006b5a:	9201      	str	r2, [sp, #4]
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	61a3      	str	r3, [r4, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bf14      	ite	ne
 8006b64:	2202      	movne	r2, #2
 8006b66:	2201      	moveq	r2, #1
 8006b68:	6122      	str	r2, [r4, #16]
 8006b6a:	b1bd      	cbz	r5, 8006b9c <__d2b+0x94>
 8006b6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b70:	4405      	add	r5, r0
 8006b72:	603d      	str	r5, [r7, #0]
 8006b74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b78:	6030      	str	r0, [r6, #0]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	b003      	add	sp, #12
 8006b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b86:	e7d6      	b.n	8006b36 <__d2b+0x2e>
 8006b88:	6161      	str	r1, [r4, #20]
 8006b8a:	e7e7      	b.n	8006b5c <__d2b+0x54>
 8006b8c:	a801      	add	r0, sp, #4
 8006b8e:	f7ff fd61 	bl	8006654 <__lo0bits>
 8006b92:	9b01      	ldr	r3, [sp, #4]
 8006b94:	6163      	str	r3, [r4, #20]
 8006b96:	3020      	adds	r0, #32
 8006b98:	2201      	movs	r2, #1
 8006b9a:	e7e5      	b.n	8006b68 <__d2b+0x60>
 8006b9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ba0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ba4:	6038      	str	r0, [r7, #0]
 8006ba6:	6918      	ldr	r0, [r3, #16]
 8006ba8:	f7ff fd34 	bl	8006614 <__hi0bits>
 8006bac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bb0:	e7e2      	b.n	8006b78 <__d2b+0x70>
 8006bb2:	bf00      	nop
 8006bb4:	08007604 	.word	0x08007604
 8006bb8:	08007615 	.word	0x08007615

08006bbc <__sfputc_r>:
 8006bbc:	6893      	ldr	r3, [r2, #8]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	b410      	push	{r4}
 8006bc4:	6093      	str	r3, [r2, #8]
 8006bc6:	da08      	bge.n	8006bda <__sfputc_r+0x1e>
 8006bc8:	6994      	ldr	r4, [r2, #24]
 8006bca:	42a3      	cmp	r3, r4
 8006bcc:	db01      	blt.n	8006bd2 <__sfputc_r+0x16>
 8006bce:	290a      	cmp	r1, #10
 8006bd0:	d103      	bne.n	8006bda <__sfputc_r+0x1e>
 8006bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bd6:	f7fe bbe6 	b.w	80053a6 <__swbuf_r>
 8006bda:	6813      	ldr	r3, [r2, #0]
 8006bdc:	1c58      	adds	r0, r3, #1
 8006bde:	6010      	str	r0, [r2, #0]
 8006be0:	7019      	strb	r1, [r3, #0]
 8006be2:	4608      	mov	r0, r1
 8006be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <__sfputs_r>:
 8006bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bec:	4606      	mov	r6, r0
 8006bee:	460f      	mov	r7, r1
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	18d5      	adds	r5, r2, r3
 8006bf4:	42ac      	cmp	r4, r5
 8006bf6:	d101      	bne.n	8006bfc <__sfputs_r+0x12>
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	e007      	b.n	8006c0c <__sfputs_r+0x22>
 8006bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c00:	463a      	mov	r2, r7
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7ff ffda 	bl	8006bbc <__sfputc_r>
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	d1f3      	bne.n	8006bf4 <__sfputs_r+0xa>
 8006c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c10 <_vfiprintf_r>:
 8006c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	460d      	mov	r5, r1
 8006c16:	b09d      	sub	sp, #116	; 0x74
 8006c18:	4614      	mov	r4, r2
 8006c1a:	4698      	mov	r8, r3
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	b118      	cbz	r0, 8006c28 <_vfiprintf_r+0x18>
 8006c20:	6a03      	ldr	r3, [r0, #32]
 8006c22:	b90b      	cbnz	r3, 8006c28 <_vfiprintf_r+0x18>
 8006c24:	f7fe fad8 	bl	80051d8 <__sinit>
 8006c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c2a:	07d9      	lsls	r1, r3, #31
 8006c2c:	d405      	bmi.n	8006c3a <_vfiprintf_r+0x2a>
 8006c2e:	89ab      	ldrh	r3, [r5, #12]
 8006c30:	059a      	lsls	r2, r3, #22
 8006c32:	d402      	bmi.n	8006c3a <_vfiprintf_r+0x2a>
 8006c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c36:	f7fe fcc8 	bl	80055ca <__retarget_lock_acquire_recursive>
 8006c3a:	89ab      	ldrh	r3, [r5, #12]
 8006c3c:	071b      	lsls	r3, r3, #28
 8006c3e:	d501      	bpl.n	8006c44 <_vfiprintf_r+0x34>
 8006c40:	692b      	ldr	r3, [r5, #16]
 8006c42:	b99b      	cbnz	r3, 8006c6c <_vfiprintf_r+0x5c>
 8006c44:	4629      	mov	r1, r5
 8006c46:	4630      	mov	r0, r6
 8006c48:	f7fe fbea 	bl	8005420 <__swsetup_r>
 8006c4c:	b170      	cbz	r0, 8006c6c <_vfiprintf_r+0x5c>
 8006c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c50:	07dc      	lsls	r4, r3, #31
 8006c52:	d504      	bpl.n	8006c5e <_vfiprintf_r+0x4e>
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	b01d      	add	sp, #116	; 0x74
 8006c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5e:	89ab      	ldrh	r3, [r5, #12]
 8006c60:	0598      	lsls	r0, r3, #22
 8006c62:	d4f7      	bmi.n	8006c54 <_vfiprintf_r+0x44>
 8006c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c66:	f7fe fcb1 	bl	80055cc <__retarget_lock_release_recursive>
 8006c6a:	e7f3      	b.n	8006c54 <_vfiprintf_r+0x44>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c70:	2320      	movs	r3, #32
 8006c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c7a:	2330      	movs	r3, #48	; 0x30
 8006c7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006e30 <_vfiprintf_r+0x220>
 8006c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c84:	f04f 0901 	mov.w	r9, #1
 8006c88:	4623      	mov	r3, r4
 8006c8a:	469a      	mov	sl, r3
 8006c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c90:	b10a      	cbz	r2, 8006c96 <_vfiprintf_r+0x86>
 8006c92:	2a25      	cmp	r2, #37	; 0x25
 8006c94:	d1f9      	bne.n	8006c8a <_vfiprintf_r+0x7a>
 8006c96:	ebba 0b04 	subs.w	fp, sl, r4
 8006c9a:	d00b      	beq.n	8006cb4 <_vfiprintf_r+0xa4>
 8006c9c:	465b      	mov	r3, fp
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f7ff ffa1 	bl	8006bea <__sfputs_r>
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f000 80a9 	beq.w	8006e00 <_vfiprintf_r+0x1f0>
 8006cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb0:	445a      	add	r2, fp
 8006cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8006cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80a1 	beq.w	8006e00 <_vfiprintf_r+0x1f0>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cc8:	f10a 0a01 	add.w	sl, sl, #1
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	9307      	str	r3, [sp, #28]
 8006cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cd6:	4654      	mov	r4, sl
 8006cd8:	2205      	movs	r2, #5
 8006cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cde:	4854      	ldr	r0, [pc, #336]	; (8006e30 <_vfiprintf_r+0x220>)
 8006ce0:	f7f9 fa96 	bl	8000210 <memchr>
 8006ce4:	9a04      	ldr	r2, [sp, #16]
 8006ce6:	b9d8      	cbnz	r0, 8006d20 <_vfiprintf_r+0x110>
 8006ce8:	06d1      	lsls	r1, r2, #27
 8006cea:	bf44      	itt	mi
 8006cec:	2320      	movmi	r3, #32
 8006cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf2:	0713      	lsls	r3, r2, #28
 8006cf4:	bf44      	itt	mi
 8006cf6:	232b      	movmi	r3, #43	; 0x2b
 8006cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006d00:	2b2a      	cmp	r3, #42	; 0x2a
 8006d02:	d015      	beq.n	8006d30 <_vfiprintf_r+0x120>
 8006d04:	9a07      	ldr	r2, [sp, #28]
 8006d06:	4654      	mov	r4, sl
 8006d08:	2000      	movs	r0, #0
 8006d0a:	f04f 0c0a 	mov.w	ip, #10
 8006d0e:	4621      	mov	r1, r4
 8006d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d14:	3b30      	subs	r3, #48	; 0x30
 8006d16:	2b09      	cmp	r3, #9
 8006d18:	d94d      	bls.n	8006db6 <_vfiprintf_r+0x1a6>
 8006d1a:	b1b0      	cbz	r0, 8006d4a <_vfiprintf_r+0x13a>
 8006d1c:	9207      	str	r2, [sp, #28]
 8006d1e:	e014      	b.n	8006d4a <_vfiprintf_r+0x13a>
 8006d20:	eba0 0308 	sub.w	r3, r0, r8
 8006d24:	fa09 f303 	lsl.w	r3, r9, r3
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	9304      	str	r3, [sp, #16]
 8006d2c:	46a2      	mov	sl, r4
 8006d2e:	e7d2      	b.n	8006cd6 <_vfiprintf_r+0xc6>
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	1d19      	adds	r1, r3, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	9103      	str	r1, [sp, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	bfbb      	ittet	lt
 8006d3c:	425b      	neglt	r3, r3
 8006d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d42:	9307      	strge	r3, [sp, #28]
 8006d44:	9307      	strlt	r3, [sp, #28]
 8006d46:	bfb8      	it	lt
 8006d48:	9204      	strlt	r2, [sp, #16]
 8006d4a:	7823      	ldrb	r3, [r4, #0]
 8006d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d4e:	d10c      	bne.n	8006d6a <_vfiprintf_r+0x15a>
 8006d50:	7863      	ldrb	r3, [r4, #1]
 8006d52:	2b2a      	cmp	r3, #42	; 0x2a
 8006d54:	d134      	bne.n	8006dc0 <_vfiprintf_r+0x1b0>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	1d1a      	adds	r2, r3, #4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	9203      	str	r2, [sp, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bfb8      	it	lt
 8006d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d66:	3402      	adds	r4, #2
 8006d68:	9305      	str	r3, [sp, #20]
 8006d6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006e40 <_vfiprintf_r+0x230>
 8006d6e:	7821      	ldrb	r1, [r4, #0]
 8006d70:	2203      	movs	r2, #3
 8006d72:	4650      	mov	r0, sl
 8006d74:	f7f9 fa4c 	bl	8000210 <memchr>
 8006d78:	b138      	cbz	r0, 8006d8a <_vfiprintf_r+0x17a>
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	eba0 000a 	sub.w	r0, r0, sl
 8006d80:	2240      	movs	r2, #64	; 0x40
 8006d82:	4082      	lsls	r2, r0
 8006d84:	4313      	orrs	r3, r2
 8006d86:	3401      	adds	r4, #1
 8006d88:	9304      	str	r3, [sp, #16]
 8006d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d8e:	4829      	ldr	r0, [pc, #164]	; (8006e34 <_vfiprintf_r+0x224>)
 8006d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d94:	2206      	movs	r2, #6
 8006d96:	f7f9 fa3b 	bl	8000210 <memchr>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d03f      	beq.n	8006e1e <_vfiprintf_r+0x20e>
 8006d9e:	4b26      	ldr	r3, [pc, #152]	; (8006e38 <_vfiprintf_r+0x228>)
 8006da0:	bb1b      	cbnz	r3, 8006dea <_vfiprintf_r+0x1da>
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	3307      	adds	r3, #7
 8006da6:	f023 0307 	bic.w	r3, r3, #7
 8006daa:	3308      	adds	r3, #8
 8006dac:	9303      	str	r3, [sp, #12]
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	443b      	add	r3, r7
 8006db2:	9309      	str	r3, [sp, #36]	; 0x24
 8006db4:	e768      	b.n	8006c88 <_vfiprintf_r+0x78>
 8006db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dba:	460c      	mov	r4, r1
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	e7a6      	b.n	8006d0e <_vfiprintf_r+0xfe>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	3401      	adds	r4, #1
 8006dc4:	9305      	str	r3, [sp, #20]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f04f 0c0a 	mov.w	ip, #10
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd2:	3a30      	subs	r2, #48	; 0x30
 8006dd4:	2a09      	cmp	r2, #9
 8006dd6:	d903      	bls.n	8006de0 <_vfiprintf_r+0x1d0>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0c6      	beq.n	8006d6a <_vfiprintf_r+0x15a>
 8006ddc:	9105      	str	r1, [sp, #20]
 8006dde:	e7c4      	b.n	8006d6a <_vfiprintf_r+0x15a>
 8006de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006de4:	4604      	mov	r4, r0
 8006de6:	2301      	movs	r3, #1
 8006de8:	e7f0      	b.n	8006dcc <_vfiprintf_r+0x1bc>
 8006dea:	ab03      	add	r3, sp, #12
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	462a      	mov	r2, r5
 8006df0:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <_vfiprintf_r+0x22c>)
 8006df2:	a904      	add	r1, sp, #16
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7fd fd9d 	bl	8004934 <_printf_float>
 8006dfa:	4607      	mov	r7, r0
 8006dfc:	1c78      	adds	r0, r7, #1
 8006dfe:	d1d6      	bne.n	8006dae <_vfiprintf_r+0x19e>
 8006e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e02:	07d9      	lsls	r1, r3, #31
 8006e04:	d405      	bmi.n	8006e12 <_vfiprintf_r+0x202>
 8006e06:	89ab      	ldrh	r3, [r5, #12]
 8006e08:	059a      	lsls	r2, r3, #22
 8006e0a:	d402      	bmi.n	8006e12 <_vfiprintf_r+0x202>
 8006e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e0e:	f7fe fbdd 	bl	80055cc <__retarget_lock_release_recursive>
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	065b      	lsls	r3, r3, #25
 8006e16:	f53f af1d 	bmi.w	8006c54 <_vfiprintf_r+0x44>
 8006e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e1c:	e71c      	b.n	8006c58 <_vfiprintf_r+0x48>
 8006e1e:	ab03      	add	r3, sp, #12
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	462a      	mov	r2, r5
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <_vfiprintf_r+0x22c>)
 8006e26:	a904      	add	r1, sp, #16
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f7fe f827 	bl	8004e7c <_printf_i>
 8006e2e:	e7e4      	b.n	8006dfa <_vfiprintf_r+0x1ea>
 8006e30:	0800776c 	.word	0x0800776c
 8006e34:	08007776 	.word	0x08007776
 8006e38:	08004935 	.word	0x08004935
 8006e3c:	08006beb 	.word	0x08006beb
 8006e40:	08007772 	.word	0x08007772

08006e44 <__sflush_r>:
 8006e44:	898a      	ldrh	r2, [r1, #12]
 8006e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	0710      	lsls	r0, r2, #28
 8006e4e:	460c      	mov	r4, r1
 8006e50:	d458      	bmi.n	8006f04 <__sflush_r+0xc0>
 8006e52:	684b      	ldr	r3, [r1, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	dc05      	bgt.n	8006e64 <__sflush_r+0x20>
 8006e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dc02      	bgt.n	8006e64 <__sflush_r+0x20>
 8006e5e:	2000      	movs	r0, #0
 8006e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e66:	2e00      	cmp	r6, #0
 8006e68:	d0f9      	beq.n	8006e5e <__sflush_r+0x1a>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e70:	682f      	ldr	r7, [r5, #0]
 8006e72:	6a21      	ldr	r1, [r4, #32]
 8006e74:	602b      	str	r3, [r5, #0]
 8006e76:	d032      	beq.n	8006ede <__sflush_r+0x9a>
 8006e78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	075a      	lsls	r2, r3, #29
 8006e7e:	d505      	bpl.n	8006e8c <__sflush_r+0x48>
 8006e80:	6863      	ldr	r3, [r4, #4]
 8006e82:	1ac0      	subs	r0, r0, r3
 8006e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e86:	b10b      	cbz	r3, 8006e8c <__sflush_r+0x48>
 8006e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e8a:	1ac0      	subs	r0, r0, r3
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4602      	mov	r2, r0
 8006e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e92:	6a21      	ldr	r1, [r4, #32]
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b0      	blx	r6
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	d106      	bne.n	8006eac <__sflush_r+0x68>
 8006e9e:	6829      	ldr	r1, [r5, #0]
 8006ea0:	291d      	cmp	r1, #29
 8006ea2:	d82b      	bhi.n	8006efc <__sflush_r+0xb8>
 8006ea4:	4a29      	ldr	r2, [pc, #164]	; (8006f4c <__sflush_r+0x108>)
 8006ea6:	410a      	asrs	r2, r1
 8006ea8:	07d6      	lsls	r6, r2, #31
 8006eaa:	d427      	bmi.n	8006efc <__sflush_r+0xb8>
 8006eac:	2200      	movs	r2, #0
 8006eae:	6062      	str	r2, [r4, #4]
 8006eb0:	04d9      	lsls	r1, r3, #19
 8006eb2:	6922      	ldr	r2, [r4, #16]
 8006eb4:	6022      	str	r2, [r4, #0]
 8006eb6:	d504      	bpl.n	8006ec2 <__sflush_r+0x7e>
 8006eb8:	1c42      	adds	r2, r0, #1
 8006eba:	d101      	bne.n	8006ec0 <__sflush_r+0x7c>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b903      	cbnz	r3, 8006ec2 <__sflush_r+0x7e>
 8006ec0:	6560      	str	r0, [r4, #84]	; 0x54
 8006ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ec4:	602f      	str	r7, [r5, #0]
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	d0c9      	beq.n	8006e5e <__sflush_r+0x1a>
 8006eca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	d002      	beq.n	8006ed8 <__sflush_r+0x94>
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7ff f9f6 	bl	80062c4 <_free_r>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	6360      	str	r0, [r4, #52]	; 0x34
 8006edc:	e7c0      	b.n	8006e60 <__sflush_r+0x1c>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	47b0      	blx	r6
 8006ee4:	1c41      	adds	r1, r0, #1
 8006ee6:	d1c8      	bne.n	8006e7a <__sflush_r+0x36>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0c5      	beq.n	8006e7a <__sflush_r+0x36>
 8006eee:	2b1d      	cmp	r3, #29
 8006ef0:	d001      	beq.n	8006ef6 <__sflush_r+0xb2>
 8006ef2:	2b16      	cmp	r3, #22
 8006ef4:	d101      	bne.n	8006efa <__sflush_r+0xb6>
 8006ef6:	602f      	str	r7, [r5, #0]
 8006ef8:	e7b1      	b.n	8006e5e <__sflush_r+0x1a>
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	e7ad      	b.n	8006e60 <__sflush_r+0x1c>
 8006f04:	690f      	ldr	r7, [r1, #16]
 8006f06:	2f00      	cmp	r7, #0
 8006f08:	d0a9      	beq.n	8006e5e <__sflush_r+0x1a>
 8006f0a:	0793      	lsls	r3, r2, #30
 8006f0c:	680e      	ldr	r6, [r1, #0]
 8006f0e:	bf08      	it	eq
 8006f10:	694b      	ldreq	r3, [r1, #20]
 8006f12:	600f      	str	r7, [r1, #0]
 8006f14:	bf18      	it	ne
 8006f16:	2300      	movne	r3, #0
 8006f18:	eba6 0807 	sub.w	r8, r6, r7
 8006f1c:	608b      	str	r3, [r1, #8]
 8006f1e:	f1b8 0f00 	cmp.w	r8, #0
 8006f22:	dd9c      	ble.n	8006e5e <__sflush_r+0x1a>
 8006f24:	6a21      	ldr	r1, [r4, #32]
 8006f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f28:	4643      	mov	r3, r8
 8006f2a:	463a      	mov	r2, r7
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	47b0      	blx	r6
 8006f30:	2800      	cmp	r0, #0
 8006f32:	dc06      	bgt.n	8006f42 <__sflush_r+0xfe>
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f3a:	81a3      	strh	r3, [r4, #12]
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f40:	e78e      	b.n	8006e60 <__sflush_r+0x1c>
 8006f42:	4407      	add	r7, r0
 8006f44:	eba8 0800 	sub.w	r8, r8, r0
 8006f48:	e7e9      	b.n	8006f1e <__sflush_r+0xda>
 8006f4a:	bf00      	nop
 8006f4c:	dfbffffe 	.word	0xdfbffffe

08006f50 <_fflush_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	690b      	ldr	r3, [r1, #16]
 8006f54:	4605      	mov	r5, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	b913      	cbnz	r3, 8006f60 <_fflush_r+0x10>
 8006f5a:	2500      	movs	r5, #0
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	b118      	cbz	r0, 8006f6a <_fflush_r+0x1a>
 8006f62:	6a03      	ldr	r3, [r0, #32]
 8006f64:	b90b      	cbnz	r3, 8006f6a <_fflush_r+0x1a>
 8006f66:	f7fe f937 	bl	80051d8 <__sinit>
 8006f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0f3      	beq.n	8006f5a <_fflush_r+0xa>
 8006f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f74:	07d0      	lsls	r0, r2, #31
 8006f76:	d404      	bmi.n	8006f82 <_fflush_r+0x32>
 8006f78:	0599      	lsls	r1, r3, #22
 8006f7a:	d402      	bmi.n	8006f82 <_fflush_r+0x32>
 8006f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f7e:	f7fe fb24 	bl	80055ca <__retarget_lock_acquire_recursive>
 8006f82:	4628      	mov	r0, r5
 8006f84:	4621      	mov	r1, r4
 8006f86:	f7ff ff5d 	bl	8006e44 <__sflush_r>
 8006f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f8c:	07da      	lsls	r2, r3, #31
 8006f8e:	4605      	mov	r5, r0
 8006f90:	d4e4      	bmi.n	8006f5c <_fflush_r+0xc>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	059b      	lsls	r3, r3, #22
 8006f96:	d4e1      	bmi.n	8006f5c <_fflush_r+0xc>
 8006f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9a:	f7fe fb17 	bl	80055cc <__retarget_lock_release_recursive>
 8006f9e:	e7dd      	b.n	8006f5c <_fflush_r+0xc>

08006fa0 <__swhatbuf_r>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa8:	2900      	cmp	r1, #0
 8006faa:	b096      	sub	sp, #88	; 0x58
 8006fac:	4615      	mov	r5, r2
 8006fae:	461e      	mov	r6, r3
 8006fb0:	da0d      	bge.n	8006fce <__swhatbuf_r+0x2e>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006fb8:	f04f 0100 	mov.w	r1, #0
 8006fbc:	bf0c      	ite	eq
 8006fbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006fc2:	2340      	movne	r3, #64	; 0x40
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	6031      	str	r1, [r6, #0]
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	b016      	add	sp, #88	; 0x58
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
 8006fce:	466a      	mov	r2, sp
 8006fd0:	f000 f848 	bl	8007064 <_fstat_r>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	dbec      	blt.n	8006fb2 <__swhatbuf_r+0x12>
 8006fd8:	9901      	ldr	r1, [sp, #4]
 8006fda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006fde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006fe2:	4259      	negs	r1, r3
 8006fe4:	4159      	adcs	r1, r3
 8006fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fea:	e7eb      	b.n	8006fc4 <__swhatbuf_r+0x24>

08006fec <__smakebuf_r>:
 8006fec:	898b      	ldrh	r3, [r1, #12]
 8006fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ff0:	079d      	lsls	r5, r3, #30
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	d507      	bpl.n	8007008 <__smakebuf_r+0x1c>
 8006ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	6123      	str	r3, [r4, #16]
 8007000:	2301      	movs	r3, #1
 8007002:	6163      	str	r3, [r4, #20]
 8007004:	b002      	add	sp, #8
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	ab01      	add	r3, sp, #4
 800700a:	466a      	mov	r2, sp
 800700c:	f7ff ffc8 	bl	8006fa0 <__swhatbuf_r>
 8007010:	9900      	ldr	r1, [sp, #0]
 8007012:	4605      	mov	r5, r0
 8007014:	4630      	mov	r0, r6
 8007016:	f7ff f9c9 	bl	80063ac <_malloc_r>
 800701a:	b948      	cbnz	r0, 8007030 <__smakebuf_r+0x44>
 800701c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007020:	059a      	lsls	r2, r3, #22
 8007022:	d4ef      	bmi.n	8007004 <__smakebuf_r+0x18>
 8007024:	f023 0303 	bic.w	r3, r3, #3
 8007028:	f043 0302 	orr.w	r3, r3, #2
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	e7e3      	b.n	8006ff8 <__smakebuf_r+0xc>
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	6020      	str	r0, [r4, #0]
 8007034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	9b00      	ldr	r3, [sp, #0]
 800703c:	6163      	str	r3, [r4, #20]
 800703e:	9b01      	ldr	r3, [sp, #4]
 8007040:	6120      	str	r0, [r4, #16]
 8007042:	b15b      	cbz	r3, 800705c <__smakebuf_r+0x70>
 8007044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007048:	4630      	mov	r0, r6
 800704a:	f000 f81d 	bl	8007088 <_isatty_r>
 800704e:	b128      	cbz	r0, 800705c <__smakebuf_r+0x70>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	f023 0303 	bic.w	r3, r3, #3
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	431d      	orrs	r5, r3
 8007060:	81a5      	strh	r5, [r4, #12]
 8007062:	e7cf      	b.n	8007004 <__smakebuf_r+0x18>

08007064 <_fstat_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d07      	ldr	r5, [pc, #28]	; (8007084 <_fstat_r+0x20>)
 8007068:	2300      	movs	r3, #0
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	602b      	str	r3, [r5, #0]
 8007072:	f7fa fc8a 	bl	800198a <_fstat>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	d102      	bne.n	8007080 <_fstat_r+0x1c>
 800707a:	682b      	ldr	r3, [r5, #0]
 800707c:	b103      	cbz	r3, 8007080 <_fstat_r+0x1c>
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	bd38      	pop	{r3, r4, r5, pc}
 8007082:	bf00      	nop
 8007084:	20000578 	.word	0x20000578

08007088 <_isatty_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d06      	ldr	r5, [pc, #24]	; (80070a4 <_isatty_r+0x1c>)
 800708c:	2300      	movs	r3, #0
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	f7fa fc89 	bl	80019aa <_isatty>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_isatty_r+0x1a>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_isatty_r+0x1a>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20000578 	.word	0x20000578

080070a8 <_sbrk_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d06      	ldr	r5, [pc, #24]	; (80070c4 <_sbrk_r+0x1c>)
 80070ac:	2300      	movs	r3, #0
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	f7fa fc92 	bl	80019dc <_sbrk>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_sbrk_r+0x1a>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_sbrk_r+0x1a>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20000578 	.word	0x20000578

080070c8 <memcpy>:
 80070c8:	440a      	add	r2, r1
 80070ca:	4291      	cmp	r1, r2
 80070cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80070d0:	d100      	bne.n	80070d4 <memcpy+0xc>
 80070d2:	4770      	bx	lr
 80070d4:	b510      	push	{r4, lr}
 80070d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070de:	4291      	cmp	r1, r2
 80070e0:	d1f9      	bne.n	80070d6 <memcpy+0xe>
 80070e2:	bd10      	pop	{r4, pc}

080070e4 <__assert_func>:
 80070e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070e6:	4614      	mov	r4, r2
 80070e8:	461a      	mov	r2, r3
 80070ea:	4b09      	ldr	r3, [pc, #36]	; (8007110 <__assert_func+0x2c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4605      	mov	r5, r0
 80070f0:	68d8      	ldr	r0, [r3, #12]
 80070f2:	b14c      	cbz	r4, 8007108 <__assert_func+0x24>
 80070f4:	4b07      	ldr	r3, [pc, #28]	; (8007114 <__assert_func+0x30>)
 80070f6:	9100      	str	r1, [sp, #0]
 80070f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070fc:	4906      	ldr	r1, [pc, #24]	; (8007118 <__assert_func+0x34>)
 80070fe:	462b      	mov	r3, r5
 8007100:	f000 f844 	bl	800718c <fiprintf>
 8007104:	f000 f854 	bl	80071b0 <abort>
 8007108:	4b04      	ldr	r3, [pc, #16]	; (800711c <__assert_func+0x38>)
 800710a:	461c      	mov	r4, r3
 800710c:	e7f3      	b.n	80070f6 <__assert_func+0x12>
 800710e:	bf00      	nop
 8007110:	20000064 	.word	0x20000064
 8007114:	08007787 	.word	0x08007787
 8007118:	08007794 	.word	0x08007794
 800711c:	080077c2 	.word	0x080077c2

08007120 <_calloc_r>:
 8007120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007122:	fba1 2402 	umull	r2, r4, r1, r2
 8007126:	b94c      	cbnz	r4, 800713c <_calloc_r+0x1c>
 8007128:	4611      	mov	r1, r2
 800712a:	9201      	str	r2, [sp, #4]
 800712c:	f7ff f93e 	bl	80063ac <_malloc_r>
 8007130:	9a01      	ldr	r2, [sp, #4]
 8007132:	4605      	mov	r5, r0
 8007134:	b930      	cbnz	r0, 8007144 <_calloc_r+0x24>
 8007136:	4628      	mov	r0, r5
 8007138:	b003      	add	sp, #12
 800713a:	bd30      	pop	{r4, r5, pc}
 800713c:	220c      	movs	r2, #12
 800713e:	6002      	str	r2, [r0, #0]
 8007140:	2500      	movs	r5, #0
 8007142:	e7f8      	b.n	8007136 <_calloc_r+0x16>
 8007144:	4621      	mov	r1, r4
 8007146:	f7fe f9c3 	bl	80054d0 <memset>
 800714a:	e7f4      	b.n	8007136 <_calloc_r+0x16>

0800714c <__ascii_mbtowc>:
 800714c:	b082      	sub	sp, #8
 800714e:	b901      	cbnz	r1, 8007152 <__ascii_mbtowc+0x6>
 8007150:	a901      	add	r1, sp, #4
 8007152:	b142      	cbz	r2, 8007166 <__ascii_mbtowc+0x1a>
 8007154:	b14b      	cbz	r3, 800716a <__ascii_mbtowc+0x1e>
 8007156:	7813      	ldrb	r3, [r2, #0]
 8007158:	600b      	str	r3, [r1, #0]
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	1e10      	subs	r0, r2, #0
 800715e:	bf18      	it	ne
 8007160:	2001      	movne	r0, #1
 8007162:	b002      	add	sp, #8
 8007164:	4770      	bx	lr
 8007166:	4610      	mov	r0, r2
 8007168:	e7fb      	b.n	8007162 <__ascii_mbtowc+0x16>
 800716a:	f06f 0001 	mvn.w	r0, #1
 800716e:	e7f8      	b.n	8007162 <__ascii_mbtowc+0x16>

08007170 <__ascii_wctomb>:
 8007170:	b149      	cbz	r1, 8007186 <__ascii_wctomb+0x16>
 8007172:	2aff      	cmp	r2, #255	; 0xff
 8007174:	bf85      	ittet	hi
 8007176:	238a      	movhi	r3, #138	; 0x8a
 8007178:	6003      	strhi	r3, [r0, #0]
 800717a:	700a      	strbls	r2, [r1, #0]
 800717c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007180:	bf98      	it	ls
 8007182:	2001      	movls	r0, #1
 8007184:	4770      	bx	lr
 8007186:	4608      	mov	r0, r1
 8007188:	4770      	bx	lr
	...

0800718c <fiprintf>:
 800718c:	b40e      	push	{r1, r2, r3}
 800718e:	b503      	push	{r0, r1, lr}
 8007190:	4601      	mov	r1, r0
 8007192:	ab03      	add	r3, sp, #12
 8007194:	4805      	ldr	r0, [pc, #20]	; (80071ac <fiprintf+0x20>)
 8007196:	f853 2b04 	ldr.w	r2, [r3], #4
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	f7ff fd37 	bl	8006c10 <_vfiprintf_r>
 80071a2:	b002      	add	sp, #8
 80071a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071a8:	b003      	add	sp, #12
 80071aa:	4770      	bx	lr
 80071ac:	20000064 	.word	0x20000064

080071b0 <abort>:
 80071b0:	b508      	push	{r3, lr}
 80071b2:	2006      	movs	r0, #6
 80071b4:	f000 f82c 	bl	8007210 <raise>
 80071b8:	2001      	movs	r0, #1
 80071ba:	f7fa fb97 	bl	80018ec <_exit>

080071be <_raise_r>:
 80071be:	291f      	cmp	r1, #31
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4604      	mov	r4, r0
 80071c4:	460d      	mov	r5, r1
 80071c6:	d904      	bls.n	80071d2 <_raise_r+0x14>
 80071c8:	2316      	movs	r3, #22
 80071ca:	6003      	str	r3, [r0, #0]
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	bd38      	pop	{r3, r4, r5, pc}
 80071d2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80071d4:	b112      	cbz	r2, 80071dc <_raise_r+0x1e>
 80071d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071da:	b94b      	cbnz	r3, 80071f0 <_raise_r+0x32>
 80071dc:	4620      	mov	r0, r4
 80071de:	f000 f831 	bl	8007244 <_getpid_r>
 80071e2:	462a      	mov	r2, r5
 80071e4:	4601      	mov	r1, r0
 80071e6:	4620      	mov	r0, r4
 80071e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ec:	f000 b818 	b.w	8007220 <_kill_r>
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d00a      	beq.n	800720a <_raise_r+0x4c>
 80071f4:	1c59      	adds	r1, r3, #1
 80071f6:	d103      	bne.n	8007200 <_raise_r+0x42>
 80071f8:	2316      	movs	r3, #22
 80071fa:	6003      	str	r3, [r0, #0]
 80071fc:	2001      	movs	r0, #1
 80071fe:	e7e7      	b.n	80071d0 <_raise_r+0x12>
 8007200:	2400      	movs	r4, #0
 8007202:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007206:	4628      	mov	r0, r5
 8007208:	4798      	blx	r3
 800720a:	2000      	movs	r0, #0
 800720c:	e7e0      	b.n	80071d0 <_raise_r+0x12>
	...

08007210 <raise>:
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <raise+0xc>)
 8007212:	4601      	mov	r1, r0
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	f7ff bfd2 	b.w	80071be <_raise_r>
 800721a:	bf00      	nop
 800721c:	20000064 	.word	0x20000064

08007220 <_kill_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d07      	ldr	r5, [pc, #28]	; (8007240 <_kill_r+0x20>)
 8007224:	2300      	movs	r3, #0
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	4611      	mov	r1, r2
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	f7fa fb4d 	bl	80018cc <_kill>
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	d102      	bne.n	800723c <_kill_r+0x1c>
 8007236:	682b      	ldr	r3, [r5, #0]
 8007238:	b103      	cbz	r3, 800723c <_kill_r+0x1c>
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	bd38      	pop	{r3, r4, r5, pc}
 800723e:	bf00      	nop
 8007240:	20000578 	.word	0x20000578

08007244 <_getpid_r>:
 8007244:	f7fa bb3a 	b.w	80018bc <_getpid>

08007248 <_init>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	bf00      	nop
 800724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724e:	bc08      	pop	{r3}
 8007250:	469e      	mov	lr, r3
 8007252:	4770      	bx	lr

08007254 <_fini>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr
