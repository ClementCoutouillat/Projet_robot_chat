
YDLIDAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  08007b88  08007b88  00017b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082d0  080082d0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d8  080082d8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d8  080082d8  000182d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082dc  080082dc  000182dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080082e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200001d4  080084b4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  080084b4  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ee9  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd9  00000000  00000000  0002a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  0002bf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a1  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000150ef  00000000  00000000  0002ce41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8b9  00000000  00000000  00041f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079833  00000000  00000000  0004d7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032a8  00000000  00000000  000c701c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000ca2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b6c 	.word	0x08007b6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007b6c 	.word	0x08007b6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <calculateChecksum>:
 * @param data  The data to be calculated
 * @param length  The length of the data to be calculated
 * @return uint16_t
 */
uint16_t calculateChecksum(uint8_t *data, size_t length)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    uint16_t checksum = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	82fb      	strh	r3, [r7, #22]

    for (int i = 0; i < 2 * length + 1; i += 2)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	e01b      	b.n	8000f30 <calculateChecksum+0x4c>
    {
        if (i == 8)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d102      	bne.n	8000f04 <calculateChecksum+0x20>
        {
            i += 2; //
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	3302      	adds	r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        uint16_t tmp = (uint16_t)data[i] << 8 | (uint16_t)data[i + 1];
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	3301      	adds	r3, #1
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	440b      	add	r3, r1
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	81fb      	strh	r3, [r7, #14]
        checksum ^= tmp;
 8000f22:	8afa      	ldrh	r2, [r7, #22]
 8000f24:	89fb      	ldrh	r3, [r7, #14]
 8000f26:	4053      	eors	r3, r2
 8000f28:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < 2 * length + 1; i += 2)
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8dd      	bhi.n	8000ef8 <calculateChecksum+0x14>
    }
    // 交换checksum的字节序
    checksum = (checksum >> 8) | (checksum << 8);
 8000f3c:	8afb      	ldrh	r3, [r7, #22]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	8afb      	ldrh	r3, [r7, #22]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	82fb      	strh	r3, [r7, #22]
    return checksum;
 8000f50:	8afb      	ldrh	r3, [r7, #22]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <getDeviceInfo>:
 *
 * @param device_info  The device info Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t getDeviceInfo(ydlidar_device_info_t *device_info)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    ydlidar_response_header_t response_header;
    sendCommand(YDLIDAR_CMD_GET_DEVICE_INFO);
 8000f68:	2090      	movs	r0, #144	; 0x90
 8000f6a:	f000 f877 	bl	800105c <sendCommand>

    receiveResponseHeader(&response_header);
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f888 	bl	8001088 <receiveResponseHeader>

    if (response_header.type_mode == YDLIDAR_RESPONSE_DEVICVE_TYPE_MODE && response_header.response_length == YDLIDAR_RESPONSE_DEVICE_INFO_SIZE)
 8000f78:	7cbb      	ldrb	r3, [r7, #18]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d116      	bne.n	8000fac <getDeviceInfo+0x4c>
 8000f7e:	89fb      	ldrh	r3, [r7, #14]
 8000f80:	8a3a      	ldrh	r2, [r7, #16]
 8000f82:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000f86:	0412      	lsls	r2, r2, #16
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	2b14      	cmp	r3, #20
 8000f8c:	d10e      	bne.n	8000fac <getDeviceInfo+0x4c>
    {
        uint8_t *infobuf = (uint8_t *)device_info;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	617b      	str	r3, [r7, #20]
        ydlidar.func.receive_response(infobuf, YDLIDAR_RESPONSE_DEVICE_INFO_SIZE);
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <getDeviceInfo+0x58>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2114      	movs	r1, #20
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	4798      	blx	r3
        if (device_info->model == YDLIDAR_MODEL_X4)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b06      	cmp	r3, #6
 8000fa2:	d101      	bne.n	8000fa8 <getDeviceInfo+0x48>
        {
            return RESULT_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e002      	b.n	8000fae <getDeviceInfo+0x4e>
        }
        else
        {
            return RESULT_FAIL;
 8000fa8:	23ff      	movs	r3, #255	; 0xff
 8000faa:	e000      	b.n	8000fae <getDeviceInfo+0x4e>
        }
    }
    else
    {
        return RESULT_FAIL;
 8000fac:	23ff      	movs	r3, #255	; 0xff
    }
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001f0 	.word	0x200001f0

08000fbc <getDeviceHealth>:
 *
 * @param device_health  The device health Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t getDeviceHealth(ydlidar_device_health_t *device_health)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    ydlidar_response_header_t response_header;
    sendCommand(YDLIDAR_CMD_GET_DEVICE_HEALTH);
 8000fc4:	2091      	movs	r0, #145	; 0x91
 8000fc6:	f000 f849 	bl	800105c <sendCommand>
    receiveResponseHeader(&response_header);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f85a 	bl	8001088 <receiveResponseHeader>
    if (response_header.type_mode == YDLIDAR_RESPONSE_HEALTH_TYPE_MODE && response_header.response_length == YDLIDAR_RESPONSE_DEVICE_HEALTH_SIZE)
 8000fd4:	7cbb      	ldrb	r3, [r7, #18]
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d116      	bne.n	8001008 <getDeviceHealth+0x4c>
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	8a3a      	ldrh	r2, [r7, #16]
 8000fde:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000fe2:	0412      	lsls	r2, r2, #16
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d10e      	bne.n	8001008 <getDeviceHealth+0x4c>
    {
        uint8_t *healthbuf = (uint8_t *)device_health;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	617b      	str	r3, [r7, #20]
        ydlidar.func.receive_response(healthbuf, YDLIDAR_RESPONSE_DEVICE_HEALTH_SIZE);
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <getDeviceHealth+0x58>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	6978      	ldr	r0, [r7, #20]
 8000ff6:	4798      	blx	r3
        if (device_health->status == 0)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <getDeviceHealth+0x48>
        {
            return RESULT_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	e002      	b.n	800100a <getDeviceHealth+0x4e>
        }
        else
        {
            return RESULT_FAIL;
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	e000      	b.n	800100a <getDeviceHealth+0x4e>
        }
    }
    else
    {
        return RESULT_FAIL;
 8001008:	23ff      	movs	r3, #255	; 0xff
    }
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200001f0 	.word	0x200001f0

08001018 <stopScan>:
/**
 * @brief  This function is used to stop the scan
 *
 */
void stopScan()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
    sendCommand(YDLIDER_CMD_STOP);
 800101c:	2065      	movs	r0, #101	; 0x65
 800101e:	f000 f81d 	bl	800105c <sendCommand>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}

08001026 <startScan>:
 * @brief  This function is used to start the scan
 *
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t startScan()
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
    stopScan();
 800102c:	f7ff fff4 	bl	8001018 <stopScan>
    HAL_Delay(1000);
 8001030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001034:	f001 f89c 	bl	8002170 <HAL_Delay>
    sendCommand(YDLIDER_CMD_SCAN);
 8001038:	2060      	movs	r0, #96	; 0x60
 800103a:	f000 f80f 	bl	800105c <sendCommand>
    ydlidar_response_header_t response_header;
    receiveResponseHeader(&response_header);
 800103e:	463b      	mov	r3, r7
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f821 	bl	8001088 <receiveResponseHeader>
    if (response_header.type_mode == YDLIDAR_RESPONSE_MEASUREMENT_TYPE_MODE)
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	2b81      	cmp	r3, #129	; 0x81
 800104a:	d101      	bne.n	8001050 <startScan+0x2a>
    {
        return RESULT_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	e000      	b.n	8001052 <startScan+0x2c>
    }
    else
    {
        return RESULT_FAIL;
 8001050:	23ff      	movs	r3, #255	; 0xff
    }
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <sendCommand>:
 * @brief This function is used to send the command
 *
 * @param cmd  The command to be sent
 */
void sendCommand(uint8_t cmd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
    ydlidar_cmd_packet_t cmd_packet;
    cmd_packet.syncByte = YDLIDER_CMD_SYNC_BYTE;
 8001066:	23a5      	movs	r3, #165	; 0xa5
 8001068:	733b      	strb	r3, [r7, #12]
    cmd_packet.cmd_flag = cmd;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	737b      	strb	r3, [r7, #13]
    ydlidar.func.send_command((uint8_t *)&cmd_packet, sizeof(cmd_packet));
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <sendCommand+0x28>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	2102      	movs	r1, #2
 8001078:	4610      	mov	r0, r2
 800107a:	4798      	blx	r3
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200001f0 	.word	0x200001f0

08001088 <receiveResponseHeader>:
 *
 * @param response_header  The response header Struct Pointer
 * @return result_t  RESULT_OK or RESULT_FAIL
 */
result_t receiveResponseHeader(ydlidar_response_header_t *response_header)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    uint8_t *header = (uint8_t *)response_header;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60fb      	str	r3, [r7, #12]
    ydlidar.func.receive_response(header, YDLIDAR_RESPONSE_HEADER_SIZE);
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <receiveResponseHeader+0x20>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2107      	movs	r1, #7
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	4798      	blx	r3
    printf("[DEBUG] Response mode: %d\r\n", response_header->response_mode);
    printf("[DEBUG] Response type mode: %x\r\n", response_header->type_mode);
    printf("[DEBUG] Response type mode: %d\r\n", response_header->type_mode);

#endif
    return RESULT_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200001f0 	.word	0x200001f0

080010ac <parseDistance>:
 * @param rawDistance  The raw distance data
 * @param LSN  The number of the sample data
 * @param realDistance  The real distance after parse
 */
void parseDistance(uint16_t *rawDistance, int LSN, double *realDistance)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < LSN; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e017      	b.n	80010ee <parseDistance+0x42>
    {
        realDistance[i] = (double)rawDistance[i] / 4.0f;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4413      	add	r3, r2
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa3b 	bl	8000544 <__aeabi_ui2d>
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	18d4      	adds	r4, r2, r3
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <parseDistance+0x54>)
 80010dc:	f7ff fbd6 	bl	800088c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < LSN; i++)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	dbe3      	blt.n	80010be <parseDistance+0x12>
    }
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	40100000 	.word	0x40100000

08001104 <AngleFirstLevelParse>:
 * @param LSA  The end angle
 * @param LSN  The number of the sample data
 * @param angles  The angle after parse
 */
void AngleFirstLevelParse(uint16_t FSA, uint16_t LSA, int LSN, double *angles)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b08f      	sub	sp, #60	; 0x3c
 8001108:	af00      	add	r7, sp, #0
 800110a:	60ba      	str	r2, [r7, #8]
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4603      	mov	r3, r0
 8001110:	81fb      	strh	r3, [r7, #14]
 8001112:	460b      	mov	r3, r1
 8001114:	81bb      	strh	r3, [r7, #12]
    // calculate start angle and end angle
    double startAngle = (double)(FSA >> 1) / 64.0;
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	085b      	lsrs	r3, r3, #1
 800111a:	b29b      	uxth	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa21 	bl	8000564 <__aeabi_i2d>
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <AngleFirstLevelParse+0xcc>)
 8001128:	f7ff fbb0 	bl	800088c <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double endAngle = (double)(LSA >> 1) / 64.0;
 8001134:	89bb      	ldrh	r3, [r7, #12]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	b29b      	uxth	r3, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa12 	bl	8000564 <__aeabi_i2d>
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <AngleFirstLevelParse+0xcc>)
 8001146:	f7ff fba1 	bl	800088c <__aeabi_ddiv>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // calculate angle range
    double angleRange = endAngle - startAngle;
 8001152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001156:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800115a:	f7ff f8b5 	bl	80002c8 <__aeabi_dsub>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // calculate angle resolution
    double angleResolution = angleRange / (double)(LSN - 1);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3b01      	subs	r3, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9fa 	bl	8000564 <__aeabi_i2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001178:	f7ff fb88 	bl	800088c <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < LSN; i++)
 8001184:	2300      	movs	r3, #0
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
 8001188:	e019      	b.n	80011be <AngleFirstLevelParse+0xba>
    {
        angles[i] = startAngle + angleResolution * i;
 800118a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800118c:	f7ff f9ea 	bl	8000564 <__aeabi_i2d>
 8001190:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001194:	f7ff fa50 	bl	8000638 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	18d4      	adds	r4, r2, r3
 80011a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011ac:	f7ff f88e 	bl	80002cc <__adddf3>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < LSN; i++)
 80011b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ba:	3301      	adds	r3, #1
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
 80011be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dbe1      	blt.n	800118a <AngleFirstLevelParse+0x86>
    }
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	373c      	adds	r7, #60	; 0x3c
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	40500000 	.word	0x40500000
 80011d4:	00000000 	.word	0x00000000

080011d8 <AngleSecondLevelParse>:
 * @param angles  The angle after first level parse
 * @param LSN  The number of the sample data
 * @param distances  The distance after parse
 */
void AngleSecondLevelParse(double *angles, int LSN, double *distances)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
    // IF Distance𝑖 == 0 AngCorrect𝑖 = 0
    // ELSE AngCorrect𝑖 = tand−1(21.8 ∗ 155.3−Distance𝑖 155.3∗Distance𝑖) for (int i = 1; i < LSN; i++)
    double AngCorrect = 0.0;
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < LSN; i++)
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e05f      	b.n	80012b6 <AngleSecondLevelParse+0xde>
    {
        if (distances[i] != 0)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	f7ff fc7d 	bl	8000b08 <__aeabi_dcmpeq>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d135      	bne.n	8001280 <AngleSecondLevelParse+0xa8>
        {
            AngCorrect = atan(21.8 * (155.3 - distances[i]) / (155.3 * distances[i]));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	a129      	add	r1, pc, #164	; (adr r1, 80012c8 <AngleSecondLevelParse+0xf0>)
 8001222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001226:	f7ff f84f 	bl	80002c8 <__aeabi_dsub>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	a327      	add	r3, pc, #156	; (adr r3, 80012d0 <AngleSecondLevelParse+0xf8>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9fe 	bl	8000638 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4614      	mov	r4, r2
 8001242:	461d      	mov	r5, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001250:	a31d      	add	r3, pc, #116	; (adr r3, 80012c8 <AngleSecondLevelParse+0xf0>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f9ef 	bl	8000638 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f7ff fb13 	bl	800088c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	ec43 2b17 	vmov	d7, r2, r3
 800126e:	eeb0 0a47 	vmov.f32	s0, s14
 8001272:	eef0 0a67 	vmov.f32	s1, s15
 8001276:	f006 facf 	bl	8007818 <atan>
 800127a:	ed87 0b06 	vstr	d0, [r7, #24]
 800127e:	e005      	b.n	800128c <AngleSecondLevelParse+0xb4>
        }
        else
        {
            AngCorrect = 0.0;
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }
        angles[i] += AngCorrect;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	18d4      	adds	r4, r2, r3
 80012a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012a4:	f7ff f812 	bl	80002cc <__adddf3>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 1; i < LSN; i++)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	db9b      	blt.n	80011f6 <AngleSecondLevelParse+0x1e>
    }
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdb0      	pop	{r4, r5, r7, pc}
 80012c8:	9999999a 	.word	0x9999999a
 80012cc:	40636999 	.word	0x40636999
 80012d0:	cccccccd 	.word	0xcccccccd
 80012d4:	4035cccc 	.word	0x4035cccc

080012d8 <startReceiveScanData>:
/**
 * @brief  This function is used to start receive the scan data
 *
 */
void startReceiveScanData(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
    ydlidar.func.receive_data_dma(scanPoints[SCAN_CIRCLE_INDEX], sizeof(scanPoints[SCAN_CIRCLE_INDEX]));
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <startReceiveScanData+0x28>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <startReceiveScanData+0x2c>)
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	4611      	mov	r1, r2
 80012e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80012ea:	fb01 f202 	mul.w	r2, r1, r2
 80012ee:	4906      	ldr	r1, [pc, #24]	; (8001308 <startReceiveScanData+0x30>)
 80012f0:	440a      	add	r2, r1
 80012f2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80012f6:	4610      	mov	r0, r2
 80012f8:	4798      	blx	r3
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001f0 	.word	0x200001f0
 8001304:	200004f0 	.word	0x200004f0
 8001308:	20000220 	.word	0x20000220

0800130c <dataProcess>:
    printf("receiveCount = %ld\r\n", receiveCount);
    PROCESS_SCAN_DATA_INDEX = (PROCESS_SCAN_DATA_INDEX + 1) % MAX_SCAN_BUFFER_SIZE;
}

void dataProcess(void)
{
 800130c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001310:	b09b      	sub	sp, #108	; 0x6c
 8001312:	af04      	add	r7, sp, #16
    if (receiveFlag == false)
 8001314:	4bb6      	ldr	r3, [pc, #728]	; (80015f0 <dataProcess+0x2e4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	f083 0301 	eor.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <dataProcess+0x1e>
    {
        printf("[DEBUG] receiveFlag = false,wai t for receive data\r\n");
 8001322:	48b4      	ldr	r0, [pc, #720]	; (80015f4 <dataProcess+0x2e8>)
 8001324:	f004 fada 	bl	80058dc <puts>
        return;
 8001328:	e1da      	b.n	80016e0 <dataProcess+0x3d4>
    }
    // printf("[DEBUG] PROCESS_SCAN_DATA_INDEX = %d, SCAN_CIRCLE_INDEX = %d\r\n", PROCESS_SCAN_DATA_INDEX, SCAN_CIRCLE_INDEX);

    uint8_t *data = (uint8_t *)&scanPoints[PROCESS_SCAN_DATA_INDEX];
 800132a:	4bb3      	ldr	r3, [pc, #716]	; (80015f8 <dataProcess+0x2ec>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	4ab0      	ldr	r2, [pc, #704]	; (80015fc <dataProcess+0x2f0>)
 800133a:	4413      	add	r3, r2
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef YDLIDAR_DEBUG_LEVEL_2
    for (int i = 0; i < MAX_SCAN_POINTS; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	657b      	str	r3, [r7, #84]	; 0x54
 8001342:	e00a      	b.n	800135a <dataProcess+0x4e>
    {
        printf("%02x ", data[i]);
 8001344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	48ac      	ldr	r0, [pc, #688]	; (8001600 <dataProcess+0x2f4>)
 8001350:	f004 fa5e 	bl	8005810 <iprintf>
    for (int i = 0; i < MAX_SCAN_POINTS; i++)
 8001354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001356:	3301      	adds	r3, #1
 8001358:	657b      	str	r3, [r7, #84]	; 0x54
 800135a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001360:	dbf0      	blt.n	8001344 <dataProcess+0x38>
    }
    printf("\r\n");
 8001362:	48a8      	ldr	r0, [pc, #672]	; (8001604 <dataProcess+0x2f8>)
 8001364:	f004 faba 	bl	80058dc <puts>
#endif
    uint16_t checkSumrResult = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    uint16_t dataIndex = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    while (dataIndex < MAX_SCAN_POINTS)
 8001374:	e18b      	b.n	800168e <dataProcess+0x382>
    {
        printf("[DEBUG] dataIndex = %d\r\n", dataIndex);
 8001376:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800137a:	4619      	mov	r1, r3
 800137c:	48a2      	ldr	r0, [pc, #648]	; (8001608 <dataProcess+0x2fc>)
 800137e:	f004 fa47 	bl	8005810 <iprintf>
        printf("[DEBUG] data[%d] = %2x\r\n", dataIndex, data[dataIndex]);
 8001382:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8001386:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800138a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800138c:	4413      	add	r3, r2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	489e      	ldr	r0, [pc, #632]	; (800160c <dataProcess+0x300>)
 8001394:	f004 fa3c 	bl	8005810 <iprintf>
        printf("[DEBUG] data[%d] = %2x\r\n", dataIndex + 1, data[dataIndex + 1]);
 8001398:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800139c:	1c59      	adds	r1, r3, #1
 800139e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4897      	ldr	r0, [pc, #604]	; (800160c <dataProcess+0x300>)
 80013ae:	f004 fa2f 	bl	8005810 <iprintf>
        if (data[dataIndex] == 0xAA && data[dataIndex + 1] == 0x55) // check the start flag
 80013b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80013b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2baa      	cmp	r3, #170	; 0xaa
 80013be:	f040 8161 	bne.w	8001684 <dataProcess+0x378>
 80013c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80013c6:	3301      	adds	r3, #1
 80013c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b55      	cmp	r3, #85	; 0x55
 80013d0:	f040 8158 	bne.w	8001684 <dataProcess+0x378>
        {
 80013d4:	466b      	mov	r3, sp
 80013d6:	461e      	mov	r6, r3
            data_packet = (ydlidar_data_packet_t *)&data[dataIndex];
 80013d8:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80013dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013de:	441a      	add	r2, r3
 80013e0:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <dataProcess+0x304>)
 80013e2:	601a      	str	r2, [r3, #0]
            printf("[DEBUG] data_packet->type_CT = %2x\r\n", data_packet->type_CT);
            printf("[DEBUG] data_packet->size_LSN = %2x\r\n", data_packet->size_LSN);
            printf("[DEBUG] data_packet->startAngle_FSA = %4x\r\n", data_packet->startAngle_FSA);
            printf("[DEBUG] data_packet->endAngle_LSA = %4x\r\n", data_packet->endAngle_LSA);
#endif
            if (data_packet->size_LSN == 1)
 80013e4:	4b8a      	ldr	r3, [pc, #552]	; (8001610 <dataProcess+0x304>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	78db      	ldrb	r3, [r3, #3]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d10d      	bne.n	800140a <dataProcess+0xfe>
            {
                // continue; // skip the start data packet
                dataIndex += sizeof(ydlidar_data_packet_t) + data_packet->size_LSN * sizeof(uint16_t);
 80013ee:	4b88      	ldr	r3, [pc, #544]	; (8001610 <dataProcess+0x304>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	78db      	ldrb	r3, [r3, #3]
 80013f4:	3305      	adds	r3, #5
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001400:	4413      	add	r3, r2
 8001402:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                continue;
 8001406:	46b5      	mov	sp, r6
 8001408:	e141      	b.n	800168e <dataProcess+0x382>
            }
            checkSumrResult = calculateChecksum((uint8_t *)&data[dataIndex], data_packet->size_LSN + 4); // calculate the checksum
 800140a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800140e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001410:	441a      	add	r2, r3
 8001412:	4b7f      	ldr	r3, [pc, #508]	; (8001610 <dataProcess+0x304>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	78db      	ldrb	r3, [r3, #3]
 8001418:	3304      	adds	r3, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f7ff fd61 	bl	8000ee4 <calculateChecksum>
 8001422:	4603      	mov	r3, r0
 8001424:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            uint16_t sampleDatas_SI[data_packet->size_LSN];
 8001428:	4b79      	ldr	r3, [pc, #484]	; (8001610 <dataProcess+0x304>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	78d9      	ldrb	r1, [r3, #3]
 800142e:	460b      	mov	r3, r1
 8001430:	3b01      	subs	r3, #1
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001434:	b2cb      	uxtb	r3, r1
 8001436:	2200      	movs	r2, #0
 8001438:	461c      	mov	r4, r3
 800143a:	4615      	mov	r5, r2
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	012b      	lsls	r3, r5, #4
 8001446:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800144a:	0122      	lsls	r2, r4, #4
 800144c:	b2cb      	uxtb	r3, r1
 800144e:	2200      	movs	r2, #0
 8001450:	4698      	mov	r8, r3
 8001452:	4691      	mov	r9, r2
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001460:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001464:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001468:	460b      	mov	r3, r1
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	3307      	adds	r3, #7
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	ebad 0d03 	sub.w	sp, sp, r3
 8001476:	ab04      	add	r3, sp, #16
 8001478:	3301      	adds	r3, #1
 800147a:	085b      	lsrs	r3, r3, #1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
            uint16_t *sampledata = (uint16_t *)&data[dataIndex + sizeof(ydlidar_data_packet_t)];
 8001480:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001484:	f103 020a 	add.w	r2, r3, #10
 8001488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800148a:	4413      	add	r3, r2
 800148c:	637b      	str	r3, [r7, #52]	; 0x34

            for (int j = 0; j < data_packet->size_LSN; j++) // convert the data to uint16_t
 800148e:	2300      	movs	r3, #0
 8001490:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001492:	e00b      	b.n	80014ac <dataProcess+0x1a0>
            {
                sampleDatas_SI[j] = sampledata[j];
 8001494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001496:	005a      	lsls	r2, r3, #1
 8001498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149a:	4413      	add	r3, r2
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014a2:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
            for (int j = 0; j < data_packet->size_LSN; j++) // convert the data to uint16_t
 80014a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014a8:	3301      	adds	r3, #1
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014ac:	4b58      	ldr	r3, [pc, #352]	; (8001610 <dataProcess+0x304>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	461a      	mov	r2, r3
 80014b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b6:	4293      	cmp	r3, r2
 80014b8:	dbec      	blt.n	8001494 <dataProcess+0x188>
            }
            // checkSumrResult += calculateChecksum(sampledata, data_packet->size_LSN); // calculate the checksum
#ifdef YDLIDAR_DEBUG_LEVEL_2
            printf("[DEBUG] checkSumrResult = %4x\r\n", checkSumrResult);
 80014ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80014be:	4619      	mov	r1, r3
 80014c0:	4854      	ldr	r0, [pc, #336]	; (8001614 <dataProcess+0x308>)
 80014c2:	f004 f9a5 	bl	8005810 <iprintf>
            printf("[DEBUG] data_packet->crc_CS = %4x\r\n", data_packet->crc_CS);
 80014c6:	4b52      	ldr	r3, [pc, #328]	; (8001610 <dataProcess+0x304>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	891b      	ldrh	r3, [r3, #8]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	4851      	ldr	r0, [pc, #324]	; (8001618 <dataProcess+0x30c>)
 80014d2:	f004 f99d 	bl	8005810 <iprintf>
#endif
            if (checkSumrResult == data_packet->crc_CS)
 80014d6:	4b4e      	ldr	r3, [pc, #312]	; (8001610 <dataProcess+0x304>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	891b      	ldrh	r3, [r3, #8]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80014e2:	4293      	cmp	r3, r2
 80014e4:	f040 80bd 	bne.w	8001662 <dataProcess+0x356>
            {
 80014e8:	466b      	mov	r3, sp
 80014ea:	607b      	str	r3, [r7, #4]
                double distances[data_packet->size_LSN];
 80014ec:	4b48      	ldr	r3, [pc, #288]	; (8001610 <dataProcess+0x304>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	78d9      	ldrb	r1, [r3, #3]
 80014f2:	460b      	mov	r3, r1
 80014f4:	3b01      	subs	r3, #1
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
 80014f8:	b2cb      	uxtb	r3, r1
 80014fa:	2200      	movs	r2, #0
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	61fa      	str	r2, [r7, #28]
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	69f8      	ldr	r0, [r7, #28]
 800150a:	0183      	lsls	r3, r0, #6
 800150c:	69b8      	ldr	r0, [r7, #24]
 800150e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001512:	69b8      	ldr	r0, [r7, #24]
 8001514:	0182      	lsls	r2, r0, #6
 8001516:	b2cb      	uxtb	r3, r1
 8001518:	2200      	movs	r2, #0
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	617a      	str	r2, [r7, #20]
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	0183      	lsls	r3, r0, #6
 800152a:	6938      	ldr	r0, [r7, #16]
 800152c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001530:	6938      	ldr	r0, [r7, #16]
 8001532:	0182      	lsls	r2, r0, #6
 8001534:	460b      	mov	r3, r1
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	3307      	adds	r3, #7
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	ebad 0d03 	sub.w	sp, sp, r3
 8001542:	ab04      	add	r3, sp, #16
 8001544:	3307      	adds	r3, #7
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
                double angles[data_packet->size_LSN];
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <dataProcess+0x304>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	78d9      	ldrb	r1, [r3, #3]
 8001552:	460b      	mov	r3, r1
 8001554:	3b01      	subs	r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
 8001558:	b2cb      	uxtb	r3, r1
 800155a:	2200      	movs	r2, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	60fa      	str	r2, [r7, #12]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	0183      	lsls	r3, r0, #6
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001572:	68b8      	ldr	r0, [r7, #8]
 8001574:	0182      	lsls	r2, r0, #6
 8001576:	b2cb      	uxtb	r3, r1
 8001578:	2200      	movs	r2, #0
 800157a:	469a      	mov	sl, r3
 800157c:	4693      	mov	fp, r2
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800158a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800158e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001592:	460b      	mov	r3, r1
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	3307      	adds	r3, #7
 8001598:	08db      	lsrs	r3, r3, #3
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	ebad 0d03 	sub.w	sp, sp, r3
 80015a0:	ab04      	add	r3, sp, #16
 80015a2:	3307      	adds	r3, #7
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
                parseDistance(sampleDatas_SI, data_packet->size_LSN, distances);                                                       // parse the distance
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <dataProcess+0x304>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	78db      	ldrb	r3, [r3, #3]
 80015b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b2:	4619      	mov	r1, r3
 80015b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80015b6:	f7ff fd79 	bl	80010ac <parseDistance>
                AngleFirstLevelParse(data_packet->startAngle_FSA, data_packet->endAngle_LSA, data_packet->size_LSN, (double *)angles); // parse the first level angle
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <dataProcess+0x304>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	889b      	ldrh	r3, [r3, #4]
 80015c0:	b298      	uxth	r0, r3
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <dataProcess+0x304>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	88db      	ldrh	r3, [r3, #6]
 80015c8:	b299      	uxth	r1, r3
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <dataProcess+0x304>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	78db      	ldrb	r3, [r3, #3]
 80015d0:	461a      	mov	r2, r3
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	f7ff fd96 	bl	8001104 <AngleFirstLevelParse>
                AngleSecondLevelParse((double *)angles, data_packet->size_LSN, (double *)distances);                                   // parse the second level angle
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <dataProcess+0x304>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	78db      	ldrb	r3, [r3, #3]
 80015de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e0:	4619      	mov	r1, r3
 80015e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015e4:	f7ff fdf8 	bl	80011d8 <AngleSecondLevelParse>
#ifdef YDLIDAR_DEBUG_LEVEL_2
                for (int j = 0; j < data_packet->size_LSN; j++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80015ec:	e02f      	b.n	800164e <dataProcess+0x342>
 80015ee:	bf00      	nop
 80015f0:	200004f2 	.word	0x200004f2
 80015f4:	08007b88 	.word	0x08007b88
 80015f8:	200004f1 	.word	0x200004f1
 80015fc:	20000220 	.word	0x20000220
 8001600:	08007bbc 	.word	0x08007bbc
 8001604:	08007bc4 	.word	0x08007bc4
 8001608:	08007c84 	.word	0x08007c84
 800160c:	08007ca0 	.word	0x08007ca0
 8001610:	200004f8 	.word	0x200004f8
 8001614:	08007bc8 	.word	0x08007bc8
 8001618:	08007be8 	.word	0x08007be8
                {
                    printf("[DEBUG] angles[%02d] : %011.6f => distances[%02d] : %011.6f mm\r\n", j, angles[j], j, distances[j]);
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001642:	4829      	ldr	r0, [pc, #164]	; (80016e8 <dataProcess+0x3dc>)
 8001644:	f004 f8e4 	bl	8005810 <iprintf>
                for (int j = 0; j < data_packet->size_LSN; j++)
 8001648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800164a:	3301      	adds	r3, #1
 800164c:	64bb      	str	r3, [r7, #72]	; 0x48
 800164e:	4b27      	ldr	r3, [pc, #156]	; (80016ec <dataProcess+0x3e0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	78db      	ldrb	r3, [r3, #3]
 8001654:	461a      	mov	r2, r3
 8001656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001658:	4293      	cmp	r3, r2
 800165a:	dbdf      	blt.n	800161c <dataProcess+0x310>
 800165c:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8001660:	e002      	b.n	8001668 <dataProcess+0x35c>
#endif
            }
#ifdef YDLIDAR_DEBUG_LEVEL_2
            else
            {
                printf("[ERROR] Checksum error!\r\n");
 8001662:	4823      	ldr	r0, [pc, #140]	; (80016f0 <dataProcess+0x3e4>)
 8001664:	f004 f93a 	bl	80058dc <puts>
            }
#endif
            dataIndex += data_packet->size_LSN * sizeof(uint16_t) + sizeof(ydlidar_data_packet_t);
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <dataProcess+0x3e0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	78db      	ldrb	r3, [r3, #3]
 800166e:	3305      	adds	r3, #5
 8001670:	b29b      	uxth	r3, r3
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800167a:	4413      	add	r3, r2
 800167c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001680:	46b5      	mov	sp, r6
        {
 8001682:	e004      	b.n	800168e <dataProcess+0x382>
        }
        else
        {
            dataIndex++;
 8001684:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001688:	3301      	adds	r3, #1
 800168a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    while (dataIndex < MAX_SCAN_POINTS)
 800168e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001692:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001696:	f4ff ae6e 	bcc.w	8001376 <dataProcess+0x6a>
        }
    }
    receiveFlag = false;
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <dataProcess+0x3e8>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
    // clear the buffer
    memset(scanPoints[PROCESS_SCAN_DATA_INDEX], 0, sizeof(scanPoints[PROCESS_SCAN_DATA_INDEX]));
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <dataProcess+0x3ec>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <dataProcess+0x3f0>)
 80016b0:	4413      	add	r3, r2
 80016b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f004 f9ef 	bl	8005a9c <memset>
    printf("receiveCount = %ld\r\n", receiveCount);
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <dataProcess+0x3f4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4619      	mov	r1, r3
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <dataProcess+0x3f8>)
 80016c6:	f004 f8a3 	bl	8005810 <iprintf>
    PROCESS_SCAN_DATA_INDEX = (PROCESS_SCAN_DATA_INDEX + 1) % MAX_SCAN_BUFFER_SIZE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <dataProcess+0x3ec>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	bfb8      	it	lt
 80016d8:	425b      	neglt	r3, r3
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <dataProcess+0x3ec>)
 80016de:	701a      	strb	r2, [r3, #0]
}
 80016e0:	375c      	adds	r7, #92	; 0x5c
 80016e2:	46bd      	mov	sp, r7
 80016e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016e8:	08007c0c 	.word	0x08007c0c
 80016ec:	200004f8 	.word	0x200004f8
 80016f0:	08007c50 	.word	0x08007c50
 80016f4:	200004f2 	.word	0x200004f2
 80016f8:	200004f1 	.word	0x200004f1
 80016fc:	20000220 	.word	0x20000220
 8001700:	200004f4 	.word	0x200004f4
 8001704:	08007c6c 	.word	0x08007c6c

08001708 <restartScan>:
/**
 * @brief  This function is used to restart the scan
 *
 */
void restartScan(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
    stopScan();
 800170e:	f7ff fc83 	bl	8001018 <stopScan>
    HAL_Delay(1000);
 8001712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001716:	f000 fd2b 	bl	8002170 <HAL_Delay>
    ydlidar_device_info_t deviceinfo;
    if (getDeviceInfo(&deviceinfo) == RESULT_OK)
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fc1e 	bl	8000f60 <getDeviceInfo>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d155      	bne.n	80017d6 <restartScan+0xce>
    {
        printf("[YDLIDAR INFO] Connection established in [%s]\r\n", deviceinfo.model == YDLIDAR_MODEL_X4 ? "X4" : "NOT MODEL X4");
 800172a:	7a3b      	ldrb	r3, [r7, #8]
 800172c:	2b06      	cmp	r3, #6
 800172e:	d101      	bne.n	8001734 <restartScan+0x2c>
 8001730:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <restartScan+0xdc>)
 8001732:	e000      	b.n	8001736 <restartScan+0x2e>
 8001734:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <restartScan+0xe0>)
 8001736:	4619      	mov	r1, r3
 8001738:	482c      	ldr	r0, [pc, #176]	; (80017ec <restartScan+0xe4>)
 800173a:	f004 f869 	bl	8005810 <iprintf>
        printf("[YDLIDAR INFO] Firmware version: %d.%d\r\n", deviceinfo.major_firmware_version, deviceinfo.minor_firmware_version);
 800173e:	7a7b      	ldrb	r3, [r7, #9]
 8001740:	4619      	mov	r1, r3
 8001742:	7abb      	ldrb	r3, [r7, #10]
 8001744:	461a      	mov	r2, r3
 8001746:	482a      	ldr	r0, [pc, #168]	; (80017f0 <restartScan+0xe8>)
 8001748:	f004 f862 	bl	8005810 <iprintf>
        printf("[YDLIDAR INFO] Hardware version: %d\r\n", deviceinfo.hardware_version);
 800174c:	7afb      	ldrb	r3, [r7, #11]
 800174e:	4619      	mov	r1, r3
 8001750:	4828      	ldr	r0, [pc, #160]	; (80017f4 <restartScan+0xec>)
 8001752:	f004 f85d 	bl	8005810 <iprintf>
        printf("[YDLIDAR INFO] Serial number: ");
 8001756:	4828      	ldr	r0, [pc, #160]	; (80017f8 <restartScan+0xf0>)
 8001758:	f004 f85a 	bl	8005810 <iprintf>
        for (int i = 0; i < 16; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	e00b      	b.n	800177a <restartScan+0x72>
        {
            printf("%x", deviceinfo.serialnum[i]);
 8001762:	f107 020c 	add.w	r2, r7, #12
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	4413      	add	r3, r2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	4823      	ldr	r0, [pc, #140]	; (80017fc <restartScan+0xf4>)
 8001770:	f004 f84e 	bl	8005810 <iprintf>
        for (int i = 0; i < 16; i++)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3301      	adds	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	ddf0      	ble.n	8001762 <restartScan+0x5a>
        }
        printf("\r\n");
 8001780:	481f      	ldr	r0, [pc, #124]	; (8001800 <restartScan+0xf8>)
 8001782:	f004 f8ab 	bl	80058dc <puts>
        ydlidar_device_health_t healthinfo;
        HAL_Delay(1000);
 8001786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800178a:	f000 fcf1 	bl	8002170 <HAL_Delay>
        if (getDeviceHealth(&healthinfo) == RESULT_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fc13 	bl	8000fbc <getDeviceHealth>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d118      	bne.n	80017ce <restartScan+0xc6>
        {
            printf("[YDLIDAR INFO] YDLIDAR running correctly! The health status: %s\r\n", healthinfo.status == 0 ? "well" : "bad");
 800179c:	793b      	ldrb	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <restartScan+0x9e>
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <restartScan+0xfc>)
 80017a4:	e000      	b.n	80017a8 <restartScan+0xa0>
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <restartScan+0x100>)
 80017a8:	4619      	mov	r1, r3
 80017aa:	4818      	ldr	r0, [pc, #96]	; (800180c <restartScan+0x104>)
 80017ac:	f004 f830 	bl	8005810 <iprintf>
            if (startScan() == RESULT_OK)
 80017b0:	f7ff fc39 	bl	8001026 <startScan>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <restartScan+0xbe>
            {
                startReceiveScanData();
 80017ba:	f7ff fd8d 	bl	80012d8 <startReceiveScanData>
                printf("\r\nNow YDLIDAR is scanning ...... \r\n");
 80017be:	4814      	ldr	r0, [pc, #80]	; (8001810 <restartScan+0x108>)
 80017c0:	f004 f88c 	bl	80058dc <puts>
    }
    else
    {
        printf("YDLIDAR get DeviceInfo Error!!!'\r\n");
    }
}
 80017c4:	e00a      	b.n	80017dc <restartScan+0xd4>
                printf("start YDLIDAR is failed!  Continue........ \r\n");
 80017c6:	4813      	ldr	r0, [pc, #76]	; (8001814 <restartScan+0x10c>)
 80017c8:	f004 f888 	bl	80058dc <puts>
}
 80017cc:	e006      	b.n	80017dc <restartScan+0xd4>
            printf("cannot retrieve YDLIDAR health\r\n ");
 80017ce:	4812      	ldr	r0, [pc, #72]	; (8001818 <restartScan+0x110>)
 80017d0:	f004 f81e 	bl	8005810 <iprintf>
}
 80017d4:	e002      	b.n	80017dc <restartScan+0xd4>
        printf("YDLIDAR get DeviceInfo Error!!!'\r\n");
 80017d6:	4811      	ldr	r0, [pc, #68]	; (800181c <restartScan+0x114>)
 80017d8:	f004 f880 	bl	80058dc <puts>
}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	08007d18 	.word	0x08007d18
 80017e8:	08007d1c 	.word	0x08007d1c
 80017ec:	08007d2c 	.word	0x08007d2c
 80017f0:	08007d5c 	.word	0x08007d5c
 80017f4:	08007d88 	.word	0x08007d88
 80017f8:	08007db0 	.word	0x08007db0
 80017fc:	08007dd0 	.word	0x08007dd0
 8001800:	08007bc4 	.word	0x08007bc4
 8001804:	08007dd4 	.word	0x08007dd4
 8001808:	08007ddc 	.word	0x08007ddc
 800180c:	08007de0 	.word	0x08007de0
 8001810:	08007e24 	.word	0x08007e24
 8001814:	08007e48 	.word	0x08007e48
 8001818:	08007e78 	.word	0x08007e78
 800181c:	08007e9c 	.word	0x08007e9c

08001820 <uartSendCommand>:
extern uint8_t SCAN_CIRCLE_INDEX;
extern uint8_t PROCESS_SCAN_DATA_INDEX;
extern bool receiveFlag;
extern uint32_t receiveCount;
int8_t uartSendCommand(uint8_t *cmd, uint32_t size)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(&huart1, cmd, size, 1000);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b29a      	uxth	r2, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <uartSendCommand+0x24>)
 8001836:	f002 f86c 	bl	8003912 <HAL_UART_Transmit>
    return 0;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200004fc 	.word	0x200004fc

08001848 <uartReceiveResponse>:

int8_t uartReceiveResponse(uint8_t *data, uint32_t size)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive(&huart1, data, size, 1000);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b29a      	uxth	r2, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <uartReceiveResponse+0x24>)
 800185e:	f002 f8ea 	bl	8003a36 <HAL_UART_Receive>
    return 0;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200004fc 	.word	0x200004fc

08001870 <uartReceiveDataDMA>:
int8_t uartReceiveDataDMA(uint8_t *data, uint32_t size)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive_DMA(&huart1, data, size);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b29b      	uxth	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4804      	ldr	r0, [pc, #16]	; (8001894 <uartReceiveDataDMA+0x24>)
 8001884:	f002 f979 	bl	8003b7a <HAL_UART_Receive_DMA>
    return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200004fc 	.word	0x200004fc

08001898 <HAL_UART_RxCpltCallback>:

// uart callback function

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_UART_RxCpltCallback+0x70>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d129      	bne.n	80018fe <HAL_UART_RxCpltCallback+0x66>
    {
        receiveCount++;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_UART_RxCpltCallback+0x74>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4a16      	ldr	r2, [pc, #88]	; (800190c <HAL_UART_RxCpltCallback+0x74>)
 80018b2:	6013      	str	r3, [r2, #0]
        SCAN_CIRCLE_INDEX = SCAN_CIRCLE_INDEX++ % MAX_SCAN_BUFFER_SIZE;
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_UART_RxCpltCallback+0x78>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	b2d1      	uxtb	r1, r2
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_UART_RxCpltCallback+0x78>)
 80018be:	7011      	strb	r1, [r2, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_UART_RxCpltCallback+0x78>)
 80018c8:	701a      	strb	r2, [r3, #0]
        if (SCAN_CIRCLE_INDEX == PROCESS_SCAN_DATA_INDEX)
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_UART_RxCpltCallback+0x78>)
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_UART_RxCpltCallback+0x7c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d10e      	bne.n	80018f4 <HAL_UART_RxCpltCallback+0x5c>
        {
            receiveFlag = false;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_UART_RxCpltCallback+0x80>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
            SCAN_CIRCLE_INDEX = (SCAN_CIRCLE_INDEX + MAX_SCAN_BUFFER_SIZE - 1) % MAX_SCAN_BUFFER_SIZE;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_UART_RxCpltCallback+0x78>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	bfb8      	it	lt
 80018ea:	425b      	neglt	r3, r3
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_UART_RxCpltCallback+0x78>)
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e002      	b.n	80018fa <HAL_UART_RxCpltCallback+0x62>
        }
        else
        {
            receiveFlag = true;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_UART_RxCpltCallback+0x80>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
        }
        startReceiveScanData();
 80018fa:	f7ff fced 	bl	80012d8 <startReceiveScanData>
    }
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40011000 	.word	0x40011000
 800190c:	200004f4 	.word	0x200004f4
 8001910:	200004f0 	.word	0x200004f0
 8001914:	200004f1 	.word	0x200004f1
 8001918:	200004f2 	.word	0x200004f2

0800191c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001920:	f000 fbb4 	bl	800208c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001924:	f000 f82e 	bl	8001984 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001928:	f000 f90c 	bl	8001b44 <MX_GPIO_Init>
    MX_DMA_Init();
 800192c:	f000 f8ea 	bl	8001b04 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8001930:	f000 f8be 	bl	8001ab0 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8001934:	f000 f892 	bl	8001a5c <MX_USART1_UART_Init>
//    __HAL_DMA_ENABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
//    __HAL_DMA_DISABLE_IT(&hdma_usart1_tx, DMA_IT_TC);


    /* USER CODE BEGIN 2 */
    ydlidar.func.send_command = uartSendCommand;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <main+0x50>)
 800193a:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <main+0x54>)
 800193c:	601a      	str	r2, [r3, #0]
    ydlidar.func.receive_response = uartReceiveResponse;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <main+0x50>)
 8001940:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <main+0x58>)
 8001942:	605a      	str	r2, [r3, #4]
    ydlidar.func.receive_data_dma = uartReceiveDataDMA;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <main+0x50>)
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <main+0x5c>)
 8001948:	609a      	str	r2, [r3, #8]
    printf(">>>>>>>>>>>>>>>>>>>YDLIDAR X4 Driver<<<<<<<<<<<<<<<<<<<<<\r\n");
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <main+0x60>)
 800194c:	f003 ffc6 	bl	80058dc <puts>
    restartScan();
 8001950:	f7ff feda 	bl	8001708 <restartScan>
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        dataProcess();
 8001954:	f7ff fcda 	bl	800130c <dataProcess>
        // led toggle
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001958:	2120      	movs	r1, #32
 800195a:	4809      	ldr	r0, [pc, #36]	; (8001980 <main+0x64>)
 800195c:	f001 facd 	bl	8002efa <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8001960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001964:	f000 fc04 	bl	8002170 <HAL_Delay>
        dataProcess();
 8001968:	e7f4      	b.n	8001954 <main+0x38>
 800196a:	bf00      	nop
 800196c:	200001f0 	.word	0x200001f0
 8001970:	08001821 	.word	0x08001821
 8001974:	08001849 	.word	0x08001849
 8001978:	08001871 	.word	0x08001871
 800197c:	08007ec0 	.word	0x08007ec0
 8001980:	40020000 	.word	0x40020000

08001984 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b094      	sub	sp, #80	; 0x50
 8001988:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	2234      	movs	r2, #52	; 0x34
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f004 f882 	bl	8005a9c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <SystemClock_Config+0xd0>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	4a28      	ldr	r2, [pc, #160]	; (8001a54 <SystemClock_Config+0xd0>)
 80019b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b6:	6413      	str	r3, [r2, #64]	; 0x40
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <SystemClock_Config+0xd0>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c4:	2300      	movs	r3, #0
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <SystemClock_Config+0xd4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <SystemClock_Config+0xd4>)
 80019ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <SystemClock_Config+0xd4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e4:	2301      	movs	r3, #1
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e8:	2310      	movs	r3, #16
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ec:	2302      	movs	r3, #2
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 80019f4:	2310      	movs	r3, #16
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 80019f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019fc:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019fe:	2304      	movs	r3, #4
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a02:	2304      	movs	r3, #4
 8001a04:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 fcae 	bl	8003370 <HAL_RCC_OscConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x9a>
    {
        Error_Handler();
 8001a1a:	f000 f901 	bl	8001c20 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a1e:	230f      	movs	r3, #15
 8001a20:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a22:	2302      	movs	r3, #2
 8001a24:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fa78 	bl	8002f30 <HAL_RCC_ClockConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0xc6>
    {
        Error_Handler();
 8001a46:	f000 f8eb 	bl	8001c20 <Error_Handler>
    }
}
 8001a4a:	bf00      	nop
 8001a4c:	3750      	adds	r7, #80	; 0x50
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000

08001a5c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_USART1_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 128000;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a68:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8001a6c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a94:	f001 fef0 	bl	8003878 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8001a9e:	f000 f8bf 	bl	8001c20 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200004fc 	.word	0x200004fc
 8001aac:	40011000 	.word	0x40011000

08001ab0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <MX_USART2_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae8:	f001 fec6 	bl	8003878 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8001af2:	f000 f895 	bl	8001c20 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000540 	.word	0x20000540
 8001b00:	40004400 	.word	0x40004400

08001b04 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_DMA_Init+0x3c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <MX_DMA_Init+0x3c>)
 8001b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_DMA_Init+0x3c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	203a      	movs	r0, #58	; 0x3a
 8001b2c:	f000 fc1f 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b30:	203a      	movs	r0, #58	; 0x3a
 8001b32:	f000 fc38 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a2c      	ldr	r2, [pc, #176]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a25      	ldr	r2, [pc, #148]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_GPIO_Init+0xd0>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2120      	movs	r1, #32
 8001bce:	4812      	ldr	r0, [pc, #72]	; (8001c18 <MX_GPIO_Init+0xd4>)
 8001bd0:	f001 f97a 	bl	8002ec8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	480c      	ldr	r0, [pc, #48]	; (8001c1c <MX_GPIO_Init+0xd8>)
 8001bec:	f000 fff8 	bl	8002be0 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4804      	ldr	r0, [pc, #16]	; (8001c18 <MX_GPIO_Init+0xd4>)
 8001c08:	f000 ffea 	bl	8002be0 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020800 	.word	0x40020800

08001c20 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c6a:	2007      	movs	r0, #7
 8001c6c:	f000 fb74 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	; 0x30
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a4d      	ldr	r2, [pc, #308]	; (8001dd0 <HAL_UART_MspInit+0x154>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d163      	bne.n	8001d66 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a4b      	ldr	r2, [pc, #300]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001ca8:	f043 0310 	orr.w	r3, r3, #16
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	4b45      	ldr	r3, [pc, #276]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a44      	ldr	r2, [pc, #272]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ce8:	2307      	movs	r3, #7
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4839      	ldr	r0, [pc, #228]	; (8001dd8 <HAL_UART_MspInit+0x15c>)
 8001cf4:	f000 ff74 	bl	8002be0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001cf8:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001cfa:	4a39      	ldr	r2, [pc, #228]	; (8001de0 <HAL_UART_MspInit+0x164>)
 8001cfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001cfe:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d06:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0c:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d18:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d1a:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d38:	4828      	ldr	r0, [pc, #160]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d3a:	f000 fb4f 	bl	80023dc <HAL_DMA_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001d44:	f7ff ff6c 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d4e:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_UART_MspInit+0x160>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	2025      	movs	r0, #37	; 0x25
 8001d5a:	f000 fb08 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d5e:	2025      	movs	r0, #37	; 0x25
 8001d60:	f000 fb21 	bl	80023a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d64:	e030      	b.n	8001dc8 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d12b      	bne.n	8001dc8 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a16      	ldr	r2, [pc, #88]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_UART_MspInit+0x158>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001da8:	230c      	movs	r3, #12
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db8:	2307      	movs	r3, #7
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_UART_MspInit+0x15c>)
 8001dc4:	f000 ff0c 	bl	8002be0 <HAL_GPIO_Init>
}
 8001dc8:	bf00      	nop
 8001dca:	3730      	adds	r7, #48	; 0x30
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	20000584 	.word	0x20000584
 8001de0:	40026440 	.word	0x40026440
 8001de4:	40004400 	.word	0x40004400

08001de8 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART2 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001df0:	1d39      	adds	r1, r7, #4
 8001df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df6:	2201      	movs	r2, #1
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <__io_putchar+0x20>)
 8001dfa:	f001 fd8a 	bl	8003912 <HAL_UART_Transmit>

    return ch;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000540 	.word	0x20000540

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e58:	f000 f96a 	bl	8002130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <USART1_IRQHandler+0x10>)
 8001e66:	f001 feb9 	bl	8003bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200004fc 	.word	0x200004fc

08001e74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <DMA2_Stream2_IRQHandler+0x10>)
 8001e7a:	f000 fc47 	bl	800270c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000584 	.word	0x20000584

08001e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return 1;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <_kill>:

int _kill(int pid, int sig)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea2:	f003 fe4d 	bl	8005b40 <__errno>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2216      	movs	r2, #22
 8001eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_exit>:

void _exit (int status)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ffe7 	bl	8001e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eca:	e7fe      	b.n	8001eca <_exit+0x12>

08001ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e00a      	b.n	8001ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ede:	f3af 8000 	nop.w
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	60ba      	str	r2, [r7, #8]
 8001eea:	b2ca      	uxtb	r2, r1
 8001eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dbf0      	blt.n	8001ede <_read+0x12>
  }

  return len;
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e009      	b.n	8001f2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	60ba      	str	r2, [r7, #8]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff61 	bl	8001de8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbf1      	blt.n	8001f18 <_write+0x12>
  }
  return len;
 8001f34:	687b      	ldr	r3, [r7, #4]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_close>:

int _close(int file)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f66:	605a      	str	r2, [r3, #4]
  return 0;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_isatty>:

int _isatty(int file)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <_sbrk+0x5c>)
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <_sbrk+0x60>)
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <_sbrk+0x64>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <_sbrk+0x68>)
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d207      	bcs.n	8001fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd8:	f003 fdb2 	bl	8005b40 <__errno>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	220c      	movs	r2, #12
 8001fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	e009      	b.n	8001ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <_sbrk+0x64>)
 8001ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20008000 	.word	0x20008000
 8002008:	00000400 	.word	0x00000400
 800200c:	200005e4 	.word	0x200005e4
 8002010:	20000738 	.word	0x20000738

08002014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <SystemInit+0x20>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <SystemInit+0x20>)
 8002020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002070 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800203e:	490e      	ldr	r1, [pc, #56]	; (8002078 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002044:	e002      	b.n	800204c <LoopCopyDataInit>

08002046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204a:	3304      	adds	r3, #4

0800204c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800204c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002050:	d3f9      	bcc.n	8002046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002052:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002054:	4c0b      	ldr	r4, [pc, #44]	; (8002084 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002058:	e001      	b.n	800205e <LoopFillZerobss>

0800205a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800205c:	3204      	adds	r2, #4

0800205e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002060:	d3fb      	bcc.n	800205a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002062:	f7ff ffd7 	bl	8002014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002066:	f003 fd71 	bl	8005b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206a:	f7ff fc57 	bl	800191c <main>
  bx  lr    
 800206e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002070:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002078:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800207c:	080082e0 	.word	0x080082e0
  ldr r2, =_sbss
 8002080:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002084:	20000738 	.word	0x20000738

08002088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC_IRQHandler>
	...

0800208c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <HAL_Init+0x40>)
 8002096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_Init+0x40>)
 80020a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_Init+0x40>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b4:	2003      	movs	r0, #3
 80020b6:	f000 f94f 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f000 f808 	bl	80020d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c0:	f7ff fdb4 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023c00 	.word	0x40023c00

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x54>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_InitTick+0x58>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f967 	bl	80023c2 <HAL_SYSTICK_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00e      	b.n	800211c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0f      	cmp	r3, #15
 8002102:	d80a      	bhi.n	800211a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002104:	2200      	movs	r2, #0
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f000 f92f 	bl	800236e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <HAL_InitTick+0x5c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000000 	.word	0x20000000
 8002128:	20000008 	.word	0x20000008
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x20>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_IncTick+0x24>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000008 	.word	0x20000008
 8002154:	200005e8 	.word	0x200005e8

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	200005e8 	.word	0x200005e8

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d005      	beq.n	8002196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_Delay+0x44>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002196:	bf00      	nop
 8002198:	f7ff ffde 	bl	8002158 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8f7      	bhi.n	8002198 <HAL_Delay+0x28>
  {
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000008 	.word	0x20000008

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	; (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff29 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002380:	f7ff ff3e 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ff8e 	bl	80022ac <NVIC_EncodePriority>
 8002390:	4602      	mov	r2, r0
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff5d 	bl	8002258 <__NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff31 	bl	800221c <__NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffa2 	bl	8002314 <SysTick_Config>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff feb6 	bl	8002158 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e099      	b.n	800252c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002418:	e00f      	b.n	800243a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800241a:	f7ff fe9d 	bl	8002158 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b05      	cmp	r3, #5
 8002426:	d908      	bls.n	800243a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2203      	movs	r2, #3
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e078      	b.n	800252c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e8      	bne.n	800241a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_DMA_Init+0x158>)
 8002454:	4013      	ands	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002466:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	2b04      	cmp	r3, #4
 8002492:	d107      	bne.n	80024a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	4313      	orrs	r3, r2
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f023 0307 	bic.w	r3, r3, #7
 80024ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d117      	bne.n	80024fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fb01 	bl	8002ae8 <DMA_CheckFifoParam>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024fa:	2301      	movs	r3, #1
 80024fc:	e016      	b.n	800252c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fab8 	bl	8002a7c <DMA_CalcBaseAndBitshift>
 800250c:	4603      	mov	r3, r0
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	223f      	movs	r2, #63	; 0x3f
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	f010803f 	.word	0xf010803f

08002538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_DMA_Start_IT+0x26>
 800255a:	2302      	movs	r3, #2
 800255c:	e040      	b.n	80025e0 <HAL_DMA_Start_IT+0xa8>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d12f      	bne.n	80025d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2202      	movs	r2, #2
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fa4a 	bl	8002a20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002590:	223f      	movs	r2, #63	; 0x3f
 8002592:	409a      	lsls	r2, r3
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0216 	orr.w	r2, r2, #22
 80025a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0208 	orr.w	r2, r2, #8
 80025be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e005      	b.n	80025de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025da:	2302      	movs	r3, #2
 80025dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025de:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025f6:	f7ff fdaf 	bl	8002158 <HAL_GetTick>
 80025fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d008      	beq.n	800261a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e052      	b.n	80026c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0216 	bic.w	r2, r2, #22
 8002628:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002638:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <HAL_DMA_Abort+0x62>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0208 	bic.w	r2, r2, #8
 8002658:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0201 	bic.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800266a:	e013      	b.n	8002694 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800266c:	f7ff fd74 	bl	8002158 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b05      	cmp	r3, #5
 8002678:	d90c      	bls.n	8002694 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2220      	movs	r2, #32
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2203      	movs	r2, #3
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e015      	b.n	80026c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e4      	bne.n	800266c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a6:	223f      	movs	r2, #63	; 0x3f
 80026a8:	409a      	lsls	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d004      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00c      	b.n	8002700 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2205      	movs	r2, #5
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002718:	4b8e      	ldr	r3, [pc, #568]	; (8002954 <HAL_DMA_IRQHandler+0x248>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a8e      	ldr	r2, [pc, #568]	; (8002958 <HAL_DMA_IRQHandler+0x24c>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	0a9b      	lsrs	r3, r3, #10
 8002724:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	2208      	movs	r2, #8
 8002738:	409a      	lsls	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01a      	beq.n	8002778 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d013      	beq.n	8002778 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0204 	bic.w	r2, r2, #4
 800275e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	2208      	movs	r2, #8
 8002766:	409a      	lsls	r2, r3
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	2201      	movs	r2, #1
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	2201      	movs	r2, #1
 800279c:	409a      	lsls	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	f043 0202 	orr.w	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	2204      	movs	r2, #4
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d012      	beq.n	80027e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	2204      	movs	r2, #4
 80027d2:	409a      	lsls	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f043 0204 	orr.w	r2, r3, #4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	2210      	movs	r2, #16
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d043      	beq.n	800287c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d03c      	beq.n	800287c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	2210      	movs	r2, #16
 8002808:	409a      	lsls	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d018      	beq.n	800284e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d108      	bne.n	800283c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d024      	beq.n	800287c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
 800283a:	e01f      	b.n	800287c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
 800284c:	e016      	b.n	800287c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0208 	bic.w	r2, r2, #8
 800286a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	2220      	movs	r2, #32
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 808f 	beq.w	80029ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 8087 	beq.w	80029ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	2220      	movs	r2, #32
 80028a4:	409a      	lsls	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d136      	bne.n	8002924 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0216 	bic.w	r2, r2, #22
 80028c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <HAL_DMA_IRQHandler+0x1da>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0208 	bic.w	r2, r2, #8
 80028f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	223f      	movs	r2, #63	; 0x3f
 80028fc:	409a      	lsls	r2, r3
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002916:	2b00      	cmp	r3, #0
 8002918:	d07e      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
        }
        return;
 8002922:	e079      	b.n	8002a18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01d      	beq.n	800296e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10d      	bne.n	800295c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	2b00      	cmp	r3, #0
 8002946:	d031      	beq.n	80029ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
 8002950:	e02c      	b.n	80029ac <HAL_DMA_IRQHandler+0x2a0>
 8002952:	bf00      	nop
 8002954:	20000000 	.word	0x20000000
 8002958:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d023      	beq.n	80029ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
 800296c:	e01e      	b.n	80029ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10f      	bne.n	800299c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0210 	bic.w	r2, r2, #16
 800298a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d032      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d022      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2205      	movs	r2, #5
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	3301      	adds	r3, #1
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d307      	bcc.n	80029f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f2      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x2cc>
 80029f2:	e000      	b.n	80029f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	4798      	blx	r3
 8002a16:	e000      	b.n	8002a1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a18:	bf00      	nop
    }
  }
}
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d108      	bne.n	8002a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a5e:	e007      	b.n	8002a70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3b10      	subs	r3, #16
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a96:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d909      	bls.n	8002abe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	1d1a      	adds	r2, r3, #4
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	659a      	str	r2, [r3, #88]	; 0x58
 8002abc:	e007      	b.n	8002ace <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ac6:	f023 0303 	bic.w	r3, r3, #3
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	aaaaaaab 	.word	0xaaaaaaab
 8002ae4:	08007f14 	.word	0x08007f14

08002ae8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11f      	bne.n	8002b42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d856      	bhi.n	8002bb6 <DMA_CheckFifoParam+0xce>
 8002b08:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <DMA_CheckFifoParam+0x28>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b21 	.word	0x08002b21
 8002b14:	08002b33 	.word	0x08002b33
 8002b18:	08002b21 	.word	0x08002b21
 8002b1c:	08002bb7 	.word	0x08002bb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d046      	beq.n	8002bba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b30:	e043      	b.n	8002bba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b3a:	d140      	bne.n	8002bbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b40:	e03d      	b.n	8002bbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4a:	d121      	bne.n	8002b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d837      	bhi.n	8002bc2 <DMA_CheckFifoParam+0xda>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <DMA_CheckFifoParam+0x70>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002b69 	.word	0x08002b69
 8002b5c:	08002b6f 	.word	0x08002b6f
 8002b60:	08002b69 	.word	0x08002b69
 8002b64:	08002b81 	.word	0x08002b81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6c:	e030      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d025      	beq.n	8002bc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7e:	e022      	b.n	8002bc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b88:	d11f      	bne.n	8002bca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b8e:	e01c      	b.n	8002bca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d903      	bls.n	8002b9e <DMA_CheckFifoParam+0xb6>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d003      	beq.n	8002ba4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b9c:	e018      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba2:	e015      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00e      	beq.n	8002bce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb4:	e00b      	b.n	8002bce <DMA_CheckFifoParam+0xe6>
      break;
 8002bb6:	bf00      	nop
 8002bb8:	e00a      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bba:	bf00      	nop
 8002bbc:	e008      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e006      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e004      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e002      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
    }
  } 
  
  return status; 
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e14d      	b.n	8002e98 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	f040 813c 	bne.w	8002e92 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d005      	beq.n	8002c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d130      	bne.n	8002c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d017      	beq.n	8002cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d123      	bne.n	8002d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8096 	beq.w	8002e92 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b51      	ldr	r3, [pc, #324]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4a50      	ldr	r2, [pc, #320]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	; 0x44
 8002d76:	4b4e      	ldr	r3, [pc, #312]	; (8002eb0 <HAL_GPIO_Init+0x2d0>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d82:	4a4c      	ldr	r2, [pc, #304]	; (8002eb4 <HAL_GPIO_Init+0x2d4>)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a43      	ldr	r2, [pc, #268]	; (8002eb8 <HAL_GPIO_Init+0x2d8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00d      	beq.n	8002dca <HAL_GPIO_Init+0x1ea>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a42      	ldr	r2, [pc, #264]	; (8002ebc <HAL_GPIO_Init+0x2dc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <HAL_GPIO_Init+0x1e6>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a41      	ldr	r2, [pc, #260]	; (8002ec0 <HAL_GPIO_Init+0x2e0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_GPIO_Init+0x1e2>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e004      	b.n	8002dcc <HAL_GPIO_Init+0x1ec>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e002      	b.n	8002dcc <HAL_GPIO_Init+0x1ec>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_GPIO_Init+0x1ec>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	f002 0203 	and.w	r2, r2, #3
 8002dd2:	0092      	lsls	r2, r2, #2
 8002dd4:	4093      	lsls	r3, r2
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ddc:	4935      	ldr	r1, [pc, #212]	; (8002eb4 <HAL_GPIO_Init+0x2d4>)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	3302      	adds	r3, #2
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_GPIO_Init+0x2e4>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0e:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_GPIO_Init+0x2e4>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_GPIO_Init+0x2e4>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e38:	4a22      	ldr	r2, [pc, #136]	; (8002ec4 <HAL_GPIO_Init+0x2e4>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3e:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <HAL_GPIO_Init+0x2e4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e62:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <HAL_GPIO_Init+0x2e4>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_GPIO_Init+0x2e4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <HAL_GPIO_Init+0x2e4>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3301      	adds	r3, #1
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	f67f aeae 	bls.w	8002bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3724      	adds	r7, #36	; 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40020000 	.word	0x40020000
 8002ebc:	40020400 	.word	0x40020400
 8002ec0:	40020800 	.word	0x40020800
 8002ec4:	40013c00 	.word	0x40013c00

08002ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed8:	787b      	ldrb	r3, [r7, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee4:	e003      	b.n	8002eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	041a      	lsls	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	619a      	str	r2, [r3, #24]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4013      	ands	r3, r2
 8002f12:	041a      	lsls	r2, r3, #16
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	43d9      	mvns	r1, r3
 8002f18:	887b      	ldrh	r3, [r7, #2]
 8002f1a:	400b      	ands	r3, r1
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	619a      	str	r2, [r3, #24]
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0cc      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d90c      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b63      	ldr	r3, [pc, #396]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0b8      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f84:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a58      	ldr	r2, [pc, #352]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	494d      	ldr	r1, [pc, #308]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d044      	beq.n	8003050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d119      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07f      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d003      	beq.n	8002fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e06f      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e067      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300e:	4b37      	ldr	r3, [pc, #220]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f023 0203 	bic.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4934      	ldr	r1, [pc, #208]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	4313      	orrs	r3, r2
 800301e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003020:	f7ff f89a 	bl	8002158 <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	e00a      	b.n	800303e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003028:	f7ff f896 	bl	8002158 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e04f      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	4b2b      	ldr	r3, [pc, #172]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 020c 	and.w	r2, r3, #12
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	429a      	cmp	r2, r3
 800304e:	d1eb      	bne.n	8003028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003050:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d20c      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e032      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4916      	ldr	r1, [pc, #88]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	490e      	ldr	r1, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030b6:	f000 f821 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	490a      	ldr	r1, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fffa 	bl	80020d0 <HAL_InitTick>

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023c00 	.word	0x40023c00
 80030ec:	40023800 	.word	0x40023800
 80030f0:	08007efc 	.word	0x08007efc
 80030f4:	20000000 	.word	0x20000000
 80030f8:	20000004 	.word	0x20000004

080030fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003100:	b094      	sub	sp, #80	; 0x50
 8003102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	647b      	str	r3, [r7, #68]	; 0x44
 8003108:	2300      	movs	r3, #0
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800310c:	2300      	movs	r3, #0
 800310e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003114:	4b79      	ldr	r3, [pc, #484]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 030c 	and.w	r3, r3, #12
 800311c:	2b08      	cmp	r3, #8
 800311e:	d00d      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x40>
 8003120:	2b08      	cmp	r3, #8
 8003122:	f200 80e1 	bhi.w	80032e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x34>
 800312a:	2b04      	cmp	r3, #4
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x3a>
 800312e:	e0db      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b73      	ldr	r3, [pc, #460]	; (8003300 <HAL_RCC_GetSysClockFreq+0x204>)
 8003132:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003134:	e0db      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003136:	4b73      	ldr	r3, [pc, #460]	; (8003304 <HAL_RCC_GetSysClockFreq+0x208>)
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313a:	e0d8      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800313c:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003144:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003146:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d063      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003152:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	2200      	movs	r2, #0
 800315a:	63bb      	str	r3, [r7, #56]	; 0x38
 800315c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
 8003166:	2300      	movs	r3, #0
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
 800316a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800316e:	4622      	mov	r2, r4
 8003170:	462b      	mov	r3, r5
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	0159      	lsls	r1, r3, #5
 800317c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003180:	0150      	lsls	r0, r2, #5
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4621      	mov	r1, r4
 8003188:	1a51      	subs	r1, r2, r1
 800318a:	6139      	str	r1, [r7, #16]
 800318c:	4629      	mov	r1, r5
 800318e:	eb63 0301 	sbc.w	r3, r3, r1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031a0:	4659      	mov	r1, fp
 80031a2:	018b      	lsls	r3, r1, #6
 80031a4:	4651      	mov	r1, sl
 80031a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031aa:	4651      	mov	r1, sl
 80031ac:	018a      	lsls	r2, r1, #6
 80031ae:	4651      	mov	r1, sl
 80031b0:	ebb2 0801 	subs.w	r8, r2, r1
 80031b4:	4659      	mov	r1, fp
 80031b6:	eb63 0901 	sbc.w	r9, r3, r1
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ce:	4690      	mov	r8, r2
 80031d0:	4699      	mov	r9, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	eb18 0303 	adds.w	r3, r8, r3
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	462b      	mov	r3, r5
 80031dc:	eb49 0303 	adc.w	r3, r9, r3
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031ee:	4629      	mov	r1, r5
 80031f0:	024b      	lsls	r3, r1, #9
 80031f2:	4621      	mov	r1, r4
 80031f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031f8:	4621      	mov	r1, r4
 80031fa:	024a      	lsls	r2, r1, #9
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003202:	2200      	movs	r2, #0
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
 8003206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003208:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800320c:	f7fd fcec 	bl	8000be8 <__aeabi_uldivmod>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4613      	mov	r3, r2
 8003216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003218:	e058      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321a:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	2200      	movs	r2, #0
 8003222:	4618      	mov	r0, r3
 8003224:	4611      	mov	r1, r2
 8003226:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
 8003230:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	f04f 0000 	mov.w	r0, #0
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	0159      	lsls	r1, r3, #5
 8003242:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003246:	0150      	lsls	r0, r2, #5
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4641      	mov	r1, r8
 800324e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003252:	4649      	mov	r1, r9
 8003254:	eb63 0b01 	sbc.w	fp, r3, r1
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003264:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003268:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800326c:	ebb2 040a 	subs.w	r4, r2, sl
 8003270:	eb63 050b 	sbc.w	r5, r3, fp
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	00eb      	lsls	r3, r5, #3
 800327e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003282:	00e2      	lsls	r2, r4, #3
 8003284:	4614      	mov	r4, r2
 8003286:	461d      	mov	r5, r3
 8003288:	4643      	mov	r3, r8
 800328a:	18e3      	adds	r3, r4, r3
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	464b      	mov	r3, r9
 8003290:	eb45 0303 	adc.w	r3, r5, r3
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032a2:	4629      	mov	r1, r5
 80032a4:	028b      	lsls	r3, r1, #10
 80032a6:	4621      	mov	r1, r4
 80032a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032ac:	4621      	mov	r1, r4
 80032ae:	028a      	lsls	r2, r1, #10
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b6:	2200      	movs	r2, #0
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	61fa      	str	r2, [r7, #28]
 80032bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c0:	f7fd fc92 	bl	8000be8 <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4613      	mov	r3, r2
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	3301      	adds	r3, #1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e6:	e002      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3750      	adds	r7, #80	; 0x50
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	00f42400 	.word	0x00f42400
 8003304:	007a1200 	.word	0x007a1200

08003308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_RCC_GetHCLKFreq+0x14>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000000 	.word	0x20000000

08003320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003324:	f7ff fff0 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	0a9b      	lsrs	r3, r3, #10
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4903      	ldr	r1, [pc, #12]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40023800 	.word	0x40023800
 8003344:	08007f0c 	.word	0x08007f0c

08003348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800334c:	f7ff ffdc 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	0b5b      	lsrs	r3, r3, #13
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4903      	ldr	r1, [pc, #12]	; (800336c <HAL_RCC_GetPCLK2Freq+0x24>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	08007f0c 	.word	0x08007f0c

08003370 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e273      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d075      	beq.n	800347a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800338e:	4b88      	ldr	r3, [pc, #544]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d00c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b85      	ldr	r3, [pc, #532]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d112      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b82      	ldr	r3, [pc, #520]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b2:	d10b      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	4b7e      	ldr	r3, [pc, #504]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d05b      	beq.n	8003478 <HAL_RCC_OscConfig+0x108>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d157      	bne.n	8003478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e24e      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d106      	bne.n	80033e4 <HAL_RCC_OscConfig+0x74>
 80033d6:	4b76      	ldr	r3, [pc, #472]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a75      	ldr	r2, [pc, #468]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x98>
 80033ee:	4b70      	ldr	r3, [pc, #448]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6f      	ldr	r2, [pc, #444]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b6d      	ldr	r3, [pc, #436]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6c      	ldr	r2, [pc, #432]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 8003408:	4b69      	ldr	r3, [pc, #420]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a68      	ldr	r2, [pc, #416]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b66      	ldr	r3, [pc, #408]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a65      	ldr	r2, [pc, #404]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fe96 	bl	8002158 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fe92 	bl	8002158 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e213      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xc0>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fe fe82 	bl	8002158 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003458:	f7fe fe7e 	bl	8002158 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1ff      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	4b51      	ldr	r3, [pc, #324]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0xe8>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003486:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349e:	4b44      	ldr	r3, [pc, #272]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e1d3      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4b3b      	ldr	r3, [pc, #236]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4937      	ldr	r1, [pc, #220]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	e03a      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e0:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCC_OscConfig+0x244>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe fe37 	bl	8002158 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fe fe33 	bl	8002158 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1b4      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4925      	ldr	r1, [pc, #148]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
 8003520:	e015      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCC_OscConfig+0x244>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe fe16 	bl	8002158 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003530:	f7fe fe12 	bl	8002158 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e193      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d036      	beq.n	80035c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe fdf6 	bl	8002158 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003570:	f7fe fdf2 	bl	8002158 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e173      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x200>
 800358e:	e01b      	b.n	80035c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7fe fddf 	bl	8002158 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	e00e      	b.n	80035bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359e:	f7fe fddb 	bl	8002158 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d907      	bls.n	80035bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e15c      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	42470000 	.word	0x42470000
 80035b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	4b8a      	ldr	r3, [pc, #552]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80035be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ea      	bne.n	800359e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8097 	beq.w	8003704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	4b83      	ldr	r3, [pc, #524]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	4b7f      	ldr	r3, [pc, #508]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a7e      	ldr	r2, [pc, #504]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
 80035f6:	4b7c      	ldr	r3, [pc, #496]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b79      	ldr	r3, [pc, #484]	; (80037ec <HAL_RCC_OscConfig+0x47c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d118      	bne.n	8003644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003612:	4b76      	ldr	r3, [pc, #472]	; (80037ec <HAL_RCC_OscConfig+0x47c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a75      	ldr	r2, [pc, #468]	; (80037ec <HAL_RCC_OscConfig+0x47c>)
 8003618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361e:	f7fe fd9b 	bl	8002158 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003626:	f7fe fd97 	bl	8002158 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e118      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b6c      	ldr	r3, [pc, #432]	; (80037ec <HAL_RCC_OscConfig+0x47c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x2ea>
 800364c:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a65      	ldr	r2, [pc, #404]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
 8003658:	e01c      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b05      	cmp	r3, #5
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x30c>
 8003662:	4b61      	ldr	r3, [pc, #388]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a60      	ldr	r2, [pc, #384]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	4b5e      	ldr	r3, [pc, #376]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a5d      	ldr	r2, [pc, #372]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800367c:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a59      	ldr	r2, [pc, #356]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
 8003688:	4b57      	ldr	r3, [pc, #348]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4a56      	ldr	r2, [pc, #344]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 800368e:	f023 0304 	bic.w	r3, r3, #4
 8003692:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d015      	beq.n	80036c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fe fd5c 	bl	8002158 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fe fd58 	bl	8002158 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0d7      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	4b4b      	ldr	r3, [pc, #300]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ee      	beq.n	80036a4 <HAL_RCC_OscConfig+0x334>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fe fd46 	bl	8002158 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fe fd42 	bl	8002158 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0c1      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e6:	4b40      	ldr	r3, [pc, #256]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ee      	bne.n	80036d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f8:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	4a3a      	ldr	r2, [pc, #232]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80036fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003702:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80ad 	beq.w	8003868 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d060      	beq.n	80037dc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d145      	bne.n	80037ae <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b33      	ldr	r3, [pc, #204]	; (80037f0 <HAL_RCC_OscConfig+0x480>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe fd16 	bl	8002158 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003730:	f7fe fd12 	bl	8002158 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e093      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	019b      	lsls	r3, r3, #6
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	3b01      	subs	r3, #1
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	071b      	lsls	r3, r3, #28
 800377a:	491b      	ldr	r1, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <HAL_RCC_OscConfig+0x480>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fe fce7 	bl	8002158 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fe fce3 	bl	8002158 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e064      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x41e>
 80037ac:	e05c      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_RCC_OscConfig+0x480>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe fcd0 	bl	8002158 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe fccc 	bl	8002158 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e04d      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x44c>
 80037da:	e045      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e040      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40007000 	.word	0x40007000
 80037f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <HAL_RCC_OscConfig+0x504>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d030      	beq.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d129      	bne.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d122      	bne.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800382a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800382c:	4293      	cmp	r3, r2
 800382e:	d119      	bne.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	3b01      	subs	r3, #1
 800383e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d10f      	bne.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d107      	bne.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800

08003878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e03f      	b.n	800390a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe f9ec 	bl	8001c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f001 f80b 	bl	80048d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b08a      	sub	sp, #40	; 0x28
 8003916:	af02      	add	r7, sp, #8
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b20      	cmp	r3, #32
 8003930:	d17c      	bne.n	8003a2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_UART_Transmit+0x2c>
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e075      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_UART_Transmit+0x3e>
 800394c:	2302      	movs	r3, #2
 800394e:	e06e      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2221      	movs	r2, #33	; 0x21
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003966:	f7fe fbf7 	bl	8002158 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	88fa      	ldrh	r2, [r7, #6]
 8003976:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d108      	bne.n	8003994 <HAL_UART_Transmit+0x82>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	e003      	b.n	800399c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039a4:	e02a      	b.n	80039fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2200      	movs	r2, #0
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fcc3 	bl	800433c <UART_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e036      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	3302      	adds	r3, #2
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	e007      	b.n	80039ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	3301      	adds	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1cf      	bne.n	80039a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2140      	movs	r1, #64	; 0x40
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fc93 	bl	800433c <UART_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e006      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b08a      	sub	sp, #40	; 0x28
 8003a3a:	af02      	add	r7, sp, #8
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	f040 808c 	bne.w	8003b70 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_UART_Receive+0x2e>
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e084      	b.n	8003b72 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Receive+0x40>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e07d      	b.n	8003b72 <HAL_UART_Receive+0x13c>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2222      	movs	r2, #34	; 0x22
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a92:	f7fe fb61 	bl	8002158 <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	88fa      	ldrh	r2, [r7, #6]
 8003a9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	88fa      	ldrh	r2, [r7, #6]
 8003aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d108      	bne.n	8003ac0 <HAL_UART_Receive+0x8a>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e003      	b.n	8003ac8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ad0:	e043      	b.n	8003b5a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2120      	movs	r1, #32
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fc2d 	bl	800433c <UART_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e042      	b.n	8003b72 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	3302      	adds	r3, #2
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e01f      	b.n	8003b4c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b14:	d007      	beq.n	8003b26 <HAL_UART_Receive+0xf0>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <HAL_UART_Receive+0xfe>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	e008      	b.n	8003b46 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1b6      	bne.n	8003ad2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
  }
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	4613      	mov	r3, r2
 8003b86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d11d      	bne.n	8003bd0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_Receive_DMA+0x26>
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e016      	b.n	8003bd2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_UART_Receive_DMA+0x38>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e00f      	b.n	8003bd2 <HAL_UART_Receive_DMA+0x58>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fc26 	bl	8004418 <UART_Start_Receive_DMA>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	e000      	b.n	8003bd2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b0ba      	sub	sp, #232	; 0xe8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_UART_IRQHandler+0x66>
 8003c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fd91 	bl	8004762 <UART_Receive_IT>
      return;
 8003c40:	e256      	b.n	80040f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80de 	beq.w	8003e08 <HAL_UART_IRQHandler+0x22c>
 8003c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d106      	bne.n	8003c66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80d1 	beq.w	8003e08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <HAL_UART_IRQHandler+0xae>
 8003c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f043 0201 	orr.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_UART_IRQHandler+0xd2>
 8003c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_UART_IRQHandler+0xf6>
 8003cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f043 0204 	orr.w	r2, r3, #4
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d011      	beq.n	8003d02 <HAL_UART_IRQHandler+0x126>
 8003cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f043 0208 	orr.w	r2, r3, #8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 81ed 	beq.w	80040e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_UART_IRQHandler+0x14e>
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fd1c 	bl	8004762 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b40      	cmp	r3, #64	; 0x40
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d103      	bne.n	8003d56 <HAL_UART_IRQHandler+0x17a>
 8003d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d04f      	beq.n	8003df6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fc24 	bl	80045a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d141      	bne.n	8003dee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3314      	adds	r3, #20
 8003d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3314      	adds	r3, #20
 8003d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1d9      	bne.n	8003d6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d013      	beq.n	8003de6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	4a7d      	ldr	r2, [pc, #500]	; (8003fb8 <HAL_UART_IRQHandler+0x3dc>)
 8003dc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fc7c 	bl	80026c8 <HAL_DMA_Abort_IT>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d016      	beq.n	8003e04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de0:	4610      	mov	r0, r2
 8003de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	e00e      	b.n	8003e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f99a 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	e00a      	b.n	8003e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f996 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df4:	e006      	b.n	8003e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f992 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e02:	e170      	b.n	80040e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	bf00      	nop
    return;
 8003e06:	e16e      	b.n	80040e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	f040 814a 	bne.w	80040a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8143 	beq.w	80040a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 813c 	beq.w	80040a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b40      	cmp	r3, #64	; 0x40
 8003e50:	f040 80b4 	bne.w	8003fbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8140 	beq.w	80040ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e72:	429a      	cmp	r2, r3
 8003e74:	f080 8139 	bcs.w	80040ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8a:	f000 8088 	beq.w	8003f9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003eba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1d9      	bne.n	8003e8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003efe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e1      	bne.n	8003eda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3314      	adds	r3, #20
 8003f36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e3      	bne.n	8003f16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6e:	f023 0310 	bic.w	r3, r3, #16
 8003f72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f80:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e3      	bne.n	8003f5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe fb25 	bl	80025e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	4619      	mov	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8c0 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fb4:	e099      	b.n	80040ea <HAL_UART_IRQHandler+0x50e>
 8003fb6:	bf00      	nop
 8003fb8:	0800466b 	.word	0x0800466b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 808b 	beq.w	80040ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8086 	beq.w	80040ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004006:	647a      	str	r2, [r7, #68]	; 0x44
 8004008:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800400c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e3      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3314      	adds	r3, #20
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	623b      	str	r3, [r7, #32]
   return(result);
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800403e:	633a      	str	r2, [r7, #48]	; 0x30
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e3      	bne.n	800401a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0310 	bic.w	r3, r3, #16
 8004076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004084:	61fa      	str	r2, [r7, #28]
 8004086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	617b      	str	r3, [r7, #20]
   return(result);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e3      	bne.n	8004060 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f848 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040a4:	e023      	b.n	80040ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_UART_IRQHandler+0x4ea>
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fae7 	bl	8004692 <UART_Transmit_IT>
    return;
 80040c4:	e014      	b.n	80040f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00e      	beq.n	80040f0 <HAL_UART_IRQHandler+0x514>
 80040d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fb27 	bl	8004732 <UART_EndTransmit_IT>
    return;
 80040e4:	e004      	b.n	80040f0 <HAL_UART_IRQHandler+0x514>
    return;
 80040e6:	bf00      	nop
 80040e8:	e002      	b.n	80040f0 <HAL_UART_IRQHandler+0x514>
      return;
 80040ea:	bf00      	nop
 80040ec:	e000      	b.n	80040f0 <HAL_UART_IRQHandler+0x514>
      return;
 80040ee:	bf00      	nop
  }
}
 80040f0:	37e8      	adds	r7, #232	; 0xe8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop

080040f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b09c      	sub	sp, #112	; 0x70
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d172      	bne.n	800424e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416a:	2200      	movs	r2, #0
 800416c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800416e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800417e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004184:	66bb      	str	r3, [r7, #104]	; 0x68
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800418e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004190:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800419c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	667b      	str	r3, [r7, #100]	; 0x64
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041c2:	647a      	str	r2, [r7, #68]	; 0x44
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	623b      	str	r3, [r7, #32]
   return(result);
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ec:	663b      	str	r3, [r7, #96]	; 0x60
 80041ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3314      	adds	r3, #20
 80041f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041f6:	633a      	str	r2, [r7, #48]	; 0x30
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e5      	bne.n	80041d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800420a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	2b01      	cmp	r3, #1
 8004218:	d119      	bne.n	800424e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	60fb      	str	r3, [r7, #12]
   return(result);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f023 0310 	bic.w	r3, r3, #16
 8004230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800423a:	61fa      	str	r2, [r7, #28]
 800423c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	69b9      	ldr	r1, [r7, #24]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	617b      	str	r3, [r7, #20]
   return(result);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	2b01      	cmp	r3, #1
 8004254:	d106      	bne.n	8004264 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800425a:	4619      	mov	r1, r3
 800425c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800425e:	f7ff ff69 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004262:	e002      	b.n	800426a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004264:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004266:	f7fd fb17 	bl	8001898 <HAL_UART_RxCpltCallback>
}
 800426a:	bf00      	nop
 800426c:	3770      	adds	r7, #112	; 0x70
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	2b01      	cmp	r3, #1
 8004286:	d108      	bne.n	800429a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	b29b      	uxth	r3, r3
 8004290:	4619      	mov	r1, r3
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff ff4e 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004298:	e002      	b.n	80042a0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7ff ff36 	bl	800410c <HAL_UART_RxHalfCpltCallback>
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	bf0c      	ite	eq
 80042c8:	2301      	moveq	r3, #1
 80042ca:	2300      	movne	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b21      	cmp	r3, #33	; 0x21
 80042da:	d108      	bne.n	80042ee <UART_DMAError+0x46>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2200      	movs	r2, #0
 80042e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f000 f933 	bl	8004554 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b22      	cmp	r3, #34	; 0x22
 800430e:	d108      	bne.n	8004322 <UART_DMAError+0x7a>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2200      	movs	r2, #0
 800431a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800431c:	68b8      	ldr	r0, [r7, #8]
 800431e:	f000 f941 	bl	80045a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f043 0210 	orr.w	r2, r3, #16
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800432e:	68b8      	ldr	r0, [r7, #8]
 8004330:	f7ff fef6 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b090      	sub	sp, #64	; 0x40
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434c:	e050      	b.n	80043f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d04c      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <UART_WaitOnFlagUntilTimeout+0x30>
 800435c:	f7fd fefc 	bl	8002158 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004368:	429a      	cmp	r2, r3
 800436a:	d241      	bcs.n	80043f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800438c:	637a      	str	r2, [r7, #52]	; 0x34
 800438e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	613b      	str	r3, [r7, #16]
   return(result);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3314      	adds	r3, #20
 80043be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c0:	623a      	str	r2, [r7, #32]
 80043c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	69f9      	ldr	r1, [r7, #28]
 80043c6:	6a3a      	ldr	r2, [r7, #32]
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e00f      	b.n	8004410 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4013      	ands	r3, r2
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	429a      	cmp	r2, r3
 800440c:	d09f      	beq.n	800434e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3740      	adds	r7, #64	; 0x40
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b098      	sub	sp, #96	; 0x60
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2222      	movs	r2, #34	; 0x22
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	4a40      	ldr	r2, [pc, #256]	; (8004548 <UART_Start_Receive_DMA+0x130>)
 8004446:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	4a3f      	ldr	r2, [pc, #252]	; (800454c <UART_Start_Receive_DMA+0x134>)
 800444e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	4a3e      	ldr	r2, [pc, #248]	; (8004550 <UART_Start_Receive_DMA+0x138>)
 8004456:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	2200      	movs	r2, #0
 800445e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004460:	f107 0308 	add.w	r3, r7, #8
 8004464:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	f7fe f85e 	bl	8002538 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d019      	beq.n	80044d6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	330c      	adds	r3, #12
 80044a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044c2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	657b      	str	r3, [r7, #84]	; 0x54
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	617b      	str	r3, [r7, #20]
   return(result);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004520:	653b      	str	r3, [r7, #80]	; 0x50
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800452a:	627a      	str	r2, [r7, #36]	; 0x24
 800452c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6a39      	ldr	r1, [r7, #32]
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	61fb      	str	r3, [r7, #28]
   return(result);
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e5      	bne.n	800450a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3760      	adds	r7, #96	; 0x60
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	0800414d 	.word	0x0800414d
 800454c:	08004273 	.word	0x08004273
 8004550:	080042a9 	.word	0x080042a9

08004554 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b089      	sub	sp, #36	; 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	60bb      	str	r3, [r7, #8]
   return(result);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	61ba      	str	r2, [r7, #24]
 800457e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6979      	ldr	r1, [r7, #20]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	613b      	str	r3, [r7, #16]
   return(result);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004598:	bf00      	nop
 800459a:	3724      	adds	r7, #36	; 0x24
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b095      	sub	sp, #84	; 0x54
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045cc:	643a      	str	r2, [r7, #64]	; 0x40
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e5      	bne.n	80045ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3314      	adds	r3, #20
 80045fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004600:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e5      	bne.n	80045e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	2b01      	cmp	r3, #1
 800461a:	d119      	bne.n	8004650 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	60bb      	str	r3, [r7, #8]
   return(result);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f023 0310 	bic.w	r3, r3, #16
 8004632:	647b      	str	r3, [r7, #68]	; 0x44
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800463c:	61ba      	str	r2, [r7, #24]
 800463e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6979      	ldr	r1, [r7, #20]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	613b      	str	r3, [r7, #16]
   return(result);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e5      	bne.n	800461c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800465e:	bf00      	nop
 8004660:	3754      	adds	r7, #84	; 0x54
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f7ff fd4b 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b21      	cmp	r3, #33	; 0x21
 80046a4:	d13e      	bne.n	8004724 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ae:	d114      	bne.n	80046da <UART_Transmit_IT+0x48>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d110      	bne.n	80046da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	1c9a      	adds	r2, r3, #2
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	621a      	str	r2, [r3, #32]
 80046d8:	e008      	b.n	80046ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6211      	str	r1, [r2, #32]
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4619      	mov	r1, r3
 80046fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10f      	bne.n	8004720 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800470e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800471e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004748:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fcd0 	bl	80040f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b08c      	sub	sp, #48	; 0x30
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b22      	cmp	r3, #34	; 0x22
 8004774:	f040 80ab 	bne.w	80048ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004780:	d117      	bne.n	80047b2 <UART_Receive_IT+0x50>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d113      	bne.n	80047b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	1c9a      	adds	r2, r3, #2
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28
 80047b0:	e026      	b.n	8004800 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c4:	d007      	beq.n	80047d6 <UART_Receive_IT+0x74>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <UART_Receive_IT+0x82>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e008      	b.n	80047f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29b      	uxth	r3, r3
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4619      	mov	r1, r3
 800480e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004810:	2b00      	cmp	r3, #0
 8004812:	d15a      	bne.n	80048ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0220 	bic.w	r2, r2, #32
 8004822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	2b01      	cmp	r3, #1
 8004852:	d135      	bne.n	80048c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	613b      	str	r3, [r7, #16]
   return(result);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f023 0310 	bic.w	r3, r3, #16
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	330c      	adds	r3, #12
 8004878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487a:	623a      	str	r2, [r7, #32]
 800487c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	69f9      	ldr	r1, [r7, #28]
 8004880:	6a3a      	ldr	r2, [r7, #32]
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	61bb      	str	r3, [r7, #24]
   return(result);
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e5      	bne.n	800485a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b10      	cmp	r3, #16
 800489a:	d10a      	bne.n	80048b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff fc3b 	bl	8004134 <HAL_UARTEx_RxEventCallback>
 80048be:	e002      	b.n	80048c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fc ffe9 	bl	8001898 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e002      	b.n	80048d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3730      	adds	r7, #48	; 0x30
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048dc:	b0c0      	sub	sp, #256	; 0x100
 80048de:	af00      	add	r7, sp, #0
 80048e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	68d9      	ldr	r1, [r3, #12]
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	ea40 0301 	orr.w	r3, r0, r1
 8004900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	431a      	orrs	r2, r3
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	431a      	orrs	r2, r3
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004930:	f021 010c 	bic.w	r1, r1, #12
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800493e:	430b      	orrs	r3, r1
 8004940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004952:	6999      	ldr	r1, [r3, #24]
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	ea40 0301 	orr.w	r3, r0, r1
 800495e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b8f      	ldr	r3, [pc, #572]	; (8004ba4 <UART_SetConfig+0x2cc>)
 8004968:	429a      	cmp	r2, r3
 800496a:	d005      	beq.n	8004978 <UART_SetConfig+0xa0>
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b8d      	ldr	r3, [pc, #564]	; (8004ba8 <UART_SetConfig+0x2d0>)
 8004974:	429a      	cmp	r2, r3
 8004976:	d104      	bne.n	8004982 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004978:	f7fe fce6 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 800497c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004980:	e003      	b.n	800498a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004982:	f7fe fccd 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 8004986:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004994:	f040 810c 	bne.w	8004bb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800499c:	2200      	movs	r2, #0
 800499e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049aa:	4622      	mov	r2, r4
 80049ac:	462b      	mov	r3, r5
 80049ae:	1891      	adds	r1, r2, r2
 80049b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80049b2:	415b      	adcs	r3, r3
 80049b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049ba:	4621      	mov	r1, r4
 80049bc:	eb12 0801 	adds.w	r8, r2, r1
 80049c0:	4629      	mov	r1, r5
 80049c2:	eb43 0901 	adc.w	r9, r3, r1
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049da:	4690      	mov	r8, r2
 80049dc:	4699      	mov	r9, r3
 80049de:	4623      	mov	r3, r4
 80049e0:	eb18 0303 	adds.w	r3, r8, r3
 80049e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049e8:	462b      	mov	r3, r5
 80049ea:	eb49 0303 	adc.w	r3, r9, r3
 80049ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a06:	460b      	mov	r3, r1
 8004a08:	18db      	adds	r3, r3, r3
 8004a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	eb42 0303 	adc.w	r3, r2, r3
 8004a12:	657b      	str	r3, [r7, #84]	; 0x54
 8004a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a1c:	f7fc f8e4 	bl	8000be8 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4b61      	ldr	r3, [pc, #388]	; (8004bac <UART_SetConfig+0x2d4>)
 8004a26:	fba3 2302 	umull	r2, r3, r3, r2
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	011c      	lsls	r4, r3, #4
 8004a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a40:	4642      	mov	r2, r8
 8004a42:	464b      	mov	r3, r9
 8004a44:	1891      	adds	r1, r2, r2
 8004a46:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a48:	415b      	adcs	r3, r3
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a50:	4641      	mov	r1, r8
 8004a52:	eb12 0a01 	adds.w	sl, r2, r1
 8004a56:	4649      	mov	r1, r9
 8004a58:	eb43 0b01 	adc.w	fp, r3, r1
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a70:	4692      	mov	sl, r2
 8004a72:	469b      	mov	fp, r3
 8004a74:	4643      	mov	r3, r8
 8004a76:	eb1a 0303 	adds.w	r3, sl, r3
 8004a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a7e:	464b      	mov	r3, r9
 8004a80:	eb4b 0303 	adc.w	r3, fp, r3
 8004a84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	18db      	adds	r3, r3, r3
 8004aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ab2:	f7fc f899 	bl	8000be8 <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	4b3b      	ldr	r3, [pc, #236]	; (8004bac <UART_SetConfig+0x2d4>)
 8004abe:	fba3 2301 	umull	r2, r3, r3, r1
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	2264      	movs	r2, #100	; 0x64
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	1acb      	subs	r3, r1, r3
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ad2:	4b36      	ldr	r3, [pc, #216]	; (8004bac <UART_SetConfig+0x2d4>)
 8004ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad8:	095b      	lsrs	r3, r3, #5
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ae0:	441c      	add	r4, r3
 8004ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004af0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	1891      	adds	r1, r2, r2
 8004afa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004afc:	415b      	adcs	r3, r3
 8004afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b04:	4641      	mov	r1, r8
 8004b06:	1851      	adds	r1, r2, r1
 8004b08:	6339      	str	r1, [r7, #48]	; 0x30
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	414b      	adcs	r3, r1
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	00cb      	lsls	r3, r1, #3
 8004b20:	4651      	mov	r1, sl
 8004b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b26:	4651      	mov	r1, sl
 8004b28:	00ca      	lsls	r2, r1, #3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4642      	mov	r2, r8
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b38:	464b      	mov	r3, r9
 8004b3a:	460a      	mov	r2, r1
 8004b3c:	eb42 0303 	adc.w	r3, r2, r3
 8004b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b58:	460b      	mov	r3, r1
 8004b5a:	18db      	adds	r3, r3, r3
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5e:	4613      	mov	r3, r2
 8004b60:	eb42 0303 	adc.w	r3, r2, r3
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b6e:	f7fc f83b 	bl	8000be8 <__aeabi_uldivmod>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <UART_SetConfig+0x2d4>)
 8004b78:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	2164      	movs	r1, #100	; 0x64
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	3332      	adds	r3, #50	; 0x32
 8004b8a:	4a08      	ldr	r2, [pc, #32]	; (8004bac <UART_SetConfig+0x2d4>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	f003 0207 	and.w	r2, r3, #7
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4422      	add	r2, r4
 8004b9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ba0:	e106      	b.n	8004db0 <UART_SetConfig+0x4d8>
 8004ba2:	bf00      	nop
 8004ba4:	40011000 	.word	0x40011000
 8004ba8:	40011400 	.word	0x40011400
 8004bac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bc2:	4642      	mov	r2, r8
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	1891      	adds	r1, r2, r2
 8004bc8:	6239      	str	r1, [r7, #32]
 8004bca:	415b      	adcs	r3, r3
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bd2:	4641      	mov	r1, r8
 8004bd4:	1854      	adds	r4, r2, r1
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	eb43 0501 	adc.w	r5, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	00eb      	lsls	r3, r5, #3
 8004be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bea:	00e2      	lsls	r2, r4, #3
 8004bec:	4614      	mov	r4, r2
 8004bee:	461d      	mov	r5, r3
 8004bf0:	4643      	mov	r3, r8
 8004bf2:	18e3      	adds	r3, r4, r3
 8004bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	eb45 0303 	adc.w	r3, r5, r3
 8004bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c1e:	4629      	mov	r1, r5
 8004c20:	008b      	lsls	r3, r1, #2
 8004c22:	4621      	mov	r1, r4
 8004c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c28:	4621      	mov	r1, r4
 8004c2a:	008a      	lsls	r2, r1, #2
 8004c2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c30:	f7fb ffda 	bl	8000be8 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4b60      	ldr	r3, [pc, #384]	; (8004dbc <UART_SetConfig+0x4e4>)
 8004c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	011c      	lsls	r4, r3, #4
 8004c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	1891      	adds	r1, r2, r2
 8004c5a:	61b9      	str	r1, [r7, #24]
 8004c5c:	415b      	adcs	r3, r3
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c64:	4641      	mov	r1, r8
 8004c66:	1851      	adds	r1, r2, r1
 8004c68:	6139      	str	r1, [r7, #16]
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	414b      	adcs	r3, r1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	00cb      	lsls	r3, r1, #3
 8004c80:	4651      	mov	r1, sl
 8004c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c86:	4651      	mov	r1, sl
 8004c88:	00ca      	lsls	r2, r1, #3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4642      	mov	r2, r8
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c98:	464b      	mov	r3, r9
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	008b      	lsls	r3, r1, #2
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	008a      	lsls	r2, r1, #2
 8004cca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cce:	f7fb ff8b 	bl	8000be8 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <UART_SetConfig+0x4e4>)
 8004cda:	fba3 2301 	umull	r2, r3, r3, r1
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2264      	movs	r2, #100	; 0x64
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	1acb      	subs	r3, r1, r3
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	3332      	adds	r3, #50	; 0x32
 8004cec:	4a33      	ldr	r2, [pc, #204]	; (8004dbc <UART_SetConfig+0x4e4>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf8:	441c      	add	r4, r3
 8004cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cfe:	2200      	movs	r2, #0
 8004d00:	673b      	str	r3, [r7, #112]	; 0x70
 8004d02:	677a      	str	r2, [r7, #116]	; 0x74
 8004d04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	1891      	adds	r1, r2, r2
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	415b      	adcs	r3, r3
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d18:	4641      	mov	r1, r8
 8004d1a:	1851      	adds	r1, r2, r1
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	4649      	mov	r1, r9
 8004d20:	414b      	adcs	r3, r1
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d30:	4659      	mov	r1, fp
 8004d32:	00cb      	lsls	r3, r1, #3
 8004d34:	4651      	mov	r1, sl
 8004d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	00ca      	lsls	r2, r1, #3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	4603      	mov	r3, r0
 8004d44:	4642      	mov	r2, r8
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	eb42 0303 	adc.w	r3, r2, r3
 8004d52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d5e:	667a      	str	r2, [r7, #100]	; 0x64
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	008b      	lsls	r3, r1, #2
 8004d70:	4641      	mov	r1, r8
 8004d72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d76:	4641      	mov	r1, r8
 8004d78:	008a      	lsls	r2, r1, #2
 8004d7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d7e:	f7fb ff33 	bl	8000be8 <__aeabi_uldivmod>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <UART_SetConfig+0x4e4>)
 8004d88:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	2164      	movs	r1, #100	; 0x64
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	3332      	adds	r3, #50	; 0x32
 8004d9a:	4a08      	ldr	r2, [pc, #32]	; (8004dbc <UART_SetConfig+0x4e4>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	f003 020f 	and.w	r2, r3, #15
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4422      	add	r2, r4
 8004dae:	609a      	str	r2, [r3, #8]
}
 8004db0:	bf00      	nop
 8004db2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004db6:	46bd      	mov	sp, r7
 8004db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dbc:	51eb851f 	.word	0x51eb851f

08004dc0 <__cvt>:
 8004dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc4:	ec55 4b10 	vmov	r4, r5, d0
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	460e      	mov	r6, r1
 8004dcc:	4619      	mov	r1, r3
 8004dce:	462b      	mov	r3, r5
 8004dd0:	bfbb      	ittet	lt
 8004dd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004dd6:	461d      	movlt	r5, r3
 8004dd8:	2300      	movge	r3, #0
 8004dda:	232d      	movlt	r3, #45	; 0x2d
 8004ddc:	700b      	strb	r3, [r1, #0]
 8004dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004de0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004de4:	4691      	mov	r9, r2
 8004de6:	f023 0820 	bic.w	r8, r3, #32
 8004dea:	bfbc      	itt	lt
 8004dec:	4622      	movlt	r2, r4
 8004dee:	4614      	movlt	r4, r2
 8004df0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004df4:	d005      	beq.n	8004e02 <__cvt+0x42>
 8004df6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dfa:	d100      	bne.n	8004dfe <__cvt+0x3e>
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	2102      	movs	r1, #2
 8004e00:	e000      	b.n	8004e04 <__cvt+0x44>
 8004e02:	2103      	movs	r1, #3
 8004e04:	ab03      	add	r3, sp, #12
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	ab02      	add	r3, sp, #8
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	ec45 4b10 	vmov	d0, r4, r5
 8004e10:	4653      	mov	r3, sl
 8004e12:	4632      	mov	r2, r6
 8004e14:	f000 ff4c 	bl	8005cb0 <_dtoa_r>
 8004e18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	d102      	bne.n	8004e26 <__cvt+0x66>
 8004e20:	f019 0f01 	tst.w	r9, #1
 8004e24:	d022      	beq.n	8004e6c <__cvt+0xac>
 8004e26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e2a:	eb07 0906 	add.w	r9, r7, r6
 8004e2e:	d110      	bne.n	8004e52 <__cvt+0x92>
 8004e30:	783b      	ldrb	r3, [r7, #0]
 8004e32:	2b30      	cmp	r3, #48	; 0x30
 8004e34:	d10a      	bne.n	8004e4c <__cvt+0x8c>
 8004e36:	2200      	movs	r2, #0
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	f7fb fe63 	bl	8000b08 <__aeabi_dcmpeq>
 8004e42:	b918      	cbnz	r0, 8004e4c <__cvt+0x8c>
 8004e44:	f1c6 0601 	rsb	r6, r6, #1
 8004e48:	f8ca 6000 	str.w	r6, [sl]
 8004e4c:	f8da 3000 	ldr.w	r3, [sl]
 8004e50:	4499      	add	r9, r3
 8004e52:	2200      	movs	r2, #0
 8004e54:	2300      	movs	r3, #0
 8004e56:	4620      	mov	r0, r4
 8004e58:	4629      	mov	r1, r5
 8004e5a:	f7fb fe55 	bl	8000b08 <__aeabi_dcmpeq>
 8004e5e:	b108      	cbz	r0, 8004e64 <__cvt+0xa4>
 8004e60:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e64:	2230      	movs	r2, #48	; 0x30
 8004e66:	9b03      	ldr	r3, [sp, #12]
 8004e68:	454b      	cmp	r3, r9
 8004e6a:	d307      	bcc.n	8004e7c <__cvt+0xbc>
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e70:	1bdb      	subs	r3, r3, r7
 8004e72:	4638      	mov	r0, r7
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	b004      	add	sp, #16
 8004e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7c:	1c59      	adds	r1, r3, #1
 8004e7e:	9103      	str	r1, [sp, #12]
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	e7f0      	b.n	8004e66 <__cvt+0xa6>

08004e84 <__exponent>:
 8004e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e86:	4603      	mov	r3, r0
 8004e88:	2900      	cmp	r1, #0
 8004e8a:	bfb8      	it	lt
 8004e8c:	4249      	neglt	r1, r1
 8004e8e:	f803 2b02 	strb.w	r2, [r3], #2
 8004e92:	bfb4      	ite	lt
 8004e94:	222d      	movlt	r2, #45	; 0x2d
 8004e96:	222b      	movge	r2, #43	; 0x2b
 8004e98:	2909      	cmp	r1, #9
 8004e9a:	7042      	strb	r2, [r0, #1]
 8004e9c:	dd2a      	ble.n	8004ef4 <__exponent+0x70>
 8004e9e:	f10d 0207 	add.w	r2, sp, #7
 8004ea2:	4617      	mov	r7, r2
 8004ea4:	260a      	movs	r6, #10
 8004ea6:	4694      	mov	ip, r2
 8004ea8:	fb91 f5f6 	sdiv	r5, r1, r6
 8004eac:	fb06 1415 	mls	r4, r6, r5, r1
 8004eb0:	3430      	adds	r4, #48	; 0x30
 8004eb2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	2c63      	cmp	r4, #99	; 0x63
 8004eba:	f102 32ff 	add.w	r2, r2, #4294967295
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	dcf1      	bgt.n	8004ea6 <__exponent+0x22>
 8004ec2:	3130      	adds	r1, #48	; 0x30
 8004ec4:	f1ac 0402 	sub.w	r4, ip, #2
 8004ec8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ecc:	1c41      	adds	r1, r0, #1
 8004ece:	4622      	mov	r2, r4
 8004ed0:	42ba      	cmp	r2, r7
 8004ed2:	d30a      	bcc.n	8004eea <__exponent+0x66>
 8004ed4:	f10d 0209 	add.w	r2, sp, #9
 8004ed8:	eba2 020c 	sub.w	r2, r2, ip
 8004edc:	42bc      	cmp	r4, r7
 8004ede:	bf88      	it	hi
 8004ee0:	2200      	movhi	r2, #0
 8004ee2:	4413      	add	r3, r2
 8004ee4:	1a18      	subs	r0, r3, r0
 8004ee6:	b003      	add	sp, #12
 8004ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eea:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004eee:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ef2:	e7ed      	b.n	8004ed0 <__exponent+0x4c>
 8004ef4:	2330      	movs	r3, #48	; 0x30
 8004ef6:	3130      	adds	r1, #48	; 0x30
 8004ef8:	7083      	strb	r3, [r0, #2]
 8004efa:	70c1      	strb	r1, [r0, #3]
 8004efc:	1d03      	adds	r3, r0, #4
 8004efe:	e7f1      	b.n	8004ee4 <__exponent+0x60>

08004f00 <_printf_float>:
 8004f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	ed2d 8b02 	vpush	{d8}
 8004f08:	b08d      	sub	sp, #52	; 0x34
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f10:	4616      	mov	r6, r2
 8004f12:	461f      	mov	r7, r3
 8004f14:	4605      	mov	r5, r0
 8004f16:	f000 fdc9 	bl	8005aac <_localeconv_r>
 8004f1a:	f8d0 a000 	ldr.w	sl, [r0]
 8004f1e:	4650      	mov	r0, sl
 8004f20:	f7fb f9c6 	bl	80002b0 <strlen>
 8004f24:	2300      	movs	r3, #0
 8004f26:	930a      	str	r3, [sp, #40]	; 0x28
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	9305      	str	r3, [sp, #20]
 8004f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f34:	3307      	adds	r3, #7
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	f103 0208 	add.w	r2, r3, #8
 8004f3e:	f8c8 2000 	str.w	r2, [r8]
 8004f42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f4a:	9307      	str	r3, [sp, #28]
 8004f4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f50:	ee08 0a10 	vmov	s16, r0
 8004f54:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004f58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f5c:	4b9e      	ldr	r3, [pc, #632]	; (80051d8 <_printf_float+0x2d8>)
 8004f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f62:	f7fb fe03 	bl	8000b6c <__aeabi_dcmpun>
 8004f66:	bb88      	cbnz	r0, 8004fcc <_printf_float+0xcc>
 8004f68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f6c:	4b9a      	ldr	r3, [pc, #616]	; (80051d8 <_printf_float+0x2d8>)
 8004f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f72:	f7fb fddd 	bl	8000b30 <__aeabi_dcmple>
 8004f76:	bb48      	cbnz	r0, 8004fcc <_printf_float+0xcc>
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	4649      	mov	r1, r9
 8004f80:	f7fb fdcc 	bl	8000b1c <__aeabi_dcmplt>
 8004f84:	b110      	cbz	r0, 8004f8c <_printf_float+0x8c>
 8004f86:	232d      	movs	r3, #45	; 0x2d
 8004f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f8c:	4a93      	ldr	r2, [pc, #588]	; (80051dc <_printf_float+0x2dc>)
 8004f8e:	4b94      	ldr	r3, [pc, #592]	; (80051e0 <_printf_float+0x2e0>)
 8004f90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f94:	bf94      	ite	ls
 8004f96:	4690      	movls	r8, r2
 8004f98:	4698      	movhi	r8, r3
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	6123      	str	r3, [r4, #16]
 8004f9e:	9b05      	ldr	r3, [sp, #20]
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	f04f 0900 	mov.w	r9, #0
 8004faa:	9700      	str	r7, [sp, #0]
 8004fac:	4633      	mov	r3, r6
 8004fae:	aa0b      	add	r2, sp, #44	; 0x2c
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 f9da 	bl	800536c <_printf_common>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f040 8090 	bne.w	80050de <_printf_float+0x1de>
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc2:	b00d      	add	sp, #52	; 0x34
 8004fc4:	ecbd 8b02 	vpop	{d8}
 8004fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fcc:	4642      	mov	r2, r8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fb fdca 	bl	8000b6c <__aeabi_dcmpun>
 8004fd8:	b140      	cbz	r0, 8004fec <_printf_float+0xec>
 8004fda:	464b      	mov	r3, r9
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bfbc      	itt	lt
 8004fe0:	232d      	movlt	r3, #45	; 0x2d
 8004fe2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fe6:	4a7f      	ldr	r2, [pc, #508]	; (80051e4 <_printf_float+0x2e4>)
 8004fe8:	4b7f      	ldr	r3, [pc, #508]	; (80051e8 <_printf_float+0x2e8>)
 8004fea:	e7d1      	b.n	8004f90 <_printf_float+0x90>
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ff2:	9206      	str	r2, [sp, #24]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	d13f      	bne.n	8005078 <_printf_float+0x178>
 8004ff8:	2306      	movs	r3, #6
 8004ffa:	6063      	str	r3, [r4, #4]
 8004ffc:	9b05      	ldr	r3, [sp, #20]
 8004ffe:	6861      	ldr	r1, [r4, #4]
 8005000:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005004:	2300      	movs	r3, #0
 8005006:	9303      	str	r3, [sp, #12]
 8005008:	ab0a      	add	r3, sp, #40	; 0x28
 800500a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800500e:	ab09      	add	r3, sp, #36	; 0x24
 8005010:	ec49 8b10 	vmov	d0, r8, r9
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6022      	str	r2, [r4, #0]
 8005018:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800501c:	4628      	mov	r0, r5
 800501e:	f7ff fecf 	bl	8004dc0 <__cvt>
 8005022:	9b06      	ldr	r3, [sp, #24]
 8005024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005026:	2b47      	cmp	r3, #71	; 0x47
 8005028:	4680      	mov	r8, r0
 800502a:	d108      	bne.n	800503e <_printf_float+0x13e>
 800502c:	1cc8      	adds	r0, r1, #3
 800502e:	db02      	blt.n	8005036 <_printf_float+0x136>
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	4299      	cmp	r1, r3
 8005034:	dd41      	ble.n	80050ba <_printf_float+0x1ba>
 8005036:	f1ab 0302 	sub.w	r3, fp, #2
 800503a:	fa5f fb83 	uxtb.w	fp, r3
 800503e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005042:	d820      	bhi.n	8005086 <_printf_float+0x186>
 8005044:	3901      	subs	r1, #1
 8005046:	465a      	mov	r2, fp
 8005048:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800504c:	9109      	str	r1, [sp, #36]	; 0x24
 800504e:	f7ff ff19 	bl	8004e84 <__exponent>
 8005052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005054:	1813      	adds	r3, r2, r0
 8005056:	2a01      	cmp	r2, #1
 8005058:	4681      	mov	r9, r0
 800505a:	6123      	str	r3, [r4, #16]
 800505c:	dc02      	bgt.n	8005064 <_printf_float+0x164>
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	07d2      	lsls	r2, r2, #31
 8005062:	d501      	bpl.n	8005068 <_printf_float+0x168>
 8005064:	3301      	adds	r3, #1
 8005066:	6123      	str	r3, [r4, #16]
 8005068:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800506c:	2b00      	cmp	r3, #0
 800506e:	d09c      	beq.n	8004faa <_printf_float+0xaa>
 8005070:	232d      	movs	r3, #45	; 0x2d
 8005072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005076:	e798      	b.n	8004faa <_printf_float+0xaa>
 8005078:	9a06      	ldr	r2, [sp, #24]
 800507a:	2a47      	cmp	r2, #71	; 0x47
 800507c:	d1be      	bne.n	8004ffc <_printf_float+0xfc>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1bc      	bne.n	8004ffc <_printf_float+0xfc>
 8005082:	2301      	movs	r3, #1
 8005084:	e7b9      	b.n	8004ffa <_printf_float+0xfa>
 8005086:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800508a:	d118      	bne.n	80050be <_printf_float+0x1be>
 800508c:	2900      	cmp	r1, #0
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	dd0b      	ble.n	80050aa <_printf_float+0x1aa>
 8005092:	6121      	str	r1, [r4, #16]
 8005094:	b913      	cbnz	r3, 800509c <_printf_float+0x19c>
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	07d0      	lsls	r0, r2, #31
 800509a:	d502      	bpl.n	80050a2 <_printf_float+0x1a2>
 800509c:	3301      	adds	r3, #1
 800509e:	440b      	add	r3, r1
 80050a0:	6123      	str	r3, [r4, #16]
 80050a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80050a4:	f04f 0900 	mov.w	r9, #0
 80050a8:	e7de      	b.n	8005068 <_printf_float+0x168>
 80050aa:	b913      	cbnz	r3, 80050b2 <_printf_float+0x1b2>
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	07d2      	lsls	r2, r2, #31
 80050b0:	d501      	bpl.n	80050b6 <_printf_float+0x1b6>
 80050b2:	3302      	adds	r3, #2
 80050b4:	e7f4      	b.n	80050a0 <_printf_float+0x1a0>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e7f2      	b.n	80050a0 <_printf_float+0x1a0>
 80050ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80050be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050c0:	4299      	cmp	r1, r3
 80050c2:	db05      	blt.n	80050d0 <_printf_float+0x1d0>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	6121      	str	r1, [r4, #16]
 80050c8:	07d8      	lsls	r0, r3, #31
 80050ca:	d5ea      	bpl.n	80050a2 <_printf_float+0x1a2>
 80050cc:	1c4b      	adds	r3, r1, #1
 80050ce:	e7e7      	b.n	80050a0 <_printf_float+0x1a0>
 80050d0:	2900      	cmp	r1, #0
 80050d2:	bfd4      	ite	le
 80050d4:	f1c1 0202 	rsble	r2, r1, #2
 80050d8:	2201      	movgt	r2, #1
 80050da:	4413      	add	r3, r2
 80050dc:	e7e0      	b.n	80050a0 <_printf_float+0x1a0>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	055a      	lsls	r2, r3, #21
 80050e2:	d407      	bmi.n	80050f4 <_printf_float+0x1f4>
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	4642      	mov	r2, r8
 80050e8:	4631      	mov	r1, r6
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b8      	blx	r7
 80050ee:	3001      	adds	r0, #1
 80050f0:	d12c      	bne.n	800514c <_printf_float+0x24c>
 80050f2:	e764      	b.n	8004fbe <_printf_float+0xbe>
 80050f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050f8:	f240 80e0 	bls.w	80052bc <_printf_float+0x3bc>
 80050fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005100:	2200      	movs	r2, #0
 8005102:	2300      	movs	r3, #0
 8005104:	f7fb fd00 	bl	8000b08 <__aeabi_dcmpeq>
 8005108:	2800      	cmp	r0, #0
 800510a:	d034      	beq.n	8005176 <_printf_float+0x276>
 800510c:	4a37      	ldr	r2, [pc, #220]	; (80051ec <_printf_float+0x2ec>)
 800510e:	2301      	movs	r3, #1
 8005110:	4631      	mov	r1, r6
 8005112:	4628      	mov	r0, r5
 8005114:	47b8      	blx	r7
 8005116:	3001      	adds	r0, #1
 8005118:	f43f af51 	beq.w	8004fbe <_printf_float+0xbe>
 800511c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005120:	429a      	cmp	r2, r3
 8005122:	db02      	blt.n	800512a <_printf_float+0x22a>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	07d8      	lsls	r0, r3, #31
 8005128:	d510      	bpl.n	800514c <_printf_float+0x24c>
 800512a:	ee18 3a10 	vmov	r3, s16
 800512e:	4652      	mov	r2, sl
 8005130:	4631      	mov	r1, r6
 8005132:	4628      	mov	r0, r5
 8005134:	47b8      	blx	r7
 8005136:	3001      	adds	r0, #1
 8005138:	f43f af41 	beq.w	8004fbe <_printf_float+0xbe>
 800513c:	f04f 0800 	mov.w	r8, #0
 8005140:	f104 091a 	add.w	r9, r4, #26
 8005144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005146:	3b01      	subs	r3, #1
 8005148:	4543      	cmp	r3, r8
 800514a:	dc09      	bgt.n	8005160 <_printf_float+0x260>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	079b      	lsls	r3, r3, #30
 8005150:	f100 8107 	bmi.w	8005362 <_printf_float+0x462>
 8005154:	68e0      	ldr	r0, [r4, #12]
 8005156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005158:	4298      	cmp	r0, r3
 800515a:	bfb8      	it	lt
 800515c:	4618      	movlt	r0, r3
 800515e:	e730      	b.n	8004fc2 <_printf_float+0xc2>
 8005160:	2301      	movs	r3, #1
 8005162:	464a      	mov	r2, r9
 8005164:	4631      	mov	r1, r6
 8005166:	4628      	mov	r0, r5
 8005168:	47b8      	blx	r7
 800516a:	3001      	adds	r0, #1
 800516c:	f43f af27 	beq.w	8004fbe <_printf_float+0xbe>
 8005170:	f108 0801 	add.w	r8, r8, #1
 8005174:	e7e6      	b.n	8005144 <_printf_float+0x244>
 8005176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	dc39      	bgt.n	80051f0 <_printf_float+0x2f0>
 800517c:	4a1b      	ldr	r2, [pc, #108]	; (80051ec <_printf_float+0x2ec>)
 800517e:	2301      	movs	r3, #1
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	47b8      	blx	r7
 8005186:	3001      	adds	r0, #1
 8005188:	f43f af19 	beq.w	8004fbe <_printf_float+0xbe>
 800518c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005190:	4313      	orrs	r3, r2
 8005192:	d102      	bne.n	800519a <_printf_float+0x29a>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	07d9      	lsls	r1, r3, #31
 8005198:	d5d8      	bpl.n	800514c <_printf_float+0x24c>
 800519a:	ee18 3a10 	vmov	r3, s16
 800519e:	4652      	mov	r2, sl
 80051a0:	4631      	mov	r1, r6
 80051a2:	4628      	mov	r0, r5
 80051a4:	47b8      	blx	r7
 80051a6:	3001      	adds	r0, #1
 80051a8:	f43f af09 	beq.w	8004fbe <_printf_float+0xbe>
 80051ac:	f04f 0900 	mov.w	r9, #0
 80051b0:	f104 0a1a 	add.w	sl, r4, #26
 80051b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b6:	425b      	negs	r3, r3
 80051b8:	454b      	cmp	r3, r9
 80051ba:	dc01      	bgt.n	80051c0 <_printf_float+0x2c0>
 80051bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051be:	e792      	b.n	80050e6 <_printf_float+0x1e6>
 80051c0:	2301      	movs	r3, #1
 80051c2:	4652      	mov	r2, sl
 80051c4:	4631      	mov	r1, r6
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	f43f aef7 	beq.w	8004fbe <_printf_float+0xbe>
 80051d0:	f109 0901 	add.w	r9, r9, #1
 80051d4:	e7ee      	b.n	80051b4 <_printf_float+0x2b4>
 80051d6:	bf00      	nop
 80051d8:	7fefffff 	.word	0x7fefffff
 80051dc:	08007f1c 	.word	0x08007f1c
 80051e0:	08007f20 	.word	0x08007f20
 80051e4:	08007f24 	.word	0x08007f24
 80051e8:	08007f28 	.word	0x08007f28
 80051ec:	08007f2c 	.word	0x08007f2c
 80051f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051f4:	429a      	cmp	r2, r3
 80051f6:	bfa8      	it	ge
 80051f8:	461a      	movge	r2, r3
 80051fa:	2a00      	cmp	r2, #0
 80051fc:	4691      	mov	r9, r2
 80051fe:	dc37      	bgt.n	8005270 <_printf_float+0x370>
 8005200:	f04f 0b00 	mov.w	fp, #0
 8005204:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005208:	f104 021a 	add.w	r2, r4, #26
 800520c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800520e:	9305      	str	r3, [sp, #20]
 8005210:	eba3 0309 	sub.w	r3, r3, r9
 8005214:	455b      	cmp	r3, fp
 8005216:	dc33      	bgt.n	8005280 <_printf_float+0x380>
 8005218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800521c:	429a      	cmp	r2, r3
 800521e:	db3b      	blt.n	8005298 <_printf_float+0x398>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	07da      	lsls	r2, r3, #31
 8005224:	d438      	bmi.n	8005298 <_printf_float+0x398>
 8005226:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800522a:	eba2 0903 	sub.w	r9, r2, r3
 800522e:	9b05      	ldr	r3, [sp, #20]
 8005230:	1ad2      	subs	r2, r2, r3
 8005232:	4591      	cmp	r9, r2
 8005234:	bfa8      	it	ge
 8005236:	4691      	movge	r9, r2
 8005238:	f1b9 0f00 	cmp.w	r9, #0
 800523c:	dc35      	bgt.n	80052aa <_printf_float+0x3aa>
 800523e:	f04f 0800 	mov.w	r8, #0
 8005242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005246:	f104 0a1a 	add.w	sl, r4, #26
 800524a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	eba3 0309 	sub.w	r3, r3, r9
 8005254:	4543      	cmp	r3, r8
 8005256:	f77f af79 	ble.w	800514c <_printf_float+0x24c>
 800525a:	2301      	movs	r3, #1
 800525c:	4652      	mov	r2, sl
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	47b8      	blx	r7
 8005264:	3001      	adds	r0, #1
 8005266:	f43f aeaa 	beq.w	8004fbe <_printf_float+0xbe>
 800526a:	f108 0801 	add.w	r8, r8, #1
 800526e:	e7ec      	b.n	800524a <_printf_float+0x34a>
 8005270:	4613      	mov	r3, r2
 8005272:	4631      	mov	r1, r6
 8005274:	4642      	mov	r2, r8
 8005276:	4628      	mov	r0, r5
 8005278:	47b8      	blx	r7
 800527a:	3001      	adds	r0, #1
 800527c:	d1c0      	bne.n	8005200 <_printf_float+0x300>
 800527e:	e69e      	b.n	8004fbe <_printf_float+0xbe>
 8005280:	2301      	movs	r3, #1
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	9205      	str	r2, [sp, #20]
 8005288:	47b8      	blx	r7
 800528a:	3001      	adds	r0, #1
 800528c:	f43f ae97 	beq.w	8004fbe <_printf_float+0xbe>
 8005290:	9a05      	ldr	r2, [sp, #20]
 8005292:	f10b 0b01 	add.w	fp, fp, #1
 8005296:	e7b9      	b.n	800520c <_printf_float+0x30c>
 8005298:	ee18 3a10 	vmov	r3, s16
 800529c:	4652      	mov	r2, sl
 800529e:	4631      	mov	r1, r6
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	d1be      	bne.n	8005226 <_printf_float+0x326>
 80052a8:	e689      	b.n	8004fbe <_printf_float+0xbe>
 80052aa:	9a05      	ldr	r2, [sp, #20]
 80052ac:	464b      	mov	r3, r9
 80052ae:	4442      	add	r2, r8
 80052b0:	4631      	mov	r1, r6
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	d1c1      	bne.n	800523e <_printf_float+0x33e>
 80052ba:	e680      	b.n	8004fbe <_printf_float+0xbe>
 80052bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052be:	2a01      	cmp	r2, #1
 80052c0:	dc01      	bgt.n	80052c6 <_printf_float+0x3c6>
 80052c2:	07db      	lsls	r3, r3, #31
 80052c4:	d53a      	bpl.n	800533c <_printf_float+0x43c>
 80052c6:	2301      	movs	r3, #1
 80052c8:	4642      	mov	r2, r8
 80052ca:	4631      	mov	r1, r6
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b8      	blx	r7
 80052d0:	3001      	adds	r0, #1
 80052d2:	f43f ae74 	beq.w	8004fbe <_printf_float+0xbe>
 80052d6:	ee18 3a10 	vmov	r3, s16
 80052da:	4652      	mov	r2, sl
 80052dc:	4631      	mov	r1, r6
 80052de:	4628      	mov	r0, r5
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	f43f ae6b 	beq.w	8004fbe <_printf_float+0xbe>
 80052e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052ec:	2200      	movs	r2, #0
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80052f4:	f7fb fc08 	bl	8000b08 <__aeabi_dcmpeq>
 80052f8:	b9d8      	cbnz	r0, 8005332 <_printf_float+0x432>
 80052fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80052fe:	f108 0201 	add.w	r2, r8, #1
 8005302:	4631      	mov	r1, r6
 8005304:	4628      	mov	r0, r5
 8005306:	47b8      	blx	r7
 8005308:	3001      	adds	r0, #1
 800530a:	d10e      	bne.n	800532a <_printf_float+0x42a>
 800530c:	e657      	b.n	8004fbe <_printf_float+0xbe>
 800530e:	2301      	movs	r3, #1
 8005310:	4652      	mov	r2, sl
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	47b8      	blx	r7
 8005318:	3001      	adds	r0, #1
 800531a:	f43f ae50 	beq.w	8004fbe <_printf_float+0xbe>
 800531e:	f108 0801 	add.w	r8, r8, #1
 8005322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005324:	3b01      	subs	r3, #1
 8005326:	4543      	cmp	r3, r8
 8005328:	dcf1      	bgt.n	800530e <_printf_float+0x40e>
 800532a:	464b      	mov	r3, r9
 800532c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005330:	e6da      	b.n	80050e8 <_printf_float+0x1e8>
 8005332:	f04f 0800 	mov.w	r8, #0
 8005336:	f104 0a1a 	add.w	sl, r4, #26
 800533a:	e7f2      	b.n	8005322 <_printf_float+0x422>
 800533c:	2301      	movs	r3, #1
 800533e:	4642      	mov	r2, r8
 8005340:	e7df      	b.n	8005302 <_printf_float+0x402>
 8005342:	2301      	movs	r3, #1
 8005344:	464a      	mov	r2, r9
 8005346:	4631      	mov	r1, r6
 8005348:	4628      	mov	r0, r5
 800534a:	47b8      	blx	r7
 800534c:	3001      	adds	r0, #1
 800534e:	f43f ae36 	beq.w	8004fbe <_printf_float+0xbe>
 8005352:	f108 0801 	add.w	r8, r8, #1
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800535a:	1a5b      	subs	r3, r3, r1
 800535c:	4543      	cmp	r3, r8
 800535e:	dcf0      	bgt.n	8005342 <_printf_float+0x442>
 8005360:	e6f8      	b.n	8005154 <_printf_float+0x254>
 8005362:	f04f 0800 	mov.w	r8, #0
 8005366:	f104 0919 	add.w	r9, r4, #25
 800536a:	e7f4      	b.n	8005356 <_printf_float+0x456>

0800536c <_printf_common>:
 800536c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	4616      	mov	r6, r2
 8005372:	4699      	mov	r9, r3
 8005374:	688a      	ldr	r2, [r1, #8]
 8005376:	690b      	ldr	r3, [r1, #16]
 8005378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800537c:	4293      	cmp	r3, r2
 800537e:	bfb8      	it	lt
 8005380:	4613      	movlt	r3, r2
 8005382:	6033      	str	r3, [r6, #0]
 8005384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005388:	4607      	mov	r7, r0
 800538a:	460c      	mov	r4, r1
 800538c:	b10a      	cbz	r2, 8005392 <_printf_common+0x26>
 800538e:	3301      	adds	r3, #1
 8005390:	6033      	str	r3, [r6, #0]
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	0699      	lsls	r1, r3, #26
 8005396:	bf42      	ittt	mi
 8005398:	6833      	ldrmi	r3, [r6, #0]
 800539a:	3302      	addmi	r3, #2
 800539c:	6033      	strmi	r3, [r6, #0]
 800539e:	6825      	ldr	r5, [r4, #0]
 80053a0:	f015 0506 	ands.w	r5, r5, #6
 80053a4:	d106      	bne.n	80053b4 <_printf_common+0x48>
 80053a6:	f104 0a19 	add.w	sl, r4, #25
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	6832      	ldr	r2, [r6, #0]
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	42ab      	cmp	r3, r5
 80053b2:	dc26      	bgt.n	8005402 <_printf_common+0x96>
 80053b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053b8:	1e13      	subs	r3, r2, #0
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	bf18      	it	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	0692      	lsls	r2, r2, #26
 80053c2:	d42b      	bmi.n	800541c <_printf_common+0xb0>
 80053c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c8:	4649      	mov	r1, r9
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c0      	blx	r8
 80053ce:	3001      	adds	r0, #1
 80053d0:	d01e      	beq.n	8005410 <_printf_common+0xa4>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	6922      	ldr	r2, [r4, #16]
 80053d6:	f003 0306 	and.w	r3, r3, #6
 80053da:	2b04      	cmp	r3, #4
 80053dc:	bf02      	ittt	eq
 80053de:	68e5      	ldreq	r5, [r4, #12]
 80053e0:	6833      	ldreq	r3, [r6, #0]
 80053e2:	1aed      	subeq	r5, r5, r3
 80053e4:	68a3      	ldr	r3, [r4, #8]
 80053e6:	bf0c      	ite	eq
 80053e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053ec:	2500      	movne	r5, #0
 80053ee:	4293      	cmp	r3, r2
 80053f0:	bfc4      	itt	gt
 80053f2:	1a9b      	subgt	r3, r3, r2
 80053f4:	18ed      	addgt	r5, r5, r3
 80053f6:	2600      	movs	r6, #0
 80053f8:	341a      	adds	r4, #26
 80053fa:	42b5      	cmp	r5, r6
 80053fc:	d11a      	bne.n	8005434 <_printf_common+0xc8>
 80053fe:	2000      	movs	r0, #0
 8005400:	e008      	b.n	8005414 <_printf_common+0xa8>
 8005402:	2301      	movs	r3, #1
 8005404:	4652      	mov	r2, sl
 8005406:	4649      	mov	r1, r9
 8005408:	4638      	mov	r0, r7
 800540a:	47c0      	blx	r8
 800540c:	3001      	adds	r0, #1
 800540e:	d103      	bne.n	8005418 <_printf_common+0xac>
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005418:	3501      	adds	r5, #1
 800541a:	e7c6      	b.n	80053aa <_printf_common+0x3e>
 800541c:	18e1      	adds	r1, r4, r3
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	2030      	movs	r0, #48	; 0x30
 8005422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005426:	4422      	add	r2, r4
 8005428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800542c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005430:	3302      	adds	r3, #2
 8005432:	e7c7      	b.n	80053c4 <_printf_common+0x58>
 8005434:	2301      	movs	r3, #1
 8005436:	4622      	mov	r2, r4
 8005438:	4649      	mov	r1, r9
 800543a:	4638      	mov	r0, r7
 800543c:	47c0      	blx	r8
 800543e:	3001      	adds	r0, #1
 8005440:	d0e6      	beq.n	8005410 <_printf_common+0xa4>
 8005442:	3601      	adds	r6, #1
 8005444:	e7d9      	b.n	80053fa <_printf_common+0x8e>
	...

08005448 <_printf_i>:
 8005448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	7e0f      	ldrb	r7, [r1, #24]
 800544e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005450:	2f78      	cmp	r7, #120	; 0x78
 8005452:	4691      	mov	r9, r2
 8005454:	4680      	mov	r8, r0
 8005456:	460c      	mov	r4, r1
 8005458:	469a      	mov	sl, r3
 800545a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800545e:	d807      	bhi.n	8005470 <_printf_i+0x28>
 8005460:	2f62      	cmp	r7, #98	; 0x62
 8005462:	d80a      	bhi.n	800547a <_printf_i+0x32>
 8005464:	2f00      	cmp	r7, #0
 8005466:	f000 80d4 	beq.w	8005612 <_printf_i+0x1ca>
 800546a:	2f58      	cmp	r7, #88	; 0x58
 800546c:	f000 80c0 	beq.w	80055f0 <_printf_i+0x1a8>
 8005470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005478:	e03a      	b.n	80054f0 <_printf_i+0xa8>
 800547a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800547e:	2b15      	cmp	r3, #21
 8005480:	d8f6      	bhi.n	8005470 <_printf_i+0x28>
 8005482:	a101      	add	r1, pc, #4	; (adr r1, 8005488 <_printf_i+0x40>)
 8005484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005488:	080054e1 	.word	0x080054e1
 800548c:	080054f5 	.word	0x080054f5
 8005490:	08005471 	.word	0x08005471
 8005494:	08005471 	.word	0x08005471
 8005498:	08005471 	.word	0x08005471
 800549c:	08005471 	.word	0x08005471
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	08005471 	.word	0x08005471
 80054a8:	08005471 	.word	0x08005471
 80054ac:	08005471 	.word	0x08005471
 80054b0:	08005471 	.word	0x08005471
 80054b4:	080055f9 	.word	0x080055f9
 80054b8:	08005521 	.word	0x08005521
 80054bc:	080055b3 	.word	0x080055b3
 80054c0:	08005471 	.word	0x08005471
 80054c4:	08005471 	.word	0x08005471
 80054c8:	0800561b 	.word	0x0800561b
 80054cc:	08005471 	.word	0x08005471
 80054d0:	08005521 	.word	0x08005521
 80054d4:	08005471 	.word	0x08005471
 80054d8:	08005471 	.word	0x08005471
 80054dc:	080055bb 	.word	0x080055bb
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	1d1a      	adds	r2, r3, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	602a      	str	r2, [r5, #0]
 80054e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054f0:	2301      	movs	r3, #1
 80054f2:	e09f      	b.n	8005634 <_printf_i+0x1ec>
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	682b      	ldr	r3, [r5, #0]
 80054f8:	0607      	lsls	r7, r0, #24
 80054fa:	f103 0104 	add.w	r1, r3, #4
 80054fe:	6029      	str	r1, [r5, #0]
 8005500:	d501      	bpl.n	8005506 <_printf_i+0xbe>
 8005502:	681e      	ldr	r6, [r3, #0]
 8005504:	e003      	b.n	800550e <_printf_i+0xc6>
 8005506:	0646      	lsls	r6, r0, #25
 8005508:	d5fb      	bpl.n	8005502 <_printf_i+0xba>
 800550a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800550e:	2e00      	cmp	r6, #0
 8005510:	da03      	bge.n	800551a <_printf_i+0xd2>
 8005512:	232d      	movs	r3, #45	; 0x2d
 8005514:	4276      	negs	r6, r6
 8005516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551a:	485a      	ldr	r0, [pc, #360]	; (8005684 <_printf_i+0x23c>)
 800551c:	230a      	movs	r3, #10
 800551e:	e012      	b.n	8005546 <_printf_i+0xfe>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	6820      	ldr	r0, [r4, #0]
 8005524:	1d19      	adds	r1, r3, #4
 8005526:	6029      	str	r1, [r5, #0]
 8005528:	0605      	lsls	r5, r0, #24
 800552a:	d501      	bpl.n	8005530 <_printf_i+0xe8>
 800552c:	681e      	ldr	r6, [r3, #0]
 800552e:	e002      	b.n	8005536 <_printf_i+0xee>
 8005530:	0641      	lsls	r1, r0, #25
 8005532:	d5fb      	bpl.n	800552c <_printf_i+0xe4>
 8005534:	881e      	ldrh	r6, [r3, #0]
 8005536:	4853      	ldr	r0, [pc, #332]	; (8005684 <_printf_i+0x23c>)
 8005538:	2f6f      	cmp	r7, #111	; 0x6f
 800553a:	bf0c      	ite	eq
 800553c:	2308      	moveq	r3, #8
 800553e:	230a      	movne	r3, #10
 8005540:	2100      	movs	r1, #0
 8005542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005546:	6865      	ldr	r5, [r4, #4]
 8005548:	60a5      	str	r5, [r4, #8]
 800554a:	2d00      	cmp	r5, #0
 800554c:	bfa2      	ittt	ge
 800554e:	6821      	ldrge	r1, [r4, #0]
 8005550:	f021 0104 	bicge.w	r1, r1, #4
 8005554:	6021      	strge	r1, [r4, #0]
 8005556:	b90e      	cbnz	r6, 800555c <_printf_i+0x114>
 8005558:	2d00      	cmp	r5, #0
 800555a:	d04b      	beq.n	80055f4 <_printf_i+0x1ac>
 800555c:	4615      	mov	r5, r2
 800555e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005562:	fb03 6711 	mls	r7, r3, r1, r6
 8005566:	5dc7      	ldrb	r7, [r0, r7]
 8005568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800556c:	4637      	mov	r7, r6
 800556e:	42bb      	cmp	r3, r7
 8005570:	460e      	mov	r6, r1
 8005572:	d9f4      	bls.n	800555e <_printf_i+0x116>
 8005574:	2b08      	cmp	r3, #8
 8005576:	d10b      	bne.n	8005590 <_printf_i+0x148>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	07de      	lsls	r6, r3, #31
 800557c:	d508      	bpl.n	8005590 <_printf_i+0x148>
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	6861      	ldr	r1, [r4, #4]
 8005582:	4299      	cmp	r1, r3
 8005584:	bfde      	ittt	le
 8005586:	2330      	movle	r3, #48	; 0x30
 8005588:	f805 3c01 	strble.w	r3, [r5, #-1]
 800558c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005590:	1b52      	subs	r2, r2, r5
 8005592:	6122      	str	r2, [r4, #16]
 8005594:	f8cd a000 	str.w	sl, [sp]
 8005598:	464b      	mov	r3, r9
 800559a:	aa03      	add	r2, sp, #12
 800559c:	4621      	mov	r1, r4
 800559e:	4640      	mov	r0, r8
 80055a0:	f7ff fee4 	bl	800536c <_printf_common>
 80055a4:	3001      	adds	r0, #1
 80055a6:	d14a      	bne.n	800563e <_printf_i+0x1f6>
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	b004      	add	sp, #16
 80055ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	f043 0320 	orr.w	r3, r3, #32
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	4833      	ldr	r0, [pc, #204]	; (8005688 <_printf_i+0x240>)
 80055bc:	2778      	movs	r7, #120	; 0x78
 80055be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	6829      	ldr	r1, [r5, #0]
 80055c6:	061f      	lsls	r7, r3, #24
 80055c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80055cc:	d402      	bmi.n	80055d4 <_printf_i+0x18c>
 80055ce:	065f      	lsls	r7, r3, #25
 80055d0:	bf48      	it	mi
 80055d2:	b2b6      	uxthmi	r6, r6
 80055d4:	07df      	lsls	r7, r3, #31
 80055d6:	bf48      	it	mi
 80055d8:	f043 0320 	orrmi.w	r3, r3, #32
 80055dc:	6029      	str	r1, [r5, #0]
 80055de:	bf48      	it	mi
 80055e0:	6023      	strmi	r3, [r4, #0]
 80055e2:	b91e      	cbnz	r6, 80055ec <_printf_i+0x1a4>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	f023 0320 	bic.w	r3, r3, #32
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	2310      	movs	r3, #16
 80055ee:	e7a7      	b.n	8005540 <_printf_i+0xf8>
 80055f0:	4824      	ldr	r0, [pc, #144]	; (8005684 <_printf_i+0x23c>)
 80055f2:	e7e4      	b.n	80055be <_printf_i+0x176>
 80055f4:	4615      	mov	r5, r2
 80055f6:	e7bd      	b.n	8005574 <_printf_i+0x12c>
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	6826      	ldr	r6, [r4, #0]
 80055fc:	6961      	ldr	r1, [r4, #20]
 80055fe:	1d18      	adds	r0, r3, #4
 8005600:	6028      	str	r0, [r5, #0]
 8005602:	0635      	lsls	r5, r6, #24
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	d501      	bpl.n	800560c <_printf_i+0x1c4>
 8005608:	6019      	str	r1, [r3, #0]
 800560a:	e002      	b.n	8005612 <_printf_i+0x1ca>
 800560c:	0670      	lsls	r0, r6, #25
 800560e:	d5fb      	bpl.n	8005608 <_printf_i+0x1c0>
 8005610:	8019      	strh	r1, [r3, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	6123      	str	r3, [r4, #16]
 8005616:	4615      	mov	r5, r2
 8005618:	e7bc      	b.n	8005594 <_printf_i+0x14c>
 800561a:	682b      	ldr	r3, [r5, #0]
 800561c:	1d1a      	adds	r2, r3, #4
 800561e:	602a      	str	r2, [r5, #0]
 8005620:	681d      	ldr	r5, [r3, #0]
 8005622:	6862      	ldr	r2, [r4, #4]
 8005624:	2100      	movs	r1, #0
 8005626:	4628      	mov	r0, r5
 8005628:	f7fa fdf2 	bl	8000210 <memchr>
 800562c:	b108      	cbz	r0, 8005632 <_printf_i+0x1ea>
 800562e:	1b40      	subs	r0, r0, r5
 8005630:	6060      	str	r0, [r4, #4]
 8005632:	6863      	ldr	r3, [r4, #4]
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	2300      	movs	r3, #0
 8005638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800563c:	e7aa      	b.n	8005594 <_printf_i+0x14c>
 800563e:	6923      	ldr	r3, [r4, #16]
 8005640:	462a      	mov	r2, r5
 8005642:	4649      	mov	r1, r9
 8005644:	4640      	mov	r0, r8
 8005646:	47d0      	blx	sl
 8005648:	3001      	adds	r0, #1
 800564a:	d0ad      	beq.n	80055a8 <_printf_i+0x160>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	079b      	lsls	r3, r3, #30
 8005650:	d413      	bmi.n	800567a <_printf_i+0x232>
 8005652:	68e0      	ldr	r0, [r4, #12]
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	4298      	cmp	r0, r3
 8005658:	bfb8      	it	lt
 800565a:	4618      	movlt	r0, r3
 800565c:	e7a6      	b.n	80055ac <_printf_i+0x164>
 800565e:	2301      	movs	r3, #1
 8005660:	4632      	mov	r2, r6
 8005662:	4649      	mov	r1, r9
 8005664:	4640      	mov	r0, r8
 8005666:	47d0      	blx	sl
 8005668:	3001      	adds	r0, #1
 800566a:	d09d      	beq.n	80055a8 <_printf_i+0x160>
 800566c:	3501      	adds	r5, #1
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	9903      	ldr	r1, [sp, #12]
 8005672:	1a5b      	subs	r3, r3, r1
 8005674:	42ab      	cmp	r3, r5
 8005676:	dcf2      	bgt.n	800565e <_printf_i+0x216>
 8005678:	e7eb      	b.n	8005652 <_printf_i+0x20a>
 800567a:	2500      	movs	r5, #0
 800567c:	f104 0619 	add.w	r6, r4, #25
 8005680:	e7f5      	b.n	800566e <_printf_i+0x226>
 8005682:	bf00      	nop
 8005684:	08007f2e 	.word	0x08007f2e
 8005688:	08007f3f 	.word	0x08007f3f

0800568c <std>:
 800568c:	2300      	movs	r3, #0
 800568e:	b510      	push	{r4, lr}
 8005690:	4604      	mov	r4, r0
 8005692:	e9c0 3300 	strd	r3, r3, [r0]
 8005696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800569a:	6083      	str	r3, [r0, #8]
 800569c:	8181      	strh	r1, [r0, #12]
 800569e:	6643      	str	r3, [r0, #100]	; 0x64
 80056a0:	81c2      	strh	r2, [r0, #14]
 80056a2:	6183      	str	r3, [r0, #24]
 80056a4:	4619      	mov	r1, r3
 80056a6:	2208      	movs	r2, #8
 80056a8:	305c      	adds	r0, #92	; 0x5c
 80056aa:	f000 f9f7 	bl	8005a9c <memset>
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <std+0x58>)
 80056b0:	6263      	str	r3, [r4, #36]	; 0x24
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <std+0x5c>)
 80056b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <std+0x60>)
 80056b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056ba:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <std+0x64>)
 80056bc:	6323      	str	r3, [r4, #48]	; 0x30
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <std+0x68>)
 80056c0:	6224      	str	r4, [r4, #32]
 80056c2:	429c      	cmp	r4, r3
 80056c4:	d006      	beq.n	80056d4 <std+0x48>
 80056c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80056ca:	4294      	cmp	r4, r2
 80056cc:	d002      	beq.n	80056d4 <std+0x48>
 80056ce:	33d0      	adds	r3, #208	; 0xd0
 80056d0:	429c      	cmp	r4, r3
 80056d2:	d105      	bne.n	80056e0 <std+0x54>
 80056d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056dc:	f000 ba5a 	b.w	8005b94 <__retarget_lock_init_recursive>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	bf00      	nop
 80056e4:	080058ed 	.word	0x080058ed
 80056e8:	0800590f 	.word	0x0800590f
 80056ec:	08005947 	.word	0x08005947
 80056f0:	0800596b 	.word	0x0800596b
 80056f4:	200005ec 	.word	0x200005ec

080056f8 <stdio_exit_handler>:
 80056f8:	4a02      	ldr	r2, [pc, #8]	; (8005704 <stdio_exit_handler+0xc>)
 80056fa:	4903      	ldr	r1, [pc, #12]	; (8005708 <stdio_exit_handler+0x10>)
 80056fc:	4803      	ldr	r0, [pc, #12]	; (800570c <stdio_exit_handler+0x14>)
 80056fe:	f000 b869 	b.w	80057d4 <_fwalk_sglue>
 8005702:	bf00      	nop
 8005704:	2000000c 	.word	0x2000000c
 8005708:	08007521 	.word	0x08007521
 800570c:	20000018 	.word	0x20000018

08005710 <cleanup_stdio>:
 8005710:	6841      	ldr	r1, [r0, #4]
 8005712:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <cleanup_stdio+0x34>)
 8005714:	4299      	cmp	r1, r3
 8005716:	b510      	push	{r4, lr}
 8005718:	4604      	mov	r4, r0
 800571a:	d001      	beq.n	8005720 <cleanup_stdio+0x10>
 800571c:	f001 ff00 	bl	8007520 <_fflush_r>
 8005720:	68a1      	ldr	r1, [r4, #8]
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <cleanup_stdio+0x38>)
 8005724:	4299      	cmp	r1, r3
 8005726:	d002      	beq.n	800572e <cleanup_stdio+0x1e>
 8005728:	4620      	mov	r0, r4
 800572a:	f001 fef9 	bl	8007520 <_fflush_r>
 800572e:	68e1      	ldr	r1, [r4, #12]
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <cleanup_stdio+0x3c>)
 8005732:	4299      	cmp	r1, r3
 8005734:	d004      	beq.n	8005740 <cleanup_stdio+0x30>
 8005736:	4620      	mov	r0, r4
 8005738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573c:	f001 bef0 	b.w	8007520 <_fflush_r>
 8005740:	bd10      	pop	{r4, pc}
 8005742:	bf00      	nop
 8005744:	200005ec 	.word	0x200005ec
 8005748:	20000654 	.word	0x20000654
 800574c:	200006bc 	.word	0x200006bc

08005750 <global_stdio_init.part.0>:
 8005750:	b510      	push	{r4, lr}
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <global_stdio_init.part.0+0x30>)
 8005754:	4c0b      	ldr	r4, [pc, #44]	; (8005784 <global_stdio_init.part.0+0x34>)
 8005756:	4a0c      	ldr	r2, [pc, #48]	; (8005788 <global_stdio_init.part.0+0x38>)
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	4620      	mov	r0, r4
 800575c:	2200      	movs	r2, #0
 800575e:	2104      	movs	r1, #4
 8005760:	f7ff ff94 	bl	800568c <std>
 8005764:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005768:	2201      	movs	r2, #1
 800576a:	2109      	movs	r1, #9
 800576c:	f7ff ff8e 	bl	800568c <std>
 8005770:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005774:	2202      	movs	r2, #2
 8005776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800577a:	2112      	movs	r1, #18
 800577c:	f7ff bf86 	b.w	800568c <std>
 8005780:	20000724 	.word	0x20000724
 8005784:	200005ec 	.word	0x200005ec
 8005788:	080056f9 	.word	0x080056f9

0800578c <__sfp_lock_acquire>:
 800578c:	4801      	ldr	r0, [pc, #4]	; (8005794 <__sfp_lock_acquire+0x8>)
 800578e:	f000 ba02 	b.w	8005b96 <__retarget_lock_acquire_recursive>
 8005792:	bf00      	nop
 8005794:	2000072d 	.word	0x2000072d

08005798 <__sfp_lock_release>:
 8005798:	4801      	ldr	r0, [pc, #4]	; (80057a0 <__sfp_lock_release+0x8>)
 800579a:	f000 b9fd 	b.w	8005b98 <__retarget_lock_release_recursive>
 800579e:	bf00      	nop
 80057a0:	2000072d 	.word	0x2000072d

080057a4 <__sinit>:
 80057a4:	b510      	push	{r4, lr}
 80057a6:	4604      	mov	r4, r0
 80057a8:	f7ff fff0 	bl	800578c <__sfp_lock_acquire>
 80057ac:	6a23      	ldr	r3, [r4, #32]
 80057ae:	b11b      	cbz	r3, 80057b8 <__sinit+0x14>
 80057b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b4:	f7ff bff0 	b.w	8005798 <__sfp_lock_release>
 80057b8:	4b04      	ldr	r3, [pc, #16]	; (80057cc <__sinit+0x28>)
 80057ba:	6223      	str	r3, [r4, #32]
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <__sinit+0x2c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f5      	bne.n	80057b0 <__sinit+0xc>
 80057c4:	f7ff ffc4 	bl	8005750 <global_stdio_init.part.0>
 80057c8:	e7f2      	b.n	80057b0 <__sinit+0xc>
 80057ca:	bf00      	nop
 80057cc:	08005711 	.word	0x08005711
 80057d0:	20000724 	.word	0x20000724

080057d4 <_fwalk_sglue>:
 80057d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d8:	4607      	mov	r7, r0
 80057da:	4688      	mov	r8, r1
 80057dc:	4614      	mov	r4, r2
 80057de:	2600      	movs	r6, #0
 80057e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057e4:	f1b9 0901 	subs.w	r9, r9, #1
 80057e8:	d505      	bpl.n	80057f6 <_fwalk_sglue+0x22>
 80057ea:	6824      	ldr	r4, [r4, #0]
 80057ec:	2c00      	cmp	r4, #0
 80057ee:	d1f7      	bne.n	80057e0 <_fwalk_sglue+0xc>
 80057f0:	4630      	mov	r0, r6
 80057f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057f6:	89ab      	ldrh	r3, [r5, #12]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d907      	bls.n	800580c <_fwalk_sglue+0x38>
 80057fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005800:	3301      	adds	r3, #1
 8005802:	d003      	beq.n	800580c <_fwalk_sglue+0x38>
 8005804:	4629      	mov	r1, r5
 8005806:	4638      	mov	r0, r7
 8005808:	47c0      	blx	r8
 800580a:	4306      	orrs	r6, r0
 800580c:	3568      	adds	r5, #104	; 0x68
 800580e:	e7e9      	b.n	80057e4 <_fwalk_sglue+0x10>

08005810 <iprintf>:
 8005810:	b40f      	push	{r0, r1, r2, r3}
 8005812:	b507      	push	{r0, r1, r2, lr}
 8005814:	4906      	ldr	r1, [pc, #24]	; (8005830 <iprintf+0x20>)
 8005816:	ab04      	add	r3, sp, #16
 8005818:	6808      	ldr	r0, [r1, #0]
 800581a:	f853 2b04 	ldr.w	r2, [r3], #4
 800581e:	6881      	ldr	r1, [r0, #8]
 8005820:	9301      	str	r3, [sp, #4]
 8005822:	f001 fcdd 	bl	80071e0 <_vfiprintf_r>
 8005826:	b003      	add	sp, #12
 8005828:	f85d eb04 	ldr.w	lr, [sp], #4
 800582c:	b004      	add	sp, #16
 800582e:	4770      	bx	lr
 8005830:	20000064 	.word	0x20000064

08005834 <_puts_r>:
 8005834:	6a03      	ldr	r3, [r0, #32]
 8005836:	b570      	push	{r4, r5, r6, lr}
 8005838:	6884      	ldr	r4, [r0, #8]
 800583a:	4605      	mov	r5, r0
 800583c:	460e      	mov	r6, r1
 800583e:	b90b      	cbnz	r3, 8005844 <_puts_r+0x10>
 8005840:	f7ff ffb0 	bl	80057a4 <__sinit>
 8005844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005846:	07db      	lsls	r3, r3, #31
 8005848:	d405      	bmi.n	8005856 <_puts_r+0x22>
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	0598      	lsls	r0, r3, #22
 800584e:	d402      	bmi.n	8005856 <_puts_r+0x22>
 8005850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005852:	f000 f9a0 	bl	8005b96 <__retarget_lock_acquire_recursive>
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	0719      	lsls	r1, r3, #28
 800585a:	d513      	bpl.n	8005884 <_puts_r+0x50>
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	b18b      	cbz	r3, 8005884 <_puts_r+0x50>
 8005860:	3e01      	subs	r6, #1
 8005862:	68a3      	ldr	r3, [r4, #8]
 8005864:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005868:	3b01      	subs	r3, #1
 800586a:	60a3      	str	r3, [r4, #8]
 800586c:	b9e9      	cbnz	r1, 80058aa <_puts_r+0x76>
 800586e:	2b00      	cmp	r3, #0
 8005870:	da2e      	bge.n	80058d0 <_puts_r+0x9c>
 8005872:	4622      	mov	r2, r4
 8005874:	210a      	movs	r1, #10
 8005876:	4628      	mov	r0, r5
 8005878:	f000 f87b 	bl	8005972 <__swbuf_r>
 800587c:	3001      	adds	r0, #1
 800587e:	d007      	beq.n	8005890 <_puts_r+0x5c>
 8005880:	250a      	movs	r5, #10
 8005882:	e007      	b.n	8005894 <_puts_r+0x60>
 8005884:	4621      	mov	r1, r4
 8005886:	4628      	mov	r0, r5
 8005888:	f000 f8b0 	bl	80059ec <__swsetup_r>
 800588c:	2800      	cmp	r0, #0
 800588e:	d0e7      	beq.n	8005860 <_puts_r+0x2c>
 8005890:	f04f 35ff 	mov.w	r5, #4294967295
 8005894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005896:	07da      	lsls	r2, r3, #31
 8005898:	d405      	bmi.n	80058a6 <_puts_r+0x72>
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	059b      	lsls	r3, r3, #22
 800589e:	d402      	bmi.n	80058a6 <_puts_r+0x72>
 80058a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058a2:	f000 f979 	bl	8005b98 <__retarget_lock_release_recursive>
 80058a6:	4628      	mov	r0, r5
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	da04      	bge.n	80058b8 <_puts_r+0x84>
 80058ae:	69a2      	ldr	r2, [r4, #24]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	dc06      	bgt.n	80058c2 <_puts_r+0x8e>
 80058b4:	290a      	cmp	r1, #10
 80058b6:	d004      	beq.n	80058c2 <_puts_r+0x8e>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	6022      	str	r2, [r4, #0]
 80058be:	7019      	strb	r1, [r3, #0]
 80058c0:	e7cf      	b.n	8005862 <_puts_r+0x2e>
 80058c2:	4622      	mov	r2, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 f854 	bl	8005972 <__swbuf_r>
 80058ca:	3001      	adds	r0, #1
 80058cc:	d1c9      	bne.n	8005862 <_puts_r+0x2e>
 80058ce:	e7df      	b.n	8005890 <_puts_r+0x5c>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	250a      	movs	r5, #10
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	6022      	str	r2, [r4, #0]
 80058d8:	701d      	strb	r5, [r3, #0]
 80058da:	e7db      	b.n	8005894 <_puts_r+0x60>

080058dc <puts>:
 80058dc:	4b02      	ldr	r3, [pc, #8]	; (80058e8 <puts+0xc>)
 80058de:	4601      	mov	r1, r0
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	f7ff bfa7 	b.w	8005834 <_puts_r>
 80058e6:	bf00      	nop
 80058e8:	20000064 	.word	0x20000064

080058ec <__sread>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	460c      	mov	r4, r1
 80058f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f4:	f000 f900 	bl	8005af8 <_read_r>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	bfab      	itete	ge
 80058fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005900:	181b      	addge	r3, r3, r0
 8005902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005906:	bfac      	ite	ge
 8005908:	6563      	strge	r3, [r4, #84]	; 0x54
 800590a:	81a3      	strhlt	r3, [r4, #12]
 800590c:	bd10      	pop	{r4, pc}

0800590e <__swrite>:
 800590e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005912:	461f      	mov	r7, r3
 8005914:	898b      	ldrh	r3, [r1, #12]
 8005916:	05db      	lsls	r3, r3, #23
 8005918:	4605      	mov	r5, r0
 800591a:	460c      	mov	r4, r1
 800591c:	4616      	mov	r6, r2
 800591e:	d505      	bpl.n	800592c <__swrite+0x1e>
 8005920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005924:	2302      	movs	r3, #2
 8005926:	2200      	movs	r2, #0
 8005928:	f000 f8d4 	bl	8005ad4 <_lseek_r>
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	4632      	mov	r2, r6
 800593a:	463b      	mov	r3, r7
 800593c:	4628      	mov	r0, r5
 800593e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005942:	f000 b8eb 	b.w	8005b1c <_write_r>

08005946 <__sseek>:
 8005946:	b510      	push	{r4, lr}
 8005948:	460c      	mov	r4, r1
 800594a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594e:	f000 f8c1 	bl	8005ad4 <_lseek_r>
 8005952:	1c43      	adds	r3, r0, #1
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	bf15      	itete	ne
 8005958:	6560      	strne	r0, [r4, #84]	; 0x54
 800595a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800595e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005962:	81a3      	strheq	r3, [r4, #12]
 8005964:	bf18      	it	ne
 8005966:	81a3      	strhne	r3, [r4, #12]
 8005968:	bd10      	pop	{r4, pc}

0800596a <__sclose>:
 800596a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596e:	f000 b8a1 	b.w	8005ab4 <_close_r>

08005972 <__swbuf_r>:
 8005972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005974:	460e      	mov	r6, r1
 8005976:	4614      	mov	r4, r2
 8005978:	4605      	mov	r5, r0
 800597a:	b118      	cbz	r0, 8005984 <__swbuf_r+0x12>
 800597c:	6a03      	ldr	r3, [r0, #32]
 800597e:	b90b      	cbnz	r3, 8005984 <__swbuf_r+0x12>
 8005980:	f7ff ff10 	bl	80057a4 <__sinit>
 8005984:	69a3      	ldr	r3, [r4, #24]
 8005986:	60a3      	str	r3, [r4, #8]
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	071a      	lsls	r2, r3, #28
 800598c:	d525      	bpl.n	80059da <__swbuf_r+0x68>
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	b31b      	cbz	r3, 80059da <__swbuf_r+0x68>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	6922      	ldr	r2, [r4, #16]
 8005996:	1a98      	subs	r0, r3, r2
 8005998:	6963      	ldr	r3, [r4, #20]
 800599a:	b2f6      	uxtb	r6, r6
 800599c:	4283      	cmp	r3, r0
 800599e:	4637      	mov	r7, r6
 80059a0:	dc04      	bgt.n	80059ac <__swbuf_r+0x3a>
 80059a2:	4621      	mov	r1, r4
 80059a4:	4628      	mov	r0, r5
 80059a6:	f001 fdbb 	bl	8007520 <_fflush_r>
 80059aa:	b9e0      	cbnz	r0, 80059e6 <__swbuf_r+0x74>
 80059ac:	68a3      	ldr	r3, [r4, #8]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	60a3      	str	r3, [r4, #8]
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	6022      	str	r2, [r4, #0]
 80059b8:	701e      	strb	r6, [r3, #0]
 80059ba:	6962      	ldr	r2, [r4, #20]
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	429a      	cmp	r2, r3
 80059c0:	d004      	beq.n	80059cc <__swbuf_r+0x5a>
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	07db      	lsls	r3, r3, #31
 80059c6:	d506      	bpl.n	80059d6 <__swbuf_r+0x64>
 80059c8:	2e0a      	cmp	r6, #10
 80059ca:	d104      	bne.n	80059d6 <__swbuf_r+0x64>
 80059cc:	4621      	mov	r1, r4
 80059ce:	4628      	mov	r0, r5
 80059d0:	f001 fda6 	bl	8007520 <_fflush_r>
 80059d4:	b938      	cbnz	r0, 80059e6 <__swbuf_r+0x74>
 80059d6:	4638      	mov	r0, r7
 80059d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059da:	4621      	mov	r1, r4
 80059dc:	4628      	mov	r0, r5
 80059de:	f000 f805 	bl	80059ec <__swsetup_r>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d0d5      	beq.n	8005992 <__swbuf_r+0x20>
 80059e6:	f04f 37ff 	mov.w	r7, #4294967295
 80059ea:	e7f4      	b.n	80059d6 <__swbuf_r+0x64>

080059ec <__swsetup_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4b2a      	ldr	r3, [pc, #168]	; (8005a98 <__swsetup_r+0xac>)
 80059f0:	4605      	mov	r5, r0
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	460c      	mov	r4, r1
 80059f6:	b118      	cbz	r0, 8005a00 <__swsetup_r+0x14>
 80059f8:	6a03      	ldr	r3, [r0, #32]
 80059fa:	b90b      	cbnz	r3, 8005a00 <__swsetup_r+0x14>
 80059fc:	f7ff fed2 	bl	80057a4 <__sinit>
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a06:	0718      	lsls	r0, r3, #28
 8005a08:	d422      	bmi.n	8005a50 <__swsetup_r+0x64>
 8005a0a:	06d9      	lsls	r1, r3, #27
 8005a0c:	d407      	bmi.n	8005a1e <__swsetup_r+0x32>
 8005a0e:	2309      	movs	r3, #9
 8005a10:	602b      	str	r3, [r5, #0]
 8005a12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1c:	e034      	b.n	8005a88 <__swsetup_r+0x9c>
 8005a1e:	0758      	lsls	r0, r3, #29
 8005a20:	d512      	bpl.n	8005a48 <__swsetup_r+0x5c>
 8005a22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a24:	b141      	cbz	r1, 8005a38 <__swsetup_r+0x4c>
 8005a26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a2a:	4299      	cmp	r1, r3
 8005a2c:	d002      	beq.n	8005a34 <__swsetup_r+0x48>
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 ff30 	bl	8006894 <_free_r>
 8005a34:	2300      	movs	r3, #0
 8005a36:	6363      	str	r3, [r4, #52]	; 0x34
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a3e:	81a3      	strh	r3, [r4, #12]
 8005a40:	2300      	movs	r3, #0
 8005a42:	6063      	str	r3, [r4, #4]
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	f043 0308 	orr.w	r3, r3, #8
 8005a4e:	81a3      	strh	r3, [r4, #12]
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	b94b      	cbnz	r3, 8005a68 <__swsetup_r+0x7c>
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a5e:	d003      	beq.n	8005a68 <__swsetup_r+0x7c>
 8005a60:	4621      	mov	r1, r4
 8005a62:	4628      	mov	r0, r5
 8005a64:	f001 fdaa 	bl	80075bc <__smakebuf_r>
 8005a68:	89a0      	ldrh	r0, [r4, #12]
 8005a6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a6e:	f010 0301 	ands.w	r3, r0, #1
 8005a72:	d00a      	beq.n	8005a8a <__swsetup_r+0x9e>
 8005a74:	2300      	movs	r3, #0
 8005a76:	60a3      	str	r3, [r4, #8]
 8005a78:	6963      	ldr	r3, [r4, #20]
 8005a7a:	425b      	negs	r3, r3
 8005a7c:	61a3      	str	r3, [r4, #24]
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	b943      	cbnz	r3, 8005a94 <__swsetup_r+0xa8>
 8005a82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a86:	d1c4      	bne.n	8005a12 <__swsetup_r+0x26>
 8005a88:	bd38      	pop	{r3, r4, r5, pc}
 8005a8a:	0781      	lsls	r1, r0, #30
 8005a8c:	bf58      	it	pl
 8005a8e:	6963      	ldrpl	r3, [r4, #20]
 8005a90:	60a3      	str	r3, [r4, #8]
 8005a92:	e7f4      	b.n	8005a7e <__swsetup_r+0x92>
 8005a94:	2000      	movs	r0, #0
 8005a96:	e7f7      	b.n	8005a88 <__swsetup_r+0x9c>
 8005a98:	20000064 	.word	0x20000064

08005a9c <memset>:
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d100      	bne.n	8005aa6 <memset+0xa>
 8005aa4:	4770      	bx	lr
 8005aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aaa:	e7f9      	b.n	8005aa0 <memset+0x4>

08005aac <_localeconv_r>:
 8005aac:	4800      	ldr	r0, [pc, #0]	; (8005ab0 <_localeconv_r+0x4>)
 8005aae:	4770      	bx	lr
 8005ab0:	20000158 	.word	0x20000158

08005ab4 <_close_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4d06      	ldr	r5, [pc, #24]	; (8005ad0 <_close_r+0x1c>)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4604      	mov	r4, r0
 8005abc:	4608      	mov	r0, r1
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	f7fc fa3d 	bl	8001f3e <_close>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_close_r+0x1a>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_close_r+0x1a>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	20000728 	.word	0x20000728

08005ad4 <_lseek_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4d07      	ldr	r5, [pc, #28]	; (8005af4 <_lseek_r+0x20>)
 8005ad8:	4604      	mov	r4, r0
 8005ada:	4608      	mov	r0, r1
 8005adc:	4611      	mov	r1, r2
 8005ade:	2200      	movs	r2, #0
 8005ae0:	602a      	str	r2, [r5, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f7fc fa52 	bl	8001f8c <_lseek>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_lseek_r+0x1e>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_lseek_r+0x1e>
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	20000728 	.word	0x20000728

08005af8 <_read_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4d07      	ldr	r5, [pc, #28]	; (8005b18 <_read_r+0x20>)
 8005afc:	4604      	mov	r4, r0
 8005afe:	4608      	mov	r0, r1
 8005b00:	4611      	mov	r1, r2
 8005b02:	2200      	movs	r2, #0
 8005b04:	602a      	str	r2, [r5, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f7fc f9e0 	bl	8001ecc <_read>
 8005b0c:	1c43      	adds	r3, r0, #1
 8005b0e:	d102      	bne.n	8005b16 <_read_r+0x1e>
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	b103      	cbz	r3, 8005b16 <_read_r+0x1e>
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	bd38      	pop	{r3, r4, r5, pc}
 8005b18:	20000728 	.word	0x20000728

08005b1c <_write_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4d07      	ldr	r5, [pc, #28]	; (8005b3c <_write_r+0x20>)
 8005b20:	4604      	mov	r4, r0
 8005b22:	4608      	mov	r0, r1
 8005b24:	4611      	mov	r1, r2
 8005b26:	2200      	movs	r2, #0
 8005b28:	602a      	str	r2, [r5, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f7fc f9eb 	bl	8001f06 <_write>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d102      	bne.n	8005b3a <_write_r+0x1e>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	b103      	cbz	r3, 8005b3a <_write_r+0x1e>
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	20000728 	.word	0x20000728

08005b40 <__errno>:
 8005b40:	4b01      	ldr	r3, [pc, #4]	; (8005b48 <__errno+0x8>)
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20000064 	.word	0x20000064

08005b4c <__libc_init_array>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4d0d      	ldr	r5, [pc, #52]	; (8005b84 <__libc_init_array+0x38>)
 8005b50:	4c0d      	ldr	r4, [pc, #52]	; (8005b88 <__libc_init_array+0x3c>)
 8005b52:	1b64      	subs	r4, r4, r5
 8005b54:	10a4      	asrs	r4, r4, #2
 8005b56:	2600      	movs	r6, #0
 8005b58:	42a6      	cmp	r6, r4
 8005b5a:	d109      	bne.n	8005b70 <__libc_init_array+0x24>
 8005b5c:	4d0b      	ldr	r5, [pc, #44]	; (8005b8c <__libc_init_array+0x40>)
 8005b5e:	4c0c      	ldr	r4, [pc, #48]	; (8005b90 <__libc_init_array+0x44>)
 8005b60:	f002 f804 	bl	8007b6c <_init>
 8005b64:	1b64      	subs	r4, r4, r5
 8005b66:	10a4      	asrs	r4, r4, #2
 8005b68:	2600      	movs	r6, #0
 8005b6a:	42a6      	cmp	r6, r4
 8005b6c:	d105      	bne.n	8005b7a <__libc_init_array+0x2e>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b74:	4798      	blx	r3
 8005b76:	3601      	adds	r6, #1
 8005b78:	e7ee      	b.n	8005b58 <__libc_init_array+0xc>
 8005b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7e:	4798      	blx	r3
 8005b80:	3601      	adds	r6, #1
 8005b82:	e7f2      	b.n	8005b6a <__libc_init_array+0x1e>
 8005b84:	080082d8 	.word	0x080082d8
 8005b88:	080082d8 	.word	0x080082d8
 8005b8c:	080082d8 	.word	0x080082d8
 8005b90:	080082dc 	.word	0x080082dc

08005b94 <__retarget_lock_init_recursive>:
 8005b94:	4770      	bx	lr

08005b96 <__retarget_lock_acquire_recursive>:
 8005b96:	4770      	bx	lr

08005b98 <__retarget_lock_release_recursive>:
 8005b98:	4770      	bx	lr

08005b9a <quorem>:
 8005b9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9e:	6903      	ldr	r3, [r0, #16]
 8005ba0:	690c      	ldr	r4, [r1, #16]
 8005ba2:	42a3      	cmp	r3, r4
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	db7e      	blt.n	8005ca6 <quorem+0x10c>
 8005ba8:	3c01      	subs	r4, #1
 8005baa:	f101 0814 	add.w	r8, r1, #20
 8005bae:	f100 0514 	add.w	r5, r0, #20
 8005bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bd0:	d331      	bcc.n	8005c36 <quorem+0x9c>
 8005bd2:	f04f 0e00 	mov.w	lr, #0
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	46ac      	mov	ip, r5
 8005bda:	46f2      	mov	sl, lr
 8005bdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005be0:	b293      	uxth	r3, r2
 8005be2:	fb06 e303 	mla	r3, r6, r3, lr
 8005be6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bea:	0c1a      	lsrs	r2, r3, #16
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	ebaa 0303 	sub.w	r3, sl, r3
 8005bf2:	f8dc a000 	ldr.w	sl, [ip]
 8005bf6:	fa13 f38a 	uxtah	r3, r3, sl
 8005bfa:	fb06 220e 	mla	r2, r6, lr, r2
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	9b00      	ldr	r3, [sp, #0]
 8005c02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c06:	b292      	uxth	r2, r2
 8005c08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c10:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c14:	4581      	cmp	r9, r0
 8005c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c1a:	f84c 3b04 	str.w	r3, [ip], #4
 8005c1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c22:	d2db      	bcs.n	8005bdc <quorem+0x42>
 8005c24:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c28:	b92b      	cbnz	r3, 8005c36 <quorem+0x9c>
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	3b04      	subs	r3, #4
 8005c2e:	429d      	cmp	r5, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	d32c      	bcc.n	8005c8e <quorem+0xf4>
 8005c34:	613c      	str	r4, [r7, #16]
 8005c36:	4638      	mov	r0, r7
 8005c38:	f001 f9a8 	bl	8006f8c <__mcmp>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	db22      	blt.n	8005c86 <quorem+0xec>
 8005c40:	3601      	adds	r6, #1
 8005c42:	4629      	mov	r1, r5
 8005c44:	2000      	movs	r0, #0
 8005c46:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c4a:	f8d1 c000 	ldr.w	ip, [r1]
 8005c4e:	b293      	uxth	r3, r2
 8005c50:	1ac3      	subs	r3, r0, r3
 8005c52:	0c12      	lsrs	r2, r2, #16
 8005c54:	fa13 f38c 	uxtah	r3, r3, ip
 8005c58:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005c5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c66:	45c1      	cmp	r9, r8
 8005c68:	f841 3b04 	str.w	r3, [r1], #4
 8005c6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c70:	d2e9      	bcs.n	8005c46 <quorem+0xac>
 8005c72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c7a:	b922      	cbnz	r2, 8005c86 <quorem+0xec>
 8005c7c:	3b04      	subs	r3, #4
 8005c7e:	429d      	cmp	r5, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	d30a      	bcc.n	8005c9a <quorem+0x100>
 8005c84:	613c      	str	r4, [r7, #16]
 8005c86:	4630      	mov	r0, r6
 8005c88:	b003      	add	sp, #12
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	3b04      	subs	r3, #4
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	d1ce      	bne.n	8005c34 <quorem+0x9a>
 8005c96:	3c01      	subs	r4, #1
 8005c98:	e7c9      	b.n	8005c2e <quorem+0x94>
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	3b04      	subs	r3, #4
 8005c9e:	2a00      	cmp	r2, #0
 8005ca0:	d1f0      	bne.n	8005c84 <quorem+0xea>
 8005ca2:	3c01      	subs	r4, #1
 8005ca4:	e7eb      	b.n	8005c7e <quorem+0xe4>
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e7ee      	b.n	8005c88 <quorem+0xee>
 8005caa:	0000      	movs	r0, r0
 8005cac:	0000      	movs	r0, r0
	...

08005cb0 <_dtoa_r>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	ed2d 8b04 	vpush	{d8-d9}
 8005cb8:	69c5      	ldr	r5, [r0, #28]
 8005cba:	b093      	sub	sp, #76	; 0x4c
 8005cbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005cc0:	ec57 6b10 	vmov	r6, r7, d0
 8005cc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005cc8:	9107      	str	r1, [sp, #28]
 8005cca:	4604      	mov	r4, r0
 8005ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8005cce:	930d      	str	r3, [sp, #52]	; 0x34
 8005cd0:	b975      	cbnz	r5, 8005cf0 <_dtoa_r+0x40>
 8005cd2:	2010      	movs	r0, #16
 8005cd4:	f000 fe2a 	bl	800692c <malloc>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	61e0      	str	r0, [r4, #28]
 8005cdc:	b920      	cbnz	r0, 8005ce8 <_dtoa_r+0x38>
 8005cde:	4bae      	ldr	r3, [pc, #696]	; (8005f98 <_dtoa_r+0x2e8>)
 8005ce0:	21ef      	movs	r1, #239	; 0xef
 8005ce2:	48ae      	ldr	r0, [pc, #696]	; (8005f9c <_dtoa_r+0x2ec>)
 8005ce4:	f001 fce6 	bl	80076b4 <__assert_func>
 8005ce8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cec:	6005      	str	r5, [r0, #0]
 8005cee:	60c5      	str	r5, [r0, #12]
 8005cf0:	69e3      	ldr	r3, [r4, #28]
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	b151      	cbz	r1, 8005d0c <_dtoa_r+0x5c>
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	604a      	str	r2, [r1, #4]
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4093      	lsls	r3, r2
 8005cfe:	608b      	str	r3, [r1, #8]
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 ff07 	bl	8006b14 <_Bfree>
 8005d06:	69e3      	ldr	r3, [r4, #28]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	1e3b      	subs	r3, r7, #0
 8005d0e:	bfbb      	ittet	lt
 8005d10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d14:	9303      	strlt	r3, [sp, #12]
 8005d16:	2300      	movge	r3, #0
 8005d18:	2201      	movlt	r2, #1
 8005d1a:	bfac      	ite	ge
 8005d1c:	f8c8 3000 	strge.w	r3, [r8]
 8005d20:	f8c8 2000 	strlt.w	r2, [r8]
 8005d24:	4b9e      	ldr	r3, [pc, #632]	; (8005fa0 <_dtoa_r+0x2f0>)
 8005d26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d2a:	ea33 0308 	bics.w	r3, r3, r8
 8005d2e:	d11b      	bne.n	8005d68 <_dtoa_r+0xb8>
 8005d30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d32:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005d3c:	4333      	orrs	r3, r6
 8005d3e:	f000 8593 	beq.w	8006868 <_dtoa_r+0xbb8>
 8005d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d44:	b963      	cbnz	r3, 8005d60 <_dtoa_r+0xb0>
 8005d46:	4b97      	ldr	r3, [pc, #604]	; (8005fa4 <_dtoa_r+0x2f4>)
 8005d48:	e027      	b.n	8005d9a <_dtoa_r+0xea>
 8005d4a:	4b97      	ldr	r3, [pc, #604]	; (8005fa8 <_dtoa_r+0x2f8>)
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	9800      	ldr	r0, [sp, #0]
 8005d56:	b013      	add	sp, #76	; 0x4c
 8005d58:	ecbd 8b04 	vpop	{d8-d9}
 8005d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d60:	4b90      	ldr	r3, [pc, #576]	; (8005fa4 <_dtoa_r+0x2f4>)
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	3303      	adds	r3, #3
 8005d66:	e7f3      	b.n	8005d50 <_dtoa_r+0xa0>
 8005d68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	ec51 0b17 	vmov	r0, r1, d7
 8005d72:	eeb0 8a47 	vmov.f32	s16, s14
 8005d76:	eef0 8a67 	vmov.f32	s17, s15
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f7fa fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8005d80:	4681      	mov	r9, r0
 8005d82:	b160      	cbz	r0, 8005d9e <_dtoa_r+0xee>
 8005d84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d86:	2301      	movs	r3, #1
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8568 	beq.w	8006862 <_dtoa_r+0xbb2>
 8005d92:	4b86      	ldr	r3, [pc, #536]	; (8005fac <_dtoa_r+0x2fc>)
 8005d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	e7da      	b.n	8005d54 <_dtoa_r+0xa4>
 8005d9e:	aa10      	add	r2, sp, #64	; 0x40
 8005da0:	a911      	add	r1, sp, #68	; 0x44
 8005da2:	4620      	mov	r0, r4
 8005da4:	eeb0 0a48 	vmov.f32	s0, s16
 8005da8:	eef0 0a68 	vmov.f32	s1, s17
 8005dac:	f001 f994 	bl	80070d8 <__d2b>
 8005db0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005db4:	4682      	mov	sl, r0
 8005db6:	2d00      	cmp	r5, #0
 8005db8:	d07f      	beq.n	8005eba <_dtoa_r+0x20a>
 8005dba:	ee18 3a90 	vmov	r3, s17
 8005dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005dc6:	ec51 0b18 	vmov	r0, r1, d8
 8005dca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005dce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005dd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4b75      	ldr	r3, [pc, #468]	; (8005fb0 <_dtoa_r+0x300>)
 8005ddc:	f7fa fa74 	bl	80002c8 <__aeabi_dsub>
 8005de0:	a367      	add	r3, pc, #412	; (adr r3, 8005f80 <_dtoa_r+0x2d0>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa fc27 	bl	8000638 <__aeabi_dmul>
 8005dea:	a367      	add	r3, pc, #412	; (adr r3, 8005f88 <_dtoa_r+0x2d8>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f7fa fa6c 	bl	80002cc <__adddf3>
 8005df4:	4606      	mov	r6, r0
 8005df6:	4628      	mov	r0, r5
 8005df8:	460f      	mov	r7, r1
 8005dfa:	f7fa fbb3 	bl	8000564 <__aeabi_i2d>
 8005dfe:	a364      	add	r3, pc, #400	; (adr r3, 8005f90 <_dtoa_r+0x2e0>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f7fa fc18 	bl	8000638 <__aeabi_dmul>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	4639      	mov	r1, r7
 8005e10:	f7fa fa5c 	bl	80002cc <__adddf3>
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	f7fa febe 	bl	8000b98 <__aeabi_d2iz>
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4683      	mov	fp, r0
 8005e20:	2300      	movs	r3, #0
 8005e22:	4630      	mov	r0, r6
 8005e24:	4639      	mov	r1, r7
 8005e26:	f7fa fe79 	bl	8000b1c <__aeabi_dcmplt>
 8005e2a:	b148      	cbz	r0, 8005e40 <_dtoa_r+0x190>
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	f7fa fb99 	bl	8000564 <__aeabi_i2d>
 8005e32:	4632      	mov	r2, r6
 8005e34:	463b      	mov	r3, r7
 8005e36:	f7fa fe67 	bl	8000b08 <__aeabi_dcmpeq>
 8005e3a:	b908      	cbnz	r0, 8005e40 <_dtoa_r+0x190>
 8005e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e40:	f1bb 0f16 	cmp.w	fp, #22
 8005e44:	d857      	bhi.n	8005ef6 <_dtoa_r+0x246>
 8005e46:	4b5b      	ldr	r3, [pc, #364]	; (8005fb4 <_dtoa_r+0x304>)
 8005e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	ec51 0b18 	vmov	r0, r1, d8
 8005e54:	f7fa fe62 	bl	8000b1c <__aeabi_dcmplt>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d04e      	beq.n	8005efa <_dtoa_r+0x24a>
 8005e5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e60:	2300      	movs	r3, #0
 8005e62:	930c      	str	r3, [sp, #48]	; 0x30
 8005e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e66:	1b5b      	subs	r3, r3, r5
 8005e68:	1e5a      	subs	r2, r3, #1
 8005e6a:	bf45      	ittet	mi
 8005e6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005e70:	9305      	strmi	r3, [sp, #20]
 8005e72:	2300      	movpl	r3, #0
 8005e74:	2300      	movmi	r3, #0
 8005e76:	9206      	str	r2, [sp, #24]
 8005e78:	bf54      	ite	pl
 8005e7a:	9305      	strpl	r3, [sp, #20]
 8005e7c:	9306      	strmi	r3, [sp, #24]
 8005e7e:	f1bb 0f00 	cmp.w	fp, #0
 8005e82:	db3c      	blt.n	8005efe <_dtoa_r+0x24e>
 8005e84:	9b06      	ldr	r3, [sp, #24]
 8005e86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005e8a:	445b      	add	r3, fp
 8005e8c:	9306      	str	r3, [sp, #24]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9308      	str	r3, [sp, #32]
 8005e92:	9b07      	ldr	r3, [sp, #28]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d868      	bhi.n	8005f6a <_dtoa_r+0x2ba>
 8005e98:	2b05      	cmp	r3, #5
 8005e9a:	bfc4      	itt	gt
 8005e9c:	3b04      	subgt	r3, #4
 8005e9e:	9307      	strgt	r3, [sp, #28]
 8005ea0:	9b07      	ldr	r3, [sp, #28]
 8005ea2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ea6:	bfcc      	ite	gt
 8005ea8:	2500      	movgt	r5, #0
 8005eaa:	2501      	movle	r5, #1
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	f200 8085 	bhi.w	8005fbc <_dtoa_r+0x30c>
 8005eb2:	e8df f003 	tbb	[pc, r3]
 8005eb6:	3b2e      	.short	0x3b2e
 8005eb8:	5839      	.short	0x5839
 8005eba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ebe:	441d      	add	r5, r3
 8005ec0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	bfc1      	itttt	gt
 8005ec8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ecc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005ed0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005ed4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005ed8:	bfd6      	itet	le
 8005eda:	f1c3 0320 	rsble	r3, r3, #32
 8005ede:	ea48 0003 	orrgt.w	r0, r8, r3
 8005ee2:	fa06 f003 	lslle.w	r0, r6, r3
 8005ee6:	f7fa fb2d 	bl	8000544 <__aeabi_ui2d>
 8005eea:	2201      	movs	r2, #1
 8005eec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ef0:	3d01      	subs	r5, #1
 8005ef2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ef4:	e76f      	b.n	8005dd6 <_dtoa_r+0x126>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e7b3      	b.n	8005e62 <_dtoa_r+0x1b2>
 8005efa:	900c      	str	r0, [sp, #48]	; 0x30
 8005efc:	e7b2      	b.n	8005e64 <_dtoa_r+0x1b4>
 8005efe:	9b05      	ldr	r3, [sp, #20]
 8005f00:	eba3 030b 	sub.w	r3, r3, fp
 8005f04:	9305      	str	r3, [sp, #20]
 8005f06:	f1cb 0300 	rsb	r3, fp, #0
 8005f0a:	9308      	str	r3, [sp, #32]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f10:	e7bf      	b.n	8005e92 <_dtoa_r+0x1e2>
 8005f12:	2300      	movs	r3, #0
 8005f14:	9309      	str	r3, [sp, #36]	; 0x24
 8005f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	dc52      	bgt.n	8005fc2 <_dtoa_r+0x312>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	461a      	mov	r2, r3
 8005f24:	920a      	str	r2, [sp, #40]	; 0x28
 8005f26:	e00b      	b.n	8005f40 <_dtoa_r+0x290>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e7f3      	b.n	8005f14 <_dtoa_r+0x264>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f32:	445b      	add	r3, fp
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	3301      	adds	r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	bfb8      	it	lt
 8005f3e:	2301      	movlt	r3, #1
 8005f40:	69e0      	ldr	r0, [r4, #28]
 8005f42:	2100      	movs	r1, #0
 8005f44:	2204      	movs	r2, #4
 8005f46:	f102 0614 	add.w	r6, r2, #20
 8005f4a:	429e      	cmp	r6, r3
 8005f4c:	d93d      	bls.n	8005fca <_dtoa_r+0x31a>
 8005f4e:	6041      	str	r1, [r0, #4]
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 fd9f 	bl	8006a94 <_Balloc>
 8005f56:	9000      	str	r0, [sp, #0]
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d139      	bne.n	8005fd0 <_dtoa_r+0x320>
 8005f5c:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <_dtoa_r+0x308>)
 8005f5e:	4602      	mov	r2, r0
 8005f60:	f240 11af 	movw	r1, #431	; 0x1af
 8005f64:	e6bd      	b.n	8005ce2 <_dtoa_r+0x32>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e7e1      	b.n	8005f2e <_dtoa_r+0x27e>
 8005f6a:	2501      	movs	r5, #1
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9307      	str	r3, [sp, #28]
 8005f70:	9509      	str	r5, [sp, #36]	; 0x24
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	9304      	str	r3, [sp, #16]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2312      	movs	r3, #18
 8005f7e:	e7d1      	b.n	8005f24 <_dtoa_r+0x274>
 8005f80:	636f4361 	.word	0x636f4361
 8005f84:	3fd287a7 	.word	0x3fd287a7
 8005f88:	8b60c8b3 	.word	0x8b60c8b3
 8005f8c:	3fc68a28 	.word	0x3fc68a28
 8005f90:	509f79fb 	.word	0x509f79fb
 8005f94:	3fd34413 	.word	0x3fd34413
 8005f98:	08007f5d 	.word	0x08007f5d
 8005f9c:	08007f74 	.word	0x08007f74
 8005fa0:	7ff00000 	.word	0x7ff00000
 8005fa4:	08007f59 	.word	0x08007f59
 8005fa8:	08007f50 	.word	0x08007f50
 8005fac:	08007f2d 	.word	0x08007f2d
 8005fb0:	3ff80000 	.word	0x3ff80000
 8005fb4:	08008060 	.word	0x08008060
 8005fb8:	08007fcc 	.word	0x08007fcc
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc0:	e7d7      	b.n	8005f72 <_dtoa_r+0x2c2>
 8005fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	9304      	str	r3, [sp, #16]
 8005fc8:	e7ba      	b.n	8005f40 <_dtoa_r+0x290>
 8005fca:	3101      	adds	r1, #1
 8005fcc:	0052      	lsls	r2, r2, #1
 8005fce:	e7ba      	b.n	8005f46 <_dtoa_r+0x296>
 8005fd0:	69e3      	ldr	r3, [r4, #28]
 8005fd2:	9a00      	ldr	r2, [sp, #0]
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	9b04      	ldr	r3, [sp, #16]
 8005fd8:	2b0e      	cmp	r3, #14
 8005fda:	f200 80a8 	bhi.w	800612e <_dtoa_r+0x47e>
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	f000 80a5 	beq.w	800612e <_dtoa_r+0x47e>
 8005fe4:	f1bb 0f00 	cmp.w	fp, #0
 8005fe8:	dd38      	ble.n	800605c <_dtoa_r+0x3ac>
 8005fea:	4bc0      	ldr	r3, [pc, #768]	; (80062ec <_dtoa_r+0x63c>)
 8005fec:	f00b 020f 	and.w	r2, fp, #15
 8005ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ff4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005ff8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005ffc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006000:	d019      	beq.n	8006036 <_dtoa_r+0x386>
 8006002:	4bbb      	ldr	r3, [pc, #748]	; (80062f0 <_dtoa_r+0x640>)
 8006004:	ec51 0b18 	vmov	r0, r1, d8
 8006008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800600c:	f7fa fc3e 	bl	800088c <__aeabi_ddiv>
 8006010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006014:	f008 080f 	and.w	r8, r8, #15
 8006018:	2503      	movs	r5, #3
 800601a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80062f0 <_dtoa_r+0x640>
 800601e:	f1b8 0f00 	cmp.w	r8, #0
 8006022:	d10a      	bne.n	800603a <_dtoa_r+0x38a>
 8006024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006028:	4632      	mov	r2, r6
 800602a:	463b      	mov	r3, r7
 800602c:	f7fa fc2e 	bl	800088c <__aeabi_ddiv>
 8006030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006034:	e02b      	b.n	800608e <_dtoa_r+0x3de>
 8006036:	2502      	movs	r5, #2
 8006038:	e7ef      	b.n	800601a <_dtoa_r+0x36a>
 800603a:	f018 0f01 	tst.w	r8, #1
 800603e:	d008      	beq.n	8006052 <_dtoa_r+0x3a2>
 8006040:	4630      	mov	r0, r6
 8006042:	4639      	mov	r1, r7
 8006044:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006048:	f7fa faf6 	bl	8000638 <__aeabi_dmul>
 800604c:	3501      	adds	r5, #1
 800604e:	4606      	mov	r6, r0
 8006050:	460f      	mov	r7, r1
 8006052:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006056:	f109 0908 	add.w	r9, r9, #8
 800605a:	e7e0      	b.n	800601e <_dtoa_r+0x36e>
 800605c:	f000 809f 	beq.w	800619e <_dtoa_r+0x4ee>
 8006060:	f1cb 0600 	rsb	r6, fp, #0
 8006064:	4ba1      	ldr	r3, [pc, #644]	; (80062ec <_dtoa_r+0x63c>)
 8006066:	4fa2      	ldr	r7, [pc, #648]	; (80062f0 <_dtoa_r+0x640>)
 8006068:	f006 020f 	and.w	r2, r6, #15
 800606c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	ec51 0b18 	vmov	r0, r1, d8
 8006078:	f7fa fade 	bl	8000638 <__aeabi_dmul>
 800607c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006080:	1136      	asrs	r6, r6, #4
 8006082:	2300      	movs	r3, #0
 8006084:	2502      	movs	r5, #2
 8006086:	2e00      	cmp	r6, #0
 8006088:	d17e      	bne.n	8006188 <_dtoa_r+0x4d8>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1d0      	bne.n	8006030 <_dtoa_r+0x380>
 800608e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006090:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8084 	beq.w	80061a2 <_dtoa_r+0x4f2>
 800609a:	4b96      	ldr	r3, [pc, #600]	; (80062f4 <_dtoa_r+0x644>)
 800609c:	2200      	movs	r2, #0
 800609e:	4640      	mov	r0, r8
 80060a0:	4649      	mov	r1, r9
 80060a2:	f7fa fd3b 	bl	8000b1c <__aeabi_dcmplt>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d07b      	beq.n	80061a2 <_dtoa_r+0x4f2>
 80060aa:	9b04      	ldr	r3, [sp, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d078      	beq.n	80061a2 <_dtoa_r+0x4f2>
 80060b0:	9b01      	ldr	r3, [sp, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	dd39      	ble.n	800612a <_dtoa_r+0x47a>
 80060b6:	4b90      	ldr	r3, [pc, #576]	; (80062f8 <_dtoa_r+0x648>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	f7fa fabb 	bl	8000638 <__aeabi_dmul>
 80060c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060c6:	9e01      	ldr	r6, [sp, #4]
 80060c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80060cc:	3501      	adds	r5, #1
 80060ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80060d2:	4628      	mov	r0, r5
 80060d4:	f7fa fa46 	bl	8000564 <__aeabi_i2d>
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	f7fa faac 	bl	8000638 <__aeabi_dmul>
 80060e0:	4b86      	ldr	r3, [pc, #536]	; (80062fc <_dtoa_r+0x64c>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	f7fa f8f2 	bl	80002cc <__adddf3>
 80060e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80060ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f0:	9303      	str	r3, [sp, #12]
 80060f2:	2e00      	cmp	r6, #0
 80060f4:	d158      	bne.n	80061a8 <_dtoa_r+0x4f8>
 80060f6:	4b82      	ldr	r3, [pc, #520]	; (8006300 <_dtoa_r+0x650>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	4640      	mov	r0, r8
 80060fc:	4649      	mov	r1, r9
 80060fe:	f7fa f8e3 	bl	80002c8 <__aeabi_dsub>
 8006102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006106:	4680      	mov	r8, r0
 8006108:	4689      	mov	r9, r1
 800610a:	f7fa fd25 	bl	8000b58 <__aeabi_dcmpgt>
 800610e:	2800      	cmp	r0, #0
 8006110:	f040 8296 	bne.w	8006640 <_dtoa_r+0x990>
 8006114:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006118:	4640      	mov	r0, r8
 800611a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800611e:	4649      	mov	r1, r9
 8006120:	f7fa fcfc 	bl	8000b1c <__aeabi_dcmplt>
 8006124:	2800      	cmp	r0, #0
 8006126:	f040 8289 	bne.w	800663c <_dtoa_r+0x98c>
 800612a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800612e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006130:	2b00      	cmp	r3, #0
 8006132:	f2c0 814e 	blt.w	80063d2 <_dtoa_r+0x722>
 8006136:	f1bb 0f0e 	cmp.w	fp, #14
 800613a:	f300 814a 	bgt.w	80063d2 <_dtoa_r+0x722>
 800613e:	4b6b      	ldr	r3, [pc, #428]	; (80062ec <_dtoa_r+0x63c>)
 8006140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006144:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800614a:	2b00      	cmp	r3, #0
 800614c:	f280 80dc 	bge.w	8006308 <_dtoa_r+0x658>
 8006150:	9b04      	ldr	r3, [sp, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f300 80d8 	bgt.w	8006308 <_dtoa_r+0x658>
 8006158:	f040 826f 	bne.w	800663a <_dtoa_r+0x98a>
 800615c:	4b68      	ldr	r3, [pc, #416]	; (8006300 <_dtoa_r+0x650>)
 800615e:	2200      	movs	r2, #0
 8006160:	4640      	mov	r0, r8
 8006162:	4649      	mov	r1, r9
 8006164:	f7fa fa68 	bl	8000638 <__aeabi_dmul>
 8006168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800616c:	f7fa fcea 	bl	8000b44 <__aeabi_dcmpge>
 8006170:	9e04      	ldr	r6, [sp, #16]
 8006172:	4637      	mov	r7, r6
 8006174:	2800      	cmp	r0, #0
 8006176:	f040 8245 	bne.w	8006604 <_dtoa_r+0x954>
 800617a:	9d00      	ldr	r5, [sp, #0]
 800617c:	2331      	movs	r3, #49	; 0x31
 800617e:	f805 3b01 	strb.w	r3, [r5], #1
 8006182:	f10b 0b01 	add.w	fp, fp, #1
 8006186:	e241      	b.n	800660c <_dtoa_r+0x95c>
 8006188:	07f2      	lsls	r2, r6, #31
 800618a:	d505      	bpl.n	8006198 <_dtoa_r+0x4e8>
 800618c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006190:	f7fa fa52 	bl	8000638 <__aeabi_dmul>
 8006194:	3501      	adds	r5, #1
 8006196:	2301      	movs	r3, #1
 8006198:	1076      	asrs	r6, r6, #1
 800619a:	3708      	adds	r7, #8
 800619c:	e773      	b.n	8006086 <_dtoa_r+0x3d6>
 800619e:	2502      	movs	r5, #2
 80061a0:	e775      	b.n	800608e <_dtoa_r+0x3de>
 80061a2:	9e04      	ldr	r6, [sp, #16]
 80061a4:	465f      	mov	r7, fp
 80061a6:	e792      	b.n	80060ce <_dtoa_r+0x41e>
 80061a8:	9900      	ldr	r1, [sp, #0]
 80061aa:	4b50      	ldr	r3, [pc, #320]	; (80062ec <_dtoa_r+0x63c>)
 80061ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061b0:	4431      	add	r1, r6
 80061b2:	9102      	str	r1, [sp, #8]
 80061b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061b6:	eeb0 9a47 	vmov.f32	s18, s14
 80061ba:	eef0 9a67 	vmov.f32	s19, s15
 80061be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061c6:	2900      	cmp	r1, #0
 80061c8:	d044      	beq.n	8006254 <_dtoa_r+0x5a4>
 80061ca:	494e      	ldr	r1, [pc, #312]	; (8006304 <_dtoa_r+0x654>)
 80061cc:	2000      	movs	r0, #0
 80061ce:	f7fa fb5d 	bl	800088c <__aeabi_ddiv>
 80061d2:	ec53 2b19 	vmov	r2, r3, d9
 80061d6:	f7fa f877 	bl	80002c8 <__aeabi_dsub>
 80061da:	9d00      	ldr	r5, [sp, #0]
 80061dc:	ec41 0b19 	vmov	d9, r0, r1
 80061e0:	4649      	mov	r1, r9
 80061e2:	4640      	mov	r0, r8
 80061e4:	f7fa fcd8 	bl	8000b98 <__aeabi_d2iz>
 80061e8:	4606      	mov	r6, r0
 80061ea:	f7fa f9bb 	bl	8000564 <__aeabi_i2d>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4640      	mov	r0, r8
 80061f4:	4649      	mov	r1, r9
 80061f6:	f7fa f867 	bl	80002c8 <__aeabi_dsub>
 80061fa:	3630      	adds	r6, #48	; 0x30
 80061fc:	f805 6b01 	strb.w	r6, [r5], #1
 8006200:	ec53 2b19 	vmov	r2, r3, d9
 8006204:	4680      	mov	r8, r0
 8006206:	4689      	mov	r9, r1
 8006208:	f7fa fc88 	bl	8000b1c <__aeabi_dcmplt>
 800620c:	2800      	cmp	r0, #0
 800620e:	d164      	bne.n	80062da <_dtoa_r+0x62a>
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	4937      	ldr	r1, [pc, #220]	; (80062f4 <_dtoa_r+0x644>)
 8006216:	2000      	movs	r0, #0
 8006218:	f7fa f856 	bl	80002c8 <__aeabi_dsub>
 800621c:	ec53 2b19 	vmov	r2, r3, d9
 8006220:	f7fa fc7c 	bl	8000b1c <__aeabi_dcmplt>
 8006224:	2800      	cmp	r0, #0
 8006226:	f040 80b6 	bne.w	8006396 <_dtoa_r+0x6e6>
 800622a:	9b02      	ldr	r3, [sp, #8]
 800622c:	429d      	cmp	r5, r3
 800622e:	f43f af7c 	beq.w	800612a <_dtoa_r+0x47a>
 8006232:	4b31      	ldr	r3, [pc, #196]	; (80062f8 <_dtoa_r+0x648>)
 8006234:	ec51 0b19 	vmov	r0, r1, d9
 8006238:	2200      	movs	r2, #0
 800623a:	f7fa f9fd 	bl	8000638 <__aeabi_dmul>
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <_dtoa_r+0x648>)
 8006240:	ec41 0b19 	vmov	d9, r0, r1
 8006244:	2200      	movs	r2, #0
 8006246:	4640      	mov	r0, r8
 8006248:	4649      	mov	r1, r9
 800624a:	f7fa f9f5 	bl	8000638 <__aeabi_dmul>
 800624e:	4680      	mov	r8, r0
 8006250:	4689      	mov	r9, r1
 8006252:	e7c5      	b.n	80061e0 <_dtoa_r+0x530>
 8006254:	ec51 0b17 	vmov	r0, r1, d7
 8006258:	f7fa f9ee 	bl	8000638 <__aeabi_dmul>
 800625c:	9b02      	ldr	r3, [sp, #8]
 800625e:	9d00      	ldr	r5, [sp, #0]
 8006260:	930f      	str	r3, [sp, #60]	; 0x3c
 8006262:	ec41 0b19 	vmov	d9, r0, r1
 8006266:	4649      	mov	r1, r9
 8006268:	4640      	mov	r0, r8
 800626a:	f7fa fc95 	bl	8000b98 <__aeabi_d2iz>
 800626e:	4606      	mov	r6, r0
 8006270:	f7fa f978 	bl	8000564 <__aeabi_i2d>
 8006274:	3630      	adds	r6, #48	; 0x30
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4640      	mov	r0, r8
 800627c:	4649      	mov	r1, r9
 800627e:	f7fa f823 	bl	80002c8 <__aeabi_dsub>
 8006282:	f805 6b01 	strb.w	r6, [r5], #1
 8006286:	9b02      	ldr	r3, [sp, #8]
 8006288:	429d      	cmp	r5, r3
 800628a:	4680      	mov	r8, r0
 800628c:	4689      	mov	r9, r1
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	d124      	bne.n	80062de <_dtoa_r+0x62e>
 8006294:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <_dtoa_r+0x654>)
 8006296:	ec51 0b19 	vmov	r0, r1, d9
 800629a:	f7fa f817 	bl	80002cc <__adddf3>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4640      	mov	r0, r8
 80062a4:	4649      	mov	r1, r9
 80062a6:	f7fa fc57 	bl	8000b58 <__aeabi_dcmpgt>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d173      	bne.n	8006396 <_dtoa_r+0x6e6>
 80062ae:	ec53 2b19 	vmov	r2, r3, d9
 80062b2:	4914      	ldr	r1, [pc, #80]	; (8006304 <_dtoa_r+0x654>)
 80062b4:	2000      	movs	r0, #0
 80062b6:	f7fa f807 	bl	80002c8 <__aeabi_dsub>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4640      	mov	r0, r8
 80062c0:	4649      	mov	r1, r9
 80062c2:	f7fa fc2b 	bl	8000b1c <__aeabi_dcmplt>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f43f af2f 	beq.w	800612a <_dtoa_r+0x47a>
 80062cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062ce:	1e6b      	subs	r3, r5, #1
 80062d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062d6:	2b30      	cmp	r3, #48	; 0x30
 80062d8:	d0f8      	beq.n	80062cc <_dtoa_r+0x61c>
 80062da:	46bb      	mov	fp, r7
 80062dc:	e04a      	b.n	8006374 <_dtoa_r+0x6c4>
 80062de:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <_dtoa_r+0x648>)
 80062e0:	f7fa f9aa 	bl	8000638 <__aeabi_dmul>
 80062e4:	4680      	mov	r8, r0
 80062e6:	4689      	mov	r9, r1
 80062e8:	e7bd      	b.n	8006266 <_dtoa_r+0x5b6>
 80062ea:	bf00      	nop
 80062ec:	08008060 	.word	0x08008060
 80062f0:	08008038 	.word	0x08008038
 80062f4:	3ff00000 	.word	0x3ff00000
 80062f8:	40240000 	.word	0x40240000
 80062fc:	401c0000 	.word	0x401c0000
 8006300:	40140000 	.word	0x40140000
 8006304:	3fe00000 	.word	0x3fe00000
 8006308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800630c:	9d00      	ldr	r5, [sp, #0]
 800630e:	4642      	mov	r2, r8
 8006310:	464b      	mov	r3, r9
 8006312:	4630      	mov	r0, r6
 8006314:	4639      	mov	r1, r7
 8006316:	f7fa fab9 	bl	800088c <__aeabi_ddiv>
 800631a:	f7fa fc3d 	bl	8000b98 <__aeabi_d2iz>
 800631e:	9001      	str	r0, [sp, #4]
 8006320:	f7fa f920 	bl	8000564 <__aeabi_i2d>
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	f7fa f986 	bl	8000638 <__aeabi_dmul>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4630      	mov	r0, r6
 8006332:	4639      	mov	r1, r7
 8006334:	f7f9 ffc8 	bl	80002c8 <__aeabi_dsub>
 8006338:	9e01      	ldr	r6, [sp, #4]
 800633a:	9f04      	ldr	r7, [sp, #16]
 800633c:	3630      	adds	r6, #48	; 0x30
 800633e:	f805 6b01 	strb.w	r6, [r5], #1
 8006342:	9e00      	ldr	r6, [sp, #0]
 8006344:	1bae      	subs	r6, r5, r6
 8006346:	42b7      	cmp	r7, r6
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	d134      	bne.n	80063b8 <_dtoa_r+0x708>
 800634e:	f7f9 ffbd 	bl	80002cc <__adddf3>
 8006352:	4642      	mov	r2, r8
 8006354:	464b      	mov	r3, r9
 8006356:	4606      	mov	r6, r0
 8006358:	460f      	mov	r7, r1
 800635a:	f7fa fbfd 	bl	8000b58 <__aeabi_dcmpgt>
 800635e:	b9c8      	cbnz	r0, 8006394 <_dtoa_r+0x6e4>
 8006360:	4642      	mov	r2, r8
 8006362:	464b      	mov	r3, r9
 8006364:	4630      	mov	r0, r6
 8006366:	4639      	mov	r1, r7
 8006368:	f7fa fbce 	bl	8000b08 <__aeabi_dcmpeq>
 800636c:	b110      	cbz	r0, 8006374 <_dtoa_r+0x6c4>
 800636e:	9b01      	ldr	r3, [sp, #4]
 8006370:	07db      	lsls	r3, r3, #31
 8006372:	d40f      	bmi.n	8006394 <_dtoa_r+0x6e4>
 8006374:	4651      	mov	r1, sl
 8006376:	4620      	mov	r0, r4
 8006378:	f000 fbcc 	bl	8006b14 <_Bfree>
 800637c:	2300      	movs	r3, #0
 800637e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006380:	702b      	strb	r3, [r5, #0]
 8006382:	f10b 0301 	add.w	r3, fp, #1
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800638a:	2b00      	cmp	r3, #0
 800638c:	f43f ace2 	beq.w	8005d54 <_dtoa_r+0xa4>
 8006390:	601d      	str	r5, [r3, #0]
 8006392:	e4df      	b.n	8005d54 <_dtoa_r+0xa4>
 8006394:	465f      	mov	r7, fp
 8006396:	462b      	mov	r3, r5
 8006398:	461d      	mov	r5, r3
 800639a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800639e:	2a39      	cmp	r2, #57	; 0x39
 80063a0:	d106      	bne.n	80063b0 <_dtoa_r+0x700>
 80063a2:	9a00      	ldr	r2, [sp, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d1f7      	bne.n	8006398 <_dtoa_r+0x6e8>
 80063a8:	9900      	ldr	r1, [sp, #0]
 80063aa:	2230      	movs	r2, #48	; 0x30
 80063ac:	3701      	adds	r7, #1
 80063ae:	700a      	strb	r2, [r1, #0]
 80063b0:	781a      	ldrb	r2, [r3, #0]
 80063b2:	3201      	adds	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e790      	b.n	80062da <_dtoa_r+0x62a>
 80063b8:	4ba3      	ldr	r3, [pc, #652]	; (8006648 <_dtoa_r+0x998>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	f7fa f93c 	bl	8000638 <__aeabi_dmul>
 80063c0:	2200      	movs	r2, #0
 80063c2:	2300      	movs	r3, #0
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	f7fa fb9e 	bl	8000b08 <__aeabi_dcmpeq>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d09e      	beq.n	800630e <_dtoa_r+0x65e>
 80063d0:	e7d0      	b.n	8006374 <_dtoa_r+0x6c4>
 80063d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d4:	2a00      	cmp	r2, #0
 80063d6:	f000 80ca 	beq.w	800656e <_dtoa_r+0x8be>
 80063da:	9a07      	ldr	r2, [sp, #28]
 80063dc:	2a01      	cmp	r2, #1
 80063de:	f300 80ad 	bgt.w	800653c <_dtoa_r+0x88c>
 80063e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	f000 80a5 	beq.w	8006534 <_dtoa_r+0x884>
 80063ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063ee:	9e08      	ldr	r6, [sp, #32]
 80063f0:	9d05      	ldr	r5, [sp, #20]
 80063f2:	9a05      	ldr	r2, [sp, #20]
 80063f4:	441a      	add	r2, r3
 80063f6:	9205      	str	r2, [sp, #20]
 80063f8:	9a06      	ldr	r2, [sp, #24]
 80063fa:	2101      	movs	r1, #1
 80063fc:	441a      	add	r2, r3
 80063fe:	4620      	mov	r0, r4
 8006400:	9206      	str	r2, [sp, #24]
 8006402:	f000 fc3d 	bl	8006c80 <__i2b>
 8006406:	4607      	mov	r7, r0
 8006408:	b165      	cbz	r5, 8006424 <_dtoa_r+0x774>
 800640a:	9b06      	ldr	r3, [sp, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	dd09      	ble.n	8006424 <_dtoa_r+0x774>
 8006410:	42ab      	cmp	r3, r5
 8006412:	9a05      	ldr	r2, [sp, #20]
 8006414:	bfa8      	it	ge
 8006416:	462b      	movge	r3, r5
 8006418:	1ad2      	subs	r2, r2, r3
 800641a:	9205      	str	r2, [sp, #20]
 800641c:	9a06      	ldr	r2, [sp, #24]
 800641e:	1aed      	subs	r5, r5, r3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	9306      	str	r3, [sp, #24]
 8006424:	9b08      	ldr	r3, [sp, #32]
 8006426:	b1f3      	cbz	r3, 8006466 <_dtoa_r+0x7b6>
 8006428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 80a3 	beq.w	8006576 <_dtoa_r+0x8c6>
 8006430:	2e00      	cmp	r6, #0
 8006432:	dd10      	ble.n	8006456 <_dtoa_r+0x7a6>
 8006434:	4639      	mov	r1, r7
 8006436:	4632      	mov	r2, r6
 8006438:	4620      	mov	r0, r4
 800643a:	f000 fce1 	bl	8006e00 <__pow5mult>
 800643e:	4652      	mov	r2, sl
 8006440:	4601      	mov	r1, r0
 8006442:	4607      	mov	r7, r0
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fc31 	bl	8006cac <__multiply>
 800644a:	4651      	mov	r1, sl
 800644c:	4680      	mov	r8, r0
 800644e:	4620      	mov	r0, r4
 8006450:	f000 fb60 	bl	8006b14 <_Bfree>
 8006454:	46c2      	mov	sl, r8
 8006456:	9b08      	ldr	r3, [sp, #32]
 8006458:	1b9a      	subs	r2, r3, r6
 800645a:	d004      	beq.n	8006466 <_dtoa_r+0x7b6>
 800645c:	4651      	mov	r1, sl
 800645e:	4620      	mov	r0, r4
 8006460:	f000 fcce 	bl	8006e00 <__pow5mult>
 8006464:	4682      	mov	sl, r0
 8006466:	2101      	movs	r1, #1
 8006468:	4620      	mov	r0, r4
 800646a:	f000 fc09 	bl	8006c80 <__i2b>
 800646e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006470:	2b00      	cmp	r3, #0
 8006472:	4606      	mov	r6, r0
 8006474:	f340 8081 	ble.w	800657a <_dtoa_r+0x8ca>
 8006478:	461a      	mov	r2, r3
 800647a:	4601      	mov	r1, r0
 800647c:	4620      	mov	r0, r4
 800647e:	f000 fcbf 	bl	8006e00 <__pow5mult>
 8006482:	9b07      	ldr	r3, [sp, #28]
 8006484:	2b01      	cmp	r3, #1
 8006486:	4606      	mov	r6, r0
 8006488:	dd7a      	ble.n	8006580 <_dtoa_r+0x8d0>
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	6933      	ldr	r3, [r6, #16]
 8006490:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006494:	6918      	ldr	r0, [r3, #16]
 8006496:	f000 fba5 	bl	8006be4 <__hi0bits>
 800649a:	f1c0 0020 	rsb	r0, r0, #32
 800649e:	9b06      	ldr	r3, [sp, #24]
 80064a0:	4418      	add	r0, r3
 80064a2:	f010 001f 	ands.w	r0, r0, #31
 80064a6:	f000 8094 	beq.w	80065d2 <_dtoa_r+0x922>
 80064aa:	f1c0 0320 	rsb	r3, r0, #32
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	f340 8085 	ble.w	80065be <_dtoa_r+0x90e>
 80064b4:	9b05      	ldr	r3, [sp, #20]
 80064b6:	f1c0 001c 	rsb	r0, r0, #28
 80064ba:	4403      	add	r3, r0
 80064bc:	9305      	str	r3, [sp, #20]
 80064be:	9b06      	ldr	r3, [sp, #24]
 80064c0:	4403      	add	r3, r0
 80064c2:	4405      	add	r5, r0
 80064c4:	9306      	str	r3, [sp, #24]
 80064c6:	9b05      	ldr	r3, [sp, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	dd05      	ble.n	80064d8 <_dtoa_r+0x828>
 80064cc:	4651      	mov	r1, sl
 80064ce:	461a      	mov	r2, r3
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 fcef 	bl	8006eb4 <__lshift>
 80064d6:	4682      	mov	sl, r0
 80064d8:	9b06      	ldr	r3, [sp, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	dd05      	ble.n	80064ea <_dtoa_r+0x83a>
 80064de:	4631      	mov	r1, r6
 80064e0:	461a      	mov	r2, r3
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 fce6 	bl	8006eb4 <__lshift>
 80064e8:	4606      	mov	r6, r0
 80064ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d072      	beq.n	80065d6 <_dtoa_r+0x926>
 80064f0:	4631      	mov	r1, r6
 80064f2:	4650      	mov	r0, sl
 80064f4:	f000 fd4a 	bl	8006f8c <__mcmp>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	da6c      	bge.n	80065d6 <_dtoa_r+0x926>
 80064fc:	2300      	movs	r3, #0
 80064fe:	4651      	mov	r1, sl
 8006500:	220a      	movs	r2, #10
 8006502:	4620      	mov	r0, r4
 8006504:	f000 fb28 	bl	8006b58 <__multadd>
 8006508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800650e:	4682      	mov	sl, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 81b0 	beq.w	8006876 <_dtoa_r+0xbc6>
 8006516:	2300      	movs	r3, #0
 8006518:	4639      	mov	r1, r7
 800651a:	220a      	movs	r2, #10
 800651c:	4620      	mov	r0, r4
 800651e:	f000 fb1b 	bl	8006b58 <__multadd>
 8006522:	9b01      	ldr	r3, [sp, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	4607      	mov	r7, r0
 8006528:	f300 8096 	bgt.w	8006658 <_dtoa_r+0x9a8>
 800652c:	9b07      	ldr	r3, [sp, #28]
 800652e:	2b02      	cmp	r3, #2
 8006530:	dc59      	bgt.n	80065e6 <_dtoa_r+0x936>
 8006532:	e091      	b.n	8006658 <_dtoa_r+0x9a8>
 8006534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800653a:	e758      	b.n	80063ee <_dtoa_r+0x73e>
 800653c:	9b04      	ldr	r3, [sp, #16]
 800653e:	1e5e      	subs	r6, r3, #1
 8006540:	9b08      	ldr	r3, [sp, #32]
 8006542:	42b3      	cmp	r3, r6
 8006544:	bfbf      	itttt	lt
 8006546:	9b08      	ldrlt	r3, [sp, #32]
 8006548:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800654a:	9608      	strlt	r6, [sp, #32]
 800654c:	1af3      	sublt	r3, r6, r3
 800654e:	bfb4      	ite	lt
 8006550:	18d2      	addlt	r2, r2, r3
 8006552:	1b9e      	subge	r6, r3, r6
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	bfbc      	itt	lt
 8006558:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800655a:	2600      	movlt	r6, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfb7      	itett	lt
 8006560:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006564:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006568:	1a9d      	sublt	r5, r3, r2
 800656a:	2300      	movlt	r3, #0
 800656c:	e741      	b.n	80063f2 <_dtoa_r+0x742>
 800656e:	9e08      	ldr	r6, [sp, #32]
 8006570:	9d05      	ldr	r5, [sp, #20]
 8006572:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006574:	e748      	b.n	8006408 <_dtoa_r+0x758>
 8006576:	9a08      	ldr	r2, [sp, #32]
 8006578:	e770      	b.n	800645c <_dtoa_r+0x7ac>
 800657a:	9b07      	ldr	r3, [sp, #28]
 800657c:	2b01      	cmp	r3, #1
 800657e:	dc19      	bgt.n	80065b4 <_dtoa_r+0x904>
 8006580:	9b02      	ldr	r3, [sp, #8]
 8006582:	b9bb      	cbnz	r3, 80065b4 <_dtoa_r+0x904>
 8006584:	9b03      	ldr	r3, [sp, #12]
 8006586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800658a:	b99b      	cbnz	r3, 80065b4 <_dtoa_r+0x904>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006592:	0d1b      	lsrs	r3, r3, #20
 8006594:	051b      	lsls	r3, r3, #20
 8006596:	b183      	cbz	r3, 80065ba <_dtoa_r+0x90a>
 8006598:	9b05      	ldr	r3, [sp, #20]
 800659a:	3301      	adds	r3, #1
 800659c:	9305      	str	r3, [sp, #20]
 800659e:	9b06      	ldr	r3, [sp, #24]
 80065a0:	3301      	adds	r3, #1
 80065a2:	9306      	str	r3, [sp, #24]
 80065a4:	f04f 0801 	mov.w	r8, #1
 80065a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f47f af6f 	bne.w	800648e <_dtoa_r+0x7de>
 80065b0:	2001      	movs	r0, #1
 80065b2:	e774      	b.n	800649e <_dtoa_r+0x7ee>
 80065b4:	f04f 0800 	mov.w	r8, #0
 80065b8:	e7f6      	b.n	80065a8 <_dtoa_r+0x8f8>
 80065ba:	4698      	mov	r8, r3
 80065bc:	e7f4      	b.n	80065a8 <_dtoa_r+0x8f8>
 80065be:	d082      	beq.n	80064c6 <_dtoa_r+0x816>
 80065c0:	9a05      	ldr	r2, [sp, #20]
 80065c2:	331c      	adds	r3, #28
 80065c4:	441a      	add	r2, r3
 80065c6:	9205      	str	r2, [sp, #20]
 80065c8:	9a06      	ldr	r2, [sp, #24]
 80065ca:	441a      	add	r2, r3
 80065cc:	441d      	add	r5, r3
 80065ce:	9206      	str	r2, [sp, #24]
 80065d0:	e779      	b.n	80064c6 <_dtoa_r+0x816>
 80065d2:	4603      	mov	r3, r0
 80065d4:	e7f4      	b.n	80065c0 <_dtoa_r+0x910>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	dc37      	bgt.n	800664c <_dtoa_r+0x99c>
 80065dc:	9b07      	ldr	r3, [sp, #28]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	dd34      	ble.n	800664c <_dtoa_r+0x99c>
 80065e2:	9b04      	ldr	r3, [sp, #16]
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	b963      	cbnz	r3, 8006604 <_dtoa_r+0x954>
 80065ea:	4631      	mov	r1, r6
 80065ec:	2205      	movs	r2, #5
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 fab2 	bl	8006b58 <__multadd>
 80065f4:	4601      	mov	r1, r0
 80065f6:	4606      	mov	r6, r0
 80065f8:	4650      	mov	r0, sl
 80065fa:	f000 fcc7 	bl	8006f8c <__mcmp>
 80065fe:	2800      	cmp	r0, #0
 8006600:	f73f adbb 	bgt.w	800617a <_dtoa_r+0x4ca>
 8006604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006606:	9d00      	ldr	r5, [sp, #0]
 8006608:	ea6f 0b03 	mvn.w	fp, r3
 800660c:	f04f 0800 	mov.w	r8, #0
 8006610:	4631      	mov	r1, r6
 8006612:	4620      	mov	r0, r4
 8006614:	f000 fa7e 	bl	8006b14 <_Bfree>
 8006618:	2f00      	cmp	r7, #0
 800661a:	f43f aeab 	beq.w	8006374 <_dtoa_r+0x6c4>
 800661e:	f1b8 0f00 	cmp.w	r8, #0
 8006622:	d005      	beq.n	8006630 <_dtoa_r+0x980>
 8006624:	45b8      	cmp	r8, r7
 8006626:	d003      	beq.n	8006630 <_dtoa_r+0x980>
 8006628:	4641      	mov	r1, r8
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fa72 	bl	8006b14 <_Bfree>
 8006630:	4639      	mov	r1, r7
 8006632:	4620      	mov	r0, r4
 8006634:	f000 fa6e 	bl	8006b14 <_Bfree>
 8006638:	e69c      	b.n	8006374 <_dtoa_r+0x6c4>
 800663a:	2600      	movs	r6, #0
 800663c:	4637      	mov	r7, r6
 800663e:	e7e1      	b.n	8006604 <_dtoa_r+0x954>
 8006640:	46bb      	mov	fp, r7
 8006642:	4637      	mov	r7, r6
 8006644:	e599      	b.n	800617a <_dtoa_r+0x4ca>
 8006646:	bf00      	nop
 8006648:	40240000 	.word	0x40240000
 800664c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80c8 	beq.w	80067e4 <_dtoa_r+0xb34>
 8006654:	9b04      	ldr	r3, [sp, #16]
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	2d00      	cmp	r5, #0
 800665a:	dd05      	ble.n	8006668 <_dtoa_r+0x9b8>
 800665c:	4639      	mov	r1, r7
 800665e:	462a      	mov	r2, r5
 8006660:	4620      	mov	r0, r4
 8006662:	f000 fc27 	bl	8006eb4 <__lshift>
 8006666:	4607      	mov	r7, r0
 8006668:	f1b8 0f00 	cmp.w	r8, #0
 800666c:	d05b      	beq.n	8006726 <_dtoa_r+0xa76>
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fa0f 	bl	8006a94 <_Balloc>
 8006676:	4605      	mov	r5, r0
 8006678:	b928      	cbnz	r0, 8006686 <_dtoa_r+0x9d6>
 800667a:	4b83      	ldr	r3, [pc, #524]	; (8006888 <_dtoa_r+0xbd8>)
 800667c:	4602      	mov	r2, r0
 800667e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006682:	f7ff bb2e 	b.w	8005ce2 <_dtoa_r+0x32>
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	3202      	adds	r2, #2
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	f107 010c 	add.w	r1, r7, #12
 8006690:	300c      	adds	r0, #12
 8006692:	f001 f801 	bl	8007698 <memcpy>
 8006696:	2201      	movs	r2, #1
 8006698:	4629      	mov	r1, r5
 800669a:	4620      	mov	r0, r4
 800669c:	f000 fc0a 	bl	8006eb4 <__lshift>
 80066a0:	9b00      	ldr	r3, [sp, #0]
 80066a2:	3301      	adds	r3, #1
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066aa:	4413      	add	r3, r2
 80066ac:	9308      	str	r3, [sp, #32]
 80066ae:	9b02      	ldr	r3, [sp, #8]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	46b8      	mov	r8, r7
 80066b6:	9306      	str	r3, [sp, #24]
 80066b8:	4607      	mov	r7, r0
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	4631      	mov	r1, r6
 80066be:	3b01      	subs	r3, #1
 80066c0:	4650      	mov	r0, sl
 80066c2:	9301      	str	r3, [sp, #4]
 80066c4:	f7ff fa69 	bl	8005b9a <quorem>
 80066c8:	4641      	mov	r1, r8
 80066ca:	9002      	str	r0, [sp, #8]
 80066cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066d0:	4650      	mov	r0, sl
 80066d2:	f000 fc5b 	bl	8006f8c <__mcmp>
 80066d6:	463a      	mov	r2, r7
 80066d8:	9005      	str	r0, [sp, #20]
 80066da:	4631      	mov	r1, r6
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 fc71 	bl	8006fc4 <__mdiff>
 80066e2:	68c2      	ldr	r2, [r0, #12]
 80066e4:	4605      	mov	r5, r0
 80066e6:	bb02      	cbnz	r2, 800672a <_dtoa_r+0xa7a>
 80066e8:	4601      	mov	r1, r0
 80066ea:	4650      	mov	r0, sl
 80066ec:	f000 fc4e 	bl	8006f8c <__mcmp>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4629      	mov	r1, r5
 80066f4:	4620      	mov	r0, r4
 80066f6:	9209      	str	r2, [sp, #36]	; 0x24
 80066f8:	f000 fa0c 	bl	8006b14 <_Bfree>
 80066fc:	9b07      	ldr	r3, [sp, #28]
 80066fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006700:	9d04      	ldr	r5, [sp, #16]
 8006702:	ea43 0102 	orr.w	r1, r3, r2
 8006706:	9b06      	ldr	r3, [sp, #24]
 8006708:	4319      	orrs	r1, r3
 800670a:	d110      	bne.n	800672e <_dtoa_r+0xa7e>
 800670c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006710:	d029      	beq.n	8006766 <_dtoa_r+0xab6>
 8006712:	9b05      	ldr	r3, [sp, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	dd02      	ble.n	800671e <_dtoa_r+0xa6e>
 8006718:	9b02      	ldr	r3, [sp, #8]
 800671a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	f883 9000 	strb.w	r9, [r3]
 8006724:	e774      	b.n	8006610 <_dtoa_r+0x960>
 8006726:	4638      	mov	r0, r7
 8006728:	e7ba      	b.n	80066a0 <_dtoa_r+0x9f0>
 800672a:	2201      	movs	r2, #1
 800672c:	e7e1      	b.n	80066f2 <_dtoa_r+0xa42>
 800672e:	9b05      	ldr	r3, [sp, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	db04      	blt.n	800673e <_dtoa_r+0xa8e>
 8006734:	9907      	ldr	r1, [sp, #28]
 8006736:	430b      	orrs	r3, r1
 8006738:	9906      	ldr	r1, [sp, #24]
 800673a:	430b      	orrs	r3, r1
 800673c:	d120      	bne.n	8006780 <_dtoa_r+0xad0>
 800673e:	2a00      	cmp	r2, #0
 8006740:	dded      	ble.n	800671e <_dtoa_r+0xa6e>
 8006742:	4651      	mov	r1, sl
 8006744:	2201      	movs	r2, #1
 8006746:	4620      	mov	r0, r4
 8006748:	f000 fbb4 	bl	8006eb4 <__lshift>
 800674c:	4631      	mov	r1, r6
 800674e:	4682      	mov	sl, r0
 8006750:	f000 fc1c 	bl	8006f8c <__mcmp>
 8006754:	2800      	cmp	r0, #0
 8006756:	dc03      	bgt.n	8006760 <_dtoa_r+0xab0>
 8006758:	d1e1      	bne.n	800671e <_dtoa_r+0xa6e>
 800675a:	f019 0f01 	tst.w	r9, #1
 800675e:	d0de      	beq.n	800671e <_dtoa_r+0xa6e>
 8006760:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006764:	d1d8      	bne.n	8006718 <_dtoa_r+0xa68>
 8006766:	9a01      	ldr	r2, [sp, #4]
 8006768:	2339      	movs	r3, #57	; 0x39
 800676a:	7013      	strb	r3, [r2, #0]
 800676c:	462b      	mov	r3, r5
 800676e:	461d      	mov	r5, r3
 8006770:	3b01      	subs	r3, #1
 8006772:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006776:	2a39      	cmp	r2, #57	; 0x39
 8006778:	d06c      	beq.n	8006854 <_dtoa_r+0xba4>
 800677a:	3201      	adds	r2, #1
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e747      	b.n	8006610 <_dtoa_r+0x960>
 8006780:	2a00      	cmp	r2, #0
 8006782:	dd07      	ble.n	8006794 <_dtoa_r+0xae4>
 8006784:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006788:	d0ed      	beq.n	8006766 <_dtoa_r+0xab6>
 800678a:	9a01      	ldr	r2, [sp, #4]
 800678c:	f109 0301 	add.w	r3, r9, #1
 8006790:	7013      	strb	r3, [r2, #0]
 8006792:	e73d      	b.n	8006610 <_dtoa_r+0x960>
 8006794:	9b04      	ldr	r3, [sp, #16]
 8006796:	9a08      	ldr	r2, [sp, #32]
 8006798:	f803 9c01 	strb.w	r9, [r3, #-1]
 800679c:	4293      	cmp	r3, r2
 800679e:	d043      	beq.n	8006828 <_dtoa_r+0xb78>
 80067a0:	4651      	mov	r1, sl
 80067a2:	2300      	movs	r3, #0
 80067a4:	220a      	movs	r2, #10
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 f9d6 	bl	8006b58 <__multadd>
 80067ac:	45b8      	cmp	r8, r7
 80067ae:	4682      	mov	sl, r0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	f04f 020a 	mov.w	r2, #10
 80067b8:	4641      	mov	r1, r8
 80067ba:	4620      	mov	r0, r4
 80067bc:	d107      	bne.n	80067ce <_dtoa_r+0xb1e>
 80067be:	f000 f9cb 	bl	8006b58 <__multadd>
 80067c2:	4680      	mov	r8, r0
 80067c4:	4607      	mov	r7, r0
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	3301      	adds	r3, #1
 80067ca:	9304      	str	r3, [sp, #16]
 80067cc:	e775      	b.n	80066ba <_dtoa_r+0xa0a>
 80067ce:	f000 f9c3 	bl	8006b58 <__multadd>
 80067d2:	4639      	mov	r1, r7
 80067d4:	4680      	mov	r8, r0
 80067d6:	2300      	movs	r3, #0
 80067d8:	220a      	movs	r2, #10
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 f9bc 	bl	8006b58 <__multadd>
 80067e0:	4607      	mov	r7, r0
 80067e2:	e7f0      	b.n	80067c6 <_dtoa_r+0xb16>
 80067e4:	9b04      	ldr	r3, [sp, #16]
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	9d00      	ldr	r5, [sp, #0]
 80067ea:	4631      	mov	r1, r6
 80067ec:	4650      	mov	r0, sl
 80067ee:	f7ff f9d4 	bl	8005b9a <quorem>
 80067f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067f6:	9b00      	ldr	r3, [sp, #0]
 80067f8:	f805 9b01 	strb.w	r9, [r5], #1
 80067fc:	1aea      	subs	r2, r5, r3
 80067fe:	9b01      	ldr	r3, [sp, #4]
 8006800:	4293      	cmp	r3, r2
 8006802:	dd07      	ble.n	8006814 <_dtoa_r+0xb64>
 8006804:	4651      	mov	r1, sl
 8006806:	2300      	movs	r3, #0
 8006808:	220a      	movs	r2, #10
 800680a:	4620      	mov	r0, r4
 800680c:	f000 f9a4 	bl	8006b58 <__multadd>
 8006810:	4682      	mov	sl, r0
 8006812:	e7ea      	b.n	80067ea <_dtoa_r+0xb3a>
 8006814:	9b01      	ldr	r3, [sp, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfc8      	it	gt
 800681a:	461d      	movgt	r5, r3
 800681c:	9b00      	ldr	r3, [sp, #0]
 800681e:	bfd8      	it	le
 8006820:	2501      	movle	r5, #1
 8006822:	441d      	add	r5, r3
 8006824:	f04f 0800 	mov.w	r8, #0
 8006828:	4651      	mov	r1, sl
 800682a:	2201      	movs	r2, #1
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fb41 	bl	8006eb4 <__lshift>
 8006832:	4631      	mov	r1, r6
 8006834:	4682      	mov	sl, r0
 8006836:	f000 fba9 	bl	8006f8c <__mcmp>
 800683a:	2800      	cmp	r0, #0
 800683c:	dc96      	bgt.n	800676c <_dtoa_r+0xabc>
 800683e:	d102      	bne.n	8006846 <_dtoa_r+0xb96>
 8006840:	f019 0f01 	tst.w	r9, #1
 8006844:	d192      	bne.n	800676c <_dtoa_r+0xabc>
 8006846:	462b      	mov	r3, r5
 8006848:	461d      	mov	r5, r3
 800684a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800684e:	2a30      	cmp	r2, #48	; 0x30
 8006850:	d0fa      	beq.n	8006848 <_dtoa_r+0xb98>
 8006852:	e6dd      	b.n	8006610 <_dtoa_r+0x960>
 8006854:	9a00      	ldr	r2, [sp, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d189      	bne.n	800676e <_dtoa_r+0xabe>
 800685a:	f10b 0b01 	add.w	fp, fp, #1
 800685e:	2331      	movs	r3, #49	; 0x31
 8006860:	e796      	b.n	8006790 <_dtoa_r+0xae0>
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <_dtoa_r+0xbdc>)
 8006864:	f7ff ba99 	b.w	8005d9a <_dtoa_r+0xea>
 8006868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800686a:	2b00      	cmp	r3, #0
 800686c:	f47f aa6d 	bne.w	8005d4a <_dtoa_r+0x9a>
 8006870:	4b07      	ldr	r3, [pc, #28]	; (8006890 <_dtoa_r+0xbe0>)
 8006872:	f7ff ba92 	b.w	8005d9a <_dtoa_r+0xea>
 8006876:	9b01      	ldr	r3, [sp, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	dcb5      	bgt.n	80067e8 <_dtoa_r+0xb38>
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	2b02      	cmp	r3, #2
 8006880:	f73f aeb1 	bgt.w	80065e6 <_dtoa_r+0x936>
 8006884:	e7b0      	b.n	80067e8 <_dtoa_r+0xb38>
 8006886:	bf00      	nop
 8006888:	08007fcc 	.word	0x08007fcc
 800688c:	08007f2c 	.word	0x08007f2c
 8006890:	08007f50 	.word	0x08007f50

08006894 <_free_r>:
 8006894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006896:	2900      	cmp	r1, #0
 8006898:	d044      	beq.n	8006924 <_free_r+0x90>
 800689a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800689e:	9001      	str	r0, [sp, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f1a1 0404 	sub.w	r4, r1, #4
 80068a6:	bfb8      	it	lt
 80068a8:	18e4      	addlt	r4, r4, r3
 80068aa:	f000 f8e7 	bl	8006a7c <__malloc_lock>
 80068ae:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <_free_r+0x94>)
 80068b0:	9801      	ldr	r0, [sp, #4]
 80068b2:	6813      	ldr	r3, [r2, #0]
 80068b4:	b933      	cbnz	r3, 80068c4 <_free_r+0x30>
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	6014      	str	r4, [r2, #0]
 80068ba:	b003      	add	sp, #12
 80068bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068c0:	f000 b8e2 	b.w	8006a88 <__malloc_unlock>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d908      	bls.n	80068da <_free_r+0x46>
 80068c8:	6825      	ldr	r5, [r4, #0]
 80068ca:	1961      	adds	r1, r4, r5
 80068cc:	428b      	cmp	r3, r1
 80068ce:	bf01      	itttt	eq
 80068d0:	6819      	ldreq	r1, [r3, #0]
 80068d2:	685b      	ldreq	r3, [r3, #4]
 80068d4:	1949      	addeq	r1, r1, r5
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	e7ed      	b.n	80068b6 <_free_r+0x22>
 80068da:	461a      	mov	r2, r3
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b10b      	cbz	r3, 80068e4 <_free_r+0x50>
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d9fa      	bls.n	80068da <_free_r+0x46>
 80068e4:	6811      	ldr	r1, [r2, #0]
 80068e6:	1855      	adds	r5, r2, r1
 80068e8:	42a5      	cmp	r5, r4
 80068ea:	d10b      	bne.n	8006904 <_free_r+0x70>
 80068ec:	6824      	ldr	r4, [r4, #0]
 80068ee:	4421      	add	r1, r4
 80068f0:	1854      	adds	r4, r2, r1
 80068f2:	42a3      	cmp	r3, r4
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	d1e0      	bne.n	80068ba <_free_r+0x26>
 80068f8:	681c      	ldr	r4, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	6053      	str	r3, [r2, #4]
 80068fe:	440c      	add	r4, r1
 8006900:	6014      	str	r4, [r2, #0]
 8006902:	e7da      	b.n	80068ba <_free_r+0x26>
 8006904:	d902      	bls.n	800690c <_free_r+0x78>
 8006906:	230c      	movs	r3, #12
 8006908:	6003      	str	r3, [r0, #0]
 800690a:	e7d6      	b.n	80068ba <_free_r+0x26>
 800690c:	6825      	ldr	r5, [r4, #0]
 800690e:	1961      	adds	r1, r4, r5
 8006910:	428b      	cmp	r3, r1
 8006912:	bf04      	itt	eq
 8006914:	6819      	ldreq	r1, [r3, #0]
 8006916:	685b      	ldreq	r3, [r3, #4]
 8006918:	6063      	str	r3, [r4, #4]
 800691a:	bf04      	itt	eq
 800691c:	1949      	addeq	r1, r1, r5
 800691e:	6021      	streq	r1, [r4, #0]
 8006920:	6054      	str	r4, [r2, #4]
 8006922:	e7ca      	b.n	80068ba <_free_r+0x26>
 8006924:	b003      	add	sp, #12
 8006926:	bd30      	pop	{r4, r5, pc}
 8006928:	20000730 	.word	0x20000730

0800692c <malloc>:
 800692c:	4b02      	ldr	r3, [pc, #8]	; (8006938 <malloc+0xc>)
 800692e:	4601      	mov	r1, r0
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	f000 b823 	b.w	800697c <_malloc_r>
 8006936:	bf00      	nop
 8006938:	20000064 	.word	0x20000064

0800693c <sbrk_aligned>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4e0e      	ldr	r6, [pc, #56]	; (8006978 <sbrk_aligned+0x3c>)
 8006940:	460c      	mov	r4, r1
 8006942:	6831      	ldr	r1, [r6, #0]
 8006944:	4605      	mov	r5, r0
 8006946:	b911      	cbnz	r1, 800694e <sbrk_aligned+0x12>
 8006948:	f000 fe96 	bl	8007678 <_sbrk_r>
 800694c:	6030      	str	r0, [r6, #0]
 800694e:	4621      	mov	r1, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f000 fe91 	bl	8007678 <_sbrk_r>
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	d00a      	beq.n	8006970 <sbrk_aligned+0x34>
 800695a:	1cc4      	adds	r4, r0, #3
 800695c:	f024 0403 	bic.w	r4, r4, #3
 8006960:	42a0      	cmp	r0, r4
 8006962:	d007      	beq.n	8006974 <sbrk_aligned+0x38>
 8006964:	1a21      	subs	r1, r4, r0
 8006966:	4628      	mov	r0, r5
 8006968:	f000 fe86 	bl	8007678 <_sbrk_r>
 800696c:	3001      	adds	r0, #1
 800696e:	d101      	bne.n	8006974 <sbrk_aligned+0x38>
 8006970:	f04f 34ff 	mov.w	r4, #4294967295
 8006974:	4620      	mov	r0, r4
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	20000734 	.word	0x20000734

0800697c <_malloc_r>:
 800697c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006980:	1ccd      	adds	r5, r1, #3
 8006982:	f025 0503 	bic.w	r5, r5, #3
 8006986:	3508      	adds	r5, #8
 8006988:	2d0c      	cmp	r5, #12
 800698a:	bf38      	it	cc
 800698c:	250c      	movcc	r5, #12
 800698e:	2d00      	cmp	r5, #0
 8006990:	4607      	mov	r7, r0
 8006992:	db01      	blt.n	8006998 <_malloc_r+0x1c>
 8006994:	42a9      	cmp	r1, r5
 8006996:	d905      	bls.n	80069a4 <_malloc_r+0x28>
 8006998:	230c      	movs	r3, #12
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	2600      	movs	r6, #0
 800699e:	4630      	mov	r0, r6
 80069a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a78 <_malloc_r+0xfc>
 80069a8:	f000 f868 	bl	8006a7c <__malloc_lock>
 80069ac:	f8d8 3000 	ldr.w	r3, [r8]
 80069b0:	461c      	mov	r4, r3
 80069b2:	bb5c      	cbnz	r4, 8006a0c <_malloc_r+0x90>
 80069b4:	4629      	mov	r1, r5
 80069b6:	4638      	mov	r0, r7
 80069b8:	f7ff ffc0 	bl	800693c <sbrk_aligned>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	4604      	mov	r4, r0
 80069c0:	d155      	bne.n	8006a6e <_malloc_r+0xf2>
 80069c2:	f8d8 4000 	ldr.w	r4, [r8]
 80069c6:	4626      	mov	r6, r4
 80069c8:	2e00      	cmp	r6, #0
 80069ca:	d145      	bne.n	8006a58 <_malloc_r+0xdc>
 80069cc:	2c00      	cmp	r4, #0
 80069ce:	d048      	beq.n	8006a62 <_malloc_r+0xe6>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	4631      	mov	r1, r6
 80069d4:	4638      	mov	r0, r7
 80069d6:	eb04 0903 	add.w	r9, r4, r3
 80069da:	f000 fe4d 	bl	8007678 <_sbrk_r>
 80069de:	4581      	cmp	r9, r0
 80069e0:	d13f      	bne.n	8006a62 <_malloc_r+0xe6>
 80069e2:	6821      	ldr	r1, [r4, #0]
 80069e4:	1a6d      	subs	r5, r5, r1
 80069e6:	4629      	mov	r1, r5
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7ff ffa7 	bl	800693c <sbrk_aligned>
 80069ee:	3001      	adds	r0, #1
 80069f0:	d037      	beq.n	8006a62 <_malloc_r+0xe6>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	442b      	add	r3, r5
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	f8d8 3000 	ldr.w	r3, [r8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d038      	beq.n	8006a72 <_malloc_r+0xf6>
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	42a2      	cmp	r2, r4
 8006a04:	d12b      	bne.n	8006a5e <_malloc_r+0xe2>
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]
 8006a0a:	e00f      	b.n	8006a2c <_malloc_r+0xb0>
 8006a0c:	6822      	ldr	r2, [r4, #0]
 8006a0e:	1b52      	subs	r2, r2, r5
 8006a10:	d41f      	bmi.n	8006a52 <_malloc_r+0xd6>
 8006a12:	2a0b      	cmp	r2, #11
 8006a14:	d917      	bls.n	8006a46 <_malloc_r+0xca>
 8006a16:	1961      	adds	r1, r4, r5
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	6025      	str	r5, [r4, #0]
 8006a1c:	bf18      	it	ne
 8006a1e:	6059      	strne	r1, [r3, #4]
 8006a20:	6863      	ldr	r3, [r4, #4]
 8006a22:	bf08      	it	eq
 8006a24:	f8c8 1000 	streq.w	r1, [r8]
 8006a28:	5162      	str	r2, [r4, r5]
 8006a2a:	604b      	str	r3, [r1, #4]
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f104 060b 	add.w	r6, r4, #11
 8006a32:	f000 f829 	bl	8006a88 <__malloc_unlock>
 8006a36:	f026 0607 	bic.w	r6, r6, #7
 8006a3a:	1d23      	adds	r3, r4, #4
 8006a3c:	1af2      	subs	r2, r6, r3
 8006a3e:	d0ae      	beq.n	800699e <_malloc_r+0x22>
 8006a40:	1b9b      	subs	r3, r3, r6
 8006a42:	50a3      	str	r3, [r4, r2]
 8006a44:	e7ab      	b.n	800699e <_malloc_r+0x22>
 8006a46:	42a3      	cmp	r3, r4
 8006a48:	6862      	ldr	r2, [r4, #4]
 8006a4a:	d1dd      	bne.n	8006a08 <_malloc_r+0x8c>
 8006a4c:	f8c8 2000 	str.w	r2, [r8]
 8006a50:	e7ec      	b.n	8006a2c <_malloc_r+0xb0>
 8006a52:	4623      	mov	r3, r4
 8006a54:	6864      	ldr	r4, [r4, #4]
 8006a56:	e7ac      	b.n	80069b2 <_malloc_r+0x36>
 8006a58:	4634      	mov	r4, r6
 8006a5a:	6876      	ldr	r6, [r6, #4]
 8006a5c:	e7b4      	b.n	80069c8 <_malloc_r+0x4c>
 8006a5e:	4613      	mov	r3, r2
 8006a60:	e7cc      	b.n	80069fc <_malloc_r+0x80>
 8006a62:	230c      	movs	r3, #12
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	4638      	mov	r0, r7
 8006a68:	f000 f80e 	bl	8006a88 <__malloc_unlock>
 8006a6c:	e797      	b.n	800699e <_malloc_r+0x22>
 8006a6e:	6025      	str	r5, [r4, #0]
 8006a70:	e7dc      	b.n	8006a2c <_malloc_r+0xb0>
 8006a72:	605b      	str	r3, [r3, #4]
 8006a74:	deff      	udf	#255	; 0xff
 8006a76:	bf00      	nop
 8006a78:	20000730 	.word	0x20000730

08006a7c <__malloc_lock>:
 8006a7c:	4801      	ldr	r0, [pc, #4]	; (8006a84 <__malloc_lock+0x8>)
 8006a7e:	f7ff b88a 	b.w	8005b96 <__retarget_lock_acquire_recursive>
 8006a82:	bf00      	nop
 8006a84:	2000072c 	.word	0x2000072c

08006a88 <__malloc_unlock>:
 8006a88:	4801      	ldr	r0, [pc, #4]	; (8006a90 <__malloc_unlock+0x8>)
 8006a8a:	f7ff b885 	b.w	8005b98 <__retarget_lock_release_recursive>
 8006a8e:	bf00      	nop
 8006a90:	2000072c 	.word	0x2000072c

08006a94 <_Balloc>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	69c6      	ldr	r6, [r0, #28]
 8006a98:	4604      	mov	r4, r0
 8006a9a:	460d      	mov	r5, r1
 8006a9c:	b976      	cbnz	r6, 8006abc <_Balloc+0x28>
 8006a9e:	2010      	movs	r0, #16
 8006aa0:	f7ff ff44 	bl	800692c <malloc>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	61e0      	str	r0, [r4, #28]
 8006aa8:	b920      	cbnz	r0, 8006ab4 <_Balloc+0x20>
 8006aaa:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <_Balloc+0x78>)
 8006aac:	4818      	ldr	r0, [pc, #96]	; (8006b10 <_Balloc+0x7c>)
 8006aae:	216b      	movs	r1, #107	; 0x6b
 8006ab0:	f000 fe00 	bl	80076b4 <__assert_func>
 8006ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ab8:	6006      	str	r6, [r0, #0]
 8006aba:	60c6      	str	r6, [r0, #12]
 8006abc:	69e6      	ldr	r6, [r4, #28]
 8006abe:	68f3      	ldr	r3, [r6, #12]
 8006ac0:	b183      	cbz	r3, 8006ae4 <_Balloc+0x50>
 8006ac2:	69e3      	ldr	r3, [r4, #28]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006aca:	b9b8      	cbnz	r0, 8006afc <_Balloc+0x68>
 8006acc:	2101      	movs	r1, #1
 8006ace:	fa01 f605 	lsl.w	r6, r1, r5
 8006ad2:	1d72      	adds	r2, r6, #5
 8006ad4:	0092      	lsls	r2, r2, #2
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f000 fe0a 	bl	80076f0 <_calloc_r>
 8006adc:	b160      	cbz	r0, 8006af8 <_Balloc+0x64>
 8006ade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ae2:	e00e      	b.n	8006b02 <_Balloc+0x6e>
 8006ae4:	2221      	movs	r2, #33	; 0x21
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fe01 	bl	80076f0 <_calloc_r>
 8006aee:	69e3      	ldr	r3, [r4, #28]
 8006af0:	60f0      	str	r0, [r6, #12]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e4      	bne.n	8006ac2 <_Balloc+0x2e>
 8006af8:	2000      	movs	r0, #0
 8006afa:	bd70      	pop	{r4, r5, r6, pc}
 8006afc:	6802      	ldr	r2, [r0, #0]
 8006afe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b02:	2300      	movs	r3, #0
 8006b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b08:	e7f7      	b.n	8006afa <_Balloc+0x66>
 8006b0a:	bf00      	nop
 8006b0c:	08007f5d 	.word	0x08007f5d
 8006b10:	08007fdd 	.word	0x08007fdd

08006b14 <_Bfree>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	69c6      	ldr	r6, [r0, #28]
 8006b18:	4605      	mov	r5, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	b976      	cbnz	r6, 8006b3c <_Bfree+0x28>
 8006b1e:	2010      	movs	r0, #16
 8006b20:	f7ff ff04 	bl	800692c <malloc>
 8006b24:	4602      	mov	r2, r0
 8006b26:	61e8      	str	r0, [r5, #28]
 8006b28:	b920      	cbnz	r0, 8006b34 <_Bfree+0x20>
 8006b2a:	4b09      	ldr	r3, [pc, #36]	; (8006b50 <_Bfree+0x3c>)
 8006b2c:	4809      	ldr	r0, [pc, #36]	; (8006b54 <_Bfree+0x40>)
 8006b2e:	218f      	movs	r1, #143	; 0x8f
 8006b30:	f000 fdc0 	bl	80076b4 <__assert_func>
 8006b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b38:	6006      	str	r6, [r0, #0]
 8006b3a:	60c6      	str	r6, [r0, #12]
 8006b3c:	b13c      	cbz	r4, 8006b4e <_Bfree+0x3a>
 8006b3e:	69eb      	ldr	r3, [r5, #28]
 8006b40:	6862      	ldr	r2, [r4, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b48:	6021      	str	r1, [r4, #0]
 8006b4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	08007f5d 	.word	0x08007f5d
 8006b54:	08007fdd 	.word	0x08007fdd

08006b58 <__multadd>:
 8006b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b5c:	690d      	ldr	r5, [r1, #16]
 8006b5e:	4607      	mov	r7, r0
 8006b60:	460c      	mov	r4, r1
 8006b62:	461e      	mov	r6, r3
 8006b64:	f101 0c14 	add.w	ip, r1, #20
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f8dc 3000 	ldr.w	r3, [ip]
 8006b6e:	b299      	uxth	r1, r3
 8006b70:	fb02 6101 	mla	r1, r2, r1, r6
 8006b74:	0c1e      	lsrs	r6, r3, #16
 8006b76:	0c0b      	lsrs	r3, r1, #16
 8006b78:	fb02 3306 	mla	r3, r2, r6, r3
 8006b7c:	b289      	uxth	r1, r1
 8006b7e:	3001      	adds	r0, #1
 8006b80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b84:	4285      	cmp	r5, r0
 8006b86:	f84c 1b04 	str.w	r1, [ip], #4
 8006b8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b8e:	dcec      	bgt.n	8006b6a <__multadd+0x12>
 8006b90:	b30e      	cbz	r6, 8006bd6 <__multadd+0x7e>
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	42ab      	cmp	r3, r5
 8006b96:	dc19      	bgt.n	8006bcc <__multadd+0x74>
 8006b98:	6861      	ldr	r1, [r4, #4]
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	3101      	adds	r1, #1
 8006b9e:	f7ff ff79 	bl	8006a94 <_Balloc>
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	b928      	cbnz	r0, 8006bb2 <__multadd+0x5a>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <__multadd+0x84>)
 8006baa:	480d      	ldr	r0, [pc, #52]	; (8006be0 <__multadd+0x88>)
 8006bac:	21ba      	movs	r1, #186	; 0xba
 8006bae:	f000 fd81 	bl	80076b4 <__assert_func>
 8006bb2:	6922      	ldr	r2, [r4, #16]
 8006bb4:	3202      	adds	r2, #2
 8006bb6:	f104 010c 	add.w	r1, r4, #12
 8006bba:	0092      	lsls	r2, r2, #2
 8006bbc:	300c      	adds	r0, #12
 8006bbe:	f000 fd6b 	bl	8007698 <memcpy>
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f7ff ffa5 	bl	8006b14 <_Bfree>
 8006bca:	4644      	mov	r4, r8
 8006bcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	615e      	str	r6, [r3, #20]
 8006bd4:	6125      	str	r5, [r4, #16]
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bdc:	08007fcc 	.word	0x08007fcc
 8006be0:	08007fdd 	.word	0x08007fdd

08006be4 <__hi0bits>:
 8006be4:	0c03      	lsrs	r3, r0, #16
 8006be6:	041b      	lsls	r3, r3, #16
 8006be8:	b9d3      	cbnz	r3, 8006c20 <__hi0bits+0x3c>
 8006bea:	0400      	lsls	r0, r0, #16
 8006bec:	2310      	movs	r3, #16
 8006bee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006bf2:	bf04      	itt	eq
 8006bf4:	0200      	lsleq	r0, r0, #8
 8006bf6:	3308      	addeq	r3, #8
 8006bf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006bfc:	bf04      	itt	eq
 8006bfe:	0100      	lsleq	r0, r0, #4
 8006c00:	3304      	addeq	r3, #4
 8006c02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c06:	bf04      	itt	eq
 8006c08:	0080      	lsleq	r0, r0, #2
 8006c0a:	3302      	addeq	r3, #2
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	db05      	blt.n	8006c1c <__hi0bits+0x38>
 8006c10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c14:	f103 0301 	add.w	r3, r3, #1
 8006c18:	bf08      	it	eq
 8006c1a:	2320      	moveq	r3, #32
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	4770      	bx	lr
 8006c20:	2300      	movs	r3, #0
 8006c22:	e7e4      	b.n	8006bee <__hi0bits+0xa>

08006c24 <__lo0bits>:
 8006c24:	6803      	ldr	r3, [r0, #0]
 8006c26:	f013 0207 	ands.w	r2, r3, #7
 8006c2a:	d00c      	beq.n	8006c46 <__lo0bits+0x22>
 8006c2c:	07d9      	lsls	r1, r3, #31
 8006c2e:	d422      	bmi.n	8006c76 <__lo0bits+0x52>
 8006c30:	079a      	lsls	r2, r3, #30
 8006c32:	bf49      	itett	mi
 8006c34:	085b      	lsrmi	r3, r3, #1
 8006c36:	089b      	lsrpl	r3, r3, #2
 8006c38:	6003      	strmi	r3, [r0, #0]
 8006c3a:	2201      	movmi	r2, #1
 8006c3c:	bf5c      	itt	pl
 8006c3e:	6003      	strpl	r3, [r0, #0]
 8006c40:	2202      	movpl	r2, #2
 8006c42:	4610      	mov	r0, r2
 8006c44:	4770      	bx	lr
 8006c46:	b299      	uxth	r1, r3
 8006c48:	b909      	cbnz	r1, 8006c4e <__lo0bits+0x2a>
 8006c4a:	0c1b      	lsrs	r3, r3, #16
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	b2d9      	uxtb	r1, r3
 8006c50:	b909      	cbnz	r1, 8006c56 <__lo0bits+0x32>
 8006c52:	3208      	adds	r2, #8
 8006c54:	0a1b      	lsrs	r3, r3, #8
 8006c56:	0719      	lsls	r1, r3, #28
 8006c58:	bf04      	itt	eq
 8006c5a:	091b      	lsreq	r3, r3, #4
 8006c5c:	3204      	addeq	r2, #4
 8006c5e:	0799      	lsls	r1, r3, #30
 8006c60:	bf04      	itt	eq
 8006c62:	089b      	lsreq	r3, r3, #2
 8006c64:	3202      	addeq	r2, #2
 8006c66:	07d9      	lsls	r1, r3, #31
 8006c68:	d403      	bmi.n	8006c72 <__lo0bits+0x4e>
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	f102 0201 	add.w	r2, r2, #1
 8006c70:	d003      	beq.n	8006c7a <__lo0bits+0x56>
 8006c72:	6003      	str	r3, [r0, #0]
 8006c74:	e7e5      	b.n	8006c42 <__lo0bits+0x1e>
 8006c76:	2200      	movs	r2, #0
 8006c78:	e7e3      	b.n	8006c42 <__lo0bits+0x1e>
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	e7e1      	b.n	8006c42 <__lo0bits+0x1e>
	...

08006c80 <__i2b>:
 8006c80:	b510      	push	{r4, lr}
 8006c82:	460c      	mov	r4, r1
 8006c84:	2101      	movs	r1, #1
 8006c86:	f7ff ff05 	bl	8006a94 <_Balloc>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	b928      	cbnz	r0, 8006c9a <__i2b+0x1a>
 8006c8e:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <__i2b+0x24>)
 8006c90:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <__i2b+0x28>)
 8006c92:	f240 1145 	movw	r1, #325	; 0x145
 8006c96:	f000 fd0d 	bl	80076b4 <__assert_func>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	6144      	str	r4, [r0, #20]
 8006c9e:	6103      	str	r3, [r0, #16]
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	bf00      	nop
 8006ca4:	08007fcc 	.word	0x08007fcc
 8006ca8:	08007fdd 	.word	0x08007fdd

08006cac <__multiply>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	4691      	mov	r9, r2
 8006cb2:	690a      	ldr	r2, [r1, #16]
 8006cb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	bfb8      	it	lt
 8006cbc:	460b      	movlt	r3, r1
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	bfbc      	itt	lt
 8006cc2:	464c      	movlt	r4, r9
 8006cc4:	4699      	movlt	r9, r3
 8006cc6:	6927      	ldr	r7, [r4, #16]
 8006cc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ccc:	68a3      	ldr	r3, [r4, #8]
 8006cce:	6861      	ldr	r1, [r4, #4]
 8006cd0:	eb07 060a 	add.w	r6, r7, sl
 8006cd4:	42b3      	cmp	r3, r6
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	bfb8      	it	lt
 8006cda:	3101      	addlt	r1, #1
 8006cdc:	f7ff feda 	bl	8006a94 <_Balloc>
 8006ce0:	b930      	cbnz	r0, 8006cf0 <__multiply+0x44>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	4b44      	ldr	r3, [pc, #272]	; (8006df8 <__multiply+0x14c>)
 8006ce6:	4845      	ldr	r0, [pc, #276]	; (8006dfc <__multiply+0x150>)
 8006ce8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006cec:	f000 fce2 	bl	80076b4 <__assert_func>
 8006cf0:	f100 0514 	add.w	r5, r0, #20
 8006cf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4543      	cmp	r3, r8
 8006cfe:	d321      	bcc.n	8006d44 <__multiply+0x98>
 8006d00:	f104 0314 	add.w	r3, r4, #20
 8006d04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d08:	f109 0314 	add.w	r3, r9, #20
 8006d0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d10:	9202      	str	r2, [sp, #8]
 8006d12:	1b3a      	subs	r2, r7, r4
 8006d14:	3a15      	subs	r2, #21
 8006d16:	f022 0203 	bic.w	r2, r2, #3
 8006d1a:	3204      	adds	r2, #4
 8006d1c:	f104 0115 	add.w	r1, r4, #21
 8006d20:	428f      	cmp	r7, r1
 8006d22:	bf38      	it	cc
 8006d24:	2204      	movcc	r2, #4
 8006d26:	9201      	str	r2, [sp, #4]
 8006d28:	9a02      	ldr	r2, [sp, #8]
 8006d2a:	9303      	str	r3, [sp, #12]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d80c      	bhi.n	8006d4a <__multiply+0x9e>
 8006d30:	2e00      	cmp	r6, #0
 8006d32:	dd03      	ble.n	8006d3c <__multiply+0x90>
 8006d34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d05b      	beq.n	8006df4 <__multiply+0x148>
 8006d3c:	6106      	str	r6, [r0, #16]
 8006d3e:	b005      	add	sp, #20
 8006d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d44:	f843 2b04 	str.w	r2, [r3], #4
 8006d48:	e7d8      	b.n	8006cfc <__multiply+0x50>
 8006d4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d4e:	f1ba 0f00 	cmp.w	sl, #0
 8006d52:	d024      	beq.n	8006d9e <__multiply+0xf2>
 8006d54:	f104 0e14 	add.w	lr, r4, #20
 8006d58:	46a9      	mov	r9, r5
 8006d5a:	f04f 0c00 	mov.w	ip, #0
 8006d5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d62:	f8d9 1000 	ldr.w	r1, [r9]
 8006d66:	fa1f fb82 	uxth.w	fp, r2
 8006d6a:	b289      	uxth	r1, r1
 8006d6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d74:	f8d9 2000 	ldr.w	r2, [r9]
 8006d78:	4461      	add	r1, ip
 8006d7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d86:	b289      	uxth	r1, r1
 8006d88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d8c:	4577      	cmp	r7, lr
 8006d8e:	f849 1b04 	str.w	r1, [r9], #4
 8006d92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d96:	d8e2      	bhi.n	8006d5e <__multiply+0xb2>
 8006d98:	9a01      	ldr	r2, [sp, #4]
 8006d9a:	f845 c002 	str.w	ip, [r5, r2]
 8006d9e:	9a03      	ldr	r2, [sp, #12]
 8006da0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006da4:	3304      	adds	r3, #4
 8006da6:	f1b9 0f00 	cmp.w	r9, #0
 8006daa:	d021      	beq.n	8006df0 <__multiply+0x144>
 8006dac:	6829      	ldr	r1, [r5, #0]
 8006dae:	f104 0c14 	add.w	ip, r4, #20
 8006db2:	46ae      	mov	lr, r5
 8006db4:	f04f 0a00 	mov.w	sl, #0
 8006db8:	f8bc b000 	ldrh.w	fp, [ip]
 8006dbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006dc0:	fb09 220b 	mla	r2, r9, fp, r2
 8006dc4:	4452      	add	r2, sl
 8006dc6:	b289      	uxth	r1, r1
 8006dc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006dcc:	f84e 1b04 	str.w	r1, [lr], #4
 8006dd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006dd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006dd8:	f8be 1000 	ldrh.w	r1, [lr]
 8006ddc:	fb09 110a 	mla	r1, r9, sl, r1
 8006de0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006de4:	4567      	cmp	r7, ip
 8006de6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006dea:	d8e5      	bhi.n	8006db8 <__multiply+0x10c>
 8006dec:	9a01      	ldr	r2, [sp, #4]
 8006dee:	50a9      	str	r1, [r5, r2]
 8006df0:	3504      	adds	r5, #4
 8006df2:	e799      	b.n	8006d28 <__multiply+0x7c>
 8006df4:	3e01      	subs	r6, #1
 8006df6:	e79b      	b.n	8006d30 <__multiply+0x84>
 8006df8:	08007fcc 	.word	0x08007fcc
 8006dfc:	08007fdd 	.word	0x08007fdd

08006e00 <__pow5mult>:
 8006e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e04:	4615      	mov	r5, r2
 8006e06:	f012 0203 	ands.w	r2, r2, #3
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	460f      	mov	r7, r1
 8006e0e:	d007      	beq.n	8006e20 <__pow5mult+0x20>
 8006e10:	4c25      	ldr	r4, [pc, #148]	; (8006ea8 <__pow5mult+0xa8>)
 8006e12:	3a01      	subs	r2, #1
 8006e14:	2300      	movs	r3, #0
 8006e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e1a:	f7ff fe9d 	bl	8006b58 <__multadd>
 8006e1e:	4607      	mov	r7, r0
 8006e20:	10ad      	asrs	r5, r5, #2
 8006e22:	d03d      	beq.n	8006ea0 <__pow5mult+0xa0>
 8006e24:	69f4      	ldr	r4, [r6, #28]
 8006e26:	b97c      	cbnz	r4, 8006e48 <__pow5mult+0x48>
 8006e28:	2010      	movs	r0, #16
 8006e2a:	f7ff fd7f 	bl	800692c <malloc>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	61f0      	str	r0, [r6, #28]
 8006e32:	b928      	cbnz	r0, 8006e40 <__pow5mult+0x40>
 8006e34:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <__pow5mult+0xac>)
 8006e36:	481e      	ldr	r0, [pc, #120]	; (8006eb0 <__pow5mult+0xb0>)
 8006e38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006e3c:	f000 fc3a 	bl	80076b4 <__assert_func>
 8006e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e44:	6004      	str	r4, [r0, #0]
 8006e46:	60c4      	str	r4, [r0, #12]
 8006e48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e50:	b94c      	cbnz	r4, 8006e66 <__pow5mult+0x66>
 8006e52:	f240 2171 	movw	r1, #625	; 0x271
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7ff ff12 	bl	8006c80 <__i2b>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e62:	4604      	mov	r4, r0
 8006e64:	6003      	str	r3, [r0, #0]
 8006e66:	f04f 0900 	mov.w	r9, #0
 8006e6a:	07eb      	lsls	r3, r5, #31
 8006e6c:	d50a      	bpl.n	8006e84 <__pow5mult+0x84>
 8006e6e:	4639      	mov	r1, r7
 8006e70:	4622      	mov	r2, r4
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff ff1a 	bl	8006cac <__multiply>
 8006e78:	4639      	mov	r1, r7
 8006e7a:	4680      	mov	r8, r0
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7ff fe49 	bl	8006b14 <_Bfree>
 8006e82:	4647      	mov	r7, r8
 8006e84:	106d      	asrs	r5, r5, #1
 8006e86:	d00b      	beq.n	8006ea0 <__pow5mult+0xa0>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	b938      	cbnz	r0, 8006e9c <__pow5mult+0x9c>
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ff0b 	bl	8006cac <__multiply>
 8006e96:	6020      	str	r0, [r4, #0]
 8006e98:	f8c0 9000 	str.w	r9, [r0]
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	e7e4      	b.n	8006e6a <__pow5mult+0x6a>
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ea6:	bf00      	nop
 8006ea8:	08008128 	.word	0x08008128
 8006eac:	08007f5d 	.word	0x08007f5d
 8006eb0:	08007fdd 	.word	0x08007fdd

08006eb4 <__lshift>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	460c      	mov	r4, r1
 8006eba:	6849      	ldr	r1, [r1, #4]
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ec2:	68a3      	ldr	r3, [r4, #8]
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	4691      	mov	r9, r2
 8006ec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ecc:	f108 0601 	add.w	r6, r8, #1
 8006ed0:	42b3      	cmp	r3, r6
 8006ed2:	db0b      	blt.n	8006eec <__lshift+0x38>
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff fddd 	bl	8006a94 <_Balloc>
 8006eda:	4605      	mov	r5, r0
 8006edc:	b948      	cbnz	r0, 8006ef2 <__lshift+0x3e>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <__lshift+0xd0>)
 8006ee2:	4829      	ldr	r0, [pc, #164]	; (8006f88 <__lshift+0xd4>)
 8006ee4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006ee8:	f000 fbe4 	bl	80076b4 <__assert_func>
 8006eec:	3101      	adds	r1, #1
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	e7ee      	b.n	8006ed0 <__lshift+0x1c>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f100 0114 	add.w	r1, r0, #20
 8006ef8:	f100 0210 	add.w	r2, r0, #16
 8006efc:	4618      	mov	r0, r3
 8006efe:	4553      	cmp	r3, sl
 8006f00:	db33      	blt.n	8006f6a <__lshift+0xb6>
 8006f02:	6920      	ldr	r0, [r4, #16]
 8006f04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f08:	f104 0314 	add.w	r3, r4, #20
 8006f0c:	f019 091f 	ands.w	r9, r9, #31
 8006f10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f18:	d02b      	beq.n	8006f72 <__lshift+0xbe>
 8006f1a:	f1c9 0e20 	rsb	lr, r9, #32
 8006f1e:	468a      	mov	sl, r1
 8006f20:	2200      	movs	r2, #0
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	fa00 f009 	lsl.w	r0, r0, r9
 8006f28:	4310      	orrs	r0, r2
 8006f2a:	f84a 0b04 	str.w	r0, [sl], #4
 8006f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f32:	459c      	cmp	ip, r3
 8006f34:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f38:	d8f3      	bhi.n	8006f22 <__lshift+0x6e>
 8006f3a:	ebac 0304 	sub.w	r3, ip, r4
 8006f3e:	3b15      	subs	r3, #21
 8006f40:	f023 0303 	bic.w	r3, r3, #3
 8006f44:	3304      	adds	r3, #4
 8006f46:	f104 0015 	add.w	r0, r4, #21
 8006f4a:	4584      	cmp	ip, r0
 8006f4c:	bf38      	it	cc
 8006f4e:	2304      	movcc	r3, #4
 8006f50:	50ca      	str	r2, [r1, r3]
 8006f52:	b10a      	cbz	r2, 8006f58 <__lshift+0xa4>
 8006f54:	f108 0602 	add.w	r6, r8, #2
 8006f58:	3e01      	subs	r6, #1
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	612e      	str	r6, [r5, #16]
 8006f5e:	4621      	mov	r1, r4
 8006f60:	f7ff fdd8 	bl	8006b14 <_Bfree>
 8006f64:	4628      	mov	r0, r5
 8006f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f6e:	3301      	adds	r3, #1
 8006f70:	e7c5      	b.n	8006efe <__lshift+0x4a>
 8006f72:	3904      	subs	r1, #4
 8006f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f78:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f7c:	459c      	cmp	ip, r3
 8006f7e:	d8f9      	bhi.n	8006f74 <__lshift+0xc0>
 8006f80:	e7ea      	b.n	8006f58 <__lshift+0xa4>
 8006f82:	bf00      	nop
 8006f84:	08007fcc 	.word	0x08007fcc
 8006f88:	08007fdd 	.word	0x08007fdd

08006f8c <__mcmp>:
 8006f8c:	b530      	push	{r4, r5, lr}
 8006f8e:	6902      	ldr	r2, [r0, #16]
 8006f90:	690c      	ldr	r4, [r1, #16]
 8006f92:	1b12      	subs	r2, r2, r4
 8006f94:	d10e      	bne.n	8006fb4 <__mcmp+0x28>
 8006f96:	f100 0314 	add.w	r3, r0, #20
 8006f9a:	3114      	adds	r1, #20
 8006f9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006fa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006fa4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006fa8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006fac:	42a5      	cmp	r5, r4
 8006fae:	d003      	beq.n	8006fb8 <__mcmp+0x2c>
 8006fb0:	d305      	bcc.n	8006fbe <__mcmp+0x32>
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	bd30      	pop	{r4, r5, pc}
 8006fb8:	4283      	cmp	r3, r0
 8006fba:	d3f3      	bcc.n	8006fa4 <__mcmp+0x18>
 8006fbc:	e7fa      	b.n	8006fb4 <__mcmp+0x28>
 8006fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc2:	e7f7      	b.n	8006fb4 <__mcmp+0x28>

08006fc4 <__mdiff>:
 8006fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	460c      	mov	r4, r1
 8006fca:	4606      	mov	r6, r0
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4620      	mov	r0, r4
 8006fd0:	4690      	mov	r8, r2
 8006fd2:	f7ff ffdb 	bl	8006f8c <__mcmp>
 8006fd6:	1e05      	subs	r5, r0, #0
 8006fd8:	d110      	bne.n	8006ffc <__mdiff+0x38>
 8006fda:	4629      	mov	r1, r5
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f7ff fd59 	bl	8006a94 <_Balloc>
 8006fe2:	b930      	cbnz	r0, 8006ff2 <__mdiff+0x2e>
 8006fe4:	4b3a      	ldr	r3, [pc, #232]	; (80070d0 <__mdiff+0x10c>)
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	f240 2137 	movw	r1, #567	; 0x237
 8006fec:	4839      	ldr	r0, [pc, #228]	; (80070d4 <__mdiff+0x110>)
 8006fee:	f000 fb61 	bl	80076b4 <__assert_func>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffc:	bfa4      	itt	ge
 8006ffe:	4643      	movge	r3, r8
 8007000:	46a0      	movge	r8, r4
 8007002:	4630      	mov	r0, r6
 8007004:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007008:	bfa6      	itte	ge
 800700a:	461c      	movge	r4, r3
 800700c:	2500      	movge	r5, #0
 800700e:	2501      	movlt	r5, #1
 8007010:	f7ff fd40 	bl	8006a94 <_Balloc>
 8007014:	b920      	cbnz	r0, 8007020 <__mdiff+0x5c>
 8007016:	4b2e      	ldr	r3, [pc, #184]	; (80070d0 <__mdiff+0x10c>)
 8007018:	4602      	mov	r2, r0
 800701a:	f240 2145 	movw	r1, #581	; 0x245
 800701e:	e7e5      	b.n	8006fec <__mdiff+0x28>
 8007020:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007024:	6926      	ldr	r6, [r4, #16]
 8007026:	60c5      	str	r5, [r0, #12]
 8007028:	f104 0914 	add.w	r9, r4, #20
 800702c:	f108 0514 	add.w	r5, r8, #20
 8007030:	f100 0e14 	add.w	lr, r0, #20
 8007034:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007038:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800703c:	f108 0210 	add.w	r2, r8, #16
 8007040:	46f2      	mov	sl, lr
 8007042:	2100      	movs	r1, #0
 8007044:	f859 3b04 	ldr.w	r3, [r9], #4
 8007048:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800704c:	fa11 f88b 	uxtah	r8, r1, fp
 8007050:	b299      	uxth	r1, r3
 8007052:	0c1b      	lsrs	r3, r3, #16
 8007054:	eba8 0801 	sub.w	r8, r8, r1
 8007058:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800705c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007060:	fa1f f888 	uxth.w	r8, r8
 8007064:	1419      	asrs	r1, r3, #16
 8007066:	454e      	cmp	r6, r9
 8007068:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800706c:	f84a 3b04 	str.w	r3, [sl], #4
 8007070:	d8e8      	bhi.n	8007044 <__mdiff+0x80>
 8007072:	1b33      	subs	r3, r6, r4
 8007074:	3b15      	subs	r3, #21
 8007076:	f023 0303 	bic.w	r3, r3, #3
 800707a:	3304      	adds	r3, #4
 800707c:	3415      	adds	r4, #21
 800707e:	42a6      	cmp	r6, r4
 8007080:	bf38      	it	cc
 8007082:	2304      	movcc	r3, #4
 8007084:	441d      	add	r5, r3
 8007086:	4473      	add	r3, lr
 8007088:	469e      	mov	lr, r3
 800708a:	462e      	mov	r6, r5
 800708c:	4566      	cmp	r6, ip
 800708e:	d30e      	bcc.n	80070ae <__mdiff+0xea>
 8007090:	f10c 0203 	add.w	r2, ip, #3
 8007094:	1b52      	subs	r2, r2, r5
 8007096:	f022 0203 	bic.w	r2, r2, #3
 800709a:	3d03      	subs	r5, #3
 800709c:	45ac      	cmp	ip, r5
 800709e:	bf38      	it	cc
 80070a0:	2200      	movcc	r2, #0
 80070a2:	4413      	add	r3, r2
 80070a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80070a8:	b17a      	cbz	r2, 80070ca <__mdiff+0x106>
 80070aa:	6107      	str	r7, [r0, #16]
 80070ac:	e7a4      	b.n	8006ff8 <__mdiff+0x34>
 80070ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80070b2:	fa11 f288 	uxtah	r2, r1, r8
 80070b6:	1414      	asrs	r4, r2, #16
 80070b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80070bc:	b292      	uxth	r2, r2
 80070be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80070c2:	f84e 2b04 	str.w	r2, [lr], #4
 80070c6:	1421      	asrs	r1, r4, #16
 80070c8:	e7e0      	b.n	800708c <__mdiff+0xc8>
 80070ca:	3f01      	subs	r7, #1
 80070cc:	e7ea      	b.n	80070a4 <__mdiff+0xe0>
 80070ce:	bf00      	nop
 80070d0:	08007fcc 	.word	0x08007fcc
 80070d4:	08007fdd 	.word	0x08007fdd

080070d8 <__d2b>:
 80070d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070dc:	460f      	mov	r7, r1
 80070de:	2101      	movs	r1, #1
 80070e0:	ec59 8b10 	vmov	r8, r9, d0
 80070e4:	4616      	mov	r6, r2
 80070e6:	f7ff fcd5 	bl	8006a94 <_Balloc>
 80070ea:	4604      	mov	r4, r0
 80070ec:	b930      	cbnz	r0, 80070fc <__d2b+0x24>
 80070ee:	4602      	mov	r2, r0
 80070f0:	4b24      	ldr	r3, [pc, #144]	; (8007184 <__d2b+0xac>)
 80070f2:	4825      	ldr	r0, [pc, #148]	; (8007188 <__d2b+0xb0>)
 80070f4:	f240 310f 	movw	r1, #783	; 0x30f
 80070f8:	f000 fadc 	bl	80076b4 <__assert_func>
 80070fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007104:	bb2d      	cbnz	r5, 8007152 <__d2b+0x7a>
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	f1b8 0300 	subs.w	r3, r8, #0
 800710c:	d026      	beq.n	800715c <__d2b+0x84>
 800710e:	4668      	mov	r0, sp
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	f7ff fd87 	bl	8006c24 <__lo0bits>
 8007116:	e9dd 1200 	ldrd	r1, r2, [sp]
 800711a:	b1e8      	cbz	r0, 8007158 <__d2b+0x80>
 800711c:	f1c0 0320 	rsb	r3, r0, #32
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	430b      	orrs	r3, r1
 8007126:	40c2      	lsrs	r2, r0
 8007128:	6163      	str	r3, [r4, #20]
 800712a:	9201      	str	r2, [sp, #4]
 800712c:	9b01      	ldr	r3, [sp, #4]
 800712e:	61a3      	str	r3, [r4, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	bf14      	ite	ne
 8007134:	2202      	movne	r2, #2
 8007136:	2201      	moveq	r2, #1
 8007138:	6122      	str	r2, [r4, #16]
 800713a:	b1bd      	cbz	r5, 800716c <__d2b+0x94>
 800713c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007140:	4405      	add	r5, r0
 8007142:	603d      	str	r5, [r7, #0]
 8007144:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007148:	6030      	str	r0, [r6, #0]
 800714a:	4620      	mov	r0, r4
 800714c:	b003      	add	sp, #12
 800714e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007156:	e7d6      	b.n	8007106 <__d2b+0x2e>
 8007158:	6161      	str	r1, [r4, #20]
 800715a:	e7e7      	b.n	800712c <__d2b+0x54>
 800715c:	a801      	add	r0, sp, #4
 800715e:	f7ff fd61 	bl	8006c24 <__lo0bits>
 8007162:	9b01      	ldr	r3, [sp, #4]
 8007164:	6163      	str	r3, [r4, #20]
 8007166:	3020      	adds	r0, #32
 8007168:	2201      	movs	r2, #1
 800716a:	e7e5      	b.n	8007138 <__d2b+0x60>
 800716c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007174:	6038      	str	r0, [r7, #0]
 8007176:	6918      	ldr	r0, [r3, #16]
 8007178:	f7ff fd34 	bl	8006be4 <__hi0bits>
 800717c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007180:	e7e2      	b.n	8007148 <__d2b+0x70>
 8007182:	bf00      	nop
 8007184:	08007fcc 	.word	0x08007fcc
 8007188:	08007fdd 	.word	0x08007fdd

0800718c <__sfputc_r>:
 800718c:	6893      	ldr	r3, [r2, #8]
 800718e:	3b01      	subs	r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	b410      	push	{r4}
 8007194:	6093      	str	r3, [r2, #8]
 8007196:	da08      	bge.n	80071aa <__sfputc_r+0x1e>
 8007198:	6994      	ldr	r4, [r2, #24]
 800719a:	42a3      	cmp	r3, r4
 800719c:	db01      	blt.n	80071a2 <__sfputc_r+0x16>
 800719e:	290a      	cmp	r1, #10
 80071a0:	d103      	bne.n	80071aa <__sfputc_r+0x1e>
 80071a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071a6:	f7fe bbe4 	b.w	8005972 <__swbuf_r>
 80071aa:	6813      	ldr	r3, [r2, #0]
 80071ac:	1c58      	adds	r0, r3, #1
 80071ae:	6010      	str	r0, [r2, #0]
 80071b0:	7019      	strb	r1, [r3, #0]
 80071b2:	4608      	mov	r0, r1
 80071b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <__sfputs_r>:
 80071ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071bc:	4606      	mov	r6, r0
 80071be:	460f      	mov	r7, r1
 80071c0:	4614      	mov	r4, r2
 80071c2:	18d5      	adds	r5, r2, r3
 80071c4:	42ac      	cmp	r4, r5
 80071c6:	d101      	bne.n	80071cc <__sfputs_r+0x12>
 80071c8:	2000      	movs	r0, #0
 80071ca:	e007      	b.n	80071dc <__sfputs_r+0x22>
 80071cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d0:	463a      	mov	r2, r7
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7ff ffda 	bl	800718c <__sfputc_r>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d1f3      	bne.n	80071c4 <__sfputs_r+0xa>
 80071dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071e0 <_vfiprintf_r>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	460d      	mov	r5, r1
 80071e6:	b09d      	sub	sp, #116	; 0x74
 80071e8:	4614      	mov	r4, r2
 80071ea:	4698      	mov	r8, r3
 80071ec:	4606      	mov	r6, r0
 80071ee:	b118      	cbz	r0, 80071f8 <_vfiprintf_r+0x18>
 80071f0:	6a03      	ldr	r3, [r0, #32]
 80071f2:	b90b      	cbnz	r3, 80071f8 <_vfiprintf_r+0x18>
 80071f4:	f7fe fad6 	bl	80057a4 <__sinit>
 80071f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071fa:	07d9      	lsls	r1, r3, #31
 80071fc:	d405      	bmi.n	800720a <_vfiprintf_r+0x2a>
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	059a      	lsls	r2, r3, #22
 8007202:	d402      	bmi.n	800720a <_vfiprintf_r+0x2a>
 8007204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007206:	f7fe fcc6 	bl	8005b96 <__retarget_lock_acquire_recursive>
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	071b      	lsls	r3, r3, #28
 800720e:	d501      	bpl.n	8007214 <_vfiprintf_r+0x34>
 8007210:	692b      	ldr	r3, [r5, #16]
 8007212:	b99b      	cbnz	r3, 800723c <_vfiprintf_r+0x5c>
 8007214:	4629      	mov	r1, r5
 8007216:	4630      	mov	r0, r6
 8007218:	f7fe fbe8 	bl	80059ec <__swsetup_r>
 800721c:	b170      	cbz	r0, 800723c <_vfiprintf_r+0x5c>
 800721e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007220:	07dc      	lsls	r4, r3, #31
 8007222:	d504      	bpl.n	800722e <_vfiprintf_r+0x4e>
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	b01d      	add	sp, #116	; 0x74
 800722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722e:	89ab      	ldrh	r3, [r5, #12]
 8007230:	0598      	lsls	r0, r3, #22
 8007232:	d4f7      	bmi.n	8007224 <_vfiprintf_r+0x44>
 8007234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007236:	f7fe fcaf 	bl	8005b98 <__retarget_lock_release_recursive>
 800723a:	e7f3      	b.n	8007224 <_vfiprintf_r+0x44>
 800723c:	2300      	movs	r3, #0
 800723e:	9309      	str	r3, [sp, #36]	; 0x24
 8007240:	2320      	movs	r3, #32
 8007242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007246:	f8cd 800c 	str.w	r8, [sp, #12]
 800724a:	2330      	movs	r3, #48	; 0x30
 800724c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007400 <_vfiprintf_r+0x220>
 8007250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007254:	f04f 0901 	mov.w	r9, #1
 8007258:	4623      	mov	r3, r4
 800725a:	469a      	mov	sl, r3
 800725c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007260:	b10a      	cbz	r2, 8007266 <_vfiprintf_r+0x86>
 8007262:	2a25      	cmp	r2, #37	; 0x25
 8007264:	d1f9      	bne.n	800725a <_vfiprintf_r+0x7a>
 8007266:	ebba 0b04 	subs.w	fp, sl, r4
 800726a:	d00b      	beq.n	8007284 <_vfiprintf_r+0xa4>
 800726c:	465b      	mov	r3, fp
 800726e:	4622      	mov	r2, r4
 8007270:	4629      	mov	r1, r5
 8007272:	4630      	mov	r0, r6
 8007274:	f7ff ffa1 	bl	80071ba <__sfputs_r>
 8007278:	3001      	adds	r0, #1
 800727a:	f000 80a9 	beq.w	80073d0 <_vfiprintf_r+0x1f0>
 800727e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007280:	445a      	add	r2, fp
 8007282:	9209      	str	r2, [sp, #36]	; 0x24
 8007284:	f89a 3000 	ldrb.w	r3, [sl]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 80a1 	beq.w	80073d0 <_vfiprintf_r+0x1f0>
 800728e:	2300      	movs	r3, #0
 8007290:	f04f 32ff 	mov.w	r2, #4294967295
 8007294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007298:	f10a 0a01 	add.w	sl, sl, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	9307      	str	r3, [sp, #28]
 80072a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072a4:	931a      	str	r3, [sp, #104]	; 0x68
 80072a6:	4654      	mov	r4, sl
 80072a8:	2205      	movs	r2, #5
 80072aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ae:	4854      	ldr	r0, [pc, #336]	; (8007400 <_vfiprintf_r+0x220>)
 80072b0:	f7f8 ffae 	bl	8000210 <memchr>
 80072b4:	9a04      	ldr	r2, [sp, #16]
 80072b6:	b9d8      	cbnz	r0, 80072f0 <_vfiprintf_r+0x110>
 80072b8:	06d1      	lsls	r1, r2, #27
 80072ba:	bf44      	itt	mi
 80072bc:	2320      	movmi	r3, #32
 80072be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072c2:	0713      	lsls	r3, r2, #28
 80072c4:	bf44      	itt	mi
 80072c6:	232b      	movmi	r3, #43	; 0x2b
 80072c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072cc:	f89a 3000 	ldrb.w	r3, [sl]
 80072d0:	2b2a      	cmp	r3, #42	; 0x2a
 80072d2:	d015      	beq.n	8007300 <_vfiprintf_r+0x120>
 80072d4:	9a07      	ldr	r2, [sp, #28]
 80072d6:	4654      	mov	r4, sl
 80072d8:	2000      	movs	r0, #0
 80072da:	f04f 0c0a 	mov.w	ip, #10
 80072de:	4621      	mov	r1, r4
 80072e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072e4:	3b30      	subs	r3, #48	; 0x30
 80072e6:	2b09      	cmp	r3, #9
 80072e8:	d94d      	bls.n	8007386 <_vfiprintf_r+0x1a6>
 80072ea:	b1b0      	cbz	r0, 800731a <_vfiprintf_r+0x13a>
 80072ec:	9207      	str	r2, [sp, #28]
 80072ee:	e014      	b.n	800731a <_vfiprintf_r+0x13a>
 80072f0:	eba0 0308 	sub.w	r3, r0, r8
 80072f4:	fa09 f303 	lsl.w	r3, r9, r3
 80072f8:	4313      	orrs	r3, r2
 80072fa:	9304      	str	r3, [sp, #16]
 80072fc:	46a2      	mov	sl, r4
 80072fe:	e7d2      	b.n	80072a6 <_vfiprintf_r+0xc6>
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	1d19      	adds	r1, r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	9103      	str	r1, [sp, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	bfbb      	ittet	lt
 800730c:	425b      	neglt	r3, r3
 800730e:	f042 0202 	orrlt.w	r2, r2, #2
 8007312:	9307      	strge	r3, [sp, #28]
 8007314:	9307      	strlt	r3, [sp, #28]
 8007316:	bfb8      	it	lt
 8007318:	9204      	strlt	r2, [sp, #16]
 800731a:	7823      	ldrb	r3, [r4, #0]
 800731c:	2b2e      	cmp	r3, #46	; 0x2e
 800731e:	d10c      	bne.n	800733a <_vfiprintf_r+0x15a>
 8007320:	7863      	ldrb	r3, [r4, #1]
 8007322:	2b2a      	cmp	r3, #42	; 0x2a
 8007324:	d134      	bne.n	8007390 <_vfiprintf_r+0x1b0>
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	1d1a      	adds	r2, r3, #4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	9203      	str	r2, [sp, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	bfb8      	it	lt
 8007332:	f04f 33ff 	movlt.w	r3, #4294967295
 8007336:	3402      	adds	r4, #2
 8007338:	9305      	str	r3, [sp, #20]
 800733a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007410 <_vfiprintf_r+0x230>
 800733e:	7821      	ldrb	r1, [r4, #0]
 8007340:	2203      	movs	r2, #3
 8007342:	4650      	mov	r0, sl
 8007344:	f7f8 ff64 	bl	8000210 <memchr>
 8007348:	b138      	cbz	r0, 800735a <_vfiprintf_r+0x17a>
 800734a:	9b04      	ldr	r3, [sp, #16]
 800734c:	eba0 000a 	sub.w	r0, r0, sl
 8007350:	2240      	movs	r2, #64	; 0x40
 8007352:	4082      	lsls	r2, r0
 8007354:	4313      	orrs	r3, r2
 8007356:	3401      	adds	r4, #1
 8007358:	9304      	str	r3, [sp, #16]
 800735a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735e:	4829      	ldr	r0, [pc, #164]	; (8007404 <_vfiprintf_r+0x224>)
 8007360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007364:	2206      	movs	r2, #6
 8007366:	f7f8 ff53 	bl	8000210 <memchr>
 800736a:	2800      	cmp	r0, #0
 800736c:	d03f      	beq.n	80073ee <_vfiprintf_r+0x20e>
 800736e:	4b26      	ldr	r3, [pc, #152]	; (8007408 <_vfiprintf_r+0x228>)
 8007370:	bb1b      	cbnz	r3, 80073ba <_vfiprintf_r+0x1da>
 8007372:	9b03      	ldr	r3, [sp, #12]
 8007374:	3307      	adds	r3, #7
 8007376:	f023 0307 	bic.w	r3, r3, #7
 800737a:	3308      	adds	r3, #8
 800737c:	9303      	str	r3, [sp, #12]
 800737e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007380:	443b      	add	r3, r7
 8007382:	9309      	str	r3, [sp, #36]	; 0x24
 8007384:	e768      	b.n	8007258 <_vfiprintf_r+0x78>
 8007386:	fb0c 3202 	mla	r2, ip, r2, r3
 800738a:	460c      	mov	r4, r1
 800738c:	2001      	movs	r0, #1
 800738e:	e7a6      	b.n	80072de <_vfiprintf_r+0xfe>
 8007390:	2300      	movs	r3, #0
 8007392:	3401      	adds	r4, #1
 8007394:	9305      	str	r3, [sp, #20]
 8007396:	4619      	mov	r1, r3
 8007398:	f04f 0c0a 	mov.w	ip, #10
 800739c:	4620      	mov	r0, r4
 800739e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073a2:	3a30      	subs	r2, #48	; 0x30
 80073a4:	2a09      	cmp	r2, #9
 80073a6:	d903      	bls.n	80073b0 <_vfiprintf_r+0x1d0>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0c6      	beq.n	800733a <_vfiprintf_r+0x15a>
 80073ac:	9105      	str	r1, [sp, #20]
 80073ae:	e7c4      	b.n	800733a <_vfiprintf_r+0x15a>
 80073b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80073b4:	4604      	mov	r4, r0
 80073b6:	2301      	movs	r3, #1
 80073b8:	e7f0      	b.n	800739c <_vfiprintf_r+0x1bc>
 80073ba:	ab03      	add	r3, sp, #12
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	462a      	mov	r2, r5
 80073c0:	4b12      	ldr	r3, [pc, #72]	; (800740c <_vfiprintf_r+0x22c>)
 80073c2:	a904      	add	r1, sp, #16
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7fd fd9b 	bl	8004f00 <_printf_float>
 80073ca:	4607      	mov	r7, r0
 80073cc:	1c78      	adds	r0, r7, #1
 80073ce:	d1d6      	bne.n	800737e <_vfiprintf_r+0x19e>
 80073d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d2:	07d9      	lsls	r1, r3, #31
 80073d4:	d405      	bmi.n	80073e2 <_vfiprintf_r+0x202>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	059a      	lsls	r2, r3, #22
 80073da:	d402      	bmi.n	80073e2 <_vfiprintf_r+0x202>
 80073dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073de:	f7fe fbdb 	bl	8005b98 <__retarget_lock_release_recursive>
 80073e2:	89ab      	ldrh	r3, [r5, #12]
 80073e4:	065b      	lsls	r3, r3, #25
 80073e6:	f53f af1d 	bmi.w	8007224 <_vfiprintf_r+0x44>
 80073ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ec:	e71c      	b.n	8007228 <_vfiprintf_r+0x48>
 80073ee:	ab03      	add	r3, sp, #12
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	462a      	mov	r2, r5
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <_vfiprintf_r+0x22c>)
 80073f6:	a904      	add	r1, sp, #16
 80073f8:	4630      	mov	r0, r6
 80073fa:	f7fe f825 	bl	8005448 <_printf_i>
 80073fe:	e7e4      	b.n	80073ca <_vfiprintf_r+0x1ea>
 8007400:	08008134 	.word	0x08008134
 8007404:	0800813e 	.word	0x0800813e
 8007408:	08004f01 	.word	0x08004f01
 800740c:	080071bb 	.word	0x080071bb
 8007410:	0800813a 	.word	0x0800813a

08007414 <__sflush_r>:
 8007414:	898a      	ldrh	r2, [r1, #12]
 8007416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741a:	4605      	mov	r5, r0
 800741c:	0710      	lsls	r0, r2, #28
 800741e:	460c      	mov	r4, r1
 8007420:	d458      	bmi.n	80074d4 <__sflush_r+0xc0>
 8007422:	684b      	ldr	r3, [r1, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	dc05      	bgt.n	8007434 <__sflush_r+0x20>
 8007428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	dc02      	bgt.n	8007434 <__sflush_r+0x20>
 800742e:	2000      	movs	r0, #0
 8007430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007436:	2e00      	cmp	r6, #0
 8007438:	d0f9      	beq.n	800742e <__sflush_r+0x1a>
 800743a:	2300      	movs	r3, #0
 800743c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007440:	682f      	ldr	r7, [r5, #0]
 8007442:	6a21      	ldr	r1, [r4, #32]
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	d032      	beq.n	80074ae <__sflush_r+0x9a>
 8007448:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	075a      	lsls	r2, r3, #29
 800744e:	d505      	bpl.n	800745c <__sflush_r+0x48>
 8007450:	6863      	ldr	r3, [r4, #4]
 8007452:	1ac0      	subs	r0, r0, r3
 8007454:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007456:	b10b      	cbz	r3, 800745c <__sflush_r+0x48>
 8007458:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800745a:	1ac0      	subs	r0, r0, r3
 800745c:	2300      	movs	r3, #0
 800745e:	4602      	mov	r2, r0
 8007460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007462:	6a21      	ldr	r1, [r4, #32]
 8007464:	4628      	mov	r0, r5
 8007466:	47b0      	blx	r6
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	d106      	bne.n	800747c <__sflush_r+0x68>
 800746e:	6829      	ldr	r1, [r5, #0]
 8007470:	291d      	cmp	r1, #29
 8007472:	d82b      	bhi.n	80074cc <__sflush_r+0xb8>
 8007474:	4a29      	ldr	r2, [pc, #164]	; (800751c <__sflush_r+0x108>)
 8007476:	410a      	asrs	r2, r1
 8007478:	07d6      	lsls	r6, r2, #31
 800747a:	d427      	bmi.n	80074cc <__sflush_r+0xb8>
 800747c:	2200      	movs	r2, #0
 800747e:	6062      	str	r2, [r4, #4]
 8007480:	04d9      	lsls	r1, r3, #19
 8007482:	6922      	ldr	r2, [r4, #16]
 8007484:	6022      	str	r2, [r4, #0]
 8007486:	d504      	bpl.n	8007492 <__sflush_r+0x7e>
 8007488:	1c42      	adds	r2, r0, #1
 800748a:	d101      	bne.n	8007490 <__sflush_r+0x7c>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	b903      	cbnz	r3, 8007492 <__sflush_r+0x7e>
 8007490:	6560      	str	r0, [r4, #84]	; 0x54
 8007492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007494:	602f      	str	r7, [r5, #0]
 8007496:	2900      	cmp	r1, #0
 8007498:	d0c9      	beq.n	800742e <__sflush_r+0x1a>
 800749a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800749e:	4299      	cmp	r1, r3
 80074a0:	d002      	beq.n	80074a8 <__sflush_r+0x94>
 80074a2:	4628      	mov	r0, r5
 80074a4:	f7ff f9f6 	bl	8006894 <_free_r>
 80074a8:	2000      	movs	r0, #0
 80074aa:	6360      	str	r0, [r4, #52]	; 0x34
 80074ac:	e7c0      	b.n	8007430 <__sflush_r+0x1c>
 80074ae:	2301      	movs	r3, #1
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b0      	blx	r6
 80074b4:	1c41      	adds	r1, r0, #1
 80074b6:	d1c8      	bne.n	800744a <__sflush_r+0x36>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0c5      	beq.n	800744a <__sflush_r+0x36>
 80074be:	2b1d      	cmp	r3, #29
 80074c0:	d001      	beq.n	80074c6 <__sflush_r+0xb2>
 80074c2:	2b16      	cmp	r3, #22
 80074c4:	d101      	bne.n	80074ca <__sflush_r+0xb6>
 80074c6:	602f      	str	r7, [r5, #0]
 80074c8:	e7b1      	b.n	800742e <__sflush_r+0x1a>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	e7ad      	b.n	8007430 <__sflush_r+0x1c>
 80074d4:	690f      	ldr	r7, [r1, #16]
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	d0a9      	beq.n	800742e <__sflush_r+0x1a>
 80074da:	0793      	lsls	r3, r2, #30
 80074dc:	680e      	ldr	r6, [r1, #0]
 80074de:	bf08      	it	eq
 80074e0:	694b      	ldreq	r3, [r1, #20]
 80074e2:	600f      	str	r7, [r1, #0]
 80074e4:	bf18      	it	ne
 80074e6:	2300      	movne	r3, #0
 80074e8:	eba6 0807 	sub.w	r8, r6, r7
 80074ec:	608b      	str	r3, [r1, #8]
 80074ee:	f1b8 0f00 	cmp.w	r8, #0
 80074f2:	dd9c      	ble.n	800742e <__sflush_r+0x1a>
 80074f4:	6a21      	ldr	r1, [r4, #32]
 80074f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074f8:	4643      	mov	r3, r8
 80074fa:	463a      	mov	r2, r7
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b0      	blx	r6
 8007500:	2800      	cmp	r0, #0
 8007502:	dc06      	bgt.n	8007512 <__sflush_r+0xfe>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750a:	81a3      	strh	r3, [r4, #12]
 800750c:	f04f 30ff 	mov.w	r0, #4294967295
 8007510:	e78e      	b.n	8007430 <__sflush_r+0x1c>
 8007512:	4407      	add	r7, r0
 8007514:	eba8 0800 	sub.w	r8, r8, r0
 8007518:	e7e9      	b.n	80074ee <__sflush_r+0xda>
 800751a:	bf00      	nop
 800751c:	dfbffffe 	.word	0xdfbffffe

08007520 <_fflush_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	690b      	ldr	r3, [r1, #16]
 8007524:	4605      	mov	r5, r0
 8007526:	460c      	mov	r4, r1
 8007528:	b913      	cbnz	r3, 8007530 <_fflush_r+0x10>
 800752a:	2500      	movs	r5, #0
 800752c:	4628      	mov	r0, r5
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	b118      	cbz	r0, 800753a <_fflush_r+0x1a>
 8007532:	6a03      	ldr	r3, [r0, #32]
 8007534:	b90b      	cbnz	r3, 800753a <_fflush_r+0x1a>
 8007536:	f7fe f935 	bl	80057a4 <__sinit>
 800753a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f3      	beq.n	800752a <_fflush_r+0xa>
 8007542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007544:	07d0      	lsls	r0, r2, #31
 8007546:	d404      	bmi.n	8007552 <_fflush_r+0x32>
 8007548:	0599      	lsls	r1, r3, #22
 800754a:	d402      	bmi.n	8007552 <_fflush_r+0x32>
 800754c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754e:	f7fe fb22 	bl	8005b96 <__retarget_lock_acquire_recursive>
 8007552:	4628      	mov	r0, r5
 8007554:	4621      	mov	r1, r4
 8007556:	f7ff ff5d 	bl	8007414 <__sflush_r>
 800755a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800755c:	07da      	lsls	r2, r3, #31
 800755e:	4605      	mov	r5, r0
 8007560:	d4e4      	bmi.n	800752c <_fflush_r+0xc>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	059b      	lsls	r3, r3, #22
 8007566:	d4e1      	bmi.n	800752c <_fflush_r+0xc>
 8007568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756a:	f7fe fb15 	bl	8005b98 <__retarget_lock_release_recursive>
 800756e:	e7dd      	b.n	800752c <_fflush_r+0xc>

08007570 <__swhatbuf_r>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	460c      	mov	r4, r1
 8007574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007578:	2900      	cmp	r1, #0
 800757a:	b096      	sub	sp, #88	; 0x58
 800757c:	4615      	mov	r5, r2
 800757e:	461e      	mov	r6, r3
 8007580:	da0d      	bge.n	800759e <__swhatbuf_r+0x2e>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	bf0c      	ite	eq
 800758e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007592:	2340      	movne	r3, #64	; 0x40
 8007594:	2000      	movs	r0, #0
 8007596:	6031      	str	r1, [r6, #0]
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	b016      	add	sp, #88	; 0x58
 800759c:	bd70      	pop	{r4, r5, r6, pc}
 800759e:	466a      	mov	r2, sp
 80075a0:	f000 f848 	bl	8007634 <_fstat_r>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	dbec      	blt.n	8007582 <__swhatbuf_r+0x12>
 80075a8:	9901      	ldr	r1, [sp, #4]
 80075aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075b2:	4259      	negs	r1, r3
 80075b4:	4159      	adcs	r1, r3
 80075b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ba:	e7eb      	b.n	8007594 <__swhatbuf_r+0x24>

080075bc <__smakebuf_r>:
 80075bc:	898b      	ldrh	r3, [r1, #12]
 80075be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075c0:	079d      	lsls	r5, r3, #30
 80075c2:	4606      	mov	r6, r0
 80075c4:	460c      	mov	r4, r1
 80075c6:	d507      	bpl.n	80075d8 <__smakebuf_r+0x1c>
 80075c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	6123      	str	r3, [r4, #16]
 80075d0:	2301      	movs	r3, #1
 80075d2:	6163      	str	r3, [r4, #20]
 80075d4:	b002      	add	sp, #8
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
 80075d8:	ab01      	add	r3, sp, #4
 80075da:	466a      	mov	r2, sp
 80075dc:	f7ff ffc8 	bl	8007570 <__swhatbuf_r>
 80075e0:	9900      	ldr	r1, [sp, #0]
 80075e2:	4605      	mov	r5, r0
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff f9c9 	bl	800697c <_malloc_r>
 80075ea:	b948      	cbnz	r0, 8007600 <__smakebuf_r+0x44>
 80075ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f0:	059a      	lsls	r2, r3, #22
 80075f2:	d4ef      	bmi.n	80075d4 <__smakebuf_r+0x18>
 80075f4:	f023 0303 	bic.w	r3, r3, #3
 80075f8:	f043 0302 	orr.w	r3, r3, #2
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	e7e3      	b.n	80075c8 <__smakebuf_r+0xc>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	6020      	str	r0, [r4, #0]
 8007604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007608:	81a3      	strh	r3, [r4, #12]
 800760a:	9b00      	ldr	r3, [sp, #0]
 800760c:	6163      	str	r3, [r4, #20]
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	6120      	str	r0, [r4, #16]
 8007612:	b15b      	cbz	r3, 800762c <__smakebuf_r+0x70>
 8007614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007618:	4630      	mov	r0, r6
 800761a:	f000 f81d 	bl	8007658 <_isatty_r>
 800761e:	b128      	cbz	r0, 800762c <__smakebuf_r+0x70>
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	f023 0303 	bic.w	r3, r3, #3
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	81a3      	strh	r3, [r4, #12]
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	431d      	orrs	r5, r3
 8007630:	81a5      	strh	r5, [r4, #12]
 8007632:	e7cf      	b.n	80075d4 <__smakebuf_r+0x18>

08007634 <_fstat_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d07      	ldr	r5, [pc, #28]	; (8007654 <_fstat_r+0x20>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	f7fa fc88 	bl	8001f56 <_fstat>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d102      	bne.n	8007650 <_fstat_r+0x1c>
 800764a:	682b      	ldr	r3, [r5, #0]
 800764c:	b103      	cbz	r3, 8007650 <_fstat_r+0x1c>
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	bf00      	nop
 8007654:	20000728 	.word	0x20000728

08007658 <_isatty_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	; (8007674 <_isatty_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7fa fc87 	bl	8001f76 <_isatty>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_isatty_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_isatty_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	20000728 	.word	0x20000728

08007678 <_sbrk_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4d06      	ldr	r5, [pc, #24]	; (8007694 <_sbrk_r+0x1c>)
 800767c:	2300      	movs	r3, #0
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	f7fa fc90 	bl	8001fa8 <_sbrk>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_sbrk_r+0x1a>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_sbrk_r+0x1a>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	20000728 	.word	0x20000728

08007698 <memcpy>:
 8007698:	440a      	add	r2, r1
 800769a:	4291      	cmp	r1, r2
 800769c:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a0:	d100      	bne.n	80076a4 <memcpy+0xc>
 80076a2:	4770      	bx	lr
 80076a4:	b510      	push	{r4, lr}
 80076a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ae:	4291      	cmp	r1, r2
 80076b0:	d1f9      	bne.n	80076a6 <memcpy+0xe>
 80076b2:	bd10      	pop	{r4, pc}

080076b4 <__assert_func>:
 80076b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076b6:	4614      	mov	r4, r2
 80076b8:	461a      	mov	r2, r3
 80076ba:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <__assert_func+0x2c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4605      	mov	r5, r0
 80076c0:	68d8      	ldr	r0, [r3, #12]
 80076c2:	b14c      	cbz	r4, 80076d8 <__assert_func+0x24>
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <__assert_func+0x30>)
 80076c6:	9100      	str	r1, [sp, #0]
 80076c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076cc:	4906      	ldr	r1, [pc, #24]	; (80076e8 <__assert_func+0x34>)
 80076ce:	462b      	mov	r3, r5
 80076d0:	f000 f844 	bl	800775c <fiprintf>
 80076d4:	f000 f854 	bl	8007780 <abort>
 80076d8:	4b04      	ldr	r3, [pc, #16]	; (80076ec <__assert_func+0x38>)
 80076da:	461c      	mov	r4, r3
 80076dc:	e7f3      	b.n	80076c6 <__assert_func+0x12>
 80076de:	bf00      	nop
 80076e0:	20000064 	.word	0x20000064
 80076e4:	0800814f 	.word	0x0800814f
 80076e8:	0800815c 	.word	0x0800815c
 80076ec:	0800818a 	.word	0x0800818a

080076f0 <_calloc_r>:
 80076f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076f2:	fba1 2402 	umull	r2, r4, r1, r2
 80076f6:	b94c      	cbnz	r4, 800770c <_calloc_r+0x1c>
 80076f8:	4611      	mov	r1, r2
 80076fa:	9201      	str	r2, [sp, #4]
 80076fc:	f7ff f93e 	bl	800697c <_malloc_r>
 8007700:	9a01      	ldr	r2, [sp, #4]
 8007702:	4605      	mov	r5, r0
 8007704:	b930      	cbnz	r0, 8007714 <_calloc_r+0x24>
 8007706:	4628      	mov	r0, r5
 8007708:	b003      	add	sp, #12
 800770a:	bd30      	pop	{r4, r5, pc}
 800770c:	220c      	movs	r2, #12
 800770e:	6002      	str	r2, [r0, #0]
 8007710:	2500      	movs	r5, #0
 8007712:	e7f8      	b.n	8007706 <_calloc_r+0x16>
 8007714:	4621      	mov	r1, r4
 8007716:	f7fe f9c1 	bl	8005a9c <memset>
 800771a:	e7f4      	b.n	8007706 <_calloc_r+0x16>

0800771c <__ascii_mbtowc>:
 800771c:	b082      	sub	sp, #8
 800771e:	b901      	cbnz	r1, 8007722 <__ascii_mbtowc+0x6>
 8007720:	a901      	add	r1, sp, #4
 8007722:	b142      	cbz	r2, 8007736 <__ascii_mbtowc+0x1a>
 8007724:	b14b      	cbz	r3, 800773a <__ascii_mbtowc+0x1e>
 8007726:	7813      	ldrb	r3, [r2, #0]
 8007728:	600b      	str	r3, [r1, #0]
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	1e10      	subs	r0, r2, #0
 800772e:	bf18      	it	ne
 8007730:	2001      	movne	r0, #1
 8007732:	b002      	add	sp, #8
 8007734:	4770      	bx	lr
 8007736:	4610      	mov	r0, r2
 8007738:	e7fb      	b.n	8007732 <__ascii_mbtowc+0x16>
 800773a:	f06f 0001 	mvn.w	r0, #1
 800773e:	e7f8      	b.n	8007732 <__ascii_mbtowc+0x16>

08007740 <__ascii_wctomb>:
 8007740:	b149      	cbz	r1, 8007756 <__ascii_wctomb+0x16>
 8007742:	2aff      	cmp	r2, #255	; 0xff
 8007744:	bf85      	ittet	hi
 8007746:	238a      	movhi	r3, #138	; 0x8a
 8007748:	6003      	strhi	r3, [r0, #0]
 800774a:	700a      	strbls	r2, [r1, #0]
 800774c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007750:	bf98      	it	ls
 8007752:	2001      	movls	r0, #1
 8007754:	4770      	bx	lr
 8007756:	4608      	mov	r0, r1
 8007758:	4770      	bx	lr
	...

0800775c <fiprintf>:
 800775c:	b40e      	push	{r1, r2, r3}
 800775e:	b503      	push	{r0, r1, lr}
 8007760:	4601      	mov	r1, r0
 8007762:	ab03      	add	r3, sp, #12
 8007764:	4805      	ldr	r0, [pc, #20]	; (800777c <fiprintf+0x20>)
 8007766:	f853 2b04 	ldr.w	r2, [r3], #4
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	f7ff fd37 	bl	80071e0 <_vfiprintf_r>
 8007772:	b002      	add	sp, #8
 8007774:	f85d eb04 	ldr.w	lr, [sp], #4
 8007778:	b003      	add	sp, #12
 800777a:	4770      	bx	lr
 800777c:	20000064 	.word	0x20000064

08007780 <abort>:
 8007780:	b508      	push	{r3, lr}
 8007782:	2006      	movs	r0, #6
 8007784:	f000 f82c 	bl	80077e0 <raise>
 8007788:	2001      	movs	r0, #1
 800778a:	f7fa fb95 	bl	8001eb8 <_exit>

0800778e <_raise_r>:
 800778e:	291f      	cmp	r1, #31
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4604      	mov	r4, r0
 8007794:	460d      	mov	r5, r1
 8007796:	d904      	bls.n	80077a2 <_raise_r+0x14>
 8007798:	2316      	movs	r3, #22
 800779a:	6003      	str	r3, [r0, #0]
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	bd38      	pop	{r3, r4, r5, pc}
 80077a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80077a4:	b112      	cbz	r2, 80077ac <_raise_r+0x1e>
 80077a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077aa:	b94b      	cbnz	r3, 80077c0 <_raise_r+0x32>
 80077ac:	4620      	mov	r0, r4
 80077ae:	f000 f831 	bl	8007814 <_getpid_r>
 80077b2:	462a      	mov	r2, r5
 80077b4:	4601      	mov	r1, r0
 80077b6:	4620      	mov	r0, r4
 80077b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077bc:	f000 b818 	b.w	80077f0 <_kill_r>
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d00a      	beq.n	80077da <_raise_r+0x4c>
 80077c4:	1c59      	adds	r1, r3, #1
 80077c6:	d103      	bne.n	80077d0 <_raise_r+0x42>
 80077c8:	2316      	movs	r3, #22
 80077ca:	6003      	str	r3, [r0, #0]
 80077cc:	2001      	movs	r0, #1
 80077ce:	e7e7      	b.n	80077a0 <_raise_r+0x12>
 80077d0:	2400      	movs	r4, #0
 80077d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077d6:	4628      	mov	r0, r5
 80077d8:	4798      	blx	r3
 80077da:	2000      	movs	r0, #0
 80077dc:	e7e0      	b.n	80077a0 <_raise_r+0x12>
	...

080077e0 <raise>:
 80077e0:	4b02      	ldr	r3, [pc, #8]	; (80077ec <raise+0xc>)
 80077e2:	4601      	mov	r1, r0
 80077e4:	6818      	ldr	r0, [r3, #0]
 80077e6:	f7ff bfd2 	b.w	800778e <_raise_r>
 80077ea:	bf00      	nop
 80077ec:	20000064 	.word	0x20000064

080077f0 <_kill_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4d07      	ldr	r5, [pc, #28]	; (8007810 <_kill_r+0x20>)
 80077f4:	2300      	movs	r3, #0
 80077f6:	4604      	mov	r4, r0
 80077f8:	4608      	mov	r0, r1
 80077fa:	4611      	mov	r1, r2
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	f7fa fb4b 	bl	8001e98 <_kill>
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	d102      	bne.n	800780c <_kill_r+0x1c>
 8007806:	682b      	ldr	r3, [r5, #0]
 8007808:	b103      	cbz	r3, 800780c <_kill_r+0x1c>
 800780a:	6023      	str	r3, [r4, #0]
 800780c:	bd38      	pop	{r3, r4, r5, pc}
 800780e:	bf00      	nop
 8007810:	20000728 	.word	0x20000728

08007814 <_getpid_r>:
 8007814:	f7fa bb38 	b.w	8001e88 <_getpid>

08007818 <atan>:
 8007818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	ec55 4b10 	vmov	r4, r5, d0
 8007820:	4bc3      	ldr	r3, [pc, #780]	; (8007b30 <atan+0x318>)
 8007822:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007826:	429e      	cmp	r6, r3
 8007828:	46ab      	mov	fp, r5
 800782a:	dd18      	ble.n	800785e <atan+0x46>
 800782c:	4bc1      	ldr	r3, [pc, #772]	; (8007b34 <atan+0x31c>)
 800782e:	429e      	cmp	r6, r3
 8007830:	dc01      	bgt.n	8007836 <atan+0x1e>
 8007832:	d109      	bne.n	8007848 <atan+0x30>
 8007834:	b144      	cbz	r4, 8007848 <atan+0x30>
 8007836:	4622      	mov	r2, r4
 8007838:	462b      	mov	r3, r5
 800783a:	4620      	mov	r0, r4
 800783c:	4629      	mov	r1, r5
 800783e:	f7f8 fd45 	bl	80002cc <__adddf3>
 8007842:	4604      	mov	r4, r0
 8007844:	460d      	mov	r5, r1
 8007846:	e006      	b.n	8007856 <atan+0x3e>
 8007848:	f1bb 0f00 	cmp.w	fp, #0
 800784c:	f300 8131 	bgt.w	8007ab2 <atan+0x29a>
 8007850:	a59b      	add	r5, pc, #620	; (adr r5, 8007ac0 <atan+0x2a8>)
 8007852:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007856:	ec45 4b10 	vmov	d0, r4, r5
 800785a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785e:	4bb6      	ldr	r3, [pc, #728]	; (8007b38 <atan+0x320>)
 8007860:	429e      	cmp	r6, r3
 8007862:	dc14      	bgt.n	800788e <atan+0x76>
 8007864:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007868:	429e      	cmp	r6, r3
 800786a:	dc0d      	bgt.n	8007888 <atan+0x70>
 800786c:	a396      	add	r3, pc, #600	; (adr r3, 8007ac8 <atan+0x2b0>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	ee10 0a10 	vmov	r0, s0
 8007876:	4629      	mov	r1, r5
 8007878:	f7f8 fd28 	bl	80002cc <__adddf3>
 800787c:	4baf      	ldr	r3, [pc, #700]	; (8007b3c <atan+0x324>)
 800787e:	2200      	movs	r2, #0
 8007880:	f7f9 f96a 	bl	8000b58 <__aeabi_dcmpgt>
 8007884:	2800      	cmp	r0, #0
 8007886:	d1e6      	bne.n	8007856 <atan+0x3e>
 8007888:	f04f 3aff 	mov.w	sl, #4294967295
 800788c:	e02b      	b.n	80078e6 <atan+0xce>
 800788e:	f000 f963 	bl	8007b58 <fabs>
 8007892:	4bab      	ldr	r3, [pc, #684]	; (8007b40 <atan+0x328>)
 8007894:	429e      	cmp	r6, r3
 8007896:	ec55 4b10 	vmov	r4, r5, d0
 800789a:	f300 80bf 	bgt.w	8007a1c <atan+0x204>
 800789e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80078a2:	429e      	cmp	r6, r3
 80078a4:	f300 80a0 	bgt.w	80079e8 <atan+0x1d0>
 80078a8:	ee10 2a10 	vmov	r2, s0
 80078ac:	ee10 0a10 	vmov	r0, s0
 80078b0:	462b      	mov	r3, r5
 80078b2:	4629      	mov	r1, r5
 80078b4:	f7f8 fd0a 	bl	80002cc <__adddf3>
 80078b8:	4ba0      	ldr	r3, [pc, #640]	; (8007b3c <atan+0x324>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	f7f8 fd04 	bl	80002c8 <__aeabi_dsub>
 80078c0:	2200      	movs	r2, #0
 80078c2:	4606      	mov	r6, r0
 80078c4:	460f      	mov	r7, r1
 80078c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078ca:	4620      	mov	r0, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	f7f8 fcfd 	bl	80002cc <__adddf3>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4630      	mov	r0, r6
 80078d8:	4639      	mov	r1, r7
 80078da:	f7f8 ffd7 	bl	800088c <__aeabi_ddiv>
 80078de:	f04f 0a00 	mov.w	sl, #0
 80078e2:	4604      	mov	r4, r0
 80078e4:	460d      	mov	r5, r1
 80078e6:	4622      	mov	r2, r4
 80078e8:	462b      	mov	r3, r5
 80078ea:	4620      	mov	r0, r4
 80078ec:	4629      	mov	r1, r5
 80078ee:	f7f8 fea3 	bl	8000638 <__aeabi_dmul>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4680      	mov	r8, r0
 80078f8:	4689      	mov	r9, r1
 80078fa:	f7f8 fe9d 	bl	8000638 <__aeabi_dmul>
 80078fe:	a374      	add	r3, pc, #464	; (adr r3, 8007ad0 <atan+0x2b8>)
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	4606      	mov	r6, r0
 8007906:	460f      	mov	r7, r1
 8007908:	f7f8 fe96 	bl	8000638 <__aeabi_dmul>
 800790c:	a372      	add	r3, pc, #456	; (adr r3, 8007ad8 <atan+0x2c0>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f7f8 fcdb 	bl	80002cc <__adddf3>
 8007916:	4632      	mov	r2, r6
 8007918:	463b      	mov	r3, r7
 800791a:	f7f8 fe8d 	bl	8000638 <__aeabi_dmul>
 800791e:	a370      	add	r3, pc, #448	; (adr r3, 8007ae0 <atan+0x2c8>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f7f8 fcd2 	bl	80002cc <__adddf3>
 8007928:	4632      	mov	r2, r6
 800792a:	463b      	mov	r3, r7
 800792c:	f7f8 fe84 	bl	8000638 <__aeabi_dmul>
 8007930:	a36d      	add	r3, pc, #436	; (adr r3, 8007ae8 <atan+0x2d0>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fcc9 	bl	80002cc <__adddf3>
 800793a:	4632      	mov	r2, r6
 800793c:	463b      	mov	r3, r7
 800793e:	f7f8 fe7b 	bl	8000638 <__aeabi_dmul>
 8007942:	a36b      	add	r3, pc, #428	; (adr r3, 8007af0 <atan+0x2d8>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f7f8 fcc0 	bl	80002cc <__adddf3>
 800794c:	4632      	mov	r2, r6
 800794e:	463b      	mov	r3, r7
 8007950:	f7f8 fe72 	bl	8000638 <__aeabi_dmul>
 8007954:	a368      	add	r3, pc, #416	; (adr r3, 8007af8 <atan+0x2e0>)
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f7f8 fcb7 	bl	80002cc <__adddf3>
 800795e:	4642      	mov	r2, r8
 8007960:	464b      	mov	r3, r9
 8007962:	f7f8 fe69 	bl	8000638 <__aeabi_dmul>
 8007966:	a366      	add	r3, pc, #408	; (adr r3, 8007b00 <atan+0x2e8>)
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	4680      	mov	r8, r0
 800796e:	4689      	mov	r9, r1
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f8 fe60 	bl	8000638 <__aeabi_dmul>
 8007978:	a363      	add	r3, pc, #396	; (adr r3, 8007b08 <atan+0x2f0>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f7f8 fca3 	bl	80002c8 <__aeabi_dsub>
 8007982:	4632      	mov	r2, r6
 8007984:	463b      	mov	r3, r7
 8007986:	f7f8 fe57 	bl	8000638 <__aeabi_dmul>
 800798a:	a361      	add	r3, pc, #388	; (adr r3, 8007b10 <atan+0x2f8>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fc9a 	bl	80002c8 <__aeabi_dsub>
 8007994:	4632      	mov	r2, r6
 8007996:	463b      	mov	r3, r7
 8007998:	f7f8 fe4e 	bl	8000638 <__aeabi_dmul>
 800799c:	a35e      	add	r3, pc, #376	; (adr r3, 8007b18 <atan+0x300>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fc91 	bl	80002c8 <__aeabi_dsub>
 80079a6:	4632      	mov	r2, r6
 80079a8:	463b      	mov	r3, r7
 80079aa:	f7f8 fe45 	bl	8000638 <__aeabi_dmul>
 80079ae:	a35c      	add	r3, pc, #368	; (adr r3, 8007b20 <atan+0x308>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fc88 	bl	80002c8 <__aeabi_dsub>
 80079b8:	4632      	mov	r2, r6
 80079ba:	463b      	mov	r3, r7
 80079bc:	f7f8 fe3c 	bl	8000638 <__aeabi_dmul>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4640      	mov	r0, r8
 80079c6:	4649      	mov	r1, r9
 80079c8:	f7f8 fc80 	bl	80002cc <__adddf3>
 80079cc:	4622      	mov	r2, r4
 80079ce:	462b      	mov	r3, r5
 80079d0:	f7f8 fe32 	bl	8000638 <__aeabi_dmul>
 80079d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	d14b      	bne.n	8007a76 <atan+0x25e>
 80079de:	4620      	mov	r0, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	f7f8 fc71 	bl	80002c8 <__aeabi_dsub>
 80079e6:	e72c      	b.n	8007842 <atan+0x2a>
 80079e8:	ee10 0a10 	vmov	r0, s0
 80079ec:	4b53      	ldr	r3, [pc, #332]	; (8007b3c <atan+0x324>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7f8 fc69 	bl	80002c8 <__aeabi_dsub>
 80079f6:	4b51      	ldr	r3, [pc, #324]	; (8007b3c <atan+0x324>)
 80079f8:	4606      	mov	r6, r0
 80079fa:	460f      	mov	r7, r1
 80079fc:	2200      	movs	r2, #0
 80079fe:	4620      	mov	r0, r4
 8007a00:	4629      	mov	r1, r5
 8007a02:	f7f8 fc63 	bl	80002cc <__adddf3>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	f7f8 ff3d 	bl	800088c <__aeabi_ddiv>
 8007a12:	f04f 0a01 	mov.w	sl, #1
 8007a16:	4604      	mov	r4, r0
 8007a18:	460d      	mov	r5, r1
 8007a1a:	e764      	b.n	80078e6 <atan+0xce>
 8007a1c:	4b49      	ldr	r3, [pc, #292]	; (8007b44 <atan+0x32c>)
 8007a1e:	429e      	cmp	r6, r3
 8007a20:	da1d      	bge.n	8007a5e <atan+0x246>
 8007a22:	ee10 0a10 	vmov	r0, s0
 8007a26:	4b48      	ldr	r3, [pc, #288]	; (8007b48 <atan+0x330>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	f7f8 fc4c 	bl	80002c8 <__aeabi_dsub>
 8007a30:	4b45      	ldr	r3, [pc, #276]	; (8007b48 <atan+0x330>)
 8007a32:	4606      	mov	r6, r0
 8007a34:	460f      	mov	r7, r1
 8007a36:	2200      	movs	r2, #0
 8007a38:	4620      	mov	r0, r4
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	f7f8 fdfc 	bl	8000638 <__aeabi_dmul>
 8007a40:	4b3e      	ldr	r3, [pc, #248]	; (8007b3c <atan+0x324>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	f7f8 fc42 	bl	80002cc <__adddf3>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f7f8 ff1c 	bl	800088c <__aeabi_ddiv>
 8007a54:	f04f 0a02 	mov.w	sl, #2
 8007a58:	4604      	mov	r4, r0
 8007a5a:	460d      	mov	r5, r1
 8007a5c:	e743      	b.n	80078e6 <atan+0xce>
 8007a5e:	462b      	mov	r3, r5
 8007a60:	ee10 2a10 	vmov	r2, s0
 8007a64:	4939      	ldr	r1, [pc, #228]	; (8007b4c <atan+0x334>)
 8007a66:	2000      	movs	r0, #0
 8007a68:	f7f8 ff10 	bl	800088c <__aeabi_ddiv>
 8007a6c:	f04f 0a03 	mov.w	sl, #3
 8007a70:	4604      	mov	r4, r0
 8007a72:	460d      	mov	r5, r1
 8007a74:	e737      	b.n	80078e6 <atan+0xce>
 8007a76:	4b36      	ldr	r3, [pc, #216]	; (8007b50 <atan+0x338>)
 8007a78:	4e36      	ldr	r6, [pc, #216]	; (8007b54 <atan+0x33c>)
 8007a7a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 fc21 	bl	80002c8 <__aeabi_dsub>
 8007a86:	4622      	mov	r2, r4
 8007a88:	462b      	mov	r3, r5
 8007a8a:	f7f8 fc1d 	bl	80002c8 <__aeabi_dsub>
 8007a8e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007a9a:	f7f8 fc15 	bl	80002c8 <__aeabi_dsub>
 8007a9e:	f1bb 0f00 	cmp.w	fp, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	f6bf aed6 	bge.w	8007856 <atan+0x3e>
 8007aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aae:	461d      	mov	r5, r3
 8007ab0:	e6d1      	b.n	8007856 <atan+0x3e>
 8007ab2:	a51d      	add	r5, pc, #116	; (adr r5, 8007b28 <atan+0x310>)
 8007ab4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ab8:	e6cd      	b.n	8007856 <atan+0x3e>
 8007aba:	bf00      	nop
 8007abc:	f3af 8000 	nop.w
 8007ac0:	54442d18 	.word	0x54442d18
 8007ac4:	bff921fb 	.word	0xbff921fb
 8007ac8:	8800759c 	.word	0x8800759c
 8007acc:	7e37e43c 	.word	0x7e37e43c
 8007ad0:	e322da11 	.word	0xe322da11
 8007ad4:	3f90ad3a 	.word	0x3f90ad3a
 8007ad8:	24760deb 	.word	0x24760deb
 8007adc:	3fa97b4b 	.word	0x3fa97b4b
 8007ae0:	a0d03d51 	.word	0xa0d03d51
 8007ae4:	3fb10d66 	.word	0x3fb10d66
 8007ae8:	c54c206e 	.word	0xc54c206e
 8007aec:	3fb745cd 	.word	0x3fb745cd
 8007af0:	920083ff 	.word	0x920083ff
 8007af4:	3fc24924 	.word	0x3fc24924
 8007af8:	5555550d 	.word	0x5555550d
 8007afc:	3fd55555 	.word	0x3fd55555
 8007b00:	2c6a6c2f 	.word	0x2c6a6c2f
 8007b04:	bfa2b444 	.word	0xbfa2b444
 8007b08:	52defd9a 	.word	0x52defd9a
 8007b0c:	3fadde2d 	.word	0x3fadde2d
 8007b10:	af749a6d 	.word	0xaf749a6d
 8007b14:	3fb3b0f2 	.word	0x3fb3b0f2
 8007b18:	fe231671 	.word	0xfe231671
 8007b1c:	3fbc71c6 	.word	0x3fbc71c6
 8007b20:	9998ebc4 	.word	0x9998ebc4
 8007b24:	3fc99999 	.word	0x3fc99999
 8007b28:	54442d18 	.word	0x54442d18
 8007b2c:	3ff921fb 	.word	0x3ff921fb
 8007b30:	440fffff 	.word	0x440fffff
 8007b34:	7ff00000 	.word	0x7ff00000
 8007b38:	3fdbffff 	.word	0x3fdbffff
 8007b3c:	3ff00000 	.word	0x3ff00000
 8007b40:	3ff2ffff 	.word	0x3ff2ffff
 8007b44:	40038000 	.word	0x40038000
 8007b48:	3ff80000 	.word	0x3ff80000
 8007b4c:	bff00000 	.word	0xbff00000
 8007b50:	080082b0 	.word	0x080082b0
 8007b54:	08008290 	.word	0x08008290

08007b58 <fabs>:
 8007b58:	ec51 0b10 	vmov	r0, r1, d0
 8007b5c:	ee10 2a10 	vmov	r2, s0
 8007b60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b64:	ec43 2b10 	vmov	d0, r2, r3
 8007b68:	4770      	bx	lr
	...

08007b6c <_init>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr

08007b78 <_fini>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	bf00      	nop
 8007b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7e:	bc08      	pop	{r3}
 8007b80:	469e      	mov	lr, r3
 8007b82:	4770      	bx	lr
