
projet_systemelec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd74  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  0800de30  0800de30  0001de30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5b8  0800e5b8  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  0800e5b8  0800e5b8  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e5b8  0800e5b8  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5b8  0800e5b8  0001e5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5bc  0800e5bc  0001e5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800e5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000250  0800e810  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  0800e810  000207c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146e2  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000330a  00000000  00000000  0003499d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00037ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cbd  00000000  00000000  00038d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189da  00000000  00000000  000399cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173cb  00000000  00000000  000523a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000906eb  00000000  00000000  00069772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005048  00000000  00000000  000f9e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000feea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000250 	.word	0x20000250
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800de14 	.word	0x0800de14

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000254 	.word	0x20000254
 80000fc:	0800de14 	.word	0x0800de14

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fee5 	bl	8002218 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe35 	bl	80020c8 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fed7 	bl	8002218 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fecd 	bl	8002218 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fe5d 	bl	800214c <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fe53 	bl	800214c <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 fbc9 	bl	8000c54 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb55 	bl	8000b7c <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fbbb 	bl	8000c54 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fbb1 	bl	8000c54 <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb61 	bl	8000bc8 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fb57 	bl	8000bc8 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffb5 	bl	80004a0 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f002 fd31 	bl	8002fa4 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f002 f98a 	bl	8002864 <__aeabi_dsub>
 8000550:	f002 fd28 	bl	8002fa4 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__aeabi_d2lz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0005      	movs	r5, r0
 8000568:	000c      	movs	r4, r1
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f7ff ff77 	bl	8000464 <__aeabi_dcmplt>
 8000576:	2800      	cmp	r0, #0
 8000578:	d108      	bne.n	800058c <__aeabi_d2lz+0x28>
 800057a:	0028      	movs	r0, r5
 800057c:	0021      	movs	r1, r4
 800057e:	f000 f80f 	bl	80005a0 <__aeabi_d2ulz>
 8000582:	0002      	movs	r2, r0
 8000584:	000b      	movs	r3, r1
 8000586:	0010      	movs	r0, r2
 8000588:	0019      	movs	r1, r3
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	18e1      	adds	r1, r4, r3
 8000592:	0028      	movs	r0, r5
 8000594:	f000 f804 	bl	80005a0 <__aeabi_d2ulz>
 8000598:	2300      	movs	r3, #0
 800059a:	4242      	negs	r2, r0
 800059c:	418b      	sbcs	r3, r1
 800059e:	e7f2      	b.n	8000586 <__aeabi_d2lz+0x22>

080005a0 <__aeabi_d2ulz>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <__aeabi_d2ulz+0x34>)
 80005a6:	000d      	movs	r5, r1
 80005a8:	0004      	movs	r4, r0
 80005aa:	f001 fe99 	bl	80022e0 <__aeabi_dmul>
 80005ae:	f7ff ffbb 	bl	8000528 <__aeabi_d2uiz>
 80005b2:	0006      	movs	r6, r0
 80005b4:	f002 fd5c 	bl	8003070 <__aeabi_ui2d>
 80005b8:	2200      	movs	r2, #0
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <__aeabi_d2ulz+0x38>)
 80005bc:	f001 fe90 	bl	80022e0 <__aeabi_dmul>
 80005c0:	0002      	movs	r2, r0
 80005c2:	000b      	movs	r3, r1
 80005c4:	0020      	movs	r0, r4
 80005c6:	0029      	movs	r1, r5
 80005c8:	f002 f94c 	bl	8002864 <__aeabi_dsub>
 80005cc:	f7ff ffac 	bl	8000528 <__aeabi_d2uiz>
 80005d0:	0031      	movs	r1, r6
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	3df00000 	.word	0x3df00000
 80005d8:	41f00000 	.word	0x41f00000

080005dc <__aeabi_l2d>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0006      	movs	r6, r0
 80005e0:	0008      	movs	r0, r1
 80005e2:	f002 fd15 	bl	8003010 <__aeabi_i2d>
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_l2d+0x28>)
 80005ea:	f001 fe79 	bl	80022e0 <__aeabi_dmul>
 80005ee:	000d      	movs	r5, r1
 80005f0:	0004      	movs	r4, r0
 80005f2:	0030      	movs	r0, r6
 80005f4:	f002 fd3c 	bl	8003070 <__aeabi_ui2d>
 80005f8:	002b      	movs	r3, r5
 80005fa:	0022      	movs	r2, r4
 80005fc:	f000 ff16 	bl	800142c <__aeabi_dadd>
 8000600:	bd70      	pop	{r4, r5, r6, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41f00000 	.word	0x41f00000

08000608 <__aeabi_fadd>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	4647      	mov	r7, r8
 800060c:	46ce      	mov	lr, r9
 800060e:	024a      	lsls	r2, r1, #9
 8000610:	0243      	lsls	r3, r0, #9
 8000612:	0045      	lsls	r5, r0, #1
 8000614:	0fc4      	lsrs	r4, r0, #31
 8000616:	0a50      	lsrs	r0, r2, #9
 8000618:	4680      	mov	r8, r0
 800061a:	0048      	lsls	r0, r1, #1
 800061c:	0a5b      	lsrs	r3, r3, #9
 800061e:	0e00      	lsrs	r0, r0, #24
 8000620:	0992      	lsrs	r2, r2, #6
 8000622:	4694      	mov	ip, r2
 8000624:	b580      	push	{r7, lr}
 8000626:	001e      	movs	r6, r3
 8000628:	4681      	mov	r9, r0
 800062a:	0002      	movs	r2, r0
 800062c:	0e2d      	lsrs	r5, r5, #24
 800062e:	00df      	lsls	r7, r3, #3
 8000630:	0fc9      	lsrs	r1, r1, #31
 8000632:	428c      	cmp	r4, r1
 8000634:	d024      	beq.n	8000680 <__aeabi_fadd+0x78>
 8000636:	1a28      	subs	r0, r5, r0
 8000638:	2800      	cmp	r0, #0
 800063a:	dd0e      	ble.n	800065a <__aeabi_fadd+0x52>
 800063c:	2a00      	cmp	r2, #0
 800063e:	d13e      	bne.n	80006be <__aeabi_fadd+0xb6>
 8000640:	4662      	mov	r2, ip
 8000642:	2a00      	cmp	r2, #0
 8000644:	d100      	bne.n	8000648 <__aeabi_fadd+0x40>
 8000646:	e0fd      	b.n	8000844 <__aeabi_fadd+0x23c>
 8000648:	1e42      	subs	r2, r0, #1
 800064a:	2801      	cmp	r0, #1
 800064c:	d100      	bne.n	8000650 <__aeabi_fadd+0x48>
 800064e:	e137      	b.n	80008c0 <__aeabi_fadd+0x2b8>
 8000650:	28ff      	cmp	r0, #255	; 0xff
 8000652:	d100      	bne.n	8000656 <__aeabi_fadd+0x4e>
 8000654:	e0a9      	b.n	80007aa <__aeabi_fadd+0x1a2>
 8000656:	0010      	movs	r0, r2
 8000658:	e039      	b.n	80006ce <__aeabi_fadd+0xc6>
 800065a:	2800      	cmp	r0, #0
 800065c:	d063      	beq.n	8000726 <__aeabi_fadd+0x11e>
 800065e:	464b      	mov	r3, r9
 8000660:	1b52      	subs	r2, r2, r5
 8000662:	2d00      	cmp	r5, #0
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x60>
 8000666:	e0e0      	b.n	800082a <__aeabi_fadd+0x222>
 8000668:	2f00      	cmp	r7, #0
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x66>
 800066c:	e0ce      	b.n	800080c <__aeabi_fadd+0x204>
 800066e:	1e53      	subs	r3, r2, #1
 8000670:	2a01      	cmp	r2, #1
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x6e>
 8000674:	e155      	b.n	8000922 <__aeabi_fadd+0x31a>
 8000676:	2aff      	cmp	r2, #255	; 0xff
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x74>
 800067a:	e094      	b.n	80007a6 <__aeabi_fadd+0x19e>
 800067c:	001a      	movs	r2, r3
 800067e:	e0d9      	b.n	8000834 <__aeabi_fadd+0x22c>
 8000680:	1a2a      	subs	r2, r5, r0
 8000682:	2a00      	cmp	r2, #0
 8000684:	dc00      	bgt.n	8000688 <__aeabi_fadd+0x80>
 8000686:	e099      	b.n	80007bc <__aeabi_fadd+0x1b4>
 8000688:	2800      	cmp	r0, #0
 800068a:	d062      	beq.n	8000752 <__aeabi_fadd+0x14a>
 800068c:	2dff      	cmp	r5, #255	; 0xff
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x8a>
 8000690:	e08b      	b.n	80007aa <__aeabi_fadd+0x1a2>
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	4661      	mov	r1, ip
 8000696:	04db      	lsls	r3, r3, #19
 8000698:	4319      	orrs	r1, r3
 800069a:	468c      	mov	ip, r1
 800069c:	2a1b      	cmp	r2, #27
 800069e:	dc00      	bgt.n	80006a2 <__aeabi_fadd+0x9a>
 80006a0:	e0d2      	b.n	8000848 <__aeabi_fadd+0x240>
 80006a2:	2301      	movs	r3, #1
 80006a4:	19db      	adds	r3, r3, r7
 80006a6:	015a      	lsls	r2, r3, #5
 80006a8:	d56a      	bpl.n	8000780 <__aeabi_fadd+0x178>
 80006aa:	3501      	adds	r5, #1
 80006ac:	2dff      	cmp	r5, #255	; 0xff
 80006ae:	d05b      	beq.n	8000768 <__aeabi_fadd+0x160>
 80006b0:	2201      	movs	r2, #1
 80006b2:	49a3      	ldr	r1, [pc, #652]	; (8000940 <__aeabi_fadd+0x338>)
 80006b4:	401a      	ands	r2, r3
 80006b6:	085b      	lsrs	r3, r3, #1
 80006b8:	400b      	ands	r3, r1
 80006ba:	4313      	orrs	r3, r2
 80006bc:	e01c      	b.n	80006f8 <__aeabi_fadd+0xf0>
 80006be:	2dff      	cmp	r5, #255	; 0xff
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0xbc>
 80006c2:	e072      	b.n	80007aa <__aeabi_fadd+0x1a2>
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	4662      	mov	r2, ip
 80006c8:	04db      	lsls	r3, r3, #19
 80006ca:	431a      	orrs	r2, r3
 80006cc:	4694      	mov	ip, r2
 80006ce:	281b      	cmp	r0, #27
 80006d0:	dc00      	bgt.n	80006d4 <__aeabi_fadd+0xcc>
 80006d2:	e090      	b.n	80007f6 <__aeabi_fadd+0x1ee>
 80006d4:	2301      	movs	r3, #1
 80006d6:	1afb      	subs	r3, r7, r3
 80006d8:	015a      	lsls	r2, r3, #5
 80006da:	d551      	bpl.n	8000780 <__aeabi_fadd+0x178>
 80006dc:	019b      	lsls	r3, r3, #6
 80006de:	099e      	lsrs	r6, r3, #6
 80006e0:	0030      	movs	r0, r6
 80006e2:	f002 fdb9 	bl	8003258 <__clzsi2>
 80006e6:	0033      	movs	r3, r6
 80006e8:	3805      	subs	r0, #5
 80006ea:	4083      	lsls	r3, r0
 80006ec:	4285      	cmp	r5, r0
 80006ee:	dc00      	bgt.n	80006f2 <__aeabi_fadd+0xea>
 80006f0:	e075      	b.n	80007de <__aeabi_fadd+0x1d6>
 80006f2:	4a94      	ldr	r2, [pc, #592]	; (8000944 <__aeabi_fadd+0x33c>)
 80006f4:	1a2d      	subs	r5, r5, r0
 80006f6:	4013      	ands	r3, r2
 80006f8:	075a      	lsls	r2, r3, #29
 80006fa:	d004      	beq.n	8000706 <__aeabi_fadd+0xfe>
 80006fc:	220f      	movs	r2, #15
 80006fe:	401a      	ands	r2, r3
 8000700:	2a04      	cmp	r2, #4
 8000702:	d000      	beq.n	8000706 <__aeabi_fadd+0xfe>
 8000704:	3304      	adds	r3, #4
 8000706:	015a      	lsls	r2, r3, #5
 8000708:	d53c      	bpl.n	8000784 <__aeabi_fadd+0x17c>
 800070a:	1c68      	adds	r0, r5, #1
 800070c:	2dfe      	cmp	r5, #254	; 0xfe
 800070e:	d02b      	beq.n	8000768 <__aeabi_fadd+0x160>
 8000710:	019b      	lsls	r3, r3, #6
 8000712:	0a5e      	lsrs	r6, r3, #9
 8000714:	b2c0      	uxtb	r0, r0
 8000716:	05c0      	lsls	r0, r0, #23
 8000718:	4330      	orrs	r0, r6
 800071a:	07e4      	lsls	r4, r4, #31
 800071c:	4320      	orrs	r0, r4
 800071e:	bcc0      	pop	{r6, r7}
 8000720:	46b9      	mov	r9, r7
 8000722:	46b0      	mov	r8, r6
 8000724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000726:	20fe      	movs	r0, #254	; 0xfe
 8000728:	1c6a      	adds	r2, r5, #1
 800072a:	4210      	tst	r0, r2
 800072c:	d172      	bne.n	8000814 <__aeabi_fadd+0x20c>
 800072e:	2d00      	cmp	r5, #0
 8000730:	d000      	beq.n	8000734 <__aeabi_fadd+0x12c>
 8000732:	e0ae      	b.n	8000892 <__aeabi_fadd+0x28a>
 8000734:	2f00      	cmp	r7, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x132>
 8000738:	e0ec      	b.n	8000914 <__aeabi_fadd+0x30c>
 800073a:	4663      	mov	r3, ip
 800073c:	2000      	movs	r0, #0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0e9      	beq.n	8000716 <__aeabi_fadd+0x10e>
 8000742:	1afb      	subs	r3, r7, r3
 8000744:	015a      	lsls	r2, r3, #5
 8000746:	d400      	bmi.n	800074a <__aeabi_fadd+0x142>
 8000748:	e0f3      	b.n	8000932 <__aeabi_fadd+0x32a>
 800074a:	4663      	mov	r3, ip
 800074c:	000c      	movs	r4, r1
 800074e:	1bdb      	subs	r3, r3, r7
 8000750:	e7d2      	b.n	80006f8 <__aeabi_fadd+0xf0>
 8000752:	4661      	mov	r1, ip
 8000754:	2900      	cmp	r1, #0
 8000756:	d05b      	beq.n	8000810 <__aeabi_fadd+0x208>
 8000758:	1e51      	subs	r1, r2, #1
 800075a:	2a01      	cmp	r2, #1
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x158>
 800075e:	e0a7      	b.n	80008b0 <__aeabi_fadd+0x2a8>
 8000760:	2aff      	cmp	r2, #255	; 0xff
 8000762:	d022      	beq.n	80007aa <__aeabi_fadd+0x1a2>
 8000764:	000a      	movs	r2, r1
 8000766:	e799      	b.n	800069c <__aeabi_fadd+0x94>
 8000768:	20ff      	movs	r0, #255	; 0xff
 800076a:	2600      	movs	r6, #0
 800076c:	e7d3      	b.n	8000716 <__aeabi_fadd+0x10e>
 800076e:	21fe      	movs	r1, #254	; 0xfe
 8000770:	1c6a      	adds	r2, r5, #1
 8000772:	4211      	tst	r1, r2
 8000774:	d073      	beq.n	800085e <__aeabi_fadd+0x256>
 8000776:	2aff      	cmp	r2, #255	; 0xff
 8000778:	d0f6      	beq.n	8000768 <__aeabi_fadd+0x160>
 800077a:	0015      	movs	r5, r2
 800077c:	4467      	add	r7, ip
 800077e:	087b      	lsrs	r3, r7, #1
 8000780:	075a      	lsls	r2, r3, #29
 8000782:	d1bb      	bne.n	80006fc <__aeabi_fadd+0xf4>
 8000784:	08db      	lsrs	r3, r3, #3
 8000786:	2dff      	cmp	r5, #255	; 0xff
 8000788:	d00f      	beq.n	80007aa <__aeabi_fadd+0x1a2>
 800078a:	025b      	lsls	r3, r3, #9
 800078c:	0a5e      	lsrs	r6, r3, #9
 800078e:	b2e8      	uxtb	r0, r5
 8000790:	e7c1      	b.n	8000716 <__aeabi_fadd+0x10e>
 8000792:	4662      	mov	r2, ip
 8000794:	2a00      	cmp	r2, #0
 8000796:	d008      	beq.n	80007aa <__aeabi_fadd+0x1a2>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	03d2      	lsls	r2, r2, #15
 800079c:	4213      	tst	r3, r2
 800079e:	d004      	beq.n	80007aa <__aeabi_fadd+0x1a2>
 80007a0:	4640      	mov	r0, r8
 80007a2:	4210      	tst	r0, r2
 80007a4:	d101      	bne.n	80007aa <__aeabi_fadd+0x1a2>
 80007a6:	000c      	movs	r4, r1
 80007a8:	4643      	mov	r3, r8
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d0dc      	beq.n	8000768 <__aeabi_fadd+0x160>
 80007ae:	2680      	movs	r6, #128	; 0x80
 80007b0:	03f6      	lsls	r6, r6, #15
 80007b2:	431e      	orrs	r6, r3
 80007b4:	0276      	lsls	r6, r6, #9
 80007b6:	20ff      	movs	r0, #255	; 0xff
 80007b8:	0a76      	lsrs	r6, r6, #9
 80007ba:	e7ac      	b.n	8000716 <__aeabi_fadd+0x10e>
 80007bc:	2a00      	cmp	r2, #0
 80007be:	d0d6      	beq.n	800076e <__aeabi_fadd+0x166>
 80007c0:	1b42      	subs	r2, r0, r5
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d05c      	beq.n	8000880 <__aeabi_fadd+0x278>
 80007c6:	28ff      	cmp	r0, #255	; 0xff
 80007c8:	d0ee      	beq.n	80007a8 <__aeabi_fadd+0x1a0>
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	04db      	lsls	r3, r3, #19
 80007ce:	431f      	orrs	r7, r3
 80007d0:	2a1b      	cmp	r2, #27
 80007d2:	dc00      	bgt.n	80007d6 <__aeabi_fadd+0x1ce>
 80007d4:	e082      	b.n	80008dc <__aeabi_fadd+0x2d4>
 80007d6:	2301      	movs	r3, #1
 80007d8:	464d      	mov	r5, r9
 80007da:	4463      	add	r3, ip
 80007dc:	e763      	b.n	80006a6 <__aeabi_fadd+0x9e>
 80007de:	2220      	movs	r2, #32
 80007e0:	1b40      	subs	r0, r0, r5
 80007e2:	3001      	adds	r0, #1
 80007e4:	1a12      	subs	r2, r2, r0
 80007e6:	0019      	movs	r1, r3
 80007e8:	4093      	lsls	r3, r2
 80007ea:	40c1      	lsrs	r1, r0
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	4193      	sbcs	r3, r2
 80007f0:	2500      	movs	r5, #0
 80007f2:	430b      	orrs	r3, r1
 80007f4:	e780      	b.n	80006f8 <__aeabi_fadd+0xf0>
 80007f6:	2320      	movs	r3, #32
 80007f8:	4661      	mov	r1, ip
 80007fa:	1a1b      	subs	r3, r3, r0
 80007fc:	4099      	lsls	r1, r3
 80007fe:	4662      	mov	r2, ip
 8000800:	000b      	movs	r3, r1
 8000802:	40c2      	lsrs	r2, r0
 8000804:	1e59      	subs	r1, r3, #1
 8000806:	418b      	sbcs	r3, r1
 8000808:	4313      	orrs	r3, r2
 800080a:	e764      	b.n	80006d6 <__aeabi_fadd+0xce>
 800080c:	000c      	movs	r4, r1
 800080e:	4643      	mov	r3, r8
 8000810:	0015      	movs	r5, r2
 8000812:	e7b8      	b.n	8000786 <__aeabi_fadd+0x17e>
 8000814:	4663      	mov	r3, ip
 8000816:	1afe      	subs	r6, r7, r3
 8000818:	0173      	lsls	r3, r6, #5
 800081a:	d445      	bmi.n	80008a8 <__aeabi_fadd+0x2a0>
 800081c:	2e00      	cmp	r6, #0
 800081e:	d000      	beq.n	8000822 <__aeabi_fadd+0x21a>
 8000820:	e75e      	b.n	80006e0 <__aeabi_fadd+0xd8>
 8000822:	2400      	movs	r4, #0
 8000824:	2000      	movs	r0, #0
 8000826:	2600      	movs	r6, #0
 8000828:	e775      	b.n	8000716 <__aeabi_fadd+0x10e>
 800082a:	2bff      	cmp	r3, #255	; 0xff
 800082c:	d0bb      	beq.n	80007a6 <__aeabi_fadd+0x19e>
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	04db      	lsls	r3, r3, #19
 8000832:	431f      	orrs	r7, r3
 8000834:	2a1b      	cmp	r2, #27
 8000836:	dd47      	ble.n	80008c8 <__aeabi_fadd+0x2c0>
 8000838:	2301      	movs	r3, #1
 800083a:	4662      	mov	r2, ip
 800083c:	000c      	movs	r4, r1
 800083e:	464d      	mov	r5, r9
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	e749      	b.n	80006d8 <__aeabi_fadd+0xd0>
 8000844:	0005      	movs	r5, r0
 8000846:	e79e      	b.n	8000786 <__aeabi_fadd+0x17e>
 8000848:	4661      	mov	r1, ip
 800084a:	2320      	movs	r3, #32
 800084c:	40d1      	lsrs	r1, r2
 800084e:	1a9b      	subs	r3, r3, r2
 8000850:	4662      	mov	r2, ip
 8000852:	409a      	lsls	r2, r3
 8000854:	0013      	movs	r3, r2
 8000856:	1e5a      	subs	r2, r3, #1
 8000858:	4193      	sbcs	r3, r2
 800085a:	430b      	orrs	r3, r1
 800085c:	e722      	b.n	80006a4 <__aeabi_fadd+0x9c>
 800085e:	2d00      	cmp	r5, #0
 8000860:	d146      	bne.n	80008f0 <__aeabi_fadd+0x2e8>
 8000862:	2f00      	cmp	r7, #0
 8000864:	d062      	beq.n	800092c <__aeabi_fadd+0x324>
 8000866:	4663      	mov	r3, ip
 8000868:	2000      	movs	r0, #0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x268>
 800086e:	e752      	b.n	8000716 <__aeabi_fadd+0x10e>
 8000870:	003b      	movs	r3, r7
 8000872:	4463      	add	r3, ip
 8000874:	015a      	lsls	r2, r3, #5
 8000876:	d583      	bpl.n	8000780 <__aeabi_fadd+0x178>
 8000878:	4a32      	ldr	r2, [pc, #200]	; (8000944 <__aeabi_fadd+0x33c>)
 800087a:	3501      	adds	r5, #1
 800087c:	4013      	ands	r3, r2
 800087e:	e77f      	b.n	8000780 <__aeabi_fadd+0x178>
 8000880:	2f00      	cmp	r7, #0
 8000882:	d0c4      	beq.n	800080e <__aeabi_fadd+0x206>
 8000884:	1e53      	subs	r3, r2, #1
 8000886:	2a01      	cmp	r2, #1
 8000888:	d012      	beq.n	80008b0 <__aeabi_fadd+0x2a8>
 800088a:	2aff      	cmp	r2, #255	; 0xff
 800088c:	d08c      	beq.n	80007a8 <__aeabi_fadd+0x1a0>
 800088e:	001a      	movs	r2, r3
 8000890:	e79e      	b.n	80007d0 <__aeabi_fadd+0x1c8>
 8000892:	2f00      	cmp	r7, #0
 8000894:	d000      	beq.n	8000898 <__aeabi_fadd+0x290>
 8000896:	e77c      	b.n	8000792 <__aeabi_fadd+0x18a>
 8000898:	4663      	mov	r3, ip
 800089a:	2b00      	cmp	r3, #0
 800089c:	d183      	bne.n	80007a6 <__aeabi_fadd+0x19e>
 800089e:	2680      	movs	r6, #128	; 0x80
 80008a0:	2400      	movs	r4, #0
 80008a2:	20ff      	movs	r0, #255	; 0xff
 80008a4:	03f6      	lsls	r6, r6, #15
 80008a6:	e736      	b.n	8000716 <__aeabi_fadd+0x10e>
 80008a8:	4663      	mov	r3, ip
 80008aa:	000c      	movs	r4, r1
 80008ac:	1bde      	subs	r6, r3, r7
 80008ae:	e717      	b.n	80006e0 <__aeabi_fadd+0xd8>
 80008b0:	003b      	movs	r3, r7
 80008b2:	4463      	add	r3, ip
 80008b4:	2501      	movs	r5, #1
 80008b6:	015a      	lsls	r2, r3, #5
 80008b8:	d400      	bmi.n	80008bc <__aeabi_fadd+0x2b4>
 80008ba:	e761      	b.n	8000780 <__aeabi_fadd+0x178>
 80008bc:	2502      	movs	r5, #2
 80008be:	e6f7      	b.n	80006b0 <__aeabi_fadd+0xa8>
 80008c0:	4663      	mov	r3, ip
 80008c2:	2501      	movs	r5, #1
 80008c4:	1afb      	subs	r3, r7, r3
 80008c6:	e707      	b.n	80006d8 <__aeabi_fadd+0xd0>
 80008c8:	2320      	movs	r3, #32
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	0038      	movs	r0, r7
 80008ce:	409f      	lsls	r7, r3
 80008d0:	003b      	movs	r3, r7
 80008d2:	40d0      	lsrs	r0, r2
 80008d4:	1e5a      	subs	r2, r3, #1
 80008d6:	4193      	sbcs	r3, r2
 80008d8:	4303      	orrs	r3, r0
 80008da:	e7ae      	b.n	800083a <__aeabi_fadd+0x232>
 80008dc:	2320      	movs	r3, #32
 80008de:	1a9b      	subs	r3, r3, r2
 80008e0:	0039      	movs	r1, r7
 80008e2:	409f      	lsls	r7, r3
 80008e4:	003b      	movs	r3, r7
 80008e6:	40d1      	lsrs	r1, r2
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	4193      	sbcs	r3, r2
 80008ec:	430b      	orrs	r3, r1
 80008ee:	e773      	b.n	80007d8 <__aeabi_fadd+0x1d0>
 80008f0:	2f00      	cmp	r7, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x2ee>
 80008f4:	e758      	b.n	80007a8 <__aeabi_fadd+0x1a0>
 80008f6:	4662      	mov	r2, ip
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x2f6>
 80008fc:	e755      	b.n	80007aa <__aeabi_fadd+0x1a2>
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4213      	tst	r3, r2
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x300>
 8000906:	e750      	b.n	80007aa <__aeabi_fadd+0x1a2>
 8000908:	4641      	mov	r1, r8
 800090a:	4211      	tst	r1, r2
 800090c:	d000      	beq.n	8000910 <__aeabi_fadd+0x308>
 800090e:	e74c      	b.n	80007aa <__aeabi_fadd+0x1a2>
 8000910:	4643      	mov	r3, r8
 8000912:	e74a      	b.n	80007aa <__aeabi_fadd+0x1a2>
 8000914:	4663      	mov	r3, ip
 8000916:	2b00      	cmp	r3, #0
 8000918:	d083      	beq.n	8000822 <__aeabi_fadd+0x21a>
 800091a:	000c      	movs	r4, r1
 800091c:	4646      	mov	r6, r8
 800091e:	2000      	movs	r0, #0
 8000920:	e6f9      	b.n	8000716 <__aeabi_fadd+0x10e>
 8000922:	4663      	mov	r3, ip
 8000924:	000c      	movs	r4, r1
 8000926:	1bdb      	subs	r3, r3, r7
 8000928:	3501      	adds	r5, #1
 800092a:	e6d5      	b.n	80006d8 <__aeabi_fadd+0xd0>
 800092c:	4646      	mov	r6, r8
 800092e:	2000      	movs	r0, #0
 8000930:	e6f1      	b.n	8000716 <__aeabi_fadd+0x10e>
 8000932:	2b00      	cmp	r3, #0
 8000934:	d000      	beq.n	8000938 <__aeabi_fadd+0x330>
 8000936:	e723      	b.n	8000780 <__aeabi_fadd+0x178>
 8000938:	2400      	movs	r4, #0
 800093a:	2600      	movs	r6, #0
 800093c:	e6eb      	b.n	8000716 <__aeabi_fadd+0x10e>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	7dffffff 	.word	0x7dffffff
 8000944:	fbffffff 	.word	0xfbffffff

08000948 <__aeabi_fdiv>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	464f      	mov	r7, r9
 800094c:	4646      	mov	r6, r8
 800094e:	46d6      	mov	lr, sl
 8000950:	0245      	lsls	r5, r0, #9
 8000952:	b5c0      	push	{r6, r7, lr}
 8000954:	0047      	lsls	r7, r0, #1
 8000956:	1c0c      	adds	r4, r1, #0
 8000958:	0a6d      	lsrs	r5, r5, #9
 800095a:	0e3f      	lsrs	r7, r7, #24
 800095c:	0fc6      	lsrs	r6, r0, #31
 800095e:	2f00      	cmp	r7, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fdiv+0x1c>
 8000962:	e06f      	b.n	8000a44 <__aeabi_fdiv+0xfc>
 8000964:	2fff      	cmp	r7, #255	; 0xff
 8000966:	d100      	bne.n	800096a <__aeabi_fdiv+0x22>
 8000968:	e074      	b.n	8000a54 <__aeabi_fdiv+0x10c>
 800096a:	2300      	movs	r3, #0
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	4699      	mov	r9, r3
 8000970:	469a      	mov	sl, r3
 8000972:	00ed      	lsls	r5, r5, #3
 8000974:	04d2      	lsls	r2, r2, #19
 8000976:	4315      	orrs	r5, r2
 8000978:	3f7f      	subs	r7, #127	; 0x7f
 800097a:	0263      	lsls	r3, r4, #9
 800097c:	0a5b      	lsrs	r3, r3, #9
 800097e:	4698      	mov	r8, r3
 8000980:	0063      	lsls	r3, r4, #1
 8000982:	0e1b      	lsrs	r3, r3, #24
 8000984:	0fe4      	lsrs	r4, r4, #31
 8000986:	2b00      	cmp	r3, #0
 8000988:	d04d      	beq.n	8000a26 <__aeabi_fdiv+0xde>
 800098a:	2bff      	cmp	r3, #255	; 0xff
 800098c:	d045      	beq.n	8000a1a <__aeabi_fdiv+0xd2>
 800098e:	4642      	mov	r2, r8
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	00d2      	lsls	r2, r2, #3
 8000994:	04c9      	lsls	r1, r1, #19
 8000996:	4311      	orrs	r1, r2
 8000998:	4688      	mov	r8, r1
 800099a:	2200      	movs	r2, #0
 800099c:	3b7f      	subs	r3, #127	; 0x7f
 800099e:	0031      	movs	r1, r6
 80009a0:	1aff      	subs	r7, r7, r3
 80009a2:	464b      	mov	r3, r9
 80009a4:	4061      	eors	r1, r4
 80009a6:	b2c9      	uxtb	r1, r1
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d900      	bls.n	80009ae <__aeabi_fdiv+0x66>
 80009ac:	e0b8      	b.n	8000b20 <__aeabi_fdiv+0x1d8>
 80009ae:	4870      	ldr	r0, [pc, #448]	; (8000b70 <__aeabi_fdiv+0x228>)
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	58c3      	ldr	r3, [r0, r3]
 80009b4:	469f      	mov	pc, r3
 80009b6:	2300      	movs	r3, #0
 80009b8:	4698      	mov	r8, r3
 80009ba:	0026      	movs	r6, r4
 80009bc:	4645      	mov	r5, r8
 80009be:	4692      	mov	sl, r2
 80009c0:	4653      	mov	r3, sl
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fdiv+0x80>
 80009c6:	e08d      	b.n	8000ae4 <__aeabi_fdiv+0x19c>
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d100      	bne.n	80009ce <__aeabi_fdiv+0x86>
 80009cc:	e0a1      	b.n	8000b12 <__aeabi_fdiv+0x1ca>
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d018      	beq.n	8000a04 <__aeabi_fdiv+0xbc>
 80009d2:	003b      	movs	r3, r7
 80009d4:	337f      	adds	r3, #127	; 0x7f
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dd6d      	ble.n	8000ab6 <__aeabi_fdiv+0x16e>
 80009da:	076a      	lsls	r2, r5, #29
 80009dc:	d004      	beq.n	80009e8 <__aeabi_fdiv+0xa0>
 80009de:	220f      	movs	r2, #15
 80009e0:	402a      	ands	r2, r5
 80009e2:	2a04      	cmp	r2, #4
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fdiv+0xa0>
 80009e6:	3504      	adds	r5, #4
 80009e8:	012a      	lsls	r2, r5, #4
 80009ea:	d503      	bpl.n	80009f4 <__aeabi_fdiv+0xac>
 80009ec:	4b61      	ldr	r3, [pc, #388]	; (8000b74 <__aeabi_fdiv+0x22c>)
 80009ee:	401d      	ands	r5, r3
 80009f0:	003b      	movs	r3, r7
 80009f2:	3380      	adds	r3, #128	; 0x80
 80009f4:	2bfe      	cmp	r3, #254	; 0xfe
 80009f6:	dd00      	ble.n	80009fa <__aeabi_fdiv+0xb2>
 80009f8:	e074      	b.n	8000ae4 <__aeabi_fdiv+0x19c>
 80009fa:	01aa      	lsls	r2, r5, #6
 80009fc:	0a52      	lsrs	r2, r2, #9
 80009fe:	b2d8      	uxtb	r0, r3
 8000a00:	e002      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000a02:	000e      	movs	r6, r1
 8000a04:	2000      	movs	r0, #0
 8000a06:	2200      	movs	r2, #0
 8000a08:	05c0      	lsls	r0, r0, #23
 8000a0a:	07f6      	lsls	r6, r6, #31
 8000a0c:	4310      	orrs	r0, r2
 8000a0e:	4330      	orrs	r0, r6
 8000a10:	bce0      	pop	{r5, r6, r7}
 8000a12:	46ba      	mov	sl, r7
 8000a14:	46b1      	mov	r9, r6
 8000a16:	46a8      	mov	r8, r5
 8000a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d13f      	bne.n	8000aa0 <__aeabi_fdiv+0x158>
 8000a20:	2202      	movs	r2, #2
 8000a22:	3fff      	subs	r7, #255	; 0xff
 8000a24:	e003      	b.n	8000a2e <__aeabi_fdiv+0xe6>
 8000a26:	4643      	mov	r3, r8
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12d      	bne.n	8000a88 <__aeabi_fdiv+0x140>
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	0031      	movs	r1, r6
 8000a30:	464b      	mov	r3, r9
 8000a32:	4061      	eors	r1, r4
 8000a34:	b2c9      	uxtb	r1, r1
 8000a36:	4313      	orrs	r3, r2
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d838      	bhi.n	8000aae <__aeabi_fdiv+0x166>
 8000a3c:	484e      	ldr	r0, [pc, #312]	; (8000b78 <__aeabi_fdiv+0x230>)
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	58c3      	ldr	r3, [r0, r3]
 8000a42:	469f      	mov	pc, r3
 8000a44:	2d00      	cmp	r5, #0
 8000a46:	d113      	bne.n	8000a70 <__aeabi_fdiv+0x128>
 8000a48:	2304      	movs	r3, #4
 8000a4a:	4699      	mov	r9, r3
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	2700      	movs	r7, #0
 8000a50:	469a      	mov	sl, r3
 8000a52:	e792      	b.n	800097a <__aeabi_fdiv+0x32>
 8000a54:	2d00      	cmp	r5, #0
 8000a56:	d105      	bne.n	8000a64 <__aeabi_fdiv+0x11c>
 8000a58:	2308      	movs	r3, #8
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b06      	subs	r3, #6
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e78a      	b.n	800097a <__aeabi_fdiv+0x32>
 8000a64:	230c      	movs	r3, #12
 8000a66:	4699      	mov	r9, r3
 8000a68:	3b09      	subs	r3, #9
 8000a6a:	27ff      	movs	r7, #255	; 0xff
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	e784      	b.n	800097a <__aeabi_fdiv+0x32>
 8000a70:	0028      	movs	r0, r5
 8000a72:	f002 fbf1 	bl	8003258 <__clzsi2>
 8000a76:	2776      	movs	r7, #118	; 0x76
 8000a78:	1f43      	subs	r3, r0, #5
 8000a7a:	409d      	lsls	r5, r3
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	427f      	negs	r7, r7
 8000a80:	4699      	mov	r9, r3
 8000a82:	469a      	mov	sl, r3
 8000a84:	1a3f      	subs	r7, r7, r0
 8000a86:	e778      	b.n	800097a <__aeabi_fdiv+0x32>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	f002 fbe5 	bl	8003258 <__clzsi2>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	1f43      	subs	r3, r0, #5
 8000a92:	409a      	lsls	r2, r3
 8000a94:	2376      	movs	r3, #118	; 0x76
 8000a96:	425b      	negs	r3, r3
 8000a98:	4690      	mov	r8, r2
 8000a9a:	1a1b      	subs	r3, r3, r0
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	e77e      	b.n	800099e <__aeabi_fdiv+0x56>
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	464a      	mov	r2, r9
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	4691      	mov	r9, r2
 8000aa8:	33fc      	adds	r3, #252	; 0xfc
 8000aaa:	2203      	movs	r2, #3
 8000aac:	e777      	b.n	800099e <__aeabi_fdiv+0x56>
 8000aae:	000e      	movs	r6, r1
 8000ab0:	20ff      	movs	r0, #255	; 0xff
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	e7a8      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	2b1b      	cmp	r3, #27
 8000abc:	dca2      	bgt.n	8000a04 <__aeabi_fdiv+0xbc>
 8000abe:	379e      	adds	r7, #158	; 0x9e
 8000ac0:	002a      	movs	r2, r5
 8000ac2:	40bd      	lsls	r5, r7
 8000ac4:	40da      	lsrs	r2, r3
 8000ac6:	1e6b      	subs	r3, r5, #1
 8000ac8:	419d      	sbcs	r5, r3
 8000aca:	4315      	orrs	r5, r2
 8000acc:	076a      	lsls	r2, r5, #29
 8000ace:	d004      	beq.n	8000ada <__aeabi_fdiv+0x192>
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	402a      	ands	r2, r5
 8000ad4:	2a04      	cmp	r2, #4
 8000ad6:	d000      	beq.n	8000ada <__aeabi_fdiv+0x192>
 8000ad8:	3504      	adds	r5, #4
 8000ada:	016a      	lsls	r2, r5, #5
 8000adc:	d544      	bpl.n	8000b68 <__aeabi_fdiv+0x220>
 8000ade:	2001      	movs	r0, #1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	e791      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000ae4:	20ff      	movs	r0, #255	; 0xff
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	e78e      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	2600      	movs	r6, #0
 8000aee:	20ff      	movs	r0, #255	; 0xff
 8000af0:	03d2      	lsls	r2, r2, #15
 8000af2:	e789      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000af4:	2300      	movs	r3, #0
 8000af6:	4698      	mov	r8, r3
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	03d2      	lsls	r2, r2, #15
 8000afc:	4215      	tst	r5, r2
 8000afe:	d008      	beq.n	8000b12 <__aeabi_fdiv+0x1ca>
 8000b00:	4643      	mov	r3, r8
 8000b02:	4213      	tst	r3, r2
 8000b04:	d105      	bne.n	8000b12 <__aeabi_fdiv+0x1ca>
 8000b06:	431a      	orrs	r2, r3
 8000b08:	0252      	lsls	r2, r2, #9
 8000b0a:	0026      	movs	r6, r4
 8000b0c:	20ff      	movs	r0, #255	; 0xff
 8000b0e:	0a52      	lsrs	r2, r2, #9
 8000b10:	e77a      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	03d2      	lsls	r2, r2, #15
 8000b16:	432a      	orrs	r2, r5
 8000b18:	0252      	lsls	r2, r2, #9
 8000b1a:	20ff      	movs	r0, #255	; 0xff
 8000b1c:	0a52      	lsrs	r2, r2, #9
 8000b1e:	e773      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000b20:	4642      	mov	r2, r8
 8000b22:	016b      	lsls	r3, r5, #5
 8000b24:	0155      	lsls	r5, r2, #5
 8000b26:	42ab      	cmp	r3, r5
 8000b28:	d21a      	bcs.n	8000b60 <__aeabi_fdiv+0x218>
 8000b2a:	201b      	movs	r0, #27
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	3f01      	subs	r7, #1
 8000b30:	2601      	movs	r6, #1
 8000b32:	001c      	movs	r4, r3
 8000b34:	0052      	lsls	r2, r2, #1
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	db01      	blt.n	8000b40 <__aeabi_fdiv+0x1f8>
 8000b3c:	429d      	cmp	r5, r3
 8000b3e:	d801      	bhi.n	8000b44 <__aeabi_fdiv+0x1fc>
 8000b40:	1b5b      	subs	r3, r3, r5
 8000b42:	4332      	orrs	r2, r6
 8000b44:	3801      	subs	r0, #1
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d1f3      	bne.n	8000b32 <__aeabi_fdiv+0x1ea>
 8000b4a:	1e58      	subs	r0, r3, #1
 8000b4c:	4183      	sbcs	r3, r0
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	001d      	movs	r5, r3
 8000b52:	003b      	movs	r3, r7
 8000b54:	337f      	adds	r3, #127	; 0x7f
 8000b56:	000e      	movs	r6, r1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dd00      	ble.n	8000b5e <__aeabi_fdiv+0x216>
 8000b5c:	e73d      	b.n	80009da <__aeabi_fdiv+0x92>
 8000b5e:	e7aa      	b.n	8000ab6 <__aeabi_fdiv+0x16e>
 8000b60:	201a      	movs	r0, #26
 8000b62:	2201      	movs	r2, #1
 8000b64:	1b5b      	subs	r3, r3, r5
 8000b66:	e7e3      	b.n	8000b30 <__aeabi_fdiv+0x1e8>
 8000b68:	01aa      	lsls	r2, r5, #6
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	0a52      	lsrs	r2, r2, #9
 8000b6e:	e74b      	b.n	8000a08 <__aeabi_fdiv+0xc0>
 8000b70:	0800df9c 	.word	0x0800df9c
 8000b74:	f7ffffff 	.word	0xf7ffffff
 8000b78:	0800dfdc 	.word	0x0800dfdc

08000b7c <__eqsf2>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0245      	lsls	r5, r0, #9
 8000b82:	024e      	lsls	r6, r1, #9
 8000b84:	004c      	lsls	r4, r1, #1
 8000b86:	0fc3      	lsrs	r3, r0, #31
 8000b88:	0a6d      	lsrs	r5, r5, #9
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	0e12      	lsrs	r2, r2, #24
 8000b8e:	0a76      	lsrs	r6, r6, #9
 8000b90:	0e24      	lsrs	r4, r4, #24
 8000b92:	0fc9      	lsrs	r1, r1, #31
 8000b94:	2aff      	cmp	r2, #255	; 0xff
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x2a>
 8000b98:	2cff      	cmp	r4, #255	; 0xff
 8000b9a:	d003      	beq.n	8000ba4 <__eqsf2+0x28>
 8000b9c:	42a2      	cmp	r2, r4
 8000b9e:	d101      	bne.n	8000ba4 <__eqsf2+0x28>
 8000ba0:	42b5      	cmp	r5, r6
 8000ba2:	d006      	beq.n	8000bb2 <__eqsf2+0x36>
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d1fc      	bne.n	8000ba4 <__eqsf2+0x28>
 8000baa:	2cff      	cmp	r4, #255	; 0xff
 8000bac:	d1fa      	bne.n	8000ba4 <__eqsf2+0x28>
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d1f8      	bne.n	8000ba4 <__eqsf2+0x28>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d006      	beq.n	8000bc4 <__eqsf2+0x48>
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d1f3      	bne.n	8000ba4 <__eqsf2+0x28>
 8000bbc:	0028      	movs	r0, r5
 8000bbe:	1e43      	subs	r3, r0, #1
 8000bc0:	4198      	sbcs	r0, r3
 8000bc2:	e7ef      	b.n	8000ba4 <__eqsf2+0x28>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	e7ed      	b.n	8000ba4 <__eqsf2+0x28>

08000bc8 <__gesf2>:
 8000bc8:	b570      	push	{r4, r5, r6, lr}
 8000bca:	0042      	lsls	r2, r0, #1
 8000bcc:	0245      	lsls	r5, r0, #9
 8000bce:	024e      	lsls	r6, r1, #9
 8000bd0:	004c      	lsls	r4, r1, #1
 8000bd2:	0fc3      	lsrs	r3, r0, #31
 8000bd4:	0a6d      	lsrs	r5, r5, #9
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	0a76      	lsrs	r6, r6, #9
 8000bda:	0e24      	lsrs	r4, r4, #24
 8000bdc:	0fc8      	lsrs	r0, r1, #31
 8000bde:	2aff      	cmp	r2, #255	; 0xff
 8000be0:	d01b      	beq.n	8000c1a <__gesf2+0x52>
 8000be2:	2cff      	cmp	r4, #255	; 0xff
 8000be4:	d00e      	beq.n	8000c04 <__gesf2+0x3c>
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	d11b      	bne.n	8000c22 <__gesf2+0x5a>
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d101      	bne.n	8000bf2 <__gesf2+0x2a>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d01c      	beq.n	8000c2c <__gesf2+0x64>
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	d00c      	beq.n	8000c10 <__gesf2+0x48>
 8000bf6:	4283      	cmp	r3, r0
 8000bf8:	d01c      	beq.n	8000c34 <__gesf2+0x6c>
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	1e58      	subs	r0, r3, #1
 8000bfe:	4008      	ands	r0, r1
 8000c00:	3801      	subs	r0, #1
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d122      	bne.n	8000c4e <__gesf2+0x86>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	d1f4      	bne.n	8000bf6 <__gesf2+0x2e>
 8000c0c:	2d00      	cmp	r5, #0
 8000c0e:	d1f2      	bne.n	8000bf6 <__gesf2+0x2e>
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d1f6      	bne.n	8000c02 <__gesf2+0x3a>
 8000c14:	2001      	movs	r0, #1
 8000c16:	4240      	negs	r0, r0
 8000c18:	e7f3      	b.n	8000c02 <__gesf2+0x3a>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d117      	bne.n	8000c4e <__gesf2+0x86>
 8000c1e:	2cff      	cmp	r4, #255	; 0xff
 8000c20:	d0f0      	beq.n	8000c04 <__gesf2+0x3c>
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d1e7      	bne.n	8000bf6 <__gesf2+0x2e>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d1e5      	bne.n	8000bf6 <__gesf2+0x2e>
 8000c2a:	e7e6      	b.n	8000bfa <__gesf2+0x32>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d0e7      	beq.n	8000c02 <__gesf2+0x3a>
 8000c32:	e7e2      	b.n	8000bfa <__gesf2+0x32>
 8000c34:	42a2      	cmp	r2, r4
 8000c36:	dc05      	bgt.n	8000c44 <__gesf2+0x7c>
 8000c38:	dbea      	blt.n	8000c10 <__gesf2+0x48>
 8000c3a:	42b5      	cmp	r5, r6
 8000c3c:	d802      	bhi.n	8000c44 <__gesf2+0x7c>
 8000c3e:	d3e7      	bcc.n	8000c10 <__gesf2+0x48>
 8000c40:	2000      	movs	r0, #0
 8000c42:	e7de      	b.n	8000c02 <__gesf2+0x3a>
 8000c44:	4243      	negs	r3, r0
 8000c46:	4158      	adcs	r0, r3
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	3801      	subs	r0, #1
 8000c4c:	e7d9      	b.n	8000c02 <__gesf2+0x3a>
 8000c4e:	2002      	movs	r0, #2
 8000c50:	4240      	negs	r0, r0
 8000c52:	e7d6      	b.n	8000c02 <__gesf2+0x3a>

08000c54 <__lesf2>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	0042      	lsls	r2, r0, #1
 8000c58:	0245      	lsls	r5, r0, #9
 8000c5a:	024e      	lsls	r6, r1, #9
 8000c5c:	004c      	lsls	r4, r1, #1
 8000c5e:	0fc3      	lsrs	r3, r0, #31
 8000c60:	0a6d      	lsrs	r5, r5, #9
 8000c62:	0e12      	lsrs	r2, r2, #24
 8000c64:	0a76      	lsrs	r6, r6, #9
 8000c66:	0e24      	lsrs	r4, r4, #24
 8000c68:	0fc8      	lsrs	r0, r1, #31
 8000c6a:	2aff      	cmp	r2, #255	; 0xff
 8000c6c:	d00b      	beq.n	8000c86 <__lesf2+0x32>
 8000c6e:	2cff      	cmp	r4, #255	; 0xff
 8000c70:	d00d      	beq.n	8000c8e <__lesf2+0x3a>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d11f      	bne.n	8000cb6 <__lesf2+0x62>
 8000c76:	2c00      	cmp	r4, #0
 8000c78:	d116      	bne.n	8000ca8 <__lesf2+0x54>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d114      	bne.n	8000ca8 <__lesf2+0x54>
 8000c7e:	2000      	movs	r0, #0
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d010      	beq.n	8000ca6 <__lesf2+0x52>
 8000c84:	e009      	b.n	8000c9a <__lesf2+0x46>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d10c      	bne.n	8000ca4 <__lesf2+0x50>
 8000c8a:	2cff      	cmp	r4, #255	; 0xff
 8000c8c:	d113      	bne.n	8000cb6 <__lesf2+0x62>
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d108      	bne.n	8000ca4 <__lesf2+0x50>
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	d008      	beq.n	8000ca8 <__lesf2+0x54>
 8000c96:	4283      	cmp	r3, r0
 8000c98:	d012      	beq.n	8000cc0 <__lesf2+0x6c>
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	1e58      	subs	r0, r3, #1
 8000c9e:	4008      	ands	r0, r1
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e000      	b.n	8000ca6 <__lesf2+0x52>
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d1f4      	bne.n	8000c96 <__lesf2+0x42>
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d1fa      	bne.n	8000ca6 <__lesf2+0x52>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	e7f7      	b.n	8000ca6 <__lesf2+0x52>
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	d1ed      	bne.n	8000c96 <__lesf2+0x42>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d1eb      	bne.n	8000c96 <__lesf2+0x42>
 8000cbe:	e7ec      	b.n	8000c9a <__lesf2+0x46>
 8000cc0:	42a2      	cmp	r2, r4
 8000cc2:	dc05      	bgt.n	8000cd0 <__lesf2+0x7c>
 8000cc4:	dbf2      	blt.n	8000cac <__lesf2+0x58>
 8000cc6:	42b5      	cmp	r5, r6
 8000cc8:	d802      	bhi.n	8000cd0 <__lesf2+0x7c>
 8000cca:	d3ef      	bcc.n	8000cac <__lesf2+0x58>
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e7ea      	b.n	8000ca6 <__lesf2+0x52>
 8000cd0:	4243      	negs	r3, r0
 8000cd2:	4158      	adcs	r0, r3
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	e7e5      	b.n	8000ca6 <__lesf2+0x52>
 8000cda:	46c0      	nop			; (mov r8, r8)

08000cdc <__aeabi_fmul>:
 8000cdc:	0243      	lsls	r3, r0, #9
 8000cde:	0a5b      	lsrs	r3, r3, #9
 8000ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce2:	464f      	mov	r7, r9
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	46d6      	mov	lr, sl
 8000cea:	0fc3      	lsrs	r3, r0, #31
 8000cec:	0045      	lsls	r5, r0, #1
 8000cee:	4698      	mov	r8, r3
 8000cf0:	b5c0      	push	{r6, r7, lr}
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	1c0f      	adds	r7, r1, #0
 8000cf6:	0e2d      	lsrs	r5, r5, #24
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fmul+0x20>
 8000cfa:	e0cb      	b.n	8000e94 <__aeabi_fmul+0x1b8>
 8000cfc:	2dff      	cmp	r5, #255	; 0xff
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_fmul+0x26>
 8000d00:	e0cf      	b.n	8000ea2 <__aeabi_fmul+0x1c6>
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	04d2      	lsls	r2, r2, #19
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	4691      	mov	r9, r2
 8000d0e:	2600      	movs	r6, #0
 8000d10:	469a      	mov	sl, r3
 8000d12:	3d7f      	subs	r5, #127	; 0x7f
 8000d14:	027c      	lsls	r4, r7, #9
 8000d16:	007b      	lsls	r3, r7, #1
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0fff      	lsrs	r7, r7, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_fmul+0x48>
 8000d22:	e0a9      	b.n	8000e78 <__aeabi_fmul+0x19c>
 8000d24:	2bff      	cmp	r3, #255	; 0xff
 8000d26:	d011      	beq.n	8000d4c <__aeabi_fmul+0x70>
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	00e4      	lsls	r4, r4, #3
 8000d2c:	04d2      	lsls	r2, r2, #19
 8000d2e:	4314      	orrs	r4, r2
 8000d30:	4642      	mov	r2, r8
 8000d32:	3b7f      	subs	r3, #127	; 0x7f
 8000d34:	195b      	adds	r3, r3, r5
 8000d36:	407a      	eors	r2, r7
 8000d38:	2000      	movs	r0, #0
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	1c5d      	adds	r5, r3, #1
 8000d3e:	2e0a      	cmp	r6, #10
 8000d40:	dd13      	ble.n	8000d6a <__aeabi_fmul+0x8e>
 8000d42:	003a      	movs	r2, r7
 8000d44:	2e0b      	cmp	r6, #11
 8000d46:	d047      	beq.n	8000dd8 <__aeabi_fmul+0xfc>
 8000d48:	4647      	mov	r7, r8
 8000d4a:	e03f      	b.n	8000dcc <__aeabi_fmul+0xf0>
 8000d4c:	002b      	movs	r3, r5
 8000d4e:	33ff      	adds	r3, #255	; 0xff
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d11e      	bne.n	8000d92 <__aeabi_fmul+0xb6>
 8000d54:	2202      	movs	r2, #2
 8000d56:	4316      	orrs	r6, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	3501      	adds	r5, #1
 8000d5c:	407a      	eors	r2, r7
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	35ff      	adds	r5, #255	; 0xff
 8000d62:	2e0a      	cmp	r6, #10
 8000d64:	dd00      	ble.n	8000d68 <__aeabi_fmul+0x8c>
 8000d66:	e0e4      	b.n	8000f32 <__aeabi_fmul+0x256>
 8000d68:	2002      	movs	r0, #2
 8000d6a:	2e02      	cmp	r6, #2
 8000d6c:	dc1c      	bgt.n	8000da8 <__aeabi_fmul+0xcc>
 8000d6e:	3e01      	subs	r6, #1
 8000d70:	2e01      	cmp	r6, #1
 8000d72:	d842      	bhi.n	8000dfa <__aeabi_fmul+0x11e>
 8000d74:	2802      	cmp	r0, #2
 8000d76:	d03d      	beq.n	8000df4 <__aeabi_fmul+0x118>
 8000d78:	2801      	cmp	r0, #1
 8000d7a:	d166      	bne.n	8000e4a <__aeabi_fmul+0x16e>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	05c0      	lsls	r0, r0, #23
 8000d82:	4308      	orrs	r0, r1
 8000d84:	07d2      	lsls	r2, r2, #31
 8000d86:	4310      	orrs	r0, r2
 8000d88:	bce0      	pop	{r5, r6, r7}
 8000d8a:	46ba      	mov	sl, r7
 8000d8c:	46b1      	mov	r9, r6
 8000d8e:	46a8      	mov	r8, r5
 8000d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d92:	2203      	movs	r2, #3
 8000d94:	4316      	orrs	r6, r2
 8000d96:	4642      	mov	r2, r8
 8000d98:	3501      	adds	r5, #1
 8000d9a:	407a      	eors	r2, r7
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	35ff      	adds	r5, #255	; 0xff
 8000da0:	2e0a      	cmp	r6, #10
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_fmul+0xca>
 8000da4:	e0e4      	b.n	8000f70 <__aeabi_fmul+0x294>
 8000da6:	2003      	movs	r0, #3
 8000da8:	2101      	movs	r1, #1
 8000daa:	40b1      	lsls	r1, r6
 8000dac:	26a6      	movs	r6, #166	; 0xa6
 8000dae:	00f6      	lsls	r6, r6, #3
 8000db0:	4231      	tst	r1, r6
 8000db2:	d10a      	bne.n	8000dca <__aeabi_fmul+0xee>
 8000db4:	2690      	movs	r6, #144	; 0x90
 8000db6:	00b6      	lsls	r6, r6, #2
 8000db8:	4231      	tst	r1, r6
 8000dba:	d116      	bne.n	8000dea <__aeabi_fmul+0x10e>
 8000dbc:	3eb9      	subs	r6, #185	; 0xb9
 8000dbe:	3eff      	subs	r6, #255	; 0xff
 8000dc0:	420e      	tst	r6, r1
 8000dc2:	d01a      	beq.n	8000dfa <__aeabi_fmul+0x11e>
 8000dc4:	46a1      	mov	r9, r4
 8000dc6:	4682      	mov	sl, r0
 8000dc8:	e000      	b.n	8000dcc <__aeabi_fmul+0xf0>
 8000dca:	0017      	movs	r7, r2
 8000dcc:	4653      	mov	r3, sl
 8000dce:	003a      	movs	r2, r7
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d00f      	beq.n	8000df4 <__aeabi_fmul+0x118>
 8000dd4:	464c      	mov	r4, r9
 8000dd6:	4650      	mov	r0, sl
 8000dd8:	2803      	cmp	r0, #3
 8000dda:	d1cd      	bne.n	8000d78 <__aeabi_fmul+0x9c>
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	03c9      	lsls	r1, r1, #15
 8000de0:	4321      	orrs	r1, r4
 8000de2:	0249      	lsls	r1, r1, #9
 8000de4:	20ff      	movs	r0, #255	; 0xff
 8000de6:	0a49      	lsrs	r1, r1, #9
 8000de8:	e7ca      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	2200      	movs	r2, #0
 8000dee:	20ff      	movs	r0, #255	; 0xff
 8000df0:	03c9      	lsls	r1, r1, #15
 8000df2:	e7c5      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000df4:	20ff      	movs	r0, #255	; 0xff
 8000df6:	2100      	movs	r1, #0
 8000df8:	e7c2      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000dfa:	0c20      	lsrs	r0, r4, #16
 8000dfc:	4649      	mov	r1, r9
 8000dfe:	0424      	lsls	r4, r4, #16
 8000e00:	0c24      	lsrs	r4, r4, #16
 8000e02:	0027      	movs	r7, r4
 8000e04:	0c0e      	lsrs	r6, r1, #16
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	0c09      	lsrs	r1, r1, #16
 8000e0a:	4374      	muls	r4, r6
 8000e0c:	434f      	muls	r7, r1
 8000e0e:	4346      	muls	r6, r0
 8000e10:	4348      	muls	r0, r1
 8000e12:	0c39      	lsrs	r1, r7, #16
 8000e14:	1900      	adds	r0, r0, r4
 8000e16:	1809      	adds	r1, r1, r0
 8000e18:	428c      	cmp	r4, r1
 8000e1a:	d903      	bls.n	8000e24 <__aeabi_fmul+0x148>
 8000e1c:	2080      	movs	r0, #128	; 0x80
 8000e1e:	0240      	lsls	r0, r0, #9
 8000e20:	4684      	mov	ip, r0
 8000e22:	4466      	add	r6, ip
 8000e24:	043f      	lsls	r7, r7, #16
 8000e26:	0408      	lsls	r0, r1, #16
 8000e28:	0c3f      	lsrs	r7, r7, #16
 8000e2a:	19c0      	adds	r0, r0, r7
 8000e2c:	0184      	lsls	r4, r0, #6
 8000e2e:	1e67      	subs	r7, r4, #1
 8000e30:	41bc      	sbcs	r4, r7
 8000e32:	0c09      	lsrs	r1, r1, #16
 8000e34:	0e80      	lsrs	r0, r0, #26
 8000e36:	1989      	adds	r1, r1, r6
 8000e38:	4304      	orrs	r4, r0
 8000e3a:	0189      	lsls	r1, r1, #6
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	0109      	lsls	r1, r1, #4
 8000e40:	d571      	bpl.n	8000f26 <__aeabi_fmul+0x24a>
 8000e42:	2301      	movs	r3, #1
 8000e44:	0861      	lsrs	r1, r4, #1
 8000e46:	401c      	ands	r4, r3
 8000e48:	430c      	orrs	r4, r1
 8000e4a:	002b      	movs	r3, r5
 8000e4c:	337f      	adds	r3, #127	; 0x7f
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	dd51      	ble.n	8000ef6 <__aeabi_fmul+0x21a>
 8000e52:	0761      	lsls	r1, r4, #29
 8000e54:	d004      	beq.n	8000e60 <__aeabi_fmul+0x184>
 8000e56:	210f      	movs	r1, #15
 8000e58:	4021      	ands	r1, r4
 8000e5a:	2904      	cmp	r1, #4
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fmul+0x184>
 8000e5e:	3404      	adds	r4, #4
 8000e60:	0121      	lsls	r1, r4, #4
 8000e62:	d503      	bpl.n	8000e6c <__aeabi_fmul+0x190>
 8000e64:	4b43      	ldr	r3, [pc, #268]	; (8000f74 <__aeabi_fmul+0x298>)
 8000e66:	401c      	ands	r4, r3
 8000e68:	002b      	movs	r3, r5
 8000e6a:	3380      	adds	r3, #128	; 0x80
 8000e6c:	2bfe      	cmp	r3, #254	; 0xfe
 8000e6e:	dcc1      	bgt.n	8000df4 <__aeabi_fmul+0x118>
 8000e70:	01a1      	lsls	r1, r4, #6
 8000e72:	0a49      	lsrs	r1, r1, #9
 8000e74:	b2d8      	uxtb	r0, r3
 8000e76:	e783      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000e78:	2c00      	cmp	r4, #0
 8000e7a:	d12c      	bne.n	8000ed6 <__aeabi_fmul+0x1fa>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4642      	mov	r2, r8
 8000e80:	431e      	orrs	r6, r3
 8000e82:	002b      	movs	r3, r5
 8000e84:	407a      	eors	r2, r7
 8000e86:	2001      	movs	r0, #1
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	1c5d      	adds	r5, r3, #1
 8000e8c:	2e0a      	cmp	r6, #10
 8000e8e:	dd00      	ble.n	8000e92 <__aeabi_fmul+0x1b6>
 8000e90:	e757      	b.n	8000d42 <__aeabi_fmul+0x66>
 8000e92:	e76a      	b.n	8000d6a <__aeabi_fmul+0x8e>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d110      	bne.n	8000eba <__aeabi_fmul+0x1de>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	2604      	movs	r6, #4
 8000e9c:	2500      	movs	r5, #0
 8000e9e:	469a      	mov	sl, r3
 8000ea0:	e738      	b.n	8000d14 <__aeabi_fmul+0x38>
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d104      	bne.n	8000eb0 <__aeabi_fmul+0x1d4>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	2608      	movs	r6, #8
 8000eaa:	25ff      	movs	r5, #255	; 0xff
 8000eac:	469a      	mov	sl, r3
 8000eae:	e731      	b.n	8000d14 <__aeabi_fmul+0x38>
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	260c      	movs	r6, #12
 8000eb4:	25ff      	movs	r5, #255	; 0xff
 8000eb6:	469a      	mov	sl, r3
 8000eb8:	e72c      	b.n	8000d14 <__aeabi_fmul+0x38>
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f002 f9cc 	bl	8003258 <__clzsi2>
 8000ec0:	464a      	mov	r2, r9
 8000ec2:	1f43      	subs	r3, r0, #5
 8000ec4:	2576      	movs	r5, #118	; 0x76
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	426d      	negs	r5, r5
 8000ecc:	4691      	mov	r9, r2
 8000ece:	2600      	movs	r6, #0
 8000ed0:	469a      	mov	sl, r3
 8000ed2:	1a2d      	subs	r5, r5, r0
 8000ed4:	e71e      	b.n	8000d14 <__aeabi_fmul+0x38>
 8000ed6:	0020      	movs	r0, r4
 8000ed8:	f002 f9be 	bl	8003258 <__clzsi2>
 8000edc:	4642      	mov	r2, r8
 8000ede:	1f43      	subs	r3, r0, #5
 8000ee0:	409c      	lsls	r4, r3
 8000ee2:	1a2b      	subs	r3, r5, r0
 8000ee4:	3b76      	subs	r3, #118	; 0x76
 8000ee6:	407a      	eors	r2, r7
 8000ee8:	2000      	movs	r0, #0
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	1c5d      	adds	r5, r3, #1
 8000eee:	2e0a      	cmp	r6, #10
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x218>
 8000ef2:	e726      	b.n	8000d42 <__aeabi_fmul+0x66>
 8000ef4:	e739      	b.n	8000d6a <__aeabi_fmul+0x8e>
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	2b1b      	cmp	r3, #27
 8000efc:	dd00      	ble.n	8000f00 <__aeabi_fmul+0x224>
 8000efe:	e73d      	b.n	8000d7c <__aeabi_fmul+0xa0>
 8000f00:	359e      	adds	r5, #158	; 0x9e
 8000f02:	0021      	movs	r1, r4
 8000f04:	40ac      	lsls	r4, r5
 8000f06:	40d9      	lsrs	r1, r3
 8000f08:	1e63      	subs	r3, r4, #1
 8000f0a:	419c      	sbcs	r4, r3
 8000f0c:	4321      	orrs	r1, r4
 8000f0e:	074b      	lsls	r3, r1, #29
 8000f10:	d004      	beq.n	8000f1c <__aeabi_fmul+0x240>
 8000f12:	230f      	movs	r3, #15
 8000f14:	400b      	ands	r3, r1
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d000      	beq.n	8000f1c <__aeabi_fmul+0x240>
 8000f1a:	3104      	adds	r1, #4
 8000f1c:	014b      	lsls	r3, r1, #5
 8000f1e:	d504      	bpl.n	8000f2a <__aeabi_fmul+0x24e>
 8000f20:	2001      	movs	r0, #1
 8000f22:	2100      	movs	r1, #0
 8000f24:	e72c      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000f26:	001d      	movs	r5, r3
 8000f28:	e78f      	b.n	8000e4a <__aeabi_fmul+0x16e>
 8000f2a:	0189      	lsls	r1, r1, #6
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	e726      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000f32:	2302      	movs	r3, #2
 8000f34:	2e0f      	cmp	r6, #15
 8000f36:	d10c      	bne.n	8000f52 <__aeabi_fmul+0x276>
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	464b      	mov	r3, r9
 8000f3c:	03c9      	lsls	r1, r1, #15
 8000f3e:	420b      	tst	r3, r1
 8000f40:	d00d      	beq.n	8000f5e <__aeabi_fmul+0x282>
 8000f42:	420c      	tst	r4, r1
 8000f44:	d10b      	bne.n	8000f5e <__aeabi_fmul+0x282>
 8000f46:	4321      	orrs	r1, r4
 8000f48:	0249      	lsls	r1, r1, #9
 8000f4a:	003a      	movs	r2, r7
 8000f4c:	20ff      	movs	r0, #255	; 0xff
 8000f4e:	0a49      	lsrs	r1, r1, #9
 8000f50:	e716      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000f52:	2e0b      	cmp	r6, #11
 8000f54:	d000      	beq.n	8000f58 <__aeabi_fmul+0x27c>
 8000f56:	e6f7      	b.n	8000d48 <__aeabi_fmul+0x6c>
 8000f58:	46a1      	mov	r9, r4
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	e736      	b.n	8000dcc <__aeabi_fmul+0xf0>
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	464b      	mov	r3, r9
 8000f62:	03c9      	lsls	r1, r1, #15
 8000f64:	4319      	orrs	r1, r3
 8000f66:	0249      	lsls	r1, r1, #9
 8000f68:	4642      	mov	r2, r8
 8000f6a:	20ff      	movs	r0, #255	; 0xff
 8000f6c:	0a49      	lsrs	r1, r1, #9
 8000f6e:	e707      	b.n	8000d80 <__aeabi_fmul+0xa4>
 8000f70:	2303      	movs	r3, #3
 8000f72:	e7df      	b.n	8000f34 <__aeabi_fmul+0x258>
 8000f74:	f7ffffff 	.word	0xf7ffffff

08000f78 <__aeabi_fsub>:
 8000f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7a:	46c6      	mov	lr, r8
 8000f7c:	0243      	lsls	r3, r0, #9
 8000f7e:	0a5b      	lsrs	r3, r3, #9
 8000f80:	0045      	lsls	r5, r0, #1
 8000f82:	00da      	lsls	r2, r3, #3
 8000f84:	0fc4      	lsrs	r4, r0, #31
 8000f86:	0248      	lsls	r0, r1, #9
 8000f88:	004f      	lsls	r7, r1, #1
 8000f8a:	4694      	mov	ip, r2
 8000f8c:	0a42      	lsrs	r2, r0, #9
 8000f8e:	001e      	movs	r6, r3
 8000f90:	4690      	mov	r8, r2
 8000f92:	b500      	push	{lr}
 8000f94:	0e2d      	lsrs	r5, r5, #24
 8000f96:	0e3f      	lsrs	r7, r7, #24
 8000f98:	0fc9      	lsrs	r1, r1, #31
 8000f9a:	0980      	lsrs	r0, r0, #6
 8000f9c:	2fff      	cmp	r7, #255	; 0xff
 8000f9e:	d059      	beq.n	8001054 <__aeabi_fsub+0xdc>
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4051      	eors	r1, r2
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d039      	beq.n	800101c <__aeabi_fsub+0xa4>
 8000fa8:	1bea      	subs	r2, r5, r7
 8000faa:	2a00      	cmp	r2, #0
 8000fac:	dd58      	ble.n	8001060 <__aeabi_fsub+0xe8>
 8000fae:	2f00      	cmp	r7, #0
 8000fb0:	d068      	beq.n	8001084 <__aeabi_fsub+0x10c>
 8000fb2:	2dff      	cmp	r5, #255	; 0xff
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0x40>
 8000fb6:	e0d1      	b.n	800115c <__aeabi_fsub+0x1e4>
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	04db      	lsls	r3, r3, #19
 8000fbc:	4318      	orrs	r0, r3
 8000fbe:	2a1b      	cmp	r2, #27
 8000fc0:	dc00      	bgt.n	8000fc4 <__aeabi_fsub+0x4c>
 8000fc2:	e0e3      	b.n	800118c <__aeabi_fsub+0x214>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4662      	mov	r2, ip
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	015a      	lsls	r2, r3, #5
 8000fcc:	d400      	bmi.n	8000fd0 <__aeabi_fsub+0x58>
 8000fce:	e0ac      	b.n	800112a <__aeabi_fsub+0x1b2>
 8000fd0:	019b      	lsls	r3, r3, #6
 8000fd2:	099e      	lsrs	r6, r3, #6
 8000fd4:	0030      	movs	r0, r6
 8000fd6:	f002 f93f 	bl	8003258 <__clzsi2>
 8000fda:	0033      	movs	r3, r6
 8000fdc:	3805      	subs	r0, #5
 8000fde:	4083      	lsls	r3, r0
 8000fe0:	4285      	cmp	r5, r0
 8000fe2:	dc00      	bgt.n	8000fe6 <__aeabi_fsub+0x6e>
 8000fe4:	e0c6      	b.n	8001174 <__aeabi_fsub+0x1fc>
 8000fe6:	4ab2      	ldr	r2, [pc, #712]	; (80012b0 <__aeabi_fsub+0x338>)
 8000fe8:	1a2d      	subs	r5, r5, r0
 8000fea:	4013      	ands	r3, r2
 8000fec:	075a      	lsls	r2, r3, #29
 8000fee:	d004      	beq.n	8000ffa <__aeabi_fsub+0x82>
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	2a04      	cmp	r2, #4
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_fsub+0x82>
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	015a      	lsls	r2, r3, #5
 8000ffc:	d400      	bmi.n	8001000 <__aeabi_fsub+0x88>
 8000ffe:	e097      	b.n	8001130 <__aeabi_fsub+0x1b8>
 8001000:	1c6a      	adds	r2, r5, #1
 8001002:	2dfe      	cmp	r5, #254	; 0xfe
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x90>
 8001006:	e084      	b.n	8001112 <__aeabi_fsub+0x19a>
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	0a5e      	lsrs	r6, r3, #9
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	05d0      	lsls	r0, r2, #23
 8001010:	4330      	orrs	r0, r6
 8001012:	07e4      	lsls	r4, r4, #31
 8001014:	4320      	orrs	r0, r4
 8001016:	bc80      	pop	{r7}
 8001018:	46b8      	mov	r8, r7
 800101a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101c:	1bea      	subs	r2, r5, r7
 800101e:	2a00      	cmp	r2, #0
 8001020:	dd41      	ble.n	80010a6 <__aeabi_fsub+0x12e>
 8001022:	2f00      	cmp	r7, #0
 8001024:	d06b      	beq.n	80010fe <__aeabi_fsub+0x186>
 8001026:	2dff      	cmp	r5, #255	; 0xff
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0xb4>
 800102a:	e097      	b.n	800115c <__aeabi_fsub+0x1e4>
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	04db      	lsls	r3, r3, #19
 8001030:	4318      	orrs	r0, r3
 8001032:	2a1b      	cmp	r2, #27
 8001034:	dc00      	bgt.n	8001038 <__aeabi_fsub+0xc0>
 8001036:	e0cc      	b.n	80011d2 <__aeabi_fsub+0x25a>
 8001038:	2301      	movs	r3, #1
 800103a:	4463      	add	r3, ip
 800103c:	015a      	lsls	r2, r3, #5
 800103e:	d574      	bpl.n	800112a <__aeabi_fsub+0x1b2>
 8001040:	3501      	adds	r5, #1
 8001042:	2dff      	cmp	r5, #255	; 0xff
 8001044:	d065      	beq.n	8001112 <__aeabi_fsub+0x19a>
 8001046:	2201      	movs	r2, #1
 8001048:	499a      	ldr	r1, [pc, #616]	; (80012b4 <__aeabi_fsub+0x33c>)
 800104a:	401a      	ands	r2, r3
 800104c:	085b      	lsrs	r3, r3, #1
 800104e:	400b      	ands	r3, r1
 8001050:	4313      	orrs	r3, r2
 8001052:	e7cb      	b.n	8000fec <__aeabi_fsub+0x74>
 8001054:	2800      	cmp	r0, #0
 8001056:	d01f      	beq.n	8001098 <__aeabi_fsub+0x120>
 8001058:	428c      	cmp	r4, r1
 800105a:	d022      	beq.n	80010a2 <__aeabi_fsub+0x12a>
 800105c:	002a      	movs	r2, r5
 800105e:	3aff      	subs	r2, #255	; 0xff
 8001060:	2a00      	cmp	r2, #0
 8001062:	d035      	beq.n	80010d0 <__aeabi_fsub+0x158>
 8001064:	1b7a      	subs	r2, r7, r5
 8001066:	2d00      	cmp	r5, #0
 8001068:	d000      	beq.n	800106c <__aeabi_fsub+0xf4>
 800106a:	e099      	b.n	80011a0 <__aeabi_fsub+0x228>
 800106c:	4663      	mov	r3, ip
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_fsub+0xfc>
 8001072:	e0dd      	b.n	8001230 <__aeabi_fsub+0x2b8>
 8001074:	1e53      	subs	r3, r2, #1
 8001076:	2a01      	cmp	r2, #1
 8001078:	d100      	bne.n	800107c <__aeabi_fsub+0x104>
 800107a:	e105      	b.n	8001288 <__aeabi_fsub+0x310>
 800107c:	2aff      	cmp	r2, #255	; 0xff
 800107e:	d06b      	beq.n	8001158 <__aeabi_fsub+0x1e0>
 8001080:	001a      	movs	r2, r3
 8001082:	e094      	b.n	80011ae <__aeabi_fsub+0x236>
 8001084:	2800      	cmp	r0, #0
 8001086:	d073      	beq.n	8001170 <__aeabi_fsub+0x1f8>
 8001088:	1e51      	subs	r1, r2, #1
 800108a:	2a01      	cmp	r2, #1
 800108c:	d100      	bne.n	8001090 <__aeabi_fsub+0x118>
 800108e:	e0df      	b.n	8001250 <__aeabi_fsub+0x2d8>
 8001090:	2aff      	cmp	r2, #255	; 0xff
 8001092:	d063      	beq.n	800115c <__aeabi_fsub+0x1e4>
 8001094:	000a      	movs	r2, r1
 8001096:	e792      	b.n	8000fbe <__aeabi_fsub+0x46>
 8001098:	2201      	movs	r2, #1
 800109a:	4051      	eors	r1, r2
 800109c:	42a1      	cmp	r1, r4
 800109e:	d000      	beq.n	80010a2 <__aeabi_fsub+0x12a>
 80010a0:	e782      	b.n	8000fa8 <__aeabi_fsub+0x30>
 80010a2:	002a      	movs	r2, r5
 80010a4:	3aff      	subs	r2, #255	; 0xff
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d036      	beq.n	8001118 <__aeabi_fsub+0x1a0>
 80010aa:	1b7a      	subs	r2, r7, r5
 80010ac:	2d00      	cmp	r5, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_fsub+0x13a>
 80010b0:	e0aa      	b.n	8001208 <__aeabi_fsub+0x290>
 80010b2:	2fff      	cmp	r7, #255	; 0xff
 80010b4:	d100      	bne.n	80010b8 <__aeabi_fsub+0x140>
 80010b6:	e0da      	b.n	800126e <__aeabi_fsub+0x2f6>
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	4661      	mov	r1, ip
 80010bc:	04db      	lsls	r3, r3, #19
 80010be:	4319      	orrs	r1, r3
 80010c0:	468c      	mov	ip, r1
 80010c2:	2a1b      	cmp	r2, #27
 80010c4:	dc00      	bgt.n	80010c8 <__aeabi_fsub+0x150>
 80010c6:	e0d4      	b.n	8001272 <__aeabi_fsub+0x2fa>
 80010c8:	2301      	movs	r3, #1
 80010ca:	003d      	movs	r5, r7
 80010cc:	181b      	adds	r3, r3, r0
 80010ce:	e7b5      	b.n	800103c <__aeabi_fsub+0xc4>
 80010d0:	27fe      	movs	r7, #254	; 0xfe
 80010d2:	1c6a      	adds	r2, r5, #1
 80010d4:	4217      	tst	r7, r2
 80010d6:	d171      	bne.n	80011bc <__aeabi_fsub+0x244>
 80010d8:	2d00      	cmp	r5, #0
 80010da:	d000      	beq.n	80010de <__aeabi_fsub+0x166>
 80010dc:	e09e      	b.n	800121c <__aeabi_fsub+0x2a4>
 80010de:	4663      	mov	r3, ip
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fsub+0x16e>
 80010e4:	e0d5      	b.n	8001292 <__aeabi_fsub+0x31a>
 80010e6:	2200      	movs	r2, #0
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x176>
 80010ec:	e78f      	b.n	800100e <__aeabi_fsub+0x96>
 80010ee:	1a1b      	subs	r3, r3, r0
 80010f0:	015e      	lsls	r6, r3, #5
 80010f2:	d400      	bmi.n	80010f6 <__aeabi_fsub+0x17e>
 80010f4:	e0d6      	b.n	80012a4 <__aeabi_fsub+0x32c>
 80010f6:	4663      	mov	r3, ip
 80010f8:	000c      	movs	r4, r1
 80010fa:	1ac3      	subs	r3, r0, r3
 80010fc:	e776      	b.n	8000fec <__aeabi_fsub+0x74>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d036      	beq.n	8001170 <__aeabi_fsub+0x1f8>
 8001102:	1e51      	subs	r1, r2, #1
 8001104:	2a01      	cmp	r2, #1
 8001106:	d100      	bne.n	800110a <__aeabi_fsub+0x192>
 8001108:	e09a      	b.n	8001240 <__aeabi_fsub+0x2c8>
 800110a:	2aff      	cmp	r2, #255	; 0xff
 800110c:	d026      	beq.n	800115c <__aeabi_fsub+0x1e4>
 800110e:	000a      	movs	r2, r1
 8001110:	e78f      	b.n	8001032 <__aeabi_fsub+0xba>
 8001112:	22ff      	movs	r2, #255	; 0xff
 8001114:	2600      	movs	r6, #0
 8001116:	e77a      	b.n	800100e <__aeabi_fsub+0x96>
 8001118:	27fe      	movs	r7, #254	; 0xfe
 800111a:	1c6a      	adds	r2, r5, #1
 800111c:	4217      	tst	r7, r2
 800111e:	d062      	beq.n	80011e6 <__aeabi_fsub+0x26e>
 8001120:	2aff      	cmp	r2, #255	; 0xff
 8001122:	d0f6      	beq.n	8001112 <__aeabi_fsub+0x19a>
 8001124:	0015      	movs	r5, r2
 8001126:	4460      	add	r0, ip
 8001128:	0843      	lsrs	r3, r0, #1
 800112a:	075a      	lsls	r2, r3, #29
 800112c:	d000      	beq.n	8001130 <__aeabi_fsub+0x1b8>
 800112e:	e75f      	b.n	8000ff0 <__aeabi_fsub+0x78>
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	2dff      	cmp	r5, #255	; 0xff
 8001134:	d012      	beq.n	800115c <__aeabi_fsub+0x1e4>
 8001136:	025b      	lsls	r3, r3, #9
 8001138:	0a5e      	lsrs	r6, r3, #9
 800113a:	b2ea      	uxtb	r2, r5
 800113c:	e767      	b.n	800100e <__aeabi_fsub+0x96>
 800113e:	4662      	mov	r2, ip
 8001140:	2a00      	cmp	r2, #0
 8001142:	d100      	bne.n	8001146 <__aeabi_fsub+0x1ce>
 8001144:	e093      	b.n	800126e <__aeabi_fsub+0x2f6>
 8001146:	2800      	cmp	r0, #0
 8001148:	d008      	beq.n	800115c <__aeabi_fsub+0x1e4>
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	03d2      	lsls	r2, r2, #15
 800114e:	4213      	tst	r3, r2
 8001150:	d004      	beq.n	800115c <__aeabi_fsub+0x1e4>
 8001152:	4640      	mov	r0, r8
 8001154:	4210      	tst	r0, r2
 8001156:	d101      	bne.n	800115c <__aeabi_fsub+0x1e4>
 8001158:	000c      	movs	r4, r1
 800115a:	4643      	mov	r3, r8
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0d8      	beq.n	8001112 <__aeabi_fsub+0x19a>
 8001160:	2680      	movs	r6, #128	; 0x80
 8001162:	03f6      	lsls	r6, r6, #15
 8001164:	431e      	orrs	r6, r3
 8001166:	0276      	lsls	r6, r6, #9
 8001168:	22ff      	movs	r2, #255	; 0xff
 800116a:	0a76      	lsrs	r6, r6, #9
 800116c:	e74f      	b.n	800100e <__aeabi_fsub+0x96>
 800116e:	4643      	mov	r3, r8
 8001170:	0015      	movs	r5, r2
 8001172:	e7de      	b.n	8001132 <__aeabi_fsub+0x1ba>
 8001174:	2220      	movs	r2, #32
 8001176:	1b40      	subs	r0, r0, r5
 8001178:	3001      	adds	r0, #1
 800117a:	1a12      	subs	r2, r2, r0
 800117c:	0019      	movs	r1, r3
 800117e:	4093      	lsls	r3, r2
 8001180:	40c1      	lsrs	r1, r0
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	4193      	sbcs	r3, r2
 8001186:	2500      	movs	r5, #0
 8001188:	430b      	orrs	r3, r1
 800118a:	e72f      	b.n	8000fec <__aeabi_fsub+0x74>
 800118c:	2320      	movs	r3, #32
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	0001      	movs	r1, r0
 8001192:	4098      	lsls	r0, r3
 8001194:	0003      	movs	r3, r0
 8001196:	40d1      	lsrs	r1, r2
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	4193      	sbcs	r3, r2
 800119c:	430b      	orrs	r3, r1
 800119e:	e712      	b.n	8000fc6 <__aeabi_fsub+0x4e>
 80011a0:	2fff      	cmp	r7, #255	; 0xff
 80011a2:	d0d9      	beq.n	8001158 <__aeabi_fsub+0x1e0>
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	4664      	mov	r4, ip
 80011a8:	04db      	lsls	r3, r3, #19
 80011aa:	431c      	orrs	r4, r3
 80011ac:	46a4      	mov	ip, r4
 80011ae:	2a1b      	cmp	r2, #27
 80011b0:	dd52      	ble.n	8001258 <__aeabi_fsub+0x2e0>
 80011b2:	2301      	movs	r3, #1
 80011b4:	000c      	movs	r4, r1
 80011b6:	003d      	movs	r5, r7
 80011b8:	1ac3      	subs	r3, r0, r3
 80011ba:	e706      	b.n	8000fca <__aeabi_fsub+0x52>
 80011bc:	4663      	mov	r3, ip
 80011be:	1a1e      	subs	r6, r3, r0
 80011c0:	0173      	lsls	r3, r6, #5
 80011c2:	d439      	bmi.n	8001238 <__aeabi_fsub+0x2c0>
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d000      	beq.n	80011ca <__aeabi_fsub+0x252>
 80011c8:	e704      	b.n	8000fd4 <__aeabi_fsub+0x5c>
 80011ca:	2400      	movs	r4, #0
 80011cc:	2200      	movs	r2, #0
 80011ce:	2600      	movs	r6, #0
 80011d0:	e71d      	b.n	800100e <__aeabi_fsub+0x96>
 80011d2:	2320      	movs	r3, #32
 80011d4:	1a9b      	subs	r3, r3, r2
 80011d6:	0001      	movs	r1, r0
 80011d8:	4098      	lsls	r0, r3
 80011da:	0003      	movs	r3, r0
 80011dc:	40d1      	lsrs	r1, r2
 80011de:	1e5a      	subs	r2, r3, #1
 80011e0:	4193      	sbcs	r3, r2
 80011e2:	430b      	orrs	r3, r1
 80011e4:	e729      	b.n	800103a <__aeabi_fsub+0xc2>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d1a9      	bne.n	800113e <__aeabi_fsub+0x1c6>
 80011ea:	4663      	mov	r3, ip
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d056      	beq.n	800129e <__aeabi_fsub+0x326>
 80011f0:	2200      	movs	r2, #0
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_fsub+0x280>
 80011f6:	e70a      	b.n	800100e <__aeabi_fsub+0x96>
 80011f8:	0003      	movs	r3, r0
 80011fa:	4463      	add	r3, ip
 80011fc:	015a      	lsls	r2, r3, #5
 80011fe:	d594      	bpl.n	800112a <__aeabi_fsub+0x1b2>
 8001200:	4a2b      	ldr	r2, [pc, #172]	; (80012b0 <__aeabi_fsub+0x338>)
 8001202:	3501      	adds	r5, #1
 8001204:	4013      	ands	r3, r2
 8001206:	e790      	b.n	800112a <__aeabi_fsub+0x1b2>
 8001208:	4663      	mov	r3, ip
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0af      	beq.n	800116e <__aeabi_fsub+0x1f6>
 800120e:	1e53      	subs	r3, r2, #1
 8001210:	2a01      	cmp	r2, #1
 8001212:	d015      	beq.n	8001240 <__aeabi_fsub+0x2c8>
 8001214:	2aff      	cmp	r2, #255	; 0xff
 8001216:	d02a      	beq.n	800126e <__aeabi_fsub+0x2f6>
 8001218:	001a      	movs	r2, r3
 800121a:	e752      	b.n	80010c2 <__aeabi_fsub+0x14a>
 800121c:	4662      	mov	r2, ip
 800121e:	2a00      	cmp	r2, #0
 8001220:	d191      	bne.n	8001146 <__aeabi_fsub+0x1ce>
 8001222:	2800      	cmp	r0, #0
 8001224:	d198      	bne.n	8001158 <__aeabi_fsub+0x1e0>
 8001226:	2680      	movs	r6, #128	; 0x80
 8001228:	2400      	movs	r4, #0
 800122a:	22ff      	movs	r2, #255	; 0xff
 800122c:	03f6      	lsls	r6, r6, #15
 800122e:	e6ee      	b.n	800100e <__aeabi_fsub+0x96>
 8001230:	000c      	movs	r4, r1
 8001232:	4643      	mov	r3, r8
 8001234:	0015      	movs	r5, r2
 8001236:	e77c      	b.n	8001132 <__aeabi_fsub+0x1ba>
 8001238:	4663      	mov	r3, ip
 800123a:	000c      	movs	r4, r1
 800123c:	1ac6      	subs	r6, r0, r3
 800123e:	e6c9      	b.n	8000fd4 <__aeabi_fsub+0x5c>
 8001240:	0003      	movs	r3, r0
 8001242:	4463      	add	r3, ip
 8001244:	2501      	movs	r5, #1
 8001246:	015a      	lsls	r2, r3, #5
 8001248:	d400      	bmi.n	800124c <__aeabi_fsub+0x2d4>
 800124a:	e76e      	b.n	800112a <__aeabi_fsub+0x1b2>
 800124c:	2502      	movs	r5, #2
 800124e:	e6fa      	b.n	8001046 <__aeabi_fsub+0xce>
 8001250:	4663      	mov	r3, ip
 8001252:	2501      	movs	r5, #1
 8001254:	1a1b      	subs	r3, r3, r0
 8001256:	e6b8      	b.n	8000fca <__aeabi_fsub+0x52>
 8001258:	4664      	mov	r4, ip
 800125a:	2320      	movs	r3, #32
 800125c:	40d4      	lsrs	r4, r2
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	4662      	mov	r2, ip
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	1e5a      	subs	r2, r3, #1
 8001268:	4193      	sbcs	r3, r2
 800126a:	4323      	orrs	r3, r4
 800126c:	e7a2      	b.n	80011b4 <__aeabi_fsub+0x23c>
 800126e:	4643      	mov	r3, r8
 8001270:	e774      	b.n	800115c <__aeabi_fsub+0x1e4>
 8001272:	4661      	mov	r1, ip
 8001274:	2320      	movs	r3, #32
 8001276:	40d1      	lsrs	r1, r2
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	4662      	mov	r2, ip
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	4193      	sbcs	r3, r2
 8001284:	430b      	orrs	r3, r1
 8001286:	e720      	b.n	80010ca <__aeabi_fsub+0x152>
 8001288:	4663      	mov	r3, ip
 800128a:	000c      	movs	r4, r1
 800128c:	2501      	movs	r5, #1
 800128e:	1ac3      	subs	r3, r0, r3
 8001290:	e69b      	b.n	8000fca <__aeabi_fsub+0x52>
 8001292:	2800      	cmp	r0, #0
 8001294:	d099      	beq.n	80011ca <__aeabi_fsub+0x252>
 8001296:	000c      	movs	r4, r1
 8001298:	4646      	mov	r6, r8
 800129a:	2200      	movs	r2, #0
 800129c:	e6b7      	b.n	800100e <__aeabi_fsub+0x96>
 800129e:	4646      	mov	r6, r8
 80012a0:	2200      	movs	r2, #0
 80012a2:	e6b4      	b.n	800100e <__aeabi_fsub+0x96>
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d000      	beq.n	80012aa <__aeabi_fsub+0x332>
 80012a8:	e73f      	b.n	800112a <__aeabi_fsub+0x1b2>
 80012aa:	2400      	movs	r4, #0
 80012ac:	2600      	movs	r6, #0
 80012ae:	e6ae      	b.n	800100e <__aeabi_fsub+0x96>
 80012b0:	fbffffff 	.word	0xfbffffff
 80012b4:	7dffffff 	.word	0x7dffffff

080012b8 <__aeabi_f2iz>:
 80012b8:	0241      	lsls	r1, r0, #9
 80012ba:	0042      	lsls	r2, r0, #1
 80012bc:	0fc3      	lsrs	r3, r0, #31
 80012be:	0a49      	lsrs	r1, r1, #9
 80012c0:	2000      	movs	r0, #0
 80012c2:	0e12      	lsrs	r2, r2, #24
 80012c4:	2a7e      	cmp	r2, #126	; 0x7e
 80012c6:	dd03      	ble.n	80012d0 <__aeabi_f2iz+0x18>
 80012c8:	2a9d      	cmp	r2, #157	; 0x9d
 80012ca:	dd02      	ble.n	80012d2 <__aeabi_f2iz+0x1a>
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <__aeabi_f2iz+0x3c>)
 80012ce:	1898      	adds	r0, r3, r2
 80012d0:	4770      	bx	lr
 80012d2:	2080      	movs	r0, #128	; 0x80
 80012d4:	0400      	lsls	r0, r0, #16
 80012d6:	4301      	orrs	r1, r0
 80012d8:	2a95      	cmp	r2, #149	; 0x95
 80012da:	dc07      	bgt.n	80012ec <__aeabi_f2iz+0x34>
 80012dc:	2096      	movs	r0, #150	; 0x96
 80012de:	1a82      	subs	r2, r0, r2
 80012e0:	40d1      	lsrs	r1, r2
 80012e2:	4248      	negs	r0, r1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f3      	bne.n	80012d0 <__aeabi_f2iz+0x18>
 80012e8:	0008      	movs	r0, r1
 80012ea:	e7f1      	b.n	80012d0 <__aeabi_f2iz+0x18>
 80012ec:	3a96      	subs	r2, #150	; 0x96
 80012ee:	4091      	lsls	r1, r2
 80012f0:	e7f7      	b.n	80012e2 <__aeabi_f2iz+0x2a>
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	7fffffff 	.word	0x7fffffff

080012f8 <__aeabi_i2f>:
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d013      	beq.n	8001326 <__aeabi_i2f+0x2e>
 80012fe:	17c3      	asrs	r3, r0, #31
 8001300:	18c5      	adds	r5, r0, r3
 8001302:	405d      	eors	r5, r3
 8001304:	0fc4      	lsrs	r4, r0, #31
 8001306:	0028      	movs	r0, r5
 8001308:	f001 ffa6 	bl	8003258 <__clzsi2>
 800130c:	239e      	movs	r3, #158	; 0x9e
 800130e:	0001      	movs	r1, r0
 8001310:	1a1b      	subs	r3, r3, r0
 8001312:	2b96      	cmp	r3, #150	; 0x96
 8001314:	dc0f      	bgt.n	8001336 <__aeabi_i2f+0x3e>
 8001316:	2808      	cmp	r0, #8
 8001318:	d031      	beq.n	800137e <__aeabi_i2f+0x86>
 800131a:	3908      	subs	r1, #8
 800131c:	408d      	lsls	r5, r1
 800131e:	026d      	lsls	r5, r5, #9
 8001320:	0a6d      	lsrs	r5, r5, #9
 8001322:	b2d8      	uxtb	r0, r3
 8001324:	e002      	b.n	800132c <__aeabi_i2f+0x34>
 8001326:	2400      	movs	r4, #0
 8001328:	2000      	movs	r0, #0
 800132a:	2500      	movs	r5, #0
 800132c:	05c0      	lsls	r0, r0, #23
 800132e:	4328      	orrs	r0, r5
 8001330:	07e4      	lsls	r4, r4, #31
 8001332:	4320      	orrs	r0, r4
 8001334:	bd70      	pop	{r4, r5, r6, pc}
 8001336:	2b99      	cmp	r3, #153	; 0x99
 8001338:	dd0c      	ble.n	8001354 <__aeabi_i2f+0x5c>
 800133a:	2205      	movs	r2, #5
 800133c:	1a12      	subs	r2, r2, r0
 800133e:	0028      	movs	r0, r5
 8001340:	40d0      	lsrs	r0, r2
 8001342:	0002      	movs	r2, r0
 8001344:	0008      	movs	r0, r1
 8001346:	301b      	adds	r0, #27
 8001348:	4085      	lsls	r5, r0
 800134a:	0028      	movs	r0, r5
 800134c:	1e45      	subs	r5, r0, #1
 800134e:	41a8      	sbcs	r0, r5
 8001350:	4302      	orrs	r2, r0
 8001352:	0015      	movs	r5, r2
 8001354:	2905      	cmp	r1, #5
 8001356:	dc16      	bgt.n	8001386 <__aeabi_i2f+0x8e>
 8001358:	002a      	movs	r2, r5
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <__aeabi_i2f+0xa0>)
 800135c:	4002      	ands	r2, r0
 800135e:	076e      	lsls	r6, r5, #29
 8001360:	d009      	beq.n	8001376 <__aeabi_i2f+0x7e>
 8001362:	260f      	movs	r6, #15
 8001364:	4035      	ands	r5, r6
 8001366:	2d04      	cmp	r5, #4
 8001368:	d005      	beq.n	8001376 <__aeabi_i2f+0x7e>
 800136a:	3204      	adds	r2, #4
 800136c:	0155      	lsls	r5, r2, #5
 800136e:	d502      	bpl.n	8001376 <__aeabi_i2f+0x7e>
 8001370:	239f      	movs	r3, #159	; 0x9f
 8001372:	4002      	ands	r2, r0
 8001374:	1a5b      	subs	r3, r3, r1
 8001376:	0192      	lsls	r2, r2, #6
 8001378:	0a55      	lsrs	r5, r2, #9
 800137a:	b2d8      	uxtb	r0, r3
 800137c:	e7d6      	b.n	800132c <__aeabi_i2f+0x34>
 800137e:	026d      	lsls	r5, r5, #9
 8001380:	2096      	movs	r0, #150	; 0x96
 8001382:	0a6d      	lsrs	r5, r5, #9
 8001384:	e7d2      	b.n	800132c <__aeabi_i2f+0x34>
 8001386:	1f4a      	subs	r2, r1, #5
 8001388:	4095      	lsls	r5, r2
 800138a:	002a      	movs	r2, r5
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <__aeabi_i2f+0xa0>)
 800138e:	4002      	ands	r2, r0
 8001390:	076e      	lsls	r6, r5, #29
 8001392:	d0f0      	beq.n	8001376 <__aeabi_i2f+0x7e>
 8001394:	e7e5      	b.n	8001362 <__aeabi_i2f+0x6a>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	fbffffff 	.word	0xfbffffff

0800139c <__aeabi_ui2f>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	1e04      	subs	r4, r0, #0
 80013a0:	d00e      	beq.n	80013c0 <__aeabi_ui2f+0x24>
 80013a2:	f001 ff59 	bl	8003258 <__clzsi2>
 80013a6:	239e      	movs	r3, #158	; 0x9e
 80013a8:	0001      	movs	r1, r0
 80013aa:	1a1b      	subs	r3, r3, r0
 80013ac:	2b96      	cmp	r3, #150	; 0x96
 80013ae:	dc0c      	bgt.n	80013ca <__aeabi_ui2f+0x2e>
 80013b0:	2808      	cmp	r0, #8
 80013b2:	d02c      	beq.n	800140e <__aeabi_ui2f+0x72>
 80013b4:	3908      	subs	r1, #8
 80013b6:	408c      	lsls	r4, r1
 80013b8:	0264      	lsls	r4, r4, #9
 80013ba:	0a64      	lsrs	r4, r4, #9
 80013bc:	b2d8      	uxtb	r0, r3
 80013be:	e001      	b.n	80013c4 <__aeabi_ui2f+0x28>
 80013c0:	2000      	movs	r0, #0
 80013c2:	2400      	movs	r4, #0
 80013c4:	05c0      	lsls	r0, r0, #23
 80013c6:	4320      	orrs	r0, r4
 80013c8:	bd70      	pop	{r4, r5, r6, pc}
 80013ca:	2b99      	cmp	r3, #153	; 0x99
 80013cc:	dd0a      	ble.n	80013e4 <__aeabi_ui2f+0x48>
 80013ce:	0002      	movs	r2, r0
 80013d0:	0020      	movs	r0, r4
 80013d2:	321b      	adds	r2, #27
 80013d4:	4090      	lsls	r0, r2
 80013d6:	0002      	movs	r2, r0
 80013d8:	1e50      	subs	r0, r2, #1
 80013da:	4182      	sbcs	r2, r0
 80013dc:	2005      	movs	r0, #5
 80013de:	1a40      	subs	r0, r0, r1
 80013e0:	40c4      	lsrs	r4, r0
 80013e2:	4314      	orrs	r4, r2
 80013e4:	2905      	cmp	r1, #5
 80013e6:	dc16      	bgt.n	8001416 <__aeabi_ui2f+0x7a>
 80013e8:	0022      	movs	r2, r4
 80013ea:	480f      	ldr	r0, [pc, #60]	; (8001428 <__aeabi_ui2f+0x8c>)
 80013ec:	4002      	ands	r2, r0
 80013ee:	0765      	lsls	r5, r4, #29
 80013f0:	d009      	beq.n	8001406 <__aeabi_ui2f+0x6a>
 80013f2:	250f      	movs	r5, #15
 80013f4:	402c      	ands	r4, r5
 80013f6:	2c04      	cmp	r4, #4
 80013f8:	d005      	beq.n	8001406 <__aeabi_ui2f+0x6a>
 80013fa:	3204      	adds	r2, #4
 80013fc:	0154      	lsls	r4, r2, #5
 80013fe:	d502      	bpl.n	8001406 <__aeabi_ui2f+0x6a>
 8001400:	239f      	movs	r3, #159	; 0x9f
 8001402:	4002      	ands	r2, r0
 8001404:	1a5b      	subs	r3, r3, r1
 8001406:	0192      	lsls	r2, r2, #6
 8001408:	0a54      	lsrs	r4, r2, #9
 800140a:	b2d8      	uxtb	r0, r3
 800140c:	e7da      	b.n	80013c4 <__aeabi_ui2f+0x28>
 800140e:	0264      	lsls	r4, r4, #9
 8001410:	2096      	movs	r0, #150	; 0x96
 8001412:	0a64      	lsrs	r4, r4, #9
 8001414:	e7d6      	b.n	80013c4 <__aeabi_ui2f+0x28>
 8001416:	1f4a      	subs	r2, r1, #5
 8001418:	4094      	lsls	r4, r2
 800141a:	0022      	movs	r2, r4
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <__aeabi_ui2f+0x8c>)
 800141e:	4002      	ands	r2, r0
 8001420:	0765      	lsls	r5, r4, #29
 8001422:	d0f0      	beq.n	8001406 <__aeabi_ui2f+0x6a>
 8001424:	e7e5      	b.n	80013f2 <__aeabi_ui2f+0x56>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	fbffffff 	.word	0xfbffffff

0800142c <__aeabi_dadd>:
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	464f      	mov	r7, r9
 8001430:	4646      	mov	r6, r8
 8001432:	46d6      	mov	lr, sl
 8001434:	0004      	movs	r4, r0
 8001436:	b5c0      	push	{r6, r7, lr}
 8001438:	001f      	movs	r7, r3
 800143a:	030b      	lsls	r3, r1, #12
 800143c:	0010      	movs	r0, r2
 800143e:	004e      	lsls	r6, r1, #1
 8001440:	0a5b      	lsrs	r3, r3, #9
 8001442:	0fcd      	lsrs	r5, r1, #31
 8001444:	0f61      	lsrs	r1, r4, #29
 8001446:	007a      	lsls	r2, r7, #1
 8001448:	4319      	orrs	r1, r3
 800144a:	00e3      	lsls	r3, r4, #3
 800144c:	033c      	lsls	r4, r7, #12
 800144e:	0fff      	lsrs	r7, r7, #31
 8001450:	46bc      	mov	ip, r7
 8001452:	0a64      	lsrs	r4, r4, #9
 8001454:	0f47      	lsrs	r7, r0, #29
 8001456:	4327      	orrs	r7, r4
 8001458:	0d76      	lsrs	r6, r6, #21
 800145a:	0d52      	lsrs	r2, r2, #21
 800145c:	00c0      	lsls	r0, r0, #3
 800145e:	46b9      	mov	r9, r7
 8001460:	4680      	mov	r8, r0
 8001462:	1ab7      	subs	r7, r6, r2
 8001464:	4565      	cmp	r5, ip
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x3e>
 8001468:	e09b      	b.n	80015a2 <__aeabi_dadd+0x176>
 800146a:	2f00      	cmp	r7, #0
 800146c:	dc00      	bgt.n	8001470 <__aeabi_dadd+0x44>
 800146e:	e084      	b.n	800157a <__aeabi_dadd+0x14e>
 8001470:	2a00      	cmp	r2, #0
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x4a>
 8001474:	e0be      	b.n	80015f4 <__aeabi_dadd+0x1c8>
 8001476:	4ac8      	ldr	r2, [pc, #800]	; (8001798 <__aeabi_dadd+0x36c>)
 8001478:	4296      	cmp	r6, r2
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x52>
 800147c:	e124      	b.n	80016c8 <__aeabi_dadd+0x29c>
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	464c      	mov	r4, r9
 8001482:	0412      	lsls	r2, r2, #16
 8001484:	4314      	orrs	r4, r2
 8001486:	46a1      	mov	r9, r4
 8001488:	2f38      	cmp	r7, #56	; 0x38
 800148a:	dd00      	ble.n	800148e <__aeabi_dadd+0x62>
 800148c:	e167      	b.n	800175e <__aeabi_dadd+0x332>
 800148e:	2f1f      	cmp	r7, #31
 8001490:	dd00      	ble.n	8001494 <__aeabi_dadd+0x68>
 8001492:	e1d6      	b.n	8001842 <__aeabi_dadd+0x416>
 8001494:	2220      	movs	r2, #32
 8001496:	464c      	mov	r4, r9
 8001498:	1bd2      	subs	r2, r2, r7
 800149a:	4094      	lsls	r4, r2
 800149c:	46a2      	mov	sl, r4
 800149e:	4644      	mov	r4, r8
 80014a0:	40fc      	lsrs	r4, r7
 80014a2:	0020      	movs	r0, r4
 80014a4:	4654      	mov	r4, sl
 80014a6:	4304      	orrs	r4, r0
 80014a8:	4640      	mov	r0, r8
 80014aa:	4090      	lsls	r0, r2
 80014ac:	1e42      	subs	r2, r0, #1
 80014ae:	4190      	sbcs	r0, r2
 80014b0:	464a      	mov	r2, r9
 80014b2:	40fa      	lsrs	r2, r7
 80014b4:	4304      	orrs	r4, r0
 80014b6:	1a89      	subs	r1, r1, r2
 80014b8:	1b1c      	subs	r4, r3, r4
 80014ba:	42a3      	cmp	r3, r4
 80014bc:	4192      	sbcs	r2, r2
 80014be:	4252      	negs	r2, r2
 80014c0:	1a8b      	subs	r3, r1, r2
 80014c2:	469a      	mov	sl, r3
 80014c4:	4653      	mov	r3, sl
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	d400      	bmi.n	80014cc <__aeabi_dadd+0xa0>
 80014ca:	e0d4      	b.n	8001676 <__aeabi_dadd+0x24a>
 80014cc:	4653      	mov	r3, sl
 80014ce:	025a      	lsls	r2, r3, #9
 80014d0:	0a53      	lsrs	r3, r2, #9
 80014d2:	469a      	mov	sl, r3
 80014d4:	4653      	mov	r3, sl
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_dadd+0xb0>
 80014da:	e104      	b.n	80016e6 <__aeabi_dadd+0x2ba>
 80014dc:	4650      	mov	r0, sl
 80014de:	f001 febb 	bl	8003258 <__clzsi2>
 80014e2:	0003      	movs	r3, r0
 80014e4:	3b08      	subs	r3, #8
 80014e6:	2220      	movs	r2, #32
 80014e8:	0020      	movs	r0, r4
 80014ea:	1ad2      	subs	r2, r2, r3
 80014ec:	4651      	mov	r1, sl
 80014ee:	40d0      	lsrs	r0, r2
 80014f0:	4099      	lsls	r1, r3
 80014f2:	0002      	movs	r2, r0
 80014f4:	409c      	lsls	r4, r3
 80014f6:	430a      	orrs	r2, r1
 80014f8:	42b3      	cmp	r3, r6
 80014fa:	da00      	bge.n	80014fe <__aeabi_dadd+0xd2>
 80014fc:	e102      	b.n	8001704 <__aeabi_dadd+0x2d8>
 80014fe:	1b9b      	subs	r3, r3, r6
 8001500:	1c59      	adds	r1, r3, #1
 8001502:	291f      	cmp	r1, #31
 8001504:	dd00      	ble.n	8001508 <__aeabi_dadd+0xdc>
 8001506:	e0a7      	b.n	8001658 <__aeabi_dadd+0x22c>
 8001508:	2320      	movs	r3, #32
 800150a:	0010      	movs	r0, r2
 800150c:	0026      	movs	r6, r4
 800150e:	1a5b      	subs	r3, r3, r1
 8001510:	409c      	lsls	r4, r3
 8001512:	4098      	lsls	r0, r3
 8001514:	40ce      	lsrs	r6, r1
 8001516:	40ca      	lsrs	r2, r1
 8001518:	1e63      	subs	r3, r4, #1
 800151a:	419c      	sbcs	r4, r3
 800151c:	4330      	orrs	r0, r6
 800151e:	4692      	mov	sl, r2
 8001520:	2600      	movs	r6, #0
 8001522:	4304      	orrs	r4, r0
 8001524:	0763      	lsls	r3, r4, #29
 8001526:	d009      	beq.n	800153c <__aeabi_dadd+0x110>
 8001528:	230f      	movs	r3, #15
 800152a:	4023      	ands	r3, r4
 800152c:	2b04      	cmp	r3, #4
 800152e:	d005      	beq.n	800153c <__aeabi_dadd+0x110>
 8001530:	1d23      	adds	r3, r4, #4
 8001532:	42a3      	cmp	r3, r4
 8001534:	41a4      	sbcs	r4, r4
 8001536:	4264      	negs	r4, r4
 8001538:	44a2      	add	sl, r4
 800153a:	001c      	movs	r4, r3
 800153c:	4653      	mov	r3, sl
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	d400      	bmi.n	8001544 <__aeabi_dadd+0x118>
 8001542:	e09b      	b.n	800167c <__aeabi_dadd+0x250>
 8001544:	4b94      	ldr	r3, [pc, #592]	; (8001798 <__aeabi_dadd+0x36c>)
 8001546:	3601      	adds	r6, #1
 8001548:	429e      	cmp	r6, r3
 800154a:	d100      	bne.n	800154e <__aeabi_dadd+0x122>
 800154c:	e0b8      	b.n	80016c0 <__aeabi_dadd+0x294>
 800154e:	4653      	mov	r3, sl
 8001550:	4992      	ldr	r1, [pc, #584]	; (800179c <__aeabi_dadd+0x370>)
 8001552:	08e4      	lsrs	r4, r4, #3
 8001554:	400b      	ands	r3, r1
 8001556:	0019      	movs	r1, r3
 8001558:	075b      	lsls	r3, r3, #29
 800155a:	4323      	orrs	r3, r4
 800155c:	0572      	lsls	r2, r6, #21
 800155e:	024c      	lsls	r4, r1, #9
 8001560:	0b24      	lsrs	r4, r4, #12
 8001562:	0d52      	lsrs	r2, r2, #21
 8001564:	0512      	lsls	r2, r2, #20
 8001566:	07ed      	lsls	r5, r5, #31
 8001568:	4322      	orrs	r2, r4
 800156a:	432a      	orrs	r2, r5
 800156c:	0018      	movs	r0, r3
 800156e:	0011      	movs	r1, r2
 8001570:	bce0      	pop	{r5, r6, r7}
 8001572:	46ba      	mov	sl, r7
 8001574:	46b1      	mov	r9, r6
 8001576:	46a8      	mov	r8, r5
 8001578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157a:	2f00      	cmp	r7, #0
 800157c:	d048      	beq.n	8001610 <__aeabi_dadd+0x1e4>
 800157e:	1b97      	subs	r7, r2, r6
 8001580:	2e00      	cmp	r6, #0
 8001582:	d000      	beq.n	8001586 <__aeabi_dadd+0x15a>
 8001584:	e10e      	b.n	80017a4 <__aeabi_dadd+0x378>
 8001586:	000c      	movs	r4, r1
 8001588:	431c      	orrs	r4, r3
 800158a:	d100      	bne.n	800158e <__aeabi_dadd+0x162>
 800158c:	e1b7      	b.n	80018fe <__aeabi_dadd+0x4d2>
 800158e:	1e7c      	subs	r4, r7, #1
 8001590:	2f01      	cmp	r7, #1
 8001592:	d100      	bne.n	8001596 <__aeabi_dadd+0x16a>
 8001594:	e226      	b.n	80019e4 <__aeabi_dadd+0x5b8>
 8001596:	4d80      	ldr	r5, [pc, #512]	; (8001798 <__aeabi_dadd+0x36c>)
 8001598:	42af      	cmp	r7, r5
 800159a:	d100      	bne.n	800159e <__aeabi_dadd+0x172>
 800159c:	e1d5      	b.n	800194a <__aeabi_dadd+0x51e>
 800159e:	0027      	movs	r7, r4
 80015a0:	e107      	b.n	80017b2 <__aeabi_dadd+0x386>
 80015a2:	2f00      	cmp	r7, #0
 80015a4:	dc00      	bgt.n	80015a8 <__aeabi_dadd+0x17c>
 80015a6:	e0b2      	b.n	800170e <__aeabi_dadd+0x2e2>
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d047      	beq.n	800163c <__aeabi_dadd+0x210>
 80015ac:	4a7a      	ldr	r2, [pc, #488]	; (8001798 <__aeabi_dadd+0x36c>)
 80015ae:	4296      	cmp	r6, r2
 80015b0:	d100      	bne.n	80015b4 <__aeabi_dadd+0x188>
 80015b2:	e089      	b.n	80016c8 <__aeabi_dadd+0x29c>
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	464c      	mov	r4, r9
 80015b8:	0412      	lsls	r2, r2, #16
 80015ba:	4314      	orrs	r4, r2
 80015bc:	46a1      	mov	r9, r4
 80015be:	2f38      	cmp	r7, #56	; 0x38
 80015c0:	dc6b      	bgt.n	800169a <__aeabi_dadd+0x26e>
 80015c2:	2f1f      	cmp	r7, #31
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dadd+0x19c>
 80015c6:	e16e      	b.n	80018a6 <__aeabi_dadd+0x47a>
 80015c8:	003a      	movs	r2, r7
 80015ca:	4648      	mov	r0, r9
 80015cc:	3a20      	subs	r2, #32
 80015ce:	40d0      	lsrs	r0, r2
 80015d0:	4684      	mov	ip, r0
 80015d2:	2f20      	cmp	r7, #32
 80015d4:	d007      	beq.n	80015e6 <__aeabi_dadd+0x1ba>
 80015d6:	2240      	movs	r2, #64	; 0x40
 80015d8:	4648      	mov	r0, r9
 80015da:	1bd2      	subs	r2, r2, r7
 80015dc:	4090      	lsls	r0, r2
 80015de:	0002      	movs	r2, r0
 80015e0:	4640      	mov	r0, r8
 80015e2:	4310      	orrs	r0, r2
 80015e4:	4680      	mov	r8, r0
 80015e6:	4640      	mov	r0, r8
 80015e8:	1e42      	subs	r2, r0, #1
 80015ea:	4190      	sbcs	r0, r2
 80015ec:	4662      	mov	r2, ip
 80015ee:	0004      	movs	r4, r0
 80015f0:	4314      	orrs	r4, r2
 80015f2:	e057      	b.n	80016a4 <__aeabi_dadd+0x278>
 80015f4:	464a      	mov	r2, r9
 80015f6:	4302      	orrs	r2, r0
 80015f8:	d100      	bne.n	80015fc <__aeabi_dadd+0x1d0>
 80015fa:	e103      	b.n	8001804 <__aeabi_dadd+0x3d8>
 80015fc:	1e7a      	subs	r2, r7, #1
 80015fe:	2f01      	cmp	r7, #1
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x1d8>
 8001602:	e193      	b.n	800192c <__aeabi_dadd+0x500>
 8001604:	4c64      	ldr	r4, [pc, #400]	; (8001798 <__aeabi_dadd+0x36c>)
 8001606:	42a7      	cmp	r7, r4
 8001608:	d100      	bne.n	800160c <__aeabi_dadd+0x1e0>
 800160a:	e18a      	b.n	8001922 <__aeabi_dadd+0x4f6>
 800160c:	0017      	movs	r7, r2
 800160e:	e73b      	b.n	8001488 <__aeabi_dadd+0x5c>
 8001610:	4c63      	ldr	r4, [pc, #396]	; (80017a0 <__aeabi_dadd+0x374>)
 8001612:	1c72      	adds	r2, r6, #1
 8001614:	4222      	tst	r2, r4
 8001616:	d000      	beq.n	800161a <__aeabi_dadd+0x1ee>
 8001618:	e0e0      	b.n	80017dc <__aeabi_dadd+0x3b0>
 800161a:	000a      	movs	r2, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	2e00      	cmp	r6, #0
 8001620:	d000      	beq.n	8001624 <__aeabi_dadd+0x1f8>
 8001622:	e174      	b.n	800190e <__aeabi_dadd+0x4e2>
 8001624:	2a00      	cmp	r2, #0
 8001626:	d100      	bne.n	800162a <__aeabi_dadd+0x1fe>
 8001628:	e1d0      	b.n	80019cc <__aeabi_dadd+0x5a0>
 800162a:	464a      	mov	r2, r9
 800162c:	4302      	orrs	r2, r0
 800162e:	d000      	beq.n	8001632 <__aeabi_dadd+0x206>
 8001630:	e1e3      	b.n	80019fa <__aeabi_dadd+0x5ce>
 8001632:	074a      	lsls	r2, r1, #29
 8001634:	08db      	lsrs	r3, r3, #3
 8001636:	4313      	orrs	r3, r2
 8001638:	08c9      	lsrs	r1, r1, #3
 800163a:	e029      	b.n	8001690 <__aeabi_dadd+0x264>
 800163c:	464a      	mov	r2, r9
 800163e:	4302      	orrs	r2, r0
 8001640:	d100      	bne.n	8001644 <__aeabi_dadd+0x218>
 8001642:	e17d      	b.n	8001940 <__aeabi_dadd+0x514>
 8001644:	1e7a      	subs	r2, r7, #1
 8001646:	2f01      	cmp	r7, #1
 8001648:	d100      	bne.n	800164c <__aeabi_dadd+0x220>
 800164a:	e0e0      	b.n	800180e <__aeabi_dadd+0x3e2>
 800164c:	4c52      	ldr	r4, [pc, #328]	; (8001798 <__aeabi_dadd+0x36c>)
 800164e:	42a7      	cmp	r7, r4
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x228>
 8001652:	e166      	b.n	8001922 <__aeabi_dadd+0x4f6>
 8001654:	0017      	movs	r7, r2
 8001656:	e7b2      	b.n	80015be <__aeabi_dadd+0x192>
 8001658:	0010      	movs	r0, r2
 800165a:	3b1f      	subs	r3, #31
 800165c:	40d8      	lsrs	r0, r3
 800165e:	2920      	cmp	r1, #32
 8001660:	d003      	beq.n	800166a <__aeabi_dadd+0x23e>
 8001662:	2340      	movs	r3, #64	; 0x40
 8001664:	1a5b      	subs	r3, r3, r1
 8001666:	409a      	lsls	r2, r3
 8001668:	4314      	orrs	r4, r2
 800166a:	1e63      	subs	r3, r4, #1
 800166c:	419c      	sbcs	r4, r3
 800166e:	2300      	movs	r3, #0
 8001670:	2600      	movs	r6, #0
 8001672:	469a      	mov	sl, r3
 8001674:	4304      	orrs	r4, r0
 8001676:	0763      	lsls	r3, r4, #29
 8001678:	d000      	beq.n	800167c <__aeabi_dadd+0x250>
 800167a:	e755      	b.n	8001528 <__aeabi_dadd+0xfc>
 800167c:	4652      	mov	r2, sl
 800167e:	08e3      	lsrs	r3, r4, #3
 8001680:	0752      	lsls	r2, r2, #29
 8001682:	4313      	orrs	r3, r2
 8001684:	4652      	mov	r2, sl
 8001686:	0037      	movs	r7, r6
 8001688:	08d1      	lsrs	r1, r2, #3
 800168a:	4a43      	ldr	r2, [pc, #268]	; (8001798 <__aeabi_dadd+0x36c>)
 800168c:	4297      	cmp	r7, r2
 800168e:	d01f      	beq.n	80016d0 <__aeabi_dadd+0x2a4>
 8001690:	0309      	lsls	r1, r1, #12
 8001692:	057a      	lsls	r2, r7, #21
 8001694:	0b0c      	lsrs	r4, r1, #12
 8001696:	0d52      	lsrs	r2, r2, #21
 8001698:	e764      	b.n	8001564 <__aeabi_dadd+0x138>
 800169a:	4642      	mov	r2, r8
 800169c:	464c      	mov	r4, r9
 800169e:	4314      	orrs	r4, r2
 80016a0:	1e62      	subs	r2, r4, #1
 80016a2:	4194      	sbcs	r4, r2
 80016a4:	18e4      	adds	r4, r4, r3
 80016a6:	429c      	cmp	r4, r3
 80016a8:	4192      	sbcs	r2, r2
 80016aa:	4252      	negs	r2, r2
 80016ac:	4692      	mov	sl, r2
 80016ae:	448a      	add	sl, r1
 80016b0:	4653      	mov	r3, sl
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	d5df      	bpl.n	8001676 <__aeabi_dadd+0x24a>
 80016b6:	4b38      	ldr	r3, [pc, #224]	; (8001798 <__aeabi_dadd+0x36c>)
 80016b8:	3601      	adds	r6, #1
 80016ba:	429e      	cmp	r6, r3
 80016bc:	d000      	beq.n	80016c0 <__aeabi_dadd+0x294>
 80016be:	e0b3      	b.n	8001828 <__aeabi_dadd+0x3fc>
 80016c0:	0032      	movs	r2, r6
 80016c2:	2400      	movs	r4, #0
 80016c4:	2300      	movs	r3, #0
 80016c6:	e74d      	b.n	8001564 <__aeabi_dadd+0x138>
 80016c8:	074a      	lsls	r2, r1, #29
 80016ca:	08db      	lsrs	r3, r3, #3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	08c9      	lsrs	r1, r1, #3
 80016d0:	001a      	movs	r2, r3
 80016d2:	430a      	orrs	r2, r1
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dadd+0x2ac>
 80016d6:	e200      	b.n	8001ada <__aeabi_dadd+0x6ae>
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0324      	lsls	r4, r4, #12
 80016dc:	430c      	orrs	r4, r1
 80016de:	0324      	lsls	r4, r4, #12
 80016e0:	4a2d      	ldr	r2, [pc, #180]	; (8001798 <__aeabi_dadd+0x36c>)
 80016e2:	0b24      	lsrs	r4, r4, #12
 80016e4:	e73e      	b.n	8001564 <__aeabi_dadd+0x138>
 80016e6:	0020      	movs	r0, r4
 80016e8:	f001 fdb6 	bl	8003258 <__clzsi2>
 80016ec:	0003      	movs	r3, r0
 80016ee:	3318      	adds	r3, #24
 80016f0:	2b1f      	cmp	r3, #31
 80016f2:	dc00      	bgt.n	80016f6 <__aeabi_dadd+0x2ca>
 80016f4:	e6f7      	b.n	80014e6 <__aeabi_dadd+0xba>
 80016f6:	0022      	movs	r2, r4
 80016f8:	3808      	subs	r0, #8
 80016fa:	4082      	lsls	r2, r0
 80016fc:	2400      	movs	r4, #0
 80016fe:	42b3      	cmp	r3, r6
 8001700:	db00      	blt.n	8001704 <__aeabi_dadd+0x2d8>
 8001702:	e6fc      	b.n	80014fe <__aeabi_dadd+0xd2>
 8001704:	1af6      	subs	r6, r6, r3
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <__aeabi_dadd+0x370>)
 8001708:	401a      	ands	r2, r3
 800170a:	4692      	mov	sl, r2
 800170c:	e70a      	b.n	8001524 <__aeabi_dadd+0xf8>
 800170e:	2f00      	cmp	r7, #0
 8001710:	d02b      	beq.n	800176a <__aeabi_dadd+0x33e>
 8001712:	1b97      	subs	r7, r2, r6
 8001714:	2e00      	cmp	r6, #0
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x2ee>
 8001718:	e0b8      	b.n	800188c <__aeabi_dadd+0x460>
 800171a:	4c1f      	ldr	r4, [pc, #124]	; (8001798 <__aeabi_dadd+0x36c>)
 800171c:	42a2      	cmp	r2, r4
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0x2f6>
 8001720:	e11c      	b.n	800195c <__aeabi_dadd+0x530>
 8001722:	2480      	movs	r4, #128	; 0x80
 8001724:	0424      	lsls	r4, r4, #16
 8001726:	4321      	orrs	r1, r4
 8001728:	2f38      	cmp	r7, #56	; 0x38
 800172a:	dd00      	ble.n	800172e <__aeabi_dadd+0x302>
 800172c:	e11e      	b.n	800196c <__aeabi_dadd+0x540>
 800172e:	2f1f      	cmp	r7, #31
 8001730:	dd00      	ble.n	8001734 <__aeabi_dadd+0x308>
 8001732:	e19e      	b.n	8001a72 <__aeabi_dadd+0x646>
 8001734:	2620      	movs	r6, #32
 8001736:	000c      	movs	r4, r1
 8001738:	1bf6      	subs	r6, r6, r7
 800173a:	0018      	movs	r0, r3
 800173c:	40b3      	lsls	r3, r6
 800173e:	40b4      	lsls	r4, r6
 8001740:	40f8      	lsrs	r0, r7
 8001742:	1e5e      	subs	r6, r3, #1
 8001744:	41b3      	sbcs	r3, r6
 8001746:	40f9      	lsrs	r1, r7
 8001748:	4304      	orrs	r4, r0
 800174a:	431c      	orrs	r4, r3
 800174c:	4489      	add	r9, r1
 800174e:	4444      	add	r4, r8
 8001750:	4544      	cmp	r4, r8
 8001752:	419b      	sbcs	r3, r3
 8001754:	425b      	negs	r3, r3
 8001756:	444b      	add	r3, r9
 8001758:	469a      	mov	sl, r3
 800175a:	0016      	movs	r6, r2
 800175c:	e7a8      	b.n	80016b0 <__aeabi_dadd+0x284>
 800175e:	4642      	mov	r2, r8
 8001760:	464c      	mov	r4, r9
 8001762:	4314      	orrs	r4, r2
 8001764:	1e62      	subs	r2, r4, #1
 8001766:	4194      	sbcs	r4, r2
 8001768:	e6a6      	b.n	80014b8 <__aeabi_dadd+0x8c>
 800176a:	4c0d      	ldr	r4, [pc, #52]	; (80017a0 <__aeabi_dadd+0x374>)
 800176c:	1c72      	adds	r2, r6, #1
 800176e:	4222      	tst	r2, r4
 8001770:	d000      	beq.n	8001774 <__aeabi_dadd+0x348>
 8001772:	e0a8      	b.n	80018c6 <__aeabi_dadd+0x49a>
 8001774:	000a      	movs	r2, r1
 8001776:	431a      	orrs	r2, r3
 8001778:	2e00      	cmp	r6, #0
 800177a:	d000      	beq.n	800177e <__aeabi_dadd+0x352>
 800177c:	e10a      	b.n	8001994 <__aeabi_dadd+0x568>
 800177e:	2a00      	cmp	r2, #0
 8001780:	d100      	bne.n	8001784 <__aeabi_dadd+0x358>
 8001782:	e15e      	b.n	8001a42 <__aeabi_dadd+0x616>
 8001784:	464a      	mov	r2, r9
 8001786:	4302      	orrs	r2, r0
 8001788:	d000      	beq.n	800178c <__aeabi_dadd+0x360>
 800178a:	e161      	b.n	8001a50 <__aeabi_dadd+0x624>
 800178c:	074a      	lsls	r2, r1, #29
 800178e:	08db      	lsrs	r3, r3, #3
 8001790:	4313      	orrs	r3, r2
 8001792:	08c9      	lsrs	r1, r1, #3
 8001794:	e77c      	b.n	8001690 <__aeabi_dadd+0x264>
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	000007ff 	.word	0x000007ff
 800179c:	ff7fffff 	.word	0xff7fffff
 80017a0:	000007fe 	.word	0x000007fe
 80017a4:	4ccf      	ldr	r4, [pc, #828]	; (8001ae4 <__aeabi_dadd+0x6b8>)
 80017a6:	42a2      	cmp	r2, r4
 80017a8:	d100      	bne.n	80017ac <__aeabi_dadd+0x380>
 80017aa:	e0ce      	b.n	800194a <__aeabi_dadd+0x51e>
 80017ac:	2480      	movs	r4, #128	; 0x80
 80017ae:	0424      	lsls	r4, r4, #16
 80017b0:	4321      	orrs	r1, r4
 80017b2:	2f38      	cmp	r7, #56	; 0x38
 80017b4:	dc5b      	bgt.n	800186e <__aeabi_dadd+0x442>
 80017b6:	2f1f      	cmp	r7, #31
 80017b8:	dd00      	ble.n	80017bc <__aeabi_dadd+0x390>
 80017ba:	e0dc      	b.n	8001976 <__aeabi_dadd+0x54a>
 80017bc:	2520      	movs	r5, #32
 80017be:	000c      	movs	r4, r1
 80017c0:	1bed      	subs	r5, r5, r7
 80017c2:	001e      	movs	r6, r3
 80017c4:	40ab      	lsls	r3, r5
 80017c6:	40ac      	lsls	r4, r5
 80017c8:	40fe      	lsrs	r6, r7
 80017ca:	1e5d      	subs	r5, r3, #1
 80017cc:	41ab      	sbcs	r3, r5
 80017ce:	4334      	orrs	r4, r6
 80017d0:	40f9      	lsrs	r1, r7
 80017d2:	431c      	orrs	r4, r3
 80017d4:	464b      	mov	r3, r9
 80017d6:	1a5b      	subs	r3, r3, r1
 80017d8:	4699      	mov	r9, r3
 80017da:	e04c      	b.n	8001876 <__aeabi_dadd+0x44a>
 80017dc:	464a      	mov	r2, r9
 80017de:	1a1c      	subs	r4, r3, r0
 80017e0:	1a88      	subs	r0, r1, r2
 80017e2:	42a3      	cmp	r3, r4
 80017e4:	4192      	sbcs	r2, r2
 80017e6:	4252      	negs	r2, r2
 80017e8:	4692      	mov	sl, r2
 80017ea:	0002      	movs	r2, r0
 80017ec:	4650      	mov	r0, sl
 80017ee:	1a12      	subs	r2, r2, r0
 80017f0:	4692      	mov	sl, r2
 80017f2:	0212      	lsls	r2, r2, #8
 80017f4:	d478      	bmi.n	80018e8 <__aeabi_dadd+0x4bc>
 80017f6:	4653      	mov	r3, sl
 80017f8:	4323      	orrs	r3, r4
 80017fa:	d000      	beq.n	80017fe <__aeabi_dadd+0x3d2>
 80017fc:	e66a      	b.n	80014d4 <__aeabi_dadd+0xa8>
 80017fe:	2100      	movs	r1, #0
 8001800:	2500      	movs	r5, #0
 8001802:	e745      	b.n	8001690 <__aeabi_dadd+0x264>
 8001804:	074a      	lsls	r2, r1, #29
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	4313      	orrs	r3, r2
 800180a:	08c9      	lsrs	r1, r1, #3
 800180c:	e73d      	b.n	800168a <__aeabi_dadd+0x25e>
 800180e:	181c      	adds	r4, r3, r0
 8001810:	429c      	cmp	r4, r3
 8001812:	419b      	sbcs	r3, r3
 8001814:	4449      	add	r1, r9
 8001816:	468a      	mov	sl, r1
 8001818:	425b      	negs	r3, r3
 800181a:	449a      	add	sl, r3
 800181c:	4653      	mov	r3, sl
 800181e:	2601      	movs	r6, #1
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	d400      	bmi.n	8001826 <__aeabi_dadd+0x3fa>
 8001824:	e727      	b.n	8001676 <__aeabi_dadd+0x24a>
 8001826:	2602      	movs	r6, #2
 8001828:	4652      	mov	r2, sl
 800182a:	4baf      	ldr	r3, [pc, #700]	; (8001ae8 <__aeabi_dadd+0x6bc>)
 800182c:	2101      	movs	r1, #1
 800182e:	401a      	ands	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	4021      	ands	r1, r4
 8001834:	0862      	lsrs	r2, r4, #1
 8001836:	430a      	orrs	r2, r1
 8001838:	07dc      	lsls	r4, r3, #31
 800183a:	085b      	lsrs	r3, r3, #1
 800183c:	469a      	mov	sl, r3
 800183e:	4314      	orrs	r4, r2
 8001840:	e670      	b.n	8001524 <__aeabi_dadd+0xf8>
 8001842:	003a      	movs	r2, r7
 8001844:	464c      	mov	r4, r9
 8001846:	3a20      	subs	r2, #32
 8001848:	40d4      	lsrs	r4, r2
 800184a:	46a4      	mov	ip, r4
 800184c:	2f20      	cmp	r7, #32
 800184e:	d007      	beq.n	8001860 <__aeabi_dadd+0x434>
 8001850:	2240      	movs	r2, #64	; 0x40
 8001852:	4648      	mov	r0, r9
 8001854:	1bd2      	subs	r2, r2, r7
 8001856:	4090      	lsls	r0, r2
 8001858:	0002      	movs	r2, r0
 800185a:	4640      	mov	r0, r8
 800185c:	4310      	orrs	r0, r2
 800185e:	4680      	mov	r8, r0
 8001860:	4640      	mov	r0, r8
 8001862:	1e42      	subs	r2, r0, #1
 8001864:	4190      	sbcs	r0, r2
 8001866:	4662      	mov	r2, ip
 8001868:	0004      	movs	r4, r0
 800186a:	4314      	orrs	r4, r2
 800186c:	e624      	b.n	80014b8 <__aeabi_dadd+0x8c>
 800186e:	4319      	orrs	r1, r3
 8001870:	000c      	movs	r4, r1
 8001872:	1e63      	subs	r3, r4, #1
 8001874:	419c      	sbcs	r4, r3
 8001876:	4643      	mov	r3, r8
 8001878:	1b1c      	subs	r4, r3, r4
 800187a:	45a0      	cmp	r8, r4
 800187c:	419b      	sbcs	r3, r3
 800187e:	4649      	mov	r1, r9
 8001880:	425b      	negs	r3, r3
 8001882:	1acb      	subs	r3, r1, r3
 8001884:	469a      	mov	sl, r3
 8001886:	4665      	mov	r5, ip
 8001888:	0016      	movs	r6, r2
 800188a:	e61b      	b.n	80014c4 <__aeabi_dadd+0x98>
 800188c:	000c      	movs	r4, r1
 800188e:	431c      	orrs	r4, r3
 8001890:	d100      	bne.n	8001894 <__aeabi_dadd+0x468>
 8001892:	e0c7      	b.n	8001a24 <__aeabi_dadd+0x5f8>
 8001894:	1e7c      	subs	r4, r7, #1
 8001896:	2f01      	cmp	r7, #1
 8001898:	d100      	bne.n	800189c <__aeabi_dadd+0x470>
 800189a:	e0f9      	b.n	8001a90 <__aeabi_dadd+0x664>
 800189c:	4e91      	ldr	r6, [pc, #580]	; (8001ae4 <__aeabi_dadd+0x6b8>)
 800189e:	42b7      	cmp	r7, r6
 80018a0:	d05c      	beq.n	800195c <__aeabi_dadd+0x530>
 80018a2:	0027      	movs	r7, r4
 80018a4:	e740      	b.n	8001728 <__aeabi_dadd+0x2fc>
 80018a6:	2220      	movs	r2, #32
 80018a8:	464c      	mov	r4, r9
 80018aa:	4640      	mov	r0, r8
 80018ac:	1bd2      	subs	r2, r2, r7
 80018ae:	4094      	lsls	r4, r2
 80018b0:	40f8      	lsrs	r0, r7
 80018b2:	4304      	orrs	r4, r0
 80018b4:	4640      	mov	r0, r8
 80018b6:	4090      	lsls	r0, r2
 80018b8:	1e42      	subs	r2, r0, #1
 80018ba:	4190      	sbcs	r0, r2
 80018bc:	464a      	mov	r2, r9
 80018be:	40fa      	lsrs	r2, r7
 80018c0:	4304      	orrs	r4, r0
 80018c2:	1889      	adds	r1, r1, r2
 80018c4:	e6ee      	b.n	80016a4 <__aeabi_dadd+0x278>
 80018c6:	4c87      	ldr	r4, [pc, #540]	; (8001ae4 <__aeabi_dadd+0x6b8>)
 80018c8:	42a2      	cmp	r2, r4
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x4a2>
 80018cc:	e6f9      	b.n	80016c2 <__aeabi_dadd+0x296>
 80018ce:	1818      	adds	r0, r3, r0
 80018d0:	4298      	cmp	r0, r3
 80018d2:	419b      	sbcs	r3, r3
 80018d4:	4449      	add	r1, r9
 80018d6:	425b      	negs	r3, r3
 80018d8:	18cb      	adds	r3, r1, r3
 80018da:	07dc      	lsls	r4, r3, #31
 80018dc:	0840      	lsrs	r0, r0, #1
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	469a      	mov	sl, r3
 80018e2:	0016      	movs	r6, r2
 80018e4:	4304      	orrs	r4, r0
 80018e6:	e6c6      	b.n	8001676 <__aeabi_dadd+0x24a>
 80018e8:	4642      	mov	r2, r8
 80018ea:	1ad4      	subs	r4, r2, r3
 80018ec:	45a0      	cmp	r8, r4
 80018ee:	4180      	sbcs	r0, r0
 80018f0:	464b      	mov	r3, r9
 80018f2:	4240      	negs	r0, r0
 80018f4:	1a59      	subs	r1, r3, r1
 80018f6:	1a0b      	subs	r3, r1, r0
 80018f8:	469a      	mov	sl, r3
 80018fa:	4665      	mov	r5, ip
 80018fc:	e5ea      	b.n	80014d4 <__aeabi_dadd+0xa8>
 80018fe:	464b      	mov	r3, r9
 8001900:	464a      	mov	r2, r9
 8001902:	08c0      	lsrs	r0, r0, #3
 8001904:	075b      	lsls	r3, r3, #29
 8001906:	4665      	mov	r5, ip
 8001908:	4303      	orrs	r3, r0
 800190a:	08d1      	lsrs	r1, r2, #3
 800190c:	e6bd      	b.n	800168a <__aeabi_dadd+0x25e>
 800190e:	2a00      	cmp	r2, #0
 8001910:	d000      	beq.n	8001914 <__aeabi_dadd+0x4e8>
 8001912:	e08e      	b.n	8001a32 <__aeabi_dadd+0x606>
 8001914:	464b      	mov	r3, r9
 8001916:	4303      	orrs	r3, r0
 8001918:	d117      	bne.n	800194a <__aeabi_dadd+0x51e>
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	2500      	movs	r5, #0
 800191e:	0309      	lsls	r1, r1, #12
 8001920:	e6da      	b.n	80016d8 <__aeabi_dadd+0x2ac>
 8001922:	074a      	lsls	r2, r1, #29
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	4313      	orrs	r3, r2
 8001928:	08c9      	lsrs	r1, r1, #3
 800192a:	e6d1      	b.n	80016d0 <__aeabi_dadd+0x2a4>
 800192c:	1a1c      	subs	r4, r3, r0
 800192e:	464a      	mov	r2, r9
 8001930:	42a3      	cmp	r3, r4
 8001932:	419b      	sbcs	r3, r3
 8001934:	1a89      	subs	r1, r1, r2
 8001936:	425b      	negs	r3, r3
 8001938:	1acb      	subs	r3, r1, r3
 800193a:	469a      	mov	sl, r3
 800193c:	2601      	movs	r6, #1
 800193e:	e5c1      	b.n	80014c4 <__aeabi_dadd+0x98>
 8001940:	074a      	lsls	r2, r1, #29
 8001942:	08db      	lsrs	r3, r3, #3
 8001944:	4313      	orrs	r3, r2
 8001946:	08c9      	lsrs	r1, r1, #3
 8001948:	e69f      	b.n	800168a <__aeabi_dadd+0x25e>
 800194a:	4643      	mov	r3, r8
 800194c:	08d8      	lsrs	r0, r3, #3
 800194e:	464b      	mov	r3, r9
 8001950:	464a      	mov	r2, r9
 8001952:	075b      	lsls	r3, r3, #29
 8001954:	4665      	mov	r5, ip
 8001956:	4303      	orrs	r3, r0
 8001958:	08d1      	lsrs	r1, r2, #3
 800195a:	e6b9      	b.n	80016d0 <__aeabi_dadd+0x2a4>
 800195c:	4643      	mov	r3, r8
 800195e:	08d8      	lsrs	r0, r3, #3
 8001960:	464b      	mov	r3, r9
 8001962:	464a      	mov	r2, r9
 8001964:	075b      	lsls	r3, r3, #29
 8001966:	4303      	orrs	r3, r0
 8001968:	08d1      	lsrs	r1, r2, #3
 800196a:	e6b1      	b.n	80016d0 <__aeabi_dadd+0x2a4>
 800196c:	4319      	orrs	r1, r3
 800196e:	000c      	movs	r4, r1
 8001970:	1e63      	subs	r3, r4, #1
 8001972:	419c      	sbcs	r4, r3
 8001974:	e6eb      	b.n	800174e <__aeabi_dadd+0x322>
 8001976:	003c      	movs	r4, r7
 8001978:	000d      	movs	r5, r1
 800197a:	3c20      	subs	r4, #32
 800197c:	40e5      	lsrs	r5, r4
 800197e:	2f20      	cmp	r7, #32
 8001980:	d003      	beq.n	800198a <__aeabi_dadd+0x55e>
 8001982:	2440      	movs	r4, #64	; 0x40
 8001984:	1be4      	subs	r4, r4, r7
 8001986:	40a1      	lsls	r1, r4
 8001988:	430b      	orrs	r3, r1
 800198a:	001c      	movs	r4, r3
 800198c:	1e63      	subs	r3, r4, #1
 800198e:	419c      	sbcs	r4, r3
 8001990:	432c      	orrs	r4, r5
 8001992:	e770      	b.n	8001876 <__aeabi_dadd+0x44a>
 8001994:	2a00      	cmp	r2, #0
 8001996:	d0e1      	beq.n	800195c <__aeabi_dadd+0x530>
 8001998:	464a      	mov	r2, r9
 800199a:	4302      	orrs	r2, r0
 800199c:	d0c1      	beq.n	8001922 <__aeabi_dadd+0x4f6>
 800199e:	074a      	lsls	r2, r1, #29
 80019a0:	08db      	lsrs	r3, r3, #3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	08c9      	lsrs	r1, r1, #3
 80019a8:	0312      	lsls	r2, r2, #12
 80019aa:	4211      	tst	r1, r2
 80019ac:	d008      	beq.n	80019c0 <__aeabi_dadd+0x594>
 80019ae:	4648      	mov	r0, r9
 80019b0:	08c4      	lsrs	r4, r0, #3
 80019b2:	4214      	tst	r4, r2
 80019b4:	d104      	bne.n	80019c0 <__aeabi_dadd+0x594>
 80019b6:	4643      	mov	r3, r8
 80019b8:	0021      	movs	r1, r4
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	0742      	lsls	r2, r0, #29
 80019be:	4313      	orrs	r3, r2
 80019c0:	0f5a      	lsrs	r2, r3, #29
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	0752      	lsls	r2, r2, #29
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	e681      	b.n	80016d0 <__aeabi_dadd+0x2a4>
 80019cc:	464b      	mov	r3, r9
 80019ce:	4303      	orrs	r3, r0
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dadd+0x5a8>
 80019d2:	e714      	b.n	80017fe <__aeabi_dadd+0x3d2>
 80019d4:	464b      	mov	r3, r9
 80019d6:	464a      	mov	r2, r9
 80019d8:	08c0      	lsrs	r0, r0, #3
 80019da:	075b      	lsls	r3, r3, #29
 80019dc:	4665      	mov	r5, ip
 80019de:	4303      	orrs	r3, r0
 80019e0:	08d1      	lsrs	r1, r2, #3
 80019e2:	e655      	b.n	8001690 <__aeabi_dadd+0x264>
 80019e4:	1ac4      	subs	r4, r0, r3
 80019e6:	45a0      	cmp	r8, r4
 80019e8:	4180      	sbcs	r0, r0
 80019ea:	464b      	mov	r3, r9
 80019ec:	4240      	negs	r0, r0
 80019ee:	1a59      	subs	r1, r3, r1
 80019f0:	1a0b      	subs	r3, r1, r0
 80019f2:	469a      	mov	sl, r3
 80019f4:	4665      	mov	r5, ip
 80019f6:	2601      	movs	r6, #1
 80019f8:	e564      	b.n	80014c4 <__aeabi_dadd+0x98>
 80019fa:	1a1c      	subs	r4, r3, r0
 80019fc:	464a      	mov	r2, r9
 80019fe:	42a3      	cmp	r3, r4
 8001a00:	4180      	sbcs	r0, r0
 8001a02:	1a8a      	subs	r2, r1, r2
 8001a04:	4240      	negs	r0, r0
 8001a06:	1a12      	subs	r2, r2, r0
 8001a08:	4692      	mov	sl, r2
 8001a0a:	0212      	lsls	r2, r2, #8
 8001a0c:	d549      	bpl.n	8001aa2 <__aeabi_dadd+0x676>
 8001a0e:	4642      	mov	r2, r8
 8001a10:	1ad4      	subs	r4, r2, r3
 8001a12:	45a0      	cmp	r8, r4
 8001a14:	4180      	sbcs	r0, r0
 8001a16:	464b      	mov	r3, r9
 8001a18:	4240      	negs	r0, r0
 8001a1a:	1a59      	subs	r1, r3, r1
 8001a1c:	1a0b      	subs	r3, r1, r0
 8001a1e:	469a      	mov	sl, r3
 8001a20:	4665      	mov	r5, ip
 8001a22:	e57f      	b.n	8001524 <__aeabi_dadd+0xf8>
 8001a24:	464b      	mov	r3, r9
 8001a26:	464a      	mov	r2, r9
 8001a28:	08c0      	lsrs	r0, r0, #3
 8001a2a:	075b      	lsls	r3, r3, #29
 8001a2c:	4303      	orrs	r3, r0
 8001a2e:	08d1      	lsrs	r1, r2, #3
 8001a30:	e62b      	b.n	800168a <__aeabi_dadd+0x25e>
 8001a32:	464a      	mov	r2, r9
 8001a34:	08db      	lsrs	r3, r3, #3
 8001a36:	4302      	orrs	r2, r0
 8001a38:	d138      	bne.n	8001aac <__aeabi_dadd+0x680>
 8001a3a:	074a      	lsls	r2, r1, #29
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	08c9      	lsrs	r1, r1, #3
 8001a40:	e646      	b.n	80016d0 <__aeabi_dadd+0x2a4>
 8001a42:	464b      	mov	r3, r9
 8001a44:	464a      	mov	r2, r9
 8001a46:	08c0      	lsrs	r0, r0, #3
 8001a48:	075b      	lsls	r3, r3, #29
 8001a4a:	4303      	orrs	r3, r0
 8001a4c:	08d1      	lsrs	r1, r2, #3
 8001a4e:	e61f      	b.n	8001690 <__aeabi_dadd+0x264>
 8001a50:	181c      	adds	r4, r3, r0
 8001a52:	429c      	cmp	r4, r3
 8001a54:	419b      	sbcs	r3, r3
 8001a56:	4449      	add	r1, r9
 8001a58:	468a      	mov	sl, r1
 8001a5a:	425b      	negs	r3, r3
 8001a5c:	449a      	add	sl, r3
 8001a5e:	4653      	mov	r3, sl
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	d400      	bmi.n	8001a66 <__aeabi_dadd+0x63a>
 8001a64:	e607      	b.n	8001676 <__aeabi_dadd+0x24a>
 8001a66:	4652      	mov	r2, sl
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <__aeabi_dadd+0x6bc>)
 8001a6a:	2601      	movs	r6, #1
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	4692      	mov	sl, r2
 8001a70:	e601      	b.n	8001676 <__aeabi_dadd+0x24a>
 8001a72:	003c      	movs	r4, r7
 8001a74:	000e      	movs	r6, r1
 8001a76:	3c20      	subs	r4, #32
 8001a78:	40e6      	lsrs	r6, r4
 8001a7a:	2f20      	cmp	r7, #32
 8001a7c:	d003      	beq.n	8001a86 <__aeabi_dadd+0x65a>
 8001a7e:	2440      	movs	r4, #64	; 0x40
 8001a80:	1be4      	subs	r4, r4, r7
 8001a82:	40a1      	lsls	r1, r4
 8001a84:	430b      	orrs	r3, r1
 8001a86:	001c      	movs	r4, r3
 8001a88:	1e63      	subs	r3, r4, #1
 8001a8a:	419c      	sbcs	r4, r3
 8001a8c:	4334      	orrs	r4, r6
 8001a8e:	e65e      	b.n	800174e <__aeabi_dadd+0x322>
 8001a90:	4443      	add	r3, r8
 8001a92:	4283      	cmp	r3, r0
 8001a94:	4180      	sbcs	r0, r0
 8001a96:	4449      	add	r1, r9
 8001a98:	468a      	mov	sl, r1
 8001a9a:	4240      	negs	r0, r0
 8001a9c:	001c      	movs	r4, r3
 8001a9e:	4482      	add	sl, r0
 8001aa0:	e6bc      	b.n	800181c <__aeabi_dadd+0x3f0>
 8001aa2:	4653      	mov	r3, sl
 8001aa4:	4323      	orrs	r3, r4
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dadd+0x67e>
 8001aa8:	e6a9      	b.n	80017fe <__aeabi_dadd+0x3d2>
 8001aaa:	e5e4      	b.n	8001676 <__aeabi_dadd+0x24a>
 8001aac:	074a      	lsls	r2, r1, #29
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	08c9      	lsrs	r1, r1, #3
 8001ab4:	0312      	lsls	r2, r2, #12
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d009      	beq.n	8001ace <__aeabi_dadd+0x6a2>
 8001aba:	4648      	mov	r0, r9
 8001abc:	08c4      	lsrs	r4, r0, #3
 8001abe:	4214      	tst	r4, r2
 8001ac0:	d105      	bne.n	8001ace <__aeabi_dadd+0x6a2>
 8001ac2:	4643      	mov	r3, r8
 8001ac4:	4665      	mov	r5, ip
 8001ac6:	0021      	movs	r1, r4
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	0742      	lsls	r2, r0, #29
 8001acc:	4313      	orrs	r3, r2
 8001ace:	0f5a      	lsrs	r2, r3, #29
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	08db      	lsrs	r3, r3, #3
 8001ad4:	0752      	lsls	r2, r2, #29
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	e5fa      	b.n	80016d0 <__aeabi_dadd+0x2a4>
 8001ada:	2300      	movs	r3, #0
 8001adc:	4a01      	ldr	r2, [pc, #4]	; (8001ae4 <__aeabi_dadd+0x6b8>)
 8001ade:	001c      	movs	r4, r3
 8001ae0:	e540      	b.n	8001564 <__aeabi_dadd+0x138>
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	000007ff 	.word	0x000007ff
 8001ae8:	ff7fffff 	.word	0xff7fffff

08001aec <__aeabi_ddiv>:
 8001aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aee:	4657      	mov	r7, sl
 8001af0:	464e      	mov	r6, r9
 8001af2:	4645      	mov	r5, r8
 8001af4:	46de      	mov	lr, fp
 8001af6:	b5e0      	push	{r5, r6, r7, lr}
 8001af8:	030c      	lsls	r4, r1, #12
 8001afa:	001f      	movs	r7, r3
 8001afc:	004b      	lsls	r3, r1, #1
 8001afe:	4681      	mov	r9, r0
 8001b00:	4692      	mov	sl, r2
 8001b02:	0005      	movs	r5, r0
 8001b04:	b085      	sub	sp, #20
 8001b06:	0b24      	lsrs	r4, r4, #12
 8001b08:	0d5b      	lsrs	r3, r3, #21
 8001b0a:	0fce      	lsrs	r6, r1, #31
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_ddiv+0x26>
 8001b10:	e152      	b.n	8001db8 <__aeabi_ddiv+0x2cc>
 8001b12:	4ad2      	ldr	r2, [pc, #840]	; (8001e5c <__aeabi_ddiv+0x370>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_ddiv+0x2e>
 8001b18:	e16e      	b.n	8001df8 <__aeabi_ddiv+0x30c>
 8001b1a:	0f42      	lsrs	r2, r0, #29
 8001b1c:	00e4      	lsls	r4, r4, #3
 8001b1e:	4314      	orrs	r4, r2
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	0412      	lsls	r2, r2, #16
 8001b24:	4322      	orrs	r2, r4
 8001b26:	4690      	mov	r8, r2
 8001b28:	4acd      	ldr	r2, [pc, #820]	; (8001e60 <__aeabi_ddiv+0x374>)
 8001b2a:	00c5      	lsls	r5, r0, #3
 8001b2c:	4693      	mov	fp, r2
 8001b2e:	449b      	add	fp, r3
 8001b30:	2300      	movs	r3, #0
 8001b32:	4699      	mov	r9, r3
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	033c      	lsls	r4, r7, #12
 8001b38:	007b      	lsls	r3, r7, #1
 8001b3a:	4650      	mov	r0, sl
 8001b3c:	0b24      	lsrs	r4, r4, #12
 8001b3e:	0d5b      	lsrs	r3, r3, #21
 8001b40:	0fff      	lsrs	r7, r7, #31
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d100      	bne.n	8001b48 <__aeabi_ddiv+0x5c>
 8001b46:	e11a      	b.n	8001d7e <__aeabi_ddiv+0x292>
 8001b48:	4ac4      	ldr	r2, [pc, #784]	; (8001e5c <__aeabi_ddiv+0x370>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_ddiv+0x64>
 8001b4e:	e15e      	b.n	8001e0e <__aeabi_ddiv+0x322>
 8001b50:	0f42      	lsrs	r2, r0, #29
 8001b52:	00e4      	lsls	r4, r4, #3
 8001b54:	4322      	orrs	r2, r4
 8001b56:	2480      	movs	r4, #128	; 0x80
 8001b58:	0424      	lsls	r4, r4, #16
 8001b5a:	4314      	orrs	r4, r2
 8001b5c:	4ac0      	ldr	r2, [pc, #768]	; (8001e60 <__aeabi_ddiv+0x374>)
 8001b5e:	00c1      	lsls	r1, r0, #3
 8001b60:	4694      	mov	ip, r2
 8001b62:	465a      	mov	r2, fp
 8001b64:	4463      	add	r3, ip
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	469b      	mov	fp, r3
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	0033      	movs	r3, r6
 8001b6e:	407b      	eors	r3, r7
 8001b70:	469a      	mov	sl, r3
 8001b72:	464b      	mov	r3, r9
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d827      	bhi.n	8001bc8 <__aeabi_ddiv+0xdc>
 8001b78:	4aba      	ldr	r2, [pc, #744]	; (8001e64 <__aeabi_ddiv+0x378>)
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	58d3      	ldr	r3, [r2, r3]
 8001b7e:	469f      	mov	pc, r3
 8001b80:	46b2      	mov	sl, r6
 8001b82:	9b00      	ldr	r3, [sp, #0]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d016      	beq.n	8001bb6 <__aeabi_ddiv+0xca>
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_ddiv+0xa2>
 8001b8c:	e287      	b.n	800209e <__aeabi_ddiv+0x5b2>
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d000      	beq.n	8001b94 <__aeabi_ddiv+0xa8>
 8001b92:	e0d5      	b.n	8001d40 <__aeabi_ddiv+0x254>
 8001b94:	2300      	movs	r3, #0
 8001b96:	2200      	movs	r2, #0
 8001b98:	2500      	movs	r5, #0
 8001b9a:	051b      	lsls	r3, r3, #20
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	07d2      	lsls	r2, r2, #31
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	0028      	movs	r0, r5
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	b005      	add	sp, #20
 8001baa:	bcf0      	pop	{r4, r5, r6, r7}
 8001bac:	46bb      	mov	fp, r7
 8001bae:	46b2      	mov	sl, r6
 8001bb0:	46a9      	mov	r9, r5
 8001bb2:	46a0      	mov	r8, r4
 8001bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2500      	movs	r5, #0
 8001bba:	4ba8      	ldr	r3, [pc, #672]	; (8001e5c <__aeabi_ddiv+0x370>)
 8001bbc:	e7ed      	b.n	8001b9a <__aeabi_ddiv+0xae>
 8001bbe:	46ba      	mov	sl, r7
 8001bc0:	46a0      	mov	r8, r4
 8001bc2:	000d      	movs	r5, r1
 8001bc4:	9000      	str	r0, [sp, #0]
 8001bc6:	e7dc      	b.n	8001b82 <__aeabi_ddiv+0x96>
 8001bc8:	4544      	cmp	r4, r8
 8001bca:	d200      	bcs.n	8001bce <__aeabi_ddiv+0xe2>
 8001bcc:	e1c4      	b.n	8001f58 <__aeabi_ddiv+0x46c>
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0xe6>
 8001bd0:	e1bf      	b.n	8001f52 <__aeabi_ddiv+0x466>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	425b      	negs	r3, r3
 8001bd6:	469c      	mov	ip, r3
 8001bd8:	002e      	movs	r6, r5
 8001bda:	4640      	mov	r0, r8
 8001bdc:	2500      	movs	r5, #0
 8001bde:	44e3      	add	fp, ip
 8001be0:	0223      	lsls	r3, r4, #8
 8001be2:	0e0c      	lsrs	r4, r1, #24
 8001be4:	431c      	orrs	r4, r3
 8001be6:	0c1b      	lsrs	r3, r3, #16
 8001be8:	4699      	mov	r9, r3
 8001bea:	0423      	lsls	r3, r4, #16
 8001bec:	020a      	lsls	r2, r1, #8
 8001bee:	0c1f      	lsrs	r7, r3, #16
 8001bf0:	4649      	mov	r1, r9
 8001bf2:	9200      	str	r2, [sp, #0]
 8001bf4:	9701      	str	r7, [sp, #4]
 8001bf6:	f7fe fb2f 	bl	8000258 <__aeabi_uidivmod>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	437a      	muls	r2, r7
 8001bfe:	040b      	lsls	r3, r1, #16
 8001c00:	0c31      	lsrs	r1, r6, #16
 8001c02:	4680      	mov	r8, r0
 8001c04:	4319      	orrs	r1, r3
 8001c06:	428a      	cmp	r2, r1
 8001c08:	d907      	bls.n	8001c1a <__aeabi_ddiv+0x12e>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	425b      	negs	r3, r3
 8001c0e:	469c      	mov	ip, r3
 8001c10:	1909      	adds	r1, r1, r4
 8001c12:	44e0      	add	r8, ip
 8001c14:	428c      	cmp	r4, r1
 8001c16:	d800      	bhi.n	8001c1a <__aeabi_ddiv+0x12e>
 8001c18:	e201      	b.n	800201e <__aeabi_ddiv+0x532>
 8001c1a:	1a88      	subs	r0, r1, r2
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	f7fe fb1b 	bl	8000258 <__aeabi_uidivmod>
 8001c22:	9a01      	ldr	r2, [sp, #4]
 8001c24:	0436      	lsls	r6, r6, #16
 8001c26:	4342      	muls	r2, r0
 8001c28:	0409      	lsls	r1, r1, #16
 8001c2a:	0c36      	lsrs	r6, r6, #16
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	430e      	orrs	r6, r1
 8001c30:	42b2      	cmp	r2, r6
 8001c32:	d904      	bls.n	8001c3e <__aeabi_ddiv+0x152>
 8001c34:	1936      	adds	r6, r6, r4
 8001c36:	3b01      	subs	r3, #1
 8001c38:	42b4      	cmp	r4, r6
 8001c3a:	d800      	bhi.n	8001c3e <__aeabi_ddiv+0x152>
 8001c3c:	e1e9      	b.n	8002012 <__aeabi_ddiv+0x526>
 8001c3e:	1ab0      	subs	r0, r6, r2
 8001c40:	4642      	mov	r2, r8
 8001c42:	9e00      	ldr	r6, [sp, #0]
 8001c44:	0412      	lsls	r2, r2, #16
 8001c46:	431a      	orrs	r2, r3
 8001c48:	0c33      	lsrs	r3, r6, #16
 8001c4a:	001f      	movs	r7, r3
 8001c4c:	0c11      	lsrs	r1, r2, #16
 8001c4e:	4690      	mov	r8, r2
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	0413      	lsls	r3, r2, #16
 8001c54:	0432      	lsls	r2, r6, #16
 8001c56:	0c16      	lsrs	r6, r2, #16
 8001c58:	0032      	movs	r2, r6
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	435a      	muls	r2, r3
 8001c5e:	9603      	str	r6, [sp, #12]
 8001c60:	437b      	muls	r3, r7
 8001c62:	434e      	muls	r6, r1
 8001c64:	4379      	muls	r1, r7
 8001c66:	0c17      	lsrs	r7, r2, #16
 8001c68:	46bc      	mov	ip, r7
 8001c6a:	199b      	adds	r3, r3, r6
 8001c6c:	4463      	add	r3, ip
 8001c6e:	429e      	cmp	r6, r3
 8001c70:	d903      	bls.n	8001c7a <__aeabi_ddiv+0x18e>
 8001c72:	2680      	movs	r6, #128	; 0x80
 8001c74:	0276      	lsls	r6, r6, #9
 8001c76:	46b4      	mov	ip, r6
 8001c78:	4461      	add	r1, ip
 8001c7a:	0c1e      	lsrs	r6, r3, #16
 8001c7c:	1871      	adds	r1, r6, r1
 8001c7e:	0416      	lsls	r6, r2, #16
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	0c36      	lsrs	r6, r6, #16
 8001c84:	199e      	adds	r6, r3, r6
 8001c86:	4288      	cmp	r0, r1
 8001c88:	d302      	bcc.n	8001c90 <__aeabi_ddiv+0x1a4>
 8001c8a:	d112      	bne.n	8001cb2 <__aeabi_ddiv+0x1c6>
 8001c8c:	42b5      	cmp	r5, r6
 8001c8e:	d210      	bcs.n	8001cb2 <__aeabi_ddiv+0x1c6>
 8001c90:	4643      	mov	r3, r8
 8001c92:	1e5a      	subs	r2, r3, #1
 8001c94:	9b00      	ldr	r3, [sp, #0]
 8001c96:	469c      	mov	ip, r3
 8001c98:	4465      	add	r5, ip
 8001c9a:	001f      	movs	r7, r3
 8001c9c:	429d      	cmp	r5, r3
 8001c9e:	419b      	sbcs	r3, r3
 8001ca0:	425b      	negs	r3, r3
 8001ca2:	191b      	adds	r3, r3, r4
 8001ca4:	18c0      	adds	r0, r0, r3
 8001ca6:	4284      	cmp	r4, r0
 8001ca8:	d200      	bcs.n	8001cac <__aeabi_ddiv+0x1c0>
 8001caa:	e19e      	b.n	8001fea <__aeabi_ddiv+0x4fe>
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x1c4>
 8001cae:	e199      	b.n	8001fe4 <__aeabi_ddiv+0x4f8>
 8001cb0:	4690      	mov	r8, r2
 8001cb2:	1bae      	subs	r6, r5, r6
 8001cb4:	42b5      	cmp	r5, r6
 8001cb6:	41ad      	sbcs	r5, r5
 8001cb8:	1a40      	subs	r0, r0, r1
 8001cba:	426d      	negs	r5, r5
 8001cbc:	1b40      	subs	r0, r0, r5
 8001cbe:	4284      	cmp	r4, r0
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_ddiv+0x1d8>
 8001cc2:	e1d2      	b.n	800206a <__aeabi_ddiv+0x57e>
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	f7fe fac7 	bl	8000258 <__aeabi_uidivmod>
 8001cca:	9a01      	ldr	r2, [sp, #4]
 8001ccc:	040b      	lsls	r3, r1, #16
 8001cce:	4342      	muls	r2, r0
 8001cd0:	0c31      	lsrs	r1, r6, #16
 8001cd2:	0005      	movs	r5, r0
 8001cd4:	4319      	orrs	r1, r3
 8001cd6:	428a      	cmp	r2, r1
 8001cd8:	d900      	bls.n	8001cdc <__aeabi_ddiv+0x1f0>
 8001cda:	e16c      	b.n	8001fb6 <__aeabi_ddiv+0x4ca>
 8001cdc:	1a88      	subs	r0, r1, r2
 8001cde:	4649      	mov	r1, r9
 8001ce0:	f7fe faba 	bl	8000258 <__aeabi_uidivmod>
 8001ce4:	9a01      	ldr	r2, [sp, #4]
 8001ce6:	0436      	lsls	r6, r6, #16
 8001ce8:	4342      	muls	r2, r0
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	0c36      	lsrs	r6, r6, #16
 8001cee:	0003      	movs	r3, r0
 8001cf0:	430e      	orrs	r6, r1
 8001cf2:	42b2      	cmp	r2, r6
 8001cf4:	d900      	bls.n	8001cf8 <__aeabi_ddiv+0x20c>
 8001cf6:	e153      	b.n	8001fa0 <__aeabi_ddiv+0x4b4>
 8001cf8:	9803      	ldr	r0, [sp, #12]
 8001cfa:	1ab6      	subs	r6, r6, r2
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	042d      	lsls	r5, r5, #16
 8001d00:	431d      	orrs	r5, r3
 8001d02:	9f02      	ldr	r7, [sp, #8]
 8001d04:	042b      	lsls	r3, r5, #16
 8001d06:	0c1b      	lsrs	r3, r3, #16
 8001d08:	435a      	muls	r2, r3
 8001d0a:	437b      	muls	r3, r7
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	0c29      	lsrs	r1, r5, #16
 8001d10:	4348      	muls	r0, r1
 8001d12:	0c13      	lsrs	r3, r2, #16
 8001d14:	4484      	add	ip, r0
 8001d16:	4463      	add	r3, ip
 8001d18:	4379      	muls	r1, r7
 8001d1a:	4298      	cmp	r0, r3
 8001d1c:	d903      	bls.n	8001d26 <__aeabi_ddiv+0x23a>
 8001d1e:	2080      	movs	r0, #128	; 0x80
 8001d20:	0240      	lsls	r0, r0, #9
 8001d22:	4684      	mov	ip, r0
 8001d24:	4461      	add	r1, ip
 8001d26:	0c18      	lsrs	r0, r3, #16
 8001d28:	0412      	lsls	r2, r2, #16
 8001d2a:	041b      	lsls	r3, r3, #16
 8001d2c:	0c12      	lsrs	r2, r2, #16
 8001d2e:	1840      	adds	r0, r0, r1
 8001d30:	189b      	adds	r3, r3, r2
 8001d32:	4286      	cmp	r6, r0
 8001d34:	d200      	bcs.n	8001d38 <__aeabi_ddiv+0x24c>
 8001d36:	e100      	b.n	8001f3a <__aeabi_ddiv+0x44e>
 8001d38:	d100      	bne.n	8001d3c <__aeabi_ddiv+0x250>
 8001d3a:	e0fb      	b.n	8001f34 <__aeabi_ddiv+0x448>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	431d      	orrs	r5, r3
 8001d40:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <__aeabi_ddiv+0x37c>)
 8001d42:	445b      	add	r3, fp
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_ddiv+0x25e>
 8001d48:	e0aa      	b.n	8001ea0 <__aeabi_ddiv+0x3b4>
 8001d4a:	076a      	lsls	r2, r5, #29
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_ddiv+0x264>
 8001d4e:	e13d      	b.n	8001fcc <__aeabi_ddiv+0x4e0>
 8001d50:	08e9      	lsrs	r1, r5, #3
 8001d52:	4642      	mov	r2, r8
 8001d54:	01d2      	lsls	r2, r2, #7
 8001d56:	d506      	bpl.n	8001d66 <__aeabi_ddiv+0x27a>
 8001d58:	4642      	mov	r2, r8
 8001d5a:	4b44      	ldr	r3, [pc, #272]	; (8001e6c <__aeabi_ddiv+0x380>)
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	4690      	mov	r8, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	445b      	add	r3, fp
 8001d66:	4a42      	ldr	r2, [pc, #264]	; (8001e70 <__aeabi_ddiv+0x384>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_ddiv+0x282>
 8001d6c:	e723      	b.n	8001bb6 <__aeabi_ddiv+0xca>
 8001d6e:	4642      	mov	r2, r8
 8001d70:	055b      	lsls	r3, r3, #21
 8001d72:	0755      	lsls	r5, r2, #29
 8001d74:	0252      	lsls	r2, r2, #9
 8001d76:	430d      	orrs	r5, r1
 8001d78:	0b12      	lsrs	r2, r2, #12
 8001d7a:	0d5b      	lsrs	r3, r3, #21
 8001d7c:	e70d      	b.n	8001b9a <__aeabi_ddiv+0xae>
 8001d7e:	4651      	mov	r1, sl
 8001d80:	4321      	orrs	r1, r4
 8001d82:	d100      	bne.n	8001d86 <__aeabi_ddiv+0x29a>
 8001d84:	e07c      	b.n	8001e80 <__aeabi_ddiv+0x394>
 8001d86:	2c00      	cmp	r4, #0
 8001d88:	d100      	bne.n	8001d8c <__aeabi_ddiv+0x2a0>
 8001d8a:	e0fb      	b.n	8001f84 <__aeabi_ddiv+0x498>
 8001d8c:	0020      	movs	r0, r4
 8001d8e:	f001 fa63 	bl	8003258 <__clzsi2>
 8001d92:	0002      	movs	r2, r0
 8001d94:	3a0b      	subs	r2, #11
 8001d96:	231d      	movs	r3, #29
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	4652      	mov	r2, sl
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	40da      	lsrs	r2, r3
 8001da0:	4653      	mov	r3, sl
 8001da2:	3908      	subs	r1, #8
 8001da4:	408b      	lsls	r3, r1
 8001da6:	408c      	lsls	r4, r1
 8001da8:	0019      	movs	r1, r3
 8001daa:	4314      	orrs	r4, r2
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <__aeabi_ddiv+0x388>)
 8001dae:	4458      	add	r0, fp
 8001db0:	469b      	mov	fp, r3
 8001db2:	4483      	add	fp, r0
 8001db4:	2000      	movs	r0, #0
 8001db6:	e6d9      	b.n	8001b6c <__aeabi_ddiv+0x80>
 8001db8:	0003      	movs	r3, r0
 8001dba:	4323      	orrs	r3, r4
 8001dbc:	4698      	mov	r8, r3
 8001dbe:	d044      	beq.n	8001e4a <__aeabi_ddiv+0x35e>
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_ddiv+0x2da>
 8001dc4:	e0cf      	b.n	8001f66 <__aeabi_ddiv+0x47a>
 8001dc6:	0020      	movs	r0, r4
 8001dc8:	f001 fa46 	bl	8003258 <__clzsi2>
 8001dcc:	0001      	movs	r1, r0
 8001dce:	0002      	movs	r2, r0
 8001dd0:	390b      	subs	r1, #11
 8001dd2:	231d      	movs	r3, #29
 8001dd4:	1a5b      	subs	r3, r3, r1
 8001dd6:	4649      	mov	r1, r9
 8001dd8:	0010      	movs	r0, r2
 8001dda:	40d9      	lsrs	r1, r3
 8001ddc:	3808      	subs	r0, #8
 8001dde:	4084      	lsls	r4, r0
 8001de0:	000b      	movs	r3, r1
 8001de2:	464d      	mov	r5, r9
 8001de4:	4323      	orrs	r3, r4
 8001de6:	4698      	mov	r8, r3
 8001de8:	4085      	lsls	r5, r0
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <__aeabi_ddiv+0x38c>)
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	469b      	mov	fp, r3
 8001df0:	2300      	movs	r3, #0
 8001df2:	4699      	mov	r9, r3
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	e69e      	b.n	8001b36 <__aeabi_ddiv+0x4a>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	4322      	orrs	r2, r4
 8001dfc:	4690      	mov	r8, r2
 8001dfe:	d11d      	bne.n	8001e3c <__aeabi_ddiv+0x350>
 8001e00:	2208      	movs	r2, #8
 8001e02:	469b      	mov	fp, r3
 8001e04:	2302      	movs	r3, #2
 8001e06:	2500      	movs	r5, #0
 8001e08:	4691      	mov	r9, r2
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	e693      	b.n	8001b36 <__aeabi_ddiv+0x4a>
 8001e0e:	4651      	mov	r1, sl
 8001e10:	4321      	orrs	r1, r4
 8001e12:	d109      	bne.n	8001e28 <__aeabi_ddiv+0x33c>
 8001e14:	2302      	movs	r3, #2
 8001e16:	464a      	mov	r2, r9
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <__aeabi_ddiv+0x390>)
 8001e1c:	4691      	mov	r9, r2
 8001e1e:	469c      	mov	ip, r3
 8001e20:	2400      	movs	r4, #0
 8001e22:	2002      	movs	r0, #2
 8001e24:	44e3      	add	fp, ip
 8001e26:	e6a1      	b.n	8001b6c <__aeabi_ddiv+0x80>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	464a      	mov	r2, r9
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <__aeabi_ddiv+0x390>)
 8001e30:	4691      	mov	r9, r2
 8001e32:	469c      	mov	ip, r3
 8001e34:	4651      	mov	r1, sl
 8001e36:	2003      	movs	r0, #3
 8001e38:	44e3      	add	fp, ip
 8001e3a:	e697      	b.n	8001b6c <__aeabi_ddiv+0x80>
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	469b      	mov	fp, r3
 8001e40:	2303      	movs	r3, #3
 8001e42:	46a0      	mov	r8, r4
 8001e44:	4691      	mov	r9, r2
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	e675      	b.n	8001b36 <__aeabi_ddiv+0x4a>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	2300      	movs	r3, #0
 8001e50:	469b      	mov	fp, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	2500      	movs	r5, #0
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	e66d      	b.n	8001b36 <__aeabi_ddiv+0x4a>
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	000007ff 	.word	0x000007ff
 8001e60:	fffffc01 	.word	0xfffffc01
 8001e64:	0800e01c 	.word	0x0800e01c
 8001e68:	000003ff 	.word	0x000003ff
 8001e6c:	feffffff 	.word	0xfeffffff
 8001e70:	000007fe 	.word	0x000007fe
 8001e74:	000003f3 	.word	0x000003f3
 8001e78:	fffffc0d 	.word	0xfffffc0d
 8001e7c:	fffff801 	.word	0xfffff801
 8001e80:	464a      	mov	r2, r9
 8001e82:	2301      	movs	r3, #1
 8001e84:	431a      	orrs	r2, r3
 8001e86:	4691      	mov	r9, r2
 8001e88:	2400      	movs	r4, #0
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e66e      	b.n	8001b6c <__aeabi_ddiv+0x80>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	469a      	mov	sl, r3
 8001e94:	2500      	movs	r5, #0
 8001e96:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <__aeabi_ddiv+0x5cc>)
 8001e98:	0312      	lsls	r2, r2, #12
 8001e9a:	e67e      	b.n	8001b9a <__aeabi_ddiv+0xae>
 8001e9c:	2501      	movs	r5, #1
 8001e9e:	426d      	negs	r5, r5
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	1ad2      	subs	r2, r2, r3
 8001ea4:	2a38      	cmp	r2, #56	; 0x38
 8001ea6:	dd00      	ble.n	8001eaa <__aeabi_ddiv+0x3be>
 8001ea8:	e674      	b.n	8001b94 <__aeabi_ddiv+0xa8>
 8001eaa:	2a1f      	cmp	r2, #31
 8001eac:	dc00      	bgt.n	8001eb0 <__aeabi_ddiv+0x3c4>
 8001eae:	e0bd      	b.n	800202c <__aeabi_ddiv+0x540>
 8001eb0:	211f      	movs	r1, #31
 8001eb2:	4249      	negs	r1, r1
 8001eb4:	1acb      	subs	r3, r1, r3
 8001eb6:	4641      	mov	r1, r8
 8001eb8:	40d9      	lsrs	r1, r3
 8001eba:	000b      	movs	r3, r1
 8001ebc:	2a20      	cmp	r2, #32
 8001ebe:	d004      	beq.n	8001eca <__aeabi_ddiv+0x3de>
 8001ec0:	4641      	mov	r1, r8
 8001ec2:	4a7e      	ldr	r2, [pc, #504]	; (80020bc <__aeabi_ddiv+0x5d0>)
 8001ec4:	445a      	add	r2, fp
 8001ec6:	4091      	lsls	r1, r2
 8001ec8:	430d      	orrs	r5, r1
 8001eca:	0029      	movs	r1, r5
 8001ecc:	1e4a      	subs	r2, r1, #1
 8001ece:	4191      	sbcs	r1, r2
 8001ed0:	4319      	orrs	r1, r3
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	001d      	movs	r5, r3
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	400d      	ands	r5, r1
 8001eda:	420b      	tst	r3, r1
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_ddiv+0x3f4>
 8001ede:	e0d0      	b.n	8002082 <__aeabi_ddiv+0x596>
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	2a04      	cmp	r2, #4
 8001ee8:	d100      	bne.n	8001eec <__aeabi_ddiv+0x400>
 8001eea:	e0c7      	b.n	800207c <__aeabi_ddiv+0x590>
 8001eec:	1d0a      	adds	r2, r1, #4
 8001eee:	428a      	cmp	r2, r1
 8001ef0:	4189      	sbcs	r1, r1
 8001ef2:	4249      	negs	r1, r1
 8001ef4:	185b      	adds	r3, r3, r1
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	021a      	lsls	r2, r3, #8
 8001efa:	d400      	bmi.n	8001efe <__aeabi_ddiv+0x412>
 8001efc:	e0be      	b.n	800207c <__aeabi_ddiv+0x590>
 8001efe:	2301      	movs	r3, #1
 8001f00:	2200      	movs	r2, #0
 8001f02:	2500      	movs	r5, #0
 8001f04:	e649      	b.n	8001b9a <__aeabi_ddiv+0xae>
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	4643      	mov	r3, r8
 8001f0a:	0312      	lsls	r2, r2, #12
 8001f0c:	4213      	tst	r3, r2
 8001f0e:	d008      	beq.n	8001f22 <__aeabi_ddiv+0x436>
 8001f10:	4214      	tst	r4, r2
 8001f12:	d106      	bne.n	8001f22 <__aeabi_ddiv+0x436>
 8001f14:	4322      	orrs	r2, r4
 8001f16:	0312      	lsls	r2, r2, #12
 8001f18:	46ba      	mov	sl, r7
 8001f1a:	000d      	movs	r5, r1
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <__aeabi_ddiv+0x5cc>)
 8001f1e:	0b12      	lsrs	r2, r2, #12
 8001f20:	e63b      	b.n	8001b9a <__aeabi_ddiv+0xae>
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	4643      	mov	r3, r8
 8001f26:	0312      	lsls	r2, r2, #12
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	0312      	lsls	r2, r2, #12
 8001f2c:	46b2      	mov	sl, r6
 8001f2e:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <__aeabi_ddiv+0x5cc>)
 8001f30:	0b12      	lsrs	r2, r2, #12
 8001f32:	e632      	b.n	8001b9a <__aeabi_ddiv+0xae>
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d100      	bne.n	8001f3a <__aeabi_ddiv+0x44e>
 8001f38:	e702      	b.n	8001d40 <__aeabi_ddiv+0x254>
 8001f3a:	19a6      	adds	r6, r4, r6
 8001f3c:	1e6a      	subs	r2, r5, #1
 8001f3e:	42a6      	cmp	r6, r4
 8001f40:	d200      	bcs.n	8001f44 <__aeabi_ddiv+0x458>
 8001f42:	e089      	b.n	8002058 <__aeabi_ddiv+0x56c>
 8001f44:	4286      	cmp	r6, r0
 8001f46:	d200      	bcs.n	8001f4a <__aeabi_ddiv+0x45e>
 8001f48:	e09f      	b.n	800208a <__aeabi_ddiv+0x59e>
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_ddiv+0x462>
 8001f4c:	e0af      	b.n	80020ae <__aeabi_ddiv+0x5c2>
 8001f4e:	0015      	movs	r5, r2
 8001f50:	e6f4      	b.n	8001d3c <__aeabi_ddiv+0x250>
 8001f52:	42a9      	cmp	r1, r5
 8001f54:	d900      	bls.n	8001f58 <__aeabi_ddiv+0x46c>
 8001f56:	e63c      	b.n	8001bd2 <__aeabi_ddiv+0xe6>
 8001f58:	4643      	mov	r3, r8
 8001f5a:	07de      	lsls	r6, r3, #31
 8001f5c:	0858      	lsrs	r0, r3, #1
 8001f5e:	086b      	lsrs	r3, r5, #1
 8001f60:	431e      	orrs	r6, r3
 8001f62:	07ed      	lsls	r5, r5, #31
 8001f64:	e63c      	b.n	8001be0 <__aeabi_ddiv+0xf4>
 8001f66:	f001 f977 	bl	8003258 <__clzsi2>
 8001f6a:	0001      	movs	r1, r0
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	3115      	adds	r1, #21
 8001f70:	3220      	adds	r2, #32
 8001f72:	291c      	cmp	r1, #28
 8001f74:	dc00      	bgt.n	8001f78 <__aeabi_ddiv+0x48c>
 8001f76:	e72c      	b.n	8001dd2 <__aeabi_ddiv+0x2e6>
 8001f78:	464b      	mov	r3, r9
 8001f7a:	3808      	subs	r0, #8
 8001f7c:	4083      	lsls	r3, r0
 8001f7e:	2500      	movs	r5, #0
 8001f80:	4698      	mov	r8, r3
 8001f82:	e732      	b.n	8001dea <__aeabi_ddiv+0x2fe>
 8001f84:	f001 f968 	bl	8003258 <__clzsi2>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	3215      	adds	r2, #21
 8001f8e:	3020      	adds	r0, #32
 8001f90:	2a1c      	cmp	r2, #28
 8001f92:	dc00      	bgt.n	8001f96 <__aeabi_ddiv+0x4aa>
 8001f94:	e6ff      	b.n	8001d96 <__aeabi_ddiv+0x2aa>
 8001f96:	4654      	mov	r4, sl
 8001f98:	3b08      	subs	r3, #8
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	409c      	lsls	r4, r3
 8001f9e:	e705      	b.n	8001dac <__aeabi_ddiv+0x2c0>
 8001fa0:	1936      	adds	r6, r6, r4
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	42b4      	cmp	r4, r6
 8001fa6:	d900      	bls.n	8001faa <__aeabi_ddiv+0x4be>
 8001fa8:	e6a6      	b.n	8001cf8 <__aeabi_ddiv+0x20c>
 8001faa:	42b2      	cmp	r2, r6
 8001fac:	d800      	bhi.n	8001fb0 <__aeabi_ddiv+0x4c4>
 8001fae:	e6a3      	b.n	8001cf8 <__aeabi_ddiv+0x20c>
 8001fb0:	1e83      	subs	r3, r0, #2
 8001fb2:	1936      	adds	r6, r6, r4
 8001fb4:	e6a0      	b.n	8001cf8 <__aeabi_ddiv+0x20c>
 8001fb6:	1909      	adds	r1, r1, r4
 8001fb8:	3d01      	subs	r5, #1
 8001fba:	428c      	cmp	r4, r1
 8001fbc:	d900      	bls.n	8001fc0 <__aeabi_ddiv+0x4d4>
 8001fbe:	e68d      	b.n	8001cdc <__aeabi_ddiv+0x1f0>
 8001fc0:	428a      	cmp	r2, r1
 8001fc2:	d800      	bhi.n	8001fc6 <__aeabi_ddiv+0x4da>
 8001fc4:	e68a      	b.n	8001cdc <__aeabi_ddiv+0x1f0>
 8001fc6:	1e85      	subs	r5, r0, #2
 8001fc8:	1909      	adds	r1, r1, r4
 8001fca:	e687      	b.n	8001cdc <__aeabi_ddiv+0x1f0>
 8001fcc:	220f      	movs	r2, #15
 8001fce:	402a      	ands	r2, r5
 8001fd0:	2a04      	cmp	r2, #4
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_ddiv+0x4ea>
 8001fd4:	e6bc      	b.n	8001d50 <__aeabi_ddiv+0x264>
 8001fd6:	1d29      	adds	r1, r5, #4
 8001fd8:	42a9      	cmp	r1, r5
 8001fda:	41ad      	sbcs	r5, r5
 8001fdc:	426d      	negs	r5, r5
 8001fde:	08c9      	lsrs	r1, r1, #3
 8001fe0:	44a8      	add	r8, r5
 8001fe2:	e6b6      	b.n	8001d52 <__aeabi_ddiv+0x266>
 8001fe4:	42af      	cmp	r7, r5
 8001fe6:	d900      	bls.n	8001fea <__aeabi_ddiv+0x4fe>
 8001fe8:	e662      	b.n	8001cb0 <__aeabi_ddiv+0x1c4>
 8001fea:	4281      	cmp	r1, r0
 8001fec:	d804      	bhi.n	8001ff8 <__aeabi_ddiv+0x50c>
 8001fee:	d000      	beq.n	8001ff2 <__aeabi_ddiv+0x506>
 8001ff0:	e65e      	b.n	8001cb0 <__aeabi_ddiv+0x1c4>
 8001ff2:	42ae      	cmp	r6, r5
 8001ff4:	d800      	bhi.n	8001ff8 <__aeabi_ddiv+0x50c>
 8001ff6:	e65b      	b.n	8001cb0 <__aeabi_ddiv+0x1c4>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	469c      	mov	ip, r3
 8001ffe:	9b00      	ldr	r3, [sp, #0]
 8002000:	44e0      	add	r8, ip
 8002002:	469c      	mov	ip, r3
 8002004:	4465      	add	r5, ip
 8002006:	429d      	cmp	r5, r3
 8002008:	419b      	sbcs	r3, r3
 800200a:	425b      	negs	r3, r3
 800200c:	191b      	adds	r3, r3, r4
 800200e:	18c0      	adds	r0, r0, r3
 8002010:	e64f      	b.n	8001cb2 <__aeabi_ddiv+0x1c6>
 8002012:	42b2      	cmp	r2, r6
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x52c>
 8002016:	e612      	b.n	8001c3e <__aeabi_ddiv+0x152>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	1936      	adds	r6, r6, r4
 800201c:	e60f      	b.n	8001c3e <__aeabi_ddiv+0x152>
 800201e:	428a      	cmp	r2, r1
 8002020:	d800      	bhi.n	8002024 <__aeabi_ddiv+0x538>
 8002022:	e5fa      	b.n	8001c1a <__aeabi_ddiv+0x12e>
 8002024:	1e83      	subs	r3, r0, #2
 8002026:	4698      	mov	r8, r3
 8002028:	1909      	adds	r1, r1, r4
 800202a:	e5f6      	b.n	8001c1a <__aeabi_ddiv+0x12e>
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <__aeabi_ddiv+0x5d4>)
 800202e:	0028      	movs	r0, r5
 8002030:	445b      	add	r3, fp
 8002032:	4641      	mov	r1, r8
 8002034:	409d      	lsls	r5, r3
 8002036:	4099      	lsls	r1, r3
 8002038:	40d0      	lsrs	r0, r2
 800203a:	1e6b      	subs	r3, r5, #1
 800203c:	419d      	sbcs	r5, r3
 800203e:	4643      	mov	r3, r8
 8002040:	4301      	orrs	r1, r0
 8002042:	4329      	orrs	r1, r5
 8002044:	40d3      	lsrs	r3, r2
 8002046:	074a      	lsls	r2, r1, #29
 8002048:	d100      	bne.n	800204c <__aeabi_ddiv+0x560>
 800204a:	e755      	b.n	8001ef8 <__aeabi_ddiv+0x40c>
 800204c:	220f      	movs	r2, #15
 800204e:	400a      	ands	r2, r1
 8002050:	2a04      	cmp	r2, #4
 8002052:	d000      	beq.n	8002056 <__aeabi_ddiv+0x56a>
 8002054:	e74a      	b.n	8001eec <__aeabi_ddiv+0x400>
 8002056:	e74f      	b.n	8001ef8 <__aeabi_ddiv+0x40c>
 8002058:	0015      	movs	r5, r2
 800205a:	4286      	cmp	r6, r0
 800205c:	d000      	beq.n	8002060 <__aeabi_ddiv+0x574>
 800205e:	e66d      	b.n	8001d3c <__aeabi_ddiv+0x250>
 8002060:	9a00      	ldr	r2, [sp, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d000      	beq.n	8002068 <__aeabi_ddiv+0x57c>
 8002066:	e669      	b.n	8001d3c <__aeabi_ddiv+0x250>
 8002068:	e66a      	b.n	8001d40 <__aeabi_ddiv+0x254>
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <__aeabi_ddiv+0x5d8>)
 800206c:	445b      	add	r3, fp
 800206e:	2b00      	cmp	r3, #0
 8002070:	dc00      	bgt.n	8002074 <__aeabi_ddiv+0x588>
 8002072:	e713      	b.n	8001e9c <__aeabi_ddiv+0x3b0>
 8002074:	2501      	movs	r5, #1
 8002076:	2100      	movs	r1, #0
 8002078:	44a8      	add	r8, r5
 800207a:	e66a      	b.n	8001d52 <__aeabi_ddiv+0x266>
 800207c:	075d      	lsls	r5, r3, #29
 800207e:	025b      	lsls	r3, r3, #9
 8002080:	0b1a      	lsrs	r2, r3, #12
 8002082:	08c9      	lsrs	r1, r1, #3
 8002084:	2300      	movs	r3, #0
 8002086:	430d      	orrs	r5, r1
 8002088:	e587      	b.n	8001b9a <__aeabi_ddiv+0xae>
 800208a:	9900      	ldr	r1, [sp, #0]
 800208c:	3d02      	subs	r5, #2
 800208e:	004a      	lsls	r2, r1, #1
 8002090:	428a      	cmp	r2, r1
 8002092:	41bf      	sbcs	r7, r7
 8002094:	427f      	negs	r7, r7
 8002096:	193f      	adds	r7, r7, r4
 8002098:	19f6      	adds	r6, r6, r7
 800209a:	9200      	str	r2, [sp, #0]
 800209c:	e7dd      	b.n	800205a <__aeabi_ddiv+0x56e>
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	4643      	mov	r3, r8
 80020a2:	0312      	lsls	r2, r2, #12
 80020a4:	431a      	orrs	r2, r3
 80020a6:	0312      	lsls	r2, r2, #12
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <__aeabi_ddiv+0x5cc>)
 80020aa:	0b12      	lsrs	r2, r2, #12
 80020ac:	e575      	b.n	8001b9a <__aeabi_ddiv+0xae>
 80020ae:	9900      	ldr	r1, [sp, #0]
 80020b0:	4299      	cmp	r1, r3
 80020b2:	d3ea      	bcc.n	800208a <__aeabi_ddiv+0x59e>
 80020b4:	0015      	movs	r5, r2
 80020b6:	e7d3      	b.n	8002060 <__aeabi_ddiv+0x574>
 80020b8:	000007ff 	.word	0x000007ff
 80020bc:	0000043e 	.word	0x0000043e
 80020c0:	0000041e 	.word	0x0000041e
 80020c4:	000003ff 	.word	0x000003ff

080020c8 <__eqdf2>:
 80020c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ca:	464e      	mov	r6, r9
 80020cc:	4645      	mov	r5, r8
 80020ce:	46de      	mov	lr, fp
 80020d0:	4657      	mov	r7, sl
 80020d2:	4690      	mov	r8, r2
 80020d4:	b5e0      	push	{r5, r6, r7, lr}
 80020d6:	0017      	movs	r7, r2
 80020d8:	031a      	lsls	r2, r3, #12
 80020da:	0b12      	lsrs	r2, r2, #12
 80020dc:	0005      	movs	r5, r0
 80020de:	4684      	mov	ip, r0
 80020e0:	4819      	ldr	r0, [pc, #100]	; (8002148 <__eqdf2+0x80>)
 80020e2:	030e      	lsls	r6, r1, #12
 80020e4:	004c      	lsls	r4, r1, #1
 80020e6:	4691      	mov	r9, r2
 80020e8:	005a      	lsls	r2, r3, #1
 80020ea:	0fdb      	lsrs	r3, r3, #31
 80020ec:	469b      	mov	fp, r3
 80020ee:	0b36      	lsrs	r6, r6, #12
 80020f0:	0d64      	lsrs	r4, r4, #21
 80020f2:	0fc9      	lsrs	r1, r1, #31
 80020f4:	0d52      	lsrs	r2, r2, #21
 80020f6:	4284      	cmp	r4, r0
 80020f8:	d019      	beq.n	800212e <__eqdf2+0x66>
 80020fa:	4282      	cmp	r2, r0
 80020fc:	d010      	beq.n	8002120 <__eqdf2+0x58>
 80020fe:	2001      	movs	r0, #1
 8002100:	4294      	cmp	r4, r2
 8002102:	d10e      	bne.n	8002122 <__eqdf2+0x5a>
 8002104:	454e      	cmp	r6, r9
 8002106:	d10c      	bne.n	8002122 <__eqdf2+0x5a>
 8002108:	2001      	movs	r0, #1
 800210a:	45c4      	cmp	ip, r8
 800210c:	d109      	bne.n	8002122 <__eqdf2+0x5a>
 800210e:	4559      	cmp	r1, fp
 8002110:	d017      	beq.n	8002142 <__eqdf2+0x7a>
 8002112:	2c00      	cmp	r4, #0
 8002114:	d105      	bne.n	8002122 <__eqdf2+0x5a>
 8002116:	0030      	movs	r0, r6
 8002118:	4328      	orrs	r0, r5
 800211a:	1e43      	subs	r3, r0, #1
 800211c:	4198      	sbcs	r0, r3
 800211e:	e000      	b.n	8002122 <__eqdf2+0x5a>
 8002120:	2001      	movs	r0, #1
 8002122:	bcf0      	pop	{r4, r5, r6, r7}
 8002124:	46bb      	mov	fp, r7
 8002126:	46b2      	mov	sl, r6
 8002128:	46a9      	mov	r9, r5
 800212a:	46a0      	mov	r8, r4
 800212c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800212e:	0033      	movs	r3, r6
 8002130:	2001      	movs	r0, #1
 8002132:	432b      	orrs	r3, r5
 8002134:	d1f5      	bne.n	8002122 <__eqdf2+0x5a>
 8002136:	42a2      	cmp	r2, r4
 8002138:	d1f3      	bne.n	8002122 <__eqdf2+0x5a>
 800213a:	464b      	mov	r3, r9
 800213c:	433b      	orrs	r3, r7
 800213e:	d1f0      	bne.n	8002122 <__eqdf2+0x5a>
 8002140:	e7e2      	b.n	8002108 <__eqdf2+0x40>
 8002142:	2000      	movs	r0, #0
 8002144:	e7ed      	b.n	8002122 <__eqdf2+0x5a>
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	000007ff 	.word	0x000007ff

0800214c <__gedf2>:
 800214c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214e:	4647      	mov	r7, r8
 8002150:	46ce      	mov	lr, r9
 8002152:	0004      	movs	r4, r0
 8002154:	0018      	movs	r0, r3
 8002156:	0016      	movs	r6, r2
 8002158:	031b      	lsls	r3, r3, #12
 800215a:	0b1b      	lsrs	r3, r3, #12
 800215c:	4d2d      	ldr	r5, [pc, #180]	; (8002214 <__gedf2+0xc8>)
 800215e:	004a      	lsls	r2, r1, #1
 8002160:	4699      	mov	r9, r3
 8002162:	b580      	push	{r7, lr}
 8002164:	0043      	lsls	r3, r0, #1
 8002166:	030f      	lsls	r7, r1, #12
 8002168:	46a4      	mov	ip, r4
 800216a:	46b0      	mov	r8, r6
 800216c:	0b3f      	lsrs	r7, r7, #12
 800216e:	0d52      	lsrs	r2, r2, #21
 8002170:	0fc9      	lsrs	r1, r1, #31
 8002172:	0d5b      	lsrs	r3, r3, #21
 8002174:	0fc0      	lsrs	r0, r0, #31
 8002176:	42aa      	cmp	r2, r5
 8002178:	d021      	beq.n	80021be <__gedf2+0x72>
 800217a:	42ab      	cmp	r3, r5
 800217c:	d013      	beq.n	80021a6 <__gedf2+0x5a>
 800217e:	2a00      	cmp	r2, #0
 8002180:	d122      	bne.n	80021c8 <__gedf2+0x7c>
 8002182:	433c      	orrs	r4, r7
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <__gedf2+0x42>
 8002188:	464d      	mov	r5, r9
 800218a:	432e      	orrs	r6, r5
 800218c:	d022      	beq.n	80021d4 <__gedf2+0x88>
 800218e:	2c00      	cmp	r4, #0
 8002190:	d010      	beq.n	80021b4 <__gedf2+0x68>
 8002192:	4281      	cmp	r1, r0
 8002194:	d022      	beq.n	80021dc <__gedf2+0x90>
 8002196:	2002      	movs	r0, #2
 8002198:	3901      	subs	r1, #1
 800219a:	4008      	ands	r0, r1
 800219c:	3801      	subs	r0, #1
 800219e:	bcc0      	pop	{r6, r7}
 80021a0:	46b9      	mov	r9, r7
 80021a2:	46b0      	mov	r8, r6
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a6:	464d      	mov	r5, r9
 80021a8:	432e      	orrs	r6, r5
 80021aa:	d129      	bne.n	8002200 <__gedf2+0xb4>
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d1f0      	bne.n	8002192 <__gedf2+0x46>
 80021b0:	433c      	orrs	r4, r7
 80021b2:	d1ee      	bne.n	8002192 <__gedf2+0x46>
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d1f2      	bne.n	800219e <__gedf2+0x52>
 80021b8:	2001      	movs	r0, #1
 80021ba:	4240      	negs	r0, r0
 80021bc:	e7ef      	b.n	800219e <__gedf2+0x52>
 80021be:	003d      	movs	r5, r7
 80021c0:	4325      	orrs	r5, r4
 80021c2:	d11d      	bne.n	8002200 <__gedf2+0xb4>
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d0ee      	beq.n	80021a6 <__gedf2+0x5a>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e2      	bne.n	8002192 <__gedf2+0x46>
 80021cc:	464c      	mov	r4, r9
 80021ce:	4326      	orrs	r6, r4
 80021d0:	d1df      	bne.n	8002192 <__gedf2+0x46>
 80021d2:	e7e0      	b.n	8002196 <__gedf2+0x4a>
 80021d4:	2000      	movs	r0, #0
 80021d6:	2c00      	cmp	r4, #0
 80021d8:	d0e1      	beq.n	800219e <__gedf2+0x52>
 80021da:	e7dc      	b.n	8002196 <__gedf2+0x4a>
 80021dc:	429a      	cmp	r2, r3
 80021de:	dc0a      	bgt.n	80021f6 <__gedf2+0xaa>
 80021e0:	dbe8      	blt.n	80021b4 <__gedf2+0x68>
 80021e2:	454f      	cmp	r7, r9
 80021e4:	d8d7      	bhi.n	8002196 <__gedf2+0x4a>
 80021e6:	d00e      	beq.n	8002206 <__gedf2+0xba>
 80021e8:	2000      	movs	r0, #0
 80021ea:	454f      	cmp	r7, r9
 80021ec:	d2d7      	bcs.n	800219e <__gedf2+0x52>
 80021ee:	2900      	cmp	r1, #0
 80021f0:	d0e2      	beq.n	80021b8 <__gedf2+0x6c>
 80021f2:	0008      	movs	r0, r1
 80021f4:	e7d3      	b.n	800219e <__gedf2+0x52>
 80021f6:	4243      	negs	r3, r0
 80021f8:	4158      	adcs	r0, r3
 80021fa:	0040      	lsls	r0, r0, #1
 80021fc:	3801      	subs	r0, #1
 80021fe:	e7ce      	b.n	800219e <__gedf2+0x52>
 8002200:	2002      	movs	r0, #2
 8002202:	4240      	negs	r0, r0
 8002204:	e7cb      	b.n	800219e <__gedf2+0x52>
 8002206:	45c4      	cmp	ip, r8
 8002208:	d8c5      	bhi.n	8002196 <__gedf2+0x4a>
 800220a:	2000      	movs	r0, #0
 800220c:	45c4      	cmp	ip, r8
 800220e:	d2c6      	bcs.n	800219e <__gedf2+0x52>
 8002210:	e7ed      	b.n	80021ee <__gedf2+0xa2>
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	000007ff 	.word	0x000007ff

08002218 <__ledf2>:
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221a:	4647      	mov	r7, r8
 800221c:	46ce      	mov	lr, r9
 800221e:	0004      	movs	r4, r0
 8002220:	0018      	movs	r0, r3
 8002222:	0016      	movs	r6, r2
 8002224:	031b      	lsls	r3, r3, #12
 8002226:	0b1b      	lsrs	r3, r3, #12
 8002228:	4d2c      	ldr	r5, [pc, #176]	; (80022dc <__ledf2+0xc4>)
 800222a:	004a      	lsls	r2, r1, #1
 800222c:	4699      	mov	r9, r3
 800222e:	b580      	push	{r7, lr}
 8002230:	0043      	lsls	r3, r0, #1
 8002232:	030f      	lsls	r7, r1, #12
 8002234:	46a4      	mov	ip, r4
 8002236:	46b0      	mov	r8, r6
 8002238:	0b3f      	lsrs	r7, r7, #12
 800223a:	0d52      	lsrs	r2, r2, #21
 800223c:	0fc9      	lsrs	r1, r1, #31
 800223e:	0d5b      	lsrs	r3, r3, #21
 8002240:	0fc0      	lsrs	r0, r0, #31
 8002242:	42aa      	cmp	r2, r5
 8002244:	d00d      	beq.n	8002262 <__ledf2+0x4a>
 8002246:	42ab      	cmp	r3, r5
 8002248:	d010      	beq.n	800226c <__ledf2+0x54>
 800224a:	2a00      	cmp	r2, #0
 800224c:	d127      	bne.n	800229e <__ledf2+0x86>
 800224e:	433c      	orrs	r4, r7
 8002250:	2b00      	cmp	r3, #0
 8002252:	d111      	bne.n	8002278 <__ledf2+0x60>
 8002254:	464d      	mov	r5, r9
 8002256:	432e      	orrs	r6, r5
 8002258:	d10e      	bne.n	8002278 <__ledf2+0x60>
 800225a:	2000      	movs	r0, #0
 800225c:	2c00      	cmp	r4, #0
 800225e:	d015      	beq.n	800228c <__ledf2+0x74>
 8002260:	e00e      	b.n	8002280 <__ledf2+0x68>
 8002262:	003d      	movs	r5, r7
 8002264:	4325      	orrs	r5, r4
 8002266:	d110      	bne.n	800228a <__ledf2+0x72>
 8002268:	4293      	cmp	r3, r2
 800226a:	d118      	bne.n	800229e <__ledf2+0x86>
 800226c:	464d      	mov	r5, r9
 800226e:	432e      	orrs	r6, r5
 8002270:	d10b      	bne.n	800228a <__ledf2+0x72>
 8002272:	2a00      	cmp	r2, #0
 8002274:	d102      	bne.n	800227c <__ledf2+0x64>
 8002276:	433c      	orrs	r4, r7
 8002278:	2c00      	cmp	r4, #0
 800227a:	d00b      	beq.n	8002294 <__ledf2+0x7c>
 800227c:	4281      	cmp	r1, r0
 800227e:	d014      	beq.n	80022aa <__ledf2+0x92>
 8002280:	2002      	movs	r0, #2
 8002282:	3901      	subs	r1, #1
 8002284:	4008      	ands	r0, r1
 8002286:	3801      	subs	r0, #1
 8002288:	e000      	b.n	800228c <__ledf2+0x74>
 800228a:	2002      	movs	r0, #2
 800228c:	bcc0      	pop	{r6, r7}
 800228e:	46b9      	mov	r9, r7
 8002290:	46b0      	mov	r8, r6
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002294:	2800      	cmp	r0, #0
 8002296:	d1f9      	bne.n	800228c <__ledf2+0x74>
 8002298:	2001      	movs	r0, #1
 800229a:	4240      	negs	r0, r0
 800229c:	e7f6      	b.n	800228c <__ledf2+0x74>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ec      	bne.n	800227c <__ledf2+0x64>
 80022a2:	464c      	mov	r4, r9
 80022a4:	4326      	orrs	r6, r4
 80022a6:	d1e9      	bne.n	800227c <__ledf2+0x64>
 80022a8:	e7ea      	b.n	8002280 <__ledf2+0x68>
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dd04      	ble.n	80022b8 <__ledf2+0xa0>
 80022ae:	4243      	negs	r3, r0
 80022b0:	4158      	adcs	r0, r3
 80022b2:	0040      	lsls	r0, r0, #1
 80022b4:	3801      	subs	r0, #1
 80022b6:	e7e9      	b.n	800228c <__ledf2+0x74>
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbeb      	blt.n	8002294 <__ledf2+0x7c>
 80022bc:	454f      	cmp	r7, r9
 80022be:	d8df      	bhi.n	8002280 <__ledf2+0x68>
 80022c0:	d006      	beq.n	80022d0 <__ledf2+0xb8>
 80022c2:	2000      	movs	r0, #0
 80022c4:	454f      	cmp	r7, r9
 80022c6:	d2e1      	bcs.n	800228c <__ledf2+0x74>
 80022c8:	2900      	cmp	r1, #0
 80022ca:	d0e5      	beq.n	8002298 <__ledf2+0x80>
 80022cc:	0008      	movs	r0, r1
 80022ce:	e7dd      	b.n	800228c <__ledf2+0x74>
 80022d0:	45c4      	cmp	ip, r8
 80022d2:	d8d5      	bhi.n	8002280 <__ledf2+0x68>
 80022d4:	2000      	movs	r0, #0
 80022d6:	45c4      	cmp	ip, r8
 80022d8:	d2d8      	bcs.n	800228c <__ledf2+0x74>
 80022da:	e7f5      	b.n	80022c8 <__ledf2+0xb0>
 80022dc:	000007ff 	.word	0x000007ff

080022e0 <__aeabi_dmul>:
 80022e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e2:	4645      	mov	r5, r8
 80022e4:	46de      	mov	lr, fp
 80022e6:	4657      	mov	r7, sl
 80022e8:	464e      	mov	r6, r9
 80022ea:	b5e0      	push	{r5, r6, r7, lr}
 80022ec:	001f      	movs	r7, r3
 80022ee:	030b      	lsls	r3, r1, #12
 80022f0:	0b1b      	lsrs	r3, r3, #12
 80022f2:	469b      	mov	fp, r3
 80022f4:	004d      	lsls	r5, r1, #1
 80022f6:	0fcb      	lsrs	r3, r1, #31
 80022f8:	0004      	movs	r4, r0
 80022fa:	4691      	mov	r9, r2
 80022fc:	4698      	mov	r8, r3
 80022fe:	b087      	sub	sp, #28
 8002300:	0d6d      	lsrs	r5, r5, #21
 8002302:	d100      	bne.n	8002306 <__aeabi_dmul+0x26>
 8002304:	e1cd      	b.n	80026a2 <__aeabi_dmul+0x3c2>
 8002306:	4bce      	ldr	r3, [pc, #824]	; (8002640 <__aeabi_dmul+0x360>)
 8002308:	429d      	cmp	r5, r3
 800230a:	d100      	bne.n	800230e <__aeabi_dmul+0x2e>
 800230c:	e1e9      	b.n	80026e2 <__aeabi_dmul+0x402>
 800230e:	465a      	mov	r2, fp
 8002310:	0f43      	lsrs	r3, r0, #29
 8002312:	00d2      	lsls	r2, r2, #3
 8002314:	4313      	orrs	r3, r2
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	0412      	lsls	r2, r2, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	00c3      	lsls	r3, r0, #3
 800231e:	469a      	mov	sl, r3
 8002320:	4bc8      	ldr	r3, [pc, #800]	; (8002644 <__aeabi_dmul+0x364>)
 8002322:	4693      	mov	fp, r2
 8002324:	469c      	mov	ip, r3
 8002326:	2300      	movs	r3, #0
 8002328:	2600      	movs	r6, #0
 800232a:	4465      	add	r5, ip
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	033c      	lsls	r4, r7, #12
 8002330:	007b      	lsls	r3, r7, #1
 8002332:	4648      	mov	r0, r9
 8002334:	0b24      	lsrs	r4, r4, #12
 8002336:	0d5b      	lsrs	r3, r3, #21
 8002338:	0fff      	lsrs	r7, r7, #31
 800233a:	2b00      	cmp	r3, #0
 800233c:	d100      	bne.n	8002340 <__aeabi_dmul+0x60>
 800233e:	e189      	b.n	8002654 <__aeabi_dmul+0x374>
 8002340:	4abf      	ldr	r2, [pc, #764]	; (8002640 <__aeabi_dmul+0x360>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d019      	beq.n	800237a <__aeabi_dmul+0x9a>
 8002346:	0f42      	lsrs	r2, r0, #29
 8002348:	00e4      	lsls	r4, r4, #3
 800234a:	4322      	orrs	r2, r4
 800234c:	2480      	movs	r4, #128	; 0x80
 800234e:	0424      	lsls	r4, r4, #16
 8002350:	4314      	orrs	r4, r2
 8002352:	4abc      	ldr	r2, [pc, #752]	; (8002644 <__aeabi_dmul+0x364>)
 8002354:	2100      	movs	r1, #0
 8002356:	4694      	mov	ip, r2
 8002358:	4642      	mov	r2, r8
 800235a:	4463      	add	r3, ip
 800235c:	195b      	adds	r3, r3, r5
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	9b01      	ldr	r3, [sp, #4]
 8002362:	407a      	eors	r2, r7
 8002364:	3301      	adds	r3, #1
 8002366:	00c0      	lsls	r0, r0, #3
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	2e0a      	cmp	r6, #10
 800236e:	dd1c      	ble.n	80023aa <__aeabi_dmul+0xca>
 8002370:	003a      	movs	r2, r7
 8002372:	2e0b      	cmp	r6, #11
 8002374:	d05e      	beq.n	8002434 <__aeabi_dmul+0x154>
 8002376:	4647      	mov	r7, r8
 8002378:	e056      	b.n	8002428 <__aeabi_dmul+0x148>
 800237a:	4649      	mov	r1, r9
 800237c:	4bb0      	ldr	r3, [pc, #704]	; (8002640 <__aeabi_dmul+0x360>)
 800237e:	4321      	orrs	r1, r4
 8002380:	18eb      	adds	r3, r5, r3
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	2900      	cmp	r1, #0
 8002386:	d12a      	bne.n	80023de <__aeabi_dmul+0xfe>
 8002388:	2080      	movs	r0, #128	; 0x80
 800238a:	2202      	movs	r2, #2
 800238c:	0100      	lsls	r0, r0, #4
 800238e:	002b      	movs	r3, r5
 8002390:	4684      	mov	ip, r0
 8002392:	4316      	orrs	r6, r2
 8002394:	4642      	mov	r2, r8
 8002396:	4463      	add	r3, ip
 8002398:	407a      	eors	r2, r7
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	9302      	str	r3, [sp, #8]
 800239e:	2e0a      	cmp	r6, #10
 80023a0:	dd00      	ble.n	80023a4 <__aeabi_dmul+0xc4>
 80023a2:	e231      	b.n	8002808 <__aeabi_dmul+0x528>
 80023a4:	2000      	movs	r0, #0
 80023a6:	2400      	movs	r4, #0
 80023a8:	2102      	movs	r1, #2
 80023aa:	2e02      	cmp	r6, #2
 80023ac:	dc26      	bgt.n	80023fc <__aeabi_dmul+0x11c>
 80023ae:	3e01      	subs	r6, #1
 80023b0:	2e01      	cmp	r6, #1
 80023b2:	d852      	bhi.n	800245a <__aeabi_dmul+0x17a>
 80023b4:	2902      	cmp	r1, #2
 80023b6:	d04c      	beq.n	8002452 <__aeabi_dmul+0x172>
 80023b8:	2901      	cmp	r1, #1
 80023ba:	d000      	beq.n	80023be <__aeabi_dmul+0xde>
 80023bc:	e118      	b.n	80025f0 <__aeabi_dmul+0x310>
 80023be:	2300      	movs	r3, #0
 80023c0:	2400      	movs	r4, #0
 80023c2:	2500      	movs	r5, #0
 80023c4:	051b      	lsls	r3, r3, #20
 80023c6:	4323      	orrs	r3, r4
 80023c8:	07d2      	lsls	r2, r2, #31
 80023ca:	4313      	orrs	r3, r2
 80023cc:	0028      	movs	r0, r5
 80023ce:	0019      	movs	r1, r3
 80023d0:	b007      	add	sp, #28
 80023d2:	bcf0      	pop	{r4, r5, r6, r7}
 80023d4:	46bb      	mov	fp, r7
 80023d6:	46b2      	mov	sl, r6
 80023d8:	46a9      	mov	r9, r5
 80023da:	46a0      	mov	r8, r4
 80023dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	2203      	movs	r2, #3
 80023e2:	0109      	lsls	r1, r1, #4
 80023e4:	002b      	movs	r3, r5
 80023e6:	468c      	mov	ip, r1
 80023e8:	4316      	orrs	r6, r2
 80023ea:	4642      	mov	r2, r8
 80023ec:	4463      	add	r3, ip
 80023ee:	407a      	eors	r2, r7
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	9302      	str	r3, [sp, #8]
 80023f4:	2e0a      	cmp	r6, #10
 80023f6:	dd00      	ble.n	80023fa <__aeabi_dmul+0x11a>
 80023f8:	e228      	b.n	800284c <__aeabi_dmul+0x56c>
 80023fa:	2103      	movs	r1, #3
 80023fc:	2501      	movs	r5, #1
 80023fe:	40b5      	lsls	r5, r6
 8002400:	46ac      	mov	ip, r5
 8002402:	26a6      	movs	r6, #166	; 0xa6
 8002404:	4663      	mov	r3, ip
 8002406:	00f6      	lsls	r6, r6, #3
 8002408:	4035      	ands	r5, r6
 800240a:	4233      	tst	r3, r6
 800240c:	d10b      	bne.n	8002426 <__aeabi_dmul+0x146>
 800240e:	2690      	movs	r6, #144	; 0x90
 8002410:	00b6      	lsls	r6, r6, #2
 8002412:	4233      	tst	r3, r6
 8002414:	d118      	bne.n	8002448 <__aeabi_dmul+0x168>
 8002416:	3eb9      	subs	r6, #185	; 0xb9
 8002418:	3eff      	subs	r6, #255	; 0xff
 800241a:	421e      	tst	r6, r3
 800241c:	d01d      	beq.n	800245a <__aeabi_dmul+0x17a>
 800241e:	46a3      	mov	fp, r4
 8002420:	4682      	mov	sl, r0
 8002422:	9100      	str	r1, [sp, #0]
 8002424:	e000      	b.n	8002428 <__aeabi_dmul+0x148>
 8002426:	0017      	movs	r7, r2
 8002428:	9900      	ldr	r1, [sp, #0]
 800242a:	003a      	movs	r2, r7
 800242c:	2902      	cmp	r1, #2
 800242e:	d010      	beq.n	8002452 <__aeabi_dmul+0x172>
 8002430:	465c      	mov	r4, fp
 8002432:	4650      	mov	r0, sl
 8002434:	2903      	cmp	r1, #3
 8002436:	d1bf      	bne.n	80023b8 <__aeabi_dmul+0xd8>
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	031b      	lsls	r3, r3, #12
 800243c:	431c      	orrs	r4, r3
 800243e:	0324      	lsls	r4, r4, #12
 8002440:	0005      	movs	r5, r0
 8002442:	4b7f      	ldr	r3, [pc, #508]	; (8002640 <__aeabi_dmul+0x360>)
 8002444:	0b24      	lsrs	r4, r4, #12
 8002446:	e7bd      	b.n	80023c4 <__aeabi_dmul+0xe4>
 8002448:	2480      	movs	r4, #128	; 0x80
 800244a:	2200      	movs	r2, #0
 800244c:	4b7c      	ldr	r3, [pc, #496]	; (8002640 <__aeabi_dmul+0x360>)
 800244e:	0324      	lsls	r4, r4, #12
 8002450:	e7b8      	b.n	80023c4 <__aeabi_dmul+0xe4>
 8002452:	2400      	movs	r4, #0
 8002454:	2500      	movs	r5, #0
 8002456:	4b7a      	ldr	r3, [pc, #488]	; (8002640 <__aeabi_dmul+0x360>)
 8002458:	e7b4      	b.n	80023c4 <__aeabi_dmul+0xe4>
 800245a:	4653      	mov	r3, sl
 800245c:	041e      	lsls	r6, r3, #16
 800245e:	0c36      	lsrs	r6, r6, #16
 8002460:	0c1f      	lsrs	r7, r3, #16
 8002462:	0033      	movs	r3, r6
 8002464:	0c01      	lsrs	r1, r0, #16
 8002466:	0400      	lsls	r0, r0, #16
 8002468:	0c00      	lsrs	r0, r0, #16
 800246a:	4343      	muls	r3, r0
 800246c:	4698      	mov	r8, r3
 800246e:	0003      	movs	r3, r0
 8002470:	437b      	muls	r3, r7
 8002472:	4699      	mov	r9, r3
 8002474:	0033      	movs	r3, r6
 8002476:	434b      	muls	r3, r1
 8002478:	469c      	mov	ip, r3
 800247a:	4643      	mov	r3, r8
 800247c:	000d      	movs	r5, r1
 800247e:	0c1b      	lsrs	r3, r3, #16
 8002480:	469a      	mov	sl, r3
 8002482:	437d      	muls	r5, r7
 8002484:	44cc      	add	ip, r9
 8002486:	44d4      	add	ip, sl
 8002488:	9500      	str	r5, [sp, #0]
 800248a:	45e1      	cmp	r9, ip
 800248c:	d904      	bls.n	8002498 <__aeabi_dmul+0x1b8>
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	025b      	lsls	r3, r3, #9
 8002492:	4699      	mov	r9, r3
 8002494:	444d      	add	r5, r9
 8002496:	9500      	str	r5, [sp, #0]
 8002498:	4663      	mov	r3, ip
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	001d      	movs	r5, r3
 800249e:	4663      	mov	r3, ip
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	469c      	mov	ip, r3
 80024a4:	4643      	mov	r3, r8
 80024a6:	041b      	lsls	r3, r3, #16
 80024a8:	0c1b      	lsrs	r3, r3, #16
 80024aa:	4698      	mov	r8, r3
 80024ac:	4663      	mov	r3, ip
 80024ae:	4443      	add	r3, r8
 80024b0:	9303      	str	r3, [sp, #12]
 80024b2:	0c23      	lsrs	r3, r4, #16
 80024b4:	4698      	mov	r8, r3
 80024b6:	0033      	movs	r3, r6
 80024b8:	0424      	lsls	r4, r4, #16
 80024ba:	0c24      	lsrs	r4, r4, #16
 80024bc:	4363      	muls	r3, r4
 80024be:	469c      	mov	ip, r3
 80024c0:	0023      	movs	r3, r4
 80024c2:	437b      	muls	r3, r7
 80024c4:	4699      	mov	r9, r3
 80024c6:	4643      	mov	r3, r8
 80024c8:	435e      	muls	r6, r3
 80024ca:	435f      	muls	r7, r3
 80024cc:	444e      	add	r6, r9
 80024ce:	4663      	mov	r3, ip
 80024d0:	46b2      	mov	sl, r6
 80024d2:	0c1e      	lsrs	r6, r3, #16
 80024d4:	4456      	add	r6, sl
 80024d6:	45b1      	cmp	r9, r6
 80024d8:	d903      	bls.n	80024e2 <__aeabi_dmul+0x202>
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	025b      	lsls	r3, r3, #9
 80024de:	4699      	mov	r9, r3
 80024e0:	444f      	add	r7, r9
 80024e2:	0c33      	lsrs	r3, r6, #16
 80024e4:	4699      	mov	r9, r3
 80024e6:	003b      	movs	r3, r7
 80024e8:	444b      	add	r3, r9
 80024ea:	9305      	str	r3, [sp, #20]
 80024ec:	4663      	mov	r3, ip
 80024ee:	46ac      	mov	ip, r5
 80024f0:	041f      	lsls	r7, r3, #16
 80024f2:	0c3f      	lsrs	r7, r7, #16
 80024f4:	0436      	lsls	r6, r6, #16
 80024f6:	19f6      	adds	r6, r6, r7
 80024f8:	44b4      	add	ip, r6
 80024fa:	4663      	mov	r3, ip
 80024fc:	9304      	str	r3, [sp, #16]
 80024fe:	465b      	mov	r3, fp
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	469c      	mov	ip, r3
 8002504:	465b      	mov	r3, fp
 8002506:	041f      	lsls	r7, r3, #16
 8002508:	0c3f      	lsrs	r7, r7, #16
 800250a:	003b      	movs	r3, r7
 800250c:	4343      	muls	r3, r0
 800250e:	4699      	mov	r9, r3
 8002510:	4663      	mov	r3, ip
 8002512:	4343      	muls	r3, r0
 8002514:	469a      	mov	sl, r3
 8002516:	464b      	mov	r3, r9
 8002518:	4660      	mov	r0, ip
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	469b      	mov	fp, r3
 800251e:	4348      	muls	r0, r1
 8002520:	4379      	muls	r1, r7
 8002522:	4451      	add	r1, sl
 8002524:	4459      	add	r1, fp
 8002526:	458a      	cmp	sl, r1
 8002528:	d903      	bls.n	8002532 <__aeabi_dmul+0x252>
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	025b      	lsls	r3, r3, #9
 800252e:	469a      	mov	sl, r3
 8002530:	4450      	add	r0, sl
 8002532:	0c0b      	lsrs	r3, r1, #16
 8002534:	469a      	mov	sl, r3
 8002536:	464b      	mov	r3, r9
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	0c1b      	lsrs	r3, r3, #16
 800253c:	4699      	mov	r9, r3
 800253e:	003b      	movs	r3, r7
 8002540:	4363      	muls	r3, r4
 8002542:	0409      	lsls	r1, r1, #16
 8002544:	4645      	mov	r5, r8
 8002546:	4449      	add	r1, r9
 8002548:	4699      	mov	r9, r3
 800254a:	4663      	mov	r3, ip
 800254c:	435c      	muls	r4, r3
 800254e:	436b      	muls	r3, r5
 8002550:	469c      	mov	ip, r3
 8002552:	464b      	mov	r3, r9
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	4698      	mov	r8, r3
 8002558:	436f      	muls	r7, r5
 800255a:	193f      	adds	r7, r7, r4
 800255c:	4447      	add	r7, r8
 800255e:	4450      	add	r0, sl
 8002560:	42bc      	cmp	r4, r7
 8002562:	d903      	bls.n	800256c <__aeabi_dmul+0x28c>
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	025b      	lsls	r3, r3, #9
 8002568:	4698      	mov	r8, r3
 800256a:	44c4      	add	ip, r8
 800256c:	9b04      	ldr	r3, [sp, #16]
 800256e:	9d00      	ldr	r5, [sp, #0]
 8002570:	4698      	mov	r8, r3
 8002572:	4445      	add	r5, r8
 8002574:	42b5      	cmp	r5, r6
 8002576:	41b6      	sbcs	r6, r6
 8002578:	4273      	negs	r3, r6
 800257a:	4698      	mov	r8, r3
 800257c:	464b      	mov	r3, r9
 800257e:	041e      	lsls	r6, r3, #16
 8002580:	9b05      	ldr	r3, [sp, #20]
 8002582:	043c      	lsls	r4, r7, #16
 8002584:	4699      	mov	r9, r3
 8002586:	0c36      	lsrs	r6, r6, #16
 8002588:	19a4      	adds	r4, r4, r6
 800258a:	444c      	add	r4, r9
 800258c:	46a1      	mov	r9, r4
 800258e:	4683      	mov	fp, r0
 8002590:	186e      	adds	r6, r5, r1
 8002592:	44c1      	add	r9, r8
 8002594:	428e      	cmp	r6, r1
 8002596:	4189      	sbcs	r1, r1
 8002598:	44cb      	add	fp, r9
 800259a:	465d      	mov	r5, fp
 800259c:	4249      	negs	r1, r1
 800259e:	186d      	adds	r5, r5, r1
 80025a0:	429c      	cmp	r4, r3
 80025a2:	41a4      	sbcs	r4, r4
 80025a4:	45c1      	cmp	r9, r8
 80025a6:	419b      	sbcs	r3, r3
 80025a8:	4583      	cmp	fp, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	428d      	cmp	r5, r1
 80025ae:	4189      	sbcs	r1, r1
 80025b0:	425b      	negs	r3, r3
 80025b2:	4264      	negs	r4, r4
 80025b4:	431c      	orrs	r4, r3
 80025b6:	4240      	negs	r0, r0
 80025b8:	9b03      	ldr	r3, [sp, #12]
 80025ba:	4249      	negs	r1, r1
 80025bc:	4301      	orrs	r1, r0
 80025be:	0270      	lsls	r0, r6, #9
 80025c0:	0c3f      	lsrs	r7, r7, #16
 80025c2:	4318      	orrs	r0, r3
 80025c4:	19e4      	adds	r4, r4, r7
 80025c6:	1e47      	subs	r7, r0, #1
 80025c8:	41b8      	sbcs	r0, r7
 80025ca:	1864      	adds	r4, r4, r1
 80025cc:	4464      	add	r4, ip
 80025ce:	0df6      	lsrs	r6, r6, #23
 80025d0:	0261      	lsls	r1, r4, #9
 80025d2:	4330      	orrs	r0, r6
 80025d4:	0dec      	lsrs	r4, r5, #23
 80025d6:	026e      	lsls	r6, r5, #9
 80025d8:	430c      	orrs	r4, r1
 80025da:	4330      	orrs	r0, r6
 80025dc:	01c9      	lsls	r1, r1, #7
 80025de:	d400      	bmi.n	80025e2 <__aeabi_dmul+0x302>
 80025e0:	e0f1      	b.n	80027c6 <__aeabi_dmul+0x4e6>
 80025e2:	2101      	movs	r1, #1
 80025e4:	0843      	lsrs	r3, r0, #1
 80025e6:	4001      	ands	r1, r0
 80025e8:	430b      	orrs	r3, r1
 80025ea:	07e0      	lsls	r0, r4, #31
 80025ec:	4318      	orrs	r0, r3
 80025ee:	0864      	lsrs	r4, r4, #1
 80025f0:	4915      	ldr	r1, [pc, #84]	; (8002648 <__aeabi_dmul+0x368>)
 80025f2:	9b02      	ldr	r3, [sp, #8]
 80025f4:	468c      	mov	ip, r1
 80025f6:	4463      	add	r3, ip
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	dc00      	bgt.n	80025fe <__aeabi_dmul+0x31e>
 80025fc:	e097      	b.n	800272e <__aeabi_dmul+0x44e>
 80025fe:	0741      	lsls	r1, r0, #29
 8002600:	d009      	beq.n	8002616 <__aeabi_dmul+0x336>
 8002602:	210f      	movs	r1, #15
 8002604:	4001      	ands	r1, r0
 8002606:	2904      	cmp	r1, #4
 8002608:	d005      	beq.n	8002616 <__aeabi_dmul+0x336>
 800260a:	1d01      	adds	r1, r0, #4
 800260c:	4281      	cmp	r1, r0
 800260e:	4180      	sbcs	r0, r0
 8002610:	4240      	negs	r0, r0
 8002612:	1824      	adds	r4, r4, r0
 8002614:	0008      	movs	r0, r1
 8002616:	01e1      	lsls	r1, r4, #7
 8002618:	d506      	bpl.n	8002628 <__aeabi_dmul+0x348>
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	00c9      	lsls	r1, r1, #3
 800261e:	468c      	mov	ip, r1
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <__aeabi_dmul+0x36c>)
 8002622:	401c      	ands	r4, r3
 8002624:	9b02      	ldr	r3, [sp, #8]
 8002626:	4463      	add	r3, ip
 8002628:	4909      	ldr	r1, [pc, #36]	; (8002650 <__aeabi_dmul+0x370>)
 800262a:	428b      	cmp	r3, r1
 800262c:	dd00      	ble.n	8002630 <__aeabi_dmul+0x350>
 800262e:	e710      	b.n	8002452 <__aeabi_dmul+0x172>
 8002630:	0761      	lsls	r1, r4, #29
 8002632:	08c5      	lsrs	r5, r0, #3
 8002634:	0264      	lsls	r4, r4, #9
 8002636:	055b      	lsls	r3, r3, #21
 8002638:	430d      	orrs	r5, r1
 800263a:	0b24      	lsrs	r4, r4, #12
 800263c:	0d5b      	lsrs	r3, r3, #21
 800263e:	e6c1      	b.n	80023c4 <__aeabi_dmul+0xe4>
 8002640:	000007ff 	.word	0x000007ff
 8002644:	fffffc01 	.word	0xfffffc01
 8002648:	000003ff 	.word	0x000003ff
 800264c:	feffffff 	.word	0xfeffffff
 8002650:	000007fe 	.word	0x000007fe
 8002654:	464b      	mov	r3, r9
 8002656:	4323      	orrs	r3, r4
 8002658:	d059      	beq.n	800270e <__aeabi_dmul+0x42e>
 800265a:	2c00      	cmp	r4, #0
 800265c:	d100      	bne.n	8002660 <__aeabi_dmul+0x380>
 800265e:	e0a3      	b.n	80027a8 <__aeabi_dmul+0x4c8>
 8002660:	0020      	movs	r0, r4
 8002662:	f000 fdf9 	bl	8003258 <__clzsi2>
 8002666:	0001      	movs	r1, r0
 8002668:	0003      	movs	r3, r0
 800266a:	390b      	subs	r1, #11
 800266c:	221d      	movs	r2, #29
 800266e:	1a52      	subs	r2, r2, r1
 8002670:	4649      	mov	r1, r9
 8002672:	0018      	movs	r0, r3
 8002674:	40d1      	lsrs	r1, r2
 8002676:	464a      	mov	r2, r9
 8002678:	3808      	subs	r0, #8
 800267a:	4082      	lsls	r2, r0
 800267c:	4084      	lsls	r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	430c      	orrs	r4, r1
 8002682:	4a74      	ldr	r2, [pc, #464]	; (8002854 <__aeabi_dmul+0x574>)
 8002684:	1aeb      	subs	r3, r5, r3
 8002686:	4694      	mov	ip, r2
 8002688:	4642      	mov	r2, r8
 800268a:	4463      	add	r3, ip
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	9b01      	ldr	r3, [sp, #4]
 8002690:	407a      	eors	r2, r7
 8002692:	3301      	adds	r3, #1
 8002694:	2100      	movs	r1, #0
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	9302      	str	r3, [sp, #8]
 800269a:	2e0a      	cmp	r6, #10
 800269c:	dd00      	ble.n	80026a0 <__aeabi_dmul+0x3c0>
 800269e:	e667      	b.n	8002370 <__aeabi_dmul+0x90>
 80026a0:	e683      	b.n	80023aa <__aeabi_dmul+0xca>
 80026a2:	465b      	mov	r3, fp
 80026a4:	4303      	orrs	r3, r0
 80026a6:	469a      	mov	sl, r3
 80026a8:	d02a      	beq.n	8002700 <__aeabi_dmul+0x420>
 80026aa:	465b      	mov	r3, fp
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d06d      	beq.n	800278c <__aeabi_dmul+0x4ac>
 80026b0:	4658      	mov	r0, fp
 80026b2:	f000 fdd1 	bl	8003258 <__clzsi2>
 80026b6:	0001      	movs	r1, r0
 80026b8:	0003      	movs	r3, r0
 80026ba:	390b      	subs	r1, #11
 80026bc:	221d      	movs	r2, #29
 80026be:	1a52      	subs	r2, r2, r1
 80026c0:	0021      	movs	r1, r4
 80026c2:	0018      	movs	r0, r3
 80026c4:	465d      	mov	r5, fp
 80026c6:	40d1      	lsrs	r1, r2
 80026c8:	3808      	subs	r0, #8
 80026ca:	4085      	lsls	r5, r0
 80026cc:	000a      	movs	r2, r1
 80026ce:	4084      	lsls	r4, r0
 80026d0:	432a      	orrs	r2, r5
 80026d2:	4693      	mov	fp, r2
 80026d4:	46a2      	mov	sl, r4
 80026d6:	4d5f      	ldr	r5, [pc, #380]	; (8002854 <__aeabi_dmul+0x574>)
 80026d8:	2600      	movs	r6, #0
 80026da:	1aed      	subs	r5, r5, r3
 80026dc:	2300      	movs	r3, #0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	e625      	b.n	800232e <__aeabi_dmul+0x4e>
 80026e2:	465b      	mov	r3, fp
 80026e4:	4303      	orrs	r3, r0
 80026e6:	469a      	mov	sl, r3
 80026e8:	d105      	bne.n	80026f6 <__aeabi_dmul+0x416>
 80026ea:	2300      	movs	r3, #0
 80026ec:	469b      	mov	fp, r3
 80026ee:	3302      	adds	r3, #2
 80026f0:	2608      	movs	r6, #8
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	e61b      	b.n	800232e <__aeabi_dmul+0x4e>
 80026f6:	2303      	movs	r3, #3
 80026f8:	4682      	mov	sl, r0
 80026fa:	260c      	movs	r6, #12
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	e616      	b.n	800232e <__aeabi_dmul+0x4e>
 8002700:	2300      	movs	r3, #0
 8002702:	469b      	mov	fp, r3
 8002704:	3301      	adds	r3, #1
 8002706:	2604      	movs	r6, #4
 8002708:	2500      	movs	r5, #0
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	e60f      	b.n	800232e <__aeabi_dmul+0x4e>
 800270e:	4642      	mov	r2, r8
 8002710:	3301      	adds	r3, #1
 8002712:	9501      	str	r5, [sp, #4]
 8002714:	431e      	orrs	r6, r3
 8002716:	9b01      	ldr	r3, [sp, #4]
 8002718:	407a      	eors	r2, r7
 800271a:	3301      	adds	r3, #1
 800271c:	2400      	movs	r4, #0
 800271e:	2000      	movs	r0, #0
 8002720:	2101      	movs	r1, #1
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	9302      	str	r3, [sp, #8]
 8002726:	2e0a      	cmp	r6, #10
 8002728:	dd00      	ble.n	800272c <__aeabi_dmul+0x44c>
 800272a:	e621      	b.n	8002370 <__aeabi_dmul+0x90>
 800272c:	e63d      	b.n	80023aa <__aeabi_dmul+0xca>
 800272e:	2101      	movs	r1, #1
 8002730:	1ac9      	subs	r1, r1, r3
 8002732:	2938      	cmp	r1, #56	; 0x38
 8002734:	dd00      	ble.n	8002738 <__aeabi_dmul+0x458>
 8002736:	e642      	b.n	80023be <__aeabi_dmul+0xde>
 8002738:	291f      	cmp	r1, #31
 800273a:	dd47      	ble.n	80027cc <__aeabi_dmul+0x4ec>
 800273c:	261f      	movs	r6, #31
 800273e:	0025      	movs	r5, r4
 8002740:	4276      	negs	r6, r6
 8002742:	1af3      	subs	r3, r6, r3
 8002744:	40dd      	lsrs	r5, r3
 8002746:	002b      	movs	r3, r5
 8002748:	2920      	cmp	r1, #32
 800274a:	d005      	beq.n	8002758 <__aeabi_dmul+0x478>
 800274c:	4942      	ldr	r1, [pc, #264]	; (8002858 <__aeabi_dmul+0x578>)
 800274e:	9d02      	ldr	r5, [sp, #8]
 8002750:	468c      	mov	ip, r1
 8002752:	4465      	add	r5, ip
 8002754:	40ac      	lsls	r4, r5
 8002756:	4320      	orrs	r0, r4
 8002758:	1e41      	subs	r1, r0, #1
 800275a:	4188      	sbcs	r0, r1
 800275c:	4318      	orrs	r0, r3
 800275e:	2307      	movs	r3, #7
 8002760:	001d      	movs	r5, r3
 8002762:	2400      	movs	r4, #0
 8002764:	4005      	ands	r5, r0
 8002766:	4203      	tst	r3, r0
 8002768:	d04a      	beq.n	8002800 <__aeabi_dmul+0x520>
 800276a:	230f      	movs	r3, #15
 800276c:	2400      	movs	r4, #0
 800276e:	4003      	ands	r3, r0
 8002770:	2b04      	cmp	r3, #4
 8002772:	d042      	beq.n	80027fa <__aeabi_dmul+0x51a>
 8002774:	1d03      	adds	r3, r0, #4
 8002776:	4283      	cmp	r3, r0
 8002778:	4180      	sbcs	r0, r0
 800277a:	4240      	negs	r0, r0
 800277c:	1824      	adds	r4, r4, r0
 800277e:	0018      	movs	r0, r3
 8002780:	0223      	lsls	r3, r4, #8
 8002782:	d53a      	bpl.n	80027fa <__aeabi_dmul+0x51a>
 8002784:	2301      	movs	r3, #1
 8002786:	2400      	movs	r4, #0
 8002788:	2500      	movs	r5, #0
 800278a:	e61b      	b.n	80023c4 <__aeabi_dmul+0xe4>
 800278c:	f000 fd64 	bl	8003258 <__clzsi2>
 8002790:	0001      	movs	r1, r0
 8002792:	0003      	movs	r3, r0
 8002794:	3115      	adds	r1, #21
 8002796:	3320      	adds	r3, #32
 8002798:	291c      	cmp	r1, #28
 800279a:	dd8f      	ble.n	80026bc <__aeabi_dmul+0x3dc>
 800279c:	3808      	subs	r0, #8
 800279e:	2200      	movs	r2, #0
 80027a0:	4084      	lsls	r4, r0
 80027a2:	4692      	mov	sl, r2
 80027a4:	46a3      	mov	fp, r4
 80027a6:	e796      	b.n	80026d6 <__aeabi_dmul+0x3f6>
 80027a8:	f000 fd56 	bl	8003258 <__clzsi2>
 80027ac:	0001      	movs	r1, r0
 80027ae:	0003      	movs	r3, r0
 80027b0:	3115      	adds	r1, #21
 80027b2:	3320      	adds	r3, #32
 80027b4:	291c      	cmp	r1, #28
 80027b6:	dc00      	bgt.n	80027ba <__aeabi_dmul+0x4da>
 80027b8:	e758      	b.n	800266c <__aeabi_dmul+0x38c>
 80027ba:	0002      	movs	r2, r0
 80027bc:	464c      	mov	r4, r9
 80027be:	3a08      	subs	r2, #8
 80027c0:	2000      	movs	r0, #0
 80027c2:	4094      	lsls	r4, r2
 80027c4:	e75d      	b.n	8002682 <__aeabi_dmul+0x3a2>
 80027c6:	9b01      	ldr	r3, [sp, #4]
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e711      	b.n	80025f0 <__aeabi_dmul+0x310>
 80027cc:	4b23      	ldr	r3, [pc, #140]	; (800285c <__aeabi_dmul+0x57c>)
 80027ce:	0026      	movs	r6, r4
 80027d0:	469c      	mov	ip, r3
 80027d2:	0003      	movs	r3, r0
 80027d4:	9d02      	ldr	r5, [sp, #8]
 80027d6:	40cb      	lsrs	r3, r1
 80027d8:	4465      	add	r5, ip
 80027da:	40ae      	lsls	r6, r5
 80027dc:	431e      	orrs	r6, r3
 80027de:	0003      	movs	r3, r0
 80027e0:	40ab      	lsls	r3, r5
 80027e2:	1e58      	subs	r0, r3, #1
 80027e4:	4183      	sbcs	r3, r0
 80027e6:	0030      	movs	r0, r6
 80027e8:	4318      	orrs	r0, r3
 80027ea:	40cc      	lsrs	r4, r1
 80027ec:	0743      	lsls	r3, r0, #29
 80027ee:	d0c7      	beq.n	8002780 <__aeabi_dmul+0x4a0>
 80027f0:	230f      	movs	r3, #15
 80027f2:	4003      	ands	r3, r0
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d1bd      	bne.n	8002774 <__aeabi_dmul+0x494>
 80027f8:	e7c2      	b.n	8002780 <__aeabi_dmul+0x4a0>
 80027fa:	0765      	lsls	r5, r4, #29
 80027fc:	0264      	lsls	r4, r4, #9
 80027fe:	0b24      	lsrs	r4, r4, #12
 8002800:	08c0      	lsrs	r0, r0, #3
 8002802:	2300      	movs	r3, #0
 8002804:	4305      	orrs	r5, r0
 8002806:	e5dd      	b.n	80023c4 <__aeabi_dmul+0xe4>
 8002808:	2500      	movs	r5, #0
 800280a:	2302      	movs	r3, #2
 800280c:	2e0f      	cmp	r6, #15
 800280e:	d10c      	bne.n	800282a <__aeabi_dmul+0x54a>
 8002810:	2480      	movs	r4, #128	; 0x80
 8002812:	465b      	mov	r3, fp
 8002814:	0324      	lsls	r4, r4, #12
 8002816:	4223      	tst	r3, r4
 8002818:	d00e      	beq.n	8002838 <__aeabi_dmul+0x558>
 800281a:	4221      	tst	r1, r4
 800281c:	d10c      	bne.n	8002838 <__aeabi_dmul+0x558>
 800281e:	430c      	orrs	r4, r1
 8002820:	0324      	lsls	r4, r4, #12
 8002822:	003a      	movs	r2, r7
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <__aeabi_dmul+0x580>)
 8002826:	0b24      	lsrs	r4, r4, #12
 8002828:	e5cc      	b.n	80023c4 <__aeabi_dmul+0xe4>
 800282a:	2e0b      	cmp	r6, #11
 800282c:	d000      	beq.n	8002830 <__aeabi_dmul+0x550>
 800282e:	e5a2      	b.n	8002376 <__aeabi_dmul+0x96>
 8002830:	468b      	mov	fp, r1
 8002832:	46aa      	mov	sl, r5
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	e5f7      	b.n	8002428 <__aeabi_dmul+0x148>
 8002838:	2480      	movs	r4, #128	; 0x80
 800283a:	465b      	mov	r3, fp
 800283c:	0324      	lsls	r4, r4, #12
 800283e:	431c      	orrs	r4, r3
 8002840:	0324      	lsls	r4, r4, #12
 8002842:	4642      	mov	r2, r8
 8002844:	4655      	mov	r5, sl
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <__aeabi_dmul+0x580>)
 8002848:	0b24      	lsrs	r4, r4, #12
 800284a:	e5bb      	b.n	80023c4 <__aeabi_dmul+0xe4>
 800284c:	464d      	mov	r5, r9
 800284e:	0021      	movs	r1, r4
 8002850:	2303      	movs	r3, #3
 8002852:	e7db      	b.n	800280c <__aeabi_dmul+0x52c>
 8002854:	fffffc0d 	.word	0xfffffc0d
 8002858:	0000043e 	.word	0x0000043e
 800285c:	0000041e 	.word	0x0000041e
 8002860:	000007ff 	.word	0x000007ff

08002864 <__aeabi_dsub>:
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002866:	4657      	mov	r7, sl
 8002868:	464e      	mov	r6, r9
 800286a:	4645      	mov	r5, r8
 800286c:	46de      	mov	lr, fp
 800286e:	b5e0      	push	{r5, r6, r7, lr}
 8002870:	000d      	movs	r5, r1
 8002872:	0004      	movs	r4, r0
 8002874:	0019      	movs	r1, r3
 8002876:	0010      	movs	r0, r2
 8002878:	032b      	lsls	r3, r5, #12
 800287a:	0a5b      	lsrs	r3, r3, #9
 800287c:	0f62      	lsrs	r2, r4, #29
 800287e:	431a      	orrs	r2, r3
 8002880:	00e3      	lsls	r3, r4, #3
 8002882:	030c      	lsls	r4, r1, #12
 8002884:	0a64      	lsrs	r4, r4, #9
 8002886:	0f47      	lsrs	r7, r0, #29
 8002888:	4327      	orrs	r7, r4
 800288a:	4cd0      	ldr	r4, [pc, #832]	; (8002bcc <__aeabi_dsub+0x368>)
 800288c:	006e      	lsls	r6, r5, #1
 800288e:	4691      	mov	r9, r2
 8002890:	b083      	sub	sp, #12
 8002892:	004a      	lsls	r2, r1, #1
 8002894:	00c0      	lsls	r0, r0, #3
 8002896:	4698      	mov	r8, r3
 8002898:	46a2      	mov	sl, r4
 800289a:	0d76      	lsrs	r6, r6, #21
 800289c:	0fed      	lsrs	r5, r5, #31
 800289e:	0d52      	lsrs	r2, r2, #21
 80028a0:	0fc9      	lsrs	r1, r1, #31
 80028a2:	9001      	str	r0, [sp, #4]
 80028a4:	42a2      	cmp	r2, r4
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x46>
 80028a8:	e0b9      	b.n	8002a1e <__aeabi_dsub+0x1ba>
 80028aa:	2401      	movs	r4, #1
 80028ac:	4061      	eors	r1, r4
 80028ae:	468b      	mov	fp, r1
 80028b0:	428d      	cmp	r5, r1
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x52>
 80028b4:	e08d      	b.n	80029d2 <__aeabi_dsub+0x16e>
 80028b6:	1ab4      	subs	r4, r6, r2
 80028b8:	46a4      	mov	ip, r4
 80028ba:	2c00      	cmp	r4, #0
 80028bc:	dc00      	bgt.n	80028c0 <__aeabi_dsub+0x5c>
 80028be:	e0b7      	b.n	8002a30 <__aeabi_dsub+0x1cc>
 80028c0:	2a00      	cmp	r2, #0
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0x62>
 80028c4:	e0cb      	b.n	8002a5e <__aeabi_dsub+0x1fa>
 80028c6:	4ac1      	ldr	r2, [pc, #772]	; (8002bcc <__aeabi_dsub+0x368>)
 80028c8:	4296      	cmp	r6, r2
 80028ca:	d100      	bne.n	80028ce <__aeabi_dsub+0x6a>
 80028cc:	e186      	b.n	8002bdc <__aeabi_dsub+0x378>
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	0412      	lsls	r2, r2, #16
 80028d2:	4317      	orrs	r7, r2
 80028d4:	4662      	mov	r2, ip
 80028d6:	2a38      	cmp	r2, #56	; 0x38
 80028d8:	dd00      	ble.n	80028dc <__aeabi_dsub+0x78>
 80028da:	e1a4      	b.n	8002c26 <__aeabi_dsub+0x3c2>
 80028dc:	2a1f      	cmp	r2, #31
 80028de:	dd00      	ble.n	80028e2 <__aeabi_dsub+0x7e>
 80028e0:	e21d      	b.n	8002d1e <__aeabi_dsub+0x4ba>
 80028e2:	4661      	mov	r1, ip
 80028e4:	2220      	movs	r2, #32
 80028e6:	003c      	movs	r4, r7
 80028e8:	1a52      	subs	r2, r2, r1
 80028ea:	0001      	movs	r1, r0
 80028ec:	4090      	lsls	r0, r2
 80028ee:	4094      	lsls	r4, r2
 80028f0:	1e42      	subs	r2, r0, #1
 80028f2:	4190      	sbcs	r0, r2
 80028f4:	4662      	mov	r2, ip
 80028f6:	46a0      	mov	r8, r4
 80028f8:	4664      	mov	r4, ip
 80028fa:	40d7      	lsrs	r7, r2
 80028fc:	464a      	mov	r2, r9
 80028fe:	40e1      	lsrs	r1, r4
 8002900:	4644      	mov	r4, r8
 8002902:	1bd2      	subs	r2, r2, r7
 8002904:	4691      	mov	r9, r2
 8002906:	430c      	orrs	r4, r1
 8002908:	4304      	orrs	r4, r0
 800290a:	1b1c      	subs	r4, r3, r4
 800290c:	42a3      	cmp	r3, r4
 800290e:	4192      	sbcs	r2, r2
 8002910:	464b      	mov	r3, r9
 8002912:	4252      	negs	r2, r2
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	469a      	mov	sl, r3
 8002918:	4653      	mov	r3, sl
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	d400      	bmi.n	8002920 <__aeabi_dsub+0xbc>
 800291e:	e12b      	b.n	8002b78 <__aeabi_dsub+0x314>
 8002920:	4653      	mov	r3, sl
 8002922:	025a      	lsls	r2, r3, #9
 8002924:	0a53      	lsrs	r3, r2, #9
 8002926:	469a      	mov	sl, r3
 8002928:	4653      	mov	r3, sl
 800292a:	2b00      	cmp	r3, #0
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0xcc>
 800292e:	e166      	b.n	8002bfe <__aeabi_dsub+0x39a>
 8002930:	4650      	mov	r0, sl
 8002932:	f000 fc91 	bl	8003258 <__clzsi2>
 8002936:	0003      	movs	r3, r0
 8002938:	3b08      	subs	r3, #8
 800293a:	2220      	movs	r2, #32
 800293c:	0020      	movs	r0, r4
 800293e:	1ad2      	subs	r2, r2, r3
 8002940:	4651      	mov	r1, sl
 8002942:	40d0      	lsrs	r0, r2
 8002944:	4099      	lsls	r1, r3
 8002946:	0002      	movs	r2, r0
 8002948:	409c      	lsls	r4, r3
 800294a:	430a      	orrs	r2, r1
 800294c:	429e      	cmp	r6, r3
 800294e:	dd00      	ble.n	8002952 <__aeabi_dsub+0xee>
 8002950:	e164      	b.n	8002c1c <__aeabi_dsub+0x3b8>
 8002952:	1b9b      	subs	r3, r3, r6
 8002954:	1c59      	adds	r1, r3, #1
 8002956:	291f      	cmp	r1, #31
 8002958:	dd00      	ble.n	800295c <__aeabi_dsub+0xf8>
 800295a:	e0fe      	b.n	8002b5a <__aeabi_dsub+0x2f6>
 800295c:	2320      	movs	r3, #32
 800295e:	0010      	movs	r0, r2
 8002960:	0026      	movs	r6, r4
 8002962:	1a5b      	subs	r3, r3, r1
 8002964:	409c      	lsls	r4, r3
 8002966:	4098      	lsls	r0, r3
 8002968:	40ce      	lsrs	r6, r1
 800296a:	40ca      	lsrs	r2, r1
 800296c:	1e63      	subs	r3, r4, #1
 800296e:	419c      	sbcs	r4, r3
 8002970:	4330      	orrs	r0, r6
 8002972:	4692      	mov	sl, r2
 8002974:	2600      	movs	r6, #0
 8002976:	4304      	orrs	r4, r0
 8002978:	0763      	lsls	r3, r4, #29
 800297a:	d009      	beq.n	8002990 <__aeabi_dsub+0x12c>
 800297c:	230f      	movs	r3, #15
 800297e:	4023      	ands	r3, r4
 8002980:	2b04      	cmp	r3, #4
 8002982:	d005      	beq.n	8002990 <__aeabi_dsub+0x12c>
 8002984:	1d23      	adds	r3, r4, #4
 8002986:	42a3      	cmp	r3, r4
 8002988:	41a4      	sbcs	r4, r4
 800298a:	4264      	negs	r4, r4
 800298c:	44a2      	add	sl, r4
 800298e:	001c      	movs	r4, r3
 8002990:	4653      	mov	r3, sl
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	d400      	bmi.n	8002998 <__aeabi_dsub+0x134>
 8002996:	e0f2      	b.n	8002b7e <__aeabi_dsub+0x31a>
 8002998:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <__aeabi_dsub+0x368>)
 800299a:	3601      	adds	r6, #1
 800299c:	429e      	cmp	r6, r3
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x13e>
 80029a0:	e10f      	b.n	8002bc2 <__aeabi_dsub+0x35e>
 80029a2:	4653      	mov	r3, sl
 80029a4:	498a      	ldr	r1, [pc, #552]	; (8002bd0 <__aeabi_dsub+0x36c>)
 80029a6:	08e4      	lsrs	r4, r4, #3
 80029a8:	400b      	ands	r3, r1
 80029aa:	0019      	movs	r1, r3
 80029ac:	075b      	lsls	r3, r3, #29
 80029ae:	4323      	orrs	r3, r4
 80029b0:	0572      	lsls	r2, r6, #21
 80029b2:	024c      	lsls	r4, r1, #9
 80029b4:	0b24      	lsrs	r4, r4, #12
 80029b6:	0d52      	lsrs	r2, r2, #21
 80029b8:	0512      	lsls	r2, r2, #20
 80029ba:	4322      	orrs	r2, r4
 80029bc:	07ed      	lsls	r5, r5, #31
 80029be:	432a      	orrs	r2, r5
 80029c0:	0018      	movs	r0, r3
 80029c2:	0011      	movs	r1, r2
 80029c4:	b003      	add	sp, #12
 80029c6:	bcf0      	pop	{r4, r5, r6, r7}
 80029c8:	46bb      	mov	fp, r7
 80029ca:	46b2      	mov	sl, r6
 80029cc:	46a9      	mov	r9, r5
 80029ce:	46a0      	mov	r8, r4
 80029d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d2:	1ab4      	subs	r4, r6, r2
 80029d4:	46a4      	mov	ip, r4
 80029d6:	2c00      	cmp	r4, #0
 80029d8:	dd59      	ble.n	8002a8e <__aeabi_dsub+0x22a>
 80029da:	2a00      	cmp	r2, #0
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x17c>
 80029de:	e0b0      	b.n	8002b42 <__aeabi_dsub+0x2de>
 80029e0:	4556      	cmp	r6, sl
 80029e2:	d100      	bne.n	80029e6 <__aeabi_dsub+0x182>
 80029e4:	e0fa      	b.n	8002bdc <__aeabi_dsub+0x378>
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	0412      	lsls	r2, r2, #16
 80029ea:	4317      	orrs	r7, r2
 80029ec:	4662      	mov	r2, ip
 80029ee:	2a38      	cmp	r2, #56	; 0x38
 80029f0:	dd00      	ble.n	80029f4 <__aeabi_dsub+0x190>
 80029f2:	e0d4      	b.n	8002b9e <__aeabi_dsub+0x33a>
 80029f4:	2a1f      	cmp	r2, #31
 80029f6:	dc00      	bgt.n	80029fa <__aeabi_dsub+0x196>
 80029f8:	e1c0      	b.n	8002d7c <__aeabi_dsub+0x518>
 80029fa:	0039      	movs	r1, r7
 80029fc:	3a20      	subs	r2, #32
 80029fe:	40d1      	lsrs	r1, r2
 8002a00:	4662      	mov	r2, ip
 8002a02:	2a20      	cmp	r2, #32
 8002a04:	d006      	beq.n	8002a14 <__aeabi_dsub+0x1b0>
 8002a06:	4664      	mov	r4, ip
 8002a08:	2240      	movs	r2, #64	; 0x40
 8002a0a:	1b12      	subs	r2, r2, r4
 8002a0c:	003c      	movs	r4, r7
 8002a0e:	4094      	lsls	r4, r2
 8002a10:	4304      	orrs	r4, r0
 8002a12:	9401      	str	r4, [sp, #4]
 8002a14:	9c01      	ldr	r4, [sp, #4]
 8002a16:	1e62      	subs	r2, r4, #1
 8002a18:	4194      	sbcs	r4, r2
 8002a1a:	430c      	orrs	r4, r1
 8002a1c:	e0c3      	b.n	8002ba6 <__aeabi_dsub+0x342>
 8002a1e:	003c      	movs	r4, r7
 8002a20:	4304      	orrs	r4, r0
 8002a22:	d02b      	beq.n	8002a7c <__aeabi_dsub+0x218>
 8002a24:	468b      	mov	fp, r1
 8002a26:	428d      	cmp	r5, r1
 8002a28:	d02e      	beq.n	8002a88 <__aeabi_dsub+0x224>
 8002a2a:	4c6a      	ldr	r4, [pc, #424]	; (8002bd4 <__aeabi_dsub+0x370>)
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	44b4      	add	ip, r6
 8002a30:	4664      	mov	r4, ip
 8002a32:	2c00      	cmp	r4, #0
 8002a34:	d05f      	beq.n	8002af6 <__aeabi_dsub+0x292>
 8002a36:	1b94      	subs	r4, r2, r6
 8002a38:	46a4      	mov	ip, r4
 8002a3a:	2e00      	cmp	r6, #0
 8002a3c:	d000      	beq.n	8002a40 <__aeabi_dsub+0x1dc>
 8002a3e:	e120      	b.n	8002c82 <__aeabi_dsub+0x41e>
 8002a40:	464c      	mov	r4, r9
 8002a42:	431c      	orrs	r4, r3
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x1e4>
 8002a46:	e1c7      	b.n	8002dd8 <__aeabi_dsub+0x574>
 8002a48:	4661      	mov	r1, ip
 8002a4a:	1e4c      	subs	r4, r1, #1
 8002a4c:	2901      	cmp	r1, #1
 8002a4e:	d100      	bne.n	8002a52 <__aeabi_dsub+0x1ee>
 8002a50:	e223      	b.n	8002e9a <__aeabi_dsub+0x636>
 8002a52:	4d5e      	ldr	r5, [pc, #376]	; (8002bcc <__aeabi_dsub+0x368>)
 8002a54:	45ac      	cmp	ip, r5
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x1f6>
 8002a58:	e1d8      	b.n	8002e0c <__aeabi_dsub+0x5a8>
 8002a5a:	46a4      	mov	ip, r4
 8002a5c:	e11a      	b.n	8002c94 <__aeabi_dsub+0x430>
 8002a5e:	003a      	movs	r2, r7
 8002a60:	4302      	orrs	r2, r0
 8002a62:	d100      	bne.n	8002a66 <__aeabi_dsub+0x202>
 8002a64:	e0e4      	b.n	8002c30 <__aeabi_dsub+0x3cc>
 8002a66:	0022      	movs	r2, r4
 8002a68:	3a01      	subs	r2, #1
 8002a6a:	2c01      	cmp	r4, #1
 8002a6c:	d100      	bne.n	8002a70 <__aeabi_dsub+0x20c>
 8002a6e:	e1c3      	b.n	8002df8 <__aeabi_dsub+0x594>
 8002a70:	4956      	ldr	r1, [pc, #344]	; (8002bcc <__aeabi_dsub+0x368>)
 8002a72:	428c      	cmp	r4, r1
 8002a74:	d100      	bne.n	8002a78 <__aeabi_dsub+0x214>
 8002a76:	e0b1      	b.n	8002bdc <__aeabi_dsub+0x378>
 8002a78:	4694      	mov	ip, r2
 8002a7a:	e72b      	b.n	80028d4 <__aeabi_dsub+0x70>
 8002a7c:	2401      	movs	r4, #1
 8002a7e:	4061      	eors	r1, r4
 8002a80:	468b      	mov	fp, r1
 8002a82:	428d      	cmp	r5, r1
 8002a84:	d000      	beq.n	8002a88 <__aeabi_dsub+0x224>
 8002a86:	e716      	b.n	80028b6 <__aeabi_dsub+0x52>
 8002a88:	4952      	ldr	r1, [pc, #328]	; (8002bd4 <__aeabi_dsub+0x370>)
 8002a8a:	468c      	mov	ip, r1
 8002a8c:	44b4      	add	ip, r6
 8002a8e:	4664      	mov	r4, ip
 8002a90:	2c00      	cmp	r4, #0
 8002a92:	d100      	bne.n	8002a96 <__aeabi_dsub+0x232>
 8002a94:	e0d3      	b.n	8002c3e <__aeabi_dsub+0x3da>
 8002a96:	1b91      	subs	r1, r2, r6
 8002a98:	468c      	mov	ip, r1
 8002a9a:	2e00      	cmp	r6, #0
 8002a9c:	d100      	bne.n	8002aa0 <__aeabi_dsub+0x23c>
 8002a9e:	e15e      	b.n	8002d5e <__aeabi_dsub+0x4fa>
 8002aa0:	494a      	ldr	r1, [pc, #296]	; (8002bcc <__aeabi_dsub+0x368>)
 8002aa2:	428a      	cmp	r2, r1
 8002aa4:	d100      	bne.n	8002aa8 <__aeabi_dsub+0x244>
 8002aa6:	e1be      	b.n	8002e26 <__aeabi_dsub+0x5c2>
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	464c      	mov	r4, r9
 8002aac:	0409      	lsls	r1, r1, #16
 8002aae:	430c      	orrs	r4, r1
 8002ab0:	46a1      	mov	r9, r4
 8002ab2:	4661      	mov	r1, ip
 8002ab4:	2938      	cmp	r1, #56	; 0x38
 8002ab6:	dd00      	ble.n	8002aba <__aeabi_dsub+0x256>
 8002ab8:	e1ba      	b.n	8002e30 <__aeabi_dsub+0x5cc>
 8002aba:	291f      	cmp	r1, #31
 8002abc:	dd00      	ble.n	8002ac0 <__aeabi_dsub+0x25c>
 8002abe:	e227      	b.n	8002f10 <__aeabi_dsub+0x6ac>
 8002ac0:	2420      	movs	r4, #32
 8002ac2:	1a64      	subs	r4, r4, r1
 8002ac4:	4649      	mov	r1, r9
 8002ac6:	40a1      	lsls	r1, r4
 8002ac8:	001e      	movs	r6, r3
 8002aca:	4688      	mov	r8, r1
 8002acc:	4661      	mov	r1, ip
 8002ace:	40a3      	lsls	r3, r4
 8002ad0:	40ce      	lsrs	r6, r1
 8002ad2:	4641      	mov	r1, r8
 8002ad4:	1e5c      	subs	r4, r3, #1
 8002ad6:	41a3      	sbcs	r3, r4
 8002ad8:	4331      	orrs	r1, r6
 8002ada:	4319      	orrs	r1, r3
 8002adc:	000c      	movs	r4, r1
 8002ade:	4663      	mov	r3, ip
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	40d9      	lsrs	r1, r3
 8002ae4:	187f      	adds	r7, r7, r1
 8002ae6:	1824      	adds	r4, r4, r0
 8002ae8:	4284      	cmp	r4, r0
 8002aea:	419b      	sbcs	r3, r3
 8002aec:	425b      	negs	r3, r3
 8002aee:	469a      	mov	sl, r3
 8002af0:	0016      	movs	r6, r2
 8002af2:	44ba      	add	sl, r7
 8002af4:	e05d      	b.n	8002bb2 <__aeabi_dsub+0x34e>
 8002af6:	4c38      	ldr	r4, [pc, #224]	; (8002bd8 <__aeabi_dsub+0x374>)
 8002af8:	1c72      	adds	r2, r6, #1
 8002afa:	4222      	tst	r2, r4
 8002afc:	d000      	beq.n	8002b00 <__aeabi_dsub+0x29c>
 8002afe:	e0df      	b.n	8002cc0 <__aeabi_dsub+0x45c>
 8002b00:	464a      	mov	r2, r9
 8002b02:	431a      	orrs	r2, r3
 8002b04:	2e00      	cmp	r6, #0
 8002b06:	d000      	beq.n	8002b0a <__aeabi_dsub+0x2a6>
 8002b08:	e15c      	b.n	8002dc4 <__aeabi_dsub+0x560>
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x2ac>
 8002b0e:	e1cf      	b.n	8002eb0 <__aeabi_dsub+0x64c>
 8002b10:	003a      	movs	r2, r7
 8002b12:	4302      	orrs	r2, r0
 8002b14:	d100      	bne.n	8002b18 <__aeabi_dsub+0x2b4>
 8002b16:	e17f      	b.n	8002e18 <__aeabi_dsub+0x5b4>
 8002b18:	1a1c      	subs	r4, r3, r0
 8002b1a:	464a      	mov	r2, r9
 8002b1c:	42a3      	cmp	r3, r4
 8002b1e:	4189      	sbcs	r1, r1
 8002b20:	1bd2      	subs	r2, r2, r7
 8002b22:	4249      	negs	r1, r1
 8002b24:	1a52      	subs	r2, r2, r1
 8002b26:	4692      	mov	sl, r2
 8002b28:	0212      	lsls	r2, r2, #8
 8002b2a:	d400      	bmi.n	8002b2e <__aeabi_dsub+0x2ca>
 8002b2c:	e20a      	b.n	8002f44 <__aeabi_dsub+0x6e0>
 8002b2e:	1ac4      	subs	r4, r0, r3
 8002b30:	42a0      	cmp	r0, r4
 8002b32:	4180      	sbcs	r0, r0
 8002b34:	464b      	mov	r3, r9
 8002b36:	4240      	negs	r0, r0
 8002b38:	1aff      	subs	r7, r7, r3
 8002b3a:	1a3b      	subs	r3, r7, r0
 8002b3c:	469a      	mov	sl, r3
 8002b3e:	465d      	mov	r5, fp
 8002b40:	e71a      	b.n	8002978 <__aeabi_dsub+0x114>
 8002b42:	003a      	movs	r2, r7
 8002b44:	4302      	orrs	r2, r0
 8002b46:	d073      	beq.n	8002c30 <__aeabi_dsub+0x3cc>
 8002b48:	0022      	movs	r2, r4
 8002b4a:	3a01      	subs	r2, #1
 8002b4c:	2c01      	cmp	r4, #1
 8002b4e:	d100      	bne.n	8002b52 <__aeabi_dsub+0x2ee>
 8002b50:	e0cb      	b.n	8002cea <__aeabi_dsub+0x486>
 8002b52:	4554      	cmp	r4, sl
 8002b54:	d042      	beq.n	8002bdc <__aeabi_dsub+0x378>
 8002b56:	4694      	mov	ip, r2
 8002b58:	e748      	b.n	80029ec <__aeabi_dsub+0x188>
 8002b5a:	0010      	movs	r0, r2
 8002b5c:	3b1f      	subs	r3, #31
 8002b5e:	40d8      	lsrs	r0, r3
 8002b60:	2920      	cmp	r1, #32
 8002b62:	d003      	beq.n	8002b6c <__aeabi_dsub+0x308>
 8002b64:	2340      	movs	r3, #64	; 0x40
 8002b66:	1a5b      	subs	r3, r3, r1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	4314      	orrs	r4, r2
 8002b6c:	1e63      	subs	r3, r4, #1
 8002b6e:	419c      	sbcs	r4, r3
 8002b70:	2300      	movs	r3, #0
 8002b72:	2600      	movs	r6, #0
 8002b74:	469a      	mov	sl, r3
 8002b76:	4304      	orrs	r4, r0
 8002b78:	0763      	lsls	r3, r4, #29
 8002b7a:	d000      	beq.n	8002b7e <__aeabi_dsub+0x31a>
 8002b7c:	e6fe      	b.n	800297c <__aeabi_dsub+0x118>
 8002b7e:	4652      	mov	r2, sl
 8002b80:	08e3      	lsrs	r3, r4, #3
 8002b82:	0752      	lsls	r2, r2, #29
 8002b84:	4313      	orrs	r3, r2
 8002b86:	4652      	mov	r2, sl
 8002b88:	46b4      	mov	ip, r6
 8002b8a:	08d2      	lsrs	r2, r2, #3
 8002b8c:	490f      	ldr	r1, [pc, #60]	; (8002bcc <__aeabi_dsub+0x368>)
 8002b8e:	458c      	cmp	ip, r1
 8002b90:	d02a      	beq.n	8002be8 <__aeabi_dsub+0x384>
 8002b92:	0312      	lsls	r2, r2, #12
 8002b94:	0b14      	lsrs	r4, r2, #12
 8002b96:	4662      	mov	r2, ip
 8002b98:	0552      	lsls	r2, r2, #21
 8002b9a:	0d52      	lsrs	r2, r2, #21
 8002b9c:	e70c      	b.n	80029b8 <__aeabi_dsub+0x154>
 8002b9e:	003c      	movs	r4, r7
 8002ba0:	4304      	orrs	r4, r0
 8002ba2:	1e62      	subs	r2, r4, #1
 8002ba4:	4194      	sbcs	r4, r2
 8002ba6:	18e4      	adds	r4, r4, r3
 8002ba8:	429c      	cmp	r4, r3
 8002baa:	4192      	sbcs	r2, r2
 8002bac:	4252      	negs	r2, r2
 8002bae:	444a      	add	r2, r9
 8002bb0:	4692      	mov	sl, r2
 8002bb2:	4653      	mov	r3, sl
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	d5df      	bpl.n	8002b78 <__aeabi_dsub+0x314>
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <__aeabi_dsub+0x368>)
 8002bba:	3601      	adds	r6, #1
 8002bbc:	429e      	cmp	r6, r3
 8002bbe:	d000      	beq.n	8002bc2 <__aeabi_dsub+0x35e>
 8002bc0:	e0a0      	b.n	8002d04 <__aeabi_dsub+0x4a0>
 8002bc2:	0032      	movs	r2, r6
 8002bc4:	2400      	movs	r4, #0
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e6f6      	b.n	80029b8 <__aeabi_dsub+0x154>
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	000007ff 	.word	0x000007ff
 8002bd0:	ff7fffff 	.word	0xff7fffff
 8002bd4:	fffff801 	.word	0xfffff801
 8002bd8:	000007fe 	.word	0x000007fe
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	464a      	mov	r2, r9
 8002be0:	0752      	lsls	r2, r2, #29
 8002be2:	4313      	orrs	r3, r2
 8002be4:	464a      	mov	r2, r9
 8002be6:	08d2      	lsrs	r2, r2, #3
 8002be8:	0019      	movs	r1, r3
 8002bea:	4311      	orrs	r1, r2
 8002bec:	d100      	bne.n	8002bf0 <__aeabi_dsub+0x38c>
 8002bee:	e1b5      	b.n	8002f5c <__aeabi_dsub+0x6f8>
 8002bf0:	2480      	movs	r4, #128	; 0x80
 8002bf2:	0324      	lsls	r4, r4, #12
 8002bf4:	4314      	orrs	r4, r2
 8002bf6:	0324      	lsls	r4, r4, #12
 8002bf8:	4ad5      	ldr	r2, [pc, #852]	; (8002f50 <__aeabi_dsub+0x6ec>)
 8002bfa:	0b24      	lsrs	r4, r4, #12
 8002bfc:	e6dc      	b.n	80029b8 <__aeabi_dsub+0x154>
 8002bfe:	0020      	movs	r0, r4
 8002c00:	f000 fb2a 	bl	8003258 <__clzsi2>
 8002c04:	0003      	movs	r3, r0
 8002c06:	3318      	adds	r3, #24
 8002c08:	2b1f      	cmp	r3, #31
 8002c0a:	dc00      	bgt.n	8002c0e <__aeabi_dsub+0x3aa>
 8002c0c:	e695      	b.n	800293a <__aeabi_dsub+0xd6>
 8002c0e:	0022      	movs	r2, r4
 8002c10:	3808      	subs	r0, #8
 8002c12:	4082      	lsls	r2, r0
 8002c14:	2400      	movs	r4, #0
 8002c16:	429e      	cmp	r6, r3
 8002c18:	dc00      	bgt.n	8002c1c <__aeabi_dsub+0x3b8>
 8002c1a:	e69a      	b.n	8002952 <__aeabi_dsub+0xee>
 8002c1c:	1af6      	subs	r6, r6, r3
 8002c1e:	4bcd      	ldr	r3, [pc, #820]	; (8002f54 <__aeabi_dsub+0x6f0>)
 8002c20:	401a      	ands	r2, r3
 8002c22:	4692      	mov	sl, r2
 8002c24:	e6a8      	b.n	8002978 <__aeabi_dsub+0x114>
 8002c26:	003c      	movs	r4, r7
 8002c28:	4304      	orrs	r4, r0
 8002c2a:	1e62      	subs	r2, r4, #1
 8002c2c:	4194      	sbcs	r4, r2
 8002c2e:	e66c      	b.n	800290a <__aeabi_dsub+0xa6>
 8002c30:	464a      	mov	r2, r9
 8002c32:	08db      	lsrs	r3, r3, #3
 8002c34:	0752      	lsls	r2, r2, #29
 8002c36:	4313      	orrs	r3, r2
 8002c38:	464a      	mov	r2, r9
 8002c3a:	08d2      	lsrs	r2, r2, #3
 8002c3c:	e7a6      	b.n	8002b8c <__aeabi_dsub+0x328>
 8002c3e:	4cc6      	ldr	r4, [pc, #792]	; (8002f58 <__aeabi_dsub+0x6f4>)
 8002c40:	1c72      	adds	r2, r6, #1
 8002c42:	4222      	tst	r2, r4
 8002c44:	d000      	beq.n	8002c48 <__aeabi_dsub+0x3e4>
 8002c46:	e0ac      	b.n	8002da2 <__aeabi_dsub+0x53e>
 8002c48:	464a      	mov	r2, r9
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	2e00      	cmp	r6, #0
 8002c4e:	d000      	beq.n	8002c52 <__aeabi_dsub+0x3ee>
 8002c50:	e105      	b.n	8002e5e <__aeabi_dsub+0x5fa>
 8002c52:	2a00      	cmp	r2, #0
 8002c54:	d100      	bne.n	8002c58 <__aeabi_dsub+0x3f4>
 8002c56:	e156      	b.n	8002f06 <__aeabi_dsub+0x6a2>
 8002c58:	003a      	movs	r2, r7
 8002c5a:	4302      	orrs	r2, r0
 8002c5c:	d100      	bne.n	8002c60 <__aeabi_dsub+0x3fc>
 8002c5e:	e0db      	b.n	8002e18 <__aeabi_dsub+0x5b4>
 8002c60:	181c      	adds	r4, r3, r0
 8002c62:	429c      	cmp	r4, r3
 8002c64:	419b      	sbcs	r3, r3
 8002c66:	444f      	add	r7, r9
 8002c68:	46ba      	mov	sl, r7
 8002c6a:	425b      	negs	r3, r3
 8002c6c:	449a      	add	sl, r3
 8002c6e:	4653      	mov	r3, sl
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	d400      	bmi.n	8002c76 <__aeabi_dsub+0x412>
 8002c74:	e780      	b.n	8002b78 <__aeabi_dsub+0x314>
 8002c76:	4652      	mov	r2, sl
 8002c78:	4bb6      	ldr	r3, [pc, #728]	; (8002f54 <__aeabi_dsub+0x6f0>)
 8002c7a:	2601      	movs	r6, #1
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	4692      	mov	sl, r2
 8002c80:	e77a      	b.n	8002b78 <__aeabi_dsub+0x314>
 8002c82:	4cb3      	ldr	r4, [pc, #716]	; (8002f50 <__aeabi_dsub+0x6ec>)
 8002c84:	42a2      	cmp	r2, r4
 8002c86:	d100      	bne.n	8002c8a <__aeabi_dsub+0x426>
 8002c88:	e0c0      	b.n	8002e0c <__aeabi_dsub+0x5a8>
 8002c8a:	2480      	movs	r4, #128	; 0x80
 8002c8c:	464d      	mov	r5, r9
 8002c8e:	0424      	lsls	r4, r4, #16
 8002c90:	4325      	orrs	r5, r4
 8002c92:	46a9      	mov	r9, r5
 8002c94:	4664      	mov	r4, ip
 8002c96:	2c38      	cmp	r4, #56	; 0x38
 8002c98:	dc53      	bgt.n	8002d42 <__aeabi_dsub+0x4de>
 8002c9a:	4661      	mov	r1, ip
 8002c9c:	2c1f      	cmp	r4, #31
 8002c9e:	dd00      	ble.n	8002ca2 <__aeabi_dsub+0x43e>
 8002ca0:	e0cd      	b.n	8002e3e <__aeabi_dsub+0x5da>
 8002ca2:	2520      	movs	r5, #32
 8002ca4:	001e      	movs	r6, r3
 8002ca6:	1b2d      	subs	r5, r5, r4
 8002ca8:	464c      	mov	r4, r9
 8002caa:	40ab      	lsls	r3, r5
 8002cac:	40ac      	lsls	r4, r5
 8002cae:	40ce      	lsrs	r6, r1
 8002cb0:	1e5d      	subs	r5, r3, #1
 8002cb2:	41ab      	sbcs	r3, r5
 8002cb4:	4334      	orrs	r4, r6
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	464c      	mov	r4, r9
 8002cba:	40cc      	lsrs	r4, r1
 8002cbc:	1b3f      	subs	r7, r7, r4
 8002cbe:	e045      	b.n	8002d4c <__aeabi_dsub+0x4e8>
 8002cc0:	464a      	mov	r2, r9
 8002cc2:	1a1c      	subs	r4, r3, r0
 8002cc4:	1bd1      	subs	r1, r2, r7
 8002cc6:	42a3      	cmp	r3, r4
 8002cc8:	4192      	sbcs	r2, r2
 8002cca:	4252      	negs	r2, r2
 8002ccc:	4692      	mov	sl, r2
 8002cce:	000a      	movs	r2, r1
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	1a52      	subs	r2, r2, r1
 8002cd4:	4692      	mov	sl, r2
 8002cd6:	0212      	lsls	r2, r2, #8
 8002cd8:	d500      	bpl.n	8002cdc <__aeabi_dsub+0x478>
 8002cda:	e083      	b.n	8002de4 <__aeabi_dsub+0x580>
 8002cdc:	4653      	mov	r3, sl
 8002cde:	4323      	orrs	r3, r4
 8002ce0:	d000      	beq.n	8002ce4 <__aeabi_dsub+0x480>
 8002ce2:	e621      	b.n	8002928 <__aeabi_dsub+0xc4>
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	e753      	b.n	8002b92 <__aeabi_dsub+0x32e>
 8002cea:	181c      	adds	r4, r3, r0
 8002cec:	429c      	cmp	r4, r3
 8002cee:	419b      	sbcs	r3, r3
 8002cf0:	444f      	add	r7, r9
 8002cf2:	46ba      	mov	sl, r7
 8002cf4:	425b      	negs	r3, r3
 8002cf6:	449a      	add	sl, r3
 8002cf8:	4653      	mov	r3, sl
 8002cfa:	2601      	movs	r6, #1
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	d400      	bmi.n	8002d02 <__aeabi_dsub+0x49e>
 8002d00:	e73a      	b.n	8002b78 <__aeabi_dsub+0x314>
 8002d02:	2602      	movs	r6, #2
 8002d04:	4652      	mov	r2, sl
 8002d06:	4b93      	ldr	r3, [pc, #588]	; (8002f54 <__aeabi_dsub+0x6f0>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	0013      	movs	r3, r2
 8002d0e:	4021      	ands	r1, r4
 8002d10:	0862      	lsrs	r2, r4, #1
 8002d12:	430a      	orrs	r2, r1
 8002d14:	07dc      	lsls	r4, r3, #31
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	469a      	mov	sl, r3
 8002d1a:	4314      	orrs	r4, r2
 8002d1c:	e62c      	b.n	8002978 <__aeabi_dsub+0x114>
 8002d1e:	0039      	movs	r1, r7
 8002d20:	3a20      	subs	r2, #32
 8002d22:	40d1      	lsrs	r1, r2
 8002d24:	4662      	mov	r2, ip
 8002d26:	2a20      	cmp	r2, #32
 8002d28:	d006      	beq.n	8002d38 <__aeabi_dsub+0x4d4>
 8002d2a:	4664      	mov	r4, ip
 8002d2c:	2240      	movs	r2, #64	; 0x40
 8002d2e:	1b12      	subs	r2, r2, r4
 8002d30:	003c      	movs	r4, r7
 8002d32:	4094      	lsls	r4, r2
 8002d34:	4304      	orrs	r4, r0
 8002d36:	9401      	str	r4, [sp, #4]
 8002d38:	9c01      	ldr	r4, [sp, #4]
 8002d3a:	1e62      	subs	r2, r4, #1
 8002d3c:	4194      	sbcs	r4, r2
 8002d3e:	430c      	orrs	r4, r1
 8002d40:	e5e3      	b.n	800290a <__aeabi_dsub+0xa6>
 8002d42:	4649      	mov	r1, r9
 8002d44:	4319      	orrs	r1, r3
 8002d46:	000b      	movs	r3, r1
 8002d48:	1e5c      	subs	r4, r3, #1
 8002d4a:	41a3      	sbcs	r3, r4
 8002d4c:	1ac4      	subs	r4, r0, r3
 8002d4e:	42a0      	cmp	r0, r4
 8002d50:	419b      	sbcs	r3, r3
 8002d52:	425b      	negs	r3, r3
 8002d54:	1afb      	subs	r3, r7, r3
 8002d56:	469a      	mov	sl, r3
 8002d58:	465d      	mov	r5, fp
 8002d5a:	0016      	movs	r6, r2
 8002d5c:	e5dc      	b.n	8002918 <__aeabi_dsub+0xb4>
 8002d5e:	4649      	mov	r1, r9
 8002d60:	4319      	orrs	r1, r3
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x502>
 8002d64:	e0ae      	b.n	8002ec4 <__aeabi_dsub+0x660>
 8002d66:	4661      	mov	r1, ip
 8002d68:	4664      	mov	r4, ip
 8002d6a:	3901      	subs	r1, #1
 8002d6c:	2c01      	cmp	r4, #1
 8002d6e:	d100      	bne.n	8002d72 <__aeabi_dsub+0x50e>
 8002d70:	e0e0      	b.n	8002f34 <__aeabi_dsub+0x6d0>
 8002d72:	4c77      	ldr	r4, [pc, #476]	; (8002f50 <__aeabi_dsub+0x6ec>)
 8002d74:	45a4      	cmp	ip, r4
 8002d76:	d056      	beq.n	8002e26 <__aeabi_dsub+0x5c2>
 8002d78:	468c      	mov	ip, r1
 8002d7a:	e69a      	b.n	8002ab2 <__aeabi_dsub+0x24e>
 8002d7c:	4661      	mov	r1, ip
 8002d7e:	2220      	movs	r2, #32
 8002d80:	003c      	movs	r4, r7
 8002d82:	1a52      	subs	r2, r2, r1
 8002d84:	4094      	lsls	r4, r2
 8002d86:	0001      	movs	r1, r0
 8002d88:	4090      	lsls	r0, r2
 8002d8a:	46a0      	mov	r8, r4
 8002d8c:	4664      	mov	r4, ip
 8002d8e:	1e42      	subs	r2, r0, #1
 8002d90:	4190      	sbcs	r0, r2
 8002d92:	4662      	mov	r2, ip
 8002d94:	40e1      	lsrs	r1, r4
 8002d96:	4644      	mov	r4, r8
 8002d98:	40d7      	lsrs	r7, r2
 8002d9a:	430c      	orrs	r4, r1
 8002d9c:	4304      	orrs	r4, r0
 8002d9e:	44b9      	add	r9, r7
 8002da0:	e701      	b.n	8002ba6 <__aeabi_dsub+0x342>
 8002da2:	496b      	ldr	r1, [pc, #428]	; (8002f50 <__aeabi_dsub+0x6ec>)
 8002da4:	428a      	cmp	r2, r1
 8002da6:	d100      	bne.n	8002daa <__aeabi_dsub+0x546>
 8002da8:	e70c      	b.n	8002bc4 <__aeabi_dsub+0x360>
 8002daa:	1818      	adds	r0, r3, r0
 8002dac:	4298      	cmp	r0, r3
 8002dae:	419b      	sbcs	r3, r3
 8002db0:	444f      	add	r7, r9
 8002db2:	425b      	negs	r3, r3
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	07dc      	lsls	r4, r3, #31
 8002db8:	0840      	lsrs	r0, r0, #1
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	469a      	mov	sl, r3
 8002dbe:	0016      	movs	r6, r2
 8002dc0:	4304      	orrs	r4, r0
 8002dc2:	e6d9      	b.n	8002b78 <__aeabi_dsub+0x314>
 8002dc4:	2a00      	cmp	r2, #0
 8002dc6:	d000      	beq.n	8002dca <__aeabi_dsub+0x566>
 8002dc8:	e081      	b.n	8002ece <__aeabi_dsub+0x66a>
 8002dca:	003b      	movs	r3, r7
 8002dcc:	4303      	orrs	r3, r0
 8002dce:	d11d      	bne.n	8002e0c <__aeabi_dsub+0x5a8>
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	2500      	movs	r5, #0
 8002dd4:	0312      	lsls	r2, r2, #12
 8002dd6:	e70b      	b.n	8002bf0 <__aeabi_dsub+0x38c>
 8002dd8:	08c0      	lsrs	r0, r0, #3
 8002dda:	077b      	lsls	r3, r7, #29
 8002ddc:	465d      	mov	r5, fp
 8002dde:	4303      	orrs	r3, r0
 8002de0:	08fa      	lsrs	r2, r7, #3
 8002de2:	e6d3      	b.n	8002b8c <__aeabi_dsub+0x328>
 8002de4:	1ac4      	subs	r4, r0, r3
 8002de6:	42a0      	cmp	r0, r4
 8002de8:	4180      	sbcs	r0, r0
 8002dea:	464b      	mov	r3, r9
 8002dec:	4240      	negs	r0, r0
 8002dee:	1aff      	subs	r7, r7, r3
 8002df0:	1a3b      	subs	r3, r7, r0
 8002df2:	469a      	mov	sl, r3
 8002df4:	465d      	mov	r5, fp
 8002df6:	e597      	b.n	8002928 <__aeabi_dsub+0xc4>
 8002df8:	1a1c      	subs	r4, r3, r0
 8002dfa:	464a      	mov	r2, r9
 8002dfc:	42a3      	cmp	r3, r4
 8002dfe:	419b      	sbcs	r3, r3
 8002e00:	1bd7      	subs	r7, r2, r7
 8002e02:	425b      	negs	r3, r3
 8002e04:	1afb      	subs	r3, r7, r3
 8002e06:	469a      	mov	sl, r3
 8002e08:	2601      	movs	r6, #1
 8002e0a:	e585      	b.n	8002918 <__aeabi_dsub+0xb4>
 8002e0c:	08c0      	lsrs	r0, r0, #3
 8002e0e:	077b      	lsls	r3, r7, #29
 8002e10:	465d      	mov	r5, fp
 8002e12:	4303      	orrs	r3, r0
 8002e14:	08fa      	lsrs	r2, r7, #3
 8002e16:	e6e7      	b.n	8002be8 <__aeabi_dsub+0x384>
 8002e18:	464a      	mov	r2, r9
 8002e1a:	08db      	lsrs	r3, r3, #3
 8002e1c:	0752      	lsls	r2, r2, #29
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	464a      	mov	r2, r9
 8002e22:	08d2      	lsrs	r2, r2, #3
 8002e24:	e6b5      	b.n	8002b92 <__aeabi_dsub+0x32e>
 8002e26:	08c0      	lsrs	r0, r0, #3
 8002e28:	077b      	lsls	r3, r7, #29
 8002e2a:	4303      	orrs	r3, r0
 8002e2c:	08fa      	lsrs	r2, r7, #3
 8002e2e:	e6db      	b.n	8002be8 <__aeabi_dsub+0x384>
 8002e30:	4649      	mov	r1, r9
 8002e32:	4319      	orrs	r1, r3
 8002e34:	000b      	movs	r3, r1
 8002e36:	1e59      	subs	r1, r3, #1
 8002e38:	418b      	sbcs	r3, r1
 8002e3a:	001c      	movs	r4, r3
 8002e3c:	e653      	b.n	8002ae6 <__aeabi_dsub+0x282>
 8002e3e:	464d      	mov	r5, r9
 8002e40:	3c20      	subs	r4, #32
 8002e42:	40e5      	lsrs	r5, r4
 8002e44:	2920      	cmp	r1, #32
 8002e46:	d005      	beq.n	8002e54 <__aeabi_dsub+0x5f0>
 8002e48:	2440      	movs	r4, #64	; 0x40
 8002e4a:	1a64      	subs	r4, r4, r1
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	40a1      	lsls	r1, r4
 8002e50:	430b      	orrs	r3, r1
 8002e52:	4698      	mov	r8, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	1e5c      	subs	r4, r3, #1
 8002e58:	41a3      	sbcs	r3, r4
 8002e5a:	432b      	orrs	r3, r5
 8002e5c:	e776      	b.n	8002d4c <__aeabi_dsub+0x4e8>
 8002e5e:	2a00      	cmp	r2, #0
 8002e60:	d0e1      	beq.n	8002e26 <__aeabi_dsub+0x5c2>
 8002e62:	003a      	movs	r2, r7
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	4302      	orrs	r2, r0
 8002e68:	d100      	bne.n	8002e6c <__aeabi_dsub+0x608>
 8002e6a:	e6b8      	b.n	8002bde <__aeabi_dsub+0x37a>
 8002e6c:	464a      	mov	r2, r9
 8002e6e:	0752      	lsls	r2, r2, #29
 8002e70:	2480      	movs	r4, #128	; 0x80
 8002e72:	4313      	orrs	r3, r2
 8002e74:	464a      	mov	r2, r9
 8002e76:	0324      	lsls	r4, r4, #12
 8002e78:	08d2      	lsrs	r2, r2, #3
 8002e7a:	4222      	tst	r2, r4
 8002e7c:	d007      	beq.n	8002e8e <__aeabi_dsub+0x62a>
 8002e7e:	08fe      	lsrs	r6, r7, #3
 8002e80:	4226      	tst	r6, r4
 8002e82:	d104      	bne.n	8002e8e <__aeabi_dsub+0x62a>
 8002e84:	465d      	mov	r5, fp
 8002e86:	0032      	movs	r2, r6
 8002e88:	08c3      	lsrs	r3, r0, #3
 8002e8a:	077f      	lsls	r7, r7, #29
 8002e8c:	433b      	orrs	r3, r7
 8002e8e:	0f59      	lsrs	r1, r3, #29
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	0749      	lsls	r1, r1, #29
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	430b      	orrs	r3, r1
 8002e98:	e6a6      	b.n	8002be8 <__aeabi_dsub+0x384>
 8002e9a:	1ac4      	subs	r4, r0, r3
 8002e9c:	42a0      	cmp	r0, r4
 8002e9e:	4180      	sbcs	r0, r0
 8002ea0:	464b      	mov	r3, r9
 8002ea2:	4240      	negs	r0, r0
 8002ea4:	1aff      	subs	r7, r7, r3
 8002ea6:	1a3b      	subs	r3, r7, r0
 8002ea8:	469a      	mov	sl, r3
 8002eaa:	465d      	mov	r5, fp
 8002eac:	2601      	movs	r6, #1
 8002eae:	e533      	b.n	8002918 <__aeabi_dsub+0xb4>
 8002eb0:	003b      	movs	r3, r7
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	d100      	bne.n	8002eb8 <__aeabi_dsub+0x654>
 8002eb6:	e715      	b.n	8002ce4 <__aeabi_dsub+0x480>
 8002eb8:	08c0      	lsrs	r0, r0, #3
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	465d      	mov	r5, fp
 8002ebe:	4303      	orrs	r3, r0
 8002ec0:	08fa      	lsrs	r2, r7, #3
 8002ec2:	e666      	b.n	8002b92 <__aeabi_dsub+0x32e>
 8002ec4:	08c0      	lsrs	r0, r0, #3
 8002ec6:	077b      	lsls	r3, r7, #29
 8002ec8:	4303      	orrs	r3, r0
 8002eca:	08fa      	lsrs	r2, r7, #3
 8002ecc:	e65e      	b.n	8002b8c <__aeabi_dsub+0x328>
 8002ece:	003a      	movs	r2, r7
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	4302      	orrs	r2, r0
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x674>
 8002ed6:	e682      	b.n	8002bde <__aeabi_dsub+0x37a>
 8002ed8:	464a      	mov	r2, r9
 8002eda:	0752      	lsls	r2, r2, #29
 8002edc:	2480      	movs	r4, #128	; 0x80
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	464a      	mov	r2, r9
 8002ee2:	0324      	lsls	r4, r4, #12
 8002ee4:	08d2      	lsrs	r2, r2, #3
 8002ee6:	4222      	tst	r2, r4
 8002ee8:	d007      	beq.n	8002efa <__aeabi_dsub+0x696>
 8002eea:	08fe      	lsrs	r6, r7, #3
 8002eec:	4226      	tst	r6, r4
 8002eee:	d104      	bne.n	8002efa <__aeabi_dsub+0x696>
 8002ef0:	465d      	mov	r5, fp
 8002ef2:	0032      	movs	r2, r6
 8002ef4:	08c3      	lsrs	r3, r0, #3
 8002ef6:	077f      	lsls	r7, r7, #29
 8002ef8:	433b      	orrs	r3, r7
 8002efa:	0f59      	lsrs	r1, r3, #29
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	08db      	lsrs	r3, r3, #3
 8002f00:	0749      	lsls	r1, r1, #29
 8002f02:	430b      	orrs	r3, r1
 8002f04:	e670      	b.n	8002be8 <__aeabi_dsub+0x384>
 8002f06:	08c0      	lsrs	r0, r0, #3
 8002f08:	077b      	lsls	r3, r7, #29
 8002f0a:	4303      	orrs	r3, r0
 8002f0c:	08fa      	lsrs	r2, r7, #3
 8002f0e:	e640      	b.n	8002b92 <__aeabi_dsub+0x32e>
 8002f10:	464c      	mov	r4, r9
 8002f12:	3920      	subs	r1, #32
 8002f14:	40cc      	lsrs	r4, r1
 8002f16:	4661      	mov	r1, ip
 8002f18:	2920      	cmp	r1, #32
 8002f1a:	d006      	beq.n	8002f2a <__aeabi_dsub+0x6c6>
 8002f1c:	4666      	mov	r6, ip
 8002f1e:	2140      	movs	r1, #64	; 0x40
 8002f20:	1b89      	subs	r1, r1, r6
 8002f22:	464e      	mov	r6, r9
 8002f24:	408e      	lsls	r6, r1
 8002f26:	4333      	orrs	r3, r6
 8002f28:	4698      	mov	r8, r3
 8002f2a:	4643      	mov	r3, r8
 8002f2c:	1e59      	subs	r1, r3, #1
 8002f2e:	418b      	sbcs	r3, r1
 8002f30:	431c      	orrs	r4, r3
 8002f32:	e5d8      	b.n	8002ae6 <__aeabi_dsub+0x282>
 8002f34:	181c      	adds	r4, r3, r0
 8002f36:	4284      	cmp	r4, r0
 8002f38:	4180      	sbcs	r0, r0
 8002f3a:	444f      	add	r7, r9
 8002f3c:	46ba      	mov	sl, r7
 8002f3e:	4240      	negs	r0, r0
 8002f40:	4482      	add	sl, r0
 8002f42:	e6d9      	b.n	8002cf8 <__aeabi_dsub+0x494>
 8002f44:	4653      	mov	r3, sl
 8002f46:	4323      	orrs	r3, r4
 8002f48:	d100      	bne.n	8002f4c <__aeabi_dsub+0x6e8>
 8002f4a:	e6cb      	b.n	8002ce4 <__aeabi_dsub+0x480>
 8002f4c:	e614      	b.n	8002b78 <__aeabi_dsub+0x314>
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	000007ff 	.word	0x000007ff
 8002f54:	ff7fffff 	.word	0xff7fffff
 8002f58:	000007fe 	.word	0x000007fe
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	4a01      	ldr	r2, [pc, #4]	; (8002f64 <__aeabi_dsub+0x700>)
 8002f60:	001c      	movs	r4, r3
 8002f62:	e529      	b.n	80029b8 <__aeabi_dsub+0x154>
 8002f64:	000007ff 	.word	0x000007ff

08002f68 <__aeabi_dcmpun>:
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	0005      	movs	r5, r0
 8002f6c:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <__aeabi_dcmpun+0x38>)
 8002f6e:	031c      	lsls	r4, r3, #12
 8002f70:	0016      	movs	r6, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	030a      	lsls	r2, r1, #12
 8002f76:	0049      	lsls	r1, r1, #1
 8002f78:	0b12      	lsrs	r2, r2, #12
 8002f7a:	0d49      	lsrs	r1, r1, #21
 8002f7c:	0b24      	lsrs	r4, r4, #12
 8002f7e:	0d5b      	lsrs	r3, r3, #21
 8002f80:	4281      	cmp	r1, r0
 8002f82:	d008      	beq.n	8002f96 <__aeabi_dcmpun+0x2e>
 8002f84:	4a06      	ldr	r2, [pc, #24]	; (8002fa0 <__aeabi_dcmpun+0x38>)
 8002f86:	2000      	movs	r0, #0
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d103      	bne.n	8002f94 <__aeabi_dcmpun+0x2c>
 8002f8c:	0020      	movs	r0, r4
 8002f8e:	4330      	orrs	r0, r6
 8002f90:	1e43      	subs	r3, r0, #1
 8002f92:	4198      	sbcs	r0, r3
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	2001      	movs	r0, #1
 8002f98:	432a      	orrs	r2, r5
 8002f9a:	d1fb      	bne.n	8002f94 <__aeabi_dcmpun+0x2c>
 8002f9c:	e7f2      	b.n	8002f84 <__aeabi_dcmpun+0x1c>
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	000007ff 	.word	0x000007ff

08002fa4 <__aeabi_d2iz>:
 8002fa4:	000a      	movs	r2, r1
 8002fa6:	b530      	push	{r4, r5, lr}
 8002fa8:	4c13      	ldr	r4, [pc, #76]	; (8002ff8 <__aeabi_d2iz+0x54>)
 8002faa:	0053      	lsls	r3, r2, #1
 8002fac:	0309      	lsls	r1, r1, #12
 8002fae:	0005      	movs	r5, r0
 8002fb0:	0b09      	lsrs	r1, r1, #12
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	0d5b      	lsrs	r3, r3, #21
 8002fb6:	0fd2      	lsrs	r2, r2, #31
 8002fb8:	42a3      	cmp	r3, r4
 8002fba:	dd04      	ble.n	8002fc6 <__aeabi_d2iz+0x22>
 8002fbc:	480f      	ldr	r0, [pc, #60]	; (8002ffc <__aeabi_d2iz+0x58>)
 8002fbe:	4283      	cmp	r3, r0
 8002fc0:	dd02      	ble.n	8002fc8 <__aeabi_d2iz+0x24>
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <__aeabi_d2iz+0x5c>)
 8002fc4:	18d0      	adds	r0, r2, r3
 8002fc6:	bd30      	pop	{r4, r5, pc}
 8002fc8:	2080      	movs	r0, #128	; 0x80
 8002fca:	0340      	lsls	r0, r0, #13
 8002fcc:	4301      	orrs	r1, r0
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <__aeabi_d2iz+0x60>)
 8002fd0:	1ac0      	subs	r0, r0, r3
 8002fd2:	281f      	cmp	r0, #31
 8002fd4:	dd08      	ble.n	8002fe8 <__aeabi_d2iz+0x44>
 8002fd6:	480c      	ldr	r0, [pc, #48]	; (8003008 <__aeabi_d2iz+0x64>)
 8002fd8:	1ac3      	subs	r3, r0, r3
 8002fda:	40d9      	lsrs	r1, r3
 8002fdc:	000b      	movs	r3, r1
 8002fde:	4258      	negs	r0, r3
 8002fe0:	2a00      	cmp	r2, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <__aeabi_d2iz+0x22>
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	e7ee      	b.n	8002fc6 <__aeabi_d2iz+0x22>
 8002fe8:	4c08      	ldr	r4, [pc, #32]	; (800300c <__aeabi_d2iz+0x68>)
 8002fea:	40c5      	lsrs	r5, r0
 8002fec:	46a4      	mov	ip, r4
 8002fee:	4463      	add	r3, ip
 8002ff0:	4099      	lsls	r1, r3
 8002ff2:	000b      	movs	r3, r1
 8002ff4:	432b      	orrs	r3, r5
 8002ff6:	e7f2      	b.n	8002fde <__aeabi_d2iz+0x3a>
 8002ff8:	000003fe 	.word	0x000003fe
 8002ffc:	0000041d 	.word	0x0000041d
 8003000:	7fffffff 	.word	0x7fffffff
 8003004:	00000433 	.word	0x00000433
 8003008:	00000413 	.word	0x00000413
 800300c:	fffffbed 	.word	0xfffffbed

08003010 <__aeabi_i2d>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	2800      	cmp	r0, #0
 8003014:	d016      	beq.n	8003044 <__aeabi_i2d+0x34>
 8003016:	17c3      	asrs	r3, r0, #31
 8003018:	18c5      	adds	r5, r0, r3
 800301a:	405d      	eors	r5, r3
 800301c:	0fc4      	lsrs	r4, r0, #31
 800301e:	0028      	movs	r0, r5
 8003020:	f000 f91a 	bl	8003258 <__clzsi2>
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <__aeabi_i2d+0x5c>)
 8003026:	1a1b      	subs	r3, r3, r0
 8003028:	280a      	cmp	r0, #10
 800302a:	dc16      	bgt.n	800305a <__aeabi_i2d+0x4a>
 800302c:	0002      	movs	r2, r0
 800302e:	002e      	movs	r6, r5
 8003030:	3215      	adds	r2, #21
 8003032:	4096      	lsls	r6, r2
 8003034:	220b      	movs	r2, #11
 8003036:	1a12      	subs	r2, r2, r0
 8003038:	40d5      	lsrs	r5, r2
 800303a:	055b      	lsls	r3, r3, #21
 800303c:	032d      	lsls	r5, r5, #12
 800303e:	0b2d      	lsrs	r5, r5, #12
 8003040:	0d5b      	lsrs	r3, r3, #21
 8003042:	e003      	b.n	800304c <__aeabi_i2d+0x3c>
 8003044:	2400      	movs	r4, #0
 8003046:	2300      	movs	r3, #0
 8003048:	2500      	movs	r5, #0
 800304a:	2600      	movs	r6, #0
 800304c:	051b      	lsls	r3, r3, #20
 800304e:	432b      	orrs	r3, r5
 8003050:	07e4      	lsls	r4, r4, #31
 8003052:	4323      	orrs	r3, r4
 8003054:	0030      	movs	r0, r6
 8003056:	0019      	movs	r1, r3
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	380b      	subs	r0, #11
 800305c:	4085      	lsls	r5, r0
 800305e:	055b      	lsls	r3, r3, #21
 8003060:	032d      	lsls	r5, r5, #12
 8003062:	2600      	movs	r6, #0
 8003064:	0b2d      	lsrs	r5, r5, #12
 8003066:	0d5b      	lsrs	r3, r3, #21
 8003068:	e7f0      	b.n	800304c <__aeabi_i2d+0x3c>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	0000041e 	.word	0x0000041e

08003070 <__aeabi_ui2d>:
 8003070:	b510      	push	{r4, lr}
 8003072:	1e04      	subs	r4, r0, #0
 8003074:	d010      	beq.n	8003098 <__aeabi_ui2d+0x28>
 8003076:	f000 f8ef 	bl	8003258 <__clzsi2>
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <__aeabi_ui2d+0x48>)
 800307c:	1a1b      	subs	r3, r3, r0
 800307e:	280a      	cmp	r0, #10
 8003080:	dc11      	bgt.n	80030a6 <__aeabi_ui2d+0x36>
 8003082:	220b      	movs	r2, #11
 8003084:	0021      	movs	r1, r4
 8003086:	1a12      	subs	r2, r2, r0
 8003088:	40d1      	lsrs	r1, r2
 800308a:	3015      	adds	r0, #21
 800308c:	030a      	lsls	r2, r1, #12
 800308e:	055b      	lsls	r3, r3, #21
 8003090:	4084      	lsls	r4, r0
 8003092:	0b12      	lsrs	r2, r2, #12
 8003094:	0d5b      	lsrs	r3, r3, #21
 8003096:	e001      	b.n	800309c <__aeabi_ui2d+0x2c>
 8003098:	2300      	movs	r3, #0
 800309a:	2200      	movs	r2, #0
 800309c:	051b      	lsls	r3, r3, #20
 800309e:	4313      	orrs	r3, r2
 80030a0:	0020      	movs	r0, r4
 80030a2:	0019      	movs	r1, r3
 80030a4:	bd10      	pop	{r4, pc}
 80030a6:	0022      	movs	r2, r4
 80030a8:	380b      	subs	r0, #11
 80030aa:	4082      	lsls	r2, r0
 80030ac:	055b      	lsls	r3, r3, #21
 80030ae:	0312      	lsls	r2, r2, #12
 80030b0:	2400      	movs	r4, #0
 80030b2:	0b12      	lsrs	r2, r2, #12
 80030b4:	0d5b      	lsrs	r3, r3, #21
 80030b6:	e7f1      	b.n	800309c <__aeabi_ui2d+0x2c>
 80030b8:	0000041e 	.word	0x0000041e

080030bc <__aeabi_f2d>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	0242      	lsls	r2, r0, #9
 80030c0:	0043      	lsls	r3, r0, #1
 80030c2:	0fc4      	lsrs	r4, r0, #31
 80030c4:	20fe      	movs	r0, #254	; 0xfe
 80030c6:	0e1b      	lsrs	r3, r3, #24
 80030c8:	1c59      	adds	r1, r3, #1
 80030ca:	0a55      	lsrs	r5, r2, #9
 80030cc:	4208      	tst	r0, r1
 80030ce:	d00c      	beq.n	80030ea <__aeabi_f2d+0x2e>
 80030d0:	21e0      	movs	r1, #224	; 0xe0
 80030d2:	0089      	lsls	r1, r1, #2
 80030d4:	468c      	mov	ip, r1
 80030d6:	076d      	lsls	r5, r5, #29
 80030d8:	0b12      	lsrs	r2, r2, #12
 80030da:	4463      	add	r3, ip
 80030dc:	051b      	lsls	r3, r3, #20
 80030de:	4313      	orrs	r3, r2
 80030e0:	07e4      	lsls	r4, r4, #31
 80030e2:	4323      	orrs	r3, r4
 80030e4:	0028      	movs	r0, r5
 80030e6:	0019      	movs	r1, r3
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d114      	bne.n	8003118 <__aeabi_f2d+0x5c>
 80030ee:	2d00      	cmp	r5, #0
 80030f0:	d01b      	beq.n	800312a <__aeabi_f2d+0x6e>
 80030f2:	0028      	movs	r0, r5
 80030f4:	f000 f8b0 	bl	8003258 <__clzsi2>
 80030f8:	280a      	cmp	r0, #10
 80030fa:	dc1c      	bgt.n	8003136 <__aeabi_f2d+0x7a>
 80030fc:	230b      	movs	r3, #11
 80030fe:	002a      	movs	r2, r5
 8003100:	1a1b      	subs	r3, r3, r0
 8003102:	40da      	lsrs	r2, r3
 8003104:	0003      	movs	r3, r0
 8003106:	3315      	adds	r3, #21
 8003108:	409d      	lsls	r5, r3
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <__aeabi_f2d+0x88>)
 800310c:	0312      	lsls	r2, r2, #12
 800310e:	1a1b      	subs	r3, r3, r0
 8003110:	055b      	lsls	r3, r3, #21
 8003112:	0b12      	lsrs	r2, r2, #12
 8003114:	0d5b      	lsrs	r3, r3, #21
 8003116:	e7e1      	b.n	80030dc <__aeabi_f2d+0x20>
 8003118:	2d00      	cmp	r5, #0
 800311a:	d009      	beq.n	8003130 <__aeabi_f2d+0x74>
 800311c:	0b13      	lsrs	r3, r2, #12
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	0312      	lsls	r2, r2, #12
 8003122:	431a      	orrs	r2, r3
 8003124:	076d      	lsls	r5, r5, #29
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <__aeabi_f2d+0x8c>)
 8003128:	e7d8      	b.n	80030dc <__aeabi_f2d+0x20>
 800312a:	2300      	movs	r3, #0
 800312c:	2200      	movs	r2, #0
 800312e:	e7d5      	b.n	80030dc <__aeabi_f2d+0x20>
 8003130:	2200      	movs	r2, #0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <__aeabi_f2d+0x8c>)
 8003134:	e7d2      	b.n	80030dc <__aeabi_f2d+0x20>
 8003136:	0003      	movs	r3, r0
 8003138:	002a      	movs	r2, r5
 800313a:	3b0b      	subs	r3, #11
 800313c:	409a      	lsls	r2, r3
 800313e:	2500      	movs	r5, #0
 8003140:	e7e3      	b.n	800310a <__aeabi_f2d+0x4e>
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	00000389 	.word	0x00000389
 8003148:	000007ff 	.word	0x000007ff

0800314c <__aeabi_d2f>:
 800314c:	0002      	movs	r2, r0
 800314e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003150:	004b      	lsls	r3, r1, #1
 8003152:	030d      	lsls	r5, r1, #12
 8003154:	0f40      	lsrs	r0, r0, #29
 8003156:	0d5b      	lsrs	r3, r3, #21
 8003158:	0fcc      	lsrs	r4, r1, #31
 800315a:	0a6d      	lsrs	r5, r5, #9
 800315c:	493a      	ldr	r1, [pc, #232]	; (8003248 <__aeabi_d2f+0xfc>)
 800315e:	4305      	orrs	r5, r0
 8003160:	1c58      	adds	r0, r3, #1
 8003162:	00d7      	lsls	r7, r2, #3
 8003164:	4208      	tst	r0, r1
 8003166:	d00a      	beq.n	800317e <__aeabi_d2f+0x32>
 8003168:	4938      	ldr	r1, [pc, #224]	; (800324c <__aeabi_d2f+0x100>)
 800316a:	1859      	adds	r1, r3, r1
 800316c:	29fe      	cmp	r1, #254	; 0xfe
 800316e:	dd16      	ble.n	800319e <__aeabi_d2f+0x52>
 8003170:	20ff      	movs	r0, #255	; 0xff
 8003172:	2200      	movs	r2, #0
 8003174:	05c0      	lsls	r0, r0, #23
 8003176:	4310      	orrs	r0, r2
 8003178:	07e4      	lsls	r4, r4, #31
 800317a:	4320      	orrs	r0, r4
 800317c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <__aeabi_d2f+0x44>
 8003182:	433d      	orrs	r5, r7
 8003184:	d026      	beq.n	80031d4 <__aeabi_d2f+0x88>
 8003186:	2205      	movs	r2, #5
 8003188:	0192      	lsls	r2, r2, #6
 800318a:	0a52      	lsrs	r2, r2, #9
 800318c:	b2d8      	uxtb	r0, r3
 800318e:	e7f1      	b.n	8003174 <__aeabi_d2f+0x28>
 8003190:	432f      	orrs	r7, r5
 8003192:	d0ed      	beq.n	8003170 <__aeabi_d2f+0x24>
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	03d2      	lsls	r2, r2, #15
 8003198:	20ff      	movs	r0, #255	; 0xff
 800319a:	432a      	orrs	r2, r5
 800319c:	e7ea      	b.n	8003174 <__aeabi_d2f+0x28>
 800319e:	2900      	cmp	r1, #0
 80031a0:	dd1b      	ble.n	80031da <__aeabi_d2f+0x8e>
 80031a2:	0192      	lsls	r2, r2, #6
 80031a4:	1e50      	subs	r0, r2, #1
 80031a6:	4182      	sbcs	r2, r0
 80031a8:	00ed      	lsls	r5, r5, #3
 80031aa:	0f7f      	lsrs	r7, r7, #29
 80031ac:	432a      	orrs	r2, r5
 80031ae:	433a      	orrs	r2, r7
 80031b0:	0753      	lsls	r3, r2, #29
 80031b2:	d047      	beq.n	8003244 <__aeabi_d2f+0xf8>
 80031b4:	230f      	movs	r3, #15
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d000      	beq.n	80031be <__aeabi_d2f+0x72>
 80031bc:	3204      	adds	r2, #4
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	04db      	lsls	r3, r3, #19
 80031c2:	4013      	ands	r3, r2
 80031c4:	d03e      	beq.n	8003244 <__aeabi_d2f+0xf8>
 80031c6:	1c48      	adds	r0, r1, #1
 80031c8:	29fe      	cmp	r1, #254	; 0xfe
 80031ca:	d0d1      	beq.n	8003170 <__aeabi_d2f+0x24>
 80031cc:	0192      	lsls	r2, r2, #6
 80031ce:	0a52      	lsrs	r2, r2, #9
 80031d0:	b2c0      	uxtb	r0, r0
 80031d2:	e7cf      	b.n	8003174 <__aeabi_d2f+0x28>
 80031d4:	2000      	movs	r0, #0
 80031d6:	2200      	movs	r2, #0
 80031d8:	e7cc      	b.n	8003174 <__aeabi_d2f+0x28>
 80031da:	000a      	movs	r2, r1
 80031dc:	3217      	adds	r2, #23
 80031de:	db2f      	blt.n	8003240 <__aeabi_d2f+0xf4>
 80031e0:	2680      	movs	r6, #128	; 0x80
 80031e2:	0436      	lsls	r6, r6, #16
 80031e4:	432e      	orrs	r6, r5
 80031e6:	251e      	movs	r5, #30
 80031e8:	1a6d      	subs	r5, r5, r1
 80031ea:	2d1f      	cmp	r5, #31
 80031ec:	dd11      	ble.n	8003212 <__aeabi_d2f+0xc6>
 80031ee:	2202      	movs	r2, #2
 80031f0:	4252      	negs	r2, r2
 80031f2:	1a52      	subs	r2, r2, r1
 80031f4:	0031      	movs	r1, r6
 80031f6:	40d1      	lsrs	r1, r2
 80031f8:	2d20      	cmp	r5, #32
 80031fa:	d004      	beq.n	8003206 <__aeabi_d2f+0xba>
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <__aeabi_d2f+0x104>)
 80031fe:	4694      	mov	ip, r2
 8003200:	4463      	add	r3, ip
 8003202:	409e      	lsls	r6, r3
 8003204:	4337      	orrs	r7, r6
 8003206:	003a      	movs	r2, r7
 8003208:	1e53      	subs	r3, r2, #1
 800320a:	419a      	sbcs	r2, r3
 800320c:	430a      	orrs	r2, r1
 800320e:	2100      	movs	r1, #0
 8003210:	e7ce      	b.n	80031b0 <__aeabi_d2f+0x64>
 8003212:	4a10      	ldr	r2, [pc, #64]	; (8003254 <__aeabi_d2f+0x108>)
 8003214:	0038      	movs	r0, r7
 8003216:	4694      	mov	ip, r2
 8003218:	4463      	add	r3, ip
 800321a:	4098      	lsls	r0, r3
 800321c:	003a      	movs	r2, r7
 800321e:	1e41      	subs	r1, r0, #1
 8003220:	4188      	sbcs	r0, r1
 8003222:	409e      	lsls	r6, r3
 8003224:	40ea      	lsrs	r2, r5
 8003226:	4330      	orrs	r0, r6
 8003228:	4302      	orrs	r2, r0
 800322a:	2100      	movs	r1, #0
 800322c:	0753      	lsls	r3, r2, #29
 800322e:	d1c1      	bne.n	80031b4 <__aeabi_d2f+0x68>
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	0013      	movs	r3, r2
 8003234:	04c9      	lsls	r1, r1, #19
 8003236:	2001      	movs	r0, #1
 8003238:	400b      	ands	r3, r1
 800323a:	420a      	tst	r2, r1
 800323c:	d1c6      	bne.n	80031cc <__aeabi_d2f+0x80>
 800323e:	e7a3      	b.n	8003188 <__aeabi_d2f+0x3c>
 8003240:	2300      	movs	r3, #0
 8003242:	e7a0      	b.n	8003186 <__aeabi_d2f+0x3a>
 8003244:	000b      	movs	r3, r1
 8003246:	e79f      	b.n	8003188 <__aeabi_d2f+0x3c>
 8003248:	000007fe 	.word	0x000007fe
 800324c:	fffffc80 	.word	0xfffffc80
 8003250:	fffffca2 	.word	0xfffffca2
 8003254:	fffffc82 	.word	0xfffffc82

08003258 <__clzsi2>:
 8003258:	211c      	movs	r1, #28
 800325a:	2301      	movs	r3, #1
 800325c:	041b      	lsls	r3, r3, #16
 800325e:	4298      	cmp	r0, r3
 8003260:	d301      	bcc.n	8003266 <__clzsi2+0xe>
 8003262:	0c00      	lsrs	r0, r0, #16
 8003264:	3910      	subs	r1, #16
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	4298      	cmp	r0, r3
 800326a:	d301      	bcc.n	8003270 <__clzsi2+0x18>
 800326c:	0a00      	lsrs	r0, r0, #8
 800326e:	3908      	subs	r1, #8
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	4298      	cmp	r0, r3
 8003274:	d301      	bcc.n	800327a <__clzsi2+0x22>
 8003276:	0900      	lsrs	r0, r0, #4
 8003278:	3904      	subs	r1, #4
 800327a:	a202      	add	r2, pc, #8	; (adr r2, 8003284 <__clzsi2+0x2c>)
 800327c:	5c10      	ldrb	r0, [r2, r0]
 800327e:	1840      	adds	r0, r0, r1
 8003280:	4770      	bx	lr
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	02020304 	.word	0x02020304
 8003288:	01010101 	.word	0x01010101
	...

08003294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <MX_GPIO_Init+0x70>)
 800329c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329e:	4b19      	ldr	r3, [pc, #100]	; (8003304 <MX_GPIO_Init+0x70>)
 80032a0:	2104      	movs	r1, #4
 80032a2:	430a      	orrs	r2, r1
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34
 80032a6:	4b17      	ldr	r3, [pc, #92]	; (8003304 <MX_GPIO_Init+0x70>)
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	2204      	movs	r2, #4
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032b2:	4b14      	ldr	r3, [pc, #80]	; (8003304 <MX_GPIO_Init+0x70>)
 80032b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <MX_GPIO_Init+0x70>)
 80032b8:	2120      	movs	r1, #32
 80032ba:	430a      	orrs	r2, r1
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <MX_GPIO_Init+0x70>)
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	2220      	movs	r2, #32
 80032c4:	4013      	ands	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <MX_GPIO_Init+0x70>)
 80032cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <MX_GPIO_Init+0x70>)
 80032d0:	2101      	movs	r1, #1
 80032d2:	430a      	orrs	r2, r1
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <MX_GPIO_Init+0x70>)
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	2201      	movs	r2, #1
 80032dc:	4013      	ands	r3, r2
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <MX_GPIO_Init+0x70>)
 80032e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <MX_GPIO_Init+0x70>)
 80032e8:	2102      	movs	r1, #2
 80032ea:	430a      	orrs	r2, r1
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <MX_GPIO_Init+0x70>)
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	2202      	movs	r2, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]

}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b004      	add	sp, #16
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	40021000 	.word	0x40021000

08003308 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2 , (uint8_t *)&ch, 1, 0xFFFF);
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <__io_putchar+0x20>)
 8003312:	1d39      	adds	r1, r7, #4
 8003314:	4805      	ldr	r0, [pc, #20]	; (800332c <__io_putchar+0x24>)
 8003316:	2201      	movs	r2, #1
 8003318:	f003 fdac 	bl	8006e74 <HAL_UART_Transmit>
    return ch;
 800331c:	687b      	ldr	r3, [r7, #4]
}
 800331e:	0018      	movs	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	b002      	add	sp, #8
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	0000ffff 	.word	0x0000ffff
 800332c:	20000484 	.word	0x20000484

08003330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003334:	f000 ff68 	bl	8004208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003338:	f000 f838 	bl	80033ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800333c:	f7ff ffaa 	bl	8003294 <MX_GPIO_Init>
  MX_TIM17_Init();
 8003340:	f000 fc36 	bl	8003bb0 <MX_TIM17_Init>
  MX_TIM14_Init();
 8003344:	f000 faa4 	bl	8003890 <MX_TIM14_Init>
  MX_TIM15_Init();
 8003348:	f000 faf2 	bl	8003930 <MX_TIM15_Init>
  MX_TIM16_Init();
 800334c:	f000 fba8 	bl	8003aa0 <MX_TIM16_Init>
  MX_TIM1_Init();
 8003350:	f000 f992 	bl	8003678 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003354:	f000 f9fa 	bl	800374c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003358:	f000 fe76 	bl	8004048 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800335c:	f000 fa5a 	bl	8003814 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Shell_Init();
 8003360:	f006 f8f2 	bl	8009548 <Shell_Init>
  PIDInit();
 8003364:	f005 fc8a 	bl	8008c7c <PIDInit>
  dcMotorInit();
 8003368:	f005 fde4 	bl	8008f34 <dcMotorInit>
  HAL_TIM_Base_Start_IT(&htim1);
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <main+0x70>)
 800336e:	0018      	movs	r0, r3
 8003370:	f002 f970 	bl	8005654 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <main+0x74>)
 8003376:	0018      	movs	r0, r3
 8003378:	f002 f96c 	bl	8005654 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <main+0x78>)
 800337e:	0018      	movs	r0, r3
 8003380:	f002 f968 	bl	8005654 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003384:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <main+0x74>)
 8003386:	213c      	movs	r1, #60	; 0x3c
 8003388:	0018      	movs	r0, r3
 800338a:	f002 fc31 	bl	8005bf0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <main+0x70>)
 8003390:	213c      	movs	r1, #60	; 0x3c
 8003392:	0018      	movs	r0, r3
 8003394:	f002 fc2c 	bl	8005bf0 <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Shell_Loop();
 8003398:	f006 f91c 	bl	80095d4 <Shell_Loop>
 800339c:	e7fc      	b.n	8003398 <main+0x68>
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	20000270 	.word	0x20000270
 80033a4:	200002bc 	.word	0x200002bc
 80033a8:	20000308 	.word	0x20000308

080033ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b093      	sub	sp, #76	; 0x4c
 80033b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033b2:	2414      	movs	r4, #20
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	0018      	movs	r0, r3
 80033b8:	2334      	movs	r3, #52	; 0x34
 80033ba:	001a      	movs	r2, r3
 80033bc:	2100      	movs	r1, #0
 80033be:	f007 ff45 	bl	800b24c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	0018      	movs	r0, r3
 80033c6:	2310      	movs	r3, #16
 80033c8:	001a      	movs	r2, r3
 80033ca:	2100      	movs	r1, #0
 80033cc:	f007 ff3e 	bl	800b24c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	0018      	movs	r0, r3
 80033d6:	f001 faab 	bl	8004930 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033da:	193b      	adds	r3, r7, r4
 80033dc:	2202      	movs	r2, #2
 80033de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033e0:	193b      	adds	r3, r7, r4
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	0052      	lsls	r2, r2, #1
 80033e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80033e8:	193b      	adds	r3, r7, r4
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033ee:	193b      	adds	r3, r7, r4
 80033f0:	2240      	movs	r2, #64	; 0x40
 80033f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80033f4:	193b      	adds	r3, r7, r4
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033fa:	193b      	adds	r3, r7, r4
 80033fc:	0018      	movs	r0, r3
 80033fe:	f001 fae3 	bl	80049c8 <HAL_RCC_OscConfig>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d001      	beq.n	800340a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003406:	f000 f819 	bl	800343c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	2207      	movs	r2, #7
 800340e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	2200      	movs	r2, #0
 8003414:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	2100      	movs	r1, #0
 8003426:	0018      	movs	r0, r3
 8003428:	f001 fdde 	bl	8004fe8 <HAL_RCC_ClockConfig>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d001      	beq.n	8003434 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003430:	f000 f804 	bl	800343c <Error_Handler>
  }
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b013      	add	sp, #76	; 0x4c
 800343a:	bd90      	pop	{r4, r7, pc}

0800343c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003440:	b672      	cpsid	i
}
 8003442:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003444:	e7fe      	b.n	8003444 <Error_Handler+0x8>
	...

08003448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_MspInit+0x44>)
 8003450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HAL_MspInit+0x44>)
 8003454:	2101      	movs	r1, #1
 8003456:	430a      	orrs	r2, r1
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_MspInit+0x44>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	2201      	movs	r2, #1
 8003460:	4013      	ands	r3, r2
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_MspInit+0x44>)
 8003468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_MspInit+0x44>)
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	0549      	lsls	r1, r1, #21
 8003470:	430a      	orrs	r2, r1
 8003472:	63da      	str	r2, [r3, #60]	; 0x3c
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_MspInit+0x44>)
 8003476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	055b      	lsls	r3, r3, #21
 800347c:	4013      	ands	r3, r2
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b002      	add	sp, #8
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	40021000 	.word	0x40021000

08003490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003494:	e7fe      	b.n	8003494 <NMI_Handler+0x4>

08003496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800349a:	e7fe      	b.n	800349a <HardFault_Handler+0x4>

0800349c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b4:	f000 ff12 	bl	80042dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <TIM7_IRQHandler+0x14>)
 80034c6:	0018      	movs	r0, r3
 80034c8:	f002 fc36 	bl	8005d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	20000308 	.word	0x20000308

080034d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <USART2_IRQHandler+0x14>)
 80034de:	0018      	movs	r0, r3
 80034e0:	f003 fdbc 	bl	800705c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	20000484 	.word	0x20000484

080034f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  return 1;
 80034f4:	2301      	movs	r3, #1
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_kill>:

int _kill(int pid, int sig)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003506:	f007 ff71 	bl	800b3ec <__errno>
 800350a:	0003      	movs	r3, r0
 800350c:	2216      	movs	r2, #22
 800350e:	601a      	str	r2, [r3, #0]
  return -1;
 8003510:	2301      	movs	r3, #1
 8003512:	425b      	negs	r3, r3
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b002      	add	sp, #8
 800351a:	bd80      	pop	{r7, pc}

0800351c <_exit>:

void _exit (int status)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003524:	2301      	movs	r3, #1
 8003526:	425a      	negs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0011      	movs	r1, r2
 800352c:	0018      	movs	r0, r3
 800352e:	f7ff ffe5 	bl	80034fc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003532:	e7fe      	b.n	8003532 <_exit+0x16>

08003534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e00a      	b.n	800355c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003546:	e000      	b.n	800354a <_read+0x16>
 8003548:	bf00      	nop
 800354a:	0001      	movs	r1, r0
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	60ba      	str	r2, [r7, #8]
 8003552:	b2ca      	uxtb	r2, r1
 8003554:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	3301      	adds	r3, #1
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	dbf0      	blt.n	8003546 <_read+0x12>
  }

  return len;
 8003564:	687b      	ldr	r3, [r7, #4]
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b006      	add	sp, #24
 800356c:	bd80      	pop	{r7, pc}

0800356e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	e009      	b.n	8003594 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	60ba      	str	r2, [r7, #8]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	0018      	movs	r0, r3
 800358a:	f7ff febd 	bl	8003308 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	3301      	adds	r3, #1
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	dbf1      	blt.n	8003580 <_write+0x12>
  }
  return len;
 800359c:	687b      	ldr	r3, [r7, #4]
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b006      	add	sp, #24
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <_close>:

int _close(int file)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	425b      	negs	r3, r3
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b002      	add	sp, #8
 80035b8:	bd80      	pop	{r7, pc}

080035ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	0192      	lsls	r2, r2, #6
 80035ca:	605a      	str	r2, [r3, #4]
  return 0;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_isatty>:

int _isatty(int file)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b004      	add	sp, #16
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <_sbrk+0x5c>)
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <_sbrk+0x60>)
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003614:	4b13      	ldr	r3, [pc, #76]	; (8003664 <_sbrk+0x64>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <_sbrk+0x64>)
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <_sbrk+0x68>)
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003622:	4b10      	ldr	r3, [pc, #64]	; (8003664 <_sbrk+0x64>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	18d3      	adds	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	429a      	cmp	r2, r3
 800362e:	d207      	bcs.n	8003640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003630:	f007 fedc 	bl	800b3ec <__errno>
 8003634:	0003      	movs	r3, r0
 8003636:	220c      	movs	r2, #12
 8003638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800363a:	2301      	movs	r3, #1
 800363c:	425b      	negs	r3, r3
 800363e:	e009      	b.n	8003654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003640:	4b08      	ldr	r3, [pc, #32]	; (8003664 <_sbrk+0x64>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <_sbrk+0x64>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	18d2      	adds	r2, r2, r3
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <_sbrk+0x64>)
 8003650:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003652:	68fb      	ldr	r3, [r7, #12]
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	b006      	add	sp, #24
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20009000 	.word	0x20009000
 8003660:	00000400 	.word	0x00000400
 8003664:	2000026c 	.word	0x2000026c
 8003668:	200007c8 	.word	0x200007c8

0800366c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b08d      	sub	sp, #52	; 0x34
 800367c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800367e:	240c      	movs	r4, #12
 8003680:	193b      	adds	r3, r7, r4
 8003682:	0018      	movs	r0, r3
 8003684:	2324      	movs	r3, #36	; 0x24
 8003686:	001a      	movs	r2, r3
 8003688:	2100      	movs	r1, #0
 800368a:	f007 fddf 	bl	800b24c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800368e:	003b      	movs	r3, r7
 8003690:	0018      	movs	r0, r3
 8003692:	230c      	movs	r3, #12
 8003694:	001a      	movs	r2, r3
 8003696:	2100      	movs	r1, #0
 8003698:	f007 fdd8 	bl	800b24c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800369c:	4b28      	ldr	r3, [pc, #160]	; (8003740 <MX_TIM1_Init+0xc8>)
 800369e:	4a29      	ldr	r2, [pc, #164]	; (8003744 <MX_TIM1_Init+0xcc>)
 80036a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80036a2:	4b27      	ldr	r3, [pc, #156]	; (8003740 <MX_TIM1_Init+0xc8>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <MX_TIM1_Init+0xc8>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80036ae:	4b24      	ldr	r3, [pc, #144]	; (8003740 <MX_TIM1_Init+0xc8>)
 80036b0:	4a25      	ldr	r2, [pc, #148]	; (8003748 <MX_TIM1_Init+0xd0>)
 80036b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <MX_TIM1_Init+0xc8>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036ba:	4b21      	ldr	r3, [pc, #132]	; (8003740 <MX_TIM1_Init+0xc8>)
 80036bc:	2200      	movs	r2, #0
 80036be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <MX_TIM1_Init+0xc8>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036c6:	0021      	movs	r1, r4
 80036c8:	187b      	adds	r3, r7, r1
 80036ca:	2203      	movs	r2, #3
 80036cc:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036ce:	187b      	adds	r3, r7, r1
 80036d0:	2200      	movs	r2, #0
 80036d2:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	2201      	movs	r2, #1
 80036d8:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036da:	187b      	adds	r3, r7, r1
 80036dc:	2200      	movs	r2, #0
 80036de:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	2200      	movs	r2, #0
 80036ea:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036ec:	187b      	adds	r3, r7, r1
 80036ee:	2201      	movs	r2, #1
 80036f0:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036f2:	187b      	adds	r3, r7, r1
 80036f4:	2200      	movs	r2, #0
 80036f6:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80036f8:	187b      	adds	r3, r7, r1
 80036fa:	2200      	movs	r2, #0
 80036fc:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80036fe:	187a      	adds	r2, r7, r1
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <MX_TIM1_Init+0xc8>)
 8003702:	0011      	movs	r1, r2
 8003704:	0018      	movs	r0, r3
 8003706:	f002 f9cb 	bl	8005aa0 <HAL_TIM_Encoder_Init>
 800370a:	1e03      	subs	r3, r0, #0
 800370c:	d001      	beq.n	8003712 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800370e:	f7ff fe95 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003712:	003b      	movs	r3, r7
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003718:	003b      	movs	r3, r7
 800371a:	2200      	movs	r2, #0
 800371c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800371e:	003b      	movs	r3, r7
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003724:	003a      	movs	r2, r7
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <MX_TIM1_Init+0xc8>)
 8003728:	0011      	movs	r1, r2
 800372a:	0018      	movs	r0, r3
 800372c:	f003 fa26 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8003730:	1e03      	subs	r3, r0, #0
 8003732:	d001      	beq.n	8003738 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003734:	f7ff fe82 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b00d      	add	sp, #52	; 0x34
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	20000270 	.word	0x20000270
 8003744:	40012c00 	.word	0x40012c00
 8003748:	0000ffff 	.word	0x0000ffff

0800374c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b08d      	sub	sp, #52	; 0x34
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003752:	240c      	movs	r4, #12
 8003754:	193b      	adds	r3, r7, r4
 8003756:	0018      	movs	r0, r3
 8003758:	2324      	movs	r3, #36	; 0x24
 800375a:	001a      	movs	r2, r3
 800375c:	2100      	movs	r1, #0
 800375e:	f007 fd75 	bl	800b24c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003762:	003b      	movs	r3, r7
 8003764:	0018      	movs	r0, r3
 8003766:	230c      	movs	r3, #12
 8003768:	001a      	movs	r2, r3
 800376a:	2100      	movs	r1, #0
 800376c:	f007 fd6e 	bl	800b24c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003770:	4b25      	ldr	r3, [pc, #148]	; (8003808 <MX_TIM3_Init+0xbc>)
 8003772:	4a26      	ldr	r2, [pc, #152]	; (800380c <MX_TIM3_Init+0xc0>)
 8003774:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003776:	4b24      	ldr	r3, [pc, #144]	; (8003808 <MX_TIM3_Init+0xbc>)
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377c:	4b22      	ldr	r3, [pc, #136]	; (8003808 <MX_TIM3_Init+0xbc>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003782:	4b21      	ldr	r3, [pc, #132]	; (8003808 <MX_TIM3_Init+0xbc>)
 8003784:	4a22      	ldr	r2, [pc, #136]	; (8003810 <MX_TIM3_Init+0xc4>)
 8003786:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003788:	4b1f      	ldr	r3, [pc, #124]	; (8003808 <MX_TIM3_Init+0xbc>)
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378e:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <MX_TIM3_Init+0xbc>)
 8003790:	2200      	movs	r2, #0
 8003792:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003794:	0021      	movs	r1, r4
 8003796:	187b      	adds	r3, r7, r1
 8003798:	2203      	movs	r2, #3
 800379a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800379c:	187b      	adds	r3, r7, r1
 800379e:	2200      	movs	r2, #0
 80037a0:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	2201      	movs	r2, #1
 80037a6:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	2200      	movs	r2, #0
 80037ac:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2200      	movs	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2200      	movs	r2, #0
 80037b8:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2201      	movs	r2, #1
 80037be:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	2200      	movs	r2, #0
 80037c4:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	2200      	movs	r2, #0
 80037ca:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037cc:	187a      	adds	r2, r7, r1
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <MX_TIM3_Init+0xbc>)
 80037d0:	0011      	movs	r1, r2
 80037d2:	0018      	movs	r0, r3
 80037d4:	f002 f964 	bl	8005aa0 <HAL_TIM_Encoder_Init>
 80037d8:	1e03      	subs	r3, r0, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80037dc:	f7ff fe2e 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e0:	003b      	movs	r3, r7
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e6:	003b      	movs	r3, r7
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037ec:	003a      	movs	r2, r7
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <MX_TIM3_Init+0xbc>)
 80037f0:	0011      	movs	r1, r2
 80037f2:	0018      	movs	r0, r3
 80037f4:	f003 f9c2 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 80037f8:	1e03      	subs	r3, r0, #0
 80037fa:	d001      	beq.n	8003800 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80037fc:	f7ff fe1e 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b00d      	add	sp, #52	; 0x34
 8003806:	bd90      	pop	{r4, r7, pc}
 8003808:	200002bc 	.word	0x200002bc
 800380c:	40000400 	.word	0x40000400
 8003810:	0000ffff 	.word	0x0000ffff

08003814 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	0018      	movs	r0, r3
 800381e:	230c      	movs	r3, #12
 8003820:	001a      	movs	r2, r3
 8003822:	2100      	movs	r1, #0
 8003824:	f007 fd12 	bl	800b24c <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003828:	4b15      	ldr	r3, [pc, #84]	; (8003880 <MX_TIM7_Init+0x6c>)
 800382a:	4a16      	ldr	r2, [pc, #88]	; (8003884 <MX_TIM7_Init+0x70>)
 800382c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1600-1;
 800382e:	4b14      	ldr	r3, [pc, #80]	; (8003880 <MX_TIM7_Init+0x6c>)
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <MX_TIM7_Init+0x74>)
 8003832:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <MX_TIM7_Init+0x6c>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 800383a:	4b11      	ldr	r3, [pc, #68]	; (8003880 <MX_TIM7_Init+0x6c>)
 800383c:	4a13      	ldr	r2, [pc, #76]	; (800388c <MX_TIM7_Init+0x78>)
 800383e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <MX_TIM7_Init+0x6c>)
 8003842:	2200      	movs	r2, #0
 8003844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003846:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <MX_TIM7_Init+0x6c>)
 8003848:	0018      	movs	r0, r3
 800384a:	f001 feab 	bl	80055a4 <HAL_TIM_Base_Init>
 800384e:	1e03      	subs	r3, r0, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003852:	f7ff fdf3 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003856:	1d3b      	adds	r3, r7, #4
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003862:	1d3a      	adds	r2, r7, #4
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <MX_TIM7_Init+0x6c>)
 8003866:	0011      	movs	r1, r2
 8003868:	0018      	movs	r0, r3
 800386a:	f003 f987 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 800386e:	1e03      	subs	r3, r0, #0
 8003870:	d001      	beq.n	8003876 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8003872:	f7ff fde3 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b004      	add	sp, #16
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20000308 	.word	0x20000308
 8003884:	40001400 	.word	0x40001400
 8003888:	0000063f 	.word	0x0000063f
 800388c:	0000270f 	.word	0x0000270f

08003890 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	0018      	movs	r0, r3
 800389a:	231c      	movs	r3, #28
 800389c:	001a      	movs	r2, r3
 800389e:	2100      	movs	r1, #0
 80038a0:	f007 fcd4 	bl	800b24c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <MX_TIM14_Init+0x94>)
 80038a6:	4a20      	ldr	r2, [pc, #128]	; (8003928 <MX_TIM14_Init+0x98>)
 80038a8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80038aa:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <MX_TIM14_Init+0x94>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b0:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <MX_TIM14_Init+0x94>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 640-1;
 80038b6:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <MX_TIM14_Init+0x94>)
 80038b8:	4a1c      	ldr	r2, [pc, #112]	; (800392c <MX_TIM14_Init+0x9c>)
 80038ba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <MX_TIM14_Init+0x94>)
 80038be:	2200      	movs	r2, #0
 80038c0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <MX_TIM14_Init+0x94>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80038c8:	4b16      	ldr	r3, [pc, #88]	; (8003924 <MX_TIM14_Init+0x94>)
 80038ca:	0018      	movs	r0, r3
 80038cc:	f001 fe6a 	bl	80055a4 <HAL_TIM_Base_Init>
 80038d0:	1e03      	subs	r3, r0, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80038d4:	f7ff fdb2 	bl	800343c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <MX_TIM14_Init+0x94>)
 80038da:	0018      	movs	r0, r3
 80038dc:	f001 ff10 	bl	8005700 <HAL_TIM_PWM_Init>
 80038e0:	1e03      	subs	r3, r0, #0
 80038e2:	d001      	beq.n	80038e8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80038e4:	f7ff fdaa 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	2260      	movs	r2, #96	; 0x60
 80038ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	2200      	movs	r2, #0
 80038f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038fa:	1d3b      	adds	r3, r7, #4
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003900:	1d39      	adds	r1, r7, #4
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <MX_TIM14_Init+0x94>)
 8003904:	2200      	movs	r2, #0
 8003906:	0018      	movs	r0, r3
 8003908:	f002 fb48 	bl	8005f9c <HAL_TIM_PWM_ConfigChannel>
 800390c:	1e03      	subs	r3, r0, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8003910:	f7ff fd94 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <MX_TIM14_Init+0x94>)
 8003916:	0018      	movs	r0, r3
 8003918:	f000 fad4 	bl	8003ec4 <HAL_TIM_MspPostInit>

}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b008      	add	sp, #32
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000354 	.word	0x20000354
 8003928:	40002000 	.word	0x40002000
 800392c:	0000027f 	.word	0x0000027f

08003930 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b09c      	sub	sp, #112	; 0x70
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003936:	2360      	movs	r3, #96	; 0x60
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	0018      	movs	r0, r3
 800393c:	2310      	movs	r3, #16
 800393e:	001a      	movs	r2, r3
 8003940:	2100      	movs	r1, #0
 8003942:	f007 fc83 	bl	800b24c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003946:	2354      	movs	r3, #84	; 0x54
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	0018      	movs	r0, r3
 800394c:	230c      	movs	r3, #12
 800394e:	001a      	movs	r2, r3
 8003950:	2100      	movs	r1, #0
 8003952:	f007 fc7b 	bl	800b24c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003956:	2338      	movs	r3, #56	; 0x38
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	0018      	movs	r0, r3
 800395c:	231c      	movs	r3, #28
 800395e:	001a      	movs	r2, r3
 8003960:	2100      	movs	r1, #0
 8003962:	f007 fc73 	bl	800b24c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003966:	1d3b      	adds	r3, r7, #4
 8003968:	0018      	movs	r0, r3
 800396a:	2334      	movs	r3, #52	; 0x34
 800396c:	001a      	movs	r2, r3
 800396e:	2100      	movs	r1, #0
 8003970:	f007 fc6c 	bl	800b24c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003974:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <MX_TIM15_Init+0x164>)
 8003976:	4a48      	ldr	r2, [pc, #288]	; (8003a98 <MX_TIM15_Init+0x168>)
 8003978:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800397a:	4b46      	ldr	r3, [pc, #280]	; (8003a94 <MX_TIM15_Init+0x164>)
 800397c:	2200      	movs	r2, #0
 800397e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003980:	4b44      	ldr	r3, [pc, #272]	; (8003a94 <MX_TIM15_Init+0x164>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 640-1;
 8003986:	4b43      	ldr	r3, [pc, #268]	; (8003a94 <MX_TIM15_Init+0x164>)
 8003988:	4a44      	ldr	r2, [pc, #272]	; (8003a9c <MX_TIM15_Init+0x16c>)
 800398a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800398c:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <MX_TIM15_Init+0x164>)
 800398e:	2200      	movs	r2, #0
 8003990:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003992:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <MX_TIM15_Init+0x164>)
 8003994:	2200      	movs	r2, #0
 8003996:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003998:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <MX_TIM15_Init+0x164>)
 800399a:	2200      	movs	r2, #0
 800399c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <MX_TIM15_Init+0x164>)
 80039a0:	0018      	movs	r0, r3
 80039a2:	f001 fdff 	bl	80055a4 <HAL_TIM_Base_Init>
 80039a6:	1e03      	subs	r3, r0, #0
 80039a8:	d001      	beq.n	80039ae <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80039aa:	f7ff fd47 	bl	800343c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ae:	2160      	movs	r1, #96	; 0x60
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	0152      	lsls	r2, r2, #5
 80039b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80039b8:	187a      	adds	r2, r7, r1
 80039ba:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <MX_TIM15_Init+0x164>)
 80039bc:	0011      	movs	r1, r2
 80039be:	0018      	movs	r0, r3
 80039c0:	f002 fbec 	bl	800619c <HAL_TIM_ConfigClockSource>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d001      	beq.n	80039cc <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80039c8:	f7ff fd38 	bl	800343c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80039cc:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <MX_TIM15_Init+0x164>)
 80039ce:	0018      	movs	r0, r3
 80039d0:	f001 fe96 	bl	8005700 <HAL_TIM_PWM_Init>
 80039d4:	1e03      	subs	r3, r0, #0
 80039d6:	d001      	beq.n	80039dc <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80039d8:	f7ff fd30 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039dc:	2154      	movs	r1, #84	; 0x54
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80039ea:	187a      	adds	r2, r7, r1
 80039ec:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <MX_TIM15_Init+0x164>)
 80039ee:	0011      	movs	r1, r2
 80039f0:	0018      	movs	r0, r3
 80039f2:	f003 f8c3 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d001      	beq.n	80039fe <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80039fa:	f7ff fd1f 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039fe:	2138      	movs	r1, #56	; 0x38
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	2260      	movs	r2, #96	; 0x60
 8003a04:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	2200      	movs	r2, #0
 8003a0a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a0c:	187b      	adds	r3, r7, r1
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a12:	187b      	adds	r3, r7, r1
 8003a14:	2200      	movs	r2, #0
 8003a16:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a1e:	187b      	adds	r3, r7, r1
 8003a20:	2200      	movs	r2, #0
 8003a22:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a24:	187b      	adds	r3, r7, r1
 8003a26:	2200      	movs	r2, #0
 8003a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a2a:	1879      	adds	r1, r7, r1
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <MX_TIM15_Init+0x164>)
 8003a2e:	2204      	movs	r2, #4
 8003a30:	0018      	movs	r0, r3
 8003a32:	f002 fab3 	bl	8005f9c <HAL_TIM_PWM_ConfigChannel>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d001      	beq.n	8003a3e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8003a3a:	f7ff fcff 	bl	800343c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a3e:	1d3b      	adds	r3, r7, #4
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	2200      	movs	r2, #0
 8003a54:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	2200      	movs	r2, #0
 8003a5a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	2280      	movs	r2, #128	; 0x80
 8003a60:	0192      	lsls	r2, r2, #6
 8003a62:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a64:	1d3b      	adds	r3, r7, #4
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a6a:	1d3b      	adds	r3, r7, #4
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003a70:	1d3a      	adds	r2, r7, #4
 8003a72:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <MX_TIM15_Init+0x164>)
 8003a74:	0011      	movs	r1, r2
 8003a76:	0018      	movs	r0, r3
 8003a78:	f003 f8e8 	bl	8006c4c <HAL_TIMEx_ConfigBreakDeadTime>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 8003a80:	f7ff fcdc 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <MX_TIM15_Init+0x164>)
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 fa1c 	bl	8003ec4 <HAL_TIM_MspPostInit>

}
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b01c      	add	sp, #112	; 0x70
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	200003a0 	.word	0x200003a0
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	0000027f 	.word	0x0000027f

08003aa0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b094      	sub	sp, #80	; 0x50
 8003aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aa6:	2334      	movs	r3, #52	; 0x34
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	0018      	movs	r0, r3
 8003aac:	231c      	movs	r3, #28
 8003aae:	001a      	movs	r2, r3
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	f007 fbcb 	bl	800b24c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ab6:	003b      	movs	r3, r7
 8003ab8:	0018      	movs	r0, r3
 8003aba:	2334      	movs	r3, #52	; 0x34
 8003abc:	001a      	movs	r2, r3
 8003abe:	2100      	movs	r1, #0
 8003ac0:	f007 fbc4 	bl	800b24c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003ac4:	4b37      	ldr	r3, [pc, #220]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003ac6:	4a38      	ldr	r2, [pc, #224]	; (8003ba8 <MX_TIM16_Init+0x108>)
 8003ac8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8003aca:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad0:	4b34      	ldr	r3, [pc, #208]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 640-1;
 8003ad6:	4b33      	ldr	r3, [pc, #204]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003ad8:	4a34      	ldr	r2, [pc, #208]	; (8003bac <MX_TIM16_Init+0x10c>)
 8003ada:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003adc:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003ae2:	4b30      	ldr	r3, [pc, #192]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae8:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003aee:	4b2d      	ldr	r3, [pc, #180]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003af0:	0018      	movs	r0, r3
 8003af2:	f001 fd57 	bl	80055a4 <HAL_TIM_Base_Init>
 8003af6:	1e03      	subs	r3, r0, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003afa:	f7ff fc9f 	bl	800343c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003afe:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003b00:	0018      	movs	r0, r3
 8003b02:	f001 fdfd 	bl	8005700 <HAL_TIM_PWM_Init>
 8003b06:	1e03      	subs	r3, r0, #0
 8003b08:	d001      	beq.n	8003b0e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003b0a:	f7ff fc97 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b0e:	2134      	movs	r1, #52	; 0x34
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	2260      	movs	r2, #96	; 0x60
 8003b14:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003b16:	187b      	adds	r3, r7, r1
 8003b18:	2200      	movs	r2, #0
 8003b1a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	2200      	movs	r2, #0
 8003b20:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	2200      	movs	r2, #0
 8003b26:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b2e:	187b      	adds	r3, r7, r1
 8003b30:	2200      	movs	r2, #0
 8003b32:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	2200      	movs	r2, #0
 8003b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b3a:	1879      	adds	r1, r7, r1
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	0018      	movs	r0, r3
 8003b42:	f002 fa2b 	bl	8005f9c <HAL_TIM_PWM_ConfigChannel>
 8003b46:	1e03      	subs	r3, r0, #0
 8003b48:	d001      	beq.n	8003b4e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8003b4a:	f7ff fc77 	bl	800343c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b4e:	003b      	movs	r3, r7
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b54:	003b      	movs	r3, r7
 8003b56:	2200      	movs	r2, #0
 8003b58:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b5a:	003b      	movs	r3, r7
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b60:	003b      	movs	r3, r7
 8003b62:	2200      	movs	r2, #0
 8003b64:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b66:	003b      	movs	r3, r7
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b6c:	003b      	movs	r3, r7
 8003b6e:	2280      	movs	r2, #128	; 0x80
 8003b70:	0192      	lsls	r2, r2, #6
 8003b72:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b74:	003b      	movs	r3, r7
 8003b76:	2200      	movs	r2, #0
 8003b78:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b7a:	003b      	movs	r3, r7
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003b80:	003a      	movs	r2, r7
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003b84:	0011      	movs	r1, r2
 8003b86:	0018      	movs	r0, r3
 8003b88:	f003 f860 	bl	8006c4c <HAL_TIMEx_ConfigBreakDeadTime>
 8003b8c:	1e03      	subs	r3, r0, #0
 8003b8e:	d001      	beq.n	8003b94 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8003b90:	f7ff fc54 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <MX_TIM16_Init+0x104>)
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 f994 	bl	8003ec4 <HAL_TIM_MspPostInit>

}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b014      	add	sp, #80	; 0x50
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	200003ec 	.word	0x200003ec
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	0000027f 	.word	0x0000027f

08003bb0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b094      	sub	sp, #80	; 0x50
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bb6:	2334      	movs	r3, #52	; 0x34
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	0018      	movs	r0, r3
 8003bbc:	231c      	movs	r3, #28
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	f007 fb43 	bl	800b24c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bc6:	003b      	movs	r3, r7
 8003bc8:	0018      	movs	r0, r3
 8003bca:	2334      	movs	r3, #52	; 0x34
 8003bcc:	001a      	movs	r2, r3
 8003bce:	2100      	movs	r1, #0
 8003bd0:	f007 fb3c 	bl	800b24c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003bd4:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003bd6:	4a38      	ldr	r2, [pc, #224]	; (8003cb8 <MX_TIM17_Init+0x108>)
 8003bd8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8003bda:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be0:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 640-1;
 8003be6:	4b33      	ldr	r3, [pc, #204]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003be8:	4a34      	ldr	r2, [pc, #208]	; (8003cbc <MX_TIM17_Init+0x10c>)
 8003bea:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bec:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003bf2:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf8:	4b2e      	ldr	r3, [pc, #184]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003bfe:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003c00:	0018      	movs	r0, r3
 8003c02:	f001 fccf 	bl	80055a4 <HAL_TIM_Base_Init>
 8003c06:	1e03      	subs	r3, r0, #0
 8003c08:	d001      	beq.n	8003c0e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003c0a:	f7ff fc17 	bl	800343c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003c0e:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003c10:	0018      	movs	r0, r3
 8003c12:	f001 fd75 	bl	8005700 <HAL_TIM_PWM_Init>
 8003c16:	1e03      	subs	r3, r0, #0
 8003c18:	d001      	beq.n	8003c1e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8003c1a:	f7ff fc0f 	bl	800343c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c1e:	2134      	movs	r1, #52	; 0x34
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2260      	movs	r2, #96	; 0x60
 8003c24:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	2200      	movs	r2, #0
 8003c2a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	2200      	movs	r2, #0
 8003c36:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c3e:	187b      	adds	r3, r7, r1
 8003c40:	2200      	movs	r2, #0
 8003c42:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c44:	187b      	adds	r3, r7, r1
 8003c46:	2200      	movs	r2, #0
 8003c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c4a:	1879      	adds	r1, r7, r1
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	0018      	movs	r0, r3
 8003c52:	f002 f9a3 	bl	8005f9c <HAL_TIM_PWM_ConfigChannel>
 8003c56:	1e03      	subs	r3, r0, #0
 8003c58:	d001      	beq.n	8003c5e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003c5a:	f7ff fbef 	bl	800343c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c5e:	003b      	movs	r3, r7
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c64:	003b      	movs	r3, r7
 8003c66:	2200      	movs	r2, #0
 8003c68:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c6a:	003b      	movs	r3, r7
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c70:	003b      	movs	r3, r7
 8003c72:	2200      	movs	r2, #0
 8003c74:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c76:	003b      	movs	r3, r7
 8003c78:	2200      	movs	r2, #0
 8003c7a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c7c:	003b      	movs	r3, r7
 8003c7e:	2280      	movs	r2, #128	; 0x80
 8003c80:	0192      	lsls	r2, r2, #6
 8003c82:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003c84:	003b      	movs	r3, r7
 8003c86:	2200      	movs	r2, #0
 8003c88:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c8a:	003b      	movs	r3, r7
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003c90:	003a      	movs	r2, r7
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003c94:	0011      	movs	r1, r2
 8003c96:	0018      	movs	r0, r3
 8003c98:	f002 ffd8 	bl	8006c4c <HAL_TIMEx_ConfigBreakDeadTime>
 8003c9c:	1e03      	subs	r3, r0, #0
 8003c9e:	d001      	beq.n	8003ca4 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8003ca0:	f7ff fbcc 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <MX_TIM17_Init+0x104>)
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 f90c 	bl	8003ec4 <HAL_TIM_MspPostInit>

}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b014      	add	sp, #80	; 0x50
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000438 	.word	0x20000438
 8003cb8:	40014800 	.word	0x40014800
 8003cbc:	0000027f 	.word	0x0000027f

08003cc0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b08d      	sub	sp, #52	; 0x34
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	241c      	movs	r4, #28
 8003cca:	193b      	adds	r3, r7, r4
 8003ccc:	0018      	movs	r0, r3
 8003cce:	2314      	movs	r3, #20
 8003cd0:	001a      	movs	r2, r3
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f007 faba 	bl	800b24c <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a36      	ldr	r2, [pc, #216]	; (8003db8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d132      	bne.n	8003d48 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ce6:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	0109      	lsls	r1, r1, #4
 8003cec:	430a      	orrs	r2, r1
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
 8003cf0:	4b32      	ldr	r3, [pc, #200]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfe:	4b2f      	ldr	r3, [pc, #188]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d02:	4b2e      	ldr	r3, [pc, #184]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003d04:	2101      	movs	r1, #1
 8003d06:	430a      	orrs	r2, r1
 8003d08:	635a      	str	r2, [r3, #52]	; 0x34
 8003d0a:	4b2c      	ldr	r3, [pc, #176]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	2201      	movs	r2, #1
 8003d10:	4013      	ands	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d16:	193b      	adds	r3, r7, r4
 8003d18:	22c0      	movs	r2, #192	; 0xc0
 8003d1a:	0092      	lsls	r2, r2, #2
 8003d1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1e:	0021      	movs	r1, r4
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	2202      	movs	r2, #2
 8003d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	2200      	movs	r2, #0
 8003d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	2202      	movs	r2, #2
 8003d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d38:	187a      	adds	r2, r7, r1
 8003d3a:	23a0      	movs	r3, #160	; 0xa0
 8003d3c:	05db      	lsls	r3, r3, #23
 8003d3e:	0011      	movs	r1, r2
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 fc91 	bl	8004668 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003d46:	e032      	b.n	8003dae <HAL_TIM_Encoder_MspInit+0xee>
  else if(tim_encoderHandle->Instance==TIM3)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1c      	ldr	r2, [pc, #112]	; (8003dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d12d      	bne.n	8003dae <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d52:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d56:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003d58:	2102      	movs	r1, #2
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d5e:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	2202      	movs	r2, #2
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003d70:	2102      	movs	r1, #2
 8003d72:	430a      	orrs	r2, r1
 8003d74:	635a      	str	r2, [r3, #52]	; 0x34
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d82:	211c      	movs	r1, #28
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	2230      	movs	r2, #48	; 0x30
 8003d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8a:	187b      	adds	r3, r7, r1
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	2200      	movs	r2, #0
 8003d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	2201      	movs	r2, #1
 8003da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da2:	187b      	adds	r3, r7, r1
 8003da4:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <HAL_TIM_Encoder_MspInit+0x104>)
 8003da6:	0019      	movs	r1, r3
 8003da8:	0010      	movs	r0, r2
 8003daa:	f000 fc5d 	bl	8004668 <HAL_GPIO_Init>
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b00d      	add	sp, #52	; 0x34
 8003db4:	bd90      	pop	{r4, r7, pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	40012c00 	.word	0x40012c00
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	50000400 	.word	0x50000400

08003dc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a35      	ldr	r2, [pc, #212]	; (8003eac <HAL_TIM_Base_MspInit+0xe4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d114      	bne.n	8003e04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003dda:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dde:	4b34      	ldr	r3, [pc, #208]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003de0:	2120      	movs	r1, #32
 8003de2:	430a      	orrs	r2, r1
 8003de4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003de6:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	2220      	movs	r2, #32
 8003dec:	4013      	ands	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	69fb      	ldr	r3, [r7, #28]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003df2:	2200      	movs	r2, #0
 8003df4:	2100      	movs	r1, #0
 8003df6:	2012      	movs	r0, #18
 8003df8:	f000 fb38 	bl	800446c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003dfc:	2012      	movs	r0, #18
 8003dfe:	f000 fb4a 	bl	8004496 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003e02:	e04e      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM14)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <HAL_TIM_Base_MspInit+0xec>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d10e      	bne.n	8003e2c <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003e0e:	4b28      	ldr	r3, [pc, #160]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e12:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e14:	2180      	movs	r1, #128	; 0x80
 8003e16:	0209      	lsls	r1, r1, #8
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e1c:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	69bb      	ldr	r3, [r7, #24]
}
 8003e2a:	e03a      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM15)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <HAL_TIM_Base_MspInit+0xf0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10e      	bne.n	8003e54 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003e36:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	0249      	lsls	r1, r1, #9
 8003e40:	430a      	orrs	r2, r1
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	025b      	lsls	r3, r3, #9
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]
}
 8003e52:	e026      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM16)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_TIM_Base_MspInit+0xf4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d10e      	bne.n	8003e7c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003e5e:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	0289      	lsls	r1, r1, #10
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	029b      	lsls	r3, r3, #10
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]
}
 8003e7a:	e012      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM17)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <HAL_TIM_Base_MspInit+0xf8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10d      	bne.n	8003ea2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e8c:	2180      	movs	r1, #128	; 0x80
 8003e8e:	02c9      	lsls	r1, r1, #11
 8003e90:	430a      	orrs	r2, r1
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_TIM_Base_MspInit+0xe8>)
 8003e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	02db      	lsls	r3, r3, #11
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b008      	add	sp, #32
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	40001400 	.word	0x40001400
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40002000 	.word	0x40002000
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40014400 	.word	0x40014400
 8003ec0:	40014800 	.word	0x40014800

08003ec4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b08d      	sub	sp, #52	; 0x34
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	241c      	movs	r4, #28
 8003ece:	193b      	adds	r3, r7, r4
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	2314      	movs	r3, #20
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f007 f9b8 	bl	800b24c <memset>
  if(timHandle->Instance==TIM14)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_TIM_MspPostInit+0x168>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d123      	bne.n	8003f2e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee6:	4b52      	ldr	r3, [pc, #328]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eea:	4b51      	ldr	r3, [pc, #324]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003eec:	2104      	movs	r1, #4
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ef2:	4b4f      	ldr	r3, [pc, #316]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003efe:	193b      	adds	r3, r7, r4
 8003f00:	2280      	movs	r2, #128	; 0x80
 8003f02:	0152      	lsls	r2, r2, #5
 8003f04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f06:	0021      	movs	r1, r4
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0e:	187b      	adds	r3, r7, r1
 8003f10:	2200      	movs	r2, #0
 8003f12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	2200      	movs	r2, #0
 8003f18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	4a44      	ldr	r2, [pc, #272]	; (8004034 <HAL_TIM_MspPostInit+0x170>)
 8003f24:	0019      	movs	r1, r3
 8003f26:	0010      	movs	r0, r2
 8003f28:	f000 fb9e 	bl	8004668 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003f2c:	e079      	b.n	8004022 <HAL_TIM_MspPostInit+0x15e>
  else if(timHandle->Instance==TIM15)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a41      	ldr	r2, [pc, #260]	; (8004038 <HAL_TIM_MspPostInit+0x174>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d123      	bne.n	8003f80 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f38:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	4b3c      	ldr	r3, [pc, #240]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003f3e:	2102      	movs	r1, #2
 8003f40:	430a      	orrs	r2, r1
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34
 8003f44:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	2202      	movs	r2, #2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003f50:	211c      	movs	r1, #28
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	2280      	movs	r2, #128	; 0x80
 8003f56:	0212      	lsls	r2, r2, #8
 8003f58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f66:	187b      	adds	r3, r7, r1
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8003f6c:	187b      	adds	r3, r7, r1
 8003f6e:	2205      	movs	r2, #5
 8003f70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	4a31      	ldr	r2, [pc, #196]	; (800403c <HAL_TIM_MspPostInit+0x178>)
 8003f76:	0019      	movs	r1, r3
 8003f78:	0010      	movs	r0, r2
 8003f7a:	f000 fb75 	bl	8004668 <HAL_GPIO_Init>
}
 8003f7e:	e050      	b.n	8004022 <HAL_TIM_MspPostInit+0x15e>
  else if(timHandle->Instance==TIM16)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2e      	ldr	r2, [pc, #184]	; (8004040 <HAL_TIM_MspPostInit+0x17c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d123      	bne.n	8003fd2 <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8a:	4b29      	ldr	r3, [pc, #164]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f8e:	4b28      	ldr	r3, [pc, #160]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003f90:	2102      	movs	r1, #2
 8003f92:	430a      	orrs	r2, r1
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fa2:	211c      	movs	r1, #28
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	2280      	movs	r2, #128	; 0x80
 8003fa8:	0052      	lsls	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	2202      	movs	r2, #2
 8003fb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb8:	187b      	adds	r3, r7, r1
 8003fba:	2200      	movs	r2, #0
 8003fbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8003fbe:	187b      	adds	r3, r7, r1
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc4:	187b      	adds	r3, r7, r1
 8003fc6:	4a1d      	ldr	r2, [pc, #116]	; (800403c <HAL_TIM_MspPostInit+0x178>)
 8003fc8:	0019      	movs	r1, r3
 8003fca:	0010      	movs	r0, r2
 8003fcc:	f000 fb4c 	bl	8004668 <HAL_GPIO_Init>
}
 8003fd0:	e027      	b.n	8004022 <HAL_TIM_MspPostInit+0x15e>
  else if(timHandle->Instance==TIM17)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <HAL_TIM_MspPostInit+0x180>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d122      	bne.n	8004022 <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fdc:	4b14      	ldr	r3, [pc, #80]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	635a      	str	r2, [r3, #52]	; 0x34
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <HAL_TIM_MspPostInit+0x16c>)
 8003fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fec:	2202      	movs	r2, #2
 8003fee:	4013      	ands	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ff4:	211c      	movs	r1, #28
 8003ff6:	187b      	adds	r3, r7, r1
 8003ff8:	2280      	movs	r2, #128	; 0x80
 8003ffa:	0092      	lsls	r2, r2, #2
 8003ffc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	2202      	movs	r2, #2
 8004002:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004004:	187b      	adds	r3, r7, r1
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400a:	187b      	adds	r3, r7, r1
 800400c:	2200      	movs	r2, #0
 800400e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8004010:	187b      	adds	r3, r7, r1
 8004012:	2202      	movs	r2, #2
 8004014:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004016:	187b      	adds	r3, r7, r1
 8004018:	4a08      	ldr	r2, [pc, #32]	; (800403c <HAL_TIM_MspPostInit+0x178>)
 800401a:	0019      	movs	r1, r3
 800401c:	0010      	movs	r0, r2
 800401e:	f000 fb23 	bl	8004668 <HAL_GPIO_Init>
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b00d      	add	sp, #52	; 0x34
 8004028:	bd90      	pop	{r4, r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	40002000 	.word	0x40002000
 8004030:	40021000 	.word	0x40021000
 8004034:	50000800 	.word	0x50000800
 8004038:	40014000 	.word	0x40014000
 800403c:	50000400 	.word	0x50000400
 8004040:	40014400 	.word	0x40014400
 8004044:	40014800 	.word	0x40014800

08004048 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800404c:	4b23      	ldr	r3, [pc, #140]	; (80040dc <MX_USART2_UART_Init+0x94>)
 800404e:	4a24      	ldr	r2, [pc, #144]	; (80040e0 <MX_USART2_UART_Init+0x98>)
 8004050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004054:	22e1      	movs	r2, #225	; 0xe1
 8004056:	0252      	lsls	r2, r2, #9
 8004058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <MX_USART2_UART_Init+0x94>)
 800405c:	2200      	movs	r2, #0
 800405e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004060:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004062:	2200      	movs	r2, #0
 8004064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004066:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004068:	2200      	movs	r2, #0
 800406a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800406c:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <MX_USART2_UART_Init+0x94>)
 800406e:	220c      	movs	r2, #12
 8004070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004074:	2200      	movs	r2, #0
 8004076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <MX_USART2_UART_Init+0x94>)
 800407a:	2200      	movs	r2, #0
 800407c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800407e:	4b17      	ldr	r3, [pc, #92]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004080:	2200      	movs	r2, #0
 8004082:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004086:	2200      	movs	r2, #0
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <MX_USART2_UART_Init+0x94>)
 800408c:	2200      	movs	r2, #0
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <MX_USART2_UART_Init+0x94>)
 8004092:	0018      	movs	r0, r3
 8004094:	f002 fe98 	bl	8006dc8 <HAL_UART_Init>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d001      	beq.n	80040a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800409c:	f7ff f9ce 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040a0:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <MX_USART2_UART_Init+0x94>)
 80040a2:	2100      	movs	r1, #0
 80040a4:	0018      	movs	r0, r3
 80040a6:	f004 fd09 	bl	8008abc <HAL_UARTEx_SetTxFifoThreshold>
 80040aa:	1e03      	subs	r3, r0, #0
 80040ac:	d001      	beq.n	80040b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80040ae:	f7ff f9c5 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <MX_USART2_UART_Init+0x94>)
 80040b4:	2100      	movs	r1, #0
 80040b6:	0018      	movs	r0, r3
 80040b8:	f004 fd40 	bl	8008b3c <HAL_UARTEx_SetRxFifoThreshold>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d001      	beq.n	80040c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80040c0:	f7ff f9bc 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <MX_USART2_UART_Init+0x94>)
 80040c6:	0018      	movs	r0, r3
 80040c8:	f004 fcbe 	bl	8008a48 <HAL_UARTEx_DisableFifoMode>
 80040cc:	1e03      	subs	r3, r0, #0
 80040ce:	d001      	beq.n	80040d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80040d0:	f7ff f9b4 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	20000484 	.word	0x20000484
 80040e0:	40004400 	.word	0x40004400

080040e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b091      	sub	sp, #68	; 0x44
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ec:	232c      	movs	r3, #44	; 0x2c
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	0018      	movs	r0, r3
 80040f2:	2314      	movs	r3, #20
 80040f4:	001a      	movs	r2, r3
 80040f6:	2100      	movs	r1, #0
 80040f8:	f007 f8a8 	bl	800b24c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040fc:	2410      	movs	r4, #16
 80040fe:	193b      	adds	r3, r7, r4
 8004100:	0018      	movs	r0, r3
 8004102:	231c      	movs	r3, #28
 8004104:	001a      	movs	r2, r3
 8004106:	2100      	movs	r1, #0
 8004108:	f007 f8a0 	bl	800b24c <memset>
  if(uartHandle->Instance==USART2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a26      	ldr	r2, [pc, #152]	; (80041ac <HAL_UART_MspInit+0xc8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d146      	bne.n	80041a4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004116:	193b      	adds	r3, r7, r4
 8004118:	2202      	movs	r2, #2
 800411a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800411c:	193b      	adds	r3, r7, r4
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004122:	193b      	adds	r3, r7, r4
 8004124:	0018      	movs	r0, r3
 8004126:	f001 f909 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 800412a:	1e03      	subs	r3, r0, #0
 800412c:	d001      	beq.n	8004132 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800412e:	f7ff f985 	bl	800343c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004132:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <HAL_UART_MspInit+0xcc>)
 8004134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004136:	4b1e      	ldr	r3, [pc, #120]	; (80041b0 <HAL_UART_MspInit+0xcc>)
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	0289      	lsls	r1, r1, #10
 800413c:	430a      	orrs	r2, r1
 800413e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_UART_MspInit+0xcc>)
 8004142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	029b      	lsls	r3, r3, #10
 8004148:	4013      	ands	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800414e:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <HAL_UART_MspInit+0xcc>)
 8004150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004152:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <HAL_UART_MspInit+0xcc>)
 8004154:	2101      	movs	r1, #1
 8004156:	430a      	orrs	r2, r1
 8004158:	635a      	str	r2, [r3, #52]	; 0x34
 800415a:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <HAL_UART_MspInit+0xcc>)
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415e:	2201      	movs	r2, #1
 8004160:	4013      	ands	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004166:	212c      	movs	r1, #44	; 0x2c
 8004168:	187b      	adds	r3, r7, r1
 800416a:	220c      	movs	r2, #12
 800416c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416e:	187b      	adds	r3, r7, r1
 8004170:	2202      	movs	r2, #2
 8004172:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	187b      	adds	r3, r7, r1
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417a:	187b      	adds	r3, r7, r1
 800417c:	2200      	movs	r2, #0
 800417e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004180:	187b      	adds	r3, r7, r1
 8004182:	2201      	movs	r2, #1
 8004184:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004186:	187a      	adds	r2, r7, r1
 8004188:	23a0      	movs	r3, #160	; 0xa0
 800418a:	05db      	lsls	r3, r3, #23
 800418c:	0011      	movs	r1, r2
 800418e:	0018      	movs	r0, r3
 8004190:	f000 fa6a 	bl	8004668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004194:	2200      	movs	r2, #0
 8004196:	2100      	movs	r1, #0
 8004198:	201c      	movs	r0, #28
 800419a:	f000 f967 	bl	800446c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800419e:	201c      	movs	r0, #28
 80041a0:	f000 f979 	bl	8004496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b011      	add	sp, #68	; 0x44
 80041aa:	bd90      	pop	{r4, r7, pc}
 80041ac:	40004400 	.word	0x40004400
 80041b0:	40021000 	.word	0x40021000

080041b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80041b4:	480d      	ldr	r0, [pc, #52]	; (80041ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80041b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80041b8:	f7ff fa58 	bl	800366c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041bc:	480c      	ldr	r0, [pc, #48]	; (80041f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80041be:	490d      	ldr	r1, [pc, #52]	; (80041f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80041c0:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <LoopForever+0xe>)
  movs r3, #0
 80041c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041c4:	e002      	b.n	80041cc <LoopCopyDataInit>

080041c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ca:	3304      	adds	r3, #4

080041cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041d0:	d3f9      	bcc.n	80041c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80041d4:	4c0a      	ldr	r4, [pc, #40]	; (8004200 <LoopForever+0x16>)
  movs r3, #0
 80041d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041d8:	e001      	b.n	80041de <LoopFillZerobss>

080041da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041dc:	3204      	adds	r2, #4

080041de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041e0:	d3fb      	bcc.n	80041da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80041e2:	f007 f909 	bl	800b3f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80041e6:	f7ff f8a3 	bl	8003330 <main>

080041ea <LoopForever>:

LoopForever:
  b LoopForever
 80041ea:	e7fe      	b.n	80041ea <LoopForever>
  ldr   r0, =_estack
 80041ec:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80041f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041f4:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80041f8:	0800e5c0 	.word	0x0800e5c0
  ldr r2, =_sbss
 80041fc:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004200:	200007c4 	.word	0x200007c4

08004204 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004204:	e7fe      	b.n	8004204 <ADC1_IRQHandler>
	...

08004208 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800420e:	1dfb      	adds	r3, r7, #7
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_Init+0x3c>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <HAL_Init+0x3c>)
 800421a:	2180      	movs	r1, #128	; 0x80
 800421c:	0049      	lsls	r1, r1, #1
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004222:	2003      	movs	r0, #3
 8004224:	f000 f810 	bl	8004248 <HAL_InitTick>
 8004228:	1e03      	subs	r3, r0, #0
 800422a:	d003      	beq.n	8004234 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	e001      	b.n	8004238 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004234:	f7ff f908 	bl	8003448 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004238:	1dfb      	adds	r3, r7, #7
 800423a:	781b      	ldrb	r3, [r3, #0]
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b002      	add	sp, #8
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40022000 	.word	0x40022000

08004248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004250:	230f      	movs	r3, #15
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <HAL_InitTick+0x88>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d02b      	beq.n	80042b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004260:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <HAL_InitTick+0x8c>)
 8004262:	681c      	ldr	r4, [r3, #0]
 8004264:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <HAL_InitTick+0x88>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	0019      	movs	r1, r3
 800426a:	23fa      	movs	r3, #250	; 0xfa
 800426c:	0098      	lsls	r0, r3, #2
 800426e:	f7fb ff6d 	bl	800014c <__udivsi3>
 8004272:	0003      	movs	r3, r0
 8004274:	0019      	movs	r1, r3
 8004276:	0020      	movs	r0, r4
 8004278:	f7fb ff68 	bl	800014c <__udivsi3>
 800427c:	0003      	movs	r3, r0
 800427e:	0018      	movs	r0, r3
 8004280:	f000 f919 	bl	80044b6 <HAL_SYSTICK_Config>
 8004284:	1e03      	subs	r3, r0, #0
 8004286:	d112      	bne.n	80042ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b03      	cmp	r3, #3
 800428c:	d80a      	bhi.n	80042a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	2301      	movs	r3, #1
 8004292:	425b      	negs	r3, r3
 8004294:	2200      	movs	r2, #0
 8004296:	0018      	movs	r0, r3
 8004298:	f000 f8e8 	bl	800446c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <HAL_InitTick+0x90>)
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e00d      	b.n	80042c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80042a4:	230f      	movs	r3, #15
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	e008      	b.n	80042c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80042ae:	230f      	movs	r3, #15
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e003      	b.n	80042c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80042b8:	230f      	movs	r3, #15
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80042c0:	230f      	movs	r3, #15
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	781b      	ldrb	r3, [r3, #0]
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b005      	add	sp, #20
 80042cc:	bd90      	pop	{r4, r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	20000008 	.word	0x20000008
 80042d4:	20000000 	.word	0x20000000
 80042d8:	20000004 	.word	0x20000004

080042dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_IncTick+0x1c>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	001a      	movs	r2, r3
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_IncTick+0x20>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	18d2      	adds	r2, r2, r3
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_IncTick+0x20>)
 80042ee:	601a      	str	r2, [r3, #0]
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	20000008 	.word	0x20000008
 80042fc:	20000518 	.word	0x20000518

08004300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  return uwTick;
 8004304:	4b02      	ldr	r3, [pc, #8]	; (8004310 <HAL_GetTick+0x10>)
 8004306:	681b      	ldr	r3, [r3, #0]
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	20000518 	.word	0x20000518

08004314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	0002      	movs	r2, r0
 800431c:	1dfb      	adds	r3, r7, #7
 800431e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004320:	1dfb      	adds	r3, r7, #7
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b7f      	cmp	r3, #127	; 0x7f
 8004326:	d809      	bhi.n	800433c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004328:	1dfb      	adds	r3, r7, #7
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	001a      	movs	r2, r3
 800432e:	231f      	movs	r3, #31
 8004330:	401a      	ands	r2, r3
 8004332:	4b04      	ldr	r3, [pc, #16]	; (8004344 <__NVIC_EnableIRQ+0x30>)
 8004334:	2101      	movs	r1, #1
 8004336:	4091      	lsls	r1, r2
 8004338:	000a      	movs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b002      	add	sp, #8
 8004342:	bd80      	pop	{r7, pc}
 8004344:	e000e100 	.word	0xe000e100

08004348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	0002      	movs	r2, r0
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	1dfb      	adds	r3, r7, #7
 8004354:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004356:	1dfb      	adds	r3, r7, #7
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b7f      	cmp	r3, #127	; 0x7f
 800435c:	d828      	bhi.n	80043b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800435e:	4a2f      	ldr	r2, [pc, #188]	; (800441c <__NVIC_SetPriority+0xd4>)
 8004360:	1dfb      	adds	r3, r7, #7
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b25b      	sxtb	r3, r3
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	33c0      	adds	r3, #192	; 0xc0
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	589b      	ldr	r3, [r3, r2]
 800436e:	1dfa      	adds	r2, r7, #7
 8004370:	7812      	ldrb	r2, [r2, #0]
 8004372:	0011      	movs	r1, r2
 8004374:	2203      	movs	r2, #3
 8004376:	400a      	ands	r2, r1
 8004378:	00d2      	lsls	r2, r2, #3
 800437a:	21ff      	movs	r1, #255	; 0xff
 800437c:	4091      	lsls	r1, r2
 800437e:	000a      	movs	r2, r1
 8004380:	43d2      	mvns	r2, r2
 8004382:	401a      	ands	r2, r3
 8004384:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	019b      	lsls	r3, r3, #6
 800438a:	22ff      	movs	r2, #255	; 0xff
 800438c:	401a      	ands	r2, r3
 800438e:	1dfb      	adds	r3, r7, #7
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	0018      	movs	r0, r3
 8004394:	2303      	movs	r3, #3
 8004396:	4003      	ands	r3, r0
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800439c:	481f      	ldr	r0, [pc, #124]	; (800441c <__NVIC_SetPriority+0xd4>)
 800439e:	1dfb      	adds	r3, r7, #7
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	b25b      	sxtb	r3, r3
 80043a4:	089b      	lsrs	r3, r3, #2
 80043a6:	430a      	orrs	r2, r1
 80043a8:	33c0      	adds	r3, #192	; 0xc0
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80043ae:	e031      	b.n	8004414 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <__NVIC_SetPriority+0xd8>)
 80043b2:	1dfb      	adds	r3, r7, #7
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	0019      	movs	r1, r3
 80043b8:	230f      	movs	r3, #15
 80043ba:	400b      	ands	r3, r1
 80043bc:	3b08      	subs	r3, #8
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	3306      	adds	r3, #6
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	3304      	adds	r3, #4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1dfa      	adds	r2, r7, #7
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	0011      	movs	r1, r2
 80043d0:	2203      	movs	r2, #3
 80043d2:	400a      	ands	r2, r1
 80043d4:	00d2      	lsls	r2, r2, #3
 80043d6:	21ff      	movs	r1, #255	; 0xff
 80043d8:	4091      	lsls	r1, r2
 80043da:	000a      	movs	r2, r1
 80043dc:	43d2      	mvns	r2, r2
 80043de:	401a      	ands	r2, r3
 80043e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	019b      	lsls	r3, r3, #6
 80043e6:	22ff      	movs	r2, #255	; 0xff
 80043e8:	401a      	ands	r2, r3
 80043ea:	1dfb      	adds	r3, r7, #7
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	0018      	movs	r0, r3
 80043f0:	2303      	movs	r3, #3
 80043f2:	4003      	ands	r3, r0
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043f8:	4809      	ldr	r0, [pc, #36]	; (8004420 <__NVIC_SetPriority+0xd8>)
 80043fa:	1dfb      	adds	r3, r7, #7
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	001c      	movs	r4, r3
 8004400:	230f      	movs	r3, #15
 8004402:	4023      	ands	r3, r4
 8004404:	3b08      	subs	r3, #8
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	430a      	orrs	r2, r1
 800440a:	3306      	adds	r3, #6
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	18c3      	adds	r3, r0, r3
 8004410:	3304      	adds	r3, #4
 8004412:	601a      	str	r2, [r3, #0]
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	b003      	add	sp, #12
 800441a:	bd90      	pop	{r4, r7, pc}
 800441c:	e000e100 	.word	0xe000e100
 8004420:	e000ed00 	.word	0xe000ed00

08004424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1e5a      	subs	r2, r3, #1
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	045b      	lsls	r3, r3, #17
 8004434:	429a      	cmp	r2, r3
 8004436:	d301      	bcc.n	800443c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004438:	2301      	movs	r3, #1
 800443a:	e010      	b.n	800445e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <SysTick_Config+0x44>)
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	3a01      	subs	r2, #1
 8004442:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004444:	2301      	movs	r3, #1
 8004446:	425b      	negs	r3, r3
 8004448:	2103      	movs	r1, #3
 800444a:	0018      	movs	r0, r3
 800444c:	f7ff ff7c 	bl	8004348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <SysTick_Config+0x44>)
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004456:	4b04      	ldr	r3, [pc, #16]	; (8004468 <SysTick_Config+0x44>)
 8004458:	2207      	movs	r2, #7
 800445a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800445c:	2300      	movs	r3, #0
}
 800445e:	0018      	movs	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	b002      	add	sp, #8
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	e000e010 	.word	0xe000e010

0800446c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	210f      	movs	r1, #15
 8004478:	187b      	adds	r3, r7, r1
 800447a:	1c02      	adds	r2, r0, #0
 800447c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	187b      	adds	r3, r7, r1
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b25b      	sxtb	r3, r3
 8004486:	0011      	movs	r1, r2
 8004488:	0018      	movs	r0, r3
 800448a:	f7ff ff5d 	bl	8004348 <__NVIC_SetPriority>
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	46bd      	mov	sp, r7
 8004492:	b004      	add	sp, #16
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	0002      	movs	r2, r0
 800449e:	1dfb      	adds	r3, r7, #7
 80044a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a2:	1dfb      	adds	r3, r7, #7
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b25b      	sxtb	r3, r3
 80044a8:	0018      	movs	r0, r3
 80044aa:	f7ff ff33 	bl	8004314 <__NVIC_EnableIRQ>
}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b002      	add	sp, #8
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7ff ffaf 	bl	8004424 <SysTick_Config>
 80044c6:	0003      	movs	r3, r0
}
 80044c8:	0018      	movs	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e050      	b.n	8004584 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2225      	movs	r2, #37	; 0x25
 80044e6:	5c9b      	ldrb	r3, [r3, r2]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d008      	beq.n	8004500 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2204      	movs	r2, #4
 80044f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2224      	movs	r2, #36	; 0x24
 80044f8:	2100      	movs	r1, #0
 80044fa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e041      	b.n	8004584 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	210e      	movs	r1, #14
 800450c:	438a      	bics	r2, r1
 800450e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	491c      	ldr	r1, [pc, #112]	; (800458c <HAL_DMA_Abort+0xbc>)
 800451c:	400a      	ands	r2, r1
 800451e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2101      	movs	r1, #1
 800452c:	438a      	bics	r2, r1
 800452e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004530:	4b17      	ldr	r3, [pc, #92]	; (8004590 <HAL_DMA_Abort+0xc0>)
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	221c      	movs	r2, #28
 800453a:	4013      	ands	r3, r2
 800453c:	2201      	movs	r2, #1
 800453e:	409a      	lsls	r2, r3
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_DMA_Abort+0xc0>)
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800454e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00c      	beq.n	8004572 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004562:	490a      	ldr	r1, [pc, #40]	; (800458c <HAL_DMA_Abort+0xbc>)
 8004564:	400a      	ands	r2, r1
 8004566:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004570:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2225      	movs	r2, #37	; 0x25
 8004576:	2101      	movs	r1, #1
 8004578:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2224      	movs	r2, #36	; 0x24
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}
 800458c:	fffffeff 	.word	0xfffffeff
 8004590:	40020000 	.word	0x40020000

08004594 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459c:	210f      	movs	r1, #15
 800459e:	187b      	adds	r3, r7, r1
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2225      	movs	r2, #37	; 0x25
 80045a8:	5c9b      	ldrb	r3, [r3, r2]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d006      	beq.n	80045be <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2204      	movs	r2, #4
 80045b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80045b6:	187b      	adds	r3, r7, r1
 80045b8:	2201      	movs	r2, #1
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	e049      	b.n	8004652 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	210e      	movs	r1, #14
 80045ca:	438a      	bics	r2, r1
 80045cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	438a      	bics	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	491d      	ldr	r1, [pc, #116]	; (8004660 <HAL_DMA_Abort_IT+0xcc>)
 80045ea:	400a      	ands	r2, r1
 80045ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <HAL_DMA_Abort_IT+0xd0>)
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	221c      	movs	r2, #28
 80045f8:	4013      	ands	r3, r2
 80045fa:	2201      	movs	r2, #1
 80045fc:	409a      	lsls	r2, r3
 80045fe:	4b19      	ldr	r3, [pc, #100]	; (8004664 <HAL_DMA_Abort_IT+0xd0>)
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800460c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004620:	490f      	ldr	r1, [pc, #60]	; (8004660 <HAL_DMA_Abort_IT+0xcc>)
 8004622:	400a      	ands	r2, r1
 8004624:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800462e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2225      	movs	r2, #37	; 0x25
 8004634:	2101      	movs	r1, #1
 8004636:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2224      	movs	r2, #36	; 0x24
 800463c:	2100      	movs	r1, #0
 800463e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	0010      	movs	r0, r2
 8004650:	4798      	blx	r3
    }
  }
  return status;
 8004652:	230f      	movs	r3, #15
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	781b      	ldrb	r3, [r3, #0]
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	b004      	add	sp, #16
 800465e:	bd80      	pop	{r7, pc}
 8004660:	fffffeff 	.word	0xfffffeff
 8004664:	40020000 	.word	0x40020000

08004668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004676:	e147      	b.n	8004908 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2101      	movs	r1, #1
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4091      	lsls	r1, r2
 8004682:	000a      	movs	r2, r1
 8004684:	4013      	ands	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d100      	bne.n	8004690 <HAL_GPIO_Init+0x28>
 800468e:	e138      	b.n	8004902 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2203      	movs	r2, #3
 8004696:	4013      	ands	r3, r2
 8004698:	2b01      	cmp	r3, #1
 800469a:	d005      	beq.n	80046a8 <HAL_GPIO_Init+0x40>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2203      	movs	r2, #3
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d130      	bne.n	800470a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	2203      	movs	r2, #3
 80046b4:	409a      	lsls	r2, r3
 80046b6:	0013      	movs	r3, r2
 80046b8:	43da      	mvns	r2, r3
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	409a      	lsls	r2, r3
 80046ca:	0013      	movs	r3, r2
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046de:	2201      	movs	r2, #1
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	409a      	lsls	r2, r3
 80046e4:	0013      	movs	r3, r2
 80046e6:	43da      	mvns	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	2201      	movs	r2, #1
 80046f6:	401a      	ands	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	409a      	lsls	r2, r3
 80046fc:	0013      	movs	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2203      	movs	r2, #3
 8004710:	4013      	ands	r3, r2
 8004712:	2b03      	cmp	r3, #3
 8004714:	d017      	beq.n	8004746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	2203      	movs	r2, #3
 8004722:	409a      	lsls	r2, r3
 8004724:	0013      	movs	r3, r2
 8004726:	43da      	mvns	r2, r3
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	409a      	lsls	r2, r3
 8004738:	0013      	movs	r3, r2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2203      	movs	r2, #3
 800474c:	4013      	ands	r3, r2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d123      	bne.n	800479a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	08da      	lsrs	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3208      	adds	r2, #8
 800475a:	0092      	lsls	r2, r2, #2
 800475c:	58d3      	ldr	r3, [r2, r3]
 800475e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2207      	movs	r2, #7
 8004764:	4013      	ands	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	220f      	movs	r2, #15
 800476a:	409a      	lsls	r2, r3
 800476c:	0013      	movs	r3, r2
 800476e:	43da      	mvns	r2, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2107      	movs	r1, #7
 800477e:	400b      	ands	r3, r1
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	409a      	lsls	r2, r3
 8004784:	0013      	movs	r3, r2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	08da      	lsrs	r2, r3, #3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3208      	adds	r2, #8
 8004794:	0092      	lsls	r2, r2, #2
 8004796:	6939      	ldr	r1, [r7, #16]
 8004798:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	2203      	movs	r2, #3
 80047a6:	409a      	lsls	r2, r3
 80047a8:	0013      	movs	r3, r2
 80047aa:	43da      	mvns	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2203      	movs	r2, #3
 80047b8:	401a      	ands	r2, r3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	0013      	movs	r3, r2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	23c0      	movs	r3, #192	; 0xc0
 80047d4:	029b      	lsls	r3, r3, #10
 80047d6:	4013      	ands	r3, r2
 80047d8:	d100      	bne.n	80047dc <HAL_GPIO_Init+0x174>
 80047da:	e092      	b.n	8004902 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80047dc:	4a50      	ldr	r2, [pc, #320]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	3318      	adds	r3, #24
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	589b      	ldr	r3, [r3, r2]
 80047e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2203      	movs	r2, #3
 80047ee:	4013      	ands	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	220f      	movs	r2, #15
 80047f4:	409a      	lsls	r2, r3
 80047f6:	0013      	movs	r3, r2
 80047f8:	43da      	mvns	r2, r3
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	23a0      	movs	r3, #160	; 0xa0
 8004804:	05db      	lsls	r3, r3, #23
 8004806:	429a      	cmp	r2, r3
 8004808:	d013      	beq.n	8004832 <HAL_GPIO_Init+0x1ca>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a45      	ldr	r2, [pc, #276]	; (8004924 <HAL_GPIO_Init+0x2bc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00d      	beq.n	800482e <HAL_GPIO_Init+0x1c6>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a44      	ldr	r2, [pc, #272]	; (8004928 <HAL_GPIO_Init+0x2c0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <HAL_GPIO_Init+0x1c2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a43      	ldr	r2, [pc, #268]	; (800492c <HAL_GPIO_Init+0x2c4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <HAL_GPIO_Init+0x1be>
 8004822:	2303      	movs	r3, #3
 8004824:	e006      	b.n	8004834 <HAL_GPIO_Init+0x1cc>
 8004826:	2305      	movs	r3, #5
 8004828:	e004      	b.n	8004834 <HAL_GPIO_Init+0x1cc>
 800482a:	2302      	movs	r3, #2
 800482c:	e002      	b.n	8004834 <HAL_GPIO_Init+0x1cc>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <HAL_GPIO_Init+0x1cc>
 8004832:	2300      	movs	r3, #0
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	2103      	movs	r1, #3
 8004838:	400a      	ands	r2, r1
 800483a:	00d2      	lsls	r2, r2, #3
 800483c:	4093      	lsls	r3, r2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004844:	4936      	ldr	r1, [pc, #216]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	3318      	adds	r3, #24
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004852:	4b33      	ldr	r3, [pc, #204]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	43da      	mvns	r2, r3
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4013      	ands	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	035b      	lsls	r3, r3, #13
 800486a:	4013      	ands	r3, r2
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004876:	4b2a      	ldr	r3, [pc, #168]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800487c:	4b28      	ldr	r3, [pc, #160]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	43da      	mvns	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	039b      	lsls	r3, r3, #14
 8004894:	4013      	ands	r3, r2
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048a0:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048a6:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80048a8:	2384      	movs	r3, #132	; 0x84
 80048aa:	58d3      	ldr	r3, [r2, r3]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43da      	mvns	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	029b      	lsls	r3, r3, #10
 80048c0:	4013      	ands	r3, r2
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048cc:	4914      	ldr	r1, [pc, #80]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80048ce:	2284      	movs	r2, #132	; 0x84
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80048d4:	4a12      	ldr	r2, [pc, #72]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	58d3      	ldr	r3, [r2, r3]
 80048da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	43da      	mvns	r2, r3
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4013      	ands	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	025b      	lsls	r3, r3, #9
 80048ee:	4013      	ands	r3, r2
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048fa:	4909      	ldr	r1, [pc, #36]	; (8004920 <HAL_GPIO_Init+0x2b8>)
 80048fc:	2280      	movs	r2, #128	; 0x80
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	3301      	adds	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	40da      	lsrs	r2, r3
 8004910:	1e13      	subs	r3, r2, #0
 8004912:	d000      	beq.n	8004916 <HAL_GPIO_Init+0x2ae>
 8004914:	e6b0      	b.n	8004678 <HAL_GPIO_Init+0x10>
  }
}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b006      	add	sp, #24
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40021800 	.word	0x40021800
 8004924:	50000400 	.word	0x50000400
 8004928:	50000800 	.word	0x50000800
 800492c:	50000c00 	.word	0x50000c00

08004930 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004938:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a19      	ldr	r2, [pc, #100]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800493e:	4013      	ands	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	429a      	cmp	r2, r3
 8004952:	d11f      	bne.n	8004994 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004954:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	0013      	movs	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	189b      	adds	r3, r3, r2
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	4912      	ldr	r1, [pc, #72]	; (80049ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004962:	0018      	movs	r0, r3
 8004964:	f7fb fbf2 	bl	800014c <__udivsi3>
 8004968:	0003      	movs	r3, r0
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800496e:	e008      	b.n	8004982 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3b01      	subs	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e001      	b.n	8004982 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e009      	b.n	8004996 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004982:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	401a      	ands	r2, r3
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	429a      	cmp	r2, r3
 8004992:	d0ed      	beq.n	8004970 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b004      	add	sp, #16
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	40007000 	.word	0x40007000
 80049a4:	fffff9ff 	.word	0xfffff9ff
 80049a8:	20000000 	.word	0x20000000
 80049ac:	000f4240 	.word	0x000f4240

080049b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	23e0      	movs	r3, #224	; 0xe0
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	4013      	ands	r3, r2
}
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e2f3      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2201      	movs	r2, #1
 80049e0:	4013      	ands	r3, r2
 80049e2:	d100      	bne.n	80049e6 <HAL_RCC_OscConfig+0x1e>
 80049e4:	e07c      	b.n	8004ae0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e6:	4bc3      	ldr	r3, [pc, #780]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2238      	movs	r2, #56	; 0x38
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049f0:	4bc0      	ldr	r3, [pc, #768]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2203      	movs	r2, #3
 80049f6:	4013      	ands	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d102      	bne.n	8004a06 <HAL_RCC_OscConfig+0x3e>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d002      	beq.n	8004a0c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	4bb9      	ldr	r3, [pc, #740]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	029b      	lsls	r3, r3, #10
 8004a14:	4013      	ands	r3, r2
 8004a16:	d062      	beq.n	8004ade <HAL_RCC_OscConfig+0x116>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d15e      	bne.n	8004ade <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e2ce      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	025b      	lsls	r3, r3, #9
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_OscConfig+0x78>
 8004a30:	4bb0      	ldr	r3, [pc, #704]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4baf      	ldr	r3, [pc, #700]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	0249      	lsls	r1, r1, #9
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e020      	b.n	8004a82 <HAL_RCC_OscConfig+0xba>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	23a0      	movs	r3, #160	; 0xa0
 8004a46:	02db      	lsls	r3, r3, #11
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d10e      	bne.n	8004a6a <HAL_RCC_OscConfig+0xa2>
 8004a4c:	4ba9      	ldr	r3, [pc, #676]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4ba8      	ldr	r3, [pc, #672]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	02c9      	lsls	r1, r1, #11
 8004a56:	430a      	orrs	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	4ba6      	ldr	r3, [pc, #664]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4ba5      	ldr	r3, [pc, #660]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a60:	2180      	movs	r1, #128	; 0x80
 8004a62:	0249      	lsls	r1, r1, #9
 8004a64:	430a      	orrs	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e00b      	b.n	8004a82 <HAL_RCC_OscConfig+0xba>
 8004a6a:	4ba2      	ldr	r3, [pc, #648]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4ba1      	ldr	r3, [pc, #644]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a70:	49a1      	ldr	r1, [pc, #644]	; (8004cf8 <HAL_RCC_OscConfig+0x330>)
 8004a72:	400a      	ands	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	4b9f      	ldr	r3, [pc, #636]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b9e      	ldr	r3, [pc, #632]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004a7c:	499f      	ldr	r1, [pc, #636]	; (8004cfc <HAL_RCC_OscConfig+0x334>)
 8004a7e:	400a      	ands	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d014      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7ff fc39 	bl	8004300 <HAL_GetTick>
 8004a8e:	0003      	movs	r3, r0
 8004a90:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7ff fc34 	bl	8004300 <HAL_GetTick>
 8004a98:	0002      	movs	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	; 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e28d      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa6:	4b93      	ldr	r3, [pc, #588]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	029b      	lsls	r3, r3, #10
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0xcc>
 8004ab2:	e015      	b.n	8004ae0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7ff fc24 	bl	8004300 <HAL_GetTick>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abe:	f7ff fc1f 	bl	8004300 <HAL_GetTick>
 8004ac2:	0002      	movs	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b64      	cmp	r3, #100	; 0x64
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e278      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad0:	4b88      	ldr	r3, [pc, #544]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	029b      	lsls	r3, r3, #10
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d1f0      	bne.n	8004abe <HAL_RCC_OscConfig+0xf6>
 8004adc:	e000      	b.n	8004ae0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ade:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d100      	bne.n	8004aec <HAL_RCC_OscConfig+0x124>
 8004aea:	e099      	b.n	8004c20 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aec:	4b81      	ldr	r3, [pc, #516]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2238      	movs	r2, #56	; 0x38
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af6:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2203      	movs	r2, #3
 8004afc:	4013      	ands	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d102      	bne.n	8004b0c <HAL_RCC_OscConfig+0x144>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d002      	beq.n	8004b12 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d135      	bne.n	8004b7e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b12:	4b78      	ldr	r3, [pc, #480]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d005      	beq.n	8004b2a <HAL_RCC_OscConfig+0x162>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e24b      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2a:	4b72      	ldr	r3, [pc, #456]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4a74      	ldr	r2, [pc, #464]	; (8004d00 <HAL_RCC_OscConfig+0x338>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	0019      	movs	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	021a      	lsls	r2, r3, #8
 8004b3a:	4b6e      	ldr	r3, [pc, #440]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d112      	bne.n	8004b6c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b46:	4b6b      	ldr	r3, [pc, #428]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6e      	ldr	r2, [pc, #440]	; (8004d04 <HAL_RCC_OscConfig+0x33c>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	4b67      	ldr	r3, [pc, #412]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004b56:	430a      	orrs	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004b5a:	4b66      	ldr	r3, [pc, #408]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	0adb      	lsrs	r3, r3, #11
 8004b60:	2207      	movs	r2, #7
 8004b62:	4013      	ands	r3, r2
 8004b64:	4a68      	ldr	r2, [pc, #416]	; (8004d08 <HAL_RCC_OscConfig+0x340>)
 8004b66:	40da      	lsrs	r2, r3
 8004b68:	4b68      	ldr	r3, [pc, #416]	; (8004d0c <HAL_RCC_OscConfig+0x344>)
 8004b6a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b6c:	4b68      	ldr	r3, [pc, #416]	; (8004d10 <HAL_RCC_OscConfig+0x348>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7ff fb69 	bl	8004248 <HAL_InitTick>
 8004b76:	1e03      	subs	r3, r0, #0
 8004b78:	d051      	beq.n	8004c1e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e221      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d030      	beq.n	8004be8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b86:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a5e      	ldr	r2, [pc, #376]	; (8004d04 <HAL_RCC_OscConfig+0x33c>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	4b57      	ldr	r3, [pc, #348]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004b96:	430a      	orrs	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004b9a:	4b56      	ldr	r3, [pc, #344]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b55      	ldr	r3, [pc, #340]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004ba0:	2180      	movs	r1, #128	; 0x80
 8004ba2:	0049      	lsls	r1, r1, #1
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7ff fbaa 	bl	8004300 <HAL_GetTick>
 8004bac:	0003      	movs	r3, r0
 8004bae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7ff fba5 	bl	8004300 <HAL_GetTick>
 8004bb6:	0002      	movs	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e1fe      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	2380      	movs	r3, #128	; 0x80
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b48      	ldr	r3, [pc, #288]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4a4a      	ldr	r2, [pc, #296]	; (8004d00 <HAL_RCC_OscConfig+0x338>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	0019      	movs	r1, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	021a      	lsls	r2, r3, #8
 8004be0:	4b44      	ldr	r3, [pc, #272]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	e01b      	b.n	8004c20 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004be8:	4b42      	ldr	r3, [pc, #264]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004bee:	4949      	ldr	r1, [pc, #292]	; (8004d14 <HAL_RCC_OscConfig+0x34c>)
 8004bf0:	400a      	ands	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7ff fb84 	bl	8004300 <HAL_GetTick>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfe:	f7ff fb7f 	bl	8004300 <HAL_GetTick>
 8004c02:	0002      	movs	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e1d8      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c10:	4b38      	ldr	r3, [pc, #224]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d1f0      	bne.n	8004bfe <HAL_RCC_OscConfig+0x236>
 8004c1c:	e000      	b.n	8004c20 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2208      	movs	r2, #8
 8004c26:	4013      	ands	r3, r2
 8004c28:	d047      	beq.n	8004cba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c2a:	4b32      	ldr	r3, [pc, #200]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2238      	movs	r2, #56	; 0x38
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b18      	cmp	r3, #24
 8004c34:	d10a      	bne.n	8004c4c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004c36:	4b2f      	ldr	r3, [pc, #188]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d03c      	beq.n	8004cba <HAL_RCC_OscConfig+0x2f2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d138      	bne.n	8004cba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e1ba      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d019      	beq.n	8004c88 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c54:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004c56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c58:	4b26      	ldr	r3, [pc, #152]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7ff fb4e 	bl	8004300 <HAL_GetTick>
 8004c64:	0003      	movs	r3, r0
 8004c66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6a:	f7ff fb49 	bl	8004300 <HAL_GetTick>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e1a2      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c7c:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c80:	2202      	movs	r2, #2
 8004c82:	4013      	ands	r3, r2
 8004c84:	d0f1      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2a2>
 8004c86:	e018      	b.n	8004cba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004c88:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004c8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004c8e:	2101      	movs	r1, #1
 8004c90:	438a      	bics	r2, r1
 8004c92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7ff fb34 	bl	8004300 <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c9e:	f7ff fb2f 	bl	8004300 <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e188      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d1f1      	bne.n	8004c9e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x2fe>
 8004cc4:	e0c6      	b.n	8004e54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc6:	231f      	movs	r3, #31
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2238      	movs	r2, #56	; 0x38
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d11e      	bne.n	8004d18 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <HAL_RCC_OscConfig+0x32c>)
 8004cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cde:	2202      	movs	r2, #2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x31e>
 8004ce4:	e0b6      	b.n	8004e54 <HAL_RCC_OscConfig+0x48c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d000      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x328>
 8004cee:	e0b1      	b.n	8004e54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e166      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	fffeffff 	.word	0xfffeffff
 8004cfc:	fffbffff 	.word	0xfffbffff
 8004d00:	ffff80ff 	.word	0xffff80ff
 8004d04:	ffffc7ff 	.word	0xffffc7ff
 8004d08:	00f42400 	.word	0x00f42400
 8004d0c:	20000000 	.word	0x20000000
 8004d10:	20000004 	.word	0x20000004
 8004d14:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d18:	4bac      	ldr	r3, [pc, #688]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	055b      	lsls	r3, r3, #21
 8004d20:	4013      	ands	r3, r2
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_OscConfig+0x360>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <HAL_RCC_OscConfig+0x362>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d011      	beq.n	8004d52 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4ba7      	ldr	r3, [pc, #668]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d32:	4ba6      	ldr	r3, [pc, #664]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004d34:	2180      	movs	r1, #128	; 0x80
 8004d36:	0549      	lsls	r1, r1, #21
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d3c:	4ba3      	ldr	r3, [pc, #652]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	055b      	lsls	r3, r3, #21
 8004d44:	4013      	ands	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004d4a:	231f      	movs	r3, #31
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d52:	4b9f      	ldr	r3, [pc, #636]	; (8004fd0 <HAL_RCC_OscConfig+0x608>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d11a      	bne.n	8004d94 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d5e:	4b9c      	ldr	r3, [pc, #624]	; (8004fd0 <HAL_RCC_OscConfig+0x608>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b9b      	ldr	r3, [pc, #620]	; (8004fd0 <HAL_RCC_OscConfig+0x608>)
 8004d64:	2180      	movs	r1, #128	; 0x80
 8004d66:	0049      	lsls	r1, r1, #1
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004d6c:	f7ff fac8 	bl	8004300 <HAL_GetTick>
 8004d70:	0003      	movs	r3, r0
 8004d72:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d76:	f7ff fac3 	bl	8004300 <HAL_GetTick>
 8004d7a:	0002      	movs	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e11c      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d88:	4b91      	ldr	r3, [pc, #580]	; (8004fd0 <HAL_RCC_OscConfig+0x608>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4013      	ands	r3, r2
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d106      	bne.n	8004daa <HAL_RCC_OscConfig+0x3e2>
 8004d9c:	4b8b      	ldr	r3, [pc, #556]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004d9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004da0:	4b8a      	ldr	r3, [pc, #552]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004da2:	2101      	movs	r1, #1
 8004da4:	430a      	orrs	r2, r1
 8004da6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004da8:	e01c      	b.n	8004de4 <HAL_RCC_OscConfig+0x41c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b05      	cmp	r3, #5
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x404>
 8004db2:	4b86      	ldr	r3, [pc, #536]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004db4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004db6:	4b85      	ldr	r3, [pc, #532]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004db8:	2104      	movs	r1, #4
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dbe:	4b83      	ldr	r3, [pc, #524]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dc2:	4b82      	ldr	r3, [pc, #520]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dca:	e00b      	b.n	8004de4 <HAL_RCC_OscConfig+0x41c>
 8004dcc:	4b7f      	ldr	r3, [pc, #508]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004dce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dd0:	4b7e      	ldr	r3, [pc, #504]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	438a      	bics	r2, r1
 8004dd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dd8:	4b7c      	ldr	r3, [pc, #496]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004dda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ddc:	4b7b      	ldr	r3, [pc, #492]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004dde:	2104      	movs	r1, #4
 8004de0:	438a      	bics	r2, r1
 8004de2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d014      	beq.n	8004e16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7ff fa88 	bl	8004300 <HAL_GetTick>
 8004df0:	0003      	movs	r3, r0
 8004df2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df4:	e009      	b.n	8004e0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7ff fa83 	bl	8004300 <HAL_GetTick>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	4a74      	ldr	r2, [pc, #464]	; (8004fd4 <HAL_RCC_OscConfig+0x60c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e0db      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0a:	4b70      	ldr	r3, [pc, #448]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0e:	2202      	movs	r2, #2
 8004e10:	4013      	ands	r3, r2
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x42e>
 8004e14:	e013      	b.n	8004e3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e16:	f7ff fa73 	bl	8004300 <HAL_GetTick>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e1e:	e009      	b.n	8004e34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e20:	f7ff fa6e 	bl	8004300 <HAL_GetTick>
 8004e24:	0002      	movs	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	4a6a      	ldr	r2, [pc, #424]	; (8004fd4 <HAL_RCC_OscConfig+0x60c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e0c6      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e34:	4b65      	ldr	r3, [pc, #404]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e38:	2202      	movs	r2, #2
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e3e:	231f      	movs	r3, #31
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4b60      	ldr	r3, [pc, #384]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e4c:	4b5f      	ldr	r3, [pc, #380]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004e4e:	4962      	ldr	r1, [pc, #392]	; (8004fd8 <HAL_RCC_OscConfig+0x610>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d100      	bne.n	8004e5e <HAL_RCC_OscConfig+0x496>
 8004e5c:	e0b0      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e5e:	4b5b      	ldr	r3, [pc, #364]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2238      	movs	r2, #56	; 0x38
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b10      	cmp	r3, #16
 8004e68:	d100      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4a4>
 8004e6a:	e078      	b.n	8004f5e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d153      	bne.n	8004f1c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e74:	4b55      	ldr	r3, [pc, #340]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b54      	ldr	r3, [pc, #336]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004e7a:	4958      	ldr	r1, [pc, #352]	; (8004fdc <HAL_RCC_OscConfig+0x614>)
 8004e7c:	400a      	ands	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7ff fa3e 	bl	8004300 <HAL_GetTick>
 8004e84:	0003      	movs	r3, r0
 8004e86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7ff fa39 	bl	8004300 <HAL_GetTick>
 8004e8e:	0002      	movs	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e092      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e9c:	4b4b      	ldr	r3, [pc, #300]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	049b      	lsls	r3, r3, #18
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d1f0      	bne.n	8004e8a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea8:	4b48      	ldr	r3, [pc, #288]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4a4c      	ldr	r2, [pc, #304]	; (8004fe0 <HAL_RCC_OscConfig+0x618>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	4b3e      	ldr	r3, [pc, #248]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed6:	4b3d      	ldr	r3, [pc, #244]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b3c      	ldr	r3, [pc, #240]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004edc:	2180      	movs	r1, #128	; 0x80
 8004ede:	0449      	lsls	r1, r1, #17
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004ee4:	4b39      	ldr	r3, [pc, #228]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	4b38      	ldr	r3, [pc, #224]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004eea:	2180      	movs	r1, #128	; 0x80
 8004eec:	0549      	lsls	r1, r1, #21
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef2:	f7ff fa05 	bl	8004300 <HAL_GetTick>
 8004ef6:	0003      	movs	r3, r0
 8004ef8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efc:	f7ff fa00 	bl	8004300 <HAL_GetTick>
 8004f00:	0002      	movs	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e059      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f0e:	4b2f      	ldr	r3, [pc, #188]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	049b      	lsls	r3, r3, #18
 8004f16:	4013      	ands	r3, r2
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0x534>
 8004f1a:	e051      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1c:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b2a      	ldr	r3, [pc, #168]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004f22:	492e      	ldr	r1, [pc, #184]	; (8004fdc <HAL_RCC_OscConfig+0x614>)
 8004f24:	400a      	ands	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7ff f9ea 	bl	8004300 <HAL_GetTick>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f32:	f7ff f9e5 	bl	8004300 <HAL_GetTick>
 8004f36:	0002      	movs	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e03e      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f44:	4b21      	ldr	r3, [pc, #132]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	049b      	lsls	r3, r3, #18
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d1f0      	bne.n	8004f32 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004f50:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004f56:	4923      	ldr	r1, [pc, #140]	; (8004fe4 <HAL_RCC_OscConfig+0x61c>)
 8004f58:	400a      	ands	r2, r1
 8004f5a:	60da      	str	r2, [r3, #12]
 8004f5c:	e030      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e02b      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004f6a:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <HAL_RCC_OscConfig+0x604>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2203      	movs	r2, #3
 8004f74:	401a      	ands	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d11e      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2270      	movs	r2, #112	; 0x70
 8004f82:	401a      	ands	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d117      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	23fe      	movs	r3, #254	; 0xfe
 8004f90:	01db      	lsls	r3, r3, #7
 8004f92:	401a      	ands	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d10e      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	23f8      	movs	r3, #248	; 0xf8
 8004fa2:	039b      	lsls	r3, r3, #14
 8004fa4:	401a      	ands	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d106      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	0f5b      	lsrs	r3, r3, #29
 8004fb2:	075a      	lsls	r2, r3, #29
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b008      	add	sp, #32
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40007000 	.word	0x40007000
 8004fd4:	00001388 	.word	0x00001388
 8004fd8:	efffffff 	.word	0xefffffff
 8004fdc:	feffffff 	.word	0xfeffffff
 8004fe0:	1fc1808c 	.word	0x1fc1808c
 8004fe4:	effefffc 	.word	0xeffefffc

08004fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0e9      	b.n	80051d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b76      	ldr	r3, [pc, #472]	; (80051d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2207      	movs	r2, #7
 8005002:	4013      	ands	r3, r2
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d91e      	bls.n	8005048 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b73      	ldr	r3, [pc, #460]	; (80051d8 <HAL_RCC_ClockConfig+0x1f0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2207      	movs	r2, #7
 8005010:	4393      	bics	r3, r2
 8005012:	0019      	movs	r1, r3
 8005014:	4b70      	ldr	r3, [pc, #448]	; (80051d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800501c:	f7ff f970 	bl	8004300 <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005024:	e009      	b.n	800503a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005026:	f7ff f96b 	bl	8004300 <HAL_GetTick>
 800502a:	0002      	movs	r2, r0
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	4a6a      	ldr	r2, [pc, #424]	; (80051dc <HAL_RCC_ClockConfig+0x1f4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d901      	bls.n	800503a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e0ca      	b.n	80051d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800503a:	4b67      	ldr	r3, [pc, #412]	; (80051d8 <HAL_RCC_ClockConfig+0x1f0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2207      	movs	r2, #7
 8005040:	4013      	ands	r3, r2
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d1ee      	bne.n	8005026 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2202      	movs	r2, #2
 800504e:	4013      	ands	r3, r2
 8005050:	d015      	beq.n	800507e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2204      	movs	r2, #4
 8005058:	4013      	ands	r3, r2
 800505a:	d006      	beq.n	800506a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800505c:	4b60      	ldr	r3, [pc, #384]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	4b5f      	ldr	r3, [pc, #380]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 8005062:	21e0      	movs	r1, #224	; 0xe0
 8005064:	01c9      	lsls	r1, r1, #7
 8005066:	430a      	orrs	r2, r1
 8005068:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506a:	4b5d      	ldr	r3, [pc, #372]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	4a5d      	ldr	r2, [pc, #372]	; (80051e4 <HAL_RCC_ClockConfig+0x1fc>)
 8005070:	4013      	ands	r3, r2
 8005072:	0019      	movs	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	4b59      	ldr	r3, [pc, #356]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 800507a:	430a      	orrs	r2, r1
 800507c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2201      	movs	r2, #1
 8005084:	4013      	ands	r3, r2
 8005086:	d057      	beq.n	8005138 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d107      	bne.n	80050a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005090:	4b53      	ldr	r3, [pc, #332]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	029b      	lsls	r3, r3, #10
 8005098:	4013      	ands	r3, r2
 800509a:	d12b      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e097      	b.n	80051d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d107      	bne.n	80050b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a8:	4b4d      	ldr	r3, [pc, #308]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	049b      	lsls	r3, r3, #18
 80050b0:	4013      	ands	r3, r2
 80050b2:	d11f      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e08b      	b.n	80051d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d107      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c0:	4b47      	ldr	r3, [pc, #284]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4013      	ands	r3, r2
 80050ca:	d113      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e07f      	b.n	80051d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d106      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050d8:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 80050da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050dc:	2202      	movs	r2, #2
 80050de:	4013      	ands	r3, r2
 80050e0:	d108      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e074      	b.n	80051d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e6:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 80050e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ea:	2202      	movs	r2, #2
 80050ec:	4013      	ands	r3, r2
 80050ee:	d101      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e06d      	b.n	80051d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050f4:	4b3a      	ldr	r3, [pc, #232]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2207      	movs	r2, #7
 80050fa:	4393      	bics	r3, r2
 80050fc:	0019      	movs	r1, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 8005104:	430a      	orrs	r2, r1
 8005106:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005108:	f7ff f8fa 	bl	8004300 <HAL_GetTick>
 800510c:	0003      	movs	r3, r0
 800510e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005110:	e009      	b.n	8005126 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005112:	f7ff f8f5 	bl	8004300 <HAL_GetTick>
 8005116:	0002      	movs	r2, r0
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	4a2f      	ldr	r2, [pc, #188]	; (80051dc <HAL_RCC_ClockConfig+0x1f4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e054      	b.n	80051d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005126:	4b2e      	ldr	r3, [pc, #184]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2238      	movs	r2, #56	; 0x38
 800512c:	401a      	ands	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	429a      	cmp	r2, r3
 8005136:	d1ec      	bne.n	8005112 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005138:	4b27      	ldr	r3, [pc, #156]	; (80051d8 <HAL_RCC_ClockConfig+0x1f0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2207      	movs	r2, #7
 800513e:	4013      	ands	r3, r2
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d21e      	bcs.n	8005184 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005146:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2207      	movs	r2, #7
 800514c:	4393      	bics	r3, r2
 800514e:	0019      	movs	r1, r3
 8005150:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005158:	f7ff f8d2 	bl	8004300 <HAL_GetTick>
 800515c:	0003      	movs	r3, r0
 800515e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005160:	e009      	b.n	8005176 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005162:	f7ff f8cd 	bl	8004300 <HAL_GetTick>
 8005166:	0002      	movs	r2, r0
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <HAL_RCC_ClockConfig+0x1f4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e02c      	b.n	80051d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005176:	4b18      	ldr	r3, [pc, #96]	; (80051d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2207      	movs	r2, #7
 800517c:	4013      	ands	r3, r2
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d1ee      	bne.n	8005162 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2204      	movs	r2, #4
 800518a:	4013      	ands	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <HAL_RCC_ClockConfig+0x200>)
 8005194:	4013      	ands	r3, r2
 8005196:	0019      	movs	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 800519e:	430a      	orrs	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80051a2:	f000 f829 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80051a6:	0001      	movs	r1, r0
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <HAL_RCC_ClockConfig+0x1f8>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	0a1b      	lsrs	r3, r3, #8
 80051ae:	220f      	movs	r2, #15
 80051b0:	401a      	ands	r2, r3
 80051b2:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <HAL_RCC_ClockConfig+0x204>)
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	58d3      	ldr	r3, [r2, r3]
 80051b8:	221f      	movs	r2, #31
 80051ba:	4013      	ands	r3, r2
 80051bc:	000a      	movs	r2, r1
 80051be:	40da      	lsrs	r2, r3
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCC_ClockConfig+0x208>)
 80051c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <HAL_RCC_ClockConfig+0x20c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	0018      	movs	r0, r3
 80051ca:	f7ff f83d 	bl	8004248 <HAL_InitTick>
 80051ce:	0003      	movs	r3, r0
}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b004      	add	sp, #16
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40022000 	.word	0x40022000
 80051dc:	00001388 	.word	0x00001388
 80051e0:	40021000 	.word	0x40021000
 80051e4:	fffff0ff 	.word	0xfffff0ff
 80051e8:	ffff8fff 	.word	0xffff8fff
 80051ec:	0800e05c 	.word	0x0800e05c
 80051f0:	20000000 	.word	0x20000000
 80051f4:	20000004 	.word	0x20000004

080051f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051fe:	4b3c      	ldr	r3, [pc, #240]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2238      	movs	r2, #56	; 0x38
 8005204:	4013      	ands	r3, r2
 8005206:	d10f      	bne.n	8005228 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005208:	4b39      	ldr	r3, [pc, #228]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	0adb      	lsrs	r3, r3, #11
 800520e:	2207      	movs	r2, #7
 8005210:	4013      	ands	r3, r2
 8005212:	2201      	movs	r2, #1
 8005214:	409a      	lsls	r2, r3
 8005216:	0013      	movs	r3, r2
 8005218:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	4835      	ldr	r0, [pc, #212]	; (80052f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800521e:	f7fa ff95 	bl	800014c <__udivsi3>
 8005222:	0003      	movs	r3, r0
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e05d      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005228:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2238      	movs	r2, #56	; 0x38
 800522e:	4013      	ands	r3, r2
 8005230:	2b08      	cmp	r3, #8
 8005232:	d102      	bne.n	800523a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005234:	4b30      	ldr	r3, [pc, #192]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	e054      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800523a:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2238      	movs	r2, #56	; 0x38
 8005240:	4013      	ands	r3, r2
 8005242:	2b10      	cmp	r3, #16
 8005244:	d138      	bne.n	80052b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005246:	4b2a      	ldr	r3, [pc, #168]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	2203      	movs	r2, #3
 800524c:	4013      	ands	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005250:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	2207      	movs	r2, #7
 8005258:	4013      	ands	r3, r2
 800525a:	3301      	adds	r3, #1
 800525c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d10d      	bne.n	8005280 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	4824      	ldr	r0, [pc, #144]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005268:	f7fa ff70 	bl	800014c <__udivsi3>
 800526c:	0003      	movs	r3, r0
 800526e:	0019      	movs	r1, r3
 8005270:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	227f      	movs	r2, #127	; 0x7f
 8005278:	4013      	ands	r3, r2
 800527a:	434b      	muls	r3, r1
 800527c:	617b      	str	r3, [r7, #20]
        break;
 800527e:	e00d      	b.n	800529c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	481c      	ldr	r0, [pc, #112]	; (80052f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005284:	f7fa ff62 	bl	800014c <__udivsi3>
 8005288:	0003      	movs	r3, r0
 800528a:	0019      	movs	r1, r3
 800528c:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	0a1b      	lsrs	r3, r3, #8
 8005292:	227f      	movs	r2, #127	; 0x7f
 8005294:	4013      	ands	r3, r2
 8005296:	434b      	muls	r3, r1
 8005298:	617b      	str	r3, [r7, #20]
        break;
 800529a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800529c:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	0f5b      	lsrs	r3, r3, #29
 80052a2:	2207      	movs	r2, #7
 80052a4:	4013      	ands	r3, r2
 80052a6:	3301      	adds	r3, #1
 80052a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	6978      	ldr	r0, [r7, #20]
 80052ae:	f7fa ff4d 	bl	800014c <__udivsi3>
 80052b2:	0003      	movs	r3, r0
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	e015      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2238      	movs	r2, #56	; 0x38
 80052be:	4013      	ands	r3, r2
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d103      	bne.n	80052cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	e00b      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80052cc:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2238      	movs	r2, #56	; 0x38
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b18      	cmp	r3, #24
 80052d6:	d103      	bne.n	80052e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80052d8:	23fa      	movs	r3, #250	; 0xfa
 80052da:	01db      	lsls	r3, r3, #7
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	e001      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052e4:	693b      	ldr	r3, [r7, #16]
}
 80052e6:	0018      	movs	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b006      	add	sp, #24
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	40021000 	.word	0x40021000
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	007a1200 	.word	0x007a1200

080052fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005300:	4b02      	ldr	r3, [pc, #8]	; (800530c <HAL_RCC_GetHCLKFreq+0x10>)
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	0018      	movs	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	20000000 	.word	0x20000000

08005310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005310:	b5b0      	push	{r4, r5, r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005314:	f7ff fff2 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 8005318:	0004      	movs	r4, r0
 800531a:	f7ff fb49 	bl	80049b0 <LL_RCC_GetAPB1Prescaler>
 800531e:	0003      	movs	r3, r0
 8005320:	0b1a      	lsrs	r2, r3, #12
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005324:	0092      	lsls	r2, r2, #2
 8005326:	58d3      	ldr	r3, [r2, r3]
 8005328:	221f      	movs	r2, #31
 800532a:	4013      	ands	r3, r2
 800532c:	40dc      	lsrs	r4, r3
 800532e:	0023      	movs	r3, r4
}
 8005330:	0018      	movs	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	bdb0      	pop	{r4, r5, r7, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	0800e09c 	.word	0x0800e09c

0800533c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005344:	2313      	movs	r3, #19
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800534c:	2312      	movs	r3, #18
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	4013      	ands	r3, r2
 800535e:	d100      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005360:	e0a3      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005362:	2011      	movs	r0, #17
 8005364:	183b      	adds	r3, r7, r0
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800536a:	4b86      	ldr	r3, [pc, #536]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800536c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	055b      	lsls	r3, r3, #21
 8005372:	4013      	ands	r3, r2
 8005374:	d110      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005376:	4b83      	ldr	r3, [pc, #524]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800537a:	4b82      	ldr	r3, [pc, #520]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800537c:	2180      	movs	r1, #128	; 0x80
 800537e:	0549      	lsls	r1, r1, #21
 8005380:	430a      	orrs	r2, r1
 8005382:	63da      	str	r2, [r3, #60]	; 0x3c
 8005384:	4b7f      	ldr	r3, [pc, #508]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	055b      	lsls	r3, r3, #21
 800538c:	4013      	ands	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005392:	183b      	adds	r3, r7, r0
 8005394:	2201      	movs	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005398:	4b7b      	ldr	r3, [pc, #492]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b7a      	ldr	r3, [pc, #488]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800539e:	2180      	movs	r1, #128	; 0x80
 80053a0:	0049      	lsls	r1, r1, #1
 80053a2:	430a      	orrs	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053a6:	f7fe ffab 	bl	8004300 <HAL_GetTick>
 80053aa:	0003      	movs	r3, r0
 80053ac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ae:	e00b      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b0:	f7fe ffa6 	bl	8004300 <HAL_GetTick>
 80053b4:	0002      	movs	r2, r0
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d904      	bls.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80053be:	2313      	movs	r3, #19
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	2203      	movs	r2, #3
 80053c4:	701a      	strb	r2, [r3, #0]
        break;
 80053c6:	e005      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053c8:	4b6f      	ldr	r3, [pc, #444]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	4013      	ands	r3, r2
 80053d2:	d0ed      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80053d4:	2313      	movs	r3, #19
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d154      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053de:	4b69      	ldr	r3, [pc, #420]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053e2:	23c0      	movs	r3, #192	; 0xc0
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4013      	ands	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d019      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d014      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053fa:	4b62      	ldr	r3, [pc, #392]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fe:	4a63      	ldr	r2, [pc, #396]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005400:	4013      	ands	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005404:	4b5f      	ldr	r3, [pc, #380]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005406:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005408:	4b5e      	ldr	r3, [pc, #376]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800540a:	2180      	movs	r1, #128	; 0x80
 800540c:	0249      	lsls	r1, r1, #9
 800540e:	430a      	orrs	r2, r1
 8005410:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005412:	4b5c      	ldr	r3, [pc, #368]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005416:	4b5b      	ldr	r3, [pc, #364]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005418:	495d      	ldr	r1, [pc, #372]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800541a:	400a      	ands	r2, r1
 800541c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800541e:	4b59      	ldr	r3, [pc, #356]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2201      	movs	r2, #1
 8005428:	4013      	ands	r3, r2
 800542a:	d016      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fe ff68 	bl	8004300 <HAL_GetTick>
 8005430:	0003      	movs	r3, r0
 8005432:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005434:	e00c      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005436:	f7fe ff63 	bl	8004300 <HAL_GetTick>
 800543a:	0002      	movs	r2, r0
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	4a54      	ldr	r2, [pc, #336]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d904      	bls.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005446:	2313      	movs	r3, #19
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	2203      	movs	r2, #3
 800544c:	701a      	strb	r2, [r3, #0]
            break;
 800544e:	e004      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005450:	4b4c      	ldr	r3, [pc, #304]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005454:	2202      	movs	r2, #2
 8005456:	4013      	ands	r3, r2
 8005458:	d0ed      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800545a:	2313      	movs	r3, #19
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005464:	4b47      	ldr	r3, [pc, #284]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005468:	4a48      	ldr	r2, [pc, #288]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800546a:	4013      	ands	r3, r2
 800546c:	0019      	movs	r1, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	4b44      	ldr	r3, [pc, #272]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005474:	430a      	orrs	r2, r1
 8005476:	65da      	str	r2, [r3, #92]	; 0x5c
 8005478:	e00c      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800547a:	2312      	movs	r3, #18
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	2213      	movs	r2, #19
 8005480:	18ba      	adds	r2, r7, r2
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e005      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	2312      	movs	r3, #18
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	2213      	movs	r2, #19
 800548e:	18ba      	adds	r2, r7, r2
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005494:	2311      	movs	r3, #17
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800549e:	4b39      	ldr	r3, [pc, #228]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a2:	4b38      	ldr	r3, [pc, #224]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054a4:	493c      	ldr	r1, [pc, #240]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054a6:	400a      	ands	r2, r1
 80054a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2201      	movs	r2, #1
 80054b0:	4013      	ands	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054b4:	4b33      	ldr	r3, [pc, #204]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b8:	2203      	movs	r2, #3
 80054ba:	4393      	bics	r3, r2
 80054bc:	0019      	movs	r1, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	4b30      	ldr	r3, [pc, #192]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054c4:	430a      	orrs	r2, r1
 80054c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2202      	movs	r2, #2
 80054ce:	4013      	ands	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054d2:	4b2c      	ldr	r3, [pc, #176]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	220c      	movs	r2, #12
 80054d8:	4393      	bics	r3, r2
 80054da:	0019      	movs	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	4b28      	ldr	r3, [pc, #160]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054e2:	430a      	orrs	r2, r1
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2220      	movs	r2, #32
 80054ec:	4013      	ands	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054f0:	4b24      	ldr	r3, [pc, #144]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f4:	4a29      	ldr	r2, [pc, #164]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	4b21      	ldr	r3, [pc, #132]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005500:	430a      	orrs	r2, r1
 8005502:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	01db      	lsls	r3, r3, #7
 800550c:	4013      	ands	r3, r2
 800550e:	d015      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005510:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	0899      	lsrs	r1, r3, #2
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800551e:	430a      	orrs	r2, r1
 8005520:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	05db      	lsls	r3, r3, #23
 800552a:	429a      	cmp	r2, r3
 800552c:	d106      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	4b14      	ldr	r3, [pc, #80]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005534:	2180      	movs	r1, #128	; 0x80
 8005536:	0249      	lsls	r1, r1, #9
 8005538:	430a      	orrs	r2, r1
 800553a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	4013      	ands	r3, r2
 8005546:	d016      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005548:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800554a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554c:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800554e:	4013      	ands	r3, r2
 8005550:	0019      	movs	r1, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005558:	430a      	orrs	r2, r1
 800555a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	01db      	lsls	r3, r3, #7
 8005564:	429a      	cmp	r2, r3
 8005566:	d106      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800556e:	2180      	movs	r1, #128	; 0x80
 8005570:	0249      	lsls	r1, r1, #9
 8005572:	430a      	orrs	r2, r1
 8005574:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005576:	2312      	movs	r3, #18
 8005578:	18fb      	adds	r3, r7, r3
 800557a:	781b      	ldrb	r3, [r3, #0]
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b006      	add	sp, #24
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000
 8005588:	40007000 	.word	0x40007000
 800558c:	fffffcff 	.word	0xfffffcff
 8005590:	fffeffff 	.word	0xfffeffff
 8005594:	00001388 	.word	0x00001388
 8005598:	efffffff 	.word	0xefffffff
 800559c:	ffffcfff 	.word	0xffffcfff
 80055a0:	ffff3fff 	.word	0xffff3fff

080055a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e04a      	b.n	800564c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	223d      	movs	r2, #61	; 0x3d
 80055ba:	5c9b      	ldrb	r3, [r3, r2]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d107      	bne.n	80055d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	223c      	movs	r2, #60	; 0x3c
 80055c6:	2100      	movs	r1, #0
 80055c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f7fe fbfb 	bl	8003dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	223d      	movs	r2, #61	; 0x3d
 80055d6:	2102      	movs	r1, #2
 80055d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3304      	adds	r3, #4
 80055e2:	0019      	movs	r1, r3
 80055e4:	0010      	movs	r0, r2
 80055e6:	f000 fecf 	bl	8006388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2248      	movs	r2, #72	; 0x48
 80055ee:	2101      	movs	r1, #1
 80055f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	223e      	movs	r2, #62	; 0x3e
 80055f6:	2101      	movs	r1, #1
 80055f8:	5499      	strb	r1, [r3, r2]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	223f      	movs	r2, #63	; 0x3f
 80055fe:	2101      	movs	r1, #1
 8005600:	5499      	strb	r1, [r3, r2]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2240      	movs	r2, #64	; 0x40
 8005606:	2101      	movs	r1, #1
 8005608:	5499      	strb	r1, [r3, r2]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2241      	movs	r2, #65	; 0x41
 800560e:	2101      	movs	r1, #1
 8005610:	5499      	strb	r1, [r3, r2]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2242      	movs	r2, #66	; 0x42
 8005616:	2101      	movs	r1, #1
 8005618:	5499      	strb	r1, [r3, r2]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2243      	movs	r2, #67	; 0x43
 800561e:	2101      	movs	r1, #1
 8005620:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2244      	movs	r2, #68	; 0x44
 8005626:	2101      	movs	r1, #1
 8005628:	5499      	strb	r1, [r3, r2]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2245      	movs	r2, #69	; 0x45
 800562e:	2101      	movs	r1, #1
 8005630:	5499      	strb	r1, [r3, r2]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2246      	movs	r2, #70	; 0x46
 8005636:	2101      	movs	r1, #1
 8005638:	5499      	strb	r1, [r3, r2]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2247      	movs	r2, #71	; 0x47
 800563e:	2101      	movs	r1, #1
 8005640:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	223d      	movs	r2, #61	; 0x3d
 8005646:	2101      	movs	r1, #1
 8005648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	0018      	movs	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	b002      	add	sp, #8
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	223d      	movs	r2, #61	; 0x3d
 8005660:	5c9b      	ldrb	r3, [r3, r2]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	d001      	beq.n	800566c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e03c      	b.n	80056e6 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	223d      	movs	r2, #61	; 0x3d
 8005670:	2102      	movs	r1, #2
 8005672:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2101      	movs	r1, #1
 8005680:	430a      	orrs	r2, r1
 8005682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_TIM_Base_Start_IT+0x4e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_TIM_Base_Start_IT+0x4e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <HAL_TIM_Base_Start_IT+0xa4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d116      	bne.n	80056d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4a14      	ldr	r2, [pc, #80]	; (80056fc <HAL_TIM_Base_Start_IT+0xa8>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b06      	cmp	r3, #6
 80056b2:	d016      	beq.n	80056e2 <HAL_TIM_Base_Start_IT+0x8e>
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	025b      	lsls	r3, r3, #9
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d011      	beq.n	80056e2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2101      	movs	r1, #1
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ce:	e008      	b.n	80056e2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2101      	movs	r1, #1
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e000      	b.n	80056e4 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b004      	add	sp, #16
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40014000 	.word	0x40014000
 80056fc:	00010007 	.word	0x00010007

08005700 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e04a      	b.n	80057a8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	223d      	movs	r2, #61	; 0x3d
 8005716:	5c9b      	ldrb	r3, [r3, r2]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d107      	bne.n	800572e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	223c      	movs	r2, #60	; 0x3c
 8005722:	2100      	movs	r1, #0
 8005724:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	0018      	movs	r0, r3
 800572a:	f000 f841 	bl	80057b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	223d      	movs	r2, #61	; 0x3d
 8005732:	2102      	movs	r1, #2
 8005734:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3304      	adds	r3, #4
 800573e:	0019      	movs	r1, r3
 8005740:	0010      	movs	r0, r2
 8005742:	f000 fe21 	bl	8006388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2248      	movs	r2, #72	; 0x48
 800574a:	2101      	movs	r1, #1
 800574c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	223e      	movs	r2, #62	; 0x3e
 8005752:	2101      	movs	r1, #1
 8005754:	5499      	strb	r1, [r3, r2]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	223f      	movs	r2, #63	; 0x3f
 800575a:	2101      	movs	r1, #1
 800575c:	5499      	strb	r1, [r3, r2]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2240      	movs	r2, #64	; 0x40
 8005762:	2101      	movs	r1, #1
 8005764:	5499      	strb	r1, [r3, r2]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2241      	movs	r2, #65	; 0x41
 800576a:	2101      	movs	r1, #1
 800576c:	5499      	strb	r1, [r3, r2]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2242      	movs	r2, #66	; 0x42
 8005772:	2101      	movs	r1, #1
 8005774:	5499      	strb	r1, [r3, r2]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2243      	movs	r2, #67	; 0x43
 800577a:	2101      	movs	r1, #1
 800577c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2244      	movs	r2, #68	; 0x44
 8005782:	2101      	movs	r1, #1
 8005784:	5499      	strb	r1, [r3, r2]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2245      	movs	r2, #69	; 0x45
 800578a:	2101      	movs	r1, #1
 800578c:	5499      	strb	r1, [r3, r2]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2246      	movs	r2, #70	; 0x46
 8005792:	2101      	movs	r1, #1
 8005794:	5499      	strb	r1, [r3, r2]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2247      	movs	r2, #71	; 0x47
 800579a:	2101      	movs	r1, #1
 800579c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	223d      	movs	r2, #61	; 0x3d
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	0018      	movs	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057b8:	46c0      	nop			; (mov r8, r8)
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b002      	add	sp, #8
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d108      	bne.n	80057e2 <HAL_TIM_PWM_Start+0x22>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	223e      	movs	r2, #62	; 0x3e
 80057d4:	5c9b      	ldrb	r3, [r3, r2]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	1e5a      	subs	r2, r3, #1
 80057dc:	4193      	sbcs	r3, r2
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	e037      	b.n	8005852 <HAL_TIM_PWM_Start+0x92>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d108      	bne.n	80057fa <HAL_TIM_PWM_Start+0x3a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	223f      	movs	r2, #63	; 0x3f
 80057ec:	5c9b      	ldrb	r3, [r3, r2]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	1e5a      	subs	r2, r3, #1
 80057f4:	4193      	sbcs	r3, r2
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	e02b      	b.n	8005852 <HAL_TIM_PWM_Start+0x92>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d108      	bne.n	8005812 <HAL_TIM_PWM_Start+0x52>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2240      	movs	r2, #64	; 0x40
 8005804:	5c9b      	ldrb	r3, [r3, r2]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	1e5a      	subs	r2, r3, #1
 800580c:	4193      	sbcs	r3, r2
 800580e:	b2db      	uxtb	r3, r3
 8005810:	e01f      	b.n	8005852 <HAL_TIM_PWM_Start+0x92>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b0c      	cmp	r3, #12
 8005816:	d108      	bne.n	800582a <HAL_TIM_PWM_Start+0x6a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2241      	movs	r2, #65	; 0x41
 800581c:	5c9b      	ldrb	r3, [r3, r2]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	1e5a      	subs	r2, r3, #1
 8005824:	4193      	sbcs	r3, r2
 8005826:	b2db      	uxtb	r3, r3
 8005828:	e013      	b.n	8005852 <HAL_TIM_PWM_Start+0x92>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b10      	cmp	r3, #16
 800582e:	d108      	bne.n	8005842 <HAL_TIM_PWM_Start+0x82>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2242      	movs	r2, #66	; 0x42
 8005834:	5c9b      	ldrb	r3, [r3, r2]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	1e5a      	subs	r2, r3, #1
 800583c:	4193      	sbcs	r3, r2
 800583e:	b2db      	uxtb	r3, r3
 8005840:	e007      	b.n	8005852 <HAL_TIM_PWM_Start+0x92>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2243      	movs	r2, #67	; 0x43
 8005846:	5c9b      	ldrb	r3, [r3, r2]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	1e5a      	subs	r2, r3, #1
 800584e:	4193      	sbcs	r3, r2
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e085      	b.n	8005966 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <HAL_TIM_PWM_Start+0xaa>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	223e      	movs	r2, #62	; 0x3e
 8005864:	2102      	movs	r1, #2
 8005866:	5499      	strb	r1, [r3, r2]
 8005868:	e023      	b.n	80058b2 <HAL_TIM_PWM_Start+0xf2>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b04      	cmp	r3, #4
 800586e:	d104      	bne.n	800587a <HAL_TIM_PWM_Start+0xba>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	223f      	movs	r2, #63	; 0x3f
 8005874:	2102      	movs	r1, #2
 8005876:	5499      	strb	r1, [r3, r2]
 8005878:	e01b      	b.n	80058b2 <HAL_TIM_PWM_Start+0xf2>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b08      	cmp	r3, #8
 800587e:	d104      	bne.n	800588a <HAL_TIM_PWM_Start+0xca>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2240      	movs	r2, #64	; 0x40
 8005884:	2102      	movs	r1, #2
 8005886:	5499      	strb	r1, [r3, r2]
 8005888:	e013      	b.n	80058b2 <HAL_TIM_PWM_Start+0xf2>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b0c      	cmp	r3, #12
 800588e:	d104      	bne.n	800589a <HAL_TIM_PWM_Start+0xda>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2241      	movs	r2, #65	; 0x41
 8005894:	2102      	movs	r1, #2
 8005896:	5499      	strb	r1, [r3, r2]
 8005898:	e00b      	b.n	80058b2 <HAL_TIM_PWM_Start+0xf2>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b10      	cmp	r3, #16
 800589e:	d104      	bne.n	80058aa <HAL_TIM_PWM_Start+0xea>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2242      	movs	r2, #66	; 0x42
 80058a4:	2102      	movs	r1, #2
 80058a6:	5499      	strb	r1, [r3, r2]
 80058a8:	e003      	b.n	80058b2 <HAL_TIM_PWM_Start+0xf2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2243      	movs	r2, #67	; 0x43
 80058ae:	2102      	movs	r1, #2
 80058b0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	2201      	movs	r2, #1
 80058ba:	0018      	movs	r0, r3
 80058bc:	f001 f93a 	bl	8006b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a2a      	ldr	r2, [pc, #168]	; (8005970 <HAL_TIM_PWM_Start+0x1b0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00e      	beq.n	80058e8 <HAL_TIM_PWM_Start+0x128>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a29      	ldr	r2, [pc, #164]	; (8005974 <HAL_TIM_PWM_Start+0x1b4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d009      	beq.n	80058e8 <HAL_TIM_PWM_Start+0x128>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a27      	ldr	r2, [pc, #156]	; (8005978 <HAL_TIM_PWM_Start+0x1b8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_TIM_PWM_Start+0x128>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a26      	ldr	r2, [pc, #152]	; (800597c <HAL_TIM_PWM_Start+0x1bc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <HAL_TIM_PWM_Start+0x12c>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <HAL_TIM_PWM_Start+0x12e>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2180      	movs	r1, #128	; 0x80
 80058fe:	0209      	lsls	r1, r1, #8
 8005900:	430a      	orrs	r2, r1
 8005902:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <HAL_TIM_PWM_Start+0x1b0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d009      	beq.n	8005922 <HAL_TIM_PWM_Start+0x162>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_TIM_PWM_Start+0x1c0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d004      	beq.n	8005922 <HAL_TIM_PWM_Start+0x162>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a15      	ldr	r2, [pc, #84]	; (8005974 <HAL_TIM_PWM_Start+0x1b4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d116      	bne.n	8005950 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	4a16      	ldr	r2, [pc, #88]	; (8005984 <HAL_TIM_PWM_Start+0x1c4>)
 800592a:	4013      	ands	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b06      	cmp	r3, #6
 8005932:	d016      	beq.n	8005962 <HAL_TIM_PWM_Start+0x1a2>
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	025b      	lsls	r3, r3, #9
 800593a:	429a      	cmp	r2, r3
 800593c:	d011      	beq.n	8005962 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2101      	movs	r1, #1
 800594a:	430a      	orrs	r2, r1
 800594c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	e008      	b.n	8005962 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2101      	movs	r1, #1
 800595c:	430a      	orrs	r2, r1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e000      	b.n	8005964 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	0018      	movs	r0, r3
 8005968:	46bd      	mov	sp, r7
 800596a:	b004      	add	sp, #16
 800596c:	bd80      	pop	{r7, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800
 8005980:	40000400 	.word	0x40000400
 8005984:	00010007 	.word	0x00010007

08005988 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	2200      	movs	r2, #0
 800599a:	0018      	movs	r0, r3
 800599c:	f001 f8ca 	bl	8006b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a37      	ldr	r2, [pc, #220]	; (8005a84 <HAL_TIM_PWM_Stop+0xfc>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00e      	beq.n	80059c8 <HAL_TIM_PWM_Stop+0x40>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a36      	ldr	r2, [pc, #216]	; (8005a88 <HAL_TIM_PWM_Stop+0x100>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_TIM_PWM_Stop+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a34      	ldr	r2, [pc, #208]	; (8005a8c <HAL_TIM_PWM_Stop+0x104>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_TIM_PWM_Stop+0x40>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a33      	ldr	r2, [pc, #204]	; (8005a90 <HAL_TIM_PWM_Stop+0x108>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d101      	bne.n	80059cc <HAL_TIM_PWM_Stop+0x44>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <HAL_TIM_PWM_Stop+0x46>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d013      	beq.n	80059fa <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	4a2e      	ldr	r2, [pc, #184]	; (8005a94 <HAL_TIM_PWM_Stop+0x10c>)
 80059da:	4013      	ands	r3, r2
 80059dc:	d10d      	bne.n	80059fa <HAL_TIM_PWM_Stop+0x72>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	4a2c      	ldr	r2, [pc, #176]	; (8005a98 <HAL_TIM_PWM_Stop+0x110>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	d107      	bne.n	80059fa <HAL_TIM_PWM_Stop+0x72>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4929      	ldr	r1, [pc, #164]	; (8005a9c <HAL_TIM_PWM_Stop+0x114>)
 80059f6:	400a      	ands	r2, r1
 80059f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <HAL_TIM_PWM_Stop+0x10c>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	d10d      	bne.n	8005a22 <HAL_TIM_PWM_Stop+0x9a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <HAL_TIM_PWM_Stop+0x110>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d107      	bne.n	8005a22 <HAL_TIM_PWM_Stop+0x9a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	438a      	bics	r2, r1
 8005a20:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_PWM_Stop+0xaa>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	223e      	movs	r2, #62	; 0x3e
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	5499      	strb	r1, [r3, r2]
 8005a30:	e023      	b.n	8005a7a <HAL_TIM_PWM_Stop+0xf2>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_PWM_Stop+0xba>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	223f      	movs	r2, #63	; 0x3f
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	5499      	strb	r1, [r3, r2]
 8005a40:	e01b      	b.n	8005a7a <HAL_TIM_PWM_Stop+0xf2>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Stop+0xca>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2240      	movs	r2, #64	; 0x40
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	5499      	strb	r1, [r3, r2]
 8005a50:	e013      	b.n	8005a7a <HAL_TIM_PWM_Stop+0xf2>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b0c      	cmp	r3, #12
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_PWM_Stop+0xda>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2241      	movs	r2, #65	; 0x41
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	5499      	strb	r1, [r3, r2]
 8005a60:	e00b      	b.n	8005a7a <HAL_TIM_PWM_Stop+0xf2>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_PWM_Stop+0xea>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2242      	movs	r2, #66	; 0x42
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	5499      	strb	r1, [r3, r2]
 8005a70:	e003      	b.n	8005a7a <HAL_TIM_PWM_Stop+0xf2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2243      	movs	r2, #67	; 0x43
 8005a76:	2101      	movs	r1, #1
 8005a78:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b002      	add	sp, #8
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40014400 	.word	0x40014400
 8005a90:	40014800 	.word	0x40014800
 8005a94:	00001111 	.word	0x00001111
 8005a98:	00000444 	.word	0x00000444
 8005a9c:	ffff7fff 	.word	0xffff7fff

08005aa0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e090      	b.n	8005bd6 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	223d      	movs	r2, #61	; 0x3d
 8005ab8:	5c9b      	ldrb	r3, [r3, r2]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d107      	bne.n	8005ad0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	223c      	movs	r2, #60	; 0x3c
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f7fe f8f8 	bl	8003cc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	223d      	movs	r2, #61	; 0x3d
 8005ad4:	2102      	movs	r1, #2
 8005ad6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	493f      	ldr	r1, [pc, #252]	; (8005be0 <HAL_TIM_Encoder_Init+0x140>)
 8005ae4:	400a      	ands	r2, r1
 8005ae6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	0019      	movs	r1, r3
 8005af2:	0010      	movs	r0, r2
 8005af4:	f000 fc48 	bl	8006388 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4a31      	ldr	r2, [pc, #196]	; (8005be4 <HAL_TIM_Encoder_Init+0x144>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4a2c      	ldr	r2, [pc, #176]	; (8005be8 <HAL_TIM_Encoder_Init+0x148>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4a2b      	ldr	r2, [pc, #172]	; (8005bec <HAL_TIM_Encoder_Init+0x14c>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	011a      	lsls	r2, r3, #4
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	031b      	lsls	r3, r3, #12
 8005b62:	4313      	orrs	r3, r2
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2222      	movs	r2, #34	; 0x22
 8005b6e:	4393      	bics	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2288      	movs	r2, #136	; 0x88
 8005b76:	4393      	bics	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	4313      	orrs	r3, r2
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2248      	movs	r2, #72	; 0x48
 8005ba8:	2101      	movs	r1, #1
 8005baa:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	223e      	movs	r2, #62	; 0x3e
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	223f      	movs	r2, #63	; 0x3f
 8005bb8:	2101      	movs	r1, #1
 8005bba:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2244      	movs	r2, #68	; 0x44
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2245      	movs	r2, #69	; 0x45
 8005bc8:	2101      	movs	r1, #1
 8005bca:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	223d      	movs	r2, #61	; 0x3d
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	b006      	add	sp, #24
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	fffebff8 	.word	0xfffebff8
 8005be4:	fffffcfc 	.word	0xfffffcfc
 8005be8:	fffff3f3 	.word	0xfffff3f3
 8005bec:	ffff0f0f 	.word	0xffff0f0f

08005bf0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005bfa:	200f      	movs	r0, #15
 8005bfc:	183b      	adds	r3, r7, r0
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	213e      	movs	r1, #62	; 0x3e
 8005c02:	5c52      	ldrb	r2, [r2, r1]
 8005c04:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c06:	230e      	movs	r3, #14
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	213f      	movs	r1, #63	; 0x3f
 8005c0e:	5c52      	ldrb	r2, [r2, r1]
 8005c10:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c12:	240d      	movs	r4, #13
 8005c14:	193b      	adds	r3, r7, r4
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	2144      	movs	r1, #68	; 0x44
 8005c1a:	5c52      	ldrb	r2, [r2, r1]
 8005c1c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c1e:	230c      	movs	r3, #12
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	2145      	movs	r1, #69	; 0x45
 8005c26:	5c52      	ldrb	r2, [r2, r1]
 8005c28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d112      	bne.n	8005c56 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c30:	183b      	adds	r3, r7, r0
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d103      	bne.n	8005c40 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c38:	193b      	adds	r3, r7, r4
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d001      	beq.n	8005c44 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e075      	b.n	8005d30 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	223e      	movs	r2, #62	; 0x3e
 8005c48:	2102      	movs	r1, #2
 8005c4a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2244      	movs	r2, #68	; 0x44
 8005c50:	2102      	movs	r1, #2
 8005c52:	5499      	strb	r1, [r3, r2]
 8005c54:	e03d      	b.n	8005cd2 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d114      	bne.n	8005c86 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c5c:	230e      	movs	r3, #14
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d104      	bne.n	8005c70 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c66:	230c      	movs	r3, #12
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d001      	beq.n	8005c74 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e05d      	b.n	8005d30 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	223f      	movs	r2, #63	; 0x3f
 8005c78:	2102      	movs	r1, #2
 8005c7a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2245      	movs	r2, #69	; 0x45
 8005c80:	2102      	movs	r1, #2
 8005c82:	5499      	strb	r1, [r3, r2]
 8005c84:	e025      	b.n	8005cd2 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c86:	230f      	movs	r3, #15
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10e      	bne.n	8005cae <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c90:	230e      	movs	r3, #14
 8005c92:	18fb      	adds	r3, r7, r3
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d109      	bne.n	8005cae <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c9a:	230d      	movs	r3, #13
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ca4:	230c      	movs	r3, #12
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d001      	beq.n	8005cb2 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e03e      	b.n	8005d30 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	223e      	movs	r2, #62	; 0x3e
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	223f      	movs	r2, #63	; 0x3f
 8005cbe:	2102      	movs	r1, #2
 8005cc0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2244      	movs	r2, #68	; 0x44
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2245      	movs	r2, #69	; 0x45
 8005cce:	2102      	movs	r1, #2
 8005cd0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_TIM_Encoder_Start+0xf0>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d008      	beq.n	8005cf0 <HAL_TIM_Encoder_Start+0x100>
 8005cde:	e00f      	b.n	8005d00 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f000 ff23 	bl	8006b34 <TIM_CCxChannelCmd>
      break;
 8005cee:	e016      	b.n	8005d1e <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	2104      	movs	r1, #4
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f000 ff1b 	bl	8006b34 <TIM_CCxChannelCmd>
      break;
 8005cfe:	e00e      	b.n	8005d1e <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2201      	movs	r2, #1
 8005d06:	2100      	movs	r1, #0
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f000 ff13 	bl	8006b34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2201      	movs	r2, #1
 8005d14:	2104      	movs	r1, #4
 8005d16:	0018      	movs	r0, r3
 8005d18:	f000 ff0c 	bl	8006b34 <TIM_CCxChannelCmd>
      break;
 8005d1c:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	0018      	movs	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b005      	add	sp, #20
 8005d36:	bd90      	pop	{r4, r7, pc}

08005d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2202      	movs	r2, #2
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d124      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2202      	movs	r2, #2
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d11d      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2203      	movs	r2, #3
 8005d62:	4252      	negs	r2, r2
 8005d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2203      	movs	r2, #3
 8005d74:	4013      	ands	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	f000 faec 	bl	8006358 <HAL_TIM_IC_CaptureCallback>
 8005d80:	e007      	b.n	8005d92 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 fadf 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f000 faeb 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d125      	bne.n	8005df2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2204      	movs	r2, #4
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d11e      	bne.n	8005df2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2205      	movs	r2, #5
 8005dba:	4252      	negs	r2, r2
 8005dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	23c0      	movs	r3, #192	; 0xc0
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f000 fabf 	bl	8006358 <HAL_TIM_IC_CaptureCallback>
 8005dda:	e007      	b.n	8005dec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	0018      	movs	r0, r3
 8005de0:	f000 fab2 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	0018      	movs	r0, r3
 8005de8:	f000 fabe 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d124      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	2208      	movs	r2, #8
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d11d      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2209      	movs	r2, #9
 8005e14:	4252      	negs	r2, r2
 8005e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	2203      	movs	r2, #3
 8005e26:	4013      	ands	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f000 fa93 	bl	8006358 <HAL_TIM_IC_CaptureCallback>
 8005e32:	e007      	b.n	8005e44 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	0018      	movs	r0, r3
 8005e38:	f000 fa86 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fa92 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2210      	movs	r2, #16
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d125      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	2210      	movs	r2, #16
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d11e      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2211      	movs	r2, #17
 8005e6c:	4252      	negs	r2, r2
 8005e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2208      	movs	r2, #8
 8005e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	23c0      	movs	r3, #192	; 0xc0
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4013      	ands	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	0018      	movs	r0, r3
 8005e88:	f000 fa66 	bl	8006358 <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e007      	b.n	8005e9e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f000 fa59 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f000 fa65 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d10f      	bne.n	8005ed2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d108      	bne.n	8005ed2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	4252      	negs	r2, r2
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f003 f959 	bl	8009184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2280      	movs	r2, #128	; 0x80
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d10f      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	2280      	movs	r2, #128	; 0x80
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b80      	cmp	r3, #128	; 0x80
 8005eec:	d108      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2281      	movs	r2, #129	; 0x81
 8005ef4:	4252      	negs	r2, r2
 8005ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	0018      	movs	r0, r3
 8005efc:	f000 ff54 	bl	8006da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d10e      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2280      	movs	r2, #128	; 0x80
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b80      	cmp	r3, #128	; 0x80
 8005f20:	d107      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1c      	ldr	r2, [pc, #112]	; (8005f98 <HAL_TIM_IRQHandler+0x260>)
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 ff43 	bl	8006db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2240      	movs	r2, #64	; 0x40
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d10f      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	2240      	movs	r2, #64	; 0x40
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d108      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2241      	movs	r2, #65	; 0x41
 8005f54:	4252      	negs	r2, r2
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f000 fa0c 	bl	8006378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2220      	movs	r2, #32
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d10f      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d108      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2221      	movs	r2, #33	; 0x21
 8005f82:	4252      	negs	r2, r2
 8005f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 ff05 	bl	8006d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b002      	add	sp, #8
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	fffffeff 	.word	0xfffffeff

08005f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa8:	2317      	movs	r3, #23
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	2200      	movs	r2, #0
 8005fae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	223c      	movs	r2, #60	; 0x3c
 8005fb4:	5c9b      	ldrb	r3, [r3, r2]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_TIM_PWM_ConfigChannel+0x22>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e0e5      	b.n	800618a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	223c      	movs	r2, #60	; 0x3c
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b14      	cmp	r3, #20
 8005fca:	d900      	bls.n	8005fce <HAL_TIM_PWM_ConfigChannel+0x32>
 8005fcc:	e0d1      	b.n	8006172 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	009a      	lsls	r2, r3, #2
 8005fd2:	4b70      	ldr	r3, [pc, #448]	; (8006194 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005fd4:	18d3      	adds	r3, r2, r3
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	0011      	movs	r1, r2
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f000 fa46 	bl	8006474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2108      	movs	r1, #8
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2104      	movs	r1, #4
 8006004:	438a      	bics	r2, r1
 8006006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6999      	ldr	r1, [r3, #24]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	619a      	str	r2, [r3, #24]
      break;
 800601a:	e0af      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	0011      	movs	r1, r2
 8006024:	0018      	movs	r0, r3
 8006026:	f000 faaf 	bl	8006588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699a      	ldr	r2, [r3, #24]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2180      	movs	r1, #128	; 0x80
 8006036:	0109      	lsls	r1, r1, #4
 8006038:	430a      	orrs	r2, r1
 800603a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4954      	ldr	r1, [pc, #336]	; (8006198 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006048:	400a      	ands	r2, r1
 800604a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6999      	ldr	r1, [r3, #24]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	021a      	lsls	r2, r3, #8
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	619a      	str	r2, [r3, #24]
      break;
 8006060:	e08c      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	0011      	movs	r1, r2
 800606a:	0018      	movs	r0, r3
 800606c:	f000 fb10 	bl	8006690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69da      	ldr	r2, [r3, #28]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2108      	movs	r1, #8
 800607c:	430a      	orrs	r2, r1
 800607e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69da      	ldr	r2, [r3, #28]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2104      	movs	r1, #4
 800608c:	438a      	bics	r2, r1
 800608e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69d9      	ldr	r1, [r3, #28]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	691a      	ldr	r2, [r3, #16]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	61da      	str	r2, [r3, #28]
      break;
 80060a2:	e06b      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	0011      	movs	r1, r2
 80060ac:	0018      	movs	r0, r3
 80060ae:	f000 fb77 	bl	80067a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2180      	movs	r1, #128	; 0x80
 80060be:	0109      	lsls	r1, r1, #4
 80060c0:	430a      	orrs	r2, r1
 80060c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69da      	ldr	r2, [r3, #28]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4932      	ldr	r1, [pc, #200]	; (8006198 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80060d0:	400a      	ands	r2, r1
 80060d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69d9      	ldr	r1, [r3, #28]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	021a      	lsls	r2, r3, #8
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	61da      	str	r2, [r3, #28]
      break;
 80060e8:	e048      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	0011      	movs	r1, r2
 80060f2:	0018      	movs	r0, r3
 80060f4:	f000 fbbe 	bl	8006874 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2108      	movs	r1, #8
 8006104:	430a      	orrs	r2, r1
 8006106:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2104      	movs	r1, #4
 8006114:	438a      	bics	r2, r1
 8006116:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	691a      	ldr	r2, [r3, #16]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800612a:	e027      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	0011      	movs	r1, r2
 8006134:	0018      	movs	r0, r3
 8006136:	f000 fbfd 	bl	8006934 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2180      	movs	r1, #128	; 0x80
 8006146:	0109      	lsls	r1, r1, #4
 8006148:	430a      	orrs	r2, r1
 800614a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4910      	ldr	r1, [pc, #64]	; (8006198 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006158:	400a      	ands	r2, r1
 800615a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	021a      	lsls	r2, r3, #8
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006170:	e004      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006172:	2317      	movs	r3, #23
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]
      break;
 800617a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	223c      	movs	r2, #60	; 0x3c
 8006180:	2100      	movs	r1, #0
 8006182:	5499      	strb	r1, [r3, r2]

  return status;
 8006184:	2317      	movs	r3, #23
 8006186:	18fb      	adds	r3, r7, r3
 8006188:	781b      	ldrb	r3, [r3, #0]
}
 800618a:	0018      	movs	r0, r3
 800618c:	46bd      	mov	sp, r7
 800618e:	b006      	add	sp, #24
 8006190:	bd80      	pop	{r7, pc}
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	0800e0bc 	.word	0x0800e0bc
 8006198:	fffffbff 	.word	0xfffffbff

0800619c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061a6:	230f      	movs	r3, #15
 80061a8:	18fb      	adds	r3, r7, r3
 80061aa:	2200      	movs	r2, #0
 80061ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	223c      	movs	r2, #60	; 0x3c
 80061b2:	5c9b      	ldrb	r3, [r3, r2]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIM_ConfigClockSource+0x20>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e0bc      	b.n	8006336 <HAL_TIM_ConfigClockSource+0x19a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	223c      	movs	r2, #60	; 0x3c
 80061c0:	2101      	movs	r1, #1
 80061c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	223d      	movs	r2, #61	; 0x3d
 80061c8:	2102      	movs	r1, #2
 80061ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4a5a      	ldr	r2, [pc, #360]	; (8006340 <HAL_TIM_ConfigClockSource+0x1a4>)
 80061d8:	4013      	ands	r3, r2
 80061da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4a59      	ldr	r2, [pc, #356]	; (8006344 <HAL_TIM_ConfigClockSource+0x1a8>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2280      	movs	r2, #128	; 0x80
 80061f2:	0192      	lsls	r2, r2, #6
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d040      	beq.n	800627a <HAL_TIM_ConfigClockSource+0xde>
 80061f8:	2280      	movs	r2, #128	; 0x80
 80061fa:	0192      	lsls	r2, r2, #6
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d900      	bls.n	8006202 <HAL_TIM_ConfigClockSource+0x66>
 8006200:	e088      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x178>
 8006202:	2280      	movs	r2, #128	; 0x80
 8006204:	0152      	lsls	r2, r2, #5
 8006206:	4293      	cmp	r3, r2
 8006208:	d100      	bne.n	800620c <HAL_TIM_ConfigClockSource+0x70>
 800620a:	e088      	b.n	800631e <HAL_TIM_ConfigClockSource+0x182>
 800620c:	2280      	movs	r2, #128	; 0x80
 800620e:	0152      	lsls	r2, r2, #5
 8006210:	4293      	cmp	r3, r2
 8006212:	d900      	bls.n	8006216 <HAL_TIM_ConfigClockSource+0x7a>
 8006214:	e07e      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x178>
 8006216:	2b70      	cmp	r3, #112	; 0x70
 8006218:	d018      	beq.n	800624c <HAL_TIM_ConfigClockSource+0xb0>
 800621a:	d900      	bls.n	800621e <HAL_TIM_ConfigClockSource+0x82>
 800621c:	e07a      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x178>
 800621e:	2b60      	cmp	r3, #96	; 0x60
 8006220:	d04f      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0x126>
 8006222:	d900      	bls.n	8006226 <HAL_TIM_ConfigClockSource+0x8a>
 8006224:	e076      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x178>
 8006226:	2b50      	cmp	r3, #80	; 0x50
 8006228:	d03b      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0x106>
 800622a:	d900      	bls.n	800622e <HAL_TIM_ConfigClockSource+0x92>
 800622c:	e072      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x178>
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d057      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0x146>
 8006232:	d900      	bls.n	8006236 <HAL_TIM_ConfigClockSource+0x9a>
 8006234:	e06e      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x178>
 8006236:	2b30      	cmp	r3, #48	; 0x30
 8006238:	d063      	beq.n	8006302 <HAL_TIM_ConfigClockSource+0x166>
 800623a:	d86b      	bhi.n	8006314 <HAL_TIM_ConfigClockSource+0x178>
 800623c:	2b20      	cmp	r3, #32
 800623e:	d060      	beq.n	8006302 <HAL_TIM_ConfigClockSource+0x166>
 8006240:	d868      	bhi.n	8006314 <HAL_TIM_ConfigClockSource+0x178>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d05d      	beq.n	8006302 <HAL_TIM_ConfigClockSource+0x166>
 8006246:	2b10      	cmp	r3, #16
 8006248:	d05b      	beq.n	8006302 <HAL_TIM_ConfigClockSource+0x166>
 800624a:	e063      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800625c:	f000 fc4a 	bl	8006af4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2277      	movs	r2, #119	; 0x77
 800626c:	4313      	orrs	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	609a      	str	r2, [r3, #8]
      break;
 8006278:	e052      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800628a:	f000 fc33 	bl	8006af4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2180      	movs	r1, #128	; 0x80
 800629a:	01c9      	lsls	r1, r1, #7
 800629c:	430a      	orrs	r2, r1
 800629e:	609a      	str	r2, [r3, #8]
      break;
 80062a0:	e03e      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ae:	001a      	movs	r2, r3
 80062b0:	f000 fba4 	bl	80069fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2150      	movs	r1, #80	; 0x50
 80062ba:	0018      	movs	r0, r3
 80062bc:	f000 fbfe 	bl	8006abc <TIM_ITRx_SetConfig>
      break;
 80062c0:	e02e      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ce:	001a      	movs	r2, r3
 80062d0:	f000 fbc2 	bl	8006a58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2160      	movs	r1, #96	; 0x60
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 fbee 	bl	8006abc <TIM_ITRx_SetConfig>
      break;
 80062e0:	e01e      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ee:	001a      	movs	r2, r3
 80062f0:	f000 fb84 	bl	80069fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2140      	movs	r1, #64	; 0x40
 80062fa:	0018      	movs	r0, r3
 80062fc:	f000 fbde 	bl	8006abc <TIM_ITRx_SetConfig>
      break;
 8006300:	e00e      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	0019      	movs	r1, r3
 800630c:	0010      	movs	r0, r2
 800630e:	f000 fbd5 	bl	8006abc <TIM_ITRx_SetConfig>
      break;
 8006312:	e005      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006314:	230f      	movs	r3, #15
 8006316:	18fb      	adds	r3, r7, r3
 8006318:	2201      	movs	r2, #1
 800631a:	701a      	strb	r2, [r3, #0]
      break;
 800631c:	e000      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800631e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	223d      	movs	r2, #61	; 0x3d
 8006324:	2101      	movs	r1, #1
 8006326:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	223c      	movs	r2, #60	; 0x3c
 800632c:	2100      	movs	r1, #0
 800632e:	5499      	strb	r1, [r3, r2]

  return status;
 8006330:	230f      	movs	r3, #15
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	781b      	ldrb	r3, [r3, #0]
}
 8006336:	0018      	movs	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	b004      	add	sp, #16
 800633c:	bd80      	pop	{r7, pc}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	ffceff88 	.word	0xffceff88
 8006344:	ffff00ff 	.word	0xffff00ff

08006348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006350:	46c0      	nop			; (mov r8, r8)
 8006352:	46bd      	mov	sp, r7
 8006354:	b002      	add	sp, #8
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	b002      	add	sp, #8
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b002      	add	sp, #8
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006380:	46c0      	nop			; (mov r8, r8)
 8006382:	46bd      	mov	sp, r7
 8006384:	b002      	add	sp, #8
 8006386:	bd80      	pop	{r7, pc}

08006388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2f      	ldr	r2, [pc, #188]	; (8006458 <TIM_Base_SetConfig+0xd0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_Base_SetConfig+0x20>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a2e      	ldr	r2, [pc, #184]	; (800645c <TIM_Base_SetConfig+0xd4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d108      	bne.n	80063ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2270      	movs	r2, #112	; 0x70
 80063ac:	4393      	bics	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a26      	ldr	r2, [pc, #152]	; (8006458 <TIM_Base_SetConfig+0xd0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <TIM_Base_SetConfig+0x62>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a25      	ldr	r2, [pc, #148]	; (800645c <TIM_Base_SetConfig+0xd4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00f      	beq.n	80063ea <TIM_Base_SetConfig+0x62>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a24      	ldr	r2, [pc, #144]	; (8006460 <TIM_Base_SetConfig+0xd8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00b      	beq.n	80063ea <TIM_Base_SetConfig+0x62>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a23      	ldr	r2, [pc, #140]	; (8006464 <TIM_Base_SetConfig+0xdc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d007      	beq.n	80063ea <TIM_Base_SetConfig+0x62>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a22      	ldr	r2, [pc, #136]	; (8006468 <TIM_Base_SetConfig+0xe0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_Base_SetConfig+0x62>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a21      	ldr	r2, [pc, #132]	; (800646c <TIM_Base_SetConfig+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d108      	bne.n	80063fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4a20      	ldr	r2, [pc, #128]	; (8006470 <TIM_Base_SetConfig+0xe8>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	4393      	bics	r3, r2
 8006402:	001a      	movs	r2, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a0c      	ldr	r2, [pc, #48]	; (8006458 <TIM_Base_SetConfig+0xd0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00b      	beq.n	8006442 <TIM_Base_SetConfig+0xba>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a0d      	ldr	r2, [pc, #52]	; (8006464 <TIM_Base_SetConfig+0xdc>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d007      	beq.n	8006442 <TIM_Base_SetConfig+0xba>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a0c      	ldr	r2, [pc, #48]	; (8006468 <TIM_Base_SetConfig+0xe0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_Base_SetConfig+0xba>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a0b      	ldr	r2, [pc, #44]	; (800646c <TIM_Base_SetConfig+0xe4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d103      	bne.n	800644a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	615a      	str	r2, [r3, #20]
}
 8006450:	46c0      	nop			; (mov r8, r8)
 8006452:	46bd      	mov	sp, r7
 8006454:	b004      	add	sp, #16
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40000400 	.word	0x40000400
 8006460:	40002000 	.word	0x40002000
 8006464:	40014000 	.word	0x40014000
 8006468:	40014400 	.word	0x40014400
 800646c:	40014800 	.word	0x40014800
 8006470:	fffffcff 	.word	0xfffffcff

08006474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	2201      	movs	r2, #1
 8006484:	4393      	bics	r3, r2
 8006486:	001a      	movs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4a32      	ldr	r2, [pc, #200]	; (800656c <TIM_OC1_SetConfig+0xf8>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2203      	movs	r2, #3
 80064aa:	4393      	bics	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2202      	movs	r2, #2
 80064bc:	4393      	bics	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a28      	ldr	r2, [pc, #160]	; (8006570 <TIM_OC1_SetConfig+0xfc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00b      	beq.n	80064ea <TIM_OC1_SetConfig+0x76>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a27      	ldr	r2, [pc, #156]	; (8006574 <TIM_OC1_SetConfig+0x100>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d007      	beq.n	80064ea <TIM_OC1_SetConfig+0x76>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a26      	ldr	r2, [pc, #152]	; (8006578 <TIM_OC1_SetConfig+0x104>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d003      	beq.n	80064ea <TIM_OC1_SetConfig+0x76>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a25      	ldr	r2, [pc, #148]	; (800657c <TIM_OC1_SetConfig+0x108>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10c      	bne.n	8006504 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2208      	movs	r2, #8
 80064ee:	4393      	bics	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2204      	movs	r2, #4
 8006500:	4393      	bics	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1a      	ldr	r2, [pc, #104]	; (8006570 <TIM_OC1_SetConfig+0xfc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00b      	beq.n	8006524 <TIM_OC1_SetConfig+0xb0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a19      	ldr	r2, [pc, #100]	; (8006574 <TIM_OC1_SetConfig+0x100>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_OC1_SetConfig+0xb0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <TIM_OC1_SetConfig+0x104>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_OC1_SetConfig+0xb0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a17      	ldr	r2, [pc, #92]	; (800657c <TIM_OC1_SetConfig+0x108>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d111      	bne.n	8006548 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	4a16      	ldr	r2, [pc, #88]	; (8006580 <TIM_OC1_SetConfig+0x10c>)
 8006528:	4013      	ands	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	4a15      	ldr	r2, [pc, #84]	; (8006584 <TIM_OC1_SetConfig+0x110>)
 8006530:	4013      	ands	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	621a      	str	r2, [r3, #32]
}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	46bd      	mov	sp, r7
 8006566:	b006      	add	sp, #24
 8006568:	bd80      	pop	{r7, pc}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	fffeff8f 	.word	0xfffeff8f
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40014000 	.word	0x40014000
 8006578:	40014400 	.word	0x40014400
 800657c:	40014800 	.word	0x40014800
 8006580:	fffffeff 	.word	0xfffffeff
 8006584:	fffffdff 	.word	0xfffffdff

08006588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	2210      	movs	r2, #16
 8006598:	4393      	bics	r3, r2
 800659a:	001a      	movs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a2e      	ldr	r2, [pc, #184]	; (8006670 <TIM_OC2_SetConfig+0xe8>)
 80065b6:	4013      	ands	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4a2d      	ldr	r2, [pc, #180]	; (8006674 <TIM_OC2_SetConfig+0xec>)
 80065be:	4013      	ands	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2220      	movs	r2, #32
 80065d2:	4393      	bics	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a24      	ldr	r2, [pc, #144]	; (8006678 <TIM_OC2_SetConfig+0xf0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d10d      	bne.n	8006606 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2280      	movs	r2, #128	; 0x80
 80065ee:	4393      	bics	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2240      	movs	r2, #64	; 0x40
 8006602:	4393      	bics	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <TIM_OC2_SetConfig+0xf0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00b      	beq.n	8006626 <TIM_OC2_SetConfig+0x9e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a1a      	ldr	r2, [pc, #104]	; (800667c <TIM_OC2_SetConfig+0xf4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d007      	beq.n	8006626 <TIM_OC2_SetConfig+0x9e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a19      	ldr	r2, [pc, #100]	; (8006680 <TIM_OC2_SetConfig+0xf8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d003      	beq.n	8006626 <TIM_OC2_SetConfig+0x9e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a18      	ldr	r2, [pc, #96]	; (8006684 <TIM_OC2_SetConfig+0xfc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d113      	bne.n	800664e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4a17      	ldr	r2, [pc, #92]	; (8006688 <TIM_OC2_SetConfig+0x100>)
 800662a:	4013      	ands	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4a16      	ldr	r2, [pc, #88]	; (800668c <TIM_OC2_SetConfig+0x104>)
 8006632:	4013      	ands	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	621a      	str	r2, [r3, #32]
}
 8006668:	46c0      	nop			; (mov r8, r8)
 800666a:	46bd      	mov	sp, r7
 800666c:	b006      	add	sp, #24
 800666e:	bd80      	pop	{r7, pc}
 8006670:	feff8fff 	.word	0xfeff8fff
 8006674:	fffffcff 	.word	0xfffffcff
 8006678:	40012c00 	.word	0x40012c00
 800667c:	40014000 	.word	0x40014000
 8006680:	40014400 	.word	0x40014400
 8006684:	40014800 	.word	0x40014800
 8006688:	fffffbff 	.word	0xfffffbff
 800668c:	fffff7ff 	.word	0xfffff7ff

08006690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	4a35      	ldr	r2, [pc, #212]	; (8006774 <TIM_OC3_SetConfig+0xe4>)
 80066a0:	401a      	ands	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a2f      	ldr	r2, [pc, #188]	; (8006778 <TIM_OC3_SetConfig+0xe8>)
 80066bc:	4013      	ands	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2203      	movs	r2, #3
 80066c4:	4393      	bics	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	4a29      	ldr	r2, [pc, #164]	; (800677c <TIM_OC3_SetConfig+0xec>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a25      	ldr	r2, [pc, #148]	; (8006780 <TIM_OC3_SetConfig+0xf0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d10d      	bne.n	800670a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4a24      	ldr	r2, [pc, #144]	; (8006784 <TIM_OC3_SetConfig+0xf4>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	4a20      	ldr	r2, [pc, #128]	; (8006788 <TIM_OC3_SetConfig+0xf8>)
 8006706:	4013      	ands	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <TIM_OC3_SetConfig+0xf0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00b      	beq.n	800672a <TIM_OC3_SetConfig+0x9a>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1d      	ldr	r2, [pc, #116]	; (800678c <TIM_OC3_SetConfig+0xfc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <TIM_OC3_SetConfig+0x9a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1c      	ldr	r2, [pc, #112]	; (8006790 <TIM_OC3_SetConfig+0x100>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <TIM_OC3_SetConfig+0x9a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <TIM_OC3_SetConfig+0x104>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d113      	bne.n	8006752 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4a1a      	ldr	r2, [pc, #104]	; (8006798 <TIM_OC3_SetConfig+0x108>)
 800672e:	4013      	ands	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4a19      	ldr	r2, [pc, #100]	; (800679c <TIM_OC3_SetConfig+0x10c>)
 8006736:	4013      	ands	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	621a      	str	r2, [r3, #32]
}
 800676c:	46c0      	nop			; (mov r8, r8)
 800676e:	46bd      	mov	sp, r7
 8006770:	b006      	add	sp, #24
 8006772:	bd80      	pop	{r7, pc}
 8006774:	fffffeff 	.word	0xfffffeff
 8006778:	fffeff8f 	.word	0xfffeff8f
 800677c:	fffffdff 	.word	0xfffffdff
 8006780:	40012c00 	.word	0x40012c00
 8006784:	fffff7ff 	.word	0xfffff7ff
 8006788:	fffffbff 	.word	0xfffffbff
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800
 8006798:	ffffefff 	.word	0xffffefff
 800679c:	ffffdfff 	.word	0xffffdfff

080067a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	4a28      	ldr	r2, [pc, #160]	; (8006850 <TIM_OC4_SetConfig+0xb0>)
 80067b0:	401a      	ands	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4a22      	ldr	r2, [pc, #136]	; (8006854 <TIM_OC4_SetConfig+0xb4>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4a21      	ldr	r2, [pc, #132]	; (8006858 <TIM_OC4_SetConfig+0xb8>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	4a1d      	ldr	r2, [pc, #116]	; (800685c <TIM_OC4_SetConfig+0xbc>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	031b      	lsls	r3, r3, #12
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a19      	ldr	r2, [pc, #100]	; (8006860 <TIM_OC4_SetConfig+0xc0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00b      	beq.n	8006818 <TIM_OC4_SetConfig+0x78>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a18      	ldr	r2, [pc, #96]	; (8006864 <TIM_OC4_SetConfig+0xc4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d007      	beq.n	8006818 <TIM_OC4_SetConfig+0x78>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a17      	ldr	r2, [pc, #92]	; (8006868 <TIM_OC4_SetConfig+0xc8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d003      	beq.n	8006818 <TIM_OC4_SetConfig+0x78>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a16      	ldr	r2, [pc, #88]	; (800686c <TIM_OC4_SetConfig+0xcc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d109      	bne.n	800682c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	4a15      	ldr	r2, [pc, #84]	; (8006870 <TIM_OC4_SetConfig+0xd0>)
 800681c:	4013      	ands	r3, r2
 800681e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	019b      	lsls	r3, r3, #6
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	46bd      	mov	sp, r7
 800684a:	b006      	add	sp, #24
 800684c:	bd80      	pop	{r7, pc}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	ffffefff 	.word	0xffffefff
 8006854:	feff8fff 	.word	0xfeff8fff
 8006858:	fffffcff 	.word	0xfffffcff
 800685c:	ffffdfff 	.word	0xffffdfff
 8006860:	40012c00 	.word	0x40012c00
 8006864:	40014000 	.word	0x40014000
 8006868:	40014400 	.word	0x40014400
 800686c:	40014800 	.word	0x40014800
 8006870:	ffffbfff 	.word	0xffffbfff

08006874 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	4a25      	ldr	r2, [pc, #148]	; (8006918 <TIM_OC5_SetConfig+0xa4>)
 8006884:	401a      	ands	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4a1f      	ldr	r2, [pc, #124]	; (800691c <TIM_OC5_SetConfig+0xa8>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4a1b      	ldr	r2, [pc, #108]	; (8006920 <TIM_OC5_SetConfig+0xac>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a17      	ldr	r2, [pc, #92]	; (8006924 <TIM_OC5_SetConfig+0xb0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00b      	beq.n	80068e2 <TIM_OC5_SetConfig+0x6e>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a16      	ldr	r2, [pc, #88]	; (8006928 <TIM_OC5_SetConfig+0xb4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d007      	beq.n	80068e2 <TIM_OC5_SetConfig+0x6e>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a15      	ldr	r2, [pc, #84]	; (800692c <TIM_OC5_SetConfig+0xb8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d003      	beq.n	80068e2 <TIM_OC5_SetConfig+0x6e>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a14      	ldr	r2, [pc, #80]	; (8006930 <TIM_OC5_SetConfig+0xbc>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d109      	bne.n	80068f6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	4a0c      	ldr	r2, [pc, #48]	; (8006918 <TIM_OC5_SetConfig+0xa4>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	621a      	str	r2, [r3, #32]
}
 8006910:	46c0      	nop			; (mov r8, r8)
 8006912:	46bd      	mov	sp, r7
 8006914:	b006      	add	sp, #24
 8006916:	bd80      	pop	{r7, pc}
 8006918:	fffeffff 	.word	0xfffeffff
 800691c:	fffeff8f 	.word	0xfffeff8f
 8006920:	fffdffff 	.word	0xfffdffff
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40014000 	.word	0x40014000
 800692c:	40014400 	.word	0x40014400
 8006930:	40014800 	.word	0x40014800

08006934 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	4a26      	ldr	r2, [pc, #152]	; (80069dc <TIM_OC6_SetConfig+0xa8>)
 8006944:	401a      	ands	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4a20      	ldr	r2, [pc, #128]	; (80069e0 <TIM_OC6_SetConfig+0xac>)
 8006960:	4013      	ands	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	4a1c      	ldr	r2, [pc, #112]	; (80069e4 <TIM_OC6_SetConfig+0xb0>)
 8006974:	4013      	ands	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	051b      	lsls	r3, r3, #20
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <TIM_OC6_SetConfig+0xb4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00b      	beq.n	80069a4 <TIM_OC6_SetConfig+0x70>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a17      	ldr	r2, [pc, #92]	; (80069ec <TIM_OC6_SetConfig+0xb8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d007      	beq.n	80069a4 <TIM_OC6_SetConfig+0x70>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <TIM_OC6_SetConfig+0xbc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d003      	beq.n	80069a4 <TIM_OC6_SetConfig+0x70>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <TIM_OC6_SetConfig+0xc0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d109      	bne.n	80069b8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	4a14      	ldr	r2, [pc, #80]	; (80069f8 <TIM_OC6_SetConfig+0xc4>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	029b      	lsls	r3, r3, #10
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	46bd      	mov	sp, r7
 80069d6:	b006      	add	sp, #24
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	ffefffff 	.word	0xffefffff
 80069e0:	feff8fff 	.word	0xfeff8fff
 80069e4:	ffdfffff 	.word	0xffdfffff
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40014000 	.word	0x40014000
 80069f0:	40014400 	.word	0x40014400
 80069f4:	40014800 	.word	0x40014800
 80069f8:	fffbffff 	.word	0xfffbffff

080069fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	2201      	movs	r2, #1
 8006a14:	4393      	bics	r3, r2
 8006a16:	001a      	movs	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	22f0      	movs	r2, #240	; 0xf0
 8006a26:	4393      	bics	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	220a      	movs	r2, #10
 8006a38:	4393      	bics	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	621a      	str	r2, [r3, #32]
}
 8006a50:	46c0      	nop			; (mov r8, r8)
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b006      	add	sp, #24
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	2210      	movs	r2, #16
 8006a6a:	4393      	bics	r3, r2
 8006a6c:	001a      	movs	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	4a0d      	ldr	r2, [pc, #52]	; (8006ab8 <TIM_TI2_ConfigInputStage+0x60>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	031b      	lsls	r3, r3, #12
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	22a0      	movs	r2, #160	; 0xa0
 8006a94:	4393      	bics	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	621a      	str	r2, [r3, #32]
}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	b006      	add	sp, #24
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	ffff0fff 	.word	0xffff0fff

08006abc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a08      	ldr	r2, [pc, #32]	; (8006af0 <TIM_ITRx_SetConfig+0x34>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	2207      	movs	r2, #7
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	609a      	str	r2, [r3, #8]
}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b004      	add	sp, #16
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	ffcfff8f 	.word	0xffcfff8f

08006af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <TIM_ETR_SetConfig+0x3c>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	021a      	lsls	r2, r3, #8
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	609a      	str	r2, [r3, #8]
}
 8006b28:	46c0      	nop			; (mov r8, r8)
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	b006      	add	sp, #24
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	ffff00ff 	.word	0xffff00ff

08006b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	221f      	movs	r2, #31
 8006b44:	4013      	ands	r3, r2
 8006b46:	2201      	movs	r2, #1
 8006b48:	409a      	lsls	r2, r3
 8006b4a:	0013      	movs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	43d2      	mvns	r2, r2
 8006b56:	401a      	ands	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a1a      	ldr	r2, [r3, #32]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	211f      	movs	r1, #31
 8006b64:	400b      	ands	r3, r1
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	4099      	lsls	r1, r3
 8006b6a:	000b      	movs	r3, r1
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	46bd      	mov	sp, r7
 8006b76:	b006      	add	sp, #24
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	223c      	movs	r2, #60	; 0x3c
 8006b8a:	5c9b      	ldrb	r3, [r3, r2]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e04f      	b.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	223c      	movs	r2, #60	; 0x3c
 8006b98:	2101      	movs	r1, #1
 8006b9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	223d      	movs	r2, #61	; 0x3d
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a20      	ldr	r2, [pc, #128]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d108      	bne.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2270      	movs	r2, #112	; 0x70
 8006bd4:	4393      	bics	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a13      	ldr	r2, [pc, #76]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d009      	beq.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a12      	ldr	r2, [pc, #72]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d004      	beq.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a11      	ldr	r2, [pc, #68]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d10c      	bne.n	8006c22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2280      	movs	r2, #128	; 0x80
 8006c0c:	4393      	bics	r3, r2
 8006c0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	223d      	movs	r2, #61	; 0x3d
 8006c26:	2101      	movs	r1, #1
 8006c28:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	223c      	movs	r2, #60	; 0x3c
 8006c2e:	2100      	movs	r1, #0
 8006c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	0018      	movs	r0, r3
 8006c36:	46bd      	mov	sp, r7
 8006c38:	b004      	add	sp, #16
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40012c00 	.word	0x40012c00
 8006c40:	ff0fffff 	.word	0xff0fffff
 8006c44:	40000400 	.word	0x40000400
 8006c48:	40014000 	.word	0x40014000

08006c4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	223c      	movs	r2, #60	; 0x3c
 8006c5e:	5c9b      	ldrb	r3, [r3, r2]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e079      	b.n	8006d5c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	223c      	movs	r2, #60	; 0x3c
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	22ff      	movs	r2, #255	; 0xff
 8006c74:	4393      	bics	r3, r2
 8006c76:	001a      	movs	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a38      	ldr	r2, [pc, #224]	; (8006d64 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006c84:	401a      	ands	r2, r3
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4a35      	ldr	r2, [pc, #212]	; (8006d68 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006c92:	401a      	ands	r2, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4a33      	ldr	r2, [pc, #204]	; (8006d6c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006ca0:	401a      	ands	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4a30      	ldr	r2, [pc, #192]	; (8006d70 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006cae:	401a      	ands	r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4a2e      	ldr	r2, [pc, #184]	; (8006d74 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006cbc:	401a      	ands	r2, r3
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4a2b      	ldr	r2, [pc, #172]	; (8006d78 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006cca:	401a      	ands	r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4a29      	ldr	r2, [pc, #164]	; (8006d7c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006cd8:	401a      	ands	r2, r3
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	041b      	lsls	r3, r3, #16
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a25      	ldr	r2, [pc, #148]	; (8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d106      	bne.n	8006cfc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4a24      	ldr	r2, [pc, #144]	; (8006d84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006cf2:	401a      	ands	r2, r3
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d121      	bne.n	8006d4a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a1f      	ldr	r2, [pc, #124]	; (8006d88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006d0a:	401a      	ands	r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	051b      	lsls	r3, r3, #20
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a1c      	ldr	r2, [pc, #112]	; (8006d8c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006d1a:	401a      	ands	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4a1a      	ldr	r2, [pc, #104]	; (8006d90 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006d28:	401a      	ands	r2, r3
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a12      	ldr	r2, [pc, #72]	; (8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d106      	bne.n	8006d4a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4a15      	ldr	r2, [pc, #84]	; (8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006d40:	401a      	ands	r2, r3
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	223c      	movs	r2, #60	; 0x3c
 8006d56:	2100      	movs	r1, #0
 8006d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b004      	add	sp, #16
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	fffffcff 	.word	0xfffffcff
 8006d68:	fffffbff 	.word	0xfffffbff
 8006d6c:	fffff7ff 	.word	0xfffff7ff
 8006d70:	ffffefff 	.word	0xffffefff
 8006d74:	ffffdfff 	.word	0xffffdfff
 8006d78:	ffffbfff 	.word	0xffffbfff
 8006d7c:	fff0ffff 	.word	0xfff0ffff
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	efffffff 	.word	0xefffffff
 8006d88:	ff0fffff 	.word	0xff0fffff
 8006d8c:	feffffff 	.word	0xfeffffff
 8006d90:	fdffffff 	.word	0xfdffffff
 8006d94:	dfffffff 	.word	0xdfffffff

08006d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006da0:	46c0      	nop			; (mov r8, r8)
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b002      	add	sp, #8
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006db0:	46c0      	nop			; (mov r8, r8)
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b002      	add	sp, #8
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dc0:	46c0      	nop			; (mov r8, r8)
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	b002      	add	sp, #8
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e046      	b.n	8006e68 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2288      	movs	r2, #136	; 0x88
 8006dde:	589b      	ldr	r3, [r3, r2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d107      	bne.n	8006df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2284      	movs	r2, #132	; 0x84
 8006de8:	2100      	movs	r1, #0
 8006dea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	0018      	movs	r0, r3
 8006df0:	f7fd f978 	bl	80040e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2288      	movs	r2, #136	; 0x88
 8006df8:	2124      	movs	r1, #36	; 0x24
 8006dfa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2101      	movs	r1, #1
 8006e08:	438a      	bics	r2, r1
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f000 fc66 	bl	80076e0 <UART_SetConfig>
 8006e14:	0003      	movs	r3, r0
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e024      	b.n	8006e68 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f000 fdfd 	bl	8007a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	490d      	ldr	r1, [pc, #52]	; (8006e70 <HAL_UART_Init+0xa8>)
 8006e3a:	400a      	ands	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	212a      	movs	r1, #42	; 0x2a
 8006e4a:	438a      	bics	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2101      	movs	r1, #1
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	0018      	movs	r0, r3
 8006e62:	f000 fe95 	bl	8007b90 <UART_CheckIdleState>
 8006e66:	0003      	movs	r3, r0
}
 8006e68:	0018      	movs	r0, r3
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	b002      	add	sp, #8
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	ffffb7ff 	.word	0xffffb7ff

08006e74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	; 0x28
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	1dbb      	adds	r3, r7, #6
 8006e82:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2288      	movs	r2, #136	; 0x88
 8006e88:	589b      	ldr	r3, [r3, r2]
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d000      	beq.n	8006e90 <HAL_UART_Transmit+0x1c>
 8006e8e:	e088      	b.n	8006fa2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_UART_Transmit+0x2a>
 8006e96:	1dbb      	adds	r3, r7, #6
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e080      	b.n	8006fa4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	2380      	movs	r3, #128	; 0x80
 8006ea8:	015b      	lsls	r3, r3, #5
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d109      	bne.n	8006ec2 <HAL_UART_Transmit+0x4e>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d105      	bne.n	8006ec2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4013      	ands	r3, r2
 8006ebc:	d001      	beq.n	8006ec2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e070      	b.n	8006fa4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2290      	movs	r2, #144	; 0x90
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2288      	movs	r2, #136	; 0x88
 8006ece:	2121      	movs	r1, #33	; 0x21
 8006ed0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ed2:	f7fd fa15 	bl	8004300 <HAL_GetTick>
 8006ed6:	0003      	movs	r3, r0
 8006ed8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	1dba      	adds	r2, r7, #6
 8006ede:	2154      	movs	r1, #84	; 0x54
 8006ee0:	8812      	ldrh	r2, [r2, #0]
 8006ee2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	1dba      	adds	r2, r7, #6
 8006ee8:	2156      	movs	r1, #86	; 0x56
 8006eea:	8812      	ldrh	r2, [r2, #0]
 8006eec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	2380      	movs	r3, #128	; 0x80
 8006ef4:	015b      	lsls	r3, r3, #5
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d108      	bne.n	8006f0c <HAL_UART_Transmit+0x98>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	e003      	b.n	8006f14 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f14:	e02c      	b.n	8006f70 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	0013      	movs	r3, r2
 8006f20:	2200      	movs	r2, #0
 8006f22:	2180      	movs	r1, #128	; 0x80
 8006f24:	f000 fe82 	bl	8007c2c <UART_WaitOnFlagUntilTimeout>
 8006f28:	1e03      	subs	r3, r0, #0
 8006f2a:	d001      	beq.n	8006f30 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e039      	b.n	8006fa4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10b      	bne.n	8006f4e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	001a      	movs	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	05d2      	lsls	r2, r2, #23
 8006f42:	0dd2      	lsrs	r2, r2, #23
 8006f44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	3302      	adds	r3, #2
 8006f4a:	61bb      	str	r3, [r7, #24]
 8006f4c:	e007      	b.n	8006f5e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2256      	movs	r2, #86	; 0x56
 8006f62:	5a9b      	ldrh	r3, [r3, r2]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b299      	uxth	r1, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2256      	movs	r2, #86	; 0x56
 8006f6e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2256      	movs	r2, #86	; 0x56
 8006f74:	5a9b      	ldrh	r3, [r3, r2]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1cc      	bne.n	8006f16 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	0013      	movs	r3, r2
 8006f86:	2200      	movs	r2, #0
 8006f88:	2140      	movs	r1, #64	; 0x40
 8006f8a:	f000 fe4f 	bl	8007c2c <UART_WaitOnFlagUntilTimeout>
 8006f8e:	1e03      	subs	r3, r0, #0
 8006f90:	d001      	beq.n	8006f96 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e006      	b.n	8006fa4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2288      	movs	r2, #136	; 0x88
 8006f9a:	2120      	movs	r1, #32
 8006f9c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e000      	b.n	8006fa4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006fa2:	2302      	movs	r3, #2
  }
}
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b008      	add	sp, #32
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	1dbb      	adds	r3, r7, #6
 8006fb8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	228c      	movs	r2, #140	; 0x8c
 8006fbe:	589b      	ldr	r3, [r3, r2]
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d145      	bne.n	8007050 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <HAL_UART_Receive_IT+0x26>
 8006fca:	1dbb      	adds	r3, r7, #6
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e03d      	b.n	8007052 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	2380      	movs	r3, #128	; 0x80
 8006fdc:	015b      	lsls	r3, r3, #5
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d109      	bne.n	8006ff6 <HAL_UART_Receive_IT+0x4a>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2201      	movs	r2, #1
 8006fee:	4013      	ands	r3, r2
 8006ff0:	d001      	beq.n	8006ff6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e02d      	b.n	8007052 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	2380      	movs	r3, #128	; 0x80
 8007004:	041b      	lsls	r3, r3, #16
 8007006:	4013      	ands	r3, r2
 8007008:	d019      	beq.n	800703e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800700a:	f3ef 8310 	mrs	r3, PRIMASK
 800700e:	613b      	str	r3, [r7, #16]
  return(result);
 8007010:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007012:	61fb      	str	r3, [r7, #28]
 8007014:	2301      	movs	r3, #1
 8007016:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f383 8810 	msr	PRIMASK, r3
}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	04c9      	lsls	r1, r1, #19
 800702e:	430a      	orrs	r2, r1
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	f383 8810 	msr	PRIMASK, r3
}
 800703c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800703e:	1dbb      	adds	r3, r7, #6
 8007040:	881a      	ldrh	r2, [r3, #0]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	0018      	movs	r0, r3
 8007048:	f000 feb8 	bl	8007dbc <UART_Start_Receive_IT>
 800704c:	0003      	movs	r3, r0
 800704e:	e000      	b.n	8007052 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007050:	2302      	movs	r3, #2
  }
}
 8007052:	0018      	movs	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	b008      	add	sp, #32
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800705c:	b5b0      	push	{r4, r5, r7, lr}
 800705e:	b0aa      	sub	sp, #168	; 0xa8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	22a4      	movs	r2, #164	; 0xa4
 800706c:	18b9      	adds	r1, r7, r2
 800706e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	20a0      	movs	r0, #160	; 0xa0
 8007078:	1839      	adds	r1, r7, r0
 800707a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	249c      	movs	r4, #156	; 0x9c
 8007084:	1939      	adds	r1, r7, r4
 8007086:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007088:	0011      	movs	r1, r2
 800708a:	18bb      	adds	r3, r7, r2
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4aa2      	ldr	r2, [pc, #648]	; (8007318 <HAL_UART_IRQHandler+0x2bc>)
 8007090:	4013      	ands	r3, r2
 8007092:	2298      	movs	r2, #152	; 0x98
 8007094:	18bd      	adds	r5, r7, r2
 8007096:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007098:	18bb      	adds	r3, r7, r2
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d11a      	bne.n	80070d6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070a0:	187b      	adds	r3, r7, r1
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2220      	movs	r2, #32
 80070a6:	4013      	ands	r3, r2
 80070a8:	d015      	beq.n	80070d6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070aa:	183b      	adds	r3, r7, r0
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2220      	movs	r2, #32
 80070b0:	4013      	ands	r3, r2
 80070b2:	d105      	bne.n	80070c0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070b4:	193b      	adds	r3, r7, r4
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	2380      	movs	r3, #128	; 0x80
 80070ba:	055b      	lsls	r3, r3, #21
 80070bc:	4013      	ands	r3, r2
 80070be:	d00a      	beq.n	80070d6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d100      	bne.n	80070ca <HAL_UART_IRQHandler+0x6e>
 80070c8:	e2dc      	b.n	8007684 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	0010      	movs	r0, r2
 80070d2:	4798      	blx	r3
      }
      return;
 80070d4:	e2d6      	b.n	8007684 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070d6:	2398      	movs	r3, #152	; 0x98
 80070d8:	18fb      	adds	r3, r7, r3
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d100      	bne.n	80070e2 <HAL_UART_IRQHandler+0x86>
 80070e0:	e122      	b.n	8007328 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80070e2:	239c      	movs	r3, #156	; 0x9c
 80070e4:	18fb      	adds	r3, r7, r3
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a8c      	ldr	r2, [pc, #560]	; (800731c <HAL_UART_IRQHandler+0x2c0>)
 80070ea:	4013      	ands	r3, r2
 80070ec:	d106      	bne.n	80070fc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80070ee:	23a0      	movs	r3, #160	; 0xa0
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a8a      	ldr	r2, [pc, #552]	; (8007320 <HAL_UART_IRQHandler+0x2c4>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	d100      	bne.n	80070fc <HAL_UART_IRQHandler+0xa0>
 80070fa:	e115      	b.n	8007328 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070fc:	23a4      	movs	r3, #164	; 0xa4
 80070fe:	18fb      	adds	r3, r7, r3
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2201      	movs	r2, #1
 8007104:	4013      	ands	r3, r2
 8007106:	d012      	beq.n	800712e <HAL_UART_IRQHandler+0xd2>
 8007108:	23a0      	movs	r3, #160	; 0xa0
 800710a:	18fb      	adds	r3, r7, r3
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	2380      	movs	r3, #128	; 0x80
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	4013      	ands	r3, r2
 8007114:	d00b      	beq.n	800712e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2201      	movs	r2, #1
 800711c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2290      	movs	r2, #144	; 0x90
 8007122:	589b      	ldr	r3, [r3, r2]
 8007124:	2201      	movs	r2, #1
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2190      	movs	r1, #144	; 0x90
 800712c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800712e:	23a4      	movs	r3, #164	; 0xa4
 8007130:	18fb      	adds	r3, r7, r3
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2202      	movs	r2, #2
 8007136:	4013      	ands	r3, r2
 8007138:	d011      	beq.n	800715e <HAL_UART_IRQHandler+0x102>
 800713a:	239c      	movs	r3, #156	; 0x9c
 800713c:	18fb      	adds	r3, r7, r3
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2201      	movs	r2, #1
 8007142:	4013      	ands	r3, r2
 8007144:	d00b      	beq.n	800715e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2202      	movs	r2, #2
 800714c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2290      	movs	r2, #144	; 0x90
 8007152:	589b      	ldr	r3, [r3, r2]
 8007154:	2204      	movs	r2, #4
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2190      	movs	r1, #144	; 0x90
 800715c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800715e:	23a4      	movs	r3, #164	; 0xa4
 8007160:	18fb      	adds	r3, r7, r3
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2204      	movs	r2, #4
 8007166:	4013      	ands	r3, r2
 8007168:	d011      	beq.n	800718e <HAL_UART_IRQHandler+0x132>
 800716a:	239c      	movs	r3, #156	; 0x9c
 800716c:	18fb      	adds	r3, r7, r3
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2201      	movs	r2, #1
 8007172:	4013      	ands	r3, r2
 8007174:	d00b      	beq.n	800718e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2204      	movs	r2, #4
 800717c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2290      	movs	r2, #144	; 0x90
 8007182:	589b      	ldr	r3, [r3, r2]
 8007184:	2202      	movs	r2, #2
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2190      	movs	r1, #144	; 0x90
 800718c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800718e:	23a4      	movs	r3, #164	; 0xa4
 8007190:	18fb      	adds	r3, r7, r3
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2208      	movs	r2, #8
 8007196:	4013      	ands	r3, r2
 8007198:	d017      	beq.n	80071ca <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800719a:	23a0      	movs	r3, #160	; 0xa0
 800719c:	18fb      	adds	r3, r7, r3
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2220      	movs	r2, #32
 80071a2:	4013      	ands	r3, r2
 80071a4:	d105      	bne.n	80071b2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80071a6:	239c      	movs	r3, #156	; 0x9c
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a5b      	ldr	r2, [pc, #364]	; (800731c <HAL_UART_IRQHandler+0x2c0>)
 80071ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071b0:	d00b      	beq.n	80071ca <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2208      	movs	r2, #8
 80071b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2290      	movs	r2, #144	; 0x90
 80071be:	589b      	ldr	r3, [r3, r2]
 80071c0:	2208      	movs	r2, #8
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2190      	movs	r1, #144	; 0x90
 80071c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071ca:	23a4      	movs	r3, #164	; 0xa4
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	2380      	movs	r3, #128	; 0x80
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	4013      	ands	r3, r2
 80071d6:	d013      	beq.n	8007200 <HAL_UART_IRQHandler+0x1a4>
 80071d8:	23a0      	movs	r3, #160	; 0xa0
 80071da:	18fb      	adds	r3, r7, r3
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	2380      	movs	r3, #128	; 0x80
 80071e0:	04db      	lsls	r3, r3, #19
 80071e2:	4013      	ands	r3, r2
 80071e4:	d00c      	beq.n	8007200 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2280      	movs	r2, #128	; 0x80
 80071ec:	0112      	lsls	r2, r2, #4
 80071ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2290      	movs	r2, #144	; 0x90
 80071f4:	589b      	ldr	r3, [r3, r2]
 80071f6:	2220      	movs	r2, #32
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2190      	movs	r1, #144	; 0x90
 80071fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2290      	movs	r2, #144	; 0x90
 8007204:	589b      	ldr	r3, [r3, r2]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d100      	bne.n	800720c <HAL_UART_IRQHandler+0x1b0>
 800720a:	e23d      	b.n	8007688 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800720c:	23a4      	movs	r3, #164	; 0xa4
 800720e:	18fb      	adds	r3, r7, r3
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2220      	movs	r2, #32
 8007214:	4013      	ands	r3, r2
 8007216:	d015      	beq.n	8007244 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007218:	23a0      	movs	r3, #160	; 0xa0
 800721a:	18fb      	adds	r3, r7, r3
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2220      	movs	r2, #32
 8007220:	4013      	ands	r3, r2
 8007222:	d106      	bne.n	8007232 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007224:	239c      	movs	r3, #156	; 0x9c
 8007226:	18fb      	adds	r3, r7, r3
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	2380      	movs	r3, #128	; 0x80
 800722c:	055b      	lsls	r3, r3, #21
 800722e:	4013      	ands	r3, r2
 8007230:	d008      	beq.n	8007244 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	0010      	movs	r0, r2
 8007242:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2290      	movs	r2, #144	; 0x90
 8007248:	589b      	ldr	r3, [r3, r2]
 800724a:	2194      	movs	r1, #148	; 0x94
 800724c:	187a      	adds	r2, r7, r1
 800724e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	2240      	movs	r2, #64	; 0x40
 8007258:	4013      	ands	r3, r2
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d004      	beq.n	8007268 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800725e:	187b      	adds	r3, r7, r1
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2228      	movs	r2, #40	; 0x28
 8007264:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007266:	d04c      	beq.n	8007302 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	0018      	movs	r0, r3
 800726c:	f000 feca 	bl	8008004 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2240      	movs	r2, #64	; 0x40
 8007278:	4013      	ands	r3, r2
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	d13c      	bne.n	80072f8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800727e:	f3ef 8310 	mrs	r3, PRIMASK
 8007282:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007286:	2090      	movs	r0, #144	; 0x90
 8007288:	183a      	adds	r2, r7, r0
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	2301      	movs	r3, #1
 800728e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007292:	f383 8810 	msr	PRIMASK, r3
}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2140      	movs	r1, #64	; 0x40
 80072a4:	438a      	bics	r2, r1
 80072a6:	609a      	str	r2, [r3, #8]
 80072a8:	183b      	adds	r3, r7, r0
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072b0:	f383 8810 	msr	PRIMASK, r3
}
 80072b4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2280      	movs	r2, #128	; 0x80
 80072ba:	589b      	ldr	r3, [r3, r2]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d016      	beq.n	80072ee <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2280      	movs	r2, #128	; 0x80
 80072c4:	589b      	ldr	r3, [r3, r2]
 80072c6:	4a17      	ldr	r2, [pc, #92]	; (8007324 <HAL_UART_IRQHandler+0x2c8>)
 80072c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2280      	movs	r2, #128	; 0x80
 80072ce:	589b      	ldr	r3, [r3, r2]
 80072d0:	0018      	movs	r0, r3
 80072d2:	f7fd f95f 	bl	8004594 <HAL_DMA_Abort_IT>
 80072d6:	1e03      	subs	r3, r0, #0
 80072d8:	d01c      	beq.n	8007314 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2280      	movs	r2, #128	; 0x80
 80072de:	589b      	ldr	r3, [r3, r2]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	2180      	movs	r1, #128	; 0x80
 80072e6:	5852      	ldr	r2, [r2, r1]
 80072e8:	0010      	movs	r0, r2
 80072ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ec:	e012      	b.n	8007314 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	0018      	movs	r0, r3
 80072f2:	f000 f9e1 	bl	80076b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f6:	e00d      	b.n	8007314 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	0018      	movs	r0, r3
 80072fc:	f000 f9dc 	bl	80076b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007300:	e008      	b.n	8007314 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	0018      	movs	r0, r3
 8007306:	f000 f9d7 	bl	80076b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2290      	movs	r2, #144	; 0x90
 800730e:	2100      	movs	r1, #0
 8007310:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007312:	e1b9      	b.n	8007688 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	46c0      	nop			; (mov r8, r8)
    return;
 8007316:	e1b7      	b.n	8007688 <HAL_UART_IRQHandler+0x62c>
 8007318:	0000080f 	.word	0x0000080f
 800731c:	10000001 	.word	0x10000001
 8007320:	04000120 	.word	0x04000120
 8007324:	080080d1 	.word	0x080080d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d000      	beq.n	8007332 <HAL_UART_IRQHandler+0x2d6>
 8007330:	e13e      	b.n	80075b0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007332:	23a4      	movs	r3, #164	; 0xa4
 8007334:	18fb      	adds	r3, r7, r3
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2210      	movs	r2, #16
 800733a:	4013      	ands	r3, r2
 800733c:	d100      	bne.n	8007340 <HAL_UART_IRQHandler+0x2e4>
 800733e:	e137      	b.n	80075b0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007340:	23a0      	movs	r3, #160	; 0xa0
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2210      	movs	r2, #16
 8007348:	4013      	ands	r3, r2
 800734a:	d100      	bne.n	800734e <HAL_UART_IRQHandler+0x2f2>
 800734c:	e130      	b.n	80075b0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2210      	movs	r2, #16
 8007354:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2240      	movs	r2, #64	; 0x40
 800735e:	4013      	ands	r3, r2
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d000      	beq.n	8007366 <HAL_UART_IRQHandler+0x30a>
 8007364:	e0a4      	b.n	80074b0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2280      	movs	r2, #128	; 0x80
 800736a:	589b      	ldr	r3, [r3, r2]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	217e      	movs	r1, #126	; 0x7e
 8007372:	187b      	adds	r3, r7, r1
 8007374:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007376:	187b      	adds	r3, r7, r1
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d100      	bne.n	8007380 <HAL_UART_IRQHandler+0x324>
 800737e:	e185      	b.n	800768c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	225c      	movs	r2, #92	; 0x5c
 8007384:	5a9b      	ldrh	r3, [r3, r2]
 8007386:	187a      	adds	r2, r7, r1
 8007388:	8812      	ldrh	r2, [r2, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d300      	bcc.n	8007390 <HAL_UART_IRQHandler+0x334>
 800738e:	e17d      	b.n	800768c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	187a      	adds	r2, r7, r1
 8007394:	215e      	movs	r1, #94	; 0x5e
 8007396:	8812      	ldrh	r2, [r2, #0]
 8007398:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2280      	movs	r2, #128	; 0x80
 800739e:	589b      	ldr	r3, [r3, r2]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2220      	movs	r2, #32
 80073a6:	4013      	ands	r3, r2
 80073a8:	d170      	bne.n	800748c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073aa:	f3ef 8310 	mrs	r3, PRIMASK
 80073ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80073b4:	2301      	movs	r3, #1
 80073b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	f383 8810 	msr	PRIMASK, r3
}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	49b4      	ldr	r1, [pc, #720]	; (800769c <HAL_UART_IRQHandler+0x640>)
 80073cc:	400a      	ands	r2, r1
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	f383 8810 	msr	PRIMASK, r3
}
 80073da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073dc:	f3ef 8310 	mrs	r3, PRIMASK
 80073e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80073e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e4:	677b      	str	r3, [r7, #116]	; 0x74
 80073e6:	2301      	movs	r3, #1
 80073e8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ec:	f383 8810 	msr	PRIMASK, r3
}
 80073f0:	46c0      	nop			; (mov r8, r8)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2101      	movs	r1, #1
 80073fe:	438a      	bics	r2, r1
 8007400:	609a      	str	r2, [r3, #8]
 8007402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007404:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007408:	f383 8810 	msr	PRIMASK, r3
}
 800740c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800740e:	f3ef 8310 	mrs	r3, PRIMASK
 8007412:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007414:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007416:	673b      	str	r3, [r7, #112]	; 0x70
 8007418:	2301      	movs	r3, #1
 800741a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800741c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741e:	f383 8810 	msr	PRIMASK, r3
}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2140      	movs	r1, #64	; 0x40
 8007430:	438a      	bics	r2, r1
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007436:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800743a:	f383 8810 	msr	PRIMASK, r3
}
 800743e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	228c      	movs	r2, #140	; 0x8c
 8007444:	2120      	movs	r1, #32
 8007446:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800744e:	f3ef 8310 	mrs	r3, PRIMASK
 8007452:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007454:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007458:	2301      	movs	r3, #1
 800745a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800745c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800745e:	f383 8810 	msr	PRIMASK, r3
}
 8007462:	46c0      	nop			; (mov r8, r8)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2110      	movs	r1, #16
 8007470:	438a      	bics	r2, r1
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007476:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800747a:	f383 8810 	msr	PRIMASK, r3
}
 800747e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2280      	movs	r2, #128	; 0x80
 8007484:	589b      	ldr	r3, [r3, r2]
 8007486:	0018      	movs	r0, r3
 8007488:	f7fd f822 	bl	80044d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	225c      	movs	r2, #92	; 0x5c
 8007496:	5a9a      	ldrh	r2, [r3, r2]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	215e      	movs	r1, #94	; 0x5e
 800749c:	5a5b      	ldrh	r3, [r3, r1]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	0011      	movs	r1, r2
 80074a8:	0018      	movs	r0, r3
 80074aa:	f000 f90d 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074ae:	e0ed      	b.n	800768c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	225c      	movs	r2, #92	; 0x5c
 80074b4:	5a99      	ldrh	r1, [r3, r2]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	225e      	movs	r2, #94	; 0x5e
 80074ba:	5a9b      	ldrh	r3, [r3, r2]
 80074bc:	b29a      	uxth	r2, r3
 80074be:	208e      	movs	r0, #142	; 0x8e
 80074c0:	183b      	adds	r3, r7, r0
 80074c2:	1a8a      	subs	r2, r1, r2
 80074c4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	225e      	movs	r2, #94	; 0x5e
 80074ca:	5a9b      	ldrh	r3, [r3, r2]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d100      	bne.n	80074d4 <HAL_UART_IRQHandler+0x478>
 80074d2:	e0dd      	b.n	8007690 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80074d4:	183b      	adds	r3, r7, r0
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d100      	bne.n	80074de <HAL_UART_IRQHandler+0x482>
 80074dc:	e0d8      	b.n	8007690 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074de:	f3ef 8310 	mrs	r3, PRIMASK
 80074e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80074e4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074e6:	2488      	movs	r4, #136	; 0x88
 80074e8:	193a      	adds	r2, r7, r4
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	2301      	movs	r3, #1
 80074ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f383 8810 	msr	PRIMASK, r3
}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4967      	ldr	r1, [pc, #412]	; (80076a0 <HAL_UART_IRQHandler+0x644>)
 8007504:	400a      	ands	r2, r1
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	193b      	adds	r3, r7, r4
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f383 8810 	msr	PRIMASK, r3
}
 8007514:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007516:	f3ef 8310 	mrs	r3, PRIMASK
 800751a:	61bb      	str	r3, [r7, #24]
  return(result);
 800751c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800751e:	2484      	movs	r4, #132	; 0x84
 8007520:	193a      	adds	r2, r7, r4
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	2301      	movs	r3, #1
 8007526:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	f383 8810 	msr	PRIMASK, r3
}
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	495a      	ldr	r1, [pc, #360]	; (80076a4 <HAL_UART_IRQHandler+0x648>)
 800753c:	400a      	ands	r2, r1
 800753e:	609a      	str	r2, [r3, #8]
 8007540:	193b      	adds	r3, r7, r4
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	f383 8810 	msr	PRIMASK, r3
}
 800754c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	228c      	movs	r2, #140	; 0x8c
 8007552:	2120      	movs	r1, #32
 8007554:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007562:	f3ef 8310 	mrs	r3, PRIMASK
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756a:	2480      	movs	r4, #128	; 0x80
 800756c:	193a      	adds	r2, r7, r4
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	2301      	movs	r3, #1
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	f383 8810 	msr	PRIMASK, r3
}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2110      	movs	r1, #16
 8007588:	438a      	bics	r2, r1
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	193b      	adds	r3, r7, r4
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007594:	f383 8810 	msr	PRIMASK, r3
}
 8007598:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075a0:	183b      	adds	r3, r7, r0
 80075a2:	881a      	ldrh	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	0011      	movs	r1, r2
 80075a8:	0018      	movs	r0, r3
 80075aa:	f000 f88d 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075ae:	e06f      	b.n	8007690 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075b0:	23a4      	movs	r3, #164	; 0xa4
 80075b2:	18fb      	adds	r3, r7, r3
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	2380      	movs	r3, #128	; 0x80
 80075b8:	035b      	lsls	r3, r3, #13
 80075ba:	4013      	ands	r3, r2
 80075bc:	d010      	beq.n	80075e0 <HAL_UART_IRQHandler+0x584>
 80075be:	239c      	movs	r3, #156	; 0x9c
 80075c0:	18fb      	adds	r3, r7, r3
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	2380      	movs	r3, #128	; 0x80
 80075c6:	03db      	lsls	r3, r3, #15
 80075c8:	4013      	ands	r3, r2
 80075ca:	d009      	beq.n	80075e0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2280      	movs	r2, #128	; 0x80
 80075d2:	0352      	lsls	r2, r2, #13
 80075d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	0018      	movs	r0, r3
 80075da:	f001 fa1d 	bl	8008a18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075de:	e05a      	b.n	8007696 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80075e0:	23a4      	movs	r3, #164	; 0xa4
 80075e2:	18fb      	adds	r3, r7, r3
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2280      	movs	r2, #128	; 0x80
 80075e8:	4013      	ands	r3, r2
 80075ea:	d016      	beq.n	800761a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80075ec:	23a0      	movs	r3, #160	; 0xa0
 80075ee:	18fb      	adds	r3, r7, r3
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2280      	movs	r2, #128	; 0x80
 80075f4:	4013      	ands	r3, r2
 80075f6:	d106      	bne.n	8007606 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80075f8:	239c      	movs	r3, #156	; 0x9c
 80075fa:	18fb      	adds	r3, r7, r3
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	2380      	movs	r3, #128	; 0x80
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	4013      	ands	r3, r2
 8007604:	d009      	beq.n	800761a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800760a:	2b00      	cmp	r3, #0
 800760c:	d042      	beq.n	8007694 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	0010      	movs	r0, r2
 8007616:	4798      	blx	r3
    }
    return;
 8007618:	e03c      	b.n	8007694 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800761a:	23a4      	movs	r3, #164	; 0xa4
 800761c:	18fb      	adds	r3, r7, r3
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2240      	movs	r2, #64	; 0x40
 8007622:	4013      	ands	r3, r2
 8007624:	d00a      	beq.n	800763c <HAL_UART_IRQHandler+0x5e0>
 8007626:	23a0      	movs	r3, #160	; 0xa0
 8007628:	18fb      	adds	r3, r7, r3
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2240      	movs	r2, #64	; 0x40
 800762e:	4013      	ands	r3, r2
 8007630:	d004      	beq.n	800763c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	0018      	movs	r0, r3
 8007636:	f000 fd62 	bl	80080fe <UART_EndTransmit_IT>
    return;
 800763a:	e02c      	b.n	8007696 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800763c:	23a4      	movs	r3, #164	; 0xa4
 800763e:	18fb      	adds	r3, r7, r3
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	2380      	movs	r3, #128	; 0x80
 8007644:	041b      	lsls	r3, r3, #16
 8007646:	4013      	ands	r3, r2
 8007648:	d00b      	beq.n	8007662 <HAL_UART_IRQHandler+0x606>
 800764a:	23a0      	movs	r3, #160	; 0xa0
 800764c:	18fb      	adds	r3, r7, r3
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	2380      	movs	r3, #128	; 0x80
 8007652:	05db      	lsls	r3, r3, #23
 8007654:	4013      	ands	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	0018      	movs	r0, r3
 800765c:	f001 f9ec 	bl	8008a38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007660:	e019      	b.n	8007696 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007662:	23a4      	movs	r3, #164	; 0xa4
 8007664:	18fb      	adds	r3, r7, r3
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	2380      	movs	r3, #128	; 0x80
 800766a:	045b      	lsls	r3, r3, #17
 800766c:	4013      	ands	r3, r2
 800766e:	d012      	beq.n	8007696 <HAL_UART_IRQHandler+0x63a>
 8007670:	23a0      	movs	r3, #160	; 0xa0
 8007672:	18fb      	adds	r3, r7, r3
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	da0d      	bge.n	8007696 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	0018      	movs	r0, r3
 800767e:	f001 f9d3 	bl	8008a28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007682:	e008      	b.n	8007696 <HAL_UART_IRQHandler+0x63a>
      return;
 8007684:	46c0      	nop			; (mov r8, r8)
 8007686:	e006      	b.n	8007696 <HAL_UART_IRQHandler+0x63a>
    return;
 8007688:	46c0      	nop			; (mov r8, r8)
 800768a:	e004      	b.n	8007696 <HAL_UART_IRQHandler+0x63a>
      return;
 800768c:	46c0      	nop			; (mov r8, r8)
 800768e:	e002      	b.n	8007696 <HAL_UART_IRQHandler+0x63a>
      return;
 8007690:	46c0      	nop			; (mov r8, r8)
 8007692:	e000      	b.n	8007696 <HAL_UART_IRQHandler+0x63a>
    return;
 8007694:	46c0      	nop			; (mov r8, r8)
  }
}
 8007696:	46bd      	mov	sp, r7
 8007698:	b02a      	add	sp, #168	; 0xa8
 800769a:	bdb0      	pop	{r4, r5, r7, pc}
 800769c:	fffffeff 	.word	0xfffffeff
 80076a0:	fffffedf 	.word	0xfffffedf
 80076a4:	effffffe 	.word	0xeffffffe

080076a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076b0:	46c0      	nop			; (mov r8, r8)
 80076b2:	46bd      	mov	sp, r7
 80076b4:	b002      	add	sp, #8
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076c0:	46c0      	nop			; (mov r8, r8)
 80076c2:	46bd      	mov	sp, r7
 80076c4:	b002      	add	sp, #8
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	000a      	movs	r2, r1
 80076d2:	1cbb      	adds	r3, r7, #2
 80076d4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	46bd      	mov	sp, r7
 80076da:	b002      	add	sp, #8
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076e8:	231a      	movs	r3, #26
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	431a      	orrs	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	4313      	orrs	r3, r2
 8007706:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4abc      	ldr	r2, [pc, #752]	; (8007a00 <UART_SetConfig+0x320>)
 8007710:	4013      	ands	r3, r2
 8007712:	0019      	movs	r1, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69fa      	ldr	r2, [r7, #28]
 800771a:	430a      	orrs	r2, r1
 800771c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	4ab7      	ldr	r2, [pc, #732]	; (8007a04 <UART_SetConfig+0x324>)
 8007726:	4013      	ands	r3, r2
 8007728:	0019      	movs	r1, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	4313      	orrs	r3, r2
 8007744:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	4aae      	ldr	r2, [pc, #696]	; (8007a08 <UART_SetConfig+0x328>)
 800774e:	4013      	ands	r3, r2
 8007750:	0019      	movs	r1, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	430a      	orrs	r2, r1
 800775a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	220f      	movs	r2, #15
 8007764:	4393      	bics	r3, r2
 8007766:	0019      	movs	r1, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4aa4      	ldr	r2, [pc, #656]	; (8007a0c <UART_SetConfig+0x32c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d127      	bne.n	80077ce <UART_SetConfig+0xee>
 800777e:	4ba4      	ldr	r3, [pc, #656]	; (8007a10 <UART_SetConfig+0x330>)
 8007780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007782:	2203      	movs	r2, #3
 8007784:	4013      	ands	r3, r2
 8007786:	2b03      	cmp	r3, #3
 8007788:	d017      	beq.n	80077ba <UART_SetConfig+0xda>
 800778a:	d81b      	bhi.n	80077c4 <UART_SetConfig+0xe4>
 800778c:	2b02      	cmp	r3, #2
 800778e:	d00a      	beq.n	80077a6 <UART_SetConfig+0xc6>
 8007790:	d818      	bhi.n	80077c4 <UART_SetConfig+0xe4>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <UART_SetConfig+0xbc>
 8007796:	2b01      	cmp	r3, #1
 8007798:	d00a      	beq.n	80077b0 <UART_SetConfig+0xd0>
 800779a:	e013      	b.n	80077c4 <UART_SetConfig+0xe4>
 800779c:	231b      	movs	r3, #27
 800779e:	18fb      	adds	r3, r7, r3
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e058      	b.n	8007858 <UART_SetConfig+0x178>
 80077a6:	231b      	movs	r3, #27
 80077a8:	18fb      	adds	r3, r7, r3
 80077aa:	2202      	movs	r2, #2
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e053      	b.n	8007858 <UART_SetConfig+0x178>
 80077b0:	231b      	movs	r3, #27
 80077b2:	18fb      	adds	r3, r7, r3
 80077b4:	2204      	movs	r2, #4
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	e04e      	b.n	8007858 <UART_SetConfig+0x178>
 80077ba:	231b      	movs	r3, #27
 80077bc:	18fb      	adds	r3, r7, r3
 80077be:	2208      	movs	r2, #8
 80077c0:	701a      	strb	r2, [r3, #0]
 80077c2:	e049      	b.n	8007858 <UART_SetConfig+0x178>
 80077c4:	231b      	movs	r3, #27
 80077c6:	18fb      	adds	r3, r7, r3
 80077c8:	2210      	movs	r2, #16
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	e044      	b.n	8007858 <UART_SetConfig+0x178>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a90      	ldr	r2, [pc, #576]	; (8007a14 <UART_SetConfig+0x334>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d127      	bne.n	8007828 <UART_SetConfig+0x148>
 80077d8:	4b8d      	ldr	r3, [pc, #564]	; (8007a10 <UART_SetConfig+0x330>)
 80077da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077dc:	220c      	movs	r2, #12
 80077de:	4013      	ands	r3, r2
 80077e0:	2b0c      	cmp	r3, #12
 80077e2:	d017      	beq.n	8007814 <UART_SetConfig+0x134>
 80077e4:	d81b      	bhi.n	800781e <UART_SetConfig+0x13e>
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d00a      	beq.n	8007800 <UART_SetConfig+0x120>
 80077ea:	d818      	bhi.n	800781e <UART_SetConfig+0x13e>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <UART_SetConfig+0x116>
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d00a      	beq.n	800780a <UART_SetConfig+0x12a>
 80077f4:	e013      	b.n	800781e <UART_SetConfig+0x13e>
 80077f6:	231b      	movs	r3, #27
 80077f8:	18fb      	adds	r3, r7, r3
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e02b      	b.n	8007858 <UART_SetConfig+0x178>
 8007800:	231b      	movs	r3, #27
 8007802:	18fb      	adds	r3, r7, r3
 8007804:	2202      	movs	r2, #2
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	e026      	b.n	8007858 <UART_SetConfig+0x178>
 800780a:	231b      	movs	r3, #27
 800780c:	18fb      	adds	r3, r7, r3
 800780e:	2204      	movs	r2, #4
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	e021      	b.n	8007858 <UART_SetConfig+0x178>
 8007814:	231b      	movs	r3, #27
 8007816:	18fb      	adds	r3, r7, r3
 8007818:	2208      	movs	r2, #8
 800781a:	701a      	strb	r2, [r3, #0]
 800781c:	e01c      	b.n	8007858 <UART_SetConfig+0x178>
 800781e:	231b      	movs	r3, #27
 8007820:	18fb      	adds	r3, r7, r3
 8007822:	2210      	movs	r2, #16
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	e017      	b.n	8007858 <UART_SetConfig+0x178>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a7a      	ldr	r2, [pc, #488]	; (8007a18 <UART_SetConfig+0x338>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d104      	bne.n	800783c <UART_SetConfig+0x15c>
 8007832:	231b      	movs	r3, #27
 8007834:	18fb      	adds	r3, r7, r3
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	e00d      	b.n	8007858 <UART_SetConfig+0x178>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a76      	ldr	r2, [pc, #472]	; (8007a1c <UART_SetConfig+0x33c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d104      	bne.n	8007850 <UART_SetConfig+0x170>
 8007846:	231b      	movs	r3, #27
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	2200      	movs	r2, #0
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	e003      	b.n	8007858 <UART_SetConfig+0x178>
 8007850:	231b      	movs	r3, #27
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	2210      	movs	r2, #16
 8007856:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	2380      	movs	r3, #128	; 0x80
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	429a      	cmp	r2, r3
 8007862:	d000      	beq.n	8007866 <UART_SetConfig+0x186>
 8007864:	e065      	b.n	8007932 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8007866:	231b      	movs	r3, #27
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b08      	cmp	r3, #8
 800786e:	d015      	beq.n	800789c <UART_SetConfig+0x1bc>
 8007870:	dc18      	bgt.n	80078a4 <UART_SetConfig+0x1c4>
 8007872:	2b04      	cmp	r3, #4
 8007874:	d00d      	beq.n	8007892 <UART_SetConfig+0x1b2>
 8007876:	dc15      	bgt.n	80078a4 <UART_SetConfig+0x1c4>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <UART_SetConfig+0x1a2>
 800787c:	2b02      	cmp	r3, #2
 800787e:	d005      	beq.n	800788c <UART_SetConfig+0x1ac>
 8007880:	e010      	b.n	80078a4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007882:	f7fd fd45 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8007886:	0003      	movs	r3, r0
 8007888:	617b      	str	r3, [r7, #20]
        break;
 800788a:	e012      	b.n	80078b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800788c:	4b64      	ldr	r3, [pc, #400]	; (8007a20 <UART_SetConfig+0x340>)
 800788e:	617b      	str	r3, [r7, #20]
        break;
 8007890:	e00f      	b.n	80078b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007892:	f7fd fcb1 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8007896:	0003      	movs	r3, r0
 8007898:	617b      	str	r3, [r7, #20]
        break;
 800789a:	e00a      	b.n	80078b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789c:	2380      	movs	r3, #128	; 0x80
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	617b      	str	r3, [r7, #20]
        break;
 80078a2:	e006      	b.n	80078b2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80078a8:	231a      	movs	r3, #26
 80078aa:	18fb      	adds	r3, r7, r3
 80078ac:	2201      	movs	r2, #1
 80078ae:	701a      	strb	r2, [r3, #0]
        break;
 80078b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d100      	bne.n	80078ba <UART_SetConfig+0x1da>
 80078b8:	e08d      	b.n	80079d6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078be:	4b59      	ldr	r3, [pc, #356]	; (8007a24 <UART_SetConfig+0x344>)
 80078c0:	0052      	lsls	r2, r2, #1
 80078c2:	5ad3      	ldrh	r3, [r2, r3]
 80078c4:	0019      	movs	r1, r3
 80078c6:	6978      	ldr	r0, [r7, #20]
 80078c8:	f7f8 fc40 	bl	800014c <__udivsi3>
 80078cc:	0003      	movs	r3, r0
 80078ce:	005a      	lsls	r2, r3, #1
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	085b      	lsrs	r3, r3, #1
 80078d6:	18d2      	adds	r2, r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	0019      	movs	r1, r3
 80078de:	0010      	movs	r0, r2
 80078e0:	f7f8 fc34 	bl	800014c <__udivsi3>
 80078e4:	0003      	movs	r3, r0
 80078e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b0f      	cmp	r3, #15
 80078ec:	d91c      	bls.n	8007928 <UART_SetConfig+0x248>
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	2380      	movs	r3, #128	; 0x80
 80078f2:	025b      	lsls	r3, r3, #9
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d217      	bcs.n	8007928 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	200e      	movs	r0, #14
 80078fe:	183b      	adds	r3, r7, r0
 8007900:	210f      	movs	r1, #15
 8007902:	438a      	bics	r2, r1
 8007904:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	085b      	lsrs	r3, r3, #1
 800790a:	b29b      	uxth	r3, r3
 800790c:	2207      	movs	r2, #7
 800790e:	4013      	ands	r3, r2
 8007910:	b299      	uxth	r1, r3
 8007912:	183b      	adds	r3, r7, r0
 8007914:	183a      	adds	r2, r7, r0
 8007916:	8812      	ldrh	r2, [r2, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	183a      	adds	r2, r7, r0
 8007922:	8812      	ldrh	r2, [r2, #0]
 8007924:	60da      	str	r2, [r3, #12]
 8007926:	e056      	b.n	80079d6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007928:	231a      	movs	r3, #26
 800792a:	18fb      	adds	r3, r7, r3
 800792c:	2201      	movs	r2, #1
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	e051      	b.n	80079d6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007932:	231b      	movs	r3, #27
 8007934:	18fb      	adds	r3, r7, r3
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d015      	beq.n	8007968 <UART_SetConfig+0x288>
 800793c:	dc18      	bgt.n	8007970 <UART_SetConfig+0x290>
 800793e:	2b04      	cmp	r3, #4
 8007940:	d00d      	beq.n	800795e <UART_SetConfig+0x27e>
 8007942:	dc15      	bgt.n	8007970 <UART_SetConfig+0x290>
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <UART_SetConfig+0x26e>
 8007948:	2b02      	cmp	r3, #2
 800794a:	d005      	beq.n	8007958 <UART_SetConfig+0x278>
 800794c:	e010      	b.n	8007970 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800794e:	f7fd fcdf 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8007952:	0003      	movs	r3, r0
 8007954:	617b      	str	r3, [r7, #20]
        break;
 8007956:	e012      	b.n	800797e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007958:	4b31      	ldr	r3, [pc, #196]	; (8007a20 <UART_SetConfig+0x340>)
 800795a:	617b      	str	r3, [r7, #20]
        break;
 800795c:	e00f      	b.n	800797e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800795e:	f7fd fc4b 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8007962:	0003      	movs	r3, r0
 8007964:	617b      	str	r3, [r7, #20]
        break;
 8007966:	e00a      	b.n	800797e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007968:	2380      	movs	r3, #128	; 0x80
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	617b      	str	r3, [r7, #20]
        break;
 800796e:	e006      	b.n	800797e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007974:	231a      	movs	r3, #26
 8007976:	18fb      	adds	r3, r7, r3
 8007978:	2201      	movs	r2, #1
 800797a:	701a      	strb	r2, [r3, #0]
        break;
 800797c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d028      	beq.n	80079d6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007988:	4b26      	ldr	r3, [pc, #152]	; (8007a24 <UART_SetConfig+0x344>)
 800798a:	0052      	lsls	r2, r2, #1
 800798c:	5ad3      	ldrh	r3, [r2, r3]
 800798e:	0019      	movs	r1, r3
 8007990:	6978      	ldr	r0, [r7, #20]
 8007992:	f7f8 fbdb 	bl	800014c <__udivsi3>
 8007996:	0003      	movs	r3, r0
 8007998:	001a      	movs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	085b      	lsrs	r3, r3, #1
 80079a0:	18d2      	adds	r2, r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	0019      	movs	r1, r3
 80079a8:	0010      	movs	r0, r2
 80079aa:	f7f8 fbcf 	bl	800014c <__udivsi3>
 80079ae:	0003      	movs	r3, r0
 80079b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b0f      	cmp	r3, #15
 80079b6:	d90a      	bls.n	80079ce <UART_SetConfig+0x2ee>
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	2380      	movs	r3, #128	; 0x80
 80079bc:	025b      	lsls	r3, r3, #9
 80079be:	429a      	cmp	r2, r3
 80079c0:	d205      	bcs.n	80079ce <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60da      	str	r2, [r3, #12]
 80079cc:	e003      	b.n	80079d6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80079ce:	231a      	movs	r3, #26
 80079d0:	18fb      	adds	r3, r7, r3
 80079d2:	2201      	movs	r2, #1
 80079d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	226a      	movs	r2, #106	; 0x6a
 80079da:	2101      	movs	r1, #1
 80079dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2268      	movs	r2, #104	; 0x68
 80079e2:	2101      	movs	r1, #1
 80079e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80079f2:	231a      	movs	r3, #26
 80079f4:	18fb      	adds	r3, r7, r3
 80079f6:	781b      	ldrb	r3, [r3, #0]
}
 80079f8:	0018      	movs	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	b008      	add	sp, #32
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	cfff69f3 	.word	0xcfff69f3
 8007a04:	ffffcfff 	.word	0xffffcfff
 8007a08:	11fff4ff 	.word	0x11fff4ff
 8007a0c:	40013800 	.word	0x40013800
 8007a10:	40021000 	.word	0x40021000
 8007a14:	40004400 	.word	0x40004400
 8007a18:	40004800 	.word	0x40004800
 8007a1c:	40004c00 	.word	0x40004c00
 8007a20:	00f42400 	.word	0x00f42400
 8007a24:	0800e110 	.word	0x0800e110

08007a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	2201      	movs	r2, #1
 8007a36:	4013      	ands	r3, r2
 8007a38:	d00b      	beq.n	8007a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4a4a      	ldr	r2, [pc, #296]	; (8007b6c <UART_AdvFeatureConfig+0x144>)
 8007a42:	4013      	ands	r3, r2
 8007a44:	0019      	movs	r1, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	2202      	movs	r2, #2
 8007a58:	4013      	ands	r3, r2
 8007a5a:	d00b      	beq.n	8007a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	4a43      	ldr	r2, [pc, #268]	; (8007b70 <UART_AdvFeatureConfig+0x148>)
 8007a64:	4013      	ands	r3, r2
 8007a66:	0019      	movs	r1, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	2204      	movs	r2, #4
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d00b      	beq.n	8007a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	4a3b      	ldr	r2, [pc, #236]	; (8007b74 <UART_AdvFeatureConfig+0x14c>)
 8007a86:	4013      	ands	r3, r2
 8007a88:	0019      	movs	r1, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	2208      	movs	r2, #8
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	d00b      	beq.n	8007ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	4a34      	ldr	r2, [pc, #208]	; (8007b78 <UART_AdvFeatureConfig+0x150>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	0019      	movs	r1, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	2210      	movs	r2, #16
 8007abe:	4013      	ands	r3, r2
 8007ac0:	d00b      	beq.n	8007ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	4a2c      	ldr	r2, [pc, #176]	; (8007b7c <UART_AdvFeatureConfig+0x154>)
 8007aca:	4013      	ands	r3, r2
 8007acc:	0019      	movs	r1, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ade:	2220      	movs	r2, #32
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	d00b      	beq.n	8007afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	4a25      	ldr	r2, [pc, #148]	; (8007b80 <UART_AdvFeatureConfig+0x158>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	0019      	movs	r1, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b00:	2240      	movs	r2, #64	; 0x40
 8007b02:	4013      	ands	r3, r2
 8007b04:	d01d      	beq.n	8007b42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4a1d      	ldr	r2, [pc, #116]	; (8007b84 <UART_AdvFeatureConfig+0x15c>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	0019      	movs	r1, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b22:	2380      	movs	r3, #128	; 0x80
 8007b24:	035b      	lsls	r3, r3, #13
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d10b      	bne.n	8007b42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <UART_AdvFeatureConfig+0x160>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	0019      	movs	r1, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	2280      	movs	r2, #128	; 0x80
 8007b48:	4013      	ands	r3, r2
 8007b4a:	d00b      	beq.n	8007b64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	4a0e      	ldr	r2, [pc, #56]	; (8007b8c <UART_AdvFeatureConfig+0x164>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	0019      	movs	r1, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }
}
 8007b64:	46c0      	nop			; (mov r8, r8)
 8007b66:	46bd      	mov	sp, r7
 8007b68:	b002      	add	sp, #8
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	fffdffff 	.word	0xfffdffff
 8007b70:	fffeffff 	.word	0xfffeffff
 8007b74:	fffbffff 	.word	0xfffbffff
 8007b78:	ffff7fff 	.word	0xffff7fff
 8007b7c:	ffffefff 	.word	0xffffefff
 8007b80:	ffffdfff 	.word	0xffffdfff
 8007b84:	ffefffff 	.word	0xffefffff
 8007b88:	ff9fffff 	.word	0xff9fffff
 8007b8c:	fff7ffff 	.word	0xfff7ffff

08007b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2290      	movs	r2, #144	; 0x90
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ba0:	f7fc fbae 	bl	8004300 <HAL_GetTick>
 8007ba4:	0003      	movs	r3, r0
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2208      	movs	r2, #8
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	d10c      	bne.n	8007bd0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2280      	movs	r2, #128	; 0x80
 8007bba:	0391      	lsls	r1, r2, #14
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4a1a      	ldr	r2, [pc, #104]	; (8007c28 <UART_CheckIdleState+0x98>)
 8007bc0:	9200      	str	r2, [sp, #0]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f000 f832 	bl	8007c2c <UART_WaitOnFlagUntilTimeout>
 8007bc8:	1e03      	subs	r3, r0, #0
 8007bca:	d001      	beq.n	8007bd0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e026      	b.n	8007c1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	4013      	ands	r3, r2
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d10c      	bne.n	8007bf8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2280      	movs	r2, #128	; 0x80
 8007be2:	03d1      	lsls	r1, r2, #15
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	4a10      	ldr	r2, [pc, #64]	; (8007c28 <UART_CheckIdleState+0x98>)
 8007be8:	9200      	str	r2, [sp, #0]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f000 f81e 	bl	8007c2c <UART_WaitOnFlagUntilTimeout>
 8007bf0:	1e03      	subs	r3, r0, #0
 8007bf2:	d001      	beq.n	8007bf8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e012      	b.n	8007c1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2288      	movs	r2, #136	; 0x88
 8007bfc:	2120      	movs	r1, #32
 8007bfe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	228c      	movs	r2, #140	; 0x8c
 8007c04:	2120      	movs	r1, #32
 8007c06:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2284      	movs	r2, #132	; 0x84
 8007c18:	2100      	movs	r1, #0
 8007c1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	0018      	movs	r0, r3
 8007c20:	46bd      	mov	sp, r7
 8007c22:	b004      	add	sp, #16
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	01ffffff 	.word	0x01ffffff

08007c2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b094      	sub	sp, #80	; 0x50
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	1dfb      	adds	r3, r7, #7
 8007c3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c3c:	e0a7      	b.n	8007d8e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c40:	3301      	adds	r3, #1
 8007c42:	d100      	bne.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007c44:	e0a3      	b.n	8007d8e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c46:	f7fc fb5b 	bl	8004300 <HAL_GetTick>
 8007c4a:	0002      	movs	r2, r0
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d302      	bcc.n	8007c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d13f      	bne.n	8007cdc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c64:	647b      	str	r3, [r7, #68]	; 0x44
 8007c66:	2301      	movs	r3, #1
 8007c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6c:	f383 8810 	msr	PRIMASK, r3
}
 8007c70:	46c0      	nop			; (mov r8, r8)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	494e      	ldr	r1, [pc, #312]	; (8007db8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007c7e:	400a      	ands	r2, r1
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c84:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	f383 8810 	msr	PRIMASK, r3
}
 8007c8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c96:	643b      	str	r3, [r7, #64]	; 0x40
 8007c98:	2301      	movs	r3, #1
 8007c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	f383 8810 	msr	PRIMASK, r3
}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2101      	movs	r1, #1
 8007cb0:	438a      	bics	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]
 8007cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cba:	f383 8810 	msr	PRIMASK, r3
}
 8007cbe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2288      	movs	r2, #136	; 0x88
 8007cc4:	2120      	movs	r1, #32
 8007cc6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	228c      	movs	r2, #140	; 0x8c
 8007ccc:	2120      	movs	r1, #32
 8007cce:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2284      	movs	r2, #132	; 0x84
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e069      	b.n	8007db0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2204      	movs	r2, #4
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	d052      	beq.n	8007d8e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69da      	ldr	r2, [r3, #28]
 8007cee:	2380      	movs	r3, #128	; 0x80
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	2380      	movs	r3, #128	; 0x80
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d148      	bne.n	8007d8e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2280      	movs	r2, #128	; 0x80
 8007d02:	0112      	lsls	r2, r2, #4
 8007d04:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d06:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0a:	613b      	str	r3, [r7, #16]
  return(result);
 8007d0c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d10:	2301      	movs	r3, #1
 8007d12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f383 8810 	msr	PRIMASK, r3
}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4924      	ldr	r1, [pc, #144]	; (8007db8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007d28:	400a      	ands	r2, r1
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	f383 8810 	msr	PRIMASK, r3
}
 8007d36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d38:	f3ef 8310 	mrs	r3, PRIMASK
 8007d3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d3e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d42:	2301      	movs	r3, #1
 8007d44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	f383 8810 	msr	PRIMASK, r3
}
 8007d4c:	46c0      	nop			; (mov r8, r8)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2101      	movs	r1, #1
 8007d5a:	438a      	bics	r2, r1
 8007d5c:	609a      	str	r2, [r3, #8]
 8007d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	f383 8810 	msr	PRIMASK, r3
}
 8007d68:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2288      	movs	r2, #136	; 0x88
 8007d6e:	2120      	movs	r1, #32
 8007d70:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	228c      	movs	r2, #140	; 0x8c
 8007d76:	2120      	movs	r1, #32
 8007d78:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2290      	movs	r2, #144	; 0x90
 8007d7e:	2120      	movs	r1, #32
 8007d80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2284      	movs	r2, #132	; 0x84
 8007d86:	2100      	movs	r1, #0
 8007d88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e010      	b.n	8007db0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	4013      	ands	r3, r2
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	425a      	negs	r2, r3
 8007d9e:	4153      	adcs	r3, r2
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	001a      	movs	r2, r3
 8007da4:	1dfb      	adds	r3, r7, #7
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d100      	bne.n	8007dae <UART_WaitOnFlagUntilTimeout+0x182>
 8007dac:	e747      	b.n	8007c3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	0018      	movs	r0, r3
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b014      	add	sp, #80	; 0x50
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	fffffe5f 	.word	0xfffffe5f

08007dbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b098      	sub	sp, #96	; 0x60
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	1dbb      	adds	r3, r7, #6
 8007dc8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	1dba      	adds	r2, r7, #6
 8007dd4:	215c      	movs	r1, #92	; 0x5c
 8007dd6:	8812      	ldrh	r2, [r2, #0]
 8007dd8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	1dba      	adds	r2, r7, #6
 8007dde:	215e      	movs	r1, #94	; 0x5e
 8007de0:	8812      	ldrh	r2, [r2, #0]
 8007de2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	2380      	movs	r3, #128	; 0x80
 8007df0:	015b      	lsls	r3, r3, #5
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d10d      	bne.n	8007e12 <UART_Start_Receive_IT+0x56>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d104      	bne.n	8007e08 <UART_Start_Receive_IT+0x4c>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2260      	movs	r2, #96	; 0x60
 8007e02:	497b      	ldr	r1, [pc, #492]	; (8007ff0 <UART_Start_Receive_IT+0x234>)
 8007e04:	5299      	strh	r1, [r3, r2]
 8007e06:	e02e      	b.n	8007e66 <UART_Start_Receive_IT+0xaa>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2260      	movs	r2, #96	; 0x60
 8007e0c:	21ff      	movs	r1, #255	; 0xff
 8007e0e:	5299      	strh	r1, [r3, r2]
 8007e10:	e029      	b.n	8007e66 <UART_Start_Receive_IT+0xaa>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10d      	bne.n	8007e36 <UART_Start_Receive_IT+0x7a>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d104      	bne.n	8007e2c <UART_Start_Receive_IT+0x70>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2260      	movs	r2, #96	; 0x60
 8007e26:	21ff      	movs	r1, #255	; 0xff
 8007e28:	5299      	strh	r1, [r3, r2]
 8007e2a:	e01c      	b.n	8007e66 <UART_Start_Receive_IT+0xaa>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2260      	movs	r2, #96	; 0x60
 8007e30:	217f      	movs	r1, #127	; 0x7f
 8007e32:	5299      	strh	r1, [r3, r2]
 8007e34:	e017      	b.n	8007e66 <UART_Start_Receive_IT+0xaa>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	2380      	movs	r3, #128	; 0x80
 8007e3c:	055b      	lsls	r3, r3, #21
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d10d      	bne.n	8007e5e <UART_Start_Receive_IT+0xa2>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d104      	bne.n	8007e54 <UART_Start_Receive_IT+0x98>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2260      	movs	r2, #96	; 0x60
 8007e4e:	217f      	movs	r1, #127	; 0x7f
 8007e50:	5299      	strh	r1, [r3, r2]
 8007e52:	e008      	b.n	8007e66 <UART_Start_Receive_IT+0xaa>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2260      	movs	r2, #96	; 0x60
 8007e58:	213f      	movs	r1, #63	; 0x3f
 8007e5a:	5299      	strh	r1, [r3, r2]
 8007e5c:	e003      	b.n	8007e66 <UART_Start_Receive_IT+0xaa>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2260      	movs	r2, #96	; 0x60
 8007e62:	2100      	movs	r1, #0
 8007e64:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2290      	movs	r2, #144	; 0x90
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	228c      	movs	r2, #140	; 0x8c
 8007e72:	2122      	movs	r1, #34	; 0x22
 8007e74:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e76:	f3ef 8310 	mrs	r3, PRIMASK
 8007e7a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e80:	2301      	movs	r3, #1
 8007e82:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e86:	f383 8810 	msr	PRIMASK, r3
}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2101      	movs	r1, #1
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	609a      	str	r2, [r3, #8]
 8007e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea2:	f383 8810 	msr	PRIMASK, r3
}
 8007ea6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007eac:	2380      	movs	r3, #128	; 0x80
 8007eae:	059b      	lsls	r3, r3, #22
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d150      	bne.n	8007f56 <UART_Start_Receive_IT+0x19a>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2268      	movs	r2, #104	; 0x68
 8007eb8:	5a9b      	ldrh	r3, [r3, r2]
 8007eba:	1dba      	adds	r2, r7, #6
 8007ebc:	8812      	ldrh	r2, [r2, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d349      	bcc.n	8007f56 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	2380      	movs	r3, #128	; 0x80
 8007ec8:	015b      	lsls	r3, r3, #5
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d107      	bne.n	8007ede <UART_Start_Receive_IT+0x122>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d103      	bne.n	8007ede <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a46      	ldr	r2, [pc, #280]	; (8007ff4 <UART_Start_Receive_IT+0x238>)
 8007eda:	675a      	str	r2, [r3, #116]	; 0x74
 8007edc:	e002      	b.n	8007ee4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4a45      	ldr	r2, [pc, #276]	; (8007ff8 <UART_Start_Receive_IT+0x23c>)
 8007ee2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d019      	beq.n	8007f20 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eec:	f3ef 8310 	mrs	r3, PRIMASK
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ef4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	f383 8810 	msr	PRIMASK, r3
}
 8007f00:	46c0      	nop			; (mov r8, r8)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2180      	movs	r1, #128	; 0x80
 8007f0e:	0049      	lsls	r1, r1, #1
 8007f10:	430a      	orrs	r2, r1
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1a:	f383 8810 	msr	PRIMASK, r3
}
 8007f1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f20:	f3ef 8310 	mrs	r3, PRIMASK
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f28:	657b      	str	r3, [r7, #84]	; 0x54
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	f383 8810 	msr	PRIMASK, r3
}
 8007f34:	46c0      	nop			; (mov r8, r8)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2180      	movs	r1, #128	; 0x80
 8007f42:	0549      	lsls	r1, r1, #21
 8007f44:	430a      	orrs	r2, r1
 8007f46:	609a      	str	r2, [r3, #8]
 8007f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f4a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	f383 8810 	msr	PRIMASK, r3
}
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	e047      	b.n	8007fe6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	2380      	movs	r3, #128	; 0x80
 8007f5c:	015b      	lsls	r3, r3, #5
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d107      	bne.n	8007f72 <UART_Start_Receive_IT+0x1b6>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4a23      	ldr	r2, [pc, #140]	; (8007ffc <UART_Start_Receive_IT+0x240>)
 8007f6e:	675a      	str	r2, [r3, #116]	; 0x74
 8007f70:	e002      	b.n	8007f78 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a22      	ldr	r2, [pc, #136]	; (8008000 <UART_Start_Receive_IT+0x244>)
 8007f76:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d019      	beq.n	8007fb4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f80:	f3ef 8310 	mrs	r3, PRIMASK
 8007f84:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f86:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	f383 8810 	msr	PRIMASK, r3
}
 8007f94:	46c0      	nop			; (mov r8, r8)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2190      	movs	r1, #144	; 0x90
 8007fa2:	0049      	lsls	r1, r1, #1
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	f383 8810 	msr	PRIMASK, r3
}
 8007fb2:	e018      	b.n	8007fe6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007fb8:	613b      	str	r3, [r7, #16]
  return(result);
 8007fba:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fbc:	653b      	str	r3, [r7, #80]	; 0x50
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f383 8810 	msr	PRIMASK, r3
}
 8007fc8:	46c0      	nop			; (mov r8, r8)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2120      	movs	r1, #32
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	f383 8810 	msr	PRIMASK, r3
}
 8007fe4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	0018      	movs	r0, r3
 8007fea:	46bd      	mov	sp, r7
 8007fec:	b018      	add	sp, #96	; 0x60
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	000001ff 	.word	0x000001ff
 8007ff4:	0800872d 	.word	0x0800872d
 8007ff8:	08008441 	.word	0x08008441
 8007ffc:	080082cd 	.word	0x080082cd
 8008000:	08008159 	.word	0x08008159

08008004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08e      	sub	sp, #56	; 0x38
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800800c:	f3ef 8310 	mrs	r3, PRIMASK
 8008010:	617b      	str	r3, [r7, #20]
  return(result);
 8008012:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
 8008016:	2301      	movs	r3, #1
 8008018:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	f383 8810 	msr	PRIMASK, r3
}
 8008020:	46c0      	nop			; (mov r8, r8)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4926      	ldr	r1, [pc, #152]	; (80080c8 <UART_EndRxTransfer+0xc4>)
 800802e:	400a      	ands	r2, r1
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008034:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	f383 8810 	msr	PRIMASK, r3
}
 800803c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800803e:	f3ef 8310 	mrs	r3, PRIMASK
 8008042:	623b      	str	r3, [r7, #32]
  return(result);
 8008044:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008046:	633b      	str	r3, [r7, #48]	; 0x30
 8008048:	2301      	movs	r3, #1
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	f383 8810 	msr	PRIMASK, r3
}
 8008052:	46c0      	nop			; (mov r8, r8)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	491b      	ldr	r1, [pc, #108]	; (80080cc <UART_EndRxTransfer+0xc8>)
 8008060:	400a      	ands	r2, r1
 8008062:	609a      	str	r2, [r3, #8]
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	f383 8810 	msr	PRIMASK, r3
}
 800806e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008074:	2b01      	cmp	r3, #1
 8008076:	d118      	bne.n	80080aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008078:	f3ef 8310 	mrs	r3, PRIMASK
 800807c:	60bb      	str	r3, [r7, #8]
  return(result);
 800807e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008082:	2301      	movs	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f383 8810 	msr	PRIMASK, r3
}
 800808c:	46c0      	nop			; (mov r8, r8)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2110      	movs	r1, #16
 800809a:	438a      	bics	r2, r1
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f383 8810 	msr	PRIMASK, r3
}
 80080a8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	228c      	movs	r2, #140	; 0x8c
 80080ae:	2120      	movs	r1, #32
 80080b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	46bd      	mov	sp, r7
 80080c2:	b00e      	add	sp, #56	; 0x38
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	fffffedf 	.word	0xfffffedf
 80080cc:	effffffe 	.word	0xeffffffe

080080d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	225e      	movs	r2, #94	; 0x5e
 80080e2:	2100      	movs	r1, #0
 80080e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2256      	movs	r2, #86	; 0x56
 80080ea:	2100      	movs	r1, #0
 80080ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	0018      	movs	r0, r3
 80080f2:	f7ff fae1 	bl	80076b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b004      	add	sp, #16
 80080fc:	bd80      	pop	{r7, pc}

080080fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b086      	sub	sp, #24
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008106:	f3ef 8310 	mrs	r3, PRIMASK
 800810a:	60bb      	str	r3, [r7, #8]
  return(result);
 800810c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	2301      	movs	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f383 8810 	msr	PRIMASK, r3
}
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2140      	movs	r1, #64	; 0x40
 8008128:	438a      	bics	r2, r1
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f383 8810 	msr	PRIMASK, r3
}
 8008136:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2288      	movs	r2, #136	; 0x88
 800813c:	2120      	movs	r1, #32
 800813e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	0018      	movs	r0, r3
 800814a:	f7ff faad 	bl	80076a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	46bd      	mov	sp, r7
 8008152:	b006      	add	sp, #24
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b090      	sub	sp, #64	; 0x40
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008160:	203e      	movs	r0, #62	; 0x3e
 8008162:	183b      	adds	r3, r7, r0
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	2160      	movs	r1, #96	; 0x60
 8008168:	5a52      	ldrh	r2, [r2, r1]
 800816a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	228c      	movs	r2, #140	; 0x8c
 8008170:	589b      	ldr	r3, [r3, r2]
 8008172:	2b22      	cmp	r3, #34	; 0x22
 8008174:	d000      	beq.n	8008178 <UART_RxISR_8BIT+0x20>
 8008176:	e09a      	b.n	80082ae <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800817e:	213c      	movs	r1, #60	; 0x3c
 8008180:	187b      	adds	r3, r7, r1
 8008182:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008184:	187b      	adds	r3, r7, r1
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	b2da      	uxtb	r2, r3
 800818a:	183b      	adds	r3, r7, r0
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b2d9      	uxtb	r1, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008194:	400a      	ands	r2, r1
 8008196:	b2d2      	uxtb	r2, r2
 8008198:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	225e      	movs	r2, #94	; 0x5e
 80081a8:	5a9b      	ldrh	r3, [r3, r2]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b299      	uxth	r1, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	225e      	movs	r2, #94	; 0x5e
 80081b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	225e      	movs	r2, #94	; 0x5e
 80081ba:	5a9b      	ldrh	r3, [r3, r2]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d000      	beq.n	80081c4 <UART_RxISR_8BIT+0x6c>
 80081c2:	e07c      	b.n	80082be <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c4:	f3ef 8310 	mrs	r3, PRIMASK
 80081c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80081ca:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80081ce:	2301      	movs	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	f383 8810 	msr	PRIMASK, r3
}
 80081d8:	46c0      	nop			; (mov r8, r8)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4938      	ldr	r1, [pc, #224]	; (80082c8 <UART_RxISR_8BIT+0x170>)
 80081e6:	400a      	ands	r2, r1
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	f383 8810 	msr	PRIMASK, r3
}
 80081f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f6:	f3ef 8310 	mrs	r3, PRIMASK
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008200:	2301      	movs	r3, #1
 8008202:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	f383 8810 	msr	PRIMASK, r3
}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689a      	ldr	r2, [r3, #8]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2101      	movs	r1, #1
 8008218:	438a      	bics	r2, r1
 800821a:	609a      	str	r2, [r3, #8]
 800821c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	f383 8810 	msr	PRIMASK, r3
}
 8008226:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	228c      	movs	r2, #140	; 0x8c
 800822c:	2120      	movs	r1, #32
 800822e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008240:	2b01      	cmp	r3, #1
 8008242:	d12f      	bne.n	80082a4 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800824a:	f3ef 8310 	mrs	r3, PRIMASK
 800824e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008250:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008252:	633b      	str	r3, [r7, #48]	; 0x30
 8008254:	2301      	movs	r3, #1
 8008256:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f383 8810 	msr	PRIMASK, r3
}
 800825e:	46c0      	nop			; (mov r8, r8)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2110      	movs	r1, #16
 800826c:	438a      	bics	r2, r1
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f383 8810 	msr	PRIMASK, r3
}
 800827a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	2210      	movs	r2, #16
 8008284:	4013      	ands	r3, r2
 8008286:	2b10      	cmp	r3, #16
 8008288:	d103      	bne.n	8008292 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2210      	movs	r2, #16
 8008290:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	225c      	movs	r2, #92	; 0x5c
 8008296:	5a9a      	ldrh	r2, [r3, r2]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	0011      	movs	r1, r2
 800829c:	0018      	movs	r0, r3
 800829e:	f7ff fa13 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082a2:	e00c      	b.n	80082be <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	0018      	movs	r0, r3
 80082a8:	f001 fa72 	bl	8009790 <HAL_UART_RxCpltCallback>
}
 80082ac:	e007      	b.n	80082be <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699a      	ldr	r2, [r3, #24]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2108      	movs	r1, #8
 80082ba:	430a      	orrs	r2, r1
 80082bc:	619a      	str	r2, [r3, #24]
}
 80082be:	46c0      	nop			; (mov r8, r8)
 80082c0:	46bd      	mov	sp, r7
 80082c2:	b010      	add	sp, #64	; 0x40
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	46c0      	nop			; (mov r8, r8)
 80082c8:	fffffedf 	.word	0xfffffedf

080082cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b090      	sub	sp, #64	; 0x40
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80082d4:	203e      	movs	r0, #62	; 0x3e
 80082d6:	183b      	adds	r3, r7, r0
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	2160      	movs	r1, #96	; 0x60
 80082dc:	5a52      	ldrh	r2, [r2, r1]
 80082de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	228c      	movs	r2, #140	; 0x8c
 80082e4:	589b      	ldr	r3, [r3, r2]
 80082e6:	2b22      	cmp	r3, #34	; 0x22
 80082e8:	d000      	beq.n	80082ec <UART_RxISR_16BIT+0x20>
 80082ea:	e09a      	b.n	8008422 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082f2:	213c      	movs	r1, #60	; 0x3c
 80082f4:	187b      	adds	r3, r7, r1
 80082f6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fc:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80082fe:	187b      	adds	r3, r7, r1
 8008300:	183a      	adds	r2, r7, r0
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	8812      	ldrh	r2, [r2, #0]
 8008306:	4013      	ands	r3, r2
 8008308:	b29a      	uxth	r2, r3
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008312:	1c9a      	adds	r2, r3, #2
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	225e      	movs	r2, #94	; 0x5e
 800831c:	5a9b      	ldrh	r3, [r3, r2]
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b299      	uxth	r1, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	225e      	movs	r2, #94	; 0x5e
 8008328:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	225e      	movs	r2, #94	; 0x5e
 800832e:	5a9b      	ldrh	r3, [r3, r2]
 8008330:	b29b      	uxth	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d000      	beq.n	8008338 <UART_RxISR_16BIT+0x6c>
 8008336:	e07c      	b.n	8008432 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008338:	f3ef 8310 	mrs	r3, PRIMASK
 800833c:	617b      	str	r3, [r7, #20]
  return(result);
 800833e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
 8008342:	2301      	movs	r3, #1
 8008344:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	f383 8810 	msr	PRIMASK, r3
}
 800834c:	46c0      	nop			; (mov r8, r8)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4938      	ldr	r1, [pc, #224]	; (800843c <UART_RxISR_16BIT+0x170>)
 800835a:	400a      	ands	r2, r1
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008360:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	f383 8810 	msr	PRIMASK, r3
}
 8008368:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800836a:	f3ef 8310 	mrs	r3, PRIMASK
 800836e:	623b      	str	r3, [r7, #32]
  return(result);
 8008370:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008372:	633b      	str	r3, [r7, #48]	; 0x30
 8008374:	2301      	movs	r3, #1
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	f383 8810 	msr	PRIMASK, r3
}
 800837e:	46c0      	nop			; (mov r8, r8)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2101      	movs	r1, #1
 800838c:	438a      	bics	r2, r1
 800838e:	609a      	str	r2, [r3, #8]
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	f383 8810 	msr	PRIMASK, r3
}
 800839a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	228c      	movs	r2, #140	; 0x8c
 80083a0:	2120      	movs	r1, #32
 80083a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d12f      	bne.n	8008418 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083be:	f3ef 8310 	mrs	r3, PRIMASK
 80083c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80083c4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083c8:	2301      	movs	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f383 8810 	msr	PRIMASK, r3
}
 80083d2:	46c0      	nop			; (mov r8, r8)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2110      	movs	r1, #16
 80083e0:	438a      	bics	r2, r1
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f383 8810 	msr	PRIMASK, r3
}
 80083ee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	2210      	movs	r2, #16
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b10      	cmp	r3, #16
 80083fc:	d103      	bne.n	8008406 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2210      	movs	r2, #16
 8008404:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	225c      	movs	r2, #92	; 0x5c
 800840a:	5a9a      	ldrh	r2, [r3, r2]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	0011      	movs	r1, r2
 8008410:	0018      	movs	r0, r3
 8008412:	f7ff f959 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008416:	e00c      	b.n	8008432 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	0018      	movs	r0, r3
 800841c:	f001 f9b8 	bl	8009790 <HAL_UART_RxCpltCallback>
}
 8008420:	e007      	b.n	8008432 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2108      	movs	r1, #8
 800842e:	430a      	orrs	r2, r1
 8008430:	619a      	str	r2, [r3, #24]
}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	46bd      	mov	sp, r7
 8008436:	b010      	add	sp, #64	; 0x40
 8008438:	bd80      	pop	{r7, pc}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	fffffedf 	.word	0xfffffedf

08008440 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b09c      	sub	sp, #112	; 0x70
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008448:	236a      	movs	r3, #106	; 0x6a
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	2160      	movs	r1, #96	; 0x60
 8008450:	5a52      	ldrh	r2, [r2, r1]
 8008452:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	228c      	movs	r2, #140	; 0x8c
 8008470:	589b      	ldr	r3, [r3, r2]
 8008472:	2b22      	cmp	r3, #34	; 0x22
 8008474:	d000      	beq.n	8008478 <UART_RxISR_8BIT_FIFOEN+0x38>
 8008476:	e144      	b.n	8008702 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008478:	235e      	movs	r3, #94	; 0x5e
 800847a:	18fb      	adds	r3, r7, r3
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	2168      	movs	r1, #104	; 0x68
 8008480:	5a52      	ldrh	r2, [r2, r1]
 8008482:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008484:	e0eb      	b.n	800865e <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800848c:	215c      	movs	r1, #92	; 0x5c
 800848e:	187b      	adds	r3, r7, r1
 8008490:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008492:	187b      	adds	r3, r7, r1
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b2da      	uxtb	r2, r3
 8008498:	236a      	movs	r3, #106	; 0x6a
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	b2d9      	uxtb	r1, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a4:	400a      	ands	r2, r1
 80084a6:	b2d2      	uxtb	r2, r2
 80084a8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	225e      	movs	r2, #94	; 0x5e
 80084b8:	5a9b      	ldrh	r3, [r3, r2]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	3b01      	subs	r3, #1
 80084be:	b299      	uxth	r1, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	225e      	movs	r2, #94	; 0x5e
 80084c4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80084ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d0:	2207      	movs	r2, #7
 80084d2:	4013      	ands	r3, r2
 80084d4:	d049      	beq.n	800856a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d8:	2201      	movs	r2, #1
 80084da:	4013      	ands	r3, r2
 80084dc:	d010      	beq.n	8008500 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80084de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084e0:	2380      	movs	r3, #128	; 0x80
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	4013      	ands	r3, r2
 80084e6:	d00b      	beq.n	8008500 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2201      	movs	r2, #1
 80084ee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2290      	movs	r2, #144	; 0x90
 80084f4:	589b      	ldr	r3, [r3, r2]
 80084f6:	2201      	movs	r2, #1
 80084f8:	431a      	orrs	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2190      	movs	r1, #144	; 0x90
 80084fe:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008502:	2202      	movs	r2, #2
 8008504:	4013      	ands	r3, r2
 8008506:	d00f      	beq.n	8008528 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8008508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800850a:	2201      	movs	r2, #1
 800850c:	4013      	ands	r3, r2
 800850e:	d00b      	beq.n	8008528 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2202      	movs	r2, #2
 8008516:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2290      	movs	r2, #144	; 0x90
 800851c:	589b      	ldr	r3, [r3, r2]
 800851e:	2204      	movs	r2, #4
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2190      	movs	r1, #144	; 0x90
 8008526:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800852a:	2204      	movs	r2, #4
 800852c:	4013      	ands	r3, r2
 800852e:	d00f      	beq.n	8008550 <UART_RxISR_8BIT_FIFOEN+0x110>
 8008530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008532:	2201      	movs	r2, #1
 8008534:	4013      	ands	r3, r2
 8008536:	d00b      	beq.n	8008550 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2204      	movs	r2, #4
 800853e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2290      	movs	r2, #144	; 0x90
 8008544:	589b      	ldr	r3, [r3, r2]
 8008546:	2202      	movs	r2, #2
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2190      	movs	r1, #144	; 0x90
 800854e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2290      	movs	r2, #144	; 0x90
 8008554:	589b      	ldr	r3, [r3, r2]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d007      	beq.n	800856a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	0018      	movs	r0, r3
 800855e:	f7ff f8ab 	bl	80076b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2290      	movs	r2, #144	; 0x90
 8008566:	2100      	movs	r1, #0
 8008568:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	225e      	movs	r2, #94	; 0x5e
 800856e:	5a9b      	ldrh	r3, [r3, r2]
 8008570:	b29b      	uxth	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d173      	bne.n	800865e <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008576:	f3ef 8310 	mrs	r3, PRIMASK
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800857e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008580:	2301      	movs	r3, #1
 8008582:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	f383 8810 	msr	PRIMASK, r3
}
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4961      	ldr	r1, [pc, #388]	; (800871c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8008598:	400a      	ands	r2, r1
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800859e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a2:	f383 8810 	msr	PRIMASK, r3
}
 80085a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a8:	f3ef 8310 	mrs	r3, PRIMASK
 80085ac:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085b0:	657b      	str	r3, [r7, #84]	; 0x54
 80085b2:	2301      	movs	r3, #1
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b8:	f383 8810 	msr	PRIMASK, r3
}
 80085bc:	46c0      	nop			; (mov r8, r8)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4955      	ldr	r1, [pc, #340]	; (8008720 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80085ca:	400a      	ands	r2, r1
 80085cc:	609a      	str	r2, [r3, #8]
 80085ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085d0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d4:	f383 8810 	msr	PRIMASK, r3
}
 80085d8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	228c      	movs	r2, #140	; 0x8c
 80085de:	2120      	movs	r1, #32
 80085e0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d12f      	bne.n	8008656 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008600:	623b      	str	r3, [r7, #32]
  return(result);
 8008602:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008604:	653b      	str	r3, [r7, #80]	; 0x50
 8008606:	2301      	movs	r3, #1
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	f383 8810 	msr	PRIMASK, r3
}
 8008610:	46c0      	nop			; (mov r8, r8)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2110      	movs	r1, #16
 800861e:	438a      	bics	r2, r1
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008624:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	f383 8810 	msr	PRIMASK, r3
}
 800862c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	2210      	movs	r2, #16
 8008636:	4013      	ands	r3, r2
 8008638:	2b10      	cmp	r3, #16
 800863a:	d103      	bne.n	8008644 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2210      	movs	r2, #16
 8008642:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	225c      	movs	r2, #92	; 0x5c
 8008648:	5a9a      	ldrh	r2, [r3, r2]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	0011      	movs	r1, r2
 800864e:	0018      	movs	r0, r3
 8008650:	f7ff f83a 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
 8008654:	e003      	b.n	800865e <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	0018      	movs	r0, r3
 800865a:	f001 f899 	bl	8009790 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800865e:	235e      	movs	r3, #94	; 0x5e
 8008660:	18fb      	adds	r3, r7, r3
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <UART_RxISR_8BIT_FIFOEN+0x232>
 8008668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800866a:	2220      	movs	r2, #32
 800866c:	4013      	ands	r3, r2
 800866e:	d000      	beq.n	8008672 <UART_RxISR_8BIT_FIFOEN+0x232>
 8008670:	e709      	b.n	8008486 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008672:	204e      	movs	r0, #78	; 0x4e
 8008674:	183b      	adds	r3, r7, r0
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	215e      	movs	r1, #94	; 0x5e
 800867a:	5a52      	ldrh	r2, [r2, r1]
 800867c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800867e:	0001      	movs	r1, r0
 8008680:	187b      	adds	r3, r7, r1
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d044      	beq.n	8008712 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2268      	movs	r2, #104	; 0x68
 800868c:	5a9b      	ldrh	r3, [r3, r2]
 800868e:	187a      	adds	r2, r7, r1
 8008690:	8812      	ldrh	r2, [r2, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d23d      	bcs.n	8008712 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008696:	f3ef 8310 	mrs	r3, PRIMASK
 800869a:	60bb      	str	r3, [r7, #8]
  return(result);
 800869c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800869e:	64bb      	str	r3, [r7, #72]	; 0x48
 80086a0:	2301      	movs	r3, #1
 80086a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f383 8810 	msr	PRIMASK, r3
}
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689a      	ldr	r2, [r3, #8]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	491b      	ldr	r1, [pc, #108]	; (8008724 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80086b8:	400a      	ands	r2, r1
 80086ba:	609a      	str	r2, [r3, #8]
 80086bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f383 8810 	msr	PRIMASK, r3
}
 80086c6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a17      	ldr	r2, [pc, #92]	; (8008728 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80086cc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ce:	f3ef 8310 	mrs	r3, PRIMASK
 80086d2:	617b      	str	r3, [r7, #20]
  return(result);
 80086d4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086d6:	647b      	str	r3, [r7, #68]	; 0x44
 80086d8:	2301      	movs	r3, #1
 80086da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	f383 8810 	msr	PRIMASK, r3
}
 80086e2:	46c0      	nop			; (mov r8, r8)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2120      	movs	r1, #32
 80086f0:	430a      	orrs	r2, r1
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	f383 8810 	msr	PRIMASK, r3
}
 80086fe:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008700:	e007      	b.n	8008712 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	699a      	ldr	r2, [r3, #24]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2108      	movs	r1, #8
 800870e:	430a      	orrs	r2, r1
 8008710:	619a      	str	r2, [r3, #24]
}
 8008712:	46c0      	nop			; (mov r8, r8)
 8008714:	46bd      	mov	sp, r7
 8008716:	b01c      	add	sp, #112	; 0x70
 8008718:	bd80      	pop	{r7, pc}
 800871a:	46c0      	nop			; (mov r8, r8)
 800871c:	fffffeff 	.word	0xfffffeff
 8008720:	effffffe 	.word	0xeffffffe
 8008724:	efffffff 	.word	0xefffffff
 8008728:	08008159 	.word	0x08008159

0800872c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b09e      	sub	sp, #120	; 0x78
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008734:	2372      	movs	r3, #114	; 0x72
 8008736:	18fb      	adds	r3, r7, r3
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	2160      	movs	r1, #96	; 0x60
 800873c:	5a52      	ldrh	r2, [r2, r1]
 800873e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	228c      	movs	r2, #140	; 0x8c
 800875c:	589b      	ldr	r3, [r3, r2]
 800875e:	2b22      	cmp	r3, #34	; 0x22
 8008760:	d000      	beq.n	8008764 <UART_RxISR_16BIT_FIFOEN+0x38>
 8008762:	e144      	b.n	80089ee <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008764:	2366      	movs	r3, #102	; 0x66
 8008766:	18fb      	adds	r3, r7, r3
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	2168      	movs	r1, #104	; 0x68
 800876c:	5a52      	ldrh	r2, [r2, r1]
 800876e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008770:	e0eb      	b.n	800894a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008778:	2164      	movs	r1, #100	; 0x64
 800877a:	187b      	adds	r3, r7, r1
 800877c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008782:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8008784:	187b      	adds	r3, r7, r1
 8008786:	2272      	movs	r2, #114	; 0x72
 8008788:	18ba      	adds	r2, r7, r2
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	8812      	ldrh	r2, [r2, #0]
 800878e:	4013      	ands	r3, r2
 8008790:	b29a      	uxth	r2, r3
 8008792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008794:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879a:	1c9a      	adds	r2, r3, #2
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	225e      	movs	r2, #94	; 0x5e
 80087a4:	5a9b      	ldrh	r3, [r3, r2]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	3b01      	subs	r3, #1
 80087aa:	b299      	uxth	r1, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	225e      	movs	r2, #94	; 0x5e
 80087b0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80087ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087bc:	2207      	movs	r2, #7
 80087be:	4013      	ands	r3, r2
 80087c0:	d049      	beq.n	8008856 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087c4:	2201      	movs	r2, #1
 80087c6:	4013      	ands	r3, r2
 80087c8:	d010      	beq.n	80087ec <UART_RxISR_16BIT_FIFOEN+0xc0>
 80087ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087cc:	2380      	movs	r3, #128	; 0x80
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	4013      	ands	r3, r2
 80087d2:	d00b      	beq.n	80087ec <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2201      	movs	r2, #1
 80087da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2290      	movs	r2, #144	; 0x90
 80087e0:	589b      	ldr	r3, [r3, r2]
 80087e2:	2201      	movs	r2, #1
 80087e4:	431a      	orrs	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2190      	movs	r1, #144	; 0x90
 80087ea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ee:	2202      	movs	r2, #2
 80087f0:	4013      	ands	r3, r2
 80087f2:	d00f      	beq.n	8008814 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80087f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087f6:	2201      	movs	r2, #1
 80087f8:	4013      	ands	r3, r2
 80087fa:	d00b      	beq.n	8008814 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2202      	movs	r2, #2
 8008802:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2290      	movs	r2, #144	; 0x90
 8008808:	589b      	ldr	r3, [r3, r2]
 800880a:	2204      	movs	r2, #4
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2190      	movs	r1, #144	; 0x90
 8008812:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008816:	2204      	movs	r2, #4
 8008818:	4013      	ands	r3, r2
 800881a:	d00f      	beq.n	800883c <UART_RxISR_16BIT_FIFOEN+0x110>
 800881c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800881e:	2201      	movs	r2, #1
 8008820:	4013      	ands	r3, r2
 8008822:	d00b      	beq.n	800883c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2204      	movs	r2, #4
 800882a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2290      	movs	r2, #144	; 0x90
 8008830:	589b      	ldr	r3, [r3, r2]
 8008832:	2202      	movs	r2, #2
 8008834:	431a      	orrs	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2190      	movs	r1, #144	; 0x90
 800883a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2290      	movs	r2, #144	; 0x90
 8008840:	589b      	ldr	r3, [r3, r2]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d007      	beq.n	8008856 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	0018      	movs	r0, r3
 800884a:	f7fe ff35 	bl	80076b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2290      	movs	r2, #144	; 0x90
 8008852:	2100      	movs	r1, #0
 8008854:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	225e      	movs	r2, #94	; 0x5e
 800885a:	5a9b      	ldrh	r3, [r3, r2]
 800885c:	b29b      	uxth	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d173      	bne.n	800894a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008862:	f3ef 8310 	mrs	r3, PRIMASK
 8008866:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800886a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800886c:	2301      	movs	r3, #1
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	f383 8810 	msr	PRIMASK, r3
}
 8008876:	46c0      	nop			; (mov r8, r8)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4961      	ldr	r1, [pc, #388]	; (8008a08 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8008884:	400a      	ands	r2, r1
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800888a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888e:	f383 8810 	msr	PRIMASK, r3
}
 8008892:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008894:	f3ef 8310 	mrs	r3, PRIMASK
 8008898:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800889a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800889c:	65bb      	str	r3, [r7, #88]	; 0x58
 800889e:	2301      	movs	r3, #1
 80088a0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a4:	f383 8810 	msr	PRIMASK, r3
}
 80088a8:	46c0      	nop			; (mov r8, r8)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4955      	ldr	r1, [pc, #340]	; (8008a0c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80088b6:	400a      	ands	r2, r1
 80088b8:	609a      	str	r2, [r3, #8]
 80088ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088bc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c0:	f383 8810 	msr	PRIMASK, r3
}
 80088c4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	228c      	movs	r2, #140	; 0x8c
 80088ca:	2120      	movs	r1, #32
 80088cc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d12f      	bne.n	8008942 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088e8:	f3ef 8310 	mrs	r3, PRIMASK
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f0:	657b      	str	r3, [r7, #84]	; 0x54
 80088f2:	2301      	movs	r3, #1
 80088f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	f383 8810 	msr	PRIMASK, r3
}
 80088fc:	46c0      	nop			; (mov r8, r8)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2110      	movs	r1, #16
 800890a:	438a      	bics	r2, r1
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008910:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	f383 8810 	msr	PRIMASK, r3
}
 8008918:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	2210      	movs	r2, #16
 8008922:	4013      	ands	r3, r2
 8008924:	2b10      	cmp	r3, #16
 8008926:	d103      	bne.n	8008930 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2210      	movs	r2, #16
 800892e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	225c      	movs	r2, #92	; 0x5c
 8008934:	5a9a      	ldrh	r2, [r3, r2]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	0011      	movs	r1, r2
 800893a:	0018      	movs	r0, r3
 800893c:	f7fe fec4 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
 8008940:	e003      	b.n	800894a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	0018      	movs	r0, r3
 8008946:	f000 ff23 	bl	8009790 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800894a:	2366      	movs	r3, #102	; 0x66
 800894c:	18fb      	adds	r3, r7, r3
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <UART_RxISR_16BIT_FIFOEN+0x232>
 8008954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008956:	2220      	movs	r2, #32
 8008958:	4013      	ands	r3, r2
 800895a:	d000      	beq.n	800895e <UART_RxISR_16BIT_FIFOEN+0x232>
 800895c:	e709      	b.n	8008772 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800895e:	2052      	movs	r0, #82	; 0x52
 8008960:	183b      	adds	r3, r7, r0
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	215e      	movs	r1, #94	; 0x5e
 8008966:	5a52      	ldrh	r2, [r2, r1]
 8008968:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800896a:	0001      	movs	r1, r0
 800896c:	187b      	adds	r3, r7, r1
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d044      	beq.n	80089fe <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2268      	movs	r2, #104	; 0x68
 8008978:	5a9b      	ldrh	r3, [r3, r2]
 800897a:	187a      	adds	r2, r7, r1
 800897c:	8812      	ldrh	r2, [r2, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d23d      	bcs.n	80089fe <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008982:	f3ef 8310 	mrs	r3, PRIMASK
 8008986:	60fb      	str	r3, [r7, #12]
  return(result);
 8008988:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800898a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800898c:	2301      	movs	r3, #1
 800898e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f383 8810 	msr	PRIMASK, r3
}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689a      	ldr	r2, [r3, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	491b      	ldr	r1, [pc, #108]	; (8008a10 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80089a4:	400a      	ands	r2, r1
 80089a6:	609a      	str	r2, [r3, #8]
 80089a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f383 8810 	msr	PRIMASK, r3
}
 80089b2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a17      	ldr	r2, [pc, #92]	; (8008a14 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80089b8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ba:	f3ef 8310 	mrs	r3, PRIMASK
 80089be:	61bb      	str	r3, [r7, #24]
  return(result);
 80089c0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80089c4:	2301      	movs	r3, #1
 80089c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f383 8810 	msr	PRIMASK, r3
}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2120      	movs	r1, #32
 80089dc:	430a      	orrs	r2, r1
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	f383 8810 	msr	PRIMASK, r3
}
 80089ea:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089ec:	e007      	b.n	80089fe <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	699a      	ldr	r2, [r3, #24]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2108      	movs	r1, #8
 80089fa:	430a      	orrs	r2, r1
 80089fc:	619a      	str	r2, [r3, #24]
}
 80089fe:	46c0      	nop			; (mov r8, r8)
 8008a00:	46bd      	mov	sp, r7
 8008a02:	b01e      	add	sp, #120	; 0x78
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	46c0      	nop			; (mov r8, r8)
 8008a08:	fffffeff 	.word	0xfffffeff
 8008a0c:	effffffe 	.word	0xeffffffe
 8008a10:	efffffff 	.word	0xefffffff
 8008a14:	080082cd 	.word	0x080082cd

08008a18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a20:	46c0      	nop			; (mov r8, r8)
 8008a22:	46bd      	mov	sp, r7
 8008a24:	b002      	add	sp, #8
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a30:	46c0      	nop			; (mov r8, r8)
 8008a32:	46bd      	mov	sp, r7
 8008a34:	b002      	add	sp, #8
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a40:	46c0      	nop			; (mov r8, r8)
 8008a42:	46bd      	mov	sp, r7
 8008a44:	b002      	add	sp, #8
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2284      	movs	r2, #132	; 0x84
 8008a54:	5c9b      	ldrb	r3, [r3, r2]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d101      	bne.n	8008a5e <HAL_UARTEx_DisableFifoMode+0x16>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e027      	b.n	8008aae <HAL_UARTEx_DisableFifoMode+0x66>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2284      	movs	r2, #132	; 0x84
 8008a62:	2101      	movs	r1, #1
 8008a64:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2288      	movs	r2, #136	; 0x88
 8008a6a:	2124      	movs	r1, #36	; 0x24
 8008a6c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2101      	movs	r1, #1
 8008a82:	438a      	bics	r2, r1
 8008a84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4a0b      	ldr	r2, [pc, #44]	; (8008ab8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2288      	movs	r2, #136	; 0x88
 8008aa0:	2120      	movs	r1, #32
 8008aa2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2284      	movs	r2, #132	; 0x84
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	0018      	movs	r0, r3
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	b004      	add	sp, #16
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	46c0      	nop			; (mov r8, r8)
 8008ab8:	dfffffff 	.word	0xdfffffff

08008abc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2284      	movs	r2, #132	; 0x84
 8008aca:	5c9b      	ldrb	r3, [r3, r2]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d101      	bne.n	8008ad4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e02e      	b.n	8008b32 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2284      	movs	r2, #132	; 0x84
 8008ad8:	2101      	movs	r1, #1
 8008ada:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2288      	movs	r2, #136	; 0x88
 8008ae0:	2124      	movs	r1, #36	; 0x24
 8008ae2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2101      	movs	r1, #1
 8008af8:	438a      	bics	r2, r1
 8008afa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	08d9      	lsrs	r1, r3, #3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	0018      	movs	r0, r3
 8008b14:	f000 f854 	bl	8008bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2288      	movs	r2, #136	; 0x88
 8008b24:	2120      	movs	r1, #32
 8008b26:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2284      	movs	r2, #132	; 0x84
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	0018      	movs	r0, r3
 8008b34:	46bd      	mov	sp, r7
 8008b36:	b004      	add	sp, #16
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2284      	movs	r2, #132	; 0x84
 8008b4a:	5c9b      	ldrb	r3, [r3, r2]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e02f      	b.n	8008bb4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2284      	movs	r2, #132	; 0x84
 8008b58:	2101      	movs	r1, #1
 8008b5a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2288      	movs	r2, #136	; 0x88
 8008b60:	2124      	movs	r1, #36	; 0x24
 8008b62:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2101      	movs	r1, #1
 8008b78:	438a      	bics	r2, r1
 8008b7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	4a0e      	ldr	r2, [pc, #56]	; (8008bbc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008b84:	4013      	ands	r3, r2
 8008b86:	0019      	movs	r1, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	0018      	movs	r0, r3
 8008b96:	f000 f813 	bl	8008bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2288      	movs	r2, #136	; 0x88
 8008ba6:	2120      	movs	r1, #32
 8008ba8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2284      	movs	r2, #132	; 0x84
 8008bae:	2100      	movs	r1, #0
 8008bb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	b004      	add	sp, #16
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	f1ffffff 	.word	0xf1ffffff

08008bc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d108      	bne.n	8008be2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	226a      	movs	r2, #106	; 0x6a
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2268      	movs	r2, #104	; 0x68
 8008bdc:	2101      	movs	r1, #1
 8008bde:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008be0:	e043      	b.n	8008c6a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008be2:	260f      	movs	r6, #15
 8008be4:	19bb      	adds	r3, r7, r6
 8008be6:	2208      	movs	r2, #8
 8008be8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bea:	200e      	movs	r0, #14
 8008bec:	183b      	adds	r3, r7, r0
 8008bee:	2208      	movs	r2, #8
 8008bf0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	0e5b      	lsrs	r3, r3, #25
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	240d      	movs	r4, #13
 8008bfe:	193b      	adds	r3, r7, r4
 8008c00:	2107      	movs	r1, #7
 8008c02:	400a      	ands	r2, r1
 8008c04:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	0f5b      	lsrs	r3, r3, #29
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	250c      	movs	r5, #12
 8008c12:	197b      	adds	r3, r7, r5
 8008c14:	2107      	movs	r1, #7
 8008c16:	400a      	ands	r2, r1
 8008c18:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c1a:	183b      	adds	r3, r7, r0
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	197a      	adds	r2, r7, r5
 8008c20:	7812      	ldrb	r2, [r2, #0]
 8008c22:	4914      	ldr	r1, [pc, #80]	; (8008c74 <UARTEx_SetNbDataToProcess+0xb4>)
 8008c24:	5c8a      	ldrb	r2, [r1, r2]
 8008c26:	435a      	muls	r2, r3
 8008c28:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c2a:	197b      	adds	r3, r7, r5
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	4a12      	ldr	r2, [pc, #72]	; (8008c78 <UARTEx_SetNbDataToProcess+0xb8>)
 8008c30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c32:	0019      	movs	r1, r3
 8008c34:	f7f7 fb14 	bl	8000260 <__divsi3>
 8008c38:	0003      	movs	r3, r0
 8008c3a:	b299      	uxth	r1, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	226a      	movs	r2, #106	; 0x6a
 8008c40:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c42:	19bb      	adds	r3, r7, r6
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	193a      	adds	r2, r7, r4
 8008c48:	7812      	ldrb	r2, [r2, #0]
 8008c4a:	490a      	ldr	r1, [pc, #40]	; (8008c74 <UARTEx_SetNbDataToProcess+0xb4>)
 8008c4c:	5c8a      	ldrb	r2, [r1, r2]
 8008c4e:	435a      	muls	r2, r3
 8008c50:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c52:	193b      	adds	r3, r7, r4
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	4a08      	ldr	r2, [pc, #32]	; (8008c78 <UARTEx_SetNbDataToProcess+0xb8>)
 8008c58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c5a:	0019      	movs	r1, r3
 8008c5c:	f7f7 fb00 	bl	8000260 <__divsi3>
 8008c60:	0003      	movs	r3, r0
 8008c62:	b299      	uxth	r1, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2268      	movs	r2, #104	; 0x68
 8008c68:	5299      	strh	r1, [r3, r2]
}
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	b005      	add	sp, #20
 8008c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c72:	46c0      	nop			; (mov r8, r8)
 8008c74:	0800e128 	.word	0x0800e128
 8008c78:	0800e130 	.word	0x0800e130

08008c7c <PIDInit>:

PIDTypeDef gSpeedPID;
PIDTypeDef gCurrentPID;

void PIDInit(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
    gSpeedPID.SetPoint = 0;    // set the goal speed
 8008c80:	4b1d      	ldr	r3, [pc, #116]	; (8008cf8 <PIDInit+0x7c>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]
    gSpeedPID.ActualValue = 0; // set the actual speed
 8008c86:	4b1c      	ldr	r3, [pc, #112]	; (8008cf8 <PIDInit+0x7c>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	605a      	str	r2, [r3, #4]

    gSpeedPID.SumError = 0;  // set the sum error
 8008c8c:	4b1a      	ldr	r3, [pc, #104]	; (8008cf8 <PIDInit+0x7c>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	609a      	str	r2, [r3, #8]
    gSpeedPID.Error = 0;     // set the current error
 8008c92:	4b19      	ldr	r3, [pc, #100]	; (8008cf8 <PIDInit+0x7c>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	619a      	str	r2, [r3, #24]
    gSpeedPID.LastError = 0; // set the last error
 8008c98:	4b17      	ldr	r3, [pc, #92]	; (8008cf8 <PIDInit+0x7c>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	61da      	str	r2, [r3, #28]
    gSpeedPID.PrevError = 0; // set the previous error
 8008c9e:	4b16      	ldr	r3, [pc, #88]	; (8008cf8 <PIDInit+0x7c>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	621a      	str	r2, [r3, #32]

    gSpeedPID.Proportion = S_KP; // set the proportion
 8008ca4:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <PIDInit+0x7c>)
 8008ca6:	4a15      	ldr	r2, [pc, #84]	; (8008cfc <PIDInit+0x80>)
 8008ca8:	60da      	str	r2, [r3, #12]
    gSpeedPID.Integral = S_KI;   // set the integral
 8008caa:	4b13      	ldr	r3, [pc, #76]	; (8008cf8 <PIDInit+0x7c>)
 8008cac:	2282      	movs	r2, #130	; 0x82
 8008cae:	05d2      	lsls	r2, r2, #23
 8008cb0:	611a      	str	r2, [r3, #16]
    gSpeedPID.Derivative = S_KD; // set the derivative
 8008cb2:	4b11      	ldr	r3, [pc, #68]	; (8008cf8 <PIDInit+0x7c>)
 8008cb4:	22fc      	movs	r2, #252	; 0xfc
 8008cb6:	0592      	lsls	r2, r2, #22
 8008cb8:	615a      	str	r2, [r3, #20]

    gCurrentPID.SetPoint = 0;    // set the goal current
 8008cba:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <PIDInit+0x84>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
    gCurrentPID.ActualValue = 0; // set the actual current
 8008cc0:	4b0f      	ldr	r3, [pc, #60]	; (8008d00 <PIDInit+0x84>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	605a      	str	r2, [r3, #4]

    gCurrentPID.SumError = 0;  // set the sum error
 8008cc6:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <PIDInit+0x84>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	609a      	str	r2, [r3, #8]
    gCurrentPID.Error = 0;     // set the current error
 8008ccc:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <PIDInit+0x84>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	619a      	str	r2, [r3, #24]
    gCurrentPID.LastError = 0; // set the last error
 8008cd2:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <PIDInit+0x84>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	61da      	str	r2, [r3, #28]
    gCurrentPID.PrevError = 0; // set the previous error
 8008cd8:	4b09      	ldr	r3, [pc, #36]	; (8008d00 <PIDInit+0x84>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	621a      	str	r2, [r3, #32]

    gCurrentPID.Proportion = C_KP; // set the proportion
 8008cde:	4b08      	ldr	r3, [pc, #32]	; (8008d00 <PIDInit+0x84>)
 8008ce0:	4a08      	ldr	r2, [pc, #32]	; (8008d04 <PIDInit+0x88>)
 8008ce2:	60da      	str	r2, [r3, #12]
    gCurrentPID.Integral = C_KI;   // set the integral
 8008ce4:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <PIDInit+0x84>)
 8008ce6:	4a08      	ldr	r2, [pc, #32]	; (8008d08 <PIDInit+0x8c>)
 8008ce8:	611a      	str	r2, [r3, #16]
    gCurrentPID.Derivative = C_KD; // set the derivative
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <PIDInit+0x84>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	615a      	str	r2, [r3, #20]
}
 8008cf0:	46c0      	nop			; (mov r8, r8)
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	46c0      	nop			; (mov r8, r8)
 8008cf8:	2000051c 	.word	0x2000051c
 8008cfc:	41200000 	.word	0x41200000
 8008d00:	20000540 	.word	0x20000540
 8008d04:	3f4ccccd 	.word	0x3f4ccccd
 8008d08:	4525a000 	.word	0x4525a000

08008d0c <setPIDparam>:

void setPIDparam(int argc, char *argv[])
{
 8008d0c:	b5b0      	push	{r4, r5, r7, lr}
 8008d0e:	b08c      	sub	sp, #48	; 0x30
 8008d10:	af04      	add	r7, sp, #16
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
    if (argc != 4)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d004      	beq.n	8008d26 <setPIDparam+0x1a>
    {
        printf("[ERROR]: Invalid number of argument\r\n");
 8008d1c:	4b29      	ldr	r3, [pc, #164]	; (8008dc4 <setPIDparam+0xb8>)
 8008d1e:	0018      	movs	r0, r3
 8008d20:	f002 f964 	bl	800afec <puts>
        return;
 8008d24:	e04b      	b.n	8008dbe <setPIDparam+0xb2>
    }
    float kp = atof(argv[1]);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f000 fd7f 	bl	8009830 <atof>
 8008d32:	0002      	movs	r2, r0
 8008d34:	000b      	movs	r3, r1
 8008d36:	0010      	movs	r0, r2
 8008d38:	0019      	movs	r1, r3
 8008d3a:	f7fa fa07 	bl	800314c <__aeabi_d2f>
 8008d3e:	1c03      	adds	r3, r0, #0
 8008d40:	61fb      	str	r3, [r7, #28]
    float ki = atof(argv[2]);
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	3308      	adds	r3, #8
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	0018      	movs	r0, r3
 8008d4a:	f000 fd71 	bl	8009830 <atof>
 8008d4e:	0002      	movs	r2, r0
 8008d50:	000b      	movs	r3, r1
 8008d52:	0010      	movs	r0, r2
 8008d54:	0019      	movs	r1, r3
 8008d56:	f7fa f9f9 	bl	800314c <__aeabi_d2f>
 8008d5a:	1c03      	adds	r3, r0, #0
 8008d5c:	61bb      	str	r3, [r7, #24]
    float kd = atof(argv[3]);
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	330c      	adds	r3, #12
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	0018      	movs	r0, r3
 8008d66:	f000 fd63 	bl	8009830 <atof>
 8008d6a:	0002      	movs	r2, r0
 8008d6c:	000b      	movs	r3, r1
 8008d6e:	0010      	movs	r0, r2
 8008d70:	0019      	movs	r1, r3
 8008d72:	f7fa f9eb 	bl	800314c <__aeabi_d2f>
 8008d76:	1c03      	adds	r3, r0, #0
 8008d78:	617b      	str	r3, [r7, #20]
    gSpeedPID.Proportion = kp;
 8008d7a:	4b13      	ldr	r3, [pc, #76]	; (8008dc8 <setPIDparam+0xbc>)
 8008d7c:	69fa      	ldr	r2, [r7, #28]
 8008d7e:	60da      	str	r2, [r3, #12]
    gSpeedPID.Integral = ki;
 8008d80:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <setPIDparam+0xbc>)
 8008d82:	69ba      	ldr	r2, [r7, #24]
 8008d84:	611a      	str	r2, [r3, #16]
    gSpeedPID.Derivative = kd;
 8008d86:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <setPIDparam+0xbc>)
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	615a      	str	r2, [r3, #20]
    printf("[INFO]: Set PID param to kp: %f, ki: %f, kd: %f\r\n", kp, ki, kd);
 8008d8c:	69f8      	ldr	r0, [r7, #28]
 8008d8e:	f7fa f995 	bl	80030bc <__aeabi_f2d>
 8008d92:	6038      	str	r0, [r7, #0]
 8008d94:	6079      	str	r1, [r7, #4]
 8008d96:	69b8      	ldr	r0, [r7, #24]
 8008d98:	f7fa f990 	bl	80030bc <__aeabi_f2d>
 8008d9c:	0004      	movs	r4, r0
 8008d9e:	000d      	movs	r5, r1
 8008da0:	6978      	ldr	r0, [r7, #20]
 8008da2:	f7fa f98b 	bl	80030bc <__aeabi_f2d>
 8008da6:	0002      	movs	r2, r0
 8008da8:	000b      	movs	r3, r1
 8008daa:	4908      	ldr	r1, [pc, #32]	; (8008dcc <setPIDparam+0xc0>)
 8008dac:	9202      	str	r2, [sp, #8]
 8008dae:	9303      	str	r3, [sp, #12]
 8008db0:	9400      	str	r4, [sp, #0]
 8008db2:	9501      	str	r5, [sp, #4]
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	0008      	movs	r0, r1
 8008dba:	f002 f8b1 	bl	800af20 <iprintf>
}
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	b008      	add	sp, #32
 8008dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8008dc4:	0800de30 	.word	0x0800de30
 8008dc8:	2000051c 	.word	0x2000051c
 8008dcc:	0800de58 	.word	0x0800de58

08008dd0 <incrementPIDControl>:

float incrementPIDControl(PIDTypeDef *pid, float feedbackValue)
{
 8008dd0:	b5b0      	push	{r4, r5, r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
    pid->Error = (float)(pid->SetPoint - feedbackValue); // calculate the current error  SetPoint在speedProcess中被赋值
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	1c18      	adds	r0, r3, #0
 8008de2:	f7f8 f8c9 	bl	8000f78 <__aeabi_fsub>
 8008de6:	1c03      	adds	r3, r0, #0
 8008de8:	1c1a      	adds	r2, r3, #0
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	619a      	str	r2, [r3, #24]
                        + (pid->Integral * pid->Error)                                            // integral term
                        + (pid->Derivative * (pid->Error - 2 * pid->LastError + pid->PrevError)); // derivative term
    pid->PrevError = pid->LastError;                                                              // save the previous error
    pid->LastError = pid->Error;                                                                   // save the last error
#else //（location PID）
    pid->SumError += pid->Error;                                            // calculate the sum error
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	689a      	ldr	r2, [r3, #8]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	1c19      	adds	r1, r3, #0
 8008df8:	1c10      	adds	r0, r2, #0
 8008dfa:	f7f7 fc05 	bl	8000608 <__aeabi_fadd>
 8008dfe:	1c03      	adds	r3, r0, #0
 8008e00:	1c1a      	adds	r2, r3, #0
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	609a      	str	r2, [r3, #8]
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	1c19      	adds	r1, r3, #0
 8008e10:	1c10      	adds	r0, r2, #0
 8008e12:	f7f7 ff63 	bl	8000cdc <__aeabi_fmul>
 8008e16:	1c03      	adds	r3, r0, #0
 8008e18:	1c1c      	adds	r4, r3, #0
                       + (pid->Integral * pid->SumError)                    // integral term
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	1c19      	adds	r1, r3, #0
 8008e24:	1c10      	adds	r0, r2, #0
 8008e26:	f7f7 ff59 	bl	8000cdc <__aeabi_fmul>
 8008e2a:	1c03      	adds	r3, r0, #0
 8008e2c:	1c19      	adds	r1, r3, #0
 8008e2e:	1c20      	adds	r0, r4, #0
 8008e30:	f7f7 fbea 	bl	8000608 <__aeabi_fadd>
 8008e34:	1c03      	adds	r3, r0, #0
 8008e36:	1c1d      	adds	r5, r3, #0
                       + (pid->Derivative * (pid->Error - pid->LastError)); // derivative term
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	695c      	ldr	r4, [r3, #20]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	699a      	ldr	r2, [r3, #24]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	1c19      	adds	r1, r3, #0
 8008e46:	1c10      	adds	r0, r2, #0
 8008e48:	f7f8 f896 	bl	8000f78 <__aeabi_fsub>
 8008e4c:	1c03      	adds	r3, r0, #0
 8008e4e:	1c19      	adds	r1, r3, #0
 8008e50:	1c20      	adds	r0, r4, #0
 8008e52:	f7f7 ff43 	bl	8000cdc <__aeabi_fmul>
 8008e56:	1c03      	adds	r3, r0, #0
 8008e58:	1c19      	adds	r1, r3, #0
 8008e5a:	1c28      	adds	r0, r5, #0
 8008e5c:	f7f7 fbd4 	bl	8000608 <__aeabi_fadd>
 8008e60:	1c03      	adds	r3, r0, #0
 8008e62:	1c1a      	adds	r2, r3, #0
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	605a      	str	r2, [r3, #4]
    pid->LastError = pid->Error;                                            // save the last error
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	699a      	ldr	r2, [r3, #24]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	61da      	str	r2, [r3, #28]
#endif
    // printf("[INFO]: pid->ActualValue: %f\n", pid->ActualValue);
    return (float)pid->ActualValue; // return the expected value after PID control calculation
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
}
 8008e74:	1c18      	adds	r0, r3, #0
 8008e76:	46bd      	mov	sp, r7
 8008e78:	b002      	add	sp, #8
 8008e7a:	bdb0      	pop	{r4, r5, r7, pc}

08008e7c <stopMotor>:
/**
 * @brief stop the motor by stop the PWM with the command: stop
 *
 */
void stopMotor(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8008e80:	4b0c      	ldr	r3, [pc, #48]	; (8008eb4 <stopMotor+0x38>)
 8008e82:	2100      	movs	r1, #0
 8008e84:	0018      	movs	r0, r3
 8008e86:	f7fc fd7f 	bl	8005988 <HAL_TIM_PWM_Stop>
   // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <stopMotor+0x3c>)
 8008e8c:	2104      	movs	r1, #4
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f7fc fd7a 	bl	8005988 <HAL_TIM_PWM_Stop>
   // HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8008e94:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <stopMotor+0x40>)
 8008e96:	2100      	movs	r1, #0
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f7fc fd75 	bl	8005988 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8008e9e:	4b08      	ldr	r3, [pc, #32]	; (8008ec0 <stopMotor+0x44>)
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7fc fd70 	bl	8005988 <HAL_TIM_PWM_Stop>
    gMotorData.state = MOTOR_STATE_STOP;
 8008ea8:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <stopMotor+0x48>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
}
 8008eae:	46c0      	nop			; (mov r8, r8)
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20000354 	.word	0x20000354
 8008eb8:	200003a0 	.word	0x200003a0
 8008ebc:	200003ec 	.word	0x200003ec
 8008ec0:	20000438 	.word	0x20000438
 8008ec4:	20000570 	.word	0x20000570

08008ec8 <startMotor>:
/**
 * @brief start the motor by start the PWM with the command: start
 *
 */
void startMotor(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8008ecc:	4b0b      	ldr	r3, [pc, #44]	; (8008efc <startMotor+0x34>)
 8008ece:	2100      	movs	r1, #0
 8008ed0:	0018      	movs	r0, r3
 8008ed2:	f7fc fc75 	bl	80057c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <startMotor+0x38>)
 8008ed8:	2104      	movs	r1, #4
 8008eda:	0018      	movs	r0, r3
 8008edc:	f7fc fc70 	bl	80057c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8008ee0:	4b08      	ldr	r3, [pc, #32]	; (8008f04 <startMotor+0x3c>)
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f7fc fc6b 	bl	80057c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8008eea:	4b07      	ldr	r3, [pc, #28]	; (8008f08 <startMotor+0x40>)
 8008eec:	2100      	movs	r1, #0
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f7fc fc66 	bl	80057c0 <HAL_TIM_PWM_Start>

}
 8008ef4:	46c0      	nop			; (mov r8, r8)
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	46c0      	nop			; (mov r8, r8)
 8008efc:	20000354 	.word	0x20000354
 8008f00:	200003a0 	.word	0x200003a0
 8008f04:	200003ec 	.word	0x200003ec
 8008f08:	20000438 	.word	0x20000438

08008f0c <setSpeed>:
 *
 * @param numberofCmdArg the number of command argument
 * @param cmdArg the command argument
 */
void setSpeed(int numberofCmdArg, char *cmdArg[])
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
    speedProcess(numberofCmdArg, cmdArg);
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	0011      	movs	r1, r2
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f000 fab9 	bl	8009494 <speedProcess>
    gMotorData.state = MOTOR_STATE_START;
 8008f22:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <setSpeed+0x24>)
 8008f24:	2201      	movs	r2, #1
 8008f26:	701a      	strb	r2, [r3, #0]
}
 8008f28:	46c0      	nop			; (mov r8, r8)
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	b002      	add	sp, #8
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20000570 	.word	0x20000570

08008f34 <dcMotorInit>:

// founction to init the motor
void dcMotorInit(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
    gencodeSpeed.encode_now = 0;
 8008f38:	4b0e      	ldr	r3, [pc, #56]	; (8008f74 <dcMotorInit+0x40>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	605a      	str	r2, [r3, #4]
    gencodeSpeed.encode_old = 0;
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <dcMotorInit+0x40>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
    gencodeSpeed.speed = 0;
 8008f44:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <dcMotorInit+0x40>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	609a      	str	r2, [r3, #8]
    gMotorData.state = MOTOR_STATE_STOP;
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	; (8008f78 <dcMotorInit+0x44>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	701a      	strb	r2, [r3, #0]
    gMotorData.direction = 1;
 8008f50:	4b09      	ldr	r3, [pc, #36]	; (8008f78 <dcMotorInit+0x44>)
 8008f52:	2201      	movs	r2, #1
 8008f54:	705a      	strb	r2, [r3, #1]
    gMotorData.current = 0;
 8008f56:	4b08      	ldr	r3, [pc, #32]	; (8008f78 <dcMotorInit+0x44>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	605a      	str	r2, [r3, #4]
    gMotorData.voltage = 0;
 8008f5c:	4b06      	ldr	r3, [pc, #24]	; (8008f78 <dcMotorInit+0x44>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	609a      	str	r2, [r3, #8]
    gMotorData.speed = 0;
 8008f62:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <dcMotorInit+0x44>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	60da      	str	r2, [r3, #12]
    gMotorData.motorPWM = 50;
 8008f68:	4b03      	ldr	r3, [pc, #12]	; (8008f78 <dcMotorInit+0x44>)
 8008f6a:	4a04      	ldr	r2, [pc, #16]	; (8008f7c <dcMotorInit+0x48>)
 8008f6c:	611a      	str	r2, [r3, #16]
}
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	20000564 	.word	0x20000564
 8008f78:	20000570 	.word	0x20000570
 8008f7c:	42480000 	.word	0x42480000

08008f80 <speedCompute>:
int32_t speedComputeCount = 0;
float speedArray[10] = {0.0};
int32_t speedArrayFilterIndex = 0;
void speedCompute(int32_t encode_now, uint8_t computePerms)
{
 8008f80:	b5b0      	push	{r4, r5, r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	000a      	movs	r2, r1
 8008f8a:	1cfb      	adds	r3, r7, #3
 8008f8c:	701a      	strb	r2, [r3, #0]
    if (speedComputeCount == computePerms)
 8008f8e:	1cfb      	adds	r3, r7, #3
 8008f90:	781a      	ldrb	r2, [r3, #0]
 8008f92:	4b71      	ldr	r3, [pc, #452]	; (8009158 <speedCompute+0x1d8>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d000      	beq.n	8008f9c <speedCompute+0x1c>
 8008f9a:	e0d4      	b.n	8009146 <speedCompute+0x1c6>
    {
        gencodeSpeed.encode_now = encode_now;
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	4b6f      	ldr	r3, [pc, #444]	; (800915c <speedCompute+0x1dc>)
 8008fa0:	605a      	str	r2, [r3, #4]
        gencodeSpeed.speed = (encode_now - gencodeSpeed.encode_old);
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	4b6d      	ldr	r3, [pc, #436]	; (800915c <speedCompute+0x1dc>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	0018      	movs	r0, r3
 8008fac:	f7f8 f9f6 	bl	800139c <__aeabi_ui2f>
 8008fb0:	1c02      	adds	r2, r0, #0
 8008fb2:	4b6a      	ldr	r3, [pc, #424]	; (800915c <speedCompute+0x1dc>)
 8008fb4:	609a      	str	r2, [r3, #8]
        //calculte speed motor (tour/minute) : g_encode.speed * ((1000 / 100ms) * 60 )/44/20
        speedArray[speedArrayFilterIndex++] = (float)(gencodeSpeed.speed * (SPEED_COMPUTE_PER_S / computePerms * 60.0) / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);
 8008fb6:	4b69      	ldr	r3, [pc, #420]	; (800915c <speedCompute+0x1dc>)
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	1c18      	adds	r0, r3, #0
 8008fbc:	f7fa f87e 	bl	80030bc <__aeabi_f2d>
 8008fc0:	0004      	movs	r4, r0
 8008fc2:	000d      	movs	r5, r1
 8008fc4:	1cfb      	adds	r3, r7, #3
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	0019      	movs	r1, r3
 8008fca:	200a      	movs	r0, #10
 8008fcc:	f7f7 f948 	bl	8000260 <__divsi3>
 8008fd0:	0003      	movs	r3, r0
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f7fa f81c 	bl	8003010 <__aeabi_i2d>
 8008fd8:	2200      	movs	r2, #0
 8008fda:	4b61      	ldr	r3, [pc, #388]	; (8009160 <speedCompute+0x1e0>)
 8008fdc:	f7f9 f980 	bl	80022e0 <__aeabi_dmul>
 8008fe0:	0002      	movs	r2, r0
 8008fe2:	000b      	movs	r3, r1
 8008fe4:	0020      	movs	r0, r4
 8008fe6:	0029      	movs	r1, r5
 8008fe8:	f7f9 f97a 	bl	80022e0 <__aeabi_dmul>
 8008fec:	0002      	movs	r2, r0
 8008fee:	000b      	movs	r3, r1
 8008ff0:	0010      	movs	r0, r2
 8008ff2:	0019      	movs	r1, r3
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4b5b      	ldr	r3, [pc, #364]	; (8009164 <speedCompute+0x1e4>)
 8008ff8:	f7f8 fd78 	bl	8001aec <__aeabi_ddiv>
 8008ffc:	0002      	movs	r2, r0
 8008ffe:	000b      	movs	r3, r1
 8009000:	0010      	movs	r0, r2
 8009002:	0019      	movs	r1, r3
 8009004:	2200      	movs	r2, #0
 8009006:	4b58      	ldr	r3, [pc, #352]	; (8009168 <speedCompute+0x1e8>)
 8009008:	f7f8 fd70 	bl	8001aec <__aeabi_ddiv>
 800900c:	0002      	movs	r2, r0
 800900e:	000b      	movs	r3, r1
 8009010:	0010      	movs	r0, r2
 8009012:	0019      	movs	r1, r3
 8009014:	2200      	movs	r2, #0
 8009016:	4b55      	ldr	r3, [pc, #340]	; (800916c <speedCompute+0x1ec>)
 8009018:	f7f8 fd68 	bl	8001aec <__aeabi_ddiv>
 800901c:	0002      	movs	r2, r0
 800901e:	000b      	movs	r3, r1
 8009020:	4953      	ldr	r1, [pc, #332]	; (8009170 <speedCompute+0x1f0>)
 8009022:	680c      	ldr	r4, [r1, #0]
 8009024:	1c60      	adds	r0, r4, #1
 8009026:	4952      	ldr	r1, [pc, #328]	; (8009170 <speedCompute+0x1f0>)
 8009028:	6008      	str	r0, [r1, #0]
 800902a:	0010      	movs	r0, r2
 800902c:	0019      	movs	r1, r3
 800902e:	f7fa f88d 	bl	800314c <__aeabi_d2f>
 8009032:	1c01      	adds	r1, r0, #0
 8009034:	4b4f      	ldr	r3, [pc, #316]	; (8009174 <speedCompute+0x1f4>)
 8009036:	00a2      	lsls	r2, r4, #2
 8009038:	50d1      	str	r1, [r2, r3]


        gencodeSpeed.encode_old = gencodeSpeed.encode_now;
 800903a:	4b48      	ldr	r3, [pc, #288]	; (800915c <speedCompute+0x1dc>)
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	4b47      	ldr	r3, [pc, #284]	; (800915c <speedCompute+0x1dc>)
 8009040:	601a      	str	r2, [r3, #0]
        /* after 10 times of speed calculation, filter the speed data */
        if (speedArrayFilterIndex == 10)
 8009042:	4b4b      	ldr	r3, [pc, #300]	; (8009170 <speedCompute+0x1f0>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b0a      	cmp	r3, #10
 8009048:	d000      	beq.n	800904c <speedCompute+0xcc>
 800904a:	e079      	b.n	8009140 <speedCompute+0x1c0>
        {
            // bubble sort
            float temp = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < 10; i++)
 8009050:	2300      	movs	r3, #0
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	e030      	b.n	80090b8 <speedCompute+0x138>
            {
                for (int j = 0; j < 10 - i - 1; j++)
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	e024      	b.n	80090a6 <speedCompute+0x126>
                {
                    if (speedArray[j] > speedArray[j + 1])
 800905c:	4b45      	ldr	r3, [pc, #276]	; (8009174 <speedCompute+0x1f4>)
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	0092      	lsls	r2, r2, #2
 8009062:	58d0      	ldr	r0, [r2, r3]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	4b42      	ldr	r3, [pc, #264]	; (8009174 <speedCompute+0x1f4>)
 800906a:	0092      	lsls	r2, r2, #2
 800906c:	58d3      	ldr	r3, [r2, r3]
 800906e:	1c19      	adds	r1, r3, #0
 8009070:	f7f7 fa46 	bl	8000500 <__aeabi_fcmpgt>
 8009074:	1e03      	subs	r3, r0, #0
 8009076:	d013      	beq.n	80090a0 <speedCompute+0x120>
                    {
                        temp = speedArray[j];
 8009078:	4b3e      	ldr	r3, [pc, #248]	; (8009174 <speedCompute+0x1f4>)
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	0092      	lsls	r2, r2, #2
 800907e:	58d3      	ldr	r3, [r2, r3]
 8009080:	617b      	str	r3, [r7, #20]
                        speedArray[j] = speedArray[j + 1];
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	4b3b      	ldr	r3, [pc, #236]	; (8009174 <speedCompute+0x1f4>)
 8009088:	0092      	lsls	r2, r2, #2
 800908a:	58d1      	ldr	r1, [r2, r3]
 800908c:	4b39      	ldr	r3, [pc, #228]	; (8009174 <speedCompute+0x1f4>)
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	0092      	lsls	r2, r2, #2
 8009092:	50d1      	str	r1, [r2, r3]
                        speedArray[j + 1] = temp;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	4b36      	ldr	r3, [pc, #216]	; (8009174 <speedCompute+0x1f4>)
 800909a:	0092      	lsls	r2, r2, #2
 800909c:	6979      	ldr	r1, [r7, #20]
 800909e:	50d1      	str	r1, [r2, r3]
                for (int j = 0; j < 10 - i - 1; j++)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3301      	adds	r3, #1
 80090a4:	60fb      	str	r3, [r7, #12]
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2209      	movs	r2, #9
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	dbd4      	blt.n	800905c <speedCompute+0xdc>
            for (int i = 0; i < 10; i++)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	3301      	adds	r3, #1
 80090b6:	613b      	str	r3, [r7, #16]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2b09      	cmp	r3, #9
 80090bc:	ddcb      	ble.n	8009056 <speedCompute+0xd6>
                    }
                }
            }

            temp = 0.0;
 80090be:	2300      	movs	r3, #0
 80090c0:	617b      	str	r3, [r7, #20]
            // using the middle 6 data to calculate the average value
            for (int i = 2; i < 8; i++)
 80090c2:	2302      	movs	r3, #2
 80090c4:	60bb      	str	r3, [r7, #8]
 80090c6:	e00c      	b.n	80090e2 <speedCompute+0x162>
            {
                temp += speedArray[i];
 80090c8:	4b2a      	ldr	r3, [pc, #168]	; (8009174 <speedCompute+0x1f4>)
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	0092      	lsls	r2, r2, #2
 80090ce:	58d3      	ldr	r3, [r2, r3]
 80090d0:	1c19      	adds	r1, r3, #0
 80090d2:	6978      	ldr	r0, [r7, #20]
 80090d4:	f7f7 fa98 	bl	8000608 <__aeabi_fadd>
 80090d8:	1c03      	adds	r3, r0, #0
 80090da:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < 8; i++)
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	3301      	adds	r3, #1
 80090e0:	60bb      	str	r3, [r7, #8]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2b07      	cmp	r3, #7
 80090e6:	ddef      	ble.n	80090c8 <speedCompute+0x148>
            }
            // calculate the average value
            temp = temp / 6;
 80090e8:	4923      	ldr	r1, [pc, #140]	; (8009178 <speedCompute+0x1f8>)
 80090ea:	6978      	ldr	r0, [r7, #20]
 80090ec:	f7f7 fc2c 	bl	8000948 <__aeabi_fdiv>
 80090f0:	1c03      	adds	r3, r0, #0
 80090f2:	617b      	str	r3, [r7, #20]
            // low pass filter
            // Y(n)= qX(n) + (1-q)Y(n-1)
            // X(n) is the current input, Y(n) is the current output, Y(n-1) is the previous output, and q is the filter factor.
            // The larger the q, the stronger the filtering effect, but the slower the response.
            gMotorData.speed = (float)((double)temp * 0.5 + (double)gMotorData.speed * 0.5);
 80090f4:	6978      	ldr	r0, [r7, #20]
 80090f6:	f7f9 ffe1 	bl	80030bc <__aeabi_f2d>
 80090fa:	2200      	movs	r2, #0
 80090fc:	4b1f      	ldr	r3, [pc, #124]	; (800917c <speedCompute+0x1fc>)
 80090fe:	f7f9 f8ef 	bl	80022e0 <__aeabi_dmul>
 8009102:	0002      	movs	r2, r0
 8009104:	000b      	movs	r3, r1
 8009106:	0014      	movs	r4, r2
 8009108:	001d      	movs	r5, r3
 800910a:	4b1d      	ldr	r3, [pc, #116]	; (8009180 <speedCompute+0x200>)
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	1c18      	adds	r0, r3, #0
 8009110:	f7f9 ffd4 	bl	80030bc <__aeabi_f2d>
 8009114:	2200      	movs	r2, #0
 8009116:	4b19      	ldr	r3, [pc, #100]	; (800917c <speedCompute+0x1fc>)
 8009118:	f7f9 f8e2 	bl	80022e0 <__aeabi_dmul>
 800911c:	0002      	movs	r2, r0
 800911e:	000b      	movs	r3, r1
 8009120:	0020      	movs	r0, r4
 8009122:	0029      	movs	r1, r5
 8009124:	f7f8 f982 	bl	800142c <__aeabi_dadd>
 8009128:	0002      	movs	r2, r0
 800912a:	000b      	movs	r3, r1
 800912c:	0010      	movs	r0, r2
 800912e:	0019      	movs	r1, r3
 8009130:	f7fa f80c 	bl	800314c <__aeabi_d2f>
 8009134:	1c02      	adds	r2, r0, #0
 8009136:	4b12      	ldr	r3, [pc, #72]	; (8009180 <speedCompute+0x200>)
 8009138:	60da      	str	r2, [r3, #12]
            speedArrayFilterIndex = 0;
 800913a:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <speedCompute+0x1f0>)
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
        }
        speedComputeCount = 0;
 8009140:	4b05      	ldr	r3, [pc, #20]	; (8009158 <speedCompute+0x1d8>)
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
    }
    speedComputeCount++;
 8009146:	4b04      	ldr	r3, [pc, #16]	; (8009158 <speedCompute+0x1d8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	4b02      	ldr	r3, [pc, #8]	; (8009158 <speedCompute+0x1d8>)
 800914e:	601a      	str	r2, [r3, #0]
}
 8009150:	46c0      	nop			; (mov r8, r8)
 8009152:	46bd      	mov	sp, r7
 8009154:	b006      	add	sp, #24
 8009156:	bdb0      	pop	{r4, r5, r7, pc}
 8009158:	20000588 	.word	0x20000588
 800915c:	20000564 	.word	0x20000564
 8009160:	404e0000 	.word	0x404e0000
 8009164:	40100000 	.word	0x40100000
 8009168:	40260000 	.word	0x40260000
 800916c:	40340000 	.word	0x40340000
 8009170:	200005b4 	.word	0x200005b4
 8009174:	2000058c 	.word	0x2000058c
 8009178:	40c00000 	.word	0x40c00000
 800917c:	3fe00000 	.word	0x3fe00000
 8009180:	20000570 	.word	0x20000570

08009184 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)   //encooder compter
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a22      	ldr	r2, [pc, #136]	; (800921c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d114      	bne.n	80091c0 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
        /* Determine the current counter counting direction */
        if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2210      	movs	r2, #16
 800919e:	4013      	ands	r3, r2
 80091a0:	2b10      	cmp	r3, #16
 80091a2:	d106      	bne.n	80091b2 <HAL_TIM_PeriodElapsedCallback+0x2e>
            /* underflow, count down */
            Encoder_Overflow_Count--;
 80091a4:	4b1e      	ldr	r3, [pc, #120]	; (8009220 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	4b1c      	ldr	r3, [pc, #112]	; (8009220 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80091ae:	801a      	strh	r2, [r3, #0]

           // setPWMdutyCiclePID(gMotorData.motorPWM);
            motor_pwm_set( changeSpeedToPWM(gMotorData.motorPWM));
        }
    }
}
 80091b0:	e02f      	b.n	8009212 <HAL_TIM_PeriodElapsedCallback+0x8e>
            Encoder_Overflow_Count++;
 80091b2:	4b1b      	ldr	r3, [pc, #108]	; (8009220 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80091b4:	881b      	ldrh	r3, [r3, #0]
 80091b6:	3301      	adds	r3, #1
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	4b19      	ldr	r3, [pc, #100]	; (8009220 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80091bc:	801a      	strh	r2, [r3, #0]
}
 80091be:	e028      	b.n	8009212 <HAL_TIM_PeriodElapsedCallback+0x8e>
    else if (htim->Instance == TIM7)   //every 100ms call the interruption for calculte PID
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a17      	ldr	r2, [pc, #92]	; (8009224 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d123      	bne.n	8009212 <HAL_TIM_PeriodElapsedCallback+0x8e>
        uint32_t encoderValueNow = getEncoderValue();
 80091ca:	f000 f831 	bl	8009230 <getEncoderValue>
 80091ce:	0003      	movs	r3, r0
 80091d0:	60fb      	str	r3, [r7, #12]
        speedCompute(encoderValueNow, 1);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2101      	movs	r1, #1
 80091d6:	0018      	movs	r0, r3
 80091d8:	f7ff fed2 	bl	8008f80 <speedCompute>
        if (gMotorData.state == MOTOR_STATE_START)  //MOTOR_STATE_START call in setSpeed
 80091dc:	4b12      	ldr	r3, [pc, #72]	; (8009228 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d116      	bne.n	8009212 <HAL_TIM_PeriodElapsedCallback+0x8e>
            gMotorData.motorPWM = incrementPIDControl(&gSpeedPID, gMotorData.speed); //gMotorData.speed is set in speedCompute
 80091e4:	4b10      	ldr	r3, [pc, #64]	; (8009228 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	4b10      	ldr	r3, [pc, #64]	; (800922c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80091ea:	1c11      	adds	r1, r2, #0
 80091ec:	0018      	movs	r0, r3
 80091ee:	f7ff fdef 	bl	8008dd0 <incrementPIDControl>
 80091f2:	1c02      	adds	r2, r0, #0
 80091f4:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80091f6:	611a      	str	r2, [r3, #16]
            motor_pwm_set( changeSpeedToPWM(gMotorData.motorPWM));
 80091f8:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	1c18      	adds	r0, r3, #0
 80091fe:	f000 f8ff 	bl	8009400 <changeSpeedToPWM>
 8009202:	0003      	movs	r3, r0
 8009204:	0018      	movs	r0, r3
 8009206:	f7f8 f8c9 	bl	800139c <__aeabi_ui2f>
 800920a:	1c03      	adds	r3, r0, #0
 800920c:	1c18      	adds	r0, r3, #0
 800920e:	f000 f85f 	bl	80092d0 <motor_pwm_set>
}
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	46bd      	mov	sp, r7
 8009216:	b004      	add	sp, #16
 8009218:	bd80      	pop	{r7, pc}
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	40000400 	.word	0x40000400
 8009220:	20000584 	.word	0x20000584
 8009224:	40001400 	.word	0x40001400
 8009228:	20000570 	.word	0x20000570
 800922c:	2000051c 	.word	0x2000051c

08009230 <getEncoderValue>:
 * @brief Get the Current Encoder Count
 *
 * @return uint16_t The current encoder count
 */
uint32_t getEncoderValue(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
    uint32_t Encoder_Count = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	607b      	str	r3, [r7, #4]
    /* Get the current counter value */
    Encoder_Count = __HAL_TIM_GET_COUNTER(&htim3);
 800923a:	4b08      	ldr	r3, [pc, #32]	; (800925c <getEncoderValue+0x2c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	607b      	str	r3, [r7, #4]
    /* Add the overflow count to the counter value */
    Encoder_Count += Encoder_Overflow_Count * 65536;
 8009242:	4b07      	ldr	r3, [pc, #28]	; (8009260 <getEncoderValue+0x30>)
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	041b      	lsls	r3, r3, #16
 8009248:	001a      	movs	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	189b      	adds	r3, r3, r2
 800924e:	607b      	str	r3, [r7, #4]
    return Encoder_Count;
 8009250:	687b      	ldr	r3, [r7, #4]
}
 8009252:	0018      	movs	r0, r3
 8009254:	46bd      	mov	sp, r7
 8009256:	b002      	add	sp, #8
 8009258:	bd80      	pop	{r7, pc}
 800925a:	46c0      	nop			; (mov r8, r8)
 800925c:	200002bc 	.word	0x200002bc
 8009260:	20000584 	.word	0x20000584

08009264 <dcmotor_dir>:
/**
 * @brief       Motor Direction Control
 * @param       para: 0 Forward, 1 Reverse
 */
void dcmotor_dir(uint8_t para)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	0002      	movs	r2, r0
 800926c:	1dfb      	adds	r3, r7, #7
 800926e:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8009270:	4b15      	ldr	r3, [pc, #84]	; (80092c8 <dcmotor_dir+0x64>)
 8009272:	2100      	movs	r1, #0
 8009274:	0018      	movs	r0, r3
 8009276:	f7fc fb87 	bl	8005988 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 800927a:	4b14      	ldr	r3, [pc, #80]	; (80092cc <dcmotor_dir+0x68>)
 800927c:	2104      	movs	r1, #4
 800927e:	0018      	movs	r0, r3
 8009280:	f7fc fb82 	bl	8005988 <HAL_TIM_PWM_Stop>

    if (para == 0)
 8009284:	1dfb      	adds	r3, r7, #7
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <dcmotor_dir+0x3e>
    {
        HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800928c:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <dcmotor_dir+0x64>)
 800928e:	2100      	movs	r1, #0
 8009290:	0018      	movs	r0, r3
 8009292:	f7fc fa95 	bl	80057c0 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8009296:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <dcmotor_dir+0x68>)
 8009298:	2104      	movs	r1, #4
 800929a:	0018      	movs	r0, r3
 800929c:	f7fc fb74 	bl	8005988 <HAL_TIM_PWM_Stop>
    else if (para == 1)
    {
        HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
        HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_2);
    }
}
 80092a0:	e00d      	b.n	80092be <dcmotor_dir+0x5a>
    else if (para == 1)
 80092a2:	1dfb      	adds	r3, r7, #7
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d109      	bne.n	80092be <dcmotor_dir+0x5a>
        HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80092aa:	4b08      	ldr	r3, [pc, #32]	; (80092cc <dcmotor_dir+0x68>)
 80092ac:	2100      	movs	r1, #0
 80092ae:	0018      	movs	r0, r3
 80092b0:	f7fc fa86 	bl	80057c0 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_2);
 80092b4:	4b04      	ldr	r3, [pc, #16]	; (80092c8 <dcmotor_dir+0x64>)
 80092b6:	2104      	movs	r1, #4
 80092b8:	0018      	movs	r0, r3
 80092ba:	f7fc fb65 	bl	8005988 <HAL_TIM_PWM_Stop>
}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	46bd      	mov	sp, r7
 80092c2:	b002      	add	sp, #8
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	46c0      	nop			; (mov r8, r8)
 80092c8:	20000438 	.word	0x20000438
 80092cc:	200003a0 	.word	0x200003a0

080092d0 <motor_pwm_set>:

void motor_pwm_set(float para)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
    int val = (int)para;
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7f7 ffed 	bl	80012b8 <__aeabi_f2iz>
 80092de:	0003      	movs	r3, r0
 80092e0:	60fb      	str	r3, [r7, #12]

    if (val >= 0)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	db08      	blt.n	80092fa <motor_pwm_set+0x2a>
    {
        dcmotor_dir(0);
 80092e8:	2000      	movs	r0, #0
 80092ea:	f7ff ffbb 	bl	8009264 <dcmotor_dir>
        dcmotor_speed(val);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	0018      	movs	r0, r3
 80092f4:	f000 f810 	bl	8009318 <dcmotor_speed>
    else
    {
        dcmotor_dir(1);
        dcmotor_speed(-val);
    }
}
 80092f8:	e009      	b.n	800930e <motor_pwm_set+0x3e>
        dcmotor_dir(1);
 80092fa:	2001      	movs	r0, #1
 80092fc:	f7ff ffb2 	bl	8009264 <dcmotor_dir>
        dcmotor_speed(-val);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	b29b      	uxth	r3, r3
 8009304:	425b      	negs	r3, r3
 8009306:	b29b      	uxth	r3, r3
 8009308:	0018      	movs	r0, r3
 800930a:	f000 f805 	bl	8009318 <dcmotor_speed>
}
 800930e:	46c0      	nop			; (mov r8, r8)
 8009310:	46bd      	mov	sp, r7
 8009312:	b004      	add	sp, #16
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <dcmotor_speed>:


void dcmotor_speed(uint16_t para)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	0002      	movs	r2, r0
 8009320:	1dbb      	adds	r3, r7, #6
 8009322:	801a      	strh	r2, [r3, #0]

    __HAL_TIM_SetCompare(&htim17 , TIM_CHANNEL_1, para);  //PB9
 8009324:	4b06      	ldr	r3, [pc, #24]	; (8009340 <dcmotor_speed+0x28>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	1dba      	adds	r2, r7, #6
 800932a:	8812      	ldrh	r2, [r2, #0]
 800932c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_2, para);  //PB15
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <dcmotor_speed+0x2c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	1dba      	adds	r2, r7, #6
 8009334:	8812      	ldrh	r2, [r2, #0]
 8009336:	639a      	str	r2, [r3, #56]	; 0x38

}
 8009338:	46c0      	nop			; (mov r8, r8)
 800933a:	46bd      	mov	sp, r7
 800933c:	b002      	add	sp, #8
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20000438 	.word	0x20000438
 8009344:	200003a0 	.word	0x200003a0

08009348 <isSpeedValid>:
 * @param speedStr  the speed string to check
 * @return true  if the speed is valid
 * @return false  if the speed is not valid
 */
bool isSpeedValid(char *speedStr)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
    int i = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
    // get the direction for speedStr[0] with - or +
    if (speedStr[0] == '-' || speedStr[0] == '+')
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b2d      	cmp	r3, #45	; 0x2d
 800935a:	d003      	beq.n	8009364 <isSpeedValid+0x1c>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b2b      	cmp	r3, #43	; 0x2b
 8009362:	d103      	bne.n	800936c <isSpeedValid+0x24>
    {
        i++;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3301      	adds	r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
    }
    else
    {
        return false;
    }
    while (speedStr[i] != '\0')
 800936a:	e012      	b.n	8009392 <isSpeedValid+0x4a>
        return false;
 800936c:	2300      	movs	r3, #0
 800936e:	e017      	b.n	80093a0 <isSpeedValid+0x58>
    {
        // if the char is not a number, return false
        if (!(speedStr[i] >= '0' && speedStr[i] <= '9'))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	18d3      	adds	r3, r2, r3
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	2b2f      	cmp	r3, #47	; 0x2f
 800937a:	d905      	bls.n	8009388 <isSpeedValid+0x40>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	18d3      	adds	r3, r2, r3
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	2b39      	cmp	r3, #57	; 0x39
 8009386:	d901      	bls.n	800938c <isSpeedValid+0x44>
        {
            return false;
 8009388:	2300      	movs	r3, #0
 800938a:	e009      	b.n	80093a0 <isSpeedValid+0x58>
        }
        i++;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	3301      	adds	r3, #1
 8009390:	60fb      	str	r3, [r7, #12]
    while (speedStr[i] != '\0')
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	18d3      	adds	r3, r2, r3
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1e8      	bne.n	8009370 <isSpeedValid+0x28>
    }

    return true;
 800939e:	2301      	movs	r3, #1
}
 80093a0:	0018      	movs	r0, r3
 80093a2:	46bd      	mov	sp, r7
 80093a4:	b004      	add	sp, #16
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <extractSpeed>:
 *
 * @param data  the data to extract the speed
 * @return int  the speed extracted
 */
float extractSpeed(char *data)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
    float speed = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60bb      	str	r3, [r7, #8]
    int direction = DIRECTION_FORWARD;
 80093b4:	2301      	movs	r3, #1
 80093b6:	60fb      	str	r3, [r7, #12]
    // if the speed is negative, set the direction to -1,if not, set the direction to 1
    if (data[0] == '-')
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2b2d      	cmp	r3, #45	; 0x2d
 80093be:	d103      	bne.n	80093c8 <extractSpeed+0x20>
    {
        direction = DIRECTION_BACKWARD;
 80093c0:	2301      	movs	r3, #1
 80093c2:	425b      	negs	r3, r3
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	e001      	b.n	80093cc <extractSpeed+0x24>
    }
    else
    {
        direction = DIRECTION_FORWARD;
 80093c8:	2301      	movs	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
    }
    // change the string speed to int speed without the direction
    speed = atof(&data[1]);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3301      	adds	r3, #1
 80093d0:	0018      	movs	r0, r3
 80093d2:	f000 fa2d 	bl	8009830 <atof>
 80093d6:	0002      	movs	r2, r0
 80093d8:	000b      	movs	r3, r1
 80093da:	0010      	movs	r0, r2
 80093dc:	0019      	movs	r1, r3
 80093de:	f7f9 feb5 	bl	800314c <__aeabi_d2f>
 80093e2:	1c03      	adds	r3, r0, #0
 80093e4:	60bb      	str	r3, [r7, #8]
    // return the speed with the direction
    return (float)speed * direction;
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f7f7 ff86 	bl	80012f8 <__aeabi_i2f>
 80093ec:	1c03      	adds	r3, r0, #0
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	1c18      	adds	r0, r3, #0
 80093f2:	f7f7 fc73 	bl	8000cdc <__aeabi_fmul>
 80093f6:	1c03      	adds	r3, r0, #0
}
 80093f8:	1c18      	adds	r0, r3, #0
 80093fa:	46bd      	mov	sp, r7
 80093fc:	b004      	add	sp, #16
 80093fe:	bd80      	pop	{r7, pc}

08009400 <changeSpeedToPWM>:
 * @brief This function change the speed to pwm duty cycle
 * @ 0-300 vitesse    0-640 autoreload(pwm)
 * @param speed the speed to change
 */
uint8_t changeSpeedToPWM(float speed)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
    int pwmDutyCycle = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]
    if (speed >= 0)
 800940c:	2100      	movs	r1, #0
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7f7 f880 	bl	8000514 <__aeabi_fcmpge>
 8009414:	1e03      	subs	r3, r0, #0
 8009416:	d017      	beq.n	8009448 <changeSpeedToPWM+0x48>
    {
        pwmDutyCycle = (int)(speed * 640.0 / 300.0);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7f9 fe4f 	bl	80030bc <__aeabi_f2d>
 800941e:	2200      	movs	r2, #0
 8009420:	4b1a      	ldr	r3, [pc, #104]	; (800948c <changeSpeedToPWM+0x8c>)
 8009422:	f7f8 ff5d 	bl	80022e0 <__aeabi_dmul>
 8009426:	0002      	movs	r2, r0
 8009428:	000b      	movs	r3, r1
 800942a:	0010      	movs	r0, r2
 800942c:	0019      	movs	r1, r3
 800942e:	2200      	movs	r2, #0
 8009430:	4b17      	ldr	r3, [pc, #92]	; (8009490 <changeSpeedToPWM+0x90>)
 8009432:	f7f8 fb5b 	bl	8001aec <__aeabi_ddiv>
 8009436:	0002      	movs	r2, r0
 8009438:	000b      	movs	r3, r1
 800943a:	0010      	movs	r0, r2
 800943c:	0019      	movs	r1, r3
 800943e:	f7f9 fdb1 	bl	8002fa4 <__aeabi_d2iz>
 8009442:	0003      	movs	r3, r0
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	e01a      	b.n	800947e <changeSpeedToPWM+0x7e>
    }
    else
    {
        pwmDutyCycle = (int)(-speed * 640.0 / 300.0);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2280      	movs	r2, #128	; 0x80
 800944c:	0612      	lsls	r2, r2, #24
 800944e:	4053      	eors	r3, r2
 8009450:	1c18      	adds	r0, r3, #0
 8009452:	f7f9 fe33 	bl	80030bc <__aeabi_f2d>
 8009456:	2200      	movs	r2, #0
 8009458:	4b0c      	ldr	r3, [pc, #48]	; (800948c <changeSpeedToPWM+0x8c>)
 800945a:	f7f8 ff41 	bl	80022e0 <__aeabi_dmul>
 800945e:	0002      	movs	r2, r0
 8009460:	000b      	movs	r3, r1
 8009462:	0010      	movs	r0, r2
 8009464:	0019      	movs	r1, r3
 8009466:	2200      	movs	r2, #0
 8009468:	4b09      	ldr	r3, [pc, #36]	; (8009490 <changeSpeedToPWM+0x90>)
 800946a:	f7f8 fb3f 	bl	8001aec <__aeabi_ddiv>
 800946e:	0002      	movs	r2, r0
 8009470:	000b      	movs	r3, r1
 8009472:	0010      	movs	r0, r2
 8009474:	0019      	movs	r1, r3
 8009476:	f7f9 fd95 	bl	8002fa4 <__aeabi_d2iz>
 800947a:	0003      	movs	r3, r0
 800947c:	60fb      	str	r3, [r7, #12]
    }
    return pwmDutyCycle;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	b2db      	uxtb	r3, r3
}
 8009482:	0018      	movs	r0, r3
 8009484:	46bd      	mov	sp, r7
 8009486:	b004      	add	sp, #16
 8009488:	bd80      	pop	{r7, pc}
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	40840000 	.word	0x40840000
 8009490:	4072c000 	.word	0x4072c000

08009494 <speedProcess>:
    updateCurrentSpeed(updateSpeed);
    printf("[INFO]: Set speed to %d\r\n", updateSpeed);
}

void speedProcess(int numberofCmdArg, char *cmdArg[])
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
    // check if the number of argument is correct
    if (numberofCmdArg != 2)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d004      	beq.n	80094ae <speedProcess+0x1a>
    {
        printf("[ERROR]: Invalid number of argument\r\n");
 80094a4:	4b22      	ldr	r3, [pc, #136]	; (8009530 <speedProcess+0x9c>)
 80094a6:	0018      	movs	r0, r3
 80094a8:	f001 fda0 	bl	800afec <puts>
        return;
 80094ac:	e03c      	b.n	8009528 <speedProcess+0x94>
    }
    // check if the speed is valid
    if (!isSpeedValid(cmdArg[1]))
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	3304      	adds	r3, #4
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	0018      	movs	r0, r3
 80094b6:	f7ff ff47 	bl	8009348 <isSpeedValid>
 80094ba:	0003      	movs	r3, r0
 80094bc:	001a      	movs	r2, r3
 80094be:	2301      	movs	r3, #1
 80094c0:	4053      	eors	r3, r2
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d004      	beq.n	80094d2 <speedProcess+0x3e>
    {
        printf("[ERROR]: Invalid speed\r\n");
 80094c8:	4b1a      	ldr	r3, [pc, #104]	; (8009534 <speedProcess+0xa0>)
 80094ca:	0018      	movs	r0, r3
 80094cc:	f001 fd8e 	bl	800afec <puts>
        return;
 80094d0:	e02a      	b.n	8009528 <speedProcess+0x94>
    }
    gSpeedPID.SetPoint = extractSpeed(cmdArg[1]);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	3304      	adds	r3, #4
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	0018      	movs	r0, r3
 80094da:	f7ff ff65 	bl	80093a8 <extractSpeed>
 80094de:	1c02      	adds	r2, r0, #0
 80094e0:	4b15      	ldr	r3, [pc, #84]	; (8009538 <speedProcess+0xa4>)
 80094e2:	601a      	str	r2, [r3, #0]
    // limit the speed
    if (gSpeedPID.SetPoint > MAX_SPEED)   //MAX_SPEED : 300 tour/minute
 80094e4:	4b14      	ldr	r3, [pc, #80]	; (8009538 <speedProcess+0xa4>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4914      	ldr	r1, [pc, #80]	; (800953c <speedProcess+0xa8>)
 80094ea:	1c18      	adds	r0, r3, #0
 80094ec:	f7f7 f808 	bl	8000500 <__aeabi_fcmpgt>
 80094f0:	1e03      	subs	r3, r0, #0
 80094f2:	d003      	beq.n	80094fc <speedProcess+0x68>
    {
        gSpeedPID.SetPoint = MAX_SPEED;
 80094f4:	4b10      	ldr	r3, [pc, #64]	; (8009538 <speedProcess+0xa4>)
 80094f6:	4a11      	ldr	r2, [pc, #68]	; (800953c <speedProcess+0xa8>)
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	e00a      	b.n	8009512 <speedProcess+0x7e>
    }
    else if (gSpeedPID.SetPoint < -MAX_SPEED)
 80094fc:	4b0e      	ldr	r3, [pc, #56]	; (8009538 <speedProcess+0xa4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	490f      	ldr	r1, [pc, #60]	; (8009540 <speedProcess+0xac>)
 8009502:	1c18      	adds	r0, r3, #0
 8009504:	f7f6 ffe8 	bl	80004d8 <__aeabi_fcmplt>
 8009508:	1e03      	subs	r3, r0, #0
 800950a:	d002      	beq.n	8009512 <speedProcess+0x7e>
    {
        gSpeedPID.SetPoint = -MAX_SPEED;
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <speedProcess+0xa4>)
 800950e:	4a0c      	ldr	r2, [pc, #48]	; (8009540 <speedProcess+0xac>)
 8009510:	601a      	str	r2, [r3, #0]
    }
    printf("[INFO]: Set speed to %f\r\n", gSpeedPID.SetPoint);
 8009512:	4b09      	ldr	r3, [pc, #36]	; (8009538 <speedProcess+0xa4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	1c18      	adds	r0, r3, #0
 8009518:	f7f9 fdd0 	bl	80030bc <__aeabi_f2d>
 800951c:	0002      	movs	r2, r0
 800951e:	000b      	movs	r3, r1
 8009520:	4908      	ldr	r1, [pc, #32]	; (8009544 <speedProcess+0xb0>)
 8009522:	0008      	movs	r0, r1
 8009524:	f001 fcfc 	bl	800af20 <iprintf>
}
 8009528:	46bd      	mov	sp, r7
 800952a:	b002      	add	sp, #8
 800952c:	bd80      	pop	{r7, pc}
 800952e:	46c0      	nop			; (mov r8, r8)
 8009530:	0800de8c 	.word	0x0800de8c
 8009534:	0800deb4 	.word	0x0800deb4
 8009538:	2000051c 	.word	0x2000051c
 800953c:	43960000 	.word	0x43960000
 8009540:	c3960000 	.word	0xc3960000
 8009544:	0800dee8 	.word	0x0800dee8

08009548 <Shell_Init>:
int argc = 0;
char *token;
int newCmdReady = 0;

void Shell_Init(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
    memset(argv, 0, MAX_ARGS * sizeof(char *));
 800954c:	4b1a      	ldr	r3, [pc, #104]	; (80095b8 <Shell_Init+0x70>)
 800954e:	2224      	movs	r2, #36	; 0x24
 8009550:	2100      	movs	r1, #0
 8009552:	0018      	movs	r0, r3
 8009554:	f001 fe7a 	bl	800b24c <memset>
    memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 8009558:	4b18      	ldr	r3, [pc, #96]	; (80095bc <Shell_Init+0x74>)
 800955a:	2240      	movs	r2, #64	; 0x40
 800955c:	2100      	movs	r1, #0
 800955e:	0018      	movs	r0, r3
 8009560:	f001 fe74 	bl	800b24c <memset>
 8009564:	4b16      	ldr	r3, [pc, #88]	; (80095c0 <Shell_Init+0x78>)
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]
    memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
    memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 800956a:	4b16      	ldr	r3, [pc, #88]	; (80095c4 <Shell_Init+0x7c>)
 800956c:	2240      	movs	r2, #64	; 0x40
 800956e:	2100      	movs	r1, #0
 8009570:	0018      	movs	r0, r3
 8009572:	f001 fe6b 	bl	800b24c <memset>

    HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8009576:	4912      	ldr	r1, [pc, #72]	; (80095c0 <Shell_Init+0x78>)
 8009578:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <Shell_Init+0x80>)
 800957a:	2201      	movs	r2, #1
 800957c:	0018      	movs	r0, r3
 800957e:	f7fd fd15 	bl	8006fac <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8009582:	4b12      	ldr	r3, [pc, #72]	; (80095cc <Shell_Init+0x84>)
 8009584:	0018      	movs	r0, r3
 8009586:	f7f6 fdc5 	bl	8000114 <strlen>
 800958a:	0003      	movs	r3, r0
 800958c:	b29a      	uxth	r2, r3
 800958e:	2301      	movs	r3, #1
 8009590:	425b      	negs	r3, r3
 8009592:	490e      	ldr	r1, [pc, #56]	; (80095cc <Shell_Init+0x84>)
 8009594:	480c      	ldr	r0, [pc, #48]	; (80095c8 <Shell_Init+0x80>)
 8009596:	f7fd fc6d 	bl	8006e74 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800959a:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <Shell_Init+0x88>)
 800959c:	0018      	movs	r0, r3
 800959e:	f7f6 fdb9 	bl	8000114 <strlen>
 80095a2:	0003      	movs	r3, r0
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	2301      	movs	r3, #1
 80095a8:	425b      	negs	r3, r3
 80095aa:	4909      	ldr	r1, [pc, #36]	; (80095d0 <Shell_Init+0x88>)
 80095ac:	4806      	ldr	r0, [pc, #24]	; (80095c8 <Shell_Init+0x80>)
 80095ae:	f7fd fc61 	bl	8006e74 <HAL_UART_Transmit>
}
 80095b2:	46c0      	nop			; (mov r8, r8)
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20000648 	.word	0x20000648
 80095bc:	200005c0 	.word	0x200005c0
 80095c0:	200005bc 	.word	0x200005bc
 80095c4:	20000604 	.word	0x20000604
 80095c8:	20000484 	.word	0x20000484
 80095cc:	20000028 	.word	0x20000028
 80095d0:	2000000c 	.word	0x2000000c

080095d4 <Shell_Loop>:

void Shell_Loop(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0

    if (uartRxReceived)
 80095d8:	4b58      	ldr	r3, [pc, #352]	; (800973c <Shell_Loop+0x168>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d049      	beq.n	8009674 <Shell_Loop+0xa0>
    {
        uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "received：%s\r\n", cmdBuffer);
 80095e0:	4b57      	ldr	r3, [pc, #348]	; (8009740 <Shell_Loop+0x16c>)
 80095e2:	4a58      	ldr	r2, [pc, #352]	; (8009744 <Shell_Loop+0x170>)
 80095e4:	4858      	ldr	r0, [pc, #352]	; (8009748 <Shell_Loop+0x174>)
 80095e6:	2140      	movs	r1, #64	; 0x40
 80095e8:	f001 fd0a 	bl	800b000 <sniprintf>
 80095ec:	0003      	movs	r3, r0
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	4b56      	ldr	r3, [pc, #344]	; (800974c <Shell_Loop+0x178>)
 80095f2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80095f4:	4b55      	ldr	r3, [pc, #340]	; (800974c <Shell_Loop+0x178>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	2301      	movs	r3, #1
 80095fc:	425b      	negs	r3, r3
 80095fe:	4952      	ldr	r1, [pc, #328]	; (8009748 <Shell_Loop+0x174>)
 8009600:	4853      	ldr	r0, [pc, #332]	; (8009750 <Shell_Loop+0x17c>)
 8009602:	f7fd fc37 	bl	8006e74 <HAL_UART_Transmit>
        if (uartRxBuffer[0] == ASCII_CR)
 8009606:	4b53      	ldr	r3, [pc, #332]	; (8009754 <Shell_Loop+0x180>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b0d      	cmp	r3, #13
 800960c:	d106      	bne.n	800961c <Shell_Loop+0x48>
        {
            cmdBuffer[uartRxCounter - 1] = '\0';
 800960e:	4b52      	ldr	r3, [pc, #328]	; (8009758 <Shell_Loop+0x184>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	3b01      	subs	r3, #1
 8009614:	4a4a      	ldr	r2, [pc, #296]	; (8009740 <Shell_Loop+0x16c>)
 8009616:	2100      	movs	r1, #0
 8009618:	54d1      	strb	r1, [r2, r3]
 800961a:	e005      	b.n	8009628 <Shell_Loop+0x54>
        }
        else
        {
            cmdBuffer[uartRxCounter] = '\0';
 800961c:	4b4e      	ldr	r3, [pc, #312]	; (8009758 <Shell_Loop+0x184>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	001a      	movs	r2, r3
 8009622:	4b47      	ldr	r3, [pc, #284]	; (8009740 <Shell_Loop+0x16c>)
 8009624:	2100      	movs	r1, #0
 8009626:	5499      	strb	r1, [r3, r2]
        }
        argc = 0;
 8009628:	4b4c      	ldr	r3, [pc, #304]	; (800975c <Shell_Loop+0x188>)
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
        token = strtok(cmdBuffer, " ");
 800962e:	4a4c      	ldr	r2, [pc, #304]	; (8009760 <Shell_Loop+0x18c>)
 8009630:	4b43      	ldr	r3, [pc, #268]	; (8009740 <Shell_Loop+0x16c>)
 8009632:	0011      	movs	r1, r2
 8009634:	0018      	movs	r0, r3
 8009636:	f001 fe23 	bl	800b280 <strtok>
 800963a:	0002      	movs	r2, r0
 800963c:	4b49      	ldr	r3, [pc, #292]	; (8009764 <Shell_Loop+0x190>)
 800963e:	601a      	str	r2, [r3, #0]

        while (token != NULL)
 8009640:	e011      	b.n	8009666 <Shell_Loop+0x92>
        {
            argv[argc++] = token;
 8009642:	4b46      	ldr	r3, [pc, #280]	; (800975c <Shell_Loop+0x188>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	1c59      	adds	r1, r3, #1
 8009648:	4a44      	ldr	r2, [pc, #272]	; (800975c <Shell_Loop+0x188>)
 800964a:	6011      	str	r1, [r2, #0]
 800964c:	4a45      	ldr	r2, [pc, #276]	; (8009764 <Shell_Loop+0x190>)
 800964e:	6811      	ldr	r1, [r2, #0]
 8009650:	4a45      	ldr	r2, [pc, #276]	; (8009768 <Shell_Loop+0x194>)
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	5099      	str	r1, [r3, r2]
            token = strtok(NULL, " ");
 8009656:	4b42      	ldr	r3, [pc, #264]	; (8009760 <Shell_Loop+0x18c>)
 8009658:	0019      	movs	r1, r3
 800965a:	2000      	movs	r0, #0
 800965c:	f001 fe10 	bl	800b280 <strtok>
 8009660:	0002      	movs	r2, r0
 8009662:	4b40      	ldr	r3, [pc, #256]	; (8009764 <Shell_Loop+0x190>)
 8009664:	601a      	str	r2, [r3, #0]
        while (token != NULL)
 8009666:	4b3f      	ldr	r3, [pc, #252]	; (8009764 <Shell_Loop+0x190>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e9      	bne.n	8009642 <Shell_Loop+0x6e>
        }
        newCmdReady = 1;
 800966e:	4b3f      	ldr	r3, [pc, #252]	; (800976c <Shell_Loop+0x198>)
 8009670:	2201      	movs	r2, #1
 8009672:	601a      	str	r2, [r3, #0]
    }
    if (newCmdReady)
 8009674:	4b3d      	ldr	r3, [pc, #244]	; (800976c <Shell_Loop+0x198>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d05b      	beq.n	8009734 <Shell_Loop+0x160>
    {
        if (!strcmp(argv[0], "start"))
 800967c:	4b3a      	ldr	r3, [pc, #232]	; (8009768 <Shell_Loop+0x194>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a3b      	ldr	r2, [pc, #236]	; (8009770 <Shell_Loop+0x19c>)
 8009682:	0011      	movs	r1, r2
 8009684:	0018      	movs	r0, r3
 8009686:	f7f6 fd3b 	bl	8000100 <strcmp>
 800968a:	1e03      	subs	r3, r0, #0
 800968c:	d106      	bne.n	800969c <Shell_Loop+0xc8>
        {
            startMotor();
 800968e:	f7ff fc1b 	bl	8008ec8 <startMotor>
            printf("[INFO]: Start the motor\r\n");
 8009692:	4b38      	ldr	r3, [pc, #224]	; (8009774 <Shell_Loop+0x1a0>)
 8009694:	0018      	movs	r0, r3
 8009696:	f001 fca9 	bl	800afec <puts>
 800969a:	e035      	b.n	8009708 <Shell_Loop+0x134>
        }
        // detect the stop command
        else if (!strcmp(argv[0], "stop"))
 800969c:	4b32      	ldr	r3, [pc, #200]	; (8009768 <Shell_Loop+0x194>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a35      	ldr	r2, [pc, #212]	; (8009778 <Shell_Loop+0x1a4>)
 80096a2:	0011      	movs	r1, r2
 80096a4:	0018      	movs	r0, r3
 80096a6:	f7f6 fd2b 	bl	8000100 <strcmp>
 80096aa:	1e03      	subs	r3, r0, #0
 80096ac:	d106      	bne.n	80096bc <Shell_Loop+0xe8>
        {
            stopMotor();
 80096ae:	f7ff fbe5 	bl	8008e7c <stopMotor>
            printf("[INFO]: Stop the motor\r\n");
 80096b2:	4b32      	ldr	r3, [pc, #200]	; (800977c <Shell_Loop+0x1a8>)
 80096b4:	0018      	movs	r0, r3
 80096b6:	f001 fc99 	bl	800afec <puts>
 80096ba:	e025      	b.n	8009708 <Shell_Loop+0x134>
        }
        // detect the speed
        else if (!strcmp(argv[0], "speed"))
 80096bc:	4b2a      	ldr	r3, [pc, #168]	; (8009768 <Shell_Loop+0x194>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a2f      	ldr	r2, [pc, #188]	; (8009780 <Shell_Loop+0x1ac>)
 80096c2:	0011      	movs	r1, r2
 80096c4:	0018      	movs	r0, r3
 80096c6:	f7f6 fd1b 	bl	8000100 <strcmp>
 80096ca:	1e03      	subs	r3, r0, #0
 80096cc:	d107      	bne.n	80096de <Shell_Loop+0x10a>
        {
            setSpeed(argc, argv);
 80096ce:	4b23      	ldr	r3, [pc, #140]	; (800975c <Shell_Loop+0x188>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a25      	ldr	r2, [pc, #148]	; (8009768 <Shell_Loop+0x194>)
 80096d4:	0011      	movs	r1, r2
 80096d6:	0018      	movs	r0, r3
 80096d8:	f7ff fc18 	bl	8008f0c <setSpeed>
 80096dc:	e014      	b.n	8009708 <Shell_Loop+0x134>
        }
        // debug pid kp ki kd
        else if (!strcmp(argv[0], "debug"))
 80096de:	4b22      	ldr	r3, [pc, #136]	; (8009768 <Shell_Loop+0x194>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a28      	ldr	r2, [pc, #160]	; (8009784 <Shell_Loop+0x1b0>)
 80096e4:	0011      	movs	r1, r2
 80096e6:	0018      	movs	r0, r3
 80096e8:	f7f6 fd0a 	bl	8000100 <strcmp>
 80096ec:	1e03      	subs	r3, r0, #0
 80096ee:	d107      	bne.n	8009700 <Shell_Loop+0x12c>
        {
            setPIDparam(argc, argv);
 80096f0:	4b1a      	ldr	r3, [pc, #104]	; (800975c <Shell_Loop+0x188>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a1c      	ldr	r2, [pc, #112]	; (8009768 <Shell_Loop+0x194>)
 80096f6:	0011      	movs	r1, r2
 80096f8:	0018      	movs	r0, r3
 80096fa:	f7ff fb07 	bl	8008d0c <setPIDparam>
 80096fe:	e003      	b.n	8009708 <Shell_Loop+0x134>
        }
        else
        {
            printf("[ERROR]: Command not found\r\n");
 8009700:	4b21      	ldr	r3, [pc, #132]	; (8009788 <Shell_Loop+0x1b4>)
 8009702:	0018      	movs	r0, r3
 8009704:	f001 fc72 	bl	800afec <puts>
        }
        HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8009708:	2301      	movs	r3, #1
 800970a:	425b      	negs	r3, r3
 800970c:	491f      	ldr	r1, [pc, #124]	; (800978c <Shell_Loop+0x1b8>)
 800970e:	4810      	ldr	r0, [pc, #64]	; (8009750 <Shell_Loop+0x17c>)
 8009710:	221b      	movs	r2, #27
 8009712:	f7fd fbaf 	bl	8006e74 <HAL_UART_Transmit>
        newCmdReady = 0;
 8009716:	4b15      	ldr	r3, [pc, #84]	; (800976c <Shell_Loop+0x198>)
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]
        // reset uartRxReceived flag and counter and cmdBuffer
        uartRxReceived = 0;
 800971c:	4b07      	ldr	r3, [pc, #28]	; (800973c <Shell_Loop+0x168>)
 800971e:	2200      	movs	r2, #0
 8009720:	701a      	strb	r2, [r3, #0]
        uartRxCounter = 0;
 8009722:	4b0d      	ldr	r3, [pc, #52]	; (8009758 <Shell_Loop+0x184>)
 8009724:	2200      	movs	r2, #0
 8009726:	701a      	strb	r2, [r3, #0]
        memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 8009728:	4b05      	ldr	r3, [pc, #20]	; (8009740 <Shell_Loop+0x16c>)
 800972a:	2240      	movs	r2, #64	; 0x40
 800972c:	2100      	movs	r1, #0
 800972e:	0018      	movs	r0, r3
 8009730:	f001 fd8c 	bl	800b24c <memset>
    }
}
 8009734:	46c0      	nop			; (mov r8, r8)
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	200005b8 	.word	0x200005b8
 8009740:	200005c0 	.word	0x200005c0
 8009744:	0800df04 	.word	0x0800df04
 8009748:	20000604 	.word	0x20000604
 800974c:	20000644 	.word	0x20000644
 8009750:	20000484 	.word	0x20000484
 8009754:	200005bc 	.word	0x200005bc
 8009758:	20000600 	.word	0x20000600
 800975c:	2000066c 	.word	0x2000066c
 8009760:	0800df14 	.word	0x0800df14
 8009764:	20000670 	.word	0x20000670
 8009768:	20000648 	.word	0x20000648
 800976c:	20000674 	.word	0x20000674
 8009770:	0800df18 	.word	0x0800df18
 8009774:	0800df20 	.word	0x0800df20
 8009778:	0800df3c 	.word	0x0800df3c
 800977c:	0800df44 	.word	0x0800df44
 8009780:	0800df5c 	.word	0x0800df5c
 8009784:	0800df64 	.word	0x0800df64
 8009788:	0800df6c 	.word	0x0800df6c
 800978c:	2000000c 	.word	0x2000000c

08009790 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
    // if receied counter is more than CMD_BUFFER_SIZE, reset counter and cmdBuffer, and print error message
    // else increment counter and continue
    if (uartRxCounter > CMD_BUFFER_SIZE)
 8009798:	4b1e      	ldr	r3, [pc, #120]	; (8009814 <HAL_UART_RxCpltCallback+0x84>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b40      	cmp	r3, #64	; 0x40
 800979e:	d919      	bls.n	80097d4 <HAL_UART_RxCpltCallback+0x44>
    {
        uartRxCounter = 0;
 80097a0:	4b1c      	ldr	r3, [pc, #112]	; (8009814 <HAL_UART_RxCpltCallback+0x84>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	701a      	strb	r2, [r3, #0]
        memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(uint8_t));
 80097a6:	4b1c      	ldr	r3, [pc, #112]	; (8009818 <HAL_UART_RxCpltCallback+0x88>)
 80097a8:	2240      	movs	r2, #64	; 0x40
 80097aa:	2100      	movs	r1, #0
 80097ac:	0018      	movs	r0, r3
 80097ae:	f001 fd4d 	bl	800b24c <memset>
        int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Command too long\r\n");
 80097b2:	4a1a      	ldr	r2, [pc, #104]	; (800981c <HAL_UART_RxCpltCallback+0x8c>)
 80097b4:	4b1a      	ldr	r3, [pc, #104]	; (8009820 <HAL_UART_RxCpltCallback+0x90>)
 80097b6:	2140      	movs	r1, #64	; 0x40
 80097b8:	0018      	movs	r0, r3
 80097ba:	f001 fc21 	bl	800b000 <sniprintf>
 80097be:	0003      	movs	r3, r0
 80097c0:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	2301      	movs	r3, #1
 80097c8:	425b      	negs	r3, r3
 80097ca:	4915      	ldr	r1, [pc, #84]	; (8009820 <HAL_UART_RxCpltCallback+0x90>)
 80097cc:	4815      	ldr	r0, [pc, #84]	; (8009824 <HAL_UART_RxCpltCallback+0x94>)
 80097ce:	f7fd fb51 	bl	8006e74 <HAL_UART_Transmit>
 80097d2:	e00a      	b.n	80097ea <HAL_UART_RxCpltCallback+0x5a>
    }
    else
    {
        cmdBuffer[uartRxCounter++] = (char)uartRxBuffer[0];
 80097d4:	4b0f      	ldr	r3, [pc, #60]	; (8009814 <HAL_UART_RxCpltCallback+0x84>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	b2d1      	uxtb	r1, r2
 80097dc:	4a0d      	ldr	r2, [pc, #52]	; (8009814 <HAL_UART_RxCpltCallback+0x84>)
 80097de:	7011      	strb	r1, [r2, #0]
 80097e0:	001a      	movs	r2, r3
 80097e2:	4b11      	ldr	r3, [pc, #68]	; (8009828 <HAL_UART_RxCpltCallback+0x98>)
 80097e4:	7819      	ldrb	r1, [r3, #0]
 80097e6:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <HAL_UART_RxCpltCallback+0x88>)
 80097e8:	5499      	strb	r1, [r3, r2]
    }
    // if received \n or \r, set uartRxReceived flag
    if (uartRxBuffer[0] == ASCII_CR || uartRxBuffer[0] == ASCII_LF)
 80097ea:	4b0f      	ldr	r3, [pc, #60]	; (8009828 <HAL_UART_RxCpltCallback+0x98>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	2b0d      	cmp	r3, #13
 80097f0:	d003      	beq.n	80097fa <HAL_UART_RxCpltCallback+0x6a>
 80097f2:	4b0d      	ldr	r3, [pc, #52]	; (8009828 <HAL_UART_RxCpltCallback+0x98>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	2b0a      	cmp	r3, #10
 80097f8:	d102      	bne.n	8009800 <HAL_UART_RxCpltCallback+0x70>
    {
        uartRxReceived = 1;
 80097fa:	4b0c      	ldr	r3, [pc, #48]	; (800982c <HAL_UART_RxCpltCallback+0x9c>)
 80097fc:	2201      	movs	r2, #1
 80097fe:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8009800:	4909      	ldr	r1, [pc, #36]	; (8009828 <HAL_UART_RxCpltCallback+0x98>)
 8009802:	4b08      	ldr	r3, [pc, #32]	; (8009824 <HAL_UART_RxCpltCallback+0x94>)
 8009804:	2201      	movs	r2, #1
 8009806:	0018      	movs	r0, r3
 8009808:	f7fd fbd0 	bl	8006fac <HAL_UART_Receive_IT>
}
 800980c:	46c0      	nop			; (mov r8, r8)
 800980e:	46bd      	mov	sp, r7
 8009810:	b004      	add	sp, #16
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000600 	.word	0x20000600
 8009818:	200005c0 	.word	0x200005c0
 800981c:	0800df88 	.word	0x0800df88
 8009820:	20000604 	.word	0x20000604
 8009824:	20000484 	.word	0x20000484
 8009828:	200005bc 	.word	0x200005bc
 800982c:	200005b8 	.word	0x200005b8

08009830 <atof>:
 8009830:	b510      	push	{r4, lr}
 8009832:	2100      	movs	r1, #0
 8009834:	f000 fe24 	bl	800a480 <strtod>
 8009838:	bd10      	pop	{r4, pc}
	...

0800983c <sulp>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	0016      	movs	r6, r2
 8009840:	000d      	movs	r5, r1
 8009842:	f003 fcd3 	bl	800d1ec <__ulp>
 8009846:	2e00      	cmp	r6, #0
 8009848:	d00d      	beq.n	8009866 <sulp+0x2a>
 800984a:	236b      	movs	r3, #107	; 0x6b
 800984c:	006a      	lsls	r2, r5, #1
 800984e:	0d52      	lsrs	r2, r2, #21
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	2b00      	cmp	r3, #0
 8009854:	dd07      	ble.n	8009866 <sulp+0x2a>
 8009856:	2400      	movs	r4, #0
 8009858:	4a03      	ldr	r2, [pc, #12]	; (8009868 <sulp+0x2c>)
 800985a:	051b      	lsls	r3, r3, #20
 800985c:	189d      	adds	r5, r3, r2
 800985e:	002b      	movs	r3, r5
 8009860:	0022      	movs	r2, r4
 8009862:	f7f8 fd3d 	bl	80022e0 <__aeabi_dmul>
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	3ff00000 	.word	0x3ff00000

0800986c <_strtod_l>:
 800986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800986e:	b0a1      	sub	sp, #132	; 0x84
 8009870:	9219      	str	r2, [sp, #100]	; 0x64
 8009872:	2200      	movs	r2, #0
 8009874:	2600      	movs	r6, #0
 8009876:	2700      	movs	r7, #0
 8009878:	9004      	str	r0, [sp, #16]
 800987a:	9107      	str	r1, [sp, #28]
 800987c:	921c      	str	r2, [sp, #112]	; 0x70
 800987e:	911b      	str	r1, [sp, #108]	; 0x6c
 8009880:	780a      	ldrb	r2, [r1, #0]
 8009882:	2a2b      	cmp	r2, #43	; 0x2b
 8009884:	d055      	beq.n	8009932 <_strtod_l+0xc6>
 8009886:	d841      	bhi.n	800990c <_strtod_l+0xa0>
 8009888:	2a0d      	cmp	r2, #13
 800988a:	d83b      	bhi.n	8009904 <_strtod_l+0x98>
 800988c:	2a08      	cmp	r2, #8
 800988e:	d83b      	bhi.n	8009908 <_strtod_l+0x9c>
 8009890:	2a00      	cmp	r2, #0
 8009892:	d044      	beq.n	800991e <_strtod_l+0xb2>
 8009894:	2200      	movs	r2, #0
 8009896:	920f      	str	r2, [sp, #60]	; 0x3c
 8009898:	2100      	movs	r1, #0
 800989a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800989c:	9109      	str	r1, [sp, #36]	; 0x24
 800989e:	782a      	ldrb	r2, [r5, #0]
 80098a0:	2a30      	cmp	r2, #48	; 0x30
 80098a2:	d000      	beq.n	80098a6 <_strtod_l+0x3a>
 80098a4:	e085      	b.n	80099b2 <_strtod_l+0x146>
 80098a6:	786a      	ldrb	r2, [r5, #1]
 80098a8:	3120      	adds	r1, #32
 80098aa:	438a      	bics	r2, r1
 80098ac:	2a58      	cmp	r2, #88	; 0x58
 80098ae:	d000      	beq.n	80098b2 <_strtod_l+0x46>
 80098b0:	e075      	b.n	800999e <_strtod_l+0x132>
 80098b2:	9302      	str	r3, [sp, #8]
 80098b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098b6:	4a97      	ldr	r2, [pc, #604]	; (8009b14 <_strtod_l+0x2a8>)
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	ab1c      	add	r3, sp, #112	; 0x70
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	9804      	ldr	r0, [sp, #16]
 80098c0:	ab1d      	add	r3, sp, #116	; 0x74
 80098c2:	a91b      	add	r1, sp, #108	; 0x6c
 80098c4:	f002 fd4a 	bl	800c35c <__gethex>
 80098c8:	230f      	movs	r3, #15
 80098ca:	0002      	movs	r2, r0
 80098cc:	401a      	ands	r2, r3
 80098ce:	0004      	movs	r4, r0
 80098d0:	9205      	str	r2, [sp, #20]
 80098d2:	4218      	tst	r0, r3
 80098d4:	d005      	beq.n	80098e2 <_strtod_l+0x76>
 80098d6:	2a06      	cmp	r2, #6
 80098d8:	d12d      	bne.n	8009936 <_strtod_l+0xca>
 80098da:	1c6b      	adds	r3, r5, #1
 80098dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80098de:	2300      	movs	r3, #0
 80098e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <_strtod_l+0x82>
 80098e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01b      	beq.n	800992c <_strtod_l+0xc0>
 80098f4:	2380      	movs	r3, #128	; 0x80
 80098f6:	0032      	movs	r2, r6
 80098f8:	061b      	lsls	r3, r3, #24
 80098fa:	18fb      	adds	r3, r7, r3
 80098fc:	0010      	movs	r0, r2
 80098fe:	0019      	movs	r1, r3
 8009900:	b021      	add	sp, #132	; 0x84
 8009902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009904:	2a20      	cmp	r2, #32
 8009906:	d1c5      	bne.n	8009894 <_strtod_l+0x28>
 8009908:	3101      	adds	r1, #1
 800990a:	e7b8      	b.n	800987e <_strtod_l+0x12>
 800990c:	2a2d      	cmp	r2, #45	; 0x2d
 800990e:	d1c1      	bne.n	8009894 <_strtod_l+0x28>
 8009910:	3a2c      	subs	r2, #44	; 0x2c
 8009912:	920f      	str	r2, [sp, #60]	; 0x3c
 8009914:	1c4a      	adds	r2, r1, #1
 8009916:	921b      	str	r2, [sp, #108]	; 0x6c
 8009918:	784a      	ldrb	r2, [r1, #1]
 800991a:	2a00      	cmp	r2, #0
 800991c:	d1bc      	bne.n	8009898 <_strtod_l+0x2c>
 800991e:	9b07      	ldr	r3, [sp, #28]
 8009920:	931b      	str	r3, [sp, #108]	; 0x6c
 8009922:	2300      	movs	r3, #0
 8009924:	930f      	str	r3, [sp, #60]	; 0x3c
 8009926:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1dd      	bne.n	80098e8 <_strtod_l+0x7c>
 800992c:	0032      	movs	r2, r6
 800992e:	003b      	movs	r3, r7
 8009930:	e7e4      	b.n	80098fc <_strtod_l+0x90>
 8009932:	2200      	movs	r2, #0
 8009934:	e7ed      	b.n	8009912 <_strtod_l+0xa6>
 8009936:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009938:	2a00      	cmp	r2, #0
 800993a:	d007      	beq.n	800994c <_strtod_l+0xe0>
 800993c:	2135      	movs	r1, #53	; 0x35
 800993e:	a81e      	add	r0, sp, #120	; 0x78
 8009940:	f003 fd45 	bl	800d3ce <__copybits>
 8009944:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009946:	9804      	ldr	r0, [sp, #16]
 8009948:	f003 f90e 	bl	800cb68 <_Bfree>
 800994c:	9805      	ldr	r0, [sp, #20]
 800994e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009950:	3801      	subs	r0, #1
 8009952:	2804      	cmp	r0, #4
 8009954:	d806      	bhi.n	8009964 <_strtod_l+0xf8>
 8009956:	f7f6 fbe5 	bl	8000124 <__gnu_thumb1_case_uqi>
 800995a:	0312      	.short	0x0312
 800995c:	1e1c      	.short	0x1e1c
 800995e:	12          	.byte	0x12
 800995f:	00          	.byte	0x00
 8009960:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009962:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8009964:	05e4      	lsls	r4, r4, #23
 8009966:	d502      	bpl.n	800996e <_strtod_l+0x102>
 8009968:	2380      	movs	r3, #128	; 0x80
 800996a:	061b      	lsls	r3, r3, #24
 800996c:	431f      	orrs	r7, r3
 800996e:	4b6a      	ldr	r3, [pc, #424]	; (8009b18 <_strtod_l+0x2ac>)
 8009970:	423b      	tst	r3, r7
 8009972:	d1b6      	bne.n	80098e2 <_strtod_l+0x76>
 8009974:	f001 fd3a 	bl	800b3ec <__errno>
 8009978:	2322      	movs	r3, #34	; 0x22
 800997a:	6003      	str	r3, [r0, #0]
 800997c:	e7b1      	b.n	80098e2 <_strtod_l+0x76>
 800997e:	4967      	ldr	r1, [pc, #412]	; (8009b1c <_strtod_l+0x2b0>)
 8009980:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009982:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009984:	400a      	ands	r2, r1
 8009986:	4966      	ldr	r1, [pc, #408]	; (8009b20 <_strtod_l+0x2b4>)
 8009988:	185b      	adds	r3, r3, r1
 800998a:	051b      	lsls	r3, r3, #20
 800998c:	431a      	orrs	r2, r3
 800998e:	0017      	movs	r7, r2
 8009990:	e7e8      	b.n	8009964 <_strtod_l+0xf8>
 8009992:	4f61      	ldr	r7, [pc, #388]	; (8009b18 <_strtod_l+0x2ac>)
 8009994:	e7e6      	b.n	8009964 <_strtod_l+0xf8>
 8009996:	2601      	movs	r6, #1
 8009998:	4f62      	ldr	r7, [pc, #392]	; (8009b24 <_strtod_l+0x2b8>)
 800999a:	4276      	negs	r6, r6
 800999c:	e7e2      	b.n	8009964 <_strtod_l+0xf8>
 800999e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099a0:	1c5a      	adds	r2, r3, #1
 80099a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	2b30      	cmp	r3, #48	; 0x30
 80099a8:	d0f9      	beq.n	800999e <_strtod_l+0x132>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d099      	beq.n	80098e2 <_strtod_l+0x76>
 80099ae:	2301      	movs	r3, #1
 80099b0:	9309      	str	r3, [sp, #36]	; 0x24
 80099b2:	2500      	movs	r5, #0
 80099b4:	220a      	movs	r2, #10
 80099b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099b8:	950d      	str	r5, [sp, #52]	; 0x34
 80099ba:	9310      	str	r3, [sp, #64]	; 0x40
 80099bc:	9508      	str	r5, [sp, #32]
 80099be:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80099c0:	7804      	ldrb	r4, [r0, #0]
 80099c2:	0023      	movs	r3, r4
 80099c4:	3b30      	subs	r3, #48	; 0x30
 80099c6:	b2d9      	uxtb	r1, r3
 80099c8:	2909      	cmp	r1, #9
 80099ca:	d927      	bls.n	8009a1c <_strtod_l+0x1b0>
 80099cc:	2201      	movs	r2, #1
 80099ce:	4956      	ldr	r1, [pc, #344]	; (8009b28 <_strtod_l+0x2bc>)
 80099d0:	f001 fc44 	bl	800b25c <strncmp>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d031      	beq.n	8009a3c <_strtod_l+0x1d0>
 80099d8:	2000      	movs	r0, #0
 80099da:	0023      	movs	r3, r4
 80099dc:	4684      	mov	ip, r0
 80099de:	9a08      	ldr	r2, [sp, #32]
 80099e0:	900c      	str	r0, [sp, #48]	; 0x30
 80099e2:	9205      	str	r2, [sp, #20]
 80099e4:	2220      	movs	r2, #32
 80099e6:	0019      	movs	r1, r3
 80099e8:	4391      	bics	r1, r2
 80099ea:	000a      	movs	r2, r1
 80099ec:	2100      	movs	r1, #0
 80099ee:	9106      	str	r1, [sp, #24]
 80099f0:	2a45      	cmp	r2, #69	; 0x45
 80099f2:	d000      	beq.n	80099f6 <_strtod_l+0x18a>
 80099f4:	e0c2      	b.n	8009b7c <_strtod_l+0x310>
 80099f6:	9b05      	ldr	r3, [sp, #20]
 80099f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099fa:	4303      	orrs	r3, r0
 80099fc:	4313      	orrs	r3, r2
 80099fe:	428b      	cmp	r3, r1
 8009a00:	d08d      	beq.n	800991e <_strtod_l+0xb2>
 8009a02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a04:	9307      	str	r3, [sp, #28]
 8009a06:	3301      	adds	r3, #1
 8009a08:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a0a:	9b07      	ldr	r3, [sp, #28]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	2b2b      	cmp	r3, #43	; 0x2b
 8009a10:	d071      	beq.n	8009af6 <_strtod_l+0x28a>
 8009a12:	000c      	movs	r4, r1
 8009a14:	2b2d      	cmp	r3, #45	; 0x2d
 8009a16:	d174      	bne.n	8009b02 <_strtod_l+0x296>
 8009a18:	2401      	movs	r4, #1
 8009a1a:	e06d      	b.n	8009af8 <_strtod_l+0x28c>
 8009a1c:	9908      	ldr	r1, [sp, #32]
 8009a1e:	2908      	cmp	r1, #8
 8009a20:	dc09      	bgt.n	8009a36 <_strtod_l+0x1ca>
 8009a22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a24:	4351      	muls	r1, r2
 8009a26:	185b      	adds	r3, r3, r1
 8009a28:	930d      	str	r3, [sp, #52]	; 0x34
 8009a2a:	9b08      	ldr	r3, [sp, #32]
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	3301      	adds	r3, #1
 8009a30:	9308      	str	r3, [sp, #32]
 8009a32:	901b      	str	r0, [sp, #108]	; 0x6c
 8009a34:	e7c3      	b.n	80099be <_strtod_l+0x152>
 8009a36:	4355      	muls	r5, r2
 8009a38:	195d      	adds	r5, r3, r5
 8009a3a:	e7f6      	b.n	8009a2a <_strtod_l+0x1be>
 8009a3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	921b      	str	r2, [sp, #108]	; 0x6c
 8009a42:	9a08      	ldr	r2, [sp, #32]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	d03a      	beq.n	8009ac0 <_strtod_l+0x254>
 8009a4a:	900c      	str	r0, [sp, #48]	; 0x30
 8009a4c:	9205      	str	r2, [sp, #20]
 8009a4e:	001a      	movs	r2, r3
 8009a50:	3a30      	subs	r2, #48	; 0x30
 8009a52:	2a09      	cmp	r2, #9
 8009a54:	d912      	bls.n	8009a7c <_strtod_l+0x210>
 8009a56:	2201      	movs	r2, #1
 8009a58:	4694      	mov	ip, r2
 8009a5a:	e7c3      	b.n	80099e4 <_strtod_l+0x178>
 8009a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a5e:	3001      	adds	r0, #1
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	921b      	str	r2, [sp, #108]	; 0x6c
 8009a64:	785b      	ldrb	r3, [r3, #1]
 8009a66:	2b30      	cmp	r3, #48	; 0x30
 8009a68:	d0f8      	beq.n	8009a5c <_strtod_l+0x1f0>
 8009a6a:	001a      	movs	r2, r3
 8009a6c:	3a31      	subs	r2, #49	; 0x31
 8009a6e:	2a08      	cmp	r2, #8
 8009a70:	d83c      	bhi.n	8009aec <_strtod_l+0x280>
 8009a72:	900c      	str	r0, [sp, #48]	; 0x30
 8009a74:	2000      	movs	r0, #0
 8009a76:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a78:	9005      	str	r0, [sp, #20]
 8009a7a:	9210      	str	r2, [sp, #64]	; 0x40
 8009a7c:	001a      	movs	r2, r3
 8009a7e:	1c41      	adds	r1, r0, #1
 8009a80:	3a30      	subs	r2, #48	; 0x30
 8009a82:	2b30      	cmp	r3, #48	; 0x30
 8009a84:	d016      	beq.n	8009ab4 <_strtod_l+0x248>
 8009a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a88:	185b      	adds	r3, r3, r1
 8009a8a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a8c:	9b05      	ldr	r3, [sp, #20]
 8009a8e:	210a      	movs	r1, #10
 8009a90:	469c      	mov	ip, r3
 8009a92:	4484      	add	ip, r0
 8009a94:	4563      	cmp	r3, ip
 8009a96:	d115      	bne.n	8009ac4 <_strtod_l+0x258>
 8009a98:	9905      	ldr	r1, [sp, #20]
 8009a9a:	9b05      	ldr	r3, [sp, #20]
 8009a9c:	3101      	adds	r1, #1
 8009a9e:	1809      	adds	r1, r1, r0
 8009aa0:	181b      	adds	r3, r3, r0
 8009aa2:	9105      	str	r1, [sp, #20]
 8009aa4:	2b08      	cmp	r3, #8
 8009aa6:	dc19      	bgt.n	8009adc <_strtod_l+0x270>
 8009aa8:	230a      	movs	r3, #10
 8009aaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009aac:	434b      	muls	r3, r1
 8009aae:	2100      	movs	r1, #0
 8009ab0:	18d3      	adds	r3, r2, r3
 8009ab2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ab6:	0008      	movs	r0, r1
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	921b      	str	r2, [sp, #108]	; 0x6c
 8009abc:	785b      	ldrb	r3, [r3, #1]
 8009abe:	e7c6      	b.n	8009a4e <_strtod_l+0x1e2>
 8009ac0:	9808      	ldr	r0, [sp, #32]
 8009ac2:	e7d0      	b.n	8009a66 <_strtod_l+0x1fa>
 8009ac4:	1c5c      	adds	r4, r3, #1
 8009ac6:	2b08      	cmp	r3, #8
 8009ac8:	dc04      	bgt.n	8009ad4 <_strtod_l+0x268>
 8009aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009acc:	434b      	muls	r3, r1
 8009ace:	930d      	str	r3, [sp, #52]	; 0x34
 8009ad0:	0023      	movs	r3, r4
 8009ad2:	e7df      	b.n	8009a94 <_strtod_l+0x228>
 8009ad4:	2c10      	cmp	r4, #16
 8009ad6:	dcfb      	bgt.n	8009ad0 <_strtod_l+0x264>
 8009ad8:	434d      	muls	r5, r1
 8009ada:	e7f9      	b.n	8009ad0 <_strtod_l+0x264>
 8009adc:	9b05      	ldr	r3, [sp, #20]
 8009ade:	2100      	movs	r1, #0
 8009ae0:	2b10      	cmp	r3, #16
 8009ae2:	dce7      	bgt.n	8009ab4 <_strtod_l+0x248>
 8009ae4:	230a      	movs	r3, #10
 8009ae6:	435d      	muls	r5, r3
 8009ae8:	1955      	adds	r5, r2, r5
 8009aea:	e7e3      	b.n	8009ab4 <_strtod_l+0x248>
 8009aec:	2200      	movs	r2, #0
 8009aee:	920c      	str	r2, [sp, #48]	; 0x30
 8009af0:	9205      	str	r2, [sp, #20]
 8009af2:	3201      	adds	r2, #1
 8009af4:	e7b0      	b.n	8009a58 <_strtod_l+0x1ec>
 8009af6:	2400      	movs	r4, #0
 8009af8:	9b07      	ldr	r3, [sp, #28]
 8009afa:	3302      	adds	r3, #2
 8009afc:	931b      	str	r3, [sp, #108]	; 0x6c
 8009afe:	9b07      	ldr	r3, [sp, #28]
 8009b00:	789b      	ldrb	r3, [r3, #2]
 8009b02:	001a      	movs	r2, r3
 8009b04:	3a30      	subs	r2, #48	; 0x30
 8009b06:	2a09      	cmp	r2, #9
 8009b08:	d914      	bls.n	8009b34 <_strtod_l+0x2c8>
 8009b0a:	9a07      	ldr	r2, [sp, #28]
 8009b0c:	921b      	str	r2, [sp, #108]	; 0x6c
 8009b0e:	2200      	movs	r2, #0
 8009b10:	e033      	b.n	8009b7a <_strtod_l+0x30e>
 8009b12:	46c0      	nop			; (mov r8, r8)
 8009b14:	0800e13c 	.word	0x0800e13c
 8009b18:	7ff00000 	.word	0x7ff00000
 8009b1c:	ffefffff 	.word	0xffefffff
 8009b20:	00000433 	.word	0x00000433
 8009b24:	7fffffff 	.word	0x7fffffff
 8009b28:	0800e138 	.word	0x0800e138
 8009b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	921b      	str	r2, [sp, #108]	; 0x6c
 8009b32:	785b      	ldrb	r3, [r3, #1]
 8009b34:	2b30      	cmp	r3, #48	; 0x30
 8009b36:	d0f9      	beq.n	8009b2c <_strtod_l+0x2c0>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	9206      	str	r2, [sp, #24]
 8009b3c:	001a      	movs	r2, r3
 8009b3e:	3a31      	subs	r2, #49	; 0x31
 8009b40:	2a08      	cmp	r2, #8
 8009b42:	d81b      	bhi.n	8009b7c <_strtod_l+0x310>
 8009b44:	3b30      	subs	r3, #48	; 0x30
 8009b46:	930e      	str	r3, [sp, #56]	; 0x38
 8009b48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b4a:	9306      	str	r3, [sp, #24]
 8009b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b4e:	1c59      	adds	r1, r3, #1
 8009b50:	911b      	str	r1, [sp, #108]	; 0x6c
 8009b52:	785b      	ldrb	r3, [r3, #1]
 8009b54:	001a      	movs	r2, r3
 8009b56:	3a30      	subs	r2, #48	; 0x30
 8009b58:	2a09      	cmp	r2, #9
 8009b5a:	d93a      	bls.n	8009bd2 <_strtod_l+0x366>
 8009b5c:	9a06      	ldr	r2, [sp, #24]
 8009b5e:	1a8a      	subs	r2, r1, r2
 8009b60:	49b2      	ldr	r1, [pc, #712]	; (8009e2c <_strtod_l+0x5c0>)
 8009b62:	9106      	str	r1, [sp, #24]
 8009b64:	2a08      	cmp	r2, #8
 8009b66:	dc04      	bgt.n	8009b72 <_strtod_l+0x306>
 8009b68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b6a:	9206      	str	r2, [sp, #24]
 8009b6c:	428a      	cmp	r2, r1
 8009b6e:	dd00      	ble.n	8009b72 <_strtod_l+0x306>
 8009b70:	9106      	str	r1, [sp, #24]
 8009b72:	2c00      	cmp	r4, #0
 8009b74:	d002      	beq.n	8009b7c <_strtod_l+0x310>
 8009b76:	9a06      	ldr	r2, [sp, #24]
 8009b78:	4252      	negs	r2, r2
 8009b7a:	9206      	str	r2, [sp, #24]
 8009b7c:	9a05      	ldr	r2, [sp, #20]
 8009b7e:	2a00      	cmp	r2, #0
 8009b80:	d14d      	bne.n	8009c1e <_strtod_l+0x3b2>
 8009b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b84:	4310      	orrs	r0, r2
 8009b86:	d000      	beq.n	8009b8a <_strtod_l+0x31e>
 8009b88:	e6ab      	b.n	80098e2 <_strtod_l+0x76>
 8009b8a:	4662      	mov	r2, ip
 8009b8c:	2a00      	cmp	r2, #0
 8009b8e:	d000      	beq.n	8009b92 <_strtod_l+0x326>
 8009b90:	e6c5      	b.n	800991e <_strtod_l+0xb2>
 8009b92:	2b69      	cmp	r3, #105	; 0x69
 8009b94:	d027      	beq.n	8009be6 <_strtod_l+0x37a>
 8009b96:	dc23      	bgt.n	8009be0 <_strtod_l+0x374>
 8009b98:	2b49      	cmp	r3, #73	; 0x49
 8009b9a:	d024      	beq.n	8009be6 <_strtod_l+0x37a>
 8009b9c:	2b4e      	cmp	r3, #78	; 0x4e
 8009b9e:	d000      	beq.n	8009ba2 <_strtod_l+0x336>
 8009ba0:	e6bd      	b.n	800991e <_strtod_l+0xb2>
 8009ba2:	49a3      	ldr	r1, [pc, #652]	; (8009e30 <_strtod_l+0x5c4>)
 8009ba4:	a81b      	add	r0, sp, #108	; 0x6c
 8009ba6:	f002 fe0f 	bl	800c7c8 <__match>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d100      	bne.n	8009bb0 <_strtod_l+0x344>
 8009bae:	e6b6      	b.n	800991e <_strtod_l+0xb2>
 8009bb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b28      	cmp	r3, #40	; 0x28
 8009bb6:	d12c      	bne.n	8009c12 <_strtod_l+0x3a6>
 8009bb8:	499e      	ldr	r1, [pc, #632]	; (8009e34 <_strtod_l+0x5c8>)
 8009bba:	aa1e      	add	r2, sp, #120	; 0x78
 8009bbc:	a81b      	add	r0, sp, #108	; 0x6c
 8009bbe:	f002 fe17 	bl	800c7f0 <__hexnan>
 8009bc2:	2805      	cmp	r0, #5
 8009bc4:	d125      	bne.n	8009c12 <_strtod_l+0x3a6>
 8009bc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bc8:	4a9b      	ldr	r2, [pc, #620]	; (8009e38 <_strtod_l+0x5cc>)
 8009bca:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	0017      	movs	r7, r2
 8009bd0:	e687      	b.n	80098e2 <_strtod_l+0x76>
 8009bd2:	220a      	movs	r2, #10
 8009bd4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009bd6:	434a      	muls	r2, r1
 8009bd8:	18d2      	adds	r2, r2, r3
 8009bda:	3a30      	subs	r2, #48	; 0x30
 8009bdc:	920e      	str	r2, [sp, #56]	; 0x38
 8009bde:	e7b5      	b.n	8009b4c <_strtod_l+0x2e0>
 8009be0:	2b6e      	cmp	r3, #110	; 0x6e
 8009be2:	d0de      	beq.n	8009ba2 <_strtod_l+0x336>
 8009be4:	e69b      	b.n	800991e <_strtod_l+0xb2>
 8009be6:	4995      	ldr	r1, [pc, #596]	; (8009e3c <_strtod_l+0x5d0>)
 8009be8:	a81b      	add	r0, sp, #108	; 0x6c
 8009bea:	f002 fded 	bl	800c7c8 <__match>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d100      	bne.n	8009bf4 <_strtod_l+0x388>
 8009bf2:	e694      	b.n	800991e <_strtod_l+0xb2>
 8009bf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bf6:	4992      	ldr	r1, [pc, #584]	; (8009e40 <_strtod_l+0x5d4>)
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	a81b      	add	r0, sp, #108	; 0x6c
 8009bfc:	931b      	str	r3, [sp, #108]	; 0x6c
 8009bfe:	f002 fde3 	bl	800c7c8 <__match>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d102      	bne.n	8009c0c <_strtod_l+0x3a0>
 8009c06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c08:	3301      	adds	r3, #1
 8009c0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c0c:	2600      	movs	r6, #0
 8009c0e:	4f8a      	ldr	r7, [pc, #552]	; (8009e38 <_strtod_l+0x5cc>)
 8009c10:	e667      	b.n	80098e2 <_strtod_l+0x76>
 8009c12:	488c      	ldr	r0, [pc, #560]	; (8009e44 <_strtod_l+0x5d8>)
 8009c14:	f001 fc2c 	bl	800b470 <nan>
 8009c18:	0006      	movs	r6, r0
 8009c1a:	000f      	movs	r7, r1
 8009c1c:	e661      	b.n	80098e2 <_strtod_l+0x76>
 8009c1e:	9b06      	ldr	r3, [sp, #24]
 8009c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c22:	1a9b      	subs	r3, r3, r2
 8009c24:	9309      	str	r3, [sp, #36]	; 0x24
 8009c26:	9b08      	ldr	r3, [sp, #32]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <_strtod_l+0x3c4>
 8009c2c:	9b05      	ldr	r3, [sp, #20]
 8009c2e:	9308      	str	r3, [sp, #32]
 8009c30:	9c05      	ldr	r4, [sp, #20]
 8009c32:	2c10      	cmp	r4, #16
 8009c34:	dd00      	ble.n	8009c38 <_strtod_l+0x3cc>
 8009c36:	2410      	movs	r4, #16
 8009c38:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009c3a:	f7f9 fa19 	bl	8003070 <__aeabi_ui2d>
 8009c3e:	9b05      	ldr	r3, [sp, #20]
 8009c40:	0006      	movs	r6, r0
 8009c42:	000f      	movs	r7, r1
 8009c44:	2b09      	cmp	r3, #9
 8009c46:	dd15      	ble.n	8009c74 <_strtod_l+0x408>
 8009c48:	0022      	movs	r2, r4
 8009c4a:	4b7f      	ldr	r3, [pc, #508]	; (8009e48 <_strtod_l+0x5dc>)
 8009c4c:	3a09      	subs	r2, #9
 8009c4e:	00d2      	lsls	r2, r2, #3
 8009c50:	189b      	adds	r3, r3, r2
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	f7f8 fb43 	bl	80022e0 <__aeabi_dmul>
 8009c5a:	0006      	movs	r6, r0
 8009c5c:	0028      	movs	r0, r5
 8009c5e:	000f      	movs	r7, r1
 8009c60:	f7f9 fa06 	bl	8003070 <__aeabi_ui2d>
 8009c64:	0002      	movs	r2, r0
 8009c66:	000b      	movs	r3, r1
 8009c68:	0030      	movs	r0, r6
 8009c6a:	0039      	movs	r1, r7
 8009c6c:	f7f7 fbde 	bl	800142c <__aeabi_dadd>
 8009c70:	0006      	movs	r6, r0
 8009c72:	000f      	movs	r7, r1
 8009c74:	9b05      	ldr	r3, [sp, #20]
 8009c76:	2b0f      	cmp	r3, #15
 8009c78:	dc39      	bgt.n	8009cee <_strtod_l+0x482>
 8009c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d100      	bne.n	8009c82 <_strtod_l+0x416>
 8009c80:	e62f      	b.n	80098e2 <_strtod_l+0x76>
 8009c82:	dd24      	ble.n	8009cce <_strtod_l+0x462>
 8009c84:	2b16      	cmp	r3, #22
 8009c86:	dc09      	bgt.n	8009c9c <_strtod_l+0x430>
 8009c88:	496f      	ldr	r1, [pc, #444]	; (8009e48 <_strtod_l+0x5dc>)
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	18c9      	adds	r1, r1, r3
 8009c8e:	0032      	movs	r2, r6
 8009c90:	6808      	ldr	r0, [r1, #0]
 8009c92:	6849      	ldr	r1, [r1, #4]
 8009c94:	003b      	movs	r3, r7
 8009c96:	f7f8 fb23 	bl	80022e0 <__aeabi_dmul>
 8009c9a:	e7bd      	b.n	8009c18 <_strtod_l+0x3ac>
 8009c9c:	2325      	movs	r3, #37	; 0x25
 8009c9e:	9a05      	ldr	r2, [sp, #20]
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	db22      	blt.n	8009cee <_strtod_l+0x482>
 8009ca8:	240f      	movs	r4, #15
 8009caa:	9b05      	ldr	r3, [sp, #20]
 8009cac:	4d66      	ldr	r5, [pc, #408]	; (8009e48 <_strtod_l+0x5dc>)
 8009cae:	1ae4      	subs	r4, r4, r3
 8009cb0:	00e1      	lsls	r1, r4, #3
 8009cb2:	1869      	adds	r1, r5, r1
 8009cb4:	0032      	movs	r2, r6
 8009cb6:	6808      	ldr	r0, [r1, #0]
 8009cb8:	6849      	ldr	r1, [r1, #4]
 8009cba:	003b      	movs	r3, r7
 8009cbc:	f7f8 fb10 	bl	80022e0 <__aeabi_dmul>
 8009cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc2:	1b1c      	subs	r4, r3, r4
 8009cc4:	00e4      	lsls	r4, r4, #3
 8009cc6:	192d      	adds	r5, r5, r4
 8009cc8:	682a      	ldr	r2, [r5, #0]
 8009cca:	686b      	ldr	r3, [r5, #4]
 8009ccc:	e7e3      	b.n	8009c96 <_strtod_l+0x42a>
 8009cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd0:	3316      	adds	r3, #22
 8009cd2:	db0c      	blt.n	8009cee <_strtod_l+0x482>
 8009cd4:	9906      	ldr	r1, [sp, #24]
 8009cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cd8:	4b5b      	ldr	r3, [pc, #364]	; (8009e48 <_strtod_l+0x5dc>)
 8009cda:	1a52      	subs	r2, r2, r1
 8009cdc:	00d2      	lsls	r2, r2, #3
 8009cde:	189b      	adds	r3, r3, r2
 8009ce0:	0030      	movs	r0, r6
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	0039      	movs	r1, r7
 8009ce8:	f7f7 ff00 	bl	8001aec <__aeabi_ddiv>
 8009cec:	e794      	b.n	8009c18 <_strtod_l+0x3ac>
 8009cee:	9b05      	ldr	r3, [sp, #20]
 8009cf0:	1b1c      	subs	r4, r3, r4
 8009cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf4:	18e4      	adds	r4, r4, r3
 8009cf6:	2c00      	cmp	r4, #0
 8009cf8:	dd72      	ble.n	8009de0 <_strtod_l+0x574>
 8009cfa:	220f      	movs	r2, #15
 8009cfc:	0023      	movs	r3, r4
 8009cfe:	4013      	ands	r3, r2
 8009d00:	4214      	tst	r4, r2
 8009d02:	d00a      	beq.n	8009d1a <_strtod_l+0x4ae>
 8009d04:	4950      	ldr	r1, [pc, #320]	; (8009e48 <_strtod_l+0x5dc>)
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	18c9      	adds	r1, r1, r3
 8009d0a:	0032      	movs	r2, r6
 8009d0c:	6808      	ldr	r0, [r1, #0]
 8009d0e:	6849      	ldr	r1, [r1, #4]
 8009d10:	003b      	movs	r3, r7
 8009d12:	f7f8 fae5 	bl	80022e0 <__aeabi_dmul>
 8009d16:	0006      	movs	r6, r0
 8009d18:	000f      	movs	r7, r1
 8009d1a:	230f      	movs	r3, #15
 8009d1c:	439c      	bics	r4, r3
 8009d1e:	d04a      	beq.n	8009db6 <_strtod_l+0x54a>
 8009d20:	3326      	adds	r3, #38	; 0x26
 8009d22:	33ff      	adds	r3, #255	; 0xff
 8009d24:	429c      	cmp	r4, r3
 8009d26:	dd22      	ble.n	8009d6e <_strtod_l+0x502>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	9305      	str	r3, [sp, #20]
 8009d2c:	9306      	str	r3, [sp, #24]
 8009d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d30:	9308      	str	r3, [sp, #32]
 8009d32:	2322      	movs	r3, #34	; 0x22
 8009d34:	2600      	movs	r6, #0
 8009d36:	9a04      	ldr	r2, [sp, #16]
 8009d38:	4f3f      	ldr	r7, [pc, #252]	; (8009e38 <_strtod_l+0x5cc>)
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d3e:	42b3      	cmp	r3, r6
 8009d40:	d100      	bne.n	8009d44 <_strtod_l+0x4d8>
 8009d42:	e5ce      	b.n	80098e2 <_strtod_l+0x76>
 8009d44:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d46:	9804      	ldr	r0, [sp, #16]
 8009d48:	f002 ff0e 	bl	800cb68 <_Bfree>
 8009d4c:	9908      	ldr	r1, [sp, #32]
 8009d4e:	9804      	ldr	r0, [sp, #16]
 8009d50:	f002 ff0a 	bl	800cb68 <_Bfree>
 8009d54:	9906      	ldr	r1, [sp, #24]
 8009d56:	9804      	ldr	r0, [sp, #16]
 8009d58:	f002 ff06 	bl	800cb68 <_Bfree>
 8009d5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d5e:	9804      	ldr	r0, [sp, #16]
 8009d60:	f002 ff02 	bl	800cb68 <_Bfree>
 8009d64:	9905      	ldr	r1, [sp, #20]
 8009d66:	9804      	ldr	r0, [sp, #16]
 8009d68:	f002 fefe 	bl	800cb68 <_Bfree>
 8009d6c:	e5b9      	b.n	80098e2 <_strtod_l+0x76>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	0030      	movs	r0, r6
 8009d72:	0039      	movs	r1, r7
 8009d74:	4d35      	ldr	r5, [pc, #212]	; (8009e4c <_strtod_l+0x5e0>)
 8009d76:	1124      	asrs	r4, r4, #4
 8009d78:	9307      	str	r3, [sp, #28]
 8009d7a:	2c01      	cmp	r4, #1
 8009d7c:	dc1e      	bgt.n	8009dbc <_strtod_l+0x550>
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <_strtod_l+0x51a>
 8009d82:	0006      	movs	r6, r0
 8009d84:	000f      	movs	r7, r1
 8009d86:	4b32      	ldr	r3, [pc, #200]	; (8009e50 <_strtod_l+0x5e4>)
 8009d88:	9a07      	ldr	r2, [sp, #28]
 8009d8a:	18ff      	adds	r7, r7, r3
 8009d8c:	4b2f      	ldr	r3, [pc, #188]	; (8009e4c <_strtod_l+0x5e0>)
 8009d8e:	00d2      	lsls	r2, r2, #3
 8009d90:	189d      	adds	r5, r3, r2
 8009d92:	6828      	ldr	r0, [r5, #0]
 8009d94:	6869      	ldr	r1, [r5, #4]
 8009d96:	0032      	movs	r2, r6
 8009d98:	003b      	movs	r3, r7
 8009d9a:	f7f8 faa1 	bl	80022e0 <__aeabi_dmul>
 8009d9e:	4b26      	ldr	r3, [pc, #152]	; (8009e38 <_strtod_l+0x5cc>)
 8009da0:	4a2c      	ldr	r2, [pc, #176]	; (8009e54 <_strtod_l+0x5e8>)
 8009da2:	0006      	movs	r6, r0
 8009da4:	400b      	ands	r3, r1
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d8be      	bhi.n	8009d28 <_strtod_l+0x4bc>
 8009daa:	4a2b      	ldr	r2, [pc, #172]	; (8009e58 <_strtod_l+0x5ec>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d913      	bls.n	8009dd8 <_strtod_l+0x56c>
 8009db0:	2601      	movs	r6, #1
 8009db2:	4f2a      	ldr	r7, [pc, #168]	; (8009e5c <_strtod_l+0x5f0>)
 8009db4:	4276      	negs	r6, r6
 8009db6:	2300      	movs	r3, #0
 8009db8:	9307      	str	r3, [sp, #28]
 8009dba:	e088      	b.n	8009ece <_strtod_l+0x662>
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	4214      	tst	r4, r2
 8009dc0:	d004      	beq.n	8009dcc <_strtod_l+0x560>
 8009dc2:	682a      	ldr	r2, [r5, #0]
 8009dc4:	686b      	ldr	r3, [r5, #4]
 8009dc6:	f7f8 fa8b 	bl	80022e0 <__aeabi_dmul>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	9a07      	ldr	r2, [sp, #28]
 8009dce:	1064      	asrs	r4, r4, #1
 8009dd0:	3201      	adds	r2, #1
 8009dd2:	9207      	str	r2, [sp, #28]
 8009dd4:	3508      	adds	r5, #8
 8009dd6:	e7d0      	b.n	8009d7a <_strtod_l+0x50e>
 8009dd8:	23d4      	movs	r3, #212	; 0xd4
 8009dda:	049b      	lsls	r3, r3, #18
 8009ddc:	18cf      	adds	r7, r1, r3
 8009dde:	e7ea      	b.n	8009db6 <_strtod_l+0x54a>
 8009de0:	2c00      	cmp	r4, #0
 8009de2:	d0e8      	beq.n	8009db6 <_strtod_l+0x54a>
 8009de4:	4264      	negs	r4, r4
 8009de6:	230f      	movs	r3, #15
 8009de8:	0022      	movs	r2, r4
 8009dea:	401a      	ands	r2, r3
 8009dec:	421c      	tst	r4, r3
 8009dee:	d00a      	beq.n	8009e06 <_strtod_l+0x59a>
 8009df0:	4b15      	ldr	r3, [pc, #84]	; (8009e48 <_strtod_l+0x5dc>)
 8009df2:	00d2      	lsls	r2, r2, #3
 8009df4:	189b      	adds	r3, r3, r2
 8009df6:	0030      	movs	r0, r6
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	0039      	movs	r1, r7
 8009dfe:	f7f7 fe75 	bl	8001aec <__aeabi_ddiv>
 8009e02:	0006      	movs	r6, r0
 8009e04:	000f      	movs	r7, r1
 8009e06:	1124      	asrs	r4, r4, #4
 8009e08:	d0d5      	beq.n	8009db6 <_strtod_l+0x54a>
 8009e0a:	2c1f      	cmp	r4, #31
 8009e0c:	dd28      	ble.n	8009e60 <_strtod_l+0x5f4>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	9305      	str	r3, [sp, #20]
 8009e12:	9306      	str	r3, [sp, #24]
 8009e14:	930d      	str	r3, [sp, #52]	; 0x34
 8009e16:	9308      	str	r3, [sp, #32]
 8009e18:	2322      	movs	r3, #34	; 0x22
 8009e1a:	9a04      	ldr	r2, [sp, #16]
 8009e1c:	2600      	movs	r6, #0
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e22:	2700      	movs	r7, #0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d18d      	bne.n	8009d44 <_strtod_l+0x4d8>
 8009e28:	e55b      	b.n	80098e2 <_strtod_l+0x76>
 8009e2a:	46c0      	nop			; (mov r8, r8)
 8009e2c:	00004e1f 	.word	0x00004e1f
 8009e30:	0800e19d 	.word	0x0800e19d
 8009e34:	0800e150 	.word	0x0800e150
 8009e38:	7ff00000 	.word	0x7ff00000
 8009e3c:	0800e195 	.word	0x0800e195
 8009e40:	0800e27c 	.word	0x0800e27c
 8009e44:	0800e278 	.word	0x0800e278
 8009e48:	0800e3d0 	.word	0x0800e3d0
 8009e4c:	0800e3a8 	.word	0x0800e3a8
 8009e50:	fcb00000 	.word	0xfcb00000
 8009e54:	7ca00000 	.word	0x7ca00000
 8009e58:	7c900000 	.word	0x7c900000
 8009e5c:	7fefffff 	.word	0x7fefffff
 8009e60:	2310      	movs	r3, #16
 8009e62:	0022      	movs	r2, r4
 8009e64:	401a      	ands	r2, r3
 8009e66:	9207      	str	r2, [sp, #28]
 8009e68:	421c      	tst	r4, r3
 8009e6a:	d001      	beq.n	8009e70 <_strtod_l+0x604>
 8009e6c:	335a      	adds	r3, #90	; 0x5a
 8009e6e:	9307      	str	r3, [sp, #28]
 8009e70:	0030      	movs	r0, r6
 8009e72:	0039      	movs	r1, r7
 8009e74:	2300      	movs	r3, #0
 8009e76:	4dc4      	ldr	r5, [pc, #784]	; (800a188 <_strtod_l+0x91c>)
 8009e78:	2201      	movs	r2, #1
 8009e7a:	4214      	tst	r4, r2
 8009e7c:	d004      	beq.n	8009e88 <_strtod_l+0x61c>
 8009e7e:	682a      	ldr	r2, [r5, #0]
 8009e80:	686b      	ldr	r3, [r5, #4]
 8009e82:	f7f8 fa2d 	bl	80022e0 <__aeabi_dmul>
 8009e86:	2301      	movs	r3, #1
 8009e88:	1064      	asrs	r4, r4, #1
 8009e8a:	3508      	adds	r5, #8
 8009e8c:	2c00      	cmp	r4, #0
 8009e8e:	d1f3      	bne.n	8009e78 <_strtod_l+0x60c>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <_strtod_l+0x62c>
 8009e94:	0006      	movs	r6, r0
 8009e96:	000f      	movs	r7, r1
 8009e98:	9b07      	ldr	r3, [sp, #28]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00f      	beq.n	8009ebe <_strtod_l+0x652>
 8009e9e:	236b      	movs	r3, #107	; 0x6b
 8009ea0:	007a      	lsls	r2, r7, #1
 8009ea2:	0d52      	lsrs	r2, r2, #21
 8009ea4:	0039      	movs	r1, r7
 8009ea6:	1a9b      	subs	r3, r3, r2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dd08      	ble.n	8009ebe <_strtod_l+0x652>
 8009eac:	2b1f      	cmp	r3, #31
 8009eae:	dc00      	bgt.n	8009eb2 <_strtod_l+0x646>
 8009eb0:	e121      	b.n	800a0f6 <_strtod_l+0x88a>
 8009eb2:	2600      	movs	r6, #0
 8009eb4:	2b34      	cmp	r3, #52	; 0x34
 8009eb6:	dc00      	bgt.n	8009eba <_strtod_l+0x64e>
 8009eb8:	e116      	b.n	800a0e8 <_strtod_l+0x87c>
 8009eba:	27dc      	movs	r7, #220	; 0xdc
 8009ebc:	04bf      	lsls	r7, r7, #18
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	0030      	movs	r0, r6
 8009ec4:	0039      	movs	r1, r7
 8009ec6:	f7f6 fac7 	bl	8000458 <__aeabi_dcmpeq>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d19f      	bne.n	8009e0e <_strtod_l+0x5a2>
 8009ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ed0:	9a08      	ldr	r2, [sp, #32]
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009ed6:	9b05      	ldr	r3, [sp, #20]
 8009ed8:	9804      	ldr	r0, [sp, #16]
 8009eda:	f002 fead 	bl	800cc38 <__s2b>
 8009ede:	900d      	str	r0, [sp, #52]	; 0x34
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d100      	bne.n	8009ee6 <_strtod_l+0x67a>
 8009ee4:	e720      	b.n	8009d28 <_strtod_l+0x4bc>
 8009ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee8:	9906      	ldr	r1, [sp, #24]
 8009eea:	17da      	asrs	r2, r3, #31
 8009eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eee:	1a5b      	subs	r3, r3, r1
 8009ef0:	401a      	ands	r2, r3
 8009ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef4:	9215      	str	r2, [sp, #84]	; 0x54
 8009ef6:	43db      	mvns	r3, r3
 8009ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009efa:	17db      	asrs	r3, r3, #31
 8009efc:	401a      	ands	r2, r3
 8009efe:	2300      	movs	r3, #0
 8009f00:	9218      	str	r2, [sp, #96]	; 0x60
 8009f02:	9305      	str	r3, [sp, #20]
 8009f04:	9306      	str	r3, [sp, #24]
 8009f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f08:	9804      	ldr	r0, [sp, #16]
 8009f0a:	6859      	ldr	r1, [r3, #4]
 8009f0c:	f002 fde8 	bl	800cae0 <_Balloc>
 8009f10:	9008      	str	r0, [sp, #32]
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d100      	bne.n	8009f18 <_strtod_l+0x6ac>
 8009f16:	e70c      	b.n	8009d32 <_strtod_l+0x4c6>
 8009f18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f1a:	300c      	adds	r0, #12
 8009f1c:	0019      	movs	r1, r3
 8009f1e:	691a      	ldr	r2, [r3, #16]
 8009f20:	310c      	adds	r1, #12
 8009f22:	3202      	adds	r2, #2
 8009f24:	0092      	lsls	r2, r2, #2
 8009f26:	f001 fa99 	bl	800b45c <memcpy>
 8009f2a:	ab1e      	add	r3, sp, #120	; 0x78
 8009f2c:	9301      	str	r3, [sp, #4]
 8009f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	0032      	movs	r2, r6
 8009f34:	003b      	movs	r3, r7
 8009f36:	9804      	ldr	r0, [sp, #16]
 8009f38:	9610      	str	r6, [sp, #64]	; 0x40
 8009f3a:	9711      	str	r7, [sp, #68]	; 0x44
 8009f3c:	f003 f9be 	bl	800d2bc <__d2b>
 8009f40:	901c      	str	r0, [sp, #112]	; 0x70
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d100      	bne.n	8009f48 <_strtod_l+0x6dc>
 8009f46:	e6f4      	b.n	8009d32 <_strtod_l+0x4c6>
 8009f48:	2101      	movs	r1, #1
 8009f4a:	9804      	ldr	r0, [sp, #16]
 8009f4c:	f002 ff08 	bl	800cd60 <__i2b>
 8009f50:	9006      	str	r0, [sp, #24]
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d100      	bne.n	8009f58 <_strtod_l+0x6ec>
 8009f56:	e6ec      	b.n	8009d32 <_strtod_l+0x4c6>
 8009f58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f5c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009f5e:	1ad4      	subs	r4, r2, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	db01      	blt.n	8009f68 <_strtod_l+0x6fc>
 8009f64:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009f66:	195d      	adds	r5, r3, r5
 8009f68:	9907      	ldr	r1, [sp, #28]
 8009f6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009f6c:	1a5b      	subs	r3, r3, r1
 8009f6e:	2136      	movs	r1, #54	; 0x36
 8009f70:	189b      	adds	r3, r3, r2
 8009f72:	1a8a      	subs	r2, r1, r2
 8009f74:	4985      	ldr	r1, [pc, #532]	; (800a18c <_strtod_l+0x920>)
 8009f76:	2001      	movs	r0, #1
 8009f78:	468c      	mov	ip, r1
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	9114      	str	r1, [sp, #80]	; 0x50
 8009f80:	9012      	str	r0, [sp, #72]	; 0x48
 8009f82:	4563      	cmp	r3, ip
 8009f84:	da07      	bge.n	8009f96 <_strtod_l+0x72a>
 8009f86:	4661      	mov	r1, ip
 8009f88:	1ac9      	subs	r1, r1, r3
 8009f8a:	1a52      	subs	r2, r2, r1
 8009f8c:	291f      	cmp	r1, #31
 8009f8e:	dd00      	ble.n	8009f92 <_strtod_l+0x726>
 8009f90:	e0b6      	b.n	800a100 <_strtod_l+0x894>
 8009f92:	4088      	lsls	r0, r1
 8009f94:	9012      	str	r0, [sp, #72]	; 0x48
 8009f96:	18ab      	adds	r3, r5, r2
 8009f98:	930c      	str	r3, [sp, #48]	; 0x30
 8009f9a:	18a4      	adds	r4, r4, r2
 8009f9c:	9b07      	ldr	r3, [sp, #28]
 8009f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fa0:	191c      	adds	r4, r3, r4
 8009fa2:	002b      	movs	r3, r5
 8009fa4:	4295      	cmp	r5, r2
 8009fa6:	dd00      	ble.n	8009faa <_strtod_l+0x73e>
 8009fa8:	0013      	movs	r3, r2
 8009faa:	42a3      	cmp	r3, r4
 8009fac:	dd00      	ble.n	8009fb0 <_strtod_l+0x744>
 8009fae:	0023      	movs	r3, r4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dd04      	ble.n	8009fbe <_strtod_l+0x752>
 8009fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fb6:	1ae4      	subs	r4, r4, r3
 8009fb8:	1ad2      	subs	r2, r2, r3
 8009fba:	920c      	str	r2, [sp, #48]	; 0x30
 8009fbc:	1aed      	subs	r5, r5, r3
 8009fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	dd17      	ble.n	8009ff4 <_strtod_l+0x788>
 8009fc4:	001a      	movs	r2, r3
 8009fc6:	9906      	ldr	r1, [sp, #24]
 8009fc8:	9804      	ldr	r0, [sp, #16]
 8009fca:	f002 ff91 	bl	800cef0 <__pow5mult>
 8009fce:	9006      	str	r0, [sp, #24]
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	d100      	bne.n	8009fd6 <_strtod_l+0x76a>
 8009fd4:	e6ad      	b.n	8009d32 <_strtod_l+0x4c6>
 8009fd6:	0001      	movs	r1, r0
 8009fd8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009fda:	9804      	ldr	r0, [sp, #16]
 8009fdc:	f002 fed8 	bl	800cd90 <__multiply>
 8009fe0:	900e      	str	r0, [sp, #56]	; 0x38
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d100      	bne.n	8009fe8 <_strtod_l+0x77c>
 8009fe6:	e6a4      	b.n	8009d32 <_strtod_l+0x4c6>
 8009fe8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009fea:	9804      	ldr	r0, [sp, #16]
 8009fec:	f002 fdbc 	bl	800cb68 <_Bfree>
 8009ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ff2:	931c      	str	r3, [sp, #112]	; 0x70
 8009ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	dd00      	ble.n	8009ffc <_strtod_l+0x790>
 8009ffa:	e087      	b.n	800a10c <_strtod_l+0x8a0>
 8009ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	dd08      	ble.n	800a014 <_strtod_l+0x7a8>
 800a002:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a004:	9908      	ldr	r1, [sp, #32]
 800a006:	9804      	ldr	r0, [sp, #16]
 800a008:	f002 ff72 	bl	800cef0 <__pow5mult>
 800a00c:	9008      	str	r0, [sp, #32]
 800a00e:	2800      	cmp	r0, #0
 800a010:	d100      	bne.n	800a014 <_strtod_l+0x7a8>
 800a012:	e68e      	b.n	8009d32 <_strtod_l+0x4c6>
 800a014:	2c00      	cmp	r4, #0
 800a016:	dd08      	ble.n	800a02a <_strtod_l+0x7be>
 800a018:	0022      	movs	r2, r4
 800a01a:	9908      	ldr	r1, [sp, #32]
 800a01c:	9804      	ldr	r0, [sp, #16]
 800a01e:	f002 ffc3 	bl	800cfa8 <__lshift>
 800a022:	9008      	str	r0, [sp, #32]
 800a024:	2800      	cmp	r0, #0
 800a026:	d100      	bne.n	800a02a <_strtod_l+0x7be>
 800a028:	e683      	b.n	8009d32 <_strtod_l+0x4c6>
 800a02a:	2d00      	cmp	r5, #0
 800a02c:	dd08      	ble.n	800a040 <_strtod_l+0x7d4>
 800a02e:	002a      	movs	r2, r5
 800a030:	9906      	ldr	r1, [sp, #24]
 800a032:	9804      	ldr	r0, [sp, #16]
 800a034:	f002 ffb8 	bl	800cfa8 <__lshift>
 800a038:	9006      	str	r0, [sp, #24]
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d100      	bne.n	800a040 <_strtod_l+0x7d4>
 800a03e:	e678      	b.n	8009d32 <_strtod_l+0x4c6>
 800a040:	9a08      	ldr	r2, [sp, #32]
 800a042:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a044:	9804      	ldr	r0, [sp, #16]
 800a046:	f003 f839 	bl	800d0bc <__mdiff>
 800a04a:	9005      	str	r0, [sp, #20]
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d100      	bne.n	800a052 <_strtod_l+0x7e6>
 800a050:	e66f      	b.n	8009d32 <_strtod_l+0x4c6>
 800a052:	2200      	movs	r2, #0
 800a054:	68c3      	ldr	r3, [r0, #12]
 800a056:	9906      	ldr	r1, [sp, #24]
 800a058:	60c2      	str	r2, [r0, #12]
 800a05a:	930c      	str	r3, [sp, #48]	; 0x30
 800a05c:	f003 f812 	bl	800d084 <__mcmp>
 800a060:	2800      	cmp	r0, #0
 800a062:	da5d      	bge.n	800a120 <_strtod_l+0x8b4>
 800a064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a066:	4333      	orrs	r3, r6
 800a068:	d000      	beq.n	800a06c <_strtod_l+0x800>
 800a06a:	e088      	b.n	800a17e <_strtod_l+0x912>
 800a06c:	033b      	lsls	r3, r7, #12
 800a06e:	d000      	beq.n	800a072 <_strtod_l+0x806>
 800a070:	e085      	b.n	800a17e <_strtod_l+0x912>
 800a072:	22d6      	movs	r2, #214	; 0xd6
 800a074:	4b46      	ldr	r3, [pc, #280]	; (800a190 <_strtod_l+0x924>)
 800a076:	04d2      	lsls	r2, r2, #19
 800a078:	403b      	ands	r3, r7
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d97f      	bls.n	800a17e <_strtod_l+0x912>
 800a07e:	9b05      	ldr	r3, [sp, #20]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d103      	bne.n	800a08e <_strtod_l+0x822>
 800a086:	9b05      	ldr	r3, [sp, #20]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	dd77      	ble.n	800a17e <_strtod_l+0x912>
 800a08e:	9905      	ldr	r1, [sp, #20]
 800a090:	2201      	movs	r2, #1
 800a092:	9804      	ldr	r0, [sp, #16]
 800a094:	f002 ff88 	bl	800cfa8 <__lshift>
 800a098:	9906      	ldr	r1, [sp, #24]
 800a09a:	9005      	str	r0, [sp, #20]
 800a09c:	f002 fff2 	bl	800d084 <__mcmp>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	dd6c      	ble.n	800a17e <_strtod_l+0x912>
 800a0a4:	9907      	ldr	r1, [sp, #28]
 800a0a6:	003b      	movs	r3, r7
 800a0a8:	4a39      	ldr	r2, [pc, #228]	; (800a190 <_strtod_l+0x924>)
 800a0aa:	2900      	cmp	r1, #0
 800a0ac:	d100      	bne.n	800a0b0 <_strtod_l+0x844>
 800a0ae:	e094      	b.n	800a1da <_strtod_l+0x96e>
 800a0b0:	0011      	movs	r1, r2
 800a0b2:	20d6      	movs	r0, #214	; 0xd6
 800a0b4:	4039      	ands	r1, r7
 800a0b6:	04c0      	lsls	r0, r0, #19
 800a0b8:	4281      	cmp	r1, r0
 800a0ba:	dd00      	ble.n	800a0be <_strtod_l+0x852>
 800a0bc:	e08d      	b.n	800a1da <_strtod_l+0x96e>
 800a0be:	23dc      	movs	r3, #220	; 0xdc
 800a0c0:	049b      	lsls	r3, r3, #18
 800a0c2:	4299      	cmp	r1, r3
 800a0c4:	dc00      	bgt.n	800a0c8 <_strtod_l+0x85c>
 800a0c6:	e6a7      	b.n	8009e18 <_strtod_l+0x5ac>
 800a0c8:	0030      	movs	r0, r6
 800a0ca:	0039      	movs	r1, r7
 800a0cc:	4b31      	ldr	r3, [pc, #196]	; (800a194 <_strtod_l+0x928>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f7f8 f906 	bl	80022e0 <__aeabi_dmul>
 800a0d4:	4b2e      	ldr	r3, [pc, #184]	; (800a190 <_strtod_l+0x924>)
 800a0d6:	0006      	movs	r6, r0
 800a0d8:	000f      	movs	r7, r1
 800a0da:	420b      	tst	r3, r1
 800a0dc:	d000      	beq.n	800a0e0 <_strtod_l+0x874>
 800a0de:	e631      	b.n	8009d44 <_strtod_l+0x4d8>
 800a0e0:	2322      	movs	r3, #34	; 0x22
 800a0e2:	9a04      	ldr	r2, [sp, #16]
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	e62d      	b.n	8009d44 <_strtod_l+0x4d8>
 800a0e8:	234b      	movs	r3, #75	; 0x4b
 800a0ea:	1a9a      	subs	r2, r3, r2
 800a0ec:	3b4c      	subs	r3, #76	; 0x4c
 800a0ee:	4093      	lsls	r3, r2
 800a0f0:	4019      	ands	r1, r3
 800a0f2:	000f      	movs	r7, r1
 800a0f4:	e6e3      	b.n	8009ebe <_strtod_l+0x652>
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	4252      	negs	r2, r2
 800a0fa:	409a      	lsls	r2, r3
 800a0fc:	4016      	ands	r6, r2
 800a0fe:	e6de      	b.n	8009ebe <_strtod_l+0x652>
 800a100:	4925      	ldr	r1, [pc, #148]	; (800a198 <_strtod_l+0x92c>)
 800a102:	1acb      	subs	r3, r1, r3
 800a104:	0001      	movs	r1, r0
 800a106:	4099      	lsls	r1, r3
 800a108:	9114      	str	r1, [sp, #80]	; 0x50
 800a10a:	e743      	b.n	8009f94 <_strtod_l+0x728>
 800a10c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a10e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a110:	9804      	ldr	r0, [sp, #16]
 800a112:	f002 ff49 	bl	800cfa8 <__lshift>
 800a116:	901c      	str	r0, [sp, #112]	; 0x70
 800a118:	2800      	cmp	r0, #0
 800a11a:	d000      	beq.n	800a11e <_strtod_l+0x8b2>
 800a11c:	e76e      	b.n	8009ffc <_strtod_l+0x790>
 800a11e:	e608      	b.n	8009d32 <_strtod_l+0x4c6>
 800a120:	970e      	str	r7, [sp, #56]	; 0x38
 800a122:	2800      	cmp	r0, #0
 800a124:	d177      	bne.n	800a216 <_strtod_l+0x9aa>
 800a126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a128:	033b      	lsls	r3, r7, #12
 800a12a:	0b1b      	lsrs	r3, r3, #12
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	d039      	beq.n	800a1a4 <_strtod_l+0x938>
 800a130:	4a1a      	ldr	r2, [pc, #104]	; (800a19c <_strtod_l+0x930>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d139      	bne.n	800a1aa <_strtod_l+0x93e>
 800a136:	2101      	movs	r1, #1
 800a138:	9b07      	ldr	r3, [sp, #28]
 800a13a:	4249      	negs	r1, r1
 800a13c:	0032      	movs	r2, r6
 800a13e:	0008      	movs	r0, r1
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <_strtod_l+0x8f0>
 800a144:	24d4      	movs	r4, #212	; 0xd4
 800a146:	4b12      	ldr	r3, [pc, #72]	; (800a190 <_strtod_l+0x924>)
 800a148:	0008      	movs	r0, r1
 800a14a:	403b      	ands	r3, r7
 800a14c:	04e4      	lsls	r4, r4, #19
 800a14e:	42a3      	cmp	r3, r4
 800a150:	d804      	bhi.n	800a15c <_strtod_l+0x8f0>
 800a152:	306c      	adds	r0, #108	; 0x6c
 800a154:	0d1b      	lsrs	r3, r3, #20
 800a156:	1ac3      	subs	r3, r0, r3
 800a158:	4099      	lsls	r1, r3
 800a15a:	0008      	movs	r0, r1
 800a15c:	4282      	cmp	r2, r0
 800a15e:	d124      	bne.n	800a1aa <_strtod_l+0x93e>
 800a160:	4b0f      	ldr	r3, [pc, #60]	; (800a1a0 <_strtod_l+0x934>)
 800a162:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a164:	4299      	cmp	r1, r3
 800a166:	d102      	bne.n	800a16e <_strtod_l+0x902>
 800a168:	3201      	adds	r2, #1
 800a16a:	d100      	bne.n	800a16e <_strtod_l+0x902>
 800a16c:	e5e1      	b.n	8009d32 <_strtod_l+0x4c6>
 800a16e:	4b08      	ldr	r3, [pc, #32]	; (800a190 <_strtod_l+0x924>)
 800a170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a172:	2600      	movs	r6, #0
 800a174:	401a      	ands	r2, r3
 800a176:	0013      	movs	r3, r2
 800a178:	2280      	movs	r2, #128	; 0x80
 800a17a:	0352      	lsls	r2, r2, #13
 800a17c:	189f      	adds	r7, r3, r2
 800a17e:	9b07      	ldr	r3, [sp, #28]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1a1      	bne.n	800a0c8 <_strtod_l+0x85c>
 800a184:	e5de      	b.n	8009d44 <_strtod_l+0x4d8>
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	0800e168 	.word	0x0800e168
 800a18c:	fffffc02 	.word	0xfffffc02
 800a190:	7ff00000 	.word	0x7ff00000
 800a194:	39500000 	.word	0x39500000
 800a198:	fffffbe2 	.word	0xfffffbe2
 800a19c:	000fffff 	.word	0x000fffff
 800a1a0:	7fefffff 	.word	0x7fefffff
 800a1a4:	4333      	orrs	r3, r6
 800a1a6:	d100      	bne.n	800a1aa <_strtod_l+0x93e>
 800a1a8:	e77c      	b.n	800a0a4 <_strtod_l+0x838>
 800a1aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01d      	beq.n	800a1ec <_strtod_l+0x980>
 800a1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1b4:	4213      	tst	r3, r2
 800a1b6:	d0e2      	beq.n	800a17e <_strtod_l+0x912>
 800a1b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1ba:	0030      	movs	r0, r6
 800a1bc:	0039      	movs	r1, r7
 800a1be:	9a07      	ldr	r2, [sp, #28]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d017      	beq.n	800a1f4 <_strtod_l+0x988>
 800a1c4:	f7ff fb3a 	bl	800983c <sulp>
 800a1c8:	0002      	movs	r2, r0
 800a1ca:	000b      	movs	r3, r1
 800a1cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a1ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a1d0:	f7f7 f92c 	bl	800142c <__aeabi_dadd>
 800a1d4:	0006      	movs	r6, r0
 800a1d6:	000f      	movs	r7, r1
 800a1d8:	e7d1      	b.n	800a17e <_strtod_l+0x912>
 800a1da:	2601      	movs	r6, #1
 800a1dc:	4013      	ands	r3, r2
 800a1de:	4a98      	ldr	r2, [pc, #608]	; (800a440 <_strtod_l+0xbd4>)
 800a1e0:	4276      	negs	r6, r6
 800a1e2:	189b      	adds	r3, r3, r2
 800a1e4:	4a97      	ldr	r2, [pc, #604]	; (800a444 <_strtod_l+0xbd8>)
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	0017      	movs	r7, r2
 800a1ea:	e7c8      	b.n	800a17e <_strtod_l+0x912>
 800a1ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1ee:	4233      	tst	r3, r6
 800a1f0:	d0c5      	beq.n	800a17e <_strtod_l+0x912>
 800a1f2:	e7e1      	b.n	800a1b8 <_strtod_l+0x94c>
 800a1f4:	f7ff fb22 	bl	800983c <sulp>
 800a1f8:	0002      	movs	r2, r0
 800a1fa:	000b      	movs	r3, r1
 800a1fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a1fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a200:	f7f8 fb30 	bl	8002864 <__aeabi_dsub>
 800a204:	2200      	movs	r2, #0
 800a206:	2300      	movs	r3, #0
 800a208:	0006      	movs	r6, r0
 800a20a:	000f      	movs	r7, r1
 800a20c:	f7f6 f924 	bl	8000458 <__aeabi_dcmpeq>
 800a210:	2800      	cmp	r0, #0
 800a212:	d0b4      	beq.n	800a17e <_strtod_l+0x912>
 800a214:	e600      	b.n	8009e18 <_strtod_l+0x5ac>
 800a216:	9906      	ldr	r1, [sp, #24]
 800a218:	9805      	ldr	r0, [sp, #20]
 800a21a:	f003 f8af 	bl	800d37c <__ratio>
 800a21e:	2380      	movs	r3, #128	; 0x80
 800a220:	2200      	movs	r2, #0
 800a222:	05db      	lsls	r3, r3, #23
 800a224:	0004      	movs	r4, r0
 800a226:	000d      	movs	r5, r1
 800a228:	f7f6 f926 	bl	8000478 <__aeabi_dcmple>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d06d      	beq.n	800a30c <_strtod_l+0xaa0>
 800a230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a232:	2b00      	cmp	r3, #0
 800a234:	d000      	beq.n	800a238 <_strtod_l+0x9cc>
 800a236:	e07e      	b.n	800a336 <_strtod_l+0xaca>
 800a238:	2e00      	cmp	r6, #0
 800a23a:	d158      	bne.n	800a2ee <_strtod_l+0xa82>
 800a23c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a23e:	031b      	lsls	r3, r3, #12
 800a240:	d000      	beq.n	800a244 <_strtod_l+0x9d8>
 800a242:	e07f      	b.n	800a344 <_strtod_l+0xad8>
 800a244:	2200      	movs	r2, #0
 800a246:	0020      	movs	r0, r4
 800a248:	0029      	movs	r1, r5
 800a24a:	4b7f      	ldr	r3, [pc, #508]	; (800a448 <_strtod_l+0xbdc>)
 800a24c:	f7f6 f90a 	bl	8000464 <__aeabi_dcmplt>
 800a250:	2800      	cmp	r0, #0
 800a252:	d158      	bne.n	800a306 <_strtod_l+0xa9a>
 800a254:	0020      	movs	r0, r4
 800a256:	0029      	movs	r1, r5
 800a258:	2200      	movs	r2, #0
 800a25a:	4b7c      	ldr	r3, [pc, #496]	; (800a44c <_strtod_l+0xbe0>)
 800a25c:	f7f8 f840 	bl	80022e0 <__aeabi_dmul>
 800a260:	0004      	movs	r4, r0
 800a262:	000d      	movs	r5, r1
 800a264:	2380      	movs	r3, #128	; 0x80
 800a266:	061b      	lsls	r3, r3, #24
 800a268:	940a      	str	r4, [sp, #40]	; 0x28
 800a26a:	18eb      	adds	r3, r5, r3
 800a26c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a26e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a272:	9212      	str	r2, [sp, #72]	; 0x48
 800a274:	9313      	str	r3, [sp, #76]	; 0x4c
 800a276:	4a76      	ldr	r2, [pc, #472]	; (800a450 <_strtod_l+0xbe4>)
 800a278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a27a:	4013      	ands	r3, r2
 800a27c:	9314      	str	r3, [sp, #80]	; 0x50
 800a27e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a280:	4b74      	ldr	r3, [pc, #464]	; (800a454 <_strtod_l+0xbe8>)
 800a282:	429a      	cmp	r2, r3
 800a284:	d000      	beq.n	800a288 <_strtod_l+0xa1c>
 800a286:	e091      	b.n	800a3ac <_strtod_l+0xb40>
 800a288:	4a73      	ldr	r2, [pc, #460]	; (800a458 <_strtod_l+0xbec>)
 800a28a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a28c:	4694      	mov	ip, r2
 800a28e:	4463      	add	r3, ip
 800a290:	001f      	movs	r7, r3
 800a292:	0030      	movs	r0, r6
 800a294:	0019      	movs	r1, r3
 800a296:	f002 ffa9 	bl	800d1ec <__ulp>
 800a29a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a29c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a29e:	f7f8 f81f 	bl	80022e0 <__aeabi_dmul>
 800a2a2:	0032      	movs	r2, r6
 800a2a4:	003b      	movs	r3, r7
 800a2a6:	f7f7 f8c1 	bl	800142c <__aeabi_dadd>
 800a2aa:	4a69      	ldr	r2, [pc, #420]	; (800a450 <_strtod_l+0xbe4>)
 800a2ac:	4b6b      	ldr	r3, [pc, #428]	; (800a45c <_strtod_l+0xbf0>)
 800a2ae:	0006      	movs	r6, r0
 800a2b0:	400a      	ands	r2, r1
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d949      	bls.n	800a34a <_strtod_l+0xade>
 800a2b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2b8:	4b69      	ldr	r3, [pc, #420]	; (800a460 <_strtod_l+0xbf4>)
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d103      	bne.n	800a2c6 <_strtod_l+0xa5a>
 800a2be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	d100      	bne.n	800a2c6 <_strtod_l+0xa5a>
 800a2c4:	e535      	b.n	8009d32 <_strtod_l+0x4c6>
 800a2c6:	2601      	movs	r6, #1
 800a2c8:	4f65      	ldr	r7, [pc, #404]	; (800a460 <_strtod_l+0xbf4>)
 800a2ca:	4276      	negs	r6, r6
 800a2cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a2ce:	9804      	ldr	r0, [sp, #16]
 800a2d0:	f002 fc4a 	bl	800cb68 <_Bfree>
 800a2d4:	9908      	ldr	r1, [sp, #32]
 800a2d6:	9804      	ldr	r0, [sp, #16]
 800a2d8:	f002 fc46 	bl	800cb68 <_Bfree>
 800a2dc:	9906      	ldr	r1, [sp, #24]
 800a2de:	9804      	ldr	r0, [sp, #16]
 800a2e0:	f002 fc42 	bl	800cb68 <_Bfree>
 800a2e4:	9905      	ldr	r1, [sp, #20]
 800a2e6:	9804      	ldr	r0, [sp, #16]
 800a2e8:	f002 fc3e 	bl	800cb68 <_Bfree>
 800a2ec:	e60b      	b.n	8009f06 <_strtod_l+0x69a>
 800a2ee:	2e01      	cmp	r6, #1
 800a2f0:	d103      	bne.n	800a2fa <_strtod_l+0xa8e>
 800a2f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d100      	bne.n	800a2fa <_strtod_l+0xa8e>
 800a2f8:	e58e      	b.n	8009e18 <_strtod_l+0x5ac>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4c59      	ldr	r4, [pc, #356]	; (800a464 <_strtod_l+0xbf8>)
 800a2fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a300:	940b      	str	r4, [sp, #44]	; 0x2c
 800a302:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a304:	e01c      	b.n	800a340 <_strtod_l+0xad4>
 800a306:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a308:	4d50      	ldr	r5, [pc, #320]	; (800a44c <_strtod_l+0xbe0>)
 800a30a:	e7ab      	b.n	800a264 <_strtod_l+0x9f8>
 800a30c:	2200      	movs	r2, #0
 800a30e:	0020      	movs	r0, r4
 800a310:	0029      	movs	r1, r5
 800a312:	4b4e      	ldr	r3, [pc, #312]	; (800a44c <_strtod_l+0xbe0>)
 800a314:	f7f7 ffe4 	bl	80022e0 <__aeabi_dmul>
 800a318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a31a:	0004      	movs	r4, r0
 800a31c:	000b      	movs	r3, r1
 800a31e:	000d      	movs	r5, r1
 800a320:	2a00      	cmp	r2, #0
 800a322:	d104      	bne.n	800a32e <_strtod_l+0xac2>
 800a324:	2280      	movs	r2, #128	; 0x80
 800a326:	0612      	lsls	r2, r2, #24
 800a328:	900a      	str	r0, [sp, #40]	; 0x28
 800a32a:	188b      	adds	r3, r1, r2
 800a32c:	e79e      	b.n	800a26c <_strtod_l+0xa00>
 800a32e:	0002      	movs	r2, r0
 800a330:	920a      	str	r2, [sp, #40]	; 0x28
 800a332:	930b      	str	r3, [sp, #44]	; 0x2c
 800a334:	e79b      	b.n	800a26e <_strtod_l+0xa02>
 800a336:	2300      	movs	r3, #0
 800a338:	4c43      	ldr	r4, [pc, #268]	; (800a448 <_strtod_l+0xbdc>)
 800a33a:	930a      	str	r3, [sp, #40]	; 0x28
 800a33c:	940b      	str	r4, [sp, #44]	; 0x2c
 800a33e:	2400      	movs	r4, #0
 800a340:	4d41      	ldr	r5, [pc, #260]	; (800a448 <_strtod_l+0xbdc>)
 800a342:	e794      	b.n	800a26e <_strtod_l+0xa02>
 800a344:	2300      	movs	r3, #0
 800a346:	4c47      	ldr	r4, [pc, #284]	; (800a464 <_strtod_l+0xbf8>)
 800a348:	e7f7      	b.n	800a33a <_strtod_l+0xace>
 800a34a:	23d4      	movs	r3, #212	; 0xd4
 800a34c:	049b      	lsls	r3, r3, #18
 800a34e:	18cf      	adds	r7, r1, r3
 800a350:	9b07      	ldr	r3, [sp, #28]
 800a352:	970e      	str	r7, [sp, #56]	; 0x38
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1b9      	bne.n	800a2cc <_strtod_l+0xa60>
 800a358:	4b3d      	ldr	r3, [pc, #244]	; (800a450 <_strtod_l+0xbe4>)
 800a35a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a35c:	403b      	ands	r3, r7
 800a35e:	429a      	cmp	r2, r3
 800a360:	d1b4      	bne.n	800a2cc <_strtod_l+0xa60>
 800a362:	0020      	movs	r0, r4
 800a364:	0029      	movs	r1, r5
 800a366:	f7f6 f8fd 	bl	8000564 <__aeabi_d2lz>
 800a36a:	f7f6 f937 	bl	80005dc <__aeabi_l2d>
 800a36e:	0002      	movs	r2, r0
 800a370:	000b      	movs	r3, r1
 800a372:	0020      	movs	r0, r4
 800a374:	0029      	movs	r1, r5
 800a376:	f7f8 fa75 	bl	8002864 <__aeabi_dsub>
 800a37a:	033b      	lsls	r3, r7, #12
 800a37c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a37e:	0b1b      	lsrs	r3, r3, #12
 800a380:	4333      	orrs	r3, r6
 800a382:	4313      	orrs	r3, r2
 800a384:	0004      	movs	r4, r0
 800a386:	000d      	movs	r5, r1
 800a388:	4a37      	ldr	r2, [pc, #220]	; (800a468 <_strtod_l+0xbfc>)
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d054      	beq.n	800a438 <_strtod_l+0xbcc>
 800a38e:	4b37      	ldr	r3, [pc, #220]	; (800a46c <_strtod_l+0xc00>)
 800a390:	f7f6 f868 	bl	8000464 <__aeabi_dcmplt>
 800a394:	2800      	cmp	r0, #0
 800a396:	d000      	beq.n	800a39a <_strtod_l+0xb2e>
 800a398:	e4d4      	b.n	8009d44 <_strtod_l+0x4d8>
 800a39a:	0020      	movs	r0, r4
 800a39c:	0029      	movs	r1, r5
 800a39e:	4a34      	ldr	r2, [pc, #208]	; (800a470 <_strtod_l+0xc04>)
 800a3a0:	4b2a      	ldr	r3, [pc, #168]	; (800a44c <_strtod_l+0xbe0>)
 800a3a2:	f7f6 f873 	bl	800048c <__aeabi_dcmpgt>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d090      	beq.n	800a2cc <_strtod_l+0xa60>
 800a3aa:	e4cb      	b.n	8009d44 <_strtod_l+0x4d8>
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d02b      	beq.n	800a40a <_strtod_l+0xb9e>
 800a3b2:	23d4      	movs	r3, #212	; 0xd4
 800a3b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3b6:	04db      	lsls	r3, r3, #19
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d826      	bhi.n	800a40a <_strtod_l+0xb9e>
 800a3bc:	0020      	movs	r0, r4
 800a3be:	0029      	movs	r1, r5
 800a3c0:	4a2c      	ldr	r2, [pc, #176]	; (800a474 <_strtod_l+0xc08>)
 800a3c2:	4b2d      	ldr	r3, [pc, #180]	; (800a478 <_strtod_l+0xc0c>)
 800a3c4:	f7f6 f858 	bl	8000478 <__aeabi_dcmple>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d017      	beq.n	800a3fc <_strtod_l+0xb90>
 800a3cc:	0020      	movs	r0, r4
 800a3ce:	0029      	movs	r1, r5
 800a3d0:	f7f6 f8aa 	bl	8000528 <__aeabi_d2uiz>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d100      	bne.n	800a3da <_strtod_l+0xb6e>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f7f8 fe49 	bl	8003070 <__aeabi_ui2d>
 800a3de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3e0:	0004      	movs	r4, r0
 800a3e2:	000b      	movs	r3, r1
 800a3e4:	000d      	movs	r5, r1
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	d122      	bne.n	800a430 <_strtod_l+0xbc4>
 800a3ea:	2280      	movs	r2, #128	; 0x80
 800a3ec:	0612      	lsls	r2, r2, #24
 800a3ee:	188b      	adds	r3, r1, r2
 800a3f0:	9016      	str	r0, [sp, #88]	; 0x58
 800a3f2:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3f8:	9212      	str	r2, [sp, #72]	; 0x48
 800a3fa:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3fc:	22d6      	movs	r2, #214	; 0xd6
 800a3fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a400:	04d2      	lsls	r2, r2, #19
 800a402:	189b      	adds	r3, r3, r2
 800a404:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a406:	1a9b      	subs	r3, r3, r2
 800a408:	9313      	str	r3, [sp, #76]	; 0x4c
 800a40a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a40c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a40e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a410:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a412:	f002 feeb 	bl	800d1ec <__ulp>
 800a416:	0002      	movs	r2, r0
 800a418:	000b      	movs	r3, r1
 800a41a:	0030      	movs	r0, r6
 800a41c:	0039      	movs	r1, r7
 800a41e:	f7f7 ff5f 	bl	80022e0 <__aeabi_dmul>
 800a422:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a424:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a426:	f7f7 f801 	bl	800142c <__aeabi_dadd>
 800a42a:	0006      	movs	r6, r0
 800a42c:	000f      	movs	r7, r1
 800a42e:	e78f      	b.n	800a350 <_strtod_l+0xae4>
 800a430:	0002      	movs	r2, r0
 800a432:	9216      	str	r2, [sp, #88]	; 0x58
 800a434:	9317      	str	r3, [sp, #92]	; 0x5c
 800a436:	e7dd      	b.n	800a3f4 <_strtod_l+0xb88>
 800a438:	4b10      	ldr	r3, [pc, #64]	; (800a47c <_strtod_l+0xc10>)
 800a43a:	f7f6 f813 	bl	8000464 <__aeabi_dcmplt>
 800a43e:	e7b2      	b.n	800a3a6 <_strtod_l+0xb3a>
 800a440:	fff00000 	.word	0xfff00000
 800a444:	000fffff 	.word	0x000fffff
 800a448:	3ff00000 	.word	0x3ff00000
 800a44c:	3fe00000 	.word	0x3fe00000
 800a450:	7ff00000 	.word	0x7ff00000
 800a454:	7fe00000 	.word	0x7fe00000
 800a458:	fcb00000 	.word	0xfcb00000
 800a45c:	7c9fffff 	.word	0x7c9fffff
 800a460:	7fefffff 	.word	0x7fefffff
 800a464:	bff00000 	.word	0xbff00000
 800a468:	94a03595 	.word	0x94a03595
 800a46c:	3fdfffff 	.word	0x3fdfffff
 800a470:	35afe535 	.word	0x35afe535
 800a474:	ffc00000 	.word	0xffc00000
 800a478:	41dfffff 	.word	0x41dfffff
 800a47c:	3fcfffff 	.word	0x3fcfffff

0800a480 <strtod>:
 800a480:	b510      	push	{r4, lr}
 800a482:	4c04      	ldr	r4, [pc, #16]	; (800a494 <strtod+0x14>)
 800a484:	000a      	movs	r2, r1
 800a486:	0001      	movs	r1, r0
 800a488:	4b03      	ldr	r3, [pc, #12]	; (800a498 <strtod+0x18>)
 800a48a:	6820      	ldr	r0, [r4, #0]
 800a48c:	f7ff f9ee 	bl	800986c <_strtod_l>
 800a490:	bd10      	pop	{r4, pc}
 800a492:	46c0      	nop			; (mov r8, r8)
 800a494:	2000024c 	.word	0x2000024c
 800a498:	20000094 	.word	0x20000094

0800a49c <__cvt>:
 800a49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a49e:	001e      	movs	r6, r3
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	0014      	movs	r4, r2
 800a4a4:	b08b      	sub	sp, #44	; 0x2c
 800a4a6:	429e      	cmp	r6, r3
 800a4a8:	da04      	bge.n	800a4b4 <__cvt+0x18>
 800a4aa:	2180      	movs	r1, #128	; 0x80
 800a4ac:	0609      	lsls	r1, r1, #24
 800a4ae:	1873      	adds	r3, r6, r1
 800a4b0:	001e      	movs	r6, r3
 800a4b2:	232d      	movs	r3, #45	; 0x2d
 800a4b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4b6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a4b8:	7013      	strb	r3, [r2, #0]
 800a4ba:	2320      	movs	r3, #32
 800a4bc:	2203      	movs	r2, #3
 800a4be:	439f      	bics	r7, r3
 800a4c0:	2f46      	cmp	r7, #70	; 0x46
 800a4c2:	d007      	beq.n	800a4d4 <__cvt+0x38>
 800a4c4:	003b      	movs	r3, r7
 800a4c6:	3b45      	subs	r3, #69	; 0x45
 800a4c8:	4259      	negs	r1, r3
 800a4ca:	414b      	adcs	r3, r1
 800a4cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a4ce:	3a01      	subs	r2, #1
 800a4d0:	18cb      	adds	r3, r1, r3
 800a4d2:	9310      	str	r3, [sp, #64]	; 0x40
 800a4d4:	ab09      	add	r3, sp, #36	; 0x24
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	ab08      	add	r3, sp, #32
 800a4da:	9303      	str	r3, [sp, #12]
 800a4dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4de:	9200      	str	r2, [sp, #0]
 800a4e0:	9302      	str	r3, [sp, #8]
 800a4e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4e4:	0022      	movs	r2, r4
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	0033      	movs	r3, r6
 800a4ea:	f001 f875 	bl	800b5d8 <_dtoa_r>
 800a4ee:	0005      	movs	r5, r0
 800a4f0:	2f47      	cmp	r7, #71	; 0x47
 800a4f2:	d102      	bne.n	800a4fa <__cvt+0x5e>
 800a4f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4f6:	07db      	lsls	r3, r3, #31
 800a4f8:	d528      	bpl.n	800a54c <__cvt+0xb0>
 800a4fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4fc:	18eb      	adds	r3, r5, r3
 800a4fe:	9307      	str	r3, [sp, #28]
 800a500:	2f46      	cmp	r7, #70	; 0x46
 800a502:	d114      	bne.n	800a52e <__cvt+0x92>
 800a504:	782b      	ldrb	r3, [r5, #0]
 800a506:	2b30      	cmp	r3, #48	; 0x30
 800a508:	d10c      	bne.n	800a524 <__cvt+0x88>
 800a50a:	2200      	movs	r2, #0
 800a50c:	2300      	movs	r3, #0
 800a50e:	0020      	movs	r0, r4
 800a510:	0031      	movs	r1, r6
 800a512:	f7f5 ffa1 	bl	8000458 <__aeabi_dcmpeq>
 800a516:	2800      	cmp	r0, #0
 800a518:	d104      	bne.n	800a524 <__cvt+0x88>
 800a51a:	2301      	movs	r3, #1
 800a51c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a51e:	1a9b      	subs	r3, r3, r2
 800a520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a526:	9a07      	ldr	r2, [sp, #28]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	18d3      	adds	r3, r2, r3
 800a52c:	9307      	str	r3, [sp, #28]
 800a52e:	2200      	movs	r2, #0
 800a530:	2300      	movs	r3, #0
 800a532:	0020      	movs	r0, r4
 800a534:	0031      	movs	r1, r6
 800a536:	f7f5 ff8f 	bl	8000458 <__aeabi_dcmpeq>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d001      	beq.n	800a542 <__cvt+0xa6>
 800a53e:	9b07      	ldr	r3, [sp, #28]
 800a540:	9309      	str	r3, [sp, #36]	; 0x24
 800a542:	2230      	movs	r2, #48	; 0x30
 800a544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a546:	9907      	ldr	r1, [sp, #28]
 800a548:	428b      	cmp	r3, r1
 800a54a:	d306      	bcc.n	800a55a <__cvt+0xbe>
 800a54c:	0028      	movs	r0, r5
 800a54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a550:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a552:	1b5b      	subs	r3, r3, r5
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	b00b      	add	sp, #44	; 0x2c
 800a558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a55a:	1c59      	adds	r1, r3, #1
 800a55c:	9109      	str	r1, [sp, #36]	; 0x24
 800a55e:	701a      	strb	r2, [r3, #0]
 800a560:	e7f0      	b.n	800a544 <__cvt+0xa8>

0800a562 <__exponent>:
 800a562:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a564:	1c83      	adds	r3, r0, #2
 800a566:	b087      	sub	sp, #28
 800a568:	9303      	str	r3, [sp, #12]
 800a56a:	0005      	movs	r5, r0
 800a56c:	000c      	movs	r4, r1
 800a56e:	232b      	movs	r3, #43	; 0x2b
 800a570:	7002      	strb	r2, [r0, #0]
 800a572:	2900      	cmp	r1, #0
 800a574:	da01      	bge.n	800a57a <__exponent+0x18>
 800a576:	424c      	negs	r4, r1
 800a578:	3302      	adds	r3, #2
 800a57a:	706b      	strb	r3, [r5, #1]
 800a57c:	2c09      	cmp	r4, #9
 800a57e:	dd2f      	ble.n	800a5e0 <__exponent+0x7e>
 800a580:	270a      	movs	r7, #10
 800a582:	ab04      	add	r3, sp, #16
 800a584:	1dde      	adds	r6, r3, #7
 800a586:	0020      	movs	r0, r4
 800a588:	0039      	movs	r1, r7
 800a58a:	9601      	str	r6, [sp, #4]
 800a58c:	f7f5 ff4e 	bl	800042c <__aeabi_idivmod>
 800a590:	3e01      	subs	r6, #1
 800a592:	3130      	adds	r1, #48	; 0x30
 800a594:	0020      	movs	r0, r4
 800a596:	7031      	strb	r1, [r6, #0]
 800a598:	0039      	movs	r1, r7
 800a59a:	9402      	str	r4, [sp, #8]
 800a59c:	f7f5 fe60 	bl	8000260 <__divsi3>
 800a5a0:	9b02      	ldr	r3, [sp, #8]
 800a5a2:	0004      	movs	r4, r0
 800a5a4:	2b63      	cmp	r3, #99	; 0x63
 800a5a6:	dcee      	bgt.n	800a586 <__exponent+0x24>
 800a5a8:	9b01      	ldr	r3, [sp, #4]
 800a5aa:	3430      	adds	r4, #48	; 0x30
 800a5ac:	1e9a      	subs	r2, r3, #2
 800a5ae:	0013      	movs	r3, r2
 800a5b0:	9903      	ldr	r1, [sp, #12]
 800a5b2:	7014      	strb	r4, [r2, #0]
 800a5b4:	a804      	add	r0, sp, #16
 800a5b6:	3007      	adds	r0, #7
 800a5b8:	4298      	cmp	r0, r3
 800a5ba:	d80c      	bhi.n	800a5d6 <__exponent+0x74>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	4282      	cmp	r2, r0
 800a5c0:	d804      	bhi.n	800a5cc <__exponent+0x6a>
 800a5c2:	aa04      	add	r2, sp, #16
 800a5c4:	3309      	adds	r3, #9
 800a5c6:	189b      	adds	r3, r3, r2
 800a5c8:	9a01      	ldr	r2, [sp, #4]
 800a5ca:	1a9b      	subs	r3, r3, r2
 800a5cc:	9a03      	ldr	r2, [sp, #12]
 800a5ce:	18d3      	adds	r3, r2, r3
 800a5d0:	1b58      	subs	r0, r3, r5
 800a5d2:	b007      	add	sp, #28
 800a5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5d6:	7818      	ldrb	r0, [r3, #0]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	7008      	strb	r0, [r1, #0]
 800a5dc:	3101      	adds	r1, #1
 800a5de:	e7e9      	b.n	800a5b4 <__exponent+0x52>
 800a5e0:	2330      	movs	r3, #48	; 0x30
 800a5e2:	3430      	adds	r4, #48	; 0x30
 800a5e4:	70ab      	strb	r3, [r5, #2]
 800a5e6:	70ec      	strb	r4, [r5, #3]
 800a5e8:	1d2b      	adds	r3, r5, #4
 800a5ea:	e7f1      	b.n	800a5d0 <__exponent+0x6e>

0800a5ec <_printf_float>:
 800a5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ee:	b095      	sub	sp, #84	; 0x54
 800a5f0:	000c      	movs	r4, r1
 800a5f2:	9208      	str	r2, [sp, #32]
 800a5f4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f8:	0007      	movs	r7, r0
 800a5fa:	f000 fea5 	bl	800b348 <_localeconv_r>
 800a5fe:	6803      	ldr	r3, [r0, #0]
 800a600:	0018      	movs	r0, r3
 800a602:	930c      	str	r3, [sp, #48]	; 0x30
 800a604:	f7f5 fd86 	bl	8000114 <strlen>
 800a608:	2300      	movs	r3, #0
 800a60a:	9312      	str	r3, [sp, #72]	; 0x48
 800a60c:	7e23      	ldrb	r3, [r4, #24]
 800a60e:	2207      	movs	r2, #7
 800a610:	930a      	str	r3, [sp, #40]	; 0x28
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	900d      	str	r0, [sp, #52]	; 0x34
 800a616:	930b      	str	r3, [sp, #44]	; 0x2c
 800a618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a61a:	682b      	ldr	r3, [r5, #0]
 800a61c:	05c9      	lsls	r1, r1, #23
 800a61e:	d547      	bpl.n	800a6b0 <_printf_float+0xc4>
 800a620:	189b      	adds	r3, r3, r2
 800a622:	4393      	bics	r3, r2
 800a624:	001a      	movs	r2, r3
 800a626:	3208      	adds	r2, #8
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	681e      	ldr	r6, [r3, #0]
 800a62c:	685d      	ldr	r5, [r3, #4]
 800a62e:	0032      	movs	r2, r6
 800a630:	002b      	movs	r3, r5
 800a632:	64a2      	str	r2, [r4, #72]	; 0x48
 800a634:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a636:	2201      	movs	r2, #1
 800a638:	006b      	lsls	r3, r5, #1
 800a63a:	085b      	lsrs	r3, r3, #1
 800a63c:	930e      	str	r3, [sp, #56]	; 0x38
 800a63e:	0030      	movs	r0, r6
 800a640:	4bab      	ldr	r3, [pc, #684]	; (800a8f0 <_printf_float+0x304>)
 800a642:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a644:	4252      	negs	r2, r2
 800a646:	f7f8 fc8f 	bl	8002f68 <__aeabi_dcmpun>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d132      	bne.n	800a6b4 <_printf_float+0xc8>
 800a64e:	2201      	movs	r2, #1
 800a650:	0030      	movs	r0, r6
 800a652:	4ba7      	ldr	r3, [pc, #668]	; (800a8f0 <_printf_float+0x304>)
 800a654:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a656:	4252      	negs	r2, r2
 800a658:	f7f5 ff0e 	bl	8000478 <__aeabi_dcmple>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d129      	bne.n	800a6b4 <_printf_float+0xc8>
 800a660:	2200      	movs	r2, #0
 800a662:	2300      	movs	r3, #0
 800a664:	0030      	movs	r0, r6
 800a666:	0029      	movs	r1, r5
 800a668:	f7f5 fefc 	bl	8000464 <__aeabi_dcmplt>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d003      	beq.n	800a678 <_printf_float+0x8c>
 800a670:	0023      	movs	r3, r4
 800a672:	222d      	movs	r2, #45	; 0x2d
 800a674:	3343      	adds	r3, #67	; 0x43
 800a676:	701a      	strb	r2, [r3, #0]
 800a678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a67a:	4d9e      	ldr	r5, [pc, #632]	; (800a8f4 <_printf_float+0x308>)
 800a67c:	2b47      	cmp	r3, #71	; 0x47
 800a67e:	d900      	bls.n	800a682 <_printf_float+0x96>
 800a680:	4d9d      	ldr	r5, [pc, #628]	; (800a8f8 <_printf_float+0x30c>)
 800a682:	2303      	movs	r3, #3
 800a684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a686:	6123      	str	r3, [r4, #16]
 800a688:	3301      	adds	r3, #1
 800a68a:	439a      	bics	r2, r3
 800a68c:	2300      	movs	r3, #0
 800a68e:	6022      	str	r2, [r4, #0]
 800a690:	930b      	str	r3, [sp, #44]	; 0x2c
 800a692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a694:	0021      	movs	r1, r4
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	0038      	movs	r0, r7
 800a69a:	9b08      	ldr	r3, [sp, #32]
 800a69c:	aa13      	add	r2, sp, #76	; 0x4c
 800a69e:	f000 f9fb 	bl	800aa98 <_printf_common>
 800a6a2:	3001      	adds	r0, #1
 800a6a4:	d000      	beq.n	800a6a8 <_printf_float+0xbc>
 800a6a6:	e0a3      	b.n	800a7f0 <_printf_float+0x204>
 800a6a8:	2001      	movs	r0, #1
 800a6aa:	4240      	negs	r0, r0
 800a6ac:	b015      	add	sp, #84	; 0x54
 800a6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6b0:	3307      	adds	r3, #7
 800a6b2:	e7b6      	b.n	800a622 <_printf_float+0x36>
 800a6b4:	0032      	movs	r2, r6
 800a6b6:	002b      	movs	r3, r5
 800a6b8:	0030      	movs	r0, r6
 800a6ba:	0029      	movs	r1, r5
 800a6bc:	f7f8 fc54 	bl	8002f68 <__aeabi_dcmpun>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d00b      	beq.n	800a6dc <_printf_float+0xf0>
 800a6c4:	2d00      	cmp	r5, #0
 800a6c6:	da03      	bge.n	800a6d0 <_printf_float+0xe4>
 800a6c8:	0023      	movs	r3, r4
 800a6ca:	222d      	movs	r2, #45	; 0x2d
 800a6cc:	3343      	adds	r3, #67	; 0x43
 800a6ce:	701a      	strb	r2, [r3, #0]
 800a6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d2:	4d8a      	ldr	r5, [pc, #552]	; (800a8fc <_printf_float+0x310>)
 800a6d4:	2b47      	cmp	r3, #71	; 0x47
 800a6d6:	d9d4      	bls.n	800a682 <_printf_float+0x96>
 800a6d8:	4d89      	ldr	r5, [pc, #548]	; (800a900 <_printf_float+0x314>)
 800a6da:	e7d2      	b.n	800a682 <_printf_float+0x96>
 800a6dc:	2220      	movs	r2, #32
 800a6de:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6e0:	6863      	ldr	r3, [r4, #4]
 800a6e2:	4391      	bics	r1, r2
 800a6e4:	910e      	str	r1, [sp, #56]	; 0x38
 800a6e6:	1c5a      	adds	r2, r3, #1
 800a6e8:	d14a      	bne.n	800a780 <_printf_float+0x194>
 800a6ea:	3307      	adds	r3, #7
 800a6ec:	6063      	str	r3, [r4, #4]
 800a6ee:	2380      	movs	r3, #128	; 0x80
 800a6f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	9206      	str	r2, [sp, #24]
 800a6fa:	aa12      	add	r2, sp, #72	; 0x48
 800a6fc:	9205      	str	r2, [sp, #20]
 800a6fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	9204      	str	r2, [sp, #16]
 800a704:	aa11      	add	r2, sp, #68	; 0x44
 800a706:	9203      	str	r2, [sp, #12]
 800a708:	2223      	movs	r2, #35	; 0x23
 800a70a:	a908      	add	r1, sp, #32
 800a70c:	9301      	str	r3, [sp, #4]
 800a70e:	6863      	ldr	r3, [r4, #4]
 800a710:	1852      	adds	r2, r2, r1
 800a712:	9202      	str	r2, [sp, #8]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	0032      	movs	r2, r6
 800a718:	002b      	movs	r3, r5
 800a71a:	0038      	movs	r0, r7
 800a71c:	f7ff febe 	bl	800a49c <__cvt>
 800a720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a722:	0005      	movs	r5, r0
 800a724:	2b47      	cmp	r3, #71	; 0x47
 800a726:	d109      	bne.n	800a73c <_printf_float+0x150>
 800a728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a72a:	1cda      	adds	r2, r3, #3
 800a72c:	db02      	blt.n	800a734 <_printf_float+0x148>
 800a72e:	6862      	ldr	r2, [r4, #4]
 800a730:	4293      	cmp	r3, r2
 800a732:	dd49      	ble.n	800a7c8 <_printf_float+0x1dc>
 800a734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a736:	3b02      	subs	r3, #2
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	930a      	str	r3, [sp, #40]	; 0x28
 800a73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a740:	2b65      	cmp	r3, #101	; 0x65
 800a742:	d824      	bhi.n	800a78e <_printf_float+0x1a2>
 800a744:	0020      	movs	r0, r4
 800a746:	001a      	movs	r2, r3
 800a748:	3901      	subs	r1, #1
 800a74a:	3050      	adds	r0, #80	; 0x50
 800a74c:	9111      	str	r1, [sp, #68]	; 0x44
 800a74e:	f7ff ff08 	bl	800a562 <__exponent>
 800a752:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a754:	900b      	str	r0, [sp, #44]	; 0x2c
 800a756:	1813      	adds	r3, r2, r0
 800a758:	6123      	str	r3, [r4, #16]
 800a75a:	2a01      	cmp	r2, #1
 800a75c:	dc02      	bgt.n	800a764 <_printf_float+0x178>
 800a75e:	6822      	ldr	r2, [r4, #0]
 800a760:	07d2      	lsls	r2, r2, #31
 800a762:	d501      	bpl.n	800a768 <_printf_float+0x17c>
 800a764:	3301      	adds	r3, #1
 800a766:	6123      	str	r3, [r4, #16]
 800a768:	2323      	movs	r3, #35	; 0x23
 800a76a:	aa08      	add	r2, sp, #32
 800a76c:	189b      	adds	r3, r3, r2
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d100      	bne.n	800a776 <_printf_float+0x18a>
 800a774:	e78d      	b.n	800a692 <_printf_float+0xa6>
 800a776:	0023      	movs	r3, r4
 800a778:	222d      	movs	r2, #45	; 0x2d
 800a77a:	3343      	adds	r3, #67	; 0x43
 800a77c:	701a      	strb	r2, [r3, #0]
 800a77e:	e788      	b.n	800a692 <_printf_float+0xa6>
 800a780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a782:	2a47      	cmp	r2, #71	; 0x47
 800a784:	d1b3      	bne.n	800a6ee <_printf_float+0x102>
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1b1      	bne.n	800a6ee <_printf_float+0x102>
 800a78a:	3301      	adds	r3, #1
 800a78c:	e7ae      	b.n	800a6ec <_printf_float+0x100>
 800a78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a790:	2b66      	cmp	r3, #102	; 0x66
 800a792:	d11b      	bne.n	800a7cc <_printf_float+0x1e0>
 800a794:	6863      	ldr	r3, [r4, #4]
 800a796:	2900      	cmp	r1, #0
 800a798:	dd09      	ble.n	800a7ae <_printf_float+0x1c2>
 800a79a:	6121      	str	r1, [r4, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d102      	bne.n	800a7a6 <_printf_float+0x1ba>
 800a7a0:	6822      	ldr	r2, [r4, #0]
 800a7a2:	07d2      	lsls	r2, r2, #31
 800a7a4:	d50b      	bpl.n	800a7be <_printf_float+0x1d2>
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	185b      	adds	r3, r3, r1
 800a7aa:	6123      	str	r3, [r4, #16]
 800a7ac:	e007      	b.n	800a7be <_printf_float+0x1d2>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d103      	bne.n	800a7ba <_printf_float+0x1ce>
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	6821      	ldr	r1, [r4, #0]
 800a7b6:	4211      	tst	r1, r2
 800a7b8:	d000      	beq.n	800a7bc <_printf_float+0x1d0>
 800a7ba:	1c9a      	adds	r2, r3, #2
 800a7bc:	6122      	str	r2, [r4, #16]
 800a7be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7c0:	65a3      	str	r3, [r4, #88]	; 0x58
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7c6:	e7cf      	b.n	800a768 <_printf_float+0x17c>
 800a7c8:	2367      	movs	r3, #103	; 0x67
 800a7ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a7cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a7ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7d0:	4299      	cmp	r1, r3
 800a7d2:	db06      	blt.n	800a7e2 <_printf_float+0x1f6>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	6121      	str	r1, [r4, #16]
 800a7d8:	07db      	lsls	r3, r3, #31
 800a7da:	d5f0      	bpl.n	800a7be <_printf_float+0x1d2>
 800a7dc:	3101      	adds	r1, #1
 800a7de:	6121      	str	r1, [r4, #16]
 800a7e0:	e7ed      	b.n	800a7be <_printf_float+0x1d2>
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	dc01      	bgt.n	800a7ec <_printf_float+0x200>
 800a7e8:	1892      	adds	r2, r2, r2
 800a7ea:	1a52      	subs	r2, r2, r1
 800a7ec:	189b      	adds	r3, r3, r2
 800a7ee:	e7dc      	b.n	800a7aa <_printf_float+0x1be>
 800a7f0:	6822      	ldr	r2, [r4, #0]
 800a7f2:	0553      	lsls	r3, r2, #21
 800a7f4:	d408      	bmi.n	800a808 <_printf_float+0x21c>
 800a7f6:	6923      	ldr	r3, [r4, #16]
 800a7f8:	002a      	movs	r2, r5
 800a7fa:	0038      	movs	r0, r7
 800a7fc:	9908      	ldr	r1, [sp, #32]
 800a7fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a800:	47a8      	blx	r5
 800a802:	3001      	adds	r0, #1
 800a804:	d12a      	bne.n	800a85c <_printf_float+0x270>
 800a806:	e74f      	b.n	800a6a8 <_printf_float+0xbc>
 800a808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a80a:	2b65      	cmp	r3, #101	; 0x65
 800a80c:	d800      	bhi.n	800a810 <_printf_float+0x224>
 800a80e:	e0ec      	b.n	800a9ea <_printf_float+0x3fe>
 800a810:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a812:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a814:	2200      	movs	r2, #0
 800a816:	2300      	movs	r3, #0
 800a818:	f7f5 fe1e 	bl	8000458 <__aeabi_dcmpeq>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d034      	beq.n	800a88a <_printf_float+0x29e>
 800a820:	2301      	movs	r3, #1
 800a822:	0038      	movs	r0, r7
 800a824:	4a37      	ldr	r2, [pc, #220]	; (800a904 <_printf_float+0x318>)
 800a826:	9908      	ldr	r1, [sp, #32]
 800a828:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a82a:	47a8      	blx	r5
 800a82c:	3001      	adds	r0, #1
 800a82e:	d100      	bne.n	800a832 <_printf_float+0x246>
 800a830:	e73a      	b.n	800a6a8 <_printf_float+0xbc>
 800a832:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a836:	429a      	cmp	r2, r3
 800a838:	db02      	blt.n	800a840 <_printf_float+0x254>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	07db      	lsls	r3, r3, #31
 800a83e:	d50d      	bpl.n	800a85c <_printf_float+0x270>
 800a840:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a842:	0038      	movs	r0, r7
 800a844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a848:	9908      	ldr	r1, [sp, #32]
 800a84a:	47a8      	blx	r5
 800a84c:	2500      	movs	r5, #0
 800a84e:	3001      	adds	r0, #1
 800a850:	d100      	bne.n	800a854 <_printf_float+0x268>
 800a852:	e729      	b.n	800a6a8 <_printf_float+0xbc>
 800a854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a856:	3b01      	subs	r3, #1
 800a858:	42ab      	cmp	r3, r5
 800a85a:	dc0a      	bgt.n	800a872 <_printf_float+0x286>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	079b      	lsls	r3, r3, #30
 800a860:	d500      	bpl.n	800a864 <_printf_float+0x278>
 800a862:	e116      	b.n	800aa92 <_printf_float+0x4a6>
 800a864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a866:	68e0      	ldr	r0, [r4, #12]
 800a868:	4298      	cmp	r0, r3
 800a86a:	db00      	blt.n	800a86e <_printf_float+0x282>
 800a86c:	e71e      	b.n	800a6ac <_printf_float+0xc0>
 800a86e:	0018      	movs	r0, r3
 800a870:	e71c      	b.n	800a6ac <_printf_float+0xc0>
 800a872:	0022      	movs	r2, r4
 800a874:	2301      	movs	r3, #1
 800a876:	0038      	movs	r0, r7
 800a878:	9908      	ldr	r1, [sp, #32]
 800a87a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a87c:	321a      	adds	r2, #26
 800a87e:	47b0      	blx	r6
 800a880:	3001      	adds	r0, #1
 800a882:	d100      	bne.n	800a886 <_printf_float+0x29a>
 800a884:	e710      	b.n	800a6a8 <_printf_float+0xbc>
 800a886:	3501      	adds	r5, #1
 800a888:	e7e4      	b.n	800a854 <_printf_float+0x268>
 800a88a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dc3b      	bgt.n	800a908 <_printf_float+0x31c>
 800a890:	2301      	movs	r3, #1
 800a892:	0038      	movs	r0, r7
 800a894:	4a1b      	ldr	r2, [pc, #108]	; (800a904 <_printf_float+0x318>)
 800a896:	9908      	ldr	r1, [sp, #32]
 800a898:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a89a:	47b0      	blx	r6
 800a89c:	3001      	adds	r0, #1
 800a89e:	d100      	bne.n	800a8a2 <_printf_float+0x2b6>
 800a8a0:	e702      	b.n	800a6a8 <_printf_float+0xbc>
 800a8a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	d102      	bne.n	800a8b0 <_printf_float+0x2c4>
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	07db      	lsls	r3, r3, #31
 800a8ae:	d5d5      	bpl.n	800a85c <_printf_float+0x270>
 800a8b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8b2:	0038      	movs	r0, r7
 800a8b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8b6:	9908      	ldr	r1, [sp, #32]
 800a8b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a8ba:	47b0      	blx	r6
 800a8bc:	2300      	movs	r3, #0
 800a8be:	3001      	adds	r0, #1
 800a8c0:	d100      	bne.n	800a8c4 <_printf_float+0x2d8>
 800a8c2:	e6f1      	b.n	800a6a8 <_printf_float+0xbc>
 800a8c4:	930a      	str	r3, [sp, #40]	; 0x28
 800a8c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8ca:	425b      	negs	r3, r3
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	dc01      	bgt.n	800a8d4 <_printf_float+0x2e8>
 800a8d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8d2:	e791      	b.n	800a7f8 <_printf_float+0x20c>
 800a8d4:	0022      	movs	r2, r4
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	0038      	movs	r0, r7
 800a8da:	9908      	ldr	r1, [sp, #32]
 800a8dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a8de:	321a      	adds	r2, #26
 800a8e0:	47b0      	blx	r6
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	d100      	bne.n	800a8e8 <_printf_float+0x2fc>
 800a8e6:	e6df      	b.n	800a6a8 <_printf_float+0xbc>
 800a8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	e7ea      	b.n	800a8c4 <_printf_float+0x2d8>
 800a8ee:	46c0      	nop			; (mov r8, r8)
 800a8f0:	7fefffff 	.word	0x7fefffff
 800a8f4:	0800e190 	.word	0x0800e190
 800a8f8:	0800e194 	.word	0x0800e194
 800a8fc:	0800e198 	.word	0x0800e198
 800a900:	0800e19c 	.word	0x0800e19c
 800a904:	0800e1a0 	.word	0x0800e1a0
 800a908:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a90a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a90c:	920a      	str	r2, [sp, #40]	; 0x28
 800a90e:	429a      	cmp	r2, r3
 800a910:	dd00      	ble.n	800a914 <_printf_float+0x328>
 800a912:	930a      	str	r3, [sp, #40]	; 0x28
 800a914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a916:	2b00      	cmp	r3, #0
 800a918:	dc3d      	bgt.n	800a996 <_printf_float+0x3aa>
 800a91a:	2300      	movs	r3, #0
 800a91c:	930e      	str	r3, [sp, #56]	; 0x38
 800a91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a920:	43db      	mvns	r3, r3
 800a922:	17db      	asrs	r3, r3, #31
 800a924:	930f      	str	r3, [sp, #60]	; 0x3c
 800a926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a92a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a92c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a92e:	4013      	ands	r3, r2
 800a930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a936:	4293      	cmp	r3, r2
 800a938:	dc36      	bgt.n	800a9a8 <_printf_float+0x3bc>
 800a93a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a93c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a93e:	429a      	cmp	r2, r3
 800a940:	db40      	blt.n	800a9c4 <_printf_float+0x3d8>
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	07db      	lsls	r3, r3, #31
 800a946:	d43d      	bmi.n	800a9c4 <_printf_float+0x3d8>
 800a948:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a94a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a94c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a94e:	1af3      	subs	r3, r6, r3
 800a950:	1ab6      	subs	r6, r6, r2
 800a952:	429e      	cmp	r6, r3
 800a954:	dd00      	ble.n	800a958 <_printf_float+0x36c>
 800a956:	001e      	movs	r6, r3
 800a958:	2e00      	cmp	r6, #0
 800a95a:	dc3c      	bgt.n	800a9d6 <_printf_float+0x3ea>
 800a95c:	2300      	movs	r3, #0
 800a95e:	930a      	str	r3, [sp, #40]	; 0x28
 800a960:	43f3      	mvns	r3, r6
 800a962:	17db      	asrs	r3, r3, #31
 800a964:	930b      	str	r3, [sp, #44]	; 0x2c
 800a966:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a968:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a96a:	1a9b      	subs	r3, r3, r2
 800a96c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a96e:	4032      	ands	r2, r6
 800a970:	1a9b      	subs	r3, r3, r2
 800a972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a974:	4293      	cmp	r3, r2
 800a976:	dc00      	bgt.n	800a97a <_printf_float+0x38e>
 800a978:	e770      	b.n	800a85c <_printf_float+0x270>
 800a97a:	0022      	movs	r2, r4
 800a97c:	2301      	movs	r3, #1
 800a97e:	0038      	movs	r0, r7
 800a980:	9908      	ldr	r1, [sp, #32]
 800a982:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a984:	321a      	adds	r2, #26
 800a986:	47a8      	blx	r5
 800a988:	3001      	adds	r0, #1
 800a98a:	d100      	bne.n	800a98e <_printf_float+0x3a2>
 800a98c:	e68c      	b.n	800a6a8 <_printf_float+0xbc>
 800a98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a990:	3301      	adds	r3, #1
 800a992:	930a      	str	r3, [sp, #40]	; 0x28
 800a994:	e7e7      	b.n	800a966 <_printf_float+0x37a>
 800a996:	002a      	movs	r2, r5
 800a998:	0038      	movs	r0, r7
 800a99a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a99c:	9908      	ldr	r1, [sp, #32]
 800a99e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a9a0:	47b0      	blx	r6
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	d1b9      	bne.n	800a91a <_printf_float+0x32e>
 800a9a6:	e67f      	b.n	800a6a8 <_printf_float+0xbc>
 800a9a8:	0022      	movs	r2, r4
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	0038      	movs	r0, r7
 800a9ae:	9908      	ldr	r1, [sp, #32]
 800a9b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a9b2:	321a      	adds	r2, #26
 800a9b4:	47b0      	blx	r6
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d100      	bne.n	800a9bc <_printf_float+0x3d0>
 800a9ba:	e675      	b.n	800a6a8 <_printf_float+0xbc>
 800a9bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9be:	3301      	adds	r3, #1
 800a9c0:	930e      	str	r3, [sp, #56]	; 0x38
 800a9c2:	e7b0      	b.n	800a926 <_printf_float+0x33a>
 800a9c4:	0038      	movs	r0, r7
 800a9c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9ca:	9908      	ldr	r1, [sp, #32]
 800a9cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a9ce:	47b0      	blx	r6
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	d1b9      	bne.n	800a948 <_printf_float+0x35c>
 800a9d4:	e668      	b.n	800a6a8 <_printf_float+0xbc>
 800a9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d8:	0038      	movs	r0, r7
 800a9da:	18ea      	adds	r2, r5, r3
 800a9dc:	9908      	ldr	r1, [sp, #32]
 800a9de:	0033      	movs	r3, r6
 800a9e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a9e2:	47a8      	blx	r5
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d1b9      	bne.n	800a95c <_printf_float+0x370>
 800a9e8:	e65e      	b.n	800a6a8 <_printf_float+0xbc>
 800a9ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	dc02      	bgt.n	800a9f6 <_printf_float+0x40a>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	421a      	tst	r2, r3
 800a9f4:	d03a      	beq.n	800aa6c <_printf_float+0x480>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	002a      	movs	r2, r5
 800a9fa:	0038      	movs	r0, r7
 800a9fc:	9908      	ldr	r1, [sp, #32]
 800a9fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aa00:	47b0      	blx	r6
 800aa02:	3001      	adds	r0, #1
 800aa04:	d100      	bne.n	800aa08 <_printf_float+0x41c>
 800aa06:	e64f      	b.n	800a6a8 <_printf_float+0xbc>
 800aa08:	0038      	movs	r0, r7
 800aa0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa0e:	9908      	ldr	r1, [sp, #32]
 800aa10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aa12:	47b0      	blx	r6
 800aa14:	3001      	adds	r0, #1
 800aa16:	d100      	bne.n	800aa1a <_printf_float+0x42e>
 800aa18:	e646      	b.n	800a6a8 <_printf_float+0xbc>
 800aa1a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800aa1c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800aa1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa20:	2200      	movs	r2, #0
 800aa22:	001e      	movs	r6, r3
 800aa24:	2300      	movs	r3, #0
 800aa26:	f7f5 fd17 	bl	8000458 <__aeabi_dcmpeq>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d11c      	bne.n	800aa68 <_printf_float+0x47c>
 800aa2e:	0033      	movs	r3, r6
 800aa30:	1c6a      	adds	r2, r5, #1
 800aa32:	3b01      	subs	r3, #1
 800aa34:	0038      	movs	r0, r7
 800aa36:	9908      	ldr	r1, [sp, #32]
 800aa38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aa3a:	47a8      	blx	r5
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	d10f      	bne.n	800aa60 <_printf_float+0x474>
 800aa40:	e632      	b.n	800a6a8 <_printf_float+0xbc>
 800aa42:	0022      	movs	r2, r4
 800aa44:	2301      	movs	r3, #1
 800aa46:	0038      	movs	r0, r7
 800aa48:	9908      	ldr	r1, [sp, #32]
 800aa4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aa4c:	321a      	adds	r2, #26
 800aa4e:	47b0      	blx	r6
 800aa50:	3001      	adds	r0, #1
 800aa52:	d100      	bne.n	800aa56 <_printf_float+0x46a>
 800aa54:	e628      	b.n	800a6a8 <_printf_float+0xbc>
 800aa56:	3501      	adds	r5, #1
 800aa58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	42ab      	cmp	r3, r5
 800aa5e:	dcf0      	bgt.n	800aa42 <_printf_float+0x456>
 800aa60:	0022      	movs	r2, r4
 800aa62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa64:	3250      	adds	r2, #80	; 0x50
 800aa66:	e6c8      	b.n	800a7fa <_printf_float+0x20e>
 800aa68:	2500      	movs	r5, #0
 800aa6a:	e7f5      	b.n	800aa58 <_printf_float+0x46c>
 800aa6c:	002a      	movs	r2, r5
 800aa6e:	e7e1      	b.n	800aa34 <_printf_float+0x448>
 800aa70:	0022      	movs	r2, r4
 800aa72:	2301      	movs	r3, #1
 800aa74:	0038      	movs	r0, r7
 800aa76:	9908      	ldr	r1, [sp, #32]
 800aa78:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aa7a:	3219      	adds	r2, #25
 800aa7c:	47b0      	blx	r6
 800aa7e:	3001      	adds	r0, #1
 800aa80:	d100      	bne.n	800aa84 <_printf_float+0x498>
 800aa82:	e611      	b.n	800a6a8 <_printf_float+0xbc>
 800aa84:	3501      	adds	r5, #1
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa8a:	1a9b      	subs	r3, r3, r2
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	dcef      	bgt.n	800aa70 <_printf_float+0x484>
 800aa90:	e6e8      	b.n	800a864 <_printf_float+0x278>
 800aa92:	2500      	movs	r5, #0
 800aa94:	e7f7      	b.n	800aa86 <_printf_float+0x49a>
 800aa96:	46c0      	nop			; (mov r8, r8)

0800aa98 <_printf_common>:
 800aa98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa9a:	0016      	movs	r6, r2
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	688a      	ldr	r2, [r1, #8]
 800aaa0:	690b      	ldr	r3, [r1, #16]
 800aaa2:	000c      	movs	r4, r1
 800aaa4:	9000      	str	r0, [sp, #0]
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	da00      	bge.n	800aaac <_printf_common+0x14>
 800aaaa:	0013      	movs	r3, r2
 800aaac:	0022      	movs	r2, r4
 800aaae:	6033      	str	r3, [r6, #0]
 800aab0:	3243      	adds	r2, #67	; 0x43
 800aab2:	7812      	ldrb	r2, [r2, #0]
 800aab4:	2a00      	cmp	r2, #0
 800aab6:	d001      	beq.n	800aabc <_printf_common+0x24>
 800aab8:	3301      	adds	r3, #1
 800aaba:	6033      	str	r3, [r6, #0]
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	069b      	lsls	r3, r3, #26
 800aac0:	d502      	bpl.n	800aac8 <_printf_common+0x30>
 800aac2:	6833      	ldr	r3, [r6, #0]
 800aac4:	3302      	adds	r3, #2
 800aac6:	6033      	str	r3, [r6, #0]
 800aac8:	6822      	ldr	r2, [r4, #0]
 800aaca:	2306      	movs	r3, #6
 800aacc:	0015      	movs	r5, r2
 800aace:	401d      	ands	r5, r3
 800aad0:	421a      	tst	r2, r3
 800aad2:	d027      	beq.n	800ab24 <_printf_common+0x8c>
 800aad4:	0023      	movs	r3, r4
 800aad6:	3343      	adds	r3, #67	; 0x43
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	1e5a      	subs	r2, r3, #1
 800aadc:	4193      	sbcs	r3, r2
 800aade:	6822      	ldr	r2, [r4, #0]
 800aae0:	0692      	lsls	r2, r2, #26
 800aae2:	d430      	bmi.n	800ab46 <_printf_common+0xae>
 800aae4:	0022      	movs	r2, r4
 800aae6:	9901      	ldr	r1, [sp, #4]
 800aae8:	9800      	ldr	r0, [sp, #0]
 800aaea:	9d08      	ldr	r5, [sp, #32]
 800aaec:	3243      	adds	r2, #67	; 0x43
 800aaee:	47a8      	blx	r5
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	d025      	beq.n	800ab40 <_printf_common+0xa8>
 800aaf4:	2206      	movs	r2, #6
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	2500      	movs	r5, #0
 800aafa:	4013      	ands	r3, r2
 800aafc:	2b04      	cmp	r3, #4
 800aafe:	d105      	bne.n	800ab0c <_printf_common+0x74>
 800ab00:	6833      	ldr	r3, [r6, #0]
 800ab02:	68e5      	ldr	r5, [r4, #12]
 800ab04:	1aed      	subs	r5, r5, r3
 800ab06:	43eb      	mvns	r3, r5
 800ab08:	17db      	asrs	r3, r3, #31
 800ab0a:	401d      	ands	r5, r3
 800ab0c:	68a3      	ldr	r3, [r4, #8]
 800ab0e:	6922      	ldr	r2, [r4, #16]
 800ab10:	4293      	cmp	r3, r2
 800ab12:	dd01      	ble.n	800ab18 <_printf_common+0x80>
 800ab14:	1a9b      	subs	r3, r3, r2
 800ab16:	18ed      	adds	r5, r5, r3
 800ab18:	2600      	movs	r6, #0
 800ab1a:	42b5      	cmp	r5, r6
 800ab1c:	d120      	bne.n	800ab60 <_printf_common+0xc8>
 800ab1e:	2000      	movs	r0, #0
 800ab20:	e010      	b.n	800ab44 <_printf_common+0xac>
 800ab22:	3501      	adds	r5, #1
 800ab24:	68e3      	ldr	r3, [r4, #12]
 800ab26:	6832      	ldr	r2, [r6, #0]
 800ab28:	1a9b      	subs	r3, r3, r2
 800ab2a:	42ab      	cmp	r3, r5
 800ab2c:	ddd2      	ble.n	800aad4 <_printf_common+0x3c>
 800ab2e:	0022      	movs	r2, r4
 800ab30:	2301      	movs	r3, #1
 800ab32:	9901      	ldr	r1, [sp, #4]
 800ab34:	9800      	ldr	r0, [sp, #0]
 800ab36:	9f08      	ldr	r7, [sp, #32]
 800ab38:	3219      	adds	r2, #25
 800ab3a:	47b8      	blx	r7
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d1f0      	bne.n	800ab22 <_printf_common+0x8a>
 800ab40:	2001      	movs	r0, #1
 800ab42:	4240      	negs	r0, r0
 800ab44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab46:	2030      	movs	r0, #48	; 0x30
 800ab48:	18e1      	adds	r1, r4, r3
 800ab4a:	3143      	adds	r1, #67	; 0x43
 800ab4c:	7008      	strb	r0, [r1, #0]
 800ab4e:	0021      	movs	r1, r4
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	3145      	adds	r1, #69	; 0x45
 800ab54:	7809      	ldrb	r1, [r1, #0]
 800ab56:	18a2      	adds	r2, r4, r2
 800ab58:	3243      	adds	r2, #67	; 0x43
 800ab5a:	3302      	adds	r3, #2
 800ab5c:	7011      	strb	r1, [r2, #0]
 800ab5e:	e7c1      	b.n	800aae4 <_printf_common+0x4c>
 800ab60:	0022      	movs	r2, r4
 800ab62:	2301      	movs	r3, #1
 800ab64:	9901      	ldr	r1, [sp, #4]
 800ab66:	9800      	ldr	r0, [sp, #0]
 800ab68:	9f08      	ldr	r7, [sp, #32]
 800ab6a:	321a      	adds	r2, #26
 800ab6c:	47b8      	blx	r7
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d0e6      	beq.n	800ab40 <_printf_common+0xa8>
 800ab72:	3601      	adds	r6, #1
 800ab74:	e7d1      	b.n	800ab1a <_printf_common+0x82>
	...

0800ab78 <_printf_i>:
 800ab78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab7a:	b08b      	sub	sp, #44	; 0x2c
 800ab7c:	9206      	str	r2, [sp, #24]
 800ab7e:	000a      	movs	r2, r1
 800ab80:	3243      	adds	r2, #67	; 0x43
 800ab82:	9307      	str	r3, [sp, #28]
 800ab84:	9005      	str	r0, [sp, #20]
 800ab86:	9204      	str	r2, [sp, #16]
 800ab88:	7e0a      	ldrb	r2, [r1, #24]
 800ab8a:	000c      	movs	r4, r1
 800ab8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab8e:	2a78      	cmp	r2, #120	; 0x78
 800ab90:	d809      	bhi.n	800aba6 <_printf_i+0x2e>
 800ab92:	2a62      	cmp	r2, #98	; 0x62
 800ab94:	d80b      	bhi.n	800abae <_printf_i+0x36>
 800ab96:	2a00      	cmp	r2, #0
 800ab98:	d100      	bne.n	800ab9c <_printf_i+0x24>
 800ab9a:	e0be      	b.n	800ad1a <_printf_i+0x1a2>
 800ab9c:	497c      	ldr	r1, [pc, #496]	; (800ad90 <_printf_i+0x218>)
 800ab9e:	9103      	str	r1, [sp, #12]
 800aba0:	2a58      	cmp	r2, #88	; 0x58
 800aba2:	d100      	bne.n	800aba6 <_printf_i+0x2e>
 800aba4:	e093      	b.n	800acce <_printf_i+0x156>
 800aba6:	0026      	movs	r6, r4
 800aba8:	3642      	adds	r6, #66	; 0x42
 800abaa:	7032      	strb	r2, [r6, #0]
 800abac:	e022      	b.n	800abf4 <_printf_i+0x7c>
 800abae:	0010      	movs	r0, r2
 800abb0:	3863      	subs	r0, #99	; 0x63
 800abb2:	2815      	cmp	r0, #21
 800abb4:	d8f7      	bhi.n	800aba6 <_printf_i+0x2e>
 800abb6:	f7f5 fabf 	bl	8000138 <__gnu_thumb1_case_shi>
 800abba:	0016      	.short	0x0016
 800abbc:	fff6001f 	.word	0xfff6001f
 800abc0:	fff6fff6 	.word	0xfff6fff6
 800abc4:	001ffff6 	.word	0x001ffff6
 800abc8:	fff6fff6 	.word	0xfff6fff6
 800abcc:	fff6fff6 	.word	0xfff6fff6
 800abd0:	003600a3 	.word	0x003600a3
 800abd4:	fff60083 	.word	0xfff60083
 800abd8:	00b4fff6 	.word	0x00b4fff6
 800abdc:	0036fff6 	.word	0x0036fff6
 800abe0:	fff6fff6 	.word	0xfff6fff6
 800abe4:	0087      	.short	0x0087
 800abe6:	0026      	movs	r6, r4
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	3642      	adds	r6, #66	; 0x42
 800abec:	1d11      	adds	r1, r2, #4
 800abee:	6019      	str	r1, [r3, #0]
 800abf0:	6813      	ldr	r3, [r2, #0]
 800abf2:	7033      	strb	r3, [r6, #0]
 800abf4:	2301      	movs	r3, #1
 800abf6:	e0a2      	b.n	800ad3e <_printf_i+0x1c6>
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	6809      	ldr	r1, [r1, #0]
 800abfc:	1d02      	adds	r2, r0, #4
 800abfe:	060d      	lsls	r5, r1, #24
 800ac00:	d50b      	bpl.n	800ac1a <_printf_i+0xa2>
 800ac02:	6805      	ldr	r5, [r0, #0]
 800ac04:	601a      	str	r2, [r3, #0]
 800ac06:	2d00      	cmp	r5, #0
 800ac08:	da03      	bge.n	800ac12 <_printf_i+0x9a>
 800ac0a:	232d      	movs	r3, #45	; 0x2d
 800ac0c:	9a04      	ldr	r2, [sp, #16]
 800ac0e:	426d      	negs	r5, r5
 800ac10:	7013      	strb	r3, [r2, #0]
 800ac12:	4b5f      	ldr	r3, [pc, #380]	; (800ad90 <_printf_i+0x218>)
 800ac14:	270a      	movs	r7, #10
 800ac16:	9303      	str	r3, [sp, #12]
 800ac18:	e01b      	b.n	800ac52 <_printf_i+0xda>
 800ac1a:	6805      	ldr	r5, [r0, #0]
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	0649      	lsls	r1, r1, #25
 800ac20:	d5f1      	bpl.n	800ac06 <_printf_i+0x8e>
 800ac22:	b22d      	sxth	r5, r5
 800ac24:	e7ef      	b.n	800ac06 <_printf_i+0x8e>
 800ac26:	680d      	ldr	r5, [r1, #0]
 800ac28:	6819      	ldr	r1, [r3, #0]
 800ac2a:	1d08      	adds	r0, r1, #4
 800ac2c:	6018      	str	r0, [r3, #0]
 800ac2e:	062e      	lsls	r6, r5, #24
 800ac30:	d501      	bpl.n	800ac36 <_printf_i+0xbe>
 800ac32:	680d      	ldr	r5, [r1, #0]
 800ac34:	e003      	b.n	800ac3e <_printf_i+0xc6>
 800ac36:	066d      	lsls	r5, r5, #25
 800ac38:	d5fb      	bpl.n	800ac32 <_printf_i+0xba>
 800ac3a:	680d      	ldr	r5, [r1, #0]
 800ac3c:	b2ad      	uxth	r5, r5
 800ac3e:	4b54      	ldr	r3, [pc, #336]	; (800ad90 <_printf_i+0x218>)
 800ac40:	2708      	movs	r7, #8
 800ac42:	9303      	str	r3, [sp, #12]
 800ac44:	2a6f      	cmp	r2, #111	; 0x6f
 800ac46:	d000      	beq.n	800ac4a <_printf_i+0xd2>
 800ac48:	3702      	adds	r7, #2
 800ac4a:	0023      	movs	r3, r4
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	3343      	adds	r3, #67	; 0x43
 800ac50:	701a      	strb	r2, [r3, #0]
 800ac52:	6863      	ldr	r3, [r4, #4]
 800ac54:	60a3      	str	r3, [r4, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	db03      	blt.n	800ac62 <_printf_i+0xea>
 800ac5a:	2104      	movs	r1, #4
 800ac5c:	6822      	ldr	r2, [r4, #0]
 800ac5e:	438a      	bics	r2, r1
 800ac60:	6022      	str	r2, [r4, #0]
 800ac62:	2d00      	cmp	r5, #0
 800ac64:	d102      	bne.n	800ac6c <_printf_i+0xf4>
 800ac66:	9e04      	ldr	r6, [sp, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00c      	beq.n	800ac86 <_printf_i+0x10e>
 800ac6c:	9e04      	ldr	r6, [sp, #16]
 800ac6e:	0028      	movs	r0, r5
 800ac70:	0039      	movs	r1, r7
 800ac72:	f7f5 faf1 	bl	8000258 <__aeabi_uidivmod>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	3e01      	subs	r6, #1
 800ac7a:	5c5b      	ldrb	r3, [r3, r1]
 800ac7c:	7033      	strb	r3, [r6, #0]
 800ac7e:	002b      	movs	r3, r5
 800ac80:	0005      	movs	r5, r0
 800ac82:	429f      	cmp	r7, r3
 800ac84:	d9f3      	bls.n	800ac6e <_printf_i+0xf6>
 800ac86:	2f08      	cmp	r7, #8
 800ac88:	d109      	bne.n	800ac9e <_printf_i+0x126>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	07db      	lsls	r3, r3, #31
 800ac8e:	d506      	bpl.n	800ac9e <_printf_i+0x126>
 800ac90:	6862      	ldr	r2, [r4, #4]
 800ac92:	6923      	ldr	r3, [r4, #16]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	dc02      	bgt.n	800ac9e <_printf_i+0x126>
 800ac98:	2330      	movs	r3, #48	; 0x30
 800ac9a:	3e01      	subs	r6, #1
 800ac9c:	7033      	strb	r3, [r6, #0]
 800ac9e:	9b04      	ldr	r3, [sp, #16]
 800aca0:	1b9b      	subs	r3, r3, r6
 800aca2:	6123      	str	r3, [r4, #16]
 800aca4:	9b07      	ldr	r3, [sp, #28]
 800aca6:	0021      	movs	r1, r4
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	9805      	ldr	r0, [sp, #20]
 800acac:	9b06      	ldr	r3, [sp, #24]
 800acae:	aa09      	add	r2, sp, #36	; 0x24
 800acb0:	f7ff fef2 	bl	800aa98 <_printf_common>
 800acb4:	3001      	adds	r0, #1
 800acb6:	d147      	bne.n	800ad48 <_printf_i+0x1d0>
 800acb8:	2001      	movs	r0, #1
 800acba:	4240      	negs	r0, r0
 800acbc:	b00b      	add	sp, #44	; 0x2c
 800acbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acc0:	2220      	movs	r2, #32
 800acc2:	6809      	ldr	r1, [r1, #0]
 800acc4:	430a      	orrs	r2, r1
 800acc6:	6022      	str	r2, [r4, #0]
 800acc8:	2278      	movs	r2, #120	; 0x78
 800acca:	4932      	ldr	r1, [pc, #200]	; (800ad94 <_printf_i+0x21c>)
 800accc:	9103      	str	r1, [sp, #12]
 800acce:	0021      	movs	r1, r4
 800acd0:	3145      	adds	r1, #69	; 0x45
 800acd2:	700a      	strb	r2, [r1, #0]
 800acd4:	6819      	ldr	r1, [r3, #0]
 800acd6:	6822      	ldr	r2, [r4, #0]
 800acd8:	c920      	ldmia	r1!, {r5}
 800acda:	0610      	lsls	r0, r2, #24
 800acdc:	d402      	bmi.n	800ace4 <_printf_i+0x16c>
 800acde:	0650      	lsls	r0, r2, #25
 800ace0:	d500      	bpl.n	800ace4 <_printf_i+0x16c>
 800ace2:	b2ad      	uxth	r5, r5
 800ace4:	6019      	str	r1, [r3, #0]
 800ace6:	07d3      	lsls	r3, r2, #31
 800ace8:	d502      	bpl.n	800acf0 <_printf_i+0x178>
 800acea:	2320      	movs	r3, #32
 800acec:	4313      	orrs	r3, r2
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	2710      	movs	r7, #16
 800acf2:	2d00      	cmp	r5, #0
 800acf4:	d1a9      	bne.n	800ac4a <_printf_i+0xd2>
 800acf6:	2220      	movs	r2, #32
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	4393      	bics	r3, r2
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	e7a4      	b.n	800ac4a <_printf_i+0xd2>
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	680d      	ldr	r5, [r1, #0]
 800ad04:	1d10      	adds	r0, r2, #4
 800ad06:	6949      	ldr	r1, [r1, #20]
 800ad08:	6018      	str	r0, [r3, #0]
 800ad0a:	6813      	ldr	r3, [r2, #0]
 800ad0c:	062e      	lsls	r6, r5, #24
 800ad0e:	d501      	bpl.n	800ad14 <_printf_i+0x19c>
 800ad10:	6019      	str	r1, [r3, #0]
 800ad12:	e002      	b.n	800ad1a <_printf_i+0x1a2>
 800ad14:	066d      	lsls	r5, r5, #25
 800ad16:	d5fb      	bpl.n	800ad10 <_printf_i+0x198>
 800ad18:	8019      	strh	r1, [r3, #0]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	9e04      	ldr	r6, [sp, #16]
 800ad1e:	6123      	str	r3, [r4, #16]
 800ad20:	e7c0      	b.n	800aca4 <_printf_i+0x12c>
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	1d11      	adds	r1, r2, #4
 800ad26:	6019      	str	r1, [r3, #0]
 800ad28:	6816      	ldr	r6, [r2, #0]
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	0030      	movs	r0, r6
 800ad2e:	6862      	ldr	r2, [r4, #4]
 800ad30:	f000 fb89 	bl	800b446 <memchr>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d001      	beq.n	800ad3c <_printf_i+0x1c4>
 800ad38:	1b80      	subs	r0, r0, r6
 800ad3a:	6060      	str	r0, [r4, #4]
 800ad3c:	6863      	ldr	r3, [r4, #4]
 800ad3e:	6123      	str	r3, [r4, #16]
 800ad40:	2300      	movs	r3, #0
 800ad42:	9a04      	ldr	r2, [sp, #16]
 800ad44:	7013      	strb	r3, [r2, #0]
 800ad46:	e7ad      	b.n	800aca4 <_printf_i+0x12c>
 800ad48:	0032      	movs	r2, r6
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	9906      	ldr	r1, [sp, #24]
 800ad4e:	9805      	ldr	r0, [sp, #20]
 800ad50:	9d07      	ldr	r5, [sp, #28]
 800ad52:	47a8      	blx	r5
 800ad54:	3001      	adds	r0, #1
 800ad56:	d0af      	beq.n	800acb8 <_printf_i+0x140>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	079b      	lsls	r3, r3, #30
 800ad5c:	d415      	bmi.n	800ad8a <_printf_i+0x212>
 800ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad60:	68e0      	ldr	r0, [r4, #12]
 800ad62:	4298      	cmp	r0, r3
 800ad64:	daaa      	bge.n	800acbc <_printf_i+0x144>
 800ad66:	0018      	movs	r0, r3
 800ad68:	e7a8      	b.n	800acbc <_printf_i+0x144>
 800ad6a:	0022      	movs	r2, r4
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	9906      	ldr	r1, [sp, #24]
 800ad70:	9805      	ldr	r0, [sp, #20]
 800ad72:	9e07      	ldr	r6, [sp, #28]
 800ad74:	3219      	adds	r2, #25
 800ad76:	47b0      	blx	r6
 800ad78:	3001      	adds	r0, #1
 800ad7a:	d09d      	beq.n	800acb8 <_printf_i+0x140>
 800ad7c:	3501      	adds	r5, #1
 800ad7e:	68e3      	ldr	r3, [r4, #12]
 800ad80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad82:	1a9b      	subs	r3, r3, r2
 800ad84:	42ab      	cmp	r3, r5
 800ad86:	dcf0      	bgt.n	800ad6a <_printf_i+0x1f2>
 800ad88:	e7e9      	b.n	800ad5e <_printf_i+0x1e6>
 800ad8a:	2500      	movs	r5, #0
 800ad8c:	e7f7      	b.n	800ad7e <_printf_i+0x206>
 800ad8e:	46c0      	nop			; (mov r8, r8)
 800ad90:	0800e1a2 	.word	0x0800e1a2
 800ad94:	0800e1b3 	.word	0x0800e1b3

0800ad98 <std>:
 800ad98:	2300      	movs	r3, #0
 800ad9a:	b510      	push	{r4, lr}
 800ad9c:	0004      	movs	r4, r0
 800ad9e:	6003      	str	r3, [r0, #0]
 800ada0:	6043      	str	r3, [r0, #4]
 800ada2:	6083      	str	r3, [r0, #8]
 800ada4:	8181      	strh	r1, [r0, #12]
 800ada6:	6643      	str	r3, [r0, #100]	; 0x64
 800ada8:	81c2      	strh	r2, [r0, #14]
 800adaa:	6103      	str	r3, [r0, #16]
 800adac:	6143      	str	r3, [r0, #20]
 800adae:	6183      	str	r3, [r0, #24]
 800adb0:	0019      	movs	r1, r3
 800adb2:	2208      	movs	r2, #8
 800adb4:	305c      	adds	r0, #92	; 0x5c
 800adb6:	f000 fa49 	bl	800b24c <memset>
 800adba:	4b0b      	ldr	r3, [pc, #44]	; (800ade8 <std+0x50>)
 800adbc:	6224      	str	r4, [r4, #32]
 800adbe:	6263      	str	r3, [r4, #36]	; 0x24
 800adc0:	4b0a      	ldr	r3, [pc, #40]	; (800adec <std+0x54>)
 800adc2:	62a3      	str	r3, [r4, #40]	; 0x28
 800adc4:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <std+0x58>)
 800adc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adc8:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <std+0x5c>)
 800adca:	6323      	str	r3, [r4, #48]	; 0x30
 800adcc:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <std+0x60>)
 800adce:	429c      	cmp	r4, r3
 800add0:	d005      	beq.n	800adde <std+0x46>
 800add2:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <std+0x64>)
 800add4:	429c      	cmp	r4, r3
 800add6:	d002      	beq.n	800adde <std+0x46>
 800add8:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <std+0x68>)
 800adda:	429c      	cmp	r4, r3
 800addc:	d103      	bne.n	800ade6 <std+0x4e>
 800adde:	0020      	movs	r0, r4
 800ade0:	3058      	adds	r0, #88	; 0x58
 800ade2:	f000 fb2d 	bl	800b440 <__retarget_lock_init_recursive>
 800ade6:	bd10      	pop	{r4, pc}
 800ade8:	0800b069 	.word	0x0800b069
 800adec:	0800b091 	.word	0x0800b091
 800adf0:	0800b0c9 	.word	0x0800b0c9
 800adf4:	0800b0f5 	.word	0x0800b0f5
 800adf8:	20000678 	.word	0x20000678
 800adfc:	200006e0 	.word	0x200006e0
 800ae00:	20000748 	.word	0x20000748

0800ae04 <stdio_exit_handler>:
 800ae04:	b510      	push	{r4, lr}
 800ae06:	4a03      	ldr	r2, [pc, #12]	; (800ae14 <stdio_exit_handler+0x10>)
 800ae08:	4903      	ldr	r1, [pc, #12]	; (800ae18 <stdio_exit_handler+0x14>)
 800ae0a:	4804      	ldr	r0, [pc, #16]	; (800ae1c <stdio_exit_handler+0x18>)
 800ae0c:	f000 f86c 	bl	800aee8 <_fwalk_sglue>
 800ae10:	bd10      	pop	{r4, pc}
 800ae12:	46c0      	nop			; (mov r8, r8)
 800ae14:	20000088 	.word	0x20000088
 800ae18:	0800dad1 	.word	0x0800dad1
 800ae1c:	20000200 	.word	0x20000200

0800ae20 <cleanup_stdio>:
 800ae20:	6841      	ldr	r1, [r0, #4]
 800ae22:	4b0b      	ldr	r3, [pc, #44]	; (800ae50 <cleanup_stdio+0x30>)
 800ae24:	b510      	push	{r4, lr}
 800ae26:	0004      	movs	r4, r0
 800ae28:	4299      	cmp	r1, r3
 800ae2a:	d001      	beq.n	800ae30 <cleanup_stdio+0x10>
 800ae2c:	f002 fe50 	bl	800dad0 <_fflush_r>
 800ae30:	68a1      	ldr	r1, [r4, #8]
 800ae32:	4b08      	ldr	r3, [pc, #32]	; (800ae54 <cleanup_stdio+0x34>)
 800ae34:	4299      	cmp	r1, r3
 800ae36:	d002      	beq.n	800ae3e <cleanup_stdio+0x1e>
 800ae38:	0020      	movs	r0, r4
 800ae3a:	f002 fe49 	bl	800dad0 <_fflush_r>
 800ae3e:	68e1      	ldr	r1, [r4, #12]
 800ae40:	4b05      	ldr	r3, [pc, #20]	; (800ae58 <cleanup_stdio+0x38>)
 800ae42:	4299      	cmp	r1, r3
 800ae44:	d002      	beq.n	800ae4c <cleanup_stdio+0x2c>
 800ae46:	0020      	movs	r0, r4
 800ae48:	f002 fe42 	bl	800dad0 <_fflush_r>
 800ae4c:	bd10      	pop	{r4, pc}
 800ae4e:	46c0      	nop			; (mov r8, r8)
 800ae50:	20000678 	.word	0x20000678
 800ae54:	200006e0 	.word	0x200006e0
 800ae58:	20000748 	.word	0x20000748

0800ae5c <global_stdio_init.part.0>:
 800ae5c:	b510      	push	{r4, lr}
 800ae5e:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <global_stdio_init.part.0+0x28>)
 800ae60:	4a09      	ldr	r2, [pc, #36]	; (800ae88 <global_stdio_init.part.0+0x2c>)
 800ae62:	2104      	movs	r1, #4
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	4809      	ldr	r0, [pc, #36]	; (800ae8c <global_stdio_init.part.0+0x30>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f7ff ff95 	bl	800ad98 <std>
 800ae6e:	2201      	movs	r2, #1
 800ae70:	2109      	movs	r1, #9
 800ae72:	4807      	ldr	r0, [pc, #28]	; (800ae90 <global_stdio_init.part.0+0x34>)
 800ae74:	f7ff ff90 	bl	800ad98 <std>
 800ae78:	2202      	movs	r2, #2
 800ae7a:	2112      	movs	r1, #18
 800ae7c:	4805      	ldr	r0, [pc, #20]	; (800ae94 <global_stdio_init.part.0+0x38>)
 800ae7e:	f7ff ff8b 	bl	800ad98 <std>
 800ae82:	bd10      	pop	{r4, pc}
 800ae84:	200007b0 	.word	0x200007b0
 800ae88:	0800ae05 	.word	0x0800ae05
 800ae8c:	20000678 	.word	0x20000678
 800ae90:	200006e0 	.word	0x200006e0
 800ae94:	20000748 	.word	0x20000748

0800ae98 <__sfp_lock_acquire>:
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	4802      	ldr	r0, [pc, #8]	; (800aea4 <__sfp_lock_acquire+0xc>)
 800ae9c:	f000 fad1 	bl	800b442 <__retarget_lock_acquire_recursive>
 800aea0:	bd10      	pop	{r4, pc}
 800aea2:	46c0      	nop			; (mov r8, r8)
 800aea4:	200007b9 	.word	0x200007b9

0800aea8 <__sfp_lock_release>:
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	4802      	ldr	r0, [pc, #8]	; (800aeb4 <__sfp_lock_release+0xc>)
 800aeac:	f000 faca 	bl	800b444 <__retarget_lock_release_recursive>
 800aeb0:	bd10      	pop	{r4, pc}
 800aeb2:	46c0      	nop			; (mov r8, r8)
 800aeb4:	200007b9 	.word	0x200007b9

0800aeb8 <__sinit>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	0004      	movs	r4, r0
 800aebc:	f7ff ffec 	bl	800ae98 <__sfp_lock_acquire>
 800aec0:	6a23      	ldr	r3, [r4, #32]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d002      	beq.n	800aecc <__sinit+0x14>
 800aec6:	f7ff ffef 	bl	800aea8 <__sfp_lock_release>
 800aeca:	bd10      	pop	{r4, pc}
 800aecc:	4b04      	ldr	r3, [pc, #16]	; (800aee0 <__sinit+0x28>)
 800aece:	6223      	str	r3, [r4, #32]
 800aed0:	4b04      	ldr	r3, [pc, #16]	; (800aee4 <__sinit+0x2c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1f6      	bne.n	800aec6 <__sinit+0xe>
 800aed8:	f7ff ffc0 	bl	800ae5c <global_stdio_init.part.0>
 800aedc:	e7f3      	b.n	800aec6 <__sinit+0xe>
 800aede:	46c0      	nop			; (mov r8, r8)
 800aee0:	0800ae21 	.word	0x0800ae21
 800aee4:	200007b0 	.word	0x200007b0

0800aee8 <_fwalk_sglue>:
 800aee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeea:	0014      	movs	r4, r2
 800aeec:	2600      	movs	r6, #0
 800aeee:	9000      	str	r0, [sp, #0]
 800aef0:	9101      	str	r1, [sp, #4]
 800aef2:	68a5      	ldr	r5, [r4, #8]
 800aef4:	6867      	ldr	r7, [r4, #4]
 800aef6:	3f01      	subs	r7, #1
 800aef8:	d504      	bpl.n	800af04 <_fwalk_sglue+0x1c>
 800aefa:	6824      	ldr	r4, [r4, #0]
 800aefc:	2c00      	cmp	r4, #0
 800aefe:	d1f8      	bne.n	800aef2 <_fwalk_sglue+0xa>
 800af00:	0030      	movs	r0, r6
 800af02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af04:	89ab      	ldrh	r3, [r5, #12]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d908      	bls.n	800af1c <_fwalk_sglue+0x34>
 800af0a:	220e      	movs	r2, #14
 800af0c:	5eab      	ldrsh	r3, [r5, r2]
 800af0e:	3301      	adds	r3, #1
 800af10:	d004      	beq.n	800af1c <_fwalk_sglue+0x34>
 800af12:	0029      	movs	r1, r5
 800af14:	9800      	ldr	r0, [sp, #0]
 800af16:	9b01      	ldr	r3, [sp, #4]
 800af18:	4798      	blx	r3
 800af1a:	4306      	orrs	r6, r0
 800af1c:	3568      	adds	r5, #104	; 0x68
 800af1e:	e7ea      	b.n	800aef6 <_fwalk_sglue+0xe>

0800af20 <iprintf>:
 800af20:	b40f      	push	{r0, r1, r2, r3}
 800af22:	b507      	push	{r0, r1, r2, lr}
 800af24:	4905      	ldr	r1, [pc, #20]	; (800af3c <iprintf+0x1c>)
 800af26:	ab04      	add	r3, sp, #16
 800af28:	6808      	ldr	r0, [r1, #0]
 800af2a:	cb04      	ldmia	r3!, {r2}
 800af2c:	6881      	ldr	r1, [r0, #8]
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	f002 fc28 	bl	800d784 <_vfiprintf_r>
 800af34:	b003      	add	sp, #12
 800af36:	bc08      	pop	{r3}
 800af38:	b004      	add	sp, #16
 800af3a:	4718      	bx	r3
 800af3c:	2000024c 	.word	0x2000024c

0800af40 <_puts_r>:
 800af40:	6a03      	ldr	r3, [r0, #32]
 800af42:	b570      	push	{r4, r5, r6, lr}
 800af44:	0005      	movs	r5, r0
 800af46:	000e      	movs	r6, r1
 800af48:	6884      	ldr	r4, [r0, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <_puts_r+0x12>
 800af4e:	f7ff ffb3 	bl	800aeb8 <__sinit>
 800af52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af54:	07db      	lsls	r3, r3, #31
 800af56:	d405      	bmi.n	800af64 <_puts_r+0x24>
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	059b      	lsls	r3, r3, #22
 800af5c:	d402      	bmi.n	800af64 <_puts_r+0x24>
 800af5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af60:	f000 fa6f 	bl	800b442 <__retarget_lock_acquire_recursive>
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	071b      	lsls	r3, r3, #28
 800af68:	d502      	bpl.n	800af70 <_puts_r+0x30>
 800af6a:	6923      	ldr	r3, [r4, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d11f      	bne.n	800afb0 <_puts_r+0x70>
 800af70:	0021      	movs	r1, r4
 800af72:	0028      	movs	r0, r5
 800af74:	f000 f906 	bl	800b184 <__swsetup_r>
 800af78:	2800      	cmp	r0, #0
 800af7a:	d019      	beq.n	800afb0 <_puts_r+0x70>
 800af7c:	2501      	movs	r5, #1
 800af7e:	426d      	negs	r5, r5
 800af80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af82:	07db      	lsls	r3, r3, #31
 800af84:	d405      	bmi.n	800af92 <_puts_r+0x52>
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	059b      	lsls	r3, r3, #22
 800af8a:	d402      	bmi.n	800af92 <_puts_r+0x52>
 800af8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af8e:	f000 fa59 	bl	800b444 <__retarget_lock_release_recursive>
 800af92:	0028      	movs	r0, r5
 800af94:	bd70      	pop	{r4, r5, r6, pc}
 800af96:	3601      	adds	r6, #1
 800af98:	60a3      	str	r3, [r4, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	da04      	bge.n	800afa8 <_puts_r+0x68>
 800af9e:	69a2      	ldr	r2, [r4, #24]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	dc16      	bgt.n	800afd2 <_puts_r+0x92>
 800afa4:	290a      	cmp	r1, #10
 800afa6:	d014      	beq.n	800afd2 <_puts_r+0x92>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	6022      	str	r2, [r4, #0]
 800afae:	7019      	strb	r1, [r3, #0]
 800afb0:	68a3      	ldr	r3, [r4, #8]
 800afb2:	7831      	ldrb	r1, [r6, #0]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	2900      	cmp	r1, #0
 800afb8:	d1ed      	bne.n	800af96 <_puts_r+0x56>
 800afba:	60a3      	str	r3, [r4, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	da0f      	bge.n	800afe0 <_puts_r+0xa0>
 800afc0:	0028      	movs	r0, r5
 800afc2:	0022      	movs	r2, r4
 800afc4:	310a      	adds	r1, #10
 800afc6:	f000 f89b 	bl	800b100 <__swbuf_r>
 800afca:	250a      	movs	r5, #10
 800afcc:	3001      	adds	r0, #1
 800afce:	d1d7      	bne.n	800af80 <_puts_r+0x40>
 800afd0:	e7d4      	b.n	800af7c <_puts_r+0x3c>
 800afd2:	0022      	movs	r2, r4
 800afd4:	0028      	movs	r0, r5
 800afd6:	f000 f893 	bl	800b100 <__swbuf_r>
 800afda:	3001      	adds	r0, #1
 800afdc:	d1e8      	bne.n	800afb0 <_puts_r+0x70>
 800afde:	e7cd      	b.n	800af7c <_puts_r+0x3c>
 800afe0:	250a      	movs	r5, #10
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	1c5a      	adds	r2, r3, #1
 800afe6:	6022      	str	r2, [r4, #0]
 800afe8:	701d      	strb	r5, [r3, #0]
 800afea:	e7c9      	b.n	800af80 <_puts_r+0x40>

0800afec <puts>:
 800afec:	b510      	push	{r4, lr}
 800afee:	4b03      	ldr	r3, [pc, #12]	; (800affc <puts+0x10>)
 800aff0:	0001      	movs	r1, r0
 800aff2:	6818      	ldr	r0, [r3, #0]
 800aff4:	f7ff ffa4 	bl	800af40 <_puts_r>
 800aff8:	bd10      	pop	{r4, pc}
 800affa:	46c0      	nop			; (mov r8, r8)
 800affc:	2000024c 	.word	0x2000024c

0800b000 <sniprintf>:
 800b000:	b40c      	push	{r2, r3}
 800b002:	b530      	push	{r4, r5, lr}
 800b004:	4b17      	ldr	r3, [pc, #92]	; (800b064 <sniprintf+0x64>)
 800b006:	000c      	movs	r4, r1
 800b008:	681d      	ldr	r5, [r3, #0]
 800b00a:	b09d      	sub	sp, #116	; 0x74
 800b00c:	2900      	cmp	r1, #0
 800b00e:	da08      	bge.n	800b022 <sniprintf+0x22>
 800b010:	238b      	movs	r3, #139	; 0x8b
 800b012:	2001      	movs	r0, #1
 800b014:	602b      	str	r3, [r5, #0]
 800b016:	4240      	negs	r0, r0
 800b018:	b01d      	add	sp, #116	; 0x74
 800b01a:	bc30      	pop	{r4, r5}
 800b01c:	bc08      	pop	{r3}
 800b01e:	b002      	add	sp, #8
 800b020:	4718      	bx	r3
 800b022:	2382      	movs	r3, #130	; 0x82
 800b024:	466a      	mov	r2, sp
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	8293      	strh	r3, [r2, #20]
 800b02a:	2300      	movs	r3, #0
 800b02c:	9002      	str	r0, [sp, #8]
 800b02e:	9006      	str	r0, [sp, #24]
 800b030:	4299      	cmp	r1, r3
 800b032:	d000      	beq.n	800b036 <sniprintf+0x36>
 800b034:	1e4b      	subs	r3, r1, #1
 800b036:	9304      	str	r3, [sp, #16]
 800b038:	9307      	str	r3, [sp, #28]
 800b03a:	2301      	movs	r3, #1
 800b03c:	466a      	mov	r2, sp
 800b03e:	425b      	negs	r3, r3
 800b040:	82d3      	strh	r3, [r2, #22]
 800b042:	0028      	movs	r0, r5
 800b044:	ab21      	add	r3, sp, #132	; 0x84
 800b046:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b048:	a902      	add	r1, sp, #8
 800b04a:	9301      	str	r3, [sp, #4]
 800b04c:	f002 fa72 	bl	800d534 <_svfiprintf_r>
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	da01      	bge.n	800b058 <sniprintf+0x58>
 800b054:	238b      	movs	r3, #139	; 0x8b
 800b056:	602b      	str	r3, [r5, #0]
 800b058:	2c00      	cmp	r4, #0
 800b05a:	d0dd      	beq.n	800b018 <sniprintf+0x18>
 800b05c:	2200      	movs	r2, #0
 800b05e:	9b02      	ldr	r3, [sp, #8]
 800b060:	701a      	strb	r2, [r3, #0]
 800b062:	e7d9      	b.n	800b018 <sniprintf+0x18>
 800b064:	2000024c 	.word	0x2000024c

0800b068 <__sread>:
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	000c      	movs	r4, r1
 800b06c:	250e      	movs	r5, #14
 800b06e:	5f49      	ldrsh	r1, [r1, r5]
 800b070:	f000 f994 	bl	800b39c <_read_r>
 800b074:	2800      	cmp	r0, #0
 800b076:	db03      	blt.n	800b080 <__sread+0x18>
 800b078:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b07a:	181b      	adds	r3, r3, r0
 800b07c:	6563      	str	r3, [r4, #84]	; 0x54
 800b07e:	bd70      	pop	{r4, r5, r6, pc}
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	4a02      	ldr	r2, [pc, #8]	; (800b08c <__sread+0x24>)
 800b084:	4013      	ands	r3, r2
 800b086:	81a3      	strh	r3, [r4, #12]
 800b088:	e7f9      	b.n	800b07e <__sread+0x16>
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	ffffefff 	.word	0xffffefff

0800b090 <__swrite>:
 800b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b092:	001f      	movs	r7, r3
 800b094:	898b      	ldrh	r3, [r1, #12]
 800b096:	0005      	movs	r5, r0
 800b098:	000c      	movs	r4, r1
 800b09a:	0016      	movs	r6, r2
 800b09c:	05db      	lsls	r3, r3, #23
 800b09e:	d505      	bpl.n	800b0ac <__swrite+0x1c>
 800b0a0:	230e      	movs	r3, #14
 800b0a2:	5ec9      	ldrsh	r1, [r1, r3]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	f000 f964 	bl	800b374 <_lseek_r>
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	4a05      	ldr	r2, [pc, #20]	; (800b0c4 <__swrite+0x34>)
 800b0b0:	0028      	movs	r0, r5
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	81a3      	strh	r3, [r4, #12]
 800b0b6:	0032      	movs	r2, r6
 800b0b8:	230e      	movs	r3, #14
 800b0ba:	5ee1      	ldrsh	r1, [r4, r3]
 800b0bc:	003b      	movs	r3, r7
 800b0be:	f000 f981 	bl	800b3c4 <_write_r>
 800b0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0c4:	ffffefff 	.word	0xffffefff

0800b0c8 <__sseek>:
 800b0c8:	b570      	push	{r4, r5, r6, lr}
 800b0ca:	000c      	movs	r4, r1
 800b0cc:	250e      	movs	r5, #14
 800b0ce:	5f49      	ldrsh	r1, [r1, r5]
 800b0d0:	f000 f950 	bl	800b374 <_lseek_r>
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	1c42      	adds	r2, r0, #1
 800b0d8:	d103      	bne.n	800b0e2 <__sseek+0x1a>
 800b0da:	4a05      	ldr	r2, [pc, #20]	; (800b0f0 <__sseek+0x28>)
 800b0dc:	4013      	ands	r3, r2
 800b0de:	81a3      	strh	r3, [r4, #12]
 800b0e0:	bd70      	pop	{r4, r5, r6, pc}
 800b0e2:	2280      	movs	r2, #128	; 0x80
 800b0e4:	0152      	lsls	r2, r2, #5
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	81a3      	strh	r3, [r4, #12]
 800b0ea:	6560      	str	r0, [r4, #84]	; 0x54
 800b0ec:	e7f8      	b.n	800b0e0 <__sseek+0x18>
 800b0ee:	46c0      	nop			; (mov r8, r8)
 800b0f0:	ffffefff 	.word	0xffffefff

0800b0f4 <__sclose>:
 800b0f4:	b510      	push	{r4, lr}
 800b0f6:	230e      	movs	r3, #14
 800b0f8:	5ec9      	ldrsh	r1, [r1, r3]
 800b0fa:	f000 f929 	bl	800b350 <_close_r>
 800b0fe:	bd10      	pop	{r4, pc}

0800b100 <__swbuf_r>:
 800b100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b102:	0006      	movs	r6, r0
 800b104:	000d      	movs	r5, r1
 800b106:	0014      	movs	r4, r2
 800b108:	2800      	cmp	r0, #0
 800b10a:	d004      	beq.n	800b116 <__swbuf_r+0x16>
 800b10c:	6a03      	ldr	r3, [r0, #32]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <__swbuf_r+0x16>
 800b112:	f7ff fed1 	bl	800aeb8 <__sinit>
 800b116:	69a3      	ldr	r3, [r4, #24]
 800b118:	60a3      	str	r3, [r4, #8]
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	071b      	lsls	r3, r3, #28
 800b11e:	d528      	bpl.n	800b172 <__swbuf_r+0x72>
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d025      	beq.n	800b172 <__swbuf_r+0x72>
 800b126:	6923      	ldr	r3, [r4, #16]
 800b128:	6820      	ldr	r0, [r4, #0]
 800b12a:	b2ef      	uxtb	r7, r5
 800b12c:	1ac0      	subs	r0, r0, r3
 800b12e:	6963      	ldr	r3, [r4, #20]
 800b130:	b2ed      	uxtb	r5, r5
 800b132:	4283      	cmp	r3, r0
 800b134:	dc05      	bgt.n	800b142 <__swbuf_r+0x42>
 800b136:	0021      	movs	r1, r4
 800b138:	0030      	movs	r0, r6
 800b13a:	f002 fcc9 	bl	800dad0 <_fflush_r>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d11d      	bne.n	800b17e <__swbuf_r+0x7e>
 800b142:	68a3      	ldr	r3, [r4, #8]
 800b144:	3001      	adds	r0, #1
 800b146:	3b01      	subs	r3, #1
 800b148:	60a3      	str	r3, [r4, #8]
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	1c5a      	adds	r2, r3, #1
 800b14e:	6022      	str	r2, [r4, #0]
 800b150:	701f      	strb	r7, [r3, #0]
 800b152:	6963      	ldr	r3, [r4, #20]
 800b154:	4283      	cmp	r3, r0
 800b156:	d004      	beq.n	800b162 <__swbuf_r+0x62>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	07db      	lsls	r3, r3, #31
 800b15c:	d507      	bpl.n	800b16e <__swbuf_r+0x6e>
 800b15e:	2d0a      	cmp	r5, #10
 800b160:	d105      	bne.n	800b16e <__swbuf_r+0x6e>
 800b162:	0021      	movs	r1, r4
 800b164:	0030      	movs	r0, r6
 800b166:	f002 fcb3 	bl	800dad0 <_fflush_r>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d107      	bne.n	800b17e <__swbuf_r+0x7e>
 800b16e:	0028      	movs	r0, r5
 800b170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b172:	0021      	movs	r1, r4
 800b174:	0030      	movs	r0, r6
 800b176:	f000 f805 	bl	800b184 <__swsetup_r>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d0d3      	beq.n	800b126 <__swbuf_r+0x26>
 800b17e:	2501      	movs	r5, #1
 800b180:	426d      	negs	r5, r5
 800b182:	e7f4      	b.n	800b16e <__swbuf_r+0x6e>

0800b184 <__swsetup_r>:
 800b184:	4b30      	ldr	r3, [pc, #192]	; (800b248 <__swsetup_r+0xc4>)
 800b186:	b570      	push	{r4, r5, r6, lr}
 800b188:	0005      	movs	r5, r0
 800b18a:	6818      	ldr	r0, [r3, #0]
 800b18c:	000c      	movs	r4, r1
 800b18e:	2800      	cmp	r0, #0
 800b190:	d004      	beq.n	800b19c <__swsetup_r+0x18>
 800b192:	6a03      	ldr	r3, [r0, #32]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d101      	bne.n	800b19c <__swsetup_r+0x18>
 800b198:	f7ff fe8e 	bl	800aeb8 <__sinit>
 800b19c:	230c      	movs	r3, #12
 800b19e:	5ee2      	ldrsh	r2, [r4, r3]
 800b1a0:	b293      	uxth	r3, r2
 800b1a2:	0711      	lsls	r1, r2, #28
 800b1a4:	d423      	bmi.n	800b1ee <__swsetup_r+0x6a>
 800b1a6:	06d9      	lsls	r1, r3, #27
 800b1a8:	d407      	bmi.n	800b1ba <__swsetup_r+0x36>
 800b1aa:	2309      	movs	r3, #9
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	3337      	adds	r3, #55	; 0x37
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	81a3      	strh	r3, [r4, #12]
 800b1b6:	4240      	negs	r0, r0
 800b1b8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ba:	075b      	lsls	r3, r3, #29
 800b1bc:	d513      	bpl.n	800b1e6 <__swsetup_r+0x62>
 800b1be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1c0:	2900      	cmp	r1, #0
 800b1c2:	d008      	beq.n	800b1d6 <__swsetup_r+0x52>
 800b1c4:	0023      	movs	r3, r4
 800b1c6:	3344      	adds	r3, #68	; 0x44
 800b1c8:	4299      	cmp	r1, r3
 800b1ca:	d002      	beq.n	800b1d2 <__swsetup_r+0x4e>
 800b1cc:	0028      	movs	r0, r5
 800b1ce:	f001 f811 	bl	800c1f4 <_free_r>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b1d6:	2224      	movs	r2, #36	; 0x24
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	4393      	bics	r3, r2
 800b1dc:	81a3      	strh	r3, [r4, #12]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	6063      	str	r3, [r4, #4]
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	2308      	movs	r3, #8
 800b1e8:	89a2      	ldrh	r2, [r4, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	81a3      	strh	r3, [r4, #12]
 800b1ee:	6923      	ldr	r3, [r4, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10b      	bne.n	800b20c <__swsetup_r+0x88>
 800b1f4:	21a0      	movs	r1, #160	; 0xa0
 800b1f6:	2280      	movs	r2, #128	; 0x80
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	0089      	lsls	r1, r1, #2
 800b1fc:	0092      	lsls	r2, r2, #2
 800b1fe:	400b      	ands	r3, r1
 800b200:	4293      	cmp	r3, r2
 800b202:	d003      	beq.n	800b20c <__swsetup_r+0x88>
 800b204:	0021      	movs	r1, r4
 800b206:	0028      	movs	r0, r5
 800b208:	f002 fcc6 	bl	800db98 <__smakebuf_r>
 800b20c:	220c      	movs	r2, #12
 800b20e:	5ea3      	ldrsh	r3, [r4, r2]
 800b210:	2001      	movs	r0, #1
 800b212:	001a      	movs	r2, r3
 800b214:	b299      	uxth	r1, r3
 800b216:	4002      	ands	r2, r0
 800b218:	4203      	tst	r3, r0
 800b21a:	d00f      	beq.n	800b23c <__swsetup_r+0xb8>
 800b21c:	2200      	movs	r2, #0
 800b21e:	60a2      	str	r2, [r4, #8]
 800b220:	6962      	ldr	r2, [r4, #20]
 800b222:	4252      	negs	r2, r2
 800b224:	61a2      	str	r2, [r4, #24]
 800b226:	2000      	movs	r0, #0
 800b228:	6922      	ldr	r2, [r4, #16]
 800b22a:	4282      	cmp	r2, r0
 800b22c:	d1c4      	bne.n	800b1b8 <__swsetup_r+0x34>
 800b22e:	0609      	lsls	r1, r1, #24
 800b230:	d5c2      	bpl.n	800b1b8 <__swsetup_r+0x34>
 800b232:	2240      	movs	r2, #64	; 0x40
 800b234:	4313      	orrs	r3, r2
 800b236:	81a3      	strh	r3, [r4, #12]
 800b238:	3801      	subs	r0, #1
 800b23a:	e7bd      	b.n	800b1b8 <__swsetup_r+0x34>
 800b23c:	0788      	lsls	r0, r1, #30
 800b23e:	d400      	bmi.n	800b242 <__swsetup_r+0xbe>
 800b240:	6962      	ldr	r2, [r4, #20]
 800b242:	60a2      	str	r2, [r4, #8]
 800b244:	e7ef      	b.n	800b226 <__swsetup_r+0xa2>
 800b246:	46c0      	nop			; (mov r8, r8)
 800b248:	2000024c 	.word	0x2000024c

0800b24c <memset>:
 800b24c:	0003      	movs	r3, r0
 800b24e:	1882      	adds	r2, r0, r2
 800b250:	4293      	cmp	r3, r2
 800b252:	d100      	bne.n	800b256 <memset+0xa>
 800b254:	4770      	bx	lr
 800b256:	7019      	strb	r1, [r3, #0]
 800b258:	3301      	adds	r3, #1
 800b25a:	e7f9      	b.n	800b250 <memset+0x4>

0800b25c <strncmp>:
 800b25c:	b530      	push	{r4, r5, lr}
 800b25e:	0005      	movs	r5, r0
 800b260:	1e10      	subs	r0, r2, #0
 800b262:	d00b      	beq.n	800b27c <strncmp+0x20>
 800b264:	2400      	movs	r4, #0
 800b266:	3a01      	subs	r2, #1
 800b268:	5d2b      	ldrb	r3, [r5, r4]
 800b26a:	5d08      	ldrb	r0, [r1, r4]
 800b26c:	4283      	cmp	r3, r0
 800b26e:	d104      	bne.n	800b27a <strncmp+0x1e>
 800b270:	42a2      	cmp	r2, r4
 800b272:	d002      	beq.n	800b27a <strncmp+0x1e>
 800b274:	3401      	adds	r4, #1
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1f6      	bne.n	800b268 <strncmp+0xc>
 800b27a:	1a18      	subs	r0, r3, r0
 800b27c:	bd30      	pop	{r4, r5, pc}
	...

0800b280 <strtok>:
 800b280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b282:	4b16      	ldr	r3, [pc, #88]	; (800b2dc <strtok+0x5c>)
 800b284:	0005      	movs	r5, r0
 800b286:	681f      	ldr	r7, [r3, #0]
 800b288:	000e      	movs	r6, r1
 800b28a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800b28c:	2c00      	cmp	r4, #0
 800b28e:	d11d      	bne.n	800b2cc <strtok+0x4c>
 800b290:	2050      	movs	r0, #80	; 0x50
 800b292:	f001 fb55 	bl	800c940 <malloc>
 800b296:	1e02      	subs	r2, r0, #0
 800b298:	6478      	str	r0, [r7, #68]	; 0x44
 800b29a:	d104      	bne.n	800b2a6 <strtok+0x26>
 800b29c:	215b      	movs	r1, #91	; 0x5b
 800b29e:	4b10      	ldr	r3, [pc, #64]	; (800b2e0 <strtok+0x60>)
 800b2a0:	4810      	ldr	r0, [pc, #64]	; (800b2e4 <strtok+0x64>)
 800b2a2:	f000 f8eb 	bl	800b47c <__assert_func>
 800b2a6:	6004      	str	r4, [r0, #0]
 800b2a8:	6044      	str	r4, [r0, #4]
 800b2aa:	6084      	str	r4, [r0, #8]
 800b2ac:	60c4      	str	r4, [r0, #12]
 800b2ae:	6104      	str	r4, [r0, #16]
 800b2b0:	6144      	str	r4, [r0, #20]
 800b2b2:	6184      	str	r4, [r0, #24]
 800b2b4:	6284      	str	r4, [r0, #40]	; 0x28
 800b2b6:	62c4      	str	r4, [r0, #44]	; 0x2c
 800b2b8:	6304      	str	r4, [r0, #48]	; 0x30
 800b2ba:	6344      	str	r4, [r0, #52]	; 0x34
 800b2bc:	6384      	str	r4, [r0, #56]	; 0x38
 800b2be:	63c4      	str	r4, [r0, #60]	; 0x3c
 800b2c0:	6404      	str	r4, [r0, #64]	; 0x40
 800b2c2:	6444      	str	r4, [r0, #68]	; 0x44
 800b2c4:	6484      	str	r4, [r0, #72]	; 0x48
 800b2c6:	64c4      	str	r4, [r0, #76]	; 0x4c
 800b2c8:	7704      	strb	r4, [r0, #28]
 800b2ca:	6244      	str	r4, [r0, #36]	; 0x24
 800b2cc:	0031      	movs	r1, r6
 800b2ce:	0028      	movs	r0, r5
 800b2d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	f000 f808 	bl	800b2e8 <__strtok_r>
 800b2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2da:	46c0      	nop			; (mov r8, r8)
 800b2dc:	2000024c 	.word	0x2000024c
 800b2e0:	0800e1c4 	.word	0x0800e1c4
 800b2e4:	0800e1db 	.word	0x0800e1db

0800b2e8 <__strtok_r>:
 800b2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d102      	bne.n	800b2f4 <__strtok_r+0xc>
 800b2ee:	6810      	ldr	r0, [r2, #0]
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d013      	beq.n	800b31c <__strtok_r+0x34>
 800b2f4:	0004      	movs	r4, r0
 800b2f6:	0020      	movs	r0, r4
 800b2f8:	000e      	movs	r6, r1
 800b2fa:	7805      	ldrb	r5, [r0, #0]
 800b2fc:	3401      	adds	r4, #1
 800b2fe:	7837      	ldrb	r7, [r6, #0]
 800b300:	2f00      	cmp	r7, #0
 800b302:	d104      	bne.n	800b30e <__strtok_r+0x26>
 800b304:	2d00      	cmp	r5, #0
 800b306:	d10f      	bne.n	800b328 <__strtok_r+0x40>
 800b308:	0028      	movs	r0, r5
 800b30a:	6015      	str	r5, [r2, #0]
 800b30c:	e006      	b.n	800b31c <__strtok_r+0x34>
 800b30e:	3601      	adds	r6, #1
 800b310:	42bd      	cmp	r5, r7
 800b312:	d1f4      	bne.n	800b2fe <__strtok_r+0x16>
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1ee      	bne.n	800b2f6 <__strtok_r+0xe>
 800b318:	6014      	str	r4, [r2, #0]
 800b31a:	7003      	strb	r3, [r0, #0]
 800b31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b31e:	002f      	movs	r7, r5
 800b320:	e00f      	b.n	800b342 <__strtok_r+0x5a>
 800b322:	3301      	adds	r3, #1
 800b324:	2e00      	cmp	r6, #0
 800b326:	d104      	bne.n	800b332 <__strtok_r+0x4a>
 800b328:	0023      	movs	r3, r4
 800b32a:	3401      	adds	r4, #1
 800b32c:	781d      	ldrb	r5, [r3, #0]
 800b32e:	0027      	movs	r7, r4
 800b330:	000b      	movs	r3, r1
 800b332:	781e      	ldrb	r6, [r3, #0]
 800b334:	42b5      	cmp	r5, r6
 800b336:	d1f4      	bne.n	800b322 <__strtok_r+0x3a>
 800b338:	2d00      	cmp	r5, #0
 800b33a:	d0f0      	beq.n	800b31e <__strtok_r+0x36>
 800b33c:	2300      	movs	r3, #0
 800b33e:	3c01      	subs	r4, #1
 800b340:	7023      	strb	r3, [r4, #0]
 800b342:	6017      	str	r7, [r2, #0]
 800b344:	e7ea      	b.n	800b31c <__strtok_r+0x34>
	...

0800b348 <_localeconv_r>:
 800b348:	4800      	ldr	r0, [pc, #0]	; (800b34c <_localeconv_r+0x4>)
 800b34a:	4770      	bx	lr
 800b34c:	20000184 	.word	0x20000184

0800b350 <_close_r>:
 800b350:	2300      	movs	r3, #0
 800b352:	b570      	push	{r4, r5, r6, lr}
 800b354:	4d06      	ldr	r5, [pc, #24]	; (800b370 <_close_r+0x20>)
 800b356:	0004      	movs	r4, r0
 800b358:	0008      	movs	r0, r1
 800b35a:	602b      	str	r3, [r5, #0]
 800b35c:	f7f8 f923 	bl	80035a6 <_close>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d103      	bne.n	800b36c <_close_r+0x1c>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d000      	beq.n	800b36c <_close_r+0x1c>
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	bd70      	pop	{r4, r5, r6, pc}
 800b36e:	46c0      	nop			; (mov r8, r8)
 800b370:	200007b4 	.word	0x200007b4

0800b374 <_lseek_r>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	0004      	movs	r4, r0
 800b378:	0008      	movs	r0, r1
 800b37a:	0011      	movs	r1, r2
 800b37c:	001a      	movs	r2, r3
 800b37e:	2300      	movs	r3, #0
 800b380:	4d05      	ldr	r5, [pc, #20]	; (800b398 <_lseek_r+0x24>)
 800b382:	602b      	str	r3, [r5, #0]
 800b384:	f7f8 f930 	bl	80035e8 <_lseek>
 800b388:	1c43      	adds	r3, r0, #1
 800b38a:	d103      	bne.n	800b394 <_lseek_r+0x20>
 800b38c:	682b      	ldr	r3, [r5, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d000      	beq.n	800b394 <_lseek_r+0x20>
 800b392:	6023      	str	r3, [r4, #0]
 800b394:	bd70      	pop	{r4, r5, r6, pc}
 800b396:	46c0      	nop			; (mov r8, r8)
 800b398:	200007b4 	.word	0x200007b4

0800b39c <_read_r>:
 800b39c:	b570      	push	{r4, r5, r6, lr}
 800b39e:	0004      	movs	r4, r0
 800b3a0:	0008      	movs	r0, r1
 800b3a2:	0011      	movs	r1, r2
 800b3a4:	001a      	movs	r2, r3
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4d05      	ldr	r5, [pc, #20]	; (800b3c0 <_read_r+0x24>)
 800b3aa:	602b      	str	r3, [r5, #0]
 800b3ac:	f7f8 f8c2 	bl	8003534 <_read>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d103      	bne.n	800b3bc <_read_r+0x20>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d000      	beq.n	800b3bc <_read_r+0x20>
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	bd70      	pop	{r4, r5, r6, pc}
 800b3be:	46c0      	nop			; (mov r8, r8)
 800b3c0:	200007b4 	.word	0x200007b4

0800b3c4 <_write_r>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	0004      	movs	r4, r0
 800b3c8:	0008      	movs	r0, r1
 800b3ca:	0011      	movs	r1, r2
 800b3cc:	001a      	movs	r2, r3
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	4d05      	ldr	r5, [pc, #20]	; (800b3e8 <_write_r+0x24>)
 800b3d2:	602b      	str	r3, [r5, #0]
 800b3d4:	f7f8 f8cb 	bl	800356e <_write>
 800b3d8:	1c43      	adds	r3, r0, #1
 800b3da:	d103      	bne.n	800b3e4 <_write_r+0x20>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d000      	beq.n	800b3e4 <_write_r+0x20>
 800b3e2:	6023      	str	r3, [r4, #0]
 800b3e4:	bd70      	pop	{r4, r5, r6, pc}
 800b3e6:	46c0      	nop			; (mov r8, r8)
 800b3e8:	200007b4 	.word	0x200007b4

0800b3ec <__errno>:
 800b3ec:	4b01      	ldr	r3, [pc, #4]	; (800b3f4 <__errno+0x8>)
 800b3ee:	6818      	ldr	r0, [r3, #0]
 800b3f0:	4770      	bx	lr
 800b3f2:	46c0      	nop			; (mov r8, r8)
 800b3f4:	2000024c 	.word	0x2000024c

0800b3f8 <__libc_init_array>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	2600      	movs	r6, #0
 800b3fc:	4c0c      	ldr	r4, [pc, #48]	; (800b430 <__libc_init_array+0x38>)
 800b3fe:	4d0d      	ldr	r5, [pc, #52]	; (800b434 <__libc_init_array+0x3c>)
 800b400:	1b64      	subs	r4, r4, r5
 800b402:	10a4      	asrs	r4, r4, #2
 800b404:	42a6      	cmp	r6, r4
 800b406:	d109      	bne.n	800b41c <__libc_init_array+0x24>
 800b408:	2600      	movs	r6, #0
 800b40a:	f002 fd03 	bl	800de14 <_init>
 800b40e:	4c0a      	ldr	r4, [pc, #40]	; (800b438 <__libc_init_array+0x40>)
 800b410:	4d0a      	ldr	r5, [pc, #40]	; (800b43c <__libc_init_array+0x44>)
 800b412:	1b64      	subs	r4, r4, r5
 800b414:	10a4      	asrs	r4, r4, #2
 800b416:	42a6      	cmp	r6, r4
 800b418:	d105      	bne.n	800b426 <__libc_init_array+0x2e>
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	00b3      	lsls	r3, r6, #2
 800b41e:	58eb      	ldr	r3, [r5, r3]
 800b420:	4798      	blx	r3
 800b422:	3601      	adds	r6, #1
 800b424:	e7ee      	b.n	800b404 <__libc_init_array+0xc>
 800b426:	00b3      	lsls	r3, r6, #2
 800b428:	58eb      	ldr	r3, [r5, r3]
 800b42a:	4798      	blx	r3
 800b42c:	3601      	adds	r6, #1
 800b42e:	e7f2      	b.n	800b416 <__libc_init_array+0x1e>
 800b430:	0800e5b8 	.word	0x0800e5b8
 800b434:	0800e5b8 	.word	0x0800e5b8
 800b438:	0800e5bc 	.word	0x0800e5bc
 800b43c:	0800e5b8 	.word	0x0800e5b8

0800b440 <__retarget_lock_init_recursive>:
 800b440:	4770      	bx	lr

0800b442 <__retarget_lock_acquire_recursive>:
 800b442:	4770      	bx	lr

0800b444 <__retarget_lock_release_recursive>:
 800b444:	4770      	bx	lr

0800b446 <memchr>:
 800b446:	b2c9      	uxtb	r1, r1
 800b448:	1882      	adds	r2, r0, r2
 800b44a:	4290      	cmp	r0, r2
 800b44c:	d101      	bne.n	800b452 <memchr+0xc>
 800b44e:	2000      	movs	r0, #0
 800b450:	4770      	bx	lr
 800b452:	7803      	ldrb	r3, [r0, #0]
 800b454:	428b      	cmp	r3, r1
 800b456:	d0fb      	beq.n	800b450 <memchr+0xa>
 800b458:	3001      	adds	r0, #1
 800b45a:	e7f6      	b.n	800b44a <memchr+0x4>

0800b45c <memcpy>:
 800b45c:	2300      	movs	r3, #0
 800b45e:	b510      	push	{r4, lr}
 800b460:	429a      	cmp	r2, r3
 800b462:	d100      	bne.n	800b466 <memcpy+0xa>
 800b464:	bd10      	pop	{r4, pc}
 800b466:	5ccc      	ldrb	r4, [r1, r3]
 800b468:	54c4      	strb	r4, [r0, r3]
 800b46a:	3301      	adds	r3, #1
 800b46c:	e7f8      	b.n	800b460 <memcpy+0x4>
	...

0800b470 <nan>:
 800b470:	2000      	movs	r0, #0
 800b472:	4901      	ldr	r1, [pc, #4]	; (800b478 <nan+0x8>)
 800b474:	4770      	bx	lr
 800b476:	46c0      	nop			; (mov r8, r8)
 800b478:	7ff80000 	.word	0x7ff80000

0800b47c <__assert_func>:
 800b47c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b47e:	0014      	movs	r4, r2
 800b480:	001a      	movs	r2, r3
 800b482:	4b09      	ldr	r3, [pc, #36]	; (800b4a8 <__assert_func+0x2c>)
 800b484:	0005      	movs	r5, r0
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	000e      	movs	r6, r1
 800b48a:	68d8      	ldr	r0, [r3, #12]
 800b48c:	4b07      	ldr	r3, [pc, #28]	; (800b4ac <__assert_func+0x30>)
 800b48e:	2c00      	cmp	r4, #0
 800b490:	d101      	bne.n	800b496 <__assert_func+0x1a>
 800b492:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <__assert_func+0x34>)
 800b494:	001c      	movs	r4, r3
 800b496:	4907      	ldr	r1, [pc, #28]	; (800b4b4 <__assert_func+0x38>)
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	9402      	str	r4, [sp, #8]
 800b49c:	002b      	movs	r3, r5
 800b49e:	9600      	str	r6, [sp, #0]
 800b4a0:	f002 fb42 	bl	800db28 <fiprintf>
 800b4a4:	f002 fc00 	bl	800dca8 <abort>
 800b4a8:	2000024c 	.word	0x2000024c
 800b4ac:	0800e23d 	.word	0x0800e23d
 800b4b0:	0800e278 	.word	0x0800e278
 800b4b4:	0800e24a 	.word	0x0800e24a

0800b4b8 <quorem>:
 800b4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ba:	6902      	ldr	r2, [r0, #16]
 800b4bc:	690b      	ldr	r3, [r1, #16]
 800b4be:	b089      	sub	sp, #36	; 0x24
 800b4c0:	0007      	movs	r7, r0
 800b4c2:	9104      	str	r1, [sp, #16]
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	db69      	blt.n	800b59e <quorem+0xe6>
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	009c      	lsls	r4, r3, #2
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	000b      	movs	r3, r1
 800b4d2:	3314      	adds	r3, #20
 800b4d4:	9306      	str	r3, [sp, #24]
 800b4d6:	191b      	adds	r3, r3, r4
 800b4d8:	9305      	str	r3, [sp, #20]
 800b4da:	003b      	movs	r3, r7
 800b4dc:	3314      	adds	r3, #20
 800b4de:	9303      	str	r3, [sp, #12]
 800b4e0:	191c      	adds	r4, r3, r4
 800b4e2:	9b05      	ldr	r3, [sp, #20]
 800b4e4:	6826      	ldr	r6, [r4, #0]
 800b4e6:	681d      	ldr	r5, [r3, #0]
 800b4e8:	0030      	movs	r0, r6
 800b4ea:	3501      	adds	r5, #1
 800b4ec:	0029      	movs	r1, r5
 800b4ee:	f7f4 fe2d 	bl	800014c <__udivsi3>
 800b4f2:	9002      	str	r0, [sp, #8]
 800b4f4:	42ae      	cmp	r6, r5
 800b4f6:	d329      	bcc.n	800b54c <quorem+0x94>
 800b4f8:	9b06      	ldr	r3, [sp, #24]
 800b4fa:	2600      	movs	r6, #0
 800b4fc:	469c      	mov	ip, r3
 800b4fe:	9d03      	ldr	r5, [sp, #12]
 800b500:	9606      	str	r6, [sp, #24]
 800b502:	4662      	mov	r2, ip
 800b504:	ca08      	ldmia	r2!, {r3}
 800b506:	6828      	ldr	r0, [r5, #0]
 800b508:	4694      	mov	ip, r2
 800b50a:	9a02      	ldr	r2, [sp, #8]
 800b50c:	b299      	uxth	r1, r3
 800b50e:	4351      	muls	r1, r2
 800b510:	0c1b      	lsrs	r3, r3, #16
 800b512:	4353      	muls	r3, r2
 800b514:	1989      	adds	r1, r1, r6
 800b516:	0c0a      	lsrs	r2, r1, #16
 800b518:	189b      	adds	r3, r3, r2
 800b51a:	9307      	str	r3, [sp, #28]
 800b51c:	0c1e      	lsrs	r6, r3, #16
 800b51e:	9b06      	ldr	r3, [sp, #24]
 800b520:	b282      	uxth	r2, r0
 800b522:	18d2      	adds	r2, r2, r3
 800b524:	466b      	mov	r3, sp
 800b526:	b289      	uxth	r1, r1
 800b528:	8b9b      	ldrh	r3, [r3, #28]
 800b52a:	1a52      	subs	r2, r2, r1
 800b52c:	0c01      	lsrs	r1, r0, #16
 800b52e:	1ac9      	subs	r1, r1, r3
 800b530:	1413      	asrs	r3, r2, #16
 800b532:	18cb      	adds	r3, r1, r3
 800b534:	1419      	asrs	r1, r3, #16
 800b536:	b292      	uxth	r2, r2
 800b538:	041b      	lsls	r3, r3, #16
 800b53a:	4313      	orrs	r3, r2
 800b53c:	c508      	stmia	r5!, {r3}
 800b53e:	9b05      	ldr	r3, [sp, #20]
 800b540:	9106      	str	r1, [sp, #24]
 800b542:	4563      	cmp	r3, ip
 800b544:	d2dd      	bcs.n	800b502 <quorem+0x4a>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d030      	beq.n	800b5ae <quorem+0xf6>
 800b54c:	0038      	movs	r0, r7
 800b54e:	9904      	ldr	r1, [sp, #16]
 800b550:	f001 fd98 	bl	800d084 <__mcmp>
 800b554:	2800      	cmp	r0, #0
 800b556:	db21      	blt.n	800b59c <quorem+0xe4>
 800b558:	0038      	movs	r0, r7
 800b55a:	2600      	movs	r6, #0
 800b55c:	9b02      	ldr	r3, [sp, #8]
 800b55e:	9c04      	ldr	r4, [sp, #16]
 800b560:	3301      	adds	r3, #1
 800b562:	9302      	str	r3, [sp, #8]
 800b564:	3014      	adds	r0, #20
 800b566:	3414      	adds	r4, #20
 800b568:	6803      	ldr	r3, [r0, #0]
 800b56a:	cc02      	ldmia	r4!, {r1}
 800b56c:	b29d      	uxth	r5, r3
 800b56e:	19ad      	adds	r5, r5, r6
 800b570:	b28a      	uxth	r2, r1
 800b572:	1aaa      	subs	r2, r5, r2
 800b574:	0c09      	lsrs	r1, r1, #16
 800b576:	0c1b      	lsrs	r3, r3, #16
 800b578:	1a5b      	subs	r3, r3, r1
 800b57a:	1411      	asrs	r1, r2, #16
 800b57c:	185b      	adds	r3, r3, r1
 800b57e:	141e      	asrs	r6, r3, #16
 800b580:	b292      	uxth	r2, r2
 800b582:	041b      	lsls	r3, r3, #16
 800b584:	4313      	orrs	r3, r2
 800b586:	c008      	stmia	r0!, {r3}
 800b588:	9b05      	ldr	r3, [sp, #20]
 800b58a:	42a3      	cmp	r3, r4
 800b58c:	d2ec      	bcs.n	800b568 <quorem+0xb0>
 800b58e:	9b01      	ldr	r3, [sp, #4]
 800b590:	9a03      	ldr	r2, [sp, #12]
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	18d3      	adds	r3, r2, r3
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	2a00      	cmp	r2, #0
 800b59a:	d015      	beq.n	800b5c8 <quorem+0x110>
 800b59c:	9802      	ldr	r0, [sp, #8]
 800b59e:	b009      	add	sp, #36	; 0x24
 800b5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d106      	bne.n	800b5b6 <quorem+0xfe>
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	9b03      	ldr	r3, [sp, #12]
 800b5b0:	3c04      	subs	r4, #4
 800b5b2:	42a3      	cmp	r3, r4
 800b5b4:	d3f5      	bcc.n	800b5a2 <quorem+0xea>
 800b5b6:	9b01      	ldr	r3, [sp, #4]
 800b5b8:	613b      	str	r3, [r7, #16]
 800b5ba:	e7c7      	b.n	800b54c <quorem+0x94>
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	2a00      	cmp	r2, #0
 800b5c0:	d106      	bne.n	800b5d0 <quorem+0x118>
 800b5c2:	9a01      	ldr	r2, [sp, #4]
 800b5c4:	3a01      	subs	r2, #1
 800b5c6:	9201      	str	r2, [sp, #4]
 800b5c8:	9a03      	ldr	r2, [sp, #12]
 800b5ca:	3b04      	subs	r3, #4
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d3f5      	bcc.n	800b5bc <quorem+0x104>
 800b5d0:	9b01      	ldr	r3, [sp, #4]
 800b5d2:	613b      	str	r3, [r7, #16]
 800b5d4:	e7e2      	b.n	800b59c <quorem+0xe4>
	...

0800b5d8 <_dtoa_r>:
 800b5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5da:	0014      	movs	r4, r2
 800b5dc:	001d      	movs	r5, r3
 800b5de:	69c6      	ldr	r6, [r0, #28]
 800b5e0:	b09d      	sub	sp, #116	; 0x74
 800b5e2:	9408      	str	r4, [sp, #32]
 800b5e4:	9509      	str	r5, [sp, #36]	; 0x24
 800b5e6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800b5e8:	9004      	str	r0, [sp, #16]
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	d10f      	bne.n	800b60e <_dtoa_r+0x36>
 800b5ee:	2010      	movs	r0, #16
 800b5f0:	f001 f9a6 	bl	800c940 <malloc>
 800b5f4:	9b04      	ldr	r3, [sp, #16]
 800b5f6:	1e02      	subs	r2, r0, #0
 800b5f8:	61d8      	str	r0, [r3, #28]
 800b5fa:	d104      	bne.n	800b606 <_dtoa_r+0x2e>
 800b5fc:	21ef      	movs	r1, #239	; 0xef
 800b5fe:	4bc6      	ldr	r3, [pc, #792]	; (800b918 <_dtoa_r+0x340>)
 800b600:	48c6      	ldr	r0, [pc, #792]	; (800b91c <_dtoa_r+0x344>)
 800b602:	f7ff ff3b 	bl	800b47c <__assert_func>
 800b606:	6046      	str	r6, [r0, #4]
 800b608:	6086      	str	r6, [r0, #8]
 800b60a:	6006      	str	r6, [r0, #0]
 800b60c:	60c6      	str	r6, [r0, #12]
 800b60e:	9b04      	ldr	r3, [sp, #16]
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	6819      	ldr	r1, [r3, #0]
 800b614:	2900      	cmp	r1, #0
 800b616:	d00b      	beq.n	800b630 <_dtoa_r+0x58>
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	2301      	movs	r3, #1
 800b61c:	4093      	lsls	r3, r2
 800b61e:	604a      	str	r2, [r1, #4]
 800b620:	608b      	str	r3, [r1, #8]
 800b622:	9804      	ldr	r0, [sp, #16]
 800b624:	f001 faa0 	bl	800cb68 <_Bfree>
 800b628:	2200      	movs	r2, #0
 800b62a:	9b04      	ldr	r3, [sp, #16]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	2d00      	cmp	r5, #0
 800b632:	da1e      	bge.n	800b672 <_dtoa_r+0x9a>
 800b634:	2301      	movs	r3, #1
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	006b      	lsls	r3, r5, #1
 800b63a:	085b      	lsrs	r3, r3, #1
 800b63c:	9309      	str	r3, [sp, #36]	; 0x24
 800b63e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b640:	4bb7      	ldr	r3, [pc, #732]	; (800b920 <_dtoa_r+0x348>)
 800b642:	4ab7      	ldr	r2, [pc, #732]	; (800b920 <_dtoa_r+0x348>)
 800b644:	403b      	ands	r3, r7
 800b646:	4293      	cmp	r3, r2
 800b648:	d116      	bne.n	800b678 <_dtoa_r+0xa0>
 800b64a:	4bb6      	ldr	r3, [pc, #728]	; (800b924 <_dtoa_r+0x34c>)
 800b64c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b64e:	6013      	str	r3, [r2, #0]
 800b650:	033b      	lsls	r3, r7, #12
 800b652:	0b1b      	lsrs	r3, r3, #12
 800b654:	4323      	orrs	r3, r4
 800b656:	d101      	bne.n	800b65c <_dtoa_r+0x84>
 800b658:	f000 fdb5 	bl	800c1c6 <_dtoa_r+0xbee>
 800b65c:	4bb2      	ldr	r3, [pc, #712]	; (800b928 <_dtoa_r+0x350>)
 800b65e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b660:	9306      	str	r3, [sp, #24]
 800b662:	2a00      	cmp	r2, #0
 800b664:	d002      	beq.n	800b66c <_dtoa_r+0x94>
 800b666:	4bb1      	ldr	r3, [pc, #708]	; (800b92c <_dtoa_r+0x354>)
 800b668:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	9806      	ldr	r0, [sp, #24]
 800b66e:	b01d      	add	sp, #116	; 0x74
 800b670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b672:	2300      	movs	r3, #0
 800b674:	603b      	str	r3, [r7, #0]
 800b676:	e7e2      	b.n	800b63e <_dtoa_r+0x66>
 800b678:	9a08      	ldr	r2, [sp, #32]
 800b67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67c:	9210      	str	r2, [sp, #64]	; 0x40
 800b67e:	9311      	str	r3, [sp, #68]	; 0x44
 800b680:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b682:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b684:	2200      	movs	r2, #0
 800b686:	2300      	movs	r3, #0
 800b688:	f7f4 fee6 	bl	8000458 <__aeabi_dcmpeq>
 800b68c:	1e06      	subs	r6, r0, #0
 800b68e:	d009      	beq.n	800b6a4 <_dtoa_r+0xcc>
 800b690:	2301      	movs	r3, #1
 800b692:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	4ba6      	ldr	r3, [pc, #664]	; (800b930 <_dtoa_r+0x358>)
 800b698:	9306      	str	r3, [sp, #24]
 800b69a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d0e5      	beq.n	800b66c <_dtoa_r+0x94>
 800b6a0:	4ba4      	ldr	r3, [pc, #656]	; (800b934 <_dtoa_r+0x35c>)
 800b6a2:	e7e1      	b.n	800b668 <_dtoa_r+0x90>
 800b6a4:	ab1a      	add	r3, sp, #104	; 0x68
 800b6a6:	9301      	str	r3, [sp, #4]
 800b6a8:	ab1b      	add	r3, sp, #108	; 0x6c
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	9804      	ldr	r0, [sp, #16]
 800b6ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b6b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6b2:	f001 fe03 	bl	800d2bc <__d2b>
 800b6b6:	007a      	lsls	r2, r7, #1
 800b6b8:	9005      	str	r0, [sp, #20]
 800b6ba:	0d52      	lsrs	r2, r2, #21
 800b6bc:	d100      	bne.n	800b6c0 <_dtoa_r+0xe8>
 800b6be:	e07b      	b.n	800b7b8 <_dtoa_r+0x1e0>
 800b6c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6c2:	9617      	str	r6, [sp, #92]	; 0x5c
 800b6c4:	0319      	lsls	r1, r3, #12
 800b6c6:	4b9c      	ldr	r3, [pc, #624]	; (800b938 <_dtoa_r+0x360>)
 800b6c8:	0b09      	lsrs	r1, r1, #12
 800b6ca:	430b      	orrs	r3, r1
 800b6cc:	499b      	ldr	r1, [pc, #620]	; (800b93c <_dtoa_r+0x364>)
 800b6ce:	1857      	adds	r7, r2, r1
 800b6d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b6d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b6d4:	0019      	movs	r1, r3
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	4b99      	ldr	r3, [pc, #612]	; (800b940 <_dtoa_r+0x368>)
 800b6da:	f7f7 f8c3 	bl	8002864 <__aeabi_dsub>
 800b6de:	4a99      	ldr	r2, [pc, #612]	; (800b944 <_dtoa_r+0x36c>)
 800b6e0:	4b99      	ldr	r3, [pc, #612]	; (800b948 <_dtoa_r+0x370>)
 800b6e2:	f7f6 fdfd 	bl	80022e0 <__aeabi_dmul>
 800b6e6:	4a99      	ldr	r2, [pc, #612]	; (800b94c <_dtoa_r+0x374>)
 800b6e8:	4b99      	ldr	r3, [pc, #612]	; (800b950 <_dtoa_r+0x378>)
 800b6ea:	f7f5 fe9f 	bl	800142c <__aeabi_dadd>
 800b6ee:	0004      	movs	r4, r0
 800b6f0:	0038      	movs	r0, r7
 800b6f2:	000d      	movs	r5, r1
 800b6f4:	f7f7 fc8c 	bl	8003010 <__aeabi_i2d>
 800b6f8:	4a96      	ldr	r2, [pc, #600]	; (800b954 <_dtoa_r+0x37c>)
 800b6fa:	4b97      	ldr	r3, [pc, #604]	; (800b958 <_dtoa_r+0x380>)
 800b6fc:	f7f6 fdf0 	bl	80022e0 <__aeabi_dmul>
 800b700:	0002      	movs	r2, r0
 800b702:	000b      	movs	r3, r1
 800b704:	0020      	movs	r0, r4
 800b706:	0029      	movs	r1, r5
 800b708:	f7f5 fe90 	bl	800142c <__aeabi_dadd>
 800b70c:	0004      	movs	r4, r0
 800b70e:	000d      	movs	r5, r1
 800b710:	f7f7 fc48 	bl	8002fa4 <__aeabi_d2iz>
 800b714:	2200      	movs	r2, #0
 800b716:	9003      	str	r0, [sp, #12]
 800b718:	2300      	movs	r3, #0
 800b71a:	0020      	movs	r0, r4
 800b71c:	0029      	movs	r1, r5
 800b71e:	f7f4 fea1 	bl	8000464 <__aeabi_dcmplt>
 800b722:	2800      	cmp	r0, #0
 800b724:	d00b      	beq.n	800b73e <_dtoa_r+0x166>
 800b726:	9803      	ldr	r0, [sp, #12]
 800b728:	f7f7 fc72 	bl	8003010 <__aeabi_i2d>
 800b72c:	002b      	movs	r3, r5
 800b72e:	0022      	movs	r2, r4
 800b730:	f7f4 fe92 	bl	8000458 <__aeabi_dcmpeq>
 800b734:	4243      	negs	r3, r0
 800b736:	4158      	adcs	r0, r3
 800b738:	9b03      	ldr	r3, [sp, #12]
 800b73a:	1a1b      	subs	r3, r3, r0
 800b73c:	9303      	str	r3, [sp, #12]
 800b73e:	2301      	movs	r3, #1
 800b740:	9316      	str	r3, [sp, #88]	; 0x58
 800b742:	9b03      	ldr	r3, [sp, #12]
 800b744:	2b16      	cmp	r3, #22
 800b746:	d810      	bhi.n	800b76a <_dtoa_r+0x192>
 800b748:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b74a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b74c:	9a03      	ldr	r2, [sp, #12]
 800b74e:	4b83      	ldr	r3, [pc, #524]	; (800b95c <_dtoa_r+0x384>)
 800b750:	00d2      	lsls	r2, r2, #3
 800b752:	189b      	adds	r3, r3, r2
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	f7f4 fe84 	bl	8000464 <__aeabi_dcmplt>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d047      	beq.n	800b7f0 <_dtoa_r+0x218>
 800b760:	9b03      	ldr	r3, [sp, #12]
 800b762:	3b01      	subs	r3, #1
 800b764:	9303      	str	r3, [sp, #12]
 800b766:	2300      	movs	r3, #0
 800b768:	9316      	str	r3, [sp, #88]	; 0x58
 800b76a:	2200      	movs	r2, #0
 800b76c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b76e:	920a      	str	r2, [sp, #40]	; 0x28
 800b770:	1bdb      	subs	r3, r3, r7
 800b772:	1e5a      	subs	r2, r3, #1
 800b774:	d53e      	bpl.n	800b7f4 <_dtoa_r+0x21c>
 800b776:	2201      	movs	r2, #1
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	930a      	str	r3, [sp, #40]	; 0x28
 800b77c:	2300      	movs	r3, #0
 800b77e:	930c      	str	r3, [sp, #48]	; 0x30
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	db38      	blt.n	800b7f8 <_dtoa_r+0x220>
 800b786:	9a03      	ldr	r2, [sp, #12]
 800b788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b78a:	4694      	mov	ip, r2
 800b78c:	4463      	add	r3, ip
 800b78e:	930c      	str	r3, [sp, #48]	; 0x30
 800b790:	2300      	movs	r3, #0
 800b792:	9213      	str	r2, [sp, #76]	; 0x4c
 800b794:	930d      	str	r3, [sp, #52]	; 0x34
 800b796:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b798:	2401      	movs	r4, #1
 800b79a:	2b09      	cmp	r3, #9
 800b79c:	d867      	bhi.n	800b86e <_dtoa_r+0x296>
 800b79e:	2b05      	cmp	r3, #5
 800b7a0:	dd02      	ble.n	800b7a8 <_dtoa_r+0x1d0>
 800b7a2:	2400      	movs	r4, #0
 800b7a4:	3b04      	subs	r3, #4
 800b7a6:	9322      	str	r3, [sp, #136]	; 0x88
 800b7a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7aa:	1e98      	subs	r0, r3, #2
 800b7ac:	2803      	cmp	r0, #3
 800b7ae:	d867      	bhi.n	800b880 <_dtoa_r+0x2a8>
 800b7b0:	f7f4 fcb8 	bl	8000124 <__gnu_thumb1_case_uqi>
 800b7b4:	5b383a2b 	.word	0x5b383a2b
 800b7b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7ba:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b7bc:	18f6      	adds	r6, r6, r3
 800b7be:	4b68      	ldr	r3, [pc, #416]	; (800b960 <_dtoa_r+0x388>)
 800b7c0:	18f2      	adds	r2, r6, r3
 800b7c2:	2a20      	cmp	r2, #32
 800b7c4:	dd0f      	ble.n	800b7e6 <_dtoa_r+0x20e>
 800b7c6:	2340      	movs	r3, #64	; 0x40
 800b7c8:	1a9b      	subs	r3, r3, r2
 800b7ca:	409f      	lsls	r7, r3
 800b7cc:	4b65      	ldr	r3, [pc, #404]	; (800b964 <_dtoa_r+0x38c>)
 800b7ce:	0038      	movs	r0, r7
 800b7d0:	18f3      	adds	r3, r6, r3
 800b7d2:	40dc      	lsrs	r4, r3
 800b7d4:	4320      	orrs	r0, r4
 800b7d6:	f7f7 fc4b 	bl	8003070 <__aeabi_ui2d>
 800b7da:	2201      	movs	r2, #1
 800b7dc:	4b62      	ldr	r3, [pc, #392]	; (800b968 <_dtoa_r+0x390>)
 800b7de:	1e77      	subs	r7, r6, #1
 800b7e0:	18cb      	adds	r3, r1, r3
 800b7e2:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7e4:	e776      	b.n	800b6d4 <_dtoa_r+0xfc>
 800b7e6:	2320      	movs	r3, #32
 800b7e8:	0020      	movs	r0, r4
 800b7ea:	1a9b      	subs	r3, r3, r2
 800b7ec:	4098      	lsls	r0, r3
 800b7ee:	e7f2      	b.n	800b7d6 <_dtoa_r+0x1fe>
 800b7f0:	9016      	str	r0, [sp, #88]	; 0x58
 800b7f2:	e7ba      	b.n	800b76a <_dtoa_r+0x192>
 800b7f4:	920c      	str	r2, [sp, #48]	; 0x30
 800b7f6:	e7c3      	b.n	800b780 <_dtoa_r+0x1a8>
 800b7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7fa:	9a03      	ldr	r2, [sp, #12]
 800b7fc:	1a9b      	subs	r3, r3, r2
 800b7fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b800:	4253      	negs	r3, r2
 800b802:	930d      	str	r3, [sp, #52]	; 0x34
 800b804:	2300      	movs	r3, #0
 800b806:	9313      	str	r3, [sp, #76]	; 0x4c
 800b808:	e7c5      	b.n	800b796 <_dtoa_r+0x1be>
 800b80a:	2300      	movs	r3, #0
 800b80c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b80e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b810:	930b      	str	r3, [sp, #44]	; 0x2c
 800b812:	9307      	str	r3, [sp, #28]
 800b814:	2b00      	cmp	r3, #0
 800b816:	dc13      	bgt.n	800b840 <_dtoa_r+0x268>
 800b818:	2301      	movs	r3, #1
 800b81a:	001a      	movs	r2, r3
 800b81c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b81e:	9307      	str	r3, [sp, #28]
 800b820:	9223      	str	r2, [sp, #140]	; 0x8c
 800b822:	e00d      	b.n	800b840 <_dtoa_r+0x268>
 800b824:	2301      	movs	r3, #1
 800b826:	e7f1      	b.n	800b80c <_dtoa_r+0x234>
 800b828:	2300      	movs	r3, #0
 800b82a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b82c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b82e:	4694      	mov	ip, r2
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	4463      	add	r3, ip
 800b834:	930b      	str	r3, [sp, #44]	; 0x2c
 800b836:	3301      	adds	r3, #1
 800b838:	9307      	str	r3, [sp, #28]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	dc00      	bgt.n	800b840 <_dtoa_r+0x268>
 800b83e:	2301      	movs	r3, #1
 800b840:	9a04      	ldr	r2, [sp, #16]
 800b842:	2100      	movs	r1, #0
 800b844:	69d0      	ldr	r0, [r2, #28]
 800b846:	2204      	movs	r2, #4
 800b848:	0015      	movs	r5, r2
 800b84a:	3514      	adds	r5, #20
 800b84c:	429d      	cmp	r5, r3
 800b84e:	d91b      	bls.n	800b888 <_dtoa_r+0x2b0>
 800b850:	6041      	str	r1, [r0, #4]
 800b852:	9804      	ldr	r0, [sp, #16]
 800b854:	f001 f944 	bl	800cae0 <_Balloc>
 800b858:	9006      	str	r0, [sp, #24]
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d117      	bne.n	800b88e <_dtoa_r+0x2b6>
 800b85e:	21b0      	movs	r1, #176	; 0xb0
 800b860:	4b42      	ldr	r3, [pc, #264]	; (800b96c <_dtoa_r+0x394>)
 800b862:	482e      	ldr	r0, [pc, #184]	; (800b91c <_dtoa_r+0x344>)
 800b864:	9a06      	ldr	r2, [sp, #24]
 800b866:	31ff      	adds	r1, #255	; 0xff
 800b868:	e6cb      	b.n	800b602 <_dtoa_r+0x2a>
 800b86a:	2301      	movs	r3, #1
 800b86c:	e7dd      	b.n	800b82a <_dtoa_r+0x252>
 800b86e:	2300      	movs	r3, #0
 800b870:	940f      	str	r4, [sp, #60]	; 0x3c
 800b872:	9322      	str	r3, [sp, #136]	; 0x88
 800b874:	3b01      	subs	r3, #1
 800b876:	930b      	str	r3, [sp, #44]	; 0x2c
 800b878:	9307      	str	r3, [sp, #28]
 800b87a:	2200      	movs	r2, #0
 800b87c:	3313      	adds	r3, #19
 800b87e:	e7cf      	b.n	800b820 <_dtoa_r+0x248>
 800b880:	2301      	movs	r3, #1
 800b882:	930f      	str	r3, [sp, #60]	; 0x3c
 800b884:	3b02      	subs	r3, #2
 800b886:	e7f6      	b.n	800b876 <_dtoa_r+0x29e>
 800b888:	3101      	adds	r1, #1
 800b88a:	0052      	lsls	r2, r2, #1
 800b88c:	e7dc      	b.n	800b848 <_dtoa_r+0x270>
 800b88e:	9b04      	ldr	r3, [sp, #16]
 800b890:	9a06      	ldr	r2, [sp, #24]
 800b892:	69db      	ldr	r3, [r3, #28]
 800b894:	601a      	str	r2, [r3, #0]
 800b896:	9b07      	ldr	r3, [sp, #28]
 800b898:	2b0e      	cmp	r3, #14
 800b89a:	d900      	bls.n	800b89e <_dtoa_r+0x2c6>
 800b89c:	e0e5      	b.n	800ba6a <_dtoa_r+0x492>
 800b89e:	2c00      	cmp	r4, #0
 800b8a0:	d100      	bne.n	800b8a4 <_dtoa_r+0x2cc>
 800b8a2:	e0e2      	b.n	800ba6a <_dtoa_r+0x492>
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	dd64      	ble.n	800b974 <_dtoa_r+0x39c>
 800b8aa:	210f      	movs	r1, #15
 800b8ac:	9a03      	ldr	r2, [sp, #12]
 800b8ae:	4b2b      	ldr	r3, [pc, #172]	; (800b95c <_dtoa_r+0x384>)
 800b8b0:	400a      	ands	r2, r1
 800b8b2:	00d2      	lsls	r2, r2, #3
 800b8b4:	189b      	adds	r3, r3, r2
 800b8b6:	681e      	ldr	r6, [r3, #0]
 800b8b8:	685f      	ldr	r7, [r3, #4]
 800b8ba:	9b03      	ldr	r3, [sp, #12]
 800b8bc:	2402      	movs	r4, #2
 800b8be:	111d      	asrs	r5, r3, #4
 800b8c0:	05db      	lsls	r3, r3, #23
 800b8c2:	d50a      	bpl.n	800b8da <_dtoa_r+0x302>
 800b8c4:	4b2a      	ldr	r3, [pc, #168]	; (800b970 <_dtoa_r+0x398>)
 800b8c6:	400d      	ands	r5, r1
 800b8c8:	6a1a      	ldr	r2, [r3, #32]
 800b8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b8ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b8d0:	f7f6 f90c 	bl	8001aec <__aeabi_ddiv>
 800b8d4:	9008      	str	r0, [sp, #32]
 800b8d6:	9109      	str	r1, [sp, #36]	; 0x24
 800b8d8:	3401      	adds	r4, #1
 800b8da:	4b25      	ldr	r3, [pc, #148]	; (800b970 <_dtoa_r+0x398>)
 800b8dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	d108      	bne.n	800b8f4 <_dtoa_r+0x31c>
 800b8e2:	9808      	ldr	r0, [sp, #32]
 800b8e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8e6:	0032      	movs	r2, r6
 800b8e8:	003b      	movs	r3, r7
 800b8ea:	f7f6 f8ff 	bl	8001aec <__aeabi_ddiv>
 800b8ee:	9008      	str	r0, [sp, #32]
 800b8f0:	9109      	str	r1, [sp, #36]	; 0x24
 800b8f2:	e05a      	b.n	800b9aa <_dtoa_r+0x3d2>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	421d      	tst	r5, r3
 800b8f8:	d009      	beq.n	800b90e <_dtoa_r+0x336>
 800b8fa:	18e4      	adds	r4, r4, r3
 800b8fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8fe:	0030      	movs	r0, r6
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	0039      	movs	r1, r7
 800b906:	f7f6 fceb 	bl	80022e0 <__aeabi_dmul>
 800b90a:	0006      	movs	r6, r0
 800b90c:	000f      	movs	r7, r1
 800b90e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b910:	106d      	asrs	r5, r5, #1
 800b912:	3308      	adds	r3, #8
 800b914:	e7e2      	b.n	800b8dc <_dtoa_r+0x304>
 800b916:	46c0      	nop			; (mov r8, r8)
 800b918:	0800e1c4 	.word	0x0800e1c4
 800b91c:	0800e286 	.word	0x0800e286
 800b920:	7ff00000 	.word	0x7ff00000
 800b924:	0000270f 	.word	0x0000270f
 800b928:	0800e282 	.word	0x0800e282
 800b92c:	0800e285 	.word	0x0800e285
 800b930:	0800e1a0 	.word	0x0800e1a0
 800b934:	0800e1a1 	.word	0x0800e1a1
 800b938:	3ff00000 	.word	0x3ff00000
 800b93c:	fffffc01 	.word	0xfffffc01
 800b940:	3ff80000 	.word	0x3ff80000
 800b944:	636f4361 	.word	0x636f4361
 800b948:	3fd287a7 	.word	0x3fd287a7
 800b94c:	8b60c8b3 	.word	0x8b60c8b3
 800b950:	3fc68a28 	.word	0x3fc68a28
 800b954:	509f79fb 	.word	0x509f79fb
 800b958:	3fd34413 	.word	0x3fd34413
 800b95c:	0800e3d0 	.word	0x0800e3d0
 800b960:	00000432 	.word	0x00000432
 800b964:	00000412 	.word	0x00000412
 800b968:	fe100000 	.word	0xfe100000
 800b96c:	0800e2de 	.word	0x0800e2de
 800b970:	0800e3a8 	.word	0x0800e3a8
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	2402      	movs	r4, #2
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d016      	beq.n	800b9aa <_dtoa_r+0x3d2>
 800b97c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b97e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b980:	220f      	movs	r2, #15
 800b982:	425d      	negs	r5, r3
 800b984:	402a      	ands	r2, r5
 800b986:	4bdd      	ldr	r3, [pc, #884]	; (800bcfc <_dtoa_r+0x724>)
 800b988:	00d2      	lsls	r2, r2, #3
 800b98a:	189b      	adds	r3, r3, r2
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	f7f6 fca6 	bl	80022e0 <__aeabi_dmul>
 800b994:	2701      	movs	r7, #1
 800b996:	2300      	movs	r3, #0
 800b998:	9008      	str	r0, [sp, #32]
 800b99a:	9109      	str	r1, [sp, #36]	; 0x24
 800b99c:	4ed8      	ldr	r6, [pc, #864]	; (800bd00 <_dtoa_r+0x728>)
 800b99e:	112d      	asrs	r5, r5, #4
 800b9a0:	2d00      	cmp	r5, #0
 800b9a2:	d000      	beq.n	800b9a6 <_dtoa_r+0x3ce>
 800b9a4:	e091      	b.n	800baca <_dtoa_r+0x4f2>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1a1      	bne.n	800b8ee <_dtoa_r+0x316>
 800b9aa:	9e08      	ldr	r6, [sp, #32]
 800b9ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b9ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d100      	bne.n	800b9b6 <_dtoa_r+0x3de>
 800b9b4:	e094      	b.n	800bae0 <_dtoa_r+0x508>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	0030      	movs	r0, r6
 800b9ba:	0039      	movs	r1, r7
 800b9bc:	4bd1      	ldr	r3, [pc, #836]	; (800bd04 <_dtoa_r+0x72c>)
 800b9be:	f7f4 fd51 	bl	8000464 <__aeabi_dcmplt>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d100      	bne.n	800b9c8 <_dtoa_r+0x3f0>
 800b9c6:	e08b      	b.n	800bae0 <_dtoa_r+0x508>
 800b9c8:	9b07      	ldr	r3, [sp, #28]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d100      	bne.n	800b9d0 <_dtoa_r+0x3f8>
 800b9ce:	e087      	b.n	800bae0 <_dtoa_r+0x508>
 800b9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	dd45      	ble.n	800ba62 <_dtoa_r+0x48a>
 800b9d6:	9b03      	ldr	r3, [sp, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b9de:	0030      	movs	r0, r6
 800b9e0:	4bc9      	ldr	r3, [pc, #804]	; (800bd08 <_dtoa_r+0x730>)
 800b9e2:	0039      	movs	r1, r7
 800b9e4:	f7f6 fc7c 	bl	80022e0 <__aeabi_dmul>
 800b9e8:	9008      	str	r0, [sp, #32]
 800b9ea:	9109      	str	r1, [sp, #36]	; 0x24
 800b9ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9ee:	3401      	adds	r4, #1
 800b9f0:	0020      	movs	r0, r4
 800b9f2:	9e08      	ldr	r6, [sp, #32]
 800b9f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b9f6:	9312      	str	r3, [sp, #72]	; 0x48
 800b9f8:	f7f7 fb0a 	bl	8003010 <__aeabi_i2d>
 800b9fc:	0032      	movs	r2, r6
 800b9fe:	003b      	movs	r3, r7
 800ba00:	f7f6 fc6e 	bl	80022e0 <__aeabi_dmul>
 800ba04:	2200      	movs	r2, #0
 800ba06:	4bc1      	ldr	r3, [pc, #772]	; (800bd0c <_dtoa_r+0x734>)
 800ba08:	f7f5 fd10 	bl	800142c <__aeabi_dadd>
 800ba0c:	4ac0      	ldr	r2, [pc, #768]	; (800bd10 <_dtoa_r+0x738>)
 800ba0e:	9014      	str	r0, [sp, #80]	; 0x50
 800ba10:	9115      	str	r1, [sp, #84]	; 0x54
 800ba12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba14:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ba16:	4694      	mov	ip, r2
 800ba18:	9308      	str	r3, [sp, #32]
 800ba1a:	9409      	str	r4, [sp, #36]	; 0x24
 800ba1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba1e:	4463      	add	r3, ip
 800ba20:	9318      	str	r3, [sp, #96]	; 0x60
 800ba22:	9309      	str	r3, [sp, #36]	; 0x24
 800ba24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d15e      	bne.n	800bae8 <_dtoa_r+0x510>
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	4bb9      	ldr	r3, [pc, #740]	; (800bd14 <_dtoa_r+0x73c>)
 800ba2e:	0030      	movs	r0, r6
 800ba30:	0039      	movs	r1, r7
 800ba32:	f7f6 ff17 	bl	8002864 <__aeabi_dsub>
 800ba36:	9a08      	ldr	r2, [sp, #32]
 800ba38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ba3a:	0004      	movs	r4, r0
 800ba3c:	000d      	movs	r5, r1
 800ba3e:	f7f4 fd25 	bl	800048c <__aeabi_dcmpgt>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d000      	beq.n	800ba48 <_dtoa_r+0x470>
 800ba46:	e2b3      	b.n	800bfb0 <_dtoa_r+0x9d8>
 800ba48:	48b3      	ldr	r0, [pc, #716]	; (800bd18 <_dtoa_r+0x740>)
 800ba4a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ba4c:	4684      	mov	ip, r0
 800ba4e:	4461      	add	r1, ip
 800ba50:	000b      	movs	r3, r1
 800ba52:	0020      	movs	r0, r4
 800ba54:	0029      	movs	r1, r5
 800ba56:	9a08      	ldr	r2, [sp, #32]
 800ba58:	f7f4 fd04 	bl	8000464 <__aeabi_dcmplt>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d000      	beq.n	800ba62 <_dtoa_r+0x48a>
 800ba60:	e2a3      	b.n	800bfaa <_dtoa_r+0x9d2>
 800ba62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba64:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ba66:	9308      	str	r3, [sp, #32]
 800ba68:	9409      	str	r4, [sp, #36]	; 0x24
 800ba6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	da00      	bge.n	800ba72 <_dtoa_r+0x49a>
 800ba70:	e179      	b.n	800bd66 <_dtoa_r+0x78e>
 800ba72:	9a03      	ldr	r2, [sp, #12]
 800ba74:	2a0e      	cmp	r2, #14
 800ba76:	dd00      	ble.n	800ba7a <_dtoa_r+0x4a2>
 800ba78:	e175      	b.n	800bd66 <_dtoa_r+0x78e>
 800ba7a:	4ba0      	ldr	r3, [pc, #640]	; (800bcfc <_dtoa_r+0x724>)
 800ba7c:	00d2      	lsls	r2, r2, #3
 800ba7e:	189b      	adds	r3, r3, r2
 800ba80:	681e      	ldr	r6, [r3, #0]
 800ba82:	685f      	ldr	r7, [r3, #4]
 800ba84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	db00      	blt.n	800ba8c <_dtoa_r+0x4b4>
 800ba8a:	e0e5      	b.n	800bc58 <_dtoa_r+0x680>
 800ba8c:	9b07      	ldr	r3, [sp, #28]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	dd00      	ble.n	800ba94 <_dtoa_r+0x4bc>
 800ba92:	e0e1      	b.n	800bc58 <_dtoa_r+0x680>
 800ba94:	d000      	beq.n	800ba98 <_dtoa_r+0x4c0>
 800ba96:	e288      	b.n	800bfaa <_dtoa_r+0x9d2>
 800ba98:	2200      	movs	r2, #0
 800ba9a:	0030      	movs	r0, r6
 800ba9c:	0039      	movs	r1, r7
 800ba9e:	4b9d      	ldr	r3, [pc, #628]	; (800bd14 <_dtoa_r+0x73c>)
 800baa0:	f7f6 fc1e 	bl	80022e0 <__aeabi_dmul>
 800baa4:	9a08      	ldr	r2, [sp, #32]
 800baa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa8:	f7f4 fcfa 	bl	80004a0 <__aeabi_dcmpge>
 800baac:	9e07      	ldr	r6, [sp, #28]
 800baae:	0037      	movs	r7, r6
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d000      	beq.n	800bab6 <_dtoa_r+0x4de>
 800bab4:	e25f      	b.n	800bf76 <_dtoa_r+0x99e>
 800bab6:	9b06      	ldr	r3, [sp, #24]
 800bab8:	9a06      	ldr	r2, [sp, #24]
 800baba:	3301      	adds	r3, #1
 800babc:	9308      	str	r3, [sp, #32]
 800babe:	2331      	movs	r3, #49	; 0x31
 800bac0:	7013      	strb	r3, [r2, #0]
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	3301      	adds	r3, #1
 800bac6:	9303      	str	r3, [sp, #12]
 800bac8:	e25a      	b.n	800bf80 <_dtoa_r+0x9a8>
 800baca:	423d      	tst	r5, r7
 800bacc:	d005      	beq.n	800bada <_dtoa_r+0x502>
 800bace:	6832      	ldr	r2, [r6, #0]
 800bad0:	6873      	ldr	r3, [r6, #4]
 800bad2:	f7f6 fc05 	bl	80022e0 <__aeabi_dmul>
 800bad6:	003b      	movs	r3, r7
 800bad8:	3401      	adds	r4, #1
 800bada:	106d      	asrs	r5, r5, #1
 800badc:	3608      	adds	r6, #8
 800bade:	e75f      	b.n	800b9a0 <_dtoa_r+0x3c8>
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	930e      	str	r3, [sp, #56]	; 0x38
 800bae4:	9b07      	ldr	r3, [sp, #28]
 800bae6:	e783      	b.n	800b9f0 <_dtoa_r+0x418>
 800bae8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800baea:	4b84      	ldr	r3, [pc, #528]	; (800bcfc <_dtoa_r+0x724>)
 800baec:	3a01      	subs	r2, #1
 800baee:	00d2      	lsls	r2, r2, #3
 800baf0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800baf2:	189b      	adds	r3, r3, r2
 800baf4:	9c08      	ldr	r4, [sp, #32]
 800baf6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	2900      	cmp	r1, #0
 800bafe:	d051      	beq.n	800bba4 <_dtoa_r+0x5cc>
 800bb00:	2000      	movs	r0, #0
 800bb02:	4986      	ldr	r1, [pc, #536]	; (800bd1c <_dtoa_r+0x744>)
 800bb04:	f7f5 fff2 	bl	8001aec <__aeabi_ddiv>
 800bb08:	0022      	movs	r2, r4
 800bb0a:	002b      	movs	r3, r5
 800bb0c:	f7f6 feaa 	bl	8002864 <__aeabi_dsub>
 800bb10:	9a06      	ldr	r2, [sp, #24]
 800bb12:	0004      	movs	r4, r0
 800bb14:	4694      	mov	ip, r2
 800bb16:	000d      	movs	r5, r1
 800bb18:	9b06      	ldr	r3, [sp, #24]
 800bb1a:	9314      	str	r3, [sp, #80]	; 0x50
 800bb1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb1e:	4463      	add	r3, ip
 800bb20:	9318      	str	r3, [sp, #96]	; 0x60
 800bb22:	0039      	movs	r1, r7
 800bb24:	0030      	movs	r0, r6
 800bb26:	f7f7 fa3d 	bl	8002fa4 <__aeabi_d2iz>
 800bb2a:	9012      	str	r0, [sp, #72]	; 0x48
 800bb2c:	f7f7 fa70 	bl	8003010 <__aeabi_i2d>
 800bb30:	0002      	movs	r2, r0
 800bb32:	000b      	movs	r3, r1
 800bb34:	0030      	movs	r0, r6
 800bb36:	0039      	movs	r1, r7
 800bb38:	f7f6 fe94 	bl	8002864 <__aeabi_dsub>
 800bb3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb40:	3301      	adds	r3, #1
 800bb42:	9308      	str	r3, [sp, #32]
 800bb44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb46:	0006      	movs	r6, r0
 800bb48:	3330      	adds	r3, #48	; 0x30
 800bb4a:	7013      	strb	r3, [r2, #0]
 800bb4c:	0022      	movs	r2, r4
 800bb4e:	002b      	movs	r3, r5
 800bb50:	000f      	movs	r7, r1
 800bb52:	f7f4 fc87 	bl	8000464 <__aeabi_dcmplt>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d174      	bne.n	800bc44 <_dtoa_r+0x66c>
 800bb5a:	0032      	movs	r2, r6
 800bb5c:	003b      	movs	r3, r7
 800bb5e:	2000      	movs	r0, #0
 800bb60:	4968      	ldr	r1, [pc, #416]	; (800bd04 <_dtoa_r+0x72c>)
 800bb62:	f7f6 fe7f 	bl	8002864 <__aeabi_dsub>
 800bb66:	0022      	movs	r2, r4
 800bb68:	002b      	movs	r3, r5
 800bb6a:	f7f4 fc7b 	bl	8000464 <__aeabi_dcmplt>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d000      	beq.n	800bb74 <_dtoa_r+0x59c>
 800bb72:	e0d7      	b.n	800bd24 <_dtoa_r+0x74c>
 800bb74:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bb76:	9a08      	ldr	r2, [sp, #32]
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d100      	bne.n	800bb7e <_dtoa_r+0x5a6>
 800bb7c:	e771      	b.n	800ba62 <_dtoa_r+0x48a>
 800bb7e:	2200      	movs	r2, #0
 800bb80:	0020      	movs	r0, r4
 800bb82:	0029      	movs	r1, r5
 800bb84:	4b60      	ldr	r3, [pc, #384]	; (800bd08 <_dtoa_r+0x730>)
 800bb86:	f7f6 fbab 	bl	80022e0 <__aeabi_dmul>
 800bb8a:	4b5f      	ldr	r3, [pc, #380]	; (800bd08 <_dtoa_r+0x730>)
 800bb8c:	0004      	movs	r4, r0
 800bb8e:	000d      	movs	r5, r1
 800bb90:	0030      	movs	r0, r6
 800bb92:	0039      	movs	r1, r7
 800bb94:	2200      	movs	r2, #0
 800bb96:	f7f6 fba3 	bl	80022e0 <__aeabi_dmul>
 800bb9a:	9b08      	ldr	r3, [sp, #32]
 800bb9c:	0006      	movs	r6, r0
 800bb9e:	000f      	movs	r7, r1
 800bba0:	9314      	str	r3, [sp, #80]	; 0x50
 800bba2:	e7be      	b.n	800bb22 <_dtoa_r+0x54a>
 800bba4:	0020      	movs	r0, r4
 800bba6:	0029      	movs	r1, r5
 800bba8:	f7f6 fb9a 	bl	80022e0 <__aeabi_dmul>
 800bbac:	9a06      	ldr	r2, [sp, #24]
 800bbae:	9b06      	ldr	r3, [sp, #24]
 800bbb0:	4694      	mov	ip, r2
 800bbb2:	9308      	str	r3, [sp, #32]
 800bbb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbb6:	9014      	str	r0, [sp, #80]	; 0x50
 800bbb8:	9115      	str	r1, [sp, #84]	; 0x54
 800bbba:	4463      	add	r3, ip
 800bbbc:	9319      	str	r3, [sp, #100]	; 0x64
 800bbbe:	0030      	movs	r0, r6
 800bbc0:	0039      	movs	r1, r7
 800bbc2:	f7f7 f9ef 	bl	8002fa4 <__aeabi_d2iz>
 800bbc6:	9018      	str	r0, [sp, #96]	; 0x60
 800bbc8:	f7f7 fa22 	bl	8003010 <__aeabi_i2d>
 800bbcc:	0002      	movs	r2, r0
 800bbce:	000b      	movs	r3, r1
 800bbd0:	0030      	movs	r0, r6
 800bbd2:	0039      	movs	r1, r7
 800bbd4:	f7f6 fe46 	bl	8002864 <__aeabi_dsub>
 800bbd8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800bbda:	9b08      	ldr	r3, [sp, #32]
 800bbdc:	3630      	adds	r6, #48	; 0x30
 800bbde:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bbe0:	701e      	strb	r6, [r3, #0]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	0004      	movs	r4, r0
 800bbe6:	000d      	movs	r5, r1
 800bbe8:	9308      	str	r3, [sp, #32]
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d12d      	bne.n	800bc4a <_dtoa_r+0x672>
 800bbee:	9814      	ldr	r0, [sp, #80]	; 0x50
 800bbf0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bbf2:	9a06      	ldr	r2, [sp, #24]
 800bbf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbf6:	4694      	mov	ip, r2
 800bbf8:	4463      	add	r3, ip
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	9308      	str	r3, [sp, #32]
 800bbfe:	4b47      	ldr	r3, [pc, #284]	; (800bd1c <_dtoa_r+0x744>)
 800bc00:	f7f5 fc14 	bl	800142c <__aeabi_dadd>
 800bc04:	0002      	movs	r2, r0
 800bc06:	000b      	movs	r3, r1
 800bc08:	0020      	movs	r0, r4
 800bc0a:	0029      	movs	r1, r5
 800bc0c:	f7f4 fc3e 	bl	800048c <__aeabi_dcmpgt>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d000      	beq.n	800bc16 <_dtoa_r+0x63e>
 800bc14:	e086      	b.n	800bd24 <_dtoa_r+0x74c>
 800bc16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	493f      	ldr	r1, [pc, #252]	; (800bd1c <_dtoa_r+0x744>)
 800bc1e:	f7f6 fe21 	bl	8002864 <__aeabi_dsub>
 800bc22:	0002      	movs	r2, r0
 800bc24:	000b      	movs	r3, r1
 800bc26:	0020      	movs	r0, r4
 800bc28:	0029      	movs	r1, r5
 800bc2a:	f7f4 fc1b 	bl	8000464 <__aeabi_dcmplt>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d100      	bne.n	800bc34 <_dtoa_r+0x65c>
 800bc32:	e716      	b.n	800ba62 <_dtoa_r+0x48a>
 800bc34:	9b08      	ldr	r3, [sp, #32]
 800bc36:	001a      	movs	r2, r3
 800bc38:	3a01      	subs	r2, #1
 800bc3a:	9208      	str	r2, [sp, #32]
 800bc3c:	7812      	ldrb	r2, [r2, #0]
 800bc3e:	2a30      	cmp	r2, #48	; 0x30
 800bc40:	d0f8      	beq.n	800bc34 <_dtoa_r+0x65c>
 800bc42:	9308      	str	r3, [sp, #32]
 800bc44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc46:	9303      	str	r3, [sp, #12]
 800bc48:	e046      	b.n	800bcd8 <_dtoa_r+0x700>
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	4b2e      	ldr	r3, [pc, #184]	; (800bd08 <_dtoa_r+0x730>)
 800bc4e:	f7f6 fb47 	bl	80022e0 <__aeabi_dmul>
 800bc52:	0006      	movs	r6, r0
 800bc54:	000f      	movs	r7, r1
 800bc56:	e7b2      	b.n	800bbbe <_dtoa_r+0x5e6>
 800bc58:	9b06      	ldr	r3, [sp, #24]
 800bc5a:	9a06      	ldr	r2, [sp, #24]
 800bc5c:	930a      	str	r3, [sp, #40]	; 0x28
 800bc5e:	9b07      	ldr	r3, [sp, #28]
 800bc60:	9c08      	ldr	r4, [sp, #32]
 800bc62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bc64:	3b01      	subs	r3, #1
 800bc66:	189b      	adds	r3, r3, r2
 800bc68:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc6a:	0032      	movs	r2, r6
 800bc6c:	003b      	movs	r3, r7
 800bc6e:	0020      	movs	r0, r4
 800bc70:	0029      	movs	r1, r5
 800bc72:	f7f5 ff3b 	bl	8001aec <__aeabi_ddiv>
 800bc76:	f7f7 f995 	bl	8002fa4 <__aeabi_d2iz>
 800bc7a:	9007      	str	r0, [sp, #28]
 800bc7c:	f7f7 f9c8 	bl	8003010 <__aeabi_i2d>
 800bc80:	0032      	movs	r2, r6
 800bc82:	003b      	movs	r3, r7
 800bc84:	f7f6 fb2c 	bl	80022e0 <__aeabi_dmul>
 800bc88:	0002      	movs	r2, r0
 800bc8a:	000b      	movs	r3, r1
 800bc8c:	0020      	movs	r0, r4
 800bc8e:	0029      	movs	r1, r5
 800bc90:	f7f6 fde8 	bl	8002864 <__aeabi_dsub>
 800bc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc96:	001a      	movs	r2, r3
 800bc98:	3201      	adds	r2, #1
 800bc9a:	920a      	str	r2, [sp, #40]	; 0x28
 800bc9c:	9208      	str	r2, [sp, #32]
 800bc9e:	9a07      	ldr	r2, [sp, #28]
 800bca0:	3230      	adds	r2, #48	; 0x30
 800bca2:	701a      	strb	r2, [r3, #0]
 800bca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d14f      	bne.n	800bd4a <_dtoa_r+0x772>
 800bcaa:	0002      	movs	r2, r0
 800bcac:	000b      	movs	r3, r1
 800bcae:	f7f5 fbbd 	bl	800142c <__aeabi_dadd>
 800bcb2:	0032      	movs	r2, r6
 800bcb4:	003b      	movs	r3, r7
 800bcb6:	0004      	movs	r4, r0
 800bcb8:	000d      	movs	r5, r1
 800bcba:	f7f4 fbe7 	bl	800048c <__aeabi_dcmpgt>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d12e      	bne.n	800bd20 <_dtoa_r+0x748>
 800bcc2:	0032      	movs	r2, r6
 800bcc4:	003b      	movs	r3, r7
 800bcc6:	0020      	movs	r0, r4
 800bcc8:	0029      	movs	r1, r5
 800bcca:	f7f4 fbc5 	bl	8000458 <__aeabi_dcmpeq>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d002      	beq.n	800bcd8 <_dtoa_r+0x700>
 800bcd2:	9b07      	ldr	r3, [sp, #28]
 800bcd4:	07de      	lsls	r6, r3, #31
 800bcd6:	d423      	bmi.n	800bd20 <_dtoa_r+0x748>
 800bcd8:	9905      	ldr	r1, [sp, #20]
 800bcda:	9804      	ldr	r0, [sp, #16]
 800bcdc:	f000 ff44 	bl	800cb68 <_Bfree>
 800bce0:	2300      	movs	r3, #0
 800bce2:	9a08      	ldr	r2, [sp, #32]
 800bce4:	7013      	strb	r3, [r2, #0]
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bcea:	3301      	adds	r3, #1
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d100      	bne.n	800bcf6 <_dtoa_r+0x71e>
 800bcf4:	e4ba      	b.n	800b66c <_dtoa_r+0x94>
 800bcf6:	9a08      	ldr	r2, [sp, #32]
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	e4b7      	b.n	800b66c <_dtoa_r+0x94>
 800bcfc:	0800e3d0 	.word	0x0800e3d0
 800bd00:	0800e3a8 	.word	0x0800e3a8
 800bd04:	3ff00000 	.word	0x3ff00000
 800bd08:	40240000 	.word	0x40240000
 800bd0c:	401c0000 	.word	0x401c0000
 800bd10:	fcc00000 	.word	0xfcc00000
 800bd14:	40140000 	.word	0x40140000
 800bd18:	7cc00000 	.word	0x7cc00000
 800bd1c:	3fe00000 	.word	0x3fe00000
 800bd20:	9b03      	ldr	r3, [sp, #12]
 800bd22:	930e      	str	r3, [sp, #56]	; 0x38
 800bd24:	9b08      	ldr	r3, [sp, #32]
 800bd26:	9308      	str	r3, [sp, #32]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	781a      	ldrb	r2, [r3, #0]
 800bd2c:	2a39      	cmp	r2, #57	; 0x39
 800bd2e:	d108      	bne.n	800bd42 <_dtoa_r+0x76a>
 800bd30:	9a06      	ldr	r2, [sp, #24]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d1f7      	bne.n	800bd26 <_dtoa_r+0x74e>
 800bd36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd38:	9906      	ldr	r1, [sp, #24]
 800bd3a:	3201      	adds	r2, #1
 800bd3c:	920e      	str	r2, [sp, #56]	; 0x38
 800bd3e:	2230      	movs	r2, #48	; 0x30
 800bd40:	700a      	strb	r2, [r1, #0]
 800bd42:	781a      	ldrb	r2, [r3, #0]
 800bd44:	3201      	adds	r2, #1
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	e77c      	b.n	800bc44 <_dtoa_r+0x66c>
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4ba9      	ldr	r3, [pc, #676]	; (800bff4 <_dtoa_r+0xa1c>)
 800bd4e:	f7f6 fac7 	bl	80022e0 <__aeabi_dmul>
 800bd52:	2200      	movs	r2, #0
 800bd54:	2300      	movs	r3, #0
 800bd56:	0004      	movs	r4, r0
 800bd58:	000d      	movs	r5, r1
 800bd5a:	f7f4 fb7d 	bl	8000458 <__aeabi_dcmpeq>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d100      	bne.n	800bd64 <_dtoa_r+0x78c>
 800bd62:	e782      	b.n	800bc6a <_dtoa_r+0x692>
 800bd64:	e7b8      	b.n	800bcd8 <_dtoa_r+0x700>
 800bd66:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800bd68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bd6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd6c:	2f00      	cmp	r7, #0
 800bd6e:	d012      	beq.n	800bd96 <_dtoa_r+0x7be>
 800bd70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bd72:	2a01      	cmp	r2, #1
 800bd74:	dc6e      	bgt.n	800be54 <_dtoa_r+0x87c>
 800bd76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd78:	2a00      	cmp	r2, #0
 800bd7a:	d065      	beq.n	800be48 <_dtoa_r+0x870>
 800bd7c:	4a9e      	ldr	r2, [pc, #632]	; (800bff8 <_dtoa_r+0xa20>)
 800bd7e:	189b      	adds	r3, r3, r2
 800bd80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd82:	2101      	movs	r1, #1
 800bd84:	18d2      	adds	r2, r2, r3
 800bd86:	920a      	str	r2, [sp, #40]	; 0x28
 800bd88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd8a:	9804      	ldr	r0, [sp, #16]
 800bd8c:	18d3      	adds	r3, r2, r3
 800bd8e:	930c      	str	r3, [sp, #48]	; 0x30
 800bd90:	f000 ffe6 	bl	800cd60 <__i2b>
 800bd94:	0007      	movs	r7, r0
 800bd96:	2c00      	cmp	r4, #0
 800bd98:	d00e      	beq.n	800bdb8 <_dtoa_r+0x7e0>
 800bd9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	dd0b      	ble.n	800bdb8 <_dtoa_r+0x7e0>
 800bda0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bda2:	0023      	movs	r3, r4
 800bda4:	4294      	cmp	r4, r2
 800bda6:	dd00      	ble.n	800bdaa <_dtoa_r+0x7d2>
 800bda8:	0013      	movs	r3, r2
 800bdaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdac:	1ae4      	subs	r4, r4, r3
 800bdae:	1ad2      	subs	r2, r2, r3
 800bdb0:	920a      	str	r2, [sp, #40]	; 0x28
 800bdb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	930c      	str	r3, [sp, #48]	; 0x30
 800bdb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d01e      	beq.n	800bdfc <_dtoa_r+0x824>
 800bdbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d05c      	beq.n	800be7e <_dtoa_r+0x8a6>
 800bdc4:	2d00      	cmp	r5, #0
 800bdc6:	dd10      	ble.n	800bdea <_dtoa_r+0x812>
 800bdc8:	0039      	movs	r1, r7
 800bdca:	002a      	movs	r2, r5
 800bdcc:	9804      	ldr	r0, [sp, #16]
 800bdce:	f001 f88f 	bl	800cef0 <__pow5mult>
 800bdd2:	9a05      	ldr	r2, [sp, #20]
 800bdd4:	0001      	movs	r1, r0
 800bdd6:	0007      	movs	r7, r0
 800bdd8:	9804      	ldr	r0, [sp, #16]
 800bdda:	f000 ffd9 	bl	800cd90 <__multiply>
 800bdde:	0006      	movs	r6, r0
 800bde0:	9905      	ldr	r1, [sp, #20]
 800bde2:	9804      	ldr	r0, [sp, #16]
 800bde4:	f000 fec0 	bl	800cb68 <_Bfree>
 800bde8:	9605      	str	r6, [sp, #20]
 800bdea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdec:	1b5a      	subs	r2, r3, r5
 800bdee:	42ab      	cmp	r3, r5
 800bdf0:	d004      	beq.n	800bdfc <_dtoa_r+0x824>
 800bdf2:	9905      	ldr	r1, [sp, #20]
 800bdf4:	9804      	ldr	r0, [sp, #16]
 800bdf6:	f001 f87b 	bl	800cef0 <__pow5mult>
 800bdfa:	9005      	str	r0, [sp, #20]
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	9804      	ldr	r0, [sp, #16]
 800be00:	f000 ffae 	bl	800cd60 <__i2b>
 800be04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be06:	0006      	movs	r6, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	dd3a      	ble.n	800be82 <_dtoa_r+0x8aa>
 800be0c:	001a      	movs	r2, r3
 800be0e:	0001      	movs	r1, r0
 800be10:	9804      	ldr	r0, [sp, #16]
 800be12:	f001 f86d 	bl	800cef0 <__pow5mult>
 800be16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be18:	0006      	movs	r6, r0
 800be1a:	2500      	movs	r5, #0
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	dc38      	bgt.n	800be92 <_dtoa_r+0x8ba>
 800be20:	2500      	movs	r5, #0
 800be22:	9b08      	ldr	r3, [sp, #32]
 800be24:	42ab      	cmp	r3, r5
 800be26:	d130      	bne.n	800be8a <_dtoa_r+0x8b2>
 800be28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be2a:	031b      	lsls	r3, r3, #12
 800be2c:	42ab      	cmp	r3, r5
 800be2e:	d12c      	bne.n	800be8a <_dtoa_r+0x8b2>
 800be30:	4b72      	ldr	r3, [pc, #456]	; (800bffc <_dtoa_r+0xa24>)
 800be32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be34:	4213      	tst	r3, r2
 800be36:	d028      	beq.n	800be8a <_dtoa_r+0x8b2>
 800be38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be3a:	3501      	adds	r5, #1
 800be3c:	3301      	adds	r3, #1
 800be3e:	930a      	str	r3, [sp, #40]	; 0x28
 800be40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be42:	3301      	adds	r3, #1
 800be44:	930c      	str	r3, [sp, #48]	; 0x30
 800be46:	e020      	b.n	800be8a <_dtoa_r+0x8b2>
 800be48:	2336      	movs	r3, #54	; 0x36
 800be4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800be4c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800be4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800be50:	1a9b      	subs	r3, r3, r2
 800be52:	e795      	b.n	800bd80 <_dtoa_r+0x7a8>
 800be54:	9b07      	ldr	r3, [sp, #28]
 800be56:	1e5d      	subs	r5, r3, #1
 800be58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be5a:	42ab      	cmp	r3, r5
 800be5c:	db07      	blt.n	800be6e <_dtoa_r+0x896>
 800be5e:	1b5d      	subs	r5, r3, r5
 800be60:	9b07      	ldr	r3, [sp, #28]
 800be62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800be64:	2b00      	cmp	r3, #0
 800be66:	da8b      	bge.n	800bd80 <_dtoa_r+0x7a8>
 800be68:	1ae4      	subs	r4, r4, r3
 800be6a:	2300      	movs	r3, #0
 800be6c:	e788      	b.n	800bd80 <_dtoa_r+0x7a8>
 800be6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be72:	1aeb      	subs	r3, r5, r3
 800be74:	18d3      	adds	r3, r2, r3
 800be76:	950d      	str	r5, [sp, #52]	; 0x34
 800be78:	9313      	str	r3, [sp, #76]	; 0x4c
 800be7a:	2500      	movs	r5, #0
 800be7c:	e7f0      	b.n	800be60 <_dtoa_r+0x888>
 800be7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be80:	e7b7      	b.n	800bdf2 <_dtoa_r+0x81a>
 800be82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be84:	2500      	movs	r5, #0
 800be86:	2b01      	cmp	r3, #1
 800be88:	ddca      	ble.n	800be20 <_dtoa_r+0x848>
 800be8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be8c:	2001      	movs	r0, #1
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d008      	beq.n	800bea4 <_dtoa_r+0x8cc>
 800be92:	6933      	ldr	r3, [r6, #16]
 800be94:	3303      	adds	r3, #3
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	18f3      	adds	r3, r6, r3
 800be9a:	6858      	ldr	r0, [r3, #4]
 800be9c:	f000 ff18 	bl	800ccd0 <__hi0bits>
 800bea0:	2320      	movs	r3, #32
 800bea2:	1a18      	subs	r0, r3, r0
 800bea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bea6:	1818      	adds	r0, r3, r0
 800bea8:	0002      	movs	r2, r0
 800beaa:	231f      	movs	r3, #31
 800beac:	401a      	ands	r2, r3
 800beae:	4218      	tst	r0, r3
 800beb0:	d047      	beq.n	800bf42 <_dtoa_r+0x96a>
 800beb2:	3301      	adds	r3, #1
 800beb4:	1a9b      	subs	r3, r3, r2
 800beb6:	2b04      	cmp	r3, #4
 800beb8:	dd3f      	ble.n	800bf3a <_dtoa_r+0x962>
 800beba:	231c      	movs	r3, #28
 800bebc:	1a9b      	subs	r3, r3, r2
 800bebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bec0:	18e4      	adds	r4, r4, r3
 800bec2:	18d2      	adds	r2, r2, r3
 800bec4:	920a      	str	r2, [sp, #40]	; 0x28
 800bec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bec8:	18d3      	adds	r3, r2, r3
 800beca:	930c      	str	r3, [sp, #48]	; 0x30
 800becc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bece:	2b00      	cmp	r3, #0
 800bed0:	dd05      	ble.n	800bede <_dtoa_r+0x906>
 800bed2:	001a      	movs	r2, r3
 800bed4:	9905      	ldr	r1, [sp, #20]
 800bed6:	9804      	ldr	r0, [sp, #16]
 800bed8:	f001 f866 	bl	800cfa8 <__lshift>
 800bedc:	9005      	str	r0, [sp, #20]
 800bede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dd05      	ble.n	800bef0 <_dtoa_r+0x918>
 800bee4:	0031      	movs	r1, r6
 800bee6:	001a      	movs	r2, r3
 800bee8:	9804      	ldr	r0, [sp, #16]
 800beea:	f001 f85d 	bl	800cfa8 <__lshift>
 800beee:	0006      	movs	r6, r0
 800bef0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d027      	beq.n	800bf46 <_dtoa_r+0x96e>
 800bef6:	0031      	movs	r1, r6
 800bef8:	9805      	ldr	r0, [sp, #20]
 800befa:	f001 f8c3 	bl	800d084 <__mcmp>
 800befe:	2800      	cmp	r0, #0
 800bf00:	da21      	bge.n	800bf46 <_dtoa_r+0x96e>
 800bf02:	9b03      	ldr	r3, [sp, #12]
 800bf04:	220a      	movs	r2, #10
 800bf06:	3b01      	subs	r3, #1
 800bf08:	9303      	str	r3, [sp, #12]
 800bf0a:	9905      	ldr	r1, [sp, #20]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	9804      	ldr	r0, [sp, #16]
 800bf10:	f000 fe4e 	bl	800cbb0 <__multadd>
 800bf14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf16:	9005      	str	r0, [sp, #20]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d100      	bne.n	800bf1e <_dtoa_r+0x946>
 800bf1c:	e15d      	b.n	800c1da <_dtoa_r+0xc02>
 800bf1e:	2300      	movs	r3, #0
 800bf20:	0039      	movs	r1, r7
 800bf22:	220a      	movs	r2, #10
 800bf24:	9804      	ldr	r0, [sp, #16]
 800bf26:	f000 fe43 	bl	800cbb0 <__multadd>
 800bf2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf2c:	0007      	movs	r7, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	dc49      	bgt.n	800bfc6 <_dtoa_r+0x9ee>
 800bf32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	dc0e      	bgt.n	800bf56 <_dtoa_r+0x97e>
 800bf38:	e045      	b.n	800bfc6 <_dtoa_r+0x9ee>
 800bf3a:	2b04      	cmp	r3, #4
 800bf3c:	d0c6      	beq.n	800becc <_dtoa_r+0x8f4>
 800bf3e:	331c      	adds	r3, #28
 800bf40:	e7bd      	b.n	800bebe <_dtoa_r+0x8e6>
 800bf42:	0013      	movs	r3, r2
 800bf44:	e7fb      	b.n	800bf3e <_dtoa_r+0x966>
 800bf46:	9b07      	ldr	r3, [sp, #28]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	dc36      	bgt.n	800bfba <_dtoa_r+0x9e2>
 800bf4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	dd33      	ble.n	800bfba <_dtoa_r+0x9e2>
 800bf52:	9b07      	ldr	r3, [sp, #28]
 800bf54:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10c      	bne.n	800bf76 <_dtoa_r+0x99e>
 800bf5c:	0031      	movs	r1, r6
 800bf5e:	2205      	movs	r2, #5
 800bf60:	9804      	ldr	r0, [sp, #16]
 800bf62:	f000 fe25 	bl	800cbb0 <__multadd>
 800bf66:	0006      	movs	r6, r0
 800bf68:	0001      	movs	r1, r0
 800bf6a:	9805      	ldr	r0, [sp, #20]
 800bf6c:	f001 f88a 	bl	800d084 <__mcmp>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	dd00      	ble.n	800bf76 <_dtoa_r+0x99e>
 800bf74:	e59f      	b.n	800bab6 <_dtoa_r+0x4de>
 800bf76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf78:	43db      	mvns	r3, r3
 800bf7a:	9303      	str	r3, [sp, #12]
 800bf7c:	9b06      	ldr	r3, [sp, #24]
 800bf7e:	9308      	str	r3, [sp, #32]
 800bf80:	2500      	movs	r5, #0
 800bf82:	0031      	movs	r1, r6
 800bf84:	9804      	ldr	r0, [sp, #16]
 800bf86:	f000 fdef 	bl	800cb68 <_Bfree>
 800bf8a:	2f00      	cmp	r7, #0
 800bf8c:	d100      	bne.n	800bf90 <_dtoa_r+0x9b8>
 800bf8e:	e6a3      	b.n	800bcd8 <_dtoa_r+0x700>
 800bf90:	2d00      	cmp	r5, #0
 800bf92:	d005      	beq.n	800bfa0 <_dtoa_r+0x9c8>
 800bf94:	42bd      	cmp	r5, r7
 800bf96:	d003      	beq.n	800bfa0 <_dtoa_r+0x9c8>
 800bf98:	0029      	movs	r1, r5
 800bf9a:	9804      	ldr	r0, [sp, #16]
 800bf9c:	f000 fde4 	bl	800cb68 <_Bfree>
 800bfa0:	0039      	movs	r1, r7
 800bfa2:	9804      	ldr	r0, [sp, #16]
 800bfa4:	f000 fde0 	bl	800cb68 <_Bfree>
 800bfa8:	e696      	b.n	800bcd8 <_dtoa_r+0x700>
 800bfaa:	2600      	movs	r6, #0
 800bfac:	0037      	movs	r7, r6
 800bfae:	e7e2      	b.n	800bf76 <_dtoa_r+0x99e>
 800bfb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfb2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bfb4:	9303      	str	r3, [sp, #12]
 800bfb6:	0037      	movs	r7, r6
 800bfb8:	e57d      	b.n	800bab6 <_dtoa_r+0x4de>
 800bfba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d100      	bne.n	800bfc2 <_dtoa_r+0x9ea>
 800bfc0:	e0c3      	b.n	800c14a <_dtoa_r+0xb72>
 800bfc2:	9b07      	ldr	r3, [sp, #28]
 800bfc4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfc6:	2c00      	cmp	r4, #0
 800bfc8:	dd05      	ble.n	800bfd6 <_dtoa_r+0x9fe>
 800bfca:	0039      	movs	r1, r7
 800bfcc:	0022      	movs	r2, r4
 800bfce:	9804      	ldr	r0, [sp, #16]
 800bfd0:	f000 ffea 	bl	800cfa8 <__lshift>
 800bfd4:	0007      	movs	r7, r0
 800bfd6:	0038      	movs	r0, r7
 800bfd8:	2d00      	cmp	r5, #0
 800bfda:	d024      	beq.n	800c026 <_dtoa_r+0xa4e>
 800bfdc:	6879      	ldr	r1, [r7, #4]
 800bfde:	9804      	ldr	r0, [sp, #16]
 800bfe0:	f000 fd7e 	bl	800cae0 <_Balloc>
 800bfe4:	1e04      	subs	r4, r0, #0
 800bfe6:	d111      	bne.n	800c00c <_dtoa_r+0xa34>
 800bfe8:	0022      	movs	r2, r4
 800bfea:	4b05      	ldr	r3, [pc, #20]	; (800c000 <_dtoa_r+0xa28>)
 800bfec:	4805      	ldr	r0, [pc, #20]	; (800c004 <_dtoa_r+0xa2c>)
 800bfee:	4906      	ldr	r1, [pc, #24]	; (800c008 <_dtoa_r+0xa30>)
 800bff0:	f7ff fb07 	bl	800b602 <_dtoa_r+0x2a>
 800bff4:	40240000 	.word	0x40240000
 800bff8:	00000433 	.word	0x00000433
 800bffc:	7ff00000 	.word	0x7ff00000
 800c000:	0800e2de 	.word	0x0800e2de
 800c004:	0800e286 	.word	0x0800e286
 800c008:	000002ef 	.word	0x000002ef
 800c00c:	0039      	movs	r1, r7
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	310c      	adds	r1, #12
 800c012:	3202      	adds	r2, #2
 800c014:	0092      	lsls	r2, r2, #2
 800c016:	300c      	adds	r0, #12
 800c018:	f7ff fa20 	bl	800b45c <memcpy>
 800c01c:	2201      	movs	r2, #1
 800c01e:	0021      	movs	r1, r4
 800c020:	9804      	ldr	r0, [sp, #16]
 800c022:	f000 ffc1 	bl	800cfa8 <__lshift>
 800c026:	9b06      	ldr	r3, [sp, #24]
 800c028:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c02a:	9307      	str	r3, [sp, #28]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	189b      	adds	r3, r3, r2
 800c030:	2201      	movs	r2, #1
 800c032:	003d      	movs	r5, r7
 800c034:	0007      	movs	r7, r0
 800c036:	930e      	str	r3, [sp, #56]	; 0x38
 800c038:	9b08      	ldr	r3, [sp, #32]
 800c03a:	4013      	ands	r3, r2
 800c03c:	930d      	str	r3, [sp, #52]	; 0x34
 800c03e:	0031      	movs	r1, r6
 800c040:	9805      	ldr	r0, [sp, #20]
 800c042:	f7ff fa39 	bl	800b4b8 <quorem>
 800c046:	0029      	movs	r1, r5
 800c048:	0004      	movs	r4, r0
 800c04a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c04c:	9805      	ldr	r0, [sp, #20]
 800c04e:	f001 f819 	bl	800d084 <__mcmp>
 800c052:	003a      	movs	r2, r7
 800c054:	900c      	str	r0, [sp, #48]	; 0x30
 800c056:	0031      	movs	r1, r6
 800c058:	9804      	ldr	r0, [sp, #16]
 800c05a:	f001 f82f 	bl	800d0bc <__mdiff>
 800c05e:	2201      	movs	r2, #1
 800c060:	68c3      	ldr	r3, [r0, #12]
 800c062:	3430      	adds	r4, #48	; 0x30
 800c064:	9008      	str	r0, [sp, #32]
 800c066:	920a      	str	r2, [sp, #40]	; 0x28
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d104      	bne.n	800c076 <_dtoa_r+0xa9e>
 800c06c:	0001      	movs	r1, r0
 800c06e:	9805      	ldr	r0, [sp, #20]
 800c070:	f001 f808 	bl	800d084 <__mcmp>
 800c074:	900a      	str	r0, [sp, #40]	; 0x28
 800c076:	9908      	ldr	r1, [sp, #32]
 800c078:	9804      	ldr	r0, [sp, #16]
 800c07a:	f000 fd75 	bl	800cb68 <_Bfree>
 800c07e:	9b07      	ldr	r3, [sp, #28]
 800c080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c082:	3301      	adds	r3, #1
 800c084:	9308      	str	r3, [sp, #32]
 800c086:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c088:	4313      	orrs	r3, r2
 800c08a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c08c:	4313      	orrs	r3, r2
 800c08e:	d109      	bne.n	800c0a4 <_dtoa_r+0xacc>
 800c090:	2c39      	cmp	r4, #57	; 0x39
 800c092:	d022      	beq.n	800c0da <_dtoa_r+0xb02>
 800c094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c096:	2b00      	cmp	r3, #0
 800c098:	dd01      	ble.n	800c09e <_dtoa_r+0xac6>
 800c09a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c09c:	3431      	adds	r4, #49	; 0x31
 800c09e:	9b07      	ldr	r3, [sp, #28]
 800c0a0:	701c      	strb	r4, [r3, #0]
 800c0a2:	e76e      	b.n	800bf82 <_dtoa_r+0x9aa>
 800c0a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	db04      	blt.n	800c0b4 <_dtoa_r+0xadc>
 800c0aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	d11e      	bne.n	800c0f2 <_dtoa_r+0xb1a>
 800c0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	ddf1      	ble.n	800c09e <_dtoa_r+0xac6>
 800c0ba:	9905      	ldr	r1, [sp, #20]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	9804      	ldr	r0, [sp, #16]
 800c0c0:	f000 ff72 	bl	800cfa8 <__lshift>
 800c0c4:	0031      	movs	r1, r6
 800c0c6:	9005      	str	r0, [sp, #20]
 800c0c8:	f000 ffdc 	bl	800d084 <__mcmp>
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	dc02      	bgt.n	800c0d6 <_dtoa_r+0xafe>
 800c0d0:	d1e5      	bne.n	800c09e <_dtoa_r+0xac6>
 800c0d2:	07e3      	lsls	r3, r4, #31
 800c0d4:	d5e3      	bpl.n	800c09e <_dtoa_r+0xac6>
 800c0d6:	2c39      	cmp	r4, #57	; 0x39
 800c0d8:	d1df      	bne.n	800c09a <_dtoa_r+0xac2>
 800c0da:	2339      	movs	r3, #57	; 0x39
 800c0dc:	9a07      	ldr	r2, [sp, #28]
 800c0de:	7013      	strb	r3, [r2, #0]
 800c0e0:	9b08      	ldr	r3, [sp, #32]
 800c0e2:	9308      	str	r3, [sp, #32]
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	781a      	ldrb	r2, [r3, #0]
 800c0e8:	2a39      	cmp	r2, #57	; 0x39
 800c0ea:	d063      	beq.n	800c1b4 <_dtoa_r+0xbdc>
 800c0ec:	3201      	adds	r2, #1
 800c0ee:	701a      	strb	r2, [r3, #0]
 800c0f0:	e747      	b.n	800bf82 <_dtoa_r+0x9aa>
 800c0f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	dd03      	ble.n	800c100 <_dtoa_r+0xb28>
 800c0f8:	2c39      	cmp	r4, #57	; 0x39
 800c0fa:	d0ee      	beq.n	800c0da <_dtoa_r+0xb02>
 800c0fc:	3401      	adds	r4, #1
 800c0fe:	e7ce      	b.n	800c09e <_dtoa_r+0xac6>
 800c100:	9b07      	ldr	r3, [sp, #28]
 800c102:	9a07      	ldr	r2, [sp, #28]
 800c104:	701c      	strb	r4, [r3, #0]
 800c106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c108:	4293      	cmp	r3, r2
 800c10a:	d03e      	beq.n	800c18a <_dtoa_r+0xbb2>
 800c10c:	2300      	movs	r3, #0
 800c10e:	220a      	movs	r2, #10
 800c110:	9905      	ldr	r1, [sp, #20]
 800c112:	9804      	ldr	r0, [sp, #16]
 800c114:	f000 fd4c 	bl	800cbb0 <__multadd>
 800c118:	2300      	movs	r3, #0
 800c11a:	9005      	str	r0, [sp, #20]
 800c11c:	220a      	movs	r2, #10
 800c11e:	0029      	movs	r1, r5
 800c120:	9804      	ldr	r0, [sp, #16]
 800c122:	42bd      	cmp	r5, r7
 800c124:	d106      	bne.n	800c134 <_dtoa_r+0xb5c>
 800c126:	f000 fd43 	bl	800cbb0 <__multadd>
 800c12a:	0005      	movs	r5, r0
 800c12c:	0007      	movs	r7, r0
 800c12e:	9b08      	ldr	r3, [sp, #32]
 800c130:	9307      	str	r3, [sp, #28]
 800c132:	e784      	b.n	800c03e <_dtoa_r+0xa66>
 800c134:	f000 fd3c 	bl	800cbb0 <__multadd>
 800c138:	0039      	movs	r1, r7
 800c13a:	0005      	movs	r5, r0
 800c13c:	2300      	movs	r3, #0
 800c13e:	220a      	movs	r2, #10
 800c140:	9804      	ldr	r0, [sp, #16]
 800c142:	f000 fd35 	bl	800cbb0 <__multadd>
 800c146:	0007      	movs	r7, r0
 800c148:	e7f1      	b.n	800c12e <_dtoa_r+0xb56>
 800c14a:	9b07      	ldr	r3, [sp, #28]
 800c14c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c14e:	2500      	movs	r5, #0
 800c150:	0031      	movs	r1, r6
 800c152:	9805      	ldr	r0, [sp, #20]
 800c154:	f7ff f9b0 	bl	800b4b8 <quorem>
 800c158:	9b06      	ldr	r3, [sp, #24]
 800c15a:	3030      	adds	r0, #48	; 0x30
 800c15c:	5558      	strb	r0, [r3, r5]
 800c15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c160:	3501      	adds	r5, #1
 800c162:	0004      	movs	r4, r0
 800c164:	42ab      	cmp	r3, r5
 800c166:	dd07      	ble.n	800c178 <_dtoa_r+0xba0>
 800c168:	2300      	movs	r3, #0
 800c16a:	220a      	movs	r2, #10
 800c16c:	9905      	ldr	r1, [sp, #20]
 800c16e:	9804      	ldr	r0, [sp, #16]
 800c170:	f000 fd1e 	bl	800cbb0 <__multadd>
 800c174:	9005      	str	r0, [sp, #20]
 800c176:	e7eb      	b.n	800c150 <_dtoa_r+0xb78>
 800c178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c17a:	2301      	movs	r3, #1
 800c17c:	2a00      	cmp	r2, #0
 800c17e:	dd00      	ble.n	800c182 <_dtoa_r+0xbaa>
 800c180:	0013      	movs	r3, r2
 800c182:	2500      	movs	r5, #0
 800c184:	9a06      	ldr	r2, [sp, #24]
 800c186:	18d3      	adds	r3, r2, r3
 800c188:	9308      	str	r3, [sp, #32]
 800c18a:	9905      	ldr	r1, [sp, #20]
 800c18c:	2201      	movs	r2, #1
 800c18e:	9804      	ldr	r0, [sp, #16]
 800c190:	f000 ff0a 	bl	800cfa8 <__lshift>
 800c194:	0031      	movs	r1, r6
 800c196:	9005      	str	r0, [sp, #20]
 800c198:	f000 ff74 	bl	800d084 <__mcmp>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	dc9f      	bgt.n	800c0e0 <_dtoa_r+0xb08>
 800c1a0:	d101      	bne.n	800c1a6 <_dtoa_r+0xbce>
 800c1a2:	07e4      	lsls	r4, r4, #31
 800c1a4:	d49c      	bmi.n	800c0e0 <_dtoa_r+0xb08>
 800c1a6:	9b08      	ldr	r3, [sp, #32]
 800c1a8:	9308      	str	r3, [sp, #32]
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	781a      	ldrb	r2, [r3, #0]
 800c1ae:	2a30      	cmp	r2, #48	; 0x30
 800c1b0:	d0fa      	beq.n	800c1a8 <_dtoa_r+0xbd0>
 800c1b2:	e6e6      	b.n	800bf82 <_dtoa_r+0x9aa>
 800c1b4:	9a06      	ldr	r2, [sp, #24]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d193      	bne.n	800c0e2 <_dtoa_r+0xb0a>
 800c1ba:	9b03      	ldr	r3, [sp, #12]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	9303      	str	r3, [sp, #12]
 800c1c0:	2331      	movs	r3, #49	; 0x31
 800c1c2:	7013      	strb	r3, [r2, #0]
 800c1c4:	e6dd      	b.n	800bf82 <_dtoa_r+0x9aa>
 800c1c6:	4b09      	ldr	r3, [pc, #36]	; (800c1ec <_dtoa_r+0xc14>)
 800c1c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c1ca:	9306      	str	r3, [sp, #24]
 800c1cc:	4b08      	ldr	r3, [pc, #32]	; (800c1f0 <_dtoa_r+0xc18>)
 800c1ce:	2a00      	cmp	r2, #0
 800c1d0:	d001      	beq.n	800c1d6 <_dtoa_r+0xbfe>
 800c1d2:	f7ff fa49 	bl	800b668 <_dtoa_r+0x90>
 800c1d6:	f7ff fa49 	bl	800b66c <_dtoa_r+0x94>
 800c1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	dcb6      	bgt.n	800c14e <_dtoa_r+0xb76>
 800c1e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	dd00      	ble.n	800c1e8 <_dtoa_r+0xc10>
 800c1e6:	e6b6      	b.n	800bf56 <_dtoa_r+0x97e>
 800c1e8:	e7b1      	b.n	800c14e <_dtoa_r+0xb76>
 800c1ea:	46c0      	nop			; (mov r8, r8)
 800c1ec:	0800e279 	.word	0x0800e279
 800c1f0:	0800e281 	.word	0x0800e281

0800c1f4 <_free_r>:
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	0005      	movs	r5, r0
 800c1f8:	2900      	cmp	r1, #0
 800c1fa:	d010      	beq.n	800c21e <_free_r+0x2a>
 800c1fc:	1f0c      	subs	r4, r1, #4
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	da00      	bge.n	800c206 <_free_r+0x12>
 800c204:	18e4      	adds	r4, r4, r3
 800c206:	0028      	movs	r0, r5
 800c208:	f000 fc5a 	bl	800cac0 <__malloc_lock>
 800c20c:	4a1d      	ldr	r2, [pc, #116]	; (800c284 <_free_r+0x90>)
 800c20e:	6813      	ldr	r3, [r2, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d105      	bne.n	800c220 <_free_r+0x2c>
 800c214:	6063      	str	r3, [r4, #4]
 800c216:	6014      	str	r4, [r2, #0]
 800c218:	0028      	movs	r0, r5
 800c21a:	f000 fc59 	bl	800cad0 <__malloc_unlock>
 800c21e:	bd70      	pop	{r4, r5, r6, pc}
 800c220:	42a3      	cmp	r3, r4
 800c222:	d908      	bls.n	800c236 <_free_r+0x42>
 800c224:	6820      	ldr	r0, [r4, #0]
 800c226:	1821      	adds	r1, r4, r0
 800c228:	428b      	cmp	r3, r1
 800c22a:	d1f3      	bne.n	800c214 <_free_r+0x20>
 800c22c:	6819      	ldr	r1, [r3, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	1809      	adds	r1, r1, r0
 800c232:	6021      	str	r1, [r4, #0]
 800c234:	e7ee      	b.n	800c214 <_free_r+0x20>
 800c236:	001a      	movs	r2, r3
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <_free_r+0x4e>
 800c23e:	42a3      	cmp	r3, r4
 800c240:	d9f9      	bls.n	800c236 <_free_r+0x42>
 800c242:	6811      	ldr	r1, [r2, #0]
 800c244:	1850      	adds	r0, r2, r1
 800c246:	42a0      	cmp	r0, r4
 800c248:	d10b      	bne.n	800c262 <_free_r+0x6e>
 800c24a:	6820      	ldr	r0, [r4, #0]
 800c24c:	1809      	adds	r1, r1, r0
 800c24e:	1850      	adds	r0, r2, r1
 800c250:	6011      	str	r1, [r2, #0]
 800c252:	4283      	cmp	r3, r0
 800c254:	d1e0      	bne.n	800c218 <_free_r+0x24>
 800c256:	6818      	ldr	r0, [r3, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	1841      	adds	r1, r0, r1
 800c25c:	6011      	str	r1, [r2, #0]
 800c25e:	6053      	str	r3, [r2, #4]
 800c260:	e7da      	b.n	800c218 <_free_r+0x24>
 800c262:	42a0      	cmp	r0, r4
 800c264:	d902      	bls.n	800c26c <_free_r+0x78>
 800c266:	230c      	movs	r3, #12
 800c268:	602b      	str	r3, [r5, #0]
 800c26a:	e7d5      	b.n	800c218 <_free_r+0x24>
 800c26c:	6820      	ldr	r0, [r4, #0]
 800c26e:	1821      	adds	r1, r4, r0
 800c270:	428b      	cmp	r3, r1
 800c272:	d103      	bne.n	800c27c <_free_r+0x88>
 800c274:	6819      	ldr	r1, [r3, #0]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	1809      	adds	r1, r1, r0
 800c27a:	6021      	str	r1, [r4, #0]
 800c27c:	6063      	str	r3, [r4, #4]
 800c27e:	6054      	str	r4, [r2, #4]
 800c280:	e7ca      	b.n	800c218 <_free_r+0x24>
 800c282:	46c0      	nop			; (mov r8, r8)
 800c284:	200007bc 	.word	0x200007bc

0800c288 <rshift>:
 800c288:	0002      	movs	r2, r0
 800c28a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c28c:	6904      	ldr	r4, [r0, #16]
 800c28e:	114b      	asrs	r3, r1, #5
 800c290:	b085      	sub	sp, #20
 800c292:	3214      	adds	r2, #20
 800c294:	9302      	str	r3, [sp, #8]
 800c296:	114d      	asrs	r5, r1, #5
 800c298:	0013      	movs	r3, r2
 800c29a:	42ac      	cmp	r4, r5
 800c29c:	dd32      	ble.n	800c304 <rshift+0x7c>
 800c29e:	261f      	movs	r6, #31
 800c2a0:	000f      	movs	r7, r1
 800c2a2:	114b      	asrs	r3, r1, #5
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	00a5      	lsls	r5, r4, #2
 800c2a8:	18d3      	adds	r3, r2, r3
 800c2aa:	4037      	ands	r7, r6
 800c2ac:	1955      	adds	r5, r2, r5
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	9701      	str	r7, [sp, #4]
 800c2b2:	4231      	tst	r1, r6
 800c2b4:	d10d      	bne.n	800c2d2 <rshift+0x4a>
 800c2b6:	0016      	movs	r6, r2
 800c2b8:	0019      	movs	r1, r3
 800c2ba:	428d      	cmp	r5, r1
 800c2bc:	d836      	bhi.n	800c32c <rshift+0xa4>
 800c2be:	9900      	ldr	r1, [sp, #0]
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	3903      	subs	r1, #3
 800c2c4:	428d      	cmp	r5, r1
 800c2c6:	d302      	bcc.n	800c2ce <rshift+0x46>
 800c2c8:	9b02      	ldr	r3, [sp, #8]
 800c2ca:	1ae4      	subs	r4, r4, r3
 800c2cc:	00a3      	lsls	r3, r4, #2
 800c2ce:	18d3      	adds	r3, r2, r3
 800c2d0:	e018      	b.n	800c304 <rshift+0x7c>
 800c2d2:	2120      	movs	r1, #32
 800c2d4:	9e01      	ldr	r6, [sp, #4]
 800c2d6:	9f01      	ldr	r7, [sp, #4]
 800c2d8:	1b89      	subs	r1, r1, r6
 800c2da:	9e00      	ldr	r6, [sp, #0]
 800c2dc:	9103      	str	r1, [sp, #12]
 800c2de:	ce02      	ldmia	r6!, {r1}
 800c2e0:	4694      	mov	ip, r2
 800c2e2:	40f9      	lsrs	r1, r7
 800c2e4:	42b5      	cmp	r5, r6
 800c2e6:	d816      	bhi.n	800c316 <rshift+0x8e>
 800c2e8:	9e00      	ldr	r6, [sp, #0]
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	3601      	adds	r6, #1
 800c2ee:	42b5      	cmp	r5, r6
 800c2f0:	d303      	bcc.n	800c2fa <rshift+0x72>
 800c2f2:	9b02      	ldr	r3, [sp, #8]
 800c2f4:	1ae3      	subs	r3, r4, r3
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	3b04      	subs	r3, #4
 800c2fa:	18d3      	adds	r3, r2, r3
 800c2fc:	6019      	str	r1, [r3, #0]
 800c2fe:	2900      	cmp	r1, #0
 800c300:	d000      	beq.n	800c304 <rshift+0x7c>
 800c302:	3304      	adds	r3, #4
 800c304:	1a99      	subs	r1, r3, r2
 800c306:	1089      	asrs	r1, r1, #2
 800c308:	6101      	str	r1, [r0, #16]
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d101      	bne.n	800c312 <rshift+0x8a>
 800c30e:	2300      	movs	r3, #0
 800c310:	6143      	str	r3, [r0, #20]
 800c312:	b005      	add	sp, #20
 800c314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c316:	6837      	ldr	r7, [r6, #0]
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	409f      	lsls	r7, r3
 800c31c:	430f      	orrs	r7, r1
 800c31e:	4661      	mov	r1, ip
 800c320:	c180      	stmia	r1!, {r7}
 800c322:	468c      	mov	ip, r1
 800c324:	9b01      	ldr	r3, [sp, #4]
 800c326:	ce02      	ldmia	r6!, {r1}
 800c328:	40d9      	lsrs	r1, r3
 800c32a:	e7db      	b.n	800c2e4 <rshift+0x5c>
 800c32c:	c980      	ldmia	r1!, {r7}
 800c32e:	c680      	stmia	r6!, {r7}
 800c330:	e7c3      	b.n	800c2ba <rshift+0x32>

0800c332 <__hexdig_fun>:
 800c332:	0002      	movs	r2, r0
 800c334:	3a30      	subs	r2, #48	; 0x30
 800c336:	0003      	movs	r3, r0
 800c338:	2a09      	cmp	r2, #9
 800c33a:	d802      	bhi.n	800c342 <__hexdig_fun+0x10>
 800c33c:	3b20      	subs	r3, #32
 800c33e:	b2d8      	uxtb	r0, r3
 800c340:	4770      	bx	lr
 800c342:	0002      	movs	r2, r0
 800c344:	3a61      	subs	r2, #97	; 0x61
 800c346:	2a05      	cmp	r2, #5
 800c348:	d801      	bhi.n	800c34e <__hexdig_fun+0x1c>
 800c34a:	3b47      	subs	r3, #71	; 0x47
 800c34c:	e7f7      	b.n	800c33e <__hexdig_fun+0xc>
 800c34e:	001a      	movs	r2, r3
 800c350:	3a41      	subs	r2, #65	; 0x41
 800c352:	2000      	movs	r0, #0
 800c354:	2a05      	cmp	r2, #5
 800c356:	d8f3      	bhi.n	800c340 <__hexdig_fun+0xe>
 800c358:	3b27      	subs	r3, #39	; 0x27
 800c35a:	e7f0      	b.n	800c33e <__hexdig_fun+0xc>

0800c35c <__gethex>:
 800c35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c35e:	b089      	sub	sp, #36	; 0x24
 800c360:	9307      	str	r3, [sp, #28]
 800c362:	2302      	movs	r3, #2
 800c364:	9201      	str	r2, [sp, #4]
 800c366:	680a      	ldr	r2, [r1, #0]
 800c368:	425b      	negs	r3, r3
 800c36a:	9003      	str	r0, [sp, #12]
 800c36c:	9106      	str	r1, [sp, #24]
 800c36e:	1c96      	adds	r6, r2, #2
 800c370:	1a9b      	subs	r3, r3, r2
 800c372:	199a      	adds	r2, r3, r6
 800c374:	9600      	str	r6, [sp, #0]
 800c376:	9205      	str	r2, [sp, #20]
 800c378:	9a00      	ldr	r2, [sp, #0]
 800c37a:	3601      	adds	r6, #1
 800c37c:	7810      	ldrb	r0, [r2, #0]
 800c37e:	2830      	cmp	r0, #48	; 0x30
 800c380:	d0f7      	beq.n	800c372 <__gethex+0x16>
 800c382:	f7ff ffd6 	bl	800c332 <__hexdig_fun>
 800c386:	2300      	movs	r3, #0
 800c388:	001d      	movs	r5, r3
 800c38a:	9302      	str	r3, [sp, #8]
 800c38c:	4298      	cmp	r0, r3
 800c38e:	d11d      	bne.n	800c3cc <__gethex+0x70>
 800c390:	2201      	movs	r2, #1
 800c392:	49a6      	ldr	r1, [pc, #664]	; (800c62c <__gethex+0x2d0>)
 800c394:	9800      	ldr	r0, [sp, #0]
 800c396:	f7fe ff61 	bl	800b25c <strncmp>
 800c39a:	0007      	movs	r7, r0
 800c39c:	42a8      	cmp	r0, r5
 800c39e:	d169      	bne.n	800c474 <__gethex+0x118>
 800c3a0:	9b00      	ldr	r3, [sp, #0]
 800c3a2:	0034      	movs	r4, r6
 800c3a4:	7858      	ldrb	r0, [r3, #1]
 800c3a6:	f7ff ffc4 	bl	800c332 <__hexdig_fun>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	9302      	str	r3, [sp, #8]
 800c3ae:	42a8      	cmp	r0, r5
 800c3b0:	d02f      	beq.n	800c412 <__gethex+0xb6>
 800c3b2:	9600      	str	r6, [sp, #0]
 800c3b4:	9b00      	ldr	r3, [sp, #0]
 800c3b6:	7818      	ldrb	r0, [r3, #0]
 800c3b8:	2830      	cmp	r0, #48	; 0x30
 800c3ba:	d009      	beq.n	800c3d0 <__gethex+0x74>
 800c3bc:	f7ff ffb9 	bl	800c332 <__hexdig_fun>
 800c3c0:	4242      	negs	r2, r0
 800c3c2:	4142      	adcs	r2, r0
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	0035      	movs	r5, r6
 800c3c8:	9202      	str	r2, [sp, #8]
 800c3ca:	9305      	str	r3, [sp, #20]
 800c3cc:	9c00      	ldr	r4, [sp, #0]
 800c3ce:	e004      	b.n	800c3da <__gethex+0x7e>
 800c3d0:	9b00      	ldr	r3, [sp, #0]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	e7ed      	b.n	800c3b4 <__gethex+0x58>
 800c3d8:	3401      	adds	r4, #1
 800c3da:	7820      	ldrb	r0, [r4, #0]
 800c3dc:	f7ff ffa9 	bl	800c332 <__hexdig_fun>
 800c3e0:	1e07      	subs	r7, r0, #0
 800c3e2:	d1f9      	bne.n	800c3d8 <__gethex+0x7c>
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	0020      	movs	r0, r4
 800c3e8:	4990      	ldr	r1, [pc, #576]	; (800c62c <__gethex+0x2d0>)
 800c3ea:	f7fe ff37 	bl	800b25c <strncmp>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d10d      	bne.n	800c40e <__gethex+0xb2>
 800c3f2:	2d00      	cmp	r5, #0
 800c3f4:	d106      	bne.n	800c404 <__gethex+0xa8>
 800c3f6:	3401      	adds	r4, #1
 800c3f8:	0025      	movs	r5, r4
 800c3fa:	7820      	ldrb	r0, [r4, #0]
 800c3fc:	f7ff ff99 	bl	800c332 <__hexdig_fun>
 800c400:	2800      	cmp	r0, #0
 800c402:	d102      	bne.n	800c40a <__gethex+0xae>
 800c404:	1b2d      	subs	r5, r5, r4
 800c406:	00af      	lsls	r7, r5, #2
 800c408:	e003      	b.n	800c412 <__gethex+0xb6>
 800c40a:	3401      	adds	r4, #1
 800c40c:	e7f5      	b.n	800c3fa <__gethex+0x9e>
 800c40e:	2d00      	cmp	r5, #0
 800c410:	d1f8      	bne.n	800c404 <__gethex+0xa8>
 800c412:	2220      	movs	r2, #32
 800c414:	7823      	ldrb	r3, [r4, #0]
 800c416:	0026      	movs	r6, r4
 800c418:	4393      	bics	r3, r2
 800c41a:	2b50      	cmp	r3, #80	; 0x50
 800c41c:	d11d      	bne.n	800c45a <__gethex+0xfe>
 800c41e:	7863      	ldrb	r3, [r4, #1]
 800c420:	2b2b      	cmp	r3, #43	; 0x2b
 800c422:	d02c      	beq.n	800c47e <__gethex+0x122>
 800c424:	2b2d      	cmp	r3, #45	; 0x2d
 800c426:	d02e      	beq.n	800c486 <__gethex+0x12a>
 800c428:	2300      	movs	r3, #0
 800c42a:	1c66      	adds	r6, r4, #1
 800c42c:	9304      	str	r3, [sp, #16]
 800c42e:	7830      	ldrb	r0, [r6, #0]
 800c430:	f7ff ff7f 	bl	800c332 <__hexdig_fun>
 800c434:	1e43      	subs	r3, r0, #1
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b18      	cmp	r3, #24
 800c43a:	d82b      	bhi.n	800c494 <__gethex+0x138>
 800c43c:	3810      	subs	r0, #16
 800c43e:	0005      	movs	r5, r0
 800c440:	7870      	ldrb	r0, [r6, #1]
 800c442:	f7ff ff76 	bl	800c332 <__hexdig_fun>
 800c446:	1e43      	subs	r3, r0, #1
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	3601      	adds	r6, #1
 800c44c:	2b18      	cmp	r3, #24
 800c44e:	d91c      	bls.n	800c48a <__gethex+0x12e>
 800c450:	9b04      	ldr	r3, [sp, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d000      	beq.n	800c458 <__gethex+0xfc>
 800c456:	426d      	negs	r5, r5
 800c458:	197f      	adds	r7, r7, r5
 800c45a:	9b06      	ldr	r3, [sp, #24]
 800c45c:	601e      	str	r6, [r3, #0]
 800c45e:	9b02      	ldr	r3, [sp, #8]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d019      	beq.n	800c498 <__gethex+0x13c>
 800c464:	2600      	movs	r6, #0
 800c466:	9b05      	ldr	r3, [sp, #20]
 800c468:	42b3      	cmp	r3, r6
 800c46a:	d100      	bne.n	800c46e <__gethex+0x112>
 800c46c:	3606      	adds	r6, #6
 800c46e:	0030      	movs	r0, r6
 800c470:	b009      	add	sp, #36	; 0x24
 800c472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c474:	2301      	movs	r3, #1
 800c476:	2700      	movs	r7, #0
 800c478:	9c00      	ldr	r4, [sp, #0]
 800c47a:	9302      	str	r3, [sp, #8]
 800c47c:	e7c9      	b.n	800c412 <__gethex+0xb6>
 800c47e:	2300      	movs	r3, #0
 800c480:	9304      	str	r3, [sp, #16]
 800c482:	1ca6      	adds	r6, r4, #2
 800c484:	e7d3      	b.n	800c42e <__gethex+0xd2>
 800c486:	2301      	movs	r3, #1
 800c488:	e7fa      	b.n	800c480 <__gethex+0x124>
 800c48a:	230a      	movs	r3, #10
 800c48c:	435d      	muls	r5, r3
 800c48e:	182d      	adds	r5, r5, r0
 800c490:	3d10      	subs	r5, #16
 800c492:	e7d5      	b.n	800c440 <__gethex+0xe4>
 800c494:	0026      	movs	r6, r4
 800c496:	e7e0      	b.n	800c45a <__gethex+0xfe>
 800c498:	9b00      	ldr	r3, [sp, #0]
 800c49a:	9902      	ldr	r1, [sp, #8]
 800c49c:	1ae3      	subs	r3, r4, r3
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	2b07      	cmp	r3, #7
 800c4a2:	dc0a      	bgt.n	800c4ba <__gethex+0x15e>
 800c4a4:	9803      	ldr	r0, [sp, #12]
 800c4a6:	f000 fb1b 	bl	800cae0 <_Balloc>
 800c4aa:	1e05      	subs	r5, r0, #0
 800c4ac:	d108      	bne.n	800c4c0 <__gethex+0x164>
 800c4ae:	002a      	movs	r2, r5
 800c4b0:	21e4      	movs	r1, #228	; 0xe4
 800c4b2:	4b5f      	ldr	r3, [pc, #380]	; (800c630 <__gethex+0x2d4>)
 800c4b4:	485f      	ldr	r0, [pc, #380]	; (800c634 <__gethex+0x2d8>)
 800c4b6:	f7fe ffe1 	bl	800b47c <__assert_func>
 800c4ba:	3101      	adds	r1, #1
 800c4bc:	105b      	asrs	r3, r3, #1
 800c4be:	e7ef      	b.n	800c4a0 <__gethex+0x144>
 800c4c0:	0003      	movs	r3, r0
 800c4c2:	3314      	adds	r3, #20
 800c4c4:	9302      	str	r3, [sp, #8]
 800c4c6:	9305      	str	r3, [sp, #20]
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	001e      	movs	r6, r3
 800c4cc:	9304      	str	r3, [sp, #16]
 800c4ce:	9b00      	ldr	r3, [sp, #0]
 800c4d0:	42a3      	cmp	r3, r4
 800c4d2:	d33f      	bcc.n	800c554 <__gethex+0x1f8>
 800c4d4:	9c05      	ldr	r4, [sp, #20]
 800c4d6:	9b02      	ldr	r3, [sp, #8]
 800c4d8:	c440      	stmia	r4!, {r6}
 800c4da:	1ae4      	subs	r4, r4, r3
 800c4dc:	10a4      	asrs	r4, r4, #2
 800c4de:	0030      	movs	r0, r6
 800c4e0:	612c      	str	r4, [r5, #16]
 800c4e2:	f000 fbf5 	bl	800ccd0 <__hi0bits>
 800c4e6:	9b01      	ldr	r3, [sp, #4]
 800c4e8:	0164      	lsls	r4, r4, #5
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	1a26      	subs	r6, r4, r0
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	429e      	cmp	r6, r3
 800c4f2:	dd51      	ble.n	800c598 <__gethex+0x23c>
 800c4f4:	1af6      	subs	r6, r6, r3
 800c4f6:	0031      	movs	r1, r6
 800c4f8:	0028      	movs	r0, r5
 800c4fa:	f000 ff89 	bl	800d410 <__any_on>
 800c4fe:	1e04      	subs	r4, r0, #0
 800c500:	d016      	beq.n	800c530 <__gethex+0x1d4>
 800c502:	2401      	movs	r4, #1
 800c504:	231f      	movs	r3, #31
 800c506:	0020      	movs	r0, r4
 800c508:	1e72      	subs	r2, r6, #1
 800c50a:	4013      	ands	r3, r2
 800c50c:	4098      	lsls	r0, r3
 800c50e:	0003      	movs	r3, r0
 800c510:	1151      	asrs	r1, r2, #5
 800c512:	9802      	ldr	r0, [sp, #8]
 800c514:	0089      	lsls	r1, r1, #2
 800c516:	5809      	ldr	r1, [r1, r0]
 800c518:	4219      	tst	r1, r3
 800c51a:	d009      	beq.n	800c530 <__gethex+0x1d4>
 800c51c:	42a2      	cmp	r2, r4
 800c51e:	dd06      	ble.n	800c52e <__gethex+0x1d2>
 800c520:	0028      	movs	r0, r5
 800c522:	1eb1      	subs	r1, r6, #2
 800c524:	f000 ff74 	bl	800d410 <__any_on>
 800c528:	3402      	adds	r4, #2
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d100      	bne.n	800c530 <__gethex+0x1d4>
 800c52e:	2402      	movs	r4, #2
 800c530:	0031      	movs	r1, r6
 800c532:	0028      	movs	r0, r5
 800c534:	f7ff fea8 	bl	800c288 <rshift>
 800c538:	19bf      	adds	r7, r7, r6
 800c53a:	9b01      	ldr	r3, [sp, #4]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	42bb      	cmp	r3, r7
 800c540:	da3a      	bge.n	800c5b8 <__gethex+0x25c>
 800c542:	0029      	movs	r1, r5
 800c544:	9803      	ldr	r0, [sp, #12]
 800c546:	f000 fb0f 	bl	800cb68 <_Bfree>
 800c54a:	2300      	movs	r3, #0
 800c54c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c54e:	26a3      	movs	r6, #163	; 0xa3
 800c550:	6013      	str	r3, [r2, #0]
 800c552:	e78c      	b.n	800c46e <__gethex+0x112>
 800c554:	3c01      	subs	r4, #1
 800c556:	7823      	ldrb	r3, [r4, #0]
 800c558:	2b2e      	cmp	r3, #46	; 0x2e
 800c55a:	d012      	beq.n	800c582 <__gethex+0x226>
 800c55c:	9b04      	ldr	r3, [sp, #16]
 800c55e:	2b20      	cmp	r3, #32
 800c560:	d104      	bne.n	800c56c <__gethex+0x210>
 800c562:	9b05      	ldr	r3, [sp, #20]
 800c564:	c340      	stmia	r3!, {r6}
 800c566:	2600      	movs	r6, #0
 800c568:	9305      	str	r3, [sp, #20]
 800c56a:	9604      	str	r6, [sp, #16]
 800c56c:	7820      	ldrb	r0, [r4, #0]
 800c56e:	f7ff fee0 	bl	800c332 <__hexdig_fun>
 800c572:	230f      	movs	r3, #15
 800c574:	4018      	ands	r0, r3
 800c576:	9b04      	ldr	r3, [sp, #16]
 800c578:	4098      	lsls	r0, r3
 800c57a:	3304      	adds	r3, #4
 800c57c:	4306      	orrs	r6, r0
 800c57e:	9304      	str	r3, [sp, #16]
 800c580:	e7a5      	b.n	800c4ce <__gethex+0x172>
 800c582:	9b00      	ldr	r3, [sp, #0]
 800c584:	42a3      	cmp	r3, r4
 800c586:	d8e9      	bhi.n	800c55c <__gethex+0x200>
 800c588:	2201      	movs	r2, #1
 800c58a:	0020      	movs	r0, r4
 800c58c:	4927      	ldr	r1, [pc, #156]	; (800c62c <__gethex+0x2d0>)
 800c58e:	f7fe fe65 	bl	800b25c <strncmp>
 800c592:	2800      	cmp	r0, #0
 800c594:	d1e2      	bne.n	800c55c <__gethex+0x200>
 800c596:	e79a      	b.n	800c4ce <__gethex+0x172>
 800c598:	9b00      	ldr	r3, [sp, #0]
 800c59a:	2400      	movs	r4, #0
 800c59c:	429e      	cmp	r6, r3
 800c59e:	dacc      	bge.n	800c53a <__gethex+0x1de>
 800c5a0:	1b9e      	subs	r6, r3, r6
 800c5a2:	0029      	movs	r1, r5
 800c5a4:	0032      	movs	r2, r6
 800c5a6:	9803      	ldr	r0, [sp, #12]
 800c5a8:	f000 fcfe 	bl	800cfa8 <__lshift>
 800c5ac:	0003      	movs	r3, r0
 800c5ae:	3314      	adds	r3, #20
 800c5b0:	0005      	movs	r5, r0
 800c5b2:	1bbf      	subs	r7, r7, r6
 800c5b4:	9302      	str	r3, [sp, #8]
 800c5b6:	e7c0      	b.n	800c53a <__gethex+0x1de>
 800c5b8:	9b01      	ldr	r3, [sp, #4]
 800c5ba:	685e      	ldr	r6, [r3, #4]
 800c5bc:	42be      	cmp	r6, r7
 800c5be:	dd70      	ble.n	800c6a2 <__gethex+0x346>
 800c5c0:	9b00      	ldr	r3, [sp, #0]
 800c5c2:	1bf6      	subs	r6, r6, r7
 800c5c4:	42b3      	cmp	r3, r6
 800c5c6:	dc37      	bgt.n	800c638 <__gethex+0x2dc>
 800c5c8:	9b01      	ldr	r3, [sp, #4]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d024      	beq.n	800c61a <__gethex+0x2be>
 800c5d0:	2b03      	cmp	r3, #3
 800c5d2:	d026      	beq.n	800c622 <__gethex+0x2c6>
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d117      	bne.n	800c608 <__gethex+0x2ac>
 800c5d8:	9b00      	ldr	r3, [sp, #0]
 800c5da:	42b3      	cmp	r3, r6
 800c5dc:	d114      	bne.n	800c608 <__gethex+0x2ac>
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d10b      	bne.n	800c5fa <__gethex+0x29e>
 800c5e2:	9b01      	ldr	r3, [sp, #4]
 800c5e4:	9a07      	ldr	r2, [sp, #28]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	2662      	movs	r6, #98	; 0x62
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	9a02      	ldr	r2, [sp, #8]
 800c5f0:	612b      	str	r3, [r5, #16]
 800c5f2:	6013      	str	r3, [r2, #0]
 800c5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5f6:	601d      	str	r5, [r3, #0]
 800c5f8:	e739      	b.n	800c46e <__gethex+0x112>
 800c5fa:	9900      	ldr	r1, [sp, #0]
 800c5fc:	0028      	movs	r0, r5
 800c5fe:	3901      	subs	r1, #1
 800c600:	f000 ff06 	bl	800d410 <__any_on>
 800c604:	2800      	cmp	r0, #0
 800c606:	d1ec      	bne.n	800c5e2 <__gethex+0x286>
 800c608:	0029      	movs	r1, r5
 800c60a:	9803      	ldr	r0, [sp, #12]
 800c60c:	f000 faac 	bl	800cb68 <_Bfree>
 800c610:	2300      	movs	r3, #0
 800c612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c614:	2650      	movs	r6, #80	; 0x50
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	e729      	b.n	800c46e <__gethex+0x112>
 800c61a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1f3      	bne.n	800c608 <__gethex+0x2ac>
 800c620:	e7df      	b.n	800c5e2 <__gethex+0x286>
 800c622:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1dc      	bne.n	800c5e2 <__gethex+0x286>
 800c628:	e7ee      	b.n	800c608 <__gethex+0x2ac>
 800c62a:	46c0      	nop			; (mov r8, r8)
 800c62c:	0800e138 	.word	0x0800e138
 800c630:	0800e2de 	.word	0x0800e2de
 800c634:	0800e2ef 	.word	0x0800e2ef
 800c638:	1e77      	subs	r7, r6, #1
 800c63a:	2c00      	cmp	r4, #0
 800c63c:	d12f      	bne.n	800c69e <__gethex+0x342>
 800c63e:	2f00      	cmp	r7, #0
 800c640:	d004      	beq.n	800c64c <__gethex+0x2f0>
 800c642:	0039      	movs	r1, r7
 800c644:	0028      	movs	r0, r5
 800c646:	f000 fee3 	bl	800d410 <__any_on>
 800c64a:	0004      	movs	r4, r0
 800c64c:	231f      	movs	r3, #31
 800c64e:	117a      	asrs	r2, r7, #5
 800c650:	401f      	ands	r7, r3
 800c652:	3b1e      	subs	r3, #30
 800c654:	40bb      	lsls	r3, r7
 800c656:	9902      	ldr	r1, [sp, #8]
 800c658:	0092      	lsls	r2, r2, #2
 800c65a:	5852      	ldr	r2, [r2, r1]
 800c65c:	421a      	tst	r2, r3
 800c65e:	d001      	beq.n	800c664 <__gethex+0x308>
 800c660:	2302      	movs	r3, #2
 800c662:	431c      	orrs	r4, r3
 800c664:	9b00      	ldr	r3, [sp, #0]
 800c666:	0031      	movs	r1, r6
 800c668:	1b9b      	subs	r3, r3, r6
 800c66a:	2602      	movs	r6, #2
 800c66c:	0028      	movs	r0, r5
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	f7ff fe0a 	bl	800c288 <rshift>
 800c674:	9b01      	ldr	r3, [sp, #4]
 800c676:	685f      	ldr	r7, [r3, #4]
 800c678:	2c00      	cmp	r4, #0
 800c67a:	d041      	beq.n	800c700 <__gethex+0x3a4>
 800c67c:	9b01      	ldr	r3, [sp, #4]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	2b02      	cmp	r3, #2
 800c682:	d010      	beq.n	800c6a6 <__gethex+0x34a>
 800c684:	2b03      	cmp	r3, #3
 800c686:	d012      	beq.n	800c6ae <__gethex+0x352>
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d106      	bne.n	800c69a <__gethex+0x33e>
 800c68c:	07a2      	lsls	r2, r4, #30
 800c68e:	d504      	bpl.n	800c69a <__gethex+0x33e>
 800c690:	9a02      	ldr	r2, [sp, #8]
 800c692:	6812      	ldr	r2, [r2, #0]
 800c694:	4314      	orrs	r4, r2
 800c696:	421c      	tst	r4, r3
 800c698:	d10c      	bne.n	800c6b4 <__gethex+0x358>
 800c69a:	2310      	movs	r3, #16
 800c69c:	e02f      	b.n	800c6fe <__gethex+0x3a2>
 800c69e:	2401      	movs	r4, #1
 800c6a0:	e7d4      	b.n	800c64c <__gethex+0x2f0>
 800c6a2:	2601      	movs	r6, #1
 800c6a4:	e7e8      	b.n	800c678 <__gethex+0x31c>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c6aa:	1a9b      	subs	r3, r3, r2
 800c6ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d0f2      	beq.n	800c69a <__gethex+0x33e>
 800c6b4:	692b      	ldr	r3, [r5, #16]
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	9302      	str	r3, [sp, #8]
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	9304      	str	r3, [sp, #16]
 800c6be:	002b      	movs	r3, r5
 800c6c0:	9a04      	ldr	r2, [sp, #16]
 800c6c2:	3314      	adds	r3, #20
 800c6c4:	1899      	adds	r1, r3, r2
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	1c54      	adds	r4, r2, #1
 800c6ca:	d01e      	beq.n	800c70a <__gethex+0x3ae>
 800c6cc:	3201      	adds	r2, #1
 800c6ce:	601a      	str	r2, [r3, #0]
 800c6d0:	002b      	movs	r3, r5
 800c6d2:	3314      	adds	r3, #20
 800c6d4:	2e02      	cmp	r6, #2
 800c6d6:	d141      	bne.n	800c75c <__gethex+0x400>
 800c6d8:	9a01      	ldr	r2, [sp, #4]
 800c6da:	9900      	ldr	r1, [sp, #0]
 800c6dc:	6812      	ldr	r2, [r2, #0]
 800c6de:	3a01      	subs	r2, #1
 800c6e0:	428a      	cmp	r2, r1
 800c6e2:	d10b      	bne.n	800c6fc <__gethex+0x3a0>
 800c6e4:	221f      	movs	r2, #31
 800c6e6:	9800      	ldr	r0, [sp, #0]
 800c6e8:	1149      	asrs	r1, r1, #5
 800c6ea:	4002      	ands	r2, r0
 800c6ec:	2001      	movs	r0, #1
 800c6ee:	0004      	movs	r4, r0
 800c6f0:	4094      	lsls	r4, r2
 800c6f2:	0089      	lsls	r1, r1, #2
 800c6f4:	58cb      	ldr	r3, [r1, r3]
 800c6f6:	4223      	tst	r3, r4
 800c6f8:	d000      	beq.n	800c6fc <__gethex+0x3a0>
 800c6fa:	2601      	movs	r6, #1
 800c6fc:	2320      	movs	r3, #32
 800c6fe:	431e      	orrs	r6, r3
 800c700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c702:	601d      	str	r5, [r3, #0]
 800c704:	9b07      	ldr	r3, [sp, #28]
 800c706:	601f      	str	r7, [r3, #0]
 800c708:	e6b1      	b.n	800c46e <__gethex+0x112>
 800c70a:	c301      	stmia	r3!, {r0}
 800c70c:	4299      	cmp	r1, r3
 800c70e:	d8da      	bhi.n	800c6c6 <__gethex+0x36a>
 800c710:	68ab      	ldr	r3, [r5, #8]
 800c712:	9a02      	ldr	r2, [sp, #8]
 800c714:	429a      	cmp	r2, r3
 800c716:	db18      	blt.n	800c74a <__gethex+0x3ee>
 800c718:	6869      	ldr	r1, [r5, #4]
 800c71a:	9803      	ldr	r0, [sp, #12]
 800c71c:	3101      	adds	r1, #1
 800c71e:	f000 f9df 	bl	800cae0 <_Balloc>
 800c722:	1e04      	subs	r4, r0, #0
 800c724:	d104      	bne.n	800c730 <__gethex+0x3d4>
 800c726:	0022      	movs	r2, r4
 800c728:	2184      	movs	r1, #132	; 0x84
 800c72a:	4b1c      	ldr	r3, [pc, #112]	; (800c79c <__gethex+0x440>)
 800c72c:	481c      	ldr	r0, [pc, #112]	; (800c7a0 <__gethex+0x444>)
 800c72e:	e6c2      	b.n	800c4b6 <__gethex+0x15a>
 800c730:	0029      	movs	r1, r5
 800c732:	692a      	ldr	r2, [r5, #16]
 800c734:	310c      	adds	r1, #12
 800c736:	3202      	adds	r2, #2
 800c738:	0092      	lsls	r2, r2, #2
 800c73a:	300c      	adds	r0, #12
 800c73c:	f7fe fe8e 	bl	800b45c <memcpy>
 800c740:	0029      	movs	r1, r5
 800c742:	9803      	ldr	r0, [sp, #12]
 800c744:	f000 fa10 	bl	800cb68 <_Bfree>
 800c748:	0025      	movs	r5, r4
 800c74a:	692b      	ldr	r3, [r5, #16]
 800c74c:	1c5a      	adds	r2, r3, #1
 800c74e:	612a      	str	r2, [r5, #16]
 800c750:	2201      	movs	r2, #1
 800c752:	3304      	adds	r3, #4
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	18eb      	adds	r3, r5, r3
 800c758:	605a      	str	r2, [r3, #4]
 800c75a:	e7b9      	b.n	800c6d0 <__gethex+0x374>
 800c75c:	692a      	ldr	r2, [r5, #16]
 800c75e:	9902      	ldr	r1, [sp, #8]
 800c760:	428a      	cmp	r2, r1
 800c762:	dd09      	ble.n	800c778 <__gethex+0x41c>
 800c764:	2101      	movs	r1, #1
 800c766:	0028      	movs	r0, r5
 800c768:	f7ff fd8e 	bl	800c288 <rshift>
 800c76c:	9b01      	ldr	r3, [sp, #4]
 800c76e:	3701      	adds	r7, #1
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	42bb      	cmp	r3, r7
 800c774:	dac1      	bge.n	800c6fa <__gethex+0x39e>
 800c776:	e6e4      	b.n	800c542 <__gethex+0x1e6>
 800c778:	221f      	movs	r2, #31
 800c77a:	9c00      	ldr	r4, [sp, #0]
 800c77c:	9900      	ldr	r1, [sp, #0]
 800c77e:	2601      	movs	r6, #1
 800c780:	4014      	ands	r4, r2
 800c782:	4211      	tst	r1, r2
 800c784:	d0ba      	beq.n	800c6fc <__gethex+0x3a0>
 800c786:	9a04      	ldr	r2, [sp, #16]
 800c788:	189b      	adds	r3, r3, r2
 800c78a:	3b04      	subs	r3, #4
 800c78c:	6818      	ldr	r0, [r3, #0]
 800c78e:	f000 fa9f 	bl	800ccd0 <__hi0bits>
 800c792:	2320      	movs	r3, #32
 800c794:	1b1b      	subs	r3, r3, r4
 800c796:	4298      	cmp	r0, r3
 800c798:	dbe4      	blt.n	800c764 <__gethex+0x408>
 800c79a:	e7af      	b.n	800c6fc <__gethex+0x3a0>
 800c79c:	0800e2de 	.word	0x0800e2de
 800c7a0:	0800e2ef 	.word	0x0800e2ef

0800c7a4 <L_shift>:
 800c7a4:	2308      	movs	r3, #8
 800c7a6:	b570      	push	{r4, r5, r6, lr}
 800c7a8:	2520      	movs	r5, #32
 800c7aa:	1a9a      	subs	r2, r3, r2
 800c7ac:	0092      	lsls	r2, r2, #2
 800c7ae:	1aad      	subs	r5, r5, r2
 800c7b0:	6843      	ldr	r3, [r0, #4]
 800c7b2:	6804      	ldr	r4, [r0, #0]
 800c7b4:	001e      	movs	r6, r3
 800c7b6:	40ae      	lsls	r6, r5
 800c7b8:	40d3      	lsrs	r3, r2
 800c7ba:	4334      	orrs	r4, r6
 800c7bc:	6004      	str	r4, [r0, #0]
 800c7be:	6043      	str	r3, [r0, #4]
 800c7c0:	3004      	adds	r0, #4
 800c7c2:	4288      	cmp	r0, r1
 800c7c4:	d3f4      	bcc.n	800c7b0 <L_shift+0xc>
 800c7c6:	bd70      	pop	{r4, r5, r6, pc}

0800c7c8 <__match>:
 800c7c8:	b530      	push	{r4, r5, lr}
 800c7ca:	6803      	ldr	r3, [r0, #0]
 800c7cc:	780c      	ldrb	r4, [r1, #0]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	2c00      	cmp	r4, #0
 800c7d2:	d102      	bne.n	800c7da <__match+0x12>
 800c7d4:	6003      	str	r3, [r0, #0]
 800c7d6:	2001      	movs	r0, #1
 800c7d8:	bd30      	pop	{r4, r5, pc}
 800c7da:	781a      	ldrb	r2, [r3, #0]
 800c7dc:	0015      	movs	r5, r2
 800c7de:	3d41      	subs	r5, #65	; 0x41
 800c7e0:	2d19      	cmp	r5, #25
 800c7e2:	d800      	bhi.n	800c7e6 <__match+0x1e>
 800c7e4:	3220      	adds	r2, #32
 800c7e6:	3101      	adds	r1, #1
 800c7e8:	42a2      	cmp	r2, r4
 800c7ea:	d0ef      	beq.n	800c7cc <__match+0x4>
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	e7f3      	b.n	800c7d8 <__match+0x10>

0800c7f0 <__hexnan>:
 800c7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7f2:	680b      	ldr	r3, [r1, #0]
 800c7f4:	b08b      	sub	sp, #44	; 0x2c
 800c7f6:	9201      	str	r2, [sp, #4]
 800c7f8:	9901      	ldr	r1, [sp, #4]
 800c7fa:	115a      	asrs	r2, r3, #5
 800c7fc:	0092      	lsls	r2, r2, #2
 800c7fe:	188a      	adds	r2, r1, r2
 800c800:	9202      	str	r2, [sp, #8]
 800c802:	0019      	movs	r1, r3
 800c804:	221f      	movs	r2, #31
 800c806:	4011      	ands	r1, r2
 800c808:	9008      	str	r0, [sp, #32]
 800c80a:	9106      	str	r1, [sp, #24]
 800c80c:	4213      	tst	r3, r2
 800c80e:	d002      	beq.n	800c816 <__hexnan+0x26>
 800c810:	9b02      	ldr	r3, [sp, #8]
 800c812:	3304      	adds	r3, #4
 800c814:	9302      	str	r3, [sp, #8]
 800c816:	9b02      	ldr	r3, [sp, #8]
 800c818:	2500      	movs	r5, #0
 800c81a:	1f1f      	subs	r7, r3, #4
 800c81c:	003e      	movs	r6, r7
 800c81e:	003c      	movs	r4, r7
 800c820:	9b08      	ldr	r3, [sp, #32]
 800c822:	603d      	str	r5, [r7, #0]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	9507      	str	r5, [sp, #28]
 800c828:	9305      	str	r3, [sp, #20]
 800c82a:	9503      	str	r5, [sp, #12]
 800c82c:	9b05      	ldr	r3, [sp, #20]
 800c82e:	3301      	adds	r3, #1
 800c830:	9309      	str	r3, [sp, #36]	; 0x24
 800c832:	9b05      	ldr	r3, [sp, #20]
 800c834:	785b      	ldrb	r3, [r3, #1]
 800c836:	9304      	str	r3, [sp, #16]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d028      	beq.n	800c88e <__hexnan+0x9e>
 800c83c:	9804      	ldr	r0, [sp, #16]
 800c83e:	f7ff fd78 	bl	800c332 <__hexdig_fun>
 800c842:	2800      	cmp	r0, #0
 800c844:	d154      	bne.n	800c8f0 <__hexnan+0x100>
 800c846:	9b04      	ldr	r3, [sp, #16]
 800c848:	2b20      	cmp	r3, #32
 800c84a:	d819      	bhi.n	800c880 <__hexnan+0x90>
 800c84c:	9b03      	ldr	r3, [sp, #12]
 800c84e:	9a07      	ldr	r2, [sp, #28]
 800c850:	4293      	cmp	r3, r2
 800c852:	dd12      	ble.n	800c87a <__hexnan+0x8a>
 800c854:	42b4      	cmp	r4, r6
 800c856:	d206      	bcs.n	800c866 <__hexnan+0x76>
 800c858:	2d07      	cmp	r5, #7
 800c85a:	dc04      	bgt.n	800c866 <__hexnan+0x76>
 800c85c:	002a      	movs	r2, r5
 800c85e:	0031      	movs	r1, r6
 800c860:	0020      	movs	r0, r4
 800c862:	f7ff ff9f 	bl	800c7a4 <L_shift>
 800c866:	9b01      	ldr	r3, [sp, #4]
 800c868:	2508      	movs	r5, #8
 800c86a:	429c      	cmp	r4, r3
 800c86c:	d905      	bls.n	800c87a <__hexnan+0x8a>
 800c86e:	1f26      	subs	r6, r4, #4
 800c870:	2500      	movs	r5, #0
 800c872:	0034      	movs	r4, r6
 800c874:	9b03      	ldr	r3, [sp, #12]
 800c876:	6035      	str	r5, [r6, #0]
 800c878:	9307      	str	r3, [sp, #28]
 800c87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c87c:	9305      	str	r3, [sp, #20]
 800c87e:	e7d5      	b.n	800c82c <__hexnan+0x3c>
 800c880:	9b04      	ldr	r3, [sp, #16]
 800c882:	2b29      	cmp	r3, #41	; 0x29
 800c884:	d159      	bne.n	800c93a <__hexnan+0x14a>
 800c886:	9b05      	ldr	r3, [sp, #20]
 800c888:	9a08      	ldr	r2, [sp, #32]
 800c88a:	3302      	adds	r3, #2
 800c88c:	6013      	str	r3, [r2, #0]
 800c88e:	9b03      	ldr	r3, [sp, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d052      	beq.n	800c93a <__hexnan+0x14a>
 800c894:	42b4      	cmp	r4, r6
 800c896:	d206      	bcs.n	800c8a6 <__hexnan+0xb6>
 800c898:	2d07      	cmp	r5, #7
 800c89a:	dc04      	bgt.n	800c8a6 <__hexnan+0xb6>
 800c89c:	002a      	movs	r2, r5
 800c89e:	0031      	movs	r1, r6
 800c8a0:	0020      	movs	r0, r4
 800c8a2:	f7ff ff7f 	bl	800c7a4 <L_shift>
 800c8a6:	9b01      	ldr	r3, [sp, #4]
 800c8a8:	429c      	cmp	r4, r3
 800c8aa:	d935      	bls.n	800c918 <__hexnan+0x128>
 800c8ac:	001a      	movs	r2, r3
 800c8ae:	0023      	movs	r3, r4
 800c8b0:	cb02      	ldmia	r3!, {r1}
 800c8b2:	c202      	stmia	r2!, {r1}
 800c8b4:	429f      	cmp	r7, r3
 800c8b6:	d2fb      	bcs.n	800c8b0 <__hexnan+0xc0>
 800c8b8:	9b02      	ldr	r3, [sp, #8]
 800c8ba:	1c62      	adds	r2, r4, #1
 800c8bc:	1ed9      	subs	r1, r3, #3
 800c8be:	2304      	movs	r3, #4
 800c8c0:	4291      	cmp	r1, r2
 800c8c2:	d305      	bcc.n	800c8d0 <__hexnan+0xe0>
 800c8c4:	9b02      	ldr	r3, [sp, #8]
 800c8c6:	3b04      	subs	r3, #4
 800c8c8:	1b1b      	subs	r3, r3, r4
 800c8ca:	089b      	lsrs	r3, r3, #2
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	9a01      	ldr	r2, [sp, #4]
 800c8d2:	18d3      	adds	r3, r2, r3
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	c304      	stmia	r3!, {r2}
 800c8d8:	429f      	cmp	r7, r3
 800c8da:	d2fc      	bcs.n	800c8d6 <__hexnan+0xe6>
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d104      	bne.n	800c8ec <__hexnan+0xfc>
 800c8e2:	9b01      	ldr	r3, [sp, #4]
 800c8e4:	429f      	cmp	r7, r3
 800c8e6:	d126      	bne.n	800c936 <__hexnan+0x146>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	603b      	str	r3, [r7, #0]
 800c8ec:	2005      	movs	r0, #5
 800c8ee:	e025      	b.n	800c93c <__hexnan+0x14c>
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	3501      	adds	r5, #1
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	9303      	str	r3, [sp, #12]
 800c8f8:	2d08      	cmp	r5, #8
 800c8fa:	dd06      	ble.n	800c90a <__hexnan+0x11a>
 800c8fc:	9b01      	ldr	r3, [sp, #4]
 800c8fe:	429c      	cmp	r4, r3
 800c900:	d9bb      	bls.n	800c87a <__hexnan+0x8a>
 800c902:	2300      	movs	r3, #0
 800c904:	2501      	movs	r5, #1
 800c906:	3c04      	subs	r4, #4
 800c908:	6023      	str	r3, [r4, #0]
 800c90a:	220f      	movs	r2, #15
 800c90c:	6823      	ldr	r3, [r4, #0]
 800c90e:	4010      	ands	r0, r2
 800c910:	011b      	lsls	r3, r3, #4
 800c912:	4303      	orrs	r3, r0
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	e7b0      	b.n	800c87a <__hexnan+0x8a>
 800c918:	9b06      	ldr	r3, [sp, #24]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d0de      	beq.n	800c8dc <__hexnan+0xec>
 800c91e:	2320      	movs	r3, #32
 800c920:	9a06      	ldr	r2, [sp, #24]
 800c922:	9902      	ldr	r1, [sp, #8]
 800c924:	1a9b      	subs	r3, r3, r2
 800c926:	2201      	movs	r2, #1
 800c928:	4252      	negs	r2, r2
 800c92a:	40da      	lsrs	r2, r3
 800c92c:	3904      	subs	r1, #4
 800c92e:	680b      	ldr	r3, [r1, #0]
 800c930:	4013      	ands	r3, r2
 800c932:	600b      	str	r3, [r1, #0]
 800c934:	e7d2      	b.n	800c8dc <__hexnan+0xec>
 800c936:	3f04      	subs	r7, #4
 800c938:	e7d0      	b.n	800c8dc <__hexnan+0xec>
 800c93a:	2004      	movs	r0, #4
 800c93c:	b00b      	add	sp, #44	; 0x2c
 800c93e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c940 <malloc>:
 800c940:	b510      	push	{r4, lr}
 800c942:	4b03      	ldr	r3, [pc, #12]	; (800c950 <malloc+0x10>)
 800c944:	0001      	movs	r1, r0
 800c946:	6818      	ldr	r0, [r3, #0]
 800c948:	f000 f826 	bl	800c998 <_malloc_r>
 800c94c:	bd10      	pop	{r4, pc}
 800c94e:	46c0      	nop			; (mov r8, r8)
 800c950:	2000024c 	.word	0x2000024c

0800c954 <sbrk_aligned>:
 800c954:	b570      	push	{r4, r5, r6, lr}
 800c956:	4e0f      	ldr	r6, [pc, #60]	; (800c994 <sbrk_aligned+0x40>)
 800c958:	000d      	movs	r5, r1
 800c95a:	6831      	ldr	r1, [r6, #0]
 800c95c:	0004      	movs	r4, r0
 800c95e:	2900      	cmp	r1, #0
 800c960:	d102      	bne.n	800c968 <sbrk_aligned+0x14>
 800c962:	f001 f98f 	bl	800dc84 <_sbrk_r>
 800c966:	6030      	str	r0, [r6, #0]
 800c968:	0029      	movs	r1, r5
 800c96a:	0020      	movs	r0, r4
 800c96c:	f001 f98a 	bl	800dc84 <_sbrk_r>
 800c970:	1c43      	adds	r3, r0, #1
 800c972:	d00a      	beq.n	800c98a <sbrk_aligned+0x36>
 800c974:	2303      	movs	r3, #3
 800c976:	1cc5      	adds	r5, r0, #3
 800c978:	439d      	bics	r5, r3
 800c97a:	42a8      	cmp	r0, r5
 800c97c:	d007      	beq.n	800c98e <sbrk_aligned+0x3a>
 800c97e:	1a29      	subs	r1, r5, r0
 800c980:	0020      	movs	r0, r4
 800c982:	f001 f97f 	bl	800dc84 <_sbrk_r>
 800c986:	3001      	adds	r0, #1
 800c988:	d101      	bne.n	800c98e <sbrk_aligned+0x3a>
 800c98a:	2501      	movs	r5, #1
 800c98c:	426d      	negs	r5, r5
 800c98e:	0028      	movs	r0, r5
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	46c0      	nop			; (mov r8, r8)
 800c994:	200007c0 	.word	0x200007c0

0800c998 <_malloc_r>:
 800c998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c99a:	2203      	movs	r2, #3
 800c99c:	1ccb      	adds	r3, r1, #3
 800c99e:	4393      	bics	r3, r2
 800c9a0:	3308      	adds	r3, #8
 800c9a2:	0006      	movs	r6, r0
 800c9a4:	001f      	movs	r7, r3
 800c9a6:	2b0c      	cmp	r3, #12
 800c9a8:	d238      	bcs.n	800ca1c <_malloc_r+0x84>
 800c9aa:	270c      	movs	r7, #12
 800c9ac:	42b9      	cmp	r1, r7
 800c9ae:	d837      	bhi.n	800ca20 <_malloc_r+0x88>
 800c9b0:	0030      	movs	r0, r6
 800c9b2:	f000 f885 	bl	800cac0 <__malloc_lock>
 800c9b6:	4b38      	ldr	r3, [pc, #224]	; (800ca98 <_malloc_r+0x100>)
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	001c      	movs	r4, r3
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	d133      	bne.n	800ca2a <_malloc_r+0x92>
 800c9c2:	0039      	movs	r1, r7
 800c9c4:	0030      	movs	r0, r6
 800c9c6:	f7ff ffc5 	bl	800c954 <sbrk_aligned>
 800c9ca:	0004      	movs	r4, r0
 800c9cc:	1c43      	adds	r3, r0, #1
 800c9ce:	d15e      	bne.n	800ca8e <_malloc_r+0xf6>
 800c9d0:	9b00      	ldr	r3, [sp, #0]
 800c9d2:	681c      	ldr	r4, [r3, #0]
 800c9d4:	0025      	movs	r5, r4
 800c9d6:	2d00      	cmp	r5, #0
 800c9d8:	d14e      	bne.n	800ca78 <_malloc_r+0xe0>
 800c9da:	2c00      	cmp	r4, #0
 800c9dc:	d051      	beq.n	800ca82 <_malloc_r+0xea>
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	0029      	movs	r1, r5
 800c9e2:	18e3      	adds	r3, r4, r3
 800c9e4:	0030      	movs	r0, r6
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	f001 f94c 	bl	800dc84 <_sbrk_r>
 800c9ec:	9b01      	ldr	r3, [sp, #4]
 800c9ee:	4283      	cmp	r3, r0
 800c9f0:	d147      	bne.n	800ca82 <_malloc_r+0xea>
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	0030      	movs	r0, r6
 800c9f6:	1aff      	subs	r7, r7, r3
 800c9f8:	0039      	movs	r1, r7
 800c9fa:	f7ff ffab 	bl	800c954 <sbrk_aligned>
 800c9fe:	3001      	adds	r0, #1
 800ca00:	d03f      	beq.n	800ca82 <_malloc_r+0xea>
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	19db      	adds	r3, r3, r7
 800ca06:	6023      	str	r3, [r4, #0]
 800ca08:	9b00      	ldr	r3, [sp, #0]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d040      	beq.n	800ca92 <_malloc_r+0xfa>
 800ca10:	685a      	ldr	r2, [r3, #4]
 800ca12:	42a2      	cmp	r2, r4
 800ca14:	d133      	bne.n	800ca7e <_malloc_r+0xe6>
 800ca16:	2200      	movs	r2, #0
 800ca18:	605a      	str	r2, [r3, #4]
 800ca1a:	e014      	b.n	800ca46 <_malloc_r+0xae>
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	dac5      	bge.n	800c9ac <_malloc_r+0x14>
 800ca20:	230c      	movs	r3, #12
 800ca22:	2500      	movs	r5, #0
 800ca24:	6033      	str	r3, [r6, #0]
 800ca26:	0028      	movs	r0, r5
 800ca28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca2a:	6821      	ldr	r1, [r4, #0]
 800ca2c:	1bc9      	subs	r1, r1, r7
 800ca2e:	d420      	bmi.n	800ca72 <_malloc_r+0xda>
 800ca30:	290b      	cmp	r1, #11
 800ca32:	d918      	bls.n	800ca66 <_malloc_r+0xce>
 800ca34:	19e2      	adds	r2, r4, r7
 800ca36:	6027      	str	r7, [r4, #0]
 800ca38:	42a3      	cmp	r3, r4
 800ca3a:	d112      	bne.n	800ca62 <_malloc_r+0xca>
 800ca3c:	9b00      	ldr	r3, [sp, #0]
 800ca3e:	601a      	str	r2, [r3, #0]
 800ca40:	6863      	ldr	r3, [r4, #4]
 800ca42:	6011      	str	r1, [r2, #0]
 800ca44:	6053      	str	r3, [r2, #4]
 800ca46:	0030      	movs	r0, r6
 800ca48:	0025      	movs	r5, r4
 800ca4a:	f000 f841 	bl	800cad0 <__malloc_unlock>
 800ca4e:	2207      	movs	r2, #7
 800ca50:	350b      	adds	r5, #11
 800ca52:	1d23      	adds	r3, r4, #4
 800ca54:	4395      	bics	r5, r2
 800ca56:	1aea      	subs	r2, r5, r3
 800ca58:	429d      	cmp	r5, r3
 800ca5a:	d0e4      	beq.n	800ca26 <_malloc_r+0x8e>
 800ca5c:	1b5b      	subs	r3, r3, r5
 800ca5e:	50a3      	str	r3, [r4, r2]
 800ca60:	e7e1      	b.n	800ca26 <_malloc_r+0x8e>
 800ca62:	605a      	str	r2, [r3, #4]
 800ca64:	e7ec      	b.n	800ca40 <_malloc_r+0xa8>
 800ca66:	6862      	ldr	r2, [r4, #4]
 800ca68:	42a3      	cmp	r3, r4
 800ca6a:	d1d5      	bne.n	800ca18 <_malloc_r+0x80>
 800ca6c:	9b00      	ldr	r3, [sp, #0]
 800ca6e:	601a      	str	r2, [r3, #0]
 800ca70:	e7e9      	b.n	800ca46 <_malloc_r+0xae>
 800ca72:	0023      	movs	r3, r4
 800ca74:	6864      	ldr	r4, [r4, #4]
 800ca76:	e7a2      	b.n	800c9be <_malloc_r+0x26>
 800ca78:	002c      	movs	r4, r5
 800ca7a:	686d      	ldr	r5, [r5, #4]
 800ca7c:	e7ab      	b.n	800c9d6 <_malloc_r+0x3e>
 800ca7e:	0013      	movs	r3, r2
 800ca80:	e7c4      	b.n	800ca0c <_malloc_r+0x74>
 800ca82:	230c      	movs	r3, #12
 800ca84:	0030      	movs	r0, r6
 800ca86:	6033      	str	r3, [r6, #0]
 800ca88:	f000 f822 	bl	800cad0 <__malloc_unlock>
 800ca8c:	e7cb      	b.n	800ca26 <_malloc_r+0x8e>
 800ca8e:	6027      	str	r7, [r4, #0]
 800ca90:	e7d9      	b.n	800ca46 <_malloc_r+0xae>
 800ca92:	605b      	str	r3, [r3, #4]
 800ca94:	deff      	udf	#255	; 0xff
 800ca96:	46c0      	nop			; (mov r8, r8)
 800ca98:	200007bc 	.word	0x200007bc

0800ca9c <__ascii_mbtowc>:
 800ca9c:	b082      	sub	sp, #8
 800ca9e:	2900      	cmp	r1, #0
 800caa0:	d100      	bne.n	800caa4 <__ascii_mbtowc+0x8>
 800caa2:	a901      	add	r1, sp, #4
 800caa4:	1e10      	subs	r0, r2, #0
 800caa6:	d006      	beq.n	800cab6 <__ascii_mbtowc+0x1a>
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d006      	beq.n	800caba <__ascii_mbtowc+0x1e>
 800caac:	7813      	ldrb	r3, [r2, #0]
 800caae:	600b      	str	r3, [r1, #0]
 800cab0:	7810      	ldrb	r0, [r2, #0]
 800cab2:	1e43      	subs	r3, r0, #1
 800cab4:	4198      	sbcs	r0, r3
 800cab6:	b002      	add	sp, #8
 800cab8:	4770      	bx	lr
 800caba:	2002      	movs	r0, #2
 800cabc:	4240      	negs	r0, r0
 800cabe:	e7fa      	b.n	800cab6 <__ascii_mbtowc+0x1a>

0800cac0 <__malloc_lock>:
 800cac0:	b510      	push	{r4, lr}
 800cac2:	4802      	ldr	r0, [pc, #8]	; (800cacc <__malloc_lock+0xc>)
 800cac4:	f7fe fcbd 	bl	800b442 <__retarget_lock_acquire_recursive>
 800cac8:	bd10      	pop	{r4, pc}
 800caca:	46c0      	nop			; (mov r8, r8)
 800cacc:	200007b8 	.word	0x200007b8

0800cad0 <__malloc_unlock>:
 800cad0:	b510      	push	{r4, lr}
 800cad2:	4802      	ldr	r0, [pc, #8]	; (800cadc <__malloc_unlock+0xc>)
 800cad4:	f7fe fcb6 	bl	800b444 <__retarget_lock_release_recursive>
 800cad8:	bd10      	pop	{r4, pc}
 800cada:	46c0      	nop			; (mov r8, r8)
 800cadc:	200007b8 	.word	0x200007b8

0800cae0 <_Balloc>:
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	69c5      	ldr	r5, [r0, #28]
 800cae4:	0006      	movs	r6, r0
 800cae6:	000c      	movs	r4, r1
 800cae8:	2d00      	cmp	r5, #0
 800caea:	d10e      	bne.n	800cb0a <_Balloc+0x2a>
 800caec:	2010      	movs	r0, #16
 800caee:	f7ff ff27 	bl	800c940 <malloc>
 800caf2:	1e02      	subs	r2, r0, #0
 800caf4:	61f0      	str	r0, [r6, #28]
 800caf6:	d104      	bne.n	800cb02 <_Balloc+0x22>
 800caf8:	216b      	movs	r1, #107	; 0x6b
 800cafa:	4b19      	ldr	r3, [pc, #100]	; (800cb60 <_Balloc+0x80>)
 800cafc:	4819      	ldr	r0, [pc, #100]	; (800cb64 <_Balloc+0x84>)
 800cafe:	f7fe fcbd 	bl	800b47c <__assert_func>
 800cb02:	6045      	str	r5, [r0, #4]
 800cb04:	6085      	str	r5, [r0, #8]
 800cb06:	6005      	str	r5, [r0, #0]
 800cb08:	60c5      	str	r5, [r0, #12]
 800cb0a:	69f5      	ldr	r5, [r6, #28]
 800cb0c:	68eb      	ldr	r3, [r5, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d013      	beq.n	800cb3a <_Balloc+0x5a>
 800cb12:	69f3      	ldr	r3, [r6, #28]
 800cb14:	00a2      	lsls	r2, r4, #2
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	189b      	adds	r3, r3, r2
 800cb1a:	6818      	ldr	r0, [r3, #0]
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d118      	bne.n	800cb52 <_Balloc+0x72>
 800cb20:	2101      	movs	r1, #1
 800cb22:	000d      	movs	r5, r1
 800cb24:	40a5      	lsls	r5, r4
 800cb26:	1d6a      	adds	r2, r5, #5
 800cb28:	0030      	movs	r0, r6
 800cb2a:	0092      	lsls	r2, r2, #2
 800cb2c:	f001 f8c3 	bl	800dcb6 <_calloc_r>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d00c      	beq.n	800cb4e <_Balloc+0x6e>
 800cb34:	6044      	str	r4, [r0, #4]
 800cb36:	6085      	str	r5, [r0, #8]
 800cb38:	e00d      	b.n	800cb56 <_Balloc+0x76>
 800cb3a:	2221      	movs	r2, #33	; 0x21
 800cb3c:	2104      	movs	r1, #4
 800cb3e:	0030      	movs	r0, r6
 800cb40:	f001 f8b9 	bl	800dcb6 <_calloc_r>
 800cb44:	69f3      	ldr	r3, [r6, #28]
 800cb46:	60e8      	str	r0, [r5, #12]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1e1      	bne.n	800cb12 <_Balloc+0x32>
 800cb4e:	2000      	movs	r0, #0
 800cb50:	bd70      	pop	{r4, r5, r6, pc}
 800cb52:	6802      	ldr	r2, [r0, #0]
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	2300      	movs	r3, #0
 800cb58:	6103      	str	r3, [r0, #16]
 800cb5a:	60c3      	str	r3, [r0, #12]
 800cb5c:	e7f8      	b.n	800cb50 <_Balloc+0x70>
 800cb5e:	46c0      	nop			; (mov r8, r8)
 800cb60:	0800e1c4 	.word	0x0800e1c4
 800cb64:	0800e34f 	.word	0x0800e34f

0800cb68 <_Bfree>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	69c6      	ldr	r6, [r0, #28]
 800cb6c:	0005      	movs	r5, r0
 800cb6e:	000c      	movs	r4, r1
 800cb70:	2e00      	cmp	r6, #0
 800cb72:	d10e      	bne.n	800cb92 <_Bfree+0x2a>
 800cb74:	2010      	movs	r0, #16
 800cb76:	f7ff fee3 	bl	800c940 <malloc>
 800cb7a:	1e02      	subs	r2, r0, #0
 800cb7c:	61e8      	str	r0, [r5, #28]
 800cb7e:	d104      	bne.n	800cb8a <_Bfree+0x22>
 800cb80:	218f      	movs	r1, #143	; 0x8f
 800cb82:	4b09      	ldr	r3, [pc, #36]	; (800cba8 <_Bfree+0x40>)
 800cb84:	4809      	ldr	r0, [pc, #36]	; (800cbac <_Bfree+0x44>)
 800cb86:	f7fe fc79 	bl	800b47c <__assert_func>
 800cb8a:	6046      	str	r6, [r0, #4]
 800cb8c:	6086      	str	r6, [r0, #8]
 800cb8e:	6006      	str	r6, [r0, #0]
 800cb90:	60c6      	str	r6, [r0, #12]
 800cb92:	2c00      	cmp	r4, #0
 800cb94:	d007      	beq.n	800cba6 <_Bfree+0x3e>
 800cb96:	69eb      	ldr	r3, [r5, #28]
 800cb98:	6862      	ldr	r2, [r4, #4]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	0092      	lsls	r2, r2, #2
 800cb9e:	189b      	adds	r3, r3, r2
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	6022      	str	r2, [r4, #0]
 800cba4:	601c      	str	r4, [r3, #0]
 800cba6:	bd70      	pop	{r4, r5, r6, pc}
 800cba8:	0800e1c4 	.word	0x0800e1c4
 800cbac:	0800e34f 	.word	0x0800e34f

0800cbb0 <__multadd>:
 800cbb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbb2:	000e      	movs	r6, r1
 800cbb4:	9001      	str	r0, [sp, #4]
 800cbb6:	000c      	movs	r4, r1
 800cbb8:	001d      	movs	r5, r3
 800cbba:	2000      	movs	r0, #0
 800cbbc:	690f      	ldr	r7, [r1, #16]
 800cbbe:	3614      	adds	r6, #20
 800cbc0:	6833      	ldr	r3, [r6, #0]
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	b299      	uxth	r1, r3
 800cbc6:	4351      	muls	r1, r2
 800cbc8:	0c1b      	lsrs	r3, r3, #16
 800cbca:	4353      	muls	r3, r2
 800cbcc:	1949      	adds	r1, r1, r5
 800cbce:	0c0d      	lsrs	r5, r1, #16
 800cbd0:	195b      	adds	r3, r3, r5
 800cbd2:	0c1d      	lsrs	r5, r3, #16
 800cbd4:	b289      	uxth	r1, r1
 800cbd6:	041b      	lsls	r3, r3, #16
 800cbd8:	185b      	adds	r3, r3, r1
 800cbda:	c608      	stmia	r6!, {r3}
 800cbdc:	4287      	cmp	r7, r0
 800cbde:	dcef      	bgt.n	800cbc0 <__multadd+0x10>
 800cbe0:	2d00      	cmp	r5, #0
 800cbe2:	d022      	beq.n	800cc2a <__multadd+0x7a>
 800cbe4:	68a3      	ldr	r3, [r4, #8]
 800cbe6:	42bb      	cmp	r3, r7
 800cbe8:	dc19      	bgt.n	800cc1e <__multadd+0x6e>
 800cbea:	6861      	ldr	r1, [r4, #4]
 800cbec:	9801      	ldr	r0, [sp, #4]
 800cbee:	3101      	adds	r1, #1
 800cbf0:	f7ff ff76 	bl	800cae0 <_Balloc>
 800cbf4:	1e06      	subs	r6, r0, #0
 800cbf6:	d105      	bne.n	800cc04 <__multadd+0x54>
 800cbf8:	0032      	movs	r2, r6
 800cbfa:	21ba      	movs	r1, #186	; 0xba
 800cbfc:	4b0c      	ldr	r3, [pc, #48]	; (800cc30 <__multadd+0x80>)
 800cbfe:	480d      	ldr	r0, [pc, #52]	; (800cc34 <__multadd+0x84>)
 800cc00:	f7fe fc3c 	bl	800b47c <__assert_func>
 800cc04:	0021      	movs	r1, r4
 800cc06:	6922      	ldr	r2, [r4, #16]
 800cc08:	310c      	adds	r1, #12
 800cc0a:	3202      	adds	r2, #2
 800cc0c:	0092      	lsls	r2, r2, #2
 800cc0e:	300c      	adds	r0, #12
 800cc10:	f7fe fc24 	bl	800b45c <memcpy>
 800cc14:	0021      	movs	r1, r4
 800cc16:	9801      	ldr	r0, [sp, #4]
 800cc18:	f7ff ffa6 	bl	800cb68 <_Bfree>
 800cc1c:	0034      	movs	r4, r6
 800cc1e:	1d3b      	adds	r3, r7, #4
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	18e3      	adds	r3, r4, r3
 800cc24:	605d      	str	r5, [r3, #4]
 800cc26:	1c7b      	adds	r3, r7, #1
 800cc28:	6123      	str	r3, [r4, #16]
 800cc2a:	0020      	movs	r0, r4
 800cc2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc2e:	46c0      	nop			; (mov r8, r8)
 800cc30:	0800e2de 	.word	0x0800e2de
 800cc34:	0800e34f 	.word	0x0800e34f

0800cc38 <__s2b>:
 800cc38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc3a:	0006      	movs	r6, r0
 800cc3c:	0018      	movs	r0, r3
 800cc3e:	000c      	movs	r4, r1
 800cc40:	3008      	adds	r0, #8
 800cc42:	2109      	movs	r1, #9
 800cc44:	9301      	str	r3, [sp, #4]
 800cc46:	0015      	movs	r5, r2
 800cc48:	f7f3 fb0a 	bl	8000260 <__divsi3>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	2100      	movs	r1, #0
 800cc50:	4283      	cmp	r3, r0
 800cc52:	db0a      	blt.n	800cc6a <__s2b+0x32>
 800cc54:	0030      	movs	r0, r6
 800cc56:	f7ff ff43 	bl	800cae0 <_Balloc>
 800cc5a:	1e01      	subs	r1, r0, #0
 800cc5c:	d108      	bne.n	800cc70 <__s2b+0x38>
 800cc5e:	000a      	movs	r2, r1
 800cc60:	4b19      	ldr	r3, [pc, #100]	; (800ccc8 <__s2b+0x90>)
 800cc62:	481a      	ldr	r0, [pc, #104]	; (800cccc <__s2b+0x94>)
 800cc64:	31d3      	adds	r1, #211	; 0xd3
 800cc66:	f7fe fc09 	bl	800b47c <__assert_func>
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	3101      	adds	r1, #1
 800cc6e:	e7ef      	b.n	800cc50 <__s2b+0x18>
 800cc70:	9b08      	ldr	r3, [sp, #32]
 800cc72:	6143      	str	r3, [r0, #20]
 800cc74:	2301      	movs	r3, #1
 800cc76:	6103      	str	r3, [r0, #16]
 800cc78:	2d09      	cmp	r5, #9
 800cc7a:	dd18      	ble.n	800ccae <__s2b+0x76>
 800cc7c:	0023      	movs	r3, r4
 800cc7e:	3309      	adds	r3, #9
 800cc80:	001f      	movs	r7, r3
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	1964      	adds	r4, r4, r5
 800cc86:	783b      	ldrb	r3, [r7, #0]
 800cc88:	220a      	movs	r2, #10
 800cc8a:	0030      	movs	r0, r6
 800cc8c:	3b30      	subs	r3, #48	; 0x30
 800cc8e:	f7ff ff8f 	bl	800cbb0 <__multadd>
 800cc92:	3701      	adds	r7, #1
 800cc94:	0001      	movs	r1, r0
 800cc96:	42a7      	cmp	r7, r4
 800cc98:	d1f5      	bne.n	800cc86 <__s2b+0x4e>
 800cc9a:	002c      	movs	r4, r5
 800cc9c:	9b00      	ldr	r3, [sp, #0]
 800cc9e:	3c08      	subs	r4, #8
 800cca0:	191c      	adds	r4, r3, r4
 800cca2:	002f      	movs	r7, r5
 800cca4:	9b01      	ldr	r3, [sp, #4]
 800cca6:	429f      	cmp	r7, r3
 800cca8:	db04      	blt.n	800ccb4 <__s2b+0x7c>
 800ccaa:	0008      	movs	r0, r1
 800ccac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccae:	2509      	movs	r5, #9
 800ccb0:	340a      	adds	r4, #10
 800ccb2:	e7f6      	b.n	800cca2 <__s2b+0x6a>
 800ccb4:	1b63      	subs	r3, r4, r5
 800ccb6:	5ddb      	ldrb	r3, [r3, r7]
 800ccb8:	220a      	movs	r2, #10
 800ccba:	0030      	movs	r0, r6
 800ccbc:	3b30      	subs	r3, #48	; 0x30
 800ccbe:	f7ff ff77 	bl	800cbb0 <__multadd>
 800ccc2:	3701      	adds	r7, #1
 800ccc4:	0001      	movs	r1, r0
 800ccc6:	e7ed      	b.n	800cca4 <__s2b+0x6c>
 800ccc8:	0800e2de 	.word	0x0800e2de
 800cccc:	0800e34f 	.word	0x0800e34f

0800ccd0 <__hi0bits>:
 800ccd0:	0003      	movs	r3, r0
 800ccd2:	0c02      	lsrs	r2, r0, #16
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	4282      	cmp	r2, r0
 800ccd8:	d101      	bne.n	800ccde <__hi0bits+0xe>
 800ccda:	041b      	lsls	r3, r3, #16
 800ccdc:	3010      	adds	r0, #16
 800ccde:	0e1a      	lsrs	r2, r3, #24
 800cce0:	d101      	bne.n	800cce6 <__hi0bits+0x16>
 800cce2:	3008      	adds	r0, #8
 800cce4:	021b      	lsls	r3, r3, #8
 800cce6:	0f1a      	lsrs	r2, r3, #28
 800cce8:	d101      	bne.n	800ccee <__hi0bits+0x1e>
 800ccea:	3004      	adds	r0, #4
 800ccec:	011b      	lsls	r3, r3, #4
 800ccee:	0f9a      	lsrs	r2, r3, #30
 800ccf0:	d101      	bne.n	800ccf6 <__hi0bits+0x26>
 800ccf2:	3002      	adds	r0, #2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	db03      	blt.n	800cd02 <__hi0bits+0x32>
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	005b      	lsls	r3, r3, #1
 800ccfe:	d400      	bmi.n	800cd02 <__hi0bits+0x32>
 800cd00:	2020      	movs	r0, #32
 800cd02:	4770      	bx	lr

0800cd04 <__lo0bits>:
 800cd04:	6803      	ldr	r3, [r0, #0]
 800cd06:	0001      	movs	r1, r0
 800cd08:	2207      	movs	r2, #7
 800cd0a:	0018      	movs	r0, r3
 800cd0c:	4010      	ands	r0, r2
 800cd0e:	4213      	tst	r3, r2
 800cd10:	d00d      	beq.n	800cd2e <__lo0bits+0x2a>
 800cd12:	3a06      	subs	r2, #6
 800cd14:	2000      	movs	r0, #0
 800cd16:	4213      	tst	r3, r2
 800cd18:	d105      	bne.n	800cd26 <__lo0bits+0x22>
 800cd1a:	3002      	adds	r0, #2
 800cd1c:	4203      	tst	r3, r0
 800cd1e:	d003      	beq.n	800cd28 <__lo0bits+0x24>
 800cd20:	40d3      	lsrs	r3, r2
 800cd22:	0010      	movs	r0, r2
 800cd24:	600b      	str	r3, [r1, #0]
 800cd26:	4770      	bx	lr
 800cd28:	089b      	lsrs	r3, r3, #2
 800cd2a:	600b      	str	r3, [r1, #0]
 800cd2c:	e7fb      	b.n	800cd26 <__lo0bits+0x22>
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	2a00      	cmp	r2, #0
 800cd32:	d101      	bne.n	800cd38 <__lo0bits+0x34>
 800cd34:	2010      	movs	r0, #16
 800cd36:	0c1b      	lsrs	r3, r3, #16
 800cd38:	b2da      	uxtb	r2, r3
 800cd3a:	2a00      	cmp	r2, #0
 800cd3c:	d101      	bne.n	800cd42 <__lo0bits+0x3e>
 800cd3e:	3008      	adds	r0, #8
 800cd40:	0a1b      	lsrs	r3, r3, #8
 800cd42:	071a      	lsls	r2, r3, #28
 800cd44:	d101      	bne.n	800cd4a <__lo0bits+0x46>
 800cd46:	3004      	adds	r0, #4
 800cd48:	091b      	lsrs	r3, r3, #4
 800cd4a:	079a      	lsls	r2, r3, #30
 800cd4c:	d101      	bne.n	800cd52 <__lo0bits+0x4e>
 800cd4e:	3002      	adds	r0, #2
 800cd50:	089b      	lsrs	r3, r3, #2
 800cd52:	07da      	lsls	r2, r3, #31
 800cd54:	d4e9      	bmi.n	800cd2a <__lo0bits+0x26>
 800cd56:	3001      	adds	r0, #1
 800cd58:	085b      	lsrs	r3, r3, #1
 800cd5a:	d1e6      	bne.n	800cd2a <__lo0bits+0x26>
 800cd5c:	2020      	movs	r0, #32
 800cd5e:	e7e2      	b.n	800cd26 <__lo0bits+0x22>

0800cd60 <__i2b>:
 800cd60:	b510      	push	{r4, lr}
 800cd62:	000c      	movs	r4, r1
 800cd64:	2101      	movs	r1, #1
 800cd66:	f7ff febb 	bl	800cae0 <_Balloc>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d107      	bne.n	800cd7e <__i2b+0x1e>
 800cd6e:	2146      	movs	r1, #70	; 0x46
 800cd70:	4c05      	ldr	r4, [pc, #20]	; (800cd88 <__i2b+0x28>)
 800cd72:	0002      	movs	r2, r0
 800cd74:	4b05      	ldr	r3, [pc, #20]	; (800cd8c <__i2b+0x2c>)
 800cd76:	0020      	movs	r0, r4
 800cd78:	31ff      	adds	r1, #255	; 0xff
 800cd7a:	f7fe fb7f 	bl	800b47c <__assert_func>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	6144      	str	r4, [r0, #20]
 800cd82:	6103      	str	r3, [r0, #16]
 800cd84:	bd10      	pop	{r4, pc}
 800cd86:	46c0      	nop			; (mov r8, r8)
 800cd88:	0800e34f 	.word	0x0800e34f
 800cd8c:	0800e2de 	.word	0x0800e2de

0800cd90 <__multiply>:
 800cd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd92:	0015      	movs	r5, r2
 800cd94:	690a      	ldr	r2, [r1, #16]
 800cd96:	692b      	ldr	r3, [r5, #16]
 800cd98:	000c      	movs	r4, r1
 800cd9a:	b08b      	sub	sp, #44	; 0x2c
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	da01      	bge.n	800cda4 <__multiply+0x14>
 800cda0:	002c      	movs	r4, r5
 800cda2:	000d      	movs	r5, r1
 800cda4:	6927      	ldr	r7, [r4, #16]
 800cda6:	692e      	ldr	r6, [r5, #16]
 800cda8:	6861      	ldr	r1, [r4, #4]
 800cdaa:	19bb      	adds	r3, r7, r6
 800cdac:	9303      	str	r3, [sp, #12]
 800cdae:	68a3      	ldr	r3, [r4, #8]
 800cdb0:	19ba      	adds	r2, r7, r6
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	da00      	bge.n	800cdb8 <__multiply+0x28>
 800cdb6:	3101      	adds	r1, #1
 800cdb8:	f7ff fe92 	bl	800cae0 <_Balloc>
 800cdbc:	9002      	str	r0, [sp, #8]
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d106      	bne.n	800cdd0 <__multiply+0x40>
 800cdc2:	21b1      	movs	r1, #177	; 0xb1
 800cdc4:	4b48      	ldr	r3, [pc, #288]	; (800cee8 <__multiply+0x158>)
 800cdc6:	4849      	ldr	r0, [pc, #292]	; (800ceec <__multiply+0x15c>)
 800cdc8:	9a02      	ldr	r2, [sp, #8]
 800cdca:	0049      	lsls	r1, r1, #1
 800cdcc:	f7fe fb56 	bl	800b47c <__assert_func>
 800cdd0:	9b02      	ldr	r3, [sp, #8]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	3314      	adds	r3, #20
 800cdd6:	469c      	mov	ip, r3
 800cdd8:	19bb      	adds	r3, r7, r6
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4463      	add	r3, ip
 800cdde:	9304      	str	r3, [sp, #16]
 800cde0:	4663      	mov	r3, ip
 800cde2:	9904      	ldr	r1, [sp, #16]
 800cde4:	428b      	cmp	r3, r1
 800cde6:	d32a      	bcc.n	800ce3e <__multiply+0xae>
 800cde8:	0023      	movs	r3, r4
 800cdea:	00bf      	lsls	r7, r7, #2
 800cdec:	3314      	adds	r3, #20
 800cdee:	3514      	adds	r5, #20
 800cdf0:	9308      	str	r3, [sp, #32]
 800cdf2:	00b6      	lsls	r6, r6, #2
 800cdf4:	19db      	adds	r3, r3, r7
 800cdf6:	9305      	str	r3, [sp, #20]
 800cdf8:	19ab      	adds	r3, r5, r6
 800cdfa:	9309      	str	r3, [sp, #36]	; 0x24
 800cdfc:	2304      	movs	r3, #4
 800cdfe:	9306      	str	r3, [sp, #24]
 800ce00:	0023      	movs	r3, r4
 800ce02:	9a05      	ldr	r2, [sp, #20]
 800ce04:	3315      	adds	r3, #21
 800ce06:	9501      	str	r5, [sp, #4]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d305      	bcc.n	800ce18 <__multiply+0x88>
 800ce0c:	1b13      	subs	r3, r2, r4
 800ce0e:	3b15      	subs	r3, #21
 800ce10:	089b      	lsrs	r3, r3, #2
 800ce12:	3301      	adds	r3, #1
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	9306      	str	r3, [sp, #24]
 800ce18:	9b01      	ldr	r3, [sp, #4]
 800ce1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d310      	bcc.n	800ce42 <__multiply+0xb2>
 800ce20:	9b03      	ldr	r3, [sp, #12]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	dd05      	ble.n	800ce32 <__multiply+0xa2>
 800ce26:	9b04      	ldr	r3, [sp, #16]
 800ce28:	3b04      	subs	r3, #4
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d056      	beq.n	800cee0 <__multiply+0x150>
 800ce32:	9b02      	ldr	r3, [sp, #8]
 800ce34:	9a03      	ldr	r2, [sp, #12]
 800ce36:	0018      	movs	r0, r3
 800ce38:	611a      	str	r2, [r3, #16]
 800ce3a:	b00b      	add	sp, #44	; 0x2c
 800ce3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce3e:	c304      	stmia	r3!, {r2}
 800ce40:	e7cf      	b.n	800cde2 <__multiply+0x52>
 800ce42:	9b01      	ldr	r3, [sp, #4]
 800ce44:	6818      	ldr	r0, [r3, #0]
 800ce46:	b280      	uxth	r0, r0
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d01e      	beq.n	800ce8a <__multiply+0xfa>
 800ce4c:	4667      	mov	r7, ip
 800ce4e:	2500      	movs	r5, #0
 800ce50:	9e08      	ldr	r6, [sp, #32]
 800ce52:	ce02      	ldmia	r6!, {r1}
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	9307      	str	r3, [sp, #28]
 800ce58:	b28b      	uxth	r3, r1
 800ce5a:	4343      	muls	r3, r0
 800ce5c:	001a      	movs	r2, r3
 800ce5e:	466b      	mov	r3, sp
 800ce60:	8b9b      	ldrh	r3, [r3, #28]
 800ce62:	18d3      	adds	r3, r2, r3
 800ce64:	195b      	adds	r3, r3, r5
 800ce66:	0c0d      	lsrs	r5, r1, #16
 800ce68:	4345      	muls	r5, r0
 800ce6a:	9a07      	ldr	r2, [sp, #28]
 800ce6c:	0c11      	lsrs	r1, r2, #16
 800ce6e:	1869      	adds	r1, r5, r1
 800ce70:	0c1a      	lsrs	r2, r3, #16
 800ce72:	188a      	adds	r2, r1, r2
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	0c15      	lsrs	r5, r2, #16
 800ce78:	0412      	lsls	r2, r2, #16
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	9b05      	ldr	r3, [sp, #20]
 800ce7e:	c704      	stmia	r7!, {r2}
 800ce80:	42b3      	cmp	r3, r6
 800ce82:	d8e6      	bhi.n	800ce52 <__multiply+0xc2>
 800ce84:	4663      	mov	r3, ip
 800ce86:	9a06      	ldr	r2, [sp, #24]
 800ce88:	509d      	str	r5, [r3, r2]
 800ce8a:	9b01      	ldr	r3, [sp, #4]
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	0c00      	lsrs	r0, r0, #16
 800ce90:	d020      	beq.n	800ced4 <__multiply+0x144>
 800ce92:	4663      	mov	r3, ip
 800ce94:	0025      	movs	r5, r4
 800ce96:	4661      	mov	r1, ip
 800ce98:	2700      	movs	r7, #0
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	3514      	adds	r5, #20
 800ce9e:	682a      	ldr	r2, [r5, #0]
 800cea0:	680e      	ldr	r6, [r1, #0]
 800cea2:	b292      	uxth	r2, r2
 800cea4:	4342      	muls	r2, r0
 800cea6:	0c36      	lsrs	r6, r6, #16
 800cea8:	1992      	adds	r2, r2, r6
 800ceaa:	19d2      	adds	r2, r2, r7
 800ceac:	0416      	lsls	r6, r2, #16
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	431e      	orrs	r6, r3
 800ceb2:	600e      	str	r6, [r1, #0]
 800ceb4:	cd40      	ldmia	r5!, {r6}
 800ceb6:	684b      	ldr	r3, [r1, #4]
 800ceb8:	0c36      	lsrs	r6, r6, #16
 800ceba:	4346      	muls	r6, r0
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	0c12      	lsrs	r2, r2, #16
 800cec0:	18f3      	adds	r3, r6, r3
 800cec2:	189b      	adds	r3, r3, r2
 800cec4:	9a05      	ldr	r2, [sp, #20]
 800cec6:	0c1f      	lsrs	r7, r3, #16
 800cec8:	3104      	adds	r1, #4
 800ceca:	42aa      	cmp	r2, r5
 800cecc:	d8e7      	bhi.n	800ce9e <__multiply+0x10e>
 800cece:	4662      	mov	r2, ip
 800ced0:	9906      	ldr	r1, [sp, #24]
 800ced2:	5053      	str	r3, [r2, r1]
 800ced4:	9b01      	ldr	r3, [sp, #4]
 800ced6:	3304      	adds	r3, #4
 800ced8:	9301      	str	r3, [sp, #4]
 800ceda:	2304      	movs	r3, #4
 800cedc:	449c      	add	ip, r3
 800cede:	e79b      	b.n	800ce18 <__multiply+0x88>
 800cee0:	9b03      	ldr	r3, [sp, #12]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	9303      	str	r3, [sp, #12]
 800cee6:	e79b      	b.n	800ce20 <__multiply+0x90>
 800cee8:	0800e2de 	.word	0x0800e2de
 800ceec:	0800e34f 	.word	0x0800e34f

0800cef0 <__pow5mult>:
 800cef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cef2:	2303      	movs	r3, #3
 800cef4:	0015      	movs	r5, r2
 800cef6:	0007      	movs	r7, r0
 800cef8:	000e      	movs	r6, r1
 800cefa:	401a      	ands	r2, r3
 800cefc:	421d      	tst	r5, r3
 800cefe:	d008      	beq.n	800cf12 <__pow5mult+0x22>
 800cf00:	4925      	ldr	r1, [pc, #148]	; (800cf98 <__pow5mult+0xa8>)
 800cf02:	3a01      	subs	r2, #1
 800cf04:	0092      	lsls	r2, r2, #2
 800cf06:	5852      	ldr	r2, [r2, r1]
 800cf08:	2300      	movs	r3, #0
 800cf0a:	0031      	movs	r1, r6
 800cf0c:	f7ff fe50 	bl	800cbb0 <__multadd>
 800cf10:	0006      	movs	r6, r0
 800cf12:	10ad      	asrs	r5, r5, #2
 800cf14:	d03d      	beq.n	800cf92 <__pow5mult+0xa2>
 800cf16:	69fc      	ldr	r4, [r7, #28]
 800cf18:	2c00      	cmp	r4, #0
 800cf1a:	d10f      	bne.n	800cf3c <__pow5mult+0x4c>
 800cf1c:	2010      	movs	r0, #16
 800cf1e:	f7ff fd0f 	bl	800c940 <malloc>
 800cf22:	1e02      	subs	r2, r0, #0
 800cf24:	61f8      	str	r0, [r7, #28]
 800cf26:	d105      	bne.n	800cf34 <__pow5mult+0x44>
 800cf28:	21b4      	movs	r1, #180	; 0xb4
 800cf2a:	4b1c      	ldr	r3, [pc, #112]	; (800cf9c <__pow5mult+0xac>)
 800cf2c:	481c      	ldr	r0, [pc, #112]	; (800cfa0 <__pow5mult+0xb0>)
 800cf2e:	31ff      	adds	r1, #255	; 0xff
 800cf30:	f7fe faa4 	bl	800b47c <__assert_func>
 800cf34:	6044      	str	r4, [r0, #4]
 800cf36:	6084      	str	r4, [r0, #8]
 800cf38:	6004      	str	r4, [r0, #0]
 800cf3a:	60c4      	str	r4, [r0, #12]
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	689c      	ldr	r4, [r3, #8]
 800cf40:	9301      	str	r3, [sp, #4]
 800cf42:	2c00      	cmp	r4, #0
 800cf44:	d108      	bne.n	800cf58 <__pow5mult+0x68>
 800cf46:	0038      	movs	r0, r7
 800cf48:	4916      	ldr	r1, [pc, #88]	; (800cfa4 <__pow5mult+0xb4>)
 800cf4a:	f7ff ff09 	bl	800cd60 <__i2b>
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	0004      	movs	r4, r0
 800cf52:	6098      	str	r0, [r3, #8]
 800cf54:	2300      	movs	r3, #0
 800cf56:	6003      	str	r3, [r0, #0]
 800cf58:	2301      	movs	r3, #1
 800cf5a:	421d      	tst	r5, r3
 800cf5c:	d00a      	beq.n	800cf74 <__pow5mult+0x84>
 800cf5e:	0031      	movs	r1, r6
 800cf60:	0022      	movs	r2, r4
 800cf62:	0038      	movs	r0, r7
 800cf64:	f7ff ff14 	bl	800cd90 <__multiply>
 800cf68:	0031      	movs	r1, r6
 800cf6a:	9001      	str	r0, [sp, #4]
 800cf6c:	0038      	movs	r0, r7
 800cf6e:	f7ff fdfb 	bl	800cb68 <_Bfree>
 800cf72:	9e01      	ldr	r6, [sp, #4]
 800cf74:	106d      	asrs	r5, r5, #1
 800cf76:	d00c      	beq.n	800cf92 <__pow5mult+0xa2>
 800cf78:	6820      	ldr	r0, [r4, #0]
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d107      	bne.n	800cf8e <__pow5mult+0x9e>
 800cf7e:	0022      	movs	r2, r4
 800cf80:	0021      	movs	r1, r4
 800cf82:	0038      	movs	r0, r7
 800cf84:	f7ff ff04 	bl	800cd90 <__multiply>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	6020      	str	r0, [r4, #0]
 800cf8c:	6003      	str	r3, [r0, #0]
 800cf8e:	0004      	movs	r4, r0
 800cf90:	e7e2      	b.n	800cf58 <__pow5mult+0x68>
 800cf92:	0030      	movs	r0, r6
 800cf94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf96:	46c0      	nop			; (mov r8, r8)
 800cf98:	0800e498 	.word	0x0800e498
 800cf9c:	0800e1c4 	.word	0x0800e1c4
 800cfa0:	0800e34f 	.word	0x0800e34f
 800cfa4:	00000271 	.word	0x00000271

0800cfa8 <__lshift>:
 800cfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfaa:	000c      	movs	r4, r1
 800cfac:	0017      	movs	r7, r2
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	1155      	asrs	r5, r2, #5
 800cfb2:	b087      	sub	sp, #28
 800cfb4:	18eb      	adds	r3, r5, r3
 800cfb6:	9302      	str	r3, [sp, #8]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	9301      	str	r3, [sp, #4]
 800cfbc:	6849      	ldr	r1, [r1, #4]
 800cfbe:	68a3      	ldr	r3, [r4, #8]
 800cfc0:	9004      	str	r0, [sp, #16]
 800cfc2:	9a01      	ldr	r2, [sp, #4]
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	db10      	blt.n	800cfea <__lshift+0x42>
 800cfc8:	9804      	ldr	r0, [sp, #16]
 800cfca:	f7ff fd89 	bl	800cae0 <_Balloc>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	0002      	movs	r2, r0
 800cfd2:	0006      	movs	r6, r0
 800cfd4:	0019      	movs	r1, r3
 800cfd6:	3214      	adds	r2, #20
 800cfd8:	4298      	cmp	r0, r3
 800cfda:	d10c      	bne.n	800cff6 <__lshift+0x4e>
 800cfdc:	31df      	adds	r1, #223	; 0xdf
 800cfde:	0032      	movs	r2, r6
 800cfe0:	4b26      	ldr	r3, [pc, #152]	; (800d07c <__lshift+0xd4>)
 800cfe2:	4827      	ldr	r0, [pc, #156]	; (800d080 <__lshift+0xd8>)
 800cfe4:	31ff      	adds	r1, #255	; 0xff
 800cfe6:	f7fe fa49 	bl	800b47c <__assert_func>
 800cfea:	3101      	adds	r1, #1
 800cfec:	005b      	lsls	r3, r3, #1
 800cfee:	e7e8      	b.n	800cfc2 <__lshift+0x1a>
 800cff0:	0098      	lsls	r0, r3, #2
 800cff2:	5011      	str	r1, [r2, r0]
 800cff4:	3301      	adds	r3, #1
 800cff6:	42ab      	cmp	r3, r5
 800cff8:	dbfa      	blt.n	800cff0 <__lshift+0x48>
 800cffa:	43eb      	mvns	r3, r5
 800cffc:	17db      	asrs	r3, r3, #31
 800cffe:	401d      	ands	r5, r3
 800d000:	211f      	movs	r1, #31
 800d002:	0023      	movs	r3, r4
 800d004:	0038      	movs	r0, r7
 800d006:	00ad      	lsls	r5, r5, #2
 800d008:	1955      	adds	r5, r2, r5
 800d00a:	6922      	ldr	r2, [r4, #16]
 800d00c:	3314      	adds	r3, #20
 800d00e:	0092      	lsls	r2, r2, #2
 800d010:	4008      	ands	r0, r1
 800d012:	4684      	mov	ip, r0
 800d014:	189a      	adds	r2, r3, r2
 800d016:	420f      	tst	r7, r1
 800d018:	d02a      	beq.n	800d070 <__lshift+0xc8>
 800d01a:	3101      	adds	r1, #1
 800d01c:	1a09      	subs	r1, r1, r0
 800d01e:	9105      	str	r1, [sp, #20]
 800d020:	2100      	movs	r1, #0
 800d022:	9503      	str	r5, [sp, #12]
 800d024:	4667      	mov	r7, ip
 800d026:	6818      	ldr	r0, [r3, #0]
 800d028:	40b8      	lsls	r0, r7
 800d02a:	4308      	orrs	r0, r1
 800d02c:	9903      	ldr	r1, [sp, #12]
 800d02e:	c101      	stmia	r1!, {r0}
 800d030:	9103      	str	r1, [sp, #12]
 800d032:	9805      	ldr	r0, [sp, #20]
 800d034:	cb02      	ldmia	r3!, {r1}
 800d036:	40c1      	lsrs	r1, r0
 800d038:	429a      	cmp	r2, r3
 800d03a:	d8f3      	bhi.n	800d024 <__lshift+0x7c>
 800d03c:	0020      	movs	r0, r4
 800d03e:	3015      	adds	r0, #21
 800d040:	2304      	movs	r3, #4
 800d042:	4282      	cmp	r2, r0
 800d044:	d304      	bcc.n	800d050 <__lshift+0xa8>
 800d046:	1b13      	subs	r3, r2, r4
 800d048:	3b15      	subs	r3, #21
 800d04a:	089b      	lsrs	r3, r3, #2
 800d04c:	3301      	adds	r3, #1
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	50e9      	str	r1, [r5, r3]
 800d052:	2900      	cmp	r1, #0
 800d054:	d002      	beq.n	800d05c <__lshift+0xb4>
 800d056:	9b02      	ldr	r3, [sp, #8]
 800d058:	3302      	adds	r3, #2
 800d05a:	9301      	str	r3, [sp, #4]
 800d05c:	9b01      	ldr	r3, [sp, #4]
 800d05e:	9804      	ldr	r0, [sp, #16]
 800d060:	3b01      	subs	r3, #1
 800d062:	0021      	movs	r1, r4
 800d064:	6133      	str	r3, [r6, #16]
 800d066:	f7ff fd7f 	bl	800cb68 <_Bfree>
 800d06a:	0030      	movs	r0, r6
 800d06c:	b007      	add	sp, #28
 800d06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d070:	cb02      	ldmia	r3!, {r1}
 800d072:	c502      	stmia	r5!, {r1}
 800d074:	429a      	cmp	r2, r3
 800d076:	d8fb      	bhi.n	800d070 <__lshift+0xc8>
 800d078:	e7f0      	b.n	800d05c <__lshift+0xb4>
 800d07a:	46c0      	nop			; (mov r8, r8)
 800d07c:	0800e2de 	.word	0x0800e2de
 800d080:	0800e34f 	.word	0x0800e34f

0800d084 <__mcmp>:
 800d084:	b530      	push	{r4, r5, lr}
 800d086:	690b      	ldr	r3, [r1, #16]
 800d088:	6904      	ldr	r4, [r0, #16]
 800d08a:	0002      	movs	r2, r0
 800d08c:	1ae0      	subs	r0, r4, r3
 800d08e:	429c      	cmp	r4, r3
 800d090:	d10e      	bne.n	800d0b0 <__mcmp+0x2c>
 800d092:	3214      	adds	r2, #20
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	3114      	adds	r1, #20
 800d098:	0014      	movs	r4, r2
 800d09a:	18c9      	adds	r1, r1, r3
 800d09c:	18d2      	adds	r2, r2, r3
 800d09e:	3a04      	subs	r2, #4
 800d0a0:	3904      	subs	r1, #4
 800d0a2:	6815      	ldr	r5, [r2, #0]
 800d0a4:	680b      	ldr	r3, [r1, #0]
 800d0a6:	429d      	cmp	r5, r3
 800d0a8:	d003      	beq.n	800d0b2 <__mcmp+0x2e>
 800d0aa:	2001      	movs	r0, #1
 800d0ac:	429d      	cmp	r5, r3
 800d0ae:	d303      	bcc.n	800d0b8 <__mcmp+0x34>
 800d0b0:	bd30      	pop	{r4, r5, pc}
 800d0b2:	4294      	cmp	r4, r2
 800d0b4:	d3f3      	bcc.n	800d09e <__mcmp+0x1a>
 800d0b6:	e7fb      	b.n	800d0b0 <__mcmp+0x2c>
 800d0b8:	4240      	negs	r0, r0
 800d0ba:	e7f9      	b.n	800d0b0 <__mcmp+0x2c>

0800d0bc <__mdiff>:
 800d0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0be:	000e      	movs	r6, r1
 800d0c0:	0007      	movs	r7, r0
 800d0c2:	0011      	movs	r1, r2
 800d0c4:	0030      	movs	r0, r6
 800d0c6:	b087      	sub	sp, #28
 800d0c8:	0014      	movs	r4, r2
 800d0ca:	f7ff ffdb 	bl	800d084 <__mcmp>
 800d0ce:	1e05      	subs	r5, r0, #0
 800d0d0:	d110      	bne.n	800d0f4 <__mdiff+0x38>
 800d0d2:	0001      	movs	r1, r0
 800d0d4:	0038      	movs	r0, r7
 800d0d6:	f7ff fd03 	bl	800cae0 <_Balloc>
 800d0da:	1e02      	subs	r2, r0, #0
 800d0dc:	d104      	bne.n	800d0e8 <__mdiff+0x2c>
 800d0de:	4b3f      	ldr	r3, [pc, #252]	; (800d1dc <__mdiff+0x120>)
 800d0e0:	483f      	ldr	r0, [pc, #252]	; (800d1e0 <__mdiff+0x124>)
 800d0e2:	4940      	ldr	r1, [pc, #256]	; (800d1e4 <__mdiff+0x128>)
 800d0e4:	f7fe f9ca 	bl	800b47c <__assert_func>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	6145      	str	r5, [r0, #20]
 800d0ec:	6103      	str	r3, [r0, #16]
 800d0ee:	0010      	movs	r0, r2
 800d0f0:	b007      	add	sp, #28
 800d0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	9301      	str	r3, [sp, #4]
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	db04      	blt.n	800d106 <__mdiff+0x4a>
 800d0fc:	0023      	movs	r3, r4
 800d0fe:	0034      	movs	r4, r6
 800d100:	001e      	movs	r6, r3
 800d102:	2300      	movs	r3, #0
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	0038      	movs	r0, r7
 800d108:	6861      	ldr	r1, [r4, #4]
 800d10a:	f7ff fce9 	bl	800cae0 <_Balloc>
 800d10e:	1e02      	subs	r2, r0, #0
 800d110:	d103      	bne.n	800d11a <__mdiff+0x5e>
 800d112:	4b32      	ldr	r3, [pc, #200]	; (800d1dc <__mdiff+0x120>)
 800d114:	4832      	ldr	r0, [pc, #200]	; (800d1e0 <__mdiff+0x124>)
 800d116:	4934      	ldr	r1, [pc, #208]	; (800d1e8 <__mdiff+0x12c>)
 800d118:	e7e4      	b.n	800d0e4 <__mdiff+0x28>
 800d11a:	9b01      	ldr	r3, [sp, #4]
 800d11c:	2700      	movs	r7, #0
 800d11e:	60c3      	str	r3, [r0, #12]
 800d120:	6920      	ldr	r0, [r4, #16]
 800d122:	3414      	adds	r4, #20
 800d124:	0083      	lsls	r3, r0, #2
 800d126:	18e3      	adds	r3, r4, r3
 800d128:	0021      	movs	r1, r4
 800d12a:	9401      	str	r4, [sp, #4]
 800d12c:	0034      	movs	r4, r6
 800d12e:	9302      	str	r3, [sp, #8]
 800d130:	6933      	ldr	r3, [r6, #16]
 800d132:	3414      	adds	r4, #20
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	18e3      	adds	r3, r4, r3
 800d138:	9303      	str	r3, [sp, #12]
 800d13a:	0013      	movs	r3, r2
 800d13c:	3314      	adds	r3, #20
 800d13e:	469c      	mov	ip, r3
 800d140:	9305      	str	r3, [sp, #20]
 800d142:	9104      	str	r1, [sp, #16]
 800d144:	9b04      	ldr	r3, [sp, #16]
 800d146:	cc02      	ldmia	r4!, {r1}
 800d148:	cb20      	ldmia	r3!, {r5}
 800d14a:	9304      	str	r3, [sp, #16]
 800d14c:	b2ab      	uxth	r3, r5
 800d14e:	19df      	adds	r7, r3, r7
 800d150:	b28b      	uxth	r3, r1
 800d152:	1afb      	subs	r3, r7, r3
 800d154:	0c09      	lsrs	r1, r1, #16
 800d156:	0c2d      	lsrs	r5, r5, #16
 800d158:	1a6d      	subs	r5, r5, r1
 800d15a:	1419      	asrs	r1, r3, #16
 800d15c:	1869      	adds	r1, r5, r1
 800d15e:	b29b      	uxth	r3, r3
 800d160:	140f      	asrs	r7, r1, #16
 800d162:	0409      	lsls	r1, r1, #16
 800d164:	4319      	orrs	r1, r3
 800d166:	4663      	mov	r3, ip
 800d168:	c302      	stmia	r3!, {r1}
 800d16a:	469c      	mov	ip, r3
 800d16c:	9b03      	ldr	r3, [sp, #12]
 800d16e:	42a3      	cmp	r3, r4
 800d170:	d8e8      	bhi.n	800d144 <__mdiff+0x88>
 800d172:	0031      	movs	r1, r6
 800d174:	9c03      	ldr	r4, [sp, #12]
 800d176:	3115      	adds	r1, #21
 800d178:	2304      	movs	r3, #4
 800d17a:	428c      	cmp	r4, r1
 800d17c:	d304      	bcc.n	800d188 <__mdiff+0xcc>
 800d17e:	1ba3      	subs	r3, r4, r6
 800d180:	3b15      	subs	r3, #21
 800d182:	089b      	lsrs	r3, r3, #2
 800d184:	3301      	adds	r3, #1
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	9901      	ldr	r1, [sp, #4]
 800d18a:	18cd      	adds	r5, r1, r3
 800d18c:	9905      	ldr	r1, [sp, #20]
 800d18e:	002e      	movs	r6, r5
 800d190:	18cb      	adds	r3, r1, r3
 800d192:	469c      	mov	ip, r3
 800d194:	9902      	ldr	r1, [sp, #8]
 800d196:	428e      	cmp	r6, r1
 800d198:	d310      	bcc.n	800d1bc <__mdiff+0x100>
 800d19a:	9e02      	ldr	r6, [sp, #8]
 800d19c:	1ee9      	subs	r1, r5, #3
 800d19e:	2400      	movs	r4, #0
 800d1a0:	428e      	cmp	r6, r1
 800d1a2:	d304      	bcc.n	800d1ae <__mdiff+0xf2>
 800d1a4:	0031      	movs	r1, r6
 800d1a6:	3103      	adds	r1, #3
 800d1a8:	1b49      	subs	r1, r1, r5
 800d1aa:	0889      	lsrs	r1, r1, #2
 800d1ac:	008c      	lsls	r4, r1, #2
 800d1ae:	191b      	adds	r3, r3, r4
 800d1b0:	3b04      	subs	r3, #4
 800d1b2:	6819      	ldr	r1, [r3, #0]
 800d1b4:	2900      	cmp	r1, #0
 800d1b6:	d00f      	beq.n	800d1d8 <__mdiff+0x11c>
 800d1b8:	6110      	str	r0, [r2, #16]
 800d1ba:	e798      	b.n	800d0ee <__mdiff+0x32>
 800d1bc:	ce02      	ldmia	r6!, {r1}
 800d1be:	b28c      	uxth	r4, r1
 800d1c0:	19e4      	adds	r4, r4, r7
 800d1c2:	0c0f      	lsrs	r7, r1, #16
 800d1c4:	1421      	asrs	r1, r4, #16
 800d1c6:	1879      	adds	r1, r7, r1
 800d1c8:	b2a4      	uxth	r4, r4
 800d1ca:	140f      	asrs	r7, r1, #16
 800d1cc:	0409      	lsls	r1, r1, #16
 800d1ce:	4321      	orrs	r1, r4
 800d1d0:	4664      	mov	r4, ip
 800d1d2:	c402      	stmia	r4!, {r1}
 800d1d4:	46a4      	mov	ip, r4
 800d1d6:	e7dd      	b.n	800d194 <__mdiff+0xd8>
 800d1d8:	3801      	subs	r0, #1
 800d1da:	e7e9      	b.n	800d1b0 <__mdiff+0xf4>
 800d1dc:	0800e2de 	.word	0x0800e2de
 800d1e0:	0800e34f 	.word	0x0800e34f
 800d1e4:	00000237 	.word	0x00000237
 800d1e8:	00000245 	.word	0x00000245

0800d1ec <__ulp>:
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	4b0b      	ldr	r3, [pc, #44]	; (800d21c <__ulp+0x30>)
 800d1f0:	4019      	ands	r1, r3
 800d1f2:	4b0b      	ldr	r3, [pc, #44]	; (800d220 <__ulp+0x34>)
 800d1f4:	18c9      	adds	r1, r1, r3
 800d1f6:	4281      	cmp	r1, r0
 800d1f8:	dc06      	bgt.n	800d208 <__ulp+0x1c>
 800d1fa:	4249      	negs	r1, r1
 800d1fc:	150b      	asrs	r3, r1, #20
 800d1fe:	2b13      	cmp	r3, #19
 800d200:	dc03      	bgt.n	800d20a <__ulp+0x1e>
 800d202:	2180      	movs	r1, #128	; 0x80
 800d204:	0309      	lsls	r1, r1, #12
 800d206:	4119      	asrs	r1, r3
 800d208:	4770      	bx	lr
 800d20a:	3b14      	subs	r3, #20
 800d20c:	2001      	movs	r0, #1
 800d20e:	2b1e      	cmp	r3, #30
 800d210:	dc02      	bgt.n	800d218 <__ulp+0x2c>
 800d212:	2080      	movs	r0, #128	; 0x80
 800d214:	0600      	lsls	r0, r0, #24
 800d216:	40d8      	lsrs	r0, r3
 800d218:	2100      	movs	r1, #0
 800d21a:	e7f5      	b.n	800d208 <__ulp+0x1c>
 800d21c:	7ff00000 	.word	0x7ff00000
 800d220:	fcc00000 	.word	0xfcc00000

0800d224 <__b2d>:
 800d224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d226:	0006      	movs	r6, r0
 800d228:	6903      	ldr	r3, [r0, #16]
 800d22a:	3614      	adds	r6, #20
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	18f3      	adds	r3, r6, r3
 800d230:	1f1d      	subs	r5, r3, #4
 800d232:	682c      	ldr	r4, [r5, #0]
 800d234:	000f      	movs	r7, r1
 800d236:	0020      	movs	r0, r4
 800d238:	9301      	str	r3, [sp, #4]
 800d23a:	f7ff fd49 	bl	800ccd0 <__hi0bits>
 800d23e:	2220      	movs	r2, #32
 800d240:	1a12      	subs	r2, r2, r0
 800d242:	603a      	str	r2, [r7, #0]
 800d244:	0003      	movs	r3, r0
 800d246:	4a1c      	ldr	r2, [pc, #112]	; (800d2b8 <__b2d+0x94>)
 800d248:	280a      	cmp	r0, #10
 800d24a:	dc15      	bgt.n	800d278 <__b2d+0x54>
 800d24c:	210b      	movs	r1, #11
 800d24e:	0027      	movs	r7, r4
 800d250:	1a09      	subs	r1, r1, r0
 800d252:	40cf      	lsrs	r7, r1
 800d254:	433a      	orrs	r2, r7
 800d256:	468c      	mov	ip, r1
 800d258:	0011      	movs	r1, r2
 800d25a:	2200      	movs	r2, #0
 800d25c:	42ae      	cmp	r6, r5
 800d25e:	d202      	bcs.n	800d266 <__b2d+0x42>
 800d260:	9a01      	ldr	r2, [sp, #4]
 800d262:	3a08      	subs	r2, #8
 800d264:	6812      	ldr	r2, [r2, #0]
 800d266:	3315      	adds	r3, #21
 800d268:	409c      	lsls	r4, r3
 800d26a:	4663      	mov	r3, ip
 800d26c:	0027      	movs	r7, r4
 800d26e:	40da      	lsrs	r2, r3
 800d270:	4317      	orrs	r7, r2
 800d272:	0038      	movs	r0, r7
 800d274:	b003      	add	sp, #12
 800d276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d278:	2700      	movs	r7, #0
 800d27a:	42ae      	cmp	r6, r5
 800d27c:	d202      	bcs.n	800d284 <__b2d+0x60>
 800d27e:	9d01      	ldr	r5, [sp, #4]
 800d280:	3d08      	subs	r5, #8
 800d282:	682f      	ldr	r7, [r5, #0]
 800d284:	210b      	movs	r1, #11
 800d286:	4249      	negs	r1, r1
 800d288:	468c      	mov	ip, r1
 800d28a:	449c      	add	ip, r3
 800d28c:	2b0b      	cmp	r3, #11
 800d28e:	d010      	beq.n	800d2b2 <__b2d+0x8e>
 800d290:	4661      	mov	r1, ip
 800d292:	2320      	movs	r3, #32
 800d294:	408c      	lsls	r4, r1
 800d296:	1a5b      	subs	r3, r3, r1
 800d298:	0039      	movs	r1, r7
 800d29a:	40d9      	lsrs	r1, r3
 800d29c:	430c      	orrs	r4, r1
 800d29e:	4322      	orrs	r2, r4
 800d2a0:	0011      	movs	r1, r2
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	42b5      	cmp	r5, r6
 800d2a6:	d901      	bls.n	800d2ac <__b2d+0x88>
 800d2a8:	3d04      	subs	r5, #4
 800d2aa:	682a      	ldr	r2, [r5, #0]
 800d2ac:	4664      	mov	r4, ip
 800d2ae:	40a7      	lsls	r7, r4
 800d2b0:	e7dd      	b.n	800d26e <__b2d+0x4a>
 800d2b2:	4322      	orrs	r2, r4
 800d2b4:	0011      	movs	r1, r2
 800d2b6:	e7dc      	b.n	800d272 <__b2d+0x4e>
 800d2b8:	3ff00000 	.word	0x3ff00000

0800d2bc <__d2b>:
 800d2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2be:	2101      	movs	r1, #1
 800d2c0:	0014      	movs	r4, r2
 800d2c2:	001d      	movs	r5, r3
 800d2c4:	9f08      	ldr	r7, [sp, #32]
 800d2c6:	f7ff fc0b 	bl	800cae0 <_Balloc>
 800d2ca:	1e06      	subs	r6, r0, #0
 800d2cc:	d105      	bne.n	800d2da <__d2b+0x1e>
 800d2ce:	0032      	movs	r2, r6
 800d2d0:	4b24      	ldr	r3, [pc, #144]	; (800d364 <__d2b+0xa8>)
 800d2d2:	4825      	ldr	r0, [pc, #148]	; (800d368 <__d2b+0xac>)
 800d2d4:	4925      	ldr	r1, [pc, #148]	; (800d36c <__d2b+0xb0>)
 800d2d6:	f7fe f8d1 	bl	800b47c <__assert_func>
 800d2da:	032b      	lsls	r3, r5, #12
 800d2dc:	006d      	lsls	r5, r5, #1
 800d2de:	0b1b      	lsrs	r3, r3, #12
 800d2e0:	0d6d      	lsrs	r5, r5, #21
 800d2e2:	d125      	bne.n	800d330 <__d2b+0x74>
 800d2e4:	9301      	str	r3, [sp, #4]
 800d2e6:	2c00      	cmp	r4, #0
 800d2e8:	d028      	beq.n	800d33c <__d2b+0x80>
 800d2ea:	4668      	mov	r0, sp
 800d2ec:	9400      	str	r4, [sp, #0]
 800d2ee:	f7ff fd09 	bl	800cd04 <__lo0bits>
 800d2f2:	9b01      	ldr	r3, [sp, #4]
 800d2f4:	9900      	ldr	r1, [sp, #0]
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d01e      	beq.n	800d338 <__d2b+0x7c>
 800d2fa:	2220      	movs	r2, #32
 800d2fc:	001c      	movs	r4, r3
 800d2fe:	1a12      	subs	r2, r2, r0
 800d300:	4094      	lsls	r4, r2
 800d302:	0022      	movs	r2, r4
 800d304:	40c3      	lsrs	r3, r0
 800d306:	430a      	orrs	r2, r1
 800d308:	6172      	str	r2, [r6, #20]
 800d30a:	9301      	str	r3, [sp, #4]
 800d30c:	9c01      	ldr	r4, [sp, #4]
 800d30e:	61b4      	str	r4, [r6, #24]
 800d310:	1e63      	subs	r3, r4, #1
 800d312:	419c      	sbcs	r4, r3
 800d314:	3401      	adds	r4, #1
 800d316:	6134      	str	r4, [r6, #16]
 800d318:	2d00      	cmp	r5, #0
 800d31a:	d017      	beq.n	800d34c <__d2b+0x90>
 800d31c:	2435      	movs	r4, #53	; 0x35
 800d31e:	4b14      	ldr	r3, [pc, #80]	; (800d370 <__d2b+0xb4>)
 800d320:	18ed      	adds	r5, r5, r3
 800d322:	182d      	adds	r5, r5, r0
 800d324:	603d      	str	r5, [r7, #0]
 800d326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d328:	1a24      	subs	r4, r4, r0
 800d32a:	601c      	str	r4, [r3, #0]
 800d32c:	0030      	movs	r0, r6
 800d32e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d330:	2280      	movs	r2, #128	; 0x80
 800d332:	0352      	lsls	r2, r2, #13
 800d334:	4313      	orrs	r3, r2
 800d336:	e7d5      	b.n	800d2e4 <__d2b+0x28>
 800d338:	6171      	str	r1, [r6, #20]
 800d33a:	e7e7      	b.n	800d30c <__d2b+0x50>
 800d33c:	a801      	add	r0, sp, #4
 800d33e:	f7ff fce1 	bl	800cd04 <__lo0bits>
 800d342:	9b01      	ldr	r3, [sp, #4]
 800d344:	2401      	movs	r4, #1
 800d346:	6173      	str	r3, [r6, #20]
 800d348:	3020      	adds	r0, #32
 800d34a:	e7e4      	b.n	800d316 <__d2b+0x5a>
 800d34c:	4b09      	ldr	r3, [pc, #36]	; (800d374 <__d2b+0xb8>)
 800d34e:	18c0      	adds	r0, r0, r3
 800d350:	4b09      	ldr	r3, [pc, #36]	; (800d378 <__d2b+0xbc>)
 800d352:	6038      	str	r0, [r7, #0]
 800d354:	18e3      	adds	r3, r4, r3
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	18f3      	adds	r3, r6, r3
 800d35a:	6958      	ldr	r0, [r3, #20]
 800d35c:	f7ff fcb8 	bl	800ccd0 <__hi0bits>
 800d360:	0164      	lsls	r4, r4, #5
 800d362:	e7e0      	b.n	800d326 <__d2b+0x6a>
 800d364:	0800e2de 	.word	0x0800e2de
 800d368:	0800e34f 	.word	0x0800e34f
 800d36c:	0000030f 	.word	0x0000030f
 800d370:	fffffbcd 	.word	0xfffffbcd
 800d374:	fffffbce 	.word	0xfffffbce
 800d378:	3fffffff 	.word	0x3fffffff

0800d37c <__ratio>:
 800d37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d37e:	b087      	sub	sp, #28
 800d380:	000f      	movs	r7, r1
 800d382:	a904      	add	r1, sp, #16
 800d384:	0006      	movs	r6, r0
 800d386:	f7ff ff4d 	bl	800d224 <__b2d>
 800d38a:	9000      	str	r0, [sp, #0]
 800d38c:	9101      	str	r1, [sp, #4]
 800d38e:	9c00      	ldr	r4, [sp, #0]
 800d390:	9d01      	ldr	r5, [sp, #4]
 800d392:	0038      	movs	r0, r7
 800d394:	a905      	add	r1, sp, #20
 800d396:	f7ff ff45 	bl	800d224 <__b2d>
 800d39a:	9002      	str	r0, [sp, #8]
 800d39c:	9103      	str	r1, [sp, #12]
 800d39e:	9a02      	ldr	r2, [sp, #8]
 800d3a0:	9b03      	ldr	r3, [sp, #12]
 800d3a2:	6930      	ldr	r0, [r6, #16]
 800d3a4:	6939      	ldr	r1, [r7, #16]
 800d3a6:	9e04      	ldr	r6, [sp, #16]
 800d3a8:	1a40      	subs	r0, r0, r1
 800d3aa:	9905      	ldr	r1, [sp, #20]
 800d3ac:	0140      	lsls	r0, r0, #5
 800d3ae:	1a71      	subs	r1, r6, r1
 800d3b0:	1841      	adds	r1, r0, r1
 800d3b2:	0508      	lsls	r0, r1, #20
 800d3b4:	2900      	cmp	r1, #0
 800d3b6:	dd07      	ble.n	800d3c8 <__ratio+0x4c>
 800d3b8:	9901      	ldr	r1, [sp, #4]
 800d3ba:	1845      	adds	r5, r0, r1
 800d3bc:	0020      	movs	r0, r4
 800d3be:	0029      	movs	r1, r5
 800d3c0:	f7f4 fb94 	bl	8001aec <__aeabi_ddiv>
 800d3c4:	b007      	add	sp, #28
 800d3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3c8:	9903      	ldr	r1, [sp, #12]
 800d3ca:	1a0b      	subs	r3, r1, r0
 800d3cc:	e7f6      	b.n	800d3bc <__ratio+0x40>

0800d3ce <__copybits>:
 800d3ce:	b570      	push	{r4, r5, r6, lr}
 800d3d0:	0014      	movs	r4, r2
 800d3d2:	0005      	movs	r5, r0
 800d3d4:	3901      	subs	r1, #1
 800d3d6:	6913      	ldr	r3, [r2, #16]
 800d3d8:	1149      	asrs	r1, r1, #5
 800d3da:	3101      	adds	r1, #1
 800d3dc:	0089      	lsls	r1, r1, #2
 800d3de:	3414      	adds	r4, #20
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	1841      	adds	r1, r0, r1
 800d3e4:	18e3      	adds	r3, r4, r3
 800d3e6:	42a3      	cmp	r3, r4
 800d3e8:	d80d      	bhi.n	800d406 <__copybits+0x38>
 800d3ea:	0014      	movs	r4, r2
 800d3ec:	3411      	adds	r4, #17
 800d3ee:	2500      	movs	r5, #0
 800d3f0:	429c      	cmp	r4, r3
 800d3f2:	d803      	bhi.n	800d3fc <__copybits+0x2e>
 800d3f4:	1a9b      	subs	r3, r3, r2
 800d3f6:	3b11      	subs	r3, #17
 800d3f8:	089b      	lsrs	r3, r3, #2
 800d3fa:	009d      	lsls	r5, r3, #2
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	1940      	adds	r0, r0, r5
 800d400:	4281      	cmp	r1, r0
 800d402:	d803      	bhi.n	800d40c <__copybits+0x3e>
 800d404:	bd70      	pop	{r4, r5, r6, pc}
 800d406:	cc40      	ldmia	r4!, {r6}
 800d408:	c540      	stmia	r5!, {r6}
 800d40a:	e7ec      	b.n	800d3e6 <__copybits+0x18>
 800d40c:	c008      	stmia	r0!, {r3}
 800d40e:	e7f7      	b.n	800d400 <__copybits+0x32>

0800d410 <__any_on>:
 800d410:	0002      	movs	r2, r0
 800d412:	6900      	ldr	r0, [r0, #16]
 800d414:	b510      	push	{r4, lr}
 800d416:	3214      	adds	r2, #20
 800d418:	114b      	asrs	r3, r1, #5
 800d41a:	4298      	cmp	r0, r3
 800d41c:	db13      	blt.n	800d446 <__any_on+0x36>
 800d41e:	dd0c      	ble.n	800d43a <__any_on+0x2a>
 800d420:	241f      	movs	r4, #31
 800d422:	0008      	movs	r0, r1
 800d424:	4020      	ands	r0, r4
 800d426:	4221      	tst	r1, r4
 800d428:	d007      	beq.n	800d43a <__any_on+0x2a>
 800d42a:	0099      	lsls	r1, r3, #2
 800d42c:	588c      	ldr	r4, [r1, r2]
 800d42e:	0021      	movs	r1, r4
 800d430:	40c1      	lsrs	r1, r0
 800d432:	4081      	lsls	r1, r0
 800d434:	2001      	movs	r0, #1
 800d436:	428c      	cmp	r4, r1
 800d438:	d104      	bne.n	800d444 <__any_on+0x34>
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	18d3      	adds	r3, r2, r3
 800d43e:	4293      	cmp	r3, r2
 800d440:	d803      	bhi.n	800d44a <__any_on+0x3a>
 800d442:	2000      	movs	r0, #0
 800d444:	bd10      	pop	{r4, pc}
 800d446:	0003      	movs	r3, r0
 800d448:	e7f7      	b.n	800d43a <__any_on+0x2a>
 800d44a:	3b04      	subs	r3, #4
 800d44c:	6819      	ldr	r1, [r3, #0]
 800d44e:	2900      	cmp	r1, #0
 800d450:	d0f5      	beq.n	800d43e <__any_on+0x2e>
 800d452:	2001      	movs	r0, #1
 800d454:	e7f6      	b.n	800d444 <__any_on+0x34>

0800d456 <__ascii_wctomb>:
 800d456:	0003      	movs	r3, r0
 800d458:	1e08      	subs	r0, r1, #0
 800d45a:	d005      	beq.n	800d468 <__ascii_wctomb+0x12>
 800d45c:	2aff      	cmp	r2, #255	; 0xff
 800d45e:	d904      	bls.n	800d46a <__ascii_wctomb+0x14>
 800d460:	228a      	movs	r2, #138	; 0x8a
 800d462:	2001      	movs	r0, #1
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	4240      	negs	r0, r0
 800d468:	4770      	bx	lr
 800d46a:	2001      	movs	r0, #1
 800d46c:	700a      	strb	r2, [r1, #0]
 800d46e:	e7fb      	b.n	800d468 <__ascii_wctomb+0x12>

0800d470 <__ssputs_r>:
 800d470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d472:	b085      	sub	sp, #20
 800d474:	9301      	str	r3, [sp, #4]
 800d476:	9203      	str	r2, [sp, #12]
 800d478:	688e      	ldr	r6, [r1, #8]
 800d47a:	9a01      	ldr	r2, [sp, #4]
 800d47c:	0007      	movs	r7, r0
 800d47e:	000c      	movs	r4, r1
 800d480:	680b      	ldr	r3, [r1, #0]
 800d482:	4296      	cmp	r6, r2
 800d484:	d831      	bhi.n	800d4ea <__ssputs_r+0x7a>
 800d486:	898a      	ldrh	r2, [r1, #12]
 800d488:	2190      	movs	r1, #144	; 0x90
 800d48a:	00c9      	lsls	r1, r1, #3
 800d48c:	420a      	tst	r2, r1
 800d48e:	d029      	beq.n	800d4e4 <__ssputs_r+0x74>
 800d490:	2003      	movs	r0, #3
 800d492:	6921      	ldr	r1, [r4, #16]
 800d494:	1a5b      	subs	r3, r3, r1
 800d496:	9302      	str	r3, [sp, #8]
 800d498:	6963      	ldr	r3, [r4, #20]
 800d49a:	4343      	muls	r3, r0
 800d49c:	0fdd      	lsrs	r5, r3, #31
 800d49e:	18ed      	adds	r5, r5, r3
 800d4a0:	9b01      	ldr	r3, [sp, #4]
 800d4a2:	9802      	ldr	r0, [sp, #8]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	181b      	adds	r3, r3, r0
 800d4a8:	106d      	asrs	r5, r5, #1
 800d4aa:	42ab      	cmp	r3, r5
 800d4ac:	d900      	bls.n	800d4b0 <__ssputs_r+0x40>
 800d4ae:	001d      	movs	r5, r3
 800d4b0:	0552      	lsls	r2, r2, #21
 800d4b2:	d529      	bpl.n	800d508 <__ssputs_r+0x98>
 800d4b4:	0029      	movs	r1, r5
 800d4b6:	0038      	movs	r0, r7
 800d4b8:	f7ff fa6e 	bl	800c998 <_malloc_r>
 800d4bc:	1e06      	subs	r6, r0, #0
 800d4be:	d02d      	beq.n	800d51c <__ssputs_r+0xac>
 800d4c0:	9a02      	ldr	r2, [sp, #8]
 800d4c2:	6921      	ldr	r1, [r4, #16]
 800d4c4:	f7fd ffca 	bl	800b45c <memcpy>
 800d4c8:	89a2      	ldrh	r2, [r4, #12]
 800d4ca:	4b19      	ldr	r3, [pc, #100]	; (800d530 <__ssputs_r+0xc0>)
 800d4cc:	401a      	ands	r2, r3
 800d4ce:	2380      	movs	r3, #128	; 0x80
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	81a3      	strh	r3, [r4, #12]
 800d4d4:	9b02      	ldr	r3, [sp, #8]
 800d4d6:	6126      	str	r6, [r4, #16]
 800d4d8:	18f6      	adds	r6, r6, r3
 800d4da:	6026      	str	r6, [r4, #0]
 800d4dc:	6165      	str	r5, [r4, #20]
 800d4de:	9e01      	ldr	r6, [sp, #4]
 800d4e0:	1aed      	subs	r5, r5, r3
 800d4e2:	60a5      	str	r5, [r4, #8]
 800d4e4:	9b01      	ldr	r3, [sp, #4]
 800d4e6:	429e      	cmp	r6, r3
 800d4e8:	d900      	bls.n	800d4ec <__ssputs_r+0x7c>
 800d4ea:	9e01      	ldr	r6, [sp, #4]
 800d4ec:	0032      	movs	r2, r6
 800d4ee:	9903      	ldr	r1, [sp, #12]
 800d4f0:	6820      	ldr	r0, [r4, #0]
 800d4f2:	f000 fb8f 	bl	800dc14 <memmove>
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	68a3      	ldr	r3, [r4, #8]
 800d4fa:	1b9b      	subs	r3, r3, r6
 800d4fc:	60a3      	str	r3, [r4, #8]
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	199b      	adds	r3, r3, r6
 800d502:	6023      	str	r3, [r4, #0]
 800d504:	b005      	add	sp, #20
 800d506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d508:	002a      	movs	r2, r5
 800d50a:	0038      	movs	r0, r7
 800d50c:	f000 fc00 	bl	800dd10 <_realloc_r>
 800d510:	1e06      	subs	r6, r0, #0
 800d512:	d1df      	bne.n	800d4d4 <__ssputs_r+0x64>
 800d514:	0038      	movs	r0, r7
 800d516:	6921      	ldr	r1, [r4, #16]
 800d518:	f7fe fe6c 	bl	800c1f4 <_free_r>
 800d51c:	230c      	movs	r3, #12
 800d51e:	2001      	movs	r0, #1
 800d520:	603b      	str	r3, [r7, #0]
 800d522:	89a2      	ldrh	r2, [r4, #12]
 800d524:	3334      	adds	r3, #52	; 0x34
 800d526:	4313      	orrs	r3, r2
 800d528:	81a3      	strh	r3, [r4, #12]
 800d52a:	4240      	negs	r0, r0
 800d52c:	e7ea      	b.n	800d504 <__ssputs_r+0x94>
 800d52e:	46c0      	nop			; (mov r8, r8)
 800d530:	fffffb7f 	.word	0xfffffb7f

0800d534 <_svfiprintf_r>:
 800d534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d536:	b0a1      	sub	sp, #132	; 0x84
 800d538:	9003      	str	r0, [sp, #12]
 800d53a:	001d      	movs	r5, r3
 800d53c:	898b      	ldrh	r3, [r1, #12]
 800d53e:	000f      	movs	r7, r1
 800d540:	0016      	movs	r6, r2
 800d542:	061b      	lsls	r3, r3, #24
 800d544:	d511      	bpl.n	800d56a <_svfiprintf_r+0x36>
 800d546:	690b      	ldr	r3, [r1, #16]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10e      	bne.n	800d56a <_svfiprintf_r+0x36>
 800d54c:	2140      	movs	r1, #64	; 0x40
 800d54e:	f7ff fa23 	bl	800c998 <_malloc_r>
 800d552:	6038      	str	r0, [r7, #0]
 800d554:	6138      	str	r0, [r7, #16]
 800d556:	2800      	cmp	r0, #0
 800d558:	d105      	bne.n	800d566 <_svfiprintf_r+0x32>
 800d55a:	230c      	movs	r3, #12
 800d55c:	9a03      	ldr	r2, [sp, #12]
 800d55e:	3801      	subs	r0, #1
 800d560:	6013      	str	r3, [r2, #0]
 800d562:	b021      	add	sp, #132	; 0x84
 800d564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d566:	2340      	movs	r3, #64	; 0x40
 800d568:	617b      	str	r3, [r7, #20]
 800d56a:	2300      	movs	r3, #0
 800d56c:	ac08      	add	r4, sp, #32
 800d56e:	6163      	str	r3, [r4, #20]
 800d570:	3320      	adds	r3, #32
 800d572:	7663      	strb	r3, [r4, #25]
 800d574:	3310      	adds	r3, #16
 800d576:	76a3      	strb	r3, [r4, #26]
 800d578:	9507      	str	r5, [sp, #28]
 800d57a:	0035      	movs	r5, r6
 800d57c:	782b      	ldrb	r3, [r5, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <_svfiprintf_r+0x52>
 800d582:	2b25      	cmp	r3, #37	; 0x25
 800d584:	d148      	bne.n	800d618 <_svfiprintf_r+0xe4>
 800d586:	1bab      	subs	r3, r5, r6
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	42b5      	cmp	r5, r6
 800d58c:	d00b      	beq.n	800d5a6 <_svfiprintf_r+0x72>
 800d58e:	0032      	movs	r2, r6
 800d590:	0039      	movs	r1, r7
 800d592:	9803      	ldr	r0, [sp, #12]
 800d594:	f7ff ff6c 	bl	800d470 <__ssputs_r>
 800d598:	3001      	adds	r0, #1
 800d59a:	d100      	bne.n	800d59e <_svfiprintf_r+0x6a>
 800d59c:	e0af      	b.n	800d6fe <_svfiprintf_r+0x1ca>
 800d59e:	6963      	ldr	r3, [r4, #20]
 800d5a0:	9a05      	ldr	r2, [sp, #20]
 800d5a2:	189b      	adds	r3, r3, r2
 800d5a4:	6163      	str	r3, [r4, #20]
 800d5a6:	782b      	ldrb	r3, [r5, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d100      	bne.n	800d5ae <_svfiprintf_r+0x7a>
 800d5ac:	e0a7      	b.n	800d6fe <_svfiprintf_r+0x1ca>
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	4252      	negs	r2, r2
 800d5b4:	6062      	str	r2, [r4, #4]
 800d5b6:	a904      	add	r1, sp, #16
 800d5b8:	3254      	adds	r2, #84	; 0x54
 800d5ba:	1852      	adds	r2, r2, r1
 800d5bc:	1c6e      	adds	r6, r5, #1
 800d5be:	6023      	str	r3, [r4, #0]
 800d5c0:	60e3      	str	r3, [r4, #12]
 800d5c2:	60a3      	str	r3, [r4, #8]
 800d5c4:	7013      	strb	r3, [r2, #0]
 800d5c6:	65a3      	str	r3, [r4, #88]	; 0x58
 800d5c8:	4b55      	ldr	r3, [pc, #340]	; (800d720 <_svfiprintf_r+0x1ec>)
 800d5ca:	2205      	movs	r2, #5
 800d5cc:	0018      	movs	r0, r3
 800d5ce:	7831      	ldrb	r1, [r6, #0]
 800d5d0:	9305      	str	r3, [sp, #20]
 800d5d2:	f7fd ff38 	bl	800b446 <memchr>
 800d5d6:	1c75      	adds	r5, r6, #1
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d11f      	bne.n	800d61c <_svfiprintf_r+0xe8>
 800d5dc:	6822      	ldr	r2, [r4, #0]
 800d5de:	06d3      	lsls	r3, r2, #27
 800d5e0:	d504      	bpl.n	800d5ec <_svfiprintf_r+0xb8>
 800d5e2:	2353      	movs	r3, #83	; 0x53
 800d5e4:	a904      	add	r1, sp, #16
 800d5e6:	185b      	adds	r3, r3, r1
 800d5e8:	2120      	movs	r1, #32
 800d5ea:	7019      	strb	r1, [r3, #0]
 800d5ec:	0713      	lsls	r3, r2, #28
 800d5ee:	d504      	bpl.n	800d5fa <_svfiprintf_r+0xc6>
 800d5f0:	2353      	movs	r3, #83	; 0x53
 800d5f2:	a904      	add	r1, sp, #16
 800d5f4:	185b      	adds	r3, r3, r1
 800d5f6:	212b      	movs	r1, #43	; 0x2b
 800d5f8:	7019      	strb	r1, [r3, #0]
 800d5fa:	7833      	ldrb	r3, [r6, #0]
 800d5fc:	2b2a      	cmp	r3, #42	; 0x2a
 800d5fe:	d016      	beq.n	800d62e <_svfiprintf_r+0xfa>
 800d600:	0035      	movs	r5, r6
 800d602:	2100      	movs	r1, #0
 800d604:	200a      	movs	r0, #10
 800d606:	68e3      	ldr	r3, [r4, #12]
 800d608:	782a      	ldrb	r2, [r5, #0]
 800d60a:	1c6e      	adds	r6, r5, #1
 800d60c:	3a30      	subs	r2, #48	; 0x30
 800d60e:	2a09      	cmp	r2, #9
 800d610:	d94e      	bls.n	800d6b0 <_svfiprintf_r+0x17c>
 800d612:	2900      	cmp	r1, #0
 800d614:	d111      	bne.n	800d63a <_svfiprintf_r+0x106>
 800d616:	e017      	b.n	800d648 <_svfiprintf_r+0x114>
 800d618:	3501      	adds	r5, #1
 800d61a:	e7af      	b.n	800d57c <_svfiprintf_r+0x48>
 800d61c:	9b05      	ldr	r3, [sp, #20]
 800d61e:	6822      	ldr	r2, [r4, #0]
 800d620:	1ac0      	subs	r0, r0, r3
 800d622:	2301      	movs	r3, #1
 800d624:	4083      	lsls	r3, r0
 800d626:	4313      	orrs	r3, r2
 800d628:	002e      	movs	r6, r5
 800d62a:	6023      	str	r3, [r4, #0]
 800d62c:	e7cc      	b.n	800d5c8 <_svfiprintf_r+0x94>
 800d62e:	9b07      	ldr	r3, [sp, #28]
 800d630:	1d19      	adds	r1, r3, #4
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	9107      	str	r1, [sp, #28]
 800d636:	2b00      	cmp	r3, #0
 800d638:	db01      	blt.n	800d63e <_svfiprintf_r+0x10a>
 800d63a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d63c:	e004      	b.n	800d648 <_svfiprintf_r+0x114>
 800d63e:	425b      	negs	r3, r3
 800d640:	60e3      	str	r3, [r4, #12]
 800d642:	2302      	movs	r3, #2
 800d644:	4313      	orrs	r3, r2
 800d646:	6023      	str	r3, [r4, #0]
 800d648:	782b      	ldrb	r3, [r5, #0]
 800d64a:	2b2e      	cmp	r3, #46	; 0x2e
 800d64c:	d10a      	bne.n	800d664 <_svfiprintf_r+0x130>
 800d64e:	786b      	ldrb	r3, [r5, #1]
 800d650:	2b2a      	cmp	r3, #42	; 0x2a
 800d652:	d135      	bne.n	800d6c0 <_svfiprintf_r+0x18c>
 800d654:	9b07      	ldr	r3, [sp, #28]
 800d656:	3502      	adds	r5, #2
 800d658:	1d1a      	adds	r2, r3, #4
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	9207      	str	r2, [sp, #28]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	db2b      	blt.n	800d6ba <_svfiprintf_r+0x186>
 800d662:	9309      	str	r3, [sp, #36]	; 0x24
 800d664:	4e2f      	ldr	r6, [pc, #188]	; (800d724 <_svfiprintf_r+0x1f0>)
 800d666:	2203      	movs	r2, #3
 800d668:	0030      	movs	r0, r6
 800d66a:	7829      	ldrb	r1, [r5, #0]
 800d66c:	f7fd feeb 	bl	800b446 <memchr>
 800d670:	2800      	cmp	r0, #0
 800d672:	d006      	beq.n	800d682 <_svfiprintf_r+0x14e>
 800d674:	2340      	movs	r3, #64	; 0x40
 800d676:	1b80      	subs	r0, r0, r6
 800d678:	4083      	lsls	r3, r0
 800d67a:	6822      	ldr	r2, [r4, #0]
 800d67c:	3501      	adds	r5, #1
 800d67e:	4313      	orrs	r3, r2
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	7829      	ldrb	r1, [r5, #0]
 800d684:	2206      	movs	r2, #6
 800d686:	4828      	ldr	r0, [pc, #160]	; (800d728 <_svfiprintf_r+0x1f4>)
 800d688:	1c6e      	adds	r6, r5, #1
 800d68a:	7621      	strb	r1, [r4, #24]
 800d68c:	f7fd fedb 	bl	800b446 <memchr>
 800d690:	2800      	cmp	r0, #0
 800d692:	d03c      	beq.n	800d70e <_svfiprintf_r+0x1da>
 800d694:	4b25      	ldr	r3, [pc, #148]	; (800d72c <_svfiprintf_r+0x1f8>)
 800d696:	2b00      	cmp	r3, #0
 800d698:	d125      	bne.n	800d6e6 <_svfiprintf_r+0x1b2>
 800d69a:	2207      	movs	r2, #7
 800d69c:	9b07      	ldr	r3, [sp, #28]
 800d69e:	3307      	adds	r3, #7
 800d6a0:	4393      	bics	r3, r2
 800d6a2:	3308      	adds	r3, #8
 800d6a4:	9307      	str	r3, [sp, #28]
 800d6a6:	6963      	ldr	r3, [r4, #20]
 800d6a8:	9a04      	ldr	r2, [sp, #16]
 800d6aa:	189b      	adds	r3, r3, r2
 800d6ac:	6163      	str	r3, [r4, #20]
 800d6ae:	e764      	b.n	800d57a <_svfiprintf_r+0x46>
 800d6b0:	4343      	muls	r3, r0
 800d6b2:	0035      	movs	r5, r6
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	189b      	adds	r3, r3, r2
 800d6b8:	e7a6      	b.n	800d608 <_svfiprintf_r+0xd4>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	425b      	negs	r3, r3
 800d6be:	e7d0      	b.n	800d662 <_svfiprintf_r+0x12e>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	200a      	movs	r0, #10
 800d6c4:	001a      	movs	r2, r3
 800d6c6:	3501      	adds	r5, #1
 800d6c8:	6063      	str	r3, [r4, #4]
 800d6ca:	7829      	ldrb	r1, [r5, #0]
 800d6cc:	1c6e      	adds	r6, r5, #1
 800d6ce:	3930      	subs	r1, #48	; 0x30
 800d6d0:	2909      	cmp	r1, #9
 800d6d2:	d903      	bls.n	800d6dc <_svfiprintf_r+0x1a8>
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d0c5      	beq.n	800d664 <_svfiprintf_r+0x130>
 800d6d8:	9209      	str	r2, [sp, #36]	; 0x24
 800d6da:	e7c3      	b.n	800d664 <_svfiprintf_r+0x130>
 800d6dc:	4342      	muls	r2, r0
 800d6de:	0035      	movs	r5, r6
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	1852      	adds	r2, r2, r1
 800d6e4:	e7f1      	b.n	800d6ca <_svfiprintf_r+0x196>
 800d6e6:	aa07      	add	r2, sp, #28
 800d6e8:	9200      	str	r2, [sp, #0]
 800d6ea:	0021      	movs	r1, r4
 800d6ec:	003a      	movs	r2, r7
 800d6ee:	4b10      	ldr	r3, [pc, #64]	; (800d730 <_svfiprintf_r+0x1fc>)
 800d6f0:	9803      	ldr	r0, [sp, #12]
 800d6f2:	f7fc ff7b 	bl	800a5ec <_printf_float>
 800d6f6:	9004      	str	r0, [sp, #16]
 800d6f8:	9b04      	ldr	r3, [sp, #16]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	d1d3      	bne.n	800d6a6 <_svfiprintf_r+0x172>
 800d6fe:	89bb      	ldrh	r3, [r7, #12]
 800d700:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d702:	065b      	lsls	r3, r3, #25
 800d704:	d400      	bmi.n	800d708 <_svfiprintf_r+0x1d4>
 800d706:	e72c      	b.n	800d562 <_svfiprintf_r+0x2e>
 800d708:	2001      	movs	r0, #1
 800d70a:	4240      	negs	r0, r0
 800d70c:	e729      	b.n	800d562 <_svfiprintf_r+0x2e>
 800d70e:	aa07      	add	r2, sp, #28
 800d710:	9200      	str	r2, [sp, #0]
 800d712:	0021      	movs	r1, r4
 800d714:	003a      	movs	r2, r7
 800d716:	4b06      	ldr	r3, [pc, #24]	; (800d730 <_svfiprintf_r+0x1fc>)
 800d718:	9803      	ldr	r0, [sp, #12]
 800d71a:	f7fd fa2d 	bl	800ab78 <_printf_i>
 800d71e:	e7ea      	b.n	800d6f6 <_svfiprintf_r+0x1c2>
 800d720:	0800e5a5 	.word	0x0800e5a5
 800d724:	0800e5ab 	.word	0x0800e5ab
 800d728:	0800e5af 	.word	0x0800e5af
 800d72c:	0800a5ed 	.word	0x0800a5ed
 800d730:	0800d471 	.word	0x0800d471

0800d734 <__sfputc_r>:
 800d734:	6893      	ldr	r3, [r2, #8]
 800d736:	b510      	push	{r4, lr}
 800d738:	3b01      	subs	r3, #1
 800d73a:	6093      	str	r3, [r2, #8]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	da04      	bge.n	800d74a <__sfputc_r+0x16>
 800d740:	6994      	ldr	r4, [r2, #24]
 800d742:	42a3      	cmp	r3, r4
 800d744:	db07      	blt.n	800d756 <__sfputc_r+0x22>
 800d746:	290a      	cmp	r1, #10
 800d748:	d005      	beq.n	800d756 <__sfputc_r+0x22>
 800d74a:	6813      	ldr	r3, [r2, #0]
 800d74c:	1c58      	adds	r0, r3, #1
 800d74e:	6010      	str	r0, [r2, #0]
 800d750:	7019      	strb	r1, [r3, #0]
 800d752:	0008      	movs	r0, r1
 800d754:	bd10      	pop	{r4, pc}
 800d756:	f7fd fcd3 	bl	800b100 <__swbuf_r>
 800d75a:	0001      	movs	r1, r0
 800d75c:	e7f9      	b.n	800d752 <__sfputc_r+0x1e>

0800d75e <__sfputs_r>:
 800d75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d760:	0006      	movs	r6, r0
 800d762:	000f      	movs	r7, r1
 800d764:	0014      	movs	r4, r2
 800d766:	18d5      	adds	r5, r2, r3
 800d768:	42ac      	cmp	r4, r5
 800d76a:	d101      	bne.n	800d770 <__sfputs_r+0x12>
 800d76c:	2000      	movs	r0, #0
 800d76e:	e007      	b.n	800d780 <__sfputs_r+0x22>
 800d770:	7821      	ldrb	r1, [r4, #0]
 800d772:	003a      	movs	r2, r7
 800d774:	0030      	movs	r0, r6
 800d776:	f7ff ffdd 	bl	800d734 <__sfputc_r>
 800d77a:	3401      	adds	r4, #1
 800d77c:	1c43      	adds	r3, r0, #1
 800d77e:	d1f3      	bne.n	800d768 <__sfputs_r+0xa>
 800d780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d784 <_vfiprintf_r>:
 800d784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d786:	b0a1      	sub	sp, #132	; 0x84
 800d788:	000f      	movs	r7, r1
 800d78a:	0015      	movs	r5, r2
 800d78c:	001e      	movs	r6, r3
 800d78e:	9003      	str	r0, [sp, #12]
 800d790:	2800      	cmp	r0, #0
 800d792:	d004      	beq.n	800d79e <_vfiprintf_r+0x1a>
 800d794:	6a03      	ldr	r3, [r0, #32]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d101      	bne.n	800d79e <_vfiprintf_r+0x1a>
 800d79a:	f7fd fb8d 	bl	800aeb8 <__sinit>
 800d79e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7a0:	07db      	lsls	r3, r3, #31
 800d7a2:	d405      	bmi.n	800d7b0 <_vfiprintf_r+0x2c>
 800d7a4:	89bb      	ldrh	r3, [r7, #12]
 800d7a6:	059b      	lsls	r3, r3, #22
 800d7a8:	d402      	bmi.n	800d7b0 <_vfiprintf_r+0x2c>
 800d7aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d7ac:	f7fd fe49 	bl	800b442 <__retarget_lock_acquire_recursive>
 800d7b0:	89bb      	ldrh	r3, [r7, #12]
 800d7b2:	071b      	lsls	r3, r3, #28
 800d7b4:	d502      	bpl.n	800d7bc <_vfiprintf_r+0x38>
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d113      	bne.n	800d7e4 <_vfiprintf_r+0x60>
 800d7bc:	0039      	movs	r1, r7
 800d7be:	9803      	ldr	r0, [sp, #12]
 800d7c0:	f7fd fce0 	bl	800b184 <__swsetup_r>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d00d      	beq.n	800d7e4 <_vfiprintf_r+0x60>
 800d7c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7ca:	07db      	lsls	r3, r3, #31
 800d7cc:	d503      	bpl.n	800d7d6 <_vfiprintf_r+0x52>
 800d7ce:	2001      	movs	r0, #1
 800d7d0:	4240      	negs	r0, r0
 800d7d2:	b021      	add	sp, #132	; 0x84
 800d7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7d6:	89bb      	ldrh	r3, [r7, #12]
 800d7d8:	059b      	lsls	r3, r3, #22
 800d7da:	d4f8      	bmi.n	800d7ce <_vfiprintf_r+0x4a>
 800d7dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d7de:	f7fd fe31 	bl	800b444 <__retarget_lock_release_recursive>
 800d7e2:	e7f4      	b.n	800d7ce <_vfiprintf_r+0x4a>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	ac08      	add	r4, sp, #32
 800d7e8:	6163      	str	r3, [r4, #20]
 800d7ea:	3320      	adds	r3, #32
 800d7ec:	7663      	strb	r3, [r4, #25]
 800d7ee:	3310      	adds	r3, #16
 800d7f0:	76a3      	strb	r3, [r4, #26]
 800d7f2:	9607      	str	r6, [sp, #28]
 800d7f4:	002e      	movs	r6, r5
 800d7f6:	7833      	ldrb	r3, [r6, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <_vfiprintf_r+0x7c>
 800d7fc:	2b25      	cmp	r3, #37	; 0x25
 800d7fe:	d148      	bne.n	800d892 <_vfiprintf_r+0x10e>
 800d800:	1b73      	subs	r3, r6, r5
 800d802:	9305      	str	r3, [sp, #20]
 800d804:	42ae      	cmp	r6, r5
 800d806:	d00b      	beq.n	800d820 <_vfiprintf_r+0x9c>
 800d808:	002a      	movs	r2, r5
 800d80a:	0039      	movs	r1, r7
 800d80c:	9803      	ldr	r0, [sp, #12]
 800d80e:	f7ff ffa6 	bl	800d75e <__sfputs_r>
 800d812:	3001      	adds	r0, #1
 800d814:	d100      	bne.n	800d818 <_vfiprintf_r+0x94>
 800d816:	e0af      	b.n	800d978 <_vfiprintf_r+0x1f4>
 800d818:	6963      	ldr	r3, [r4, #20]
 800d81a:	9a05      	ldr	r2, [sp, #20]
 800d81c:	189b      	adds	r3, r3, r2
 800d81e:	6163      	str	r3, [r4, #20]
 800d820:	7833      	ldrb	r3, [r6, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d100      	bne.n	800d828 <_vfiprintf_r+0xa4>
 800d826:	e0a7      	b.n	800d978 <_vfiprintf_r+0x1f4>
 800d828:	2201      	movs	r2, #1
 800d82a:	2300      	movs	r3, #0
 800d82c:	4252      	negs	r2, r2
 800d82e:	6062      	str	r2, [r4, #4]
 800d830:	a904      	add	r1, sp, #16
 800d832:	3254      	adds	r2, #84	; 0x54
 800d834:	1852      	adds	r2, r2, r1
 800d836:	1c75      	adds	r5, r6, #1
 800d838:	6023      	str	r3, [r4, #0]
 800d83a:	60e3      	str	r3, [r4, #12]
 800d83c:	60a3      	str	r3, [r4, #8]
 800d83e:	7013      	strb	r3, [r2, #0]
 800d840:	65a3      	str	r3, [r4, #88]	; 0x58
 800d842:	4b59      	ldr	r3, [pc, #356]	; (800d9a8 <_vfiprintf_r+0x224>)
 800d844:	2205      	movs	r2, #5
 800d846:	0018      	movs	r0, r3
 800d848:	7829      	ldrb	r1, [r5, #0]
 800d84a:	9305      	str	r3, [sp, #20]
 800d84c:	f7fd fdfb 	bl	800b446 <memchr>
 800d850:	1c6e      	adds	r6, r5, #1
 800d852:	2800      	cmp	r0, #0
 800d854:	d11f      	bne.n	800d896 <_vfiprintf_r+0x112>
 800d856:	6822      	ldr	r2, [r4, #0]
 800d858:	06d3      	lsls	r3, r2, #27
 800d85a:	d504      	bpl.n	800d866 <_vfiprintf_r+0xe2>
 800d85c:	2353      	movs	r3, #83	; 0x53
 800d85e:	a904      	add	r1, sp, #16
 800d860:	185b      	adds	r3, r3, r1
 800d862:	2120      	movs	r1, #32
 800d864:	7019      	strb	r1, [r3, #0]
 800d866:	0713      	lsls	r3, r2, #28
 800d868:	d504      	bpl.n	800d874 <_vfiprintf_r+0xf0>
 800d86a:	2353      	movs	r3, #83	; 0x53
 800d86c:	a904      	add	r1, sp, #16
 800d86e:	185b      	adds	r3, r3, r1
 800d870:	212b      	movs	r1, #43	; 0x2b
 800d872:	7019      	strb	r1, [r3, #0]
 800d874:	782b      	ldrb	r3, [r5, #0]
 800d876:	2b2a      	cmp	r3, #42	; 0x2a
 800d878:	d016      	beq.n	800d8a8 <_vfiprintf_r+0x124>
 800d87a:	002e      	movs	r6, r5
 800d87c:	2100      	movs	r1, #0
 800d87e:	200a      	movs	r0, #10
 800d880:	68e3      	ldr	r3, [r4, #12]
 800d882:	7832      	ldrb	r2, [r6, #0]
 800d884:	1c75      	adds	r5, r6, #1
 800d886:	3a30      	subs	r2, #48	; 0x30
 800d888:	2a09      	cmp	r2, #9
 800d88a:	d94e      	bls.n	800d92a <_vfiprintf_r+0x1a6>
 800d88c:	2900      	cmp	r1, #0
 800d88e:	d111      	bne.n	800d8b4 <_vfiprintf_r+0x130>
 800d890:	e017      	b.n	800d8c2 <_vfiprintf_r+0x13e>
 800d892:	3601      	adds	r6, #1
 800d894:	e7af      	b.n	800d7f6 <_vfiprintf_r+0x72>
 800d896:	9b05      	ldr	r3, [sp, #20]
 800d898:	6822      	ldr	r2, [r4, #0]
 800d89a:	1ac0      	subs	r0, r0, r3
 800d89c:	2301      	movs	r3, #1
 800d89e:	4083      	lsls	r3, r0
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	0035      	movs	r5, r6
 800d8a4:	6023      	str	r3, [r4, #0]
 800d8a6:	e7cc      	b.n	800d842 <_vfiprintf_r+0xbe>
 800d8a8:	9b07      	ldr	r3, [sp, #28]
 800d8aa:	1d19      	adds	r1, r3, #4
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	9107      	str	r1, [sp, #28]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	db01      	blt.n	800d8b8 <_vfiprintf_r+0x134>
 800d8b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8b6:	e004      	b.n	800d8c2 <_vfiprintf_r+0x13e>
 800d8b8:	425b      	negs	r3, r3
 800d8ba:	60e3      	str	r3, [r4, #12]
 800d8bc:	2302      	movs	r3, #2
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	6023      	str	r3, [r4, #0]
 800d8c2:	7833      	ldrb	r3, [r6, #0]
 800d8c4:	2b2e      	cmp	r3, #46	; 0x2e
 800d8c6:	d10a      	bne.n	800d8de <_vfiprintf_r+0x15a>
 800d8c8:	7873      	ldrb	r3, [r6, #1]
 800d8ca:	2b2a      	cmp	r3, #42	; 0x2a
 800d8cc:	d135      	bne.n	800d93a <_vfiprintf_r+0x1b6>
 800d8ce:	9b07      	ldr	r3, [sp, #28]
 800d8d0:	3602      	adds	r6, #2
 800d8d2:	1d1a      	adds	r2, r3, #4
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	9207      	str	r2, [sp, #28]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	db2b      	blt.n	800d934 <_vfiprintf_r+0x1b0>
 800d8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d8de:	4d33      	ldr	r5, [pc, #204]	; (800d9ac <_vfiprintf_r+0x228>)
 800d8e0:	2203      	movs	r2, #3
 800d8e2:	0028      	movs	r0, r5
 800d8e4:	7831      	ldrb	r1, [r6, #0]
 800d8e6:	f7fd fdae 	bl	800b446 <memchr>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d006      	beq.n	800d8fc <_vfiprintf_r+0x178>
 800d8ee:	2340      	movs	r3, #64	; 0x40
 800d8f0:	1b40      	subs	r0, r0, r5
 800d8f2:	4083      	lsls	r3, r0
 800d8f4:	6822      	ldr	r2, [r4, #0]
 800d8f6:	3601      	adds	r6, #1
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	6023      	str	r3, [r4, #0]
 800d8fc:	7831      	ldrb	r1, [r6, #0]
 800d8fe:	2206      	movs	r2, #6
 800d900:	482b      	ldr	r0, [pc, #172]	; (800d9b0 <_vfiprintf_r+0x22c>)
 800d902:	1c75      	adds	r5, r6, #1
 800d904:	7621      	strb	r1, [r4, #24]
 800d906:	f7fd fd9e 	bl	800b446 <memchr>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d043      	beq.n	800d996 <_vfiprintf_r+0x212>
 800d90e:	4b29      	ldr	r3, [pc, #164]	; (800d9b4 <_vfiprintf_r+0x230>)
 800d910:	2b00      	cmp	r3, #0
 800d912:	d125      	bne.n	800d960 <_vfiprintf_r+0x1dc>
 800d914:	2207      	movs	r2, #7
 800d916:	9b07      	ldr	r3, [sp, #28]
 800d918:	3307      	adds	r3, #7
 800d91a:	4393      	bics	r3, r2
 800d91c:	3308      	adds	r3, #8
 800d91e:	9307      	str	r3, [sp, #28]
 800d920:	6963      	ldr	r3, [r4, #20]
 800d922:	9a04      	ldr	r2, [sp, #16]
 800d924:	189b      	adds	r3, r3, r2
 800d926:	6163      	str	r3, [r4, #20]
 800d928:	e764      	b.n	800d7f4 <_vfiprintf_r+0x70>
 800d92a:	4343      	muls	r3, r0
 800d92c:	002e      	movs	r6, r5
 800d92e:	2101      	movs	r1, #1
 800d930:	189b      	adds	r3, r3, r2
 800d932:	e7a6      	b.n	800d882 <_vfiprintf_r+0xfe>
 800d934:	2301      	movs	r3, #1
 800d936:	425b      	negs	r3, r3
 800d938:	e7d0      	b.n	800d8dc <_vfiprintf_r+0x158>
 800d93a:	2300      	movs	r3, #0
 800d93c:	200a      	movs	r0, #10
 800d93e:	001a      	movs	r2, r3
 800d940:	3601      	adds	r6, #1
 800d942:	6063      	str	r3, [r4, #4]
 800d944:	7831      	ldrb	r1, [r6, #0]
 800d946:	1c75      	adds	r5, r6, #1
 800d948:	3930      	subs	r1, #48	; 0x30
 800d94a:	2909      	cmp	r1, #9
 800d94c:	d903      	bls.n	800d956 <_vfiprintf_r+0x1d2>
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d0c5      	beq.n	800d8de <_vfiprintf_r+0x15a>
 800d952:	9209      	str	r2, [sp, #36]	; 0x24
 800d954:	e7c3      	b.n	800d8de <_vfiprintf_r+0x15a>
 800d956:	4342      	muls	r2, r0
 800d958:	002e      	movs	r6, r5
 800d95a:	2301      	movs	r3, #1
 800d95c:	1852      	adds	r2, r2, r1
 800d95e:	e7f1      	b.n	800d944 <_vfiprintf_r+0x1c0>
 800d960:	aa07      	add	r2, sp, #28
 800d962:	9200      	str	r2, [sp, #0]
 800d964:	0021      	movs	r1, r4
 800d966:	003a      	movs	r2, r7
 800d968:	4b13      	ldr	r3, [pc, #76]	; (800d9b8 <_vfiprintf_r+0x234>)
 800d96a:	9803      	ldr	r0, [sp, #12]
 800d96c:	f7fc fe3e 	bl	800a5ec <_printf_float>
 800d970:	9004      	str	r0, [sp, #16]
 800d972:	9b04      	ldr	r3, [sp, #16]
 800d974:	3301      	adds	r3, #1
 800d976:	d1d3      	bne.n	800d920 <_vfiprintf_r+0x19c>
 800d978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d97a:	07db      	lsls	r3, r3, #31
 800d97c:	d405      	bmi.n	800d98a <_vfiprintf_r+0x206>
 800d97e:	89bb      	ldrh	r3, [r7, #12]
 800d980:	059b      	lsls	r3, r3, #22
 800d982:	d402      	bmi.n	800d98a <_vfiprintf_r+0x206>
 800d984:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d986:	f7fd fd5d 	bl	800b444 <__retarget_lock_release_recursive>
 800d98a:	89bb      	ldrh	r3, [r7, #12]
 800d98c:	065b      	lsls	r3, r3, #25
 800d98e:	d500      	bpl.n	800d992 <_vfiprintf_r+0x20e>
 800d990:	e71d      	b.n	800d7ce <_vfiprintf_r+0x4a>
 800d992:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d994:	e71d      	b.n	800d7d2 <_vfiprintf_r+0x4e>
 800d996:	aa07      	add	r2, sp, #28
 800d998:	9200      	str	r2, [sp, #0]
 800d99a:	0021      	movs	r1, r4
 800d99c:	003a      	movs	r2, r7
 800d99e:	4b06      	ldr	r3, [pc, #24]	; (800d9b8 <_vfiprintf_r+0x234>)
 800d9a0:	9803      	ldr	r0, [sp, #12]
 800d9a2:	f7fd f8e9 	bl	800ab78 <_printf_i>
 800d9a6:	e7e3      	b.n	800d970 <_vfiprintf_r+0x1ec>
 800d9a8:	0800e5a5 	.word	0x0800e5a5
 800d9ac:	0800e5ab 	.word	0x0800e5ab
 800d9b0:	0800e5af 	.word	0x0800e5af
 800d9b4:	0800a5ed 	.word	0x0800a5ed
 800d9b8:	0800d75f 	.word	0x0800d75f

0800d9bc <__sflush_r>:
 800d9bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9be:	898b      	ldrh	r3, [r1, #12]
 800d9c0:	0005      	movs	r5, r0
 800d9c2:	000c      	movs	r4, r1
 800d9c4:	071a      	lsls	r2, r3, #28
 800d9c6:	d45c      	bmi.n	800da82 <__sflush_r+0xc6>
 800d9c8:	684a      	ldr	r2, [r1, #4]
 800d9ca:	2a00      	cmp	r2, #0
 800d9cc:	dc04      	bgt.n	800d9d8 <__sflush_r+0x1c>
 800d9ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d9d0:	2a00      	cmp	r2, #0
 800d9d2:	dc01      	bgt.n	800d9d8 <__sflush_r+0x1c>
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d9d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d9da:	2f00      	cmp	r7, #0
 800d9dc:	d0fa      	beq.n	800d9d4 <__sflush_r+0x18>
 800d9de:	2200      	movs	r2, #0
 800d9e0:	2080      	movs	r0, #128	; 0x80
 800d9e2:	682e      	ldr	r6, [r5, #0]
 800d9e4:	602a      	str	r2, [r5, #0]
 800d9e6:	001a      	movs	r2, r3
 800d9e8:	0140      	lsls	r0, r0, #5
 800d9ea:	6a21      	ldr	r1, [r4, #32]
 800d9ec:	4002      	ands	r2, r0
 800d9ee:	4203      	tst	r3, r0
 800d9f0:	d034      	beq.n	800da5c <__sflush_r+0xa0>
 800d9f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d9f4:	89a3      	ldrh	r3, [r4, #12]
 800d9f6:	075b      	lsls	r3, r3, #29
 800d9f8:	d506      	bpl.n	800da08 <__sflush_r+0x4c>
 800d9fa:	6863      	ldr	r3, [r4, #4]
 800d9fc:	1ac0      	subs	r0, r0, r3
 800d9fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da00:	2b00      	cmp	r3, #0
 800da02:	d001      	beq.n	800da08 <__sflush_r+0x4c>
 800da04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da06:	1ac0      	subs	r0, r0, r3
 800da08:	0002      	movs	r2, r0
 800da0a:	2300      	movs	r3, #0
 800da0c:	0028      	movs	r0, r5
 800da0e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800da10:	6a21      	ldr	r1, [r4, #32]
 800da12:	47b8      	blx	r7
 800da14:	89a2      	ldrh	r2, [r4, #12]
 800da16:	1c43      	adds	r3, r0, #1
 800da18:	d106      	bne.n	800da28 <__sflush_r+0x6c>
 800da1a:	6829      	ldr	r1, [r5, #0]
 800da1c:	291d      	cmp	r1, #29
 800da1e:	d82c      	bhi.n	800da7a <__sflush_r+0xbe>
 800da20:	4b2a      	ldr	r3, [pc, #168]	; (800dacc <__sflush_r+0x110>)
 800da22:	410b      	asrs	r3, r1
 800da24:	07db      	lsls	r3, r3, #31
 800da26:	d428      	bmi.n	800da7a <__sflush_r+0xbe>
 800da28:	2300      	movs	r3, #0
 800da2a:	6063      	str	r3, [r4, #4]
 800da2c:	6923      	ldr	r3, [r4, #16]
 800da2e:	6023      	str	r3, [r4, #0]
 800da30:	04d2      	lsls	r2, r2, #19
 800da32:	d505      	bpl.n	800da40 <__sflush_r+0x84>
 800da34:	1c43      	adds	r3, r0, #1
 800da36:	d102      	bne.n	800da3e <__sflush_r+0x82>
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d100      	bne.n	800da40 <__sflush_r+0x84>
 800da3e:	6560      	str	r0, [r4, #84]	; 0x54
 800da40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da42:	602e      	str	r6, [r5, #0]
 800da44:	2900      	cmp	r1, #0
 800da46:	d0c5      	beq.n	800d9d4 <__sflush_r+0x18>
 800da48:	0023      	movs	r3, r4
 800da4a:	3344      	adds	r3, #68	; 0x44
 800da4c:	4299      	cmp	r1, r3
 800da4e:	d002      	beq.n	800da56 <__sflush_r+0x9a>
 800da50:	0028      	movs	r0, r5
 800da52:	f7fe fbcf 	bl	800c1f4 <_free_r>
 800da56:	2000      	movs	r0, #0
 800da58:	6360      	str	r0, [r4, #52]	; 0x34
 800da5a:	e7bc      	b.n	800d9d6 <__sflush_r+0x1a>
 800da5c:	2301      	movs	r3, #1
 800da5e:	0028      	movs	r0, r5
 800da60:	47b8      	blx	r7
 800da62:	1c43      	adds	r3, r0, #1
 800da64:	d1c6      	bne.n	800d9f4 <__sflush_r+0x38>
 800da66:	682b      	ldr	r3, [r5, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0c3      	beq.n	800d9f4 <__sflush_r+0x38>
 800da6c:	2b1d      	cmp	r3, #29
 800da6e:	d001      	beq.n	800da74 <__sflush_r+0xb8>
 800da70:	2b16      	cmp	r3, #22
 800da72:	d101      	bne.n	800da78 <__sflush_r+0xbc>
 800da74:	602e      	str	r6, [r5, #0]
 800da76:	e7ad      	b.n	800d9d4 <__sflush_r+0x18>
 800da78:	89a2      	ldrh	r2, [r4, #12]
 800da7a:	2340      	movs	r3, #64	; 0x40
 800da7c:	4313      	orrs	r3, r2
 800da7e:	81a3      	strh	r3, [r4, #12]
 800da80:	e7a9      	b.n	800d9d6 <__sflush_r+0x1a>
 800da82:	690e      	ldr	r6, [r1, #16]
 800da84:	2e00      	cmp	r6, #0
 800da86:	d0a5      	beq.n	800d9d4 <__sflush_r+0x18>
 800da88:	680f      	ldr	r7, [r1, #0]
 800da8a:	600e      	str	r6, [r1, #0]
 800da8c:	1bba      	subs	r2, r7, r6
 800da8e:	9201      	str	r2, [sp, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	079b      	lsls	r3, r3, #30
 800da94:	d100      	bne.n	800da98 <__sflush_r+0xdc>
 800da96:	694a      	ldr	r2, [r1, #20]
 800da98:	60a2      	str	r2, [r4, #8]
 800da9a:	9b01      	ldr	r3, [sp, #4]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dd99      	ble.n	800d9d4 <__sflush_r+0x18>
 800daa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800daa2:	0032      	movs	r2, r6
 800daa4:	001f      	movs	r7, r3
 800daa6:	0028      	movs	r0, r5
 800daa8:	9b01      	ldr	r3, [sp, #4]
 800daaa:	6a21      	ldr	r1, [r4, #32]
 800daac:	47b8      	blx	r7
 800daae:	2800      	cmp	r0, #0
 800dab0:	dc06      	bgt.n	800dac0 <__sflush_r+0x104>
 800dab2:	2340      	movs	r3, #64	; 0x40
 800dab4:	2001      	movs	r0, #1
 800dab6:	89a2      	ldrh	r2, [r4, #12]
 800dab8:	4240      	negs	r0, r0
 800daba:	4313      	orrs	r3, r2
 800dabc:	81a3      	strh	r3, [r4, #12]
 800dabe:	e78a      	b.n	800d9d6 <__sflush_r+0x1a>
 800dac0:	9b01      	ldr	r3, [sp, #4]
 800dac2:	1836      	adds	r6, r6, r0
 800dac4:	1a1b      	subs	r3, r3, r0
 800dac6:	9301      	str	r3, [sp, #4]
 800dac8:	e7e7      	b.n	800da9a <__sflush_r+0xde>
 800daca:	46c0      	nop			; (mov r8, r8)
 800dacc:	dfbffffe 	.word	0xdfbffffe

0800dad0 <_fflush_r>:
 800dad0:	690b      	ldr	r3, [r1, #16]
 800dad2:	b570      	push	{r4, r5, r6, lr}
 800dad4:	0005      	movs	r5, r0
 800dad6:	000c      	movs	r4, r1
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d102      	bne.n	800dae2 <_fflush_r+0x12>
 800dadc:	2500      	movs	r5, #0
 800dade:	0028      	movs	r0, r5
 800dae0:	bd70      	pop	{r4, r5, r6, pc}
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d004      	beq.n	800daf0 <_fflush_r+0x20>
 800dae6:	6a03      	ldr	r3, [r0, #32]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d101      	bne.n	800daf0 <_fflush_r+0x20>
 800daec:	f7fd f9e4 	bl	800aeb8 <__sinit>
 800daf0:	220c      	movs	r2, #12
 800daf2:	5ea3      	ldrsh	r3, [r4, r2]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d0f1      	beq.n	800dadc <_fflush_r+0xc>
 800daf8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dafa:	07d2      	lsls	r2, r2, #31
 800dafc:	d404      	bmi.n	800db08 <_fflush_r+0x38>
 800dafe:	059b      	lsls	r3, r3, #22
 800db00:	d402      	bmi.n	800db08 <_fflush_r+0x38>
 800db02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db04:	f7fd fc9d 	bl	800b442 <__retarget_lock_acquire_recursive>
 800db08:	0028      	movs	r0, r5
 800db0a:	0021      	movs	r1, r4
 800db0c:	f7ff ff56 	bl	800d9bc <__sflush_r>
 800db10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db12:	0005      	movs	r5, r0
 800db14:	07db      	lsls	r3, r3, #31
 800db16:	d4e2      	bmi.n	800dade <_fflush_r+0xe>
 800db18:	89a3      	ldrh	r3, [r4, #12]
 800db1a:	059b      	lsls	r3, r3, #22
 800db1c:	d4df      	bmi.n	800dade <_fflush_r+0xe>
 800db1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db20:	f7fd fc90 	bl	800b444 <__retarget_lock_release_recursive>
 800db24:	e7db      	b.n	800dade <_fflush_r+0xe>
	...

0800db28 <fiprintf>:
 800db28:	b40e      	push	{r1, r2, r3}
 800db2a:	b517      	push	{r0, r1, r2, r4, lr}
 800db2c:	4c05      	ldr	r4, [pc, #20]	; (800db44 <fiprintf+0x1c>)
 800db2e:	ab05      	add	r3, sp, #20
 800db30:	cb04      	ldmia	r3!, {r2}
 800db32:	0001      	movs	r1, r0
 800db34:	6820      	ldr	r0, [r4, #0]
 800db36:	9301      	str	r3, [sp, #4]
 800db38:	f7ff fe24 	bl	800d784 <_vfiprintf_r>
 800db3c:	bc1e      	pop	{r1, r2, r3, r4}
 800db3e:	bc08      	pop	{r3}
 800db40:	b003      	add	sp, #12
 800db42:	4718      	bx	r3
 800db44:	2000024c 	.word	0x2000024c

0800db48 <__swhatbuf_r>:
 800db48:	b570      	push	{r4, r5, r6, lr}
 800db4a:	000e      	movs	r6, r1
 800db4c:	001d      	movs	r5, r3
 800db4e:	230e      	movs	r3, #14
 800db50:	5ec9      	ldrsh	r1, [r1, r3]
 800db52:	0014      	movs	r4, r2
 800db54:	b096      	sub	sp, #88	; 0x58
 800db56:	2900      	cmp	r1, #0
 800db58:	da0c      	bge.n	800db74 <__swhatbuf_r+0x2c>
 800db5a:	89b2      	ldrh	r2, [r6, #12]
 800db5c:	2380      	movs	r3, #128	; 0x80
 800db5e:	0011      	movs	r1, r2
 800db60:	4019      	ands	r1, r3
 800db62:	421a      	tst	r2, r3
 800db64:	d013      	beq.n	800db8e <__swhatbuf_r+0x46>
 800db66:	2100      	movs	r1, #0
 800db68:	3b40      	subs	r3, #64	; 0x40
 800db6a:	2000      	movs	r0, #0
 800db6c:	6029      	str	r1, [r5, #0]
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	b016      	add	sp, #88	; 0x58
 800db72:	bd70      	pop	{r4, r5, r6, pc}
 800db74:	466a      	mov	r2, sp
 800db76:	f000 f861 	bl	800dc3c <_fstat_r>
 800db7a:	2800      	cmp	r0, #0
 800db7c:	dbed      	blt.n	800db5a <__swhatbuf_r+0x12>
 800db7e:	23f0      	movs	r3, #240	; 0xf0
 800db80:	9901      	ldr	r1, [sp, #4]
 800db82:	021b      	lsls	r3, r3, #8
 800db84:	4019      	ands	r1, r3
 800db86:	4b03      	ldr	r3, [pc, #12]	; (800db94 <__swhatbuf_r+0x4c>)
 800db88:	18c9      	adds	r1, r1, r3
 800db8a:	424b      	negs	r3, r1
 800db8c:	4159      	adcs	r1, r3
 800db8e:	2380      	movs	r3, #128	; 0x80
 800db90:	00db      	lsls	r3, r3, #3
 800db92:	e7ea      	b.n	800db6a <__swhatbuf_r+0x22>
 800db94:	ffffe000 	.word	0xffffe000

0800db98 <__smakebuf_r>:
 800db98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db9a:	2602      	movs	r6, #2
 800db9c:	898b      	ldrh	r3, [r1, #12]
 800db9e:	0005      	movs	r5, r0
 800dba0:	000c      	movs	r4, r1
 800dba2:	4233      	tst	r3, r6
 800dba4:	d006      	beq.n	800dbb4 <__smakebuf_r+0x1c>
 800dba6:	0023      	movs	r3, r4
 800dba8:	3347      	adds	r3, #71	; 0x47
 800dbaa:	6023      	str	r3, [r4, #0]
 800dbac:	6123      	str	r3, [r4, #16]
 800dbae:	2301      	movs	r3, #1
 800dbb0:	6163      	str	r3, [r4, #20]
 800dbb2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dbb4:	466a      	mov	r2, sp
 800dbb6:	ab01      	add	r3, sp, #4
 800dbb8:	f7ff ffc6 	bl	800db48 <__swhatbuf_r>
 800dbbc:	9900      	ldr	r1, [sp, #0]
 800dbbe:	0007      	movs	r7, r0
 800dbc0:	0028      	movs	r0, r5
 800dbc2:	f7fe fee9 	bl	800c998 <_malloc_r>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d108      	bne.n	800dbdc <__smakebuf_r+0x44>
 800dbca:	220c      	movs	r2, #12
 800dbcc:	5ea3      	ldrsh	r3, [r4, r2]
 800dbce:	059a      	lsls	r2, r3, #22
 800dbd0:	d4ef      	bmi.n	800dbb2 <__smakebuf_r+0x1a>
 800dbd2:	2203      	movs	r2, #3
 800dbd4:	4393      	bics	r3, r2
 800dbd6:	431e      	orrs	r6, r3
 800dbd8:	81a6      	strh	r6, [r4, #12]
 800dbda:	e7e4      	b.n	800dba6 <__smakebuf_r+0xe>
 800dbdc:	2380      	movs	r3, #128	; 0x80
 800dbde:	89a2      	ldrh	r2, [r4, #12]
 800dbe0:	6020      	str	r0, [r4, #0]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	81a3      	strh	r3, [r4, #12]
 800dbe6:	9b00      	ldr	r3, [sp, #0]
 800dbe8:	6120      	str	r0, [r4, #16]
 800dbea:	6163      	str	r3, [r4, #20]
 800dbec:	9b01      	ldr	r3, [sp, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00c      	beq.n	800dc0c <__smakebuf_r+0x74>
 800dbf2:	0028      	movs	r0, r5
 800dbf4:	230e      	movs	r3, #14
 800dbf6:	5ee1      	ldrsh	r1, [r4, r3]
 800dbf8:	f000 f832 	bl	800dc60 <_isatty_r>
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d005      	beq.n	800dc0c <__smakebuf_r+0x74>
 800dc00:	2303      	movs	r3, #3
 800dc02:	89a2      	ldrh	r2, [r4, #12]
 800dc04:	439a      	bics	r2, r3
 800dc06:	3b02      	subs	r3, #2
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	81a3      	strh	r3, [r4, #12]
 800dc0c:	89a3      	ldrh	r3, [r4, #12]
 800dc0e:	433b      	orrs	r3, r7
 800dc10:	81a3      	strh	r3, [r4, #12]
 800dc12:	e7ce      	b.n	800dbb2 <__smakebuf_r+0x1a>

0800dc14 <memmove>:
 800dc14:	b510      	push	{r4, lr}
 800dc16:	4288      	cmp	r0, r1
 800dc18:	d902      	bls.n	800dc20 <memmove+0xc>
 800dc1a:	188b      	adds	r3, r1, r2
 800dc1c:	4298      	cmp	r0, r3
 800dc1e:	d303      	bcc.n	800dc28 <memmove+0x14>
 800dc20:	2300      	movs	r3, #0
 800dc22:	e007      	b.n	800dc34 <memmove+0x20>
 800dc24:	5c8b      	ldrb	r3, [r1, r2]
 800dc26:	5483      	strb	r3, [r0, r2]
 800dc28:	3a01      	subs	r2, #1
 800dc2a:	d2fb      	bcs.n	800dc24 <memmove+0x10>
 800dc2c:	bd10      	pop	{r4, pc}
 800dc2e:	5ccc      	ldrb	r4, [r1, r3]
 800dc30:	54c4      	strb	r4, [r0, r3]
 800dc32:	3301      	adds	r3, #1
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d1fa      	bne.n	800dc2e <memmove+0x1a>
 800dc38:	e7f8      	b.n	800dc2c <memmove+0x18>
	...

0800dc3c <_fstat_r>:
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	b570      	push	{r4, r5, r6, lr}
 800dc40:	4d06      	ldr	r5, [pc, #24]	; (800dc5c <_fstat_r+0x20>)
 800dc42:	0004      	movs	r4, r0
 800dc44:	0008      	movs	r0, r1
 800dc46:	0011      	movs	r1, r2
 800dc48:	602b      	str	r3, [r5, #0]
 800dc4a:	f7f5 fcb6 	bl	80035ba <_fstat>
 800dc4e:	1c43      	adds	r3, r0, #1
 800dc50:	d103      	bne.n	800dc5a <_fstat_r+0x1e>
 800dc52:	682b      	ldr	r3, [r5, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d000      	beq.n	800dc5a <_fstat_r+0x1e>
 800dc58:	6023      	str	r3, [r4, #0]
 800dc5a:	bd70      	pop	{r4, r5, r6, pc}
 800dc5c:	200007b4 	.word	0x200007b4

0800dc60 <_isatty_r>:
 800dc60:	2300      	movs	r3, #0
 800dc62:	b570      	push	{r4, r5, r6, lr}
 800dc64:	4d06      	ldr	r5, [pc, #24]	; (800dc80 <_isatty_r+0x20>)
 800dc66:	0004      	movs	r4, r0
 800dc68:	0008      	movs	r0, r1
 800dc6a:	602b      	str	r3, [r5, #0]
 800dc6c:	f7f5 fcb3 	bl	80035d6 <_isatty>
 800dc70:	1c43      	adds	r3, r0, #1
 800dc72:	d103      	bne.n	800dc7c <_isatty_r+0x1c>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d000      	beq.n	800dc7c <_isatty_r+0x1c>
 800dc7a:	6023      	str	r3, [r4, #0]
 800dc7c:	bd70      	pop	{r4, r5, r6, pc}
 800dc7e:	46c0      	nop			; (mov r8, r8)
 800dc80:	200007b4 	.word	0x200007b4

0800dc84 <_sbrk_r>:
 800dc84:	2300      	movs	r3, #0
 800dc86:	b570      	push	{r4, r5, r6, lr}
 800dc88:	4d06      	ldr	r5, [pc, #24]	; (800dca4 <_sbrk_r+0x20>)
 800dc8a:	0004      	movs	r4, r0
 800dc8c:	0008      	movs	r0, r1
 800dc8e:	602b      	str	r3, [r5, #0]
 800dc90:	f7f5 fcb6 	bl	8003600 <_sbrk>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d103      	bne.n	800dca0 <_sbrk_r+0x1c>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d000      	beq.n	800dca0 <_sbrk_r+0x1c>
 800dc9e:	6023      	str	r3, [r4, #0]
 800dca0:	bd70      	pop	{r4, r5, r6, pc}
 800dca2:	46c0      	nop			; (mov r8, r8)
 800dca4:	200007b4 	.word	0x200007b4

0800dca8 <abort>:
 800dca8:	2006      	movs	r0, #6
 800dcaa:	b510      	push	{r4, lr}
 800dcac:	f000 f88a 	bl	800ddc4 <raise>
 800dcb0:	2001      	movs	r0, #1
 800dcb2:	f7f5 fc33 	bl	800351c <_exit>

0800dcb6 <_calloc_r>:
 800dcb6:	b570      	push	{r4, r5, r6, lr}
 800dcb8:	0c0b      	lsrs	r3, r1, #16
 800dcba:	0c15      	lsrs	r5, r2, #16
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d11e      	bne.n	800dcfe <_calloc_r+0x48>
 800dcc0:	2d00      	cmp	r5, #0
 800dcc2:	d10c      	bne.n	800dcde <_calloc_r+0x28>
 800dcc4:	b289      	uxth	r1, r1
 800dcc6:	b294      	uxth	r4, r2
 800dcc8:	434c      	muls	r4, r1
 800dcca:	0021      	movs	r1, r4
 800dccc:	f7fe fe64 	bl	800c998 <_malloc_r>
 800dcd0:	1e05      	subs	r5, r0, #0
 800dcd2:	d01b      	beq.n	800dd0c <_calloc_r+0x56>
 800dcd4:	0022      	movs	r2, r4
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	f7fd fab8 	bl	800b24c <memset>
 800dcdc:	e016      	b.n	800dd0c <_calloc_r+0x56>
 800dcde:	1c2b      	adds	r3, r5, #0
 800dce0:	1c0c      	adds	r4, r1, #0
 800dce2:	b289      	uxth	r1, r1
 800dce4:	b292      	uxth	r2, r2
 800dce6:	434a      	muls	r2, r1
 800dce8:	b2a1      	uxth	r1, r4
 800dcea:	b29c      	uxth	r4, r3
 800dcec:	434c      	muls	r4, r1
 800dcee:	0c13      	lsrs	r3, r2, #16
 800dcf0:	18e4      	adds	r4, r4, r3
 800dcf2:	0c23      	lsrs	r3, r4, #16
 800dcf4:	d107      	bne.n	800dd06 <_calloc_r+0x50>
 800dcf6:	0424      	lsls	r4, r4, #16
 800dcf8:	b292      	uxth	r2, r2
 800dcfa:	4314      	orrs	r4, r2
 800dcfc:	e7e5      	b.n	800dcca <_calloc_r+0x14>
 800dcfe:	2d00      	cmp	r5, #0
 800dd00:	d101      	bne.n	800dd06 <_calloc_r+0x50>
 800dd02:	1c14      	adds	r4, r2, #0
 800dd04:	e7ed      	b.n	800dce2 <_calloc_r+0x2c>
 800dd06:	230c      	movs	r3, #12
 800dd08:	2500      	movs	r5, #0
 800dd0a:	6003      	str	r3, [r0, #0]
 800dd0c:	0028      	movs	r0, r5
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}

0800dd10 <_realloc_r>:
 800dd10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd12:	0007      	movs	r7, r0
 800dd14:	000e      	movs	r6, r1
 800dd16:	0014      	movs	r4, r2
 800dd18:	2900      	cmp	r1, #0
 800dd1a:	d105      	bne.n	800dd28 <_realloc_r+0x18>
 800dd1c:	0011      	movs	r1, r2
 800dd1e:	f7fe fe3b 	bl	800c998 <_malloc_r>
 800dd22:	0005      	movs	r5, r0
 800dd24:	0028      	movs	r0, r5
 800dd26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd28:	2a00      	cmp	r2, #0
 800dd2a:	d103      	bne.n	800dd34 <_realloc_r+0x24>
 800dd2c:	f7fe fa62 	bl	800c1f4 <_free_r>
 800dd30:	0025      	movs	r5, r4
 800dd32:	e7f7      	b.n	800dd24 <_realloc_r+0x14>
 800dd34:	f000 f866 	bl	800de04 <_malloc_usable_size_r>
 800dd38:	9001      	str	r0, [sp, #4]
 800dd3a:	4284      	cmp	r4, r0
 800dd3c:	d803      	bhi.n	800dd46 <_realloc_r+0x36>
 800dd3e:	0035      	movs	r5, r6
 800dd40:	0843      	lsrs	r3, r0, #1
 800dd42:	42a3      	cmp	r3, r4
 800dd44:	d3ee      	bcc.n	800dd24 <_realloc_r+0x14>
 800dd46:	0021      	movs	r1, r4
 800dd48:	0038      	movs	r0, r7
 800dd4a:	f7fe fe25 	bl	800c998 <_malloc_r>
 800dd4e:	1e05      	subs	r5, r0, #0
 800dd50:	d0e8      	beq.n	800dd24 <_realloc_r+0x14>
 800dd52:	9b01      	ldr	r3, [sp, #4]
 800dd54:	0022      	movs	r2, r4
 800dd56:	429c      	cmp	r4, r3
 800dd58:	d900      	bls.n	800dd5c <_realloc_r+0x4c>
 800dd5a:	001a      	movs	r2, r3
 800dd5c:	0031      	movs	r1, r6
 800dd5e:	0028      	movs	r0, r5
 800dd60:	f7fd fb7c 	bl	800b45c <memcpy>
 800dd64:	0031      	movs	r1, r6
 800dd66:	0038      	movs	r0, r7
 800dd68:	f7fe fa44 	bl	800c1f4 <_free_r>
 800dd6c:	e7da      	b.n	800dd24 <_realloc_r+0x14>

0800dd6e <_raise_r>:
 800dd6e:	b570      	push	{r4, r5, r6, lr}
 800dd70:	0004      	movs	r4, r0
 800dd72:	000d      	movs	r5, r1
 800dd74:	291f      	cmp	r1, #31
 800dd76:	d904      	bls.n	800dd82 <_raise_r+0x14>
 800dd78:	2316      	movs	r3, #22
 800dd7a:	6003      	str	r3, [r0, #0]
 800dd7c:	2001      	movs	r0, #1
 800dd7e:	4240      	negs	r0, r0
 800dd80:	bd70      	pop	{r4, r5, r6, pc}
 800dd82:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d004      	beq.n	800dd92 <_raise_r+0x24>
 800dd88:	008a      	lsls	r2, r1, #2
 800dd8a:	189b      	adds	r3, r3, r2
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	2a00      	cmp	r2, #0
 800dd90:	d108      	bne.n	800dda4 <_raise_r+0x36>
 800dd92:	0020      	movs	r0, r4
 800dd94:	f000 f832 	bl	800ddfc <_getpid_r>
 800dd98:	002a      	movs	r2, r5
 800dd9a:	0001      	movs	r1, r0
 800dd9c:	0020      	movs	r0, r4
 800dd9e:	f000 f81b 	bl	800ddd8 <_kill_r>
 800dda2:	e7ed      	b.n	800dd80 <_raise_r+0x12>
 800dda4:	2000      	movs	r0, #0
 800dda6:	2a01      	cmp	r2, #1
 800dda8:	d0ea      	beq.n	800dd80 <_raise_r+0x12>
 800ddaa:	1c51      	adds	r1, r2, #1
 800ddac:	d103      	bne.n	800ddb6 <_raise_r+0x48>
 800ddae:	2316      	movs	r3, #22
 800ddb0:	3001      	adds	r0, #1
 800ddb2:	6023      	str	r3, [r4, #0]
 800ddb4:	e7e4      	b.n	800dd80 <_raise_r+0x12>
 800ddb6:	2400      	movs	r4, #0
 800ddb8:	0028      	movs	r0, r5
 800ddba:	601c      	str	r4, [r3, #0]
 800ddbc:	4790      	blx	r2
 800ddbe:	0020      	movs	r0, r4
 800ddc0:	e7de      	b.n	800dd80 <_raise_r+0x12>
	...

0800ddc4 <raise>:
 800ddc4:	b510      	push	{r4, lr}
 800ddc6:	4b03      	ldr	r3, [pc, #12]	; (800ddd4 <raise+0x10>)
 800ddc8:	0001      	movs	r1, r0
 800ddca:	6818      	ldr	r0, [r3, #0]
 800ddcc:	f7ff ffcf 	bl	800dd6e <_raise_r>
 800ddd0:	bd10      	pop	{r4, pc}
 800ddd2:	46c0      	nop			; (mov r8, r8)
 800ddd4:	2000024c 	.word	0x2000024c

0800ddd8 <_kill_r>:
 800ddd8:	2300      	movs	r3, #0
 800ddda:	b570      	push	{r4, r5, r6, lr}
 800dddc:	4d06      	ldr	r5, [pc, #24]	; (800ddf8 <_kill_r+0x20>)
 800ddde:	0004      	movs	r4, r0
 800dde0:	0008      	movs	r0, r1
 800dde2:	0011      	movs	r1, r2
 800dde4:	602b      	str	r3, [r5, #0]
 800dde6:	f7f5 fb89 	bl	80034fc <_kill>
 800ddea:	1c43      	adds	r3, r0, #1
 800ddec:	d103      	bne.n	800ddf6 <_kill_r+0x1e>
 800ddee:	682b      	ldr	r3, [r5, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d000      	beq.n	800ddf6 <_kill_r+0x1e>
 800ddf4:	6023      	str	r3, [r4, #0]
 800ddf6:	bd70      	pop	{r4, r5, r6, pc}
 800ddf8:	200007b4 	.word	0x200007b4

0800ddfc <_getpid_r>:
 800ddfc:	b510      	push	{r4, lr}
 800ddfe:	f7f5 fb77 	bl	80034f0 <_getpid>
 800de02:	bd10      	pop	{r4, pc}

0800de04 <_malloc_usable_size_r>:
 800de04:	1f0b      	subs	r3, r1, #4
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	1f18      	subs	r0, r3, #4
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	da01      	bge.n	800de12 <_malloc_usable_size_r+0xe>
 800de0e:	580b      	ldr	r3, [r1, r0]
 800de10:	18c0      	adds	r0, r0, r3
 800de12:	4770      	bx	lr

0800de14 <_init>:
 800de14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de16:	46c0      	nop			; (mov r8, r8)
 800de18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de1a:	bc08      	pop	{r3}
 800de1c:	469e      	mov	lr, r3
 800de1e:	4770      	bx	lr

0800de20 <_fini>:
 800de20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de22:	46c0      	nop			; (mov r8, r8)
 800de24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de26:	bc08      	pop	{r3}
 800de28:	469e      	mov	lr, r3
 800de2a:	4770      	bx	lr
