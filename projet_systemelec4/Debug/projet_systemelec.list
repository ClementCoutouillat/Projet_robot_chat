
projet_systemelec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800c588  0800c588  0001c588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb40  0800cb40  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  0800cb40  0800cb40  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cb40  0800cb40  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb40  0800cb40  0001cb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb44  0800cb44  0001cb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800cb48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000250  0800cd98  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  0800cd98  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014bb4  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003401  00000000  00000000  00034e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00038270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf1  00000000  00000000  00039318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189e0  00000000  00000000  0003a009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175fa  00000000  00000000  000529e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009081f  00000000  00000000  00069fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d74  00000000  00000000  000fa804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ff578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000250 	.word	0x20000250
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800c570 	.word	0x0800c570

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000254 	.word	0x20000254
 80000fc:	0800c570 	.word	0x0800c570

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fe2d 	bl	8002094 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd7d 	bl	8001f44 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fe1f 	bl	8002094 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe15 	bl	8002094 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fda5 	bl	8001fc8 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd9b 	bl	8001fc8 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fb59 	bl	8000b60 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fae5 	bl	8000a88 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb4b 	bl	8000b60 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb41 	bl	8000b60 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 faf1 	bl	8000ad4 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fae7 	bl	8000ad4 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fadd>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	4647      	mov	r7, r8
 8000518:	46ce      	mov	lr, r9
 800051a:	024a      	lsls	r2, r1, #9
 800051c:	0243      	lsls	r3, r0, #9
 800051e:	0045      	lsls	r5, r0, #1
 8000520:	0fc4      	lsrs	r4, r0, #31
 8000522:	0a50      	lsrs	r0, r2, #9
 8000524:	4680      	mov	r8, r0
 8000526:	0048      	lsls	r0, r1, #1
 8000528:	0a5b      	lsrs	r3, r3, #9
 800052a:	0e00      	lsrs	r0, r0, #24
 800052c:	0992      	lsrs	r2, r2, #6
 800052e:	4694      	mov	ip, r2
 8000530:	b580      	push	{r7, lr}
 8000532:	001e      	movs	r6, r3
 8000534:	4681      	mov	r9, r0
 8000536:	0002      	movs	r2, r0
 8000538:	0e2d      	lsrs	r5, r5, #24
 800053a:	00df      	lsls	r7, r3, #3
 800053c:	0fc9      	lsrs	r1, r1, #31
 800053e:	428c      	cmp	r4, r1
 8000540:	d024      	beq.n	800058c <__aeabi_fadd+0x78>
 8000542:	1a28      	subs	r0, r5, r0
 8000544:	2800      	cmp	r0, #0
 8000546:	dd0e      	ble.n	8000566 <__aeabi_fadd+0x52>
 8000548:	2a00      	cmp	r2, #0
 800054a:	d13e      	bne.n	80005ca <__aeabi_fadd+0xb6>
 800054c:	4662      	mov	r2, ip
 800054e:	2a00      	cmp	r2, #0
 8000550:	d100      	bne.n	8000554 <__aeabi_fadd+0x40>
 8000552:	e0fd      	b.n	8000750 <__aeabi_fadd+0x23c>
 8000554:	1e42      	subs	r2, r0, #1
 8000556:	2801      	cmp	r0, #1
 8000558:	d100      	bne.n	800055c <__aeabi_fadd+0x48>
 800055a:	e137      	b.n	80007cc <__aeabi_fadd+0x2b8>
 800055c:	28ff      	cmp	r0, #255	; 0xff
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x4e>
 8000560:	e0a9      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 8000562:	0010      	movs	r0, r2
 8000564:	e039      	b.n	80005da <__aeabi_fadd+0xc6>
 8000566:	2800      	cmp	r0, #0
 8000568:	d063      	beq.n	8000632 <__aeabi_fadd+0x11e>
 800056a:	464b      	mov	r3, r9
 800056c:	1b52      	subs	r2, r2, r5
 800056e:	2d00      	cmp	r5, #0
 8000570:	d000      	beq.n	8000574 <__aeabi_fadd+0x60>
 8000572:	e0e0      	b.n	8000736 <__aeabi_fadd+0x222>
 8000574:	2f00      	cmp	r7, #0
 8000576:	d100      	bne.n	800057a <__aeabi_fadd+0x66>
 8000578:	e0ce      	b.n	8000718 <__aeabi_fadd+0x204>
 800057a:	1e53      	subs	r3, r2, #1
 800057c:	2a01      	cmp	r2, #1
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x6e>
 8000580:	e155      	b.n	800082e <__aeabi_fadd+0x31a>
 8000582:	2aff      	cmp	r2, #255	; 0xff
 8000584:	d100      	bne.n	8000588 <__aeabi_fadd+0x74>
 8000586:	e094      	b.n	80006b2 <__aeabi_fadd+0x19e>
 8000588:	001a      	movs	r2, r3
 800058a:	e0d9      	b.n	8000740 <__aeabi_fadd+0x22c>
 800058c:	1a2a      	subs	r2, r5, r0
 800058e:	2a00      	cmp	r2, #0
 8000590:	dc00      	bgt.n	8000594 <__aeabi_fadd+0x80>
 8000592:	e099      	b.n	80006c8 <__aeabi_fadd+0x1b4>
 8000594:	2800      	cmp	r0, #0
 8000596:	d062      	beq.n	800065e <__aeabi_fadd+0x14a>
 8000598:	2dff      	cmp	r5, #255	; 0xff
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x8a>
 800059c:	e08b      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	4661      	mov	r1, ip
 80005a2:	04db      	lsls	r3, r3, #19
 80005a4:	4319      	orrs	r1, r3
 80005a6:	468c      	mov	ip, r1
 80005a8:	2a1b      	cmp	r2, #27
 80005aa:	dc00      	bgt.n	80005ae <__aeabi_fadd+0x9a>
 80005ac:	e0d2      	b.n	8000754 <__aeabi_fadd+0x240>
 80005ae:	2301      	movs	r3, #1
 80005b0:	19db      	adds	r3, r3, r7
 80005b2:	015a      	lsls	r2, r3, #5
 80005b4:	d56a      	bpl.n	800068c <__aeabi_fadd+0x178>
 80005b6:	3501      	adds	r5, #1
 80005b8:	2dff      	cmp	r5, #255	; 0xff
 80005ba:	d05b      	beq.n	8000674 <__aeabi_fadd+0x160>
 80005bc:	2201      	movs	r2, #1
 80005be:	49a3      	ldr	r1, [pc, #652]	; (800084c <__aeabi_fadd+0x338>)
 80005c0:	401a      	ands	r2, r3
 80005c2:	085b      	lsrs	r3, r3, #1
 80005c4:	400b      	ands	r3, r1
 80005c6:	4313      	orrs	r3, r2
 80005c8:	e01c      	b.n	8000604 <__aeabi_fadd+0xf0>
 80005ca:	2dff      	cmp	r5, #255	; 0xff
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fadd+0xbc>
 80005ce:	e072      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	4662      	mov	r2, ip
 80005d4:	04db      	lsls	r3, r3, #19
 80005d6:	431a      	orrs	r2, r3
 80005d8:	4694      	mov	ip, r2
 80005da:	281b      	cmp	r0, #27
 80005dc:	dc00      	bgt.n	80005e0 <__aeabi_fadd+0xcc>
 80005de:	e090      	b.n	8000702 <__aeabi_fadd+0x1ee>
 80005e0:	2301      	movs	r3, #1
 80005e2:	1afb      	subs	r3, r7, r3
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	d551      	bpl.n	800068c <__aeabi_fadd+0x178>
 80005e8:	019b      	lsls	r3, r3, #6
 80005ea:	099e      	lsrs	r6, r3, #6
 80005ec:	0030      	movs	r0, r6
 80005ee:	f002 fd71 	bl	80030d4 <__clzsi2>
 80005f2:	0033      	movs	r3, r6
 80005f4:	3805      	subs	r0, #5
 80005f6:	4083      	lsls	r3, r0
 80005f8:	4285      	cmp	r5, r0
 80005fa:	dc00      	bgt.n	80005fe <__aeabi_fadd+0xea>
 80005fc:	e075      	b.n	80006ea <__aeabi_fadd+0x1d6>
 80005fe:	4a94      	ldr	r2, [pc, #592]	; (8000850 <__aeabi_fadd+0x33c>)
 8000600:	1a2d      	subs	r5, r5, r0
 8000602:	4013      	ands	r3, r2
 8000604:	075a      	lsls	r2, r3, #29
 8000606:	d004      	beq.n	8000612 <__aeabi_fadd+0xfe>
 8000608:	220f      	movs	r2, #15
 800060a:	401a      	ands	r2, r3
 800060c:	2a04      	cmp	r2, #4
 800060e:	d000      	beq.n	8000612 <__aeabi_fadd+0xfe>
 8000610:	3304      	adds	r3, #4
 8000612:	015a      	lsls	r2, r3, #5
 8000614:	d53c      	bpl.n	8000690 <__aeabi_fadd+0x17c>
 8000616:	1c68      	adds	r0, r5, #1
 8000618:	2dfe      	cmp	r5, #254	; 0xfe
 800061a:	d02b      	beq.n	8000674 <__aeabi_fadd+0x160>
 800061c:	019b      	lsls	r3, r3, #6
 800061e:	0a5e      	lsrs	r6, r3, #9
 8000620:	b2c0      	uxtb	r0, r0
 8000622:	05c0      	lsls	r0, r0, #23
 8000624:	4330      	orrs	r0, r6
 8000626:	07e4      	lsls	r4, r4, #31
 8000628:	4320      	orrs	r0, r4
 800062a:	bcc0      	pop	{r6, r7}
 800062c:	46b9      	mov	r9, r7
 800062e:	46b0      	mov	r8, r6
 8000630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000632:	20fe      	movs	r0, #254	; 0xfe
 8000634:	1c6a      	adds	r2, r5, #1
 8000636:	4210      	tst	r0, r2
 8000638:	d172      	bne.n	8000720 <__aeabi_fadd+0x20c>
 800063a:	2d00      	cmp	r5, #0
 800063c:	d000      	beq.n	8000640 <__aeabi_fadd+0x12c>
 800063e:	e0ae      	b.n	800079e <__aeabi_fadd+0x28a>
 8000640:	2f00      	cmp	r7, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_fadd+0x132>
 8000644:	e0ec      	b.n	8000820 <__aeabi_fadd+0x30c>
 8000646:	4663      	mov	r3, ip
 8000648:	2000      	movs	r0, #0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0e9      	beq.n	8000622 <__aeabi_fadd+0x10e>
 800064e:	1afb      	subs	r3, r7, r3
 8000650:	015a      	lsls	r2, r3, #5
 8000652:	d400      	bmi.n	8000656 <__aeabi_fadd+0x142>
 8000654:	e0f3      	b.n	800083e <__aeabi_fadd+0x32a>
 8000656:	4663      	mov	r3, ip
 8000658:	000c      	movs	r4, r1
 800065a:	1bdb      	subs	r3, r3, r7
 800065c:	e7d2      	b.n	8000604 <__aeabi_fadd+0xf0>
 800065e:	4661      	mov	r1, ip
 8000660:	2900      	cmp	r1, #0
 8000662:	d05b      	beq.n	800071c <__aeabi_fadd+0x208>
 8000664:	1e51      	subs	r1, r2, #1
 8000666:	2a01      	cmp	r2, #1
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x158>
 800066a:	e0a7      	b.n	80007bc <__aeabi_fadd+0x2a8>
 800066c:	2aff      	cmp	r2, #255	; 0xff
 800066e:	d022      	beq.n	80006b6 <__aeabi_fadd+0x1a2>
 8000670:	000a      	movs	r2, r1
 8000672:	e799      	b.n	80005a8 <__aeabi_fadd+0x94>
 8000674:	20ff      	movs	r0, #255	; 0xff
 8000676:	2600      	movs	r6, #0
 8000678:	e7d3      	b.n	8000622 <__aeabi_fadd+0x10e>
 800067a:	21fe      	movs	r1, #254	; 0xfe
 800067c:	1c6a      	adds	r2, r5, #1
 800067e:	4211      	tst	r1, r2
 8000680:	d073      	beq.n	800076a <__aeabi_fadd+0x256>
 8000682:	2aff      	cmp	r2, #255	; 0xff
 8000684:	d0f6      	beq.n	8000674 <__aeabi_fadd+0x160>
 8000686:	0015      	movs	r5, r2
 8000688:	4467      	add	r7, ip
 800068a:	087b      	lsrs	r3, r7, #1
 800068c:	075a      	lsls	r2, r3, #29
 800068e:	d1bb      	bne.n	8000608 <__aeabi_fadd+0xf4>
 8000690:	08db      	lsrs	r3, r3, #3
 8000692:	2dff      	cmp	r5, #255	; 0xff
 8000694:	d00f      	beq.n	80006b6 <__aeabi_fadd+0x1a2>
 8000696:	025b      	lsls	r3, r3, #9
 8000698:	0a5e      	lsrs	r6, r3, #9
 800069a:	b2e8      	uxtb	r0, r5
 800069c:	e7c1      	b.n	8000622 <__aeabi_fadd+0x10e>
 800069e:	4662      	mov	r2, ip
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d008      	beq.n	80006b6 <__aeabi_fadd+0x1a2>
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	03d2      	lsls	r2, r2, #15
 80006a8:	4213      	tst	r3, r2
 80006aa:	d004      	beq.n	80006b6 <__aeabi_fadd+0x1a2>
 80006ac:	4640      	mov	r0, r8
 80006ae:	4210      	tst	r0, r2
 80006b0:	d101      	bne.n	80006b6 <__aeabi_fadd+0x1a2>
 80006b2:	000c      	movs	r4, r1
 80006b4:	4643      	mov	r3, r8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0dc      	beq.n	8000674 <__aeabi_fadd+0x160>
 80006ba:	2680      	movs	r6, #128	; 0x80
 80006bc:	03f6      	lsls	r6, r6, #15
 80006be:	431e      	orrs	r6, r3
 80006c0:	0276      	lsls	r6, r6, #9
 80006c2:	20ff      	movs	r0, #255	; 0xff
 80006c4:	0a76      	lsrs	r6, r6, #9
 80006c6:	e7ac      	b.n	8000622 <__aeabi_fadd+0x10e>
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	d0d6      	beq.n	800067a <__aeabi_fadd+0x166>
 80006cc:	1b42      	subs	r2, r0, r5
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d05c      	beq.n	800078c <__aeabi_fadd+0x278>
 80006d2:	28ff      	cmp	r0, #255	; 0xff
 80006d4:	d0ee      	beq.n	80006b4 <__aeabi_fadd+0x1a0>
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	04db      	lsls	r3, r3, #19
 80006da:	431f      	orrs	r7, r3
 80006dc:	2a1b      	cmp	r2, #27
 80006de:	dc00      	bgt.n	80006e2 <__aeabi_fadd+0x1ce>
 80006e0:	e082      	b.n	80007e8 <__aeabi_fadd+0x2d4>
 80006e2:	2301      	movs	r3, #1
 80006e4:	464d      	mov	r5, r9
 80006e6:	4463      	add	r3, ip
 80006e8:	e763      	b.n	80005b2 <__aeabi_fadd+0x9e>
 80006ea:	2220      	movs	r2, #32
 80006ec:	1b40      	subs	r0, r0, r5
 80006ee:	3001      	adds	r0, #1
 80006f0:	1a12      	subs	r2, r2, r0
 80006f2:	0019      	movs	r1, r3
 80006f4:	4093      	lsls	r3, r2
 80006f6:	40c1      	lsrs	r1, r0
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	4193      	sbcs	r3, r2
 80006fc:	2500      	movs	r5, #0
 80006fe:	430b      	orrs	r3, r1
 8000700:	e780      	b.n	8000604 <__aeabi_fadd+0xf0>
 8000702:	2320      	movs	r3, #32
 8000704:	4661      	mov	r1, ip
 8000706:	1a1b      	subs	r3, r3, r0
 8000708:	4099      	lsls	r1, r3
 800070a:	4662      	mov	r2, ip
 800070c:	000b      	movs	r3, r1
 800070e:	40c2      	lsrs	r2, r0
 8000710:	1e59      	subs	r1, r3, #1
 8000712:	418b      	sbcs	r3, r1
 8000714:	4313      	orrs	r3, r2
 8000716:	e764      	b.n	80005e2 <__aeabi_fadd+0xce>
 8000718:	000c      	movs	r4, r1
 800071a:	4643      	mov	r3, r8
 800071c:	0015      	movs	r5, r2
 800071e:	e7b8      	b.n	8000692 <__aeabi_fadd+0x17e>
 8000720:	4663      	mov	r3, ip
 8000722:	1afe      	subs	r6, r7, r3
 8000724:	0173      	lsls	r3, r6, #5
 8000726:	d445      	bmi.n	80007b4 <__aeabi_fadd+0x2a0>
 8000728:	2e00      	cmp	r6, #0
 800072a:	d000      	beq.n	800072e <__aeabi_fadd+0x21a>
 800072c:	e75e      	b.n	80005ec <__aeabi_fadd+0xd8>
 800072e:	2400      	movs	r4, #0
 8000730:	2000      	movs	r0, #0
 8000732:	2600      	movs	r6, #0
 8000734:	e775      	b.n	8000622 <__aeabi_fadd+0x10e>
 8000736:	2bff      	cmp	r3, #255	; 0xff
 8000738:	d0bb      	beq.n	80006b2 <__aeabi_fadd+0x19e>
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	04db      	lsls	r3, r3, #19
 800073e:	431f      	orrs	r7, r3
 8000740:	2a1b      	cmp	r2, #27
 8000742:	dd47      	ble.n	80007d4 <__aeabi_fadd+0x2c0>
 8000744:	2301      	movs	r3, #1
 8000746:	4662      	mov	r2, ip
 8000748:	000c      	movs	r4, r1
 800074a:	464d      	mov	r5, r9
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	e749      	b.n	80005e4 <__aeabi_fadd+0xd0>
 8000750:	0005      	movs	r5, r0
 8000752:	e79e      	b.n	8000692 <__aeabi_fadd+0x17e>
 8000754:	4661      	mov	r1, ip
 8000756:	2320      	movs	r3, #32
 8000758:	40d1      	lsrs	r1, r2
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	4662      	mov	r2, ip
 800075e:	409a      	lsls	r2, r3
 8000760:	0013      	movs	r3, r2
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	4193      	sbcs	r3, r2
 8000766:	430b      	orrs	r3, r1
 8000768:	e722      	b.n	80005b0 <__aeabi_fadd+0x9c>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d146      	bne.n	80007fc <__aeabi_fadd+0x2e8>
 800076e:	2f00      	cmp	r7, #0
 8000770:	d062      	beq.n	8000838 <__aeabi_fadd+0x324>
 8000772:	4663      	mov	r3, ip
 8000774:	2000      	movs	r0, #0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d100      	bne.n	800077c <__aeabi_fadd+0x268>
 800077a:	e752      	b.n	8000622 <__aeabi_fadd+0x10e>
 800077c:	003b      	movs	r3, r7
 800077e:	4463      	add	r3, ip
 8000780:	015a      	lsls	r2, r3, #5
 8000782:	d583      	bpl.n	800068c <__aeabi_fadd+0x178>
 8000784:	4a32      	ldr	r2, [pc, #200]	; (8000850 <__aeabi_fadd+0x33c>)
 8000786:	3501      	adds	r5, #1
 8000788:	4013      	ands	r3, r2
 800078a:	e77f      	b.n	800068c <__aeabi_fadd+0x178>
 800078c:	2f00      	cmp	r7, #0
 800078e:	d0c4      	beq.n	800071a <__aeabi_fadd+0x206>
 8000790:	1e53      	subs	r3, r2, #1
 8000792:	2a01      	cmp	r2, #1
 8000794:	d012      	beq.n	80007bc <__aeabi_fadd+0x2a8>
 8000796:	2aff      	cmp	r2, #255	; 0xff
 8000798:	d08c      	beq.n	80006b4 <__aeabi_fadd+0x1a0>
 800079a:	001a      	movs	r2, r3
 800079c:	e79e      	b.n	80006dc <__aeabi_fadd+0x1c8>
 800079e:	2f00      	cmp	r7, #0
 80007a0:	d000      	beq.n	80007a4 <__aeabi_fadd+0x290>
 80007a2:	e77c      	b.n	800069e <__aeabi_fadd+0x18a>
 80007a4:	4663      	mov	r3, ip
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d183      	bne.n	80006b2 <__aeabi_fadd+0x19e>
 80007aa:	2680      	movs	r6, #128	; 0x80
 80007ac:	2400      	movs	r4, #0
 80007ae:	20ff      	movs	r0, #255	; 0xff
 80007b0:	03f6      	lsls	r6, r6, #15
 80007b2:	e736      	b.n	8000622 <__aeabi_fadd+0x10e>
 80007b4:	4663      	mov	r3, ip
 80007b6:	000c      	movs	r4, r1
 80007b8:	1bde      	subs	r6, r3, r7
 80007ba:	e717      	b.n	80005ec <__aeabi_fadd+0xd8>
 80007bc:	003b      	movs	r3, r7
 80007be:	4463      	add	r3, ip
 80007c0:	2501      	movs	r5, #1
 80007c2:	015a      	lsls	r2, r3, #5
 80007c4:	d400      	bmi.n	80007c8 <__aeabi_fadd+0x2b4>
 80007c6:	e761      	b.n	800068c <__aeabi_fadd+0x178>
 80007c8:	2502      	movs	r5, #2
 80007ca:	e6f7      	b.n	80005bc <__aeabi_fadd+0xa8>
 80007cc:	4663      	mov	r3, ip
 80007ce:	2501      	movs	r5, #1
 80007d0:	1afb      	subs	r3, r7, r3
 80007d2:	e707      	b.n	80005e4 <__aeabi_fadd+0xd0>
 80007d4:	2320      	movs	r3, #32
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	0038      	movs	r0, r7
 80007da:	409f      	lsls	r7, r3
 80007dc:	003b      	movs	r3, r7
 80007de:	40d0      	lsrs	r0, r2
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	4303      	orrs	r3, r0
 80007e6:	e7ae      	b.n	8000746 <__aeabi_fadd+0x232>
 80007e8:	2320      	movs	r3, #32
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	0039      	movs	r1, r7
 80007ee:	409f      	lsls	r7, r3
 80007f0:	003b      	movs	r3, r7
 80007f2:	40d1      	lsrs	r1, r2
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	4193      	sbcs	r3, r2
 80007f8:	430b      	orrs	r3, r1
 80007fa:	e773      	b.n	80006e4 <__aeabi_fadd+0x1d0>
 80007fc:	2f00      	cmp	r7, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x2ee>
 8000800:	e758      	b.n	80006b4 <__aeabi_fadd+0x1a0>
 8000802:	4662      	mov	r2, ip
 8000804:	2a00      	cmp	r2, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x2f6>
 8000808:	e755      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	03d2      	lsls	r2, r2, #15
 800080e:	4213      	tst	r3, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x300>
 8000812:	e750      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 8000814:	4641      	mov	r1, r8
 8000816:	4211      	tst	r1, r2
 8000818:	d000      	beq.n	800081c <__aeabi_fadd+0x308>
 800081a:	e74c      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 800081c:	4643      	mov	r3, r8
 800081e:	e74a      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 8000820:	4663      	mov	r3, ip
 8000822:	2b00      	cmp	r3, #0
 8000824:	d083      	beq.n	800072e <__aeabi_fadd+0x21a>
 8000826:	000c      	movs	r4, r1
 8000828:	4646      	mov	r6, r8
 800082a:	2000      	movs	r0, #0
 800082c:	e6f9      	b.n	8000622 <__aeabi_fadd+0x10e>
 800082e:	4663      	mov	r3, ip
 8000830:	000c      	movs	r4, r1
 8000832:	1bdb      	subs	r3, r3, r7
 8000834:	3501      	adds	r5, #1
 8000836:	e6d5      	b.n	80005e4 <__aeabi_fadd+0xd0>
 8000838:	4646      	mov	r6, r8
 800083a:	2000      	movs	r0, #0
 800083c:	e6f1      	b.n	8000622 <__aeabi_fadd+0x10e>
 800083e:	2b00      	cmp	r3, #0
 8000840:	d000      	beq.n	8000844 <__aeabi_fadd+0x330>
 8000842:	e723      	b.n	800068c <__aeabi_fadd+0x178>
 8000844:	2400      	movs	r4, #0
 8000846:	2600      	movs	r6, #0
 8000848:	e6eb      	b.n	8000622 <__aeabi_fadd+0x10e>
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	7dffffff 	.word	0x7dffffff
 8000850:	fbffffff 	.word	0xfbffffff

08000854 <__aeabi_fdiv>:
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000856:	464f      	mov	r7, r9
 8000858:	4646      	mov	r6, r8
 800085a:	46d6      	mov	lr, sl
 800085c:	0245      	lsls	r5, r0, #9
 800085e:	b5c0      	push	{r6, r7, lr}
 8000860:	0047      	lsls	r7, r0, #1
 8000862:	1c0c      	adds	r4, r1, #0
 8000864:	0a6d      	lsrs	r5, r5, #9
 8000866:	0e3f      	lsrs	r7, r7, #24
 8000868:	0fc6      	lsrs	r6, r0, #31
 800086a:	2f00      	cmp	r7, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fdiv+0x1c>
 800086e:	e06f      	b.n	8000950 <__aeabi_fdiv+0xfc>
 8000870:	2fff      	cmp	r7, #255	; 0xff
 8000872:	d100      	bne.n	8000876 <__aeabi_fdiv+0x22>
 8000874:	e074      	b.n	8000960 <__aeabi_fdiv+0x10c>
 8000876:	2300      	movs	r3, #0
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	4699      	mov	r9, r3
 800087c:	469a      	mov	sl, r3
 800087e:	00ed      	lsls	r5, r5, #3
 8000880:	04d2      	lsls	r2, r2, #19
 8000882:	4315      	orrs	r5, r2
 8000884:	3f7f      	subs	r7, #127	; 0x7f
 8000886:	0263      	lsls	r3, r4, #9
 8000888:	0a5b      	lsrs	r3, r3, #9
 800088a:	4698      	mov	r8, r3
 800088c:	0063      	lsls	r3, r4, #1
 800088e:	0e1b      	lsrs	r3, r3, #24
 8000890:	0fe4      	lsrs	r4, r4, #31
 8000892:	2b00      	cmp	r3, #0
 8000894:	d04d      	beq.n	8000932 <__aeabi_fdiv+0xde>
 8000896:	2bff      	cmp	r3, #255	; 0xff
 8000898:	d045      	beq.n	8000926 <__aeabi_fdiv+0xd2>
 800089a:	4642      	mov	r2, r8
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	00d2      	lsls	r2, r2, #3
 80008a0:	04c9      	lsls	r1, r1, #19
 80008a2:	4311      	orrs	r1, r2
 80008a4:	4688      	mov	r8, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	3b7f      	subs	r3, #127	; 0x7f
 80008aa:	0031      	movs	r1, r6
 80008ac:	1aff      	subs	r7, r7, r3
 80008ae:	464b      	mov	r3, r9
 80008b0:	4061      	eors	r1, r4
 80008b2:	b2c9      	uxtb	r1, r1
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d900      	bls.n	80008ba <__aeabi_fdiv+0x66>
 80008b8:	e0b8      	b.n	8000a2c <__aeabi_fdiv+0x1d8>
 80008ba:	4870      	ldr	r0, [pc, #448]	; (8000a7c <__aeabi_fdiv+0x228>)
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	58c3      	ldr	r3, [r0, r3]
 80008c0:	469f      	mov	pc, r3
 80008c2:	2300      	movs	r3, #0
 80008c4:	4698      	mov	r8, r3
 80008c6:	0026      	movs	r6, r4
 80008c8:	4645      	mov	r5, r8
 80008ca:	4692      	mov	sl, r2
 80008cc:	4653      	mov	r3, sl
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d100      	bne.n	80008d4 <__aeabi_fdiv+0x80>
 80008d2:	e08d      	b.n	80009f0 <__aeabi_fdiv+0x19c>
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d100      	bne.n	80008da <__aeabi_fdiv+0x86>
 80008d8:	e0a1      	b.n	8000a1e <__aeabi_fdiv+0x1ca>
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d018      	beq.n	8000910 <__aeabi_fdiv+0xbc>
 80008de:	003b      	movs	r3, r7
 80008e0:	337f      	adds	r3, #127	; 0x7f
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	dd6d      	ble.n	80009c2 <__aeabi_fdiv+0x16e>
 80008e6:	076a      	lsls	r2, r5, #29
 80008e8:	d004      	beq.n	80008f4 <__aeabi_fdiv+0xa0>
 80008ea:	220f      	movs	r2, #15
 80008ec:	402a      	ands	r2, r5
 80008ee:	2a04      	cmp	r2, #4
 80008f0:	d000      	beq.n	80008f4 <__aeabi_fdiv+0xa0>
 80008f2:	3504      	adds	r5, #4
 80008f4:	012a      	lsls	r2, r5, #4
 80008f6:	d503      	bpl.n	8000900 <__aeabi_fdiv+0xac>
 80008f8:	4b61      	ldr	r3, [pc, #388]	; (8000a80 <__aeabi_fdiv+0x22c>)
 80008fa:	401d      	ands	r5, r3
 80008fc:	003b      	movs	r3, r7
 80008fe:	3380      	adds	r3, #128	; 0x80
 8000900:	2bfe      	cmp	r3, #254	; 0xfe
 8000902:	dd00      	ble.n	8000906 <__aeabi_fdiv+0xb2>
 8000904:	e074      	b.n	80009f0 <__aeabi_fdiv+0x19c>
 8000906:	01aa      	lsls	r2, r5, #6
 8000908:	0a52      	lsrs	r2, r2, #9
 800090a:	b2d8      	uxtb	r0, r3
 800090c:	e002      	b.n	8000914 <__aeabi_fdiv+0xc0>
 800090e:	000e      	movs	r6, r1
 8000910:	2000      	movs	r0, #0
 8000912:	2200      	movs	r2, #0
 8000914:	05c0      	lsls	r0, r0, #23
 8000916:	07f6      	lsls	r6, r6, #31
 8000918:	4310      	orrs	r0, r2
 800091a:	4330      	orrs	r0, r6
 800091c:	bce0      	pop	{r5, r6, r7}
 800091e:	46ba      	mov	sl, r7
 8000920:	46b1      	mov	r9, r6
 8000922:	46a8      	mov	r8, r5
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	4643      	mov	r3, r8
 8000928:	2b00      	cmp	r3, #0
 800092a:	d13f      	bne.n	80009ac <__aeabi_fdiv+0x158>
 800092c:	2202      	movs	r2, #2
 800092e:	3fff      	subs	r7, #255	; 0xff
 8000930:	e003      	b.n	800093a <__aeabi_fdiv+0xe6>
 8000932:	4643      	mov	r3, r8
 8000934:	2b00      	cmp	r3, #0
 8000936:	d12d      	bne.n	8000994 <__aeabi_fdiv+0x140>
 8000938:	2201      	movs	r2, #1
 800093a:	0031      	movs	r1, r6
 800093c:	464b      	mov	r3, r9
 800093e:	4061      	eors	r1, r4
 8000940:	b2c9      	uxtb	r1, r1
 8000942:	4313      	orrs	r3, r2
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d838      	bhi.n	80009ba <__aeabi_fdiv+0x166>
 8000948:	484e      	ldr	r0, [pc, #312]	; (8000a84 <__aeabi_fdiv+0x230>)
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	58c3      	ldr	r3, [r0, r3]
 800094e:	469f      	mov	pc, r3
 8000950:	2d00      	cmp	r5, #0
 8000952:	d113      	bne.n	800097c <__aeabi_fdiv+0x128>
 8000954:	2304      	movs	r3, #4
 8000956:	4699      	mov	r9, r3
 8000958:	3b03      	subs	r3, #3
 800095a:	2700      	movs	r7, #0
 800095c:	469a      	mov	sl, r3
 800095e:	e792      	b.n	8000886 <__aeabi_fdiv+0x32>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d105      	bne.n	8000970 <__aeabi_fdiv+0x11c>
 8000964:	2308      	movs	r3, #8
 8000966:	4699      	mov	r9, r3
 8000968:	3b06      	subs	r3, #6
 800096a:	27ff      	movs	r7, #255	; 0xff
 800096c:	469a      	mov	sl, r3
 800096e:	e78a      	b.n	8000886 <__aeabi_fdiv+0x32>
 8000970:	230c      	movs	r3, #12
 8000972:	4699      	mov	r9, r3
 8000974:	3b09      	subs	r3, #9
 8000976:	27ff      	movs	r7, #255	; 0xff
 8000978:	469a      	mov	sl, r3
 800097a:	e784      	b.n	8000886 <__aeabi_fdiv+0x32>
 800097c:	0028      	movs	r0, r5
 800097e:	f002 fba9 	bl	80030d4 <__clzsi2>
 8000982:	2776      	movs	r7, #118	; 0x76
 8000984:	1f43      	subs	r3, r0, #5
 8000986:	409d      	lsls	r5, r3
 8000988:	2300      	movs	r3, #0
 800098a:	427f      	negs	r7, r7
 800098c:	4699      	mov	r9, r3
 800098e:	469a      	mov	sl, r3
 8000990:	1a3f      	subs	r7, r7, r0
 8000992:	e778      	b.n	8000886 <__aeabi_fdiv+0x32>
 8000994:	4640      	mov	r0, r8
 8000996:	f002 fb9d 	bl	80030d4 <__clzsi2>
 800099a:	4642      	mov	r2, r8
 800099c:	1f43      	subs	r3, r0, #5
 800099e:	409a      	lsls	r2, r3
 80009a0:	2376      	movs	r3, #118	; 0x76
 80009a2:	425b      	negs	r3, r3
 80009a4:	4690      	mov	r8, r2
 80009a6:	1a1b      	subs	r3, r3, r0
 80009a8:	2200      	movs	r2, #0
 80009aa:	e77e      	b.n	80008aa <__aeabi_fdiv+0x56>
 80009ac:	2303      	movs	r3, #3
 80009ae:	464a      	mov	r2, r9
 80009b0:	431a      	orrs	r2, r3
 80009b2:	4691      	mov	r9, r2
 80009b4:	33fc      	adds	r3, #252	; 0xfc
 80009b6:	2203      	movs	r2, #3
 80009b8:	e777      	b.n	80008aa <__aeabi_fdiv+0x56>
 80009ba:	000e      	movs	r6, r1
 80009bc:	20ff      	movs	r0, #255	; 0xff
 80009be:	2200      	movs	r2, #0
 80009c0:	e7a8      	b.n	8000914 <__aeabi_fdiv+0xc0>
 80009c2:	2201      	movs	r2, #1
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b1b      	cmp	r3, #27
 80009c8:	dca2      	bgt.n	8000910 <__aeabi_fdiv+0xbc>
 80009ca:	379e      	adds	r7, #158	; 0x9e
 80009cc:	002a      	movs	r2, r5
 80009ce:	40bd      	lsls	r5, r7
 80009d0:	40da      	lsrs	r2, r3
 80009d2:	1e6b      	subs	r3, r5, #1
 80009d4:	419d      	sbcs	r5, r3
 80009d6:	4315      	orrs	r5, r2
 80009d8:	076a      	lsls	r2, r5, #29
 80009da:	d004      	beq.n	80009e6 <__aeabi_fdiv+0x192>
 80009dc:	220f      	movs	r2, #15
 80009de:	402a      	ands	r2, r5
 80009e0:	2a04      	cmp	r2, #4
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fdiv+0x192>
 80009e4:	3504      	adds	r5, #4
 80009e6:	016a      	lsls	r2, r5, #5
 80009e8:	d544      	bpl.n	8000a74 <__aeabi_fdiv+0x220>
 80009ea:	2001      	movs	r0, #1
 80009ec:	2200      	movs	r2, #0
 80009ee:	e791      	b.n	8000914 <__aeabi_fdiv+0xc0>
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	2200      	movs	r2, #0
 80009f4:	e78e      	b.n	8000914 <__aeabi_fdiv+0xc0>
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	2600      	movs	r6, #0
 80009fa:	20ff      	movs	r0, #255	; 0xff
 80009fc:	03d2      	lsls	r2, r2, #15
 80009fe:	e789      	b.n	8000914 <__aeabi_fdiv+0xc0>
 8000a00:	2300      	movs	r3, #0
 8000a02:	4698      	mov	r8, r3
 8000a04:	2280      	movs	r2, #128	; 0x80
 8000a06:	03d2      	lsls	r2, r2, #15
 8000a08:	4215      	tst	r5, r2
 8000a0a:	d008      	beq.n	8000a1e <__aeabi_fdiv+0x1ca>
 8000a0c:	4643      	mov	r3, r8
 8000a0e:	4213      	tst	r3, r2
 8000a10:	d105      	bne.n	8000a1e <__aeabi_fdiv+0x1ca>
 8000a12:	431a      	orrs	r2, r3
 8000a14:	0252      	lsls	r2, r2, #9
 8000a16:	0026      	movs	r6, r4
 8000a18:	20ff      	movs	r0, #255	; 0xff
 8000a1a:	0a52      	lsrs	r2, r2, #9
 8000a1c:	e77a      	b.n	8000914 <__aeabi_fdiv+0xc0>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	432a      	orrs	r2, r5
 8000a24:	0252      	lsls	r2, r2, #9
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	0a52      	lsrs	r2, r2, #9
 8000a2a:	e773      	b.n	8000914 <__aeabi_fdiv+0xc0>
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	016b      	lsls	r3, r5, #5
 8000a30:	0155      	lsls	r5, r2, #5
 8000a32:	42ab      	cmp	r3, r5
 8000a34:	d21a      	bcs.n	8000a6c <__aeabi_fdiv+0x218>
 8000a36:	201b      	movs	r0, #27
 8000a38:	2200      	movs	r2, #0
 8000a3a:	3f01      	subs	r7, #1
 8000a3c:	2601      	movs	r6, #1
 8000a3e:	001c      	movs	r4, r3
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	db01      	blt.n	8000a4c <__aeabi_fdiv+0x1f8>
 8000a48:	429d      	cmp	r5, r3
 8000a4a:	d801      	bhi.n	8000a50 <__aeabi_fdiv+0x1fc>
 8000a4c:	1b5b      	subs	r3, r3, r5
 8000a4e:	4332      	orrs	r2, r6
 8000a50:	3801      	subs	r0, #1
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d1f3      	bne.n	8000a3e <__aeabi_fdiv+0x1ea>
 8000a56:	1e58      	subs	r0, r3, #1
 8000a58:	4183      	sbcs	r3, r0
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	001d      	movs	r5, r3
 8000a5e:	003b      	movs	r3, r7
 8000a60:	337f      	adds	r3, #127	; 0x7f
 8000a62:	000e      	movs	r6, r1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	dd00      	ble.n	8000a6a <__aeabi_fdiv+0x216>
 8000a68:	e73d      	b.n	80008e6 <__aeabi_fdiv+0x92>
 8000a6a:	e7aa      	b.n	80009c2 <__aeabi_fdiv+0x16e>
 8000a6c:	201a      	movs	r0, #26
 8000a6e:	2201      	movs	r2, #1
 8000a70:	1b5b      	subs	r3, r3, r5
 8000a72:	e7e3      	b.n	8000a3c <__aeabi_fdiv+0x1e8>
 8000a74:	01aa      	lsls	r2, r5, #6
 8000a76:	2000      	movs	r0, #0
 8000a78:	0a52      	lsrs	r2, r2, #9
 8000a7a:	e74b      	b.n	8000914 <__aeabi_fdiv+0xc0>
 8000a7c:	0800c634 	.word	0x0800c634
 8000a80:	f7ffffff 	.word	0xf7ffffff
 8000a84:	0800c674 	.word	0x0800c674

08000a88 <__eqsf2>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	0245      	lsls	r5, r0, #9
 8000a8e:	024e      	lsls	r6, r1, #9
 8000a90:	004c      	lsls	r4, r1, #1
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a6d      	lsrs	r5, r5, #9
 8000a96:	2001      	movs	r0, #1
 8000a98:	0e12      	lsrs	r2, r2, #24
 8000a9a:	0a76      	lsrs	r6, r6, #9
 8000a9c:	0e24      	lsrs	r4, r4, #24
 8000a9e:	0fc9      	lsrs	r1, r1, #31
 8000aa0:	2aff      	cmp	r2, #255	; 0xff
 8000aa2:	d006      	beq.n	8000ab2 <__eqsf2+0x2a>
 8000aa4:	2cff      	cmp	r4, #255	; 0xff
 8000aa6:	d003      	beq.n	8000ab0 <__eqsf2+0x28>
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d101      	bne.n	8000ab0 <__eqsf2+0x28>
 8000aac:	42b5      	cmp	r5, r6
 8000aae:	d006      	beq.n	8000abe <__eqsf2+0x36>
 8000ab0:	bd70      	pop	{r4, r5, r6, pc}
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d1fc      	bne.n	8000ab0 <__eqsf2+0x28>
 8000ab6:	2cff      	cmp	r4, #255	; 0xff
 8000ab8:	d1fa      	bne.n	8000ab0 <__eqsf2+0x28>
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d1f8      	bne.n	8000ab0 <__eqsf2+0x28>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d006      	beq.n	8000ad0 <__eqsf2+0x48>
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d1f3      	bne.n	8000ab0 <__eqsf2+0x28>
 8000ac8:	0028      	movs	r0, r5
 8000aca:	1e43      	subs	r3, r0, #1
 8000acc:	4198      	sbcs	r0, r3
 8000ace:	e7ef      	b.n	8000ab0 <__eqsf2+0x28>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e7ed      	b.n	8000ab0 <__eqsf2+0x28>

08000ad4 <__gesf2>:
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0245      	lsls	r5, r0, #9
 8000ada:	024e      	lsls	r6, r1, #9
 8000adc:	004c      	lsls	r4, r1, #1
 8000ade:	0fc3      	lsrs	r3, r0, #31
 8000ae0:	0a6d      	lsrs	r5, r5, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0a76      	lsrs	r6, r6, #9
 8000ae6:	0e24      	lsrs	r4, r4, #24
 8000ae8:	0fc8      	lsrs	r0, r1, #31
 8000aea:	2aff      	cmp	r2, #255	; 0xff
 8000aec:	d01b      	beq.n	8000b26 <__gesf2+0x52>
 8000aee:	2cff      	cmp	r4, #255	; 0xff
 8000af0:	d00e      	beq.n	8000b10 <__gesf2+0x3c>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d11b      	bne.n	8000b2e <__gesf2+0x5a>
 8000af6:	2c00      	cmp	r4, #0
 8000af8:	d101      	bne.n	8000afe <__gesf2+0x2a>
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d01c      	beq.n	8000b38 <__gesf2+0x64>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d00c      	beq.n	8000b1c <__gesf2+0x48>
 8000b02:	4283      	cmp	r3, r0
 8000b04:	d01c      	beq.n	8000b40 <__gesf2+0x6c>
 8000b06:	2102      	movs	r1, #2
 8000b08:	1e58      	subs	r0, r3, #1
 8000b0a:	4008      	ands	r0, r1
 8000b0c:	3801      	subs	r0, #1
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d122      	bne.n	8000b5a <__gesf2+0x86>
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d1f4      	bne.n	8000b02 <__gesf2+0x2e>
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d1f2      	bne.n	8000b02 <__gesf2+0x2e>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d1f6      	bne.n	8000b0e <__gesf2+0x3a>
 8000b20:	2001      	movs	r0, #1
 8000b22:	4240      	negs	r0, r0
 8000b24:	e7f3      	b.n	8000b0e <__gesf2+0x3a>
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d117      	bne.n	8000b5a <__gesf2+0x86>
 8000b2a:	2cff      	cmp	r4, #255	; 0xff
 8000b2c:	d0f0      	beq.n	8000b10 <__gesf2+0x3c>
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d1e7      	bne.n	8000b02 <__gesf2+0x2e>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d1e5      	bne.n	8000b02 <__gesf2+0x2e>
 8000b36:	e7e6      	b.n	8000b06 <__gesf2+0x32>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d0e7      	beq.n	8000b0e <__gesf2+0x3a>
 8000b3e:	e7e2      	b.n	8000b06 <__gesf2+0x32>
 8000b40:	42a2      	cmp	r2, r4
 8000b42:	dc05      	bgt.n	8000b50 <__gesf2+0x7c>
 8000b44:	dbea      	blt.n	8000b1c <__gesf2+0x48>
 8000b46:	42b5      	cmp	r5, r6
 8000b48:	d802      	bhi.n	8000b50 <__gesf2+0x7c>
 8000b4a:	d3e7      	bcc.n	8000b1c <__gesf2+0x48>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e7de      	b.n	8000b0e <__gesf2+0x3a>
 8000b50:	4243      	negs	r3, r0
 8000b52:	4158      	adcs	r0, r3
 8000b54:	0040      	lsls	r0, r0, #1
 8000b56:	3801      	subs	r0, #1
 8000b58:	e7d9      	b.n	8000b0e <__gesf2+0x3a>
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	4240      	negs	r0, r0
 8000b5e:	e7d6      	b.n	8000b0e <__gesf2+0x3a>

08000b60 <__lesf2>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	0042      	lsls	r2, r0, #1
 8000b64:	0245      	lsls	r5, r0, #9
 8000b66:	024e      	lsls	r6, r1, #9
 8000b68:	004c      	lsls	r4, r1, #1
 8000b6a:	0fc3      	lsrs	r3, r0, #31
 8000b6c:	0a6d      	lsrs	r5, r5, #9
 8000b6e:	0e12      	lsrs	r2, r2, #24
 8000b70:	0a76      	lsrs	r6, r6, #9
 8000b72:	0e24      	lsrs	r4, r4, #24
 8000b74:	0fc8      	lsrs	r0, r1, #31
 8000b76:	2aff      	cmp	r2, #255	; 0xff
 8000b78:	d00b      	beq.n	8000b92 <__lesf2+0x32>
 8000b7a:	2cff      	cmp	r4, #255	; 0xff
 8000b7c:	d00d      	beq.n	8000b9a <__lesf2+0x3a>
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d11f      	bne.n	8000bc2 <__lesf2+0x62>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d116      	bne.n	8000bb4 <__lesf2+0x54>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d114      	bne.n	8000bb4 <__lesf2+0x54>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d010      	beq.n	8000bb2 <__lesf2+0x52>
 8000b90:	e009      	b.n	8000ba6 <__lesf2+0x46>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d10c      	bne.n	8000bb0 <__lesf2+0x50>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d113      	bne.n	8000bc2 <__lesf2+0x62>
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d108      	bne.n	8000bb0 <__lesf2+0x50>
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d008      	beq.n	8000bb4 <__lesf2+0x54>
 8000ba2:	4283      	cmp	r3, r0
 8000ba4:	d012      	beq.n	8000bcc <__lesf2+0x6c>
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	1e58      	subs	r0, r3, #1
 8000baa:	4008      	ands	r0, r1
 8000bac:	3801      	subs	r0, #1
 8000bae:	e000      	b.n	8000bb2 <__lesf2+0x52>
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d1f4      	bne.n	8000ba2 <__lesf2+0x42>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d1fa      	bne.n	8000bb2 <__lesf2+0x52>
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	4240      	negs	r0, r0
 8000bc0:	e7f7      	b.n	8000bb2 <__lesf2+0x52>
 8000bc2:	2c00      	cmp	r4, #0
 8000bc4:	d1ed      	bne.n	8000ba2 <__lesf2+0x42>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d1eb      	bne.n	8000ba2 <__lesf2+0x42>
 8000bca:	e7ec      	b.n	8000ba6 <__lesf2+0x46>
 8000bcc:	42a2      	cmp	r2, r4
 8000bce:	dc05      	bgt.n	8000bdc <__lesf2+0x7c>
 8000bd0:	dbf2      	blt.n	8000bb8 <__lesf2+0x58>
 8000bd2:	42b5      	cmp	r5, r6
 8000bd4:	d802      	bhi.n	8000bdc <__lesf2+0x7c>
 8000bd6:	d3ef      	bcc.n	8000bb8 <__lesf2+0x58>
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e7ea      	b.n	8000bb2 <__lesf2+0x52>
 8000bdc:	4243      	negs	r3, r0
 8000bde:	4158      	adcs	r0, r3
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	3801      	subs	r0, #1
 8000be4:	e7e5      	b.n	8000bb2 <__lesf2+0x52>
 8000be6:	46c0      	nop			; (mov r8, r8)

08000be8 <__aeabi_fmul>:
 8000be8:	0243      	lsls	r3, r0, #9
 8000bea:	0a5b      	lsrs	r3, r3, #9
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	464f      	mov	r7, r9
 8000bf0:	4646      	mov	r6, r8
 8000bf2:	4699      	mov	r9, r3
 8000bf4:	46d6      	mov	lr, sl
 8000bf6:	0fc3      	lsrs	r3, r0, #31
 8000bf8:	0045      	lsls	r5, r0, #1
 8000bfa:	4698      	mov	r8, r3
 8000bfc:	b5c0      	push	{r6, r7, lr}
 8000bfe:	464b      	mov	r3, r9
 8000c00:	1c0f      	adds	r7, r1, #0
 8000c02:	0e2d      	lsrs	r5, r5, #24
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fmul+0x20>
 8000c06:	e0cb      	b.n	8000da0 <__aeabi_fmul+0x1b8>
 8000c08:	2dff      	cmp	r5, #255	; 0xff
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fmul+0x26>
 8000c0c:	e0cf      	b.n	8000dae <__aeabi_fmul+0x1c6>
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	04d2      	lsls	r2, r2, #19
 8000c14:	431a      	orrs	r2, r3
 8000c16:	2300      	movs	r3, #0
 8000c18:	4691      	mov	r9, r2
 8000c1a:	2600      	movs	r6, #0
 8000c1c:	469a      	mov	sl, r3
 8000c1e:	3d7f      	subs	r5, #127	; 0x7f
 8000c20:	027c      	lsls	r4, r7, #9
 8000c22:	007b      	lsls	r3, r7, #1
 8000c24:	0a64      	lsrs	r4, r4, #9
 8000c26:	0e1b      	lsrs	r3, r3, #24
 8000c28:	0fff      	lsrs	r7, r7, #31
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fmul+0x48>
 8000c2e:	e0a9      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000c30:	2bff      	cmp	r3, #255	; 0xff
 8000c32:	d011      	beq.n	8000c58 <__aeabi_fmul+0x70>
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	00e4      	lsls	r4, r4, #3
 8000c38:	04d2      	lsls	r2, r2, #19
 8000c3a:	4314      	orrs	r4, r2
 8000c3c:	4642      	mov	r2, r8
 8000c3e:	3b7f      	subs	r3, #127	; 0x7f
 8000c40:	195b      	adds	r3, r3, r5
 8000c42:	407a      	eors	r2, r7
 8000c44:	2000      	movs	r0, #0
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	1c5d      	adds	r5, r3, #1
 8000c4a:	2e0a      	cmp	r6, #10
 8000c4c:	dd13      	ble.n	8000c76 <__aeabi_fmul+0x8e>
 8000c4e:	003a      	movs	r2, r7
 8000c50:	2e0b      	cmp	r6, #11
 8000c52:	d047      	beq.n	8000ce4 <__aeabi_fmul+0xfc>
 8000c54:	4647      	mov	r7, r8
 8000c56:	e03f      	b.n	8000cd8 <__aeabi_fmul+0xf0>
 8000c58:	002b      	movs	r3, r5
 8000c5a:	33ff      	adds	r3, #255	; 0xff
 8000c5c:	2c00      	cmp	r4, #0
 8000c5e:	d11e      	bne.n	8000c9e <__aeabi_fmul+0xb6>
 8000c60:	2202      	movs	r2, #2
 8000c62:	4316      	orrs	r6, r2
 8000c64:	4642      	mov	r2, r8
 8000c66:	3501      	adds	r5, #1
 8000c68:	407a      	eors	r2, r7
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	35ff      	adds	r5, #255	; 0xff
 8000c6e:	2e0a      	cmp	r6, #10
 8000c70:	dd00      	ble.n	8000c74 <__aeabi_fmul+0x8c>
 8000c72:	e0e4      	b.n	8000e3e <__aeabi_fmul+0x256>
 8000c74:	2002      	movs	r0, #2
 8000c76:	2e02      	cmp	r6, #2
 8000c78:	dc1c      	bgt.n	8000cb4 <__aeabi_fmul+0xcc>
 8000c7a:	3e01      	subs	r6, #1
 8000c7c:	2e01      	cmp	r6, #1
 8000c7e:	d842      	bhi.n	8000d06 <__aeabi_fmul+0x11e>
 8000c80:	2802      	cmp	r0, #2
 8000c82:	d03d      	beq.n	8000d00 <__aeabi_fmul+0x118>
 8000c84:	2801      	cmp	r0, #1
 8000c86:	d166      	bne.n	8000d56 <__aeabi_fmul+0x16e>
 8000c88:	2000      	movs	r0, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	05c0      	lsls	r0, r0, #23
 8000c8e:	4308      	orrs	r0, r1
 8000c90:	07d2      	lsls	r2, r2, #31
 8000c92:	4310      	orrs	r0, r2
 8000c94:	bce0      	pop	{r5, r6, r7}
 8000c96:	46ba      	mov	sl, r7
 8000c98:	46b1      	mov	r9, r6
 8000c9a:	46a8      	mov	r8, r5
 8000c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4316      	orrs	r6, r2
 8000ca2:	4642      	mov	r2, r8
 8000ca4:	3501      	adds	r5, #1
 8000ca6:	407a      	eors	r2, r7
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	35ff      	adds	r5, #255	; 0xff
 8000cac:	2e0a      	cmp	r6, #10
 8000cae:	dd00      	ble.n	8000cb2 <__aeabi_fmul+0xca>
 8000cb0:	e0e4      	b.n	8000e7c <__aeabi_fmul+0x294>
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	40b1      	lsls	r1, r6
 8000cb8:	26a6      	movs	r6, #166	; 0xa6
 8000cba:	00f6      	lsls	r6, r6, #3
 8000cbc:	4231      	tst	r1, r6
 8000cbe:	d10a      	bne.n	8000cd6 <__aeabi_fmul+0xee>
 8000cc0:	2690      	movs	r6, #144	; 0x90
 8000cc2:	00b6      	lsls	r6, r6, #2
 8000cc4:	4231      	tst	r1, r6
 8000cc6:	d116      	bne.n	8000cf6 <__aeabi_fmul+0x10e>
 8000cc8:	3eb9      	subs	r6, #185	; 0xb9
 8000cca:	3eff      	subs	r6, #255	; 0xff
 8000ccc:	420e      	tst	r6, r1
 8000cce:	d01a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cd0:	46a1      	mov	r9, r4
 8000cd2:	4682      	mov	sl, r0
 8000cd4:	e000      	b.n	8000cd8 <__aeabi_fmul+0xf0>
 8000cd6:	0017      	movs	r7, r2
 8000cd8:	4653      	mov	r3, sl
 8000cda:	003a      	movs	r2, r7
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d00f      	beq.n	8000d00 <__aeabi_fmul+0x118>
 8000ce0:	464c      	mov	r4, r9
 8000ce2:	4650      	mov	r0, sl
 8000ce4:	2803      	cmp	r0, #3
 8000ce6:	d1cd      	bne.n	8000c84 <__aeabi_fmul+0x9c>
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	03c9      	lsls	r1, r1, #15
 8000cec:	4321      	orrs	r1, r4
 8000cee:	0249      	lsls	r1, r1, #9
 8000cf0:	20ff      	movs	r0, #255	; 0xff
 8000cf2:	0a49      	lsrs	r1, r1, #9
 8000cf4:	e7ca      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	20ff      	movs	r0, #255	; 0xff
 8000cfc:	03c9      	lsls	r1, r1, #15
 8000cfe:	e7c5      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000d00:	20ff      	movs	r0, #255	; 0xff
 8000d02:	2100      	movs	r1, #0
 8000d04:	e7c2      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	4649      	mov	r1, r9
 8000d0a:	0424      	lsls	r4, r4, #16
 8000d0c:	0c24      	lsrs	r4, r4, #16
 8000d0e:	0027      	movs	r7, r4
 8000d10:	0c0e      	lsrs	r6, r1, #16
 8000d12:	0409      	lsls	r1, r1, #16
 8000d14:	0c09      	lsrs	r1, r1, #16
 8000d16:	4374      	muls	r4, r6
 8000d18:	434f      	muls	r7, r1
 8000d1a:	4346      	muls	r6, r0
 8000d1c:	4348      	muls	r0, r1
 8000d1e:	0c39      	lsrs	r1, r7, #16
 8000d20:	1900      	adds	r0, r0, r4
 8000d22:	1809      	adds	r1, r1, r0
 8000d24:	428c      	cmp	r4, r1
 8000d26:	d903      	bls.n	8000d30 <__aeabi_fmul+0x148>
 8000d28:	2080      	movs	r0, #128	; 0x80
 8000d2a:	0240      	lsls	r0, r0, #9
 8000d2c:	4684      	mov	ip, r0
 8000d2e:	4466      	add	r6, ip
 8000d30:	043f      	lsls	r7, r7, #16
 8000d32:	0408      	lsls	r0, r1, #16
 8000d34:	0c3f      	lsrs	r7, r7, #16
 8000d36:	19c0      	adds	r0, r0, r7
 8000d38:	0184      	lsls	r4, r0, #6
 8000d3a:	1e67      	subs	r7, r4, #1
 8000d3c:	41bc      	sbcs	r4, r7
 8000d3e:	0c09      	lsrs	r1, r1, #16
 8000d40:	0e80      	lsrs	r0, r0, #26
 8000d42:	1989      	adds	r1, r1, r6
 8000d44:	4304      	orrs	r4, r0
 8000d46:	0189      	lsls	r1, r1, #6
 8000d48:	430c      	orrs	r4, r1
 8000d4a:	0109      	lsls	r1, r1, #4
 8000d4c:	d571      	bpl.n	8000e32 <__aeabi_fmul+0x24a>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	0861      	lsrs	r1, r4, #1
 8000d52:	401c      	ands	r4, r3
 8000d54:	430c      	orrs	r4, r1
 8000d56:	002b      	movs	r3, r5
 8000d58:	337f      	adds	r3, #127	; 0x7f
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	dd51      	ble.n	8000e02 <__aeabi_fmul+0x21a>
 8000d5e:	0761      	lsls	r1, r4, #29
 8000d60:	d004      	beq.n	8000d6c <__aeabi_fmul+0x184>
 8000d62:	210f      	movs	r1, #15
 8000d64:	4021      	ands	r1, r4
 8000d66:	2904      	cmp	r1, #4
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fmul+0x184>
 8000d6a:	3404      	adds	r4, #4
 8000d6c:	0121      	lsls	r1, r4, #4
 8000d6e:	d503      	bpl.n	8000d78 <__aeabi_fmul+0x190>
 8000d70:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <__aeabi_fmul+0x298>)
 8000d72:	401c      	ands	r4, r3
 8000d74:	002b      	movs	r3, r5
 8000d76:	3380      	adds	r3, #128	; 0x80
 8000d78:	2bfe      	cmp	r3, #254	; 0xfe
 8000d7a:	dcc1      	bgt.n	8000d00 <__aeabi_fmul+0x118>
 8000d7c:	01a1      	lsls	r1, r4, #6
 8000d7e:	0a49      	lsrs	r1, r1, #9
 8000d80:	b2d8      	uxtb	r0, r3
 8000d82:	e783      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000d84:	2c00      	cmp	r4, #0
 8000d86:	d12c      	bne.n	8000de2 <__aeabi_fmul+0x1fa>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	002b      	movs	r3, r5
 8000d90:	407a      	eors	r2, r7
 8000d92:	2001      	movs	r0, #1
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	1c5d      	adds	r5, r3, #1
 8000d98:	2e0a      	cmp	r6, #10
 8000d9a:	dd00      	ble.n	8000d9e <__aeabi_fmul+0x1b6>
 8000d9c:	e757      	b.n	8000c4e <__aeabi_fmul+0x66>
 8000d9e:	e76a      	b.n	8000c76 <__aeabi_fmul+0x8e>
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d110      	bne.n	8000dc6 <__aeabi_fmul+0x1de>
 8000da4:	2301      	movs	r3, #1
 8000da6:	2604      	movs	r6, #4
 8000da8:	2500      	movs	r5, #0
 8000daa:	469a      	mov	sl, r3
 8000dac:	e738      	b.n	8000c20 <__aeabi_fmul+0x38>
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d104      	bne.n	8000dbc <__aeabi_fmul+0x1d4>
 8000db2:	2302      	movs	r3, #2
 8000db4:	2608      	movs	r6, #8
 8000db6:	25ff      	movs	r5, #255	; 0xff
 8000db8:	469a      	mov	sl, r3
 8000dba:	e731      	b.n	8000c20 <__aeabi_fmul+0x38>
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	260c      	movs	r6, #12
 8000dc0:	25ff      	movs	r5, #255	; 0xff
 8000dc2:	469a      	mov	sl, r3
 8000dc4:	e72c      	b.n	8000c20 <__aeabi_fmul+0x38>
 8000dc6:	4648      	mov	r0, r9
 8000dc8:	f002 f984 	bl	80030d4 <__clzsi2>
 8000dcc:	464a      	mov	r2, r9
 8000dce:	1f43      	subs	r3, r0, #5
 8000dd0:	2576      	movs	r5, #118	; 0x76
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	426d      	negs	r5, r5
 8000dd8:	4691      	mov	r9, r2
 8000dda:	2600      	movs	r6, #0
 8000ddc:	469a      	mov	sl, r3
 8000dde:	1a2d      	subs	r5, r5, r0
 8000de0:	e71e      	b.n	8000c20 <__aeabi_fmul+0x38>
 8000de2:	0020      	movs	r0, r4
 8000de4:	f002 f976 	bl	80030d4 <__clzsi2>
 8000de8:	4642      	mov	r2, r8
 8000dea:	1f43      	subs	r3, r0, #5
 8000dec:	409c      	lsls	r4, r3
 8000dee:	1a2b      	subs	r3, r5, r0
 8000df0:	3b76      	subs	r3, #118	; 0x76
 8000df2:	407a      	eors	r2, r7
 8000df4:	2000      	movs	r0, #0
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	1c5d      	adds	r5, r3, #1
 8000dfa:	2e0a      	cmp	r6, #10
 8000dfc:	dd00      	ble.n	8000e00 <__aeabi_fmul+0x218>
 8000dfe:	e726      	b.n	8000c4e <__aeabi_fmul+0x66>
 8000e00:	e739      	b.n	8000c76 <__aeabi_fmul+0x8e>
 8000e02:	2101      	movs	r1, #1
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	2b1b      	cmp	r3, #27
 8000e08:	dd00      	ble.n	8000e0c <__aeabi_fmul+0x224>
 8000e0a:	e73d      	b.n	8000c88 <__aeabi_fmul+0xa0>
 8000e0c:	359e      	adds	r5, #158	; 0x9e
 8000e0e:	0021      	movs	r1, r4
 8000e10:	40ac      	lsls	r4, r5
 8000e12:	40d9      	lsrs	r1, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4321      	orrs	r1, r4
 8000e1a:	074b      	lsls	r3, r1, #29
 8000e1c:	d004      	beq.n	8000e28 <__aeabi_fmul+0x240>
 8000e1e:	230f      	movs	r3, #15
 8000e20:	400b      	ands	r3, r1
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d000      	beq.n	8000e28 <__aeabi_fmul+0x240>
 8000e26:	3104      	adds	r1, #4
 8000e28:	014b      	lsls	r3, r1, #5
 8000e2a:	d504      	bpl.n	8000e36 <__aeabi_fmul+0x24e>
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	2100      	movs	r1, #0
 8000e30:	e72c      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000e32:	001d      	movs	r5, r3
 8000e34:	e78f      	b.n	8000d56 <__aeabi_fmul+0x16e>
 8000e36:	0189      	lsls	r1, r1, #6
 8000e38:	2000      	movs	r0, #0
 8000e3a:	0a49      	lsrs	r1, r1, #9
 8000e3c:	e726      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	2e0f      	cmp	r6, #15
 8000e42:	d10c      	bne.n	8000e5e <__aeabi_fmul+0x276>
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	464b      	mov	r3, r9
 8000e48:	03c9      	lsls	r1, r1, #15
 8000e4a:	420b      	tst	r3, r1
 8000e4c:	d00d      	beq.n	8000e6a <__aeabi_fmul+0x282>
 8000e4e:	420c      	tst	r4, r1
 8000e50:	d10b      	bne.n	8000e6a <__aeabi_fmul+0x282>
 8000e52:	4321      	orrs	r1, r4
 8000e54:	0249      	lsls	r1, r1, #9
 8000e56:	003a      	movs	r2, r7
 8000e58:	20ff      	movs	r0, #255	; 0xff
 8000e5a:	0a49      	lsrs	r1, r1, #9
 8000e5c:	e716      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000e5e:	2e0b      	cmp	r6, #11
 8000e60:	d000      	beq.n	8000e64 <__aeabi_fmul+0x27c>
 8000e62:	e6f7      	b.n	8000c54 <__aeabi_fmul+0x6c>
 8000e64:	46a1      	mov	r9, r4
 8000e66:	469a      	mov	sl, r3
 8000e68:	e736      	b.n	8000cd8 <__aeabi_fmul+0xf0>
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	03c9      	lsls	r1, r1, #15
 8000e70:	4319      	orrs	r1, r3
 8000e72:	0249      	lsls	r1, r1, #9
 8000e74:	4642      	mov	r2, r8
 8000e76:	20ff      	movs	r0, #255	; 0xff
 8000e78:	0a49      	lsrs	r1, r1, #9
 8000e7a:	e707      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e7df      	b.n	8000e40 <__aeabi_fmul+0x258>
 8000e80:	f7ffffff 	.word	0xf7ffffff

08000e84 <__aeabi_fsub>:
 8000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e86:	46c6      	mov	lr, r8
 8000e88:	0243      	lsls	r3, r0, #9
 8000e8a:	0a5b      	lsrs	r3, r3, #9
 8000e8c:	0045      	lsls	r5, r0, #1
 8000e8e:	00da      	lsls	r2, r3, #3
 8000e90:	0fc4      	lsrs	r4, r0, #31
 8000e92:	0248      	lsls	r0, r1, #9
 8000e94:	004f      	lsls	r7, r1, #1
 8000e96:	4694      	mov	ip, r2
 8000e98:	0a42      	lsrs	r2, r0, #9
 8000e9a:	001e      	movs	r6, r3
 8000e9c:	4690      	mov	r8, r2
 8000e9e:	b500      	push	{lr}
 8000ea0:	0e2d      	lsrs	r5, r5, #24
 8000ea2:	0e3f      	lsrs	r7, r7, #24
 8000ea4:	0fc9      	lsrs	r1, r1, #31
 8000ea6:	0980      	lsrs	r0, r0, #6
 8000ea8:	2fff      	cmp	r7, #255	; 0xff
 8000eaa:	d059      	beq.n	8000f60 <__aeabi_fsub+0xdc>
 8000eac:	2201      	movs	r2, #1
 8000eae:	4051      	eors	r1, r2
 8000eb0:	428c      	cmp	r4, r1
 8000eb2:	d039      	beq.n	8000f28 <__aeabi_fsub+0xa4>
 8000eb4:	1bea      	subs	r2, r5, r7
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	dd58      	ble.n	8000f6c <__aeabi_fsub+0xe8>
 8000eba:	2f00      	cmp	r7, #0
 8000ebc:	d068      	beq.n	8000f90 <__aeabi_fsub+0x10c>
 8000ebe:	2dff      	cmp	r5, #255	; 0xff
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_fsub+0x40>
 8000ec2:	e0d1      	b.n	8001068 <__aeabi_fsub+0x1e4>
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	04db      	lsls	r3, r3, #19
 8000ec8:	4318      	orrs	r0, r3
 8000eca:	2a1b      	cmp	r2, #27
 8000ecc:	dc00      	bgt.n	8000ed0 <__aeabi_fsub+0x4c>
 8000ece:	e0e3      	b.n	8001098 <__aeabi_fsub+0x214>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	4662      	mov	r2, ip
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	015a      	lsls	r2, r3, #5
 8000ed8:	d400      	bmi.n	8000edc <__aeabi_fsub+0x58>
 8000eda:	e0ac      	b.n	8001036 <__aeabi_fsub+0x1b2>
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	099e      	lsrs	r6, r3, #6
 8000ee0:	0030      	movs	r0, r6
 8000ee2:	f002 f8f7 	bl	80030d4 <__clzsi2>
 8000ee6:	0033      	movs	r3, r6
 8000ee8:	3805      	subs	r0, #5
 8000eea:	4083      	lsls	r3, r0
 8000eec:	4285      	cmp	r5, r0
 8000eee:	dc00      	bgt.n	8000ef2 <__aeabi_fsub+0x6e>
 8000ef0:	e0c6      	b.n	8001080 <__aeabi_fsub+0x1fc>
 8000ef2:	4ab2      	ldr	r2, [pc, #712]	; (80011bc <__aeabi_fsub+0x338>)
 8000ef4:	1a2d      	subs	r5, r5, r0
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	075a      	lsls	r2, r3, #29
 8000efa:	d004      	beq.n	8000f06 <__aeabi_fsub+0x82>
 8000efc:	220f      	movs	r2, #15
 8000efe:	401a      	ands	r2, r3
 8000f00:	2a04      	cmp	r2, #4
 8000f02:	d000      	beq.n	8000f06 <__aeabi_fsub+0x82>
 8000f04:	3304      	adds	r3, #4
 8000f06:	015a      	lsls	r2, r3, #5
 8000f08:	d400      	bmi.n	8000f0c <__aeabi_fsub+0x88>
 8000f0a:	e097      	b.n	800103c <__aeabi_fsub+0x1b8>
 8000f0c:	1c6a      	adds	r2, r5, #1
 8000f0e:	2dfe      	cmp	r5, #254	; 0xfe
 8000f10:	d100      	bne.n	8000f14 <__aeabi_fsub+0x90>
 8000f12:	e084      	b.n	800101e <__aeabi_fsub+0x19a>
 8000f14:	019b      	lsls	r3, r3, #6
 8000f16:	0a5e      	lsrs	r6, r3, #9
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	05d0      	lsls	r0, r2, #23
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	07e4      	lsls	r4, r4, #31
 8000f20:	4320      	orrs	r0, r4
 8000f22:	bc80      	pop	{r7}
 8000f24:	46b8      	mov	r8, r7
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	1bea      	subs	r2, r5, r7
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	dd41      	ble.n	8000fb2 <__aeabi_fsub+0x12e>
 8000f2e:	2f00      	cmp	r7, #0
 8000f30:	d06b      	beq.n	800100a <__aeabi_fsub+0x186>
 8000f32:	2dff      	cmp	r5, #255	; 0xff
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0xb4>
 8000f36:	e097      	b.n	8001068 <__aeabi_fsub+0x1e4>
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	4318      	orrs	r0, r3
 8000f3e:	2a1b      	cmp	r2, #27
 8000f40:	dc00      	bgt.n	8000f44 <__aeabi_fsub+0xc0>
 8000f42:	e0cc      	b.n	80010de <__aeabi_fsub+0x25a>
 8000f44:	2301      	movs	r3, #1
 8000f46:	4463      	add	r3, ip
 8000f48:	015a      	lsls	r2, r3, #5
 8000f4a:	d574      	bpl.n	8001036 <__aeabi_fsub+0x1b2>
 8000f4c:	3501      	adds	r5, #1
 8000f4e:	2dff      	cmp	r5, #255	; 0xff
 8000f50:	d065      	beq.n	800101e <__aeabi_fsub+0x19a>
 8000f52:	2201      	movs	r2, #1
 8000f54:	499a      	ldr	r1, [pc, #616]	; (80011c0 <__aeabi_fsub+0x33c>)
 8000f56:	401a      	ands	r2, r3
 8000f58:	085b      	lsrs	r3, r3, #1
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	e7cb      	b.n	8000ef8 <__aeabi_fsub+0x74>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d01f      	beq.n	8000fa4 <__aeabi_fsub+0x120>
 8000f64:	428c      	cmp	r4, r1
 8000f66:	d022      	beq.n	8000fae <__aeabi_fsub+0x12a>
 8000f68:	002a      	movs	r2, r5
 8000f6a:	3aff      	subs	r2, #255	; 0xff
 8000f6c:	2a00      	cmp	r2, #0
 8000f6e:	d035      	beq.n	8000fdc <__aeabi_fsub+0x158>
 8000f70:	1b7a      	subs	r2, r7, r5
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	d000      	beq.n	8000f78 <__aeabi_fsub+0xf4>
 8000f76:	e099      	b.n	80010ac <__aeabi_fsub+0x228>
 8000f78:	4663      	mov	r3, ip
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0xfc>
 8000f7e:	e0dd      	b.n	800113c <__aeabi_fsub+0x2b8>
 8000f80:	1e53      	subs	r3, r2, #1
 8000f82:	2a01      	cmp	r2, #1
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x104>
 8000f86:	e105      	b.n	8001194 <__aeabi_fsub+0x310>
 8000f88:	2aff      	cmp	r2, #255	; 0xff
 8000f8a:	d06b      	beq.n	8001064 <__aeabi_fsub+0x1e0>
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	e094      	b.n	80010ba <__aeabi_fsub+0x236>
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d073      	beq.n	800107c <__aeabi_fsub+0x1f8>
 8000f94:	1e51      	subs	r1, r2, #1
 8000f96:	2a01      	cmp	r2, #1
 8000f98:	d100      	bne.n	8000f9c <__aeabi_fsub+0x118>
 8000f9a:	e0df      	b.n	800115c <__aeabi_fsub+0x2d8>
 8000f9c:	2aff      	cmp	r2, #255	; 0xff
 8000f9e:	d063      	beq.n	8001068 <__aeabi_fsub+0x1e4>
 8000fa0:	000a      	movs	r2, r1
 8000fa2:	e792      	b.n	8000eca <__aeabi_fsub+0x46>
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4051      	eors	r1, r2
 8000fa8:	42a1      	cmp	r1, r4
 8000faa:	d000      	beq.n	8000fae <__aeabi_fsub+0x12a>
 8000fac:	e782      	b.n	8000eb4 <__aeabi_fsub+0x30>
 8000fae:	002a      	movs	r2, r5
 8000fb0:	3aff      	subs	r2, #255	; 0xff
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	d036      	beq.n	8001024 <__aeabi_fsub+0x1a0>
 8000fb6:	1b7a      	subs	r2, r7, r5
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fsub+0x13a>
 8000fbc:	e0aa      	b.n	8001114 <__aeabi_fsub+0x290>
 8000fbe:	2fff      	cmp	r7, #255	; 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x140>
 8000fc2:	e0da      	b.n	800117a <__aeabi_fsub+0x2f6>
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	4661      	mov	r1, ip
 8000fc8:	04db      	lsls	r3, r3, #19
 8000fca:	4319      	orrs	r1, r3
 8000fcc:	468c      	mov	ip, r1
 8000fce:	2a1b      	cmp	r2, #27
 8000fd0:	dc00      	bgt.n	8000fd4 <__aeabi_fsub+0x150>
 8000fd2:	e0d4      	b.n	800117e <__aeabi_fsub+0x2fa>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	003d      	movs	r5, r7
 8000fd8:	181b      	adds	r3, r3, r0
 8000fda:	e7b5      	b.n	8000f48 <__aeabi_fsub+0xc4>
 8000fdc:	27fe      	movs	r7, #254	; 0xfe
 8000fde:	1c6a      	adds	r2, r5, #1
 8000fe0:	4217      	tst	r7, r2
 8000fe2:	d171      	bne.n	80010c8 <__aeabi_fsub+0x244>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0x166>
 8000fe8:	e09e      	b.n	8001128 <__aeabi_fsub+0x2a4>
 8000fea:	4663      	mov	r3, ip
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_fsub+0x16e>
 8000ff0:	e0d5      	b.n	800119e <__aeabi_fsub+0x31a>
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x176>
 8000ff8:	e78f      	b.n	8000f1a <__aeabi_fsub+0x96>
 8000ffa:	1a1b      	subs	r3, r3, r0
 8000ffc:	015e      	lsls	r6, r3, #5
 8000ffe:	d400      	bmi.n	8001002 <__aeabi_fsub+0x17e>
 8001000:	e0d6      	b.n	80011b0 <__aeabi_fsub+0x32c>
 8001002:	4663      	mov	r3, ip
 8001004:	000c      	movs	r4, r1
 8001006:	1ac3      	subs	r3, r0, r3
 8001008:	e776      	b.n	8000ef8 <__aeabi_fsub+0x74>
 800100a:	2800      	cmp	r0, #0
 800100c:	d036      	beq.n	800107c <__aeabi_fsub+0x1f8>
 800100e:	1e51      	subs	r1, r2, #1
 8001010:	2a01      	cmp	r2, #1
 8001012:	d100      	bne.n	8001016 <__aeabi_fsub+0x192>
 8001014:	e09a      	b.n	800114c <__aeabi_fsub+0x2c8>
 8001016:	2aff      	cmp	r2, #255	; 0xff
 8001018:	d026      	beq.n	8001068 <__aeabi_fsub+0x1e4>
 800101a:	000a      	movs	r2, r1
 800101c:	e78f      	b.n	8000f3e <__aeabi_fsub+0xba>
 800101e:	22ff      	movs	r2, #255	; 0xff
 8001020:	2600      	movs	r6, #0
 8001022:	e77a      	b.n	8000f1a <__aeabi_fsub+0x96>
 8001024:	27fe      	movs	r7, #254	; 0xfe
 8001026:	1c6a      	adds	r2, r5, #1
 8001028:	4217      	tst	r7, r2
 800102a:	d062      	beq.n	80010f2 <__aeabi_fsub+0x26e>
 800102c:	2aff      	cmp	r2, #255	; 0xff
 800102e:	d0f6      	beq.n	800101e <__aeabi_fsub+0x19a>
 8001030:	0015      	movs	r5, r2
 8001032:	4460      	add	r0, ip
 8001034:	0843      	lsrs	r3, r0, #1
 8001036:	075a      	lsls	r2, r3, #29
 8001038:	d000      	beq.n	800103c <__aeabi_fsub+0x1b8>
 800103a:	e75f      	b.n	8000efc <__aeabi_fsub+0x78>
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	2dff      	cmp	r5, #255	; 0xff
 8001040:	d012      	beq.n	8001068 <__aeabi_fsub+0x1e4>
 8001042:	025b      	lsls	r3, r3, #9
 8001044:	0a5e      	lsrs	r6, r3, #9
 8001046:	b2ea      	uxtb	r2, r5
 8001048:	e767      	b.n	8000f1a <__aeabi_fsub+0x96>
 800104a:	4662      	mov	r2, ip
 800104c:	2a00      	cmp	r2, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x1ce>
 8001050:	e093      	b.n	800117a <__aeabi_fsub+0x2f6>
 8001052:	2800      	cmp	r0, #0
 8001054:	d008      	beq.n	8001068 <__aeabi_fsub+0x1e4>
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	03d2      	lsls	r2, r2, #15
 800105a:	4213      	tst	r3, r2
 800105c:	d004      	beq.n	8001068 <__aeabi_fsub+0x1e4>
 800105e:	4640      	mov	r0, r8
 8001060:	4210      	tst	r0, r2
 8001062:	d101      	bne.n	8001068 <__aeabi_fsub+0x1e4>
 8001064:	000c      	movs	r4, r1
 8001066:	4643      	mov	r3, r8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0d8      	beq.n	800101e <__aeabi_fsub+0x19a>
 800106c:	2680      	movs	r6, #128	; 0x80
 800106e:	03f6      	lsls	r6, r6, #15
 8001070:	431e      	orrs	r6, r3
 8001072:	0276      	lsls	r6, r6, #9
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	0a76      	lsrs	r6, r6, #9
 8001078:	e74f      	b.n	8000f1a <__aeabi_fsub+0x96>
 800107a:	4643      	mov	r3, r8
 800107c:	0015      	movs	r5, r2
 800107e:	e7de      	b.n	800103e <__aeabi_fsub+0x1ba>
 8001080:	2220      	movs	r2, #32
 8001082:	1b40      	subs	r0, r0, r5
 8001084:	3001      	adds	r0, #1
 8001086:	1a12      	subs	r2, r2, r0
 8001088:	0019      	movs	r1, r3
 800108a:	4093      	lsls	r3, r2
 800108c:	40c1      	lsrs	r1, r0
 800108e:	1e5a      	subs	r2, r3, #1
 8001090:	4193      	sbcs	r3, r2
 8001092:	2500      	movs	r5, #0
 8001094:	430b      	orrs	r3, r1
 8001096:	e72f      	b.n	8000ef8 <__aeabi_fsub+0x74>
 8001098:	2320      	movs	r3, #32
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	0001      	movs	r1, r0
 800109e:	4098      	lsls	r0, r3
 80010a0:	0003      	movs	r3, r0
 80010a2:	40d1      	lsrs	r1, r2
 80010a4:	1e5a      	subs	r2, r3, #1
 80010a6:	4193      	sbcs	r3, r2
 80010a8:	430b      	orrs	r3, r1
 80010aa:	e712      	b.n	8000ed2 <__aeabi_fsub+0x4e>
 80010ac:	2fff      	cmp	r7, #255	; 0xff
 80010ae:	d0d9      	beq.n	8001064 <__aeabi_fsub+0x1e0>
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	4664      	mov	r4, ip
 80010b4:	04db      	lsls	r3, r3, #19
 80010b6:	431c      	orrs	r4, r3
 80010b8:	46a4      	mov	ip, r4
 80010ba:	2a1b      	cmp	r2, #27
 80010bc:	dd52      	ble.n	8001164 <__aeabi_fsub+0x2e0>
 80010be:	2301      	movs	r3, #1
 80010c0:	000c      	movs	r4, r1
 80010c2:	003d      	movs	r5, r7
 80010c4:	1ac3      	subs	r3, r0, r3
 80010c6:	e706      	b.n	8000ed6 <__aeabi_fsub+0x52>
 80010c8:	4663      	mov	r3, ip
 80010ca:	1a1e      	subs	r6, r3, r0
 80010cc:	0173      	lsls	r3, r6, #5
 80010ce:	d439      	bmi.n	8001144 <__aeabi_fsub+0x2c0>
 80010d0:	2e00      	cmp	r6, #0
 80010d2:	d000      	beq.n	80010d6 <__aeabi_fsub+0x252>
 80010d4:	e704      	b.n	8000ee0 <__aeabi_fsub+0x5c>
 80010d6:	2400      	movs	r4, #0
 80010d8:	2200      	movs	r2, #0
 80010da:	2600      	movs	r6, #0
 80010dc:	e71d      	b.n	8000f1a <__aeabi_fsub+0x96>
 80010de:	2320      	movs	r3, #32
 80010e0:	1a9b      	subs	r3, r3, r2
 80010e2:	0001      	movs	r1, r0
 80010e4:	4098      	lsls	r0, r3
 80010e6:	0003      	movs	r3, r0
 80010e8:	40d1      	lsrs	r1, r2
 80010ea:	1e5a      	subs	r2, r3, #1
 80010ec:	4193      	sbcs	r3, r2
 80010ee:	430b      	orrs	r3, r1
 80010f0:	e729      	b.n	8000f46 <__aeabi_fsub+0xc2>
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d1a9      	bne.n	800104a <__aeabi_fsub+0x1c6>
 80010f6:	4663      	mov	r3, ip
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d056      	beq.n	80011aa <__aeabi_fsub+0x326>
 80010fc:	2200      	movs	r2, #0
 80010fe:	2800      	cmp	r0, #0
 8001100:	d100      	bne.n	8001104 <__aeabi_fsub+0x280>
 8001102:	e70a      	b.n	8000f1a <__aeabi_fsub+0x96>
 8001104:	0003      	movs	r3, r0
 8001106:	4463      	add	r3, ip
 8001108:	015a      	lsls	r2, r3, #5
 800110a:	d594      	bpl.n	8001036 <__aeabi_fsub+0x1b2>
 800110c:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <__aeabi_fsub+0x338>)
 800110e:	3501      	adds	r5, #1
 8001110:	4013      	ands	r3, r2
 8001112:	e790      	b.n	8001036 <__aeabi_fsub+0x1b2>
 8001114:	4663      	mov	r3, ip
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0af      	beq.n	800107a <__aeabi_fsub+0x1f6>
 800111a:	1e53      	subs	r3, r2, #1
 800111c:	2a01      	cmp	r2, #1
 800111e:	d015      	beq.n	800114c <__aeabi_fsub+0x2c8>
 8001120:	2aff      	cmp	r2, #255	; 0xff
 8001122:	d02a      	beq.n	800117a <__aeabi_fsub+0x2f6>
 8001124:	001a      	movs	r2, r3
 8001126:	e752      	b.n	8000fce <__aeabi_fsub+0x14a>
 8001128:	4662      	mov	r2, ip
 800112a:	2a00      	cmp	r2, #0
 800112c:	d191      	bne.n	8001052 <__aeabi_fsub+0x1ce>
 800112e:	2800      	cmp	r0, #0
 8001130:	d198      	bne.n	8001064 <__aeabi_fsub+0x1e0>
 8001132:	2680      	movs	r6, #128	; 0x80
 8001134:	2400      	movs	r4, #0
 8001136:	22ff      	movs	r2, #255	; 0xff
 8001138:	03f6      	lsls	r6, r6, #15
 800113a:	e6ee      	b.n	8000f1a <__aeabi_fsub+0x96>
 800113c:	000c      	movs	r4, r1
 800113e:	4643      	mov	r3, r8
 8001140:	0015      	movs	r5, r2
 8001142:	e77c      	b.n	800103e <__aeabi_fsub+0x1ba>
 8001144:	4663      	mov	r3, ip
 8001146:	000c      	movs	r4, r1
 8001148:	1ac6      	subs	r6, r0, r3
 800114a:	e6c9      	b.n	8000ee0 <__aeabi_fsub+0x5c>
 800114c:	0003      	movs	r3, r0
 800114e:	4463      	add	r3, ip
 8001150:	2501      	movs	r5, #1
 8001152:	015a      	lsls	r2, r3, #5
 8001154:	d400      	bmi.n	8001158 <__aeabi_fsub+0x2d4>
 8001156:	e76e      	b.n	8001036 <__aeabi_fsub+0x1b2>
 8001158:	2502      	movs	r5, #2
 800115a:	e6fa      	b.n	8000f52 <__aeabi_fsub+0xce>
 800115c:	4663      	mov	r3, ip
 800115e:	2501      	movs	r5, #1
 8001160:	1a1b      	subs	r3, r3, r0
 8001162:	e6b8      	b.n	8000ed6 <__aeabi_fsub+0x52>
 8001164:	4664      	mov	r4, ip
 8001166:	2320      	movs	r3, #32
 8001168:	40d4      	lsrs	r4, r2
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	4662      	mov	r2, ip
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	1e5a      	subs	r2, r3, #1
 8001174:	4193      	sbcs	r3, r2
 8001176:	4323      	orrs	r3, r4
 8001178:	e7a2      	b.n	80010c0 <__aeabi_fsub+0x23c>
 800117a:	4643      	mov	r3, r8
 800117c:	e774      	b.n	8001068 <__aeabi_fsub+0x1e4>
 800117e:	4661      	mov	r1, ip
 8001180:	2320      	movs	r3, #32
 8001182:	40d1      	lsrs	r1, r2
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	4662      	mov	r2, ip
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e720      	b.n	8000fd6 <__aeabi_fsub+0x152>
 8001194:	4663      	mov	r3, ip
 8001196:	000c      	movs	r4, r1
 8001198:	2501      	movs	r5, #1
 800119a:	1ac3      	subs	r3, r0, r3
 800119c:	e69b      	b.n	8000ed6 <__aeabi_fsub+0x52>
 800119e:	2800      	cmp	r0, #0
 80011a0:	d099      	beq.n	80010d6 <__aeabi_fsub+0x252>
 80011a2:	000c      	movs	r4, r1
 80011a4:	4646      	mov	r6, r8
 80011a6:	2200      	movs	r2, #0
 80011a8:	e6b7      	b.n	8000f1a <__aeabi_fsub+0x96>
 80011aa:	4646      	mov	r6, r8
 80011ac:	2200      	movs	r2, #0
 80011ae:	e6b4      	b.n	8000f1a <__aeabi_fsub+0x96>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d000      	beq.n	80011b6 <__aeabi_fsub+0x332>
 80011b4:	e73f      	b.n	8001036 <__aeabi_fsub+0x1b2>
 80011b6:	2400      	movs	r4, #0
 80011b8:	2600      	movs	r6, #0
 80011ba:	e6ae      	b.n	8000f1a <__aeabi_fsub+0x96>
 80011bc:	fbffffff 	.word	0xfbffffff
 80011c0:	7dffffff 	.word	0x7dffffff

080011c4 <__aeabi_f2iz>:
 80011c4:	0241      	lsls	r1, r0, #9
 80011c6:	0042      	lsls	r2, r0, #1
 80011c8:	0fc3      	lsrs	r3, r0, #31
 80011ca:	0a49      	lsrs	r1, r1, #9
 80011cc:	2000      	movs	r0, #0
 80011ce:	0e12      	lsrs	r2, r2, #24
 80011d0:	2a7e      	cmp	r2, #126	; 0x7e
 80011d2:	dd03      	ble.n	80011dc <__aeabi_f2iz+0x18>
 80011d4:	2a9d      	cmp	r2, #157	; 0x9d
 80011d6:	dd02      	ble.n	80011de <__aeabi_f2iz+0x1a>
 80011d8:	4a09      	ldr	r2, [pc, #36]	; (8001200 <__aeabi_f2iz+0x3c>)
 80011da:	1898      	adds	r0, r3, r2
 80011dc:	4770      	bx	lr
 80011de:	2080      	movs	r0, #128	; 0x80
 80011e0:	0400      	lsls	r0, r0, #16
 80011e2:	4301      	orrs	r1, r0
 80011e4:	2a95      	cmp	r2, #149	; 0x95
 80011e6:	dc07      	bgt.n	80011f8 <__aeabi_f2iz+0x34>
 80011e8:	2096      	movs	r0, #150	; 0x96
 80011ea:	1a82      	subs	r2, r0, r2
 80011ec:	40d1      	lsrs	r1, r2
 80011ee:	4248      	negs	r0, r1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f3      	bne.n	80011dc <__aeabi_f2iz+0x18>
 80011f4:	0008      	movs	r0, r1
 80011f6:	e7f1      	b.n	80011dc <__aeabi_f2iz+0x18>
 80011f8:	3a96      	subs	r2, #150	; 0x96
 80011fa:	4091      	lsls	r1, r2
 80011fc:	e7f7      	b.n	80011ee <__aeabi_f2iz+0x2a>
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	7fffffff 	.word	0x7fffffff

08001204 <__aeabi_i2f>:
 8001204:	b570      	push	{r4, r5, r6, lr}
 8001206:	2800      	cmp	r0, #0
 8001208:	d013      	beq.n	8001232 <__aeabi_i2f+0x2e>
 800120a:	17c3      	asrs	r3, r0, #31
 800120c:	18c5      	adds	r5, r0, r3
 800120e:	405d      	eors	r5, r3
 8001210:	0fc4      	lsrs	r4, r0, #31
 8001212:	0028      	movs	r0, r5
 8001214:	f001 ff5e 	bl	80030d4 <__clzsi2>
 8001218:	239e      	movs	r3, #158	; 0x9e
 800121a:	0001      	movs	r1, r0
 800121c:	1a1b      	subs	r3, r3, r0
 800121e:	2b96      	cmp	r3, #150	; 0x96
 8001220:	dc0f      	bgt.n	8001242 <__aeabi_i2f+0x3e>
 8001222:	2808      	cmp	r0, #8
 8001224:	d031      	beq.n	800128a <__aeabi_i2f+0x86>
 8001226:	3908      	subs	r1, #8
 8001228:	408d      	lsls	r5, r1
 800122a:	026d      	lsls	r5, r5, #9
 800122c:	0a6d      	lsrs	r5, r5, #9
 800122e:	b2d8      	uxtb	r0, r3
 8001230:	e002      	b.n	8001238 <__aeabi_i2f+0x34>
 8001232:	2400      	movs	r4, #0
 8001234:	2000      	movs	r0, #0
 8001236:	2500      	movs	r5, #0
 8001238:	05c0      	lsls	r0, r0, #23
 800123a:	4328      	orrs	r0, r5
 800123c:	07e4      	lsls	r4, r4, #31
 800123e:	4320      	orrs	r0, r4
 8001240:	bd70      	pop	{r4, r5, r6, pc}
 8001242:	2b99      	cmp	r3, #153	; 0x99
 8001244:	dd0c      	ble.n	8001260 <__aeabi_i2f+0x5c>
 8001246:	2205      	movs	r2, #5
 8001248:	1a12      	subs	r2, r2, r0
 800124a:	0028      	movs	r0, r5
 800124c:	40d0      	lsrs	r0, r2
 800124e:	0002      	movs	r2, r0
 8001250:	0008      	movs	r0, r1
 8001252:	301b      	adds	r0, #27
 8001254:	4085      	lsls	r5, r0
 8001256:	0028      	movs	r0, r5
 8001258:	1e45      	subs	r5, r0, #1
 800125a:	41a8      	sbcs	r0, r5
 800125c:	4302      	orrs	r2, r0
 800125e:	0015      	movs	r5, r2
 8001260:	2905      	cmp	r1, #5
 8001262:	dc16      	bgt.n	8001292 <__aeabi_i2f+0x8e>
 8001264:	002a      	movs	r2, r5
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <__aeabi_i2f+0xa0>)
 8001268:	4002      	ands	r2, r0
 800126a:	076e      	lsls	r6, r5, #29
 800126c:	d009      	beq.n	8001282 <__aeabi_i2f+0x7e>
 800126e:	260f      	movs	r6, #15
 8001270:	4035      	ands	r5, r6
 8001272:	2d04      	cmp	r5, #4
 8001274:	d005      	beq.n	8001282 <__aeabi_i2f+0x7e>
 8001276:	3204      	adds	r2, #4
 8001278:	0155      	lsls	r5, r2, #5
 800127a:	d502      	bpl.n	8001282 <__aeabi_i2f+0x7e>
 800127c:	239f      	movs	r3, #159	; 0x9f
 800127e:	4002      	ands	r2, r0
 8001280:	1a5b      	subs	r3, r3, r1
 8001282:	0192      	lsls	r2, r2, #6
 8001284:	0a55      	lsrs	r5, r2, #9
 8001286:	b2d8      	uxtb	r0, r3
 8001288:	e7d6      	b.n	8001238 <__aeabi_i2f+0x34>
 800128a:	026d      	lsls	r5, r5, #9
 800128c:	2096      	movs	r0, #150	; 0x96
 800128e:	0a6d      	lsrs	r5, r5, #9
 8001290:	e7d2      	b.n	8001238 <__aeabi_i2f+0x34>
 8001292:	1f4a      	subs	r2, r1, #5
 8001294:	4095      	lsls	r5, r2
 8001296:	002a      	movs	r2, r5
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <__aeabi_i2f+0xa0>)
 800129a:	4002      	ands	r2, r0
 800129c:	076e      	lsls	r6, r5, #29
 800129e:	d0f0      	beq.n	8001282 <__aeabi_i2f+0x7e>
 80012a0:	e7e5      	b.n	800126e <__aeabi_i2f+0x6a>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	fbffffff 	.word	0xfbffffff

080012a8 <__aeabi_dadd>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	464f      	mov	r7, r9
 80012ac:	4646      	mov	r6, r8
 80012ae:	46d6      	mov	lr, sl
 80012b0:	0004      	movs	r4, r0
 80012b2:	b5c0      	push	{r6, r7, lr}
 80012b4:	001f      	movs	r7, r3
 80012b6:	030b      	lsls	r3, r1, #12
 80012b8:	0010      	movs	r0, r2
 80012ba:	004e      	lsls	r6, r1, #1
 80012bc:	0a5b      	lsrs	r3, r3, #9
 80012be:	0fcd      	lsrs	r5, r1, #31
 80012c0:	0f61      	lsrs	r1, r4, #29
 80012c2:	007a      	lsls	r2, r7, #1
 80012c4:	4319      	orrs	r1, r3
 80012c6:	00e3      	lsls	r3, r4, #3
 80012c8:	033c      	lsls	r4, r7, #12
 80012ca:	0fff      	lsrs	r7, r7, #31
 80012cc:	46bc      	mov	ip, r7
 80012ce:	0a64      	lsrs	r4, r4, #9
 80012d0:	0f47      	lsrs	r7, r0, #29
 80012d2:	4327      	orrs	r7, r4
 80012d4:	0d76      	lsrs	r6, r6, #21
 80012d6:	0d52      	lsrs	r2, r2, #21
 80012d8:	00c0      	lsls	r0, r0, #3
 80012da:	46b9      	mov	r9, r7
 80012dc:	4680      	mov	r8, r0
 80012de:	1ab7      	subs	r7, r6, r2
 80012e0:	4565      	cmp	r5, ip
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dadd+0x3e>
 80012e4:	e09b      	b.n	800141e <__aeabi_dadd+0x176>
 80012e6:	2f00      	cmp	r7, #0
 80012e8:	dc00      	bgt.n	80012ec <__aeabi_dadd+0x44>
 80012ea:	e084      	b.n	80013f6 <__aeabi_dadd+0x14e>
 80012ec:	2a00      	cmp	r2, #0
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dadd+0x4a>
 80012f0:	e0be      	b.n	8001470 <__aeabi_dadd+0x1c8>
 80012f2:	4ac8      	ldr	r2, [pc, #800]	; (8001614 <__aeabi_dadd+0x36c>)
 80012f4:	4296      	cmp	r6, r2
 80012f6:	d100      	bne.n	80012fa <__aeabi_dadd+0x52>
 80012f8:	e124      	b.n	8001544 <__aeabi_dadd+0x29c>
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	464c      	mov	r4, r9
 80012fe:	0412      	lsls	r2, r2, #16
 8001300:	4314      	orrs	r4, r2
 8001302:	46a1      	mov	r9, r4
 8001304:	2f38      	cmp	r7, #56	; 0x38
 8001306:	dd00      	ble.n	800130a <__aeabi_dadd+0x62>
 8001308:	e167      	b.n	80015da <__aeabi_dadd+0x332>
 800130a:	2f1f      	cmp	r7, #31
 800130c:	dd00      	ble.n	8001310 <__aeabi_dadd+0x68>
 800130e:	e1d6      	b.n	80016be <__aeabi_dadd+0x416>
 8001310:	2220      	movs	r2, #32
 8001312:	464c      	mov	r4, r9
 8001314:	1bd2      	subs	r2, r2, r7
 8001316:	4094      	lsls	r4, r2
 8001318:	46a2      	mov	sl, r4
 800131a:	4644      	mov	r4, r8
 800131c:	40fc      	lsrs	r4, r7
 800131e:	0020      	movs	r0, r4
 8001320:	4654      	mov	r4, sl
 8001322:	4304      	orrs	r4, r0
 8001324:	4640      	mov	r0, r8
 8001326:	4090      	lsls	r0, r2
 8001328:	1e42      	subs	r2, r0, #1
 800132a:	4190      	sbcs	r0, r2
 800132c:	464a      	mov	r2, r9
 800132e:	40fa      	lsrs	r2, r7
 8001330:	4304      	orrs	r4, r0
 8001332:	1a89      	subs	r1, r1, r2
 8001334:	1b1c      	subs	r4, r3, r4
 8001336:	42a3      	cmp	r3, r4
 8001338:	4192      	sbcs	r2, r2
 800133a:	4252      	negs	r2, r2
 800133c:	1a8b      	subs	r3, r1, r2
 800133e:	469a      	mov	sl, r3
 8001340:	4653      	mov	r3, sl
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	d400      	bmi.n	8001348 <__aeabi_dadd+0xa0>
 8001346:	e0d4      	b.n	80014f2 <__aeabi_dadd+0x24a>
 8001348:	4653      	mov	r3, sl
 800134a:	025a      	lsls	r2, r3, #9
 800134c:	0a53      	lsrs	r3, r2, #9
 800134e:	469a      	mov	sl, r3
 8001350:	4653      	mov	r3, sl
 8001352:	2b00      	cmp	r3, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0xb0>
 8001356:	e104      	b.n	8001562 <__aeabi_dadd+0x2ba>
 8001358:	4650      	mov	r0, sl
 800135a:	f001 febb 	bl	80030d4 <__clzsi2>
 800135e:	0003      	movs	r3, r0
 8001360:	3b08      	subs	r3, #8
 8001362:	2220      	movs	r2, #32
 8001364:	0020      	movs	r0, r4
 8001366:	1ad2      	subs	r2, r2, r3
 8001368:	4651      	mov	r1, sl
 800136a:	40d0      	lsrs	r0, r2
 800136c:	4099      	lsls	r1, r3
 800136e:	0002      	movs	r2, r0
 8001370:	409c      	lsls	r4, r3
 8001372:	430a      	orrs	r2, r1
 8001374:	42b3      	cmp	r3, r6
 8001376:	da00      	bge.n	800137a <__aeabi_dadd+0xd2>
 8001378:	e102      	b.n	8001580 <__aeabi_dadd+0x2d8>
 800137a:	1b9b      	subs	r3, r3, r6
 800137c:	1c59      	adds	r1, r3, #1
 800137e:	291f      	cmp	r1, #31
 8001380:	dd00      	ble.n	8001384 <__aeabi_dadd+0xdc>
 8001382:	e0a7      	b.n	80014d4 <__aeabi_dadd+0x22c>
 8001384:	2320      	movs	r3, #32
 8001386:	0010      	movs	r0, r2
 8001388:	0026      	movs	r6, r4
 800138a:	1a5b      	subs	r3, r3, r1
 800138c:	409c      	lsls	r4, r3
 800138e:	4098      	lsls	r0, r3
 8001390:	40ce      	lsrs	r6, r1
 8001392:	40ca      	lsrs	r2, r1
 8001394:	1e63      	subs	r3, r4, #1
 8001396:	419c      	sbcs	r4, r3
 8001398:	4330      	orrs	r0, r6
 800139a:	4692      	mov	sl, r2
 800139c:	2600      	movs	r6, #0
 800139e:	4304      	orrs	r4, r0
 80013a0:	0763      	lsls	r3, r4, #29
 80013a2:	d009      	beq.n	80013b8 <__aeabi_dadd+0x110>
 80013a4:	230f      	movs	r3, #15
 80013a6:	4023      	ands	r3, r4
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d005      	beq.n	80013b8 <__aeabi_dadd+0x110>
 80013ac:	1d23      	adds	r3, r4, #4
 80013ae:	42a3      	cmp	r3, r4
 80013b0:	41a4      	sbcs	r4, r4
 80013b2:	4264      	negs	r4, r4
 80013b4:	44a2      	add	sl, r4
 80013b6:	001c      	movs	r4, r3
 80013b8:	4653      	mov	r3, sl
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	d400      	bmi.n	80013c0 <__aeabi_dadd+0x118>
 80013be:	e09b      	b.n	80014f8 <__aeabi_dadd+0x250>
 80013c0:	4b94      	ldr	r3, [pc, #592]	; (8001614 <__aeabi_dadd+0x36c>)
 80013c2:	3601      	adds	r6, #1
 80013c4:	429e      	cmp	r6, r3
 80013c6:	d100      	bne.n	80013ca <__aeabi_dadd+0x122>
 80013c8:	e0b8      	b.n	800153c <__aeabi_dadd+0x294>
 80013ca:	4653      	mov	r3, sl
 80013cc:	4992      	ldr	r1, [pc, #584]	; (8001618 <__aeabi_dadd+0x370>)
 80013ce:	08e4      	lsrs	r4, r4, #3
 80013d0:	400b      	ands	r3, r1
 80013d2:	0019      	movs	r1, r3
 80013d4:	075b      	lsls	r3, r3, #29
 80013d6:	4323      	orrs	r3, r4
 80013d8:	0572      	lsls	r2, r6, #21
 80013da:	024c      	lsls	r4, r1, #9
 80013dc:	0b24      	lsrs	r4, r4, #12
 80013de:	0d52      	lsrs	r2, r2, #21
 80013e0:	0512      	lsls	r2, r2, #20
 80013e2:	07ed      	lsls	r5, r5, #31
 80013e4:	4322      	orrs	r2, r4
 80013e6:	432a      	orrs	r2, r5
 80013e8:	0018      	movs	r0, r3
 80013ea:	0011      	movs	r1, r2
 80013ec:	bce0      	pop	{r5, r6, r7}
 80013ee:	46ba      	mov	sl, r7
 80013f0:	46b1      	mov	r9, r6
 80013f2:	46a8      	mov	r8, r5
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	2f00      	cmp	r7, #0
 80013f8:	d048      	beq.n	800148c <__aeabi_dadd+0x1e4>
 80013fa:	1b97      	subs	r7, r2, r6
 80013fc:	2e00      	cmp	r6, #0
 80013fe:	d000      	beq.n	8001402 <__aeabi_dadd+0x15a>
 8001400:	e10e      	b.n	8001620 <__aeabi_dadd+0x378>
 8001402:	000c      	movs	r4, r1
 8001404:	431c      	orrs	r4, r3
 8001406:	d100      	bne.n	800140a <__aeabi_dadd+0x162>
 8001408:	e1b7      	b.n	800177a <__aeabi_dadd+0x4d2>
 800140a:	1e7c      	subs	r4, r7, #1
 800140c:	2f01      	cmp	r7, #1
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x16a>
 8001410:	e226      	b.n	8001860 <__aeabi_dadd+0x5b8>
 8001412:	4d80      	ldr	r5, [pc, #512]	; (8001614 <__aeabi_dadd+0x36c>)
 8001414:	42af      	cmp	r7, r5
 8001416:	d100      	bne.n	800141a <__aeabi_dadd+0x172>
 8001418:	e1d5      	b.n	80017c6 <__aeabi_dadd+0x51e>
 800141a:	0027      	movs	r7, r4
 800141c:	e107      	b.n	800162e <__aeabi_dadd+0x386>
 800141e:	2f00      	cmp	r7, #0
 8001420:	dc00      	bgt.n	8001424 <__aeabi_dadd+0x17c>
 8001422:	e0b2      	b.n	800158a <__aeabi_dadd+0x2e2>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d047      	beq.n	80014b8 <__aeabi_dadd+0x210>
 8001428:	4a7a      	ldr	r2, [pc, #488]	; (8001614 <__aeabi_dadd+0x36c>)
 800142a:	4296      	cmp	r6, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dadd+0x188>
 800142e:	e089      	b.n	8001544 <__aeabi_dadd+0x29c>
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	464c      	mov	r4, r9
 8001434:	0412      	lsls	r2, r2, #16
 8001436:	4314      	orrs	r4, r2
 8001438:	46a1      	mov	r9, r4
 800143a:	2f38      	cmp	r7, #56	; 0x38
 800143c:	dc6b      	bgt.n	8001516 <__aeabi_dadd+0x26e>
 800143e:	2f1f      	cmp	r7, #31
 8001440:	dc00      	bgt.n	8001444 <__aeabi_dadd+0x19c>
 8001442:	e16e      	b.n	8001722 <__aeabi_dadd+0x47a>
 8001444:	003a      	movs	r2, r7
 8001446:	4648      	mov	r0, r9
 8001448:	3a20      	subs	r2, #32
 800144a:	40d0      	lsrs	r0, r2
 800144c:	4684      	mov	ip, r0
 800144e:	2f20      	cmp	r7, #32
 8001450:	d007      	beq.n	8001462 <__aeabi_dadd+0x1ba>
 8001452:	2240      	movs	r2, #64	; 0x40
 8001454:	4648      	mov	r0, r9
 8001456:	1bd2      	subs	r2, r2, r7
 8001458:	4090      	lsls	r0, r2
 800145a:	0002      	movs	r2, r0
 800145c:	4640      	mov	r0, r8
 800145e:	4310      	orrs	r0, r2
 8001460:	4680      	mov	r8, r0
 8001462:	4640      	mov	r0, r8
 8001464:	1e42      	subs	r2, r0, #1
 8001466:	4190      	sbcs	r0, r2
 8001468:	4662      	mov	r2, ip
 800146a:	0004      	movs	r4, r0
 800146c:	4314      	orrs	r4, r2
 800146e:	e057      	b.n	8001520 <__aeabi_dadd+0x278>
 8001470:	464a      	mov	r2, r9
 8001472:	4302      	orrs	r2, r0
 8001474:	d100      	bne.n	8001478 <__aeabi_dadd+0x1d0>
 8001476:	e103      	b.n	8001680 <__aeabi_dadd+0x3d8>
 8001478:	1e7a      	subs	r2, r7, #1
 800147a:	2f01      	cmp	r7, #1
 800147c:	d100      	bne.n	8001480 <__aeabi_dadd+0x1d8>
 800147e:	e193      	b.n	80017a8 <__aeabi_dadd+0x500>
 8001480:	4c64      	ldr	r4, [pc, #400]	; (8001614 <__aeabi_dadd+0x36c>)
 8001482:	42a7      	cmp	r7, r4
 8001484:	d100      	bne.n	8001488 <__aeabi_dadd+0x1e0>
 8001486:	e18a      	b.n	800179e <__aeabi_dadd+0x4f6>
 8001488:	0017      	movs	r7, r2
 800148a:	e73b      	b.n	8001304 <__aeabi_dadd+0x5c>
 800148c:	4c63      	ldr	r4, [pc, #396]	; (800161c <__aeabi_dadd+0x374>)
 800148e:	1c72      	adds	r2, r6, #1
 8001490:	4222      	tst	r2, r4
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x1ee>
 8001494:	e0e0      	b.n	8001658 <__aeabi_dadd+0x3b0>
 8001496:	000a      	movs	r2, r1
 8001498:	431a      	orrs	r2, r3
 800149a:	2e00      	cmp	r6, #0
 800149c:	d000      	beq.n	80014a0 <__aeabi_dadd+0x1f8>
 800149e:	e174      	b.n	800178a <__aeabi_dadd+0x4e2>
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dadd+0x1fe>
 80014a4:	e1d0      	b.n	8001848 <__aeabi_dadd+0x5a0>
 80014a6:	464a      	mov	r2, r9
 80014a8:	4302      	orrs	r2, r0
 80014aa:	d000      	beq.n	80014ae <__aeabi_dadd+0x206>
 80014ac:	e1e3      	b.n	8001876 <__aeabi_dadd+0x5ce>
 80014ae:	074a      	lsls	r2, r1, #29
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	08c9      	lsrs	r1, r1, #3
 80014b6:	e029      	b.n	800150c <__aeabi_dadd+0x264>
 80014b8:	464a      	mov	r2, r9
 80014ba:	4302      	orrs	r2, r0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dadd+0x218>
 80014be:	e17d      	b.n	80017bc <__aeabi_dadd+0x514>
 80014c0:	1e7a      	subs	r2, r7, #1
 80014c2:	2f01      	cmp	r7, #1
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dadd+0x220>
 80014c6:	e0e0      	b.n	800168a <__aeabi_dadd+0x3e2>
 80014c8:	4c52      	ldr	r4, [pc, #328]	; (8001614 <__aeabi_dadd+0x36c>)
 80014ca:	42a7      	cmp	r7, r4
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0x228>
 80014ce:	e166      	b.n	800179e <__aeabi_dadd+0x4f6>
 80014d0:	0017      	movs	r7, r2
 80014d2:	e7b2      	b.n	800143a <__aeabi_dadd+0x192>
 80014d4:	0010      	movs	r0, r2
 80014d6:	3b1f      	subs	r3, #31
 80014d8:	40d8      	lsrs	r0, r3
 80014da:	2920      	cmp	r1, #32
 80014dc:	d003      	beq.n	80014e6 <__aeabi_dadd+0x23e>
 80014de:	2340      	movs	r3, #64	; 0x40
 80014e0:	1a5b      	subs	r3, r3, r1
 80014e2:	409a      	lsls	r2, r3
 80014e4:	4314      	orrs	r4, r2
 80014e6:	1e63      	subs	r3, r4, #1
 80014e8:	419c      	sbcs	r4, r3
 80014ea:	2300      	movs	r3, #0
 80014ec:	2600      	movs	r6, #0
 80014ee:	469a      	mov	sl, r3
 80014f0:	4304      	orrs	r4, r0
 80014f2:	0763      	lsls	r3, r4, #29
 80014f4:	d000      	beq.n	80014f8 <__aeabi_dadd+0x250>
 80014f6:	e755      	b.n	80013a4 <__aeabi_dadd+0xfc>
 80014f8:	4652      	mov	r2, sl
 80014fa:	08e3      	lsrs	r3, r4, #3
 80014fc:	0752      	lsls	r2, r2, #29
 80014fe:	4313      	orrs	r3, r2
 8001500:	4652      	mov	r2, sl
 8001502:	0037      	movs	r7, r6
 8001504:	08d1      	lsrs	r1, r2, #3
 8001506:	4a43      	ldr	r2, [pc, #268]	; (8001614 <__aeabi_dadd+0x36c>)
 8001508:	4297      	cmp	r7, r2
 800150a:	d01f      	beq.n	800154c <__aeabi_dadd+0x2a4>
 800150c:	0309      	lsls	r1, r1, #12
 800150e:	057a      	lsls	r2, r7, #21
 8001510:	0b0c      	lsrs	r4, r1, #12
 8001512:	0d52      	lsrs	r2, r2, #21
 8001514:	e764      	b.n	80013e0 <__aeabi_dadd+0x138>
 8001516:	4642      	mov	r2, r8
 8001518:	464c      	mov	r4, r9
 800151a:	4314      	orrs	r4, r2
 800151c:	1e62      	subs	r2, r4, #1
 800151e:	4194      	sbcs	r4, r2
 8001520:	18e4      	adds	r4, r4, r3
 8001522:	429c      	cmp	r4, r3
 8001524:	4192      	sbcs	r2, r2
 8001526:	4252      	negs	r2, r2
 8001528:	4692      	mov	sl, r2
 800152a:	448a      	add	sl, r1
 800152c:	4653      	mov	r3, sl
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	d5df      	bpl.n	80014f2 <__aeabi_dadd+0x24a>
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <__aeabi_dadd+0x36c>)
 8001534:	3601      	adds	r6, #1
 8001536:	429e      	cmp	r6, r3
 8001538:	d000      	beq.n	800153c <__aeabi_dadd+0x294>
 800153a:	e0b3      	b.n	80016a4 <__aeabi_dadd+0x3fc>
 800153c:	0032      	movs	r2, r6
 800153e:	2400      	movs	r4, #0
 8001540:	2300      	movs	r3, #0
 8001542:	e74d      	b.n	80013e0 <__aeabi_dadd+0x138>
 8001544:	074a      	lsls	r2, r1, #29
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	4313      	orrs	r3, r2
 800154a:	08c9      	lsrs	r1, r1, #3
 800154c:	001a      	movs	r2, r3
 800154e:	430a      	orrs	r2, r1
 8001550:	d100      	bne.n	8001554 <__aeabi_dadd+0x2ac>
 8001552:	e200      	b.n	8001956 <__aeabi_dadd+0x6ae>
 8001554:	2480      	movs	r4, #128	; 0x80
 8001556:	0324      	lsls	r4, r4, #12
 8001558:	430c      	orrs	r4, r1
 800155a:	0324      	lsls	r4, r4, #12
 800155c:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <__aeabi_dadd+0x36c>)
 800155e:	0b24      	lsrs	r4, r4, #12
 8001560:	e73e      	b.n	80013e0 <__aeabi_dadd+0x138>
 8001562:	0020      	movs	r0, r4
 8001564:	f001 fdb6 	bl	80030d4 <__clzsi2>
 8001568:	0003      	movs	r3, r0
 800156a:	3318      	adds	r3, #24
 800156c:	2b1f      	cmp	r3, #31
 800156e:	dc00      	bgt.n	8001572 <__aeabi_dadd+0x2ca>
 8001570:	e6f7      	b.n	8001362 <__aeabi_dadd+0xba>
 8001572:	0022      	movs	r2, r4
 8001574:	3808      	subs	r0, #8
 8001576:	4082      	lsls	r2, r0
 8001578:	2400      	movs	r4, #0
 800157a:	42b3      	cmp	r3, r6
 800157c:	db00      	blt.n	8001580 <__aeabi_dadd+0x2d8>
 800157e:	e6fc      	b.n	800137a <__aeabi_dadd+0xd2>
 8001580:	1af6      	subs	r6, r6, r3
 8001582:	4b25      	ldr	r3, [pc, #148]	; (8001618 <__aeabi_dadd+0x370>)
 8001584:	401a      	ands	r2, r3
 8001586:	4692      	mov	sl, r2
 8001588:	e70a      	b.n	80013a0 <__aeabi_dadd+0xf8>
 800158a:	2f00      	cmp	r7, #0
 800158c:	d02b      	beq.n	80015e6 <__aeabi_dadd+0x33e>
 800158e:	1b97      	subs	r7, r2, r6
 8001590:	2e00      	cmp	r6, #0
 8001592:	d100      	bne.n	8001596 <__aeabi_dadd+0x2ee>
 8001594:	e0b8      	b.n	8001708 <__aeabi_dadd+0x460>
 8001596:	4c1f      	ldr	r4, [pc, #124]	; (8001614 <__aeabi_dadd+0x36c>)
 8001598:	42a2      	cmp	r2, r4
 800159a:	d100      	bne.n	800159e <__aeabi_dadd+0x2f6>
 800159c:	e11c      	b.n	80017d8 <__aeabi_dadd+0x530>
 800159e:	2480      	movs	r4, #128	; 0x80
 80015a0:	0424      	lsls	r4, r4, #16
 80015a2:	4321      	orrs	r1, r4
 80015a4:	2f38      	cmp	r7, #56	; 0x38
 80015a6:	dd00      	ble.n	80015aa <__aeabi_dadd+0x302>
 80015a8:	e11e      	b.n	80017e8 <__aeabi_dadd+0x540>
 80015aa:	2f1f      	cmp	r7, #31
 80015ac:	dd00      	ble.n	80015b0 <__aeabi_dadd+0x308>
 80015ae:	e19e      	b.n	80018ee <__aeabi_dadd+0x646>
 80015b0:	2620      	movs	r6, #32
 80015b2:	000c      	movs	r4, r1
 80015b4:	1bf6      	subs	r6, r6, r7
 80015b6:	0018      	movs	r0, r3
 80015b8:	40b3      	lsls	r3, r6
 80015ba:	40b4      	lsls	r4, r6
 80015bc:	40f8      	lsrs	r0, r7
 80015be:	1e5e      	subs	r6, r3, #1
 80015c0:	41b3      	sbcs	r3, r6
 80015c2:	40f9      	lsrs	r1, r7
 80015c4:	4304      	orrs	r4, r0
 80015c6:	431c      	orrs	r4, r3
 80015c8:	4489      	add	r9, r1
 80015ca:	4444      	add	r4, r8
 80015cc:	4544      	cmp	r4, r8
 80015ce:	419b      	sbcs	r3, r3
 80015d0:	425b      	negs	r3, r3
 80015d2:	444b      	add	r3, r9
 80015d4:	469a      	mov	sl, r3
 80015d6:	0016      	movs	r6, r2
 80015d8:	e7a8      	b.n	800152c <__aeabi_dadd+0x284>
 80015da:	4642      	mov	r2, r8
 80015dc:	464c      	mov	r4, r9
 80015de:	4314      	orrs	r4, r2
 80015e0:	1e62      	subs	r2, r4, #1
 80015e2:	4194      	sbcs	r4, r2
 80015e4:	e6a6      	b.n	8001334 <__aeabi_dadd+0x8c>
 80015e6:	4c0d      	ldr	r4, [pc, #52]	; (800161c <__aeabi_dadd+0x374>)
 80015e8:	1c72      	adds	r2, r6, #1
 80015ea:	4222      	tst	r2, r4
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dadd+0x348>
 80015ee:	e0a8      	b.n	8001742 <__aeabi_dadd+0x49a>
 80015f0:	000a      	movs	r2, r1
 80015f2:	431a      	orrs	r2, r3
 80015f4:	2e00      	cmp	r6, #0
 80015f6:	d000      	beq.n	80015fa <__aeabi_dadd+0x352>
 80015f8:	e10a      	b.n	8001810 <__aeabi_dadd+0x568>
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x358>
 80015fe:	e15e      	b.n	80018be <__aeabi_dadd+0x616>
 8001600:	464a      	mov	r2, r9
 8001602:	4302      	orrs	r2, r0
 8001604:	d000      	beq.n	8001608 <__aeabi_dadd+0x360>
 8001606:	e161      	b.n	80018cc <__aeabi_dadd+0x624>
 8001608:	074a      	lsls	r2, r1, #29
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	4313      	orrs	r3, r2
 800160e:	08c9      	lsrs	r1, r1, #3
 8001610:	e77c      	b.n	800150c <__aeabi_dadd+0x264>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	000007ff 	.word	0x000007ff
 8001618:	ff7fffff 	.word	0xff7fffff
 800161c:	000007fe 	.word	0x000007fe
 8001620:	4ccf      	ldr	r4, [pc, #828]	; (8001960 <__aeabi_dadd+0x6b8>)
 8001622:	42a2      	cmp	r2, r4
 8001624:	d100      	bne.n	8001628 <__aeabi_dadd+0x380>
 8001626:	e0ce      	b.n	80017c6 <__aeabi_dadd+0x51e>
 8001628:	2480      	movs	r4, #128	; 0x80
 800162a:	0424      	lsls	r4, r4, #16
 800162c:	4321      	orrs	r1, r4
 800162e:	2f38      	cmp	r7, #56	; 0x38
 8001630:	dc5b      	bgt.n	80016ea <__aeabi_dadd+0x442>
 8001632:	2f1f      	cmp	r7, #31
 8001634:	dd00      	ble.n	8001638 <__aeabi_dadd+0x390>
 8001636:	e0dc      	b.n	80017f2 <__aeabi_dadd+0x54a>
 8001638:	2520      	movs	r5, #32
 800163a:	000c      	movs	r4, r1
 800163c:	1bed      	subs	r5, r5, r7
 800163e:	001e      	movs	r6, r3
 8001640:	40ab      	lsls	r3, r5
 8001642:	40ac      	lsls	r4, r5
 8001644:	40fe      	lsrs	r6, r7
 8001646:	1e5d      	subs	r5, r3, #1
 8001648:	41ab      	sbcs	r3, r5
 800164a:	4334      	orrs	r4, r6
 800164c:	40f9      	lsrs	r1, r7
 800164e:	431c      	orrs	r4, r3
 8001650:	464b      	mov	r3, r9
 8001652:	1a5b      	subs	r3, r3, r1
 8001654:	4699      	mov	r9, r3
 8001656:	e04c      	b.n	80016f2 <__aeabi_dadd+0x44a>
 8001658:	464a      	mov	r2, r9
 800165a:	1a1c      	subs	r4, r3, r0
 800165c:	1a88      	subs	r0, r1, r2
 800165e:	42a3      	cmp	r3, r4
 8001660:	4192      	sbcs	r2, r2
 8001662:	4252      	negs	r2, r2
 8001664:	4692      	mov	sl, r2
 8001666:	0002      	movs	r2, r0
 8001668:	4650      	mov	r0, sl
 800166a:	1a12      	subs	r2, r2, r0
 800166c:	4692      	mov	sl, r2
 800166e:	0212      	lsls	r2, r2, #8
 8001670:	d478      	bmi.n	8001764 <__aeabi_dadd+0x4bc>
 8001672:	4653      	mov	r3, sl
 8001674:	4323      	orrs	r3, r4
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x3d2>
 8001678:	e66a      	b.n	8001350 <__aeabi_dadd+0xa8>
 800167a:	2100      	movs	r1, #0
 800167c:	2500      	movs	r5, #0
 800167e:	e745      	b.n	800150c <__aeabi_dadd+0x264>
 8001680:	074a      	lsls	r2, r1, #29
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	4313      	orrs	r3, r2
 8001686:	08c9      	lsrs	r1, r1, #3
 8001688:	e73d      	b.n	8001506 <__aeabi_dadd+0x25e>
 800168a:	181c      	adds	r4, r3, r0
 800168c:	429c      	cmp	r4, r3
 800168e:	419b      	sbcs	r3, r3
 8001690:	4449      	add	r1, r9
 8001692:	468a      	mov	sl, r1
 8001694:	425b      	negs	r3, r3
 8001696:	449a      	add	sl, r3
 8001698:	4653      	mov	r3, sl
 800169a:	2601      	movs	r6, #1
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	d400      	bmi.n	80016a2 <__aeabi_dadd+0x3fa>
 80016a0:	e727      	b.n	80014f2 <__aeabi_dadd+0x24a>
 80016a2:	2602      	movs	r6, #2
 80016a4:	4652      	mov	r2, sl
 80016a6:	4baf      	ldr	r3, [pc, #700]	; (8001964 <__aeabi_dadd+0x6bc>)
 80016a8:	2101      	movs	r1, #1
 80016aa:	401a      	ands	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	4021      	ands	r1, r4
 80016b0:	0862      	lsrs	r2, r4, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	07dc      	lsls	r4, r3, #31
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	469a      	mov	sl, r3
 80016ba:	4314      	orrs	r4, r2
 80016bc:	e670      	b.n	80013a0 <__aeabi_dadd+0xf8>
 80016be:	003a      	movs	r2, r7
 80016c0:	464c      	mov	r4, r9
 80016c2:	3a20      	subs	r2, #32
 80016c4:	40d4      	lsrs	r4, r2
 80016c6:	46a4      	mov	ip, r4
 80016c8:	2f20      	cmp	r7, #32
 80016ca:	d007      	beq.n	80016dc <__aeabi_dadd+0x434>
 80016cc:	2240      	movs	r2, #64	; 0x40
 80016ce:	4648      	mov	r0, r9
 80016d0:	1bd2      	subs	r2, r2, r7
 80016d2:	4090      	lsls	r0, r2
 80016d4:	0002      	movs	r2, r0
 80016d6:	4640      	mov	r0, r8
 80016d8:	4310      	orrs	r0, r2
 80016da:	4680      	mov	r8, r0
 80016dc:	4640      	mov	r0, r8
 80016de:	1e42      	subs	r2, r0, #1
 80016e0:	4190      	sbcs	r0, r2
 80016e2:	4662      	mov	r2, ip
 80016e4:	0004      	movs	r4, r0
 80016e6:	4314      	orrs	r4, r2
 80016e8:	e624      	b.n	8001334 <__aeabi_dadd+0x8c>
 80016ea:	4319      	orrs	r1, r3
 80016ec:	000c      	movs	r4, r1
 80016ee:	1e63      	subs	r3, r4, #1
 80016f0:	419c      	sbcs	r4, r3
 80016f2:	4643      	mov	r3, r8
 80016f4:	1b1c      	subs	r4, r3, r4
 80016f6:	45a0      	cmp	r8, r4
 80016f8:	419b      	sbcs	r3, r3
 80016fa:	4649      	mov	r1, r9
 80016fc:	425b      	negs	r3, r3
 80016fe:	1acb      	subs	r3, r1, r3
 8001700:	469a      	mov	sl, r3
 8001702:	4665      	mov	r5, ip
 8001704:	0016      	movs	r6, r2
 8001706:	e61b      	b.n	8001340 <__aeabi_dadd+0x98>
 8001708:	000c      	movs	r4, r1
 800170a:	431c      	orrs	r4, r3
 800170c:	d100      	bne.n	8001710 <__aeabi_dadd+0x468>
 800170e:	e0c7      	b.n	80018a0 <__aeabi_dadd+0x5f8>
 8001710:	1e7c      	subs	r4, r7, #1
 8001712:	2f01      	cmp	r7, #1
 8001714:	d100      	bne.n	8001718 <__aeabi_dadd+0x470>
 8001716:	e0f9      	b.n	800190c <__aeabi_dadd+0x664>
 8001718:	4e91      	ldr	r6, [pc, #580]	; (8001960 <__aeabi_dadd+0x6b8>)
 800171a:	42b7      	cmp	r7, r6
 800171c:	d05c      	beq.n	80017d8 <__aeabi_dadd+0x530>
 800171e:	0027      	movs	r7, r4
 8001720:	e740      	b.n	80015a4 <__aeabi_dadd+0x2fc>
 8001722:	2220      	movs	r2, #32
 8001724:	464c      	mov	r4, r9
 8001726:	4640      	mov	r0, r8
 8001728:	1bd2      	subs	r2, r2, r7
 800172a:	4094      	lsls	r4, r2
 800172c:	40f8      	lsrs	r0, r7
 800172e:	4304      	orrs	r4, r0
 8001730:	4640      	mov	r0, r8
 8001732:	4090      	lsls	r0, r2
 8001734:	1e42      	subs	r2, r0, #1
 8001736:	4190      	sbcs	r0, r2
 8001738:	464a      	mov	r2, r9
 800173a:	40fa      	lsrs	r2, r7
 800173c:	4304      	orrs	r4, r0
 800173e:	1889      	adds	r1, r1, r2
 8001740:	e6ee      	b.n	8001520 <__aeabi_dadd+0x278>
 8001742:	4c87      	ldr	r4, [pc, #540]	; (8001960 <__aeabi_dadd+0x6b8>)
 8001744:	42a2      	cmp	r2, r4
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x4a2>
 8001748:	e6f9      	b.n	800153e <__aeabi_dadd+0x296>
 800174a:	1818      	adds	r0, r3, r0
 800174c:	4298      	cmp	r0, r3
 800174e:	419b      	sbcs	r3, r3
 8001750:	4449      	add	r1, r9
 8001752:	425b      	negs	r3, r3
 8001754:	18cb      	adds	r3, r1, r3
 8001756:	07dc      	lsls	r4, r3, #31
 8001758:	0840      	lsrs	r0, r0, #1
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	469a      	mov	sl, r3
 800175e:	0016      	movs	r6, r2
 8001760:	4304      	orrs	r4, r0
 8001762:	e6c6      	b.n	80014f2 <__aeabi_dadd+0x24a>
 8001764:	4642      	mov	r2, r8
 8001766:	1ad4      	subs	r4, r2, r3
 8001768:	45a0      	cmp	r8, r4
 800176a:	4180      	sbcs	r0, r0
 800176c:	464b      	mov	r3, r9
 800176e:	4240      	negs	r0, r0
 8001770:	1a59      	subs	r1, r3, r1
 8001772:	1a0b      	subs	r3, r1, r0
 8001774:	469a      	mov	sl, r3
 8001776:	4665      	mov	r5, ip
 8001778:	e5ea      	b.n	8001350 <__aeabi_dadd+0xa8>
 800177a:	464b      	mov	r3, r9
 800177c:	464a      	mov	r2, r9
 800177e:	08c0      	lsrs	r0, r0, #3
 8001780:	075b      	lsls	r3, r3, #29
 8001782:	4665      	mov	r5, ip
 8001784:	4303      	orrs	r3, r0
 8001786:	08d1      	lsrs	r1, r2, #3
 8001788:	e6bd      	b.n	8001506 <__aeabi_dadd+0x25e>
 800178a:	2a00      	cmp	r2, #0
 800178c:	d000      	beq.n	8001790 <__aeabi_dadd+0x4e8>
 800178e:	e08e      	b.n	80018ae <__aeabi_dadd+0x606>
 8001790:	464b      	mov	r3, r9
 8001792:	4303      	orrs	r3, r0
 8001794:	d117      	bne.n	80017c6 <__aeabi_dadd+0x51e>
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	2500      	movs	r5, #0
 800179a:	0309      	lsls	r1, r1, #12
 800179c:	e6da      	b.n	8001554 <__aeabi_dadd+0x2ac>
 800179e:	074a      	lsls	r2, r1, #29
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	08c9      	lsrs	r1, r1, #3
 80017a6:	e6d1      	b.n	800154c <__aeabi_dadd+0x2a4>
 80017a8:	1a1c      	subs	r4, r3, r0
 80017aa:	464a      	mov	r2, r9
 80017ac:	42a3      	cmp	r3, r4
 80017ae:	419b      	sbcs	r3, r3
 80017b0:	1a89      	subs	r1, r1, r2
 80017b2:	425b      	negs	r3, r3
 80017b4:	1acb      	subs	r3, r1, r3
 80017b6:	469a      	mov	sl, r3
 80017b8:	2601      	movs	r6, #1
 80017ba:	e5c1      	b.n	8001340 <__aeabi_dadd+0x98>
 80017bc:	074a      	lsls	r2, r1, #29
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	08c9      	lsrs	r1, r1, #3
 80017c4:	e69f      	b.n	8001506 <__aeabi_dadd+0x25e>
 80017c6:	4643      	mov	r3, r8
 80017c8:	08d8      	lsrs	r0, r3, #3
 80017ca:	464b      	mov	r3, r9
 80017cc:	464a      	mov	r2, r9
 80017ce:	075b      	lsls	r3, r3, #29
 80017d0:	4665      	mov	r5, ip
 80017d2:	4303      	orrs	r3, r0
 80017d4:	08d1      	lsrs	r1, r2, #3
 80017d6:	e6b9      	b.n	800154c <__aeabi_dadd+0x2a4>
 80017d8:	4643      	mov	r3, r8
 80017da:	08d8      	lsrs	r0, r3, #3
 80017dc:	464b      	mov	r3, r9
 80017de:	464a      	mov	r2, r9
 80017e0:	075b      	lsls	r3, r3, #29
 80017e2:	4303      	orrs	r3, r0
 80017e4:	08d1      	lsrs	r1, r2, #3
 80017e6:	e6b1      	b.n	800154c <__aeabi_dadd+0x2a4>
 80017e8:	4319      	orrs	r1, r3
 80017ea:	000c      	movs	r4, r1
 80017ec:	1e63      	subs	r3, r4, #1
 80017ee:	419c      	sbcs	r4, r3
 80017f0:	e6eb      	b.n	80015ca <__aeabi_dadd+0x322>
 80017f2:	003c      	movs	r4, r7
 80017f4:	000d      	movs	r5, r1
 80017f6:	3c20      	subs	r4, #32
 80017f8:	40e5      	lsrs	r5, r4
 80017fa:	2f20      	cmp	r7, #32
 80017fc:	d003      	beq.n	8001806 <__aeabi_dadd+0x55e>
 80017fe:	2440      	movs	r4, #64	; 0x40
 8001800:	1be4      	subs	r4, r4, r7
 8001802:	40a1      	lsls	r1, r4
 8001804:	430b      	orrs	r3, r1
 8001806:	001c      	movs	r4, r3
 8001808:	1e63      	subs	r3, r4, #1
 800180a:	419c      	sbcs	r4, r3
 800180c:	432c      	orrs	r4, r5
 800180e:	e770      	b.n	80016f2 <__aeabi_dadd+0x44a>
 8001810:	2a00      	cmp	r2, #0
 8001812:	d0e1      	beq.n	80017d8 <__aeabi_dadd+0x530>
 8001814:	464a      	mov	r2, r9
 8001816:	4302      	orrs	r2, r0
 8001818:	d0c1      	beq.n	800179e <__aeabi_dadd+0x4f6>
 800181a:	074a      	lsls	r2, r1, #29
 800181c:	08db      	lsrs	r3, r3, #3
 800181e:	4313      	orrs	r3, r2
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	08c9      	lsrs	r1, r1, #3
 8001824:	0312      	lsls	r2, r2, #12
 8001826:	4211      	tst	r1, r2
 8001828:	d008      	beq.n	800183c <__aeabi_dadd+0x594>
 800182a:	4648      	mov	r0, r9
 800182c:	08c4      	lsrs	r4, r0, #3
 800182e:	4214      	tst	r4, r2
 8001830:	d104      	bne.n	800183c <__aeabi_dadd+0x594>
 8001832:	4643      	mov	r3, r8
 8001834:	0021      	movs	r1, r4
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	0742      	lsls	r2, r0, #29
 800183a:	4313      	orrs	r3, r2
 800183c:	0f5a      	lsrs	r2, r3, #29
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	0752      	lsls	r2, r2, #29
 8001842:	08db      	lsrs	r3, r3, #3
 8001844:	4313      	orrs	r3, r2
 8001846:	e681      	b.n	800154c <__aeabi_dadd+0x2a4>
 8001848:	464b      	mov	r3, r9
 800184a:	4303      	orrs	r3, r0
 800184c:	d100      	bne.n	8001850 <__aeabi_dadd+0x5a8>
 800184e:	e714      	b.n	800167a <__aeabi_dadd+0x3d2>
 8001850:	464b      	mov	r3, r9
 8001852:	464a      	mov	r2, r9
 8001854:	08c0      	lsrs	r0, r0, #3
 8001856:	075b      	lsls	r3, r3, #29
 8001858:	4665      	mov	r5, ip
 800185a:	4303      	orrs	r3, r0
 800185c:	08d1      	lsrs	r1, r2, #3
 800185e:	e655      	b.n	800150c <__aeabi_dadd+0x264>
 8001860:	1ac4      	subs	r4, r0, r3
 8001862:	45a0      	cmp	r8, r4
 8001864:	4180      	sbcs	r0, r0
 8001866:	464b      	mov	r3, r9
 8001868:	4240      	negs	r0, r0
 800186a:	1a59      	subs	r1, r3, r1
 800186c:	1a0b      	subs	r3, r1, r0
 800186e:	469a      	mov	sl, r3
 8001870:	4665      	mov	r5, ip
 8001872:	2601      	movs	r6, #1
 8001874:	e564      	b.n	8001340 <__aeabi_dadd+0x98>
 8001876:	1a1c      	subs	r4, r3, r0
 8001878:	464a      	mov	r2, r9
 800187a:	42a3      	cmp	r3, r4
 800187c:	4180      	sbcs	r0, r0
 800187e:	1a8a      	subs	r2, r1, r2
 8001880:	4240      	negs	r0, r0
 8001882:	1a12      	subs	r2, r2, r0
 8001884:	4692      	mov	sl, r2
 8001886:	0212      	lsls	r2, r2, #8
 8001888:	d549      	bpl.n	800191e <__aeabi_dadd+0x676>
 800188a:	4642      	mov	r2, r8
 800188c:	1ad4      	subs	r4, r2, r3
 800188e:	45a0      	cmp	r8, r4
 8001890:	4180      	sbcs	r0, r0
 8001892:	464b      	mov	r3, r9
 8001894:	4240      	negs	r0, r0
 8001896:	1a59      	subs	r1, r3, r1
 8001898:	1a0b      	subs	r3, r1, r0
 800189a:	469a      	mov	sl, r3
 800189c:	4665      	mov	r5, ip
 800189e:	e57f      	b.n	80013a0 <__aeabi_dadd+0xf8>
 80018a0:	464b      	mov	r3, r9
 80018a2:	464a      	mov	r2, r9
 80018a4:	08c0      	lsrs	r0, r0, #3
 80018a6:	075b      	lsls	r3, r3, #29
 80018a8:	4303      	orrs	r3, r0
 80018aa:	08d1      	lsrs	r1, r2, #3
 80018ac:	e62b      	b.n	8001506 <__aeabi_dadd+0x25e>
 80018ae:	464a      	mov	r2, r9
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	4302      	orrs	r2, r0
 80018b4:	d138      	bne.n	8001928 <__aeabi_dadd+0x680>
 80018b6:	074a      	lsls	r2, r1, #29
 80018b8:	4313      	orrs	r3, r2
 80018ba:	08c9      	lsrs	r1, r1, #3
 80018bc:	e646      	b.n	800154c <__aeabi_dadd+0x2a4>
 80018be:	464b      	mov	r3, r9
 80018c0:	464a      	mov	r2, r9
 80018c2:	08c0      	lsrs	r0, r0, #3
 80018c4:	075b      	lsls	r3, r3, #29
 80018c6:	4303      	orrs	r3, r0
 80018c8:	08d1      	lsrs	r1, r2, #3
 80018ca:	e61f      	b.n	800150c <__aeabi_dadd+0x264>
 80018cc:	181c      	adds	r4, r3, r0
 80018ce:	429c      	cmp	r4, r3
 80018d0:	419b      	sbcs	r3, r3
 80018d2:	4449      	add	r1, r9
 80018d4:	468a      	mov	sl, r1
 80018d6:	425b      	negs	r3, r3
 80018d8:	449a      	add	sl, r3
 80018da:	4653      	mov	r3, sl
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	d400      	bmi.n	80018e2 <__aeabi_dadd+0x63a>
 80018e0:	e607      	b.n	80014f2 <__aeabi_dadd+0x24a>
 80018e2:	4652      	mov	r2, sl
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <__aeabi_dadd+0x6bc>)
 80018e6:	2601      	movs	r6, #1
 80018e8:	401a      	ands	r2, r3
 80018ea:	4692      	mov	sl, r2
 80018ec:	e601      	b.n	80014f2 <__aeabi_dadd+0x24a>
 80018ee:	003c      	movs	r4, r7
 80018f0:	000e      	movs	r6, r1
 80018f2:	3c20      	subs	r4, #32
 80018f4:	40e6      	lsrs	r6, r4
 80018f6:	2f20      	cmp	r7, #32
 80018f8:	d003      	beq.n	8001902 <__aeabi_dadd+0x65a>
 80018fa:	2440      	movs	r4, #64	; 0x40
 80018fc:	1be4      	subs	r4, r4, r7
 80018fe:	40a1      	lsls	r1, r4
 8001900:	430b      	orrs	r3, r1
 8001902:	001c      	movs	r4, r3
 8001904:	1e63      	subs	r3, r4, #1
 8001906:	419c      	sbcs	r4, r3
 8001908:	4334      	orrs	r4, r6
 800190a:	e65e      	b.n	80015ca <__aeabi_dadd+0x322>
 800190c:	4443      	add	r3, r8
 800190e:	4283      	cmp	r3, r0
 8001910:	4180      	sbcs	r0, r0
 8001912:	4449      	add	r1, r9
 8001914:	468a      	mov	sl, r1
 8001916:	4240      	negs	r0, r0
 8001918:	001c      	movs	r4, r3
 800191a:	4482      	add	sl, r0
 800191c:	e6bc      	b.n	8001698 <__aeabi_dadd+0x3f0>
 800191e:	4653      	mov	r3, sl
 8001920:	4323      	orrs	r3, r4
 8001922:	d100      	bne.n	8001926 <__aeabi_dadd+0x67e>
 8001924:	e6a9      	b.n	800167a <__aeabi_dadd+0x3d2>
 8001926:	e5e4      	b.n	80014f2 <__aeabi_dadd+0x24a>
 8001928:	074a      	lsls	r2, r1, #29
 800192a:	4313      	orrs	r3, r2
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	08c9      	lsrs	r1, r1, #3
 8001930:	0312      	lsls	r2, r2, #12
 8001932:	4211      	tst	r1, r2
 8001934:	d009      	beq.n	800194a <__aeabi_dadd+0x6a2>
 8001936:	4648      	mov	r0, r9
 8001938:	08c4      	lsrs	r4, r0, #3
 800193a:	4214      	tst	r4, r2
 800193c:	d105      	bne.n	800194a <__aeabi_dadd+0x6a2>
 800193e:	4643      	mov	r3, r8
 8001940:	4665      	mov	r5, ip
 8001942:	0021      	movs	r1, r4
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	0742      	lsls	r2, r0, #29
 8001948:	4313      	orrs	r3, r2
 800194a:	0f5a      	lsrs	r2, r3, #29
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	08db      	lsrs	r3, r3, #3
 8001950:	0752      	lsls	r2, r2, #29
 8001952:	4313      	orrs	r3, r2
 8001954:	e5fa      	b.n	800154c <__aeabi_dadd+0x2a4>
 8001956:	2300      	movs	r3, #0
 8001958:	4a01      	ldr	r2, [pc, #4]	; (8001960 <__aeabi_dadd+0x6b8>)
 800195a:	001c      	movs	r4, r3
 800195c:	e540      	b.n	80013e0 <__aeabi_dadd+0x138>
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	000007ff 	.word	0x000007ff
 8001964:	ff7fffff 	.word	0xff7fffff

08001968 <__aeabi_ddiv>:
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	4657      	mov	r7, sl
 800196c:	464e      	mov	r6, r9
 800196e:	4645      	mov	r5, r8
 8001970:	46de      	mov	lr, fp
 8001972:	b5e0      	push	{r5, r6, r7, lr}
 8001974:	030c      	lsls	r4, r1, #12
 8001976:	001f      	movs	r7, r3
 8001978:	004b      	lsls	r3, r1, #1
 800197a:	4681      	mov	r9, r0
 800197c:	4692      	mov	sl, r2
 800197e:	0005      	movs	r5, r0
 8001980:	b085      	sub	sp, #20
 8001982:	0b24      	lsrs	r4, r4, #12
 8001984:	0d5b      	lsrs	r3, r3, #21
 8001986:	0fce      	lsrs	r6, r1, #31
 8001988:	2b00      	cmp	r3, #0
 800198a:	d100      	bne.n	800198e <__aeabi_ddiv+0x26>
 800198c:	e152      	b.n	8001c34 <__aeabi_ddiv+0x2cc>
 800198e:	4ad2      	ldr	r2, [pc, #840]	; (8001cd8 <__aeabi_ddiv+0x370>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d100      	bne.n	8001996 <__aeabi_ddiv+0x2e>
 8001994:	e16e      	b.n	8001c74 <__aeabi_ddiv+0x30c>
 8001996:	0f42      	lsrs	r2, r0, #29
 8001998:	00e4      	lsls	r4, r4, #3
 800199a:	4314      	orrs	r4, r2
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	0412      	lsls	r2, r2, #16
 80019a0:	4322      	orrs	r2, r4
 80019a2:	4690      	mov	r8, r2
 80019a4:	4acd      	ldr	r2, [pc, #820]	; (8001cdc <__aeabi_ddiv+0x374>)
 80019a6:	00c5      	lsls	r5, r0, #3
 80019a8:	4693      	mov	fp, r2
 80019aa:	449b      	add	fp, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	4699      	mov	r9, r3
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	033c      	lsls	r4, r7, #12
 80019b4:	007b      	lsls	r3, r7, #1
 80019b6:	4650      	mov	r0, sl
 80019b8:	0b24      	lsrs	r4, r4, #12
 80019ba:	0d5b      	lsrs	r3, r3, #21
 80019bc:	0fff      	lsrs	r7, r7, #31
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_ddiv+0x5c>
 80019c2:	e11a      	b.n	8001bfa <__aeabi_ddiv+0x292>
 80019c4:	4ac4      	ldr	r2, [pc, #784]	; (8001cd8 <__aeabi_ddiv+0x370>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d100      	bne.n	80019cc <__aeabi_ddiv+0x64>
 80019ca:	e15e      	b.n	8001c8a <__aeabi_ddiv+0x322>
 80019cc:	0f42      	lsrs	r2, r0, #29
 80019ce:	00e4      	lsls	r4, r4, #3
 80019d0:	4322      	orrs	r2, r4
 80019d2:	2480      	movs	r4, #128	; 0x80
 80019d4:	0424      	lsls	r4, r4, #16
 80019d6:	4314      	orrs	r4, r2
 80019d8:	4ac0      	ldr	r2, [pc, #768]	; (8001cdc <__aeabi_ddiv+0x374>)
 80019da:	00c1      	lsls	r1, r0, #3
 80019dc:	4694      	mov	ip, r2
 80019de:	465a      	mov	r2, fp
 80019e0:	4463      	add	r3, ip
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	469b      	mov	fp, r3
 80019e6:	2000      	movs	r0, #0
 80019e8:	0033      	movs	r3, r6
 80019ea:	407b      	eors	r3, r7
 80019ec:	469a      	mov	sl, r3
 80019ee:	464b      	mov	r3, r9
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d827      	bhi.n	8001a44 <__aeabi_ddiv+0xdc>
 80019f4:	4aba      	ldr	r2, [pc, #744]	; (8001ce0 <__aeabi_ddiv+0x378>)
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	58d3      	ldr	r3, [r2, r3]
 80019fa:	469f      	mov	pc, r3
 80019fc:	46b2      	mov	sl, r6
 80019fe:	9b00      	ldr	r3, [sp, #0]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d016      	beq.n	8001a32 <__aeabi_ddiv+0xca>
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d100      	bne.n	8001a0a <__aeabi_ddiv+0xa2>
 8001a08:	e287      	b.n	8001f1a <__aeabi_ddiv+0x5b2>
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d000      	beq.n	8001a10 <__aeabi_ddiv+0xa8>
 8001a0e:	e0d5      	b.n	8001bbc <__aeabi_ddiv+0x254>
 8001a10:	2300      	movs	r3, #0
 8001a12:	2200      	movs	r2, #0
 8001a14:	2500      	movs	r5, #0
 8001a16:	051b      	lsls	r3, r3, #20
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	4652      	mov	r2, sl
 8001a1c:	07d2      	lsls	r2, r2, #31
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	0028      	movs	r0, r5
 8001a22:	0019      	movs	r1, r3
 8001a24:	b005      	add	sp, #20
 8001a26:	bcf0      	pop	{r4, r5, r6, r7}
 8001a28:	46bb      	mov	fp, r7
 8001a2a:	46b2      	mov	sl, r6
 8001a2c:	46a9      	mov	r9, r5
 8001a2e:	46a0      	mov	r8, r4
 8001a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a32:	2200      	movs	r2, #0
 8001a34:	2500      	movs	r5, #0
 8001a36:	4ba8      	ldr	r3, [pc, #672]	; (8001cd8 <__aeabi_ddiv+0x370>)
 8001a38:	e7ed      	b.n	8001a16 <__aeabi_ddiv+0xae>
 8001a3a:	46ba      	mov	sl, r7
 8001a3c:	46a0      	mov	r8, r4
 8001a3e:	000d      	movs	r5, r1
 8001a40:	9000      	str	r0, [sp, #0]
 8001a42:	e7dc      	b.n	80019fe <__aeabi_ddiv+0x96>
 8001a44:	4544      	cmp	r4, r8
 8001a46:	d200      	bcs.n	8001a4a <__aeabi_ddiv+0xe2>
 8001a48:	e1c4      	b.n	8001dd4 <__aeabi_ddiv+0x46c>
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_ddiv+0xe6>
 8001a4c:	e1bf      	b.n	8001dce <__aeabi_ddiv+0x466>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	425b      	negs	r3, r3
 8001a52:	469c      	mov	ip, r3
 8001a54:	002e      	movs	r6, r5
 8001a56:	4640      	mov	r0, r8
 8001a58:	2500      	movs	r5, #0
 8001a5a:	44e3      	add	fp, ip
 8001a5c:	0223      	lsls	r3, r4, #8
 8001a5e:	0e0c      	lsrs	r4, r1, #24
 8001a60:	431c      	orrs	r4, r3
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	4699      	mov	r9, r3
 8001a66:	0423      	lsls	r3, r4, #16
 8001a68:	020a      	lsls	r2, r1, #8
 8001a6a:	0c1f      	lsrs	r7, r3, #16
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	9200      	str	r2, [sp, #0]
 8001a70:	9701      	str	r7, [sp, #4]
 8001a72:	f7fe fbe7 	bl	8000244 <__aeabi_uidivmod>
 8001a76:	0002      	movs	r2, r0
 8001a78:	437a      	muls	r2, r7
 8001a7a:	040b      	lsls	r3, r1, #16
 8001a7c:	0c31      	lsrs	r1, r6, #16
 8001a7e:	4680      	mov	r8, r0
 8001a80:	4319      	orrs	r1, r3
 8001a82:	428a      	cmp	r2, r1
 8001a84:	d907      	bls.n	8001a96 <__aeabi_ddiv+0x12e>
 8001a86:	2301      	movs	r3, #1
 8001a88:	425b      	negs	r3, r3
 8001a8a:	469c      	mov	ip, r3
 8001a8c:	1909      	adds	r1, r1, r4
 8001a8e:	44e0      	add	r8, ip
 8001a90:	428c      	cmp	r4, r1
 8001a92:	d800      	bhi.n	8001a96 <__aeabi_ddiv+0x12e>
 8001a94:	e201      	b.n	8001e9a <__aeabi_ddiv+0x532>
 8001a96:	1a88      	subs	r0, r1, r2
 8001a98:	4649      	mov	r1, r9
 8001a9a:	f7fe fbd3 	bl	8000244 <__aeabi_uidivmod>
 8001a9e:	9a01      	ldr	r2, [sp, #4]
 8001aa0:	0436      	lsls	r6, r6, #16
 8001aa2:	4342      	muls	r2, r0
 8001aa4:	0409      	lsls	r1, r1, #16
 8001aa6:	0c36      	lsrs	r6, r6, #16
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	430e      	orrs	r6, r1
 8001aac:	42b2      	cmp	r2, r6
 8001aae:	d904      	bls.n	8001aba <__aeabi_ddiv+0x152>
 8001ab0:	1936      	adds	r6, r6, r4
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	42b4      	cmp	r4, r6
 8001ab6:	d800      	bhi.n	8001aba <__aeabi_ddiv+0x152>
 8001ab8:	e1e9      	b.n	8001e8e <__aeabi_ddiv+0x526>
 8001aba:	1ab0      	subs	r0, r6, r2
 8001abc:	4642      	mov	r2, r8
 8001abe:	9e00      	ldr	r6, [sp, #0]
 8001ac0:	0412      	lsls	r2, r2, #16
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	0c33      	lsrs	r3, r6, #16
 8001ac6:	001f      	movs	r7, r3
 8001ac8:	0c11      	lsrs	r1, r2, #16
 8001aca:	4690      	mov	r8, r2
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	0413      	lsls	r3, r2, #16
 8001ad0:	0432      	lsls	r2, r6, #16
 8001ad2:	0c16      	lsrs	r6, r2, #16
 8001ad4:	0032      	movs	r2, r6
 8001ad6:	0c1b      	lsrs	r3, r3, #16
 8001ad8:	435a      	muls	r2, r3
 8001ada:	9603      	str	r6, [sp, #12]
 8001adc:	437b      	muls	r3, r7
 8001ade:	434e      	muls	r6, r1
 8001ae0:	4379      	muls	r1, r7
 8001ae2:	0c17      	lsrs	r7, r2, #16
 8001ae4:	46bc      	mov	ip, r7
 8001ae6:	199b      	adds	r3, r3, r6
 8001ae8:	4463      	add	r3, ip
 8001aea:	429e      	cmp	r6, r3
 8001aec:	d903      	bls.n	8001af6 <__aeabi_ddiv+0x18e>
 8001aee:	2680      	movs	r6, #128	; 0x80
 8001af0:	0276      	lsls	r6, r6, #9
 8001af2:	46b4      	mov	ip, r6
 8001af4:	4461      	add	r1, ip
 8001af6:	0c1e      	lsrs	r6, r3, #16
 8001af8:	1871      	adds	r1, r6, r1
 8001afa:	0416      	lsls	r6, r2, #16
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	0c36      	lsrs	r6, r6, #16
 8001b00:	199e      	adds	r6, r3, r6
 8001b02:	4288      	cmp	r0, r1
 8001b04:	d302      	bcc.n	8001b0c <__aeabi_ddiv+0x1a4>
 8001b06:	d112      	bne.n	8001b2e <__aeabi_ddiv+0x1c6>
 8001b08:	42b5      	cmp	r5, r6
 8001b0a:	d210      	bcs.n	8001b2e <__aeabi_ddiv+0x1c6>
 8001b0c:	4643      	mov	r3, r8
 8001b0e:	1e5a      	subs	r2, r3, #1
 8001b10:	9b00      	ldr	r3, [sp, #0]
 8001b12:	469c      	mov	ip, r3
 8001b14:	4465      	add	r5, ip
 8001b16:	001f      	movs	r7, r3
 8001b18:	429d      	cmp	r5, r3
 8001b1a:	419b      	sbcs	r3, r3
 8001b1c:	425b      	negs	r3, r3
 8001b1e:	191b      	adds	r3, r3, r4
 8001b20:	18c0      	adds	r0, r0, r3
 8001b22:	4284      	cmp	r4, r0
 8001b24:	d200      	bcs.n	8001b28 <__aeabi_ddiv+0x1c0>
 8001b26:	e19e      	b.n	8001e66 <__aeabi_ddiv+0x4fe>
 8001b28:	d100      	bne.n	8001b2c <__aeabi_ddiv+0x1c4>
 8001b2a:	e199      	b.n	8001e60 <__aeabi_ddiv+0x4f8>
 8001b2c:	4690      	mov	r8, r2
 8001b2e:	1bae      	subs	r6, r5, r6
 8001b30:	42b5      	cmp	r5, r6
 8001b32:	41ad      	sbcs	r5, r5
 8001b34:	1a40      	subs	r0, r0, r1
 8001b36:	426d      	negs	r5, r5
 8001b38:	1b40      	subs	r0, r0, r5
 8001b3a:	4284      	cmp	r4, r0
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_ddiv+0x1d8>
 8001b3e:	e1d2      	b.n	8001ee6 <__aeabi_ddiv+0x57e>
 8001b40:	4649      	mov	r1, r9
 8001b42:	f7fe fb7f 	bl	8000244 <__aeabi_uidivmod>
 8001b46:	9a01      	ldr	r2, [sp, #4]
 8001b48:	040b      	lsls	r3, r1, #16
 8001b4a:	4342      	muls	r2, r0
 8001b4c:	0c31      	lsrs	r1, r6, #16
 8001b4e:	0005      	movs	r5, r0
 8001b50:	4319      	orrs	r1, r3
 8001b52:	428a      	cmp	r2, r1
 8001b54:	d900      	bls.n	8001b58 <__aeabi_ddiv+0x1f0>
 8001b56:	e16c      	b.n	8001e32 <__aeabi_ddiv+0x4ca>
 8001b58:	1a88      	subs	r0, r1, r2
 8001b5a:	4649      	mov	r1, r9
 8001b5c:	f7fe fb72 	bl	8000244 <__aeabi_uidivmod>
 8001b60:	9a01      	ldr	r2, [sp, #4]
 8001b62:	0436      	lsls	r6, r6, #16
 8001b64:	4342      	muls	r2, r0
 8001b66:	0409      	lsls	r1, r1, #16
 8001b68:	0c36      	lsrs	r6, r6, #16
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	430e      	orrs	r6, r1
 8001b6e:	42b2      	cmp	r2, r6
 8001b70:	d900      	bls.n	8001b74 <__aeabi_ddiv+0x20c>
 8001b72:	e153      	b.n	8001e1c <__aeabi_ddiv+0x4b4>
 8001b74:	9803      	ldr	r0, [sp, #12]
 8001b76:	1ab6      	subs	r6, r6, r2
 8001b78:	0002      	movs	r2, r0
 8001b7a:	042d      	lsls	r5, r5, #16
 8001b7c:	431d      	orrs	r5, r3
 8001b7e:	9f02      	ldr	r7, [sp, #8]
 8001b80:	042b      	lsls	r3, r5, #16
 8001b82:	0c1b      	lsrs	r3, r3, #16
 8001b84:	435a      	muls	r2, r3
 8001b86:	437b      	muls	r3, r7
 8001b88:	469c      	mov	ip, r3
 8001b8a:	0c29      	lsrs	r1, r5, #16
 8001b8c:	4348      	muls	r0, r1
 8001b8e:	0c13      	lsrs	r3, r2, #16
 8001b90:	4484      	add	ip, r0
 8001b92:	4463      	add	r3, ip
 8001b94:	4379      	muls	r1, r7
 8001b96:	4298      	cmp	r0, r3
 8001b98:	d903      	bls.n	8001ba2 <__aeabi_ddiv+0x23a>
 8001b9a:	2080      	movs	r0, #128	; 0x80
 8001b9c:	0240      	lsls	r0, r0, #9
 8001b9e:	4684      	mov	ip, r0
 8001ba0:	4461      	add	r1, ip
 8001ba2:	0c18      	lsrs	r0, r3, #16
 8001ba4:	0412      	lsls	r2, r2, #16
 8001ba6:	041b      	lsls	r3, r3, #16
 8001ba8:	0c12      	lsrs	r2, r2, #16
 8001baa:	1840      	adds	r0, r0, r1
 8001bac:	189b      	adds	r3, r3, r2
 8001bae:	4286      	cmp	r6, r0
 8001bb0:	d200      	bcs.n	8001bb4 <__aeabi_ddiv+0x24c>
 8001bb2:	e100      	b.n	8001db6 <__aeabi_ddiv+0x44e>
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_ddiv+0x250>
 8001bb6:	e0fb      	b.n	8001db0 <__aeabi_ddiv+0x448>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	431d      	orrs	r5, r3
 8001bbc:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <__aeabi_ddiv+0x37c>)
 8001bbe:	445b      	add	r3, fp
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_ddiv+0x25e>
 8001bc4:	e0aa      	b.n	8001d1c <__aeabi_ddiv+0x3b4>
 8001bc6:	076a      	lsls	r2, r5, #29
 8001bc8:	d000      	beq.n	8001bcc <__aeabi_ddiv+0x264>
 8001bca:	e13d      	b.n	8001e48 <__aeabi_ddiv+0x4e0>
 8001bcc:	08e9      	lsrs	r1, r5, #3
 8001bce:	4642      	mov	r2, r8
 8001bd0:	01d2      	lsls	r2, r2, #7
 8001bd2:	d506      	bpl.n	8001be2 <__aeabi_ddiv+0x27a>
 8001bd4:	4642      	mov	r2, r8
 8001bd6:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <__aeabi_ddiv+0x380>)
 8001bd8:	401a      	ands	r2, r3
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	4690      	mov	r8, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	445b      	add	r3, fp
 8001be2:	4a42      	ldr	r2, [pc, #264]	; (8001cec <__aeabi_ddiv+0x384>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	dd00      	ble.n	8001bea <__aeabi_ddiv+0x282>
 8001be8:	e723      	b.n	8001a32 <__aeabi_ddiv+0xca>
 8001bea:	4642      	mov	r2, r8
 8001bec:	055b      	lsls	r3, r3, #21
 8001bee:	0755      	lsls	r5, r2, #29
 8001bf0:	0252      	lsls	r2, r2, #9
 8001bf2:	430d      	orrs	r5, r1
 8001bf4:	0b12      	lsrs	r2, r2, #12
 8001bf6:	0d5b      	lsrs	r3, r3, #21
 8001bf8:	e70d      	b.n	8001a16 <__aeabi_ddiv+0xae>
 8001bfa:	4651      	mov	r1, sl
 8001bfc:	4321      	orrs	r1, r4
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_ddiv+0x29a>
 8001c00:	e07c      	b.n	8001cfc <__aeabi_ddiv+0x394>
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	d100      	bne.n	8001c08 <__aeabi_ddiv+0x2a0>
 8001c06:	e0fb      	b.n	8001e00 <__aeabi_ddiv+0x498>
 8001c08:	0020      	movs	r0, r4
 8001c0a:	f001 fa63 	bl	80030d4 <__clzsi2>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	3a0b      	subs	r2, #11
 8001c12:	231d      	movs	r3, #29
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	4652      	mov	r2, sl
 8001c18:	0001      	movs	r1, r0
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3908      	subs	r1, #8
 8001c20:	408b      	lsls	r3, r1
 8001c22:	408c      	lsls	r4, r1
 8001c24:	0019      	movs	r1, r3
 8001c26:	4314      	orrs	r4, r2
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <__aeabi_ddiv+0x388>)
 8001c2a:	4458      	add	r0, fp
 8001c2c:	469b      	mov	fp, r3
 8001c2e:	4483      	add	fp, r0
 8001c30:	2000      	movs	r0, #0
 8001c32:	e6d9      	b.n	80019e8 <__aeabi_ddiv+0x80>
 8001c34:	0003      	movs	r3, r0
 8001c36:	4323      	orrs	r3, r4
 8001c38:	4698      	mov	r8, r3
 8001c3a:	d044      	beq.n	8001cc6 <__aeabi_ddiv+0x35e>
 8001c3c:	2c00      	cmp	r4, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_ddiv+0x2da>
 8001c40:	e0cf      	b.n	8001de2 <__aeabi_ddiv+0x47a>
 8001c42:	0020      	movs	r0, r4
 8001c44:	f001 fa46 	bl	80030d4 <__clzsi2>
 8001c48:	0001      	movs	r1, r0
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	390b      	subs	r1, #11
 8001c4e:	231d      	movs	r3, #29
 8001c50:	1a5b      	subs	r3, r3, r1
 8001c52:	4649      	mov	r1, r9
 8001c54:	0010      	movs	r0, r2
 8001c56:	40d9      	lsrs	r1, r3
 8001c58:	3808      	subs	r0, #8
 8001c5a:	4084      	lsls	r4, r0
 8001c5c:	000b      	movs	r3, r1
 8001c5e:	464d      	mov	r5, r9
 8001c60:	4323      	orrs	r3, r4
 8001c62:	4698      	mov	r8, r3
 8001c64:	4085      	lsls	r5, r0
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <__aeabi_ddiv+0x38c>)
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	469b      	mov	fp, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	4699      	mov	r9, r3
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	e69e      	b.n	80019b2 <__aeabi_ddiv+0x4a>
 8001c74:	0002      	movs	r2, r0
 8001c76:	4322      	orrs	r2, r4
 8001c78:	4690      	mov	r8, r2
 8001c7a:	d11d      	bne.n	8001cb8 <__aeabi_ddiv+0x350>
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	469b      	mov	fp, r3
 8001c80:	2302      	movs	r3, #2
 8001c82:	2500      	movs	r5, #0
 8001c84:	4691      	mov	r9, r2
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	e693      	b.n	80019b2 <__aeabi_ddiv+0x4a>
 8001c8a:	4651      	mov	r1, sl
 8001c8c:	4321      	orrs	r1, r4
 8001c8e:	d109      	bne.n	8001ca4 <__aeabi_ddiv+0x33c>
 8001c90:	2302      	movs	r3, #2
 8001c92:	464a      	mov	r2, r9
 8001c94:	431a      	orrs	r2, r3
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <__aeabi_ddiv+0x390>)
 8001c98:	4691      	mov	r9, r2
 8001c9a:	469c      	mov	ip, r3
 8001c9c:	2400      	movs	r4, #0
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	44e3      	add	fp, ip
 8001ca2:	e6a1      	b.n	80019e8 <__aeabi_ddiv+0x80>
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	464a      	mov	r2, r9
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <__aeabi_ddiv+0x390>)
 8001cac:	4691      	mov	r9, r2
 8001cae:	469c      	mov	ip, r3
 8001cb0:	4651      	mov	r1, sl
 8001cb2:	2003      	movs	r0, #3
 8001cb4:	44e3      	add	fp, ip
 8001cb6:	e697      	b.n	80019e8 <__aeabi_ddiv+0x80>
 8001cb8:	220c      	movs	r2, #12
 8001cba:	469b      	mov	fp, r3
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	46a0      	mov	r8, r4
 8001cc0:	4691      	mov	r9, r2
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	e675      	b.n	80019b2 <__aeabi_ddiv+0x4a>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	4699      	mov	r9, r3
 8001cca:	2300      	movs	r3, #0
 8001ccc:	469b      	mov	fp, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	e66d      	b.n	80019b2 <__aeabi_ddiv+0x4a>
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	000007ff 	.word	0x000007ff
 8001cdc:	fffffc01 	.word	0xfffffc01
 8001ce0:	0800c6b4 	.word	0x0800c6b4
 8001ce4:	000003ff 	.word	0x000003ff
 8001ce8:	feffffff 	.word	0xfeffffff
 8001cec:	000007fe 	.word	0x000007fe
 8001cf0:	000003f3 	.word	0x000003f3
 8001cf4:	fffffc0d 	.word	0xfffffc0d
 8001cf8:	fffff801 	.word	0xfffff801
 8001cfc:	464a      	mov	r2, r9
 8001cfe:	2301      	movs	r3, #1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	4691      	mov	r9, r2
 8001d04:	2400      	movs	r4, #0
 8001d06:	2001      	movs	r0, #1
 8001d08:	e66e      	b.n	80019e8 <__aeabi_ddiv+0x80>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	469a      	mov	sl, r3
 8001d10:	2500      	movs	r5, #0
 8001d12:	4b88      	ldr	r3, [pc, #544]	; (8001f34 <__aeabi_ddiv+0x5cc>)
 8001d14:	0312      	lsls	r2, r2, #12
 8001d16:	e67e      	b.n	8001a16 <__aeabi_ddiv+0xae>
 8001d18:	2501      	movs	r5, #1
 8001d1a:	426d      	negs	r5, r5
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	1ad2      	subs	r2, r2, r3
 8001d20:	2a38      	cmp	r2, #56	; 0x38
 8001d22:	dd00      	ble.n	8001d26 <__aeabi_ddiv+0x3be>
 8001d24:	e674      	b.n	8001a10 <__aeabi_ddiv+0xa8>
 8001d26:	2a1f      	cmp	r2, #31
 8001d28:	dc00      	bgt.n	8001d2c <__aeabi_ddiv+0x3c4>
 8001d2a:	e0bd      	b.n	8001ea8 <__aeabi_ddiv+0x540>
 8001d2c:	211f      	movs	r1, #31
 8001d2e:	4249      	negs	r1, r1
 8001d30:	1acb      	subs	r3, r1, r3
 8001d32:	4641      	mov	r1, r8
 8001d34:	40d9      	lsrs	r1, r3
 8001d36:	000b      	movs	r3, r1
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d004      	beq.n	8001d46 <__aeabi_ddiv+0x3de>
 8001d3c:	4641      	mov	r1, r8
 8001d3e:	4a7e      	ldr	r2, [pc, #504]	; (8001f38 <__aeabi_ddiv+0x5d0>)
 8001d40:	445a      	add	r2, fp
 8001d42:	4091      	lsls	r1, r2
 8001d44:	430d      	orrs	r5, r1
 8001d46:	0029      	movs	r1, r5
 8001d48:	1e4a      	subs	r2, r1, #1
 8001d4a:	4191      	sbcs	r1, r2
 8001d4c:	4319      	orrs	r1, r3
 8001d4e:	2307      	movs	r3, #7
 8001d50:	001d      	movs	r5, r3
 8001d52:	2200      	movs	r2, #0
 8001d54:	400d      	ands	r5, r1
 8001d56:	420b      	tst	r3, r1
 8001d58:	d100      	bne.n	8001d5c <__aeabi_ddiv+0x3f4>
 8001d5a:	e0d0      	b.n	8001efe <__aeabi_ddiv+0x596>
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	2300      	movs	r3, #0
 8001d60:	400a      	ands	r2, r1
 8001d62:	2a04      	cmp	r2, #4
 8001d64:	d100      	bne.n	8001d68 <__aeabi_ddiv+0x400>
 8001d66:	e0c7      	b.n	8001ef8 <__aeabi_ddiv+0x590>
 8001d68:	1d0a      	adds	r2, r1, #4
 8001d6a:	428a      	cmp	r2, r1
 8001d6c:	4189      	sbcs	r1, r1
 8001d6e:	4249      	negs	r1, r1
 8001d70:	185b      	adds	r3, r3, r1
 8001d72:	0011      	movs	r1, r2
 8001d74:	021a      	lsls	r2, r3, #8
 8001d76:	d400      	bmi.n	8001d7a <__aeabi_ddiv+0x412>
 8001d78:	e0be      	b.n	8001ef8 <__aeabi_ddiv+0x590>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2500      	movs	r5, #0
 8001d80:	e649      	b.n	8001a16 <__aeabi_ddiv+0xae>
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	4643      	mov	r3, r8
 8001d86:	0312      	lsls	r2, r2, #12
 8001d88:	4213      	tst	r3, r2
 8001d8a:	d008      	beq.n	8001d9e <__aeabi_ddiv+0x436>
 8001d8c:	4214      	tst	r4, r2
 8001d8e:	d106      	bne.n	8001d9e <__aeabi_ddiv+0x436>
 8001d90:	4322      	orrs	r2, r4
 8001d92:	0312      	lsls	r2, r2, #12
 8001d94:	46ba      	mov	sl, r7
 8001d96:	000d      	movs	r5, r1
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <__aeabi_ddiv+0x5cc>)
 8001d9a:	0b12      	lsrs	r2, r2, #12
 8001d9c:	e63b      	b.n	8001a16 <__aeabi_ddiv+0xae>
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	4643      	mov	r3, r8
 8001da2:	0312      	lsls	r2, r2, #12
 8001da4:	431a      	orrs	r2, r3
 8001da6:	0312      	lsls	r2, r2, #12
 8001da8:	46b2      	mov	sl, r6
 8001daa:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <__aeabi_ddiv+0x5cc>)
 8001dac:	0b12      	lsrs	r2, r2, #12
 8001dae:	e632      	b.n	8001a16 <__aeabi_ddiv+0xae>
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_ddiv+0x44e>
 8001db4:	e702      	b.n	8001bbc <__aeabi_ddiv+0x254>
 8001db6:	19a6      	adds	r6, r4, r6
 8001db8:	1e6a      	subs	r2, r5, #1
 8001dba:	42a6      	cmp	r6, r4
 8001dbc:	d200      	bcs.n	8001dc0 <__aeabi_ddiv+0x458>
 8001dbe:	e089      	b.n	8001ed4 <__aeabi_ddiv+0x56c>
 8001dc0:	4286      	cmp	r6, r0
 8001dc2:	d200      	bcs.n	8001dc6 <__aeabi_ddiv+0x45e>
 8001dc4:	e09f      	b.n	8001f06 <__aeabi_ddiv+0x59e>
 8001dc6:	d100      	bne.n	8001dca <__aeabi_ddiv+0x462>
 8001dc8:	e0af      	b.n	8001f2a <__aeabi_ddiv+0x5c2>
 8001dca:	0015      	movs	r5, r2
 8001dcc:	e6f4      	b.n	8001bb8 <__aeabi_ddiv+0x250>
 8001dce:	42a9      	cmp	r1, r5
 8001dd0:	d900      	bls.n	8001dd4 <__aeabi_ddiv+0x46c>
 8001dd2:	e63c      	b.n	8001a4e <__aeabi_ddiv+0xe6>
 8001dd4:	4643      	mov	r3, r8
 8001dd6:	07de      	lsls	r6, r3, #31
 8001dd8:	0858      	lsrs	r0, r3, #1
 8001dda:	086b      	lsrs	r3, r5, #1
 8001ddc:	431e      	orrs	r6, r3
 8001dde:	07ed      	lsls	r5, r5, #31
 8001de0:	e63c      	b.n	8001a5c <__aeabi_ddiv+0xf4>
 8001de2:	f001 f977 	bl	80030d4 <__clzsi2>
 8001de6:	0001      	movs	r1, r0
 8001de8:	0002      	movs	r2, r0
 8001dea:	3115      	adds	r1, #21
 8001dec:	3220      	adds	r2, #32
 8001dee:	291c      	cmp	r1, #28
 8001df0:	dc00      	bgt.n	8001df4 <__aeabi_ddiv+0x48c>
 8001df2:	e72c      	b.n	8001c4e <__aeabi_ddiv+0x2e6>
 8001df4:	464b      	mov	r3, r9
 8001df6:	3808      	subs	r0, #8
 8001df8:	4083      	lsls	r3, r0
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4698      	mov	r8, r3
 8001dfe:	e732      	b.n	8001c66 <__aeabi_ddiv+0x2fe>
 8001e00:	f001 f968 	bl	80030d4 <__clzsi2>
 8001e04:	0003      	movs	r3, r0
 8001e06:	001a      	movs	r2, r3
 8001e08:	3215      	adds	r2, #21
 8001e0a:	3020      	adds	r0, #32
 8001e0c:	2a1c      	cmp	r2, #28
 8001e0e:	dc00      	bgt.n	8001e12 <__aeabi_ddiv+0x4aa>
 8001e10:	e6ff      	b.n	8001c12 <__aeabi_ddiv+0x2aa>
 8001e12:	4654      	mov	r4, sl
 8001e14:	3b08      	subs	r3, #8
 8001e16:	2100      	movs	r1, #0
 8001e18:	409c      	lsls	r4, r3
 8001e1a:	e705      	b.n	8001c28 <__aeabi_ddiv+0x2c0>
 8001e1c:	1936      	adds	r6, r6, r4
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	42b4      	cmp	r4, r6
 8001e22:	d900      	bls.n	8001e26 <__aeabi_ddiv+0x4be>
 8001e24:	e6a6      	b.n	8001b74 <__aeabi_ddiv+0x20c>
 8001e26:	42b2      	cmp	r2, r6
 8001e28:	d800      	bhi.n	8001e2c <__aeabi_ddiv+0x4c4>
 8001e2a:	e6a3      	b.n	8001b74 <__aeabi_ddiv+0x20c>
 8001e2c:	1e83      	subs	r3, r0, #2
 8001e2e:	1936      	adds	r6, r6, r4
 8001e30:	e6a0      	b.n	8001b74 <__aeabi_ddiv+0x20c>
 8001e32:	1909      	adds	r1, r1, r4
 8001e34:	3d01      	subs	r5, #1
 8001e36:	428c      	cmp	r4, r1
 8001e38:	d900      	bls.n	8001e3c <__aeabi_ddiv+0x4d4>
 8001e3a:	e68d      	b.n	8001b58 <__aeabi_ddiv+0x1f0>
 8001e3c:	428a      	cmp	r2, r1
 8001e3e:	d800      	bhi.n	8001e42 <__aeabi_ddiv+0x4da>
 8001e40:	e68a      	b.n	8001b58 <__aeabi_ddiv+0x1f0>
 8001e42:	1e85      	subs	r5, r0, #2
 8001e44:	1909      	adds	r1, r1, r4
 8001e46:	e687      	b.n	8001b58 <__aeabi_ddiv+0x1f0>
 8001e48:	220f      	movs	r2, #15
 8001e4a:	402a      	ands	r2, r5
 8001e4c:	2a04      	cmp	r2, #4
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_ddiv+0x4ea>
 8001e50:	e6bc      	b.n	8001bcc <__aeabi_ddiv+0x264>
 8001e52:	1d29      	adds	r1, r5, #4
 8001e54:	42a9      	cmp	r1, r5
 8001e56:	41ad      	sbcs	r5, r5
 8001e58:	426d      	negs	r5, r5
 8001e5a:	08c9      	lsrs	r1, r1, #3
 8001e5c:	44a8      	add	r8, r5
 8001e5e:	e6b6      	b.n	8001bce <__aeabi_ddiv+0x266>
 8001e60:	42af      	cmp	r7, r5
 8001e62:	d900      	bls.n	8001e66 <__aeabi_ddiv+0x4fe>
 8001e64:	e662      	b.n	8001b2c <__aeabi_ddiv+0x1c4>
 8001e66:	4281      	cmp	r1, r0
 8001e68:	d804      	bhi.n	8001e74 <__aeabi_ddiv+0x50c>
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_ddiv+0x506>
 8001e6c:	e65e      	b.n	8001b2c <__aeabi_ddiv+0x1c4>
 8001e6e:	42ae      	cmp	r6, r5
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x50c>
 8001e72:	e65b      	b.n	8001b2c <__aeabi_ddiv+0x1c4>
 8001e74:	2302      	movs	r3, #2
 8001e76:	425b      	negs	r3, r3
 8001e78:	469c      	mov	ip, r3
 8001e7a:	9b00      	ldr	r3, [sp, #0]
 8001e7c:	44e0      	add	r8, ip
 8001e7e:	469c      	mov	ip, r3
 8001e80:	4465      	add	r5, ip
 8001e82:	429d      	cmp	r5, r3
 8001e84:	419b      	sbcs	r3, r3
 8001e86:	425b      	negs	r3, r3
 8001e88:	191b      	adds	r3, r3, r4
 8001e8a:	18c0      	adds	r0, r0, r3
 8001e8c:	e64f      	b.n	8001b2e <__aeabi_ddiv+0x1c6>
 8001e8e:	42b2      	cmp	r2, r6
 8001e90:	d800      	bhi.n	8001e94 <__aeabi_ddiv+0x52c>
 8001e92:	e612      	b.n	8001aba <__aeabi_ddiv+0x152>
 8001e94:	1e83      	subs	r3, r0, #2
 8001e96:	1936      	adds	r6, r6, r4
 8001e98:	e60f      	b.n	8001aba <__aeabi_ddiv+0x152>
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d800      	bhi.n	8001ea0 <__aeabi_ddiv+0x538>
 8001e9e:	e5fa      	b.n	8001a96 <__aeabi_ddiv+0x12e>
 8001ea0:	1e83      	subs	r3, r0, #2
 8001ea2:	4698      	mov	r8, r3
 8001ea4:	1909      	adds	r1, r1, r4
 8001ea6:	e5f6      	b.n	8001a96 <__aeabi_ddiv+0x12e>
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <__aeabi_ddiv+0x5d4>)
 8001eaa:	0028      	movs	r0, r5
 8001eac:	445b      	add	r3, fp
 8001eae:	4641      	mov	r1, r8
 8001eb0:	409d      	lsls	r5, r3
 8001eb2:	4099      	lsls	r1, r3
 8001eb4:	40d0      	lsrs	r0, r2
 8001eb6:	1e6b      	subs	r3, r5, #1
 8001eb8:	419d      	sbcs	r5, r3
 8001eba:	4643      	mov	r3, r8
 8001ebc:	4301      	orrs	r1, r0
 8001ebe:	4329      	orrs	r1, r5
 8001ec0:	40d3      	lsrs	r3, r2
 8001ec2:	074a      	lsls	r2, r1, #29
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_ddiv+0x560>
 8001ec6:	e755      	b.n	8001d74 <__aeabi_ddiv+0x40c>
 8001ec8:	220f      	movs	r2, #15
 8001eca:	400a      	ands	r2, r1
 8001ecc:	2a04      	cmp	r2, #4
 8001ece:	d000      	beq.n	8001ed2 <__aeabi_ddiv+0x56a>
 8001ed0:	e74a      	b.n	8001d68 <__aeabi_ddiv+0x400>
 8001ed2:	e74f      	b.n	8001d74 <__aeabi_ddiv+0x40c>
 8001ed4:	0015      	movs	r5, r2
 8001ed6:	4286      	cmp	r6, r0
 8001ed8:	d000      	beq.n	8001edc <__aeabi_ddiv+0x574>
 8001eda:	e66d      	b.n	8001bb8 <__aeabi_ddiv+0x250>
 8001edc:	9a00      	ldr	r2, [sp, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_ddiv+0x57c>
 8001ee2:	e669      	b.n	8001bb8 <__aeabi_ddiv+0x250>
 8001ee4:	e66a      	b.n	8001bbc <__aeabi_ddiv+0x254>
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <__aeabi_ddiv+0x5d8>)
 8001ee8:	445b      	add	r3, fp
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	dc00      	bgt.n	8001ef0 <__aeabi_ddiv+0x588>
 8001eee:	e713      	b.n	8001d18 <__aeabi_ddiv+0x3b0>
 8001ef0:	2501      	movs	r5, #1
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	44a8      	add	r8, r5
 8001ef6:	e66a      	b.n	8001bce <__aeabi_ddiv+0x266>
 8001ef8:	075d      	lsls	r5, r3, #29
 8001efa:	025b      	lsls	r3, r3, #9
 8001efc:	0b1a      	lsrs	r2, r3, #12
 8001efe:	08c9      	lsrs	r1, r1, #3
 8001f00:	2300      	movs	r3, #0
 8001f02:	430d      	orrs	r5, r1
 8001f04:	e587      	b.n	8001a16 <__aeabi_ddiv+0xae>
 8001f06:	9900      	ldr	r1, [sp, #0]
 8001f08:	3d02      	subs	r5, #2
 8001f0a:	004a      	lsls	r2, r1, #1
 8001f0c:	428a      	cmp	r2, r1
 8001f0e:	41bf      	sbcs	r7, r7
 8001f10:	427f      	negs	r7, r7
 8001f12:	193f      	adds	r7, r7, r4
 8001f14:	19f6      	adds	r6, r6, r7
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	e7dd      	b.n	8001ed6 <__aeabi_ddiv+0x56e>
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	4643      	mov	r3, r8
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	431a      	orrs	r2, r3
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <__aeabi_ddiv+0x5cc>)
 8001f26:	0b12      	lsrs	r2, r2, #12
 8001f28:	e575      	b.n	8001a16 <__aeabi_ddiv+0xae>
 8001f2a:	9900      	ldr	r1, [sp, #0]
 8001f2c:	4299      	cmp	r1, r3
 8001f2e:	d3ea      	bcc.n	8001f06 <__aeabi_ddiv+0x59e>
 8001f30:	0015      	movs	r5, r2
 8001f32:	e7d3      	b.n	8001edc <__aeabi_ddiv+0x574>
 8001f34:	000007ff 	.word	0x000007ff
 8001f38:	0000043e 	.word	0x0000043e
 8001f3c:	0000041e 	.word	0x0000041e
 8001f40:	000003ff 	.word	0x000003ff

08001f44 <__eqdf2>:
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	464e      	mov	r6, r9
 8001f48:	4645      	mov	r5, r8
 8001f4a:	46de      	mov	lr, fp
 8001f4c:	4657      	mov	r7, sl
 8001f4e:	4690      	mov	r8, r2
 8001f50:	b5e0      	push	{r5, r6, r7, lr}
 8001f52:	0017      	movs	r7, r2
 8001f54:	031a      	lsls	r2, r3, #12
 8001f56:	0b12      	lsrs	r2, r2, #12
 8001f58:	0005      	movs	r5, r0
 8001f5a:	4684      	mov	ip, r0
 8001f5c:	4819      	ldr	r0, [pc, #100]	; (8001fc4 <__eqdf2+0x80>)
 8001f5e:	030e      	lsls	r6, r1, #12
 8001f60:	004c      	lsls	r4, r1, #1
 8001f62:	4691      	mov	r9, r2
 8001f64:	005a      	lsls	r2, r3, #1
 8001f66:	0fdb      	lsrs	r3, r3, #31
 8001f68:	469b      	mov	fp, r3
 8001f6a:	0b36      	lsrs	r6, r6, #12
 8001f6c:	0d64      	lsrs	r4, r4, #21
 8001f6e:	0fc9      	lsrs	r1, r1, #31
 8001f70:	0d52      	lsrs	r2, r2, #21
 8001f72:	4284      	cmp	r4, r0
 8001f74:	d019      	beq.n	8001faa <__eqdf2+0x66>
 8001f76:	4282      	cmp	r2, r0
 8001f78:	d010      	beq.n	8001f9c <__eqdf2+0x58>
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	4294      	cmp	r4, r2
 8001f7e:	d10e      	bne.n	8001f9e <__eqdf2+0x5a>
 8001f80:	454e      	cmp	r6, r9
 8001f82:	d10c      	bne.n	8001f9e <__eqdf2+0x5a>
 8001f84:	2001      	movs	r0, #1
 8001f86:	45c4      	cmp	ip, r8
 8001f88:	d109      	bne.n	8001f9e <__eqdf2+0x5a>
 8001f8a:	4559      	cmp	r1, fp
 8001f8c:	d017      	beq.n	8001fbe <__eqdf2+0x7a>
 8001f8e:	2c00      	cmp	r4, #0
 8001f90:	d105      	bne.n	8001f9e <__eqdf2+0x5a>
 8001f92:	0030      	movs	r0, r6
 8001f94:	4328      	orrs	r0, r5
 8001f96:	1e43      	subs	r3, r0, #1
 8001f98:	4198      	sbcs	r0, r3
 8001f9a:	e000      	b.n	8001f9e <__eqdf2+0x5a>
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa0:	46bb      	mov	fp, r7
 8001fa2:	46b2      	mov	sl, r6
 8001fa4:	46a9      	mov	r9, r5
 8001fa6:	46a0      	mov	r8, r4
 8001fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001faa:	0033      	movs	r3, r6
 8001fac:	2001      	movs	r0, #1
 8001fae:	432b      	orrs	r3, r5
 8001fb0:	d1f5      	bne.n	8001f9e <__eqdf2+0x5a>
 8001fb2:	42a2      	cmp	r2, r4
 8001fb4:	d1f3      	bne.n	8001f9e <__eqdf2+0x5a>
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	433b      	orrs	r3, r7
 8001fba:	d1f0      	bne.n	8001f9e <__eqdf2+0x5a>
 8001fbc:	e7e2      	b.n	8001f84 <__eqdf2+0x40>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	e7ed      	b.n	8001f9e <__eqdf2+0x5a>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	000007ff 	.word	0x000007ff

08001fc8 <__gedf2>:
 8001fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fca:	4647      	mov	r7, r8
 8001fcc:	46ce      	mov	lr, r9
 8001fce:	0004      	movs	r4, r0
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	0016      	movs	r6, r2
 8001fd4:	031b      	lsls	r3, r3, #12
 8001fd6:	0b1b      	lsrs	r3, r3, #12
 8001fd8:	4d2d      	ldr	r5, [pc, #180]	; (8002090 <__gedf2+0xc8>)
 8001fda:	004a      	lsls	r2, r1, #1
 8001fdc:	4699      	mov	r9, r3
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	0043      	lsls	r3, r0, #1
 8001fe2:	030f      	lsls	r7, r1, #12
 8001fe4:	46a4      	mov	ip, r4
 8001fe6:	46b0      	mov	r8, r6
 8001fe8:	0b3f      	lsrs	r7, r7, #12
 8001fea:	0d52      	lsrs	r2, r2, #21
 8001fec:	0fc9      	lsrs	r1, r1, #31
 8001fee:	0d5b      	lsrs	r3, r3, #21
 8001ff0:	0fc0      	lsrs	r0, r0, #31
 8001ff2:	42aa      	cmp	r2, r5
 8001ff4:	d021      	beq.n	800203a <__gedf2+0x72>
 8001ff6:	42ab      	cmp	r3, r5
 8001ff8:	d013      	beq.n	8002022 <__gedf2+0x5a>
 8001ffa:	2a00      	cmp	r2, #0
 8001ffc:	d122      	bne.n	8002044 <__gedf2+0x7c>
 8001ffe:	433c      	orrs	r4, r7
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <__gedf2+0x42>
 8002004:	464d      	mov	r5, r9
 8002006:	432e      	orrs	r6, r5
 8002008:	d022      	beq.n	8002050 <__gedf2+0x88>
 800200a:	2c00      	cmp	r4, #0
 800200c:	d010      	beq.n	8002030 <__gedf2+0x68>
 800200e:	4281      	cmp	r1, r0
 8002010:	d022      	beq.n	8002058 <__gedf2+0x90>
 8002012:	2002      	movs	r0, #2
 8002014:	3901      	subs	r1, #1
 8002016:	4008      	ands	r0, r1
 8002018:	3801      	subs	r0, #1
 800201a:	bcc0      	pop	{r6, r7}
 800201c:	46b9      	mov	r9, r7
 800201e:	46b0      	mov	r8, r6
 8002020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002022:	464d      	mov	r5, r9
 8002024:	432e      	orrs	r6, r5
 8002026:	d129      	bne.n	800207c <__gedf2+0xb4>
 8002028:	2a00      	cmp	r2, #0
 800202a:	d1f0      	bne.n	800200e <__gedf2+0x46>
 800202c:	433c      	orrs	r4, r7
 800202e:	d1ee      	bne.n	800200e <__gedf2+0x46>
 8002030:	2800      	cmp	r0, #0
 8002032:	d1f2      	bne.n	800201a <__gedf2+0x52>
 8002034:	2001      	movs	r0, #1
 8002036:	4240      	negs	r0, r0
 8002038:	e7ef      	b.n	800201a <__gedf2+0x52>
 800203a:	003d      	movs	r5, r7
 800203c:	4325      	orrs	r5, r4
 800203e:	d11d      	bne.n	800207c <__gedf2+0xb4>
 8002040:	4293      	cmp	r3, r2
 8002042:	d0ee      	beq.n	8002022 <__gedf2+0x5a>
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1e2      	bne.n	800200e <__gedf2+0x46>
 8002048:	464c      	mov	r4, r9
 800204a:	4326      	orrs	r6, r4
 800204c:	d1df      	bne.n	800200e <__gedf2+0x46>
 800204e:	e7e0      	b.n	8002012 <__gedf2+0x4a>
 8002050:	2000      	movs	r0, #0
 8002052:	2c00      	cmp	r4, #0
 8002054:	d0e1      	beq.n	800201a <__gedf2+0x52>
 8002056:	e7dc      	b.n	8002012 <__gedf2+0x4a>
 8002058:	429a      	cmp	r2, r3
 800205a:	dc0a      	bgt.n	8002072 <__gedf2+0xaa>
 800205c:	dbe8      	blt.n	8002030 <__gedf2+0x68>
 800205e:	454f      	cmp	r7, r9
 8002060:	d8d7      	bhi.n	8002012 <__gedf2+0x4a>
 8002062:	d00e      	beq.n	8002082 <__gedf2+0xba>
 8002064:	2000      	movs	r0, #0
 8002066:	454f      	cmp	r7, r9
 8002068:	d2d7      	bcs.n	800201a <__gedf2+0x52>
 800206a:	2900      	cmp	r1, #0
 800206c:	d0e2      	beq.n	8002034 <__gedf2+0x6c>
 800206e:	0008      	movs	r0, r1
 8002070:	e7d3      	b.n	800201a <__gedf2+0x52>
 8002072:	4243      	negs	r3, r0
 8002074:	4158      	adcs	r0, r3
 8002076:	0040      	lsls	r0, r0, #1
 8002078:	3801      	subs	r0, #1
 800207a:	e7ce      	b.n	800201a <__gedf2+0x52>
 800207c:	2002      	movs	r0, #2
 800207e:	4240      	negs	r0, r0
 8002080:	e7cb      	b.n	800201a <__gedf2+0x52>
 8002082:	45c4      	cmp	ip, r8
 8002084:	d8c5      	bhi.n	8002012 <__gedf2+0x4a>
 8002086:	2000      	movs	r0, #0
 8002088:	45c4      	cmp	ip, r8
 800208a:	d2c6      	bcs.n	800201a <__gedf2+0x52>
 800208c:	e7ed      	b.n	800206a <__gedf2+0xa2>
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff

08002094 <__ledf2>:
 8002094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002096:	4647      	mov	r7, r8
 8002098:	46ce      	mov	lr, r9
 800209a:	0004      	movs	r4, r0
 800209c:	0018      	movs	r0, r3
 800209e:	0016      	movs	r6, r2
 80020a0:	031b      	lsls	r3, r3, #12
 80020a2:	0b1b      	lsrs	r3, r3, #12
 80020a4:	4d2c      	ldr	r5, [pc, #176]	; (8002158 <__ledf2+0xc4>)
 80020a6:	004a      	lsls	r2, r1, #1
 80020a8:	4699      	mov	r9, r3
 80020aa:	b580      	push	{r7, lr}
 80020ac:	0043      	lsls	r3, r0, #1
 80020ae:	030f      	lsls	r7, r1, #12
 80020b0:	46a4      	mov	ip, r4
 80020b2:	46b0      	mov	r8, r6
 80020b4:	0b3f      	lsrs	r7, r7, #12
 80020b6:	0d52      	lsrs	r2, r2, #21
 80020b8:	0fc9      	lsrs	r1, r1, #31
 80020ba:	0d5b      	lsrs	r3, r3, #21
 80020bc:	0fc0      	lsrs	r0, r0, #31
 80020be:	42aa      	cmp	r2, r5
 80020c0:	d00d      	beq.n	80020de <__ledf2+0x4a>
 80020c2:	42ab      	cmp	r3, r5
 80020c4:	d010      	beq.n	80020e8 <__ledf2+0x54>
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	d127      	bne.n	800211a <__ledf2+0x86>
 80020ca:	433c      	orrs	r4, r7
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <__ledf2+0x60>
 80020d0:	464d      	mov	r5, r9
 80020d2:	432e      	orrs	r6, r5
 80020d4:	d10e      	bne.n	80020f4 <__ledf2+0x60>
 80020d6:	2000      	movs	r0, #0
 80020d8:	2c00      	cmp	r4, #0
 80020da:	d015      	beq.n	8002108 <__ledf2+0x74>
 80020dc:	e00e      	b.n	80020fc <__ledf2+0x68>
 80020de:	003d      	movs	r5, r7
 80020e0:	4325      	orrs	r5, r4
 80020e2:	d110      	bne.n	8002106 <__ledf2+0x72>
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d118      	bne.n	800211a <__ledf2+0x86>
 80020e8:	464d      	mov	r5, r9
 80020ea:	432e      	orrs	r6, r5
 80020ec:	d10b      	bne.n	8002106 <__ledf2+0x72>
 80020ee:	2a00      	cmp	r2, #0
 80020f0:	d102      	bne.n	80020f8 <__ledf2+0x64>
 80020f2:	433c      	orrs	r4, r7
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	d00b      	beq.n	8002110 <__ledf2+0x7c>
 80020f8:	4281      	cmp	r1, r0
 80020fa:	d014      	beq.n	8002126 <__ledf2+0x92>
 80020fc:	2002      	movs	r0, #2
 80020fe:	3901      	subs	r1, #1
 8002100:	4008      	ands	r0, r1
 8002102:	3801      	subs	r0, #1
 8002104:	e000      	b.n	8002108 <__ledf2+0x74>
 8002106:	2002      	movs	r0, #2
 8002108:	bcc0      	pop	{r6, r7}
 800210a:	46b9      	mov	r9, r7
 800210c:	46b0      	mov	r8, r6
 800210e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002110:	2800      	cmp	r0, #0
 8002112:	d1f9      	bne.n	8002108 <__ledf2+0x74>
 8002114:	2001      	movs	r0, #1
 8002116:	4240      	negs	r0, r0
 8002118:	e7f6      	b.n	8002108 <__ledf2+0x74>
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ec      	bne.n	80020f8 <__ledf2+0x64>
 800211e:	464c      	mov	r4, r9
 8002120:	4326      	orrs	r6, r4
 8002122:	d1e9      	bne.n	80020f8 <__ledf2+0x64>
 8002124:	e7ea      	b.n	80020fc <__ledf2+0x68>
 8002126:	429a      	cmp	r2, r3
 8002128:	dd04      	ble.n	8002134 <__ledf2+0xa0>
 800212a:	4243      	negs	r3, r0
 800212c:	4158      	adcs	r0, r3
 800212e:	0040      	lsls	r0, r0, #1
 8002130:	3801      	subs	r0, #1
 8002132:	e7e9      	b.n	8002108 <__ledf2+0x74>
 8002134:	429a      	cmp	r2, r3
 8002136:	dbeb      	blt.n	8002110 <__ledf2+0x7c>
 8002138:	454f      	cmp	r7, r9
 800213a:	d8df      	bhi.n	80020fc <__ledf2+0x68>
 800213c:	d006      	beq.n	800214c <__ledf2+0xb8>
 800213e:	2000      	movs	r0, #0
 8002140:	454f      	cmp	r7, r9
 8002142:	d2e1      	bcs.n	8002108 <__ledf2+0x74>
 8002144:	2900      	cmp	r1, #0
 8002146:	d0e5      	beq.n	8002114 <__ledf2+0x80>
 8002148:	0008      	movs	r0, r1
 800214a:	e7dd      	b.n	8002108 <__ledf2+0x74>
 800214c:	45c4      	cmp	ip, r8
 800214e:	d8d5      	bhi.n	80020fc <__ledf2+0x68>
 8002150:	2000      	movs	r0, #0
 8002152:	45c4      	cmp	ip, r8
 8002154:	d2d8      	bcs.n	8002108 <__ledf2+0x74>
 8002156:	e7f5      	b.n	8002144 <__ledf2+0xb0>
 8002158:	000007ff 	.word	0x000007ff

0800215c <__aeabi_dmul>:
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	4645      	mov	r5, r8
 8002160:	46de      	mov	lr, fp
 8002162:	4657      	mov	r7, sl
 8002164:	464e      	mov	r6, r9
 8002166:	b5e0      	push	{r5, r6, r7, lr}
 8002168:	001f      	movs	r7, r3
 800216a:	030b      	lsls	r3, r1, #12
 800216c:	0b1b      	lsrs	r3, r3, #12
 800216e:	469b      	mov	fp, r3
 8002170:	004d      	lsls	r5, r1, #1
 8002172:	0fcb      	lsrs	r3, r1, #31
 8002174:	0004      	movs	r4, r0
 8002176:	4691      	mov	r9, r2
 8002178:	4698      	mov	r8, r3
 800217a:	b087      	sub	sp, #28
 800217c:	0d6d      	lsrs	r5, r5, #21
 800217e:	d100      	bne.n	8002182 <__aeabi_dmul+0x26>
 8002180:	e1cd      	b.n	800251e <__aeabi_dmul+0x3c2>
 8002182:	4bce      	ldr	r3, [pc, #824]	; (80024bc <__aeabi_dmul+0x360>)
 8002184:	429d      	cmp	r5, r3
 8002186:	d100      	bne.n	800218a <__aeabi_dmul+0x2e>
 8002188:	e1e9      	b.n	800255e <__aeabi_dmul+0x402>
 800218a:	465a      	mov	r2, fp
 800218c:	0f43      	lsrs	r3, r0, #29
 800218e:	00d2      	lsls	r2, r2, #3
 8002190:	4313      	orrs	r3, r2
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	0412      	lsls	r2, r2, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	00c3      	lsls	r3, r0, #3
 800219a:	469a      	mov	sl, r3
 800219c:	4bc8      	ldr	r3, [pc, #800]	; (80024c0 <__aeabi_dmul+0x364>)
 800219e:	4693      	mov	fp, r2
 80021a0:	469c      	mov	ip, r3
 80021a2:	2300      	movs	r3, #0
 80021a4:	2600      	movs	r6, #0
 80021a6:	4465      	add	r5, ip
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	033c      	lsls	r4, r7, #12
 80021ac:	007b      	lsls	r3, r7, #1
 80021ae:	4648      	mov	r0, r9
 80021b0:	0b24      	lsrs	r4, r4, #12
 80021b2:	0d5b      	lsrs	r3, r3, #21
 80021b4:	0fff      	lsrs	r7, r7, #31
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d100      	bne.n	80021bc <__aeabi_dmul+0x60>
 80021ba:	e189      	b.n	80024d0 <__aeabi_dmul+0x374>
 80021bc:	4abf      	ldr	r2, [pc, #764]	; (80024bc <__aeabi_dmul+0x360>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <__aeabi_dmul+0x9a>
 80021c2:	0f42      	lsrs	r2, r0, #29
 80021c4:	00e4      	lsls	r4, r4, #3
 80021c6:	4322      	orrs	r2, r4
 80021c8:	2480      	movs	r4, #128	; 0x80
 80021ca:	0424      	lsls	r4, r4, #16
 80021cc:	4314      	orrs	r4, r2
 80021ce:	4abc      	ldr	r2, [pc, #752]	; (80024c0 <__aeabi_dmul+0x364>)
 80021d0:	2100      	movs	r1, #0
 80021d2:	4694      	mov	ip, r2
 80021d4:	4642      	mov	r2, r8
 80021d6:	4463      	add	r3, ip
 80021d8:	195b      	adds	r3, r3, r5
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	9b01      	ldr	r3, [sp, #4]
 80021de:	407a      	eors	r2, r7
 80021e0:	3301      	adds	r3, #1
 80021e2:	00c0      	lsls	r0, r0, #3
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	9302      	str	r3, [sp, #8]
 80021e8:	2e0a      	cmp	r6, #10
 80021ea:	dd1c      	ble.n	8002226 <__aeabi_dmul+0xca>
 80021ec:	003a      	movs	r2, r7
 80021ee:	2e0b      	cmp	r6, #11
 80021f0:	d05e      	beq.n	80022b0 <__aeabi_dmul+0x154>
 80021f2:	4647      	mov	r7, r8
 80021f4:	e056      	b.n	80022a4 <__aeabi_dmul+0x148>
 80021f6:	4649      	mov	r1, r9
 80021f8:	4bb0      	ldr	r3, [pc, #704]	; (80024bc <__aeabi_dmul+0x360>)
 80021fa:	4321      	orrs	r1, r4
 80021fc:	18eb      	adds	r3, r5, r3
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2900      	cmp	r1, #0
 8002202:	d12a      	bne.n	800225a <__aeabi_dmul+0xfe>
 8002204:	2080      	movs	r0, #128	; 0x80
 8002206:	2202      	movs	r2, #2
 8002208:	0100      	lsls	r0, r0, #4
 800220a:	002b      	movs	r3, r5
 800220c:	4684      	mov	ip, r0
 800220e:	4316      	orrs	r6, r2
 8002210:	4642      	mov	r2, r8
 8002212:	4463      	add	r3, ip
 8002214:	407a      	eors	r2, r7
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	2e0a      	cmp	r6, #10
 800221c:	dd00      	ble.n	8002220 <__aeabi_dmul+0xc4>
 800221e:	e231      	b.n	8002684 <__aeabi_dmul+0x528>
 8002220:	2000      	movs	r0, #0
 8002222:	2400      	movs	r4, #0
 8002224:	2102      	movs	r1, #2
 8002226:	2e02      	cmp	r6, #2
 8002228:	dc26      	bgt.n	8002278 <__aeabi_dmul+0x11c>
 800222a:	3e01      	subs	r6, #1
 800222c:	2e01      	cmp	r6, #1
 800222e:	d852      	bhi.n	80022d6 <__aeabi_dmul+0x17a>
 8002230:	2902      	cmp	r1, #2
 8002232:	d04c      	beq.n	80022ce <__aeabi_dmul+0x172>
 8002234:	2901      	cmp	r1, #1
 8002236:	d000      	beq.n	800223a <__aeabi_dmul+0xde>
 8002238:	e118      	b.n	800246c <__aeabi_dmul+0x310>
 800223a:	2300      	movs	r3, #0
 800223c:	2400      	movs	r4, #0
 800223e:	2500      	movs	r5, #0
 8002240:	051b      	lsls	r3, r3, #20
 8002242:	4323      	orrs	r3, r4
 8002244:	07d2      	lsls	r2, r2, #31
 8002246:	4313      	orrs	r3, r2
 8002248:	0028      	movs	r0, r5
 800224a:	0019      	movs	r1, r3
 800224c:	b007      	add	sp, #28
 800224e:	bcf0      	pop	{r4, r5, r6, r7}
 8002250:	46bb      	mov	fp, r7
 8002252:	46b2      	mov	sl, r6
 8002254:	46a9      	mov	r9, r5
 8002256:	46a0      	mov	r8, r4
 8002258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	2203      	movs	r2, #3
 800225e:	0109      	lsls	r1, r1, #4
 8002260:	002b      	movs	r3, r5
 8002262:	468c      	mov	ip, r1
 8002264:	4316      	orrs	r6, r2
 8002266:	4642      	mov	r2, r8
 8002268:	4463      	add	r3, ip
 800226a:	407a      	eors	r2, r7
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	2e0a      	cmp	r6, #10
 8002272:	dd00      	ble.n	8002276 <__aeabi_dmul+0x11a>
 8002274:	e228      	b.n	80026c8 <__aeabi_dmul+0x56c>
 8002276:	2103      	movs	r1, #3
 8002278:	2501      	movs	r5, #1
 800227a:	40b5      	lsls	r5, r6
 800227c:	46ac      	mov	ip, r5
 800227e:	26a6      	movs	r6, #166	; 0xa6
 8002280:	4663      	mov	r3, ip
 8002282:	00f6      	lsls	r6, r6, #3
 8002284:	4035      	ands	r5, r6
 8002286:	4233      	tst	r3, r6
 8002288:	d10b      	bne.n	80022a2 <__aeabi_dmul+0x146>
 800228a:	2690      	movs	r6, #144	; 0x90
 800228c:	00b6      	lsls	r6, r6, #2
 800228e:	4233      	tst	r3, r6
 8002290:	d118      	bne.n	80022c4 <__aeabi_dmul+0x168>
 8002292:	3eb9      	subs	r6, #185	; 0xb9
 8002294:	3eff      	subs	r6, #255	; 0xff
 8002296:	421e      	tst	r6, r3
 8002298:	d01d      	beq.n	80022d6 <__aeabi_dmul+0x17a>
 800229a:	46a3      	mov	fp, r4
 800229c:	4682      	mov	sl, r0
 800229e:	9100      	str	r1, [sp, #0]
 80022a0:	e000      	b.n	80022a4 <__aeabi_dmul+0x148>
 80022a2:	0017      	movs	r7, r2
 80022a4:	9900      	ldr	r1, [sp, #0]
 80022a6:	003a      	movs	r2, r7
 80022a8:	2902      	cmp	r1, #2
 80022aa:	d010      	beq.n	80022ce <__aeabi_dmul+0x172>
 80022ac:	465c      	mov	r4, fp
 80022ae:	4650      	mov	r0, sl
 80022b0:	2903      	cmp	r1, #3
 80022b2:	d1bf      	bne.n	8002234 <__aeabi_dmul+0xd8>
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	031b      	lsls	r3, r3, #12
 80022b8:	431c      	orrs	r4, r3
 80022ba:	0324      	lsls	r4, r4, #12
 80022bc:	0005      	movs	r5, r0
 80022be:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <__aeabi_dmul+0x360>)
 80022c0:	0b24      	lsrs	r4, r4, #12
 80022c2:	e7bd      	b.n	8002240 <__aeabi_dmul+0xe4>
 80022c4:	2480      	movs	r4, #128	; 0x80
 80022c6:	2200      	movs	r2, #0
 80022c8:	4b7c      	ldr	r3, [pc, #496]	; (80024bc <__aeabi_dmul+0x360>)
 80022ca:	0324      	lsls	r4, r4, #12
 80022cc:	e7b8      	b.n	8002240 <__aeabi_dmul+0xe4>
 80022ce:	2400      	movs	r4, #0
 80022d0:	2500      	movs	r5, #0
 80022d2:	4b7a      	ldr	r3, [pc, #488]	; (80024bc <__aeabi_dmul+0x360>)
 80022d4:	e7b4      	b.n	8002240 <__aeabi_dmul+0xe4>
 80022d6:	4653      	mov	r3, sl
 80022d8:	041e      	lsls	r6, r3, #16
 80022da:	0c36      	lsrs	r6, r6, #16
 80022dc:	0c1f      	lsrs	r7, r3, #16
 80022de:	0033      	movs	r3, r6
 80022e0:	0c01      	lsrs	r1, r0, #16
 80022e2:	0400      	lsls	r0, r0, #16
 80022e4:	0c00      	lsrs	r0, r0, #16
 80022e6:	4343      	muls	r3, r0
 80022e8:	4698      	mov	r8, r3
 80022ea:	0003      	movs	r3, r0
 80022ec:	437b      	muls	r3, r7
 80022ee:	4699      	mov	r9, r3
 80022f0:	0033      	movs	r3, r6
 80022f2:	434b      	muls	r3, r1
 80022f4:	469c      	mov	ip, r3
 80022f6:	4643      	mov	r3, r8
 80022f8:	000d      	movs	r5, r1
 80022fa:	0c1b      	lsrs	r3, r3, #16
 80022fc:	469a      	mov	sl, r3
 80022fe:	437d      	muls	r5, r7
 8002300:	44cc      	add	ip, r9
 8002302:	44d4      	add	ip, sl
 8002304:	9500      	str	r5, [sp, #0]
 8002306:	45e1      	cmp	r9, ip
 8002308:	d904      	bls.n	8002314 <__aeabi_dmul+0x1b8>
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	025b      	lsls	r3, r3, #9
 800230e:	4699      	mov	r9, r3
 8002310:	444d      	add	r5, r9
 8002312:	9500      	str	r5, [sp, #0]
 8002314:	4663      	mov	r3, ip
 8002316:	0c1b      	lsrs	r3, r3, #16
 8002318:	001d      	movs	r5, r3
 800231a:	4663      	mov	r3, ip
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	469c      	mov	ip, r3
 8002320:	4643      	mov	r3, r8
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	4698      	mov	r8, r3
 8002328:	4663      	mov	r3, ip
 800232a:	4443      	add	r3, r8
 800232c:	9303      	str	r3, [sp, #12]
 800232e:	0c23      	lsrs	r3, r4, #16
 8002330:	4698      	mov	r8, r3
 8002332:	0033      	movs	r3, r6
 8002334:	0424      	lsls	r4, r4, #16
 8002336:	0c24      	lsrs	r4, r4, #16
 8002338:	4363      	muls	r3, r4
 800233a:	469c      	mov	ip, r3
 800233c:	0023      	movs	r3, r4
 800233e:	437b      	muls	r3, r7
 8002340:	4699      	mov	r9, r3
 8002342:	4643      	mov	r3, r8
 8002344:	435e      	muls	r6, r3
 8002346:	435f      	muls	r7, r3
 8002348:	444e      	add	r6, r9
 800234a:	4663      	mov	r3, ip
 800234c:	46b2      	mov	sl, r6
 800234e:	0c1e      	lsrs	r6, r3, #16
 8002350:	4456      	add	r6, sl
 8002352:	45b1      	cmp	r9, r6
 8002354:	d903      	bls.n	800235e <__aeabi_dmul+0x202>
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	025b      	lsls	r3, r3, #9
 800235a:	4699      	mov	r9, r3
 800235c:	444f      	add	r7, r9
 800235e:	0c33      	lsrs	r3, r6, #16
 8002360:	4699      	mov	r9, r3
 8002362:	003b      	movs	r3, r7
 8002364:	444b      	add	r3, r9
 8002366:	9305      	str	r3, [sp, #20]
 8002368:	4663      	mov	r3, ip
 800236a:	46ac      	mov	ip, r5
 800236c:	041f      	lsls	r7, r3, #16
 800236e:	0c3f      	lsrs	r7, r7, #16
 8002370:	0436      	lsls	r6, r6, #16
 8002372:	19f6      	adds	r6, r6, r7
 8002374:	44b4      	add	ip, r6
 8002376:	4663      	mov	r3, ip
 8002378:	9304      	str	r3, [sp, #16]
 800237a:	465b      	mov	r3, fp
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	469c      	mov	ip, r3
 8002380:	465b      	mov	r3, fp
 8002382:	041f      	lsls	r7, r3, #16
 8002384:	0c3f      	lsrs	r7, r7, #16
 8002386:	003b      	movs	r3, r7
 8002388:	4343      	muls	r3, r0
 800238a:	4699      	mov	r9, r3
 800238c:	4663      	mov	r3, ip
 800238e:	4343      	muls	r3, r0
 8002390:	469a      	mov	sl, r3
 8002392:	464b      	mov	r3, r9
 8002394:	4660      	mov	r0, ip
 8002396:	0c1b      	lsrs	r3, r3, #16
 8002398:	469b      	mov	fp, r3
 800239a:	4348      	muls	r0, r1
 800239c:	4379      	muls	r1, r7
 800239e:	4451      	add	r1, sl
 80023a0:	4459      	add	r1, fp
 80023a2:	458a      	cmp	sl, r1
 80023a4:	d903      	bls.n	80023ae <__aeabi_dmul+0x252>
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	025b      	lsls	r3, r3, #9
 80023aa:	469a      	mov	sl, r3
 80023ac:	4450      	add	r0, sl
 80023ae:	0c0b      	lsrs	r3, r1, #16
 80023b0:	469a      	mov	sl, r3
 80023b2:	464b      	mov	r3, r9
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	0c1b      	lsrs	r3, r3, #16
 80023b8:	4699      	mov	r9, r3
 80023ba:	003b      	movs	r3, r7
 80023bc:	4363      	muls	r3, r4
 80023be:	0409      	lsls	r1, r1, #16
 80023c0:	4645      	mov	r5, r8
 80023c2:	4449      	add	r1, r9
 80023c4:	4699      	mov	r9, r3
 80023c6:	4663      	mov	r3, ip
 80023c8:	435c      	muls	r4, r3
 80023ca:	436b      	muls	r3, r5
 80023cc:	469c      	mov	ip, r3
 80023ce:	464b      	mov	r3, r9
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	4698      	mov	r8, r3
 80023d4:	436f      	muls	r7, r5
 80023d6:	193f      	adds	r7, r7, r4
 80023d8:	4447      	add	r7, r8
 80023da:	4450      	add	r0, sl
 80023dc:	42bc      	cmp	r4, r7
 80023de:	d903      	bls.n	80023e8 <__aeabi_dmul+0x28c>
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	4698      	mov	r8, r3
 80023e6:	44c4      	add	ip, r8
 80023e8:	9b04      	ldr	r3, [sp, #16]
 80023ea:	9d00      	ldr	r5, [sp, #0]
 80023ec:	4698      	mov	r8, r3
 80023ee:	4445      	add	r5, r8
 80023f0:	42b5      	cmp	r5, r6
 80023f2:	41b6      	sbcs	r6, r6
 80023f4:	4273      	negs	r3, r6
 80023f6:	4698      	mov	r8, r3
 80023f8:	464b      	mov	r3, r9
 80023fa:	041e      	lsls	r6, r3, #16
 80023fc:	9b05      	ldr	r3, [sp, #20]
 80023fe:	043c      	lsls	r4, r7, #16
 8002400:	4699      	mov	r9, r3
 8002402:	0c36      	lsrs	r6, r6, #16
 8002404:	19a4      	adds	r4, r4, r6
 8002406:	444c      	add	r4, r9
 8002408:	46a1      	mov	r9, r4
 800240a:	4683      	mov	fp, r0
 800240c:	186e      	adds	r6, r5, r1
 800240e:	44c1      	add	r9, r8
 8002410:	428e      	cmp	r6, r1
 8002412:	4189      	sbcs	r1, r1
 8002414:	44cb      	add	fp, r9
 8002416:	465d      	mov	r5, fp
 8002418:	4249      	negs	r1, r1
 800241a:	186d      	adds	r5, r5, r1
 800241c:	429c      	cmp	r4, r3
 800241e:	41a4      	sbcs	r4, r4
 8002420:	45c1      	cmp	r9, r8
 8002422:	419b      	sbcs	r3, r3
 8002424:	4583      	cmp	fp, r0
 8002426:	4180      	sbcs	r0, r0
 8002428:	428d      	cmp	r5, r1
 800242a:	4189      	sbcs	r1, r1
 800242c:	425b      	negs	r3, r3
 800242e:	4264      	negs	r4, r4
 8002430:	431c      	orrs	r4, r3
 8002432:	4240      	negs	r0, r0
 8002434:	9b03      	ldr	r3, [sp, #12]
 8002436:	4249      	negs	r1, r1
 8002438:	4301      	orrs	r1, r0
 800243a:	0270      	lsls	r0, r6, #9
 800243c:	0c3f      	lsrs	r7, r7, #16
 800243e:	4318      	orrs	r0, r3
 8002440:	19e4      	adds	r4, r4, r7
 8002442:	1e47      	subs	r7, r0, #1
 8002444:	41b8      	sbcs	r0, r7
 8002446:	1864      	adds	r4, r4, r1
 8002448:	4464      	add	r4, ip
 800244a:	0df6      	lsrs	r6, r6, #23
 800244c:	0261      	lsls	r1, r4, #9
 800244e:	4330      	orrs	r0, r6
 8002450:	0dec      	lsrs	r4, r5, #23
 8002452:	026e      	lsls	r6, r5, #9
 8002454:	430c      	orrs	r4, r1
 8002456:	4330      	orrs	r0, r6
 8002458:	01c9      	lsls	r1, r1, #7
 800245a:	d400      	bmi.n	800245e <__aeabi_dmul+0x302>
 800245c:	e0f1      	b.n	8002642 <__aeabi_dmul+0x4e6>
 800245e:	2101      	movs	r1, #1
 8002460:	0843      	lsrs	r3, r0, #1
 8002462:	4001      	ands	r1, r0
 8002464:	430b      	orrs	r3, r1
 8002466:	07e0      	lsls	r0, r4, #31
 8002468:	4318      	orrs	r0, r3
 800246a:	0864      	lsrs	r4, r4, #1
 800246c:	4915      	ldr	r1, [pc, #84]	; (80024c4 <__aeabi_dmul+0x368>)
 800246e:	9b02      	ldr	r3, [sp, #8]
 8002470:	468c      	mov	ip, r1
 8002472:	4463      	add	r3, ip
 8002474:	2b00      	cmp	r3, #0
 8002476:	dc00      	bgt.n	800247a <__aeabi_dmul+0x31e>
 8002478:	e097      	b.n	80025aa <__aeabi_dmul+0x44e>
 800247a:	0741      	lsls	r1, r0, #29
 800247c:	d009      	beq.n	8002492 <__aeabi_dmul+0x336>
 800247e:	210f      	movs	r1, #15
 8002480:	4001      	ands	r1, r0
 8002482:	2904      	cmp	r1, #4
 8002484:	d005      	beq.n	8002492 <__aeabi_dmul+0x336>
 8002486:	1d01      	adds	r1, r0, #4
 8002488:	4281      	cmp	r1, r0
 800248a:	4180      	sbcs	r0, r0
 800248c:	4240      	negs	r0, r0
 800248e:	1824      	adds	r4, r4, r0
 8002490:	0008      	movs	r0, r1
 8002492:	01e1      	lsls	r1, r4, #7
 8002494:	d506      	bpl.n	80024a4 <__aeabi_dmul+0x348>
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	00c9      	lsls	r1, r1, #3
 800249a:	468c      	mov	ip, r1
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <__aeabi_dmul+0x36c>)
 800249e:	401c      	ands	r4, r3
 80024a0:	9b02      	ldr	r3, [sp, #8]
 80024a2:	4463      	add	r3, ip
 80024a4:	4909      	ldr	r1, [pc, #36]	; (80024cc <__aeabi_dmul+0x370>)
 80024a6:	428b      	cmp	r3, r1
 80024a8:	dd00      	ble.n	80024ac <__aeabi_dmul+0x350>
 80024aa:	e710      	b.n	80022ce <__aeabi_dmul+0x172>
 80024ac:	0761      	lsls	r1, r4, #29
 80024ae:	08c5      	lsrs	r5, r0, #3
 80024b0:	0264      	lsls	r4, r4, #9
 80024b2:	055b      	lsls	r3, r3, #21
 80024b4:	430d      	orrs	r5, r1
 80024b6:	0b24      	lsrs	r4, r4, #12
 80024b8:	0d5b      	lsrs	r3, r3, #21
 80024ba:	e6c1      	b.n	8002240 <__aeabi_dmul+0xe4>
 80024bc:	000007ff 	.word	0x000007ff
 80024c0:	fffffc01 	.word	0xfffffc01
 80024c4:	000003ff 	.word	0x000003ff
 80024c8:	feffffff 	.word	0xfeffffff
 80024cc:	000007fe 	.word	0x000007fe
 80024d0:	464b      	mov	r3, r9
 80024d2:	4323      	orrs	r3, r4
 80024d4:	d059      	beq.n	800258a <__aeabi_dmul+0x42e>
 80024d6:	2c00      	cmp	r4, #0
 80024d8:	d100      	bne.n	80024dc <__aeabi_dmul+0x380>
 80024da:	e0a3      	b.n	8002624 <__aeabi_dmul+0x4c8>
 80024dc:	0020      	movs	r0, r4
 80024de:	f000 fdf9 	bl	80030d4 <__clzsi2>
 80024e2:	0001      	movs	r1, r0
 80024e4:	0003      	movs	r3, r0
 80024e6:	390b      	subs	r1, #11
 80024e8:	221d      	movs	r2, #29
 80024ea:	1a52      	subs	r2, r2, r1
 80024ec:	4649      	mov	r1, r9
 80024ee:	0018      	movs	r0, r3
 80024f0:	40d1      	lsrs	r1, r2
 80024f2:	464a      	mov	r2, r9
 80024f4:	3808      	subs	r0, #8
 80024f6:	4082      	lsls	r2, r0
 80024f8:	4084      	lsls	r4, r0
 80024fa:	0010      	movs	r0, r2
 80024fc:	430c      	orrs	r4, r1
 80024fe:	4a74      	ldr	r2, [pc, #464]	; (80026d0 <__aeabi_dmul+0x574>)
 8002500:	1aeb      	subs	r3, r5, r3
 8002502:	4694      	mov	ip, r2
 8002504:	4642      	mov	r2, r8
 8002506:	4463      	add	r3, ip
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	9b01      	ldr	r3, [sp, #4]
 800250c:	407a      	eors	r2, r7
 800250e:	3301      	adds	r3, #1
 8002510:	2100      	movs	r1, #0
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	9302      	str	r3, [sp, #8]
 8002516:	2e0a      	cmp	r6, #10
 8002518:	dd00      	ble.n	800251c <__aeabi_dmul+0x3c0>
 800251a:	e667      	b.n	80021ec <__aeabi_dmul+0x90>
 800251c:	e683      	b.n	8002226 <__aeabi_dmul+0xca>
 800251e:	465b      	mov	r3, fp
 8002520:	4303      	orrs	r3, r0
 8002522:	469a      	mov	sl, r3
 8002524:	d02a      	beq.n	800257c <__aeabi_dmul+0x420>
 8002526:	465b      	mov	r3, fp
 8002528:	2b00      	cmp	r3, #0
 800252a:	d06d      	beq.n	8002608 <__aeabi_dmul+0x4ac>
 800252c:	4658      	mov	r0, fp
 800252e:	f000 fdd1 	bl	80030d4 <__clzsi2>
 8002532:	0001      	movs	r1, r0
 8002534:	0003      	movs	r3, r0
 8002536:	390b      	subs	r1, #11
 8002538:	221d      	movs	r2, #29
 800253a:	1a52      	subs	r2, r2, r1
 800253c:	0021      	movs	r1, r4
 800253e:	0018      	movs	r0, r3
 8002540:	465d      	mov	r5, fp
 8002542:	40d1      	lsrs	r1, r2
 8002544:	3808      	subs	r0, #8
 8002546:	4085      	lsls	r5, r0
 8002548:	000a      	movs	r2, r1
 800254a:	4084      	lsls	r4, r0
 800254c:	432a      	orrs	r2, r5
 800254e:	4693      	mov	fp, r2
 8002550:	46a2      	mov	sl, r4
 8002552:	4d5f      	ldr	r5, [pc, #380]	; (80026d0 <__aeabi_dmul+0x574>)
 8002554:	2600      	movs	r6, #0
 8002556:	1aed      	subs	r5, r5, r3
 8002558:	2300      	movs	r3, #0
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	e625      	b.n	80021aa <__aeabi_dmul+0x4e>
 800255e:	465b      	mov	r3, fp
 8002560:	4303      	orrs	r3, r0
 8002562:	469a      	mov	sl, r3
 8002564:	d105      	bne.n	8002572 <__aeabi_dmul+0x416>
 8002566:	2300      	movs	r3, #0
 8002568:	469b      	mov	fp, r3
 800256a:	3302      	adds	r3, #2
 800256c:	2608      	movs	r6, #8
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	e61b      	b.n	80021aa <__aeabi_dmul+0x4e>
 8002572:	2303      	movs	r3, #3
 8002574:	4682      	mov	sl, r0
 8002576:	260c      	movs	r6, #12
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	e616      	b.n	80021aa <__aeabi_dmul+0x4e>
 800257c:	2300      	movs	r3, #0
 800257e:	469b      	mov	fp, r3
 8002580:	3301      	adds	r3, #1
 8002582:	2604      	movs	r6, #4
 8002584:	2500      	movs	r5, #0
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	e60f      	b.n	80021aa <__aeabi_dmul+0x4e>
 800258a:	4642      	mov	r2, r8
 800258c:	3301      	adds	r3, #1
 800258e:	9501      	str	r5, [sp, #4]
 8002590:	431e      	orrs	r6, r3
 8002592:	9b01      	ldr	r3, [sp, #4]
 8002594:	407a      	eors	r2, r7
 8002596:	3301      	adds	r3, #1
 8002598:	2400      	movs	r4, #0
 800259a:	2000      	movs	r0, #0
 800259c:	2101      	movs	r1, #1
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	2e0a      	cmp	r6, #10
 80025a4:	dd00      	ble.n	80025a8 <__aeabi_dmul+0x44c>
 80025a6:	e621      	b.n	80021ec <__aeabi_dmul+0x90>
 80025a8:	e63d      	b.n	8002226 <__aeabi_dmul+0xca>
 80025aa:	2101      	movs	r1, #1
 80025ac:	1ac9      	subs	r1, r1, r3
 80025ae:	2938      	cmp	r1, #56	; 0x38
 80025b0:	dd00      	ble.n	80025b4 <__aeabi_dmul+0x458>
 80025b2:	e642      	b.n	800223a <__aeabi_dmul+0xde>
 80025b4:	291f      	cmp	r1, #31
 80025b6:	dd47      	ble.n	8002648 <__aeabi_dmul+0x4ec>
 80025b8:	261f      	movs	r6, #31
 80025ba:	0025      	movs	r5, r4
 80025bc:	4276      	negs	r6, r6
 80025be:	1af3      	subs	r3, r6, r3
 80025c0:	40dd      	lsrs	r5, r3
 80025c2:	002b      	movs	r3, r5
 80025c4:	2920      	cmp	r1, #32
 80025c6:	d005      	beq.n	80025d4 <__aeabi_dmul+0x478>
 80025c8:	4942      	ldr	r1, [pc, #264]	; (80026d4 <__aeabi_dmul+0x578>)
 80025ca:	9d02      	ldr	r5, [sp, #8]
 80025cc:	468c      	mov	ip, r1
 80025ce:	4465      	add	r5, ip
 80025d0:	40ac      	lsls	r4, r5
 80025d2:	4320      	orrs	r0, r4
 80025d4:	1e41      	subs	r1, r0, #1
 80025d6:	4188      	sbcs	r0, r1
 80025d8:	4318      	orrs	r0, r3
 80025da:	2307      	movs	r3, #7
 80025dc:	001d      	movs	r5, r3
 80025de:	2400      	movs	r4, #0
 80025e0:	4005      	ands	r5, r0
 80025e2:	4203      	tst	r3, r0
 80025e4:	d04a      	beq.n	800267c <__aeabi_dmul+0x520>
 80025e6:	230f      	movs	r3, #15
 80025e8:	2400      	movs	r4, #0
 80025ea:	4003      	ands	r3, r0
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d042      	beq.n	8002676 <__aeabi_dmul+0x51a>
 80025f0:	1d03      	adds	r3, r0, #4
 80025f2:	4283      	cmp	r3, r0
 80025f4:	4180      	sbcs	r0, r0
 80025f6:	4240      	negs	r0, r0
 80025f8:	1824      	adds	r4, r4, r0
 80025fa:	0018      	movs	r0, r3
 80025fc:	0223      	lsls	r3, r4, #8
 80025fe:	d53a      	bpl.n	8002676 <__aeabi_dmul+0x51a>
 8002600:	2301      	movs	r3, #1
 8002602:	2400      	movs	r4, #0
 8002604:	2500      	movs	r5, #0
 8002606:	e61b      	b.n	8002240 <__aeabi_dmul+0xe4>
 8002608:	f000 fd64 	bl	80030d4 <__clzsi2>
 800260c:	0001      	movs	r1, r0
 800260e:	0003      	movs	r3, r0
 8002610:	3115      	adds	r1, #21
 8002612:	3320      	adds	r3, #32
 8002614:	291c      	cmp	r1, #28
 8002616:	dd8f      	ble.n	8002538 <__aeabi_dmul+0x3dc>
 8002618:	3808      	subs	r0, #8
 800261a:	2200      	movs	r2, #0
 800261c:	4084      	lsls	r4, r0
 800261e:	4692      	mov	sl, r2
 8002620:	46a3      	mov	fp, r4
 8002622:	e796      	b.n	8002552 <__aeabi_dmul+0x3f6>
 8002624:	f000 fd56 	bl	80030d4 <__clzsi2>
 8002628:	0001      	movs	r1, r0
 800262a:	0003      	movs	r3, r0
 800262c:	3115      	adds	r1, #21
 800262e:	3320      	adds	r3, #32
 8002630:	291c      	cmp	r1, #28
 8002632:	dc00      	bgt.n	8002636 <__aeabi_dmul+0x4da>
 8002634:	e758      	b.n	80024e8 <__aeabi_dmul+0x38c>
 8002636:	0002      	movs	r2, r0
 8002638:	464c      	mov	r4, r9
 800263a:	3a08      	subs	r2, #8
 800263c:	2000      	movs	r0, #0
 800263e:	4094      	lsls	r4, r2
 8002640:	e75d      	b.n	80024fe <__aeabi_dmul+0x3a2>
 8002642:	9b01      	ldr	r3, [sp, #4]
 8002644:	9302      	str	r3, [sp, #8]
 8002646:	e711      	b.n	800246c <__aeabi_dmul+0x310>
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <__aeabi_dmul+0x57c>)
 800264a:	0026      	movs	r6, r4
 800264c:	469c      	mov	ip, r3
 800264e:	0003      	movs	r3, r0
 8002650:	9d02      	ldr	r5, [sp, #8]
 8002652:	40cb      	lsrs	r3, r1
 8002654:	4465      	add	r5, ip
 8002656:	40ae      	lsls	r6, r5
 8002658:	431e      	orrs	r6, r3
 800265a:	0003      	movs	r3, r0
 800265c:	40ab      	lsls	r3, r5
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	4183      	sbcs	r3, r0
 8002662:	0030      	movs	r0, r6
 8002664:	4318      	orrs	r0, r3
 8002666:	40cc      	lsrs	r4, r1
 8002668:	0743      	lsls	r3, r0, #29
 800266a:	d0c7      	beq.n	80025fc <__aeabi_dmul+0x4a0>
 800266c:	230f      	movs	r3, #15
 800266e:	4003      	ands	r3, r0
 8002670:	2b04      	cmp	r3, #4
 8002672:	d1bd      	bne.n	80025f0 <__aeabi_dmul+0x494>
 8002674:	e7c2      	b.n	80025fc <__aeabi_dmul+0x4a0>
 8002676:	0765      	lsls	r5, r4, #29
 8002678:	0264      	lsls	r4, r4, #9
 800267a:	0b24      	lsrs	r4, r4, #12
 800267c:	08c0      	lsrs	r0, r0, #3
 800267e:	2300      	movs	r3, #0
 8002680:	4305      	orrs	r5, r0
 8002682:	e5dd      	b.n	8002240 <__aeabi_dmul+0xe4>
 8002684:	2500      	movs	r5, #0
 8002686:	2302      	movs	r3, #2
 8002688:	2e0f      	cmp	r6, #15
 800268a:	d10c      	bne.n	80026a6 <__aeabi_dmul+0x54a>
 800268c:	2480      	movs	r4, #128	; 0x80
 800268e:	465b      	mov	r3, fp
 8002690:	0324      	lsls	r4, r4, #12
 8002692:	4223      	tst	r3, r4
 8002694:	d00e      	beq.n	80026b4 <__aeabi_dmul+0x558>
 8002696:	4221      	tst	r1, r4
 8002698:	d10c      	bne.n	80026b4 <__aeabi_dmul+0x558>
 800269a:	430c      	orrs	r4, r1
 800269c:	0324      	lsls	r4, r4, #12
 800269e:	003a      	movs	r2, r7
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <__aeabi_dmul+0x580>)
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	e5cc      	b.n	8002240 <__aeabi_dmul+0xe4>
 80026a6:	2e0b      	cmp	r6, #11
 80026a8:	d000      	beq.n	80026ac <__aeabi_dmul+0x550>
 80026aa:	e5a2      	b.n	80021f2 <__aeabi_dmul+0x96>
 80026ac:	468b      	mov	fp, r1
 80026ae:	46aa      	mov	sl, r5
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	e5f7      	b.n	80022a4 <__aeabi_dmul+0x148>
 80026b4:	2480      	movs	r4, #128	; 0x80
 80026b6:	465b      	mov	r3, fp
 80026b8:	0324      	lsls	r4, r4, #12
 80026ba:	431c      	orrs	r4, r3
 80026bc:	0324      	lsls	r4, r4, #12
 80026be:	4642      	mov	r2, r8
 80026c0:	4655      	mov	r5, sl
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <__aeabi_dmul+0x580>)
 80026c4:	0b24      	lsrs	r4, r4, #12
 80026c6:	e5bb      	b.n	8002240 <__aeabi_dmul+0xe4>
 80026c8:	464d      	mov	r5, r9
 80026ca:	0021      	movs	r1, r4
 80026cc:	2303      	movs	r3, #3
 80026ce:	e7db      	b.n	8002688 <__aeabi_dmul+0x52c>
 80026d0:	fffffc0d 	.word	0xfffffc0d
 80026d4:	0000043e 	.word	0x0000043e
 80026d8:	0000041e 	.word	0x0000041e
 80026dc:	000007ff 	.word	0x000007ff

080026e0 <__aeabi_dsub>:
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	4657      	mov	r7, sl
 80026e4:	464e      	mov	r6, r9
 80026e6:	4645      	mov	r5, r8
 80026e8:	46de      	mov	lr, fp
 80026ea:	b5e0      	push	{r5, r6, r7, lr}
 80026ec:	000d      	movs	r5, r1
 80026ee:	0004      	movs	r4, r0
 80026f0:	0019      	movs	r1, r3
 80026f2:	0010      	movs	r0, r2
 80026f4:	032b      	lsls	r3, r5, #12
 80026f6:	0a5b      	lsrs	r3, r3, #9
 80026f8:	0f62      	lsrs	r2, r4, #29
 80026fa:	431a      	orrs	r2, r3
 80026fc:	00e3      	lsls	r3, r4, #3
 80026fe:	030c      	lsls	r4, r1, #12
 8002700:	0a64      	lsrs	r4, r4, #9
 8002702:	0f47      	lsrs	r7, r0, #29
 8002704:	4327      	orrs	r7, r4
 8002706:	4cd0      	ldr	r4, [pc, #832]	; (8002a48 <__aeabi_dsub+0x368>)
 8002708:	006e      	lsls	r6, r5, #1
 800270a:	4691      	mov	r9, r2
 800270c:	b083      	sub	sp, #12
 800270e:	004a      	lsls	r2, r1, #1
 8002710:	00c0      	lsls	r0, r0, #3
 8002712:	4698      	mov	r8, r3
 8002714:	46a2      	mov	sl, r4
 8002716:	0d76      	lsrs	r6, r6, #21
 8002718:	0fed      	lsrs	r5, r5, #31
 800271a:	0d52      	lsrs	r2, r2, #21
 800271c:	0fc9      	lsrs	r1, r1, #31
 800271e:	9001      	str	r0, [sp, #4]
 8002720:	42a2      	cmp	r2, r4
 8002722:	d100      	bne.n	8002726 <__aeabi_dsub+0x46>
 8002724:	e0b9      	b.n	800289a <__aeabi_dsub+0x1ba>
 8002726:	2401      	movs	r4, #1
 8002728:	4061      	eors	r1, r4
 800272a:	468b      	mov	fp, r1
 800272c:	428d      	cmp	r5, r1
 800272e:	d100      	bne.n	8002732 <__aeabi_dsub+0x52>
 8002730:	e08d      	b.n	800284e <__aeabi_dsub+0x16e>
 8002732:	1ab4      	subs	r4, r6, r2
 8002734:	46a4      	mov	ip, r4
 8002736:	2c00      	cmp	r4, #0
 8002738:	dc00      	bgt.n	800273c <__aeabi_dsub+0x5c>
 800273a:	e0b7      	b.n	80028ac <__aeabi_dsub+0x1cc>
 800273c:	2a00      	cmp	r2, #0
 800273e:	d100      	bne.n	8002742 <__aeabi_dsub+0x62>
 8002740:	e0cb      	b.n	80028da <__aeabi_dsub+0x1fa>
 8002742:	4ac1      	ldr	r2, [pc, #772]	; (8002a48 <__aeabi_dsub+0x368>)
 8002744:	4296      	cmp	r6, r2
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0x6a>
 8002748:	e186      	b.n	8002a58 <__aeabi_dsub+0x378>
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	0412      	lsls	r2, r2, #16
 800274e:	4317      	orrs	r7, r2
 8002750:	4662      	mov	r2, ip
 8002752:	2a38      	cmp	r2, #56	; 0x38
 8002754:	dd00      	ble.n	8002758 <__aeabi_dsub+0x78>
 8002756:	e1a4      	b.n	8002aa2 <__aeabi_dsub+0x3c2>
 8002758:	2a1f      	cmp	r2, #31
 800275a:	dd00      	ble.n	800275e <__aeabi_dsub+0x7e>
 800275c:	e21d      	b.n	8002b9a <__aeabi_dsub+0x4ba>
 800275e:	4661      	mov	r1, ip
 8002760:	2220      	movs	r2, #32
 8002762:	003c      	movs	r4, r7
 8002764:	1a52      	subs	r2, r2, r1
 8002766:	0001      	movs	r1, r0
 8002768:	4090      	lsls	r0, r2
 800276a:	4094      	lsls	r4, r2
 800276c:	1e42      	subs	r2, r0, #1
 800276e:	4190      	sbcs	r0, r2
 8002770:	4662      	mov	r2, ip
 8002772:	46a0      	mov	r8, r4
 8002774:	4664      	mov	r4, ip
 8002776:	40d7      	lsrs	r7, r2
 8002778:	464a      	mov	r2, r9
 800277a:	40e1      	lsrs	r1, r4
 800277c:	4644      	mov	r4, r8
 800277e:	1bd2      	subs	r2, r2, r7
 8002780:	4691      	mov	r9, r2
 8002782:	430c      	orrs	r4, r1
 8002784:	4304      	orrs	r4, r0
 8002786:	1b1c      	subs	r4, r3, r4
 8002788:	42a3      	cmp	r3, r4
 800278a:	4192      	sbcs	r2, r2
 800278c:	464b      	mov	r3, r9
 800278e:	4252      	negs	r2, r2
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	469a      	mov	sl, r3
 8002794:	4653      	mov	r3, sl
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	d400      	bmi.n	800279c <__aeabi_dsub+0xbc>
 800279a:	e12b      	b.n	80029f4 <__aeabi_dsub+0x314>
 800279c:	4653      	mov	r3, sl
 800279e:	025a      	lsls	r2, r3, #9
 80027a0:	0a53      	lsrs	r3, r2, #9
 80027a2:	469a      	mov	sl, r3
 80027a4:	4653      	mov	r3, sl
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0xcc>
 80027aa:	e166      	b.n	8002a7a <__aeabi_dsub+0x39a>
 80027ac:	4650      	mov	r0, sl
 80027ae:	f000 fc91 	bl	80030d4 <__clzsi2>
 80027b2:	0003      	movs	r3, r0
 80027b4:	3b08      	subs	r3, #8
 80027b6:	2220      	movs	r2, #32
 80027b8:	0020      	movs	r0, r4
 80027ba:	1ad2      	subs	r2, r2, r3
 80027bc:	4651      	mov	r1, sl
 80027be:	40d0      	lsrs	r0, r2
 80027c0:	4099      	lsls	r1, r3
 80027c2:	0002      	movs	r2, r0
 80027c4:	409c      	lsls	r4, r3
 80027c6:	430a      	orrs	r2, r1
 80027c8:	429e      	cmp	r6, r3
 80027ca:	dd00      	ble.n	80027ce <__aeabi_dsub+0xee>
 80027cc:	e164      	b.n	8002a98 <__aeabi_dsub+0x3b8>
 80027ce:	1b9b      	subs	r3, r3, r6
 80027d0:	1c59      	adds	r1, r3, #1
 80027d2:	291f      	cmp	r1, #31
 80027d4:	dd00      	ble.n	80027d8 <__aeabi_dsub+0xf8>
 80027d6:	e0fe      	b.n	80029d6 <__aeabi_dsub+0x2f6>
 80027d8:	2320      	movs	r3, #32
 80027da:	0010      	movs	r0, r2
 80027dc:	0026      	movs	r6, r4
 80027de:	1a5b      	subs	r3, r3, r1
 80027e0:	409c      	lsls	r4, r3
 80027e2:	4098      	lsls	r0, r3
 80027e4:	40ce      	lsrs	r6, r1
 80027e6:	40ca      	lsrs	r2, r1
 80027e8:	1e63      	subs	r3, r4, #1
 80027ea:	419c      	sbcs	r4, r3
 80027ec:	4330      	orrs	r0, r6
 80027ee:	4692      	mov	sl, r2
 80027f0:	2600      	movs	r6, #0
 80027f2:	4304      	orrs	r4, r0
 80027f4:	0763      	lsls	r3, r4, #29
 80027f6:	d009      	beq.n	800280c <__aeabi_dsub+0x12c>
 80027f8:	230f      	movs	r3, #15
 80027fa:	4023      	ands	r3, r4
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d005      	beq.n	800280c <__aeabi_dsub+0x12c>
 8002800:	1d23      	adds	r3, r4, #4
 8002802:	42a3      	cmp	r3, r4
 8002804:	41a4      	sbcs	r4, r4
 8002806:	4264      	negs	r4, r4
 8002808:	44a2      	add	sl, r4
 800280a:	001c      	movs	r4, r3
 800280c:	4653      	mov	r3, sl
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	d400      	bmi.n	8002814 <__aeabi_dsub+0x134>
 8002812:	e0f2      	b.n	80029fa <__aeabi_dsub+0x31a>
 8002814:	4b8c      	ldr	r3, [pc, #560]	; (8002a48 <__aeabi_dsub+0x368>)
 8002816:	3601      	adds	r6, #1
 8002818:	429e      	cmp	r6, r3
 800281a:	d100      	bne.n	800281e <__aeabi_dsub+0x13e>
 800281c:	e10f      	b.n	8002a3e <__aeabi_dsub+0x35e>
 800281e:	4653      	mov	r3, sl
 8002820:	498a      	ldr	r1, [pc, #552]	; (8002a4c <__aeabi_dsub+0x36c>)
 8002822:	08e4      	lsrs	r4, r4, #3
 8002824:	400b      	ands	r3, r1
 8002826:	0019      	movs	r1, r3
 8002828:	075b      	lsls	r3, r3, #29
 800282a:	4323      	orrs	r3, r4
 800282c:	0572      	lsls	r2, r6, #21
 800282e:	024c      	lsls	r4, r1, #9
 8002830:	0b24      	lsrs	r4, r4, #12
 8002832:	0d52      	lsrs	r2, r2, #21
 8002834:	0512      	lsls	r2, r2, #20
 8002836:	4322      	orrs	r2, r4
 8002838:	07ed      	lsls	r5, r5, #31
 800283a:	432a      	orrs	r2, r5
 800283c:	0018      	movs	r0, r3
 800283e:	0011      	movs	r1, r2
 8002840:	b003      	add	sp, #12
 8002842:	bcf0      	pop	{r4, r5, r6, r7}
 8002844:	46bb      	mov	fp, r7
 8002846:	46b2      	mov	sl, r6
 8002848:	46a9      	mov	r9, r5
 800284a:	46a0      	mov	r8, r4
 800284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284e:	1ab4      	subs	r4, r6, r2
 8002850:	46a4      	mov	ip, r4
 8002852:	2c00      	cmp	r4, #0
 8002854:	dd59      	ble.n	800290a <__aeabi_dsub+0x22a>
 8002856:	2a00      	cmp	r2, #0
 8002858:	d100      	bne.n	800285c <__aeabi_dsub+0x17c>
 800285a:	e0b0      	b.n	80029be <__aeabi_dsub+0x2de>
 800285c:	4556      	cmp	r6, sl
 800285e:	d100      	bne.n	8002862 <__aeabi_dsub+0x182>
 8002860:	e0fa      	b.n	8002a58 <__aeabi_dsub+0x378>
 8002862:	2280      	movs	r2, #128	; 0x80
 8002864:	0412      	lsls	r2, r2, #16
 8002866:	4317      	orrs	r7, r2
 8002868:	4662      	mov	r2, ip
 800286a:	2a38      	cmp	r2, #56	; 0x38
 800286c:	dd00      	ble.n	8002870 <__aeabi_dsub+0x190>
 800286e:	e0d4      	b.n	8002a1a <__aeabi_dsub+0x33a>
 8002870:	2a1f      	cmp	r2, #31
 8002872:	dc00      	bgt.n	8002876 <__aeabi_dsub+0x196>
 8002874:	e1c0      	b.n	8002bf8 <__aeabi_dsub+0x518>
 8002876:	0039      	movs	r1, r7
 8002878:	3a20      	subs	r2, #32
 800287a:	40d1      	lsrs	r1, r2
 800287c:	4662      	mov	r2, ip
 800287e:	2a20      	cmp	r2, #32
 8002880:	d006      	beq.n	8002890 <__aeabi_dsub+0x1b0>
 8002882:	4664      	mov	r4, ip
 8002884:	2240      	movs	r2, #64	; 0x40
 8002886:	1b12      	subs	r2, r2, r4
 8002888:	003c      	movs	r4, r7
 800288a:	4094      	lsls	r4, r2
 800288c:	4304      	orrs	r4, r0
 800288e:	9401      	str	r4, [sp, #4]
 8002890:	9c01      	ldr	r4, [sp, #4]
 8002892:	1e62      	subs	r2, r4, #1
 8002894:	4194      	sbcs	r4, r2
 8002896:	430c      	orrs	r4, r1
 8002898:	e0c3      	b.n	8002a22 <__aeabi_dsub+0x342>
 800289a:	003c      	movs	r4, r7
 800289c:	4304      	orrs	r4, r0
 800289e:	d02b      	beq.n	80028f8 <__aeabi_dsub+0x218>
 80028a0:	468b      	mov	fp, r1
 80028a2:	428d      	cmp	r5, r1
 80028a4:	d02e      	beq.n	8002904 <__aeabi_dsub+0x224>
 80028a6:	4c6a      	ldr	r4, [pc, #424]	; (8002a50 <__aeabi_dsub+0x370>)
 80028a8:	46a4      	mov	ip, r4
 80028aa:	44b4      	add	ip, r6
 80028ac:	4664      	mov	r4, ip
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	d05f      	beq.n	8002972 <__aeabi_dsub+0x292>
 80028b2:	1b94      	subs	r4, r2, r6
 80028b4:	46a4      	mov	ip, r4
 80028b6:	2e00      	cmp	r6, #0
 80028b8:	d000      	beq.n	80028bc <__aeabi_dsub+0x1dc>
 80028ba:	e120      	b.n	8002afe <__aeabi_dsub+0x41e>
 80028bc:	464c      	mov	r4, r9
 80028be:	431c      	orrs	r4, r3
 80028c0:	d100      	bne.n	80028c4 <__aeabi_dsub+0x1e4>
 80028c2:	e1c7      	b.n	8002c54 <__aeabi_dsub+0x574>
 80028c4:	4661      	mov	r1, ip
 80028c6:	1e4c      	subs	r4, r1, #1
 80028c8:	2901      	cmp	r1, #1
 80028ca:	d100      	bne.n	80028ce <__aeabi_dsub+0x1ee>
 80028cc:	e223      	b.n	8002d16 <__aeabi_dsub+0x636>
 80028ce:	4d5e      	ldr	r5, [pc, #376]	; (8002a48 <__aeabi_dsub+0x368>)
 80028d0:	45ac      	cmp	ip, r5
 80028d2:	d100      	bne.n	80028d6 <__aeabi_dsub+0x1f6>
 80028d4:	e1d8      	b.n	8002c88 <__aeabi_dsub+0x5a8>
 80028d6:	46a4      	mov	ip, r4
 80028d8:	e11a      	b.n	8002b10 <__aeabi_dsub+0x430>
 80028da:	003a      	movs	r2, r7
 80028dc:	4302      	orrs	r2, r0
 80028de:	d100      	bne.n	80028e2 <__aeabi_dsub+0x202>
 80028e0:	e0e4      	b.n	8002aac <__aeabi_dsub+0x3cc>
 80028e2:	0022      	movs	r2, r4
 80028e4:	3a01      	subs	r2, #1
 80028e6:	2c01      	cmp	r4, #1
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x20c>
 80028ea:	e1c3      	b.n	8002c74 <__aeabi_dsub+0x594>
 80028ec:	4956      	ldr	r1, [pc, #344]	; (8002a48 <__aeabi_dsub+0x368>)
 80028ee:	428c      	cmp	r4, r1
 80028f0:	d100      	bne.n	80028f4 <__aeabi_dsub+0x214>
 80028f2:	e0b1      	b.n	8002a58 <__aeabi_dsub+0x378>
 80028f4:	4694      	mov	ip, r2
 80028f6:	e72b      	b.n	8002750 <__aeabi_dsub+0x70>
 80028f8:	2401      	movs	r4, #1
 80028fa:	4061      	eors	r1, r4
 80028fc:	468b      	mov	fp, r1
 80028fe:	428d      	cmp	r5, r1
 8002900:	d000      	beq.n	8002904 <__aeabi_dsub+0x224>
 8002902:	e716      	b.n	8002732 <__aeabi_dsub+0x52>
 8002904:	4952      	ldr	r1, [pc, #328]	; (8002a50 <__aeabi_dsub+0x370>)
 8002906:	468c      	mov	ip, r1
 8002908:	44b4      	add	ip, r6
 800290a:	4664      	mov	r4, ip
 800290c:	2c00      	cmp	r4, #0
 800290e:	d100      	bne.n	8002912 <__aeabi_dsub+0x232>
 8002910:	e0d3      	b.n	8002aba <__aeabi_dsub+0x3da>
 8002912:	1b91      	subs	r1, r2, r6
 8002914:	468c      	mov	ip, r1
 8002916:	2e00      	cmp	r6, #0
 8002918:	d100      	bne.n	800291c <__aeabi_dsub+0x23c>
 800291a:	e15e      	b.n	8002bda <__aeabi_dsub+0x4fa>
 800291c:	494a      	ldr	r1, [pc, #296]	; (8002a48 <__aeabi_dsub+0x368>)
 800291e:	428a      	cmp	r2, r1
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x244>
 8002922:	e1be      	b.n	8002ca2 <__aeabi_dsub+0x5c2>
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	464c      	mov	r4, r9
 8002928:	0409      	lsls	r1, r1, #16
 800292a:	430c      	orrs	r4, r1
 800292c:	46a1      	mov	r9, r4
 800292e:	4661      	mov	r1, ip
 8002930:	2938      	cmp	r1, #56	; 0x38
 8002932:	dd00      	ble.n	8002936 <__aeabi_dsub+0x256>
 8002934:	e1ba      	b.n	8002cac <__aeabi_dsub+0x5cc>
 8002936:	291f      	cmp	r1, #31
 8002938:	dd00      	ble.n	800293c <__aeabi_dsub+0x25c>
 800293a:	e227      	b.n	8002d8c <__aeabi_dsub+0x6ac>
 800293c:	2420      	movs	r4, #32
 800293e:	1a64      	subs	r4, r4, r1
 8002940:	4649      	mov	r1, r9
 8002942:	40a1      	lsls	r1, r4
 8002944:	001e      	movs	r6, r3
 8002946:	4688      	mov	r8, r1
 8002948:	4661      	mov	r1, ip
 800294a:	40a3      	lsls	r3, r4
 800294c:	40ce      	lsrs	r6, r1
 800294e:	4641      	mov	r1, r8
 8002950:	1e5c      	subs	r4, r3, #1
 8002952:	41a3      	sbcs	r3, r4
 8002954:	4331      	orrs	r1, r6
 8002956:	4319      	orrs	r1, r3
 8002958:	000c      	movs	r4, r1
 800295a:	4663      	mov	r3, ip
 800295c:	4649      	mov	r1, r9
 800295e:	40d9      	lsrs	r1, r3
 8002960:	187f      	adds	r7, r7, r1
 8002962:	1824      	adds	r4, r4, r0
 8002964:	4284      	cmp	r4, r0
 8002966:	419b      	sbcs	r3, r3
 8002968:	425b      	negs	r3, r3
 800296a:	469a      	mov	sl, r3
 800296c:	0016      	movs	r6, r2
 800296e:	44ba      	add	sl, r7
 8002970:	e05d      	b.n	8002a2e <__aeabi_dsub+0x34e>
 8002972:	4c38      	ldr	r4, [pc, #224]	; (8002a54 <__aeabi_dsub+0x374>)
 8002974:	1c72      	adds	r2, r6, #1
 8002976:	4222      	tst	r2, r4
 8002978:	d000      	beq.n	800297c <__aeabi_dsub+0x29c>
 800297a:	e0df      	b.n	8002b3c <__aeabi_dsub+0x45c>
 800297c:	464a      	mov	r2, r9
 800297e:	431a      	orrs	r2, r3
 8002980:	2e00      	cmp	r6, #0
 8002982:	d000      	beq.n	8002986 <__aeabi_dsub+0x2a6>
 8002984:	e15c      	b.n	8002c40 <__aeabi_dsub+0x560>
 8002986:	2a00      	cmp	r2, #0
 8002988:	d100      	bne.n	800298c <__aeabi_dsub+0x2ac>
 800298a:	e1cf      	b.n	8002d2c <__aeabi_dsub+0x64c>
 800298c:	003a      	movs	r2, r7
 800298e:	4302      	orrs	r2, r0
 8002990:	d100      	bne.n	8002994 <__aeabi_dsub+0x2b4>
 8002992:	e17f      	b.n	8002c94 <__aeabi_dsub+0x5b4>
 8002994:	1a1c      	subs	r4, r3, r0
 8002996:	464a      	mov	r2, r9
 8002998:	42a3      	cmp	r3, r4
 800299a:	4189      	sbcs	r1, r1
 800299c:	1bd2      	subs	r2, r2, r7
 800299e:	4249      	negs	r1, r1
 80029a0:	1a52      	subs	r2, r2, r1
 80029a2:	4692      	mov	sl, r2
 80029a4:	0212      	lsls	r2, r2, #8
 80029a6:	d400      	bmi.n	80029aa <__aeabi_dsub+0x2ca>
 80029a8:	e20a      	b.n	8002dc0 <__aeabi_dsub+0x6e0>
 80029aa:	1ac4      	subs	r4, r0, r3
 80029ac:	42a0      	cmp	r0, r4
 80029ae:	4180      	sbcs	r0, r0
 80029b0:	464b      	mov	r3, r9
 80029b2:	4240      	negs	r0, r0
 80029b4:	1aff      	subs	r7, r7, r3
 80029b6:	1a3b      	subs	r3, r7, r0
 80029b8:	469a      	mov	sl, r3
 80029ba:	465d      	mov	r5, fp
 80029bc:	e71a      	b.n	80027f4 <__aeabi_dsub+0x114>
 80029be:	003a      	movs	r2, r7
 80029c0:	4302      	orrs	r2, r0
 80029c2:	d073      	beq.n	8002aac <__aeabi_dsub+0x3cc>
 80029c4:	0022      	movs	r2, r4
 80029c6:	3a01      	subs	r2, #1
 80029c8:	2c01      	cmp	r4, #1
 80029ca:	d100      	bne.n	80029ce <__aeabi_dsub+0x2ee>
 80029cc:	e0cb      	b.n	8002b66 <__aeabi_dsub+0x486>
 80029ce:	4554      	cmp	r4, sl
 80029d0:	d042      	beq.n	8002a58 <__aeabi_dsub+0x378>
 80029d2:	4694      	mov	ip, r2
 80029d4:	e748      	b.n	8002868 <__aeabi_dsub+0x188>
 80029d6:	0010      	movs	r0, r2
 80029d8:	3b1f      	subs	r3, #31
 80029da:	40d8      	lsrs	r0, r3
 80029dc:	2920      	cmp	r1, #32
 80029de:	d003      	beq.n	80029e8 <__aeabi_dsub+0x308>
 80029e0:	2340      	movs	r3, #64	; 0x40
 80029e2:	1a5b      	subs	r3, r3, r1
 80029e4:	409a      	lsls	r2, r3
 80029e6:	4314      	orrs	r4, r2
 80029e8:	1e63      	subs	r3, r4, #1
 80029ea:	419c      	sbcs	r4, r3
 80029ec:	2300      	movs	r3, #0
 80029ee:	2600      	movs	r6, #0
 80029f0:	469a      	mov	sl, r3
 80029f2:	4304      	orrs	r4, r0
 80029f4:	0763      	lsls	r3, r4, #29
 80029f6:	d000      	beq.n	80029fa <__aeabi_dsub+0x31a>
 80029f8:	e6fe      	b.n	80027f8 <__aeabi_dsub+0x118>
 80029fa:	4652      	mov	r2, sl
 80029fc:	08e3      	lsrs	r3, r4, #3
 80029fe:	0752      	lsls	r2, r2, #29
 8002a00:	4313      	orrs	r3, r2
 8002a02:	4652      	mov	r2, sl
 8002a04:	46b4      	mov	ip, r6
 8002a06:	08d2      	lsrs	r2, r2, #3
 8002a08:	490f      	ldr	r1, [pc, #60]	; (8002a48 <__aeabi_dsub+0x368>)
 8002a0a:	458c      	cmp	ip, r1
 8002a0c:	d02a      	beq.n	8002a64 <__aeabi_dsub+0x384>
 8002a0e:	0312      	lsls	r2, r2, #12
 8002a10:	0b14      	lsrs	r4, r2, #12
 8002a12:	4662      	mov	r2, ip
 8002a14:	0552      	lsls	r2, r2, #21
 8002a16:	0d52      	lsrs	r2, r2, #21
 8002a18:	e70c      	b.n	8002834 <__aeabi_dsub+0x154>
 8002a1a:	003c      	movs	r4, r7
 8002a1c:	4304      	orrs	r4, r0
 8002a1e:	1e62      	subs	r2, r4, #1
 8002a20:	4194      	sbcs	r4, r2
 8002a22:	18e4      	adds	r4, r4, r3
 8002a24:	429c      	cmp	r4, r3
 8002a26:	4192      	sbcs	r2, r2
 8002a28:	4252      	negs	r2, r2
 8002a2a:	444a      	add	r2, r9
 8002a2c:	4692      	mov	sl, r2
 8002a2e:	4653      	mov	r3, sl
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	d5df      	bpl.n	80029f4 <__aeabi_dsub+0x314>
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__aeabi_dsub+0x368>)
 8002a36:	3601      	adds	r6, #1
 8002a38:	429e      	cmp	r6, r3
 8002a3a:	d000      	beq.n	8002a3e <__aeabi_dsub+0x35e>
 8002a3c:	e0a0      	b.n	8002b80 <__aeabi_dsub+0x4a0>
 8002a3e:	0032      	movs	r2, r6
 8002a40:	2400      	movs	r4, #0
 8002a42:	2300      	movs	r3, #0
 8002a44:	e6f6      	b.n	8002834 <__aeabi_dsub+0x154>
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	000007ff 	.word	0x000007ff
 8002a4c:	ff7fffff 	.word	0xff7fffff
 8002a50:	fffff801 	.word	0xfffff801
 8002a54:	000007fe 	.word	0x000007fe
 8002a58:	08db      	lsrs	r3, r3, #3
 8002a5a:	464a      	mov	r2, r9
 8002a5c:	0752      	lsls	r2, r2, #29
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	464a      	mov	r2, r9
 8002a62:	08d2      	lsrs	r2, r2, #3
 8002a64:	0019      	movs	r1, r3
 8002a66:	4311      	orrs	r1, r2
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x38c>
 8002a6a:	e1b5      	b.n	8002dd8 <__aeabi_dsub+0x6f8>
 8002a6c:	2480      	movs	r4, #128	; 0x80
 8002a6e:	0324      	lsls	r4, r4, #12
 8002a70:	4314      	orrs	r4, r2
 8002a72:	0324      	lsls	r4, r4, #12
 8002a74:	4ad5      	ldr	r2, [pc, #852]	; (8002dcc <__aeabi_dsub+0x6ec>)
 8002a76:	0b24      	lsrs	r4, r4, #12
 8002a78:	e6dc      	b.n	8002834 <__aeabi_dsub+0x154>
 8002a7a:	0020      	movs	r0, r4
 8002a7c:	f000 fb2a 	bl	80030d4 <__clzsi2>
 8002a80:	0003      	movs	r3, r0
 8002a82:	3318      	adds	r3, #24
 8002a84:	2b1f      	cmp	r3, #31
 8002a86:	dc00      	bgt.n	8002a8a <__aeabi_dsub+0x3aa>
 8002a88:	e695      	b.n	80027b6 <__aeabi_dsub+0xd6>
 8002a8a:	0022      	movs	r2, r4
 8002a8c:	3808      	subs	r0, #8
 8002a8e:	4082      	lsls	r2, r0
 8002a90:	2400      	movs	r4, #0
 8002a92:	429e      	cmp	r6, r3
 8002a94:	dc00      	bgt.n	8002a98 <__aeabi_dsub+0x3b8>
 8002a96:	e69a      	b.n	80027ce <__aeabi_dsub+0xee>
 8002a98:	1af6      	subs	r6, r6, r3
 8002a9a:	4bcd      	ldr	r3, [pc, #820]	; (8002dd0 <__aeabi_dsub+0x6f0>)
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	4692      	mov	sl, r2
 8002aa0:	e6a8      	b.n	80027f4 <__aeabi_dsub+0x114>
 8002aa2:	003c      	movs	r4, r7
 8002aa4:	4304      	orrs	r4, r0
 8002aa6:	1e62      	subs	r2, r4, #1
 8002aa8:	4194      	sbcs	r4, r2
 8002aaa:	e66c      	b.n	8002786 <__aeabi_dsub+0xa6>
 8002aac:	464a      	mov	r2, r9
 8002aae:	08db      	lsrs	r3, r3, #3
 8002ab0:	0752      	lsls	r2, r2, #29
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	464a      	mov	r2, r9
 8002ab6:	08d2      	lsrs	r2, r2, #3
 8002ab8:	e7a6      	b.n	8002a08 <__aeabi_dsub+0x328>
 8002aba:	4cc6      	ldr	r4, [pc, #792]	; (8002dd4 <__aeabi_dsub+0x6f4>)
 8002abc:	1c72      	adds	r2, r6, #1
 8002abe:	4222      	tst	r2, r4
 8002ac0:	d000      	beq.n	8002ac4 <__aeabi_dsub+0x3e4>
 8002ac2:	e0ac      	b.n	8002c1e <__aeabi_dsub+0x53e>
 8002ac4:	464a      	mov	r2, r9
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	2e00      	cmp	r6, #0
 8002aca:	d000      	beq.n	8002ace <__aeabi_dsub+0x3ee>
 8002acc:	e105      	b.n	8002cda <__aeabi_dsub+0x5fa>
 8002ace:	2a00      	cmp	r2, #0
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x3f4>
 8002ad2:	e156      	b.n	8002d82 <__aeabi_dsub+0x6a2>
 8002ad4:	003a      	movs	r2, r7
 8002ad6:	4302      	orrs	r2, r0
 8002ad8:	d100      	bne.n	8002adc <__aeabi_dsub+0x3fc>
 8002ada:	e0db      	b.n	8002c94 <__aeabi_dsub+0x5b4>
 8002adc:	181c      	adds	r4, r3, r0
 8002ade:	429c      	cmp	r4, r3
 8002ae0:	419b      	sbcs	r3, r3
 8002ae2:	444f      	add	r7, r9
 8002ae4:	46ba      	mov	sl, r7
 8002ae6:	425b      	negs	r3, r3
 8002ae8:	449a      	add	sl, r3
 8002aea:	4653      	mov	r3, sl
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	d400      	bmi.n	8002af2 <__aeabi_dsub+0x412>
 8002af0:	e780      	b.n	80029f4 <__aeabi_dsub+0x314>
 8002af2:	4652      	mov	r2, sl
 8002af4:	4bb6      	ldr	r3, [pc, #728]	; (8002dd0 <__aeabi_dsub+0x6f0>)
 8002af6:	2601      	movs	r6, #1
 8002af8:	401a      	ands	r2, r3
 8002afa:	4692      	mov	sl, r2
 8002afc:	e77a      	b.n	80029f4 <__aeabi_dsub+0x314>
 8002afe:	4cb3      	ldr	r4, [pc, #716]	; (8002dcc <__aeabi_dsub+0x6ec>)
 8002b00:	42a2      	cmp	r2, r4
 8002b02:	d100      	bne.n	8002b06 <__aeabi_dsub+0x426>
 8002b04:	e0c0      	b.n	8002c88 <__aeabi_dsub+0x5a8>
 8002b06:	2480      	movs	r4, #128	; 0x80
 8002b08:	464d      	mov	r5, r9
 8002b0a:	0424      	lsls	r4, r4, #16
 8002b0c:	4325      	orrs	r5, r4
 8002b0e:	46a9      	mov	r9, r5
 8002b10:	4664      	mov	r4, ip
 8002b12:	2c38      	cmp	r4, #56	; 0x38
 8002b14:	dc53      	bgt.n	8002bbe <__aeabi_dsub+0x4de>
 8002b16:	4661      	mov	r1, ip
 8002b18:	2c1f      	cmp	r4, #31
 8002b1a:	dd00      	ble.n	8002b1e <__aeabi_dsub+0x43e>
 8002b1c:	e0cd      	b.n	8002cba <__aeabi_dsub+0x5da>
 8002b1e:	2520      	movs	r5, #32
 8002b20:	001e      	movs	r6, r3
 8002b22:	1b2d      	subs	r5, r5, r4
 8002b24:	464c      	mov	r4, r9
 8002b26:	40ab      	lsls	r3, r5
 8002b28:	40ac      	lsls	r4, r5
 8002b2a:	40ce      	lsrs	r6, r1
 8002b2c:	1e5d      	subs	r5, r3, #1
 8002b2e:	41ab      	sbcs	r3, r5
 8002b30:	4334      	orrs	r4, r6
 8002b32:	4323      	orrs	r3, r4
 8002b34:	464c      	mov	r4, r9
 8002b36:	40cc      	lsrs	r4, r1
 8002b38:	1b3f      	subs	r7, r7, r4
 8002b3a:	e045      	b.n	8002bc8 <__aeabi_dsub+0x4e8>
 8002b3c:	464a      	mov	r2, r9
 8002b3e:	1a1c      	subs	r4, r3, r0
 8002b40:	1bd1      	subs	r1, r2, r7
 8002b42:	42a3      	cmp	r3, r4
 8002b44:	4192      	sbcs	r2, r2
 8002b46:	4252      	negs	r2, r2
 8002b48:	4692      	mov	sl, r2
 8002b4a:	000a      	movs	r2, r1
 8002b4c:	4651      	mov	r1, sl
 8002b4e:	1a52      	subs	r2, r2, r1
 8002b50:	4692      	mov	sl, r2
 8002b52:	0212      	lsls	r2, r2, #8
 8002b54:	d500      	bpl.n	8002b58 <__aeabi_dsub+0x478>
 8002b56:	e083      	b.n	8002c60 <__aeabi_dsub+0x580>
 8002b58:	4653      	mov	r3, sl
 8002b5a:	4323      	orrs	r3, r4
 8002b5c:	d000      	beq.n	8002b60 <__aeabi_dsub+0x480>
 8002b5e:	e621      	b.n	80027a4 <__aeabi_dsub+0xc4>
 8002b60:	2200      	movs	r2, #0
 8002b62:	2500      	movs	r5, #0
 8002b64:	e753      	b.n	8002a0e <__aeabi_dsub+0x32e>
 8002b66:	181c      	adds	r4, r3, r0
 8002b68:	429c      	cmp	r4, r3
 8002b6a:	419b      	sbcs	r3, r3
 8002b6c:	444f      	add	r7, r9
 8002b6e:	46ba      	mov	sl, r7
 8002b70:	425b      	negs	r3, r3
 8002b72:	449a      	add	sl, r3
 8002b74:	4653      	mov	r3, sl
 8002b76:	2601      	movs	r6, #1
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	d400      	bmi.n	8002b7e <__aeabi_dsub+0x49e>
 8002b7c:	e73a      	b.n	80029f4 <__aeabi_dsub+0x314>
 8002b7e:	2602      	movs	r6, #2
 8002b80:	4652      	mov	r2, sl
 8002b82:	4b93      	ldr	r3, [pc, #588]	; (8002dd0 <__aeabi_dsub+0x6f0>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	401a      	ands	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	4021      	ands	r1, r4
 8002b8c:	0862      	lsrs	r2, r4, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	07dc      	lsls	r4, r3, #31
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	469a      	mov	sl, r3
 8002b96:	4314      	orrs	r4, r2
 8002b98:	e62c      	b.n	80027f4 <__aeabi_dsub+0x114>
 8002b9a:	0039      	movs	r1, r7
 8002b9c:	3a20      	subs	r2, #32
 8002b9e:	40d1      	lsrs	r1, r2
 8002ba0:	4662      	mov	r2, ip
 8002ba2:	2a20      	cmp	r2, #32
 8002ba4:	d006      	beq.n	8002bb4 <__aeabi_dsub+0x4d4>
 8002ba6:	4664      	mov	r4, ip
 8002ba8:	2240      	movs	r2, #64	; 0x40
 8002baa:	1b12      	subs	r2, r2, r4
 8002bac:	003c      	movs	r4, r7
 8002bae:	4094      	lsls	r4, r2
 8002bb0:	4304      	orrs	r4, r0
 8002bb2:	9401      	str	r4, [sp, #4]
 8002bb4:	9c01      	ldr	r4, [sp, #4]
 8002bb6:	1e62      	subs	r2, r4, #1
 8002bb8:	4194      	sbcs	r4, r2
 8002bba:	430c      	orrs	r4, r1
 8002bbc:	e5e3      	b.n	8002786 <__aeabi_dsub+0xa6>
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	4319      	orrs	r1, r3
 8002bc2:	000b      	movs	r3, r1
 8002bc4:	1e5c      	subs	r4, r3, #1
 8002bc6:	41a3      	sbcs	r3, r4
 8002bc8:	1ac4      	subs	r4, r0, r3
 8002bca:	42a0      	cmp	r0, r4
 8002bcc:	419b      	sbcs	r3, r3
 8002bce:	425b      	negs	r3, r3
 8002bd0:	1afb      	subs	r3, r7, r3
 8002bd2:	469a      	mov	sl, r3
 8002bd4:	465d      	mov	r5, fp
 8002bd6:	0016      	movs	r6, r2
 8002bd8:	e5dc      	b.n	8002794 <__aeabi_dsub+0xb4>
 8002bda:	4649      	mov	r1, r9
 8002bdc:	4319      	orrs	r1, r3
 8002bde:	d100      	bne.n	8002be2 <__aeabi_dsub+0x502>
 8002be0:	e0ae      	b.n	8002d40 <__aeabi_dsub+0x660>
 8002be2:	4661      	mov	r1, ip
 8002be4:	4664      	mov	r4, ip
 8002be6:	3901      	subs	r1, #1
 8002be8:	2c01      	cmp	r4, #1
 8002bea:	d100      	bne.n	8002bee <__aeabi_dsub+0x50e>
 8002bec:	e0e0      	b.n	8002db0 <__aeabi_dsub+0x6d0>
 8002bee:	4c77      	ldr	r4, [pc, #476]	; (8002dcc <__aeabi_dsub+0x6ec>)
 8002bf0:	45a4      	cmp	ip, r4
 8002bf2:	d056      	beq.n	8002ca2 <__aeabi_dsub+0x5c2>
 8002bf4:	468c      	mov	ip, r1
 8002bf6:	e69a      	b.n	800292e <__aeabi_dsub+0x24e>
 8002bf8:	4661      	mov	r1, ip
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	003c      	movs	r4, r7
 8002bfe:	1a52      	subs	r2, r2, r1
 8002c00:	4094      	lsls	r4, r2
 8002c02:	0001      	movs	r1, r0
 8002c04:	4090      	lsls	r0, r2
 8002c06:	46a0      	mov	r8, r4
 8002c08:	4664      	mov	r4, ip
 8002c0a:	1e42      	subs	r2, r0, #1
 8002c0c:	4190      	sbcs	r0, r2
 8002c0e:	4662      	mov	r2, ip
 8002c10:	40e1      	lsrs	r1, r4
 8002c12:	4644      	mov	r4, r8
 8002c14:	40d7      	lsrs	r7, r2
 8002c16:	430c      	orrs	r4, r1
 8002c18:	4304      	orrs	r4, r0
 8002c1a:	44b9      	add	r9, r7
 8002c1c:	e701      	b.n	8002a22 <__aeabi_dsub+0x342>
 8002c1e:	496b      	ldr	r1, [pc, #428]	; (8002dcc <__aeabi_dsub+0x6ec>)
 8002c20:	428a      	cmp	r2, r1
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x546>
 8002c24:	e70c      	b.n	8002a40 <__aeabi_dsub+0x360>
 8002c26:	1818      	adds	r0, r3, r0
 8002c28:	4298      	cmp	r0, r3
 8002c2a:	419b      	sbcs	r3, r3
 8002c2c:	444f      	add	r7, r9
 8002c2e:	425b      	negs	r3, r3
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	07dc      	lsls	r4, r3, #31
 8002c34:	0840      	lsrs	r0, r0, #1
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	469a      	mov	sl, r3
 8002c3a:	0016      	movs	r6, r2
 8002c3c:	4304      	orrs	r4, r0
 8002c3e:	e6d9      	b.n	80029f4 <__aeabi_dsub+0x314>
 8002c40:	2a00      	cmp	r2, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x566>
 8002c44:	e081      	b.n	8002d4a <__aeabi_dsub+0x66a>
 8002c46:	003b      	movs	r3, r7
 8002c48:	4303      	orrs	r3, r0
 8002c4a:	d11d      	bne.n	8002c88 <__aeabi_dsub+0x5a8>
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	2500      	movs	r5, #0
 8002c50:	0312      	lsls	r2, r2, #12
 8002c52:	e70b      	b.n	8002a6c <__aeabi_dsub+0x38c>
 8002c54:	08c0      	lsrs	r0, r0, #3
 8002c56:	077b      	lsls	r3, r7, #29
 8002c58:	465d      	mov	r5, fp
 8002c5a:	4303      	orrs	r3, r0
 8002c5c:	08fa      	lsrs	r2, r7, #3
 8002c5e:	e6d3      	b.n	8002a08 <__aeabi_dsub+0x328>
 8002c60:	1ac4      	subs	r4, r0, r3
 8002c62:	42a0      	cmp	r0, r4
 8002c64:	4180      	sbcs	r0, r0
 8002c66:	464b      	mov	r3, r9
 8002c68:	4240      	negs	r0, r0
 8002c6a:	1aff      	subs	r7, r7, r3
 8002c6c:	1a3b      	subs	r3, r7, r0
 8002c6e:	469a      	mov	sl, r3
 8002c70:	465d      	mov	r5, fp
 8002c72:	e597      	b.n	80027a4 <__aeabi_dsub+0xc4>
 8002c74:	1a1c      	subs	r4, r3, r0
 8002c76:	464a      	mov	r2, r9
 8002c78:	42a3      	cmp	r3, r4
 8002c7a:	419b      	sbcs	r3, r3
 8002c7c:	1bd7      	subs	r7, r2, r7
 8002c7e:	425b      	negs	r3, r3
 8002c80:	1afb      	subs	r3, r7, r3
 8002c82:	469a      	mov	sl, r3
 8002c84:	2601      	movs	r6, #1
 8002c86:	e585      	b.n	8002794 <__aeabi_dsub+0xb4>
 8002c88:	08c0      	lsrs	r0, r0, #3
 8002c8a:	077b      	lsls	r3, r7, #29
 8002c8c:	465d      	mov	r5, fp
 8002c8e:	4303      	orrs	r3, r0
 8002c90:	08fa      	lsrs	r2, r7, #3
 8002c92:	e6e7      	b.n	8002a64 <__aeabi_dsub+0x384>
 8002c94:	464a      	mov	r2, r9
 8002c96:	08db      	lsrs	r3, r3, #3
 8002c98:	0752      	lsls	r2, r2, #29
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	464a      	mov	r2, r9
 8002c9e:	08d2      	lsrs	r2, r2, #3
 8002ca0:	e6b5      	b.n	8002a0e <__aeabi_dsub+0x32e>
 8002ca2:	08c0      	lsrs	r0, r0, #3
 8002ca4:	077b      	lsls	r3, r7, #29
 8002ca6:	4303      	orrs	r3, r0
 8002ca8:	08fa      	lsrs	r2, r7, #3
 8002caa:	e6db      	b.n	8002a64 <__aeabi_dsub+0x384>
 8002cac:	4649      	mov	r1, r9
 8002cae:	4319      	orrs	r1, r3
 8002cb0:	000b      	movs	r3, r1
 8002cb2:	1e59      	subs	r1, r3, #1
 8002cb4:	418b      	sbcs	r3, r1
 8002cb6:	001c      	movs	r4, r3
 8002cb8:	e653      	b.n	8002962 <__aeabi_dsub+0x282>
 8002cba:	464d      	mov	r5, r9
 8002cbc:	3c20      	subs	r4, #32
 8002cbe:	40e5      	lsrs	r5, r4
 8002cc0:	2920      	cmp	r1, #32
 8002cc2:	d005      	beq.n	8002cd0 <__aeabi_dsub+0x5f0>
 8002cc4:	2440      	movs	r4, #64	; 0x40
 8002cc6:	1a64      	subs	r4, r4, r1
 8002cc8:	4649      	mov	r1, r9
 8002cca:	40a1      	lsls	r1, r4
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	4698      	mov	r8, r3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	1e5c      	subs	r4, r3, #1
 8002cd4:	41a3      	sbcs	r3, r4
 8002cd6:	432b      	orrs	r3, r5
 8002cd8:	e776      	b.n	8002bc8 <__aeabi_dsub+0x4e8>
 8002cda:	2a00      	cmp	r2, #0
 8002cdc:	d0e1      	beq.n	8002ca2 <__aeabi_dsub+0x5c2>
 8002cde:	003a      	movs	r2, r7
 8002ce0:	08db      	lsrs	r3, r3, #3
 8002ce2:	4302      	orrs	r2, r0
 8002ce4:	d100      	bne.n	8002ce8 <__aeabi_dsub+0x608>
 8002ce6:	e6b8      	b.n	8002a5a <__aeabi_dsub+0x37a>
 8002ce8:	464a      	mov	r2, r9
 8002cea:	0752      	lsls	r2, r2, #29
 8002cec:	2480      	movs	r4, #128	; 0x80
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	464a      	mov	r2, r9
 8002cf2:	0324      	lsls	r4, r4, #12
 8002cf4:	08d2      	lsrs	r2, r2, #3
 8002cf6:	4222      	tst	r2, r4
 8002cf8:	d007      	beq.n	8002d0a <__aeabi_dsub+0x62a>
 8002cfa:	08fe      	lsrs	r6, r7, #3
 8002cfc:	4226      	tst	r6, r4
 8002cfe:	d104      	bne.n	8002d0a <__aeabi_dsub+0x62a>
 8002d00:	465d      	mov	r5, fp
 8002d02:	0032      	movs	r2, r6
 8002d04:	08c3      	lsrs	r3, r0, #3
 8002d06:	077f      	lsls	r7, r7, #29
 8002d08:	433b      	orrs	r3, r7
 8002d0a:	0f59      	lsrs	r1, r3, #29
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	0749      	lsls	r1, r1, #29
 8002d10:	08db      	lsrs	r3, r3, #3
 8002d12:	430b      	orrs	r3, r1
 8002d14:	e6a6      	b.n	8002a64 <__aeabi_dsub+0x384>
 8002d16:	1ac4      	subs	r4, r0, r3
 8002d18:	42a0      	cmp	r0, r4
 8002d1a:	4180      	sbcs	r0, r0
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	4240      	negs	r0, r0
 8002d20:	1aff      	subs	r7, r7, r3
 8002d22:	1a3b      	subs	r3, r7, r0
 8002d24:	469a      	mov	sl, r3
 8002d26:	465d      	mov	r5, fp
 8002d28:	2601      	movs	r6, #1
 8002d2a:	e533      	b.n	8002794 <__aeabi_dsub+0xb4>
 8002d2c:	003b      	movs	r3, r7
 8002d2e:	4303      	orrs	r3, r0
 8002d30:	d100      	bne.n	8002d34 <__aeabi_dsub+0x654>
 8002d32:	e715      	b.n	8002b60 <__aeabi_dsub+0x480>
 8002d34:	08c0      	lsrs	r0, r0, #3
 8002d36:	077b      	lsls	r3, r7, #29
 8002d38:	465d      	mov	r5, fp
 8002d3a:	4303      	orrs	r3, r0
 8002d3c:	08fa      	lsrs	r2, r7, #3
 8002d3e:	e666      	b.n	8002a0e <__aeabi_dsub+0x32e>
 8002d40:	08c0      	lsrs	r0, r0, #3
 8002d42:	077b      	lsls	r3, r7, #29
 8002d44:	4303      	orrs	r3, r0
 8002d46:	08fa      	lsrs	r2, r7, #3
 8002d48:	e65e      	b.n	8002a08 <__aeabi_dsub+0x328>
 8002d4a:	003a      	movs	r2, r7
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	4302      	orrs	r2, r0
 8002d50:	d100      	bne.n	8002d54 <__aeabi_dsub+0x674>
 8002d52:	e682      	b.n	8002a5a <__aeabi_dsub+0x37a>
 8002d54:	464a      	mov	r2, r9
 8002d56:	0752      	lsls	r2, r2, #29
 8002d58:	2480      	movs	r4, #128	; 0x80
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	464a      	mov	r2, r9
 8002d5e:	0324      	lsls	r4, r4, #12
 8002d60:	08d2      	lsrs	r2, r2, #3
 8002d62:	4222      	tst	r2, r4
 8002d64:	d007      	beq.n	8002d76 <__aeabi_dsub+0x696>
 8002d66:	08fe      	lsrs	r6, r7, #3
 8002d68:	4226      	tst	r6, r4
 8002d6a:	d104      	bne.n	8002d76 <__aeabi_dsub+0x696>
 8002d6c:	465d      	mov	r5, fp
 8002d6e:	0032      	movs	r2, r6
 8002d70:	08c3      	lsrs	r3, r0, #3
 8002d72:	077f      	lsls	r7, r7, #29
 8002d74:	433b      	orrs	r3, r7
 8002d76:	0f59      	lsrs	r1, r3, #29
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	08db      	lsrs	r3, r3, #3
 8002d7c:	0749      	lsls	r1, r1, #29
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	e670      	b.n	8002a64 <__aeabi_dsub+0x384>
 8002d82:	08c0      	lsrs	r0, r0, #3
 8002d84:	077b      	lsls	r3, r7, #29
 8002d86:	4303      	orrs	r3, r0
 8002d88:	08fa      	lsrs	r2, r7, #3
 8002d8a:	e640      	b.n	8002a0e <__aeabi_dsub+0x32e>
 8002d8c:	464c      	mov	r4, r9
 8002d8e:	3920      	subs	r1, #32
 8002d90:	40cc      	lsrs	r4, r1
 8002d92:	4661      	mov	r1, ip
 8002d94:	2920      	cmp	r1, #32
 8002d96:	d006      	beq.n	8002da6 <__aeabi_dsub+0x6c6>
 8002d98:	4666      	mov	r6, ip
 8002d9a:	2140      	movs	r1, #64	; 0x40
 8002d9c:	1b89      	subs	r1, r1, r6
 8002d9e:	464e      	mov	r6, r9
 8002da0:	408e      	lsls	r6, r1
 8002da2:	4333      	orrs	r3, r6
 8002da4:	4698      	mov	r8, r3
 8002da6:	4643      	mov	r3, r8
 8002da8:	1e59      	subs	r1, r3, #1
 8002daa:	418b      	sbcs	r3, r1
 8002dac:	431c      	orrs	r4, r3
 8002dae:	e5d8      	b.n	8002962 <__aeabi_dsub+0x282>
 8002db0:	181c      	adds	r4, r3, r0
 8002db2:	4284      	cmp	r4, r0
 8002db4:	4180      	sbcs	r0, r0
 8002db6:	444f      	add	r7, r9
 8002db8:	46ba      	mov	sl, r7
 8002dba:	4240      	negs	r0, r0
 8002dbc:	4482      	add	sl, r0
 8002dbe:	e6d9      	b.n	8002b74 <__aeabi_dsub+0x494>
 8002dc0:	4653      	mov	r3, sl
 8002dc2:	4323      	orrs	r3, r4
 8002dc4:	d100      	bne.n	8002dc8 <__aeabi_dsub+0x6e8>
 8002dc6:	e6cb      	b.n	8002b60 <__aeabi_dsub+0x480>
 8002dc8:	e614      	b.n	80029f4 <__aeabi_dsub+0x314>
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	000007ff 	.word	0x000007ff
 8002dd0:	ff7fffff 	.word	0xff7fffff
 8002dd4:	000007fe 	.word	0x000007fe
 8002dd8:	2300      	movs	r3, #0
 8002dda:	4a01      	ldr	r2, [pc, #4]	; (8002de0 <__aeabi_dsub+0x700>)
 8002ddc:	001c      	movs	r4, r3
 8002dde:	e529      	b.n	8002834 <__aeabi_dsub+0x154>
 8002de0:	000007ff 	.word	0x000007ff

08002de4 <__aeabi_dcmpun>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	0005      	movs	r5, r0
 8002de8:	480c      	ldr	r0, [pc, #48]	; (8002e1c <__aeabi_dcmpun+0x38>)
 8002dea:	031c      	lsls	r4, r3, #12
 8002dec:	0016      	movs	r6, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	030a      	lsls	r2, r1, #12
 8002df2:	0049      	lsls	r1, r1, #1
 8002df4:	0b12      	lsrs	r2, r2, #12
 8002df6:	0d49      	lsrs	r1, r1, #21
 8002df8:	0b24      	lsrs	r4, r4, #12
 8002dfa:	0d5b      	lsrs	r3, r3, #21
 8002dfc:	4281      	cmp	r1, r0
 8002dfe:	d008      	beq.n	8002e12 <__aeabi_dcmpun+0x2e>
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <__aeabi_dcmpun+0x38>)
 8002e02:	2000      	movs	r0, #0
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <__aeabi_dcmpun+0x2c>
 8002e08:	0020      	movs	r0, r4
 8002e0a:	4330      	orrs	r0, r6
 8002e0c:	1e43      	subs	r3, r0, #1
 8002e0e:	4198      	sbcs	r0, r3
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
 8002e12:	2001      	movs	r0, #1
 8002e14:	432a      	orrs	r2, r5
 8002e16:	d1fb      	bne.n	8002e10 <__aeabi_dcmpun+0x2c>
 8002e18:	e7f2      	b.n	8002e00 <__aeabi_dcmpun+0x1c>
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff

08002e20 <__aeabi_d2iz>:
 8002e20:	000a      	movs	r2, r1
 8002e22:	b530      	push	{r4, r5, lr}
 8002e24:	4c13      	ldr	r4, [pc, #76]	; (8002e74 <__aeabi_d2iz+0x54>)
 8002e26:	0053      	lsls	r3, r2, #1
 8002e28:	0309      	lsls	r1, r1, #12
 8002e2a:	0005      	movs	r5, r0
 8002e2c:	0b09      	lsrs	r1, r1, #12
 8002e2e:	2000      	movs	r0, #0
 8002e30:	0d5b      	lsrs	r3, r3, #21
 8002e32:	0fd2      	lsrs	r2, r2, #31
 8002e34:	42a3      	cmp	r3, r4
 8002e36:	dd04      	ble.n	8002e42 <__aeabi_d2iz+0x22>
 8002e38:	480f      	ldr	r0, [pc, #60]	; (8002e78 <__aeabi_d2iz+0x58>)
 8002e3a:	4283      	cmp	r3, r0
 8002e3c:	dd02      	ble.n	8002e44 <__aeabi_d2iz+0x24>
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <__aeabi_d2iz+0x5c>)
 8002e40:	18d0      	adds	r0, r2, r3
 8002e42:	bd30      	pop	{r4, r5, pc}
 8002e44:	2080      	movs	r0, #128	; 0x80
 8002e46:	0340      	lsls	r0, r0, #13
 8002e48:	4301      	orrs	r1, r0
 8002e4a:	480d      	ldr	r0, [pc, #52]	; (8002e80 <__aeabi_d2iz+0x60>)
 8002e4c:	1ac0      	subs	r0, r0, r3
 8002e4e:	281f      	cmp	r0, #31
 8002e50:	dd08      	ble.n	8002e64 <__aeabi_d2iz+0x44>
 8002e52:	480c      	ldr	r0, [pc, #48]	; (8002e84 <__aeabi_d2iz+0x64>)
 8002e54:	1ac3      	subs	r3, r0, r3
 8002e56:	40d9      	lsrs	r1, r3
 8002e58:	000b      	movs	r3, r1
 8002e5a:	4258      	negs	r0, r3
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	d1f0      	bne.n	8002e42 <__aeabi_d2iz+0x22>
 8002e60:	0018      	movs	r0, r3
 8002e62:	e7ee      	b.n	8002e42 <__aeabi_d2iz+0x22>
 8002e64:	4c08      	ldr	r4, [pc, #32]	; (8002e88 <__aeabi_d2iz+0x68>)
 8002e66:	40c5      	lsrs	r5, r0
 8002e68:	46a4      	mov	ip, r4
 8002e6a:	4463      	add	r3, ip
 8002e6c:	4099      	lsls	r1, r3
 8002e6e:	000b      	movs	r3, r1
 8002e70:	432b      	orrs	r3, r5
 8002e72:	e7f2      	b.n	8002e5a <__aeabi_d2iz+0x3a>
 8002e74:	000003fe 	.word	0x000003fe
 8002e78:	0000041d 	.word	0x0000041d
 8002e7c:	7fffffff 	.word	0x7fffffff
 8002e80:	00000433 	.word	0x00000433
 8002e84:	00000413 	.word	0x00000413
 8002e88:	fffffbed 	.word	0xfffffbed

08002e8c <__aeabi_i2d>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d016      	beq.n	8002ec0 <__aeabi_i2d+0x34>
 8002e92:	17c3      	asrs	r3, r0, #31
 8002e94:	18c5      	adds	r5, r0, r3
 8002e96:	405d      	eors	r5, r3
 8002e98:	0fc4      	lsrs	r4, r0, #31
 8002e9a:	0028      	movs	r0, r5
 8002e9c:	f000 f91a 	bl	80030d4 <__clzsi2>
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <__aeabi_i2d+0x5c>)
 8002ea2:	1a1b      	subs	r3, r3, r0
 8002ea4:	280a      	cmp	r0, #10
 8002ea6:	dc16      	bgt.n	8002ed6 <__aeabi_i2d+0x4a>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	002e      	movs	r6, r5
 8002eac:	3215      	adds	r2, #21
 8002eae:	4096      	lsls	r6, r2
 8002eb0:	220b      	movs	r2, #11
 8002eb2:	1a12      	subs	r2, r2, r0
 8002eb4:	40d5      	lsrs	r5, r2
 8002eb6:	055b      	lsls	r3, r3, #21
 8002eb8:	032d      	lsls	r5, r5, #12
 8002eba:	0b2d      	lsrs	r5, r5, #12
 8002ebc:	0d5b      	lsrs	r3, r3, #21
 8002ebe:	e003      	b.n	8002ec8 <__aeabi_i2d+0x3c>
 8002ec0:	2400      	movs	r4, #0
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	051b      	lsls	r3, r3, #20
 8002eca:	432b      	orrs	r3, r5
 8002ecc:	07e4      	lsls	r4, r4, #31
 8002ece:	4323      	orrs	r3, r4
 8002ed0:	0030      	movs	r0, r6
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	bd70      	pop	{r4, r5, r6, pc}
 8002ed6:	380b      	subs	r0, #11
 8002ed8:	4085      	lsls	r5, r0
 8002eda:	055b      	lsls	r3, r3, #21
 8002edc:	032d      	lsls	r5, r5, #12
 8002ede:	2600      	movs	r6, #0
 8002ee0:	0b2d      	lsrs	r5, r5, #12
 8002ee2:	0d5b      	lsrs	r3, r3, #21
 8002ee4:	e7f0      	b.n	8002ec8 <__aeabi_i2d+0x3c>
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	0000041e 	.word	0x0000041e

08002eec <__aeabi_ui2d>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	1e04      	subs	r4, r0, #0
 8002ef0:	d010      	beq.n	8002f14 <__aeabi_ui2d+0x28>
 8002ef2:	f000 f8ef 	bl	80030d4 <__clzsi2>
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <__aeabi_ui2d+0x48>)
 8002ef8:	1a1b      	subs	r3, r3, r0
 8002efa:	280a      	cmp	r0, #10
 8002efc:	dc11      	bgt.n	8002f22 <__aeabi_ui2d+0x36>
 8002efe:	220b      	movs	r2, #11
 8002f00:	0021      	movs	r1, r4
 8002f02:	1a12      	subs	r2, r2, r0
 8002f04:	40d1      	lsrs	r1, r2
 8002f06:	3015      	adds	r0, #21
 8002f08:	030a      	lsls	r2, r1, #12
 8002f0a:	055b      	lsls	r3, r3, #21
 8002f0c:	4084      	lsls	r4, r0
 8002f0e:	0b12      	lsrs	r2, r2, #12
 8002f10:	0d5b      	lsrs	r3, r3, #21
 8002f12:	e001      	b.n	8002f18 <__aeabi_ui2d+0x2c>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2200      	movs	r2, #0
 8002f18:	051b      	lsls	r3, r3, #20
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	0020      	movs	r0, r4
 8002f1e:	0019      	movs	r1, r3
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	0022      	movs	r2, r4
 8002f24:	380b      	subs	r0, #11
 8002f26:	4082      	lsls	r2, r0
 8002f28:	055b      	lsls	r3, r3, #21
 8002f2a:	0312      	lsls	r2, r2, #12
 8002f2c:	2400      	movs	r4, #0
 8002f2e:	0b12      	lsrs	r2, r2, #12
 8002f30:	0d5b      	lsrs	r3, r3, #21
 8002f32:	e7f1      	b.n	8002f18 <__aeabi_ui2d+0x2c>
 8002f34:	0000041e 	.word	0x0000041e

08002f38 <__aeabi_f2d>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	0242      	lsls	r2, r0, #9
 8002f3c:	0043      	lsls	r3, r0, #1
 8002f3e:	0fc4      	lsrs	r4, r0, #31
 8002f40:	20fe      	movs	r0, #254	; 0xfe
 8002f42:	0e1b      	lsrs	r3, r3, #24
 8002f44:	1c59      	adds	r1, r3, #1
 8002f46:	0a55      	lsrs	r5, r2, #9
 8002f48:	4208      	tst	r0, r1
 8002f4a:	d00c      	beq.n	8002f66 <__aeabi_f2d+0x2e>
 8002f4c:	21e0      	movs	r1, #224	; 0xe0
 8002f4e:	0089      	lsls	r1, r1, #2
 8002f50:	468c      	mov	ip, r1
 8002f52:	076d      	lsls	r5, r5, #29
 8002f54:	0b12      	lsrs	r2, r2, #12
 8002f56:	4463      	add	r3, ip
 8002f58:	051b      	lsls	r3, r3, #20
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	07e4      	lsls	r4, r4, #31
 8002f5e:	4323      	orrs	r3, r4
 8002f60:	0028      	movs	r0, r5
 8002f62:	0019      	movs	r1, r3
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d114      	bne.n	8002f94 <__aeabi_f2d+0x5c>
 8002f6a:	2d00      	cmp	r5, #0
 8002f6c:	d01b      	beq.n	8002fa6 <__aeabi_f2d+0x6e>
 8002f6e:	0028      	movs	r0, r5
 8002f70:	f000 f8b0 	bl	80030d4 <__clzsi2>
 8002f74:	280a      	cmp	r0, #10
 8002f76:	dc1c      	bgt.n	8002fb2 <__aeabi_f2d+0x7a>
 8002f78:	230b      	movs	r3, #11
 8002f7a:	002a      	movs	r2, r5
 8002f7c:	1a1b      	subs	r3, r3, r0
 8002f7e:	40da      	lsrs	r2, r3
 8002f80:	0003      	movs	r3, r0
 8002f82:	3315      	adds	r3, #21
 8002f84:	409d      	lsls	r5, r3
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <__aeabi_f2d+0x88>)
 8002f88:	0312      	lsls	r2, r2, #12
 8002f8a:	1a1b      	subs	r3, r3, r0
 8002f8c:	055b      	lsls	r3, r3, #21
 8002f8e:	0b12      	lsrs	r2, r2, #12
 8002f90:	0d5b      	lsrs	r3, r3, #21
 8002f92:	e7e1      	b.n	8002f58 <__aeabi_f2d+0x20>
 8002f94:	2d00      	cmp	r5, #0
 8002f96:	d009      	beq.n	8002fac <__aeabi_f2d+0x74>
 8002f98:	0b13      	lsrs	r3, r2, #12
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	0312      	lsls	r2, r2, #12
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	076d      	lsls	r5, r5, #29
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <__aeabi_f2d+0x8c>)
 8002fa4:	e7d8      	b.n	8002f58 <__aeabi_f2d+0x20>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2200      	movs	r2, #0
 8002faa:	e7d5      	b.n	8002f58 <__aeabi_f2d+0x20>
 8002fac:	2200      	movs	r2, #0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <__aeabi_f2d+0x8c>)
 8002fb0:	e7d2      	b.n	8002f58 <__aeabi_f2d+0x20>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	002a      	movs	r2, r5
 8002fb6:	3b0b      	subs	r3, #11
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	2500      	movs	r5, #0
 8002fbc:	e7e3      	b.n	8002f86 <__aeabi_f2d+0x4e>
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	00000389 	.word	0x00000389
 8002fc4:	000007ff 	.word	0x000007ff

08002fc8 <__aeabi_d2f>:
 8002fc8:	0002      	movs	r2, r0
 8002fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fcc:	004b      	lsls	r3, r1, #1
 8002fce:	030d      	lsls	r5, r1, #12
 8002fd0:	0f40      	lsrs	r0, r0, #29
 8002fd2:	0d5b      	lsrs	r3, r3, #21
 8002fd4:	0fcc      	lsrs	r4, r1, #31
 8002fd6:	0a6d      	lsrs	r5, r5, #9
 8002fd8:	493a      	ldr	r1, [pc, #232]	; (80030c4 <__aeabi_d2f+0xfc>)
 8002fda:	4305      	orrs	r5, r0
 8002fdc:	1c58      	adds	r0, r3, #1
 8002fde:	00d7      	lsls	r7, r2, #3
 8002fe0:	4208      	tst	r0, r1
 8002fe2:	d00a      	beq.n	8002ffa <__aeabi_d2f+0x32>
 8002fe4:	4938      	ldr	r1, [pc, #224]	; (80030c8 <__aeabi_d2f+0x100>)
 8002fe6:	1859      	adds	r1, r3, r1
 8002fe8:	29fe      	cmp	r1, #254	; 0xfe
 8002fea:	dd16      	ble.n	800301a <__aeabi_d2f+0x52>
 8002fec:	20ff      	movs	r0, #255	; 0xff
 8002fee:	2200      	movs	r2, #0
 8002ff0:	05c0      	lsls	r0, r0, #23
 8002ff2:	4310      	orrs	r0, r2
 8002ff4:	07e4      	lsls	r4, r4, #31
 8002ff6:	4320      	orrs	r0, r4
 8002ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <__aeabi_d2f+0x44>
 8002ffe:	433d      	orrs	r5, r7
 8003000:	d026      	beq.n	8003050 <__aeabi_d2f+0x88>
 8003002:	2205      	movs	r2, #5
 8003004:	0192      	lsls	r2, r2, #6
 8003006:	0a52      	lsrs	r2, r2, #9
 8003008:	b2d8      	uxtb	r0, r3
 800300a:	e7f1      	b.n	8002ff0 <__aeabi_d2f+0x28>
 800300c:	432f      	orrs	r7, r5
 800300e:	d0ed      	beq.n	8002fec <__aeabi_d2f+0x24>
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	03d2      	lsls	r2, r2, #15
 8003014:	20ff      	movs	r0, #255	; 0xff
 8003016:	432a      	orrs	r2, r5
 8003018:	e7ea      	b.n	8002ff0 <__aeabi_d2f+0x28>
 800301a:	2900      	cmp	r1, #0
 800301c:	dd1b      	ble.n	8003056 <__aeabi_d2f+0x8e>
 800301e:	0192      	lsls	r2, r2, #6
 8003020:	1e50      	subs	r0, r2, #1
 8003022:	4182      	sbcs	r2, r0
 8003024:	00ed      	lsls	r5, r5, #3
 8003026:	0f7f      	lsrs	r7, r7, #29
 8003028:	432a      	orrs	r2, r5
 800302a:	433a      	orrs	r2, r7
 800302c:	0753      	lsls	r3, r2, #29
 800302e:	d047      	beq.n	80030c0 <__aeabi_d2f+0xf8>
 8003030:	230f      	movs	r3, #15
 8003032:	4013      	ands	r3, r2
 8003034:	2b04      	cmp	r3, #4
 8003036:	d000      	beq.n	800303a <__aeabi_d2f+0x72>
 8003038:	3204      	adds	r2, #4
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	04db      	lsls	r3, r3, #19
 800303e:	4013      	ands	r3, r2
 8003040:	d03e      	beq.n	80030c0 <__aeabi_d2f+0xf8>
 8003042:	1c48      	adds	r0, r1, #1
 8003044:	29fe      	cmp	r1, #254	; 0xfe
 8003046:	d0d1      	beq.n	8002fec <__aeabi_d2f+0x24>
 8003048:	0192      	lsls	r2, r2, #6
 800304a:	0a52      	lsrs	r2, r2, #9
 800304c:	b2c0      	uxtb	r0, r0
 800304e:	e7cf      	b.n	8002ff0 <__aeabi_d2f+0x28>
 8003050:	2000      	movs	r0, #0
 8003052:	2200      	movs	r2, #0
 8003054:	e7cc      	b.n	8002ff0 <__aeabi_d2f+0x28>
 8003056:	000a      	movs	r2, r1
 8003058:	3217      	adds	r2, #23
 800305a:	db2f      	blt.n	80030bc <__aeabi_d2f+0xf4>
 800305c:	2680      	movs	r6, #128	; 0x80
 800305e:	0436      	lsls	r6, r6, #16
 8003060:	432e      	orrs	r6, r5
 8003062:	251e      	movs	r5, #30
 8003064:	1a6d      	subs	r5, r5, r1
 8003066:	2d1f      	cmp	r5, #31
 8003068:	dd11      	ble.n	800308e <__aeabi_d2f+0xc6>
 800306a:	2202      	movs	r2, #2
 800306c:	4252      	negs	r2, r2
 800306e:	1a52      	subs	r2, r2, r1
 8003070:	0031      	movs	r1, r6
 8003072:	40d1      	lsrs	r1, r2
 8003074:	2d20      	cmp	r5, #32
 8003076:	d004      	beq.n	8003082 <__aeabi_d2f+0xba>
 8003078:	4a14      	ldr	r2, [pc, #80]	; (80030cc <__aeabi_d2f+0x104>)
 800307a:	4694      	mov	ip, r2
 800307c:	4463      	add	r3, ip
 800307e:	409e      	lsls	r6, r3
 8003080:	4337      	orrs	r7, r6
 8003082:	003a      	movs	r2, r7
 8003084:	1e53      	subs	r3, r2, #1
 8003086:	419a      	sbcs	r2, r3
 8003088:	430a      	orrs	r2, r1
 800308a:	2100      	movs	r1, #0
 800308c:	e7ce      	b.n	800302c <__aeabi_d2f+0x64>
 800308e:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <__aeabi_d2f+0x108>)
 8003090:	0038      	movs	r0, r7
 8003092:	4694      	mov	ip, r2
 8003094:	4463      	add	r3, ip
 8003096:	4098      	lsls	r0, r3
 8003098:	003a      	movs	r2, r7
 800309a:	1e41      	subs	r1, r0, #1
 800309c:	4188      	sbcs	r0, r1
 800309e:	409e      	lsls	r6, r3
 80030a0:	40ea      	lsrs	r2, r5
 80030a2:	4330      	orrs	r0, r6
 80030a4:	4302      	orrs	r2, r0
 80030a6:	2100      	movs	r1, #0
 80030a8:	0753      	lsls	r3, r2, #29
 80030aa:	d1c1      	bne.n	8003030 <__aeabi_d2f+0x68>
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	0013      	movs	r3, r2
 80030b0:	04c9      	lsls	r1, r1, #19
 80030b2:	2001      	movs	r0, #1
 80030b4:	400b      	ands	r3, r1
 80030b6:	420a      	tst	r2, r1
 80030b8:	d1c6      	bne.n	8003048 <__aeabi_d2f+0x80>
 80030ba:	e7a3      	b.n	8003004 <__aeabi_d2f+0x3c>
 80030bc:	2300      	movs	r3, #0
 80030be:	e7a0      	b.n	8003002 <__aeabi_d2f+0x3a>
 80030c0:	000b      	movs	r3, r1
 80030c2:	e79f      	b.n	8003004 <__aeabi_d2f+0x3c>
 80030c4:	000007fe 	.word	0x000007fe
 80030c8:	fffffc80 	.word	0xfffffc80
 80030cc:	fffffca2 	.word	0xfffffca2
 80030d0:	fffffc82 	.word	0xfffffc82

080030d4 <__clzsi2>:
 80030d4:	211c      	movs	r1, #28
 80030d6:	2301      	movs	r3, #1
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	4298      	cmp	r0, r3
 80030dc:	d301      	bcc.n	80030e2 <__clzsi2+0xe>
 80030de:	0c00      	lsrs	r0, r0, #16
 80030e0:	3910      	subs	r1, #16
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	4298      	cmp	r0, r3
 80030e6:	d301      	bcc.n	80030ec <__clzsi2+0x18>
 80030e8:	0a00      	lsrs	r0, r0, #8
 80030ea:	3908      	subs	r1, #8
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	4298      	cmp	r0, r3
 80030f0:	d301      	bcc.n	80030f6 <__clzsi2+0x22>
 80030f2:	0900      	lsrs	r0, r0, #4
 80030f4:	3904      	subs	r1, #4
 80030f6:	a202      	add	r2, pc, #8	; (adr r2, 8003100 <__clzsi2+0x2c>)
 80030f8:	5c10      	ldrb	r0, [r2, r0]
 80030fa:	1840      	adds	r0, r0, r1
 80030fc:	4770      	bx	lr
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	02020304 	.word	0x02020304
 8003104:	01010101 	.word	0x01010101
	...

08003110 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b08b      	sub	sp, #44	; 0x2c
 8003114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003116:	2414      	movs	r4, #20
 8003118:	193b      	adds	r3, r7, r4
 800311a:	0018      	movs	r0, r3
 800311c:	2314      	movs	r3, #20
 800311e:	001a      	movs	r2, r3
 8003120:	2100      	movs	r1, #0
 8003122:	f007 f939 	bl	800a398 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <MX_GPIO_Init+0xcc>)
 8003128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312a:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <MX_GPIO_Init+0xcc>)
 800312c:	2104      	movs	r1, #4
 800312e:	430a      	orrs	r2, r1
 8003130:	635a      	str	r2, [r3, #52]	; 0x34
 8003132:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <MX_GPIO_Init+0xcc>)
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	2204      	movs	r2, #4
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800313e:	4b27      	ldr	r3, [pc, #156]	; (80031dc <MX_GPIO_Init+0xcc>)
 8003140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003142:	4b26      	ldr	r3, [pc, #152]	; (80031dc <MX_GPIO_Init+0xcc>)
 8003144:	2120      	movs	r1, #32
 8003146:	430a      	orrs	r2, r1
 8003148:	635a      	str	r2, [r3, #52]	; 0x34
 800314a:	4b24      	ldr	r3, [pc, #144]	; (80031dc <MX_GPIO_Init+0xcc>)
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	2220      	movs	r2, #32
 8003150:	4013      	ands	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003156:	4b21      	ldr	r3, [pc, #132]	; (80031dc <MX_GPIO_Init+0xcc>)
 8003158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <MX_GPIO_Init+0xcc>)
 800315c:	2102      	movs	r1, #2
 800315e:	430a      	orrs	r2, r1
 8003160:	635a      	str	r2, [r3, #52]	; 0x34
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <MX_GPIO_Init+0xcc>)
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	2202      	movs	r2, #2
 8003168:	4013      	ands	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <MX_GPIO_Init+0xcc>)
 8003170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <MX_GPIO_Init+0xcc>)
 8003174:	2101      	movs	r1, #1
 8003176:	430a      	orrs	r2, r1
 8003178:	635a      	str	r2, [r3, #52]	; 0x34
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <MX_GPIO_Init+0xcc>)
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	2201      	movs	r2, #1
 8003180:	4013      	ands	r3, r2
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <MX_GPIO_Init+0xcc>)
 8003188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <MX_GPIO_Init+0xcc>)
 800318c:	2108      	movs	r1, #8
 800318e:	430a      	orrs	r2, r1
 8003190:	635a      	str	r2, [r3, #52]	; 0x34
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <MX_GPIO_Init+0xcc>)
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	2208      	movs	r2, #8
 8003198:	4013      	ands	r3, r2
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800319e:	23e0      	movs	r3, #224	; 0xe0
 80031a0:	019b      	lsls	r3, r3, #6
 80031a2:	480f      	ldr	r0, [pc, #60]	; (80031e0 <MX_GPIO_Init+0xd0>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	0019      	movs	r1, r3
 80031a8:	f001 fb00 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	22e0      	movs	r2, #224	; 0xe0
 80031b0:	0192      	lsls	r2, r2, #6
 80031b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b4:	193b      	adds	r3, r7, r4
 80031b6:	2201      	movs	r2, #1
 80031b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c6:	193b      	adds	r3, r7, r4
 80031c8:	4a05      	ldr	r2, [pc, #20]	; (80031e0 <MX_GPIO_Init+0xd0>)
 80031ca:	0019      	movs	r1, r3
 80031cc:	0010      	movs	r0, r2
 80031ce:	f001 f989 	bl	80044e4 <HAL_GPIO_Init>

}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b00b      	add	sp, #44	; 0x2c
 80031d8:	bd90      	pop	{r4, r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	40021000 	.word	0x40021000
 80031e0:	50000400 	.word	0x50000400

080031e4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2 , (uint8_t *)&ch, 1, 0xFFFF);
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <__io_putchar+0x20>)
 80031ee:	1d39      	adds	r1, r7, #4
 80031f0:	4805      	ldr	r0, [pc, #20]	; (8003208 <__io_putchar+0x24>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	f003 fdb2 	bl	8006d5c <HAL_UART_Transmit>
    return ch;
 80031f8:	687b      	ldr	r3, [r7, #4]
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b002      	add	sp, #8
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	0000ffff 	.word	0x0000ffff
 8003208:	20000438 	.word	0x20000438

0800320c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003210:	f000 ff38 	bl	8004084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003214:	f000 f856 	bl	80032c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003218:	f7ff ff7a 	bl	8003110 <MX_GPIO_Init>
  MX_TIM17_Init();
 800321c:	f000 fc34 	bl	8003a88 <MX_TIM17_Init>
  MX_TIM15_Init();
 8003220:	f000 fae6 	bl	80037f0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8003224:	f000 fba8 	bl	8003978 <MX_TIM16_Init>
  MX_TIM1_Init();
 8003228:	f000 f9d6 	bl	80035d8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800322c:	f000 fa3e 	bl	80036ac <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003230:	f000 fe42 	bl	8003eb8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8003234:	f000 fa9e 	bl	8003774 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Shell_Init();
 8003238:	f006 f9a0 	bl	800957c <Shell_Init>
  PIDInit();
 800323c:	f005 fc92 	bl	8008b64 <PIDInit>
  dcMotorInit();
 8003240:	f005 fd82 	bl	8008d48 <dcMotorInit>
/*  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim7);
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);*/
  HAL_TIM_Base_Start_IT(&htim1);
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <main+0x9c>)
 8003246:	0018      	movs	r0, r3
 8003248:	f002 f978 	bl	800553c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <main+0xa0>)
 800324e:	0018      	movs	r0, r3
 8003250:	f002 f974 	bl	800553c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003254:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <main+0xa4>)
 8003256:	0018      	movs	r0, r3
 8003258:	f002 f970 	bl	800553c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <main+0xa0>)
 800325e:	213c      	movs	r1, #60	; 0x3c
 8003260:	0018      	movs	r0, r3
 8003262:	f002 fc39 	bl	8005ad8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003266:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <main+0x9c>)
 8003268:	213c      	movs	r1, #60	; 0x3c
 800326a:	0018      	movs	r0, r3
 800326c:	f002 fc34 	bl	8005ad8 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <main+0xa8>)
 8003272:	2100      	movs	r1, #0
 8003274:	0018      	movs	r0, r3
 8003276:	f002 fa17 	bl	80056a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <main+0xac>)
 800327c:	2100      	movs	r1, #0
 800327e:	0018      	movs	r0, r3
 8003280:	f002 fa12 	bl	80056a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8003284:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <main+0xb0>)
 8003286:	2104      	movs	r1, #4
 8003288:	0018      	movs	r0, r3
 800328a:	f002 fa0d 	bl	80056a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <main+0xb0>)
 8003290:	2100      	movs	r1, #0
 8003292:	0018      	movs	r0, r3
 8003294:	f002 fa08 	bl	80056a8 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      //Shell_Loop();
      moteur_controle(100,100);
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <main+0xb4>)
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <main+0xb4>)
 800329c:	1c11      	adds	r1, r2, #0
 800329e:	1c18      	adds	r0, r3, #0
 80032a0:	f005 ff72 	bl	8009188 <moteur_controle>
 80032a4:	e7f8      	b.n	8003298 <main+0x8c>
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	20000270 	.word	0x20000270
 80032ac:	200002bc 	.word	0x200002bc
 80032b0:	20000308 	.word	0x20000308
 80032b4:	200003ec 	.word	0x200003ec
 80032b8:	200003a0 	.word	0x200003a0
 80032bc:	20000354 	.word	0x20000354
 80032c0:	42c80000 	.word	0x42c80000

080032c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b093      	sub	sp, #76	; 0x4c
 80032c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ca:	2414      	movs	r4, #20
 80032cc:	193b      	adds	r3, r7, r4
 80032ce:	0018      	movs	r0, r3
 80032d0:	2334      	movs	r3, #52	; 0x34
 80032d2:	001a      	movs	r2, r3
 80032d4:	2100      	movs	r1, #0
 80032d6:	f007 f85f 	bl	800a398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	0018      	movs	r0, r3
 80032de:	2310      	movs	r3, #16
 80032e0:	001a      	movs	r2, r3
 80032e2:	2100      	movs	r1, #0
 80032e4:	f007 f858 	bl	800a398 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f001 fa95 	bl	800481c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032f8:	193b      	adds	r3, r7, r4
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	0252      	lsls	r2, r2, #9
 80032fe:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003300:	0021      	movs	r1, r4
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2202      	movs	r2, #2
 8003306:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003308:	187b      	adds	r3, r7, r1
 800330a:	2203      	movs	r2, #3
 800330c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2200      	movs	r2, #0
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003314:	187b      	adds	r3, r7, r1
 8003316:	2208      	movs	r2, #8
 8003318:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800331a:	187b      	adds	r3, r7, r1
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	0292      	lsls	r2, r2, #10
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	0592      	lsls	r2, r2, #22
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800332a:	187b      	adds	r3, r7, r1
 800332c:	0018      	movs	r0, r3
 800332e:	f001 fac1 	bl	80048b4 <HAL_RCC_OscConfig>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d001      	beq.n	800333a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003336:	f000 f819 	bl	800336c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	2202      	movs	r2, #2
 8003344:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	2102      	movs	r1, #2
 8003356:	0018      	movs	r0, r3
 8003358:	f001 fdbc 	bl	8004ed4 <HAL_RCC_ClockConfig>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d001      	beq.n	8003364 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003360:	f000 f804 	bl	800336c <Error_Handler>
  }
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b013      	add	sp, #76	; 0x4c
 800336a:	bd90      	pop	{r4, r7, pc}

0800336c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003370:	b672      	cpsid	i
}
 8003372:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003374:	e7fe      	b.n	8003374 <Error_Handler+0x8>
	...

08003378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <HAL_MspInit+0x44>)
 8003380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_MspInit+0x44>)
 8003384:	2101      	movs	r1, #1
 8003386:	430a      	orrs	r2, r1
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <HAL_MspInit+0x44>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2201      	movs	r2, #1
 8003390:	4013      	ands	r3, r2
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_MspInit+0x44>)
 8003398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_MspInit+0x44>)
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	0549      	lsls	r1, r1, #21
 80033a0:	430a      	orrs	r2, r1
 80033a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_MspInit+0x44>)
 80033a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	055b      	lsls	r3, r3, #21
 80033ac:	4013      	ands	r3, r2
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b002      	add	sp, #8
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	40021000 	.word	0x40021000

080033c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033c4:	e7fe      	b.n	80033c4 <NMI_Handler+0x4>

080033c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ca:	e7fe      	b.n	80033ca <HardFault_Handler+0x4>

080033cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e4:	f000 feb8 	bl	8004158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80033f6:	0018      	movs	r0, r3
 80033f8:	f002 fc12 	bl	8005c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	20000270 	.word	0x20000270

08003408 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <TIM3_IRQHandler+0x14>)
 800340e:	0018      	movs	r0, r3
 8003410:	f002 fc06 	bl	8005c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	200002bc 	.word	0x200002bc

08003420 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <TIM7_IRQHandler+0x14>)
 8003426:	0018      	movs	r0, r3
 8003428:	f002 fbfa 	bl	8005c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	20000308 	.word	0x20000308

08003438 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <USART2_IRQHandler+0x14>)
 800343e:	0018      	movs	r0, r3
 8003440:	f003 fd80 	bl	8006f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	20000438 	.word	0x20000438

08003450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  return 1;
 8003454:	2301      	movs	r3, #1
}
 8003456:	0018      	movs	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <_kill>:

int _kill(int pid, int sig)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003466:	f006 fff1 	bl	800a44c <__errno>
 800346a:	0003      	movs	r3, r0
 800346c:	2216      	movs	r2, #22
 800346e:	601a      	str	r2, [r3, #0]
  return -1;
 8003470:	2301      	movs	r3, #1
 8003472:	425b      	negs	r3, r3
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <_exit>:

void _exit (int status)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003484:	2301      	movs	r3, #1
 8003486:	425a      	negs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	0011      	movs	r1, r2
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff ffe5 	bl	800345c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003492:	e7fe      	b.n	8003492 <_exit+0x16>

08003494 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	e00a      	b.n	80034bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034a6:	e000      	b.n	80034aa <_read+0x16>
 80034a8:	bf00      	nop
 80034aa:	0001      	movs	r1, r0
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	60ba      	str	r2, [r7, #8]
 80034b2:	b2ca      	uxtb	r2, r1
 80034b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	3301      	adds	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	dbf0      	blt.n	80034a6 <_read+0x12>
  }

  return len;
 80034c4:	687b      	ldr	r3, [r7, #4]
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b006      	add	sp, #24
 80034cc:	bd80      	pop	{r7, pc}

080034ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e009      	b.n	80034f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	60ba      	str	r2, [r7, #8]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7ff fe7b 	bl	80031e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3301      	adds	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	dbf1      	blt.n	80034e0 <_write+0x12>
  }
  return len;
 80034fc:	687b      	ldr	r3, [r7, #4]
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b006      	add	sp, #24
 8003504:	bd80      	pop	{r7, pc}

08003506 <_close>:

int _close(int file)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800350e:	2301      	movs	r3, #1
 8003510:	425b      	negs	r3, r3
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b002      	add	sp, #8
 8003518:	bd80      	pop	{r7, pc}

0800351a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	0192      	lsls	r2, r2, #6
 800352a:	605a      	str	r2, [r3, #4]
  return 0;
 800352c:	2300      	movs	r3, #0
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b002      	add	sp, #8
 8003534:	bd80      	pop	{r7, pc}

08003536 <_isatty>:

int _isatty(int file)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800353e:	2301      	movs	r3, #1
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b002      	add	sp, #8
 8003546:	bd80      	pop	{r7, pc}

08003548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003554:	2300      	movs	r3, #0
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <_sbrk+0x5c>)
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <_sbrk+0x60>)
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <_sbrk+0x64>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d102      	bne.n	8003582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <_sbrk+0x64>)
 800357e:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <_sbrk+0x68>)
 8003580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <_sbrk+0x64>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	18d3      	adds	r3, r2, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	429a      	cmp	r2, r3
 800358e:	d207      	bcs.n	80035a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003590:	f006 ff5c 	bl	800a44c <__errno>
 8003594:	0003      	movs	r3, r0
 8003596:	220c      	movs	r2, #12
 8003598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800359a:	2301      	movs	r3, #1
 800359c:	425b      	negs	r3, r3
 800359e:	e009      	b.n	80035b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <_sbrk+0x64>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <_sbrk+0x64>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	18d2      	adds	r2, r2, r3
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <_sbrk+0x64>)
 80035b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80035b2:	68fb      	ldr	r3, [r7, #12]
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b006      	add	sp, #24
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20009000 	.word	0x20009000
 80035c0:	00000400 	.word	0x00000400
 80035c4:	2000026c 	.word	0x2000026c
 80035c8:	200007c0 	.word	0x200007c0

080035cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b08d      	sub	sp, #52	; 0x34
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035de:	240c      	movs	r4, #12
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	0018      	movs	r0, r3
 80035e4:	2324      	movs	r3, #36	; 0x24
 80035e6:	001a      	movs	r2, r3
 80035e8:	2100      	movs	r1, #0
 80035ea:	f006 fed5 	bl	800a398 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ee:	003b      	movs	r3, r7
 80035f0:	0018      	movs	r0, r3
 80035f2:	230c      	movs	r3, #12
 80035f4:	001a      	movs	r2, r3
 80035f6:	2100      	movs	r1, #0
 80035f8:	f006 fece 	bl	800a398 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035fc:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <MX_TIM1_Init+0xc8>)
 80035fe:	4a29      	ldr	r2, [pc, #164]	; (80036a4 <MX_TIM1_Init+0xcc>)
 8003600:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <MX_TIM1_Init+0xc8>)
 8003604:	2200      	movs	r2, #0
 8003606:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <MX_TIM1_Init+0xc8>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <MX_TIM1_Init+0xc8>)
 8003610:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <MX_TIM1_Init+0xd0>)
 8003612:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003614:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <MX_TIM1_Init+0xc8>)
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <MX_TIM1_Init+0xc8>)
 800361c:	2200      	movs	r2, #0
 800361e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003620:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <MX_TIM1_Init+0xc8>)
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003626:	0021      	movs	r1, r4
 8003628:	187b      	adds	r3, r7, r1
 800362a:	2203      	movs	r2, #3
 800362c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800362e:	187b      	adds	r3, r7, r1
 8003630:	2200      	movs	r2, #0
 8003632:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003634:	187b      	adds	r3, r7, r1
 8003636:	2201      	movs	r2, #1
 8003638:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800363a:	187b      	adds	r3, r7, r1
 800363c:	2200      	movs	r2, #0
 800363e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003640:	187b      	adds	r3, r7, r1
 8003642:	2200      	movs	r2, #0
 8003644:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003646:	187b      	adds	r3, r7, r1
 8003648:	2200      	movs	r2, #0
 800364a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800364c:	187b      	adds	r3, r7, r1
 800364e:	2201      	movs	r2, #1
 8003650:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003652:	187b      	adds	r3, r7, r1
 8003654:	2200      	movs	r2, #0
 8003656:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2200      	movs	r2, #0
 800365c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800365e:	187a      	adds	r2, r7, r1
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <MX_TIM1_Init+0xc8>)
 8003662:	0011      	movs	r1, r2
 8003664:	0018      	movs	r0, r3
 8003666:	f002 f98f 	bl	8005988 <HAL_TIM_Encoder_Init>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800366e:	f7ff fe7d 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003672:	003b      	movs	r3, r7
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003678:	003b      	movs	r3, r7
 800367a:	2200      	movs	r2, #0
 800367c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800367e:	003b      	movs	r3, r7
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003684:	003a      	movs	r2, r7
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <MX_TIM1_Init+0xc8>)
 8003688:	0011      	movs	r1, r2
 800368a:	0018      	movs	r0, r3
 800368c:	f003 f9ea 	bl	8006a64 <HAL_TIMEx_MasterConfigSynchronization>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d001      	beq.n	8003698 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003694:	f7ff fe6a 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b00d      	add	sp, #52	; 0x34
 800369e:	bd90      	pop	{r4, r7, pc}
 80036a0:	20000270 	.word	0x20000270
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	0000ffff 	.word	0x0000ffff

080036ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b08d      	sub	sp, #52	; 0x34
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036b2:	240c      	movs	r4, #12
 80036b4:	193b      	adds	r3, r7, r4
 80036b6:	0018      	movs	r0, r3
 80036b8:	2324      	movs	r3, #36	; 0x24
 80036ba:	001a      	movs	r2, r3
 80036bc:	2100      	movs	r1, #0
 80036be:	f006 fe6b 	bl	800a398 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c2:	003b      	movs	r3, r7
 80036c4:	0018      	movs	r0, r3
 80036c6:	230c      	movs	r3, #12
 80036c8:	001a      	movs	r2, r3
 80036ca:	2100      	movs	r1, #0
 80036cc:	f006 fe64 	bl	800a398 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <MX_TIM3_Init+0xbc>)
 80036d2:	4a26      	ldr	r2, [pc, #152]	; (800376c <MX_TIM3_Init+0xc0>)
 80036d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <MX_TIM3_Init+0xbc>)
 80036d8:	2200      	movs	r2, #0
 80036da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <MX_TIM3_Init+0xbc>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <MX_TIM3_Init+0xbc>)
 80036e4:	4a22      	ldr	r2, [pc, #136]	; (8003770 <MX_TIM3_Init+0xc4>)
 80036e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e8:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <MX_TIM3_Init+0xbc>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036ee:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <MX_TIM3_Init+0xbc>)
 80036f0:	2280      	movs	r2, #128	; 0x80
 80036f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036f4:	0021      	movs	r1, r4
 80036f6:	187b      	adds	r3, r7, r1
 80036f8:	2203      	movs	r2, #3
 80036fa:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	2200      	movs	r2, #0
 8003700:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003702:	187b      	adds	r3, r7, r1
 8003704:	2201      	movs	r2, #1
 8003706:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003708:	187b      	adds	r3, r7, r1
 800370a:	2200      	movs	r2, #0
 800370c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800370e:	187b      	adds	r3, r7, r1
 8003710:	2200      	movs	r2, #0
 8003712:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003714:	187b      	adds	r3, r7, r1
 8003716:	2200      	movs	r2, #0
 8003718:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800371a:	187b      	adds	r3, r7, r1
 800371c:	2201      	movs	r2, #1
 800371e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003720:	187b      	adds	r3, r7, r1
 8003722:	2200      	movs	r2, #0
 8003724:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003726:	187b      	adds	r3, r7, r1
 8003728:	2200      	movs	r2, #0
 800372a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800372c:	187a      	adds	r2, r7, r1
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <MX_TIM3_Init+0xbc>)
 8003730:	0011      	movs	r1, r2
 8003732:	0018      	movs	r0, r3
 8003734:	f002 f928 	bl	8005988 <HAL_TIM_Encoder_Init>
 8003738:	1e03      	subs	r3, r0, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800373c:	f7ff fe16 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003740:	003b      	movs	r3, r7
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003746:	003b      	movs	r3, r7
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800374c:	003a      	movs	r2, r7
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <MX_TIM3_Init+0xbc>)
 8003750:	0011      	movs	r1, r2
 8003752:	0018      	movs	r0, r3
 8003754:	f003 f986 	bl	8006a64 <HAL_TIMEx_MasterConfigSynchronization>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d001      	beq.n	8003760 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800375c:	f7ff fe06 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b00d      	add	sp, #52	; 0x34
 8003766:	bd90      	pop	{r4, r7, pc}
 8003768:	200002bc 	.word	0x200002bc
 800376c:	40000400 	.word	0x40000400
 8003770:	0000ffff 	.word	0x0000ffff

08003774 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	0018      	movs	r0, r3
 800377e:	230c      	movs	r3, #12
 8003780:	001a      	movs	r2, r3
 8003782:	2100      	movs	r1, #0
 8003784:	f006 fe08 	bl	800a398 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <MX_TIM7_Init+0x6c>)
 800378a:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <MX_TIM7_Init+0x70>)
 800378c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6400-1;
 800378e:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <MX_TIM7_Init+0x6c>)
 8003790:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <MX_TIM7_Init+0x74>)
 8003792:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <MX_TIM7_Init+0x6c>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <MX_TIM7_Init+0x6c>)
 800379c:	4a13      	ldr	r2, [pc, #76]	; (80037ec <MX_TIM7_Init+0x78>)
 800379e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <MX_TIM7_Init+0x6c>)
 80037a2:	2280      	movs	r2, #128	; 0x80
 80037a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80037a6:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <MX_TIM7_Init+0x6c>)
 80037a8:	0018      	movs	r0, r3
 80037aa:	f001 fe6f 	bl	800548c <HAL_TIM_Base_Init>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80037b2:	f7ff fddb 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80037c2:	1d3a      	adds	r2, r7, #4
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <MX_TIM7_Init+0x6c>)
 80037c6:	0011      	movs	r1, r2
 80037c8:	0018      	movs	r0, r3
 80037ca:	f003 f94b 	bl	8006a64 <HAL_TIMEx_MasterConfigSynchronization>
 80037ce:	1e03      	subs	r3, r0, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80037d2:	f7ff fdcb 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b004      	add	sp, #16
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	20000308 	.word	0x20000308
 80037e4:	40001400 	.word	0x40001400
 80037e8:	000018ff 	.word	0x000018ff
 80037ec:	000003e7 	.word	0x000003e7

080037f0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b09c      	sub	sp, #112	; 0x70
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037f6:	2360      	movs	r3, #96	; 0x60
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	0018      	movs	r0, r3
 80037fc:	2310      	movs	r3, #16
 80037fe:	001a      	movs	r2, r3
 8003800:	2100      	movs	r1, #0
 8003802:	f006 fdc9 	bl	800a398 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003806:	2354      	movs	r3, #84	; 0x54
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	0018      	movs	r0, r3
 800380c:	230c      	movs	r3, #12
 800380e:	001a      	movs	r2, r3
 8003810:	2100      	movs	r1, #0
 8003812:	f006 fdc1 	bl	800a398 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003816:	2338      	movs	r3, #56	; 0x38
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	0018      	movs	r0, r3
 800381c:	231c      	movs	r3, #28
 800381e:	001a      	movs	r2, r3
 8003820:	2100      	movs	r1, #0
 8003822:	f006 fdb9 	bl	800a398 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	0018      	movs	r0, r3
 800382a:	2334      	movs	r3, #52	; 0x34
 800382c:	001a      	movs	r2, r3
 800382e:	2100      	movs	r1, #0
 8003830:	f006 fdb2 	bl	800a398 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003834:	4b4d      	ldr	r3, [pc, #308]	; (800396c <MX_TIM15_Init+0x17c>)
 8003836:	4a4e      	ldr	r2, [pc, #312]	; (8003970 <MX_TIM15_Init+0x180>)
 8003838:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800383a:	4b4c      	ldr	r3, [pc, #304]	; (800396c <MX_TIM15_Init+0x17c>)
 800383c:	2200      	movs	r2, #0
 800383e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003840:	4b4a      	ldr	r3, [pc, #296]	; (800396c <MX_TIM15_Init+0x17c>)
 8003842:	2200      	movs	r2, #0
 8003844:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2560-1;
 8003846:	4b49      	ldr	r3, [pc, #292]	; (800396c <MX_TIM15_Init+0x17c>)
 8003848:	4a4a      	ldr	r2, [pc, #296]	; (8003974 <MX_TIM15_Init+0x184>)
 800384a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800384c:	4b47      	ldr	r3, [pc, #284]	; (800396c <MX_TIM15_Init+0x17c>)
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003852:	4b46      	ldr	r3, [pc, #280]	; (800396c <MX_TIM15_Init+0x17c>)
 8003854:	2200      	movs	r2, #0
 8003856:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003858:	4b44      	ldr	r3, [pc, #272]	; (800396c <MX_TIM15_Init+0x17c>)
 800385a:	2200      	movs	r2, #0
 800385c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800385e:	4b43      	ldr	r3, [pc, #268]	; (800396c <MX_TIM15_Init+0x17c>)
 8003860:	0018      	movs	r0, r3
 8003862:	f001 fe13 	bl	800548c <HAL_TIM_Base_Init>
 8003866:	1e03      	subs	r3, r0, #0
 8003868:	d001      	beq.n	800386e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800386a:	f7ff fd7f 	bl	800336c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800386e:	2160      	movs	r1, #96	; 0x60
 8003870:	187b      	adds	r3, r7, r1
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	0152      	lsls	r2, r2, #5
 8003876:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003878:	187a      	adds	r2, r7, r1
 800387a:	4b3c      	ldr	r3, [pc, #240]	; (800396c <MX_TIM15_Init+0x17c>)
 800387c:	0011      	movs	r1, r2
 800387e:	0018      	movs	r0, r3
 8003880:	f002 fc00 	bl	8006084 <HAL_TIM_ConfigClockSource>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003888:	f7ff fd70 	bl	800336c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800388c:	4b37      	ldr	r3, [pc, #220]	; (800396c <MX_TIM15_Init+0x17c>)
 800388e:	0018      	movs	r0, r3
 8003890:	f001 feaa 	bl	80055e8 <HAL_TIM_PWM_Init>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d001      	beq.n	800389c <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8003898:	f7ff fd68 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389c:	2154      	movs	r1, #84	; 0x54
 800389e:	187b      	adds	r3, r7, r1
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80038aa:	187a      	adds	r2, r7, r1
 80038ac:	4b2f      	ldr	r3, [pc, #188]	; (800396c <MX_TIM15_Init+0x17c>)
 80038ae:	0011      	movs	r1, r2
 80038b0:	0018      	movs	r0, r3
 80038b2:	f003 f8d7 	bl	8006a64 <HAL_TIMEx_MasterConfigSynchronization>
 80038b6:	1e03      	subs	r3, r0, #0
 80038b8:	d001      	beq.n	80038be <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80038ba:	f7ff fd57 	bl	800336c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038be:	2138      	movs	r1, #56	; 0x38
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	2260      	movs	r2, #96	; 0x60
 80038c4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	2200      	movs	r2, #0
 80038ca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	2200      	movs	r2, #0
 80038d6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038d8:	187b      	adds	r3, r7, r1
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038de:	187b      	adds	r3, r7, r1
 80038e0:	2200      	movs	r2, #0
 80038e2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	2200      	movs	r2, #0
 80038e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038ea:	1879      	adds	r1, r7, r1
 80038ec:	4b1f      	ldr	r3, [pc, #124]	; (800396c <MX_TIM15_Init+0x17c>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	0018      	movs	r0, r3
 80038f2:	f002 fac7 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d001      	beq.n	80038fe <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80038fa:	f7ff fd37 	bl	800336c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038fe:	2338      	movs	r3, #56	; 0x38
 8003900:	18f9      	adds	r1, r7, r3
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <MX_TIM15_Init+0x17c>)
 8003904:	2204      	movs	r2, #4
 8003906:	0018      	movs	r0, r3
 8003908:	f002 fabc 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 800390c:	1e03      	subs	r3, r0, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8003910:	f7ff fd2c 	bl	800336c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003914:	1d3b      	adds	r3, r7, #4
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800391a:	1d3b      	adds	r3, r7, #4
 800391c:	2200      	movs	r2, #0
 800391e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	2200      	movs	r2, #0
 800392a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	2280      	movs	r2, #128	; 0x80
 8003936:	0192      	lsls	r2, r2, #6
 8003938:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	2200      	movs	r2, #0
 800393e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003946:	1d3a      	adds	r2, r7, #4
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <MX_TIM15_Init+0x17c>)
 800394a:	0011      	movs	r1, r2
 800394c:	0018      	movs	r0, r3
 800394e:	f003 f8f1 	bl	8006b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8003952:	1e03      	subs	r3, r0, #0
 8003954:	d001      	beq.n	800395a <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 8003956:	f7ff fd09 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <MX_TIM15_Init+0x17c>)
 800395c:	0018      	movs	r0, r3
 800395e:	f000 fa17 	bl	8003d90 <HAL_TIM_MspPostInit>

}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b01c      	add	sp, #112	; 0x70
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	20000354 	.word	0x20000354
 8003970:	40014000 	.word	0x40014000
 8003974:	000009ff 	.word	0x000009ff

08003978 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b094      	sub	sp, #80	; 0x50
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800397e:	2334      	movs	r3, #52	; 0x34
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	0018      	movs	r0, r3
 8003984:	231c      	movs	r3, #28
 8003986:	001a      	movs	r2, r3
 8003988:	2100      	movs	r1, #0
 800398a:	f006 fd05 	bl	800a398 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800398e:	003b      	movs	r3, r7
 8003990:	0018      	movs	r0, r3
 8003992:	2334      	movs	r3, #52	; 0x34
 8003994:	001a      	movs	r2, r3
 8003996:	2100      	movs	r1, #0
 8003998:	f006 fcfe 	bl	800a398 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800399c:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <MX_TIM16_Init+0x104>)
 800399e:	4a38      	ldr	r2, [pc, #224]	; (8003a80 <MX_TIM16_Init+0x108>)
 80039a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80039a2:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <MX_TIM16_Init+0x104>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a8:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <MX_TIM16_Init+0x104>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2560-1;
 80039ae:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <MX_TIM16_Init+0x104>)
 80039b0:	4a34      	ldr	r2, [pc, #208]	; (8003a84 <MX_TIM16_Init+0x10c>)
 80039b2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b4:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <MX_TIM16_Init+0x104>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80039ba:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <MX_TIM16_Init+0x104>)
 80039bc:	2200      	movs	r2, #0
 80039be:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c0:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <MX_TIM16_Init+0x104>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80039c6:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <MX_TIM16_Init+0x104>)
 80039c8:	0018      	movs	r0, r3
 80039ca:	f001 fd5f 	bl	800548c <HAL_TIM_Base_Init>
 80039ce:	1e03      	subs	r3, r0, #0
 80039d0:	d001      	beq.n	80039d6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80039d2:	f7ff fccb 	bl	800336c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80039d6:	4b29      	ldr	r3, [pc, #164]	; (8003a7c <MX_TIM16_Init+0x104>)
 80039d8:	0018      	movs	r0, r3
 80039da:	f001 fe05 	bl	80055e8 <HAL_TIM_PWM_Init>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d001      	beq.n	80039e6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80039e2:	f7ff fcc3 	bl	800336c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039e6:	2134      	movs	r1, #52	; 0x34
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2260      	movs	r2, #96	; 0x60
 80039ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2200      	movs	r2, #0
 80039f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	2200      	movs	r2, #0
 80039fe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	2200      	movs	r2, #0
 8003a0a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a0c:	187b      	adds	r3, r7, r1
 8003a0e:	2200      	movs	r2, #0
 8003a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a12:	1879      	adds	r1, r7, r1
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <MX_TIM16_Init+0x104>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f002 fa33 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 8003a1e:	1e03      	subs	r3, r0, #0
 8003a20:	d001      	beq.n	8003a26 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8003a22:	f7ff fca3 	bl	800336c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a26:	003b      	movs	r3, r7
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a2c:	003b      	movs	r3, r7
 8003a2e:	2200      	movs	r2, #0
 8003a30:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a32:	003b      	movs	r3, r7
 8003a34:	2200      	movs	r2, #0
 8003a36:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a38:	003b      	movs	r3, r7
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a3e:	003b      	movs	r3, r7
 8003a40:	2200      	movs	r2, #0
 8003a42:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a44:	003b      	movs	r3, r7
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	0192      	lsls	r2, r2, #6
 8003a4a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a4c:	003b      	movs	r3, r7
 8003a4e:	2200      	movs	r2, #0
 8003a50:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a52:	003b      	movs	r3, r7
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003a58:	003a      	movs	r2, r7
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <MX_TIM16_Init+0x104>)
 8003a5c:	0011      	movs	r1, r2
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f003 f868 	bl	8006b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a64:	1e03      	subs	r3, r0, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8003a68:	f7ff fc80 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <MX_TIM16_Init+0x104>)
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 f98e 	bl	8003d90 <HAL_TIM_MspPostInit>

}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b014      	add	sp, #80	; 0x50
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200003a0 	.word	0x200003a0
 8003a80:	40014400 	.word	0x40014400
 8003a84:	000009ff 	.word	0x000009ff

08003a88 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b094      	sub	sp, #80	; 0x50
 8003a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a8e:	2334      	movs	r3, #52	; 0x34
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	0018      	movs	r0, r3
 8003a94:	231c      	movs	r3, #28
 8003a96:	001a      	movs	r2, r3
 8003a98:	2100      	movs	r1, #0
 8003a9a:	f006 fc7d 	bl	800a398 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a9e:	003b      	movs	r3, r7
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	2334      	movs	r3, #52	; 0x34
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	f006 fc76 	bl	800a398 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003aac:	4b37      	ldr	r3, [pc, #220]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003aae:	4a38      	ldr	r2, [pc, #224]	; (8003b90 <MX_TIM17_Init+0x108>)
 8003ab0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8003ab2:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ab8:	4b34      	ldr	r3, [pc, #208]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2560-1;
 8003abe:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003ac0:	4a34      	ldr	r2, [pc, #208]	; (8003b94 <MX_TIM17_Init+0x10c>)
 8003ac2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ac4:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003aca:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f001 fcd7 	bl	800548c <HAL_TIM_Base_Init>
 8003ade:	1e03      	subs	r3, r0, #0
 8003ae0:	d001      	beq.n	8003ae6 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003ae2:	f7ff fc43 	bl	800336c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003ae6:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f001 fd7d 	bl	80055e8 <HAL_TIM_PWM_Init>
 8003aee:	1e03      	subs	r3, r0, #0
 8003af0:	d001      	beq.n	8003af6 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8003af2:	f7ff fc3b 	bl	800336c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003af6:	2134      	movs	r1, #52	; 0x34
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2260      	movs	r2, #96	; 0x60
 8003afc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b16:	187b      	adds	r3, r7, r1
 8003b18:	2200      	movs	r2, #0
 8003b1a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	2200      	movs	r2, #0
 8003b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b22:	1879      	adds	r1, r7, r1
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f002 f9ab 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 8003b2e:	1e03      	subs	r3, r0, #0
 8003b30:	d001      	beq.n	8003b36 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003b32:	f7ff fc1b 	bl	800336c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b36:	003b      	movs	r3, r7
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b3c:	003b      	movs	r3, r7
 8003b3e:	2200      	movs	r2, #0
 8003b40:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b42:	003b      	movs	r3, r7
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b48:	003b      	movs	r3, r7
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b4e:	003b      	movs	r3, r7
 8003b50:	2200      	movs	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b54:	003b      	movs	r3, r7
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	0192      	lsls	r2, r2, #6
 8003b5a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b5c:	003b      	movs	r3, r7
 8003b5e:	2200      	movs	r2, #0
 8003b60:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b62:	003b      	movs	r3, r7
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003b68:	003a      	movs	r2, r7
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003b6c:	0011      	movs	r1, r2
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f002 ffe0 	bl	8006b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b74:	1e03      	subs	r3, r0, #0
 8003b76:	d001      	beq.n	8003b7c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8003b78:	f7ff fbf8 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <MX_TIM17_Init+0x104>)
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 f906 	bl	8003d90 <HAL_TIM_MspPostInit>

}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b014      	add	sp, #80	; 0x50
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	200003ec 	.word	0x200003ec
 8003b90:	40014800 	.word	0x40014800
 8003b94:	000009ff 	.word	0x000009ff

08003b98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b08d      	sub	sp, #52	; 0x34
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba0:	241c      	movs	r4, #28
 8003ba2:	193b      	adds	r3, r7, r4
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	2314      	movs	r3, #20
 8003ba8:	001a      	movs	r2, r3
 8003baa:	2100      	movs	r1, #0
 8003bac:	f006 fbf4 	bl	800a398 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a3e      	ldr	r2, [pc, #248]	; (8003cb0 <HAL_TIM_Encoder_MspInit+0x118>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d13a      	bne.n	8003c30 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bba:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bc0:	2180      	movs	r1, #128	; 0x80
 8003bc2:	0109      	lsls	r1, r1, #4
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40
 8003bc8:	4b3a      	ldr	r3, [pc, #232]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd6:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bda:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bdc:	2101      	movs	r1, #1
 8003bde:	430a      	orrs	r2, r1
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	2201      	movs	r2, #1
 8003be8:	4013      	ands	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003bee:	193b      	adds	r3, r7, r4
 8003bf0:	22c0      	movs	r2, #192	; 0xc0
 8003bf2:	0092      	lsls	r2, r2, #2
 8003bf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	0021      	movs	r1, r4
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c10:	187a      	adds	r2, r7, r1
 8003c12:	23a0      	movs	r3, #160	; 0xa0
 8003c14:	05db      	lsls	r3, r3, #23
 8003c16:	0011      	movs	r1, r2
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 fc63 	bl	80044e4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	200d      	movs	r0, #13
 8003c24:	f000 fb60 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003c28:	200d      	movs	r0, #13
 8003c2a:	f000 fb72 	bl	8004312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003c2e:	e03a      	b.n	8003ca6 <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <HAL_TIM_Encoder_MspInit+0x120>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d135      	bne.n	8003ca6 <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c40:	2102      	movs	r1, #2
 8003c42:	430a      	orrs	r2, r1
 8003c44:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c56:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c58:	2104      	movs	r1, #4
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c62:	2204      	movs	r2, #4
 8003c64:	4013      	ands	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c6a:	211c      	movs	r1, #28
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	22c0      	movs	r2, #192	; 0xc0
 8003c70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c72:	187b      	adds	r3, r7, r1
 8003c74:	2202      	movs	r2, #2
 8003c76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	187b      	adds	r3, r7, r1
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7e:	187b      	adds	r3, r7, r1
 8003c80:	2200      	movs	r2, #0
 8003c82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	2201      	movs	r2, #1
 8003c88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	4a0b      	ldr	r2, [pc, #44]	; (8003cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8003c8e:	0019      	movs	r1, r3
 8003c90:	0010      	movs	r0, r2
 8003c92:	f000 fc27 	bl	80044e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c96:	2200      	movs	r2, #0
 8003c98:	2100      	movs	r1, #0
 8003c9a:	2010      	movs	r0, #16
 8003c9c:	f000 fb24 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ca0:	2010      	movs	r0, #16
 8003ca2:	f000 fb36 	bl	8004312 <HAL_NVIC_EnableIRQ>
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b00d      	add	sp, #52	; 0x34
 8003cac:	bd90      	pop	{r4, r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	50000800 	.word	0x50000800

08003cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2b      	ldr	r2, [pc, #172]	; (8003d7c <HAL_TIM_Base_MspInit+0xbc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d114      	bne.n	8003cfc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003cd8:	2120      	movs	r1, #32
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cde:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	2012      	movs	r0, #18
 8003cf0:	f000 fafa 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003cf4:	2012      	movs	r0, #18
 8003cf6:	f000 fb0c 	bl	8004312 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003cfa:	e03a      	b.n	8003d72 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM15)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a20      	ldr	r2, [pc, #128]	; (8003d84 <HAL_TIM_Base_MspInit+0xc4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	0249      	lsls	r1, r1, #9
 8003d10:	430a      	orrs	r2, r1
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	025b      	lsls	r3, r3, #9
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
}
 8003d22:	e026      	b.n	8003d72 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <HAL_TIM_Base_MspInit+0xc8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10e      	bne.n	8003d4c <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003d2e:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003d34:	2180      	movs	r1, #128	; 0x80
 8003d36:	0289      	lsls	r1, r1, #10
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	029b      	lsls	r3, r3, #10
 8003d44:	4013      	ands	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
}
 8003d4a:	e012      	b.n	8003d72 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM17)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a0e      	ldr	r2, [pc, #56]	; (8003d8c <HAL_TIM_Base_MspInit+0xcc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d10d      	bne.n	8003d72 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003d56:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	02c9      	lsls	r1, r1, #11
 8003d60:	430a      	orrs	r2, r1
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_TIM_Base_MspInit+0xc0>)
 8003d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	02db      	lsls	r3, r3, #11
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b006      	add	sp, #24
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	40001400 	.word	0x40001400
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40014400 	.word	0x40014400
 8003d8c:	40014800 	.word	0x40014800

08003d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b08b      	sub	sp, #44	; 0x2c
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d98:	2414      	movs	r4, #20
 8003d9a:	193b      	adds	r3, r7, r4
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	2314      	movs	r3, #20
 8003da0:	001a      	movs	r2, r3
 8003da2:	2100      	movs	r1, #0
 8003da4:	f006 faf8 	bl	800a398 <memset>
  if(timHandle->Instance==TIM15)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a3c      	ldr	r2, [pc, #240]	; (8003ea0 <HAL_TIM_MspPostInit+0x110>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d123      	bne.n	8003dfa <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db2:	4b3c      	ldr	r3, [pc, #240]	; (8003ea4 <HAL_TIM_MspPostInit+0x114>)
 8003db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db6:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <HAL_TIM_MspPostInit+0x114>)
 8003db8:	2102      	movs	r1, #2
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8003dbe:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_TIM_MspPostInit+0x114>)
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003dca:	193b      	adds	r3, r7, r4
 8003dcc:	22c0      	movs	r2, #192	; 0xc0
 8003dce:	0212      	lsls	r2, r2, #8
 8003dd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd2:	0021      	movs	r1, r4
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	187b      	adds	r3, r7, r1
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	2200      	movs	r2, #0
 8003de4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	2205      	movs	r2, #5
 8003dea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	4a2e      	ldr	r2, [pc, #184]	; (8003ea8 <HAL_TIM_MspPostInit+0x118>)
 8003df0:	0019      	movs	r1, r3
 8003df2:	0010      	movs	r0, r2
 8003df4:	f000 fb76 	bl	80044e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003df8:	e04e      	b.n	8003e98 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM16)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2b      	ldr	r2, [pc, #172]	; (8003eac <HAL_TIM_MspPostInit+0x11c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d122      	bne.n	8003e4a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e04:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <HAL_TIM_MspPostInit+0x114>)
 8003e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e08:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <HAL_TIM_MspPostInit+0x114>)
 8003e0a:	2108      	movs	r1, #8
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	635a      	str	r2, [r3, #52]	; 0x34
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_TIM_MspPostInit+0x114>)
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	2208      	movs	r2, #8
 8003e16:	4013      	ands	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e1c:	2114      	movs	r1, #20
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	2202      	movs	r2, #2
 8003e28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e30:	187b      	adds	r3, r7, r1
 8003e32:	2200      	movs	r2, #0
 8003e34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8003e36:	187b      	adds	r3, r7, r1
 8003e38:	2202      	movs	r2, #2
 8003e3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <HAL_TIM_MspPostInit+0x120>)
 8003e40:	0019      	movs	r1, r3
 8003e42:	0010      	movs	r0, r2
 8003e44:	f000 fb4e 	bl	80044e4 <HAL_GPIO_Init>
}
 8003e48:	e026      	b.n	8003e98 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM17)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a19      	ldr	r2, [pc, #100]	; (8003eb4 <HAL_TIM_MspPostInit+0x124>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d121      	bne.n	8003e98 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <HAL_TIM_MspPostInit+0x114>)
 8003e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_TIM_MspPostInit+0x114>)
 8003e5a:	2108      	movs	r1, #8
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_TIM_MspPostInit+0x114>)
 8003e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e64:	2208      	movs	r2, #8
 8003e66:	4013      	ands	r3, r2
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e6c:	2114      	movs	r1, #20
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2202      	movs	r2, #2
 8003e72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	2202      	movs	r2, #2
 8003e78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	2200      	movs	r2, #0
 8003e84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	2202      	movs	r2, #2
 8003e8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e8c:	187b      	adds	r3, r7, r1
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <HAL_TIM_MspPostInit+0x120>)
 8003e90:	0019      	movs	r1, r3
 8003e92:	0010      	movs	r0, r2
 8003e94:	f000 fb26 	bl	80044e4 <HAL_GPIO_Init>
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b00b      	add	sp, #44	; 0x2c
 8003e9e:	bd90      	pop	{r4, r7, pc}
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	50000400 	.word	0x50000400
 8003eac:	40014400 	.word	0x40014400
 8003eb0:	50000c00 	.word	0x50000c00
 8003eb4:	40014800 	.word	0x40014800

08003eb8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003ebe:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <MX_USART2_UART_Init+0xa0>)
 8003ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003ec4:	22e1      	movs	r2, #225	; 0xe1
 8003ec6:	0252      	lsls	r2, r2, #9
 8003ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ed0:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ed6:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003edc:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003ede:	220c      	movs	r2, #12
 8003ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ef4:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003efc:	2208      	movs	r2, #8
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003f00:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003f02:	2280      	movs	r2, #128	; 0x80
 8003f04:	0212      	lsls	r2, r2, #8
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f08:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f002 fed0 	bl	8006cb0 <HAL_UART_Init>
 8003f10:	1e03      	subs	r3, r0, #0
 8003f12:	d001      	beq.n	8003f18 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8003f14:	f7ff fa2a 	bl	800336c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f004 fd41 	bl	80089a4 <HAL_UARTEx_SetTxFifoThreshold>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d001      	beq.n	8003f2a <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8003f26:	f7ff fa21 	bl	800336c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f004 fd78 	bl	8008a24 <HAL_UARTEx_SetRxFifoThreshold>
 8003f34:	1e03      	subs	r3, r0, #0
 8003f36:	d001      	beq.n	8003f3c <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8003f38:	f7ff fa18 	bl	800336c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <MX_USART2_UART_Init+0x9c>)
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f004 fcf6 	bl	8008930 <HAL_UARTEx_DisableFifoMode>
 8003f44:	1e03      	subs	r3, r0, #0
 8003f46:	d001      	beq.n	8003f4c <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8003f48:	f7ff fa10 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	20000438 	.word	0x20000438
 8003f58:	40004400 	.word	0x40004400

08003f5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b091      	sub	sp, #68	; 0x44
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	232c      	movs	r3, #44	; 0x2c
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	0018      	movs	r0, r3
 8003f6a:	2314      	movs	r3, #20
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	2100      	movs	r1, #0
 8003f70:	f006 fa12 	bl	800a398 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f74:	2410      	movs	r4, #16
 8003f76:	193b      	adds	r3, r7, r4
 8003f78:	0018      	movs	r0, r3
 8003f7a:	231c      	movs	r3, #28
 8003f7c:	001a      	movs	r2, r3
 8003f7e:	2100      	movs	r1, #0
 8003f80:	f006 fa0a 	bl	800a398 <memset>
  if(uartHandle->Instance==USART2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a26      	ldr	r2, [pc, #152]	; (8004024 <HAL_UART_MspInit+0xc8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d145      	bne.n	800401a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f8e:	193b      	adds	r3, r7, r4
 8003f90:	2202      	movs	r2, #2
 8003f92:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003f94:	193b      	adds	r3, r7, r4
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f9a:	193b      	adds	r3, r7, r4
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f001 f941 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 8003fa2:	1e03      	subs	r3, r0, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003fa6:	f7ff f9e1 	bl	800336c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003faa:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <HAL_UART_MspInit+0xcc>)
 8003fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <HAL_UART_MspInit+0xcc>)
 8003fb0:	2180      	movs	r1, #128	; 0x80
 8003fb2:	0289      	lsls	r1, r1, #10
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_UART_MspInit+0xcc>)
 8003fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	029b      	lsls	r3, r3, #10
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <HAL_UART_MspInit+0xcc>)
 8003fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fca:	4b17      	ldr	r3, [pc, #92]	; (8004028 <HAL_UART_MspInit+0xcc>)
 8003fcc:	2108      	movs	r1, #8
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_UART_MspInit+0xcc>)
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003fde:	212c      	movs	r1, #44	; 0x2c
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	2260      	movs	r2, #96	; 0x60
 8003fe4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	2202      	movs	r2, #2
 8003fea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	4a0a      	ldr	r2, [pc, #40]	; (800402c <HAL_UART_MspInit+0xd0>)
 8004002:	0019      	movs	r1, r3
 8004004:	0010      	movs	r0, r2
 8004006:	f000 fa6d 	bl	80044e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800400a:	2200      	movs	r2, #0
 800400c:	2100      	movs	r1, #0
 800400e:	201c      	movs	r0, #28
 8004010:	f000 f96a 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004014:	201c      	movs	r0, #28
 8004016:	f000 f97c 	bl	8004312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b011      	add	sp, #68	; 0x44
 8004020:	bd90      	pop	{r4, r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	40004400 	.word	0x40004400
 8004028:	40021000 	.word	0x40021000
 800402c:	50000c00 	.word	0x50000c00

08004030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004030:	480d      	ldr	r0, [pc, #52]	; (8004068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004032:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004034:	f7ff faca 	bl	80035cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004038:	480c      	ldr	r0, [pc, #48]	; (800406c <LoopForever+0x6>)
  ldr r1, =_edata
 800403a:	490d      	ldr	r1, [pc, #52]	; (8004070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <LoopForever+0xe>)
  movs r3, #0
 800403e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004040:	e002      	b.n	8004048 <LoopCopyDataInit>

08004042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004046:	3304      	adds	r3, #4

08004048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800404a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800404c:	d3f9      	bcc.n	8004042 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004050:	4c0a      	ldr	r4, [pc, #40]	; (800407c <LoopForever+0x16>)
  movs r3, #0
 8004052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004054:	e001      	b.n	800405a <LoopFillZerobss>

08004056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004058:	3204      	adds	r2, #4

0800405a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800405a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800405c:	d3fb      	bcc.n	8004056 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800405e:	f006 f9fb 	bl	800a458 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004062:	f7ff f8d3 	bl	800320c <main>

08004066 <LoopForever>:

LoopForever:
  b LoopForever
 8004066:	e7fe      	b.n	8004066 <LoopForever>
  ldr   r0, =_estack
 8004068:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800406c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004070:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8004074:	0800cb48 	.word	0x0800cb48
  ldr r2, =_sbss
 8004078:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800407c:	200007bc 	.word	0x200007bc

08004080 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004080:	e7fe      	b.n	8004080 <ADC1_IRQHandler>
	...

08004084 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800408a:	1dfb      	adds	r3, r7, #7
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_Init+0x3c>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <HAL_Init+0x3c>)
 8004096:	2180      	movs	r1, #128	; 0x80
 8004098:	0049      	lsls	r1, r1, #1
 800409a:	430a      	orrs	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800409e:	2003      	movs	r0, #3
 80040a0:	f000 f810 	bl	80040c4 <HAL_InitTick>
 80040a4:	1e03      	subs	r3, r0, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80040a8:	1dfb      	adds	r3, r7, #7
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e001      	b.n	80040b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80040b0:	f7ff f962 	bl	8003378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040b4:	1dfb      	adds	r3, r7, #7
 80040b6:	781b      	ldrb	r3, [r3, #0]
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40022000 	.word	0x40022000

080040c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040cc:	230f      	movs	r3, #15
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <HAL_InitTick+0x88>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d02b      	beq.n	8004134 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80040dc:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <HAL_InitTick+0x8c>)
 80040de:	681c      	ldr	r4, [r3, #0]
 80040e0:	4b1a      	ldr	r3, [pc, #104]	; (800414c <HAL_InitTick+0x88>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	0019      	movs	r1, r3
 80040e6:	23fa      	movs	r3, #250	; 0xfa
 80040e8:	0098      	lsls	r0, r3, #2
 80040ea:	f7fc f825 	bl	8000138 <__udivsi3>
 80040ee:	0003      	movs	r3, r0
 80040f0:	0019      	movs	r1, r3
 80040f2:	0020      	movs	r0, r4
 80040f4:	f7fc f820 	bl	8000138 <__udivsi3>
 80040f8:	0003      	movs	r3, r0
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 f919 	bl	8004332 <HAL_SYSTICK_Config>
 8004100:	1e03      	subs	r3, r0, #0
 8004102:	d112      	bne.n	800412a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d80a      	bhi.n	8004120 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	2301      	movs	r3, #1
 800410e:	425b      	negs	r3, r3
 8004110:	2200      	movs	r2, #0
 8004112:	0018      	movs	r0, r3
 8004114:	f000 f8e8 	bl	80042e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_InitTick+0x90>)
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e00d      	b.n	800413c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004120:	230f      	movs	r3, #15
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	e008      	b.n	800413c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800412a:	230f      	movs	r3, #15
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	2201      	movs	r2, #1
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e003      	b.n	800413c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004134:	230f      	movs	r3, #15
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800413c:	230f      	movs	r3, #15
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	781b      	ldrb	r3, [r3, #0]
}
 8004142:	0018      	movs	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	b005      	add	sp, #20
 8004148:	bd90      	pop	{r4, r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	20000008 	.word	0x20000008
 8004150:	20000000 	.word	0x20000000
 8004154:	20000004 	.word	0x20000004

08004158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_IncTick+0x1c>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	001a      	movs	r2, r3
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_IncTick+0x20>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	18d2      	adds	r2, r2, r3
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <HAL_IncTick+0x20>)
 800416a:	601a      	str	r2, [r3, #0]
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	20000008 	.word	0x20000008
 8004178:	200004cc 	.word	0x200004cc

0800417c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  return uwTick;
 8004180:	4b02      	ldr	r3, [pc, #8]	; (800418c <HAL_GetTick+0x10>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	200004cc 	.word	0x200004cc

08004190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	0002      	movs	r2, r0
 8004198:	1dfb      	adds	r3, r7, #7
 800419a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800419c:	1dfb      	adds	r3, r7, #7
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b7f      	cmp	r3, #127	; 0x7f
 80041a2:	d809      	bhi.n	80041b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a4:	1dfb      	adds	r3, r7, #7
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	001a      	movs	r2, r3
 80041aa:	231f      	movs	r3, #31
 80041ac:	401a      	ands	r2, r3
 80041ae:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <__NVIC_EnableIRQ+0x30>)
 80041b0:	2101      	movs	r1, #1
 80041b2:	4091      	lsls	r1, r2
 80041b4:	000a      	movs	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	e000e100 	.word	0xe000e100

080041c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	0002      	movs	r2, r0
 80041cc:	6039      	str	r1, [r7, #0]
 80041ce:	1dfb      	adds	r3, r7, #7
 80041d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041d2:	1dfb      	adds	r3, r7, #7
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b7f      	cmp	r3, #127	; 0x7f
 80041d8:	d828      	bhi.n	800422c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041da:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <__NVIC_SetPriority+0xd4>)
 80041dc:	1dfb      	adds	r3, r7, #7
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	b25b      	sxtb	r3, r3
 80041e2:	089b      	lsrs	r3, r3, #2
 80041e4:	33c0      	adds	r3, #192	; 0xc0
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	589b      	ldr	r3, [r3, r2]
 80041ea:	1dfa      	adds	r2, r7, #7
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	0011      	movs	r1, r2
 80041f0:	2203      	movs	r2, #3
 80041f2:	400a      	ands	r2, r1
 80041f4:	00d2      	lsls	r2, r2, #3
 80041f6:	21ff      	movs	r1, #255	; 0xff
 80041f8:	4091      	lsls	r1, r2
 80041fa:	000a      	movs	r2, r1
 80041fc:	43d2      	mvns	r2, r2
 80041fe:	401a      	ands	r2, r3
 8004200:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	22ff      	movs	r2, #255	; 0xff
 8004208:	401a      	ands	r2, r3
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	0018      	movs	r0, r3
 8004210:	2303      	movs	r3, #3
 8004212:	4003      	ands	r3, r0
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004218:	481f      	ldr	r0, [pc, #124]	; (8004298 <__NVIC_SetPriority+0xd4>)
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b25b      	sxtb	r3, r3
 8004220:	089b      	lsrs	r3, r3, #2
 8004222:	430a      	orrs	r2, r1
 8004224:	33c0      	adds	r3, #192	; 0xc0
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800422a:	e031      	b.n	8004290 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800422c:	4a1b      	ldr	r2, [pc, #108]	; (800429c <__NVIC_SetPriority+0xd8>)
 800422e:	1dfb      	adds	r3, r7, #7
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	0019      	movs	r1, r3
 8004234:	230f      	movs	r3, #15
 8004236:	400b      	ands	r3, r1
 8004238:	3b08      	subs	r3, #8
 800423a:	089b      	lsrs	r3, r3, #2
 800423c:	3306      	adds	r3, #6
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	18d3      	adds	r3, r2, r3
 8004242:	3304      	adds	r3, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	1dfa      	adds	r2, r7, #7
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	0011      	movs	r1, r2
 800424c:	2203      	movs	r2, #3
 800424e:	400a      	ands	r2, r1
 8004250:	00d2      	lsls	r2, r2, #3
 8004252:	21ff      	movs	r1, #255	; 0xff
 8004254:	4091      	lsls	r1, r2
 8004256:	000a      	movs	r2, r1
 8004258:	43d2      	mvns	r2, r2
 800425a:	401a      	ands	r2, r3
 800425c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	22ff      	movs	r2, #255	; 0xff
 8004264:	401a      	ands	r2, r3
 8004266:	1dfb      	adds	r3, r7, #7
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	0018      	movs	r0, r3
 800426c:	2303      	movs	r3, #3
 800426e:	4003      	ands	r3, r0
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004274:	4809      	ldr	r0, [pc, #36]	; (800429c <__NVIC_SetPriority+0xd8>)
 8004276:	1dfb      	adds	r3, r7, #7
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	001c      	movs	r4, r3
 800427c:	230f      	movs	r3, #15
 800427e:	4023      	ands	r3, r4
 8004280:	3b08      	subs	r3, #8
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	430a      	orrs	r2, r1
 8004286:	3306      	adds	r3, #6
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	18c3      	adds	r3, r0, r3
 800428c:	3304      	adds	r3, #4
 800428e:	601a      	str	r2, [r3, #0]
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b003      	add	sp, #12
 8004296:	bd90      	pop	{r4, r7, pc}
 8004298:	e000e100 	.word	0xe000e100
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	045b      	lsls	r3, r3, #17
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d301      	bcc.n	80042b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042b4:	2301      	movs	r3, #1
 80042b6:	e010      	b.n	80042da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <SysTick_Config+0x44>)
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	3a01      	subs	r2, #1
 80042be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c0:	2301      	movs	r3, #1
 80042c2:	425b      	negs	r3, r3
 80042c4:	2103      	movs	r1, #3
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7ff ff7c 	bl	80041c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <SysTick_Config+0x44>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d2:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <SysTick_Config+0x44>)
 80042d4:	2207      	movs	r2, #7
 80042d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042d8:	2300      	movs	r3, #0
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b002      	add	sp, #8
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	e000e010 	.word	0xe000e010

080042e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	210f      	movs	r1, #15
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	1c02      	adds	r2, r0, #0
 80042f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b25b      	sxtb	r3, r3
 8004302:	0011      	movs	r1, r2
 8004304:	0018      	movs	r0, r3
 8004306:	f7ff ff5d 	bl	80041c4 <__NVIC_SetPriority>
}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b004      	add	sp, #16
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	0002      	movs	r2, r0
 800431a:	1dfb      	adds	r3, r7, #7
 800431c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800431e:	1dfb      	adds	r3, r7, #7
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b25b      	sxtb	r3, r3
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff ff33 	bl	8004190 <__NVIC_EnableIRQ>
}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b002      	add	sp, #8
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0018      	movs	r0, r3
 800433e:	f7ff ffaf 	bl	80042a0 <SysTick_Config>
 8004342:	0003      	movs	r3, r0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e050      	b.n	8004400 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2225      	movs	r2, #37	; 0x25
 8004362:	5c9b      	ldrb	r3, [r3, r2]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d008      	beq.n	800437c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2204      	movs	r2, #4
 800436e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	; 0x24
 8004374:	2100      	movs	r1, #0
 8004376:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e041      	b.n	8004400 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	210e      	movs	r1, #14
 8004388:	438a      	bics	r2, r1
 800438a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	491c      	ldr	r1, [pc, #112]	; (8004408 <HAL_DMA_Abort+0xbc>)
 8004398:	400a      	ands	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2101      	movs	r1, #1
 80043a8:	438a      	bics	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80043ac:	4b17      	ldr	r3, [pc, #92]	; (800440c <HAL_DMA_Abort+0xc0>)
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	221c      	movs	r2, #28
 80043b6:	4013      	ands	r3, r2
 80043b8:	2201      	movs	r2, #1
 80043ba:	409a      	lsls	r2, r3
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_DMA_Abort+0xc0>)
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00c      	beq.n	80043ee <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	490a      	ldr	r1, [pc, #40]	; (8004408 <HAL_DMA_Abort+0xbc>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2225      	movs	r2, #37	; 0x25
 80043f2:	2101      	movs	r1, #1
 80043f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2224      	movs	r2, #36	; 0x24
 80043fa:	2100      	movs	r1, #0
 80043fc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b002      	add	sp, #8
 8004406:	bd80      	pop	{r7, pc}
 8004408:	fffffeff 	.word	0xfffffeff
 800440c:	40020000 	.word	0x40020000

08004410 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004418:	210f      	movs	r1, #15
 800441a:	187b      	adds	r3, r7, r1
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2225      	movs	r2, #37	; 0x25
 8004424:	5c9b      	ldrb	r3, [r3, r2]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d006      	beq.n	800443a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2204      	movs	r2, #4
 8004430:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004432:	187b      	adds	r3, r7, r1
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	e049      	b.n	80044ce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	210e      	movs	r1, #14
 8004446:	438a      	bics	r2, r1
 8004448:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2101      	movs	r1, #1
 8004456:	438a      	bics	r2, r1
 8004458:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	491d      	ldr	r1, [pc, #116]	; (80044dc <HAL_DMA_Abort_IT+0xcc>)
 8004466:	400a      	ands	r2, r1
 8004468:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_DMA_Abort_IT+0xd0>)
 800446c:	6859      	ldr	r1, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	221c      	movs	r2, #28
 8004474:	4013      	ands	r3, r2
 8004476:	2201      	movs	r2, #1
 8004478:	409a      	lsls	r2, r3
 800447a:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <HAL_DMA_Abort_IT+0xd0>)
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004488:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00c      	beq.n	80044ac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	490f      	ldr	r1, [pc, #60]	; (80044dc <HAL_DMA_Abort_IT+0xcc>)
 800449e:	400a      	ands	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80044aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2225      	movs	r2, #37	; 0x25
 80044b0:	2101      	movs	r1, #1
 80044b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	2100      	movs	r1, #0
 80044ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	0010      	movs	r0, r2
 80044cc:	4798      	blx	r3
    }
  }
  return status;
 80044ce:	230f      	movs	r3, #15
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	781b      	ldrb	r3, [r3, #0]
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b004      	add	sp, #16
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	fffffeff 	.word	0xfffffeff
 80044e0:	40020000 	.word	0x40020000

080044e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044f2:	e147      	b.n	8004784 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2101      	movs	r1, #1
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4091      	lsls	r1, r2
 80044fe:	000a      	movs	r2, r1
 8004500:	4013      	ands	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d100      	bne.n	800450c <HAL_GPIO_Init+0x28>
 800450a:	e138      	b.n	800477e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2203      	movs	r2, #3
 8004512:	4013      	ands	r3, r2
 8004514:	2b01      	cmp	r3, #1
 8004516:	d005      	beq.n	8004524 <HAL_GPIO_Init+0x40>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2203      	movs	r2, #3
 800451e:	4013      	ands	r3, r2
 8004520:	2b02      	cmp	r3, #2
 8004522:	d130      	bne.n	8004586 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	2203      	movs	r2, #3
 8004530:	409a      	lsls	r2, r3
 8004532:	0013      	movs	r3, r2
 8004534:	43da      	mvns	r2, r3
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	409a      	lsls	r2, r3
 8004546:	0013      	movs	r3, r2
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800455a:	2201      	movs	r2, #1
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	409a      	lsls	r2, r3
 8004560:	0013      	movs	r3, r2
 8004562:	43da      	mvns	r2, r3
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	2201      	movs	r2, #1
 8004572:	401a      	ands	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	409a      	lsls	r2, r3
 8004578:	0013      	movs	r3, r2
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2203      	movs	r2, #3
 800458c:	4013      	ands	r3, r2
 800458e:	2b03      	cmp	r3, #3
 8004590:	d017      	beq.n	80045c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	2203      	movs	r2, #3
 800459e:	409a      	lsls	r2, r3
 80045a0:	0013      	movs	r3, r2
 80045a2:	43da      	mvns	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	409a      	lsls	r2, r3
 80045b4:	0013      	movs	r3, r2
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2203      	movs	r2, #3
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d123      	bne.n	8004616 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	08da      	lsrs	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3208      	adds	r2, #8
 80045d6:	0092      	lsls	r2, r2, #2
 80045d8:	58d3      	ldr	r3, [r2, r3]
 80045da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2207      	movs	r2, #7
 80045e0:	4013      	ands	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	220f      	movs	r2, #15
 80045e6:	409a      	lsls	r2, r3
 80045e8:	0013      	movs	r3, r2
 80045ea:	43da      	mvns	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2107      	movs	r1, #7
 80045fa:	400b      	ands	r3, r1
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	409a      	lsls	r2, r3
 8004600:	0013      	movs	r3, r2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	08da      	lsrs	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3208      	adds	r2, #8
 8004610:	0092      	lsls	r2, r2, #2
 8004612:	6939      	ldr	r1, [r7, #16]
 8004614:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	2203      	movs	r2, #3
 8004622:	409a      	lsls	r2, r3
 8004624:	0013      	movs	r3, r2
 8004626:	43da      	mvns	r2, r3
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2203      	movs	r2, #3
 8004634:	401a      	ands	r2, r3
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	409a      	lsls	r2, r3
 800463c:	0013      	movs	r3, r2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	23c0      	movs	r3, #192	; 0xc0
 8004650:	029b      	lsls	r3, r3, #10
 8004652:	4013      	ands	r3, r2
 8004654:	d100      	bne.n	8004658 <HAL_GPIO_Init+0x174>
 8004656:	e092      	b.n	800477e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004658:	4a50      	ldr	r2, [pc, #320]	; (800479c <HAL_GPIO_Init+0x2b8>)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	3318      	adds	r3, #24
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	589b      	ldr	r3, [r3, r2]
 8004664:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2203      	movs	r2, #3
 800466a:	4013      	ands	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	220f      	movs	r2, #15
 8004670:	409a      	lsls	r2, r3
 8004672:	0013      	movs	r3, r2
 8004674:	43da      	mvns	r2, r3
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4013      	ands	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	23a0      	movs	r3, #160	; 0xa0
 8004680:	05db      	lsls	r3, r3, #23
 8004682:	429a      	cmp	r2, r3
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x1ca>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a45      	ldr	r2, [pc, #276]	; (80047a0 <HAL_GPIO_Init+0x2bc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x1c6>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a44      	ldr	r2, [pc, #272]	; (80047a4 <HAL_GPIO_Init+0x2c0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x1c2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a43      	ldr	r2, [pc, #268]	; (80047a8 <HAL_GPIO_Init+0x2c4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x1be>
 800469e:	2303      	movs	r3, #3
 80046a0:	e006      	b.n	80046b0 <HAL_GPIO_Init+0x1cc>
 80046a2:	2305      	movs	r3, #5
 80046a4:	e004      	b.n	80046b0 <HAL_GPIO_Init+0x1cc>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e002      	b.n	80046b0 <HAL_GPIO_Init+0x1cc>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_GPIO_Init+0x1cc>
 80046ae:	2300      	movs	r3, #0
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	2103      	movs	r1, #3
 80046b4:	400a      	ands	r2, r1
 80046b6:	00d2      	lsls	r2, r2, #3
 80046b8:	4093      	lsls	r3, r2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80046c0:	4936      	ldr	r1, [pc, #216]	; (800479c <HAL_GPIO_Init+0x2b8>)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	3318      	adds	r3, #24
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046ce:	4b33      	ldr	r3, [pc, #204]	; (800479c <HAL_GPIO_Init+0x2b8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	43da      	mvns	r2, r3
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	035b      	lsls	r3, r3, #13
 80046e6:	4013      	ands	r3, r2
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046f2:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_GPIO_Init+0x2b8>)
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80046f8:	4b28      	ldr	r3, [pc, #160]	; (800479c <HAL_GPIO_Init+0x2b8>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	43da      	mvns	r2, r3
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	039b      	lsls	r3, r3, #14
 8004710:	4013      	ands	r3, r2
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800471c:	4b1f      	ldr	r3, [pc, #124]	; (800479c <HAL_GPIO_Init+0x2b8>)
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004722:	4a1e      	ldr	r2, [pc, #120]	; (800479c <HAL_GPIO_Init+0x2b8>)
 8004724:	2384      	movs	r3, #132	; 0x84
 8004726:	58d3      	ldr	r3, [r2, r3]
 8004728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	43da      	mvns	r2, r3
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	029b      	lsls	r3, r3, #10
 800473c:	4013      	ands	r3, r2
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004748:	4914      	ldr	r1, [pc, #80]	; (800479c <HAL_GPIO_Init+0x2b8>)
 800474a:	2284      	movs	r2, #132	; 0x84
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004750:	4a12      	ldr	r2, [pc, #72]	; (800479c <HAL_GPIO_Init+0x2b8>)
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	58d3      	ldr	r3, [r2, r3]
 8004756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	43da      	mvns	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	025b      	lsls	r3, r3, #9
 800476a:	4013      	ands	r3, r2
 800476c:	d003      	beq.n	8004776 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004776:	4909      	ldr	r1, [pc, #36]	; (800479c <HAL_GPIO_Init+0x2b8>)
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	3301      	adds	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	40da      	lsrs	r2, r3
 800478c:	1e13      	subs	r3, r2, #0
 800478e:	d000      	beq.n	8004792 <HAL_GPIO_Init+0x2ae>
 8004790:	e6b0      	b.n	80044f4 <HAL_GPIO_Init+0x10>
  }
}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b006      	add	sp, #24
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021800 	.word	0x40021800
 80047a0:	50000400 	.word	0x50000400
 80047a4:	50000800 	.word	0x50000800
 80047a8:	50000c00 	.word	0x50000c00

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	0008      	movs	r0, r1
 80047b6:	0011      	movs	r1, r2
 80047b8:	1cbb      	adds	r3, r7, #2
 80047ba:	1c02      	adds	r2, r0, #0
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	1c7b      	adds	r3, r7, #1
 80047c0:	1c0a      	adds	r2, r1, #0
 80047c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047c4:	1c7b      	adds	r3, r7, #1
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047cc:	1cbb      	adds	r3, r7, #2
 80047ce:	881a      	ldrh	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047d4:	e003      	b.n	80047de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047d6:	1cbb      	adds	r3, r7, #2
 80047d8:	881a      	ldrh	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b002      	add	sp, #8
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	000a      	movs	r2, r1
 80047f0:	1cbb      	adds	r3, r7, #2
 80047f2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047fa:	1cbb      	adds	r3, r7, #2
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4013      	ands	r3, r2
 8004802:	041a      	lsls	r2, r3, #16
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	43db      	mvns	r3, r3
 8004808:	1cb9      	adds	r1, r7, #2
 800480a:	8809      	ldrh	r1, [r1, #0]
 800480c:	400b      	ands	r3, r1
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b004      	add	sp, #16
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004824:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800482a:	4013      	ands	r3, r2
 800482c:	0019      	movs	r1, r3
 800482e:	4b17      	ldr	r3, [pc, #92]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	430a      	orrs	r2, r1
 8004834:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d11f      	bne.n	8004880 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004840:	4b14      	ldr	r3, [pc, #80]	; (8004894 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	0013      	movs	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	189b      	adds	r3, r3, r2
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4912      	ldr	r1, [pc, #72]	; (8004898 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800484e:	0018      	movs	r0, r3
 8004850:	f7fb fc72 	bl	8000138 <__udivsi3>
 8004854:	0003      	movs	r3, r0
 8004856:	3301      	adds	r3, #1
 8004858:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800485a:	e008      	b.n	800486e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3b01      	subs	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e001      	b.n	800486e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e009      	b.n	8004882 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	401a      	ands	r2, r3
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	429a      	cmp	r2, r3
 800487e:	d0ed      	beq.n	800485c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	0018      	movs	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	b004      	add	sp, #16
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	40007000 	.word	0x40007000
 8004890:	fffff9ff 	.word	0xfffff9ff
 8004894:	20000000 	.word	0x20000000
 8004898:	000f4240 	.word	0x000f4240

0800489c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	23e0      	movs	r3, #224	; 0xe0
 80048a6:	01db      	lsls	r3, r3, #7
 80048a8:	4013      	ands	r3, r2
}
 80048aa:	0018      	movs	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40021000 	.word	0x40021000

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e2f3      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2201      	movs	r2, #1
 80048cc:	4013      	ands	r3, r2
 80048ce:	d100      	bne.n	80048d2 <HAL_RCC_OscConfig+0x1e>
 80048d0:	e07c      	b.n	80049cc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d2:	4bc3      	ldr	r3, [pc, #780]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2238      	movs	r2, #56	; 0x38
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048dc:	4bc0      	ldr	r3, [pc, #768]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2203      	movs	r2, #3
 80048e2:	4013      	ands	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d102      	bne.n	80048f2 <HAL_RCC_OscConfig+0x3e>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d10b      	bne.n	8004910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	4bb9      	ldr	r3, [pc, #740]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	4013      	ands	r3, r2
 8004902:	d062      	beq.n	80049ca <HAL_RCC_OscConfig+0x116>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d15e      	bne.n	80049ca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e2ce      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	025b      	lsls	r3, r3, #9
 8004918:	429a      	cmp	r2, r3
 800491a:	d107      	bne.n	800492c <HAL_RCC_OscConfig+0x78>
 800491c:	4bb0      	ldr	r3, [pc, #704]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4baf      	ldr	r3, [pc, #700]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004922:	2180      	movs	r1, #128	; 0x80
 8004924:	0249      	lsls	r1, r1, #9
 8004926:	430a      	orrs	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e020      	b.n	800496e <HAL_RCC_OscConfig+0xba>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	23a0      	movs	r3, #160	; 0xa0
 8004932:	02db      	lsls	r3, r3, #11
 8004934:	429a      	cmp	r2, r3
 8004936:	d10e      	bne.n	8004956 <HAL_RCC_OscConfig+0xa2>
 8004938:	4ba9      	ldr	r3, [pc, #676]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4ba8      	ldr	r3, [pc, #672]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 800493e:	2180      	movs	r1, #128	; 0x80
 8004940:	02c9      	lsls	r1, r1, #11
 8004942:	430a      	orrs	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	4ba6      	ldr	r3, [pc, #664]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4ba5      	ldr	r3, [pc, #660]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 800494c:	2180      	movs	r1, #128	; 0x80
 800494e:	0249      	lsls	r1, r1, #9
 8004950:	430a      	orrs	r2, r1
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e00b      	b.n	800496e <HAL_RCC_OscConfig+0xba>
 8004956:	4ba2      	ldr	r3, [pc, #648]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4ba1      	ldr	r3, [pc, #644]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 800495c:	49a1      	ldr	r1, [pc, #644]	; (8004be4 <HAL_RCC_OscConfig+0x330>)
 800495e:	400a      	ands	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	4b9f      	ldr	r3, [pc, #636]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b9e      	ldr	r3, [pc, #632]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004968:	499f      	ldr	r1, [pc, #636]	; (8004be8 <HAL_RCC_OscConfig+0x334>)
 800496a:	400a      	ands	r2, r1
 800496c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d014      	beq.n	80049a0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004976:	f7ff fc01 	bl	800417c <HAL_GetTick>
 800497a:	0003      	movs	r3, r0
 800497c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004980:	f7ff fbfc 	bl	800417c <HAL_GetTick>
 8004984:	0002      	movs	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e28d      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004992:	4b93      	ldr	r3, [pc, #588]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	029b      	lsls	r3, r3, #10
 800499a:	4013      	ands	r3, r2
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0xcc>
 800499e:	e015      	b.n	80049cc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7ff fbec 	bl	800417c <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049aa:	f7ff fbe7 	bl	800417c <HAL_GetTick>
 80049ae:	0002      	movs	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b64      	cmp	r3, #100	; 0x64
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e278      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049bc:	4b88      	ldr	r3, [pc, #544]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	029b      	lsls	r3, r3, #10
 80049c4:	4013      	ands	r3, r2
 80049c6:	d1f0      	bne.n	80049aa <HAL_RCC_OscConfig+0xf6>
 80049c8:	e000      	b.n	80049cc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2202      	movs	r2, #2
 80049d2:	4013      	ands	r3, r2
 80049d4:	d100      	bne.n	80049d8 <HAL_RCC_OscConfig+0x124>
 80049d6:	e099      	b.n	8004b0c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049d8:	4b81      	ldr	r3, [pc, #516]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2238      	movs	r2, #56	; 0x38
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e2:	4b7f      	ldr	r3, [pc, #508]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2203      	movs	r2, #3
 80049e8:	4013      	ands	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d102      	bne.n	80049f8 <HAL_RCC_OscConfig+0x144>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d002      	beq.n	80049fe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d135      	bne.n	8004a6a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049fe:	4b78      	ldr	r3, [pc, #480]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4013      	ands	r3, r2
 8004a08:	d005      	beq.n	8004a16 <HAL_RCC_OscConfig+0x162>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e24b      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a16:	4b72      	ldr	r3, [pc, #456]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4a74      	ldr	r2, [pc, #464]	; (8004bec <HAL_RCC_OscConfig+0x338>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	0019      	movs	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	021a      	lsls	r2, r3, #8
 8004a26:	4b6e      	ldr	r3, [pc, #440]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d112      	bne.n	8004a58 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a32:	4b6b      	ldr	r3, [pc, #428]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a6e      	ldr	r2, [pc, #440]	; (8004bf0 <HAL_RCC_OscConfig+0x33c>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	4b67      	ldr	r3, [pc, #412]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004a46:	4b66      	ldr	r3, [pc, #408]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	0adb      	lsrs	r3, r3, #11
 8004a4c:	2207      	movs	r2, #7
 8004a4e:	4013      	ands	r3, r2
 8004a50:	4a68      	ldr	r2, [pc, #416]	; (8004bf4 <HAL_RCC_OscConfig+0x340>)
 8004a52:	40da      	lsrs	r2, r3
 8004a54:	4b68      	ldr	r3, [pc, #416]	; (8004bf8 <HAL_RCC_OscConfig+0x344>)
 8004a56:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a58:	4b68      	ldr	r3, [pc, #416]	; (8004bfc <HAL_RCC_OscConfig+0x348>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7ff fb31 	bl	80040c4 <HAL_InitTick>
 8004a62:	1e03      	subs	r3, r0, #0
 8004a64:	d051      	beq.n	8004b0a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e221      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d030      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a72:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a5e      	ldr	r2, [pc, #376]	; (8004bf0 <HAL_RCC_OscConfig+0x33c>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	4b57      	ldr	r3, [pc, #348]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004a82:	430a      	orrs	r2, r1
 8004a84:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004a86:	4b56      	ldr	r3, [pc, #344]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b55      	ldr	r3, [pc, #340]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004a8c:	2180      	movs	r1, #128	; 0x80
 8004a8e:	0049      	lsls	r1, r1, #1
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7ff fb72 	bl	800417c <HAL_GetTick>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a9e:	f7ff fb6d 	bl	800417c <HAL_GetTick>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e1fe      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab0:	4b4b      	ldr	r3, [pc, #300]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abc:	4b48      	ldr	r3, [pc, #288]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4a4a      	ldr	r2, [pc, #296]	; (8004bec <HAL_RCC_OscConfig+0x338>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	4b44      	ldr	r3, [pc, #272]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	e01b      	b.n	8004b0c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004ad4:	4b42      	ldr	r3, [pc, #264]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004ada:	4949      	ldr	r1, [pc, #292]	; (8004c00 <HAL_RCC_OscConfig+0x34c>)
 8004adc:	400a      	ands	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7ff fb4c 	bl	800417c <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aea:	f7ff fb47 	bl	800417c <HAL_GetTick>
 8004aee:	0002      	movs	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e1d8      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004afc:	4b38      	ldr	r3, [pc, #224]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4013      	ands	r3, r2
 8004b06:	d1f0      	bne.n	8004aea <HAL_RCC_OscConfig+0x236>
 8004b08:	e000      	b.n	8004b0c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2208      	movs	r2, #8
 8004b12:	4013      	ands	r3, r2
 8004b14:	d047      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b16:	4b32      	ldr	r3, [pc, #200]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2238      	movs	r2, #56	; 0x38
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b18      	cmp	r3, #24
 8004b20:	d10a      	bne.n	8004b38 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004b22:	4b2f      	ldr	r3, [pc, #188]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b26:	2202      	movs	r2, #2
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d03c      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x2f2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d138      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e1ba      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d019      	beq.n	8004b74 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004b40:	4b27      	ldr	r3, [pc, #156]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004b42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b44:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004b46:	2101      	movs	r1, #1
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7ff fb16 	bl	800417c <HAL_GetTick>
 8004b50:	0003      	movs	r3, r0
 8004b52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b56:	f7ff fb11 	bl	800417c <HAL_GetTick>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e1a2      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d0f1      	beq.n	8004b56 <HAL_RCC_OscConfig+0x2a2>
 8004b72:	e018      	b.n	8004ba6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004b74:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004b76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b78:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	438a      	bics	r2, r1
 8004b7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7ff fafc 	bl	800417c <HAL_GetTick>
 8004b84:	0003      	movs	r3, r0
 8004b86:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b8a:	f7ff faf7 	bl	800417c <HAL_GetTick>
 8004b8e:	0002      	movs	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e188      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d1f1      	bne.n	8004b8a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2204      	movs	r2, #4
 8004bac:	4013      	ands	r3, r2
 8004bae:	d100      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x2fe>
 8004bb0:	e0c6      	b.n	8004d40 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb2:	231f      	movs	r3, #31
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2238      	movs	r2, #56	; 0x38
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d11e      	bne.n	8004c04 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_RCC_OscConfig+0x32c>)
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bca:	2202      	movs	r2, #2
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x31e>
 8004bd0:	e0b6      	b.n	8004d40 <HAL_RCC_OscConfig+0x48c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d000      	beq.n	8004bdc <HAL_RCC_OscConfig+0x328>
 8004bda:	e0b1      	b.n	8004d40 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e166      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
 8004be0:	40021000 	.word	0x40021000
 8004be4:	fffeffff 	.word	0xfffeffff
 8004be8:	fffbffff 	.word	0xfffbffff
 8004bec:	ffff80ff 	.word	0xffff80ff
 8004bf0:	ffffc7ff 	.word	0xffffc7ff
 8004bf4:	00f42400 	.word	0x00f42400
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	20000004 	.word	0x20000004
 8004c00:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c04:	4bac      	ldr	r3, [pc, #688]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	055b      	lsls	r3, r3, #21
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_OscConfig+0x360>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x362>
 8004c14:	2300      	movs	r3, #0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d011      	beq.n	8004c3e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c1a:	4ba7      	ldr	r3, [pc, #668]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c1e:	4ba6      	ldr	r3, [pc, #664]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004c20:	2180      	movs	r1, #128	; 0x80
 8004c22:	0549      	lsls	r1, r1, #21
 8004c24:	430a      	orrs	r2, r1
 8004c26:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c28:	4ba3      	ldr	r3, [pc, #652]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c2c:	2380      	movs	r3, #128	; 0x80
 8004c2e:	055b      	lsls	r3, r3, #21
 8004c30:	4013      	ands	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004c36:	231f      	movs	r3, #31
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c3e:	4b9f      	ldr	r3, [pc, #636]	; (8004ebc <HAL_RCC_OscConfig+0x608>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	4013      	ands	r3, r2
 8004c48:	d11a      	bne.n	8004c80 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c4a:	4b9c      	ldr	r3, [pc, #624]	; (8004ebc <HAL_RCC_OscConfig+0x608>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4b9b      	ldr	r3, [pc, #620]	; (8004ebc <HAL_RCC_OscConfig+0x608>)
 8004c50:	2180      	movs	r1, #128	; 0x80
 8004c52:	0049      	lsls	r1, r1, #1
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004c58:	f7ff fa90 	bl	800417c <HAL_GetTick>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c62:	f7ff fa8b 	bl	800417c <HAL_GetTick>
 8004c66:	0002      	movs	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e11c      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c74:	4b91      	ldr	r3, [pc, #580]	; (8004ebc <HAL_RCC_OscConfig+0x608>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d106      	bne.n	8004c96 <HAL_RCC_OscConfig+0x3e2>
 8004c88:	4b8b      	ldr	r3, [pc, #556]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004c8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c8c:	4b8a      	ldr	r3, [pc, #552]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004c8e:	2101      	movs	r1, #1
 8004c90:	430a      	orrs	r2, r1
 8004c92:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c94:	e01c      	b.n	8004cd0 <HAL_RCC_OscConfig+0x41c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x404>
 8004c9e:	4b86      	ldr	r3, [pc, #536]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004ca0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ca2:	4b85      	ldr	r3, [pc, #532]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004ca4:	2104      	movs	r1, #4
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004caa:	4b83      	ldr	r3, [pc, #524]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004cac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cae:	4b82      	ldr	r3, [pc, #520]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_OscConfig+0x41c>
 8004cb8:	4b7f      	ldr	r3, [pc, #508]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004cba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cbc:	4b7e      	ldr	r3, [pc, #504]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	438a      	bics	r2, r1
 8004cc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cc4:	4b7c      	ldr	r3, [pc, #496]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004cc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cc8:	4b7b      	ldr	r3, [pc, #492]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004cca:	2104      	movs	r1, #4
 8004ccc:	438a      	bics	r2, r1
 8004cce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d014      	beq.n	8004d02 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7ff fa50 	bl	800417c <HAL_GetTick>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce0:	e009      	b.n	8004cf6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7ff fa4b 	bl	800417c <HAL_GetTick>
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	4a74      	ldr	r2, [pc, #464]	; (8004ec0 <HAL_RCC_OscConfig+0x60c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e0db      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf6:	4b70      	ldr	r3, [pc, #448]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x42e>
 8004d00:	e013      	b.n	8004d2a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7ff fa3b 	bl	800417c <HAL_GetTick>
 8004d06:	0003      	movs	r3, r0
 8004d08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d0a:	e009      	b.n	8004d20 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0c:	f7ff fa36 	bl	800417c <HAL_GetTick>
 8004d10:	0002      	movs	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	4a6a      	ldr	r2, [pc, #424]	; (8004ec0 <HAL_RCC_OscConfig+0x60c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e0c6      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d20:	4b65      	ldr	r3, [pc, #404]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	2202      	movs	r2, #2
 8004d26:	4013      	ands	r3, r2
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d2a:	231f      	movs	r3, #31
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004d34:	4b60      	ldr	r3, [pc, #384]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d38:	4b5f      	ldr	r3, [pc, #380]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004d3a:	4962      	ldr	r1, [pc, #392]	; (8004ec4 <HAL_RCC_OscConfig+0x610>)
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d100      	bne.n	8004d4a <HAL_RCC_OscConfig+0x496>
 8004d48:	e0b0      	b.n	8004eac <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d4a:	4b5b      	ldr	r3, [pc, #364]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2238      	movs	r2, #56	; 0x38
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d100      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4a4>
 8004d56:	e078      	b.n	8004e4a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d153      	bne.n	8004e08 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d60:	4b55      	ldr	r3, [pc, #340]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4b54      	ldr	r3, [pc, #336]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004d66:	4958      	ldr	r1, [pc, #352]	; (8004ec8 <HAL_RCC_OscConfig+0x614>)
 8004d68:	400a      	ands	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7ff fa06 	bl	800417c <HAL_GetTick>
 8004d70:	0003      	movs	r3, r0
 8004d72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d76:	f7ff fa01 	bl	800417c <HAL_GetTick>
 8004d7a:	0002      	movs	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e092      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d88:	4b4b      	ldr	r3, [pc, #300]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	049b      	lsls	r3, r3, #18
 8004d90:	4013      	ands	r3, r2
 8004d92:	d1f0      	bne.n	8004d76 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d94:	4b48      	ldr	r3, [pc, #288]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4a4c      	ldr	r2, [pc, #304]	; (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1a      	ldr	r2, [r3, #32]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	4b3e      	ldr	r3, [pc, #248]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc2:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b3c      	ldr	r3, [pc, #240]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	0449      	lsls	r1, r1, #17
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004dd0:	4b39      	ldr	r3, [pc, #228]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	4b38      	ldr	r3, [pc, #224]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004dd6:	2180      	movs	r1, #128	; 0x80
 8004dd8:	0549      	lsls	r1, r1, #21
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7ff f9cd 	bl	800417c <HAL_GetTick>
 8004de2:	0003      	movs	r3, r0
 8004de4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de8:	f7ff f9c8 	bl	800417c <HAL_GetTick>
 8004dec:	0002      	movs	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e059      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	049b      	lsls	r3, r3, #18
 8004e02:	4013      	ands	r3, r2
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x534>
 8004e06:	e051      	b.n	8004eac <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	4b2a      	ldr	r3, [pc, #168]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004e0e:	492e      	ldr	r1, [pc, #184]	; (8004ec8 <HAL_RCC_OscConfig+0x614>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7ff f9b2 	bl	800417c <HAL_GetTick>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1e:	f7ff f9ad 	bl	800417c <HAL_GetTick>
 8004e22:	0002      	movs	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e03e      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e30:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	049b      	lsls	r3, r3, #18
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d1f0      	bne.n	8004e1e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004e3c:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004e42:	4923      	ldr	r1, [pc, #140]	; (8004ed0 <HAL_RCC_OscConfig+0x61c>)
 8004e44:	400a      	ands	r2, r1
 8004e46:	60da      	str	r2, [r3, #12]
 8004e48:	e030      	b.n	8004eac <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e02b      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004e56:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <HAL_RCC_OscConfig+0x604>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	401a      	ands	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d11e      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2270      	movs	r2, #112	; 0x70
 8004e6e:	401a      	ands	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d117      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	23fe      	movs	r3, #254	; 0xfe
 8004e7c:	01db      	lsls	r3, r3, #7
 8004e7e:	401a      	ands	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10e      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	23f8      	movs	r3, #248	; 0xf8
 8004e8e:	039b      	lsls	r3, r3, #14
 8004e90:	401a      	ands	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d106      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	0f5b      	lsrs	r3, r3, #29
 8004e9e:	075a      	lsls	r2, r3, #29
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d001      	beq.n	8004eac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b008      	add	sp, #32
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	00001388 	.word	0x00001388
 8004ec4:	efffffff 	.word	0xefffffff
 8004ec8:	feffffff 	.word	0xfeffffff
 8004ecc:	1fc1808c 	.word	0x1fc1808c
 8004ed0:	effefffc 	.word	0xeffefffc

08004ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0e9      	b.n	80050bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee8:	4b76      	ldr	r3, [pc, #472]	; (80050c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2207      	movs	r2, #7
 8004eee:	4013      	ands	r3, r2
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d91e      	bls.n	8004f34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef6:	4b73      	ldr	r3, [pc, #460]	; (80050c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2207      	movs	r2, #7
 8004efc:	4393      	bics	r3, r2
 8004efe:	0019      	movs	r1, r3
 8004f00:	4b70      	ldr	r3, [pc, #448]	; (80050c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f08:	f7ff f938 	bl	800417c <HAL_GetTick>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f10:	e009      	b.n	8004f26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f12:	f7ff f933 	bl	800417c <HAL_GetTick>
 8004f16:	0002      	movs	r2, r0
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	4a6a      	ldr	r2, [pc, #424]	; (80050c8 <HAL_RCC_ClockConfig+0x1f4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e0ca      	b.n	80050bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f26:	4b67      	ldr	r3, [pc, #412]	; (80050c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2207      	movs	r2, #7
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d1ee      	bne.n	8004f12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d015      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2204      	movs	r2, #4
 8004f44:	4013      	ands	r3, r2
 8004f46:	d006      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f48:	4b60      	ldr	r3, [pc, #384]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	4b5f      	ldr	r3, [pc, #380]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004f4e:	21e0      	movs	r1, #224	; 0xe0
 8004f50:	01c9      	lsls	r1, r1, #7
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f56:	4b5d      	ldr	r3, [pc, #372]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4a5d      	ldr	r2, [pc, #372]	; (80050d0 <HAL_RCC_ClockConfig+0x1fc>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	0019      	movs	r1, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4b59      	ldr	r3, [pc, #356]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004f66:	430a      	orrs	r2, r1
 8004f68:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	4013      	ands	r3, r2
 8004f72:	d057      	beq.n	8005024 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f7c:	4b53      	ldr	r3, [pc, #332]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	029b      	lsls	r3, r3, #10
 8004f84:	4013      	ands	r3, r2
 8004f86:	d12b      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e097      	b.n	80050bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f94:	4b4d      	ldr	r3, [pc, #308]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	049b      	lsls	r3, r3, #18
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d11f      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e08b      	b.n	80050bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d107      	bne.n	8004fbc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fac:	4b47      	ldr	r3, [pc, #284]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d113      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e07f      	b.n	80050bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fc4:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc8:	2202      	movs	r2, #2
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d108      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e074      	b.n	80050bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd2:	4b3e      	ldr	r3, [pc, #248]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e06d      	b.n	80050bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fe0:	4b3a      	ldr	r3, [pc, #232]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	4393      	bics	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	4b37      	ldr	r3, [pc, #220]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff4:	f7ff f8c2 	bl	800417c <HAL_GetTick>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffc:	e009      	b.n	8005012 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffe:	f7ff f8bd 	bl	800417c <HAL_GetTick>
 8005002:	0002      	movs	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <HAL_RCC_ClockConfig+0x1f4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e054      	b.n	80050bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2238      	movs	r2, #56	; 0x38
 8005018:	401a      	ands	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	429a      	cmp	r2, r3
 8005022:	d1ec      	bne.n	8004ffe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005024:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2207      	movs	r2, #7
 800502a:	4013      	ands	r3, r2
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d21e      	bcs.n	8005070 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2207      	movs	r2, #7
 8005038:	4393      	bics	r3, r2
 800503a:	0019      	movs	r1, r3
 800503c:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <HAL_RCC_ClockConfig+0x1f0>)
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005044:	f7ff f89a 	bl	800417c <HAL_GetTick>
 8005048:	0003      	movs	r3, r0
 800504a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800504c:	e009      	b.n	8005062 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800504e:	f7ff f895 	bl	800417c <HAL_GetTick>
 8005052:	0002      	movs	r2, r0
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <HAL_RCC_ClockConfig+0x1f4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e02c      	b.n	80050bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005062:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2207      	movs	r2, #7
 8005068:	4013      	ands	r3, r2
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d1ee      	bne.n	800504e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2204      	movs	r2, #4
 8005076:	4013      	ands	r3, r2
 8005078:	d009      	beq.n	800508e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800507a:	4b14      	ldr	r3, [pc, #80]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <HAL_RCC_ClockConfig+0x200>)
 8005080:	4013      	ands	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 800508a:	430a      	orrs	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800508e:	f000 f829 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 8005092:	0001      	movs	r1, r0
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <HAL_RCC_ClockConfig+0x1f8>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	220f      	movs	r2, #15
 800509c:	401a      	ands	r2, r3
 800509e:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <HAL_RCC_ClockConfig+0x204>)
 80050a0:	0092      	lsls	r2, r2, #2
 80050a2:	58d3      	ldr	r3, [r2, r3]
 80050a4:	221f      	movs	r2, #31
 80050a6:	4013      	ands	r3, r2
 80050a8:	000a      	movs	r2, r1
 80050aa:	40da      	lsrs	r2, r3
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <HAL_RCC_ClockConfig+0x208>)
 80050ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCC_ClockConfig+0x20c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f7ff f805 	bl	80040c4 <HAL_InitTick>
 80050ba:	0003      	movs	r3, r0
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b004      	add	sp, #16
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40022000 	.word	0x40022000
 80050c8:	00001388 	.word	0x00001388
 80050cc:	40021000 	.word	0x40021000
 80050d0:	fffff0ff 	.word	0xfffff0ff
 80050d4:	ffff8fff 	.word	0xffff8fff
 80050d8:	0800c6f4 	.word	0x0800c6f4
 80050dc:	20000000 	.word	0x20000000
 80050e0:	20000004 	.word	0x20000004

080050e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ea:	4b3c      	ldr	r3, [pc, #240]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2238      	movs	r2, #56	; 0x38
 80050f0:	4013      	ands	r3, r2
 80050f2:	d10f      	bne.n	8005114 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80050f4:	4b39      	ldr	r3, [pc, #228]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	0adb      	lsrs	r3, r3, #11
 80050fa:	2207      	movs	r2, #7
 80050fc:	4013      	ands	r3, r2
 80050fe:	2201      	movs	r2, #1
 8005100:	409a      	lsls	r2, r3
 8005102:	0013      	movs	r3, r2
 8005104:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	4835      	ldr	r0, [pc, #212]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800510a:	f7fb f815 	bl	8000138 <__udivsi3>
 800510e:	0003      	movs	r3, r0
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	e05d      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005114:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2238      	movs	r2, #56	; 0x38
 800511a:	4013      	ands	r3, r2
 800511c:	2b08      	cmp	r3, #8
 800511e:	d102      	bne.n	8005126 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005120:	4b2f      	ldr	r3, [pc, #188]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	e054      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005126:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2238      	movs	r2, #56	; 0x38
 800512c:	4013      	ands	r3, r2
 800512e:	2b10      	cmp	r3, #16
 8005130:	d138      	bne.n	80051a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2203      	movs	r2, #3
 8005138:	4013      	ands	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800513c:	4b27      	ldr	r3, [pc, #156]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	091b      	lsrs	r3, r3, #4
 8005142:	2207      	movs	r2, #7
 8005144:	4013      	ands	r3, r2
 8005146:	3301      	adds	r3, #1
 8005148:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b03      	cmp	r3, #3
 800514e:	d10d      	bne.n	800516c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	4823      	ldr	r0, [pc, #140]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005154:	f7fa fff0 	bl	8000138 <__udivsi3>
 8005158:	0003      	movs	r3, r0
 800515a:	0019      	movs	r1, r3
 800515c:	4b1f      	ldr	r3, [pc, #124]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	227f      	movs	r2, #127	; 0x7f
 8005164:	4013      	ands	r3, r2
 8005166:	434b      	muls	r3, r1
 8005168:	617b      	str	r3, [r7, #20]
        break;
 800516a:	e00d      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	481c      	ldr	r0, [pc, #112]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005170:	f7fa ffe2 	bl	8000138 <__udivsi3>
 8005174:	0003      	movs	r3, r0
 8005176:	0019      	movs	r1, r3
 8005178:	4b18      	ldr	r3, [pc, #96]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	0a1b      	lsrs	r3, r3, #8
 800517e:	227f      	movs	r2, #127	; 0x7f
 8005180:	4013      	ands	r3, r2
 8005182:	434b      	muls	r3, r1
 8005184:	617b      	str	r3, [r7, #20]
        break;
 8005186:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005188:	4b14      	ldr	r3, [pc, #80]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	0f5b      	lsrs	r3, r3, #29
 800518e:	2207      	movs	r2, #7
 8005190:	4013      	ands	r3, r2
 8005192:	3301      	adds	r3, #1
 8005194:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	6978      	ldr	r0, [r7, #20]
 800519a:	f7fa ffcd 	bl	8000138 <__udivsi3>
 800519e:	0003      	movs	r3, r0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	e015      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2238      	movs	r2, #56	; 0x38
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d103      	bne.n	80051b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e00b      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2238      	movs	r2, #56	; 0x38
 80051be:	4013      	ands	r3, r2
 80051c0:	2b18      	cmp	r3, #24
 80051c2:	d103      	bne.n	80051cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80051c4:	23fa      	movs	r3, #250	; 0xfa
 80051c6:	01db      	lsls	r3, r3, #7
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e001      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051d0:	693b      	ldr	r3, [r7, #16]
}
 80051d2:	0018      	movs	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b006      	add	sp, #24
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	40021000 	.word	0x40021000
 80051e0:	00f42400 	.word	0x00f42400

080051e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e8:	4b02      	ldr	r3, [pc, #8]	; (80051f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	0018      	movs	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	20000000 	.word	0x20000000

080051f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f8:	b5b0      	push	{r4, r5, r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80051fc:	f7ff fff2 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005200:	0004      	movs	r4, r0
 8005202:	f7ff fb4b 	bl	800489c <LL_RCC_GetAPB1Prescaler>
 8005206:	0003      	movs	r3, r0
 8005208:	0b1a      	lsrs	r2, r3, #12
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800520c:	0092      	lsls	r2, r2, #2
 800520e:	58d3      	ldr	r3, [r2, r3]
 8005210:	221f      	movs	r2, #31
 8005212:	4013      	ands	r3, r2
 8005214:	40dc      	lsrs	r4, r3
 8005216:	0023      	movs	r3, r4
}
 8005218:	0018      	movs	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	bdb0      	pop	{r4, r5, r7, pc}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	0800c734 	.word	0x0800c734

08005224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800522c:	2313      	movs	r3, #19
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005234:	2312      	movs	r3, #18
 8005236:	18fb      	adds	r3, r7, r3
 8005238:	2200      	movs	r2, #0
 800523a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	029b      	lsls	r3, r3, #10
 8005244:	4013      	ands	r3, r2
 8005246:	d100      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005248:	e0a3      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524a:	2011      	movs	r0, #17
 800524c:	183b      	adds	r3, r7, r0
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005252:	4b86      	ldr	r3, [pc, #536]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	055b      	lsls	r3, r3, #21
 800525a:	4013      	ands	r3, r2
 800525c:	d110      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525e:	4b83      	ldr	r3, [pc, #524]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005262:	4b82      	ldr	r3, [pc, #520]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005264:	2180      	movs	r1, #128	; 0x80
 8005266:	0549      	lsls	r1, r1, #21
 8005268:	430a      	orrs	r2, r1
 800526a:	63da      	str	r2, [r3, #60]	; 0x3c
 800526c:	4b7f      	ldr	r3, [pc, #508]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800526e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	055b      	lsls	r3, r3, #21
 8005274:	4013      	ands	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527a:	183b      	adds	r3, r7, r0
 800527c:	2201      	movs	r2, #1
 800527e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005280:	4b7b      	ldr	r3, [pc, #492]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4b7a      	ldr	r3, [pc, #488]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	0049      	lsls	r1, r1, #1
 800528a:	430a      	orrs	r2, r1
 800528c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800528e:	f7fe ff75 	bl	800417c <HAL_GetTick>
 8005292:	0003      	movs	r3, r0
 8005294:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005296:	e00b      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005298:	f7fe ff70 	bl	800417c <HAL_GetTick>
 800529c:	0002      	movs	r2, r0
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d904      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80052a6:	2313      	movs	r3, #19
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	2203      	movs	r2, #3
 80052ac:	701a      	strb	r2, [r3, #0]
        break;
 80052ae:	e005      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052b0:	4b6f      	ldr	r3, [pc, #444]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	4013      	ands	r3, r2
 80052ba:	d0ed      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80052bc:	2313      	movs	r3, #19
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d154      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052c6:	4b69      	ldr	r3, [pc, #420]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ca:	23c0      	movs	r3, #192	; 0xc0
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4013      	ands	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d019      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d014      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052e2:	4b62      	ldr	r3, [pc, #392]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e6:	4a63      	ldr	r2, [pc, #396]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052ec:	4b5f      	ldr	r3, [pc, #380]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052f0:	4b5e      	ldr	r3, [pc, #376]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052f2:	2180      	movs	r1, #128	; 0x80
 80052f4:	0249      	lsls	r1, r1, #9
 80052f6:	430a      	orrs	r2, r1
 80052f8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052fa:	4b5c      	ldr	r3, [pc, #368]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052fe:	4b5b      	ldr	r3, [pc, #364]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005300:	495d      	ldr	r1, [pc, #372]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005302:	400a      	ands	r2, r1
 8005304:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005306:	4b59      	ldr	r3, [pc, #356]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2201      	movs	r2, #1
 8005310:	4013      	ands	r3, r2
 8005312:	d016      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fe ff32 	bl	800417c <HAL_GetTick>
 8005318:	0003      	movs	r3, r0
 800531a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531c:	e00c      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800531e:	f7fe ff2d 	bl	800417c <HAL_GetTick>
 8005322:	0002      	movs	r2, r0
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	4a54      	ldr	r2, [pc, #336]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d904      	bls.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800532e:	2313      	movs	r3, #19
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	2203      	movs	r2, #3
 8005334:	701a      	strb	r2, [r3, #0]
            break;
 8005336:	e004      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005338:	4b4c      	ldr	r3, [pc, #304]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800533a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533c:	2202      	movs	r2, #2
 800533e:	4013      	ands	r3, r2
 8005340:	d0ed      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005342:	2313      	movs	r3, #19
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800534c:	4b47      	ldr	r3, [pc, #284]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	4a48      	ldr	r2, [pc, #288]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005352:	4013      	ands	r3, r2
 8005354:	0019      	movs	r1, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	4b44      	ldr	r3, [pc, #272]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800535c:	430a      	orrs	r2, r1
 800535e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005360:	e00c      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005362:	2312      	movs	r3, #18
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	2213      	movs	r2, #19
 8005368:	18ba      	adds	r2, r7, r2
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	e005      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	2312      	movs	r3, #18
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	2213      	movs	r2, #19
 8005376:	18ba      	adds	r2, r7, r2
 8005378:	7812      	ldrb	r2, [r2, #0]
 800537a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800537c:	2311      	movs	r3, #17
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d105      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005386:	4b39      	ldr	r3, [pc, #228]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800538a:	4b38      	ldr	r3, [pc, #224]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800538c:	493c      	ldr	r1, [pc, #240]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800538e:	400a      	ands	r2, r1
 8005390:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2201      	movs	r2, #1
 8005398:	4013      	ands	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800539c:	4b33      	ldr	r3, [pc, #204]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800539e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a0:	2203      	movs	r2, #3
 80053a2:	4393      	bics	r3, r2
 80053a4:	0019      	movs	r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4b30      	ldr	r3, [pc, #192]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ac:	430a      	orrs	r2, r1
 80053ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2202      	movs	r2, #2
 80053b6:	4013      	ands	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ba:	4b2c      	ldr	r3, [pc, #176]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	220c      	movs	r2, #12
 80053c0:	4393      	bics	r3, r2
 80053c2:	0019      	movs	r1, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	4b28      	ldr	r3, [pc, #160]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ca:	430a      	orrs	r2, r1
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2220      	movs	r2, #32
 80053d4:	4013      	ands	r3, r2
 80053d6:	d009      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053d8:	4b24      	ldr	r3, [pc, #144]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053dc:	4a29      	ldr	r2, [pc, #164]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053de:	4013      	ands	r3, r2
 80053e0:	0019      	movs	r1, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	4b21      	ldr	r3, [pc, #132]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053e8:	430a      	orrs	r2, r1
 80053ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	2380      	movs	r3, #128	; 0x80
 80053f2:	01db      	lsls	r3, r3, #7
 80053f4:	4013      	ands	r3, r2
 80053f6:	d015      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053f8:	4b1c      	ldr	r3, [pc, #112]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	0899      	lsrs	r1, r3, #2
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695a      	ldr	r2, [r3, #20]
 8005404:	4b19      	ldr	r3, [pc, #100]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005406:	430a      	orrs	r2, r1
 8005408:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	05db      	lsls	r3, r3, #23
 8005412:	429a      	cmp	r2, r3
 8005414:	d106      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005416:	4b15      	ldr	r3, [pc, #84]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	4b14      	ldr	r3, [pc, #80]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	0249      	lsls	r1, r1, #9
 8005420:	430a      	orrs	r2, r1
 8005422:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	4013      	ands	r3, r2
 800542e:	d016      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	4a14      	ldr	r2, [pc, #80]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005436:	4013      	ands	r3, r2
 8005438:	0019      	movs	r1, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005440:	430a      	orrs	r2, r1
 8005442:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	01db      	lsls	r3, r3, #7
 800544c:	429a      	cmp	r2, r3
 800544e:	d106      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005450:	4b06      	ldr	r3, [pc, #24]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005456:	2180      	movs	r1, #128	; 0x80
 8005458:	0249      	lsls	r1, r1, #9
 800545a:	430a      	orrs	r2, r1
 800545c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800545e:	2312      	movs	r3, #18
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	781b      	ldrb	r3, [r3, #0]
}
 8005464:	0018      	movs	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	b006      	add	sp, #24
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	40007000 	.word	0x40007000
 8005474:	fffffcff 	.word	0xfffffcff
 8005478:	fffeffff 	.word	0xfffeffff
 800547c:	00001388 	.word	0x00001388
 8005480:	efffffff 	.word	0xefffffff
 8005484:	ffffcfff 	.word	0xffffcfff
 8005488:	ffff3fff 	.word	0xffff3fff

0800548c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e04a      	b.n	8005534 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	223d      	movs	r2, #61	; 0x3d
 80054a2:	5c9b      	ldrb	r3, [r3, r2]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d107      	bne.n	80054ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	223c      	movs	r2, #60	; 0x3c
 80054ae:	2100      	movs	r1, #0
 80054b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7fe fc03 	bl	8003cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	223d      	movs	r2, #61	; 0x3d
 80054be:	2102      	movs	r1, #2
 80054c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3304      	adds	r3, #4
 80054ca:	0019      	movs	r1, r3
 80054cc:	0010      	movs	r0, r2
 80054ce:	f000 fecf 	bl	8006270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2248      	movs	r2, #72	; 0x48
 80054d6:	2101      	movs	r1, #1
 80054d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	223e      	movs	r2, #62	; 0x3e
 80054de:	2101      	movs	r1, #1
 80054e0:	5499      	strb	r1, [r3, r2]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	223f      	movs	r2, #63	; 0x3f
 80054e6:	2101      	movs	r1, #1
 80054e8:	5499      	strb	r1, [r3, r2]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2240      	movs	r2, #64	; 0x40
 80054ee:	2101      	movs	r1, #1
 80054f0:	5499      	strb	r1, [r3, r2]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2241      	movs	r2, #65	; 0x41
 80054f6:	2101      	movs	r1, #1
 80054f8:	5499      	strb	r1, [r3, r2]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2242      	movs	r2, #66	; 0x42
 80054fe:	2101      	movs	r1, #1
 8005500:	5499      	strb	r1, [r3, r2]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2243      	movs	r2, #67	; 0x43
 8005506:	2101      	movs	r1, #1
 8005508:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2244      	movs	r2, #68	; 0x44
 800550e:	2101      	movs	r1, #1
 8005510:	5499      	strb	r1, [r3, r2]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2245      	movs	r2, #69	; 0x45
 8005516:	2101      	movs	r1, #1
 8005518:	5499      	strb	r1, [r3, r2]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2246      	movs	r2, #70	; 0x46
 800551e:	2101      	movs	r1, #1
 8005520:	5499      	strb	r1, [r3, r2]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2247      	movs	r2, #71	; 0x47
 8005526:	2101      	movs	r1, #1
 8005528:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	223d      	movs	r2, #61	; 0x3d
 800552e:	2101      	movs	r1, #1
 8005530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	0018      	movs	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	b002      	add	sp, #8
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	223d      	movs	r2, #61	; 0x3d
 8005548:	5c9b      	ldrb	r3, [r3, r2]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	d001      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e03c      	b.n	80055ce <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	223d      	movs	r2, #61	; 0x3d
 8005558:	2102      	movs	r1, #2
 800555a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2101      	movs	r1, #1
 8005568:	430a      	orrs	r2, r1
 800556a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d009      	beq.n	800558a <HAL_TIM_Base_Start_IT+0x4e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a18      	ldr	r2, [pc, #96]	; (80055dc <HAL_TIM_Base_Start_IT+0xa0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d004      	beq.n	800558a <HAL_TIM_Base_Start_IT+0x4e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a16      	ldr	r2, [pc, #88]	; (80055e0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d116      	bne.n	80055b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005592:	4013      	ands	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b06      	cmp	r3, #6
 800559a:	d016      	beq.n	80055ca <HAL_TIM_Base_Start_IT+0x8e>
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	2380      	movs	r3, #128	; 0x80
 80055a0:	025b      	lsls	r3, r3, #9
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d011      	beq.n	80055ca <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2101      	movs	r1, #1
 80055b2:	430a      	orrs	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b6:	e008      	b.n	80055ca <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2101      	movs	r1, #1
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	e000      	b.n	80055cc <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ca:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	0018      	movs	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b004      	add	sp, #16
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40000400 	.word	0x40000400
 80055e0:	40014000 	.word	0x40014000
 80055e4:	00010007 	.word	0x00010007

080055e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e04a      	b.n	8005690 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	223d      	movs	r2, #61	; 0x3d
 80055fe:	5c9b      	ldrb	r3, [r3, r2]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d107      	bne.n	8005616 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	223c      	movs	r2, #60	; 0x3c
 800560a:	2100      	movs	r1, #0
 800560c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0018      	movs	r0, r3
 8005612:	f000 f841 	bl	8005698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	223d      	movs	r2, #61	; 0x3d
 800561a:	2102      	movs	r1, #2
 800561c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	0019      	movs	r1, r3
 8005628:	0010      	movs	r0, r2
 800562a:	f000 fe21 	bl	8006270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2248      	movs	r2, #72	; 0x48
 8005632:	2101      	movs	r1, #1
 8005634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	223e      	movs	r2, #62	; 0x3e
 800563a:	2101      	movs	r1, #1
 800563c:	5499      	strb	r1, [r3, r2]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	223f      	movs	r2, #63	; 0x3f
 8005642:	2101      	movs	r1, #1
 8005644:	5499      	strb	r1, [r3, r2]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2240      	movs	r2, #64	; 0x40
 800564a:	2101      	movs	r1, #1
 800564c:	5499      	strb	r1, [r3, r2]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2241      	movs	r2, #65	; 0x41
 8005652:	2101      	movs	r1, #1
 8005654:	5499      	strb	r1, [r3, r2]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2242      	movs	r2, #66	; 0x42
 800565a:	2101      	movs	r1, #1
 800565c:	5499      	strb	r1, [r3, r2]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2243      	movs	r2, #67	; 0x43
 8005662:	2101      	movs	r1, #1
 8005664:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2244      	movs	r2, #68	; 0x44
 800566a:	2101      	movs	r1, #1
 800566c:	5499      	strb	r1, [r3, r2]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2245      	movs	r2, #69	; 0x45
 8005672:	2101      	movs	r1, #1
 8005674:	5499      	strb	r1, [r3, r2]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2246      	movs	r2, #70	; 0x46
 800567a:	2101      	movs	r1, #1
 800567c:	5499      	strb	r1, [r3, r2]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2247      	movs	r2, #71	; 0x47
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	223d      	movs	r2, #61	; 0x3d
 800568a:	2101      	movs	r1, #1
 800568c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	0018      	movs	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	b002      	add	sp, #8
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056a0:	46c0      	nop			; (mov r8, r8)
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b002      	add	sp, #8
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d108      	bne.n	80056ca <HAL_TIM_PWM_Start+0x22>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	223e      	movs	r2, #62	; 0x3e
 80056bc:	5c9b      	ldrb	r3, [r3, r2]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	1e5a      	subs	r2, r3, #1
 80056c4:	4193      	sbcs	r3, r2
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	e037      	b.n	800573a <HAL_TIM_PWM_Start+0x92>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d108      	bne.n	80056e2 <HAL_TIM_PWM_Start+0x3a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	223f      	movs	r2, #63	; 0x3f
 80056d4:	5c9b      	ldrb	r3, [r3, r2]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	4193      	sbcs	r3, r2
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e02b      	b.n	800573a <HAL_TIM_PWM_Start+0x92>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d108      	bne.n	80056fa <HAL_TIM_PWM_Start+0x52>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	5c9b      	ldrb	r3, [r3, r2]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	1e5a      	subs	r2, r3, #1
 80056f4:	4193      	sbcs	r3, r2
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	e01f      	b.n	800573a <HAL_TIM_PWM_Start+0x92>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b0c      	cmp	r3, #12
 80056fe:	d108      	bne.n	8005712 <HAL_TIM_PWM_Start+0x6a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2241      	movs	r2, #65	; 0x41
 8005704:	5c9b      	ldrb	r3, [r3, r2]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	1e5a      	subs	r2, r3, #1
 800570c:	4193      	sbcs	r3, r2
 800570e:	b2db      	uxtb	r3, r3
 8005710:	e013      	b.n	800573a <HAL_TIM_PWM_Start+0x92>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b10      	cmp	r3, #16
 8005716:	d108      	bne.n	800572a <HAL_TIM_PWM_Start+0x82>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2242      	movs	r2, #66	; 0x42
 800571c:	5c9b      	ldrb	r3, [r3, r2]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	4193      	sbcs	r3, r2
 8005726:	b2db      	uxtb	r3, r3
 8005728:	e007      	b.n	800573a <HAL_TIM_PWM_Start+0x92>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2243      	movs	r2, #67	; 0x43
 800572e:	5c9b      	ldrb	r3, [r3, r2]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	1e5a      	subs	r2, r3, #1
 8005736:	4193      	sbcs	r3, r2
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e085      	b.n	800584e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <HAL_TIM_PWM_Start+0xaa>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	223e      	movs	r2, #62	; 0x3e
 800574c:	2102      	movs	r1, #2
 800574e:	5499      	strb	r1, [r3, r2]
 8005750:	e023      	b.n	800579a <HAL_TIM_PWM_Start+0xf2>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d104      	bne.n	8005762 <HAL_TIM_PWM_Start+0xba>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	223f      	movs	r2, #63	; 0x3f
 800575c:	2102      	movs	r1, #2
 800575e:	5499      	strb	r1, [r3, r2]
 8005760:	e01b      	b.n	800579a <HAL_TIM_PWM_Start+0xf2>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d104      	bne.n	8005772 <HAL_TIM_PWM_Start+0xca>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2240      	movs	r2, #64	; 0x40
 800576c:	2102      	movs	r1, #2
 800576e:	5499      	strb	r1, [r3, r2]
 8005770:	e013      	b.n	800579a <HAL_TIM_PWM_Start+0xf2>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b0c      	cmp	r3, #12
 8005776:	d104      	bne.n	8005782 <HAL_TIM_PWM_Start+0xda>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2241      	movs	r2, #65	; 0x41
 800577c:	2102      	movs	r1, #2
 800577e:	5499      	strb	r1, [r3, r2]
 8005780:	e00b      	b.n	800579a <HAL_TIM_PWM_Start+0xf2>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b10      	cmp	r3, #16
 8005786:	d104      	bne.n	8005792 <HAL_TIM_PWM_Start+0xea>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2242      	movs	r2, #66	; 0x42
 800578c:	2102      	movs	r1, #2
 800578e:	5499      	strb	r1, [r3, r2]
 8005790:	e003      	b.n	800579a <HAL_TIM_PWM_Start+0xf2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2243      	movs	r2, #67	; 0x43
 8005796:	2102      	movs	r1, #2
 8005798:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	2201      	movs	r2, #1
 80057a2:	0018      	movs	r0, r3
 80057a4:	f001 f93a 	bl	8006a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a2a      	ldr	r2, [pc, #168]	; (8005858 <HAL_TIM_PWM_Start+0x1b0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00e      	beq.n	80057d0 <HAL_TIM_PWM_Start+0x128>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a29      	ldr	r2, [pc, #164]	; (800585c <HAL_TIM_PWM_Start+0x1b4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_TIM_PWM_Start+0x128>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <HAL_TIM_PWM_Start+0x1b8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_TIM_PWM_Start+0x128>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a26      	ldr	r2, [pc, #152]	; (8005864 <HAL_TIM_PWM_Start+0x1bc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d101      	bne.n	80057d4 <HAL_TIM_PWM_Start+0x12c>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <HAL_TIM_PWM_Start+0x12e>
 80057d4:	2300      	movs	r3, #0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2180      	movs	r1, #128	; 0x80
 80057e6:	0209      	lsls	r1, r1, #8
 80057e8:	430a      	orrs	r2, r1
 80057ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a19      	ldr	r2, [pc, #100]	; (8005858 <HAL_TIM_PWM_Start+0x1b0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_TIM_PWM_Start+0x162>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <HAL_TIM_PWM_Start+0x1c0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_TIM_PWM_Start+0x162>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a15      	ldr	r2, [pc, #84]	; (800585c <HAL_TIM_PWM_Start+0x1b4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d116      	bne.n	8005838 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4a16      	ldr	r2, [pc, #88]	; (800586c <HAL_TIM_PWM_Start+0x1c4>)
 8005812:	4013      	ands	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b06      	cmp	r3, #6
 800581a:	d016      	beq.n	800584a <HAL_TIM_PWM_Start+0x1a2>
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	025b      	lsls	r3, r3, #9
 8005822:	429a      	cmp	r2, r3
 8005824:	d011      	beq.n	800584a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2101      	movs	r1, #1
 8005832:	430a      	orrs	r2, r1
 8005834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005836:	e008      	b.n	800584a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2101      	movs	r1, #1
 8005844:	430a      	orrs	r2, r1
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	e000      	b.n	800584c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b004      	add	sp, #16
 8005854:	bd80      	pop	{r7, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800
 8005868:	40000400 	.word	0x40000400
 800586c:	00010007 	.word	0x00010007

08005870 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	2200      	movs	r2, #0
 8005882:	0018      	movs	r0, r3
 8005884:	f001 f8ca 	bl	8006a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a37      	ldr	r2, [pc, #220]	; (800596c <HAL_TIM_PWM_Stop+0xfc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00e      	beq.n	80058b0 <HAL_TIM_PWM_Stop+0x40>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a36      	ldr	r2, [pc, #216]	; (8005970 <HAL_TIM_PWM_Stop+0x100>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d009      	beq.n	80058b0 <HAL_TIM_PWM_Stop+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a34      	ldr	r2, [pc, #208]	; (8005974 <HAL_TIM_PWM_Stop+0x104>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d004      	beq.n	80058b0 <HAL_TIM_PWM_Stop+0x40>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a33      	ldr	r2, [pc, #204]	; (8005978 <HAL_TIM_PWM_Stop+0x108>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d101      	bne.n	80058b4 <HAL_TIM_PWM_Stop+0x44>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <HAL_TIM_PWM_Stop+0x46>
 80058b4:	2300      	movs	r3, #0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d013      	beq.n	80058e2 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	4a2e      	ldr	r2, [pc, #184]	; (800597c <HAL_TIM_PWM_Stop+0x10c>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	d10d      	bne.n	80058e2 <HAL_TIM_PWM_Stop+0x72>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <HAL_TIM_PWM_Stop+0x110>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	d107      	bne.n	80058e2 <HAL_TIM_PWM_Stop+0x72>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4929      	ldr	r1, [pc, #164]	; (8005984 <HAL_TIM_PWM_Stop+0x114>)
 80058de:	400a      	ands	r2, r1
 80058e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	4a24      	ldr	r2, [pc, #144]	; (800597c <HAL_TIM_PWM_Stop+0x10c>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	d10d      	bne.n	800590a <HAL_TIM_PWM_Stop+0x9a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	4a22      	ldr	r2, [pc, #136]	; (8005980 <HAL_TIM_PWM_Stop+0x110>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	d107      	bne.n	800590a <HAL_TIM_PWM_Stop+0x9a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2101      	movs	r1, #1
 8005906:	438a      	bics	r2, r1
 8005908:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Stop+0xaa>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	223e      	movs	r2, #62	; 0x3e
 8005914:	2101      	movs	r1, #1
 8005916:	5499      	strb	r1, [r3, r2]
 8005918:	e023      	b.n	8005962 <HAL_TIM_PWM_Stop+0xf2>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d104      	bne.n	800592a <HAL_TIM_PWM_Stop+0xba>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	223f      	movs	r2, #63	; 0x3f
 8005924:	2101      	movs	r1, #1
 8005926:	5499      	strb	r1, [r3, r2]
 8005928:	e01b      	b.n	8005962 <HAL_TIM_PWM_Stop+0xf2>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d104      	bne.n	800593a <HAL_TIM_PWM_Stop+0xca>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2240      	movs	r2, #64	; 0x40
 8005934:	2101      	movs	r1, #1
 8005936:	5499      	strb	r1, [r3, r2]
 8005938:	e013      	b.n	8005962 <HAL_TIM_PWM_Stop+0xf2>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b0c      	cmp	r3, #12
 800593e:	d104      	bne.n	800594a <HAL_TIM_PWM_Stop+0xda>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2241      	movs	r2, #65	; 0x41
 8005944:	2101      	movs	r1, #1
 8005946:	5499      	strb	r1, [r3, r2]
 8005948:	e00b      	b.n	8005962 <HAL_TIM_PWM_Stop+0xf2>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b10      	cmp	r3, #16
 800594e:	d104      	bne.n	800595a <HAL_TIM_PWM_Stop+0xea>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2242      	movs	r2, #66	; 0x42
 8005954:	2101      	movs	r1, #1
 8005956:	5499      	strb	r1, [r3, r2]
 8005958:	e003      	b.n	8005962 <HAL_TIM_PWM_Stop+0xf2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2243      	movs	r2, #67	; 0x43
 800595e:	2101      	movs	r1, #1
 8005960:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	0018      	movs	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	b002      	add	sp, #8
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40014000 	.word	0x40014000
 8005974:	40014400 	.word	0x40014400
 8005978:	40014800 	.word	0x40014800
 800597c:	00001111 	.word	0x00001111
 8005980:	00000444 	.word	0x00000444
 8005984:	ffff7fff 	.word	0xffff7fff

08005988 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e090      	b.n	8005abe <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	223d      	movs	r2, #61	; 0x3d
 80059a0:	5c9b      	ldrb	r3, [r3, r2]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d107      	bne.n	80059b8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	223c      	movs	r2, #60	; 0x3c
 80059ac:	2100      	movs	r1, #0
 80059ae:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	0018      	movs	r0, r3
 80059b4:	f7fe f8f0 	bl	8003b98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	223d      	movs	r2, #61	; 0x3d
 80059bc:	2102      	movs	r1, #2
 80059be:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	493f      	ldr	r1, [pc, #252]	; (8005ac8 <HAL_TIM_Encoder_Init+0x140>)
 80059cc:	400a      	ands	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	0019      	movs	r1, r3
 80059da:	0010      	movs	r0, r2
 80059dc:	f000 fc48 	bl	8006270 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4a31      	ldr	r2, [pc, #196]	; (8005acc <HAL_TIM_Encoder_Init+0x144>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	4313      	orrs	r3, r2
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4a2c      	ldr	r2, [pc, #176]	; (8005ad0 <HAL_TIM_Encoder_Init+0x148>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <HAL_TIM_Encoder_Init+0x14c>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	4313      	orrs	r3, r2
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	011a      	lsls	r2, r3, #4
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	031b      	lsls	r3, r3, #12
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2222      	movs	r2, #34	; 0x22
 8005a56:	4393      	bics	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2288      	movs	r2, #136	; 0x88
 8005a5e:	4393      	bics	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2248      	movs	r2, #72	; 0x48
 8005a90:	2101      	movs	r1, #1
 8005a92:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	223e      	movs	r2, #62	; 0x3e
 8005a98:	2101      	movs	r1, #1
 8005a9a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	223f      	movs	r2, #63	; 0x3f
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2244      	movs	r2, #68	; 0x44
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2245      	movs	r2, #69	; 0x45
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	223d      	movs	r2, #61	; 0x3d
 8005ab8:	2101      	movs	r1, #1
 8005aba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	0018      	movs	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b006      	add	sp, #24
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	fffebff8 	.word	0xfffebff8
 8005acc:	fffffcfc 	.word	0xfffffcfc
 8005ad0:	fffff3f3 	.word	0xfffff3f3
 8005ad4:	ffff0f0f 	.word	0xffff0f0f

08005ad8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ae2:	200f      	movs	r0, #15
 8005ae4:	183b      	adds	r3, r7, r0
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	213e      	movs	r1, #62	; 0x3e
 8005aea:	5c52      	ldrb	r2, [r2, r1]
 8005aec:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005aee:	230e      	movs	r3, #14
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	213f      	movs	r1, #63	; 0x3f
 8005af6:	5c52      	ldrb	r2, [r2, r1]
 8005af8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005afa:	240d      	movs	r4, #13
 8005afc:	193b      	adds	r3, r7, r4
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	2144      	movs	r1, #68	; 0x44
 8005b02:	5c52      	ldrb	r2, [r2, r1]
 8005b04:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b06:	230c      	movs	r3, #12
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	2145      	movs	r1, #69	; 0x45
 8005b0e:	5c52      	ldrb	r2, [r2, r1]
 8005b10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d112      	bne.n	8005b3e <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b18:	183b      	adds	r3, r7, r0
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d103      	bne.n	8005b28 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b20:	193b      	adds	r3, r7, r4
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d001      	beq.n	8005b2c <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e075      	b.n	8005c18 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	223e      	movs	r2, #62	; 0x3e
 8005b30:	2102      	movs	r1, #2
 8005b32:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2244      	movs	r2, #68	; 0x44
 8005b38:	2102      	movs	r1, #2
 8005b3a:	5499      	strb	r1, [r3, r2]
 8005b3c:	e03d      	b.n	8005bba <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d114      	bne.n	8005b6e <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b44:	230e      	movs	r3, #14
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d104      	bne.n	8005b58 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b4e:	230c      	movs	r3, #12
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d001      	beq.n	8005b5c <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e05d      	b.n	8005c18 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	223f      	movs	r2, #63	; 0x3f
 8005b60:	2102      	movs	r1, #2
 8005b62:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2245      	movs	r2, #69	; 0x45
 8005b68:	2102      	movs	r1, #2
 8005b6a:	5499      	strb	r1, [r3, r2]
 8005b6c:	e025      	b.n	8005bba <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b6e:	230f      	movs	r3, #15
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10e      	bne.n	8005b96 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b78:	230e      	movs	r3, #14
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d109      	bne.n	8005b96 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b82:	230d      	movs	r3, #13
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b8c:	230c      	movs	r3, #12
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d001      	beq.n	8005b9a <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e03e      	b.n	8005c18 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	223e      	movs	r2, #62	; 0x3e
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	223f      	movs	r2, #63	; 0x3f
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2244      	movs	r2, #68	; 0x44
 8005bae:	2102      	movs	r1, #2
 8005bb0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2245      	movs	r2, #69	; 0x45
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_TIM_Encoder_Start+0xf0>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d008      	beq.n	8005bd8 <HAL_TIM_Encoder_Start+0x100>
 8005bc6:	e00f      	b.n	8005be8 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	2100      	movs	r1, #0
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f000 ff23 	bl	8006a1c <TIM_CCxChannelCmd>
      break;
 8005bd6:	e016      	b.n	8005c06 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	2104      	movs	r1, #4
 8005be0:	0018      	movs	r0, r3
 8005be2:	f000 ff1b 	bl	8006a1c <TIM_CCxChannelCmd>
      break;
 8005be6:	e00e      	b.n	8005c06 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2201      	movs	r2, #1
 8005bee:	2100      	movs	r1, #0
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f000 ff13 	bl	8006a1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	2104      	movs	r1, #4
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f000 ff0c 	bl	8006a1c <TIM_CCxChannelCmd>
      break;
 8005c04:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2101      	movs	r1, #1
 8005c12:	430a      	orrs	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	0018      	movs	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b005      	add	sp, #20
 8005c1e:	bd90      	pop	{r4, r7, pc}

08005c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d124      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d11d      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2203      	movs	r2, #3
 8005c4a:	4252      	negs	r2, r2
 8005c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	0018      	movs	r0, r3
 8005c64:	f000 faec 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005c68:	e007      	b.n	8005c7a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 fadf 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	0018      	movs	r0, r3
 8005c76:	f000 faeb 	bl	8006250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2204      	movs	r2, #4
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d125      	bne.n	8005cda <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	2204      	movs	r2, #4
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d11e      	bne.n	8005cda <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2205      	movs	r2, #5
 8005ca2:	4252      	negs	r2, r2
 8005ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	23c0      	movs	r3, #192	; 0xc0
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f000 fabf 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005cc2:	e007      	b.n	8005cd4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f000 fab2 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f000 fabe 	bl	8006250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d124      	bne.n	8005d32 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2208      	movs	r2, #8
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d11d      	bne.n	8005d32 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2209      	movs	r2, #9
 8005cfc:	4252      	negs	r2, r2
 8005cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2204      	movs	r2, #4
 8005d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	0018      	movs	r0, r3
 8005d16:	f000 fa93 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005d1a:	e007      	b.n	8005d2c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f000 fa86 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	0018      	movs	r0, r3
 8005d28:	f000 fa92 	bl	8006250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2210      	movs	r2, #16
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d125      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2210      	movs	r2, #16
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d11e      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2211      	movs	r2, #17
 8005d54:	4252      	negs	r2, r2
 8005d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	23c0      	movs	r3, #192	; 0xc0
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f000 fa66 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005d74:	e007      	b.n	8005d86 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 fa59 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f000 fa65 	bl	8006250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2201      	movs	r2, #1
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d10f      	bne.n	8005dba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d108      	bne.n	8005dba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2202      	movs	r2, #2
 8005dae:	4252      	negs	r2, r2
 8005db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f003 f9ff 	bl	80091b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2280      	movs	r2, #128	; 0x80
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d10f      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	2280      	movs	r2, #128	; 0x80
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b80      	cmp	r3, #128	; 0x80
 8005dd4:	d108      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2281      	movs	r2, #129	; 0x81
 8005ddc:	4252      	negs	r2, r2
 8005dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f000 ff54 	bl	8006c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	401a      	ands	r2, r3
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d10e      	bne.n	8005e1a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2280      	movs	r2, #128	; 0x80
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b80      	cmp	r3, #128	; 0x80
 8005e08:	d107      	bne.n	8005e1a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1c      	ldr	r2, [pc, #112]	; (8005e80 <HAL_TIM_IRQHandler+0x260>)
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f000 ff43 	bl	8006ca0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2240      	movs	r2, #64	; 0x40
 8005e22:	4013      	ands	r3, r2
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d10f      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	2240      	movs	r2, #64	; 0x40
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	d108      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2241      	movs	r2, #65	; 0x41
 8005e3c:	4252      	negs	r2, r2
 8005e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	0018      	movs	r0, r3
 8005e44:	f000 fa0c 	bl	8006260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d10f      	bne.n	8005e76 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d108      	bne.n	8005e76 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2221      	movs	r2, #33	; 0x21
 8005e6a:	4252      	negs	r2, r2
 8005e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	0018      	movs	r0, r3
 8005e72:	f000 ff05 	bl	8006c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	b002      	add	sp, #8
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	fffffeff 	.word	0xfffffeff

08005e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e90:	2317      	movs	r3, #23
 8005e92:	18fb      	adds	r3, r7, r3
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	223c      	movs	r2, #60	; 0x3c
 8005e9c:	5c9b      	ldrb	r3, [r3, r2]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e0e5      	b.n	8006072 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	223c      	movs	r2, #60	; 0x3c
 8005eaa:	2101      	movs	r1, #1
 8005eac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b14      	cmp	r3, #20
 8005eb2:	d900      	bls.n	8005eb6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005eb4:	e0d1      	b.n	800605a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	009a      	lsls	r2, r3, #2
 8005eba:	4b70      	ldr	r3, [pc, #448]	; (800607c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005ebc:	18d3      	adds	r3, r2, r3
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	0011      	movs	r1, r2
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f000 fa46 	bl	800635c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2108      	movs	r1, #8
 8005edc:	430a      	orrs	r2, r1
 8005ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2104      	movs	r1, #4
 8005eec:	438a      	bics	r2, r1
 8005eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6999      	ldr	r1, [r3, #24]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	619a      	str	r2, [r3, #24]
      break;
 8005f02:	e0af      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	0011      	movs	r1, r2
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f000 faaf 	bl	8006470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699a      	ldr	r2, [r3, #24]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2180      	movs	r1, #128	; 0x80
 8005f1e:	0109      	lsls	r1, r1, #4
 8005f20:	430a      	orrs	r2, r1
 8005f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4954      	ldr	r1, [pc, #336]	; (8006080 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005f30:	400a      	ands	r2, r1
 8005f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6999      	ldr	r1, [r3, #24]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	021a      	lsls	r2, r3, #8
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	619a      	str	r2, [r3, #24]
      break;
 8005f48:	e08c      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	0011      	movs	r1, r2
 8005f52:	0018      	movs	r0, r3
 8005f54:	f000 fb10 	bl	8006578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69da      	ldr	r2, [r3, #28]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2108      	movs	r1, #8
 8005f64:	430a      	orrs	r2, r1
 8005f66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69da      	ldr	r2, [r3, #28]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2104      	movs	r1, #4
 8005f74:	438a      	bics	r2, r1
 8005f76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69d9      	ldr	r1, [r3, #28]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	61da      	str	r2, [r3, #28]
      break;
 8005f8a:	e06b      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	0011      	movs	r1, r2
 8005f94:	0018      	movs	r0, r3
 8005f96:	f000 fb77 	bl	8006688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	0109      	lsls	r1, r1, #4
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69da      	ldr	r2, [r3, #28]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4932      	ldr	r1, [pc, #200]	; (8006080 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005fb8:	400a      	ands	r2, r1
 8005fba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69d9      	ldr	r1, [r3, #28]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	021a      	lsls	r2, r3, #8
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	61da      	str	r2, [r3, #28]
      break;
 8005fd0:	e048      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0011      	movs	r1, r2
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f000 fbbe 	bl	800675c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2108      	movs	r1, #8
 8005fec:	430a      	orrs	r2, r1
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2104      	movs	r1, #4
 8005ffc:	438a      	bics	r2, r1
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006012:	e027      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	0011      	movs	r1, r2
 800601c:	0018      	movs	r0, r3
 800601e:	f000 fbfd 	bl	800681c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2180      	movs	r1, #128	; 0x80
 800602e:	0109      	lsls	r1, r1, #4
 8006030:	430a      	orrs	r2, r1
 8006032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4910      	ldr	r1, [pc, #64]	; (8006080 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006040:	400a      	ands	r2, r1
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	021a      	lsls	r2, r3, #8
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006058:	e004      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800605a:	2317      	movs	r3, #23
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	2201      	movs	r2, #1
 8006060:	701a      	strb	r2, [r3, #0]
      break;
 8006062:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	223c      	movs	r2, #60	; 0x3c
 8006068:	2100      	movs	r1, #0
 800606a:	5499      	strb	r1, [r3, r2]

  return status;
 800606c:	2317      	movs	r3, #23
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	781b      	ldrb	r3, [r3, #0]
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b006      	add	sp, #24
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	0800c754 	.word	0x0800c754
 8006080:	fffffbff 	.word	0xfffffbff

08006084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800608e:	230f      	movs	r3, #15
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	223c      	movs	r2, #60	; 0x3c
 800609a:	5c9b      	ldrb	r3, [r3, r2]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIM_ConfigClockSource+0x20>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0bc      	b.n	800621e <HAL_TIM_ConfigClockSource+0x19a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	223c      	movs	r2, #60	; 0x3c
 80060a8:	2101      	movs	r1, #1
 80060aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	223d      	movs	r2, #61	; 0x3d
 80060b0:	2102      	movs	r1, #2
 80060b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4a5a      	ldr	r2, [pc, #360]	; (8006228 <HAL_TIM_ConfigClockSource+0x1a4>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4a59      	ldr	r2, [pc, #356]	; (800622c <HAL_TIM_ConfigClockSource+0x1a8>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2280      	movs	r2, #128	; 0x80
 80060da:	0192      	lsls	r2, r2, #6
 80060dc:	4293      	cmp	r3, r2
 80060de:	d040      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0xde>
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	0192      	lsls	r2, r2, #6
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d900      	bls.n	80060ea <HAL_TIM_ConfigClockSource+0x66>
 80060e8:	e088      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x178>
 80060ea:	2280      	movs	r2, #128	; 0x80
 80060ec:	0152      	lsls	r2, r2, #5
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d100      	bne.n	80060f4 <HAL_TIM_ConfigClockSource+0x70>
 80060f2:	e088      	b.n	8006206 <HAL_TIM_ConfigClockSource+0x182>
 80060f4:	2280      	movs	r2, #128	; 0x80
 80060f6:	0152      	lsls	r2, r2, #5
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d900      	bls.n	80060fe <HAL_TIM_ConfigClockSource+0x7a>
 80060fc:	e07e      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x178>
 80060fe:	2b70      	cmp	r3, #112	; 0x70
 8006100:	d018      	beq.n	8006134 <HAL_TIM_ConfigClockSource+0xb0>
 8006102:	d900      	bls.n	8006106 <HAL_TIM_ConfigClockSource+0x82>
 8006104:	e07a      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x178>
 8006106:	2b60      	cmp	r3, #96	; 0x60
 8006108:	d04f      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x126>
 800610a:	d900      	bls.n	800610e <HAL_TIM_ConfigClockSource+0x8a>
 800610c:	e076      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x178>
 800610e:	2b50      	cmp	r3, #80	; 0x50
 8006110:	d03b      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x106>
 8006112:	d900      	bls.n	8006116 <HAL_TIM_ConfigClockSource+0x92>
 8006114:	e072      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x178>
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d057      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x146>
 800611a:	d900      	bls.n	800611e <HAL_TIM_ConfigClockSource+0x9a>
 800611c:	e06e      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x178>
 800611e:	2b30      	cmp	r3, #48	; 0x30
 8006120:	d063      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x166>
 8006122:	d86b      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x178>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d060      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x166>
 8006128:	d868      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x178>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d05d      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x166>
 800612e:	2b10      	cmp	r3, #16
 8006130:	d05b      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x166>
 8006132:	e063      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006144:	f000 fc4a 	bl	80069dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2277      	movs	r2, #119	; 0x77
 8006154:	4313      	orrs	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	609a      	str	r2, [r3, #8]
      break;
 8006160:	e052      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006172:	f000 fc33 	bl	80069dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2180      	movs	r1, #128	; 0x80
 8006182:	01c9      	lsls	r1, r1, #7
 8006184:	430a      	orrs	r2, r1
 8006186:	609a      	str	r2, [r3, #8]
      break;
 8006188:	e03e      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006196:	001a      	movs	r2, r3
 8006198:	f000 fba4 	bl	80068e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2150      	movs	r1, #80	; 0x50
 80061a2:	0018      	movs	r0, r3
 80061a4:	f000 fbfe 	bl	80069a4 <TIM_ITRx_SetConfig>
      break;
 80061a8:	e02e      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b6:	001a      	movs	r2, r3
 80061b8:	f000 fbc2 	bl	8006940 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2160      	movs	r1, #96	; 0x60
 80061c2:	0018      	movs	r0, r3
 80061c4:	f000 fbee 	bl	80069a4 <TIM_ITRx_SetConfig>
      break;
 80061c8:	e01e      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	001a      	movs	r2, r3
 80061d8:	f000 fb84 	bl	80068e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2140      	movs	r1, #64	; 0x40
 80061e2:	0018      	movs	r0, r3
 80061e4:	f000 fbde 	bl	80069a4 <TIM_ITRx_SetConfig>
      break;
 80061e8:	e00e      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	0019      	movs	r1, r3
 80061f4:	0010      	movs	r0, r2
 80061f6:	f000 fbd5 	bl	80069a4 <TIM_ITRx_SetConfig>
      break;
 80061fa:	e005      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80061fc:	230f      	movs	r3, #15
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	2201      	movs	r2, #1
 8006202:	701a      	strb	r2, [r3, #0]
      break;
 8006204:	e000      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006206:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	223d      	movs	r2, #61	; 0x3d
 800620c:	2101      	movs	r1, #1
 800620e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	223c      	movs	r2, #60	; 0x3c
 8006214:	2100      	movs	r1, #0
 8006216:	5499      	strb	r1, [r3, r2]

  return status;
 8006218:	230f      	movs	r3, #15
 800621a:	18fb      	adds	r3, r7, r3
 800621c:	781b      	ldrb	r3, [r3, #0]
}
 800621e:	0018      	movs	r0, r3
 8006220:	46bd      	mov	sp, r7
 8006222:	b004      	add	sp, #16
 8006224:	bd80      	pop	{r7, pc}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	ffceff88 	.word	0xffceff88
 800622c:	ffff00ff 	.word	0xffff00ff

08006230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006238:	46c0      	nop			; (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b002      	add	sp, #8
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006248:	46c0      	nop			; (mov r8, r8)
 800624a:	46bd      	mov	sp, r7
 800624c:	b002      	add	sp, #8
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006258:	46c0      	nop			; (mov r8, r8)
 800625a:	46bd      	mov	sp, r7
 800625c:	b002      	add	sp, #8
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006268:	46c0      	nop			; (mov r8, r8)
 800626a:	46bd      	mov	sp, r7
 800626c:	b002      	add	sp, #8
 800626e:	bd80      	pop	{r7, pc}

08006270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a2f      	ldr	r2, [pc, #188]	; (8006340 <TIM_Base_SetConfig+0xd0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_Base_SetConfig+0x20>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a2e      	ldr	r2, [pc, #184]	; (8006344 <TIM_Base_SetConfig+0xd4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d108      	bne.n	80062a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2270      	movs	r2, #112	; 0x70
 8006294:	4393      	bics	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a26      	ldr	r2, [pc, #152]	; (8006340 <TIM_Base_SetConfig+0xd0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <TIM_Base_SetConfig+0x62>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a25      	ldr	r2, [pc, #148]	; (8006344 <TIM_Base_SetConfig+0xd4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00f      	beq.n	80062d2 <TIM_Base_SetConfig+0x62>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a24      	ldr	r2, [pc, #144]	; (8006348 <TIM_Base_SetConfig+0xd8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00b      	beq.n	80062d2 <TIM_Base_SetConfig+0x62>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a23      	ldr	r2, [pc, #140]	; (800634c <TIM_Base_SetConfig+0xdc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d007      	beq.n	80062d2 <TIM_Base_SetConfig+0x62>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a22      	ldr	r2, [pc, #136]	; (8006350 <TIM_Base_SetConfig+0xe0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_Base_SetConfig+0x62>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a21      	ldr	r2, [pc, #132]	; (8006354 <TIM_Base_SetConfig+0xe4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d108      	bne.n	80062e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4a20      	ldr	r2, [pc, #128]	; (8006358 <TIM_Base_SetConfig+0xe8>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2280      	movs	r2, #128	; 0x80
 80062e8:	4393      	bics	r3, r2
 80062ea:	001a      	movs	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a0c      	ldr	r2, [pc, #48]	; (8006340 <TIM_Base_SetConfig+0xd0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00b      	beq.n	800632a <TIM_Base_SetConfig+0xba>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a0d      	ldr	r2, [pc, #52]	; (800634c <TIM_Base_SetConfig+0xdc>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d007      	beq.n	800632a <TIM_Base_SetConfig+0xba>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a0c      	ldr	r2, [pc, #48]	; (8006350 <TIM_Base_SetConfig+0xe0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d003      	beq.n	800632a <TIM_Base_SetConfig+0xba>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a0b      	ldr	r2, [pc, #44]	; (8006354 <TIM_Base_SetConfig+0xe4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d103      	bne.n	8006332 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	615a      	str	r2, [r3, #20]
}
 8006338:	46c0      	nop			; (mov r8, r8)
 800633a:	46bd      	mov	sp, r7
 800633c:	b004      	add	sp, #16
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40012c00 	.word	0x40012c00
 8006344:	40000400 	.word	0x40000400
 8006348:	40002000 	.word	0x40002000
 800634c:	40014000 	.word	0x40014000
 8006350:	40014400 	.word	0x40014400
 8006354:	40014800 	.word	0x40014800
 8006358:	fffffcff 	.word	0xfffffcff

0800635c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	2201      	movs	r2, #1
 800636c:	4393      	bics	r3, r2
 800636e:	001a      	movs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a32      	ldr	r2, [pc, #200]	; (8006454 <TIM_OC1_SetConfig+0xf8>)
 800638a:	4013      	ands	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2203      	movs	r2, #3
 8006392:	4393      	bics	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2202      	movs	r2, #2
 80063a4:	4393      	bics	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a28      	ldr	r2, [pc, #160]	; (8006458 <TIM_OC1_SetConfig+0xfc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00b      	beq.n	80063d2 <TIM_OC1_SetConfig+0x76>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a27      	ldr	r2, [pc, #156]	; (800645c <TIM_OC1_SetConfig+0x100>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d007      	beq.n	80063d2 <TIM_OC1_SetConfig+0x76>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a26      	ldr	r2, [pc, #152]	; (8006460 <TIM_OC1_SetConfig+0x104>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_OC1_SetConfig+0x76>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a25      	ldr	r2, [pc, #148]	; (8006464 <TIM_OC1_SetConfig+0x108>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d10c      	bne.n	80063ec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2208      	movs	r2, #8
 80063d6:	4393      	bics	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2204      	movs	r2, #4
 80063e8:	4393      	bics	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a1a      	ldr	r2, [pc, #104]	; (8006458 <TIM_OC1_SetConfig+0xfc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00b      	beq.n	800640c <TIM_OC1_SetConfig+0xb0>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a19      	ldr	r2, [pc, #100]	; (800645c <TIM_OC1_SetConfig+0x100>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d007      	beq.n	800640c <TIM_OC1_SetConfig+0xb0>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a18      	ldr	r2, [pc, #96]	; (8006460 <TIM_OC1_SetConfig+0x104>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_OC1_SetConfig+0xb0>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a17      	ldr	r2, [pc, #92]	; (8006464 <TIM_OC1_SetConfig+0x108>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d111      	bne.n	8006430 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4a16      	ldr	r2, [pc, #88]	; (8006468 <TIM_OC1_SetConfig+0x10c>)
 8006410:	4013      	ands	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	4a15      	ldr	r2, [pc, #84]	; (800646c <TIM_OC1_SetConfig+0x110>)
 8006418:	4013      	ands	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	46bd      	mov	sp, r7
 800644e:	b006      	add	sp, #24
 8006450:	bd80      	pop	{r7, pc}
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	fffeff8f 	.word	0xfffeff8f
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40014000 	.word	0x40014000
 8006460:	40014400 	.word	0x40014400
 8006464:	40014800 	.word	0x40014800
 8006468:	fffffeff 	.word	0xfffffeff
 800646c:	fffffdff 	.word	0xfffffdff

08006470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	2210      	movs	r2, #16
 8006480:	4393      	bics	r3, r2
 8006482:	001a      	movs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <TIM_OC2_SetConfig+0xe8>)
 800649e:	4013      	ands	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4a2d      	ldr	r2, [pc, #180]	; (800655c <TIM_OC2_SetConfig+0xec>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2220      	movs	r2, #32
 80064ba:	4393      	bics	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a24      	ldr	r2, [pc, #144]	; (8006560 <TIM_OC2_SetConfig+0xf0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d10d      	bne.n	80064ee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2280      	movs	r2, #128	; 0x80
 80064d6:	4393      	bics	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2240      	movs	r2, #64	; 0x40
 80064ea:	4393      	bics	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a1b      	ldr	r2, [pc, #108]	; (8006560 <TIM_OC2_SetConfig+0xf0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00b      	beq.n	800650e <TIM_OC2_SetConfig+0x9e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a1a      	ldr	r2, [pc, #104]	; (8006564 <TIM_OC2_SetConfig+0xf4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d007      	beq.n	800650e <TIM_OC2_SetConfig+0x9e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a19      	ldr	r2, [pc, #100]	; (8006568 <TIM_OC2_SetConfig+0xf8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d003      	beq.n	800650e <TIM_OC2_SetConfig+0x9e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a18      	ldr	r2, [pc, #96]	; (800656c <TIM_OC2_SetConfig+0xfc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d113      	bne.n	8006536 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	4a17      	ldr	r2, [pc, #92]	; (8006570 <TIM_OC2_SetConfig+0x100>)
 8006512:	4013      	ands	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4a16      	ldr	r2, [pc, #88]	; (8006574 <TIM_OC2_SetConfig+0x104>)
 800651a:	4013      	ands	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	621a      	str	r2, [r3, #32]
}
 8006550:	46c0      	nop			; (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b006      	add	sp, #24
 8006556:	bd80      	pop	{r7, pc}
 8006558:	feff8fff 	.word	0xfeff8fff
 800655c:	fffffcff 	.word	0xfffffcff
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800
 8006570:	fffffbff 	.word	0xfffffbff
 8006574:	fffff7ff 	.word	0xfffff7ff

08006578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	4a35      	ldr	r2, [pc, #212]	; (800665c <TIM_OC3_SetConfig+0xe4>)
 8006588:	401a      	ands	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a2f      	ldr	r2, [pc, #188]	; (8006660 <TIM_OC3_SetConfig+0xe8>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2203      	movs	r2, #3
 80065ac:	4393      	bics	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	4a29      	ldr	r2, [pc, #164]	; (8006664 <TIM_OC3_SetConfig+0xec>)
 80065be:	4013      	ands	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a25      	ldr	r2, [pc, #148]	; (8006668 <TIM_OC3_SetConfig+0xf0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d10d      	bne.n	80065f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	4a24      	ldr	r2, [pc, #144]	; (800666c <TIM_OC3_SetConfig+0xf4>)
 80065da:	4013      	ands	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	4a20      	ldr	r2, [pc, #128]	; (8006670 <TIM_OC3_SetConfig+0xf8>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1c      	ldr	r2, [pc, #112]	; (8006668 <TIM_OC3_SetConfig+0xf0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00b      	beq.n	8006612 <TIM_OC3_SetConfig+0x9a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <TIM_OC3_SetConfig+0xfc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d007      	beq.n	8006612 <TIM_OC3_SetConfig+0x9a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <TIM_OC3_SetConfig+0x100>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_OC3_SetConfig+0x9a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1b      	ldr	r2, [pc, #108]	; (800667c <TIM_OC3_SetConfig+0x104>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d113      	bne.n	800663a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	4a1a      	ldr	r2, [pc, #104]	; (8006680 <TIM_OC3_SetConfig+0x108>)
 8006616:	4013      	ands	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4a19      	ldr	r2, [pc, #100]	; (8006684 <TIM_OC3_SetConfig+0x10c>)
 800661e:	4013      	ands	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	621a      	str	r2, [r3, #32]
}
 8006654:	46c0      	nop			; (mov r8, r8)
 8006656:	46bd      	mov	sp, r7
 8006658:	b006      	add	sp, #24
 800665a:	bd80      	pop	{r7, pc}
 800665c:	fffffeff 	.word	0xfffffeff
 8006660:	fffeff8f 	.word	0xfffeff8f
 8006664:	fffffdff 	.word	0xfffffdff
 8006668:	40012c00 	.word	0x40012c00
 800666c:	fffff7ff 	.word	0xfffff7ff
 8006670:	fffffbff 	.word	0xfffffbff
 8006674:	40014000 	.word	0x40014000
 8006678:	40014400 	.word	0x40014400
 800667c:	40014800 	.word	0x40014800
 8006680:	ffffefff 	.word	0xffffefff
 8006684:	ffffdfff 	.word	0xffffdfff

08006688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	4a28      	ldr	r2, [pc, #160]	; (8006738 <TIM_OC4_SetConfig+0xb0>)
 8006698:	401a      	ands	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4a22      	ldr	r2, [pc, #136]	; (800673c <TIM_OC4_SetConfig+0xb4>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a21      	ldr	r2, [pc, #132]	; (8006740 <TIM_OC4_SetConfig+0xb8>)
 80066bc:	4013      	ands	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <TIM_OC4_SetConfig+0xbc>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	031b      	lsls	r3, r3, #12
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a19      	ldr	r2, [pc, #100]	; (8006748 <TIM_OC4_SetConfig+0xc0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00b      	beq.n	8006700 <TIM_OC4_SetConfig+0x78>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a18      	ldr	r2, [pc, #96]	; (800674c <TIM_OC4_SetConfig+0xc4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d007      	beq.n	8006700 <TIM_OC4_SetConfig+0x78>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a17      	ldr	r2, [pc, #92]	; (8006750 <TIM_OC4_SetConfig+0xc8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d003      	beq.n	8006700 <TIM_OC4_SetConfig+0x78>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a16      	ldr	r2, [pc, #88]	; (8006754 <TIM_OC4_SetConfig+0xcc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d109      	bne.n	8006714 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	4a15      	ldr	r2, [pc, #84]	; (8006758 <TIM_OC4_SetConfig+0xd0>)
 8006704:	4013      	ands	r3, r2
 8006706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	019b      	lsls	r3, r3, #6
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	46bd      	mov	sp, r7
 8006732:	b006      	add	sp, #24
 8006734:	bd80      	pop	{r7, pc}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	ffffefff 	.word	0xffffefff
 800673c:	feff8fff 	.word	0xfeff8fff
 8006740:	fffffcff 	.word	0xfffffcff
 8006744:	ffffdfff 	.word	0xffffdfff
 8006748:	40012c00 	.word	0x40012c00
 800674c:	40014000 	.word	0x40014000
 8006750:	40014400 	.word	0x40014400
 8006754:	40014800 	.word	0x40014800
 8006758:	ffffbfff 	.word	0xffffbfff

0800675c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	4a25      	ldr	r2, [pc, #148]	; (8006800 <TIM_OC5_SetConfig+0xa4>)
 800676c:	401a      	ands	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <TIM_OC5_SetConfig+0xa8>)
 8006788:	4013      	ands	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4a1b      	ldr	r2, [pc, #108]	; (8006808 <TIM_OC5_SetConfig+0xac>)
 800679a:	4013      	ands	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a17      	ldr	r2, [pc, #92]	; (800680c <TIM_OC5_SetConfig+0xb0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00b      	beq.n	80067ca <TIM_OC5_SetConfig+0x6e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a16      	ldr	r2, [pc, #88]	; (8006810 <TIM_OC5_SetConfig+0xb4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d007      	beq.n	80067ca <TIM_OC5_SetConfig+0x6e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a15      	ldr	r2, [pc, #84]	; (8006814 <TIM_OC5_SetConfig+0xb8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC5_SetConfig+0x6e>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a14      	ldr	r2, [pc, #80]	; (8006818 <TIM_OC5_SetConfig+0xbc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d109      	bne.n	80067de <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <TIM_OC5_SetConfig+0xa4>)
 80067ce:	4013      	ands	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	621a      	str	r2, [r3, #32]
}
 80067f8:	46c0      	nop			; (mov r8, r8)
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b006      	add	sp, #24
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	fffeffff 	.word	0xfffeffff
 8006804:	fffeff8f 	.word	0xfffeff8f
 8006808:	fffdffff 	.word	0xfffdffff
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40014000 	.word	0x40014000
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800

0800681c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	4a26      	ldr	r2, [pc, #152]	; (80068c4 <TIM_OC6_SetConfig+0xa8>)
 800682c:	401a      	ands	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <TIM_OC6_SetConfig+0xac>)
 8006848:	4013      	ands	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	4a1c      	ldr	r2, [pc, #112]	; (80068cc <TIM_OC6_SetConfig+0xb0>)
 800685c:	4013      	ands	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	051b      	lsls	r3, r3, #20
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a18      	ldr	r2, [pc, #96]	; (80068d0 <TIM_OC6_SetConfig+0xb4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00b      	beq.n	800688c <TIM_OC6_SetConfig+0x70>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a17      	ldr	r2, [pc, #92]	; (80068d4 <TIM_OC6_SetConfig+0xb8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d007      	beq.n	800688c <TIM_OC6_SetConfig+0x70>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a16      	ldr	r2, [pc, #88]	; (80068d8 <TIM_OC6_SetConfig+0xbc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_OC6_SetConfig+0x70>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a15      	ldr	r2, [pc, #84]	; (80068dc <TIM_OC6_SetConfig+0xc0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d109      	bne.n	80068a0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	4a14      	ldr	r2, [pc, #80]	; (80068e0 <TIM_OC6_SetConfig+0xc4>)
 8006890:	4013      	ands	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	029b      	lsls	r3, r3, #10
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	621a      	str	r2, [r3, #32]
}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	46bd      	mov	sp, r7
 80068be:	b006      	add	sp, #24
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	ffefffff 	.word	0xffefffff
 80068c8:	feff8fff 	.word	0xfeff8fff
 80068cc:	ffdfffff 	.word	0xffdfffff
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	40014000 	.word	0x40014000
 80068d8:	40014400 	.word	0x40014400
 80068dc:	40014800 	.word	0x40014800
 80068e0:	fffbffff 	.word	0xfffbffff

080068e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	2201      	movs	r2, #1
 80068fc:	4393      	bics	r3, r2
 80068fe:	001a      	movs	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	22f0      	movs	r2, #240	; 0xf0
 800690e:	4393      	bics	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	220a      	movs	r2, #10
 8006920:	4393      	bics	r3, r2
 8006922:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	46c0      	nop			; (mov r8, r8)
 800693a:	46bd      	mov	sp, r7
 800693c:	b006      	add	sp, #24
 800693e:	bd80      	pop	{r7, pc}

08006940 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	2210      	movs	r2, #16
 8006952:	4393      	bics	r3, r2
 8006954:	001a      	movs	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <TIM_TI2_ConfigInputStage+0x60>)
 800696a:	4013      	ands	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	031b      	lsls	r3, r3, #12
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	4313      	orrs	r3, r2
 8006976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	22a0      	movs	r2, #160	; 0xa0
 800697c:	4393      	bics	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	621a      	str	r2, [r3, #32]
}
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	46bd      	mov	sp, r7
 800699a:	b006      	add	sp, #24
 800699c:	bd80      	pop	{r7, pc}
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	ffff0fff 	.word	0xffff0fff

080069a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <TIM_ITRx_SetConfig+0x34>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	2207      	movs	r2, #7
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	609a      	str	r2, [r3, #8]
}
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	46bd      	mov	sp, r7
 80069d2:	b004      	add	sp, #16
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	ffcfff8f 	.word	0xffcfff8f

080069dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	4a09      	ldr	r2, [pc, #36]	; (8006a18 <TIM_ETR_SetConfig+0x3c>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	021a      	lsls	r2, r3, #8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	609a      	str	r2, [r3, #8]
}
 8006a10:	46c0      	nop			; (mov r8, r8)
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b006      	add	sp, #24
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	ffff00ff 	.word	0xffff00ff

08006a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	221f      	movs	r2, #31
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2201      	movs	r2, #1
 8006a30:	409a      	lsls	r2, r3
 8006a32:	0013      	movs	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	43d2      	mvns	r2, r2
 8006a3e:	401a      	ands	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a1a      	ldr	r2, [r3, #32]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	211f      	movs	r1, #31
 8006a4c:	400b      	ands	r3, r1
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	4099      	lsls	r1, r3
 8006a52:	000b      	movs	r3, r1
 8006a54:	431a      	orrs	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	621a      	str	r2, [r3, #32]
}
 8006a5a:	46c0      	nop			; (mov r8, r8)
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b006      	add	sp, #24
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	223c      	movs	r2, #60	; 0x3c
 8006a72:	5c9b      	ldrb	r3, [r3, r2]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e04f      	b.n	8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	223c      	movs	r2, #60	; 0x3c
 8006a80:	2101      	movs	r1, #1
 8006a82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	223d      	movs	r2, #61	; 0x3d
 8006a88:	2102      	movs	r1, #2
 8006a8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a20      	ldr	r2, [pc, #128]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d108      	bne.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a1f      	ldr	r2, [pc, #124]	; (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2270      	movs	r2, #112	; 0x70
 8006abc:	4393      	bics	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d009      	beq.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a12      	ldr	r2, [pc, #72]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a11      	ldr	r2, [pc, #68]	; (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d10c      	bne.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2280      	movs	r2, #128	; 0x80
 8006af4:	4393      	bics	r3, r2
 8006af6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	223d      	movs	r2, #61	; 0x3d
 8006b0e:	2101      	movs	r1, #1
 8006b10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	223c      	movs	r2, #60	; 0x3c
 8006b16:	2100      	movs	r1, #0
 8006b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	b004      	add	sp, #16
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	ff0fffff 	.word	0xff0fffff
 8006b2c:	40000400 	.word	0x40000400
 8006b30:	40014000 	.word	0x40014000

08006b34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	223c      	movs	r2, #60	; 0x3c
 8006b46:	5c9b      	ldrb	r3, [r3, r2]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e079      	b.n	8006c44 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	223c      	movs	r2, #60	; 0x3c
 8006b54:	2101      	movs	r1, #1
 8006b56:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	22ff      	movs	r2, #255	; 0xff
 8006b5c:	4393      	bics	r3, r2
 8006b5e:	001a      	movs	r2, r3
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4a38      	ldr	r2, [pc, #224]	; (8006c4c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006b6c:	401a      	ands	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a35      	ldr	r2, [pc, #212]	; (8006c50 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006b7a:	401a      	ands	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4a33      	ldr	r2, [pc, #204]	; (8006c54 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006b88:	401a      	ands	r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4a30      	ldr	r2, [pc, #192]	; (8006c58 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006b96:	401a      	ands	r2, r3
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4a2e      	ldr	r2, [pc, #184]	; (8006c5c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006ba4:	401a      	ands	r2, r3
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4a2b      	ldr	r2, [pc, #172]	; (8006c60 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006bb2:	401a      	ands	r2, r3
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4a29      	ldr	r2, [pc, #164]	; (8006c64 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006bc0:	401a      	ands	r2, r3
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	041b      	lsls	r3, r3, #16
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a25      	ldr	r2, [pc, #148]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d106      	bne.n	8006be4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4a24      	ldr	r2, [pc, #144]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006bda:	401a      	ands	r2, r3
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a1f      	ldr	r2, [pc, #124]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d121      	bne.n	8006c32 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4a1f      	ldr	r2, [pc, #124]	; (8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	051b      	lsls	r3, r3, #20
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4a1c      	ldr	r2, [pc, #112]	; (8006c74 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006c02:	401a      	ands	r2, r3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4a1a      	ldr	r2, [pc, #104]	; (8006c78 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006c10:	401a      	ands	r2, r3
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a12      	ldr	r2, [pc, #72]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d106      	bne.n	8006c32 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006c28:	401a      	ands	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	223c      	movs	r2, #60	; 0x3c
 8006c3e:	2100      	movs	r1, #0
 8006c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	0018      	movs	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b004      	add	sp, #16
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	fffffcff 	.word	0xfffffcff
 8006c50:	fffffbff 	.word	0xfffffbff
 8006c54:	fffff7ff 	.word	0xfffff7ff
 8006c58:	ffffefff 	.word	0xffffefff
 8006c5c:	ffffdfff 	.word	0xffffdfff
 8006c60:	ffffbfff 	.word	0xffffbfff
 8006c64:	fff0ffff 	.word	0xfff0ffff
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	efffffff 	.word	0xefffffff
 8006c70:	ff0fffff 	.word	0xff0fffff
 8006c74:	feffffff 	.word	0xfeffffff
 8006c78:	fdffffff 	.word	0xfdffffff
 8006c7c:	dfffffff 	.word	0xdfffffff

08006c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c88:	46c0      	nop			; (mov r8, r8)
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	b002      	add	sp, #8
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c98:	46c0      	nop			; (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b002      	add	sp, #8
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ca8:	46c0      	nop			; (mov r8, r8)
 8006caa:	46bd      	mov	sp, r7
 8006cac:	b002      	add	sp, #8
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e046      	b.n	8006d50 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2288      	movs	r2, #136	; 0x88
 8006cc6:	589b      	ldr	r3, [r3, r2]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d107      	bne.n	8006cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2284      	movs	r2, #132	; 0x84
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f7fd f940 	bl	8003f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2288      	movs	r2, #136	; 0x88
 8006ce0:	2124      	movs	r1, #36	; 0x24
 8006ce2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2101      	movs	r1, #1
 8006cf0:	438a      	bics	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f000 fc66 	bl	80075c8 <UART_SetConfig>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e024      	b.n	8006d50 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	0018      	movs	r0, r3
 8006d12:	f000 fdfd 	bl	8007910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	490d      	ldr	r1, [pc, #52]	; (8006d58 <HAL_UART_Init+0xa8>)
 8006d22:	400a      	ands	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	212a      	movs	r1, #42	; 0x2a
 8006d32:	438a      	bics	r2, r1
 8006d34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2101      	movs	r1, #1
 8006d42:	430a      	orrs	r2, r1
 8006d44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f000 fe95 	bl	8007a78 <UART_CheckIdleState>
 8006d4e:	0003      	movs	r3, r0
}
 8006d50:	0018      	movs	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b002      	add	sp, #8
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	ffffb7ff 	.word	0xffffb7ff

08006d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08a      	sub	sp, #40	; 0x28
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	1dbb      	adds	r3, r7, #6
 8006d6a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2288      	movs	r2, #136	; 0x88
 8006d70:	589b      	ldr	r3, [r3, r2]
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d000      	beq.n	8006d78 <HAL_UART_Transmit+0x1c>
 8006d76:	e088      	b.n	8006e8a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_UART_Transmit+0x2a>
 8006d7e:	1dbb      	adds	r3, r7, #6
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e080      	b.n	8006e8c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	2380      	movs	r3, #128	; 0x80
 8006d90:	015b      	lsls	r3, r3, #5
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d109      	bne.n	8006daa <HAL_UART_Transmit+0x4e>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d105      	bne.n	8006daa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2201      	movs	r2, #1
 8006da2:	4013      	ands	r3, r2
 8006da4:	d001      	beq.n	8006daa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e070      	b.n	8006e8c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2290      	movs	r2, #144	; 0x90
 8006dae:	2100      	movs	r1, #0
 8006db0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2288      	movs	r2, #136	; 0x88
 8006db6:	2121      	movs	r1, #33	; 0x21
 8006db8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dba:	f7fd f9df 	bl	800417c <HAL_GetTick>
 8006dbe:	0003      	movs	r3, r0
 8006dc0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	1dba      	adds	r2, r7, #6
 8006dc6:	2154      	movs	r1, #84	; 0x54
 8006dc8:	8812      	ldrh	r2, [r2, #0]
 8006dca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	1dba      	adds	r2, r7, #6
 8006dd0:	2156      	movs	r1, #86	; 0x56
 8006dd2:	8812      	ldrh	r2, [r2, #0]
 8006dd4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	015b      	lsls	r3, r3, #5
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d108      	bne.n	8006df4 <HAL_UART_Transmit+0x98>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	e003      	b.n	8006dfc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dfc:	e02c      	b.n	8006e58 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	0013      	movs	r3, r2
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2180      	movs	r1, #128	; 0x80
 8006e0c:	f000 fe82 	bl	8007b14 <UART_WaitOnFlagUntilTimeout>
 8006e10:	1e03      	subs	r3, r0, #0
 8006e12:	d001      	beq.n	8006e18 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e039      	b.n	8006e8c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	001a      	movs	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	05d2      	lsls	r2, r2, #23
 8006e2a:	0dd2      	lsrs	r2, r2, #23
 8006e2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	3302      	adds	r3, #2
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	e007      	b.n	8006e46 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	3301      	adds	r3, #1
 8006e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2256      	movs	r2, #86	; 0x56
 8006e4a:	5a9b      	ldrh	r3, [r3, r2]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b299      	uxth	r1, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2256      	movs	r2, #86	; 0x56
 8006e56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2256      	movs	r2, #86	; 0x56
 8006e5c:	5a9b      	ldrh	r3, [r3, r2]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1cc      	bne.n	8006dfe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	0013      	movs	r3, r2
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2140      	movs	r1, #64	; 0x40
 8006e72:	f000 fe4f 	bl	8007b14 <UART_WaitOnFlagUntilTimeout>
 8006e76:	1e03      	subs	r3, r0, #0
 8006e78:	d001      	beq.n	8006e7e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e006      	b.n	8006e8c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2288      	movs	r2, #136	; 0x88
 8006e82:	2120      	movs	r1, #32
 8006e84:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e000      	b.n	8006e8c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006e8a:	2302      	movs	r3, #2
  }
}
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	b008      	add	sp, #32
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	1dbb      	adds	r3, r7, #6
 8006ea0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	228c      	movs	r2, #140	; 0x8c
 8006ea6:	589b      	ldr	r3, [r3, r2]
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d145      	bne.n	8006f38 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_UART_Receive_IT+0x26>
 8006eb2:	1dbb      	adds	r3, r7, #6
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e03d      	b.n	8006f3a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	2380      	movs	r3, #128	; 0x80
 8006ec4:	015b      	lsls	r3, r3, #5
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d109      	bne.n	8006ede <HAL_UART_Receive_IT+0x4a>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d105      	bne.n	8006ede <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	d001      	beq.n	8006ede <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e02d      	b.n	8006f3a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	2380      	movs	r3, #128	; 0x80
 8006eec:	041b      	lsls	r3, r3, #16
 8006eee:	4013      	ands	r3, r2
 8006ef0:	d019      	beq.n	8006f26 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ef6:	613b      	str	r3, [r7, #16]
  return(result);
 8006ef8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	2301      	movs	r3, #1
 8006efe:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f383 8810 	msr	PRIMASK, r3
}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2180      	movs	r1, #128	; 0x80
 8006f14:	04c9      	lsls	r1, r1, #19
 8006f16:	430a      	orrs	r2, r1
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f383 8810 	msr	PRIMASK, r3
}
 8006f24:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f26:	1dbb      	adds	r3, r7, #6
 8006f28:	881a      	ldrh	r2, [r3, #0]
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f000 feb8 	bl	8007ca4 <UART_Start_Receive_IT>
 8006f34:	0003      	movs	r3, r0
 8006f36:	e000      	b.n	8006f3a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006f38:	2302      	movs	r3, #2
  }
}
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	b008      	add	sp, #32
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f44:	b5b0      	push	{r4, r5, r7, lr}
 8006f46:	b0aa      	sub	sp, #168	; 0xa8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	22a4      	movs	r2, #164	; 0xa4
 8006f54:	18b9      	adds	r1, r7, r2
 8006f56:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	20a0      	movs	r0, #160	; 0xa0
 8006f60:	1839      	adds	r1, r7, r0
 8006f62:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	249c      	movs	r4, #156	; 0x9c
 8006f6c:	1939      	adds	r1, r7, r4
 8006f6e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f70:	0011      	movs	r1, r2
 8006f72:	18bb      	adds	r3, r7, r2
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4aa2      	ldr	r2, [pc, #648]	; (8007200 <HAL_UART_IRQHandler+0x2bc>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	2298      	movs	r2, #152	; 0x98
 8006f7c:	18bd      	adds	r5, r7, r2
 8006f7e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006f80:	18bb      	adds	r3, r7, r2
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d11a      	bne.n	8006fbe <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d015      	beq.n	8006fbe <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f92:	183b      	adds	r3, r7, r0
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2220      	movs	r2, #32
 8006f98:	4013      	ands	r3, r2
 8006f9a:	d105      	bne.n	8006fa8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f9c:	193b      	adds	r3, r7, r4
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	2380      	movs	r3, #128	; 0x80
 8006fa2:	055b      	lsls	r3, r3, #21
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	d00a      	beq.n	8006fbe <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d100      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x6e>
 8006fb0:	e2dc      	b.n	800756c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	0010      	movs	r0, r2
 8006fba:	4798      	blx	r3
      }
      return;
 8006fbc:	e2d6      	b.n	800756c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fbe:	2398      	movs	r3, #152	; 0x98
 8006fc0:	18fb      	adds	r3, r7, r3
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d100      	bne.n	8006fca <HAL_UART_IRQHandler+0x86>
 8006fc8:	e122      	b.n	8007210 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006fca:	239c      	movs	r3, #156	; 0x9c
 8006fcc:	18fb      	adds	r3, r7, r3
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a8c      	ldr	r2, [pc, #560]	; (8007204 <HAL_UART_IRQHandler+0x2c0>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d106      	bne.n	8006fe4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006fd6:	23a0      	movs	r3, #160	; 0xa0
 8006fd8:	18fb      	adds	r3, r7, r3
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a8a      	ldr	r2, [pc, #552]	; (8007208 <HAL_UART_IRQHandler+0x2c4>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	d100      	bne.n	8006fe4 <HAL_UART_IRQHandler+0xa0>
 8006fe2:	e115      	b.n	8007210 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fe4:	23a4      	movs	r3, #164	; 0xa4
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2201      	movs	r2, #1
 8006fec:	4013      	ands	r3, r2
 8006fee:	d012      	beq.n	8007016 <HAL_UART_IRQHandler+0xd2>
 8006ff0:	23a0      	movs	r3, #160	; 0xa0
 8006ff2:	18fb      	adds	r3, r7, r3
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	2380      	movs	r3, #128	; 0x80
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d00b      	beq.n	8007016 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2201      	movs	r2, #1
 8007004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2290      	movs	r2, #144	; 0x90
 800700a:	589b      	ldr	r3, [r3, r2]
 800700c:	2201      	movs	r2, #1
 800700e:	431a      	orrs	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2190      	movs	r1, #144	; 0x90
 8007014:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007016:	23a4      	movs	r3, #164	; 0xa4
 8007018:	18fb      	adds	r3, r7, r3
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2202      	movs	r2, #2
 800701e:	4013      	ands	r3, r2
 8007020:	d011      	beq.n	8007046 <HAL_UART_IRQHandler+0x102>
 8007022:	239c      	movs	r3, #156	; 0x9c
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2201      	movs	r2, #1
 800702a:	4013      	ands	r3, r2
 800702c:	d00b      	beq.n	8007046 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2202      	movs	r2, #2
 8007034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2290      	movs	r2, #144	; 0x90
 800703a:	589b      	ldr	r3, [r3, r2]
 800703c:	2204      	movs	r2, #4
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2190      	movs	r1, #144	; 0x90
 8007044:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007046:	23a4      	movs	r3, #164	; 0xa4
 8007048:	18fb      	adds	r3, r7, r3
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2204      	movs	r2, #4
 800704e:	4013      	ands	r3, r2
 8007050:	d011      	beq.n	8007076 <HAL_UART_IRQHandler+0x132>
 8007052:	239c      	movs	r3, #156	; 0x9c
 8007054:	18fb      	adds	r3, r7, r3
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2201      	movs	r2, #1
 800705a:	4013      	ands	r3, r2
 800705c:	d00b      	beq.n	8007076 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2204      	movs	r2, #4
 8007064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2290      	movs	r2, #144	; 0x90
 800706a:	589b      	ldr	r3, [r3, r2]
 800706c:	2202      	movs	r2, #2
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2190      	movs	r1, #144	; 0x90
 8007074:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007076:	23a4      	movs	r3, #164	; 0xa4
 8007078:	18fb      	adds	r3, r7, r3
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2208      	movs	r2, #8
 800707e:	4013      	ands	r3, r2
 8007080:	d017      	beq.n	80070b2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007082:	23a0      	movs	r3, #160	; 0xa0
 8007084:	18fb      	adds	r3, r7, r3
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2220      	movs	r2, #32
 800708a:	4013      	ands	r3, r2
 800708c:	d105      	bne.n	800709a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800708e:	239c      	movs	r3, #156	; 0x9c
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a5b      	ldr	r2, [pc, #364]	; (8007204 <HAL_UART_IRQHandler+0x2c0>)
 8007096:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007098:	d00b      	beq.n	80070b2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2208      	movs	r2, #8
 80070a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2290      	movs	r2, #144	; 0x90
 80070a6:	589b      	ldr	r3, [r3, r2]
 80070a8:	2208      	movs	r2, #8
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2190      	movs	r1, #144	; 0x90
 80070b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070b2:	23a4      	movs	r3, #164	; 0xa4
 80070b4:	18fb      	adds	r3, r7, r3
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	2380      	movs	r3, #128	; 0x80
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	4013      	ands	r3, r2
 80070be:	d013      	beq.n	80070e8 <HAL_UART_IRQHandler+0x1a4>
 80070c0:	23a0      	movs	r3, #160	; 0xa0
 80070c2:	18fb      	adds	r3, r7, r3
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	2380      	movs	r3, #128	; 0x80
 80070c8:	04db      	lsls	r3, r3, #19
 80070ca:	4013      	ands	r3, r2
 80070cc:	d00c      	beq.n	80070e8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2280      	movs	r2, #128	; 0x80
 80070d4:	0112      	lsls	r2, r2, #4
 80070d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2290      	movs	r2, #144	; 0x90
 80070dc:	589b      	ldr	r3, [r3, r2]
 80070de:	2220      	movs	r2, #32
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2190      	movs	r1, #144	; 0x90
 80070e6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2290      	movs	r2, #144	; 0x90
 80070ec:	589b      	ldr	r3, [r3, r2]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d100      	bne.n	80070f4 <HAL_UART_IRQHandler+0x1b0>
 80070f2:	e23d      	b.n	8007570 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070f4:	23a4      	movs	r3, #164	; 0xa4
 80070f6:	18fb      	adds	r3, r7, r3
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2220      	movs	r2, #32
 80070fc:	4013      	ands	r3, r2
 80070fe:	d015      	beq.n	800712c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007100:	23a0      	movs	r3, #160	; 0xa0
 8007102:	18fb      	adds	r3, r7, r3
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2220      	movs	r2, #32
 8007108:	4013      	ands	r3, r2
 800710a:	d106      	bne.n	800711a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800710c:	239c      	movs	r3, #156	; 0x9c
 800710e:	18fb      	adds	r3, r7, r3
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	2380      	movs	r3, #128	; 0x80
 8007114:	055b      	lsls	r3, r3, #21
 8007116:	4013      	ands	r3, r2
 8007118:	d008      	beq.n	800712c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	0010      	movs	r0, r2
 800712a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2290      	movs	r2, #144	; 0x90
 8007130:	589b      	ldr	r3, [r3, r2]
 8007132:	2194      	movs	r1, #148	; 0x94
 8007134:	187a      	adds	r2, r7, r1
 8007136:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	2240      	movs	r2, #64	; 0x40
 8007140:	4013      	ands	r3, r2
 8007142:	2b40      	cmp	r3, #64	; 0x40
 8007144:	d004      	beq.n	8007150 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007146:	187b      	adds	r3, r7, r1
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2228      	movs	r2, #40	; 0x28
 800714c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800714e:	d04c      	beq.n	80071ea <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	0018      	movs	r0, r3
 8007154:	f000 feca 	bl	8007eec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2240      	movs	r2, #64	; 0x40
 8007160:	4013      	ands	r3, r2
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d13c      	bne.n	80071e0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007166:	f3ef 8310 	mrs	r3, PRIMASK
 800716a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800716c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800716e:	2090      	movs	r0, #144	; 0x90
 8007170:	183a      	adds	r2, r7, r0
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	2301      	movs	r3, #1
 8007176:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800717a:	f383 8810 	msr	PRIMASK, r3
}
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2140      	movs	r1, #64	; 0x40
 800718c:	438a      	bics	r2, r1
 800718e:	609a      	str	r2, [r3, #8]
 8007190:	183b      	adds	r3, r7, r0
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007196:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007198:	f383 8810 	msr	PRIMASK, r3
}
 800719c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2280      	movs	r2, #128	; 0x80
 80071a2:	589b      	ldr	r3, [r3, r2]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d016      	beq.n	80071d6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2280      	movs	r2, #128	; 0x80
 80071ac:	589b      	ldr	r3, [r3, r2]
 80071ae:	4a17      	ldr	r2, [pc, #92]	; (800720c <HAL_UART_IRQHandler+0x2c8>)
 80071b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2280      	movs	r2, #128	; 0x80
 80071b6:	589b      	ldr	r3, [r3, r2]
 80071b8:	0018      	movs	r0, r3
 80071ba:	f7fd f929 	bl	8004410 <HAL_DMA_Abort_IT>
 80071be:	1e03      	subs	r3, r0, #0
 80071c0:	d01c      	beq.n	80071fc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2280      	movs	r2, #128	; 0x80
 80071c6:	589b      	ldr	r3, [r3, r2]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	2180      	movs	r1, #128	; 0x80
 80071ce:	5852      	ldr	r2, [r2, r1]
 80071d0:	0010      	movs	r0, r2
 80071d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d4:	e012      	b.n	80071fc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	0018      	movs	r0, r3
 80071da:	f000 f9e1 	bl	80075a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071de:	e00d      	b.n	80071fc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	0018      	movs	r0, r3
 80071e4:	f000 f9dc 	bl	80075a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e8:	e008      	b.n	80071fc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	0018      	movs	r0, r3
 80071ee:	f000 f9d7 	bl	80075a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2290      	movs	r2, #144	; 0x90
 80071f6:	2100      	movs	r1, #0
 80071f8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80071fa:	e1b9      	b.n	8007570 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fc:	46c0      	nop			; (mov r8, r8)
    return;
 80071fe:	e1b7      	b.n	8007570 <HAL_UART_IRQHandler+0x62c>
 8007200:	0000080f 	.word	0x0000080f
 8007204:	10000001 	.word	0x10000001
 8007208:	04000120 	.word	0x04000120
 800720c:	08007fb9 	.word	0x08007fb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d000      	beq.n	800721a <HAL_UART_IRQHandler+0x2d6>
 8007218:	e13e      	b.n	8007498 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800721a:	23a4      	movs	r3, #164	; 0xa4
 800721c:	18fb      	adds	r3, r7, r3
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2210      	movs	r2, #16
 8007222:	4013      	ands	r3, r2
 8007224:	d100      	bne.n	8007228 <HAL_UART_IRQHandler+0x2e4>
 8007226:	e137      	b.n	8007498 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007228:	23a0      	movs	r3, #160	; 0xa0
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2210      	movs	r2, #16
 8007230:	4013      	ands	r3, r2
 8007232:	d100      	bne.n	8007236 <HAL_UART_IRQHandler+0x2f2>
 8007234:	e130      	b.n	8007498 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2210      	movs	r2, #16
 800723c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2240      	movs	r2, #64	; 0x40
 8007246:	4013      	ands	r3, r2
 8007248:	2b40      	cmp	r3, #64	; 0x40
 800724a:	d000      	beq.n	800724e <HAL_UART_IRQHandler+0x30a>
 800724c:	e0a4      	b.n	8007398 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2280      	movs	r2, #128	; 0x80
 8007252:	589b      	ldr	r3, [r3, r2]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	217e      	movs	r1, #126	; 0x7e
 800725a:	187b      	adds	r3, r7, r1
 800725c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800725e:	187b      	adds	r3, r7, r1
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d100      	bne.n	8007268 <HAL_UART_IRQHandler+0x324>
 8007266:	e185      	b.n	8007574 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	225c      	movs	r2, #92	; 0x5c
 800726c:	5a9b      	ldrh	r3, [r3, r2]
 800726e:	187a      	adds	r2, r7, r1
 8007270:	8812      	ldrh	r2, [r2, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d300      	bcc.n	8007278 <HAL_UART_IRQHandler+0x334>
 8007276:	e17d      	b.n	8007574 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	187a      	adds	r2, r7, r1
 800727c:	215e      	movs	r1, #94	; 0x5e
 800727e:	8812      	ldrh	r2, [r2, #0]
 8007280:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2280      	movs	r2, #128	; 0x80
 8007286:	589b      	ldr	r3, [r3, r2]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2220      	movs	r2, #32
 800728e:	4013      	ands	r3, r2
 8007290:	d170      	bne.n	8007374 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007292:	f3ef 8310 	mrs	r3, PRIMASK
 8007296:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800729a:	67bb      	str	r3, [r7, #120]	; 0x78
 800729c:	2301      	movs	r3, #1
 800729e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a2:	f383 8810 	msr	PRIMASK, r3
}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	49b4      	ldr	r1, [pc, #720]	; (8007584 <HAL_UART_IRQHandler+0x640>)
 80072b4:	400a      	ands	r2, r1
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072be:	f383 8810 	msr	PRIMASK, r3
}
 80072c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072c4:	f3ef 8310 	mrs	r3, PRIMASK
 80072c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80072ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072cc:	677b      	str	r3, [r7, #116]	; 0x74
 80072ce:	2301      	movs	r3, #1
 80072d0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d4:	f383 8810 	msr	PRIMASK, r3
}
 80072d8:	46c0      	nop			; (mov r8, r8)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2101      	movs	r1, #1
 80072e6:	438a      	bics	r2, r1
 80072e8:	609a      	str	r2, [r3, #8]
 80072ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ec:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f0:	f383 8810 	msr	PRIMASK, r3
}
 80072f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f6:	f3ef 8310 	mrs	r3, PRIMASK
 80072fa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80072fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007300:	2301      	movs	r3, #1
 8007302:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007306:	f383 8810 	msr	PRIMASK, r3
}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2140      	movs	r1, #64	; 0x40
 8007318:	438a      	bics	r2, r1
 800731a:	609a      	str	r2, [r3, #8]
 800731c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800731e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007322:	f383 8810 	msr	PRIMASK, r3
}
 8007326:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	228c      	movs	r2, #140	; 0x8c
 800732c:	2120      	movs	r1, #32
 800732e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007336:	f3ef 8310 	mrs	r3, PRIMASK
 800733a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800733c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007340:	2301      	movs	r3, #1
 8007342:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007346:	f383 8810 	msr	PRIMASK, r3
}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2110      	movs	r1, #16
 8007358:	438a      	bics	r2, r1
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007362:	f383 8810 	msr	PRIMASK, r3
}
 8007366:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2280      	movs	r2, #128	; 0x80
 800736c:	589b      	ldr	r3, [r3, r2]
 800736e:	0018      	movs	r0, r3
 8007370:	f7fc ffec 	bl	800434c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	225c      	movs	r2, #92	; 0x5c
 800737e:	5a9a      	ldrh	r2, [r3, r2]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	215e      	movs	r1, #94	; 0x5e
 8007384:	5a5b      	ldrh	r3, [r3, r1]
 8007386:	b29b      	uxth	r3, r3
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	b29a      	uxth	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	0011      	movs	r1, r2
 8007390:	0018      	movs	r0, r3
 8007392:	f000 f90d 	bl	80075b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007396:	e0ed      	b.n	8007574 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	225c      	movs	r2, #92	; 0x5c
 800739c:	5a99      	ldrh	r1, [r3, r2]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	225e      	movs	r2, #94	; 0x5e
 80073a2:	5a9b      	ldrh	r3, [r3, r2]
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	208e      	movs	r0, #142	; 0x8e
 80073a8:	183b      	adds	r3, r7, r0
 80073aa:	1a8a      	subs	r2, r1, r2
 80073ac:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	225e      	movs	r2, #94	; 0x5e
 80073b2:	5a9b      	ldrh	r3, [r3, r2]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d100      	bne.n	80073bc <HAL_UART_IRQHandler+0x478>
 80073ba:	e0dd      	b.n	8007578 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80073bc:	183b      	adds	r3, r7, r0
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d100      	bne.n	80073c6 <HAL_UART_IRQHandler+0x482>
 80073c4:	e0d8      	b.n	8007578 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c6:	f3ef 8310 	mrs	r3, PRIMASK
 80073ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80073cc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073ce:	2488      	movs	r4, #136	; 0x88
 80073d0:	193a      	adds	r2, r7, r4
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	2301      	movs	r3, #1
 80073d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f383 8810 	msr	PRIMASK, r3
}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4967      	ldr	r1, [pc, #412]	; (8007588 <HAL_UART_IRQHandler+0x644>)
 80073ec:	400a      	ands	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	193b      	adds	r3, r7, r4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f383 8810 	msr	PRIMASK, r3
}
 80073fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007402:	61bb      	str	r3, [r7, #24]
  return(result);
 8007404:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007406:	2484      	movs	r4, #132	; 0x84
 8007408:	193a      	adds	r2, r7, r4
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	2301      	movs	r3, #1
 800740e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f383 8810 	msr	PRIMASK, r3
}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	495a      	ldr	r1, [pc, #360]	; (800758c <HAL_UART_IRQHandler+0x648>)
 8007424:	400a      	ands	r2, r1
 8007426:	609a      	str	r2, [r3, #8]
 8007428:	193b      	adds	r3, r7, r4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	f383 8810 	msr	PRIMASK, r3
}
 8007434:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	228c      	movs	r2, #140	; 0x8c
 800743a:	2120      	movs	r1, #32
 800743c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800744a:	f3ef 8310 	mrs	r3, PRIMASK
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007452:	2480      	movs	r4, #128	; 0x80
 8007454:	193a      	adds	r2, r7, r4
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	2301      	movs	r3, #1
 800745a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	f383 8810 	msr	PRIMASK, r3
}
 8007462:	46c0      	nop			; (mov r8, r8)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2110      	movs	r1, #16
 8007470:	438a      	bics	r2, r1
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	193b      	adds	r3, r7, r4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	f383 8810 	msr	PRIMASK, r3
}
 8007480:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2202      	movs	r2, #2
 8007486:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007488:	183b      	adds	r3, r7, r0
 800748a:	881a      	ldrh	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	0011      	movs	r1, r2
 8007490:	0018      	movs	r0, r3
 8007492:	f000 f88d 	bl	80075b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007496:	e06f      	b.n	8007578 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007498:	23a4      	movs	r3, #164	; 0xa4
 800749a:	18fb      	adds	r3, r7, r3
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	2380      	movs	r3, #128	; 0x80
 80074a0:	035b      	lsls	r3, r3, #13
 80074a2:	4013      	ands	r3, r2
 80074a4:	d010      	beq.n	80074c8 <HAL_UART_IRQHandler+0x584>
 80074a6:	239c      	movs	r3, #156	; 0x9c
 80074a8:	18fb      	adds	r3, r7, r3
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	2380      	movs	r3, #128	; 0x80
 80074ae:	03db      	lsls	r3, r3, #15
 80074b0:	4013      	ands	r3, r2
 80074b2:	d009      	beq.n	80074c8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2280      	movs	r2, #128	; 0x80
 80074ba:	0352      	lsls	r2, r2, #13
 80074bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	0018      	movs	r0, r3
 80074c2:	f001 fa1d 	bl	8008900 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074c6:	e05a      	b.n	800757e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80074c8:	23a4      	movs	r3, #164	; 0xa4
 80074ca:	18fb      	adds	r3, r7, r3
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2280      	movs	r2, #128	; 0x80
 80074d0:	4013      	ands	r3, r2
 80074d2:	d016      	beq.n	8007502 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074d4:	23a0      	movs	r3, #160	; 0xa0
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2280      	movs	r2, #128	; 0x80
 80074dc:	4013      	ands	r3, r2
 80074de:	d106      	bne.n	80074ee <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80074e0:	239c      	movs	r3, #156	; 0x9c
 80074e2:	18fb      	adds	r3, r7, r3
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	2380      	movs	r3, #128	; 0x80
 80074e8:	041b      	lsls	r3, r3, #16
 80074ea:	4013      	ands	r3, r2
 80074ec:	d009      	beq.n	8007502 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d042      	beq.n	800757c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	0010      	movs	r0, r2
 80074fe:	4798      	blx	r3
    }
    return;
 8007500:	e03c      	b.n	800757c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007502:	23a4      	movs	r3, #164	; 0xa4
 8007504:	18fb      	adds	r3, r7, r3
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2240      	movs	r2, #64	; 0x40
 800750a:	4013      	ands	r3, r2
 800750c:	d00a      	beq.n	8007524 <HAL_UART_IRQHandler+0x5e0>
 800750e:	23a0      	movs	r3, #160	; 0xa0
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2240      	movs	r2, #64	; 0x40
 8007516:	4013      	ands	r3, r2
 8007518:	d004      	beq.n	8007524 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	0018      	movs	r0, r3
 800751e:	f000 fd62 	bl	8007fe6 <UART_EndTransmit_IT>
    return;
 8007522:	e02c      	b.n	800757e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007524:	23a4      	movs	r3, #164	; 0xa4
 8007526:	18fb      	adds	r3, r7, r3
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	2380      	movs	r3, #128	; 0x80
 800752c:	041b      	lsls	r3, r3, #16
 800752e:	4013      	ands	r3, r2
 8007530:	d00b      	beq.n	800754a <HAL_UART_IRQHandler+0x606>
 8007532:	23a0      	movs	r3, #160	; 0xa0
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	2380      	movs	r3, #128	; 0x80
 800753a:	05db      	lsls	r3, r3, #23
 800753c:	4013      	ands	r3, r2
 800753e:	d004      	beq.n	800754a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	0018      	movs	r0, r3
 8007544:	f001 f9ec 	bl	8008920 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007548:	e019      	b.n	800757e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800754a:	23a4      	movs	r3, #164	; 0xa4
 800754c:	18fb      	adds	r3, r7, r3
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	2380      	movs	r3, #128	; 0x80
 8007552:	045b      	lsls	r3, r3, #17
 8007554:	4013      	ands	r3, r2
 8007556:	d012      	beq.n	800757e <HAL_UART_IRQHandler+0x63a>
 8007558:	23a0      	movs	r3, #160	; 0xa0
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	da0d      	bge.n	800757e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	0018      	movs	r0, r3
 8007566:	f001 f9d3 	bl	8008910 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800756a:	e008      	b.n	800757e <HAL_UART_IRQHandler+0x63a>
      return;
 800756c:	46c0      	nop			; (mov r8, r8)
 800756e:	e006      	b.n	800757e <HAL_UART_IRQHandler+0x63a>
    return;
 8007570:	46c0      	nop			; (mov r8, r8)
 8007572:	e004      	b.n	800757e <HAL_UART_IRQHandler+0x63a>
      return;
 8007574:	46c0      	nop			; (mov r8, r8)
 8007576:	e002      	b.n	800757e <HAL_UART_IRQHandler+0x63a>
      return;
 8007578:	46c0      	nop			; (mov r8, r8)
 800757a:	e000      	b.n	800757e <HAL_UART_IRQHandler+0x63a>
    return;
 800757c:	46c0      	nop			; (mov r8, r8)
  }
}
 800757e:	46bd      	mov	sp, r7
 8007580:	b02a      	add	sp, #168	; 0xa8
 8007582:	bdb0      	pop	{r4, r5, r7, pc}
 8007584:	fffffeff 	.word	0xfffffeff
 8007588:	fffffedf 	.word	0xfffffedf
 800758c:	effffffe 	.word	0xeffffffe

08007590 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007598:	46c0      	nop			; (mov r8, r8)
 800759a:	46bd      	mov	sp, r7
 800759c:	b002      	add	sp, #8
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075a8:	46c0      	nop			; (mov r8, r8)
 80075aa:	46bd      	mov	sp, r7
 80075ac:	b002      	add	sp, #8
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	000a      	movs	r2, r1
 80075ba:	1cbb      	adds	r3, r7, #2
 80075bc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b002      	add	sp, #8
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075d0:	231a      	movs	r3, #26
 80075d2:	18fb      	adds	r3, r7, r3
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4abc      	ldr	r2, [pc, #752]	; (80078e8 <UART_SetConfig+0x320>)
 80075f8:	4013      	ands	r3, r2
 80075fa:	0019      	movs	r1, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69fa      	ldr	r2, [r7, #28]
 8007602:	430a      	orrs	r2, r1
 8007604:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	4ab7      	ldr	r2, [pc, #732]	; (80078ec <UART_SetConfig+0x324>)
 800760e:	4013      	ands	r3, r2
 8007610:	0019      	movs	r1, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	4313      	orrs	r3, r2
 800762c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	4aae      	ldr	r2, [pc, #696]	; (80078f0 <UART_SetConfig+0x328>)
 8007636:	4013      	ands	r3, r2
 8007638:	0019      	movs	r1, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	430a      	orrs	r2, r1
 8007642:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	220f      	movs	r2, #15
 800764c:	4393      	bics	r3, r2
 800764e:	0019      	movs	r1, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4aa4      	ldr	r2, [pc, #656]	; (80078f4 <UART_SetConfig+0x32c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d127      	bne.n	80076b6 <UART_SetConfig+0xee>
 8007666:	4ba4      	ldr	r3, [pc, #656]	; (80078f8 <UART_SetConfig+0x330>)
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	2203      	movs	r2, #3
 800766c:	4013      	ands	r3, r2
 800766e:	2b03      	cmp	r3, #3
 8007670:	d017      	beq.n	80076a2 <UART_SetConfig+0xda>
 8007672:	d81b      	bhi.n	80076ac <UART_SetConfig+0xe4>
 8007674:	2b02      	cmp	r3, #2
 8007676:	d00a      	beq.n	800768e <UART_SetConfig+0xc6>
 8007678:	d818      	bhi.n	80076ac <UART_SetConfig+0xe4>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <UART_SetConfig+0xbc>
 800767e:	2b01      	cmp	r3, #1
 8007680:	d00a      	beq.n	8007698 <UART_SetConfig+0xd0>
 8007682:	e013      	b.n	80076ac <UART_SetConfig+0xe4>
 8007684:	231b      	movs	r3, #27
 8007686:	18fb      	adds	r3, r7, r3
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	e058      	b.n	8007740 <UART_SetConfig+0x178>
 800768e:	231b      	movs	r3, #27
 8007690:	18fb      	adds	r3, r7, r3
 8007692:	2202      	movs	r2, #2
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e053      	b.n	8007740 <UART_SetConfig+0x178>
 8007698:	231b      	movs	r3, #27
 800769a:	18fb      	adds	r3, r7, r3
 800769c:	2204      	movs	r2, #4
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	e04e      	b.n	8007740 <UART_SetConfig+0x178>
 80076a2:	231b      	movs	r3, #27
 80076a4:	18fb      	adds	r3, r7, r3
 80076a6:	2208      	movs	r2, #8
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	e049      	b.n	8007740 <UART_SetConfig+0x178>
 80076ac:	231b      	movs	r3, #27
 80076ae:	18fb      	adds	r3, r7, r3
 80076b0:	2210      	movs	r2, #16
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	e044      	b.n	8007740 <UART_SetConfig+0x178>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a90      	ldr	r2, [pc, #576]	; (80078fc <UART_SetConfig+0x334>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d127      	bne.n	8007710 <UART_SetConfig+0x148>
 80076c0:	4b8d      	ldr	r3, [pc, #564]	; (80078f8 <UART_SetConfig+0x330>)
 80076c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c4:	220c      	movs	r2, #12
 80076c6:	4013      	ands	r3, r2
 80076c8:	2b0c      	cmp	r3, #12
 80076ca:	d017      	beq.n	80076fc <UART_SetConfig+0x134>
 80076cc:	d81b      	bhi.n	8007706 <UART_SetConfig+0x13e>
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	d00a      	beq.n	80076e8 <UART_SetConfig+0x120>
 80076d2:	d818      	bhi.n	8007706 <UART_SetConfig+0x13e>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <UART_SetConfig+0x116>
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d00a      	beq.n	80076f2 <UART_SetConfig+0x12a>
 80076dc:	e013      	b.n	8007706 <UART_SetConfig+0x13e>
 80076de:	231b      	movs	r3, #27
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	e02b      	b.n	8007740 <UART_SetConfig+0x178>
 80076e8:	231b      	movs	r3, #27
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	2202      	movs	r2, #2
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	e026      	b.n	8007740 <UART_SetConfig+0x178>
 80076f2:	231b      	movs	r3, #27
 80076f4:	18fb      	adds	r3, r7, r3
 80076f6:	2204      	movs	r2, #4
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	e021      	b.n	8007740 <UART_SetConfig+0x178>
 80076fc:	231b      	movs	r3, #27
 80076fe:	18fb      	adds	r3, r7, r3
 8007700:	2208      	movs	r2, #8
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e01c      	b.n	8007740 <UART_SetConfig+0x178>
 8007706:	231b      	movs	r3, #27
 8007708:	18fb      	adds	r3, r7, r3
 800770a:	2210      	movs	r2, #16
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	e017      	b.n	8007740 <UART_SetConfig+0x178>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a7a      	ldr	r2, [pc, #488]	; (8007900 <UART_SetConfig+0x338>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d104      	bne.n	8007724 <UART_SetConfig+0x15c>
 800771a:	231b      	movs	r3, #27
 800771c:	18fb      	adds	r3, r7, r3
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	e00d      	b.n	8007740 <UART_SetConfig+0x178>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a76      	ldr	r2, [pc, #472]	; (8007904 <UART_SetConfig+0x33c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d104      	bne.n	8007738 <UART_SetConfig+0x170>
 800772e:	231b      	movs	r3, #27
 8007730:	18fb      	adds	r3, r7, r3
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	e003      	b.n	8007740 <UART_SetConfig+0x178>
 8007738:	231b      	movs	r3, #27
 800773a:	18fb      	adds	r3, r7, r3
 800773c:	2210      	movs	r2, #16
 800773e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	69da      	ldr	r2, [r3, #28]
 8007744:	2380      	movs	r3, #128	; 0x80
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	429a      	cmp	r2, r3
 800774a:	d000      	beq.n	800774e <UART_SetConfig+0x186>
 800774c:	e065      	b.n	800781a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800774e:	231b      	movs	r3, #27
 8007750:	18fb      	adds	r3, r7, r3
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b08      	cmp	r3, #8
 8007756:	d015      	beq.n	8007784 <UART_SetConfig+0x1bc>
 8007758:	dc18      	bgt.n	800778c <UART_SetConfig+0x1c4>
 800775a:	2b04      	cmp	r3, #4
 800775c:	d00d      	beq.n	800777a <UART_SetConfig+0x1b2>
 800775e:	dc15      	bgt.n	800778c <UART_SetConfig+0x1c4>
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <UART_SetConfig+0x1a2>
 8007764:	2b02      	cmp	r3, #2
 8007766:	d005      	beq.n	8007774 <UART_SetConfig+0x1ac>
 8007768:	e010      	b.n	800778c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800776a:	f7fd fd45 	bl	80051f8 <HAL_RCC_GetPCLK1Freq>
 800776e:	0003      	movs	r3, r0
 8007770:	617b      	str	r3, [r7, #20]
        break;
 8007772:	e012      	b.n	800779a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007774:	4b64      	ldr	r3, [pc, #400]	; (8007908 <UART_SetConfig+0x340>)
 8007776:	617b      	str	r3, [r7, #20]
        break;
 8007778:	e00f      	b.n	800779a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777a:	f7fd fcb3 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 800777e:	0003      	movs	r3, r0
 8007780:	617b      	str	r3, [r7, #20]
        break;
 8007782:	e00a      	b.n	800779a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007784:	2380      	movs	r3, #128	; 0x80
 8007786:	021b      	lsls	r3, r3, #8
 8007788:	617b      	str	r3, [r7, #20]
        break;
 800778a:	e006      	b.n	800779a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007790:	231a      	movs	r3, #26
 8007792:	18fb      	adds	r3, r7, r3
 8007794:	2201      	movs	r2, #1
 8007796:	701a      	strb	r2, [r3, #0]
        break;
 8007798:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d100      	bne.n	80077a2 <UART_SetConfig+0x1da>
 80077a0:	e08d      	b.n	80078be <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077a6:	4b59      	ldr	r3, [pc, #356]	; (800790c <UART_SetConfig+0x344>)
 80077a8:	0052      	lsls	r2, r2, #1
 80077aa:	5ad3      	ldrh	r3, [r2, r3]
 80077ac:	0019      	movs	r1, r3
 80077ae:	6978      	ldr	r0, [r7, #20]
 80077b0:	f7f8 fcc2 	bl	8000138 <__udivsi3>
 80077b4:	0003      	movs	r3, r0
 80077b6:	005a      	lsls	r2, r3, #1
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	18d2      	adds	r2, r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	0019      	movs	r1, r3
 80077c6:	0010      	movs	r0, r2
 80077c8:	f7f8 fcb6 	bl	8000138 <__udivsi3>
 80077cc:	0003      	movs	r3, r0
 80077ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b0f      	cmp	r3, #15
 80077d4:	d91c      	bls.n	8007810 <UART_SetConfig+0x248>
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	2380      	movs	r3, #128	; 0x80
 80077da:	025b      	lsls	r3, r3, #9
 80077dc:	429a      	cmp	r2, r3
 80077de:	d217      	bcs.n	8007810 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	200e      	movs	r0, #14
 80077e6:	183b      	adds	r3, r7, r0
 80077e8:	210f      	movs	r1, #15
 80077ea:	438a      	bics	r2, r1
 80077ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	085b      	lsrs	r3, r3, #1
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2207      	movs	r2, #7
 80077f6:	4013      	ands	r3, r2
 80077f8:	b299      	uxth	r1, r3
 80077fa:	183b      	adds	r3, r7, r0
 80077fc:	183a      	adds	r2, r7, r0
 80077fe:	8812      	ldrh	r2, [r2, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	183a      	adds	r2, r7, r0
 800780a:	8812      	ldrh	r2, [r2, #0]
 800780c:	60da      	str	r2, [r3, #12]
 800780e:	e056      	b.n	80078be <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007810:	231a      	movs	r3, #26
 8007812:	18fb      	adds	r3, r7, r3
 8007814:	2201      	movs	r2, #1
 8007816:	701a      	strb	r2, [r3, #0]
 8007818:	e051      	b.n	80078be <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800781a:	231b      	movs	r3, #27
 800781c:	18fb      	adds	r3, r7, r3
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b08      	cmp	r3, #8
 8007822:	d015      	beq.n	8007850 <UART_SetConfig+0x288>
 8007824:	dc18      	bgt.n	8007858 <UART_SetConfig+0x290>
 8007826:	2b04      	cmp	r3, #4
 8007828:	d00d      	beq.n	8007846 <UART_SetConfig+0x27e>
 800782a:	dc15      	bgt.n	8007858 <UART_SetConfig+0x290>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <UART_SetConfig+0x26e>
 8007830:	2b02      	cmp	r3, #2
 8007832:	d005      	beq.n	8007840 <UART_SetConfig+0x278>
 8007834:	e010      	b.n	8007858 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007836:	f7fd fcdf 	bl	80051f8 <HAL_RCC_GetPCLK1Freq>
 800783a:	0003      	movs	r3, r0
 800783c:	617b      	str	r3, [r7, #20]
        break;
 800783e:	e012      	b.n	8007866 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007840:	4b31      	ldr	r3, [pc, #196]	; (8007908 <UART_SetConfig+0x340>)
 8007842:	617b      	str	r3, [r7, #20]
        break;
 8007844:	e00f      	b.n	8007866 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007846:	f7fd fc4d 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 800784a:	0003      	movs	r3, r0
 800784c:	617b      	str	r3, [r7, #20]
        break;
 800784e:	e00a      	b.n	8007866 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007850:	2380      	movs	r3, #128	; 0x80
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	617b      	str	r3, [r7, #20]
        break;
 8007856:	e006      	b.n	8007866 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800785c:	231a      	movs	r3, #26
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	2201      	movs	r2, #1
 8007862:	701a      	strb	r2, [r3, #0]
        break;
 8007864:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d028      	beq.n	80078be <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007870:	4b26      	ldr	r3, [pc, #152]	; (800790c <UART_SetConfig+0x344>)
 8007872:	0052      	lsls	r2, r2, #1
 8007874:	5ad3      	ldrh	r3, [r2, r3]
 8007876:	0019      	movs	r1, r3
 8007878:	6978      	ldr	r0, [r7, #20]
 800787a:	f7f8 fc5d 	bl	8000138 <__udivsi3>
 800787e:	0003      	movs	r3, r0
 8007880:	001a      	movs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	085b      	lsrs	r3, r3, #1
 8007888:	18d2      	adds	r2, r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	0019      	movs	r1, r3
 8007890:	0010      	movs	r0, r2
 8007892:	f7f8 fc51 	bl	8000138 <__udivsi3>
 8007896:	0003      	movs	r3, r0
 8007898:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	2b0f      	cmp	r3, #15
 800789e:	d90a      	bls.n	80078b6 <UART_SetConfig+0x2ee>
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	2380      	movs	r3, #128	; 0x80
 80078a4:	025b      	lsls	r3, r3, #9
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d205      	bcs.n	80078b6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60da      	str	r2, [r3, #12]
 80078b4:	e003      	b.n	80078be <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80078b6:	231a      	movs	r3, #26
 80078b8:	18fb      	adds	r3, r7, r3
 80078ba:	2201      	movs	r2, #1
 80078bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	226a      	movs	r2, #106	; 0x6a
 80078c2:	2101      	movs	r1, #1
 80078c4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2268      	movs	r2, #104	; 0x68
 80078ca:	2101      	movs	r1, #1
 80078cc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80078da:	231a      	movs	r3, #26
 80078dc:	18fb      	adds	r3, r7, r3
 80078de:	781b      	ldrb	r3, [r3, #0]
}
 80078e0:	0018      	movs	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b008      	add	sp, #32
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	cfff69f3 	.word	0xcfff69f3
 80078ec:	ffffcfff 	.word	0xffffcfff
 80078f0:	11fff4ff 	.word	0x11fff4ff
 80078f4:	40013800 	.word	0x40013800
 80078f8:	40021000 	.word	0x40021000
 80078fc:	40004400 	.word	0x40004400
 8007900:	40004800 	.word	0x40004800
 8007904:	40004c00 	.word	0x40004c00
 8007908:	00f42400 	.word	0x00f42400
 800790c:	0800c7a8 	.word	0x0800c7a8

08007910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	2201      	movs	r2, #1
 800791e:	4013      	ands	r3, r2
 8007920:	d00b      	beq.n	800793a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	4a4a      	ldr	r2, [pc, #296]	; (8007a54 <UART_AdvFeatureConfig+0x144>)
 800792a:	4013      	ands	r3, r2
 800792c:	0019      	movs	r1, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793e:	2202      	movs	r2, #2
 8007940:	4013      	ands	r3, r2
 8007942:	d00b      	beq.n	800795c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	4a43      	ldr	r2, [pc, #268]	; (8007a58 <UART_AdvFeatureConfig+0x148>)
 800794c:	4013      	ands	r3, r2
 800794e:	0019      	movs	r1, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007960:	2204      	movs	r2, #4
 8007962:	4013      	ands	r3, r2
 8007964:	d00b      	beq.n	800797e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4a3b      	ldr	r2, [pc, #236]	; (8007a5c <UART_AdvFeatureConfig+0x14c>)
 800796e:	4013      	ands	r3, r2
 8007970:	0019      	movs	r1, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	2208      	movs	r2, #8
 8007984:	4013      	ands	r3, r2
 8007986:	d00b      	beq.n	80079a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4a34      	ldr	r2, [pc, #208]	; (8007a60 <UART_AdvFeatureConfig+0x150>)
 8007990:	4013      	ands	r3, r2
 8007992:	0019      	movs	r1, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	2210      	movs	r2, #16
 80079a6:	4013      	ands	r3, r2
 80079a8:	d00b      	beq.n	80079c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	4a2c      	ldr	r2, [pc, #176]	; (8007a64 <UART_AdvFeatureConfig+0x154>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	0019      	movs	r1, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	2220      	movs	r2, #32
 80079c8:	4013      	ands	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	4a25      	ldr	r2, [pc, #148]	; (8007a68 <UART_AdvFeatureConfig+0x158>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	0019      	movs	r1, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	2240      	movs	r2, #64	; 0x40
 80079ea:	4013      	ands	r3, r2
 80079ec:	d01d      	beq.n	8007a2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4a1d      	ldr	r2, [pc, #116]	; (8007a6c <UART_AdvFeatureConfig+0x15c>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	0019      	movs	r1, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a0a:	2380      	movs	r3, #128	; 0x80
 8007a0c:	035b      	lsls	r3, r3, #13
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d10b      	bne.n	8007a2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	4a15      	ldr	r2, [pc, #84]	; (8007a70 <UART_AdvFeatureConfig+0x160>)
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	0019      	movs	r1, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	2280      	movs	r2, #128	; 0x80
 8007a30:	4013      	ands	r3, r2
 8007a32:	d00b      	beq.n	8007a4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	4a0e      	ldr	r2, [pc, #56]	; (8007a74 <UART_AdvFeatureConfig+0x164>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	0019      	movs	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	605a      	str	r2, [r3, #4]
  }
}
 8007a4c:	46c0      	nop			; (mov r8, r8)
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b002      	add	sp, #8
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	fffdffff 	.word	0xfffdffff
 8007a58:	fffeffff 	.word	0xfffeffff
 8007a5c:	fffbffff 	.word	0xfffbffff
 8007a60:	ffff7fff 	.word	0xffff7fff
 8007a64:	ffffefff 	.word	0xffffefff
 8007a68:	ffffdfff 	.word	0xffffdfff
 8007a6c:	ffefffff 	.word	0xffefffff
 8007a70:	ff9fffff 	.word	0xff9fffff
 8007a74:	fff7ffff 	.word	0xfff7ffff

08007a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2290      	movs	r2, #144	; 0x90
 8007a84:	2100      	movs	r1, #0
 8007a86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a88:	f7fc fb78 	bl	800417c <HAL_GetTick>
 8007a8c:	0003      	movs	r3, r0
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2208      	movs	r2, #8
 8007a98:	4013      	ands	r3, r2
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d10c      	bne.n	8007ab8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2280      	movs	r2, #128	; 0x80
 8007aa2:	0391      	lsls	r1, r2, #14
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	4a1a      	ldr	r2, [pc, #104]	; (8007b10 <UART_CheckIdleState+0x98>)
 8007aa8:	9200      	str	r2, [sp, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f000 f832 	bl	8007b14 <UART_WaitOnFlagUntilTimeout>
 8007ab0:	1e03      	subs	r3, r0, #0
 8007ab2:	d001      	beq.n	8007ab8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e026      	b.n	8007b06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2204      	movs	r2, #4
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d10c      	bne.n	8007ae0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2280      	movs	r2, #128	; 0x80
 8007aca:	03d1      	lsls	r1, r2, #15
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4a10      	ldr	r2, [pc, #64]	; (8007b10 <UART_CheckIdleState+0x98>)
 8007ad0:	9200      	str	r2, [sp, #0]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f000 f81e 	bl	8007b14 <UART_WaitOnFlagUntilTimeout>
 8007ad8:	1e03      	subs	r3, r0, #0
 8007ada:	d001      	beq.n	8007ae0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e012      	b.n	8007b06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2288      	movs	r2, #136	; 0x88
 8007ae4:	2120      	movs	r1, #32
 8007ae6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	228c      	movs	r2, #140	; 0x8c
 8007aec:	2120      	movs	r1, #32
 8007aee:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2284      	movs	r2, #132	; 0x84
 8007b00:	2100      	movs	r1, #0
 8007b02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	0018      	movs	r0, r3
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	b004      	add	sp, #16
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	46c0      	nop			; (mov r8, r8)
 8007b10:	01ffffff 	.word	0x01ffffff

08007b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b094      	sub	sp, #80	; 0x50
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	1dfb      	adds	r3, r7, #7
 8007b22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b24:	e0a7      	b.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b28:	3301      	adds	r3, #1
 8007b2a:	d100      	bne.n	8007b2e <UART_WaitOnFlagUntilTimeout+0x1a>
 8007b2c:	e0a3      	b.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b2e:	f7fc fb25 	bl	800417c <HAL_GetTick>
 8007b32:	0002      	movs	r2, r0
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d302      	bcc.n	8007b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d13f      	bne.n	8007bc4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b44:	f3ef 8310 	mrs	r3, PRIMASK
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b4e:	2301      	movs	r3, #1
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	f383 8810 	msr	PRIMASK, r3
}
 8007b58:	46c0      	nop			; (mov r8, r8)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	494e      	ldr	r1, [pc, #312]	; (8007ca0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007b66:	400a      	ands	r2, r1
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b6c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	f383 8810 	msr	PRIMASK, r3
}
 8007b74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b76:	f3ef 8310 	mrs	r3, PRIMASK
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	643b      	str	r3, [r7, #64]	; 0x40
 8007b80:	2301      	movs	r3, #1
 8007b82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b86:	f383 8810 	msr	PRIMASK, r3
}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2101      	movs	r1, #1
 8007b98:	438a      	bics	r2, r1
 8007b9a:	609a      	str	r2, [r3, #8]
 8007b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba2:	f383 8810 	msr	PRIMASK, r3
}
 8007ba6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2288      	movs	r2, #136	; 0x88
 8007bac:	2120      	movs	r1, #32
 8007bae:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	228c      	movs	r2, #140	; 0x8c
 8007bb4:	2120      	movs	r1, #32
 8007bb6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2284      	movs	r2, #132	; 0x84
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e069      	b.n	8007c98 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2204      	movs	r2, #4
 8007bcc:	4013      	ands	r3, r2
 8007bce:	d052      	beq.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69da      	ldr	r2, [r3, #28]
 8007bd6:	2380      	movs	r3, #128	; 0x80
 8007bd8:	011b      	lsls	r3, r3, #4
 8007bda:	401a      	ands	r2, r3
 8007bdc:	2380      	movs	r3, #128	; 0x80
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d148      	bne.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2280      	movs	r2, #128	; 0x80
 8007bea:	0112      	lsls	r2, r2, #4
 8007bec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bee:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf2:	613b      	str	r3, [r7, #16]
  return(result);
 8007bf4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f383 8810 	msr	PRIMASK, r3
}
 8007c02:	46c0      	nop			; (mov r8, r8)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4924      	ldr	r1, [pc, #144]	; (8007ca0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007c10:	400a      	ands	r2, r1
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f383 8810 	msr	PRIMASK, r3
}
 8007c1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c20:	f3ef 8310 	mrs	r3, PRIMASK
 8007c24:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c26:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	f383 8810 	msr	PRIMASK, r3
}
 8007c34:	46c0      	nop			; (mov r8, r8)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2101      	movs	r1, #1
 8007c42:	438a      	bics	r2, r1
 8007c44:	609a      	str	r2, [r3, #8]
 8007c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	f383 8810 	msr	PRIMASK, r3
}
 8007c50:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2288      	movs	r2, #136	; 0x88
 8007c56:	2120      	movs	r1, #32
 8007c58:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	228c      	movs	r2, #140	; 0x8c
 8007c5e:	2120      	movs	r1, #32
 8007c60:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2290      	movs	r2, #144	; 0x90
 8007c66:	2120      	movs	r1, #32
 8007c68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2284      	movs	r2, #132	; 0x84
 8007c6e:	2100      	movs	r1, #0
 8007c70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e010      	b.n	8007c98 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	425a      	negs	r2, r3
 8007c86:	4153      	adcs	r3, r2
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	001a      	movs	r2, r3
 8007c8c:	1dfb      	adds	r3, r7, #7
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d100      	bne.n	8007c96 <UART_WaitOnFlagUntilTimeout+0x182>
 8007c94:	e747      	b.n	8007b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	0018      	movs	r0, r3
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	b014      	add	sp, #80	; 0x50
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	fffffe5f 	.word	0xfffffe5f

08007ca4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b098      	sub	sp, #96	; 0x60
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	1dbb      	adds	r3, r7, #6
 8007cb0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	1dba      	adds	r2, r7, #6
 8007cbc:	215c      	movs	r1, #92	; 0x5c
 8007cbe:	8812      	ldrh	r2, [r2, #0]
 8007cc0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	1dba      	adds	r2, r7, #6
 8007cc6:	215e      	movs	r1, #94	; 0x5e
 8007cc8:	8812      	ldrh	r2, [r2, #0]
 8007cca:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	2380      	movs	r3, #128	; 0x80
 8007cd8:	015b      	lsls	r3, r3, #5
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d10d      	bne.n	8007cfa <UART_Start_Receive_IT+0x56>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d104      	bne.n	8007cf0 <UART_Start_Receive_IT+0x4c>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2260      	movs	r2, #96	; 0x60
 8007cea:	497b      	ldr	r1, [pc, #492]	; (8007ed8 <UART_Start_Receive_IT+0x234>)
 8007cec:	5299      	strh	r1, [r3, r2]
 8007cee:	e02e      	b.n	8007d4e <UART_Start_Receive_IT+0xaa>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2260      	movs	r2, #96	; 0x60
 8007cf4:	21ff      	movs	r1, #255	; 0xff
 8007cf6:	5299      	strh	r1, [r3, r2]
 8007cf8:	e029      	b.n	8007d4e <UART_Start_Receive_IT+0xaa>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10d      	bne.n	8007d1e <UART_Start_Receive_IT+0x7a>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d104      	bne.n	8007d14 <UART_Start_Receive_IT+0x70>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2260      	movs	r2, #96	; 0x60
 8007d0e:	21ff      	movs	r1, #255	; 0xff
 8007d10:	5299      	strh	r1, [r3, r2]
 8007d12:	e01c      	b.n	8007d4e <UART_Start_Receive_IT+0xaa>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2260      	movs	r2, #96	; 0x60
 8007d18:	217f      	movs	r1, #127	; 0x7f
 8007d1a:	5299      	strh	r1, [r3, r2]
 8007d1c:	e017      	b.n	8007d4e <UART_Start_Receive_IT+0xaa>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	2380      	movs	r3, #128	; 0x80
 8007d24:	055b      	lsls	r3, r3, #21
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d10d      	bne.n	8007d46 <UART_Start_Receive_IT+0xa2>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d104      	bne.n	8007d3c <UART_Start_Receive_IT+0x98>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2260      	movs	r2, #96	; 0x60
 8007d36:	217f      	movs	r1, #127	; 0x7f
 8007d38:	5299      	strh	r1, [r3, r2]
 8007d3a:	e008      	b.n	8007d4e <UART_Start_Receive_IT+0xaa>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2260      	movs	r2, #96	; 0x60
 8007d40:	213f      	movs	r1, #63	; 0x3f
 8007d42:	5299      	strh	r1, [r3, r2]
 8007d44:	e003      	b.n	8007d4e <UART_Start_Receive_IT+0xaa>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2260      	movs	r2, #96	; 0x60
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2290      	movs	r2, #144	; 0x90
 8007d52:	2100      	movs	r1, #0
 8007d54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	228c      	movs	r2, #140	; 0x8c
 8007d5a:	2122      	movs	r1, #34	; 0x22
 8007d5c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d62:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d68:	2301      	movs	r3, #1
 8007d6a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6e:	f383 8810 	msr	PRIMASK, r3
}
 8007d72:	46c0      	nop			; (mov r8, r8)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2101      	movs	r1, #1
 8007d80:	430a      	orrs	r2, r1
 8007d82:	609a      	str	r2, [r3, #8]
 8007d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d86:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d8a:	f383 8810 	msr	PRIMASK, r3
}
 8007d8e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007d94:	2380      	movs	r3, #128	; 0x80
 8007d96:	059b      	lsls	r3, r3, #22
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d150      	bne.n	8007e3e <UART_Start_Receive_IT+0x19a>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2268      	movs	r2, #104	; 0x68
 8007da0:	5a9b      	ldrh	r3, [r3, r2]
 8007da2:	1dba      	adds	r2, r7, #6
 8007da4:	8812      	ldrh	r2, [r2, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d349      	bcc.n	8007e3e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	689a      	ldr	r2, [r3, #8]
 8007dae:	2380      	movs	r3, #128	; 0x80
 8007db0:	015b      	lsls	r3, r3, #5
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d107      	bne.n	8007dc6 <UART_Start_Receive_IT+0x122>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d103      	bne.n	8007dc6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	4a46      	ldr	r2, [pc, #280]	; (8007edc <UART_Start_Receive_IT+0x238>)
 8007dc2:	675a      	str	r2, [r3, #116]	; 0x74
 8007dc4:	e002      	b.n	8007dcc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4a45      	ldr	r2, [pc, #276]	; (8007ee0 <UART_Start_Receive_IT+0x23c>)
 8007dca:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d019      	beq.n	8007e08 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ddc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dde:	2301      	movs	r3, #1
 8007de0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	f383 8810 	msr	PRIMASK, r3
}
 8007de8:	46c0      	nop			; (mov r8, r8)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2180      	movs	r1, #128	; 0x80
 8007df6:	0049      	lsls	r1, r1, #1
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e02:	f383 8810 	msr	PRIMASK, r3
}
 8007e06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e08:	f3ef 8310 	mrs	r3, PRIMASK
 8007e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e10:	657b      	str	r3, [r7, #84]	; 0x54
 8007e12:	2301      	movs	r3, #1
 8007e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	f383 8810 	msr	PRIMASK, r3
}
 8007e1c:	46c0      	nop			; (mov r8, r8)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689a      	ldr	r2, [r3, #8]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2180      	movs	r1, #128	; 0x80
 8007e2a:	0549      	lsls	r1, r1, #21
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	609a      	str	r2, [r3, #8]
 8007e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e32:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	f383 8810 	msr	PRIMASK, r3
}
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	e047      	b.n	8007ece <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	2380      	movs	r3, #128	; 0x80
 8007e44:	015b      	lsls	r3, r3, #5
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d107      	bne.n	8007e5a <UART_Start_Receive_IT+0x1b6>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d103      	bne.n	8007e5a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4a23      	ldr	r2, [pc, #140]	; (8007ee4 <UART_Start_Receive_IT+0x240>)
 8007e56:	675a      	str	r2, [r3, #116]	; 0x74
 8007e58:	e002      	b.n	8007e60 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4a22      	ldr	r2, [pc, #136]	; (8007ee8 <UART_Start_Receive_IT+0x244>)
 8007e5e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d019      	beq.n	8007e9c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e68:	f3ef 8310 	mrs	r3, PRIMASK
 8007e6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007e6e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e72:	2301      	movs	r3, #1
 8007e74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	f383 8810 	msr	PRIMASK, r3
}
 8007e7c:	46c0      	nop			; (mov r8, r8)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2190      	movs	r1, #144	; 0x90
 8007e8a:	0049      	lsls	r1, r1, #1
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	f383 8810 	msr	PRIMASK, r3
}
 8007e9a:	e018      	b.n	8007ece <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ea2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f383 8810 	msr	PRIMASK, r3
}
 8007eb0:	46c0      	nop			; (mov r8, r8)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2120      	movs	r1, #32
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f383 8810 	msr	PRIMASK, r3
}
 8007ecc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	0018      	movs	r0, r3
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	b018      	add	sp, #96	; 0x60
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	000001ff 	.word	0x000001ff
 8007edc:	08008615 	.word	0x08008615
 8007ee0:	08008329 	.word	0x08008329
 8007ee4:	080081b5 	.word	0x080081b5
 8007ee8:	08008041 	.word	0x08008041

08007eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08e      	sub	sp, #56	; 0x38
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8007efa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007efc:	637b      	str	r3, [r7, #52]	; 0x34
 8007efe:	2301      	movs	r3, #1
 8007f00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	f383 8810 	msr	PRIMASK, r3
}
 8007f08:	46c0      	nop			; (mov r8, r8)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4926      	ldr	r1, [pc, #152]	; (8007fb0 <UART_EndRxTransfer+0xc4>)
 8007f16:	400a      	ands	r2, r1
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f383 8810 	msr	PRIMASK, r3
}
 8007f24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f26:	f3ef 8310 	mrs	r3, PRIMASK
 8007f2a:	623b      	str	r3, [r7, #32]
  return(result);
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f30:	2301      	movs	r3, #1
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	f383 8810 	msr	PRIMASK, r3
}
 8007f3a:	46c0      	nop			; (mov r8, r8)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	491b      	ldr	r1, [pc, #108]	; (8007fb4 <UART_EndRxTransfer+0xc8>)
 8007f48:	400a      	ands	r2, r1
 8007f4a:	609a      	str	r2, [r3, #8]
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	f383 8810 	msr	PRIMASK, r3
}
 8007f56:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d118      	bne.n	8007f92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f60:	f3ef 8310 	mrs	r3, PRIMASK
 8007f64:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f383 8810 	msr	PRIMASK, r3
}
 8007f74:	46c0      	nop			; (mov r8, r8)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2110      	movs	r1, #16
 8007f82:	438a      	bics	r2, r1
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f383 8810 	msr	PRIMASK, r3
}
 8007f90:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	228c      	movs	r2, #140	; 0x8c
 8007f96:	2120      	movs	r1, #32
 8007f98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	b00e      	add	sp, #56	; 0x38
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	fffffedf 	.word	0xfffffedf
 8007fb4:	effffffe 	.word	0xeffffffe

08007fb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	225e      	movs	r2, #94	; 0x5e
 8007fca:	2100      	movs	r1, #0
 8007fcc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2256      	movs	r2, #86	; 0x56
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f7ff fae1 	bl	80075a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fde:	46c0      	nop			; (mov r8, r8)
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b004      	add	sp, #16
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b086      	sub	sp, #24
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fee:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f383 8810 	msr	PRIMASK, r3
}
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2140      	movs	r1, #64	; 0x40
 8008010:	438a      	bics	r2, r1
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f383 8810 	msr	PRIMASK, r3
}
 800801e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2288      	movs	r2, #136	; 0x88
 8008024:	2120      	movs	r1, #32
 8008026:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	0018      	movs	r0, r3
 8008032:	f7ff faad 	bl	8007590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008036:	46c0      	nop			; (mov r8, r8)
 8008038:	46bd      	mov	sp, r7
 800803a:	b006      	add	sp, #24
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b090      	sub	sp, #64	; 0x40
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008048:	203e      	movs	r0, #62	; 0x3e
 800804a:	183b      	adds	r3, r7, r0
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	2160      	movs	r1, #96	; 0x60
 8008050:	5a52      	ldrh	r2, [r2, r1]
 8008052:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	228c      	movs	r2, #140	; 0x8c
 8008058:	589b      	ldr	r3, [r3, r2]
 800805a:	2b22      	cmp	r3, #34	; 0x22
 800805c:	d000      	beq.n	8008060 <UART_RxISR_8BIT+0x20>
 800805e:	e09a      	b.n	8008196 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008066:	213c      	movs	r1, #60	; 0x3c
 8008068:	187b      	adds	r3, r7, r1
 800806a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800806c:	187b      	adds	r3, r7, r1
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b2da      	uxtb	r2, r3
 8008072:	183b      	adds	r3, r7, r0
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	b2d9      	uxtb	r1, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807c:	400a      	ands	r2, r1
 800807e:	b2d2      	uxtb	r2, r2
 8008080:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	225e      	movs	r2, #94	; 0x5e
 8008090:	5a9b      	ldrh	r3, [r3, r2]
 8008092:	b29b      	uxth	r3, r3
 8008094:	3b01      	subs	r3, #1
 8008096:	b299      	uxth	r1, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	225e      	movs	r2, #94	; 0x5e
 800809c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	225e      	movs	r2, #94	; 0x5e
 80080a2:	5a9b      	ldrh	r3, [r3, r2]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d000      	beq.n	80080ac <UART_RxISR_8BIT+0x6c>
 80080aa:	e07c      	b.n	80081a6 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ac:	f3ef 8310 	mrs	r3, PRIMASK
 80080b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80080b2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80080b6:	2301      	movs	r3, #1
 80080b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	f383 8810 	msr	PRIMASK, r3
}
 80080c0:	46c0      	nop			; (mov r8, r8)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4938      	ldr	r1, [pc, #224]	; (80081b0 <UART_RxISR_8BIT+0x170>)
 80080ce:	400a      	ands	r2, r1
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	f383 8810 	msr	PRIMASK, r3
}
 80080dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080de:	f3ef 8310 	mrs	r3, PRIMASK
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e6:	637b      	str	r3, [r7, #52]	; 0x34
 80080e8:	2301      	movs	r3, #1
 80080ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	f383 8810 	msr	PRIMASK, r3
}
 80080f2:	46c0      	nop			; (mov r8, r8)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2101      	movs	r1, #1
 8008100:	438a      	bics	r2, r1
 8008102:	609a      	str	r2, [r3, #8]
 8008104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008106:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	f383 8810 	msr	PRIMASK, r3
}
 800810e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	228c      	movs	r2, #140	; 0x8c
 8008114:	2120      	movs	r1, #32
 8008116:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008128:	2b01      	cmp	r3, #1
 800812a:	d12f      	bne.n	800818c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008132:	f3ef 8310 	mrs	r3, PRIMASK
 8008136:	60fb      	str	r3, [r7, #12]
  return(result);
 8008138:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813a:	633b      	str	r3, [r7, #48]	; 0x30
 800813c:	2301      	movs	r3, #1
 800813e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f383 8810 	msr	PRIMASK, r3
}
 8008146:	46c0      	nop			; (mov r8, r8)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2110      	movs	r1, #16
 8008154:	438a      	bics	r2, r1
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f383 8810 	msr	PRIMASK, r3
}
 8008162:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	2210      	movs	r2, #16
 800816c:	4013      	ands	r3, r2
 800816e:	2b10      	cmp	r3, #16
 8008170:	d103      	bne.n	800817a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2210      	movs	r2, #16
 8008178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	225c      	movs	r2, #92	; 0x5c
 800817e:	5a9a      	ldrh	r2, [r3, r2]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	0011      	movs	r1, r2
 8008184:	0018      	movs	r0, r3
 8008186:	f7ff fa13 	bl	80075b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800818a:	e00c      	b.n	80081a6 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	0018      	movs	r0, r3
 8008190:	f001 fa3a 	bl	8009608 <HAL_UART_RxCpltCallback>
}
 8008194:	e007      	b.n	80081a6 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699a      	ldr	r2, [r3, #24]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2108      	movs	r1, #8
 80081a2:	430a      	orrs	r2, r1
 80081a4:	619a      	str	r2, [r3, #24]
}
 80081a6:	46c0      	nop			; (mov r8, r8)
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b010      	add	sp, #64	; 0x40
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	46c0      	nop			; (mov r8, r8)
 80081b0:	fffffedf 	.word	0xfffffedf

080081b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b090      	sub	sp, #64	; 0x40
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80081bc:	203e      	movs	r0, #62	; 0x3e
 80081be:	183b      	adds	r3, r7, r0
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	2160      	movs	r1, #96	; 0x60
 80081c4:	5a52      	ldrh	r2, [r2, r1]
 80081c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	228c      	movs	r2, #140	; 0x8c
 80081cc:	589b      	ldr	r3, [r3, r2]
 80081ce:	2b22      	cmp	r3, #34	; 0x22
 80081d0:	d000      	beq.n	80081d4 <UART_RxISR_16BIT+0x20>
 80081d2:	e09a      	b.n	800830a <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081da:	213c      	movs	r1, #60	; 0x3c
 80081dc:	187b      	adds	r3, r7, r1
 80081de:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e4:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80081e6:	187b      	adds	r3, r7, r1
 80081e8:	183a      	adds	r2, r7, r0
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	8812      	ldrh	r2, [r2, #0]
 80081ee:	4013      	ands	r3, r2
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fa:	1c9a      	adds	r2, r3, #2
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	225e      	movs	r2, #94	; 0x5e
 8008204:	5a9b      	ldrh	r3, [r3, r2]
 8008206:	b29b      	uxth	r3, r3
 8008208:	3b01      	subs	r3, #1
 800820a:	b299      	uxth	r1, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	225e      	movs	r2, #94	; 0x5e
 8008210:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	225e      	movs	r2, #94	; 0x5e
 8008216:	5a9b      	ldrh	r3, [r3, r2]
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d000      	beq.n	8008220 <UART_RxISR_16BIT+0x6c>
 800821e:	e07c      	b.n	800831a <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008220:	f3ef 8310 	mrs	r3, PRIMASK
 8008224:	617b      	str	r3, [r7, #20]
  return(result);
 8008226:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008228:	637b      	str	r3, [r7, #52]	; 0x34
 800822a:	2301      	movs	r3, #1
 800822c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	f383 8810 	msr	PRIMASK, r3
}
 8008234:	46c0      	nop			; (mov r8, r8)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4938      	ldr	r1, [pc, #224]	; (8008324 <UART_RxISR_16BIT+0x170>)
 8008242:	400a      	ands	r2, r1
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008248:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	f383 8810 	msr	PRIMASK, r3
}
 8008250:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008252:	f3ef 8310 	mrs	r3, PRIMASK
 8008256:	623b      	str	r3, [r7, #32]
  return(result);
 8008258:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825a:	633b      	str	r3, [r7, #48]	; 0x30
 800825c:	2301      	movs	r3, #1
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	f383 8810 	msr	PRIMASK, r3
}
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2101      	movs	r1, #1
 8008274:	438a      	bics	r2, r1
 8008276:	609a      	str	r2, [r3, #8]
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	f383 8810 	msr	PRIMASK, r3
}
 8008282:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	228c      	movs	r2, #140	; 0x8c
 8008288:	2120      	movs	r1, #32
 800828a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829c:	2b01      	cmp	r3, #1
 800829e:	d12f      	bne.n	8008300 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a6:	f3ef 8310 	mrs	r3, PRIMASK
 80082aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80082ac:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082b0:	2301      	movs	r3, #1
 80082b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f383 8810 	msr	PRIMASK, r3
}
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2110      	movs	r1, #16
 80082c8:	438a      	bics	r2, r1
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f383 8810 	msr	PRIMASK, r3
}
 80082d6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	2210      	movs	r2, #16
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b10      	cmp	r3, #16
 80082e4:	d103      	bne.n	80082ee <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2210      	movs	r2, #16
 80082ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	225c      	movs	r2, #92	; 0x5c
 80082f2:	5a9a      	ldrh	r2, [r3, r2]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	0011      	movs	r1, r2
 80082f8:	0018      	movs	r0, r3
 80082fa:	f7ff f959 	bl	80075b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082fe:	e00c      	b.n	800831a <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	0018      	movs	r0, r3
 8008304:	f001 f980 	bl	8009608 <HAL_UART_RxCpltCallback>
}
 8008308:	e007      	b.n	800831a <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	699a      	ldr	r2, [r3, #24]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2108      	movs	r1, #8
 8008316:	430a      	orrs	r2, r1
 8008318:	619a      	str	r2, [r3, #24]
}
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	46bd      	mov	sp, r7
 800831e:	b010      	add	sp, #64	; 0x40
 8008320:	bd80      	pop	{r7, pc}
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	fffffedf 	.word	0xfffffedf

08008328 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b09c      	sub	sp, #112	; 0x70
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008330:	236a      	movs	r3, #106	; 0x6a
 8008332:	18fb      	adds	r3, r7, r3
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	2160      	movs	r1, #96	; 0x60
 8008338:	5a52      	ldrh	r2, [r2, r1]
 800833a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	228c      	movs	r2, #140	; 0x8c
 8008358:	589b      	ldr	r3, [r3, r2]
 800835a:	2b22      	cmp	r3, #34	; 0x22
 800835c:	d000      	beq.n	8008360 <UART_RxISR_8BIT_FIFOEN+0x38>
 800835e:	e144      	b.n	80085ea <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008360:	235e      	movs	r3, #94	; 0x5e
 8008362:	18fb      	adds	r3, r7, r3
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	2168      	movs	r1, #104	; 0x68
 8008368:	5a52      	ldrh	r2, [r2, r1]
 800836a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800836c:	e0eb      	b.n	8008546 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008374:	215c      	movs	r1, #92	; 0x5c
 8008376:	187b      	adds	r3, r7, r1
 8008378:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800837a:	187b      	adds	r3, r7, r1
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b2da      	uxtb	r2, r3
 8008380:	236a      	movs	r3, #106	; 0x6a
 8008382:	18fb      	adds	r3, r7, r3
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	b2d9      	uxtb	r1, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800838c:	400a      	ands	r2, r1
 800838e:	b2d2      	uxtb	r2, r2
 8008390:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	225e      	movs	r2, #94	; 0x5e
 80083a0:	5a9b      	ldrh	r3, [r3, r2]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b299      	uxth	r1, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	225e      	movs	r2, #94	; 0x5e
 80083ac:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b8:	2207      	movs	r2, #7
 80083ba:	4013      	ands	r3, r2
 80083bc:	d049      	beq.n	8008452 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c0:	2201      	movs	r2, #1
 80083c2:	4013      	ands	r3, r2
 80083c4:	d010      	beq.n	80083e8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80083c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083c8:	2380      	movs	r3, #128	; 0x80
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	4013      	ands	r3, r2
 80083ce:	d00b      	beq.n	80083e8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2201      	movs	r2, #1
 80083d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2290      	movs	r2, #144	; 0x90
 80083dc:	589b      	ldr	r3, [r3, r2]
 80083de:	2201      	movs	r2, #1
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2190      	movs	r1, #144	; 0x90
 80083e6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ea:	2202      	movs	r2, #2
 80083ec:	4013      	ands	r3, r2
 80083ee:	d00f      	beq.n	8008410 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80083f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083f2:	2201      	movs	r2, #1
 80083f4:	4013      	ands	r3, r2
 80083f6:	d00b      	beq.n	8008410 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2202      	movs	r2, #2
 80083fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2290      	movs	r2, #144	; 0x90
 8008404:	589b      	ldr	r3, [r3, r2]
 8008406:	2204      	movs	r2, #4
 8008408:	431a      	orrs	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2190      	movs	r1, #144	; 0x90
 800840e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008412:	2204      	movs	r2, #4
 8008414:	4013      	ands	r3, r2
 8008416:	d00f      	beq.n	8008438 <UART_RxISR_8BIT_FIFOEN+0x110>
 8008418:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800841a:	2201      	movs	r2, #1
 800841c:	4013      	ands	r3, r2
 800841e:	d00b      	beq.n	8008438 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2204      	movs	r2, #4
 8008426:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2290      	movs	r2, #144	; 0x90
 800842c:	589b      	ldr	r3, [r3, r2]
 800842e:	2202      	movs	r2, #2
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2190      	movs	r1, #144	; 0x90
 8008436:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2290      	movs	r2, #144	; 0x90
 800843c:	589b      	ldr	r3, [r3, r2]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d007      	beq.n	8008452 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	0018      	movs	r0, r3
 8008446:	f7ff f8ab 	bl	80075a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2290      	movs	r2, #144	; 0x90
 800844e:	2100      	movs	r1, #0
 8008450:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	225e      	movs	r2, #94	; 0x5e
 8008456:	5a9b      	ldrh	r3, [r3, r2]
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d173      	bne.n	8008546 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800845e:	f3ef 8310 	mrs	r3, PRIMASK
 8008462:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008466:	65bb      	str	r3, [r7, #88]	; 0x58
 8008468:	2301      	movs	r3, #1
 800846a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	f383 8810 	msr	PRIMASK, r3
}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4961      	ldr	r1, [pc, #388]	; (8008604 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8008480:	400a      	ands	r2, r1
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008486:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848a:	f383 8810 	msr	PRIMASK, r3
}
 800848e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008490:	f3ef 8310 	mrs	r3, PRIMASK
 8008494:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008498:	657b      	str	r3, [r7, #84]	; 0x54
 800849a:	2301      	movs	r3, #1
 800849c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800849e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a0:	f383 8810 	msr	PRIMASK, r3
}
 80084a4:	46c0      	nop			; (mov r8, r8)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4955      	ldr	r1, [pc, #340]	; (8008608 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80084b2:	400a      	ands	r2, r1
 80084b4:	609a      	str	r2, [r3, #8]
 80084b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084b8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084bc:	f383 8810 	msr	PRIMASK, r3
}
 80084c0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	228c      	movs	r2, #140	; 0x8c
 80084c6:	2120      	movs	r1, #32
 80084c8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d12f      	bne.n	800853e <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084e4:	f3ef 8310 	mrs	r3, PRIMASK
 80084e8:	623b      	str	r3, [r7, #32]
  return(result);
 80084ea:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ec:	653b      	str	r3, [r7, #80]	; 0x50
 80084ee:	2301      	movs	r3, #1
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	f383 8810 	msr	PRIMASK, r3
}
 80084f8:	46c0      	nop			; (mov r8, r8)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2110      	movs	r1, #16
 8008506:	438a      	bics	r2, r1
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800850c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	f383 8810 	msr	PRIMASK, r3
}
 8008514:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	2210      	movs	r2, #16
 800851e:	4013      	ands	r3, r2
 8008520:	2b10      	cmp	r3, #16
 8008522:	d103      	bne.n	800852c <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2210      	movs	r2, #16
 800852a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	225c      	movs	r2, #92	; 0x5c
 8008530:	5a9a      	ldrh	r2, [r3, r2]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	0011      	movs	r1, r2
 8008536:	0018      	movs	r0, r3
 8008538:	f7ff f83a 	bl	80075b0 <HAL_UARTEx_RxEventCallback>
 800853c:	e003      	b.n	8008546 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	0018      	movs	r0, r3
 8008542:	f001 f861 	bl	8009608 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008546:	235e      	movs	r3, #94	; 0x5e
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d004      	beq.n	800855a <UART_RxISR_8BIT_FIFOEN+0x232>
 8008550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008552:	2220      	movs	r2, #32
 8008554:	4013      	ands	r3, r2
 8008556:	d000      	beq.n	800855a <UART_RxISR_8BIT_FIFOEN+0x232>
 8008558:	e709      	b.n	800836e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800855a:	204e      	movs	r0, #78	; 0x4e
 800855c:	183b      	adds	r3, r7, r0
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	215e      	movs	r1, #94	; 0x5e
 8008562:	5a52      	ldrh	r2, [r2, r1]
 8008564:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008566:	0001      	movs	r1, r0
 8008568:	187b      	adds	r3, r7, r1
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d044      	beq.n	80085fa <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2268      	movs	r2, #104	; 0x68
 8008574:	5a9b      	ldrh	r3, [r3, r2]
 8008576:	187a      	adds	r2, r7, r1
 8008578:	8812      	ldrh	r2, [r2, #0]
 800857a:	429a      	cmp	r2, r3
 800857c:	d23d      	bcs.n	80085fa <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800857e:	f3ef 8310 	mrs	r3, PRIMASK
 8008582:	60bb      	str	r3, [r7, #8]
  return(result);
 8008584:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008586:	64bb      	str	r3, [r7, #72]	; 0x48
 8008588:	2301      	movs	r3, #1
 800858a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f383 8810 	msr	PRIMASK, r3
}
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	491b      	ldr	r1, [pc, #108]	; (800860c <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80085a0:	400a      	ands	r2, r1
 80085a2:	609a      	str	r2, [r3, #8]
 80085a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f383 8810 	msr	PRIMASK, r3
}
 80085ae:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a17      	ldr	r2, [pc, #92]	; (8008610 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80085b4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b6:	f3ef 8310 	mrs	r3, PRIMASK
 80085ba:	617b      	str	r3, [r7, #20]
  return(result);
 80085bc:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085be:	647b      	str	r3, [r7, #68]	; 0x44
 80085c0:	2301      	movs	r3, #1
 80085c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f383 8810 	msr	PRIMASK, r3
}
 80085ca:	46c0      	nop			; (mov r8, r8)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2120      	movs	r1, #32
 80085d8:	430a      	orrs	r2, r1
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	f383 8810 	msr	PRIMASK, r3
}
 80085e6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085e8:	e007      	b.n	80085fa <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2108      	movs	r1, #8
 80085f6:	430a      	orrs	r2, r1
 80085f8:	619a      	str	r2, [r3, #24]
}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	46bd      	mov	sp, r7
 80085fe:	b01c      	add	sp, #112	; 0x70
 8008600:	bd80      	pop	{r7, pc}
 8008602:	46c0      	nop			; (mov r8, r8)
 8008604:	fffffeff 	.word	0xfffffeff
 8008608:	effffffe 	.word	0xeffffffe
 800860c:	efffffff 	.word	0xefffffff
 8008610:	08008041 	.word	0x08008041

08008614 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b09e      	sub	sp, #120	; 0x78
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800861c:	2372      	movs	r3, #114	; 0x72
 800861e:	18fb      	adds	r3, r7, r3
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	2160      	movs	r1, #96	; 0x60
 8008624:	5a52      	ldrh	r2, [r2, r1]
 8008626:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	228c      	movs	r2, #140	; 0x8c
 8008644:	589b      	ldr	r3, [r3, r2]
 8008646:	2b22      	cmp	r3, #34	; 0x22
 8008648:	d000      	beq.n	800864c <UART_RxISR_16BIT_FIFOEN+0x38>
 800864a:	e144      	b.n	80088d6 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800864c:	2366      	movs	r3, #102	; 0x66
 800864e:	18fb      	adds	r3, r7, r3
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	2168      	movs	r1, #104	; 0x68
 8008654:	5a52      	ldrh	r2, [r2, r1]
 8008656:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008658:	e0eb      	b.n	8008832 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008660:	2164      	movs	r1, #100	; 0x64
 8008662:	187b      	adds	r3, r7, r1
 8008664:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800866c:	187b      	adds	r3, r7, r1
 800866e:	2272      	movs	r2, #114	; 0x72
 8008670:	18ba      	adds	r2, r7, r2
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	8812      	ldrh	r2, [r2, #0]
 8008676:	4013      	ands	r3, r2
 8008678:	b29a      	uxth	r2, r3
 800867a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800867c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008682:	1c9a      	adds	r2, r3, #2
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	225e      	movs	r2, #94	; 0x5e
 800868c:	5a9b      	ldrh	r3, [r3, r2]
 800868e:	b29b      	uxth	r3, r3
 8008690:	3b01      	subs	r3, #1
 8008692:	b299      	uxth	r1, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	225e      	movs	r2, #94	; 0x5e
 8008698:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086a4:	2207      	movs	r2, #7
 80086a6:	4013      	ands	r3, r2
 80086a8:	d049      	beq.n	800873e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086ac:	2201      	movs	r2, #1
 80086ae:	4013      	ands	r3, r2
 80086b0:	d010      	beq.n	80086d4 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80086b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086b4:	2380      	movs	r3, #128	; 0x80
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	4013      	ands	r3, r2
 80086ba:	d00b      	beq.n	80086d4 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2201      	movs	r2, #1
 80086c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2290      	movs	r2, #144	; 0x90
 80086c8:	589b      	ldr	r3, [r3, r2]
 80086ca:	2201      	movs	r2, #1
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2190      	movs	r1, #144	; 0x90
 80086d2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086d6:	2202      	movs	r2, #2
 80086d8:	4013      	ands	r3, r2
 80086da:	d00f      	beq.n	80086fc <UART_RxISR_16BIT_FIFOEN+0xe8>
 80086dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086de:	2201      	movs	r2, #1
 80086e0:	4013      	ands	r3, r2
 80086e2:	d00b      	beq.n	80086fc <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2202      	movs	r2, #2
 80086ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2290      	movs	r2, #144	; 0x90
 80086f0:	589b      	ldr	r3, [r3, r2]
 80086f2:	2204      	movs	r2, #4
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2190      	movs	r1, #144	; 0x90
 80086fa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086fe:	2204      	movs	r2, #4
 8008700:	4013      	ands	r3, r2
 8008702:	d00f      	beq.n	8008724 <UART_RxISR_16BIT_FIFOEN+0x110>
 8008704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008706:	2201      	movs	r2, #1
 8008708:	4013      	ands	r3, r2
 800870a:	d00b      	beq.n	8008724 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2204      	movs	r2, #4
 8008712:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2290      	movs	r2, #144	; 0x90
 8008718:	589b      	ldr	r3, [r3, r2]
 800871a:	2202      	movs	r2, #2
 800871c:	431a      	orrs	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2190      	movs	r1, #144	; 0x90
 8008722:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2290      	movs	r2, #144	; 0x90
 8008728:	589b      	ldr	r3, [r3, r2]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d007      	beq.n	800873e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	0018      	movs	r0, r3
 8008732:	f7fe ff35 	bl	80075a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2290      	movs	r2, #144	; 0x90
 800873a:	2100      	movs	r1, #0
 800873c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	225e      	movs	r2, #94	; 0x5e
 8008742:	5a9b      	ldrh	r3, [r3, r2]
 8008744:	b29b      	uxth	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d173      	bne.n	8008832 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800874a:	f3ef 8310 	mrs	r3, PRIMASK
 800874e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008752:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008754:	2301      	movs	r3, #1
 8008756:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875a:	f383 8810 	msr	PRIMASK, r3
}
 800875e:	46c0      	nop			; (mov r8, r8)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4961      	ldr	r1, [pc, #388]	; (80088f0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800876c:	400a      	ands	r2, r1
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008772:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	f383 8810 	msr	PRIMASK, r3
}
 800877a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800877c:	f3ef 8310 	mrs	r3, PRIMASK
 8008780:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008784:	65bb      	str	r3, [r7, #88]	; 0x58
 8008786:	2301      	movs	r3, #1
 8008788:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800878a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800878c:	f383 8810 	msr	PRIMASK, r3
}
 8008790:	46c0      	nop			; (mov r8, r8)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4955      	ldr	r1, [pc, #340]	; (80088f4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800879e:	400a      	ands	r2, r1
 80087a0:	609a      	str	r2, [r3, #8]
 80087a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087a4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a8:	f383 8810 	msr	PRIMASK, r3
}
 80087ac:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	228c      	movs	r2, #140	; 0x8c
 80087b2:	2120      	movs	r1, #32
 80087b4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d12f      	bne.n	800882a <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d0:	f3ef 8310 	mrs	r3, PRIMASK
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d8:	657b      	str	r3, [r7, #84]	; 0x54
 80087da:	2301      	movs	r3, #1
 80087dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	f383 8810 	msr	PRIMASK, r3
}
 80087e4:	46c0      	nop			; (mov r8, r8)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2110      	movs	r1, #16
 80087f2:	438a      	bics	r2, r1
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	f383 8810 	msr	PRIMASK, r3
}
 8008800:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	2210      	movs	r2, #16
 800880a:	4013      	ands	r3, r2
 800880c:	2b10      	cmp	r3, #16
 800880e:	d103      	bne.n	8008818 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2210      	movs	r2, #16
 8008816:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	225c      	movs	r2, #92	; 0x5c
 800881c:	5a9a      	ldrh	r2, [r3, r2]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	0011      	movs	r1, r2
 8008822:	0018      	movs	r0, r3
 8008824:	f7fe fec4 	bl	80075b0 <HAL_UARTEx_RxEventCallback>
 8008828:	e003      	b.n	8008832 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	0018      	movs	r0, r3
 800882e:	f000 feeb 	bl	8009608 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008832:	2366      	movs	r3, #102	; 0x66
 8008834:	18fb      	adds	r3, r7, r3
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d004      	beq.n	8008846 <UART_RxISR_16BIT_FIFOEN+0x232>
 800883c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800883e:	2220      	movs	r2, #32
 8008840:	4013      	ands	r3, r2
 8008842:	d000      	beq.n	8008846 <UART_RxISR_16BIT_FIFOEN+0x232>
 8008844:	e709      	b.n	800865a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008846:	2052      	movs	r0, #82	; 0x52
 8008848:	183b      	adds	r3, r7, r0
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	215e      	movs	r1, #94	; 0x5e
 800884e:	5a52      	ldrh	r2, [r2, r1]
 8008850:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008852:	0001      	movs	r1, r0
 8008854:	187b      	adds	r3, r7, r1
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d044      	beq.n	80088e6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2268      	movs	r2, #104	; 0x68
 8008860:	5a9b      	ldrh	r3, [r3, r2]
 8008862:	187a      	adds	r2, r7, r1
 8008864:	8812      	ldrh	r2, [r2, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d23d      	bcs.n	80088e6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800886a:	f3ef 8310 	mrs	r3, PRIMASK
 800886e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008870:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008874:	2301      	movs	r3, #1
 8008876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f383 8810 	msr	PRIMASK, r3
}
 800887e:	46c0      	nop			; (mov r8, r8)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689a      	ldr	r2, [r3, #8]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	491b      	ldr	r1, [pc, #108]	; (80088f8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800888c:	400a      	ands	r2, r1
 800888e:	609a      	str	r2, [r3, #8]
 8008890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008892:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f383 8810 	msr	PRIMASK, r3
}
 800889a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a17      	ldr	r2, [pc, #92]	; (80088fc <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80088a0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a2:	f3ef 8310 	mrs	r3, PRIMASK
 80088a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80088a8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80088ac:	2301      	movs	r3, #1
 80088ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	f383 8810 	msr	PRIMASK, r3
}
 80088b6:	46c0      	nop			; (mov r8, r8)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2120      	movs	r1, #32
 80088c4:	430a      	orrs	r2, r1
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	f383 8810 	msr	PRIMASK, r3
}
 80088d2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088d4:	e007      	b.n	80088e6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699a      	ldr	r2, [r3, #24]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2108      	movs	r1, #8
 80088e2:	430a      	orrs	r2, r1
 80088e4:	619a      	str	r2, [r3, #24]
}
 80088e6:	46c0      	nop			; (mov r8, r8)
 80088e8:	46bd      	mov	sp, r7
 80088ea:	b01e      	add	sp, #120	; 0x78
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	fffffeff 	.word	0xfffffeff
 80088f4:	effffffe 	.word	0xeffffffe
 80088f8:	efffffff 	.word	0xefffffff
 80088fc:	080081b5 	.word	0x080081b5

08008900 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008908:	46c0      	nop			; (mov r8, r8)
 800890a:	46bd      	mov	sp, r7
 800890c:	b002      	add	sp, #8
 800890e:	bd80      	pop	{r7, pc}

08008910 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008918:	46c0      	nop			; (mov r8, r8)
 800891a:	46bd      	mov	sp, r7
 800891c:	b002      	add	sp, #8
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008928:	46c0      	nop			; (mov r8, r8)
 800892a:	46bd      	mov	sp, r7
 800892c:	b002      	add	sp, #8
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2284      	movs	r2, #132	; 0x84
 800893c:	5c9b      	ldrb	r3, [r3, r2]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_UARTEx_DisableFifoMode+0x16>
 8008942:	2302      	movs	r3, #2
 8008944:	e027      	b.n	8008996 <HAL_UARTEx_DisableFifoMode+0x66>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2284      	movs	r2, #132	; 0x84
 800894a:	2101      	movs	r1, #1
 800894c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2288      	movs	r2, #136	; 0x88
 8008952:	2124      	movs	r1, #36	; 0x24
 8008954:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2101      	movs	r1, #1
 800896a:	438a      	bics	r2, r1
 800896c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4a0b      	ldr	r2, [pc, #44]	; (80089a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008972:	4013      	ands	r3, r2
 8008974:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2288      	movs	r2, #136	; 0x88
 8008988:	2120      	movs	r1, #32
 800898a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2284      	movs	r2, #132	; 0x84
 8008990:	2100      	movs	r1, #0
 8008992:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	0018      	movs	r0, r3
 8008998:	46bd      	mov	sp, r7
 800899a:	b004      	add	sp, #16
 800899c:	bd80      	pop	{r7, pc}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	dfffffff 	.word	0xdfffffff

080089a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2284      	movs	r2, #132	; 0x84
 80089b2:	5c9b      	ldrb	r3, [r3, r2]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e02e      	b.n	8008a1a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2284      	movs	r2, #132	; 0x84
 80089c0:	2101      	movs	r1, #1
 80089c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2288      	movs	r2, #136	; 0x88
 80089c8:	2124      	movs	r1, #36	; 0x24
 80089ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2101      	movs	r1, #1
 80089e0:	438a      	bics	r2, r1
 80089e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	08d9      	lsrs	r1, r3, #3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	0018      	movs	r0, r3
 80089fc:	f000 f854 	bl	8008aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2288      	movs	r2, #136	; 0x88
 8008a0c:	2120      	movs	r1, #32
 8008a0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2284      	movs	r2, #132	; 0x84
 8008a14:	2100      	movs	r1, #0
 8008a16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	b004      	add	sp, #16
 8008a20:	bd80      	pop	{r7, pc}
	...

08008a24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2284      	movs	r2, #132	; 0x84
 8008a32:	5c9b      	ldrb	r3, [r3, r2]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d101      	bne.n	8008a3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e02f      	b.n	8008a9c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2284      	movs	r2, #132	; 0x84
 8008a40:	2101      	movs	r1, #1
 8008a42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2288      	movs	r2, #136	; 0x88
 8008a48:	2124      	movs	r1, #36	; 0x24
 8008a4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2101      	movs	r1, #1
 8008a60:	438a      	bics	r2, r1
 8008a62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	4a0e      	ldr	r2, [pc, #56]	; (8008aa4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	0019      	movs	r1, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f000 f813 	bl	8008aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2288      	movs	r2, #136	; 0x88
 8008a8e:	2120      	movs	r1, #32
 8008a90:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2284      	movs	r2, #132	; 0x84
 8008a96:	2100      	movs	r1, #0
 8008a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	b004      	add	sp, #16
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	f1ffffff 	.word	0xf1ffffff

08008aa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d108      	bne.n	8008aca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	226a      	movs	r2, #106	; 0x6a
 8008abc:	2101      	movs	r1, #1
 8008abe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2268      	movs	r2, #104	; 0x68
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ac8:	e043      	b.n	8008b52 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008aca:	260f      	movs	r6, #15
 8008acc:	19bb      	adds	r3, r7, r6
 8008ace:	2208      	movs	r2, #8
 8008ad0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ad2:	200e      	movs	r0, #14
 8008ad4:	183b      	adds	r3, r7, r0
 8008ad6:	2208      	movs	r2, #8
 8008ad8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	0e5b      	lsrs	r3, r3, #25
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	240d      	movs	r4, #13
 8008ae6:	193b      	adds	r3, r7, r4
 8008ae8:	2107      	movs	r1, #7
 8008aea:	400a      	ands	r2, r1
 8008aec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	0f5b      	lsrs	r3, r3, #29
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	250c      	movs	r5, #12
 8008afa:	197b      	adds	r3, r7, r5
 8008afc:	2107      	movs	r1, #7
 8008afe:	400a      	ands	r2, r1
 8008b00:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b02:	183b      	adds	r3, r7, r0
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	197a      	adds	r2, r7, r5
 8008b08:	7812      	ldrb	r2, [r2, #0]
 8008b0a:	4914      	ldr	r1, [pc, #80]	; (8008b5c <UARTEx_SetNbDataToProcess+0xb4>)
 8008b0c:	5c8a      	ldrb	r2, [r1, r2]
 8008b0e:	435a      	muls	r2, r3
 8008b10:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b12:	197b      	adds	r3, r7, r5
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	4a12      	ldr	r2, [pc, #72]	; (8008b60 <UARTEx_SetNbDataToProcess+0xb8>)
 8008b18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b1a:	0019      	movs	r1, r3
 8008b1c:	f7f7 fb96 	bl	800024c <__divsi3>
 8008b20:	0003      	movs	r3, r0
 8008b22:	b299      	uxth	r1, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	226a      	movs	r2, #106	; 0x6a
 8008b28:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b2a:	19bb      	adds	r3, r7, r6
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	193a      	adds	r2, r7, r4
 8008b30:	7812      	ldrb	r2, [r2, #0]
 8008b32:	490a      	ldr	r1, [pc, #40]	; (8008b5c <UARTEx_SetNbDataToProcess+0xb4>)
 8008b34:	5c8a      	ldrb	r2, [r1, r2]
 8008b36:	435a      	muls	r2, r3
 8008b38:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b3a:	193b      	adds	r3, r7, r4
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	4a08      	ldr	r2, [pc, #32]	; (8008b60 <UARTEx_SetNbDataToProcess+0xb8>)
 8008b40:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b42:	0019      	movs	r1, r3
 8008b44:	f7f7 fb82 	bl	800024c <__divsi3>
 8008b48:	0003      	movs	r3, r0
 8008b4a:	b299      	uxth	r1, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2268      	movs	r2, #104	; 0x68
 8008b50:	5299      	strh	r1, [r3, r2]
}
 8008b52:	46c0      	nop			; (mov r8, r8)
 8008b54:	46bd      	mov	sp, r7
 8008b56:	b005      	add	sp, #20
 8008b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	0800c7c0 	.word	0x0800c7c0
 8008b60:	0800c7c8 	.word	0x0800c7c8

08008b64 <PIDInit>:
PIDTypeDef gSpeedPID;
PIDTypeDef gSpeedPID2;
PIDTypeDef gCurrentPID;

void PIDInit(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
    gSpeedPID.SetPoint = 0;    // set the goal speed
 8008b68:	4b1e      	ldr	r3, [pc, #120]	; (8008be4 <PIDInit+0x80>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]
    gSpeedPID.ActualValue = 0; // set the actual speed
 8008b6e:	4b1d      	ldr	r3, [pc, #116]	; (8008be4 <PIDInit+0x80>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	605a      	str	r2, [r3, #4]

    gSpeedPID.SumError = 0;  // set the sum error
 8008b74:	4b1b      	ldr	r3, [pc, #108]	; (8008be4 <PIDInit+0x80>)
 8008b76:	2200      	movs	r2, #0
 8008b78:	609a      	str	r2, [r3, #8]
    gSpeedPID.Error = 0;     // set the current error
 8008b7a:	4b1a      	ldr	r3, [pc, #104]	; (8008be4 <PIDInit+0x80>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	619a      	str	r2, [r3, #24]
    gSpeedPID.LastError = 0; // set the last error
 8008b80:	4b18      	ldr	r3, [pc, #96]	; (8008be4 <PIDInit+0x80>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	61da      	str	r2, [r3, #28]
    gSpeedPID.PrevError = 0; // set the previous error
 8008b86:	4b17      	ldr	r3, [pc, #92]	; (8008be4 <PIDInit+0x80>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	621a      	str	r2, [r3, #32]

    gSpeedPID.Proportion = S_KP; // set the proportion
 8008b8c:	4b15      	ldr	r3, [pc, #84]	; (8008be4 <PIDInit+0x80>)
 8008b8e:	2282      	movs	r2, #130	; 0x82
 8008b90:	05d2      	lsls	r2, r2, #23
 8008b92:	60da      	str	r2, [r3, #12]
    gSpeedPID.Integral = S_KI;   // set the integral
 8008b94:	4b13      	ldr	r3, [pc, #76]	; (8008be4 <PIDInit+0x80>)
 8008b96:	4a14      	ldr	r2, [pc, #80]	; (8008be8 <PIDInit+0x84>)
 8008b98:	611a      	str	r2, [r3, #16]
    gSpeedPID.Derivative = S_KD; // set the derivative
 8008b9a:	4b12      	ldr	r3, [pc, #72]	; (8008be4 <PIDInit+0x80>)
 8008b9c:	22fc      	movs	r2, #252	; 0xfc
 8008b9e:	0592      	lsls	r2, r2, #22
 8008ba0:	615a      	str	r2, [r3, #20]

    gSpeedPID2.SetPoint = 0;    // set the goal speed
 8008ba2:	4b12      	ldr	r3, [pc, #72]	; (8008bec <PIDInit+0x88>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
    gSpeedPID2.ActualValue = 0; // set the actual speed
 8008ba8:	4b10      	ldr	r3, [pc, #64]	; (8008bec <PIDInit+0x88>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	605a      	str	r2, [r3, #4]

    gSpeedPID2.SumError = 0;  // set the sum error
 8008bae:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <PIDInit+0x88>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	609a      	str	r2, [r3, #8]
    gSpeedPID2.Error = 0;     // set the current error
 8008bb4:	4b0d      	ldr	r3, [pc, #52]	; (8008bec <PIDInit+0x88>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	619a      	str	r2, [r3, #24]
    gSpeedPID2.LastError = 0; // set the last error
 8008bba:	4b0c      	ldr	r3, [pc, #48]	; (8008bec <PIDInit+0x88>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	61da      	str	r2, [r3, #28]
    gSpeedPID2.PrevError = 0; // set the previous error
 8008bc0:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <PIDInit+0x88>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	621a      	str	r2, [r3, #32]

    gSpeedPID2.Proportion = S_KP; // set the proportion
 8008bc6:	4b09      	ldr	r3, [pc, #36]	; (8008bec <PIDInit+0x88>)
 8008bc8:	2282      	movs	r2, #130	; 0x82
 8008bca:	05d2      	lsls	r2, r2, #23
 8008bcc:	60da      	str	r2, [r3, #12]
    gSpeedPID2.Integral = S_KI;   // set the integral
 8008bce:	4b07      	ldr	r3, [pc, #28]	; (8008bec <PIDInit+0x88>)
 8008bd0:	4a05      	ldr	r2, [pc, #20]	; (8008be8 <PIDInit+0x84>)
 8008bd2:	611a      	str	r2, [r3, #16]
    gSpeedPID2.Derivative = S_KD; // set the derivative
 8008bd4:	4b05      	ldr	r3, [pc, #20]	; (8008bec <PIDInit+0x88>)
 8008bd6:	22fc      	movs	r2, #252	; 0xfc
 8008bd8:	0592      	lsls	r2, r2, #22
 8008bda:	615a      	str	r2, [r3, #20]

}
 8008bdc:	46c0      	nop			; (mov r8, r8)
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	46c0      	nop			; (mov r8, r8)
 8008be4:	200004d0 	.word	0x200004d0
 8008be8:	3e99999a 	.word	0x3e99999a
 8008bec:	200004f4 	.word	0x200004f4

08008bf0 <incrementPIDControl>:
    gSpeedPID.Derivative = kd;
   // printf("[INFO]: Set PID param to kp: %f, ki: %f, kd: %f\r\n", kp, ki, kd);
}

float incrementPIDControl(PIDTypeDef *pid, float feedbackValue)
{
 8008bf0:	b5b0      	push	{r4, r5, r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
                        + (pid->Derivative * (pid->Error - 2 * pid->LastError + pid->PrevError)); // derivative term
    pid->PrevError = pid->LastError;                                                              // save the previous error
    pid->LastError = pid->Error;  */                                                                 // save the last error
//（location PID）

    pid->Error = (float)(pid->SetPoint - feedbackValue);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	1c18      	adds	r0, r3, #0
 8008c02:	f7f8 f93f 	bl	8000e84 <__aeabi_fsub>
 8008c06:	1c03      	adds	r3, r0, #0
 8008c08:	1c1a      	adds	r2, r3, #0
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	619a      	str	r2, [r3, #24]
    pid->SumError += pid->Error;                                            // calculate the sum error
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	1c19      	adds	r1, r3, #0
 8008c18:	1c10      	adds	r0, r2, #0
 8008c1a:	f7f7 fc7b 	bl	8000514 <__aeabi_fadd>
 8008c1e:	1c03      	adds	r3, r0, #0
 8008c20:	1c1a      	adds	r2, r3, #0
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	609a      	str	r2, [r3, #8]
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	1c19      	adds	r1, r3, #0
 8008c30:	1c10      	adds	r0, r2, #0
 8008c32:	f7f7 ffd9 	bl	8000be8 <__aeabi_fmul>
 8008c36:	1c03      	adds	r3, r0, #0
 8008c38:	1c1c      	adds	r4, r3, #0
                       + (pid->Integral * pid->SumError)                    // integral term
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691a      	ldr	r2, [r3, #16]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	1c19      	adds	r1, r3, #0
 8008c44:	1c10      	adds	r0, r2, #0
 8008c46:	f7f7 ffcf 	bl	8000be8 <__aeabi_fmul>
 8008c4a:	1c03      	adds	r3, r0, #0
 8008c4c:	1c19      	adds	r1, r3, #0
 8008c4e:	1c20      	adds	r0, r4, #0
 8008c50:	f7f7 fc60 	bl	8000514 <__aeabi_fadd>
 8008c54:	1c03      	adds	r3, r0, #0
 8008c56:	1c1d      	adds	r5, r3, #0
                       + (pid->Derivative * (pid->Error - pid->LastError)); // derivative term
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	695c      	ldr	r4, [r3, #20]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699a      	ldr	r2, [r3, #24]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	1c19      	adds	r1, r3, #0
 8008c66:	1c10      	adds	r0, r2, #0
 8008c68:	f7f8 f90c 	bl	8000e84 <__aeabi_fsub>
 8008c6c:	1c03      	adds	r3, r0, #0
 8008c6e:	1c19      	adds	r1, r3, #0
 8008c70:	1c20      	adds	r0, r4, #0
 8008c72:	f7f7 ffb9 	bl	8000be8 <__aeabi_fmul>
 8008c76:	1c03      	adds	r3, r0, #0
 8008c78:	1c19      	adds	r1, r3, #0
 8008c7a:	1c28      	adds	r0, r5, #0
 8008c7c:	f7f7 fc4a 	bl	8000514 <__aeabi_fadd>
 8008c80:	1c03      	adds	r3, r0, #0
 8008c82:	1c1a      	adds	r2, r3, #0
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	605a      	str	r2, [r3, #4]
    pid->LastError = pid->Error;                                            // save the last error
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699a      	ldr	r2, [r3, #24]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	61da      	str	r2, [r3, #28]

   //  printf("[INFO]: pid->ActualValue: %f\n", pid->ActualValue);
    return (float)pid->ActualValue; // return the expected value after PID control calculation
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
}
 8008c94:	1c18      	adds	r0, r3, #0
 8008c96:	46bd      	mov	sp, r7
 8008c98:	b002      	add	sp, #8
 8008c9a:	bdb0      	pop	{r4, r5, r7, pc}

08008c9c <incrementPIDControl2>:

float incrementPIDControl2(PIDTypeDef *pid, float feedbackValue)
{
 8008c9c:	b5b0      	push	{r4, r5, r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
                        + (pid->Derivative * (pid->Error - 2 * pid->LastError + pid->PrevError)); // derivative term
    pid->PrevError = pid->LastError;                                                              // save the previous error
    pid->LastError = pid->Error;  */                                                                 // save the last error
//（location PID）

    pid->Error = (float)(pid->SetPoint - feedbackValue);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	1c18      	adds	r0, r3, #0
 8008cae:	f7f8 f8e9 	bl	8000e84 <__aeabi_fsub>
 8008cb2:	1c03      	adds	r3, r0, #0
 8008cb4:	1c1a      	adds	r2, r3, #0
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	619a      	str	r2, [r3, #24]
    pid->SumError += pid->Error;                                            // calculate the sum error
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	1c19      	adds	r1, r3, #0
 8008cc4:	1c10      	adds	r0, r2, #0
 8008cc6:	f7f7 fc25 	bl	8000514 <__aeabi_fadd>
 8008cca:	1c03      	adds	r3, r0, #0
 8008ccc:	1c1a      	adds	r2, r3, #0
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	609a      	str	r2, [r3, #8]
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	1c19      	adds	r1, r3, #0
 8008cdc:	1c10      	adds	r0, r2, #0
 8008cde:	f7f7 ff83 	bl	8000be8 <__aeabi_fmul>
 8008ce2:	1c03      	adds	r3, r0, #0
 8008ce4:	1c1c      	adds	r4, r3, #0
                       + (pid->Integral * pid->SumError)                    // integral term
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691a      	ldr	r2, [r3, #16]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	1c19      	adds	r1, r3, #0
 8008cf0:	1c10      	adds	r0, r2, #0
 8008cf2:	f7f7 ff79 	bl	8000be8 <__aeabi_fmul>
 8008cf6:	1c03      	adds	r3, r0, #0
 8008cf8:	1c19      	adds	r1, r3, #0
 8008cfa:	1c20      	adds	r0, r4, #0
 8008cfc:	f7f7 fc0a 	bl	8000514 <__aeabi_fadd>
 8008d00:	1c03      	adds	r3, r0, #0
 8008d02:	1c1d      	adds	r5, r3, #0
                       + (pid->Derivative * (pid->Error - pid->LastError)); // derivative term
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	695c      	ldr	r4, [r3, #20]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	699a      	ldr	r2, [r3, #24]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	1c19      	adds	r1, r3, #0
 8008d12:	1c10      	adds	r0, r2, #0
 8008d14:	f7f8 f8b6 	bl	8000e84 <__aeabi_fsub>
 8008d18:	1c03      	adds	r3, r0, #0
 8008d1a:	1c19      	adds	r1, r3, #0
 8008d1c:	1c20      	adds	r0, r4, #0
 8008d1e:	f7f7 ff63 	bl	8000be8 <__aeabi_fmul>
 8008d22:	1c03      	adds	r3, r0, #0
 8008d24:	1c19      	adds	r1, r3, #0
 8008d26:	1c28      	adds	r0, r5, #0
 8008d28:	f7f7 fbf4 	bl	8000514 <__aeabi_fadd>
 8008d2c:	1c03      	adds	r3, r0, #0
 8008d2e:	1c1a      	adds	r2, r3, #0
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	605a      	str	r2, [r3, #4]
    pid->LastError = pid->Error;                                            // save the last error
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	699a      	ldr	r2, [r3, #24]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	61da      	str	r2, [r3, #28]

   //  printf("[INFO]: pid->ActualValue: %f\n", pid->ActualValue);
    return (float)pid->ActualValue; // return the expected value after PID control calculation
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
}
 8008d40:	1c18      	adds	r0, r3, #0
 8008d42:	46bd      	mov	sp, r7
 8008d44:	b002      	add	sp, #8
 8008d46:	bdb0      	pop	{r4, r5, r7, pc}

08008d48 <dcMotorInit>:
    gMotorData.state = MOTOR_STATE_START;
}

// founction to init the motor
void dcMotorInit(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
    gencodeSpeed.encode_now = 0;
 8008d4c:	4b1c      	ldr	r3, [pc, #112]	; (8008dc0 <dcMotorInit+0x78>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	605a      	str	r2, [r3, #4]
    gencodeSpeed.encode_old = 0;
 8008d52:	4b1b      	ldr	r3, [pc, #108]	; (8008dc0 <dcMotorInit+0x78>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]
    gencodeSpeed.speed = 0;
 8008d58:	4b19      	ldr	r3, [pc, #100]	; (8008dc0 <dcMotorInit+0x78>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	609a      	str	r2, [r3, #8]
    gMotorData.state = MOTOR_STATE_STOP;
 8008d5e:	4b19      	ldr	r3, [pc, #100]	; (8008dc4 <dcMotorInit+0x7c>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	701a      	strb	r2, [r3, #0]
    gMotorData.direction = 1;
 8008d64:	4b17      	ldr	r3, [pc, #92]	; (8008dc4 <dcMotorInit+0x7c>)
 8008d66:	2201      	movs	r2, #1
 8008d68:	705a      	strb	r2, [r3, #1]
    gMotorData.current = 0;
 8008d6a:	4b16      	ldr	r3, [pc, #88]	; (8008dc4 <dcMotorInit+0x7c>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	605a      	str	r2, [r3, #4]
    gMotorData.voltage = 0;
 8008d70:	4b14      	ldr	r3, [pc, #80]	; (8008dc4 <dcMotorInit+0x7c>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	609a      	str	r2, [r3, #8]
    gMotorData.speed = 0;
 8008d76:	4b13      	ldr	r3, [pc, #76]	; (8008dc4 <dcMotorInit+0x7c>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	60da      	str	r2, [r3, #12]
    gMotorData.motorPWM = 0;
 8008d7c:	4b11      	ldr	r3, [pc, #68]	; (8008dc4 <dcMotorInit+0x7c>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	611a      	str	r2, [r3, #16]
    gencodeSpeed2.encode_now = 0;
 8008d82:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <dcMotorInit+0x80>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	605a      	str	r2, [r3, #4]
    gencodeSpeed2.encode_old = 0;
 8008d88:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <dcMotorInit+0x80>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]
    gencodeSpeed2.speed = 0;
 8008d8e:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <dcMotorInit+0x80>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	609a      	str	r2, [r3, #8]
    gMotorData2.state = MOTOR_STATE_STOP;
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <dcMotorInit+0x84>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
    gMotorData2.direction = 1;
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <dcMotorInit+0x84>)
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	705a      	strb	r2, [r3, #1]
    gMotorData2.current = 0;
 8008da0:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <dcMotorInit+0x84>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	605a      	str	r2, [r3, #4]
    gMotorData2.voltage = 0;
 8008da6:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <dcMotorInit+0x84>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	609a      	str	r2, [r3, #8]
    gMotorData2.speed = 0;
 8008dac:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <dcMotorInit+0x84>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	60da      	str	r2, [r3, #12]
    gMotorData2.motorPWM = 0;
 8008db2:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <dcMotorInit+0x84>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	611a      	str	r2, [r3, #16]
}
 8008db8:	46c0      	nop			; (mov r8, r8)
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	46c0      	nop			; (mov r8, r8)
 8008dc0:	20000518 	.word	0x20000518
 8008dc4:	20000530 	.word	0x20000530
 8008dc8:	20000524 	.word	0x20000524
 8008dcc:	20000544 	.word	0x20000544

08008dd0 <speedCompute>:
float speedArray2[10] = {0.0};

int32_t speedArrayFilterIndex = 0;
int32_t speedArrayFilterIndex2 = 0;
void speedCompute(int encode_now, uint8_t computePerms)
{
 8008dd0:	b5b0      	push	{r4, r5, r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	000a      	movs	r2, r1
 8008dda:	1cfb      	adds	r3, r7, #3
 8008ddc:	701a      	strb	r2, [r3, #0]
    if (speedComputeCount == computePerms)
 8008dde:	1cfb      	adds	r3, r7, #3
 8008de0:	781a      	ldrb	r2, [r3, #0]
 8008de2:	4b68      	ldr	r3, [pc, #416]	; (8008f84 <speedCompute+0x1b4>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d000      	beq.n	8008dec <speedCompute+0x1c>
 8008dea:	e0c2      	b.n	8008f72 <speedCompute+0x1a2>
    {
        gencodeSpeed.encode_now = encode_now;
 8008dec:	4b66      	ldr	r3, [pc, #408]	; (8008f88 <speedCompute+0x1b8>)
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	605a      	str	r2, [r3, #4]
   //     printf("now:%d\r\n",gencodeSpeed.encode_now);
  //      printf("gencodeSpeed.encode_old:%d\r\n",gencodeSpeed.encode_old);
        gencodeSpeed.speed = (encode_now - gencodeSpeed.encode_old);
 8008df2:	4b65      	ldr	r3, [pc, #404]	; (8008f88 <speedCompute+0x1b8>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	0018      	movs	r0, r3
 8008dfc:	f7f8 fa02 	bl	8001204 <__aeabi_i2f>
 8008e00:	1c02      	adds	r2, r0, #0
 8008e02:	4b61      	ldr	r3, [pc, #388]	; (8008f88 <speedCompute+0x1b8>)
 8008e04:	609a      	str	r2, [r3, #8]
    //    printf("avant:%f\r\n", gMotorData.speed);
      //  printf("123\n");
//SPEED_COMPUTE_PER_S /  1s
        //calculte speed motor (tour/minute) : g_encode.speed * ((1000 / 100ms) *60 )/44/20  maxspeed （300*2pi/60）  现在是rpm 每分钟
       speedArray[speedArrayFilterIndex++] = (float)(gencodeSpeed.speed * (SPEED_COMPUTE_PER_S /computePerms )* 60  / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RADGEAR_RATIO
 8008e06:	4b60      	ldr	r3, [pc, #384]	; (8008f88 <speedCompute+0x1b8>)
 8008e08:	689c      	ldr	r4, [r3, #8]
 8008e0a:	1cfb      	adds	r3, r7, #3
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	0019      	movs	r1, r3
 8008e10:	200a      	movs	r0, #10
 8008e12:	f7f7 fa1b 	bl	800024c <__divsi3>
 8008e16:	0003      	movs	r3, r0
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f7f8 f9f3 	bl	8001204 <__aeabi_i2f>
 8008e1e:	1c03      	adds	r3, r0, #0
 8008e20:	1c19      	adds	r1, r3, #0
 8008e22:	1c20      	adds	r0, r4, #0
 8008e24:	f7f7 fee0 	bl	8000be8 <__aeabi_fmul>
 8008e28:	1c03      	adds	r3, r0, #0
 8008e2a:	4958      	ldr	r1, [pc, #352]	; (8008f8c <speedCompute+0x1bc>)
 8008e2c:	1c18      	adds	r0, r3, #0
 8008e2e:	f7f7 fedb 	bl	8000be8 <__aeabi_fmul>
 8008e32:	1c03      	adds	r3, r0, #0
 8008e34:	2181      	movs	r1, #129	; 0x81
 8008e36:	05c9      	lsls	r1, r1, #23
 8008e38:	1c18      	adds	r0, r3, #0
 8008e3a:	f7f7 fd0b 	bl	8000854 <__aeabi_fdiv>
 8008e3e:	1c03      	adds	r3, r0, #0
 8008e40:	4953      	ldr	r1, [pc, #332]	; (8008f90 <speedCompute+0x1c0>)
 8008e42:	1c18      	adds	r0, r3, #0
 8008e44:	f7f7 fd06 	bl	8000854 <__aeabi_fdiv>
 8008e48:	1c03      	adds	r3, r0, #0
 8008e4a:	1c18      	adds	r0, r3, #0
 8008e4c:	4b51      	ldr	r3, [pc, #324]	; (8008f94 <speedCompute+0x1c4>)
 8008e4e:	681c      	ldr	r4, [r3, #0]
 8008e50:	1c62      	adds	r2, r4, #1
 8008e52:	4b50      	ldr	r3, [pc, #320]	; (8008f94 <speedCompute+0x1c4>)
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	4950      	ldr	r1, [pc, #320]	; (8008f98 <speedCompute+0x1c8>)
 8008e58:	f7f7 fcfc 	bl	8000854 <__aeabi_fdiv>
 8008e5c:	1c03      	adds	r3, r0, #0
 8008e5e:	1c19      	adds	r1, r3, #0
 8008e60:	4b4e      	ldr	r3, [pc, #312]	; (8008f9c <speedCompute+0x1cc>)
 8008e62:	00a2      	lsls	r2, r4, #2
 8008e64:	50d1      	str	r1, [r2, r3]
  //     gMotorData.speed = (float)(gencodeSpeed.speed * (SPEED_COMPUTE_PER_S / computePerms ) / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RAD
      //  printf("speedcompute:%f\r\n", gMotorData.speed);  //gMotorData.speed
        gencodeSpeed.encode_old = gencodeSpeed.encode_now;
 8008e66:	4b48      	ldr	r3, [pc, #288]	; (8008f88 <speedCompute+0x1b8>)
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	4b47      	ldr	r3, [pc, #284]	; (8008f88 <speedCompute+0x1b8>)
 8008e6c:	601a      	str	r2, [r3, #0]
       //  after 10 times of speed calculation, filter the speed data
        if (speedArrayFilterIndex == 10)
 8008e6e:	4b49      	ldr	r3, [pc, #292]	; (8008f94 <speedCompute+0x1c4>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b0a      	cmp	r3, #10
 8008e74:	d000      	beq.n	8008e78 <speedCompute+0xa8>
 8008e76:	e079      	b.n	8008f6c <speedCompute+0x19c>
        {
            // bubble sort
            float temp = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < 10; i++)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	613b      	str	r3, [r7, #16]
 8008e80:	e030      	b.n	8008ee4 <speedCompute+0x114>
            {
                for (int j = 0; j < 10 - i - 1; j++)
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	e024      	b.n	8008ed2 <speedCompute+0x102>
                {
                    if (speedArray[j] > speedArray[j + 1])
 8008e88:	4b44      	ldr	r3, [pc, #272]	; (8008f9c <speedCompute+0x1cc>)
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	0092      	lsls	r2, r2, #2
 8008e8e:	58d0      	ldr	r0, [r2, r3]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	4b41      	ldr	r3, [pc, #260]	; (8008f9c <speedCompute+0x1cc>)
 8008e96:	0092      	lsls	r2, r2, #2
 8008e98:	58d3      	ldr	r3, [r2, r3]
 8008e9a:	1c19      	adds	r1, r3, #0
 8008e9c:	f7f7 fb26 	bl	80004ec <__aeabi_fcmpgt>
 8008ea0:	1e03      	subs	r3, r0, #0
 8008ea2:	d013      	beq.n	8008ecc <speedCompute+0xfc>
                    {
                        temp = speedArray[j];
 8008ea4:	4b3d      	ldr	r3, [pc, #244]	; (8008f9c <speedCompute+0x1cc>)
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	0092      	lsls	r2, r2, #2
 8008eaa:	58d3      	ldr	r3, [r2, r3]
 8008eac:	617b      	str	r3, [r7, #20]
                        speedArray[j] = speedArray[j + 1];
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	4b3a      	ldr	r3, [pc, #232]	; (8008f9c <speedCompute+0x1cc>)
 8008eb4:	0092      	lsls	r2, r2, #2
 8008eb6:	58d1      	ldr	r1, [r2, r3]
 8008eb8:	4b38      	ldr	r3, [pc, #224]	; (8008f9c <speedCompute+0x1cc>)
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	0092      	lsls	r2, r2, #2
 8008ebe:	50d1      	str	r1, [r2, r3]
                        speedArray[j + 1] = temp;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	4b35      	ldr	r3, [pc, #212]	; (8008f9c <speedCompute+0x1cc>)
 8008ec6:	0092      	lsls	r2, r2, #2
 8008ec8:	6979      	ldr	r1, [r7, #20]
 8008eca:	50d1      	str	r1, [r2, r3]
                for (int j = 0; j < 10 - i - 1; j++)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2209      	movs	r2, #9
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	dbd4      	blt.n	8008e88 <speedCompute+0xb8>
            for (int i = 0; i < 10; i++)
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	613b      	str	r3, [r7, #16]
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	ddcb      	ble.n	8008e82 <speedCompute+0xb2>
                    }
                }
            }

            temp = 0.0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	617b      	str	r3, [r7, #20]
            // using the middle 6 data to calculate the average value
            for (int i = 2; i < 8; i++)
 8008eee:	2302      	movs	r3, #2
 8008ef0:	60bb      	str	r3, [r7, #8]
 8008ef2:	e00c      	b.n	8008f0e <speedCompute+0x13e>
            {
                temp += speedArray[i];
 8008ef4:	4b29      	ldr	r3, [pc, #164]	; (8008f9c <speedCompute+0x1cc>)
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	0092      	lsls	r2, r2, #2
 8008efa:	58d3      	ldr	r3, [r2, r3]
 8008efc:	1c19      	adds	r1, r3, #0
 8008efe:	6978      	ldr	r0, [r7, #20]
 8008f00:	f7f7 fb08 	bl	8000514 <__aeabi_fadd>
 8008f04:	1c03      	adds	r3, r0, #0
 8008f06:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < 8; i++)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	60bb      	str	r3, [r7, #8]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b07      	cmp	r3, #7
 8008f12:	ddef      	ble.n	8008ef4 <speedCompute+0x124>
            }
            // calculate the average value
            temp = temp / 6;
 8008f14:	4922      	ldr	r1, [pc, #136]	; (8008fa0 <speedCompute+0x1d0>)
 8008f16:	6978      	ldr	r0, [r7, #20]
 8008f18:	f7f7 fc9c 	bl	8000854 <__aeabi_fdiv>
 8008f1c:	1c03      	adds	r3, r0, #0
 8008f1e:	617b      	str	r3, [r7, #20]
            // low pass filter
            // Y(n)= qX(n) + (1-q)Y(n-1)
            // X(n) is the current input, Y(n) is the current output, Y(n-1) is the previous output, and q is the filter factor.
            // The larger the q, the stronger the filtering effect, but the slower the response.
            gMotorData.speed = (float)((double)temp * 0.5 + (double)gMotorData.speed * 0.5);
 8008f20:	6978      	ldr	r0, [r7, #20]
 8008f22:	f7fa f809 	bl	8002f38 <__aeabi_f2d>
 8008f26:	2200      	movs	r2, #0
 8008f28:	4b1e      	ldr	r3, [pc, #120]	; (8008fa4 <speedCompute+0x1d4>)
 8008f2a:	f7f9 f917 	bl	800215c <__aeabi_dmul>
 8008f2e:	0002      	movs	r2, r0
 8008f30:	000b      	movs	r3, r1
 8008f32:	0014      	movs	r4, r2
 8008f34:	001d      	movs	r5, r3
 8008f36:	4b1c      	ldr	r3, [pc, #112]	; (8008fa8 <speedCompute+0x1d8>)
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	1c18      	adds	r0, r3, #0
 8008f3c:	f7f9 fffc 	bl	8002f38 <__aeabi_f2d>
 8008f40:	2200      	movs	r2, #0
 8008f42:	4b18      	ldr	r3, [pc, #96]	; (8008fa4 <speedCompute+0x1d4>)
 8008f44:	f7f9 f90a 	bl	800215c <__aeabi_dmul>
 8008f48:	0002      	movs	r2, r0
 8008f4a:	000b      	movs	r3, r1
 8008f4c:	0020      	movs	r0, r4
 8008f4e:	0029      	movs	r1, r5
 8008f50:	f7f8 f9aa 	bl	80012a8 <__aeabi_dadd>
 8008f54:	0002      	movs	r2, r0
 8008f56:	000b      	movs	r3, r1
 8008f58:	0010      	movs	r0, r2
 8008f5a:	0019      	movs	r1, r3
 8008f5c:	f7fa f834 	bl	8002fc8 <__aeabi_d2f>
 8008f60:	1c02      	adds	r2, r0, #0
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <speedCompute+0x1d8>)
 8008f64:	60da      	str	r2, [r3, #12]

            speedArrayFilterIndex = 0;
 8008f66:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <speedCompute+0x1c4>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	601a      	str	r2, [r3, #0]
        }
        speedComputeCount = 0;
 8008f6c:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <speedCompute+0x1b4>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
    }
    speedComputeCount++;
 8008f72:	4b04      	ldr	r3, [pc, #16]	; (8008f84 <speedCompute+0x1b4>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	4b02      	ldr	r3, [pc, #8]	; (8008f84 <speedCompute+0x1b4>)
 8008f7a:	601a      	str	r2, [r3, #0]
}
 8008f7c:	46c0      	nop			; (mov r8, r8)
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	b006      	add	sp, #24
 8008f82:	bdb0      	pop	{r4, r5, r7, pc}
 8008f84:	20000560 	.word	0x20000560
 8008f88:	20000518 	.word	0x20000518
 8008f8c:	42700000 	.word	0x42700000
 8008f90:	41300000 	.word	0x41300000
 8008f94:	200005b8 	.word	0x200005b8
 8008f98:	41a00000 	.word	0x41a00000
 8008f9c:	20000568 	.word	0x20000568
 8008fa0:	40c00000 	.word	0x40c00000
 8008fa4:	3fe00000 	.word	0x3fe00000
 8008fa8:	20000530 	.word	0x20000530

08008fac <speedCompute2>:



void speedCompute2(int encode_now, uint8_t computePerms)
{
 8008fac:	b5b0      	push	{r4, r5, r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	000a      	movs	r2, r1
 8008fb6:	1cfb      	adds	r3, r7, #3
 8008fb8:	701a      	strb	r2, [r3, #0]
    if (speedComputeCount2 == computePerms)
 8008fba:	1cfb      	adds	r3, r7, #3
 8008fbc:	781a      	ldrb	r2, [r3, #0]
 8008fbe:	4b68      	ldr	r3, [pc, #416]	; (8009160 <speedCompute2+0x1b4>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d000      	beq.n	8008fc8 <speedCompute2+0x1c>
 8008fc6:	e0c2      	b.n	800914e <speedCompute2+0x1a2>
    {
        gencodeSpeed2.encode_now = encode_now;
 8008fc8:	4b66      	ldr	r3, [pc, #408]	; (8009164 <speedCompute2+0x1b8>)
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	605a      	str	r2, [r3, #4]
   //     printf("now:%d\r\n",gencodeSpeed.encode_now);
  //      printf("gencodeSpeed.encode_old:%d\r\n",gencodeSpeed.encode_old);
        gencodeSpeed2.speed = (encode_now - gencodeSpeed2.encode_old);
 8008fce:	4b65      	ldr	r3, [pc, #404]	; (8009164 <speedCompute2+0x1b8>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	f7f8 f914 	bl	8001204 <__aeabi_i2f>
 8008fdc:	1c02      	adds	r2, r0, #0
 8008fde:	4b61      	ldr	r3, [pc, #388]	; (8009164 <speedCompute2+0x1b8>)
 8008fe0:	609a      	str	r2, [r3, #8]
    //    printf("avant:%f\r\n", gMotorData.speed);
      //  printf("123\n");
//SPEED_COMPUTE_PER_S /  1s
        //calculte speed motor (tour/minute) : g_encode.speed * ((1000 / 100ms) *60 )/44/20  maxspeed （300*2pi/60）  现在是rpm 每分钟
       speedArray2[speedArrayFilterIndex2++] = (float)(gencodeSpeed2.speed * (SPEED_COMPUTE_PER_S /computePerms )* 60  / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RADGEAR_RATIO
 8008fe2:	4b60      	ldr	r3, [pc, #384]	; (8009164 <speedCompute2+0x1b8>)
 8008fe4:	689c      	ldr	r4, [r3, #8]
 8008fe6:	1cfb      	adds	r3, r7, #3
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	0019      	movs	r1, r3
 8008fec:	200a      	movs	r0, #10
 8008fee:	f7f7 f92d 	bl	800024c <__divsi3>
 8008ff2:	0003      	movs	r3, r0
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	f7f8 f905 	bl	8001204 <__aeabi_i2f>
 8008ffa:	1c03      	adds	r3, r0, #0
 8008ffc:	1c19      	adds	r1, r3, #0
 8008ffe:	1c20      	adds	r0, r4, #0
 8009000:	f7f7 fdf2 	bl	8000be8 <__aeabi_fmul>
 8009004:	1c03      	adds	r3, r0, #0
 8009006:	4958      	ldr	r1, [pc, #352]	; (8009168 <speedCompute2+0x1bc>)
 8009008:	1c18      	adds	r0, r3, #0
 800900a:	f7f7 fded 	bl	8000be8 <__aeabi_fmul>
 800900e:	1c03      	adds	r3, r0, #0
 8009010:	2181      	movs	r1, #129	; 0x81
 8009012:	05c9      	lsls	r1, r1, #23
 8009014:	1c18      	adds	r0, r3, #0
 8009016:	f7f7 fc1d 	bl	8000854 <__aeabi_fdiv>
 800901a:	1c03      	adds	r3, r0, #0
 800901c:	4953      	ldr	r1, [pc, #332]	; (800916c <speedCompute2+0x1c0>)
 800901e:	1c18      	adds	r0, r3, #0
 8009020:	f7f7 fc18 	bl	8000854 <__aeabi_fdiv>
 8009024:	1c03      	adds	r3, r0, #0
 8009026:	1c18      	adds	r0, r3, #0
 8009028:	4b51      	ldr	r3, [pc, #324]	; (8009170 <speedCompute2+0x1c4>)
 800902a:	681c      	ldr	r4, [r3, #0]
 800902c:	1c62      	adds	r2, r4, #1
 800902e:	4b50      	ldr	r3, [pc, #320]	; (8009170 <speedCompute2+0x1c4>)
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	4950      	ldr	r1, [pc, #320]	; (8009174 <speedCompute2+0x1c8>)
 8009034:	f7f7 fc0e 	bl	8000854 <__aeabi_fdiv>
 8009038:	1c03      	adds	r3, r0, #0
 800903a:	1c19      	adds	r1, r3, #0
 800903c:	4b4e      	ldr	r3, [pc, #312]	; (8009178 <speedCompute2+0x1cc>)
 800903e:	00a2      	lsls	r2, r4, #2
 8009040:	50d1      	str	r1, [r2, r3]
  //     gMotorData.speed = (float)(gencodeSpeed.speed * (SPEED_COMPUTE_PER_S / computePerms ) / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RAD
      //  printf("speedcompute:%f\r\n", gMotorData.speed);  //gMotorData.speed
        gencodeSpeed2.encode_old = gencodeSpeed2.encode_now;
 8009042:	4b48      	ldr	r3, [pc, #288]	; (8009164 <speedCompute2+0x1b8>)
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	4b47      	ldr	r3, [pc, #284]	; (8009164 <speedCompute2+0x1b8>)
 8009048:	601a      	str	r2, [r3, #0]
       //  after 10 times of speed calculation, filter the speed data
        if (speedArrayFilterIndex2 == 10)
 800904a:	4b49      	ldr	r3, [pc, #292]	; (8009170 <speedCompute2+0x1c4>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b0a      	cmp	r3, #10
 8009050:	d000      	beq.n	8009054 <speedCompute2+0xa8>
 8009052:	e079      	b.n	8009148 <speedCompute2+0x19c>
        {
            // bubble sort
            float temp = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < 10; i++)
 8009058:	2300      	movs	r3, #0
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	e030      	b.n	80090c0 <speedCompute2+0x114>
            {
                for (int j = 0; j < 10 - i - 1; j++)
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	e024      	b.n	80090ae <speedCompute2+0x102>
                {
                    if (speedArray2[j] > speedArray2[j + 1])
 8009064:	4b44      	ldr	r3, [pc, #272]	; (8009178 <speedCompute2+0x1cc>)
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	0092      	lsls	r2, r2, #2
 800906a:	58d0      	ldr	r0, [r2, r3]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	4b41      	ldr	r3, [pc, #260]	; (8009178 <speedCompute2+0x1cc>)
 8009072:	0092      	lsls	r2, r2, #2
 8009074:	58d3      	ldr	r3, [r2, r3]
 8009076:	1c19      	adds	r1, r3, #0
 8009078:	f7f7 fa38 	bl	80004ec <__aeabi_fcmpgt>
 800907c:	1e03      	subs	r3, r0, #0
 800907e:	d013      	beq.n	80090a8 <speedCompute2+0xfc>
                    {
                        temp = speedArray2[j];
 8009080:	4b3d      	ldr	r3, [pc, #244]	; (8009178 <speedCompute2+0x1cc>)
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	0092      	lsls	r2, r2, #2
 8009086:	58d3      	ldr	r3, [r2, r3]
 8009088:	617b      	str	r3, [r7, #20]
                        speedArray2[j] = speedArray2[j + 1];
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	4b3a      	ldr	r3, [pc, #232]	; (8009178 <speedCompute2+0x1cc>)
 8009090:	0092      	lsls	r2, r2, #2
 8009092:	58d1      	ldr	r1, [r2, r3]
 8009094:	4b38      	ldr	r3, [pc, #224]	; (8009178 <speedCompute2+0x1cc>)
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	0092      	lsls	r2, r2, #2
 800909a:	50d1      	str	r1, [r2, r3]
                        speedArray2[j + 1] = temp;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	4b35      	ldr	r3, [pc, #212]	; (8009178 <speedCompute2+0x1cc>)
 80090a2:	0092      	lsls	r2, r2, #2
 80090a4:	6979      	ldr	r1, [r7, #20]
 80090a6:	50d1      	str	r1, [r2, r3]
                for (int j = 0; j < 10 - i - 1; j++)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	60fb      	str	r3, [r7, #12]
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2209      	movs	r2, #9
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	dbd4      	blt.n	8009064 <speedCompute2+0xb8>
            for (int i = 0; i < 10; i++)
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	3301      	adds	r3, #1
 80090be:	613b      	str	r3, [r7, #16]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b09      	cmp	r3, #9
 80090c4:	ddcb      	ble.n	800905e <speedCompute2+0xb2>
                    }
                }
            }

            temp = 0.0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]
            // using the middle 6 data to calculate the average value
            for (int i = 2; i < 8; i++)
 80090ca:	2302      	movs	r3, #2
 80090cc:	60bb      	str	r3, [r7, #8]
 80090ce:	e00c      	b.n	80090ea <speedCompute2+0x13e>
            {
                temp += speedArray2[i];
 80090d0:	4b29      	ldr	r3, [pc, #164]	; (8009178 <speedCompute2+0x1cc>)
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	0092      	lsls	r2, r2, #2
 80090d6:	58d3      	ldr	r3, [r2, r3]
 80090d8:	1c19      	adds	r1, r3, #0
 80090da:	6978      	ldr	r0, [r7, #20]
 80090dc:	f7f7 fa1a 	bl	8000514 <__aeabi_fadd>
 80090e0:	1c03      	adds	r3, r0, #0
 80090e2:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < 8; i++)
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	3301      	adds	r3, #1
 80090e8:	60bb      	str	r3, [r7, #8]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2b07      	cmp	r3, #7
 80090ee:	ddef      	ble.n	80090d0 <speedCompute2+0x124>
            }
            // calculate the average value
            temp = temp / 6;
 80090f0:	4922      	ldr	r1, [pc, #136]	; (800917c <speedCompute2+0x1d0>)
 80090f2:	6978      	ldr	r0, [r7, #20]
 80090f4:	f7f7 fbae 	bl	8000854 <__aeabi_fdiv>
 80090f8:	1c03      	adds	r3, r0, #0
 80090fa:	617b      	str	r3, [r7, #20]
            // low pass filter
            // Y(n)= qX(n) + (1-q)Y(n-1)
            // X(n) is the current input, Y(n) is the current output, Y(n-1) is the previous output, and q is the filter factor.
            // The larger the q, the stronger the filtering effect, but the slower the response.
            gMotorData2.speed = (float)((double)temp * 0.5 + (double)gMotorData2.speed * 0.5);
 80090fc:	6978      	ldr	r0, [r7, #20]
 80090fe:	f7f9 ff1b 	bl	8002f38 <__aeabi_f2d>
 8009102:	2200      	movs	r2, #0
 8009104:	4b1e      	ldr	r3, [pc, #120]	; (8009180 <speedCompute2+0x1d4>)
 8009106:	f7f9 f829 	bl	800215c <__aeabi_dmul>
 800910a:	0002      	movs	r2, r0
 800910c:	000b      	movs	r3, r1
 800910e:	0014      	movs	r4, r2
 8009110:	001d      	movs	r5, r3
 8009112:	4b1c      	ldr	r3, [pc, #112]	; (8009184 <speedCompute2+0x1d8>)
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	1c18      	adds	r0, r3, #0
 8009118:	f7f9 ff0e 	bl	8002f38 <__aeabi_f2d>
 800911c:	2200      	movs	r2, #0
 800911e:	4b18      	ldr	r3, [pc, #96]	; (8009180 <speedCompute2+0x1d4>)
 8009120:	f7f9 f81c 	bl	800215c <__aeabi_dmul>
 8009124:	0002      	movs	r2, r0
 8009126:	000b      	movs	r3, r1
 8009128:	0020      	movs	r0, r4
 800912a:	0029      	movs	r1, r5
 800912c:	f7f8 f8bc 	bl	80012a8 <__aeabi_dadd>
 8009130:	0002      	movs	r2, r0
 8009132:	000b      	movs	r3, r1
 8009134:	0010      	movs	r0, r2
 8009136:	0019      	movs	r1, r3
 8009138:	f7f9 ff46 	bl	8002fc8 <__aeabi_d2f>
 800913c:	1c02      	adds	r2, r0, #0
 800913e:	4b11      	ldr	r3, [pc, #68]	; (8009184 <speedCompute2+0x1d8>)
 8009140:	60da      	str	r2, [r3, #12]

            speedArrayFilterIndex2 = 0;
 8009142:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <speedCompute2+0x1c4>)
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]
        }
        speedComputeCount2 = 0;
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <speedCompute2+0x1b4>)
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
    }
    speedComputeCount2++;
 800914e:	4b04      	ldr	r3, [pc, #16]	; (8009160 <speedCompute2+0x1b4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	1c5a      	adds	r2, r3, #1
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <speedCompute2+0x1b4>)
 8009156:	601a      	str	r2, [r3, #0]
}
 8009158:	46c0      	nop			; (mov r8, r8)
 800915a:	46bd      	mov	sp, r7
 800915c:	b006      	add	sp, #24
 800915e:	bdb0      	pop	{r4, r5, r7, pc}
 8009160:	20000564 	.word	0x20000564
 8009164:	20000524 	.word	0x20000524
 8009168:	42700000 	.word	0x42700000
 800916c:	41300000 	.word	0x41300000
 8009170:	200005bc 	.word	0x200005bc
 8009174:	41a00000 	.word	0x41a00000
 8009178:	20000590 	.word	0x20000590
 800917c:	40c00000 	.word	0x40c00000
 8009180:	3fe00000 	.word	0x3fe00000
 8009184:	20000544 	.word	0x20000544

08009188 <moteur_controle>:

void moteur_controle(float m_gauche,float m_droite)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
	 gSpeedPID.SetPoint = m_gauche;
 8009192:	4b06      	ldr	r3, [pc, #24]	; (80091ac <moteur_controle+0x24>)
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	601a      	str	r2, [r3, #0]
	 gSpeedPID2.SetPoint = m_droite;
 8009198:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <moteur_controle+0x28>)
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	601a      	str	r2, [r3, #0]
	 gMotorData.state = MOTOR_STATE_START;
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <moteur_controle+0x2c>)
 80091a0:	2201      	movs	r2, #1
 80091a2:	701a      	strb	r2, [r3, #0]

}
 80091a4:	46c0      	nop			; (mov r8, r8)
 80091a6:	46bd      	mov	sp, r7
 80091a8:	b002      	add	sp, #8
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	200004d0 	.word	0x200004d0
 80091b0:	200004f4 	.word	0x200004f4
 80091b4:	20000530 	.word	0x20000530

080091b8 <HAL_TIM_PeriodElapsedCallback>:


//pc6 pc7 timer3  motor 1
//timer1 motor2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)   //encooder compter  motor 1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a59      	ldr	r2, [pc, #356]	; (800932c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d114      	bne.n	80091f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
      //   Determine the current counter counting direction
        if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2210      	movs	r2, #16
 80091d2:	4013      	ands	r3, r2
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d106      	bne.n	80091e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
        //     underflow, count down
        { Encoder_Overflow_Count--;
 80091d8:	4b55      	ldr	r3, [pc, #340]	; (8009330 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	3b01      	subs	r3, #1
 80091de:	b29a      	uxth	r2, r3
 80091e0:	4b53      	ldr	r3, [pc, #332]	; (8009330 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80091e2:	801a      	strh	r2, [r3, #0]
         //  motor_pwm_set( changeSpeedToPWM(gMotorData.motorPWM));
          motor_pwm_set(gMotorData.motorPWM);
          motor_pwm_set2(gMotorData2.motorPWM);
        }
    }
}
 80091e4:	e09e      	b.n	8009324 <HAL_TIM_PeriodElapsedCallback+0x16c>
            Encoder_Overflow_Count++;
 80091e6:	4b52      	ldr	r3, [pc, #328]	; (8009330 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	3301      	adds	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	4b50      	ldr	r3, [pc, #320]	; (8009330 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80091f0:	801a      	strh	r2, [r3, #0]
}
 80091f2:	e097      	b.n	8009324 <HAL_TIM_PeriodElapsedCallback+0x16c>
    else if (htim->Instance == TIM1)  //encooder compter  motor 1
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a4e      	ldr	r2, [pc, #312]	; (8009334 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d120      	bne.n	8009240 <HAL_TIM_PeriodElapsedCallback+0x88>
        if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2210      	movs	r2, #16
 8009206:	4013      	ands	r3, r2
 8009208:	2b10      	cmp	r3, #16
 800920a:	d10c      	bne.n	8009226 <HAL_TIM_PeriodElapsedCallback+0x6e>
        { Encoder_Overflow_Count2--;
 800920c:	4b4a      	ldr	r3, [pc, #296]	; (8009338 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	1e5a      	subs	r2, r3, #1
 8009212:	4b49      	ldr	r3, [pc, #292]	; (8009338 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8009214:	601a      	str	r2, [r3, #0]
       HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); //vert
 8009216:	2380      	movs	r3, #128	; 0x80
 8009218:	019b      	lsls	r3, r3, #6
 800921a:	4a48      	ldr	r2, [pc, #288]	; (800933c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800921c:	0019      	movs	r1, r3
 800921e:	0010      	movs	r0, r2
 8009220:	f7fb fae1 	bl	80047e6 <HAL_GPIO_TogglePin>
}
 8009224:	e07e      	b.n	8009324 <HAL_TIM_PeriodElapsedCallback+0x16c>
            Encoder_Overflow_Count2++;
 8009226:	4b44      	ldr	r3, [pc, #272]	; (8009338 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	4b42      	ldr	r3, [pc, #264]	; (8009338 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800922e:	601a      	str	r2, [r3, #0]
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12); //orange
 8009230:	2380      	movs	r3, #128	; 0x80
 8009232:	015b      	lsls	r3, r3, #5
 8009234:	4a41      	ldr	r2, [pc, #260]	; (800933c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8009236:	0019      	movs	r1, r3
 8009238:	0010      	movs	r0, r2
 800923a:	f7fb fad4 	bl	80047e6 <HAL_GPIO_TogglePin>
}
 800923e:	e071      	b.n	8009324 <HAL_TIM_PeriodElapsedCallback+0x16c>
    else if (htim->Instance == TIM7)   //every 100ms call the interruption for calculte PID
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a3e      	ldr	r2, [pc, #248]	; (8009340 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d16c      	bne.n	8009324 <HAL_TIM_PeriodElapsedCallback+0x16c>
        int encoderValueNow = getEncoderValue();
 800924a:	f000 f889 	bl	8009360 <getEncoderValue>
 800924e:	0003      	movs	r3, r0
 8009250:	60fb      	str	r3, [r7, #12]
        int encoderValueNow2 = getEncoderValue2();
 8009252:	f000 f89d 	bl	8009390 <getEncoderValue2>
 8009256:	0003      	movs	r3, r0
 8009258:	60bb      	str	r3, [r7, #8]
        speedCompute(encoderValueNow, 1);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2101      	movs	r1, #1
 800925e:	0018      	movs	r0, r3
 8009260:	f7ff fdb6 	bl	8008dd0 <speedCompute>
        speedCompute2(encoderValueNow2, 1);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2101      	movs	r1, #1
 8009268:	0018      	movs	r0, r3
 800926a:	f7ff fe9f 	bl	8008fac <speedCompute2>
        printf("speedcompute2:%f\r\n", gMotorData2.speed);  //gMotorData.speed
 800926e:	4b35      	ldr	r3, [pc, #212]	; (8009344 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	1c18      	adds	r0, r3, #0
 8009274:	f7f9 fe60 	bl	8002f38 <__aeabi_f2d>
 8009278:	0002      	movs	r2, r0
 800927a:	000b      	movs	r3, r1
 800927c:	4932      	ldr	r1, [pc, #200]	; (8009348 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800927e:	0008      	movs	r0, r1
 8009280:	f000 ff54 	bl	800a12c <iprintf>
        if (gMotorData.state == MOTOR_STATE_START)  //MOTOR_STATE_START call in setSpeed
 8009284:	4b31      	ldr	r3, [pc, #196]	; (800934c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d14b      	bne.n	8009324 <HAL_TIM_PeriodElapsedCallback+0x16c>
            gMotorData.motorPWM = incrementPIDControl(&gSpeedPID, gMotorData.speed); //gMotorData.speed is set in speedCompute
 800928c:	4b2f      	ldr	r3, [pc, #188]	; (800934c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800928e:	68da      	ldr	r2, [r3, #12]
 8009290:	4b2f      	ldr	r3, [pc, #188]	; (8009350 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8009292:	1c11      	adds	r1, r2, #0
 8009294:	0018      	movs	r0, r3
 8009296:	f7ff fcab 	bl	8008bf0 <incrementPIDControl>
 800929a:	1c02      	adds	r2, r0, #0
 800929c:	4b2b      	ldr	r3, [pc, #172]	; (800934c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800929e:	611a      	str	r2, [r3, #16]
            if(gMotorData.motorPWM >= 2560)                     /* ÏÞËÙ */
 80092a0:	4b2a      	ldr	r3, [pc, #168]	; (800934c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	492b      	ldr	r1, [pc, #172]	; (8009354 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80092a6:	1c18      	adds	r0, r3, #0
 80092a8:	f7f7 f92a 	bl	8000500 <__aeabi_fcmpge>
 80092ac:	1e03      	subs	r3, r0, #0
 80092ae:	d003      	beq.n	80092b8 <HAL_TIM_PeriodElapsedCallback+0x100>
            	gMotorData.motorPWM = 2560;
 80092b0:	4b26      	ldr	r3, [pc, #152]	; (800934c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80092b2:	4a28      	ldr	r2, [pc, #160]	; (8009354 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80092b4:	611a      	str	r2, [r3, #16]
 80092b6:	e00a      	b.n	80092ce <HAL_TIM_PeriodElapsedCallback+0x116>
            else if (gMotorData.motorPWM <= -2560)
 80092b8:	4b24      	ldr	r3, [pc, #144]	; (800934c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	4926      	ldr	r1, [pc, #152]	; (8009358 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80092be:	1c18      	adds	r0, r3, #0
 80092c0:	f7f7 f90a 	bl	80004d8 <__aeabi_fcmple>
 80092c4:	1e03      	subs	r3, r0, #0
 80092c6:	d002      	beq.n	80092ce <HAL_TIM_PeriodElapsedCallback+0x116>
            	gMotorData.motorPWM = -2560;
 80092c8:	4b20      	ldr	r3, [pc, #128]	; (800934c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80092ca:	4a23      	ldr	r2, [pc, #140]	; (8009358 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80092cc:	611a      	str	r2, [r3, #16]
            gMotorData2.motorPWM = incrementPIDControl2(&gSpeedPID2, gMotorData2.speed); //gMotorData.speed is set in speedCompute
 80092ce:	4b1d      	ldr	r3, [pc, #116]	; (8009344 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	4b22      	ldr	r3, [pc, #136]	; (800935c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80092d4:	1c11      	adds	r1, r2, #0
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7ff fce0 	bl	8008c9c <incrementPIDControl2>
 80092dc:	1c02      	adds	r2, r0, #0
 80092de:	4b19      	ldr	r3, [pc, #100]	; (8009344 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80092e0:	611a      	str	r2, [r3, #16]
            if(gMotorData2.motorPWM >= 2560)                     /* ÏÞËÙ */
 80092e2:	4b18      	ldr	r3, [pc, #96]	; (8009344 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	491b      	ldr	r1, [pc, #108]	; (8009354 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80092e8:	1c18      	adds	r0, r3, #0
 80092ea:	f7f7 f909 	bl	8000500 <__aeabi_fcmpge>
 80092ee:	1e03      	subs	r3, r0, #0
 80092f0:	d003      	beq.n	80092fa <HAL_TIM_PeriodElapsedCallback+0x142>
            	gMotorData2.motorPWM = 2560;
 80092f2:	4b14      	ldr	r3, [pc, #80]	; (8009344 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80092f4:	4a17      	ldr	r2, [pc, #92]	; (8009354 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80092f6:	611a      	str	r2, [r3, #16]
 80092f8:	e00a      	b.n	8009310 <HAL_TIM_PeriodElapsedCallback+0x158>
            else if (gMotorData2.motorPWM <= -2560)
 80092fa:	4b12      	ldr	r3, [pc, #72]	; (8009344 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	4916      	ldr	r1, [pc, #88]	; (8009358 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8009300:	1c18      	adds	r0, r3, #0
 8009302:	f7f7 f8e9 	bl	80004d8 <__aeabi_fcmple>
 8009306:	1e03      	subs	r3, r0, #0
 8009308:	d002      	beq.n	8009310 <HAL_TIM_PeriodElapsedCallback+0x158>
            	gMotorData2.motorPWM = -2560;
 800930a:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800930c:	4a12      	ldr	r2, [pc, #72]	; (8009358 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800930e:	611a      	str	r2, [r3, #16]
          motor_pwm_set(gMotorData.motorPWM);
 8009310:	4b0e      	ldr	r3, [pc, #56]	; (800934c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	1c18      	adds	r0, r3, #0
 8009316:	f000 f8eb 	bl	80094f0 <motor_pwm_set>
          motor_pwm_set2(gMotorData2.motorPWM);
 800931a:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	1c18      	adds	r0, r3, #0
 8009320:	f000 f909 	bl	8009536 <motor_pwm_set2>
}
 8009324:	46c0      	nop			; (mov r8, r8)
 8009326:	46bd      	mov	sp, r7
 8009328:	b004      	add	sp, #16
 800932a:	bd80      	pop	{r7, pc}
 800932c:	40000400 	.word	0x40000400
 8009330:	20000558 	.word	0x20000558
 8009334:	40012c00 	.word	0x40012c00
 8009338:	2000055c 	.word	0x2000055c
 800933c:	50000400 	.word	0x50000400
 8009340:	40001400 	.word	0x40001400
 8009344:	20000544 	.word	0x20000544
 8009348:	0800c588 	.word	0x0800c588
 800934c:	20000530 	.word	0x20000530
 8009350:	200004d0 	.word	0x200004d0
 8009354:	45200000 	.word	0x45200000
 8009358:	c5200000 	.word	0xc5200000
 800935c:	200004f4 	.word	0x200004f4

08009360 <getEncoderValue>:
 * @brief Get the Current Encoder Count
 *
 * @return uint16_t The current encoder count
 */
int getEncoderValue(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
    int Encoder_Count = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	607b      	str	r3, [r7, #4]
    /* Get the current counter value */
    Encoder_Count = __HAL_TIM_GET_COUNTER(&htim3); //motor 1
 800936a:	4b07      	ldr	r3, [pc, #28]	; (8009388 <getEncoderValue+0x28>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	607b      	str	r3, [r7, #4]
   // printf("Encoder_Count:%d\r\n",Encoder_Count);
    /* Add the overflow count to the counter value */
    Encoder_Count += Encoder_Overflow_Count * 65536;
 8009372:	4b06      	ldr	r3, [pc, #24]	; (800938c <getEncoderValue+0x2c>)
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	041b      	lsls	r3, r3, #16
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	18d3      	adds	r3, r2, r3
 800937c:	607b      	str	r3, [r7, #4]
    return Encoder_Count;
 800937e:	687b      	ldr	r3, [r7, #4]
}
 8009380:	0018      	movs	r0, r3
 8009382:	46bd      	mov	sp, r7
 8009384:	b002      	add	sp, #8
 8009386:	bd80      	pop	{r7, pc}
 8009388:	200002bc 	.word	0x200002bc
 800938c:	20000558 	.word	0x20000558

08009390 <getEncoderValue2>:


int getEncoderValue2(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
    int Encoder_Count = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	607b      	str	r3, [r7, #4]
    /* Get the current counter value */
    Encoder_Count = __HAL_TIM_GET_COUNTER(&htim1); //motor 1
 800939a:	4b07      	ldr	r3, [pc, #28]	; (80093b8 <getEncoderValue2+0x28>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	607b      	str	r3, [r7, #4]
   // printf("Encoder_Count:%d\r\n",Encoder_Count);
    /* Add the overflow count to the counter value */
    Encoder_Count += Encoder_Overflow_Count2 * 65536;
 80093a2:	4b06      	ldr	r3, [pc, #24]	; (80093bc <getEncoderValue2+0x2c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	041b      	lsls	r3, r3, #16
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	18d3      	adds	r3, r2, r3
 80093ac:	607b      	str	r3, [r7, #4]
    return Encoder_Count;
 80093ae:	687b      	ldr	r3, [r7, #4]
}
 80093b0:	0018      	movs	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	b002      	add	sp, #8
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000270 	.word	0x20000270
 80093bc:	2000055c 	.word	0x2000055c

080093c0 <dcmotor_dir>:
/**
 * @brief       Motor Direction Control
 * @param       para: 0 Forward, 1 Reverse
 */
void dcmotor_dir(uint8_t para)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	0002      	movs	r2, r0
 80093c8:	1dfb      	adds	r3, r7, #7
 80093ca:	701a      	strb	r2, [r3, #0]

	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80093cc:	4b15      	ldr	r3, [pc, #84]	; (8009424 <dcmotor_dir+0x64>)
 80093ce:	2100      	movs	r1, #0
 80093d0:	0018      	movs	r0, r3
 80093d2:	f7fc fa4d 	bl	8005870 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80093d6:	4b14      	ldr	r3, [pc, #80]	; (8009428 <dcmotor_dir+0x68>)
 80093d8:	2100      	movs	r1, #0
 80093da:	0018      	movs	r0, r3
 80093dc:	f7fc fa48 	bl	8005870 <HAL_TIM_PWM_Stop>
    //HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
    if (para == 0)
 80093e0:	1dfb      	adds	r3, r7, #7
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <dcmotor_dir+0x3e>
    {
        HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80093e8:	4b0e      	ldr	r3, [pc, #56]	; (8009424 <dcmotor_dir+0x64>)
 80093ea:	2100      	movs	r1, #0
 80093ec:	0018      	movs	r0, r3
 80093ee:	f7fc f95b 	bl	80056a8 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80093f2:	4b0d      	ldr	r3, [pc, #52]	; (8009428 <dcmotor_dir+0x68>)
 80093f4:	2100      	movs	r1, #0
 80093f6:	0018      	movs	r0, r3
 80093f8:	f7fc fa3a 	bl	8005870 <HAL_TIM_PWM_Stop>
    	//HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
        //HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
        //  __HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, 300);  //  motor1 reculer
         //__HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_1, 300);  // motor2 reculer
    }
}
 80093fc:	e00d      	b.n	800941a <dcmotor_dir+0x5a>
    else if (para == 1)
 80093fe:	1dfb      	adds	r3, r7, #7
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d109      	bne.n	800941a <dcmotor_dir+0x5a>
        HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8009406:	4b08      	ldr	r3, [pc, #32]	; (8009428 <dcmotor_dir+0x68>)
 8009408:	2100      	movs	r1, #0
 800940a:	0018      	movs	r0, r3
 800940c:	f7fc f94c 	bl	80056a8 <HAL_TIM_PWM_Start>
    	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8009410:	4b04      	ldr	r3, [pc, #16]	; (8009424 <dcmotor_dir+0x64>)
 8009412:	2100      	movs	r1, #0
 8009414:	0018      	movs	r0, r3
 8009416:	f7fc fa2b 	bl	8005870 <HAL_TIM_PWM_Stop>
}
 800941a:	46c0      	nop			; (mov r8, r8)
 800941c:	46bd      	mov	sp, r7
 800941e:	b002      	add	sp, #8
 8009420:	bd80      	pop	{r7, pc}
 8009422:	46c0      	nop			; (mov r8, r8)
 8009424:	200003ec 	.word	0x200003ec
 8009428:	200003a0 	.word	0x200003a0

0800942c <dcmotor_dir2>:

void dcmotor_dir2(uint8_t para)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	0002      	movs	r2, r0
 8009434:	1dfb      	adds	r3, r7, #7
 8009436:	701a      	strb	r2, [r3, #0]


    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8009438:	4b15      	ldr	r3, [pc, #84]	; (8009490 <dcmotor_dir2+0x64>)
 800943a:	2104      	movs	r1, #4
 800943c:	0018      	movs	r0, r3
 800943e:	f7fc fa17 	bl	8005870 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8009442:	4b13      	ldr	r3, [pc, #76]	; (8009490 <dcmotor_dir2+0x64>)
 8009444:	2100      	movs	r1, #0
 8009446:	0018      	movs	r0, r3
 8009448:	f7fc fa12 	bl	8005870 <HAL_TIM_PWM_Stop>
	//HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
    //HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);

    if (para == 0)
 800944c:	1dfb      	adds	r3, r7, #7
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <dcmotor_dir2+0x3e>
    {
        //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
        //HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
       HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8009454:	4b0e      	ldr	r3, [pc, #56]	; (8009490 <dcmotor_dir2+0x64>)
 8009456:	2104      	movs	r1, #4
 8009458:	0018      	movs	r0, r3
 800945a:	f7fc f925 	bl	80056a8 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800945e:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <dcmotor_dir2+0x64>)
 8009460:	2100      	movs	r1, #0
 8009462:	0018      	movs	r0, r3
 8009464:	f7fc fa04 	bl	8005870 <HAL_TIM_PWM_Stop>
    	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
        HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
        //  __HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, 300);  //  motor1 reculer
         //__HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_1, 300);  // motor2 reculer
    }
}
 8009468:	e00d      	b.n	8009486 <dcmotor_dir2+0x5a>
    else if (para == 1)
 800946a:	1dfb      	adds	r3, r7, #7
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d109      	bne.n	8009486 <dcmotor_dir2+0x5a>
    	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8009472:	4b07      	ldr	r3, [pc, #28]	; (8009490 <dcmotor_dir2+0x64>)
 8009474:	2104      	movs	r1, #4
 8009476:	0018      	movs	r0, r3
 8009478:	f7fc f9fa 	bl	8005870 <HAL_TIM_PWM_Stop>
        HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800947c:	4b04      	ldr	r3, [pc, #16]	; (8009490 <dcmotor_dir2+0x64>)
 800947e:	2100      	movs	r1, #0
 8009480:	0018      	movs	r0, r3
 8009482:	f7fc f911 	bl	80056a8 <HAL_TIM_PWM_Start>
}
 8009486:	46c0      	nop			; (mov r8, r8)
 8009488:	46bd      	mov	sp, r7
 800948a:	b002      	add	sp, #8
 800948c:	bd80      	pop	{r7, pc}
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	20000354 	.word	0x20000354

08009494 <dcmotor_speed>:

void dcmotor_speed(uint16_t para)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	0002      	movs	r2, r0
 800949c:	1dbb      	adds	r3, r7, #6
 800949e:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SetCompare(&htim17 , TIM_CHANNEL_1, para);  //PB9
    __HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_2, para);  //PB15
    __HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, para);  //PB9
    __HAL_TIM_SetCompare(&htim14 , TIM_CHANNEL_1, para);  //PB15
*/
    __HAL_TIM_SetCompare(&htim17 , TIM_CHANNEL_1, para);  //PB9   para为占空比的百分比乘以周期时间
 80094a0:	4b06      	ldr	r3, [pc, #24]	; (80094bc <dcmotor_speed+0x28>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	1dba      	adds	r2, r7, #6
 80094a6:	8812      	ldrh	r2, [r2, #0]
 80094a8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, para);  //PB15
 80094aa:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <dcmotor_speed+0x2c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	1dba      	adds	r2, r7, #6
 80094b0:	8812      	ldrh	r2, [r2, #0]
 80094b2:	635a      	str	r2, [r3, #52]	; 0x34
   // __HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_2, para);  //PB9
   // __HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_1, para);  //PB15


}
 80094b4:	46c0      	nop			; (mov r8, r8)
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b002      	add	sp, #8
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	200003ec 	.word	0x200003ec
 80094c0:	200003a0 	.word	0x200003a0

080094c4 <dcmotor_speed2>:


void dcmotor_speed2(uint16_t para)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	0002      	movs	r2, r0
 80094cc:	1dbb      	adds	r3, r7, #6
 80094ce:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, para);  //PB9
    __HAL_TIM_SetCompare(&htim14 , TIM_CHANNEL_1, para);  //PB15
*/
  //  __HAL_TIM_SetCompare(&htim17 , TIM_CHANNEL_1, para);  //PB9   para为占空比的百分比乘以周期时间
    //__HAL_TIM_SetCompare(&htim16 , TIM_CHANNEL_1, para);  //PB15
    __HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_2, para);  //PB9
 80094d0:	4b06      	ldr	r3, [pc, #24]	; (80094ec <dcmotor_speed2+0x28>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	1dba      	adds	r2, r7, #6
 80094d6:	8812      	ldrh	r2, [r2, #0]
 80094d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SetCompare(&htim15 , TIM_CHANNEL_1, para);  //PB15
 80094da:	4b04      	ldr	r3, [pc, #16]	; (80094ec <dcmotor_speed2+0x28>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	1dba      	adds	r2, r7, #6
 80094e0:	8812      	ldrh	r2, [r2, #0]
 80094e2:	635a      	str	r2, [r3, #52]	; 0x34


}
 80094e4:	46c0      	nop			; (mov r8, r8)
 80094e6:	46bd      	mov	sp, r7
 80094e8:	b002      	add	sp, #8
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20000354 	.word	0x20000354

080094f0 <motor_pwm_set>:


void motor_pwm_set(float para)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
    int val = (int)para;
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7f7 fe63 	bl	80011c4 <__aeabi_f2iz>
 80094fe:	0003      	movs	r3, r0
 8009500:	60fb      	str	r3, [r7, #12]

    if (val >= 0)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	db08      	blt.n	800951a <motor_pwm_set+0x2a>
    {
        dcmotor_dir(0);
 8009508:	2000      	movs	r0, #0
 800950a:	f7ff ff59 	bl	80093c0 <dcmotor_dir>
        dcmotor_speed(val);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	b29b      	uxth	r3, r3
 8009512:	0018      	movs	r0, r3
 8009514:	f7ff ffbe 	bl	8009494 <dcmotor_speed>
    else
    {
        dcmotor_dir(1);
        dcmotor_speed(-val);
    }
}
 8009518:	e009      	b.n	800952e <motor_pwm_set+0x3e>
        dcmotor_dir(1);
 800951a:	2001      	movs	r0, #1
 800951c:	f7ff ff50 	bl	80093c0 <dcmotor_dir>
        dcmotor_speed(-val);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	b29b      	uxth	r3, r3
 8009524:	425b      	negs	r3, r3
 8009526:	b29b      	uxth	r3, r3
 8009528:	0018      	movs	r0, r3
 800952a:	f7ff ffb3 	bl	8009494 <dcmotor_speed>
}
 800952e:	46c0      	nop			; (mov r8, r8)
 8009530:	46bd      	mov	sp, r7
 8009532:	b004      	add	sp, #16
 8009534:	bd80      	pop	{r7, pc}

08009536 <motor_pwm_set2>:

void motor_pwm_set2(float para)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
    int val = (int)para;
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7f7 fe40 	bl	80011c4 <__aeabi_f2iz>
 8009544:	0003      	movs	r3, r0
 8009546:	60fb      	str	r3, [r7, #12]

    if (val >= 0)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	db08      	blt.n	8009560 <motor_pwm_set2+0x2a>
    {
        dcmotor_dir2(0);
 800954e:	2000      	movs	r0, #0
 8009550:	f7ff ff6c 	bl	800942c <dcmotor_dir2>
        dcmotor_speed2(val);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	b29b      	uxth	r3, r3
 8009558:	0018      	movs	r0, r3
 800955a:	f7ff ffb3 	bl	80094c4 <dcmotor_speed2>
    else
    {
        dcmotor_dir2(1);
        dcmotor_speed2(-val);
    }
}
 800955e:	e009      	b.n	8009574 <motor_pwm_set2+0x3e>
        dcmotor_dir2(1);
 8009560:	2001      	movs	r0, #1
 8009562:	f7ff ff63 	bl	800942c <dcmotor_dir2>
        dcmotor_speed2(-val);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	b29b      	uxth	r3, r3
 800956a:	425b      	negs	r3, r3
 800956c:	b29b      	uxth	r3, r3
 800956e:	0018      	movs	r0, r3
 8009570:	f7ff ffa8 	bl	80094c4 <dcmotor_speed2>
}
 8009574:	46c0      	nop			; (mov r8, r8)
 8009576:	46bd      	mov	sp, r7
 8009578:	b004      	add	sp, #16
 800957a:	bd80      	pop	{r7, pc}

0800957c <Shell_Init>:
int argc = 0;
char *token;
int newCmdReady = 0;

void Shell_Init(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
    memset(argv, 0, MAX_ARGS * sizeof(char *));
 8009580:	4b1a      	ldr	r3, [pc, #104]	; (80095ec <Shell_Init+0x70>)
 8009582:	2224      	movs	r2, #36	; 0x24
 8009584:	2100      	movs	r1, #0
 8009586:	0018      	movs	r0, r3
 8009588:	f000 ff06 	bl	800a398 <memset>
    memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 800958c:	4b18      	ldr	r3, [pc, #96]	; (80095f0 <Shell_Init+0x74>)
 800958e:	2240      	movs	r2, #64	; 0x40
 8009590:	2100      	movs	r1, #0
 8009592:	0018      	movs	r0, r3
 8009594:	f000 ff00 	bl	800a398 <memset>
 8009598:	4b16      	ldr	r3, [pc, #88]	; (80095f4 <Shell_Init+0x78>)
 800959a:	2200      	movs	r2, #0
 800959c:	701a      	strb	r2, [r3, #0]
    memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
    memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 800959e:	4b16      	ldr	r3, [pc, #88]	; (80095f8 <Shell_Init+0x7c>)
 80095a0:	2240      	movs	r2, #64	; 0x40
 80095a2:	2100      	movs	r1, #0
 80095a4:	0018      	movs	r0, r3
 80095a6:	f000 fef7 	bl	800a398 <memset>

    HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80095aa:	4912      	ldr	r1, [pc, #72]	; (80095f4 <Shell_Init+0x78>)
 80095ac:	4b13      	ldr	r3, [pc, #76]	; (80095fc <Shell_Init+0x80>)
 80095ae:	2201      	movs	r2, #1
 80095b0:	0018      	movs	r0, r3
 80095b2:	f7fd fc6f 	bl	8006e94 <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80095b6:	4b12      	ldr	r3, [pc, #72]	; (8009600 <Shell_Init+0x84>)
 80095b8:	0018      	movs	r0, r3
 80095ba:	f7f6 fda1 	bl	8000100 <strlen>
 80095be:	0003      	movs	r3, r0
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	2301      	movs	r3, #1
 80095c4:	425b      	negs	r3, r3
 80095c6:	490e      	ldr	r1, [pc, #56]	; (8009600 <Shell_Init+0x84>)
 80095c8:	480c      	ldr	r0, [pc, #48]	; (80095fc <Shell_Init+0x80>)
 80095ca:	f7fd fbc7 	bl	8006d5c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80095ce:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <Shell_Init+0x88>)
 80095d0:	0018      	movs	r0, r3
 80095d2:	f7f6 fd95 	bl	8000100 <strlen>
 80095d6:	0003      	movs	r3, r0
 80095d8:	b29a      	uxth	r2, r3
 80095da:	2301      	movs	r3, #1
 80095dc:	425b      	negs	r3, r3
 80095de:	4909      	ldr	r1, [pc, #36]	; (8009604 <Shell_Init+0x88>)
 80095e0:	4806      	ldr	r0, [pc, #24]	; (80095fc <Shell_Init+0x80>)
 80095e2:	f7fd fbbb 	bl	8006d5c <HAL_UART_Transmit>
}
 80095e6:	46c0      	nop			; (mov r8, r8)
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	2000064c 	.word	0x2000064c
 80095f0:	200005c8 	.word	0x200005c8
 80095f4:	200005c4 	.word	0x200005c4
 80095f8:	2000060c 	.word	0x2000060c
 80095fc:	20000438 	.word	0x20000438
 8009600:	20000028 	.word	0x20000028
 8009604:	2000000c 	.word	0x2000000c

08009608 <HAL_UART_RxCpltCallback>:
        memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
    // if receied counter is more than CMD_BUFFER_SIZE, reset counter and cmdBuffer, and print error message
    // else increment counter and continue
    if (uartRxCounter > CMD_BUFFER_SIZE)
 8009610:	4b1e      	ldr	r3, [pc, #120]	; (800968c <HAL_UART_RxCpltCallback+0x84>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b40      	cmp	r3, #64	; 0x40
 8009616:	d919      	bls.n	800964c <HAL_UART_RxCpltCallback+0x44>
    {
        uartRxCounter = 0;
 8009618:	4b1c      	ldr	r3, [pc, #112]	; (800968c <HAL_UART_RxCpltCallback+0x84>)
 800961a:	2200      	movs	r2, #0
 800961c:	701a      	strb	r2, [r3, #0]
        memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(uint8_t));
 800961e:	4b1c      	ldr	r3, [pc, #112]	; (8009690 <HAL_UART_RxCpltCallback+0x88>)
 8009620:	2240      	movs	r2, #64	; 0x40
 8009622:	2100      	movs	r1, #0
 8009624:	0018      	movs	r0, r3
 8009626:	f000 feb7 	bl	800a398 <memset>
        int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Command too long\r\n");
 800962a:	4a1a      	ldr	r2, [pc, #104]	; (8009694 <HAL_UART_RxCpltCallback+0x8c>)
 800962c:	4b1a      	ldr	r3, [pc, #104]	; (8009698 <HAL_UART_RxCpltCallback+0x90>)
 800962e:	2140      	movs	r1, #64	; 0x40
 8009630:	0018      	movs	r0, r3
 8009632:	f000 fd8b 	bl	800a14c <sniprintf>
 8009636:	0003      	movs	r3, r0
 8009638:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	b29a      	uxth	r2, r3
 800963e:	2301      	movs	r3, #1
 8009640:	425b      	negs	r3, r3
 8009642:	4915      	ldr	r1, [pc, #84]	; (8009698 <HAL_UART_RxCpltCallback+0x90>)
 8009644:	4815      	ldr	r0, [pc, #84]	; (800969c <HAL_UART_RxCpltCallback+0x94>)
 8009646:	f7fd fb89 	bl	8006d5c <HAL_UART_Transmit>
 800964a:	e00a      	b.n	8009662 <HAL_UART_RxCpltCallback+0x5a>
    }
    else
    {
        cmdBuffer[uartRxCounter++] = (char)uartRxBuffer[0];
 800964c:	4b0f      	ldr	r3, [pc, #60]	; (800968c <HAL_UART_RxCpltCallback+0x84>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	b2d1      	uxtb	r1, r2
 8009654:	4a0d      	ldr	r2, [pc, #52]	; (800968c <HAL_UART_RxCpltCallback+0x84>)
 8009656:	7011      	strb	r1, [r2, #0]
 8009658:	001a      	movs	r2, r3
 800965a:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <HAL_UART_RxCpltCallback+0x98>)
 800965c:	7819      	ldrb	r1, [r3, #0]
 800965e:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <HAL_UART_RxCpltCallback+0x88>)
 8009660:	5499      	strb	r1, [r3, r2]
    }
    // if received \n or \r, set uartRxReceived flag
    if (uartRxBuffer[0] == ASCII_CR || uartRxBuffer[0] == ASCII_LF)
 8009662:	4b0f      	ldr	r3, [pc, #60]	; (80096a0 <HAL_UART_RxCpltCallback+0x98>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	2b0d      	cmp	r3, #13
 8009668:	d003      	beq.n	8009672 <HAL_UART_RxCpltCallback+0x6a>
 800966a:	4b0d      	ldr	r3, [pc, #52]	; (80096a0 <HAL_UART_RxCpltCallback+0x98>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	2b0a      	cmp	r3, #10
 8009670:	d102      	bne.n	8009678 <HAL_UART_RxCpltCallback+0x70>
    {
        uartRxReceived = 1;
 8009672:	4b0c      	ldr	r3, [pc, #48]	; (80096a4 <HAL_UART_RxCpltCallback+0x9c>)
 8009674:	2201      	movs	r2, #1
 8009676:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8009678:	4909      	ldr	r1, [pc, #36]	; (80096a0 <HAL_UART_RxCpltCallback+0x98>)
 800967a:	4b08      	ldr	r3, [pc, #32]	; (800969c <HAL_UART_RxCpltCallback+0x94>)
 800967c:	2201      	movs	r2, #1
 800967e:	0018      	movs	r0, r3
 8009680:	f7fd fc08 	bl	8006e94 <HAL_UART_Receive_IT>
}
 8009684:	46c0      	nop			; (mov r8, r8)
 8009686:	46bd      	mov	sp, r7
 8009688:	b004      	add	sp, #16
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20000608 	.word	0x20000608
 8009690:	200005c8 	.word	0x200005c8
 8009694:	0800c620 	.word	0x0800c620
 8009698:	2000060c 	.word	0x2000060c
 800969c:	20000438 	.word	0x20000438
 80096a0:	200005c4 	.word	0x200005c4
 80096a4:	200005c0 	.word	0x200005c0

080096a8 <__cvt>:
 80096a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096aa:	001e      	movs	r6, r3
 80096ac:	2300      	movs	r3, #0
 80096ae:	0014      	movs	r4, r2
 80096b0:	b08b      	sub	sp, #44	; 0x2c
 80096b2:	429e      	cmp	r6, r3
 80096b4:	da04      	bge.n	80096c0 <__cvt+0x18>
 80096b6:	2180      	movs	r1, #128	; 0x80
 80096b8:	0609      	lsls	r1, r1, #24
 80096ba:	1873      	adds	r3, r6, r1
 80096bc:	001e      	movs	r6, r3
 80096be:	232d      	movs	r3, #45	; 0x2d
 80096c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80096c4:	7013      	strb	r3, [r2, #0]
 80096c6:	2320      	movs	r3, #32
 80096c8:	2203      	movs	r2, #3
 80096ca:	439f      	bics	r7, r3
 80096cc:	2f46      	cmp	r7, #70	; 0x46
 80096ce:	d007      	beq.n	80096e0 <__cvt+0x38>
 80096d0:	003b      	movs	r3, r7
 80096d2:	3b45      	subs	r3, #69	; 0x45
 80096d4:	4259      	negs	r1, r3
 80096d6:	414b      	adcs	r3, r1
 80096d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80096da:	3a01      	subs	r2, #1
 80096dc:	18cb      	adds	r3, r1, r3
 80096de:	9310      	str	r3, [sp, #64]	; 0x40
 80096e0:	ab09      	add	r3, sp, #36	; 0x24
 80096e2:	9304      	str	r3, [sp, #16]
 80096e4:	ab08      	add	r3, sp, #32
 80096e6:	9303      	str	r3, [sp, #12]
 80096e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096ea:	9200      	str	r2, [sp, #0]
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096f0:	0022      	movs	r2, r4
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	0033      	movs	r3, r6
 80096f6:	f000 ff99 	bl	800a62c <_dtoa_r>
 80096fa:	0005      	movs	r5, r0
 80096fc:	2f47      	cmp	r7, #71	; 0x47
 80096fe:	d102      	bne.n	8009706 <__cvt+0x5e>
 8009700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009702:	07db      	lsls	r3, r3, #31
 8009704:	d528      	bpl.n	8009758 <__cvt+0xb0>
 8009706:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009708:	18eb      	adds	r3, r5, r3
 800970a:	9307      	str	r3, [sp, #28]
 800970c:	2f46      	cmp	r7, #70	; 0x46
 800970e:	d114      	bne.n	800973a <__cvt+0x92>
 8009710:	782b      	ldrb	r3, [r5, #0]
 8009712:	2b30      	cmp	r3, #48	; 0x30
 8009714:	d10c      	bne.n	8009730 <__cvt+0x88>
 8009716:	2200      	movs	r2, #0
 8009718:	2300      	movs	r3, #0
 800971a:	0020      	movs	r0, r4
 800971c:	0031      	movs	r1, r6
 800971e:	f7f6 fe91 	bl	8000444 <__aeabi_dcmpeq>
 8009722:	2800      	cmp	r0, #0
 8009724:	d104      	bne.n	8009730 <__cvt+0x88>
 8009726:	2301      	movs	r3, #1
 8009728:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800972a:	1a9b      	subs	r3, r3, r2
 800972c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009732:	9a07      	ldr	r2, [sp, #28]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	18d3      	adds	r3, r2, r3
 8009738:	9307      	str	r3, [sp, #28]
 800973a:	2200      	movs	r2, #0
 800973c:	2300      	movs	r3, #0
 800973e:	0020      	movs	r0, r4
 8009740:	0031      	movs	r1, r6
 8009742:	f7f6 fe7f 	bl	8000444 <__aeabi_dcmpeq>
 8009746:	2800      	cmp	r0, #0
 8009748:	d001      	beq.n	800974e <__cvt+0xa6>
 800974a:	9b07      	ldr	r3, [sp, #28]
 800974c:	9309      	str	r3, [sp, #36]	; 0x24
 800974e:	2230      	movs	r2, #48	; 0x30
 8009750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009752:	9907      	ldr	r1, [sp, #28]
 8009754:	428b      	cmp	r3, r1
 8009756:	d306      	bcc.n	8009766 <__cvt+0xbe>
 8009758:	0028      	movs	r0, r5
 800975a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800975c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800975e:	1b5b      	subs	r3, r3, r5
 8009760:	6013      	str	r3, [r2, #0]
 8009762:	b00b      	add	sp, #44	; 0x2c
 8009764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009766:	1c59      	adds	r1, r3, #1
 8009768:	9109      	str	r1, [sp, #36]	; 0x24
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	e7f0      	b.n	8009750 <__cvt+0xa8>

0800976e <__exponent>:
 800976e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009770:	1c83      	adds	r3, r0, #2
 8009772:	b087      	sub	sp, #28
 8009774:	9303      	str	r3, [sp, #12]
 8009776:	0005      	movs	r5, r0
 8009778:	000c      	movs	r4, r1
 800977a:	232b      	movs	r3, #43	; 0x2b
 800977c:	7002      	strb	r2, [r0, #0]
 800977e:	2900      	cmp	r1, #0
 8009780:	da01      	bge.n	8009786 <__exponent+0x18>
 8009782:	424c      	negs	r4, r1
 8009784:	3302      	adds	r3, #2
 8009786:	706b      	strb	r3, [r5, #1]
 8009788:	2c09      	cmp	r4, #9
 800978a:	dd2f      	ble.n	80097ec <__exponent+0x7e>
 800978c:	270a      	movs	r7, #10
 800978e:	ab04      	add	r3, sp, #16
 8009790:	1dde      	adds	r6, r3, #7
 8009792:	0020      	movs	r0, r4
 8009794:	0039      	movs	r1, r7
 8009796:	9601      	str	r6, [sp, #4]
 8009798:	f7f6 fe3e 	bl	8000418 <__aeabi_idivmod>
 800979c:	3e01      	subs	r6, #1
 800979e:	3130      	adds	r1, #48	; 0x30
 80097a0:	0020      	movs	r0, r4
 80097a2:	7031      	strb	r1, [r6, #0]
 80097a4:	0039      	movs	r1, r7
 80097a6:	9402      	str	r4, [sp, #8]
 80097a8:	f7f6 fd50 	bl	800024c <__divsi3>
 80097ac:	9b02      	ldr	r3, [sp, #8]
 80097ae:	0004      	movs	r4, r0
 80097b0:	2b63      	cmp	r3, #99	; 0x63
 80097b2:	dcee      	bgt.n	8009792 <__exponent+0x24>
 80097b4:	9b01      	ldr	r3, [sp, #4]
 80097b6:	3430      	adds	r4, #48	; 0x30
 80097b8:	1e9a      	subs	r2, r3, #2
 80097ba:	0013      	movs	r3, r2
 80097bc:	9903      	ldr	r1, [sp, #12]
 80097be:	7014      	strb	r4, [r2, #0]
 80097c0:	a804      	add	r0, sp, #16
 80097c2:	3007      	adds	r0, #7
 80097c4:	4298      	cmp	r0, r3
 80097c6:	d80c      	bhi.n	80097e2 <__exponent+0x74>
 80097c8:	2300      	movs	r3, #0
 80097ca:	4282      	cmp	r2, r0
 80097cc:	d804      	bhi.n	80097d8 <__exponent+0x6a>
 80097ce:	aa04      	add	r2, sp, #16
 80097d0:	3309      	adds	r3, #9
 80097d2:	189b      	adds	r3, r3, r2
 80097d4:	9a01      	ldr	r2, [sp, #4]
 80097d6:	1a9b      	subs	r3, r3, r2
 80097d8:	9a03      	ldr	r2, [sp, #12]
 80097da:	18d3      	adds	r3, r2, r3
 80097dc:	1b58      	subs	r0, r3, r5
 80097de:	b007      	add	sp, #28
 80097e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e2:	7818      	ldrb	r0, [r3, #0]
 80097e4:	3301      	adds	r3, #1
 80097e6:	7008      	strb	r0, [r1, #0]
 80097e8:	3101      	adds	r1, #1
 80097ea:	e7e9      	b.n	80097c0 <__exponent+0x52>
 80097ec:	2330      	movs	r3, #48	; 0x30
 80097ee:	3430      	adds	r4, #48	; 0x30
 80097f0:	70ab      	strb	r3, [r5, #2]
 80097f2:	70ec      	strb	r4, [r5, #3]
 80097f4:	1d2b      	adds	r3, r5, #4
 80097f6:	e7f1      	b.n	80097dc <__exponent+0x6e>

080097f8 <_printf_float>:
 80097f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097fa:	b095      	sub	sp, #84	; 0x54
 80097fc:	000c      	movs	r4, r1
 80097fe:	9208      	str	r2, [sp, #32]
 8009800:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009802:	9309      	str	r3, [sp, #36]	; 0x24
 8009804:	0007      	movs	r7, r0
 8009806:	f000 fdcf 	bl	800a3a8 <_localeconv_r>
 800980a:	6803      	ldr	r3, [r0, #0]
 800980c:	0018      	movs	r0, r3
 800980e:	930c      	str	r3, [sp, #48]	; 0x30
 8009810:	f7f6 fc76 	bl	8000100 <strlen>
 8009814:	2300      	movs	r3, #0
 8009816:	9312      	str	r3, [sp, #72]	; 0x48
 8009818:	7e23      	ldrb	r3, [r4, #24]
 800981a:	2207      	movs	r2, #7
 800981c:	930a      	str	r3, [sp, #40]	; 0x28
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	900d      	str	r0, [sp, #52]	; 0x34
 8009822:	930b      	str	r3, [sp, #44]	; 0x2c
 8009824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009826:	682b      	ldr	r3, [r5, #0]
 8009828:	05c9      	lsls	r1, r1, #23
 800982a:	d547      	bpl.n	80098bc <_printf_float+0xc4>
 800982c:	189b      	adds	r3, r3, r2
 800982e:	4393      	bics	r3, r2
 8009830:	001a      	movs	r2, r3
 8009832:	3208      	adds	r2, #8
 8009834:	602a      	str	r2, [r5, #0]
 8009836:	681e      	ldr	r6, [r3, #0]
 8009838:	685d      	ldr	r5, [r3, #4]
 800983a:	0032      	movs	r2, r6
 800983c:	002b      	movs	r3, r5
 800983e:	64a2      	str	r2, [r4, #72]	; 0x48
 8009840:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009842:	2201      	movs	r2, #1
 8009844:	006b      	lsls	r3, r5, #1
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	930e      	str	r3, [sp, #56]	; 0x38
 800984a:	0030      	movs	r0, r6
 800984c:	4bab      	ldr	r3, [pc, #684]	; (8009afc <_printf_float+0x304>)
 800984e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009850:	4252      	negs	r2, r2
 8009852:	f7f9 fac7 	bl	8002de4 <__aeabi_dcmpun>
 8009856:	2800      	cmp	r0, #0
 8009858:	d132      	bne.n	80098c0 <_printf_float+0xc8>
 800985a:	2201      	movs	r2, #1
 800985c:	0030      	movs	r0, r6
 800985e:	4ba7      	ldr	r3, [pc, #668]	; (8009afc <_printf_float+0x304>)
 8009860:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009862:	4252      	negs	r2, r2
 8009864:	f7f6 fdfe 	bl	8000464 <__aeabi_dcmple>
 8009868:	2800      	cmp	r0, #0
 800986a:	d129      	bne.n	80098c0 <_printf_float+0xc8>
 800986c:	2200      	movs	r2, #0
 800986e:	2300      	movs	r3, #0
 8009870:	0030      	movs	r0, r6
 8009872:	0029      	movs	r1, r5
 8009874:	f7f6 fdec 	bl	8000450 <__aeabi_dcmplt>
 8009878:	2800      	cmp	r0, #0
 800987a:	d003      	beq.n	8009884 <_printf_float+0x8c>
 800987c:	0023      	movs	r3, r4
 800987e:	222d      	movs	r2, #45	; 0x2d
 8009880:	3343      	adds	r3, #67	; 0x43
 8009882:	701a      	strb	r2, [r3, #0]
 8009884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009886:	4d9e      	ldr	r5, [pc, #632]	; (8009b00 <_printf_float+0x308>)
 8009888:	2b47      	cmp	r3, #71	; 0x47
 800988a:	d900      	bls.n	800988e <_printf_float+0x96>
 800988c:	4d9d      	ldr	r5, [pc, #628]	; (8009b04 <_printf_float+0x30c>)
 800988e:	2303      	movs	r3, #3
 8009890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	3301      	adds	r3, #1
 8009896:	439a      	bics	r2, r3
 8009898:	2300      	movs	r3, #0
 800989a:	6022      	str	r2, [r4, #0]
 800989c:	930b      	str	r3, [sp, #44]	; 0x2c
 800989e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a0:	0021      	movs	r1, r4
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	0038      	movs	r0, r7
 80098a6:	9b08      	ldr	r3, [sp, #32]
 80098a8:	aa13      	add	r2, sp, #76	; 0x4c
 80098aa:	f000 f9fb 	bl	8009ca4 <_printf_common>
 80098ae:	3001      	adds	r0, #1
 80098b0:	d000      	beq.n	80098b4 <_printf_float+0xbc>
 80098b2:	e0a3      	b.n	80099fc <_printf_float+0x204>
 80098b4:	2001      	movs	r0, #1
 80098b6:	4240      	negs	r0, r0
 80098b8:	b015      	add	sp, #84	; 0x54
 80098ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098bc:	3307      	adds	r3, #7
 80098be:	e7b6      	b.n	800982e <_printf_float+0x36>
 80098c0:	0032      	movs	r2, r6
 80098c2:	002b      	movs	r3, r5
 80098c4:	0030      	movs	r0, r6
 80098c6:	0029      	movs	r1, r5
 80098c8:	f7f9 fa8c 	bl	8002de4 <__aeabi_dcmpun>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d00b      	beq.n	80098e8 <_printf_float+0xf0>
 80098d0:	2d00      	cmp	r5, #0
 80098d2:	da03      	bge.n	80098dc <_printf_float+0xe4>
 80098d4:	0023      	movs	r3, r4
 80098d6:	222d      	movs	r2, #45	; 0x2d
 80098d8:	3343      	adds	r3, #67	; 0x43
 80098da:	701a      	strb	r2, [r3, #0]
 80098dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098de:	4d8a      	ldr	r5, [pc, #552]	; (8009b08 <_printf_float+0x310>)
 80098e0:	2b47      	cmp	r3, #71	; 0x47
 80098e2:	d9d4      	bls.n	800988e <_printf_float+0x96>
 80098e4:	4d89      	ldr	r5, [pc, #548]	; (8009b0c <_printf_float+0x314>)
 80098e6:	e7d2      	b.n	800988e <_printf_float+0x96>
 80098e8:	2220      	movs	r2, #32
 80098ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098ec:	6863      	ldr	r3, [r4, #4]
 80098ee:	4391      	bics	r1, r2
 80098f0:	910e      	str	r1, [sp, #56]	; 0x38
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	d14a      	bne.n	800998c <_printf_float+0x194>
 80098f6:	3307      	adds	r3, #7
 80098f8:	6063      	str	r3, [r4, #4]
 80098fa:	2380      	movs	r3, #128	; 0x80
 80098fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098fe:	00db      	lsls	r3, r3, #3
 8009900:	4313      	orrs	r3, r2
 8009902:	2200      	movs	r2, #0
 8009904:	9206      	str	r2, [sp, #24]
 8009906:	aa12      	add	r2, sp, #72	; 0x48
 8009908:	9205      	str	r2, [sp, #20]
 800990a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	9204      	str	r2, [sp, #16]
 8009910:	aa11      	add	r2, sp, #68	; 0x44
 8009912:	9203      	str	r2, [sp, #12]
 8009914:	2223      	movs	r2, #35	; 0x23
 8009916:	a908      	add	r1, sp, #32
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	6863      	ldr	r3, [r4, #4]
 800991c:	1852      	adds	r2, r2, r1
 800991e:	9202      	str	r2, [sp, #8]
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	0032      	movs	r2, r6
 8009924:	002b      	movs	r3, r5
 8009926:	0038      	movs	r0, r7
 8009928:	f7ff febe 	bl	80096a8 <__cvt>
 800992c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800992e:	0005      	movs	r5, r0
 8009930:	2b47      	cmp	r3, #71	; 0x47
 8009932:	d109      	bne.n	8009948 <_printf_float+0x150>
 8009934:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009936:	1cda      	adds	r2, r3, #3
 8009938:	db02      	blt.n	8009940 <_printf_float+0x148>
 800993a:	6862      	ldr	r2, [r4, #4]
 800993c:	4293      	cmp	r3, r2
 800993e:	dd49      	ble.n	80099d4 <_printf_float+0x1dc>
 8009940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009942:	3b02      	subs	r3, #2
 8009944:	b2db      	uxtb	r3, r3
 8009946:	930a      	str	r3, [sp, #40]	; 0x28
 8009948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800994a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800994c:	2b65      	cmp	r3, #101	; 0x65
 800994e:	d824      	bhi.n	800999a <_printf_float+0x1a2>
 8009950:	0020      	movs	r0, r4
 8009952:	001a      	movs	r2, r3
 8009954:	3901      	subs	r1, #1
 8009956:	3050      	adds	r0, #80	; 0x50
 8009958:	9111      	str	r1, [sp, #68]	; 0x44
 800995a:	f7ff ff08 	bl	800976e <__exponent>
 800995e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009960:	900b      	str	r0, [sp, #44]	; 0x2c
 8009962:	1813      	adds	r3, r2, r0
 8009964:	6123      	str	r3, [r4, #16]
 8009966:	2a01      	cmp	r2, #1
 8009968:	dc02      	bgt.n	8009970 <_printf_float+0x178>
 800996a:	6822      	ldr	r2, [r4, #0]
 800996c:	07d2      	lsls	r2, r2, #31
 800996e:	d501      	bpl.n	8009974 <_printf_float+0x17c>
 8009970:	3301      	adds	r3, #1
 8009972:	6123      	str	r3, [r4, #16]
 8009974:	2323      	movs	r3, #35	; 0x23
 8009976:	aa08      	add	r2, sp, #32
 8009978:	189b      	adds	r3, r3, r2
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d100      	bne.n	8009982 <_printf_float+0x18a>
 8009980:	e78d      	b.n	800989e <_printf_float+0xa6>
 8009982:	0023      	movs	r3, r4
 8009984:	222d      	movs	r2, #45	; 0x2d
 8009986:	3343      	adds	r3, #67	; 0x43
 8009988:	701a      	strb	r2, [r3, #0]
 800998a:	e788      	b.n	800989e <_printf_float+0xa6>
 800998c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800998e:	2a47      	cmp	r2, #71	; 0x47
 8009990:	d1b3      	bne.n	80098fa <_printf_float+0x102>
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1b1      	bne.n	80098fa <_printf_float+0x102>
 8009996:	3301      	adds	r3, #1
 8009998:	e7ae      	b.n	80098f8 <_printf_float+0x100>
 800999a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800999c:	2b66      	cmp	r3, #102	; 0x66
 800999e:	d11b      	bne.n	80099d8 <_printf_float+0x1e0>
 80099a0:	6863      	ldr	r3, [r4, #4]
 80099a2:	2900      	cmp	r1, #0
 80099a4:	dd09      	ble.n	80099ba <_printf_float+0x1c2>
 80099a6:	6121      	str	r1, [r4, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d102      	bne.n	80099b2 <_printf_float+0x1ba>
 80099ac:	6822      	ldr	r2, [r4, #0]
 80099ae:	07d2      	lsls	r2, r2, #31
 80099b0:	d50b      	bpl.n	80099ca <_printf_float+0x1d2>
 80099b2:	3301      	adds	r3, #1
 80099b4:	185b      	adds	r3, r3, r1
 80099b6:	6123      	str	r3, [r4, #16]
 80099b8:	e007      	b.n	80099ca <_printf_float+0x1d2>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d103      	bne.n	80099c6 <_printf_float+0x1ce>
 80099be:	2201      	movs	r2, #1
 80099c0:	6821      	ldr	r1, [r4, #0]
 80099c2:	4211      	tst	r1, r2
 80099c4:	d000      	beq.n	80099c8 <_printf_float+0x1d0>
 80099c6:	1c9a      	adds	r2, r3, #2
 80099c8:	6122      	str	r2, [r4, #16]
 80099ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80099ce:	2300      	movs	r3, #0
 80099d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099d2:	e7cf      	b.n	8009974 <_printf_float+0x17c>
 80099d4:	2367      	movs	r3, #103	; 0x67
 80099d6:	930a      	str	r3, [sp, #40]	; 0x28
 80099d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80099da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099dc:	4299      	cmp	r1, r3
 80099de:	db06      	blt.n	80099ee <_printf_float+0x1f6>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	6121      	str	r1, [r4, #16]
 80099e4:	07db      	lsls	r3, r3, #31
 80099e6:	d5f0      	bpl.n	80099ca <_printf_float+0x1d2>
 80099e8:	3101      	adds	r1, #1
 80099ea:	6121      	str	r1, [r4, #16]
 80099ec:	e7ed      	b.n	80099ca <_printf_float+0x1d2>
 80099ee:	2201      	movs	r2, #1
 80099f0:	2900      	cmp	r1, #0
 80099f2:	dc01      	bgt.n	80099f8 <_printf_float+0x200>
 80099f4:	1892      	adds	r2, r2, r2
 80099f6:	1a52      	subs	r2, r2, r1
 80099f8:	189b      	adds	r3, r3, r2
 80099fa:	e7dc      	b.n	80099b6 <_printf_float+0x1be>
 80099fc:	6822      	ldr	r2, [r4, #0]
 80099fe:	0553      	lsls	r3, r2, #21
 8009a00:	d408      	bmi.n	8009a14 <_printf_float+0x21c>
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	002a      	movs	r2, r5
 8009a06:	0038      	movs	r0, r7
 8009a08:	9908      	ldr	r1, [sp, #32]
 8009a0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a0c:	47a8      	blx	r5
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d12a      	bne.n	8009a68 <_printf_float+0x270>
 8009a12:	e74f      	b.n	80098b4 <_printf_float+0xbc>
 8009a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a16:	2b65      	cmp	r3, #101	; 0x65
 8009a18:	d800      	bhi.n	8009a1c <_printf_float+0x224>
 8009a1a:	e0ec      	b.n	8009bf6 <_printf_float+0x3fe>
 8009a1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009a1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009a20:	2200      	movs	r2, #0
 8009a22:	2300      	movs	r3, #0
 8009a24:	f7f6 fd0e 	bl	8000444 <__aeabi_dcmpeq>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d034      	beq.n	8009a96 <_printf_float+0x29e>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	0038      	movs	r0, r7
 8009a30:	4a37      	ldr	r2, [pc, #220]	; (8009b10 <_printf_float+0x318>)
 8009a32:	9908      	ldr	r1, [sp, #32]
 8009a34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a36:	47a8      	blx	r5
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d100      	bne.n	8009a3e <_printf_float+0x246>
 8009a3c:	e73a      	b.n	80098b4 <_printf_float+0xbc>
 8009a3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a42:	429a      	cmp	r2, r3
 8009a44:	db02      	blt.n	8009a4c <_printf_float+0x254>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	07db      	lsls	r3, r3, #31
 8009a4a:	d50d      	bpl.n	8009a68 <_printf_float+0x270>
 8009a4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a4e:	0038      	movs	r0, r7
 8009a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a54:	9908      	ldr	r1, [sp, #32]
 8009a56:	47a8      	blx	r5
 8009a58:	2500      	movs	r5, #0
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d100      	bne.n	8009a60 <_printf_float+0x268>
 8009a5e:	e729      	b.n	80098b4 <_printf_float+0xbc>
 8009a60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a62:	3b01      	subs	r3, #1
 8009a64:	42ab      	cmp	r3, r5
 8009a66:	dc0a      	bgt.n	8009a7e <_printf_float+0x286>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	079b      	lsls	r3, r3, #30
 8009a6c:	d500      	bpl.n	8009a70 <_printf_float+0x278>
 8009a6e:	e116      	b.n	8009c9e <_printf_float+0x4a6>
 8009a70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a72:	68e0      	ldr	r0, [r4, #12]
 8009a74:	4298      	cmp	r0, r3
 8009a76:	db00      	blt.n	8009a7a <_printf_float+0x282>
 8009a78:	e71e      	b.n	80098b8 <_printf_float+0xc0>
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	e71c      	b.n	80098b8 <_printf_float+0xc0>
 8009a7e:	0022      	movs	r2, r4
 8009a80:	2301      	movs	r3, #1
 8009a82:	0038      	movs	r0, r7
 8009a84:	9908      	ldr	r1, [sp, #32]
 8009a86:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009a88:	321a      	adds	r2, #26
 8009a8a:	47b0      	blx	r6
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d100      	bne.n	8009a92 <_printf_float+0x29a>
 8009a90:	e710      	b.n	80098b4 <_printf_float+0xbc>
 8009a92:	3501      	adds	r5, #1
 8009a94:	e7e4      	b.n	8009a60 <_printf_float+0x268>
 8009a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dc3b      	bgt.n	8009b14 <_printf_float+0x31c>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	0038      	movs	r0, r7
 8009aa0:	4a1b      	ldr	r2, [pc, #108]	; (8009b10 <_printf_float+0x318>)
 8009aa2:	9908      	ldr	r1, [sp, #32]
 8009aa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009aa6:	47b0      	blx	r6
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d100      	bne.n	8009aae <_printf_float+0x2b6>
 8009aac:	e702      	b.n	80098b4 <_printf_float+0xbc>
 8009aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ab0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	d102      	bne.n	8009abc <_printf_float+0x2c4>
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	07db      	lsls	r3, r3, #31
 8009aba:	d5d5      	bpl.n	8009a68 <_printf_float+0x270>
 8009abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009abe:	0038      	movs	r0, r7
 8009ac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ac2:	9908      	ldr	r1, [sp, #32]
 8009ac4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009ac6:	47b0      	blx	r6
 8009ac8:	2300      	movs	r3, #0
 8009aca:	3001      	adds	r0, #1
 8009acc:	d100      	bne.n	8009ad0 <_printf_float+0x2d8>
 8009ace:	e6f1      	b.n	80098b4 <_printf_float+0xbc>
 8009ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ad2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ad6:	425b      	negs	r3, r3
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	dc01      	bgt.n	8009ae0 <_printf_float+0x2e8>
 8009adc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ade:	e791      	b.n	8009a04 <_printf_float+0x20c>
 8009ae0:	0022      	movs	r2, r4
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	0038      	movs	r0, r7
 8009ae6:	9908      	ldr	r1, [sp, #32]
 8009ae8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009aea:	321a      	adds	r2, #26
 8009aec:	47b0      	blx	r6
 8009aee:	3001      	adds	r0, #1
 8009af0:	d100      	bne.n	8009af4 <_printf_float+0x2fc>
 8009af2:	e6df      	b.n	80098b4 <_printf_float+0xbc>
 8009af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af6:	3301      	adds	r3, #1
 8009af8:	e7ea      	b.n	8009ad0 <_printf_float+0x2d8>
 8009afa:	46c0      	nop			; (mov r8, r8)
 8009afc:	7fefffff 	.word	0x7fefffff
 8009b00:	0800c7d0 	.word	0x0800c7d0
 8009b04:	0800c7d4 	.word	0x0800c7d4
 8009b08:	0800c7d8 	.word	0x0800c7d8
 8009b0c:	0800c7dc 	.word	0x0800c7dc
 8009b10:	0800c7e0 	.word	0x0800c7e0
 8009b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b18:	920a      	str	r2, [sp, #40]	; 0x28
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	dd00      	ble.n	8009b20 <_printf_float+0x328>
 8009b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	dc3d      	bgt.n	8009ba2 <_printf_float+0x3aa>
 8009b26:	2300      	movs	r3, #0
 8009b28:	930e      	str	r3, [sp, #56]	; 0x38
 8009b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b2c:	43db      	mvns	r3, r3
 8009b2e:	17db      	asrs	r3, r3, #31
 8009b30:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b42:	4293      	cmp	r3, r2
 8009b44:	dc36      	bgt.n	8009bb4 <_printf_float+0x3bc>
 8009b46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	db40      	blt.n	8009bd0 <_printf_float+0x3d8>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	07db      	lsls	r3, r3, #31
 8009b52:	d43d      	bmi.n	8009bd0 <_printf_float+0x3d8>
 8009b54:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009b56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b5a:	1af3      	subs	r3, r6, r3
 8009b5c:	1ab6      	subs	r6, r6, r2
 8009b5e:	429e      	cmp	r6, r3
 8009b60:	dd00      	ble.n	8009b64 <_printf_float+0x36c>
 8009b62:	001e      	movs	r6, r3
 8009b64:	2e00      	cmp	r6, #0
 8009b66:	dc3c      	bgt.n	8009be2 <_printf_float+0x3ea>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b6c:	43f3      	mvns	r3, r6
 8009b6e:	17db      	asrs	r3, r3, #31
 8009b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b76:	1a9b      	subs	r3, r3, r2
 8009b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b7a:	4032      	ands	r2, r6
 8009b7c:	1a9b      	subs	r3, r3, r2
 8009b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b80:	4293      	cmp	r3, r2
 8009b82:	dc00      	bgt.n	8009b86 <_printf_float+0x38e>
 8009b84:	e770      	b.n	8009a68 <_printf_float+0x270>
 8009b86:	0022      	movs	r2, r4
 8009b88:	2301      	movs	r3, #1
 8009b8a:	0038      	movs	r0, r7
 8009b8c:	9908      	ldr	r1, [sp, #32]
 8009b8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b90:	321a      	adds	r2, #26
 8009b92:	47a8      	blx	r5
 8009b94:	3001      	adds	r0, #1
 8009b96:	d100      	bne.n	8009b9a <_printf_float+0x3a2>
 8009b98:	e68c      	b.n	80098b4 <_printf_float+0xbc>
 8009b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8009ba0:	e7e7      	b.n	8009b72 <_printf_float+0x37a>
 8009ba2:	002a      	movs	r2, r5
 8009ba4:	0038      	movs	r0, r7
 8009ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ba8:	9908      	ldr	r1, [sp, #32]
 8009baa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009bac:	47b0      	blx	r6
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d1b9      	bne.n	8009b26 <_printf_float+0x32e>
 8009bb2:	e67f      	b.n	80098b4 <_printf_float+0xbc>
 8009bb4:	0022      	movs	r2, r4
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	0038      	movs	r0, r7
 8009bba:	9908      	ldr	r1, [sp, #32]
 8009bbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009bbe:	321a      	adds	r2, #26
 8009bc0:	47b0      	blx	r6
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	d100      	bne.n	8009bc8 <_printf_float+0x3d0>
 8009bc6:	e675      	b.n	80098b4 <_printf_float+0xbc>
 8009bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bca:	3301      	adds	r3, #1
 8009bcc:	930e      	str	r3, [sp, #56]	; 0x38
 8009bce:	e7b0      	b.n	8009b32 <_printf_float+0x33a>
 8009bd0:	0038      	movs	r0, r7
 8009bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bd6:	9908      	ldr	r1, [sp, #32]
 8009bd8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009bda:	47b0      	blx	r6
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d1b9      	bne.n	8009b54 <_printf_float+0x35c>
 8009be0:	e668      	b.n	80098b4 <_printf_float+0xbc>
 8009be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009be4:	0038      	movs	r0, r7
 8009be6:	18ea      	adds	r2, r5, r3
 8009be8:	9908      	ldr	r1, [sp, #32]
 8009bea:	0033      	movs	r3, r6
 8009bec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009bee:	47a8      	blx	r5
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d1b9      	bne.n	8009b68 <_printf_float+0x370>
 8009bf4:	e65e      	b.n	80098b4 <_printf_float+0xbc>
 8009bf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	dc02      	bgt.n	8009c02 <_printf_float+0x40a>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	421a      	tst	r2, r3
 8009c00:	d03a      	beq.n	8009c78 <_printf_float+0x480>
 8009c02:	2301      	movs	r3, #1
 8009c04:	002a      	movs	r2, r5
 8009c06:	0038      	movs	r0, r7
 8009c08:	9908      	ldr	r1, [sp, #32]
 8009c0a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c0c:	47b0      	blx	r6
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d100      	bne.n	8009c14 <_printf_float+0x41c>
 8009c12:	e64f      	b.n	80098b4 <_printf_float+0xbc>
 8009c14:	0038      	movs	r0, r7
 8009c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c1a:	9908      	ldr	r1, [sp, #32]
 8009c1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c1e:	47b0      	blx	r6
 8009c20:	3001      	adds	r0, #1
 8009c22:	d100      	bne.n	8009c26 <_printf_float+0x42e>
 8009c24:	e646      	b.n	80098b4 <_printf_float+0xbc>
 8009c26:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009c28:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009c2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	001e      	movs	r6, r3
 8009c30:	2300      	movs	r3, #0
 8009c32:	f7f6 fc07 	bl	8000444 <__aeabi_dcmpeq>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d11c      	bne.n	8009c74 <_printf_float+0x47c>
 8009c3a:	0033      	movs	r3, r6
 8009c3c:	1c6a      	adds	r2, r5, #1
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	0038      	movs	r0, r7
 8009c42:	9908      	ldr	r1, [sp, #32]
 8009c44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009c46:	47a8      	blx	r5
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d10f      	bne.n	8009c6c <_printf_float+0x474>
 8009c4c:	e632      	b.n	80098b4 <_printf_float+0xbc>
 8009c4e:	0022      	movs	r2, r4
 8009c50:	2301      	movs	r3, #1
 8009c52:	0038      	movs	r0, r7
 8009c54:	9908      	ldr	r1, [sp, #32]
 8009c56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c58:	321a      	adds	r2, #26
 8009c5a:	47b0      	blx	r6
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	d100      	bne.n	8009c62 <_printf_float+0x46a>
 8009c60:	e628      	b.n	80098b4 <_printf_float+0xbc>
 8009c62:	3501      	adds	r5, #1
 8009c64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c66:	3b01      	subs	r3, #1
 8009c68:	42ab      	cmp	r3, r5
 8009c6a:	dcf0      	bgt.n	8009c4e <_printf_float+0x456>
 8009c6c:	0022      	movs	r2, r4
 8009c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c70:	3250      	adds	r2, #80	; 0x50
 8009c72:	e6c8      	b.n	8009a06 <_printf_float+0x20e>
 8009c74:	2500      	movs	r5, #0
 8009c76:	e7f5      	b.n	8009c64 <_printf_float+0x46c>
 8009c78:	002a      	movs	r2, r5
 8009c7a:	e7e1      	b.n	8009c40 <_printf_float+0x448>
 8009c7c:	0022      	movs	r2, r4
 8009c7e:	2301      	movs	r3, #1
 8009c80:	0038      	movs	r0, r7
 8009c82:	9908      	ldr	r1, [sp, #32]
 8009c84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c86:	3219      	adds	r2, #25
 8009c88:	47b0      	blx	r6
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d100      	bne.n	8009c90 <_printf_float+0x498>
 8009c8e:	e611      	b.n	80098b4 <_printf_float+0xbc>
 8009c90:	3501      	adds	r5, #1
 8009c92:	68e3      	ldr	r3, [r4, #12]
 8009c94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c96:	1a9b      	subs	r3, r3, r2
 8009c98:	42ab      	cmp	r3, r5
 8009c9a:	dcef      	bgt.n	8009c7c <_printf_float+0x484>
 8009c9c:	e6e8      	b.n	8009a70 <_printf_float+0x278>
 8009c9e:	2500      	movs	r5, #0
 8009ca0:	e7f7      	b.n	8009c92 <_printf_float+0x49a>
 8009ca2:	46c0      	nop			; (mov r8, r8)

08009ca4 <_printf_common>:
 8009ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ca6:	0016      	movs	r6, r2
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	688a      	ldr	r2, [r1, #8]
 8009cac:	690b      	ldr	r3, [r1, #16]
 8009cae:	000c      	movs	r4, r1
 8009cb0:	9000      	str	r0, [sp, #0]
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	da00      	bge.n	8009cb8 <_printf_common+0x14>
 8009cb6:	0013      	movs	r3, r2
 8009cb8:	0022      	movs	r2, r4
 8009cba:	6033      	str	r3, [r6, #0]
 8009cbc:	3243      	adds	r2, #67	; 0x43
 8009cbe:	7812      	ldrb	r2, [r2, #0]
 8009cc0:	2a00      	cmp	r2, #0
 8009cc2:	d001      	beq.n	8009cc8 <_printf_common+0x24>
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	6033      	str	r3, [r6, #0]
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	069b      	lsls	r3, r3, #26
 8009ccc:	d502      	bpl.n	8009cd4 <_printf_common+0x30>
 8009cce:	6833      	ldr	r3, [r6, #0]
 8009cd0:	3302      	adds	r3, #2
 8009cd2:	6033      	str	r3, [r6, #0]
 8009cd4:	6822      	ldr	r2, [r4, #0]
 8009cd6:	2306      	movs	r3, #6
 8009cd8:	0015      	movs	r5, r2
 8009cda:	401d      	ands	r5, r3
 8009cdc:	421a      	tst	r2, r3
 8009cde:	d027      	beq.n	8009d30 <_printf_common+0x8c>
 8009ce0:	0023      	movs	r3, r4
 8009ce2:	3343      	adds	r3, #67	; 0x43
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	1e5a      	subs	r2, r3, #1
 8009ce8:	4193      	sbcs	r3, r2
 8009cea:	6822      	ldr	r2, [r4, #0]
 8009cec:	0692      	lsls	r2, r2, #26
 8009cee:	d430      	bmi.n	8009d52 <_printf_common+0xae>
 8009cf0:	0022      	movs	r2, r4
 8009cf2:	9901      	ldr	r1, [sp, #4]
 8009cf4:	9800      	ldr	r0, [sp, #0]
 8009cf6:	9d08      	ldr	r5, [sp, #32]
 8009cf8:	3243      	adds	r2, #67	; 0x43
 8009cfa:	47a8      	blx	r5
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	d025      	beq.n	8009d4c <_printf_common+0xa8>
 8009d00:	2206      	movs	r2, #6
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	2500      	movs	r5, #0
 8009d06:	4013      	ands	r3, r2
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	d105      	bne.n	8009d18 <_printf_common+0x74>
 8009d0c:	6833      	ldr	r3, [r6, #0]
 8009d0e:	68e5      	ldr	r5, [r4, #12]
 8009d10:	1aed      	subs	r5, r5, r3
 8009d12:	43eb      	mvns	r3, r5
 8009d14:	17db      	asrs	r3, r3, #31
 8009d16:	401d      	ands	r5, r3
 8009d18:	68a3      	ldr	r3, [r4, #8]
 8009d1a:	6922      	ldr	r2, [r4, #16]
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	dd01      	ble.n	8009d24 <_printf_common+0x80>
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	18ed      	adds	r5, r5, r3
 8009d24:	2600      	movs	r6, #0
 8009d26:	42b5      	cmp	r5, r6
 8009d28:	d120      	bne.n	8009d6c <_printf_common+0xc8>
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	e010      	b.n	8009d50 <_printf_common+0xac>
 8009d2e:	3501      	adds	r5, #1
 8009d30:	68e3      	ldr	r3, [r4, #12]
 8009d32:	6832      	ldr	r2, [r6, #0]
 8009d34:	1a9b      	subs	r3, r3, r2
 8009d36:	42ab      	cmp	r3, r5
 8009d38:	ddd2      	ble.n	8009ce0 <_printf_common+0x3c>
 8009d3a:	0022      	movs	r2, r4
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	9901      	ldr	r1, [sp, #4]
 8009d40:	9800      	ldr	r0, [sp, #0]
 8009d42:	9f08      	ldr	r7, [sp, #32]
 8009d44:	3219      	adds	r2, #25
 8009d46:	47b8      	blx	r7
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d1f0      	bne.n	8009d2e <_printf_common+0x8a>
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	4240      	negs	r0, r0
 8009d50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d52:	2030      	movs	r0, #48	; 0x30
 8009d54:	18e1      	adds	r1, r4, r3
 8009d56:	3143      	adds	r1, #67	; 0x43
 8009d58:	7008      	strb	r0, [r1, #0]
 8009d5a:	0021      	movs	r1, r4
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	3145      	adds	r1, #69	; 0x45
 8009d60:	7809      	ldrb	r1, [r1, #0]
 8009d62:	18a2      	adds	r2, r4, r2
 8009d64:	3243      	adds	r2, #67	; 0x43
 8009d66:	3302      	adds	r3, #2
 8009d68:	7011      	strb	r1, [r2, #0]
 8009d6a:	e7c1      	b.n	8009cf0 <_printf_common+0x4c>
 8009d6c:	0022      	movs	r2, r4
 8009d6e:	2301      	movs	r3, #1
 8009d70:	9901      	ldr	r1, [sp, #4]
 8009d72:	9800      	ldr	r0, [sp, #0]
 8009d74:	9f08      	ldr	r7, [sp, #32]
 8009d76:	321a      	adds	r2, #26
 8009d78:	47b8      	blx	r7
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	d0e6      	beq.n	8009d4c <_printf_common+0xa8>
 8009d7e:	3601      	adds	r6, #1
 8009d80:	e7d1      	b.n	8009d26 <_printf_common+0x82>
	...

08009d84 <_printf_i>:
 8009d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d86:	b08b      	sub	sp, #44	; 0x2c
 8009d88:	9206      	str	r2, [sp, #24]
 8009d8a:	000a      	movs	r2, r1
 8009d8c:	3243      	adds	r2, #67	; 0x43
 8009d8e:	9307      	str	r3, [sp, #28]
 8009d90:	9005      	str	r0, [sp, #20]
 8009d92:	9204      	str	r2, [sp, #16]
 8009d94:	7e0a      	ldrb	r2, [r1, #24]
 8009d96:	000c      	movs	r4, r1
 8009d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d9a:	2a78      	cmp	r2, #120	; 0x78
 8009d9c:	d809      	bhi.n	8009db2 <_printf_i+0x2e>
 8009d9e:	2a62      	cmp	r2, #98	; 0x62
 8009da0:	d80b      	bhi.n	8009dba <_printf_i+0x36>
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	d100      	bne.n	8009da8 <_printf_i+0x24>
 8009da6:	e0be      	b.n	8009f26 <_printf_i+0x1a2>
 8009da8:	497c      	ldr	r1, [pc, #496]	; (8009f9c <_printf_i+0x218>)
 8009daa:	9103      	str	r1, [sp, #12]
 8009dac:	2a58      	cmp	r2, #88	; 0x58
 8009dae:	d100      	bne.n	8009db2 <_printf_i+0x2e>
 8009db0:	e093      	b.n	8009eda <_printf_i+0x156>
 8009db2:	0026      	movs	r6, r4
 8009db4:	3642      	adds	r6, #66	; 0x42
 8009db6:	7032      	strb	r2, [r6, #0]
 8009db8:	e022      	b.n	8009e00 <_printf_i+0x7c>
 8009dba:	0010      	movs	r0, r2
 8009dbc:	3863      	subs	r0, #99	; 0x63
 8009dbe:	2815      	cmp	r0, #21
 8009dc0:	d8f7      	bhi.n	8009db2 <_printf_i+0x2e>
 8009dc2:	f7f6 f9af 	bl	8000124 <__gnu_thumb1_case_shi>
 8009dc6:	0016      	.short	0x0016
 8009dc8:	fff6001f 	.word	0xfff6001f
 8009dcc:	fff6fff6 	.word	0xfff6fff6
 8009dd0:	001ffff6 	.word	0x001ffff6
 8009dd4:	fff6fff6 	.word	0xfff6fff6
 8009dd8:	fff6fff6 	.word	0xfff6fff6
 8009ddc:	003600a3 	.word	0x003600a3
 8009de0:	fff60083 	.word	0xfff60083
 8009de4:	00b4fff6 	.word	0x00b4fff6
 8009de8:	0036fff6 	.word	0x0036fff6
 8009dec:	fff6fff6 	.word	0xfff6fff6
 8009df0:	0087      	.short	0x0087
 8009df2:	0026      	movs	r6, r4
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	3642      	adds	r6, #66	; 0x42
 8009df8:	1d11      	adds	r1, r2, #4
 8009dfa:	6019      	str	r1, [r3, #0]
 8009dfc:	6813      	ldr	r3, [r2, #0]
 8009dfe:	7033      	strb	r3, [r6, #0]
 8009e00:	2301      	movs	r3, #1
 8009e02:	e0a2      	b.n	8009f4a <_printf_i+0x1c6>
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	6809      	ldr	r1, [r1, #0]
 8009e08:	1d02      	adds	r2, r0, #4
 8009e0a:	060d      	lsls	r5, r1, #24
 8009e0c:	d50b      	bpl.n	8009e26 <_printf_i+0xa2>
 8009e0e:	6805      	ldr	r5, [r0, #0]
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	2d00      	cmp	r5, #0
 8009e14:	da03      	bge.n	8009e1e <_printf_i+0x9a>
 8009e16:	232d      	movs	r3, #45	; 0x2d
 8009e18:	9a04      	ldr	r2, [sp, #16]
 8009e1a:	426d      	negs	r5, r5
 8009e1c:	7013      	strb	r3, [r2, #0]
 8009e1e:	4b5f      	ldr	r3, [pc, #380]	; (8009f9c <_printf_i+0x218>)
 8009e20:	270a      	movs	r7, #10
 8009e22:	9303      	str	r3, [sp, #12]
 8009e24:	e01b      	b.n	8009e5e <_printf_i+0xda>
 8009e26:	6805      	ldr	r5, [r0, #0]
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	0649      	lsls	r1, r1, #25
 8009e2c:	d5f1      	bpl.n	8009e12 <_printf_i+0x8e>
 8009e2e:	b22d      	sxth	r5, r5
 8009e30:	e7ef      	b.n	8009e12 <_printf_i+0x8e>
 8009e32:	680d      	ldr	r5, [r1, #0]
 8009e34:	6819      	ldr	r1, [r3, #0]
 8009e36:	1d08      	adds	r0, r1, #4
 8009e38:	6018      	str	r0, [r3, #0]
 8009e3a:	062e      	lsls	r6, r5, #24
 8009e3c:	d501      	bpl.n	8009e42 <_printf_i+0xbe>
 8009e3e:	680d      	ldr	r5, [r1, #0]
 8009e40:	e003      	b.n	8009e4a <_printf_i+0xc6>
 8009e42:	066d      	lsls	r5, r5, #25
 8009e44:	d5fb      	bpl.n	8009e3e <_printf_i+0xba>
 8009e46:	680d      	ldr	r5, [r1, #0]
 8009e48:	b2ad      	uxth	r5, r5
 8009e4a:	4b54      	ldr	r3, [pc, #336]	; (8009f9c <_printf_i+0x218>)
 8009e4c:	2708      	movs	r7, #8
 8009e4e:	9303      	str	r3, [sp, #12]
 8009e50:	2a6f      	cmp	r2, #111	; 0x6f
 8009e52:	d000      	beq.n	8009e56 <_printf_i+0xd2>
 8009e54:	3702      	adds	r7, #2
 8009e56:	0023      	movs	r3, r4
 8009e58:	2200      	movs	r2, #0
 8009e5a:	3343      	adds	r3, #67	; 0x43
 8009e5c:	701a      	strb	r2, [r3, #0]
 8009e5e:	6863      	ldr	r3, [r4, #4]
 8009e60:	60a3      	str	r3, [r4, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	db03      	blt.n	8009e6e <_printf_i+0xea>
 8009e66:	2104      	movs	r1, #4
 8009e68:	6822      	ldr	r2, [r4, #0]
 8009e6a:	438a      	bics	r2, r1
 8009e6c:	6022      	str	r2, [r4, #0]
 8009e6e:	2d00      	cmp	r5, #0
 8009e70:	d102      	bne.n	8009e78 <_printf_i+0xf4>
 8009e72:	9e04      	ldr	r6, [sp, #16]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00c      	beq.n	8009e92 <_printf_i+0x10e>
 8009e78:	9e04      	ldr	r6, [sp, #16]
 8009e7a:	0028      	movs	r0, r5
 8009e7c:	0039      	movs	r1, r7
 8009e7e:	f7f6 f9e1 	bl	8000244 <__aeabi_uidivmod>
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	3e01      	subs	r6, #1
 8009e86:	5c5b      	ldrb	r3, [r3, r1]
 8009e88:	7033      	strb	r3, [r6, #0]
 8009e8a:	002b      	movs	r3, r5
 8009e8c:	0005      	movs	r5, r0
 8009e8e:	429f      	cmp	r7, r3
 8009e90:	d9f3      	bls.n	8009e7a <_printf_i+0xf6>
 8009e92:	2f08      	cmp	r7, #8
 8009e94:	d109      	bne.n	8009eaa <_printf_i+0x126>
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	07db      	lsls	r3, r3, #31
 8009e9a:	d506      	bpl.n	8009eaa <_printf_i+0x126>
 8009e9c:	6862      	ldr	r2, [r4, #4]
 8009e9e:	6923      	ldr	r3, [r4, #16]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	dc02      	bgt.n	8009eaa <_printf_i+0x126>
 8009ea4:	2330      	movs	r3, #48	; 0x30
 8009ea6:	3e01      	subs	r6, #1
 8009ea8:	7033      	strb	r3, [r6, #0]
 8009eaa:	9b04      	ldr	r3, [sp, #16]
 8009eac:	1b9b      	subs	r3, r3, r6
 8009eae:	6123      	str	r3, [r4, #16]
 8009eb0:	9b07      	ldr	r3, [sp, #28]
 8009eb2:	0021      	movs	r1, r4
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	9805      	ldr	r0, [sp, #20]
 8009eb8:	9b06      	ldr	r3, [sp, #24]
 8009eba:	aa09      	add	r2, sp, #36	; 0x24
 8009ebc:	f7ff fef2 	bl	8009ca4 <_printf_common>
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d147      	bne.n	8009f54 <_printf_i+0x1d0>
 8009ec4:	2001      	movs	r0, #1
 8009ec6:	4240      	negs	r0, r0
 8009ec8:	b00b      	add	sp, #44	; 0x2c
 8009eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ecc:	2220      	movs	r2, #32
 8009ece:	6809      	ldr	r1, [r1, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	6022      	str	r2, [r4, #0]
 8009ed4:	2278      	movs	r2, #120	; 0x78
 8009ed6:	4932      	ldr	r1, [pc, #200]	; (8009fa0 <_printf_i+0x21c>)
 8009ed8:	9103      	str	r1, [sp, #12]
 8009eda:	0021      	movs	r1, r4
 8009edc:	3145      	adds	r1, #69	; 0x45
 8009ede:	700a      	strb	r2, [r1, #0]
 8009ee0:	6819      	ldr	r1, [r3, #0]
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	c920      	ldmia	r1!, {r5}
 8009ee6:	0610      	lsls	r0, r2, #24
 8009ee8:	d402      	bmi.n	8009ef0 <_printf_i+0x16c>
 8009eea:	0650      	lsls	r0, r2, #25
 8009eec:	d500      	bpl.n	8009ef0 <_printf_i+0x16c>
 8009eee:	b2ad      	uxth	r5, r5
 8009ef0:	6019      	str	r1, [r3, #0]
 8009ef2:	07d3      	lsls	r3, r2, #31
 8009ef4:	d502      	bpl.n	8009efc <_printf_i+0x178>
 8009ef6:	2320      	movs	r3, #32
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	6023      	str	r3, [r4, #0]
 8009efc:	2710      	movs	r7, #16
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	d1a9      	bne.n	8009e56 <_printf_i+0xd2>
 8009f02:	2220      	movs	r2, #32
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	4393      	bics	r3, r2
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	e7a4      	b.n	8009e56 <_printf_i+0xd2>
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	680d      	ldr	r5, [r1, #0]
 8009f10:	1d10      	adds	r0, r2, #4
 8009f12:	6949      	ldr	r1, [r1, #20]
 8009f14:	6018      	str	r0, [r3, #0]
 8009f16:	6813      	ldr	r3, [r2, #0]
 8009f18:	062e      	lsls	r6, r5, #24
 8009f1a:	d501      	bpl.n	8009f20 <_printf_i+0x19c>
 8009f1c:	6019      	str	r1, [r3, #0]
 8009f1e:	e002      	b.n	8009f26 <_printf_i+0x1a2>
 8009f20:	066d      	lsls	r5, r5, #25
 8009f22:	d5fb      	bpl.n	8009f1c <_printf_i+0x198>
 8009f24:	8019      	strh	r1, [r3, #0]
 8009f26:	2300      	movs	r3, #0
 8009f28:	9e04      	ldr	r6, [sp, #16]
 8009f2a:	6123      	str	r3, [r4, #16]
 8009f2c:	e7c0      	b.n	8009eb0 <_printf_i+0x12c>
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	1d11      	adds	r1, r2, #4
 8009f32:	6019      	str	r1, [r3, #0]
 8009f34:	6816      	ldr	r6, [r2, #0]
 8009f36:	2100      	movs	r1, #0
 8009f38:	0030      	movs	r0, r6
 8009f3a:	6862      	ldr	r2, [r4, #4]
 8009f3c:	f000 fab3 	bl	800a4a6 <memchr>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d001      	beq.n	8009f48 <_printf_i+0x1c4>
 8009f44:	1b80      	subs	r0, r0, r6
 8009f46:	6060      	str	r0, [r4, #4]
 8009f48:	6863      	ldr	r3, [r4, #4]
 8009f4a:	6123      	str	r3, [r4, #16]
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	9a04      	ldr	r2, [sp, #16]
 8009f50:	7013      	strb	r3, [r2, #0]
 8009f52:	e7ad      	b.n	8009eb0 <_printf_i+0x12c>
 8009f54:	0032      	movs	r2, r6
 8009f56:	6923      	ldr	r3, [r4, #16]
 8009f58:	9906      	ldr	r1, [sp, #24]
 8009f5a:	9805      	ldr	r0, [sp, #20]
 8009f5c:	9d07      	ldr	r5, [sp, #28]
 8009f5e:	47a8      	blx	r5
 8009f60:	3001      	adds	r0, #1
 8009f62:	d0af      	beq.n	8009ec4 <_printf_i+0x140>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	079b      	lsls	r3, r3, #30
 8009f68:	d415      	bmi.n	8009f96 <_printf_i+0x212>
 8009f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6c:	68e0      	ldr	r0, [r4, #12]
 8009f6e:	4298      	cmp	r0, r3
 8009f70:	daaa      	bge.n	8009ec8 <_printf_i+0x144>
 8009f72:	0018      	movs	r0, r3
 8009f74:	e7a8      	b.n	8009ec8 <_printf_i+0x144>
 8009f76:	0022      	movs	r2, r4
 8009f78:	2301      	movs	r3, #1
 8009f7a:	9906      	ldr	r1, [sp, #24]
 8009f7c:	9805      	ldr	r0, [sp, #20]
 8009f7e:	9e07      	ldr	r6, [sp, #28]
 8009f80:	3219      	adds	r2, #25
 8009f82:	47b0      	blx	r6
 8009f84:	3001      	adds	r0, #1
 8009f86:	d09d      	beq.n	8009ec4 <_printf_i+0x140>
 8009f88:	3501      	adds	r5, #1
 8009f8a:	68e3      	ldr	r3, [r4, #12]
 8009f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f8e:	1a9b      	subs	r3, r3, r2
 8009f90:	42ab      	cmp	r3, r5
 8009f92:	dcf0      	bgt.n	8009f76 <_printf_i+0x1f2>
 8009f94:	e7e9      	b.n	8009f6a <_printf_i+0x1e6>
 8009f96:	2500      	movs	r5, #0
 8009f98:	e7f7      	b.n	8009f8a <_printf_i+0x206>
 8009f9a:	46c0      	nop			; (mov r8, r8)
 8009f9c:	0800c7e2 	.word	0x0800c7e2
 8009fa0:	0800c7f3 	.word	0x0800c7f3

08009fa4 <std>:
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	b510      	push	{r4, lr}
 8009fa8:	0004      	movs	r4, r0
 8009faa:	6003      	str	r3, [r0, #0]
 8009fac:	6043      	str	r3, [r0, #4]
 8009fae:	6083      	str	r3, [r0, #8]
 8009fb0:	8181      	strh	r1, [r0, #12]
 8009fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8009fb4:	81c2      	strh	r2, [r0, #14]
 8009fb6:	6103      	str	r3, [r0, #16]
 8009fb8:	6143      	str	r3, [r0, #20]
 8009fba:	6183      	str	r3, [r0, #24]
 8009fbc:	0019      	movs	r1, r3
 8009fbe:	2208      	movs	r2, #8
 8009fc0:	305c      	adds	r0, #92	; 0x5c
 8009fc2:	f000 f9e9 	bl	800a398 <memset>
 8009fc6:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <std+0x50>)
 8009fc8:	6224      	str	r4, [r4, #32]
 8009fca:	6263      	str	r3, [r4, #36]	; 0x24
 8009fcc:	4b0a      	ldr	r3, [pc, #40]	; (8009ff8 <std+0x54>)
 8009fce:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <std+0x58>)
 8009fd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	; (800a000 <std+0x5c>)
 8009fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8009fd8:	4b0a      	ldr	r3, [pc, #40]	; (800a004 <std+0x60>)
 8009fda:	429c      	cmp	r4, r3
 8009fdc:	d005      	beq.n	8009fea <std+0x46>
 8009fde:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <std+0x64>)
 8009fe0:	429c      	cmp	r4, r3
 8009fe2:	d002      	beq.n	8009fea <std+0x46>
 8009fe4:	4b09      	ldr	r3, [pc, #36]	; (800a00c <std+0x68>)
 8009fe6:	429c      	cmp	r4, r3
 8009fe8:	d103      	bne.n	8009ff2 <std+0x4e>
 8009fea:	0020      	movs	r0, r4
 8009fec:	3058      	adds	r0, #88	; 0x58
 8009fee:	f000 fa57 	bl	800a4a0 <__retarget_lock_init_recursive>
 8009ff2:	bd10      	pop	{r4, pc}
 8009ff4:	0800a1b5 	.word	0x0800a1b5
 8009ff8:	0800a1dd 	.word	0x0800a1dd
 8009ffc:	0800a215 	.word	0x0800a215
 800a000:	0800a241 	.word	0x0800a241
 800a004:	20000670 	.word	0x20000670
 800a008:	200006d8 	.word	0x200006d8
 800a00c:	20000740 	.word	0x20000740

0800a010 <stdio_exit_handler>:
 800a010:	b510      	push	{r4, lr}
 800a012:	4a03      	ldr	r2, [pc, #12]	; (800a020 <stdio_exit_handler+0x10>)
 800a014:	4903      	ldr	r1, [pc, #12]	; (800a024 <stdio_exit_handler+0x14>)
 800a016:	4804      	ldr	r0, [pc, #16]	; (800a028 <stdio_exit_handler+0x18>)
 800a018:	f000 f86c 	bl	800a0f4 <_fwalk_sglue>
 800a01c:	bd10      	pop	{r4, pc}
 800a01e:	46c0      	nop			; (mov r8, r8)
 800a020:	20000088 	.word	0x20000088
 800a024:	0800c22d 	.word	0x0800c22d
 800a028:	20000200 	.word	0x20000200

0800a02c <cleanup_stdio>:
 800a02c:	6841      	ldr	r1, [r0, #4]
 800a02e:	4b0b      	ldr	r3, [pc, #44]	; (800a05c <cleanup_stdio+0x30>)
 800a030:	b510      	push	{r4, lr}
 800a032:	0004      	movs	r4, r0
 800a034:	4299      	cmp	r1, r3
 800a036:	d001      	beq.n	800a03c <cleanup_stdio+0x10>
 800a038:	f002 f8f8 	bl	800c22c <_fflush_r>
 800a03c:	68a1      	ldr	r1, [r4, #8]
 800a03e:	4b08      	ldr	r3, [pc, #32]	; (800a060 <cleanup_stdio+0x34>)
 800a040:	4299      	cmp	r1, r3
 800a042:	d002      	beq.n	800a04a <cleanup_stdio+0x1e>
 800a044:	0020      	movs	r0, r4
 800a046:	f002 f8f1 	bl	800c22c <_fflush_r>
 800a04a:	68e1      	ldr	r1, [r4, #12]
 800a04c:	4b05      	ldr	r3, [pc, #20]	; (800a064 <cleanup_stdio+0x38>)
 800a04e:	4299      	cmp	r1, r3
 800a050:	d002      	beq.n	800a058 <cleanup_stdio+0x2c>
 800a052:	0020      	movs	r0, r4
 800a054:	f002 f8ea 	bl	800c22c <_fflush_r>
 800a058:	bd10      	pop	{r4, pc}
 800a05a:	46c0      	nop			; (mov r8, r8)
 800a05c:	20000670 	.word	0x20000670
 800a060:	200006d8 	.word	0x200006d8
 800a064:	20000740 	.word	0x20000740

0800a068 <global_stdio_init.part.0>:
 800a068:	b510      	push	{r4, lr}
 800a06a:	4b09      	ldr	r3, [pc, #36]	; (800a090 <global_stdio_init.part.0+0x28>)
 800a06c:	4a09      	ldr	r2, [pc, #36]	; (800a094 <global_stdio_init.part.0+0x2c>)
 800a06e:	2104      	movs	r1, #4
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	4809      	ldr	r0, [pc, #36]	; (800a098 <global_stdio_init.part.0+0x30>)
 800a074:	2200      	movs	r2, #0
 800a076:	f7ff ff95 	bl	8009fa4 <std>
 800a07a:	2201      	movs	r2, #1
 800a07c:	2109      	movs	r1, #9
 800a07e:	4807      	ldr	r0, [pc, #28]	; (800a09c <global_stdio_init.part.0+0x34>)
 800a080:	f7ff ff90 	bl	8009fa4 <std>
 800a084:	2202      	movs	r2, #2
 800a086:	2112      	movs	r1, #18
 800a088:	4805      	ldr	r0, [pc, #20]	; (800a0a0 <global_stdio_init.part.0+0x38>)
 800a08a:	f7ff ff8b 	bl	8009fa4 <std>
 800a08e:	bd10      	pop	{r4, pc}
 800a090:	200007a8 	.word	0x200007a8
 800a094:	0800a011 	.word	0x0800a011
 800a098:	20000670 	.word	0x20000670
 800a09c:	200006d8 	.word	0x200006d8
 800a0a0:	20000740 	.word	0x20000740

0800a0a4 <__sfp_lock_acquire>:
 800a0a4:	b510      	push	{r4, lr}
 800a0a6:	4802      	ldr	r0, [pc, #8]	; (800a0b0 <__sfp_lock_acquire+0xc>)
 800a0a8:	f000 f9fb 	bl	800a4a2 <__retarget_lock_acquire_recursive>
 800a0ac:	bd10      	pop	{r4, pc}
 800a0ae:	46c0      	nop			; (mov r8, r8)
 800a0b0:	200007b1 	.word	0x200007b1

0800a0b4 <__sfp_lock_release>:
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	4802      	ldr	r0, [pc, #8]	; (800a0c0 <__sfp_lock_release+0xc>)
 800a0b8:	f000 f9f4 	bl	800a4a4 <__retarget_lock_release_recursive>
 800a0bc:	bd10      	pop	{r4, pc}
 800a0be:	46c0      	nop			; (mov r8, r8)
 800a0c0:	200007b1 	.word	0x200007b1

0800a0c4 <__sinit>:
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	0004      	movs	r4, r0
 800a0c8:	f7ff ffec 	bl	800a0a4 <__sfp_lock_acquire>
 800a0cc:	6a23      	ldr	r3, [r4, #32]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <__sinit+0x14>
 800a0d2:	f7ff ffef 	bl	800a0b4 <__sfp_lock_release>
 800a0d6:	bd10      	pop	{r4, pc}
 800a0d8:	4b04      	ldr	r3, [pc, #16]	; (800a0ec <__sinit+0x28>)
 800a0da:	6223      	str	r3, [r4, #32]
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <__sinit+0x2c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1f6      	bne.n	800a0d2 <__sinit+0xe>
 800a0e4:	f7ff ffc0 	bl	800a068 <global_stdio_init.part.0>
 800a0e8:	e7f3      	b.n	800a0d2 <__sinit+0xe>
 800a0ea:	46c0      	nop			; (mov r8, r8)
 800a0ec:	0800a02d 	.word	0x0800a02d
 800a0f0:	200007a8 	.word	0x200007a8

0800a0f4 <_fwalk_sglue>:
 800a0f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0f6:	0014      	movs	r4, r2
 800a0f8:	2600      	movs	r6, #0
 800a0fa:	9000      	str	r0, [sp, #0]
 800a0fc:	9101      	str	r1, [sp, #4]
 800a0fe:	68a5      	ldr	r5, [r4, #8]
 800a100:	6867      	ldr	r7, [r4, #4]
 800a102:	3f01      	subs	r7, #1
 800a104:	d504      	bpl.n	800a110 <_fwalk_sglue+0x1c>
 800a106:	6824      	ldr	r4, [r4, #0]
 800a108:	2c00      	cmp	r4, #0
 800a10a:	d1f8      	bne.n	800a0fe <_fwalk_sglue+0xa>
 800a10c:	0030      	movs	r0, r6
 800a10e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a110:	89ab      	ldrh	r3, [r5, #12]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d908      	bls.n	800a128 <_fwalk_sglue+0x34>
 800a116:	220e      	movs	r2, #14
 800a118:	5eab      	ldrsh	r3, [r5, r2]
 800a11a:	3301      	adds	r3, #1
 800a11c:	d004      	beq.n	800a128 <_fwalk_sglue+0x34>
 800a11e:	0029      	movs	r1, r5
 800a120:	9800      	ldr	r0, [sp, #0]
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	4798      	blx	r3
 800a126:	4306      	orrs	r6, r0
 800a128:	3568      	adds	r5, #104	; 0x68
 800a12a:	e7ea      	b.n	800a102 <_fwalk_sglue+0xe>

0800a12c <iprintf>:
 800a12c:	b40f      	push	{r0, r1, r2, r3}
 800a12e:	b507      	push	{r0, r1, r2, lr}
 800a130:	4905      	ldr	r1, [pc, #20]	; (800a148 <iprintf+0x1c>)
 800a132:	ab04      	add	r3, sp, #16
 800a134:	6808      	ldr	r0, [r1, #0]
 800a136:	cb04      	ldmia	r3!, {r2}
 800a138:	6881      	ldr	r1, [r0, #8]
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	f001 fed0 	bl	800bee0 <_vfiprintf_r>
 800a140:	b003      	add	sp, #12
 800a142:	bc08      	pop	{r3}
 800a144:	b004      	add	sp, #16
 800a146:	4718      	bx	r3
 800a148:	2000024c 	.word	0x2000024c

0800a14c <sniprintf>:
 800a14c:	b40c      	push	{r2, r3}
 800a14e:	b530      	push	{r4, r5, lr}
 800a150:	4b17      	ldr	r3, [pc, #92]	; (800a1b0 <sniprintf+0x64>)
 800a152:	000c      	movs	r4, r1
 800a154:	681d      	ldr	r5, [r3, #0]
 800a156:	b09d      	sub	sp, #116	; 0x74
 800a158:	2900      	cmp	r1, #0
 800a15a:	da08      	bge.n	800a16e <sniprintf+0x22>
 800a15c:	238b      	movs	r3, #139	; 0x8b
 800a15e:	2001      	movs	r0, #1
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	4240      	negs	r0, r0
 800a164:	b01d      	add	sp, #116	; 0x74
 800a166:	bc30      	pop	{r4, r5}
 800a168:	bc08      	pop	{r3}
 800a16a:	b002      	add	sp, #8
 800a16c:	4718      	bx	r3
 800a16e:	2382      	movs	r3, #130	; 0x82
 800a170:	466a      	mov	r2, sp
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	8293      	strh	r3, [r2, #20]
 800a176:	2300      	movs	r3, #0
 800a178:	9002      	str	r0, [sp, #8]
 800a17a:	9006      	str	r0, [sp, #24]
 800a17c:	4299      	cmp	r1, r3
 800a17e:	d000      	beq.n	800a182 <sniprintf+0x36>
 800a180:	1e4b      	subs	r3, r1, #1
 800a182:	9304      	str	r3, [sp, #16]
 800a184:	9307      	str	r3, [sp, #28]
 800a186:	2301      	movs	r3, #1
 800a188:	466a      	mov	r2, sp
 800a18a:	425b      	negs	r3, r3
 800a18c:	82d3      	strh	r3, [r2, #22]
 800a18e:	0028      	movs	r0, r5
 800a190:	ab21      	add	r3, sp, #132	; 0x84
 800a192:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a194:	a902      	add	r1, sp, #8
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	f001 fd7a 	bl	800bc90 <_svfiprintf_r>
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	da01      	bge.n	800a1a4 <sniprintf+0x58>
 800a1a0:	238b      	movs	r3, #139	; 0x8b
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	2c00      	cmp	r4, #0
 800a1a6:	d0dd      	beq.n	800a164 <sniprintf+0x18>
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	9b02      	ldr	r3, [sp, #8]
 800a1ac:	701a      	strb	r2, [r3, #0]
 800a1ae:	e7d9      	b.n	800a164 <sniprintf+0x18>
 800a1b0:	2000024c 	.word	0x2000024c

0800a1b4 <__sread>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	000c      	movs	r4, r1
 800a1b8:	250e      	movs	r5, #14
 800a1ba:	5f49      	ldrsh	r1, [r1, r5]
 800a1bc:	f000 f91e 	bl	800a3fc <_read_r>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	db03      	blt.n	800a1cc <__sread+0x18>
 800a1c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a1c6:	181b      	adds	r3, r3, r0
 800a1c8:	6563      	str	r3, [r4, #84]	; 0x54
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	4a02      	ldr	r2, [pc, #8]	; (800a1d8 <__sread+0x24>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	e7f9      	b.n	800a1ca <__sread+0x16>
 800a1d6:	46c0      	nop			; (mov r8, r8)
 800a1d8:	ffffefff 	.word	0xffffefff

0800a1dc <__swrite>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	001f      	movs	r7, r3
 800a1e0:	898b      	ldrh	r3, [r1, #12]
 800a1e2:	0005      	movs	r5, r0
 800a1e4:	000c      	movs	r4, r1
 800a1e6:	0016      	movs	r6, r2
 800a1e8:	05db      	lsls	r3, r3, #23
 800a1ea:	d505      	bpl.n	800a1f8 <__swrite+0x1c>
 800a1ec:	230e      	movs	r3, #14
 800a1ee:	5ec9      	ldrsh	r1, [r1, r3]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	f000 f8ee 	bl	800a3d4 <_lseek_r>
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	4a05      	ldr	r2, [pc, #20]	; (800a210 <__swrite+0x34>)
 800a1fc:	0028      	movs	r0, r5
 800a1fe:	4013      	ands	r3, r2
 800a200:	81a3      	strh	r3, [r4, #12]
 800a202:	0032      	movs	r2, r6
 800a204:	230e      	movs	r3, #14
 800a206:	5ee1      	ldrsh	r1, [r4, r3]
 800a208:	003b      	movs	r3, r7
 800a20a:	f000 f90b 	bl	800a424 <_write_r>
 800a20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a210:	ffffefff 	.word	0xffffefff

0800a214 <__sseek>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	000c      	movs	r4, r1
 800a218:	250e      	movs	r5, #14
 800a21a:	5f49      	ldrsh	r1, [r1, r5]
 800a21c:	f000 f8da 	bl	800a3d4 <_lseek_r>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	1c42      	adds	r2, r0, #1
 800a224:	d103      	bne.n	800a22e <__sseek+0x1a>
 800a226:	4a05      	ldr	r2, [pc, #20]	; (800a23c <__sseek+0x28>)
 800a228:	4013      	ands	r3, r2
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
 800a22e:	2280      	movs	r2, #128	; 0x80
 800a230:	0152      	lsls	r2, r2, #5
 800a232:	4313      	orrs	r3, r2
 800a234:	81a3      	strh	r3, [r4, #12]
 800a236:	6560      	str	r0, [r4, #84]	; 0x54
 800a238:	e7f8      	b.n	800a22c <__sseek+0x18>
 800a23a:	46c0      	nop			; (mov r8, r8)
 800a23c:	ffffefff 	.word	0xffffefff

0800a240 <__sclose>:
 800a240:	b510      	push	{r4, lr}
 800a242:	230e      	movs	r3, #14
 800a244:	5ec9      	ldrsh	r1, [r1, r3]
 800a246:	f000 f8b3 	bl	800a3b0 <_close_r>
 800a24a:	bd10      	pop	{r4, pc}

0800a24c <__swbuf_r>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	0006      	movs	r6, r0
 800a250:	000d      	movs	r5, r1
 800a252:	0014      	movs	r4, r2
 800a254:	2800      	cmp	r0, #0
 800a256:	d004      	beq.n	800a262 <__swbuf_r+0x16>
 800a258:	6a03      	ldr	r3, [r0, #32]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <__swbuf_r+0x16>
 800a25e:	f7ff ff31 	bl	800a0c4 <__sinit>
 800a262:	69a3      	ldr	r3, [r4, #24]
 800a264:	60a3      	str	r3, [r4, #8]
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	071b      	lsls	r3, r3, #28
 800a26a:	d528      	bpl.n	800a2be <__swbuf_r+0x72>
 800a26c:	6923      	ldr	r3, [r4, #16]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d025      	beq.n	800a2be <__swbuf_r+0x72>
 800a272:	6923      	ldr	r3, [r4, #16]
 800a274:	6820      	ldr	r0, [r4, #0]
 800a276:	b2ef      	uxtb	r7, r5
 800a278:	1ac0      	subs	r0, r0, r3
 800a27a:	6963      	ldr	r3, [r4, #20]
 800a27c:	b2ed      	uxtb	r5, r5
 800a27e:	4283      	cmp	r3, r0
 800a280:	dc05      	bgt.n	800a28e <__swbuf_r+0x42>
 800a282:	0021      	movs	r1, r4
 800a284:	0030      	movs	r0, r6
 800a286:	f001 ffd1 	bl	800c22c <_fflush_r>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d11d      	bne.n	800a2ca <__swbuf_r+0x7e>
 800a28e:	68a3      	ldr	r3, [r4, #8]
 800a290:	3001      	adds	r0, #1
 800a292:	3b01      	subs	r3, #1
 800a294:	60a3      	str	r3, [r4, #8]
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	1c5a      	adds	r2, r3, #1
 800a29a:	6022      	str	r2, [r4, #0]
 800a29c:	701f      	strb	r7, [r3, #0]
 800a29e:	6963      	ldr	r3, [r4, #20]
 800a2a0:	4283      	cmp	r3, r0
 800a2a2:	d004      	beq.n	800a2ae <__swbuf_r+0x62>
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	07db      	lsls	r3, r3, #31
 800a2a8:	d507      	bpl.n	800a2ba <__swbuf_r+0x6e>
 800a2aa:	2d0a      	cmp	r5, #10
 800a2ac:	d105      	bne.n	800a2ba <__swbuf_r+0x6e>
 800a2ae:	0021      	movs	r1, r4
 800a2b0:	0030      	movs	r0, r6
 800a2b2:	f001 ffbb 	bl	800c22c <_fflush_r>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d107      	bne.n	800a2ca <__swbuf_r+0x7e>
 800a2ba:	0028      	movs	r0, r5
 800a2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2be:	0021      	movs	r1, r4
 800a2c0:	0030      	movs	r0, r6
 800a2c2:	f000 f805 	bl	800a2d0 <__swsetup_r>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d0d3      	beq.n	800a272 <__swbuf_r+0x26>
 800a2ca:	2501      	movs	r5, #1
 800a2cc:	426d      	negs	r5, r5
 800a2ce:	e7f4      	b.n	800a2ba <__swbuf_r+0x6e>

0800a2d0 <__swsetup_r>:
 800a2d0:	4b30      	ldr	r3, [pc, #192]	; (800a394 <__swsetup_r+0xc4>)
 800a2d2:	b570      	push	{r4, r5, r6, lr}
 800a2d4:	0005      	movs	r5, r0
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	000c      	movs	r4, r1
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d004      	beq.n	800a2e8 <__swsetup_r+0x18>
 800a2de:	6a03      	ldr	r3, [r0, #32]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <__swsetup_r+0x18>
 800a2e4:	f7ff feee 	bl	800a0c4 <__sinit>
 800a2e8:	230c      	movs	r3, #12
 800a2ea:	5ee2      	ldrsh	r2, [r4, r3]
 800a2ec:	b293      	uxth	r3, r2
 800a2ee:	0711      	lsls	r1, r2, #28
 800a2f0:	d423      	bmi.n	800a33a <__swsetup_r+0x6a>
 800a2f2:	06d9      	lsls	r1, r3, #27
 800a2f4:	d407      	bmi.n	800a306 <__swsetup_r+0x36>
 800a2f6:	2309      	movs	r3, #9
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	3337      	adds	r3, #55	; 0x37
 800a2fe:	4313      	orrs	r3, r2
 800a300:	81a3      	strh	r3, [r4, #12]
 800a302:	4240      	negs	r0, r0
 800a304:	bd70      	pop	{r4, r5, r6, pc}
 800a306:	075b      	lsls	r3, r3, #29
 800a308:	d513      	bpl.n	800a332 <__swsetup_r+0x62>
 800a30a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a30c:	2900      	cmp	r1, #0
 800a30e:	d008      	beq.n	800a322 <__swsetup_r+0x52>
 800a310:	0023      	movs	r3, r4
 800a312:	3344      	adds	r3, #68	; 0x44
 800a314:	4299      	cmp	r1, r3
 800a316:	d002      	beq.n	800a31e <__swsetup_r+0x4e>
 800a318:	0028      	movs	r0, r5
 800a31a:	f000 ff95 	bl	800b248 <_free_r>
 800a31e:	2300      	movs	r3, #0
 800a320:	6363      	str	r3, [r4, #52]	; 0x34
 800a322:	2224      	movs	r2, #36	; 0x24
 800a324:	89a3      	ldrh	r3, [r4, #12]
 800a326:	4393      	bics	r3, r2
 800a328:	81a3      	strh	r3, [r4, #12]
 800a32a:	2300      	movs	r3, #0
 800a32c:	6063      	str	r3, [r4, #4]
 800a32e:	6923      	ldr	r3, [r4, #16]
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	2308      	movs	r3, #8
 800a334:	89a2      	ldrh	r2, [r4, #12]
 800a336:	4313      	orrs	r3, r2
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10b      	bne.n	800a358 <__swsetup_r+0x88>
 800a340:	21a0      	movs	r1, #160	; 0xa0
 800a342:	2280      	movs	r2, #128	; 0x80
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	0089      	lsls	r1, r1, #2
 800a348:	0092      	lsls	r2, r2, #2
 800a34a:	400b      	ands	r3, r1
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d003      	beq.n	800a358 <__swsetup_r+0x88>
 800a350:	0021      	movs	r1, r4
 800a352:	0028      	movs	r0, r5
 800a354:	f001 ffce 	bl	800c2f4 <__smakebuf_r>
 800a358:	220c      	movs	r2, #12
 800a35a:	5ea3      	ldrsh	r3, [r4, r2]
 800a35c:	2001      	movs	r0, #1
 800a35e:	001a      	movs	r2, r3
 800a360:	b299      	uxth	r1, r3
 800a362:	4002      	ands	r2, r0
 800a364:	4203      	tst	r3, r0
 800a366:	d00f      	beq.n	800a388 <__swsetup_r+0xb8>
 800a368:	2200      	movs	r2, #0
 800a36a:	60a2      	str	r2, [r4, #8]
 800a36c:	6962      	ldr	r2, [r4, #20]
 800a36e:	4252      	negs	r2, r2
 800a370:	61a2      	str	r2, [r4, #24]
 800a372:	2000      	movs	r0, #0
 800a374:	6922      	ldr	r2, [r4, #16]
 800a376:	4282      	cmp	r2, r0
 800a378:	d1c4      	bne.n	800a304 <__swsetup_r+0x34>
 800a37a:	0609      	lsls	r1, r1, #24
 800a37c:	d5c2      	bpl.n	800a304 <__swsetup_r+0x34>
 800a37e:	2240      	movs	r2, #64	; 0x40
 800a380:	4313      	orrs	r3, r2
 800a382:	81a3      	strh	r3, [r4, #12]
 800a384:	3801      	subs	r0, #1
 800a386:	e7bd      	b.n	800a304 <__swsetup_r+0x34>
 800a388:	0788      	lsls	r0, r1, #30
 800a38a:	d400      	bmi.n	800a38e <__swsetup_r+0xbe>
 800a38c:	6962      	ldr	r2, [r4, #20]
 800a38e:	60a2      	str	r2, [r4, #8]
 800a390:	e7ef      	b.n	800a372 <__swsetup_r+0xa2>
 800a392:	46c0      	nop			; (mov r8, r8)
 800a394:	2000024c 	.word	0x2000024c

0800a398 <memset>:
 800a398:	0003      	movs	r3, r0
 800a39a:	1882      	adds	r2, r0, r2
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d100      	bne.n	800a3a2 <memset+0xa>
 800a3a0:	4770      	bx	lr
 800a3a2:	7019      	strb	r1, [r3, #0]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	e7f9      	b.n	800a39c <memset+0x4>

0800a3a8 <_localeconv_r>:
 800a3a8:	4800      	ldr	r0, [pc, #0]	; (800a3ac <_localeconv_r+0x4>)
 800a3aa:	4770      	bx	lr
 800a3ac:	20000184 	.word	0x20000184

0800a3b0 <_close_r>:
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	b570      	push	{r4, r5, r6, lr}
 800a3b4:	4d06      	ldr	r5, [pc, #24]	; (800a3d0 <_close_r+0x20>)
 800a3b6:	0004      	movs	r4, r0
 800a3b8:	0008      	movs	r0, r1
 800a3ba:	602b      	str	r3, [r5, #0]
 800a3bc:	f7f9 f8a3 	bl	8003506 <_close>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d103      	bne.n	800a3cc <_close_r+0x1c>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d000      	beq.n	800a3cc <_close_r+0x1c>
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	bd70      	pop	{r4, r5, r6, pc}
 800a3ce:	46c0      	nop			; (mov r8, r8)
 800a3d0:	200007ac 	.word	0x200007ac

0800a3d4 <_lseek_r>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	0004      	movs	r4, r0
 800a3d8:	0008      	movs	r0, r1
 800a3da:	0011      	movs	r1, r2
 800a3dc:	001a      	movs	r2, r3
 800a3de:	2300      	movs	r3, #0
 800a3e0:	4d05      	ldr	r5, [pc, #20]	; (800a3f8 <_lseek_r+0x24>)
 800a3e2:	602b      	str	r3, [r5, #0]
 800a3e4:	f7f9 f8b0 	bl	8003548 <_lseek>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d103      	bne.n	800a3f4 <_lseek_r+0x20>
 800a3ec:	682b      	ldr	r3, [r5, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d000      	beq.n	800a3f4 <_lseek_r+0x20>
 800a3f2:	6023      	str	r3, [r4, #0]
 800a3f4:	bd70      	pop	{r4, r5, r6, pc}
 800a3f6:	46c0      	nop			; (mov r8, r8)
 800a3f8:	200007ac 	.word	0x200007ac

0800a3fc <_read_r>:
 800a3fc:	b570      	push	{r4, r5, r6, lr}
 800a3fe:	0004      	movs	r4, r0
 800a400:	0008      	movs	r0, r1
 800a402:	0011      	movs	r1, r2
 800a404:	001a      	movs	r2, r3
 800a406:	2300      	movs	r3, #0
 800a408:	4d05      	ldr	r5, [pc, #20]	; (800a420 <_read_r+0x24>)
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	f7f9 f842 	bl	8003494 <_read>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d103      	bne.n	800a41c <_read_r+0x20>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d000      	beq.n	800a41c <_read_r+0x20>
 800a41a:	6023      	str	r3, [r4, #0]
 800a41c:	bd70      	pop	{r4, r5, r6, pc}
 800a41e:	46c0      	nop			; (mov r8, r8)
 800a420:	200007ac 	.word	0x200007ac

0800a424 <_write_r>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	0004      	movs	r4, r0
 800a428:	0008      	movs	r0, r1
 800a42a:	0011      	movs	r1, r2
 800a42c:	001a      	movs	r2, r3
 800a42e:	2300      	movs	r3, #0
 800a430:	4d05      	ldr	r5, [pc, #20]	; (800a448 <_write_r+0x24>)
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	f7f9 f84b 	bl	80034ce <_write>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d103      	bne.n	800a444 <_write_r+0x20>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d000      	beq.n	800a444 <_write_r+0x20>
 800a442:	6023      	str	r3, [r4, #0]
 800a444:	bd70      	pop	{r4, r5, r6, pc}
 800a446:	46c0      	nop			; (mov r8, r8)
 800a448:	200007ac 	.word	0x200007ac

0800a44c <__errno>:
 800a44c:	4b01      	ldr	r3, [pc, #4]	; (800a454 <__errno+0x8>)
 800a44e:	6818      	ldr	r0, [r3, #0]
 800a450:	4770      	bx	lr
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	2000024c 	.word	0x2000024c

0800a458 <__libc_init_array>:
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	2600      	movs	r6, #0
 800a45c:	4c0c      	ldr	r4, [pc, #48]	; (800a490 <__libc_init_array+0x38>)
 800a45e:	4d0d      	ldr	r5, [pc, #52]	; (800a494 <__libc_init_array+0x3c>)
 800a460:	1b64      	subs	r4, r4, r5
 800a462:	10a4      	asrs	r4, r4, #2
 800a464:	42a6      	cmp	r6, r4
 800a466:	d109      	bne.n	800a47c <__libc_init_array+0x24>
 800a468:	2600      	movs	r6, #0
 800a46a:	f002 f881 	bl	800c570 <_init>
 800a46e:	4c0a      	ldr	r4, [pc, #40]	; (800a498 <__libc_init_array+0x40>)
 800a470:	4d0a      	ldr	r5, [pc, #40]	; (800a49c <__libc_init_array+0x44>)
 800a472:	1b64      	subs	r4, r4, r5
 800a474:	10a4      	asrs	r4, r4, #2
 800a476:	42a6      	cmp	r6, r4
 800a478:	d105      	bne.n	800a486 <__libc_init_array+0x2e>
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	00b3      	lsls	r3, r6, #2
 800a47e:	58eb      	ldr	r3, [r5, r3]
 800a480:	4798      	blx	r3
 800a482:	3601      	adds	r6, #1
 800a484:	e7ee      	b.n	800a464 <__libc_init_array+0xc>
 800a486:	00b3      	lsls	r3, r6, #2
 800a488:	58eb      	ldr	r3, [r5, r3]
 800a48a:	4798      	blx	r3
 800a48c:	3601      	adds	r6, #1
 800a48e:	e7f2      	b.n	800a476 <__libc_init_array+0x1e>
 800a490:	0800cb40 	.word	0x0800cb40
 800a494:	0800cb40 	.word	0x0800cb40
 800a498:	0800cb44 	.word	0x0800cb44
 800a49c:	0800cb40 	.word	0x0800cb40

0800a4a0 <__retarget_lock_init_recursive>:
 800a4a0:	4770      	bx	lr

0800a4a2 <__retarget_lock_acquire_recursive>:
 800a4a2:	4770      	bx	lr

0800a4a4 <__retarget_lock_release_recursive>:
 800a4a4:	4770      	bx	lr

0800a4a6 <memchr>:
 800a4a6:	b2c9      	uxtb	r1, r1
 800a4a8:	1882      	adds	r2, r0, r2
 800a4aa:	4290      	cmp	r0, r2
 800a4ac:	d101      	bne.n	800a4b2 <memchr+0xc>
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	4770      	bx	lr
 800a4b2:	7803      	ldrb	r3, [r0, #0]
 800a4b4:	428b      	cmp	r3, r1
 800a4b6:	d0fb      	beq.n	800a4b0 <memchr+0xa>
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	e7f6      	b.n	800a4aa <memchr+0x4>

0800a4bc <memcpy>:
 800a4bc:	2300      	movs	r3, #0
 800a4be:	b510      	push	{r4, lr}
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d100      	bne.n	800a4c6 <memcpy+0xa>
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	5ccc      	ldrb	r4, [r1, r3]
 800a4c8:	54c4      	strb	r4, [r0, r3]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	e7f8      	b.n	800a4c0 <memcpy+0x4>
	...

0800a4d0 <__assert_func>:
 800a4d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a4d2:	0014      	movs	r4, r2
 800a4d4:	001a      	movs	r2, r3
 800a4d6:	4b09      	ldr	r3, [pc, #36]	; (800a4fc <__assert_func+0x2c>)
 800a4d8:	0005      	movs	r5, r0
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	000e      	movs	r6, r1
 800a4de:	68d8      	ldr	r0, [r3, #12]
 800a4e0:	4b07      	ldr	r3, [pc, #28]	; (800a500 <__assert_func+0x30>)
 800a4e2:	2c00      	cmp	r4, #0
 800a4e4:	d101      	bne.n	800a4ea <__assert_func+0x1a>
 800a4e6:	4b07      	ldr	r3, [pc, #28]	; (800a504 <__assert_func+0x34>)
 800a4e8:	001c      	movs	r4, r3
 800a4ea:	4907      	ldr	r1, [pc, #28]	; (800a508 <__assert_func+0x38>)
 800a4ec:	9301      	str	r3, [sp, #4]
 800a4ee:	9402      	str	r4, [sp, #8]
 800a4f0:	002b      	movs	r3, r5
 800a4f2:	9600      	str	r6, [sp, #0]
 800a4f4:	f001 fec6 	bl	800c284 <fiprintf>
 800a4f8:	f001 ff84 	bl	800c404 <abort>
 800a4fc:	2000024c 	.word	0x2000024c
 800a500:	0800c80e 	.word	0x0800c80e
 800a504:	0800c849 	.word	0x0800c849
 800a508:	0800c81b 	.word	0x0800c81b

0800a50c <quorem>:
 800a50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a50e:	6902      	ldr	r2, [r0, #16]
 800a510:	690b      	ldr	r3, [r1, #16]
 800a512:	b089      	sub	sp, #36	; 0x24
 800a514:	0007      	movs	r7, r0
 800a516:	9104      	str	r1, [sp, #16]
 800a518:	2000      	movs	r0, #0
 800a51a:	429a      	cmp	r2, r3
 800a51c:	db69      	blt.n	800a5f2 <quorem+0xe6>
 800a51e:	3b01      	subs	r3, #1
 800a520:	009c      	lsls	r4, r3, #2
 800a522:	9301      	str	r3, [sp, #4]
 800a524:	000b      	movs	r3, r1
 800a526:	3314      	adds	r3, #20
 800a528:	9306      	str	r3, [sp, #24]
 800a52a:	191b      	adds	r3, r3, r4
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	003b      	movs	r3, r7
 800a530:	3314      	adds	r3, #20
 800a532:	9303      	str	r3, [sp, #12]
 800a534:	191c      	adds	r4, r3, r4
 800a536:	9b05      	ldr	r3, [sp, #20]
 800a538:	6826      	ldr	r6, [r4, #0]
 800a53a:	681d      	ldr	r5, [r3, #0]
 800a53c:	0030      	movs	r0, r6
 800a53e:	3501      	adds	r5, #1
 800a540:	0029      	movs	r1, r5
 800a542:	f7f5 fdf9 	bl	8000138 <__udivsi3>
 800a546:	9002      	str	r0, [sp, #8]
 800a548:	42ae      	cmp	r6, r5
 800a54a:	d329      	bcc.n	800a5a0 <quorem+0x94>
 800a54c:	9b06      	ldr	r3, [sp, #24]
 800a54e:	2600      	movs	r6, #0
 800a550:	469c      	mov	ip, r3
 800a552:	9d03      	ldr	r5, [sp, #12]
 800a554:	9606      	str	r6, [sp, #24]
 800a556:	4662      	mov	r2, ip
 800a558:	ca08      	ldmia	r2!, {r3}
 800a55a:	6828      	ldr	r0, [r5, #0]
 800a55c:	4694      	mov	ip, r2
 800a55e:	9a02      	ldr	r2, [sp, #8]
 800a560:	b299      	uxth	r1, r3
 800a562:	4351      	muls	r1, r2
 800a564:	0c1b      	lsrs	r3, r3, #16
 800a566:	4353      	muls	r3, r2
 800a568:	1989      	adds	r1, r1, r6
 800a56a:	0c0a      	lsrs	r2, r1, #16
 800a56c:	189b      	adds	r3, r3, r2
 800a56e:	9307      	str	r3, [sp, #28]
 800a570:	0c1e      	lsrs	r6, r3, #16
 800a572:	9b06      	ldr	r3, [sp, #24]
 800a574:	b282      	uxth	r2, r0
 800a576:	18d2      	adds	r2, r2, r3
 800a578:	466b      	mov	r3, sp
 800a57a:	b289      	uxth	r1, r1
 800a57c:	8b9b      	ldrh	r3, [r3, #28]
 800a57e:	1a52      	subs	r2, r2, r1
 800a580:	0c01      	lsrs	r1, r0, #16
 800a582:	1ac9      	subs	r1, r1, r3
 800a584:	1413      	asrs	r3, r2, #16
 800a586:	18cb      	adds	r3, r1, r3
 800a588:	1419      	asrs	r1, r3, #16
 800a58a:	b292      	uxth	r2, r2
 800a58c:	041b      	lsls	r3, r3, #16
 800a58e:	4313      	orrs	r3, r2
 800a590:	c508      	stmia	r5!, {r3}
 800a592:	9b05      	ldr	r3, [sp, #20]
 800a594:	9106      	str	r1, [sp, #24]
 800a596:	4563      	cmp	r3, ip
 800a598:	d2dd      	bcs.n	800a556 <quorem+0x4a>
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d030      	beq.n	800a602 <quorem+0xf6>
 800a5a0:	0038      	movs	r0, r7
 800a5a2:	9904      	ldr	r1, [sp, #16]
 800a5a4:	f001 f9f0 	bl	800b988 <__mcmp>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	db21      	blt.n	800a5f0 <quorem+0xe4>
 800a5ac:	0038      	movs	r0, r7
 800a5ae:	2600      	movs	r6, #0
 800a5b0:	9b02      	ldr	r3, [sp, #8]
 800a5b2:	9c04      	ldr	r4, [sp, #16]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	9302      	str	r3, [sp, #8]
 800a5b8:	3014      	adds	r0, #20
 800a5ba:	3414      	adds	r4, #20
 800a5bc:	6803      	ldr	r3, [r0, #0]
 800a5be:	cc02      	ldmia	r4!, {r1}
 800a5c0:	b29d      	uxth	r5, r3
 800a5c2:	19ad      	adds	r5, r5, r6
 800a5c4:	b28a      	uxth	r2, r1
 800a5c6:	1aaa      	subs	r2, r5, r2
 800a5c8:	0c09      	lsrs	r1, r1, #16
 800a5ca:	0c1b      	lsrs	r3, r3, #16
 800a5cc:	1a5b      	subs	r3, r3, r1
 800a5ce:	1411      	asrs	r1, r2, #16
 800a5d0:	185b      	adds	r3, r3, r1
 800a5d2:	141e      	asrs	r6, r3, #16
 800a5d4:	b292      	uxth	r2, r2
 800a5d6:	041b      	lsls	r3, r3, #16
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	c008      	stmia	r0!, {r3}
 800a5dc:	9b05      	ldr	r3, [sp, #20]
 800a5de:	42a3      	cmp	r3, r4
 800a5e0:	d2ec      	bcs.n	800a5bc <quorem+0xb0>
 800a5e2:	9b01      	ldr	r3, [sp, #4]
 800a5e4:	9a03      	ldr	r2, [sp, #12]
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	18d3      	adds	r3, r2, r3
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	d015      	beq.n	800a61c <quorem+0x110>
 800a5f0:	9802      	ldr	r0, [sp, #8]
 800a5f2:	b009      	add	sp, #36	; 0x24
 800a5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d106      	bne.n	800a60a <quorem+0xfe>
 800a5fc:	9b01      	ldr	r3, [sp, #4]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	9301      	str	r3, [sp, #4]
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	3c04      	subs	r4, #4
 800a606:	42a3      	cmp	r3, r4
 800a608:	d3f5      	bcc.n	800a5f6 <quorem+0xea>
 800a60a:	9b01      	ldr	r3, [sp, #4]
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	e7c7      	b.n	800a5a0 <quorem+0x94>
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	2a00      	cmp	r2, #0
 800a614:	d106      	bne.n	800a624 <quorem+0x118>
 800a616:	9a01      	ldr	r2, [sp, #4]
 800a618:	3a01      	subs	r2, #1
 800a61a:	9201      	str	r2, [sp, #4]
 800a61c:	9a03      	ldr	r2, [sp, #12]
 800a61e:	3b04      	subs	r3, #4
 800a620:	429a      	cmp	r2, r3
 800a622:	d3f5      	bcc.n	800a610 <quorem+0x104>
 800a624:	9b01      	ldr	r3, [sp, #4]
 800a626:	613b      	str	r3, [r7, #16]
 800a628:	e7e2      	b.n	800a5f0 <quorem+0xe4>
	...

0800a62c <_dtoa_r>:
 800a62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a62e:	0014      	movs	r4, r2
 800a630:	001d      	movs	r5, r3
 800a632:	69c6      	ldr	r6, [r0, #28]
 800a634:	b09d      	sub	sp, #116	; 0x74
 800a636:	9408      	str	r4, [sp, #32]
 800a638:	9509      	str	r5, [sp, #36]	; 0x24
 800a63a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a63c:	9004      	str	r0, [sp, #16]
 800a63e:	2e00      	cmp	r6, #0
 800a640:	d10f      	bne.n	800a662 <_dtoa_r+0x36>
 800a642:	2010      	movs	r0, #16
 800a644:	f000 fe4a 	bl	800b2dc <malloc>
 800a648:	9b04      	ldr	r3, [sp, #16]
 800a64a:	1e02      	subs	r2, r0, #0
 800a64c:	61d8      	str	r0, [r3, #28]
 800a64e:	d104      	bne.n	800a65a <_dtoa_r+0x2e>
 800a650:	21ef      	movs	r1, #239	; 0xef
 800a652:	4bc6      	ldr	r3, [pc, #792]	; (800a96c <_dtoa_r+0x340>)
 800a654:	48c6      	ldr	r0, [pc, #792]	; (800a970 <_dtoa_r+0x344>)
 800a656:	f7ff ff3b 	bl	800a4d0 <__assert_func>
 800a65a:	6046      	str	r6, [r0, #4]
 800a65c:	6086      	str	r6, [r0, #8]
 800a65e:	6006      	str	r6, [r0, #0]
 800a660:	60c6      	str	r6, [r0, #12]
 800a662:	9b04      	ldr	r3, [sp, #16]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	6819      	ldr	r1, [r3, #0]
 800a668:	2900      	cmp	r1, #0
 800a66a:	d00b      	beq.n	800a684 <_dtoa_r+0x58>
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	2301      	movs	r3, #1
 800a670:	4093      	lsls	r3, r2
 800a672:	604a      	str	r2, [r1, #4]
 800a674:	608b      	str	r3, [r1, #8]
 800a676:	9804      	ldr	r0, [sp, #16]
 800a678:	f000 ff44 	bl	800b504 <_Bfree>
 800a67c:	2200      	movs	r2, #0
 800a67e:	9b04      	ldr	r3, [sp, #16]
 800a680:	69db      	ldr	r3, [r3, #28]
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	2d00      	cmp	r5, #0
 800a686:	da1e      	bge.n	800a6c6 <_dtoa_r+0x9a>
 800a688:	2301      	movs	r3, #1
 800a68a:	603b      	str	r3, [r7, #0]
 800a68c:	006b      	lsls	r3, r5, #1
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	9309      	str	r3, [sp, #36]	; 0x24
 800a692:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a694:	4bb7      	ldr	r3, [pc, #732]	; (800a974 <_dtoa_r+0x348>)
 800a696:	4ab7      	ldr	r2, [pc, #732]	; (800a974 <_dtoa_r+0x348>)
 800a698:	403b      	ands	r3, r7
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d116      	bne.n	800a6cc <_dtoa_r+0xa0>
 800a69e:	4bb6      	ldr	r3, [pc, #728]	; (800a978 <_dtoa_r+0x34c>)
 800a6a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	033b      	lsls	r3, r7, #12
 800a6a6:	0b1b      	lsrs	r3, r3, #12
 800a6a8:	4323      	orrs	r3, r4
 800a6aa:	d101      	bne.n	800a6b0 <_dtoa_r+0x84>
 800a6ac:	f000 fdb5 	bl	800b21a <_dtoa_r+0xbee>
 800a6b0:	4bb2      	ldr	r3, [pc, #712]	; (800a97c <_dtoa_r+0x350>)
 800a6b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a6b4:	9306      	str	r3, [sp, #24]
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	d002      	beq.n	800a6c0 <_dtoa_r+0x94>
 800a6ba:	4bb1      	ldr	r3, [pc, #708]	; (800a980 <_dtoa_r+0x354>)
 800a6bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	9806      	ldr	r0, [sp, #24]
 800a6c2:	b01d      	add	sp, #116	; 0x74
 800a6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	603b      	str	r3, [r7, #0]
 800a6ca:	e7e2      	b.n	800a692 <_dtoa_r+0x66>
 800a6cc:	9a08      	ldr	r2, [sp, #32]
 800a6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d0:	9210      	str	r2, [sp, #64]	; 0x40
 800a6d2:	9311      	str	r3, [sp, #68]	; 0x44
 800a6d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a6d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f7f5 feb2 	bl	8000444 <__aeabi_dcmpeq>
 800a6e0:	1e06      	subs	r6, r0, #0
 800a6e2:	d009      	beq.n	800a6f8 <_dtoa_r+0xcc>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6e8:	6013      	str	r3, [r2, #0]
 800a6ea:	4ba6      	ldr	r3, [pc, #664]	; (800a984 <_dtoa_r+0x358>)
 800a6ec:	9306      	str	r3, [sp, #24]
 800a6ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d0e5      	beq.n	800a6c0 <_dtoa_r+0x94>
 800a6f4:	4ba4      	ldr	r3, [pc, #656]	; (800a988 <_dtoa_r+0x35c>)
 800a6f6:	e7e1      	b.n	800a6bc <_dtoa_r+0x90>
 800a6f8:	ab1a      	add	r3, sp, #104	; 0x68
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	ab1b      	add	r3, sp, #108	; 0x6c
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	9804      	ldr	r0, [sp, #16]
 800a702:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a704:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a706:	f001 f9f3 	bl	800baf0 <__d2b>
 800a70a:	007a      	lsls	r2, r7, #1
 800a70c:	9005      	str	r0, [sp, #20]
 800a70e:	0d52      	lsrs	r2, r2, #21
 800a710:	d100      	bne.n	800a714 <_dtoa_r+0xe8>
 800a712:	e07b      	b.n	800a80c <_dtoa_r+0x1e0>
 800a714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a716:	9617      	str	r6, [sp, #92]	; 0x5c
 800a718:	0319      	lsls	r1, r3, #12
 800a71a:	4b9c      	ldr	r3, [pc, #624]	; (800a98c <_dtoa_r+0x360>)
 800a71c:	0b09      	lsrs	r1, r1, #12
 800a71e:	430b      	orrs	r3, r1
 800a720:	499b      	ldr	r1, [pc, #620]	; (800a990 <_dtoa_r+0x364>)
 800a722:	1857      	adds	r7, r2, r1
 800a724:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a726:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a728:	0019      	movs	r1, r3
 800a72a:	2200      	movs	r2, #0
 800a72c:	4b99      	ldr	r3, [pc, #612]	; (800a994 <_dtoa_r+0x368>)
 800a72e:	f7f7 ffd7 	bl	80026e0 <__aeabi_dsub>
 800a732:	4a99      	ldr	r2, [pc, #612]	; (800a998 <_dtoa_r+0x36c>)
 800a734:	4b99      	ldr	r3, [pc, #612]	; (800a99c <_dtoa_r+0x370>)
 800a736:	f7f7 fd11 	bl	800215c <__aeabi_dmul>
 800a73a:	4a99      	ldr	r2, [pc, #612]	; (800a9a0 <_dtoa_r+0x374>)
 800a73c:	4b99      	ldr	r3, [pc, #612]	; (800a9a4 <_dtoa_r+0x378>)
 800a73e:	f7f6 fdb3 	bl	80012a8 <__aeabi_dadd>
 800a742:	0004      	movs	r4, r0
 800a744:	0038      	movs	r0, r7
 800a746:	000d      	movs	r5, r1
 800a748:	f7f8 fba0 	bl	8002e8c <__aeabi_i2d>
 800a74c:	4a96      	ldr	r2, [pc, #600]	; (800a9a8 <_dtoa_r+0x37c>)
 800a74e:	4b97      	ldr	r3, [pc, #604]	; (800a9ac <_dtoa_r+0x380>)
 800a750:	f7f7 fd04 	bl	800215c <__aeabi_dmul>
 800a754:	0002      	movs	r2, r0
 800a756:	000b      	movs	r3, r1
 800a758:	0020      	movs	r0, r4
 800a75a:	0029      	movs	r1, r5
 800a75c:	f7f6 fda4 	bl	80012a8 <__aeabi_dadd>
 800a760:	0004      	movs	r4, r0
 800a762:	000d      	movs	r5, r1
 800a764:	f7f8 fb5c 	bl	8002e20 <__aeabi_d2iz>
 800a768:	2200      	movs	r2, #0
 800a76a:	9003      	str	r0, [sp, #12]
 800a76c:	2300      	movs	r3, #0
 800a76e:	0020      	movs	r0, r4
 800a770:	0029      	movs	r1, r5
 800a772:	f7f5 fe6d 	bl	8000450 <__aeabi_dcmplt>
 800a776:	2800      	cmp	r0, #0
 800a778:	d00b      	beq.n	800a792 <_dtoa_r+0x166>
 800a77a:	9803      	ldr	r0, [sp, #12]
 800a77c:	f7f8 fb86 	bl	8002e8c <__aeabi_i2d>
 800a780:	002b      	movs	r3, r5
 800a782:	0022      	movs	r2, r4
 800a784:	f7f5 fe5e 	bl	8000444 <__aeabi_dcmpeq>
 800a788:	4243      	negs	r3, r0
 800a78a:	4158      	adcs	r0, r3
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	1a1b      	subs	r3, r3, r0
 800a790:	9303      	str	r3, [sp, #12]
 800a792:	2301      	movs	r3, #1
 800a794:	9316      	str	r3, [sp, #88]	; 0x58
 800a796:	9b03      	ldr	r3, [sp, #12]
 800a798:	2b16      	cmp	r3, #22
 800a79a:	d810      	bhi.n	800a7be <_dtoa_r+0x192>
 800a79c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a79e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a7a0:	9a03      	ldr	r2, [sp, #12]
 800a7a2:	4b83      	ldr	r3, [pc, #524]	; (800a9b0 <_dtoa_r+0x384>)
 800a7a4:	00d2      	lsls	r2, r2, #3
 800a7a6:	189b      	adds	r3, r3, r2
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f7f5 fe50 	bl	8000450 <__aeabi_dcmplt>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d047      	beq.n	800a844 <_dtoa_r+0x218>
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	9303      	str	r3, [sp, #12]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9316      	str	r3, [sp, #88]	; 0x58
 800a7be:	2200      	movs	r2, #0
 800a7c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a7c2:	920a      	str	r2, [sp, #40]	; 0x28
 800a7c4:	1bdb      	subs	r3, r3, r7
 800a7c6:	1e5a      	subs	r2, r3, #1
 800a7c8:	d53e      	bpl.n	800a848 <_dtoa_r+0x21c>
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	db38      	blt.n	800a84c <_dtoa_r+0x220>
 800a7da:	9a03      	ldr	r2, [sp, #12]
 800a7dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7de:	4694      	mov	ip, r2
 800a7e0:	4463      	add	r3, ip
 800a7e2:	930c      	str	r3, [sp, #48]	; 0x30
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	9213      	str	r2, [sp, #76]	; 0x4c
 800a7e8:	930d      	str	r3, [sp, #52]	; 0x34
 800a7ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7ec:	2401      	movs	r4, #1
 800a7ee:	2b09      	cmp	r3, #9
 800a7f0:	d867      	bhi.n	800a8c2 <_dtoa_r+0x296>
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	dd02      	ble.n	800a7fc <_dtoa_r+0x1d0>
 800a7f6:	2400      	movs	r4, #0
 800a7f8:	3b04      	subs	r3, #4
 800a7fa:	9322      	str	r3, [sp, #136]	; 0x88
 800a7fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7fe:	1e98      	subs	r0, r3, #2
 800a800:	2803      	cmp	r0, #3
 800a802:	d867      	bhi.n	800a8d4 <_dtoa_r+0x2a8>
 800a804:	f7f5 fc84 	bl	8000110 <__gnu_thumb1_case_uqi>
 800a808:	5b383a2b 	.word	0x5b383a2b
 800a80c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a80e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a810:	18f6      	adds	r6, r6, r3
 800a812:	4b68      	ldr	r3, [pc, #416]	; (800a9b4 <_dtoa_r+0x388>)
 800a814:	18f2      	adds	r2, r6, r3
 800a816:	2a20      	cmp	r2, #32
 800a818:	dd0f      	ble.n	800a83a <_dtoa_r+0x20e>
 800a81a:	2340      	movs	r3, #64	; 0x40
 800a81c:	1a9b      	subs	r3, r3, r2
 800a81e:	409f      	lsls	r7, r3
 800a820:	4b65      	ldr	r3, [pc, #404]	; (800a9b8 <_dtoa_r+0x38c>)
 800a822:	0038      	movs	r0, r7
 800a824:	18f3      	adds	r3, r6, r3
 800a826:	40dc      	lsrs	r4, r3
 800a828:	4320      	orrs	r0, r4
 800a82a:	f7f8 fb5f 	bl	8002eec <__aeabi_ui2d>
 800a82e:	2201      	movs	r2, #1
 800a830:	4b62      	ldr	r3, [pc, #392]	; (800a9bc <_dtoa_r+0x390>)
 800a832:	1e77      	subs	r7, r6, #1
 800a834:	18cb      	adds	r3, r1, r3
 800a836:	9217      	str	r2, [sp, #92]	; 0x5c
 800a838:	e776      	b.n	800a728 <_dtoa_r+0xfc>
 800a83a:	2320      	movs	r3, #32
 800a83c:	0020      	movs	r0, r4
 800a83e:	1a9b      	subs	r3, r3, r2
 800a840:	4098      	lsls	r0, r3
 800a842:	e7f2      	b.n	800a82a <_dtoa_r+0x1fe>
 800a844:	9016      	str	r0, [sp, #88]	; 0x58
 800a846:	e7ba      	b.n	800a7be <_dtoa_r+0x192>
 800a848:	920c      	str	r2, [sp, #48]	; 0x30
 800a84a:	e7c3      	b.n	800a7d4 <_dtoa_r+0x1a8>
 800a84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a84e:	9a03      	ldr	r2, [sp, #12]
 800a850:	1a9b      	subs	r3, r3, r2
 800a852:	930a      	str	r3, [sp, #40]	; 0x28
 800a854:	4253      	negs	r3, r2
 800a856:	930d      	str	r3, [sp, #52]	; 0x34
 800a858:	2300      	movs	r3, #0
 800a85a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a85c:	e7c5      	b.n	800a7ea <_dtoa_r+0x1be>
 800a85e:	2300      	movs	r3, #0
 800a860:	930f      	str	r3, [sp, #60]	; 0x3c
 800a862:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a864:	930b      	str	r3, [sp, #44]	; 0x2c
 800a866:	9307      	str	r3, [sp, #28]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	dc13      	bgt.n	800a894 <_dtoa_r+0x268>
 800a86c:	2301      	movs	r3, #1
 800a86e:	001a      	movs	r2, r3
 800a870:	930b      	str	r3, [sp, #44]	; 0x2c
 800a872:	9307      	str	r3, [sp, #28]
 800a874:	9223      	str	r2, [sp, #140]	; 0x8c
 800a876:	e00d      	b.n	800a894 <_dtoa_r+0x268>
 800a878:	2301      	movs	r3, #1
 800a87a:	e7f1      	b.n	800a860 <_dtoa_r+0x234>
 800a87c:	2300      	movs	r3, #0
 800a87e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a880:	930f      	str	r3, [sp, #60]	; 0x3c
 800a882:	4694      	mov	ip, r2
 800a884:	9b03      	ldr	r3, [sp, #12]
 800a886:	4463      	add	r3, ip
 800a888:	930b      	str	r3, [sp, #44]	; 0x2c
 800a88a:	3301      	adds	r3, #1
 800a88c:	9307      	str	r3, [sp, #28]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dc00      	bgt.n	800a894 <_dtoa_r+0x268>
 800a892:	2301      	movs	r3, #1
 800a894:	9a04      	ldr	r2, [sp, #16]
 800a896:	2100      	movs	r1, #0
 800a898:	69d0      	ldr	r0, [r2, #28]
 800a89a:	2204      	movs	r2, #4
 800a89c:	0015      	movs	r5, r2
 800a89e:	3514      	adds	r5, #20
 800a8a0:	429d      	cmp	r5, r3
 800a8a2:	d91b      	bls.n	800a8dc <_dtoa_r+0x2b0>
 800a8a4:	6041      	str	r1, [r0, #4]
 800a8a6:	9804      	ldr	r0, [sp, #16]
 800a8a8:	f000 fde8 	bl	800b47c <_Balloc>
 800a8ac:	9006      	str	r0, [sp, #24]
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d117      	bne.n	800a8e2 <_dtoa_r+0x2b6>
 800a8b2:	21b0      	movs	r1, #176	; 0xb0
 800a8b4:	4b42      	ldr	r3, [pc, #264]	; (800a9c0 <_dtoa_r+0x394>)
 800a8b6:	482e      	ldr	r0, [pc, #184]	; (800a970 <_dtoa_r+0x344>)
 800a8b8:	9a06      	ldr	r2, [sp, #24]
 800a8ba:	31ff      	adds	r1, #255	; 0xff
 800a8bc:	e6cb      	b.n	800a656 <_dtoa_r+0x2a>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e7dd      	b.n	800a87e <_dtoa_r+0x252>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	940f      	str	r4, [sp, #60]	; 0x3c
 800a8c6:	9322      	str	r3, [sp, #136]	; 0x88
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8cc:	9307      	str	r3, [sp, #28]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	3313      	adds	r3, #19
 800a8d2:	e7cf      	b.n	800a874 <_dtoa_r+0x248>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8d8:	3b02      	subs	r3, #2
 800a8da:	e7f6      	b.n	800a8ca <_dtoa_r+0x29e>
 800a8dc:	3101      	adds	r1, #1
 800a8de:	0052      	lsls	r2, r2, #1
 800a8e0:	e7dc      	b.n	800a89c <_dtoa_r+0x270>
 800a8e2:	9b04      	ldr	r3, [sp, #16]
 800a8e4:	9a06      	ldr	r2, [sp, #24]
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	9b07      	ldr	r3, [sp, #28]
 800a8ec:	2b0e      	cmp	r3, #14
 800a8ee:	d900      	bls.n	800a8f2 <_dtoa_r+0x2c6>
 800a8f0:	e0e5      	b.n	800aabe <_dtoa_r+0x492>
 800a8f2:	2c00      	cmp	r4, #0
 800a8f4:	d100      	bne.n	800a8f8 <_dtoa_r+0x2cc>
 800a8f6:	e0e2      	b.n	800aabe <_dtoa_r+0x492>
 800a8f8:	9b03      	ldr	r3, [sp, #12]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	dd64      	ble.n	800a9c8 <_dtoa_r+0x39c>
 800a8fe:	210f      	movs	r1, #15
 800a900:	9a03      	ldr	r2, [sp, #12]
 800a902:	4b2b      	ldr	r3, [pc, #172]	; (800a9b0 <_dtoa_r+0x384>)
 800a904:	400a      	ands	r2, r1
 800a906:	00d2      	lsls	r2, r2, #3
 800a908:	189b      	adds	r3, r3, r2
 800a90a:	681e      	ldr	r6, [r3, #0]
 800a90c:	685f      	ldr	r7, [r3, #4]
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	2402      	movs	r4, #2
 800a912:	111d      	asrs	r5, r3, #4
 800a914:	05db      	lsls	r3, r3, #23
 800a916:	d50a      	bpl.n	800a92e <_dtoa_r+0x302>
 800a918:	4b2a      	ldr	r3, [pc, #168]	; (800a9c4 <_dtoa_r+0x398>)
 800a91a:	400d      	ands	r5, r1
 800a91c:	6a1a      	ldr	r2, [r3, #32]
 800a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a920:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a922:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a924:	f7f7 f820 	bl	8001968 <__aeabi_ddiv>
 800a928:	9008      	str	r0, [sp, #32]
 800a92a:	9109      	str	r1, [sp, #36]	; 0x24
 800a92c:	3401      	adds	r4, #1
 800a92e:	4b25      	ldr	r3, [pc, #148]	; (800a9c4 <_dtoa_r+0x398>)
 800a930:	930e      	str	r3, [sp, #56]	; 0x38
 800a932:	2d00      	cmp	r5, #0
 800a934:	d108      	bne.n	800a948 <_dtoa_r+0x31c>
 800a936:	9808      	ldr	r0, [sp, #32]
 800a938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a93a:	0032      	movs	r2, r6
 800a93c:	003b      	movs	r3, r7
 800a93e:	f7f7 f813 	bl	8001968 <__aeabi_ddiv>
 800a942:	9008      	str	r0, [sp, #32]
 800a944:	9109      	str	r1, [sp, #36]	; 0x24
 800a946:	e05a      	b.n	800a9fe <_dtoa_r+0x3d2>
 800a948:	2301      	movs	r3, #1
 800a94a:	421d      	tst	r5, r3
 800a94c:	d009      	beq.n	800a962 <_dtoa_r+0x336>
 800a94e:	18e4      	adds	r4, r4, r3
 800a950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a952:	0030      	movs	r0, r6
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	0039      	movs	r1, r7
 800a95a:	f7f7 fbff 	bl	800215c <__aeabi_dmul>
 800a95e:	0006      	movs	r6, r0
 800a960:	000f      	movs	r7, r1
 800a962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a964:	106d      	asrs	r5, r5, #1
 800a966:	3308      	adds	r3, #8
 800a968:	e7e2      	b.n	800a930 <_dtoa_r+0x304>
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	0800c857 	.word	0x0800c857
 800a970:	0800c86e 	.word	0x0800c86e
 800a974:	7ff00000 	.word	0x7ff00000
 800a978:	0000270f 	.word	0x0000270f
 800a97c:	0800c853 	.word	0x0800c853
 800a980:	0800c856 	.word	0x0800c856
 800a984:	0800c7e0 	.word	0x0800c7e0
 800a988:	0800c7e1 	.word	0x0800c7e1
 800a98c:	3ff00000 	.word	0x3ff00000
 800a990:	fffffc01 	.word	0xfffffc01
 800a994:	3ff80000 	.word	0x3ff80000
 800a998:	636f4361 	.word	0x636f4361
 800a99c:	3fd287a7 	.word	0x3fd287a7
 800a9a0:	8b60c8b3 	.word	0x8b60c8b3
 800a9a4:	3fc68a28 	.word	0x3fc68a28
 800a9a8:	509f79fb 	.word	0x509f79fb
 800a9ac:	3fd34413 	.word	0x3fd34413
 800a9b0:	0800c958 	.word	0x0800c958
 800a9b4:	00000432 	.word	0x00000432
 800a9b8:	00000412 	.word	0x00000412
 800a9bc:	fe100000 	.word	0xfe100000
 800a9c0:	0800c8c6 	.word	0x0800c8c6
 800a9c4:	0800c930 	.word	0x0800c930
 800a9c8:	9b03      	ldr	r3, [sp, #12]
 800a9ca:	2402      	movs	r4, #2
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d016      	beq.n	800a9fe <_dtoa_r+0x3d2>
 800a9d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a9d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a9d4:	220f      	movs	r2, #15
 800a9d6:	425d      	negs	r5, r3
 800a9d8:	402a      	ands	r2, r5
 800a9da:	4bdd      	ldr	r3, [pc, #884]	; (800ad50 <_dtoa_r+0x724>)
 800a9dc:	00d2      	lsls	r2, r2, #3
 800a9de:	189b      	adds	r3, r3, r2
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f7f7 fbba 	bl	800215c <__aeabi_dmul>
 800a9e8:	2701      	movs	r7, #1
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	9008      	str	r0, [sp, #32]
 800a9ee:	9109      	str	r1, [sp, #36]	; 0x24
 800a9f0:	4ed8      	ldr	r6, [pc, #864]	; (800ad54 <_dtoa_r+0x728>)
 800a9f2:	112d      	asrs	r5, r5, #4
 800a9f4:	2d00      	cmp	r5, #0
 800a9f6:	d000      	beq.n	800a9fa <_dtoa_r+0x3ce>
 800a9f8:	e091      	b.n	800ab1e <_dtoa_r+0x4f2>
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1a1      	bne.n	800a942 <_dtoa_r+0x316>
 800a9fe:	9e08      	ldr	r6, [sp, #32]
 800aa00:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d100      	bne.n	800aa0a <_dtoa_r+0x3de>
 800aa08:	e094      	b.n	800ab34 <_dtoa_r+0x508>
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	0030      	movs	r0, r6
 800aa0e:	0039      	movs	r1, r7
 800aa10:	4bd1      	ldr	r3, [pc, #836]	; (800ad58 <_dtoa_r+0x72c>)
 800aa12:	f7f5 fd1d 	bl	8000450 <__aeabi_dcmplt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d100      	bne.n	800aa1c <_dtoa_r+0x3f0>
 800aa1a:	e08b      	b.n	800ab34 <_dtoa_r+0x508>
 800aa1c:	9b07      	ldr	r3, [sp, #28]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d100      	bne.n	800aa24 <_dtoa_r+0x3f8>
 800aa22:	e087      	b.n	800ab34 <_dtoa_r+0x508>
 800aa24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	dd45      	ble.n	800aab6 <_dtoa_r+0x48a>
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	930e      	str	r3, [sp, #56]	; 0x38
 800aa32:	0030      	movs	r0, r6
 800aa34:	4bc9      	ldr	r3, [pc, #804]	; (800ad5c <_dtoa_r+0x730>)
 800aa36:	0039      	movs	r1, r7
 800aa38:	f7f7 fb90 	bl	800215c <__aeabi_dmul>
 800aa3c:	9008      	str	r0, [sp, #32]
 800aa3e:	9109      	str	r1, [sp, #36]	; 0x24
 800aa40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa42:	3401      	adds	r4, #1
 800aa44:	0020      	movs	r0, r4
 800aa46:	9e08      	ldr	r6, [sp, #32]
 800aa48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa4a:	9312      	str	r3, [sp, #72]	; 0x48
 800aa4c:	f7f8 fa1e 	bl	8002e8c <__aeabi_i2d>
 800aa50:	0032      	movs	r2, r6
 800aa52:	003b      	movs	r3, r7
 800aa54:	f7f7 fb82 	bl	800215c <__aeabi_dmul>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	4bc1      	ldr	r3, [pc, #772]	; (800ad60 <_dtoa_r+0x734>)
 800aa5c:	f7f6 fc24 	bl	80012a8 <__aeabi_dadd>
 800aa60:	4ac0      	ldr	r2, [pc, #768]	; (800ad64 <_dtoa_r+0x738>)
 800aa62:	9014      	str	r0, [sp, #80]	; 0x50
 800aa64:	9115      	str	r1, [sp, #84]	; 0x54
 800aa66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa68:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800aa6a:	4694      	mov	ip, r2
 800aa6c:	9308      	str	r3, [sp, #32]
 800aa6e:	9409      	str	r4, [sp, #36]	; 0x24
 800aa70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa72:	4463      	add	r3, ip
 800aa74:	9318      	str	r3, [sp, #96]	; 0x60
 800aa76:	9309      	str	r3, [sp, #36]	; 0x24
 800aa78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d15e      	bne.n	800ab3c <_dtoa_r+0x510>
 800aa7e:	2200      	movs	r2, #0
 800aa80:	4bb9      	ldr	r3, [pc, #740]	; (800ad68 <_dtoa_r+0x73c>)
 800aa82:	0030      	movs	r0, r6
 800aa84:	0039      	movs	r1, r7
 800aa86:	f7f7 fe2b 	bl	80026e0 <__aeabi_dsub>
 800aa8a:	9a08      	ldr	r2, [sp, #32]
 800aa8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aa8e:	0004      	movs	r4, r0
 800aa90:	000d      	movs	r5, r1
 800aa92:	f7f5 fcf1 	bl	8000478 <__aeabi_dcmpgt>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d000      	beq.n	800aa9c <_dtoa_r+0x470>
 800aa9a:	e2b3      	b.n	800b004 <_dtoa_r+0x9d8>
 800aa9c:	48b3      	ldr	r0, [pc, #716]	; (800ad6c <_dtoa_r+0x740>)
 800aa9e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800aaa0:	4684      	mov	ip, r0
 800aaa2:	4461      	add	r1, ip
 800aaa4:	000b      	movs	r3, r1
 800aaa6:	0020      	movs	r0, r4
 800aaa8:	0029      	movs	r1, r5
 800aaaa:	9a08      	ldr	r2, [sp, #32]
 800aaac:	f7f5 fcd0 	bl	8000450 <__aeabi_dcmplt>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d000      	beq.n	800aab6 <_dtoa_r+0x48a>
 800aab4:	e2a3      	b.n	800affe <_dtoa_r+0x9d2>
 800aab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aab8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800aaba:	9308      	str	r3, [sp, #32]
 800aabc:	9409      	str	r4, [sp, #36]	; 0x24
 800aabe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	da00      	bge.n	800aac6 <_dtoa_r+0x49a>
 800aac4:	e179      	b.n	800adba <_dtoa_r+0x78e>
 800aac6:	9a03      	ldr	r2, [sp, #12]
 800aac8:	2a0e      	cmp	r2, #14
 800aaca:	dd00      	ble.n	800aace <_dtoa_r+0x4a2>
 800aacc:	e175      	b.n	800adba <_dtoa_r+0x78e>
 800aace:	4ba0      	ldr	r3, [pc, #640]	; (800ad50 <_dtoa_r+0x724>)
 800aad0:	00d2      	lsls	r2, r2, #3
 800aad2:	189b      	adds	r3, r3, r2
 800aad4:	681e      	ldr	r6, [r3, #0]
 800aad6:	685f      	ldr	r7, [r3, #4]
 800aad8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aada:	2b00      	cmp	r3, #0
 800aadc:	db00      	blt.n	800aae0 <_dtoa_r+0x4b4>
 800aade:	e0e5      	b.n	800acac <_dtoa_r+0x680>
 800aae0:	9b07      	ldr	r3, [sp, #28]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	dd00      	ble.n	800aae8 <_dtoa_r+0x4bc>
 800aae6:	e0e1      	b.n	800acac <_dtoa_r+0x680>
 800aae8:	d000      	beq.n	800aaec <_dtoa_r+0x4c0>
 800aaea:	e288      	b.n	800affe <_dtoa_r+0x9d2>
 800aaec:	2200      	movs	r2, #0
 800aaee:	0030      	movs	r0, r6
 800aaf0:	0039      	movs	r1, r7
 800aaf2:	4b9d      	ldr	r3, [pc, #628]	; (800ad68 <_dtoa_r+0x73c>)
 800aaf4:	f7f7 fb32 	bl	800215c <__aeabi_dmul>
 800aaf8:	9a08      	ldr	r2, [sp, #32]
 800aafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafc:	f7f5 fcc6 	bl	800048c <__aeabi_dcmpge>
 800ab00:	9e07      	ldr	r6, [sp, #28]
 800ab02:	0037      	movs	r7, r6
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d000      	beq.n	800ab0a <_dtoa_r+0x4de>
 800ab08:	e25f      	b.n	800afca <_dtoa_r+0x99e>
 800ab0a:	9b06      	ldr	r3, [sp, #24]
 800ab0c:	9a06      	ldr	r2, [sp, #24]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	9308      	str	r3, [sp, #32]
 800ab12:	2331      	movs	r3, #49	; 0x31
 800ab14:	7013      	strb	r3, [r2, #0]
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	9303      	str	r3, [sp, #12]
 800ab1c:	e25a      	b.n	800afd4 <_dtoa_r+0x9a8>
 800ab1e:	423d      	tst	r5, r7
 800ab20:	d005      	beq.n	800ab2e <_dtoa_r+0x502>
 800ab22:	6832      	ldr	r2, [r6, #0]
 800ab24:	6873      	ldr	r3, [r6, #4]
 800ab26:	f7f7 fb19 	bl	800215c <__aeabi_dmul>
 800ab2a:	003b      	movs	r3, r7
 800ab2c:	3401      	adds	r4, #1
 800ab2e:	106d      	asrs	r5, r5, #1
 800ab30:	3608      	adds	r6, #8
 800ab32:	e75f      	b.n	800a9f4 <_dtoa_r+0x3c8>
 800ab34:	9b03      	ldr	r3, [sp, #12]
 800ab36:	930e      	str	r3, [sp, #56]	; 0x38
 800ab38:	9b07      	ldr	r3, [sp, #28]
 800ab3a:	e783      	b.n	800aa44 <_dtoa_r+0x418>
 800ab3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab3e:	4b84      	ldr	r3, [pc, #528]	; (800ad50 <_dtoa_r+0x724>)
 800ab40:	3a01      	subs	r2, #1
 800ab42:	00d2      	lsls	r2, r2, #3
 800ab44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ab46:	189b      	adds	r3, r3, r2
 800ab48:	9c08      	ldr	r4, [sp, #32]
 800ab4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	2900      	cmp	r1, #0
 800ab52:	d051      	beq.n	800abf8 <_dtoa_r+0x5cc>
 800ab54:	2000      	movs	r0, #0
 800ab56:	4986      	ldr	r1, [pc, #536]	; (800ad70 <_dtoa_r+0x744>)
 800ab58:	f7f6 ff06 	bl	8001968 <__aeabi_ddiv>
 800ab5c:	0022      	movs	r2, r4
 800ab5e:	002b      	movs	r3, r5
 800ab60:	f7f7 fdbe 	bl	80026e0 <__aeabi_dsub>
 800ab64:	9a06      	ldr	r2, [sp, #24]
 800ab66:	0004      	movs	r4, r0
 800ab68:	4694      	mov	ip, r2
 800ab6a:	000d      	movs	r5, r1
 800ab6c:	9b06      	ldr	r3, [sp, #24]
 800ab6e:	9314      	str	r3, [sp, #80]	; 0x50
 800ab70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab72:	4463      	add	r3, ip
 800ab74:	9318      	str	r3, [sp, #96]	; 0x60
 800ab76:	0039      	movs	r1, r7
 800ab78:	0030      	movs	r0, r6
 800ab7a:	f7f8 f951 	bl	8002e20 <__aeabi_d2iz>
 800ab7e:	9012      	str	r0, [sp, #72]	; 0x48
 800ab80:	f7f8 f984 	bl	8002e8c <__aeabi_i2d>
 800ab84:	0002      	movs	r2, r0
 800ab86:	000b      	movs	r3, r1
 800ab88:	0030      	movs	r0, r6
 800ab8a:	0039      	movs	r1, r7
 800ab8c:	f7f7 fda8 	bl	80026e0 <__aeabi_dsub>
 800ab90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab94:	3301      	adds	r3, #1
 800ab96:	9308      	str	r3, [sp, #32]
 800ab98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab9a:	0006      	movs	r6, r0
 800ab9c:	3330      	adds	r3, #48	; 0x30
 800ab9e:	7013      	strb	r3, [r2, #0]
 800aba0:	0022      	movs	r2, r4
 800aba2:	002b      	movs	r3, r5
 800aba4:	000f      	movs	r7, r1
 800aba6:	f7f5 fc53 	bl	8000450 <__aeabi_dcmplt>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d174      	bne.n	800ac98 <_dtoa_r+0x66c>
 800abae:	0032      	movs	r2, r6
 800abb0:	003b      	movs	r3, r7
 800abb2:	2000      	movs	r0, #0
 800abb4:	4968      	ldr	r1, [pc, #416]	; (800ad58 <_dtoa_r+0x72c>)
 800abb6:	f7f7 fd93 	bl	80026e0 <__aeabi_dsub>
 800abba:	0022      	movs	r2, r4
 800abbc:	002b      	movs	r3, r5
 800abbe:	f7f5 fc47 	bl	8000450 <__aeabi_dcmplt>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d000      	beq.n	800abc8 <_dtoa_r+0x59c>
 800abc6:	e0d7      	b.n	800ad78 <_dtoa_r+0x74c>
 800abc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800abca:	9a08      	ldr	r2, [sp, #32]
 800abcc:	4293      	cmp	r3, r2
 800abce:	d100      	bne.n	800abd2 <_dtoa_r+0x5a6>
 800abd0:	e771      	b.n	800aab6 <_dtoa_r+0x48a>
 800abd2:	2200      	movs	r2, #0
 800abd4:	0020      	movs	r0, r4
 800abd6:	0029      	movs	r1, r5
 800abd8:	4b60      	ldr	r3, [pc, #384]	; (800ad5c <_dtoa_r+0x730>)
 800abda:	f7f7 fabf 	bl	800215c <__aeabi_dmul>
 800abde:	4b5f      	ldr	r3, [pc, #380]	; (800ad5c <_dtoa_r+0x730>)
 800abe0:	0004      	movs	r4, r0
 800abe2:	000d      	movs	r5, r1
 800abe4:	0030      	movs	r0, r6
 800abe6:	0039      	movs	r1, r7
 800abe8:	2200      	movs	r2, #0
 800abea:	f7f7 fab7 	bl	800215c <__aeabi_dmul>
 800abee:	9b08      	ldr	r3, [sp, #32]
 800abf0:	0006      	movs	r6, r0
 800abf2:	000f      	movs	r7, r1
 800abf4:	9314      	str	r3, [sp, #80]	; 0x50
 800abf6:	e7be      	b.n	800ab76 <_dtoa_r+0x54a>
 800abf8:	0020      	movs	r0, r4
 800abfa:	0029      	movs	r1, r5
 800abfc:	f7f7 faae 	bl	800215c <__aeabi_dmul>
 800ac00:	9a06      	ldr	r2, [sp, #24]
 800ac02:	9b06      	ldr	r3, [sp, #24]
 800ac04:	4694      	mov	ip, r2
 800ac06:	9308      	str	r3, [sp, #32]
 800ac08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac0a:	9014      	str	r0, [sp, #80]	; 0x50
 800ac0c:	9115      	str	r1, [sp, #84]	; 0x54
 800ac0e:	4463      	add	r3, ip
 800ac10:	9319      	str	r3, [sp, #100]	; 0x64
 800ac12:	0030      	movs	r0, r6
 800ac14:	0039      	movs	r1, r7
 800ac16:	f7f8 f903 	bl	8002e20 <__aeabi_d2iz>
 800ac1a:	9018      	str	r0, [sp, #96]	; 0x60
 800ac1c:	f7f8 f936 	bl	8002e8c <__aeabi_i2d>
 800ac20:	0002      	movs	r2, r0
 800ac22:	000b      	movs	r3, r1
 800ac24:	0030      	movs	r0, r6
 800ac26:	0039      	movs	r1, r7
 800ac28:	f7f7 fd5a 	bl	80026e0 <__aeabi_dsub>
 800ac2c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ac2e:	9b08      	ldr	r3, [sp, #32]
 800ac30:	3630      	adds	r6, #48	; 0x30
 800ac32:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac34:	701e      	strb	r6, [r3, #0]
 800ac36:	3301      	adds	r3, #1
 800ac38:	0004      	movs	r4, r0
 800ac3a:	000d      	movs	r5, r1
 800ac3c:	9308      	str	r3, [sp, #32]
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d12d      	bne.n	800ac9e <_dtoa_r+0x672>
 800ac42:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ac44:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ac46:	9a06      	ldr	r2, [sp, #24]
 800ac48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac4a:	4694      	mov	ip, r2
 800ac4c:	4463      	add	r3, ip
 800ac4e:	2200      	movs	r2, #0
 800ac50:	9308      	str	r3, [sp, #32]
 800ac52:	4b47      	ldr	r3, [pc, #284]	; (800ad70 <_dtoa_r+0x744>)
 800ac54:	f7f6 fb28 	bl	80012a8 <__aeabi_dadd>
 800ac58:	0002      	movs	r2, r0
 800ac5a:	000b      	movs	r3, r1
 800ac5c:	0020      	movs	r0, r4
 800ac5e:	0029      	movs	r1, r5
 800ac60:	f7f5 fc0a 	bl	8000478 <__aeabi_dcmpgt>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d000      	beq.n	800ac6a <_dtoa_r+0x63e>
 800ac68:	e086      	b.n	800ad78 <_dtoa_r+0x74c>
 800ac6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac6e:	2000      	movs	r0, #0
 800ac70:	493f      	ldr	r1, [pc, #252]	; (800ad70 <_dtoa_r+0x744>)
 800ac72:	f7f7 fd35 	bl	80026e0 <__aeabi_dsub>
 800ac76:	0002      	movs	r2, r0
 800ac78:	000b      	movs	r3, r1
 800ac7a:	0020      	movs	r0, r4
 800ac7c:	0029      	movs	r1, r5
 800ac7e:	f7f5 fbe7 	bl	8000450 <__aeabi_dcmplt>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d100      	bne.n	800ac88 <_dtoa_r+0x65c>
 800ac86:	e716      	b.n	800aab6 <_dtoa_r+0x48a>
 800ac88:	9b08      	ldr	r3, [sp, #32]
 800ac8a:	001a      	movs	r2, r3
 800ac8c:	3a01      	subs	r2, #1
 800ac8e:	9208      	str	r2, [sp, #32]
 800ac90:	7812      	ldrb	r2, [r2, #0]
 800ac92:	2a30      	cmp	r2, #48	; 0x30
 800ac94:	d0f8      	beq.n	800ac88 <_dtoa_r+0x65c>
 800ac96:	9308      	str	r3, [sp, #32]
 800ac98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac9a:	9303      	str	r3, [sp, #12]
 800ac9c:	e046      	b.n	800ad2c <_dtoa_r+0x700>
 800ac9e:	2200      	movs	r2, #0
 800aca0:	4b2e      	ldr	r3, [pc, #184]	; (800ad5c <_dtoa_r+0x730>)
 800aca2:	f7f7 fa5b 	bl	800215c <__aeabi_dmul>
 800aca6:	0006      	movs	r6, r0
 800aca8:	000f      	movs	r7, r1
 800acaa:	e7b2      	b.n	800ac12 <_dtoa_r+0x5e6>
 800acac:	9b06      	ldr	r3, [sp, #24]
 800acae:	9a06      	ldr	r2, [sp, #24]
 800acb0:	930a      	str	r3, [sp, #40]	; 0x28
 800acb2:	9b07      	ldr	r3, [sp, #28]
 800acb4:	9c08      	ldr	r4, [sp, #32]
 800acb6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800acb8:	3b01      	subs	r3, #1
 800acba:	189b      	adds	r3, r3, r2
 800acbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800acbe:	0032      	movs	r2, r6
 800acc0:	003b      	movs	r3, r7
 800acc2:	0020      	movs	r0, r4
 800acc4:	0029      	movs	r1, r5
 800acc6:	f7f6 fe4f 	bl	8001968 <__aeabi_ddiv>
 800acca:	f7f8 f8a9 	bl	8002e20 <__aeabi_d2iz>
 800acce:	9007      	str	r0, [sp, #28]
 800acd0:	f7f8 f8dc 	bl	8002e8c <__aeabi_i2d>
 800acd4:	0032      	movs	r2, r6
 800acd6:	003b      	movs	r3, r7
 800acd8:	f7f7 fa40 	bl	800215c <__aeabi_dmul>
 800acdc:	0002      	movs	r2, r0
 800acde:	000b      	movs	r3, r1
 800ace0:	0020      	movs	r0, r4
 800ace2:	0029      	movs	r1, r5
 800ace4:	f7f7 fcfc 	bl	80026e0 <__aeabi_dsub>
 800ace8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acea:	001a      	movs	r2, r3
 800acec:	3201      	adds	r2, #1
 800acee:	920a      	str	r2, [sp, #40]	; 0x28
 800acf0:	9208      	str	r2, [sp, #32]
 800acf2:	9a07      	ldr	r2, [sp, #28]
 800acf4:	3230      	adds	r2, #48	; 0x30
 800acf6:	701a      	strb	r2, [r3, #0]
 800acf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d14f      	bne.n	800ad9e <_dtoa_r+0x772>
 800acfe:	0002      	movs	r2, r0
 800ad00:	000b      	movs	r3, r1
 800ad02:	f7f6 fad1 	bl	80012a8 <__aeabi_dadd>
 800ad06:	0032      	movs	r2, r6
 800ad08:	003b      	movs	r3, r7
 800ad0a:	0004      	movs	r4, r0
 800ad0c:	000d      	movs	r5, r1
 800ad0e:	f7f5 fbb3 	bl	8000478 <__aeabi_dcmpgt>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d12e      	bne.n	800ad74 <_dtoa_r+0x748>
 800ad16:	0032      	movs	r2, r6
 800ad18:	003b      	movs	r3, r7
 800ad1a:	0020      	movs	r0, r4
 800ad1c:	0029      	movs	r1, r5
 800ad1e:	f7f5 fb91 	bl	8000444 <__aeabi_dcmpeq>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d002      	beq.n	800ad2c <_dtoa_r+0x700>
 800ad26:	9b07      	ldr	r3, [sp, #28]
 800ad28:	07de      	lsls	r6, r3, #31
 800ad2a:	d423      	bmi.n	800ad74 <_dtoa_r+0x748>
 800ad2c:	9905      	ldr	r1, [sp, #20]
 800ad2e:	9804      	ldr	r0, [sp, #16]
 800ad30:	f000 fbe8 	bl	800b504 <_Bfree>
 800ad34:	2300      	movs	r3, #0
 800ad36:	9a08      	ldr	r2, [sp, #32]
 800ad38:	7013      	strb	r3, [r2, #0]
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ad3e:	3301      	adds	r3, #1
 800ad40:	6013      	str	r3, [r2, #0]
 800ad42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d100      	bne.n	800ad4a <_dtoa_r+0x71e>
 800ad48:	e4ba      	b.n	800a6c0 <_dtoa_r+0x94>
 800ad4a:	9a08      	ldr	r2, [sp, #32]
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	e4b7      	b.n	800a6c0 <_dtoa_r+0x94>
 800ad50:	0800c958 	.word	0x0800c958
 800ad54:	0800c930 	.word	0x0800c930
 800ad58:	3ff00000 	.word	0x3ff00000
 800ad5c:	40240000 	.word	0x40240000
 800ad60:	401c0000 	.word	0x401c0000
 800ad64:	fcc00000 	.word	0xfcc00000
 800ad68:	40140000 	.word	0x40140000
 800ad6c:	7cc00000 	.word	0x7cc00000
 800ad70:	3fe00000 	.word	0x3fe00000
 800ad74:	9b03      	ldr	r3, [sp, #12]
 800ad76:	930e      	str	r3, [sp, #56]	; 0x38
 800ad78:	9b08      	ldr	r3, [sp, #32]
 800ad7a:	9308      	str	r3, [sp, #32]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	781a      	ldrb	r2, [r3, #0]
 800ad80:	2a39      	cmp	r2, #57	; 0x39
 800ad82:	d108      	bne.n	800ad96 <_dtoa_r+0x76a>
 800ad84:	9a06      	ldr	r2, [sp, #24]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d1f7      	bne.n	800ad7a <_dtoa_r+0x74e>
 800ad8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad8c:	9906      	ldr	r1, [sp, #24]
 800ad8e:	3201      	adds	r2, #1
 800ad90:	920e      	str	r2, [sp, #56]	; 0x38
 800ad92:	2230      	movs	r2, #48	; 0x30
 800ad94:	700a      	strb	r2, [r1, #0]
 800ad96:	781a      	ldrb	r2, [r3, #0]
 800ad98:	3201      	adds	r2, #1
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	e77c      	b.n	800ac98 <_dtoa_r+0x66c>
 800ad9e:	2200      	movs	r2, #0
 800ada0:	4ba9      	ldr	r3, [pc, #676]	; (800b048 <_dtoa_r+0xa1c>)
 800ada2:	f7f7 f9db 	bl	800215c <__aeabi_dmul>
 800ada6:	2200      	movs	r2, #0
 800ada8:	2300      	movs	r3, #0
 800adaa:	0004      	movs	r4, r0
 800adac:	000d      	movs	r5, r1
 800adae:	f7f5 fb49 	bl	8000444 <__aeabi_dcmpeq>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d100      	bne.n	800adb8 <_dtoa_r+0x78c>
 800adb6:	e782      	b.n	800acbe <_dtoa_r+0x692>
 800adb8:	e7b8      	b.n	800ad2c <_dtoa_r+0x700>
 800adba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800adbc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800adbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800adc0:	2f00      	cmp	r7, #0
 800adc2:	d012      	beq.n	800adea <_dtoa_r+0x7be>
 800adc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800adc6:	2a01      	cmp	r2, #1
 800adc8:	dc6e      	bgt.n	800aea8 <_dtoa_r+0x87c>
 800adca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800adcc:	2a00      	cmp	r2, #0
 800adce:	d065      	beq.n	800ae9c <_dtoa_r+0x870>
 800add0:	4a9e      	ldr	r2, [pc, #632]	; (800b04c <_dtoa_r+0xa20>)
 800add2:	189b      	adds	r3, r3, r2
 800add4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800add6:	2101      	movs	r1, #1
 800add8:	18d2      	adds	r2, r2, r3
 800adda:	920a      	str	r2, [sp, #40]	; 0x28
 800addc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adde:	9804      	ldr	r0, [sp, #16]
 800ade0:	18d3      	adds	r3, r2, r3
 800ade2:	930c      	str	r3, [sp, #48]	; 0x30
 800ade4:	f000 fc3e 	bl	800b664 <__i2b>
 800ade8:	0007      	movs	r7, r0
 800adea:	2c00      	cmp	r4, #0
 800adec:	d00e      	beq.n	800ae0c <_dtoa_r+0x7e0>
 800adee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	dd0b      	ble.n	800ae0c <_dtoa_r+0x7e0>
 800adf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adf6:	0023      	movs	r3, r4
 800adf8:	4294      	cmp	r4, r2
 800adfa:	dd00      	ble.n	800adfe <_dtoa_r+0x7d2>
 800adfc:	0013      	movs	r3, r2
 800adfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae00:	1ae4      	subs	r4, r4, r3
 800ae02:	1ad2      	subs	r2, r2, r3
 800ae04:	920a      	str	r2, [sp, #40]	; 0x28
 800ae06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d01e      	beq.n	800ae50 <_dtoa_r+0x824>
 800ae12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d05c      	beq.n	800aed2 <_dtoa_r+0x8a6>
 800ae18:	2d00      	cmp	r5, #0
 800ae1a:	dd10      	ble.n	800ae3e <_dtoa_r+0x812>
 800ae1c:	0039      	movs	r1, r7
 800ae1e:	002a      	movs	r2, r5
 800ae20:	9804      	ldr	r0, [sp, #16]
 800ae22:	f000 fce7 	bl	800b7f4 <__pow5mult>
 800ae26:	9a05      	ldr	r2, [sp, #20]
 800ae28:	0001      	movs	r1, r0
 800ae2a:	0007      	movs	r7, r0
 800ae2c:	9804      	ldr	r0, [sp, #16]
 800ae2e:	f000 fc31 	bl	800b694 <__multiply>
 800ae32:	0006      	movs	r6, r0
 800ae34:	9905      	ldr	r1, [sp, #20]
 800ae36:	9804      	ldr	r0, [sp, #16]
 800ae38:	f000 fb64 	bl	800b504 <_Bfree>
 800ae3c:	9605      	str	r6, [sp, #20]
 800ae3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae40:	1b5a      	subs	r2, r3, r5
 800ae42:	42ab      	cmp	r3, r5
 800ae44:	d004      	beq.n	800ae50 <_dtoa_r+0x824>
 800ae46:	9905      	ldr	r1, [sp, #20]
 800ae48:	9804      	ldr	r0, [sp, #16]
 800ae4a:	f000 fcd3 	bl	800b7f4 <__pow5mult>
 800ae4e:	9005      	str	r0, [sp, #20]
 800ae50:	2101      	movs	r1, #1
 800ae52:	9804      	ldr	r0, [sp, #16]
 800ae54:	f000 fc06 	bl	800b664 <__i2b>
 800ae58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae5a:	0006      	movs	r6, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dd3a      	ble.n	800aed6 <_dtoa_r+0x8aa>
 800ae60:	001a      	movs	r2, r3
 800ae62:	0001      	movs	r1, r0
 800ae64:	9804      	ldr	r0, [sp, #16]
 800ae66:	f000 fcc5 	bl	800b7f4 <__pow5mult>
 800ae6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae6c:	0006      	movs	r6, r0
 800ae6e:	2500      	movs	r5, #0
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	dc38      	bgt.n	800aee6 <_dtoa_r+0x8ba>
 800ae74:	2500      	movs	r5, #0
 800ae76:	9b08      	ldr	r3, [sp, #32]
 800ae78:	42ab      	cmp	r3, r5
 800ae7a:	d130      	bne.n	800aede <_dtoa_r+0x8b2>
 800ae7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7e:	031b      	lsls	r3, r3, #12
 800ae80:	42ab      	cmp	r3, r5
 800ae82:	d12c      	bne.n	800aede <_dtoa_r+0x8b2>
 800ae84:	4b72      	ldr	r3, [pc, #456]	; (800b050 <_dtoa_r+0xa24>)
 800ae86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae88:	4213      	tst	r3, r2
 800ae8a:	d028      	beq.n	800aede <_dtoa_r+0x8b2>
 800ae8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae8e:	3501      	adds	r5, #1
 800ae90:	3301      	adds	r3, #1
 800ae92:	930a      	str	r3, [sp, #40]	; 0x28
 800ae94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae96:	3301      	adds	r3, #1
 800ae98:	930c      	str	r3, [sp, #48]	; 0x30
 800ae9a:	e020      	b.n	800aede <_dtoa_r+0x8b2>
 800ae9c:	2336      	movs	r3, #54	; 0x36
 800ae9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aea0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800aea2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aea4:	1a9b      	subs	r3, r3, r2
 800aea6:	e795      	b.n	800add4 <_dtoa_r+0x7a8>
 800aea8:	9b07      	ldr	r3, [sp, #28]
 800aeaa:	1e5d      	subs	r5, r3, #1
 800aeac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeae:	42ab      	cmp	r3, r5
 800aeb0:	db07      	blt.n	800aec2 <_dtoa_r+0x896>
 800aeb2:	1b5d      	subs	r5, r3, r5
 800aeb4:	9b07      	ldr	r3, [sp, #28]
 800aeb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	da8b      	bge.n	800add4 <_dtoa_r+0x7a8>
 800aebc:	1ae4      	subs	r4, r4, r3
 800aebe:	2300      	movs	r3, #0
 800aec0:	e788      	b.n	800add4 <_dtoa_r+0x7a8>
 800aec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aec4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aec6:	1aeb      	subs	r3, r5, r3
 800aec8:	18d3      	adds	r3, r2, r3
 800aeca:	950d      	str	r5, [sp, #52]	; 0x34
 800aecc:	9313      	str	r3, [sp, #76]	; 0x4c
 800aece:	2500      	movs	r5, #0
 800aed0:	e7f0      	b.n	800aeb4 <_dtoa_r+0x888>
 800aed2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aed4:	e7b7      	b.n	800ae46 <_dtoa_r+0x81a>
 800aed6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aed8:	2500      	movs	r5, #0
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	ddca      	ble.n	800ae74 <_dtoa_r+0x848>
 800aede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aee0:	2001      	movs	r0, #1
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d008      	beq.n	800aef8 <_dtoa_r+0x8cc>
 800aee6:	6933      	ldr	r3, [r6, #16]
 800aee8:	3303      	adds	r3, #3
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	18f3      	adds	r3, r6, r3
 800aeee:	6858      	ldr	r0, [r3, #4]
 800aef0:	f000 fb70 	bl	800b5d4 <__hi0bits>
 800aef4:	2320      	movs	r3, #32
 800aef6:	1a18      	subs	r0, r3, r0
 800aef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aefa:	1818      	adds	r0, r3, r0
 800aefc:	0002      	movs	r2, r0
 800aefe:	231f      	movs	r3, #31
 800af00:	401a      	ands	r2, r3
 800af02:	4218      	tst	r0, r3
 800af04:	d047      	beq.n	800af96 <_dtoa_r+0x96a>
 800af06:	3301      	adds	r3, #1
 800af08:	1a9b      	subs	r3, r3, r2
 800af0a:	2b04      	cmp	r3, #4
 800af0c:	dd3f      	ble.n	800af8e <_dtoa_r+0x962>
 800af0e:	231c      	movs	r3, #28
 800af10:	1a9b      	subs	r3, r3, r2
 800af12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af14:	18e4      	adds	r4, r4, r3
 800af16:	18d2      	adds	r2, r2, r3
 800af18:	920a      	str	r2, [sp, #40]	; 0x28
 800af1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af1c:	18d3      	adds	r3, r2, r3
 800af1e:	930c      	str	r3, [sp, #48]	; 0x30
 800af20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af22:	2b00      	cmp	r3, #0
 800af24:	dd05      	ble.n	800af32 <_dtoa_r+0x906>
 800af26:	001a      	movs	r2, r3
 800af28:	9905      	ldr	r1, [sp, #20]
 800af2a:	9804      	ldr	r0, [sp, #16]
 800af2c:	f000 fcbe 	bl	800b8ac <__lshift>
 800af30:	9005      	str	r0, [sp, #20]
 800af32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd05      	ble.n	800af44 <_dtoa_r+0x918>
 800af38:	0031      	movs	r1, r6
 800af3a:	001a      	movs	r2, r3
 800af3c:	9804      	ldr	r0, [sp, #16]
 800af3e:	f000 fcb5 	bl	800b8ac <__lshift>
 800af42:	0006      	movs	r6, r0
 800af44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af46:	2b00      	cmp	r3, #0
 800af48:	d027      	beq.n	800af9a <_dtoa_r+0x96e>
 800af4a:	0031      	movs	r1, r6
 800af4c:	9805      	ldr	r0, [sp, #20]
 800af4e:	f000 fd1b 	bl	800b988 <__mcmp>
 800af52:	2800      	cmp	r0, #0
 800af54:	da21      	bge.n	800af9a <_dtoa_r+0x96e>
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	220a      	movs	r2, #10
 800af5a:	3b01      	subs	r3, #1
 800af5c:	9303      	str	r3, [sp, #12]
 800af5e:	9905      	ldr	r1, [sp, #20]
 800af60:	2300      	movs	r3, #0
 800af62:	9804      	ldr	r0, [sp, #16]
 800af64:	f000 faf2 	bl	800b54c <__multadd>
 800af68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af6a:	9005      	str	r0, [sp, #20]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d100      	bne.n	800af72 <_dtoa_r+0x946>
 800af70:	e15d      	b.n	800b22e <_dtoa_r+0xc02>
 800af72:	2300      	movs	r3, #0
 800af74:	0039      	movs	r1, r7
 800af76:	220a      	movs	r2, #10
 800af78:	9804      	ldr	r0, [sp, #16]
 800af7a:	f000 fae7 	bl	800b54c <__multadd>
 800af7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af80:	0007      	movs	r7, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	dc49      	bgt.n	800b01a <_dtoa_r+0x9ee>
 800af86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af88:	2b02      	cmp	r3, #2
 800af8a:	dc0e      	bgt.n	800afaa <_dtoa_r+0x97e>
 800af8c:	e045      	b.n	800b01a <_dtoa_r+0x9ee>
 800af8e:	2b04      	cmp	r3, #4
 800af90:	d0c6      	beq.n	800af20 <_dtoa_r+0x8f4>
 800af92:	331c      	adds	r3, #28
 800af94:	e7bd      	b.n	800af12 <_dtoa_r+0x8e6>
 800af96:	0013      	movs	r3, r2
 800af98:	e7fb      	b.n	800af92 <_dtoa_r+0x966>
 800af9a:	9b07      	ldr	r3, [sp, #28]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	dc36      	bgt.n	800b00e <_dtoa_r+0x9e2>
 800afa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	dd33      	ble.n	800b00e <_dtoa_r+0x9e2>
 800afa6:	9b07      	ldr	r3, [sp, #28]
 800afa8:	930b      	str	r3, [sp, #44]	; 0x2c
 800afaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10c      	bne.n	800afca <_dtoa_r+0x99e>
 800afb0:	0031      	movs	r1, r6
 800afb2:	2205      	movs	r2, #5
 800afb4:	9804      	ldr	r0, [sp, #16]
 800afb6:	f000 fac9 	bl	800b54c <__multadd>
 800afba:	0006      	movs	r6, r0
 800afbc:	0001      	movs	r1, r0
 800afbe:	9805      	ldr	r0, [sp, #20]
 800afc0:	f000 fce2 	bl	800b988 <__mcmp>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	dd00      	ble.n	800afca <_dtoa_r+0x99e>
 800afc8:	e59f      	b.n	800ab0a <_dtoa_r+0x4de>
 800afca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afcc:	43db      	mvns	r3, r3
 800afce:	9303      	str	r3, [sp, #12]
 800afd0:	9b06      	ldr	r3, [sp, #24]
 800afd2:	9308      	str	r3, [sp, #32]
 800afd4:	2500      	movs	r5, #0
 800afd6:	0031      	movs	r1, r6
 800afd8:	9804      	ldr	r0, [sp, #16]
 800afda:	f000 fa93 	bl	800b504 <_Bfree>
 800afde:	2f00      	cmp	r7, #0
 800afe0:	d100      	bne.n	800afe4 <_dtoa_r+0x9b8>
 800afe2:	e6a3      	b.n	800ad2c <_dtoa_r+0x700>
 800afe4:	2d00      	cmp	r5, #0
 800afe6:	d005      	beq.n	800aff4 <_dtoa_r+0x9c8>
 800afe8:	42bd      	cmp	r5, r7
 800afea:	d003      	beq.n	800aff4 <_dtoa_r+0x9c8>
 800afec:	0029      	movs	r1, r5
 800afee:	9804      	ldr	r0, [sp, #16]
 800aff0:	f000 fa88 	bl	800b504 <_Bfree>
 800aff4:	0039      	movs	r1, r7
 800aff6:	9804      	ldr	r0, [sp, #16]
 800aff8:	f000 fa84 	bl	800b504 <_Bfree>
 800affc:	e696      	b.n	800ad2c <_dtoa_r+0x700>
 800affe:	2600      	movs	r6, #0
 800b000:	0037      	movs	r7, r6
 800b002:	e7e2      	b.n	800afca <_dtoa_r+0x99e>
 800b004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b006:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b008:	9303      	str	r3, [sp, #12]
 800b00a:	0037      	movs	r7, r6
 800b00c:	e57d      	b.n	800ab0a <_dtoa_r+0x4de>
 800b00e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b010:	2b00      	cmp	r3, #0
 800b012:	d100      	bne.n	800b016 <_dtoa_r+0x9ea>
 800b014:	e0c3      	b.n	800b19e <_dtoa_r+0xb72>
 800b016:	9b07      	ldr	r3, [sp, #28]
 800b018:	930b      	str	r3, [sp, #44]	; 0x2c
 800b01a:	2c00      	cmp	r4, #0
 800b01c:	dd05      	ble.n	800b02a <_dtoa_r+0x9fe>
 800b01e:	0039      	movs	r1, r7
 800b020:	0022      	movs	r2, r4
 800b022:	9804      	ldr	r0, [sp, #16]
 800b024:	f000 fc42 	bl	800b8ac <__lshift>
 800b028:	0007      	movs	r7, r0
 800b02a:	0038      	movs	r0, r7
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	d024      	beq.n	800b07a <_dtoa_r+0xa4e>
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	9804      	ldr	r0, [sp, #16]
 800b034:	f000 fa22 	bl	800b47c <_Balloc>
 800b038:	1e04      	subs	r4, r0, #0
 800b03a:	d111      	bne.n	800b060 <_dtoa_r+0xa34>
 800b03c:	0022      	movs	r2, r4
 800b03e:	4b05      	ldr	r3, [pc, #20]	; (800b054 <_dtoa_r+0xa28>)
 800b040:	4805      	ldr	r0, [pc, #20]	; (800b058 <_dtoa_r+0xa2c>)
 800b042:	4906      	ldr	r1, [pc, #24]	; (800b05c <_dtoa_r+0xa30>)
 800b044:	f7ff fb07 	bl	800a656 <_dtoa_r+0x2a>
 800b048:	40240000 	.word	0x40240000
 800b04c:	00000433 	.word	0x00000433
 800b050:	7ff00000 	.word	0x7ff00000
 800b054:	0800c8c6 	.word	0x0800c8c6
 800b058:	0800c86e 	.word	0x0800c86e
 800b05c:	000002ef 	.word	0x000002ef
 800b060:	0039      	movs	r1, r7
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	310c      	adds	r1, #12
 800b066:	3202      	adds	r2, #2
 800b068:	0092      	lsls	r2, r2, #2
 800b06a:	300c      	adds	r0, #12
 800b06c:	f7ff fa26 	bl	800a4bc <memcpy>
 800b070:	2201      	movs	r2, #1
 800b072:	0021      	movs	r1, r4
 800b074:	9804      	ldr	r0, [sp, #16]
 800b076:	f000 fc19 	bl	800b8ac <__lshift>
 800b07a:	9b06      	ldr	r3, [sp, #24]
 800b07c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b07e:	9307      	str	r3, [sp, #28]
 800b080:	3b01      	subs	r3, #1
 800b082:	189b      	adds	r3, r3, r2
 800b084:	2201      	movs	r2, #1
 800b086:	003d      	movs	r5, r7
 800b088:	0007      	movs	r7, r0
 800b08a:	930e      	str	r3, [sp, #56]	; 0x38
 800b08c:	9b08      	ldr	r3, [sp, #32]
 800b08e:	4013      	ands	r3, r2
 800b090:	930d      	str	r3, [sp, #52]	; 0x34
 800b092:	0031      	movs	r1, r6
 800b094:	9805      	ldr	r0, [sp, #20]
 800b096:	f7ff fa39 	bl	800a50c <quorem>
 800b09a:	0029      	movs	r1, r5
 800b09c:	0004      	movs	r4, r0
 800b09e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0a0:	9805      	ldr	r0, [sp, #20]
 800b0a2:	f000 fc71 	bl	800b988 <__mcmp>
 800b0a6:	003a      	movs	r2, r7
 800b0a8:	900c      	str	r0, [sp, #48]	; 0x30
 800b0aa:	0031      	movs	r1, r6
 800b0ac:	9804      	ldr	r0, [sp, #16]
 800b0ae:	f000 fc87 	bl	800b9c0 <__mdiff>
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	68c3      	ldr	r3, [r0, #12]
 800b0b6:	3430      	adds	r4, #48	; 0x30
 800b0b8:	9008      	str	r0, [sp, #32]
 800b0ba:	920a      	str	r2, [sp, #40]	; 0x28
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d104      	bne.n	800b0ca <_dtoa_r+0xa9e>
 800b0c0:	0001      	movs	r1, r0
 800b0c2:	9805      	ldr	r0, [sp, #20]
 800b0c4:	f000 fc60 	bl	800b988 <__mcmp>
 800b0c8:	900a      	str	r0, [sp, #40]	; 0x28
 800b0ca:	9908      	ldr	r1, [sp, #32]
 800b0cc:	9804      	ldr	r0, [sp, #16]
 800b0ce:	f000 fa19 	bl	800b504 <_Bfree>
 800b0d2:	9b07      	ldr	r3, [sp, #28]
 800b0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	9308      	str	r3, [sp, #32]
 800b0da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	d109      	bne.n	800b0f8 <_dtoa_r+0xacc>
 800b0e4:	2c39      	cmp	r4, #57	; 0x39
 800b0e6:	d022      	beq.n	800b12e <_dtoa_r+0xb02>
 800b0e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	dd01      	ble.n	800b0f2 <_dtoa_r+0xac6>
 800b0ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b0f0:	3431      	adds	r4, #49	; 0x31
 800b0f2:	9b07      	ldr	r3, [sp, #28]
 800b0f4:	701c      	strb	r4, [r3, #0]
 800b0f6:	e76e      	b.n	800afd6 <_dtoa_r+0x9aa>
 800b0f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	db04      	blt.n	800b108 <_dtoa_r+0xadc>
 800b0fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b100:	4313      	orrs	r3, r2
 800b102:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b104:	4313      	orrs	r3, r2
 800b106:	d11e      	bne.n	800b146 <_dtoa_r+0xb1a>
 800b108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	ddf1      	ble.n	800b0f2 <_dtoa_r+0xac6>
 800b10e:	9905      	ldr	r1, [sp, #20]
 800b110:	2201      	movs	r2, #1
 800b112:	9804      	ldr	r0, [sp, #16]
 800b114:	f000 fbca 	bl	800b8ac <__lshift>
 800b118:	0031      	movs	r1, r6
 800b11a:	9005      	str	r0, [sp, #20]
 800b11c:	f000 fc34 	bl	800b988 <__mcmp>
 800b120:	2800      	cmp	r0, #0
 800b122:	dc02      	bgt.n	800b12a <_dtoa_r+0xafe>
 800b124:	d1e5      	bne.n	800b0f2 <_dtoa_r+0xac6>
 800b126:	07e3      	lsls	r3, r4, #31
 800b128:	d5e3      	bpl.n	800b0f2 <_dtoa_r+0xac6>
 800b12a:	2c39      	cmp	r4, #57	; 0x39
 800b12c:	d1df      	bne.n	800b0ee <_dtoa_r+0xac2>
 800b12e:	2339      	movs	r3, #57	; 0x39
 800b130:	9a07      	ldr	r2, [sp, #28]
 800b132:	7013      	strb	r3, [r2, #0]
 800b134:	9b08      	ldr	r3, [sp, #32]
 800b136:	9308      	str	r3, [sp, #32]
 800b138:	3b01      	subs	r3, #1
 800b13a:	781a      	ldrb	r2, [r3, #0]
 800b13c:	2a39      	cmp	r2, #57	; 0x39
 800b13e:	d063      	beq.n	800b208 <_dtoa_r+0xbdc>
 800b140:	3201      	adds	r2, #1
 800b142:	701a      	strb	r2, [r3, #0]
 800b144:	e747      	b.n	800afd6 <_dtoa_r+0x9aa>
 800b146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b148:	2b00      	cmp	r3, #0
 800b14a:	dd03      	ble.n	800b154 <_dtoa_r+0xb28>
 800b14c:	2c39      	cmp	r4, #57	; 0x39
 800b14e:	d0ee      	beq.n	800b12e <_dtoa_r+0xb02>
 800b150:	3401      	adds	r4, #1
 800b152:	e7ce      	b.n	800b0f2 <_dtoa_r+0xac6>
 800b154:	9b07      	ldr	r3, [sp, #28]
 800b156:	9a07      	ldr	r2, [sp, #28]
 800b158:	701c      	strb	r4, [r3, #0]
 800b15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d03e      	beq.n	800b1de <_dtoa_r+0xbb2>
 800b160:	2300      	movs	r3, #0
 800b162:	220a      	movs	r2, #10
 800b164:	9905      	ldr	r1, [sp, #20]
 800b166:	9804      	ldr	r0, [sp, #16]
 800b168:	f000 f9f0 	bl	800b54c <__multadd>
 800b16c:	2300      	movs	r3, #0
 800b16e:	9005      	str	r0, [sp, #20]
 800b170:	220a      	movs	r2, #10
 800b172:	0029      	movs	r1, r5
 800b174:	9804      	ldr	r0, [sp, #16]
 800b176:	42bd      	cmp	r5, r7
 800b178:	d106      	bne.n	800b188 <_dtoa_r+0xb5c>
 800b17a:	f000 f9e7 	bl	800b54c <__multadd>
 800b17e:	0005      	movs	r5, r0
 800b180:	0007      	movs	r7, r0
 800b182:	9b08      	ldr	r3, [sp, #32]
 800b184:	9307      	str	r3, [sp, #28]
 800b186:	e784      	b.n	800b092 <_dtoa_r+0xa66>
 800b188:	f000 f9e0 	bl	800b54c <__multadd>
 800b18c:	0039      	movs	r1, r7
 800b18e:	0005      	movs	r5, r0
 800b190:	2300      	movs	r3, #0
 800b192:	220a      	movs	r2, #10
 800b194:	9804      	ldr	r0, [sp, #16]
 800b196:	f000 f9d9 	bl	800b54c <__multadd>
 800b19a:	0007      	movs	r7, r0
 800b19c:	e7f1      	b.n	800b182 <_dtoa_r+0xb56>
 800b19e:	9b07      	ldr	r3, [sp, #28]
 800b1a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1a2:	2500      	movs	r5, #0
 800b1a4:	0031      	movs	r1, r6
 800b1a6:	9805      	ldr	r0, [sp, #20]
 800b1a8:	f7ff f9b0 	bl	800a50c <quorem>
 800b1ac:	9b06      	ldr	r3, [sp, #24]
 800b1ae:	3030      	adds	r0, #48	; 0x30
 800b1b0:	5558      	strb	r0, [r3, r5]
 800b1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b4:	3501      	adds	r5, #1
 800b1b6:	0004      	movs	r4, r0
 800b1b8:	42ab      	cmp	r3, r5
 800b1ba:	dd07      	ble.n	800b1cc <_dtoa_r+0xba0>
 800b1bc:	2300      	movs	r3, #0
 800b1be:	220a      	movs	r2, #10
 800b1c0:	9905      	ldr	r1, [sp, #20]
 800b1c2:	9804      	ldr	r0, [sp, #16]
 800b1c4:	f000 f9c2 	bl	800b54c <__multadd>
 800b1c8:	9005      	str	r0, [sp, #20]
 800b1ca:	e7eb      	b.n	800b1a4 <_dtoa_r+0xb78>
 800b1cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	2a00      	cmp	r2, #0
 800b1d2:	dd00      	ble.n	800b1d6 <_dtoa_r+0xbaa>
 800b1d4:	0013      	movs	r3, r2
 800b1d6:	2500      	movs	r5, #0
 800b1d8:	9a06      	ldr	r2, [sp, #24]
 800b1da:	18d3      	adds	r3, r2, r3
 800b1dc:	9308      	str	r3, [sp, #32]
 800b1de:	9905      	ldr	r1, [sp, #20]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	9804      	ldr	r0, [sp, #16]
 800b1e4:	f000 fb62 	bl	800b8ac <__lshift>
 800b1e8:	0031      	movs	r1, r6
 800b1ea:	9005      	str	r0, [sp, #20]
 800b1ec:	f000 fbcc 	bl	800b988 <__mcmp>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	dc9f      	bgt.n	800b134 <_dtoa_r+0xb08>
 800b1f4:	d101      	bne.n	800b1fa <_dtoa_r+0xbce>
 800b1f6:	07e4      	lsls	r4, r4, #31
 800b1f8:	d49c      	bmi.n	800b134 <_dtoa_r+0xb08>
 800b1fa:	9b08      	ldr	r3, [sp, #32]
 800b1fc:	9308      	str	r3, [sp, #32]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	781a      	ldrb	r2, [r3, #0]
 800b202:	2a30      	cmp	r2, #48	; 0x30
 800b204:	d0fa      	beq.n	800b1fc <_dtoa_r+0xbd0>
 800b206:	e6e6      	b.n	800afd6 <_dtoa_r+0x9aa>
 800b208:	9a06      	ldr	r2, [sp, #24]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d193      	bne.n	800b136 <_dtoa_r+0xb0a>
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	3301      	adds	r3, #1
 800b212:	9303      	str	r3, [sp, #12]
 800b214:	2331      	movs	r3, #49	; 0x31
 800b216:	7013      	strb	r3, [r2, #0]
 800b218:	e6dd      	b.n	800afd6 <_dtoa_r+0x9aa>
 800b21a:	4b09      	ldr	r3, [pc, #36]	; (800b240 <_dtoa_r+0xc14>)
 800b21c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b21e:	9306      	str	r3, [sp, #24]
 800b220:	4b08      	ldr	r3, [pc, #32]	; (800b244 <_dtoa_r+0xc18>)
 800b222:	2a00      	cmp	r2, #0
 800b224:	d001      	beq.n	800b22a <_dtoa_r+0xbfe>
 800b226:	f7ff fa49 	bl	800a6bc <_dtoa_r+0x90>
 800b22a:	f7ff fa49 	bl	800a6c0 <_dtoa_r+0x94>
 800b22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b230:	2b00      	cmp	r3, #0
 800b232:	dcb6      	bgt.n	800b1a2 <_dtoa_r+0xb76>
 800b234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b236:	2b02      	cmp	r3, #2
 800b238:	dd00      	ble.n	800b23c <_dtoa_r+0xc10>
 800b23a:	e6b6      	b.n	800afaa <_dtoa_r+0x97e>
 800b23c:	e7b1      	b.n	800b1a2 <_dtoa_r+0xb76>
 800b23e:	46c0      	nop			; (mov r8, r8)
 800b240:	0800c84a 	.word	0x0800c84a
 800b244:	0800c852 	.word	0x0800c852

0800b248 <_free_r>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	0005      	movs	r5, r0
 800b24c:	2900      	cmp	r1, #0
 800b24e:	d010      	beq.n	800b272 <_free_r+0x2a>
 800b250:	1f0c      	subs	r4, r1, #4
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	da00      	bge.n	800b25a <_free_r+0x12>
 800b258:	18e4      	adds	r4, r4, r3
 800b25a:	0028      	movs	r0, r5
 800b25c:	f000 f8fe 	bl	800b45c <__malloc_lock>
 800b260:	4a1d      	ldr	r2, [pc, #116]	; (800b2d8 <_free_r+0x90>)
 800b262:	6813      	ldr	r3, [r2, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d105      	bne.n	800b274 <_free_r+0x2c>
 800b268:	6063      	str	r3, [r4, #4]
 800b26a:	6014      	str	r4, [r2, #0]
 800b26c:	0028      	movs	r0, r5
 800b26e:	f000 f8fd 	bl	800b46c <__malloc_unlock>
 800b272:	bd70      	pop	{r4, r5, r6, pc}
 800b274:	42a3      	cmp	r3, r4
 800b276:	d908      	bls.n	800b28a <_free_r+0x42>
 800b278:	6820      	ldr	r0, [r4, #0]
 800b27a:	1821      	adds	r1, r4, r0
 800b27c:	428b      	cmp	r3, r1
 800b27e:	d1f3      	bne.n	800b268 <_free_r+0x20>
 800b280:	6819      	ldr	r1, [r3, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	1809      	adds	r1, r1, r0
 800b286:	6021      	str	r1, [r4, #0]
 800b288:	e7ee      	b.n	800b268 <_free_r+0x20>
 800b28a:	001a      	movs	r2, r3
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <_free_r+0x4e>
 800b292:	42a3      	cmp	r3, r4
 800b294:	d9f9      	bls.n	800b28a <_free_r+0x42>
 800b296:	6811      	ldr	r1, [r2, #0]
 800b298:	1850      	adds	r0, r2, r1
 800b29a:	42a0      	cmp	r0, r4
 800b29c:	d10b      	bne.n	800b2b6 <_free_r+0x6e>
 800b29e:	6820      	ldr	r0, [r4, #0]
 800b2a0:	1809      	adds	r1, r1, r0
 800b2a2:	1850      	adds	r0, r2, r1
 800b2a4:	6011      	str	r1, [r2, #0]
 800b2a6:	4283      	cmp	r3, r0
 800b2a8:	d1e0      	bne.n	800b26c <_free_r+0x24>
 800b2aa:	6818      	ldr	r0, [r3, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	1841      	adds	r1, r0, r1
 800b2b0:	6011      	str	r1, [r2, #0]
 800b2b2:	6053      	str	r3, [r2, #4]
 800b2b4:	e7da      	b.n	800b26c <_free_r+0x24>
 800b2b6:	42a0      	cmp	r0, r4
 800b2b8:	d902      	bls.n	800b2c0 <_free_r+0x78>
 800b2ba:	230c      	movs	r3, #12
 800b2bc:	602b      	str	r3, [r5, #0]
 800b2be:	e7d5      	b.n	800b26c <_free_r+0x24>
 800b2c0:	6820      	ldr	r0, [r4, #0]
 800b2c2:	1821      	adds	r1, r4, r0
 800b2c4:	428b      	cmp	r3, r1
 800b2c6:	d103      	bne.n	800b2d0 <_free_r+0x88>
 800b2c8:	6819      	ldr	r1, [r3, #0]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	1809      	adds	r1, r1, r0
 800b2ce:	6021      	str	r1, [r4, #0]
 800b2d0:	6063      	str	r3, [r4, #4]
 800b2d2:	6054      	str	r4, [r2, #4]
 800b2d4:	e7ca      	b.n	800b26c <_free_r+0x24>
 800b2d6:	46c0      	nop			; (mov r8, r8)
 800b2d8:	200007b4 	.word	0x200007b4

0800b2dc <malloc>:
 800b2dc:	b510      	push	{r4, lr}
 800b2de:	4b03      	ldr	r3, [pc, #12]	; (800b2ec <malloc+0x10>)
 800b2e0:	0001      	movs	r1, r0
 800b2e2:	6818      	ldr	r0, [r3, #0]
 800b2e4:	f000 f826 	bl	800b334 <_malloc_r>
 800b2e8:	bd10      	pop	{r4, pc}
 800b2ea:	46c0      	nop			; (mov r8, r8)
 800b2ec:	2000024c 	.word	0x2000024c

0800b2f0 <sbrk_aligned>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	4e0f      	ldr	r6, [pc, #60]	; (800b330 <sbrk_aligned+0x40>)
 800b2f4:	000d      	movs	r5, r1
 800b2f6:	6831      	ldr	r1, [r6, #0]
 800b2f8:	0004      	movs	r4, r0
 800b2fa:	2900      	cmp	r1, #0
 800b2fc:	d102      	bne.n	800b304 <sbrk_aligned+0x14>
 800b2fe:	f001 f86f 	bl	800c3e0 <_sbrk_r>
 800b302:	6030      	str	r0, [r6, #0]
 800b304:	0029      	movs	r1, r5
 800b306:	0020      	movs	r0, r4
 800b308:	f001 f86a 	bl	800c3e0 <_sbrk_r>
 800b30c:	1c43      	adds	r3, r0, #1
 800b30e:	d00a      	beq.n	800b326 <sbrk_aligned+0x36>
 800b310:	2303      	movs	r3, #3
 800b312:	1cc5      	adds	r5, r0, #3
 800b314:	439d      	bics	r5, r3
 800b316:	42a8      	cmp	r0, r5
 800b318:	d007      	beq.n	800b32a <sbrk_aligned+0x3a>
 800b31a:	1a29      	subs	r1, r5, r0
 800b31c:	0020      	movs	r0, r4
 800b31e:	f001 f85f 	bl	800c3e0 <_sbrk_r>
 800b322:	3001      	adds	r0, #1
 800b324:	d101      	bne.n	800b32a <sbrk_aligned+0x3a>
 800b326:	2501      	movs	r5, #1
 800b328:	426d      	negs	r5, r5
 800b32a:	0028      	movs	r0, r5
 800b32c:	bd70      	pop	{r4, r5, r6, pc}
 800b32e:	46c0      	nop			; (mov r8, r8)
 800b330:	200007b8 	.word	0x200007b8

0800b334 <_malloc_r>:
 800b334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b336:	2203      	movs	r2, #3
 800b338:	1ccb      	adds	r3, r1, #3
 800b33a:	4393      	bics	r3, r2
 800b33c:	3308      	adds	r3, #8
 800b33e:	0006      	movs	r6, r0
 800b340:	001f      	movs	r7, r3
 800b342:	2b0c      	cmp	r3, #12
 800b344:	d238      	bcs.n	800b3b8 <_malloc_r+0x84>
 800b346:	270c      	movs	r7, #12
 800b348:	42b9      	cmp	r1, r7
 800b34a:	d837      	bhi.n	800b3bc <_malloc_r+0x88>
 800b34c:	0030      	movs	r0, r6
 800b34e:	f000 f885 	bl	800b45c <__malloc_lock>
 800b352:	4b38      	ldr	r3, [pc, #224]	; (800b434 <_malloc_r+0x100>)
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	001c      	movs	r4, r3
 800b35a:	2c00      	cmp	r4, #0
 800b35c:	d133      	bne.n	800b3c6 <_malloc_r+0x92>
 800b35e:	0039      	movs	r1, r7
 800b360:	0030      	movs	r0, r6
 800b362:	f7ff ffc5 	bl	800b2f0 <sbrk_aligned>
 800b366:	0004      	movs	r4, r0
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d15e      	bne.n	800b42a <_malloc_r+0xf6>
 800b36c:	9b00      	ldr	r3, [sp, #0]
 800b36e:	681c      	ldr	r4, [r3, #0]
 800b370:	0025      	movs	r5, r4
 800b372:	2d00      	cmp	r5, #0
 800b374:	d14e      	bne.n	800b414 <_malloc_r+0xe0>
 800b376:	2c00      	cmp	r4, #0
 800b378:	d051      	beq.n	800b41e <_malloc_r+0xea>
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	0029      	movs	r1, r5
 800b37e:	18e3      	adds	r3, r4, r3
 800b380:	0030      	movs	r0, r6
 800b382:	9301      	str	r3, [sp, #4]
 800b384:	f001 f82c 	bl	800c3e0 <_sbrk_r>
 800b388:	9b01      	ldr	r3, [sp, #4]
 800b38a:	4283      	cmp	r3, r0
 800b38c:	d147      	bne.n	800b41e <_malloc_r+0xea>
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	0030      	movs	r0, r6
 800b392:	1aff      	subs	r7, r7, r3
 800b394:	0039      	movs	r1, r7
 800b396:	f7ff ffab 	bl	800b2f0 <sbrk_aligned>
 800b39a:	3001      	adds	r0, #1
 800b39c:	d03f      	beq.n	800b41e <_malloc_r+0xea>
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	19db      	adds	r3, r3, r7
 800b3a2:	6023      	str	r3, [r4, #0]
 800b3a4:	9b00      	ldr	r3, [sp, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d040      	beq.n	800b42e <_malloc_r+0xfa>
 800b3ac:	685a      	ldr	r2, [r3, #4]
 800b3ae:	42a2      	cmp	r2, r4
 800b3b0:	d133      	bne.n	800b41a <_malloc_r+0xe6>
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	e014      	b.n	800b3e2 <_malloc_r+0xae>
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	dac5      	bge.n	800b348 <_malloc_r+0x14>
 800b3bc:	230c      	movs	r3, #12
 800b3be:	2500      	movs	r5, #0
 800b3c0:	6033      	str	r3, [r6, #0]
 800b3c2:	0028      	movs	r0, r5
 800b3c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b3c6:	6821      	ldr	r1, [r4, #0]
 800b3c8:	1bc9      	subs	r1, r1, r7
 800b3ca:	d420      	bmi.n	800b40e <_malloc_r+0xda>
 800b3cc:	290b      	cmp	r1, #11
 800b3ce:	d918      	bls.n	800b402 <_malloc_r+0xce>
 800b3d0:	19e2      	adds	r2, r4, r7
 800b3d2:	6027      	str	r7, [r4, #0]
 800b3d4:	42a3      	cmp	r3, r4
 800b3d6:	d112      	bne.n	800b3fe <_malloc_r+0xca>
 800b3d8:	9b00      	ldr	r3, [sp, #0]
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	6863      	ldr	r3, [r4, #4]
 800b3de:	6011      	str	r1, [r2, #0]
 800b3e0:	6053      	str	r3, [r2, #4]
 800b3e2:	0030      	movs	r0, r6
 800b3e4:	0025      	movs	r5, r4
 800b3e6:	f000 f841 	bl	800b46c <__malloc_unlock>
 800b3ea:	2207      	movs	r2, #7
 800b3ec:	350b      	adds	r5, #11
 800b3ee:	1d23      	adds	r3, r4, #4
 800b3f0:	4395      	bics	r5, r2
 800b3f2:	1aea      	subs	r2, r5, r3
 800b3f4:	429d      	cmp	r5, r3
 800b3f6:	d0e4      	beq.n	800b3c2 <_malloc_r+0x8e>
 800b3f8:	1b5b      	subs	r3, r3, r5
 800b3fa:	50a3      	str	r3, [r4, r2]
 800b3fc:	e7e1      	b.n	800b3c2 <_malloc_r+0x8e>
 800b3fe:	605a      	str	r2, [r3, #4]
 800b400:	e7ec      	b.n	800b3dc <_malloc_r+0xa8>
 800b402:	6862      	ldr	r2, [r4, #4]
 800b404:	42a3      	cmp	r3, r4
 800b406:	d1d5      	bne.n	800b3b4 <_malloc_r+0x80>
 800b408:	9b00      	ldr	r3, [sp, #0]
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	e7e9      	b.n	800b3e2 <_malloc_r+0xae>
 800b40e:	0023      	movs	r3, r4
 800b410:	6864      	ldr	r4, [r4, #4]
 800b412:	e7a2      	b.n	800b35a <_malloc_r+0x26>
 800b414:	002c      	movs	r4, r5
 800b416:	686d      	ldr	r5, [r5, #4]
 800b418:	e7ab      	b.n	800b372 <_malloc_r+0x3e>
 800b41a:	0013      	movs	r3, r2
 800b41c:	e7c4      	b.n	800b3a8 <_malloc_r+0x74>
 800b41e:	230c      	movs	r3, #12
 800b420:	0030      	movs	r0, r6
 800b422:	6033      	str	r3, [r6, #0]
 800b424:	f000 f822 	bl	800b46c <__malloc_unlock>
 800b428:	e7cb      	b.n	800b3c2 <_malloc_r+0x8e>
 800b42a:	6027      	str	r7, [r4, #0]
 800b42c:	e7d9      	b.n	800b3e2 <_malloc_r+0xae>
 800b42e:	605b      	str	r3, [r3, #4]
 800b430:	deff      	udf	#255	; 0xff
 800b432:	46c0      	nop			; (mov r8, r8)
 800b434:	200007b4 	.word	0x200007b4

0800b438 <__ascii_mbtowc>:
 800b438:	b082      	sub	sp, #8
 800b43a:	2900      	cmp	r1, #0
 800b43c:	d100      	bne.n	800b440 <__ascii_mbtowc+0x8>
 800b43e:	a901      	add	r1, sp, #4
 800b440:	1e10      	subs	r0, r2, #0
 800b442:	d006      	beq.n	800b452 <__ascii_mbtowc+0x1a>
 800b444:	2b00      	cmp	r3, #0
 800b446:	d006      	beq.n	800b456 <__ascii_mbtowc+0x1e>
 800b448:	7813      	ldrb	r3, [r2, #0]
 800b44a:	600b      	str	r3, [r1, #0]
 800b44c:	7810      	ldrb	r0, [r2, #0]
 800b44e:	1e43      	subs	r3, r0, #1
 800b450:	4198      	sbcs	r0, r3
 800b452:	b002      	add	sp, #8
 800b454:	4770      	bx	lr
 800b456:	2002      	movs	r0, #2
 800b458:	4240      	negs	r0, r0
 800b45a:	e7fa      	b.n	800b452 <__ascii_mbtowc+0x1a>

0800b45c <__malloc_lock>:
 800b45c:	b510      	push	{r4, lr}
 800b45e:	4802      	ldr	r0, [pc, #8]	; (800b468 <__malloc_lock+0xc>)
 800b460:	f7ff f81f 	bl	800a4a2 <__retarget_lock_acquire_recursive>
 800b464:	bd10      	pop	{r4, pc}
 800b466:	46c0      	nop			; (mov r8, r8)
 800b468:	200007b0 	.word	0x200007b0

0800b46c <__malloc_unlock>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	4802      	ldr	r0, [pc, #8]	; (800b478 <__malloc_unlock+0xc>)
 800b470:	f7ff f818 	bl	800a4a4 <__retarget_lock_release_recursive>
 800b474:	bd10      	pop	{r4, pc}
 800b476:	46c0      	nop			; (mov r8, r8)
 800b478:	200007b0 	.word	0x200007b0

0800b47c <_Balloc>:
 800b47c:	b570      	push	{r4, r5, r6, lr}
 800b47e:	69c5      	ldr	r5, [r0, #28]
 800b480:	0006      	movs	r6, r0
 800b482:	000c      	movs	r4, r1
 800b484:	2d00      	cmp	r5, #0
 800b486:	d10e      	bne.n	800b4a6 <_Balloc+0x2a>
 800b488:	2010      	movs	r0, #16
 800b48a:	f7ff ff27 	bl	800b2dc <malloc>
 800b48e:	1e02      	subs	r2, r0, #0
 800b490:	61f0      	str	r0, [r6, #28]
 800b492:	d104      	bne.n	800b49e <_Balloc+0x22>
 800b494:	216b      	movs	r1, #107	; 0x6b
 800b496:	4b19      	ldr	r3, [pc, #100]	; (800b4fc <_Balloc+0x80>)
 800b498:	4819      	ldr	r0, [pc, #100]	; (800b500 <_Balloc+0x84>)
 800b49a:	f7ff f819 	bl	800a4d0 <__assert_func>
 800b49e:	6045      	str	r5, [r0, #4]
 800b4a0:	6085      	str	r5, [r0, #8]
 800b4a2:	6005      	str	r5, [r0, #0]
 800b4a4:	60c5      	str	r5, [r0, #12]
 800b4a6:	69f5      	ldr	r5, [r6, #28]
 800b4a8:	68eb      	ldr	r3, [r5, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d013      	beq.n	800b4d6 <_Balloc+0x5a>
 800b4ae:	69f3      	ldr	r3, [r6, #28]
 800b4b0:	00a2      	lsls	r2, r4, #2
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	189b      	adds	r3, r3, r2
 800b4b6:	6818      	ldr	r0, [r3, #0]
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d118      	bne.n	800b4ee <_Balloc+0x72>
 800b4bc:	2101      	movs	r1, #1
 800b4be:	000d      	movs	r5, r1
 800b4c0:	40a5      	lsls	r5, r4
 800b4c2:	1d6a      	adds	r2, r5, #5
 800b4c4:	0030      	movs	r0, r6
 800b4c6:	0092      	lsls	r2, r2, #2
 800b4c8:	f000 ffa3 	bl	800c412 <_calloc_r>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d00c      	beq.n	800b4ea <_Balloc+0x6e>
 800b4d0:	6044      	str	r4, [r0, #4]
 800b4d2:	6085      	str	r5, [r0, #8]
 800b4d4:	e00d      	b.n	800b4f2 <_Balloc+0x76>
 800b4d6:	2221      	movs	r2, #33	; 0x21
 800b4d8:	2104      	movs	r1, #4
 800b4da:	0030      	movs	r0, r6
 800b4dc:	f000 ff99 	bl	800c412 <_calloc_r>
 800b4e0:	69f3      	ldr	r3, [r6, #28]
 800b4e2:	60e8      	str	r0, [r5, #12]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1e1      	bne.n	800b4ae <_Balloc+0x32>
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	bd70      	pop	{r4, r5, r6, pc}
 800b4ee:	6802      	ldr	r2, [r0, #0]
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	6103      	str	r3, [r0, #16]
 800b4f6:	60c3      	str	r3, [r0, #12]
 800b4f8:	e7f8      	b.n	800b4ec <_Balloc+0x70>
 800b4fa:	46c0      	nop			; (mov r8, r8)
 800b4fc:	0800c857 	.word	0x0800c857
 800b500:	0800c8d7 	.word	0x0800c8d7

0800b504 <_Bfree>:
 800b504:	b570      	push	{r4, r5, r6, lr}
 800b506:	69c6      	ldr	r6, [r0, #28]
 800b508:	0005      	movs	r5, r0
 800b50a:	000c      	movs	r4, r1
 800b50c:	2e00      	cmp	r6, #0
 800b50e:	d10e      	bne.n	800b52e <_Bfree+0x2a>
 800b510:	2010      	movs	r0, #16
 800b512:	f7ff fee3 	bl	800b2dc <malloc>
 800b516:	1e02      	subs	r2, r0, #0
 800b518:	61e8      	str	r0, [r5, #28]
 800b51a:	d104      	bne.n	800b526 <_Bfree+0x22>
 800b51c:	218f      	movs	r1, #143	; 0x8f
 800b51e:	4b09      	ldr	r3, [pc, #36]	; (800b544 <_Bfree+0x40>)
 800b520:	4809      	ldr	r0, [pc, #36]	; (800b548 <_Bfree+0x44>)
 800b522:	f7fe ffd5 	bl	800a4d0 <__assert_func>
 800b526:	6046      	str	r6, [r0, #4]
 800b528:	6086      	str	r6, [r0, #8]
 800b52a:	6006      	str	r6, [r0, #0]
 800b52c:	60c6      	str	r6, [r0, #12]
 800b52e:	2c00      	cmp	r4, #0
 800b530:	d007      	beq.n	800b542 <_Bfree+0x3e>
 800b532:	69eb      	ldr	r3, [r5, #28]
 800b534:	6862      	ldr	r2, [r4, #4]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	0092      	lsls	r2, r2, #2
 800b53a:	189b      	adds	r3, r3, r2
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	6022      	str	r2, [r4, #0]
 800b540:	601c      	str	r4, [r3, #0]
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	0800c857 	.word	0x0800c857
 800b548:	0800c8d7 	.word	0x0800c8d7

0800b54c <__multadd>:
 800b54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b54e:	000e      	movs	r6, r1
 800b550:	9001      	str	r0, [sp, #4]
 800b552:	000c      	movs	r4, r1
 800b554:	001d      	movs	r5, r3
 800b556:	2000      	movs	r0, #0
 800b558:	690f      	ldr	r7, [r1, #16]
 800b55a:	3614      	adds	r6, #20
 800b55c:	6833      	ldr	r3, [r6, #0]
 800b55e:	3001      	adds	r0, #1
 800b560:	b299      	uxth	r1, r3
 800b562:	4351      	muls	r1, r2
 800b564:	0c1b      	lsrs	r3, r3, #16
 800b566:	4353      	muls	r3, r2
 800b568:	1949      	adds	r1, r1, r5
 800b56a:	0c0d      	lsrs	r5, r1, #16
 800b56c:	195b      	adds	r3, r3, r5
 800b56e:	0c1d      	lsrs	r5, r3, #16
 800b570:	b289      	uxth	r1, r1
 800b572:	041b      	lsls	r3, r3, #16
 800b574:	185b      	adds	r3, r3, r1
 800b576:	c608      	stmia	r6!, {r3}
 800b578:	4287      	cmp	r7, r0
 800b57a:	dcef      	bgt.n	800b55c <__multadd+0x10>
 800b57c:	2d00      	cmp	r5, #0
 800b57e:	d022      	beq.n	800b5c6 <__multadd+0x7a>
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	42bb      	cmp	r3, r7
 800b584:	dc19      	bgt.n	800b5ba <__multadd+0x6e>
 800b586:	6861      	ldr	r1, [r4, #4]
 800b588:	9801      	ldr	r0, [sp, #4]
 800b58a:	3101      	adds	r1, #1
 800b58c:	f7ff ff76 	bl	800b47c <_Balloc>
 800b590:	1e06      	subs	r6, r0, #0
 800b592:	d105      	bne.n	800b5a0 <__multadd+0x54>
 800b594:	0032      	movs	r2, r6
 800b596:	21ba      	movs	r1, #186	; 0xba
 800b598:	4b0c      	ldr	r3, [pc, #48]	; (800b5cc <__multadd+0x80>)
 800b59a:	480d      	ldr	r0, [pc, #52]	; (800b5d0 <__multadd+0x84>)
 800b59c:	f7fe ff98 	bl	800a4d0 <__assert_func>
 800b5a0:	0021      	movs	r1, r4
 800b5a2:	6922      	ldr	r2, [r4, #16]
 800b5a4:	310c      	adds	r1, #12
 800b5a6:	3202      	adds	r2, #2
 800b5a8:	0092      	lsls	r2, r2, #2
 800b5aa:	300c      	adds	r0, #12
 800b5ac:	f7fe ff86 	bl	800a4bc <memcpy>
 800b5b0:	0021      	movs	r1, r4
 800b5b2:	9801      	ldr	r0, [sp, #4]
 800b5b4:	f7ff ffa6 	bl	800b504 <_Bfree>
 800b5b8:	0034      	movs	r4, r6
 800b5ba:	1d3b      	adds	r3, r7, #4
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	18e3      	adds	r3, r4, r3
 800b5c0:	605d      	str	r5, [r3, #4]
 800b5c2:	1c7b      	adds	r3, r7, #1
 800b5c4:	6123      	str	r3, [r4, #16]
 800b5c6:	0020      	movs	r0, r4
 800b5c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5ca:	46c0      	nop			; (mov r8, r8)
 800b5cc:	0800c8c6 	.word	0x0800c8c6
 800b5d0:	0800c8d7 	.word	0x0800c8d7

0800b5d4 <__hi0bits>:
 800b5d4:	0003      	movs	r3, r0
 800b5d6:	0c02      	lsrs	r2, r0, #16
 800b5d8:	2000      	movs	r0, #0
 800b5da:	4282      	cmp	r2, r0
 800b5dc:	d101      	bne.n	800b5e2 <__hi0bits+0xe>
 800b5de:	041b      	lsls	r3, r3, #16
 800b5e0:	3010      	adds	r0, #16
 800b5e2:	0e1a      	lsrs	r2, r3, #24
 800b5e4:	d101      	bne.n	800b5ea <__hi0bits+0x16>
 800b5e6:	3008      	adds	r0, #8
 800b5e8:	021b      	lsls	r3, r3, #8
 800b5ea:	0f1a      	lsrs	r2, r3, #28
 800b5ec:	d101      	bne.n	800b5f2 <__hi0bits+0x1e>
 800b5ee:	3004      	adds	r0, #4
 800b5f0:	011b      	lsls	r3, r3, #4
 800b5f2:	0f9a      	lsrs	r2, r3, #30
 800b5f4:	d101      	bne.n	800b5fa <__hi0bits+0x26>
 800b5f6:	3002      	adds	r0, #2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	db03      	blt.n	800b606 <__hi0bits+0x32>
 800b5fe:	3001      	adds	r0, #1
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	d400      	bmi.n	800b606 <__hi0bits+0x32>
 800b604:	2020      	movs	r0, #32
 800b606:	4770      	bx	lr

0800b608 <__lo0bits>:
 800b608:	6803      	ldr	r3, [r0, #0]
 800b60a:	0001      	movs	r1, r0
 800b60c:	2207      	movs	r2, #7
 800b60e:	0018      	movs	r0, r3
 800b610:	4010      	ands	r0, r2
 800b612:	4213      	tst	r3, r2
 800b614:	d00d      	beq.n	800b632 <__lo0bits+0x2a>
 800b616:	3a06      	subs	r2, #6
 800b618:	2000      	movs	r0, #0
 800b61a:	4213      	tst	r3, r2
 800b61c:	d105      	bne.n	800b62a <__lo0bits+0x22>
 800b61e:	3002      	adds	r0, #2
 800b620:	4203      	tst	r3, r0
 800b622:	d003      	beq.n	800b62c <__lo0bits+0x24>
 800b624:	40d3      	lsrs	r3, r2
 800b626:	0010      	movs	r0, r2
 800b628:	600b      	str	r3, [r1, #0]
 800b62a:	4770      	bx	lr
 800b62c:	089b      	lsrs	r3, r3, #2
 800b62e:	600b      	str	r3, [r1, #0]
 800b630:	e7fb      	b.n	800b62a <__lo0bits+0x22>
 800b632:	b29a      	uxth	r2, r3
 800b634:	2a00      	cmp	r2, #0
 800b636:	d101      	bne.n	800b63c <__lo0bits+0x34>
 800b638:	2010      	movs	r0, #16
 800b63a:	0c1b      	lsrs	r3, r3, #16
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	2a00      	cmp	r2, #0
 800b640:	d101      	bne.n	800b646 <__lo0bits+0x3e>
 800b642:	3008      	adds	r0, #8
 800b644:	0a1b      	lsrs	r3, r3, #8
 800b646:	071a      	lsls	r2, r3, #28
 800b648:	d101      	bne.n	800b64e <__lo0bits+0x46>
 800b64a:	3004      	adds	r0, #4
 800b64c:	091b      	lsrs	r3, r3, #4
 800b64e:	079a      	lsls	r2, r3, #30
 800b650:	d101      	bne.n	800b656 <__lo0bits+0x4e>
 800b652:	3002      	adds	r0, #2
 800b654:	089b      	lsrs	r3, r3, #2
 800b656:	07da      	lsls	r2, r3, #31
 800b658:	d4e9      	bmi.n	800b62e <__lo0bits+0x26>
 800b65a:	3001      	adds	r0, #1
 800b65c:	085b      	lsrs	r3, r3, #1
 800b65e:	d1e6      	bne.n	800b62e <__lo0bits+0x26>
 800b660:	2020      	movs	r0, #32
 800b662:	e7e2      	b.n	800b62a <__lo0bits+0x22>

0800b664 <__i2b>:
 800b664:	b510      	push	{r4, lr}
 800b666:	000c      	movs	r4, r1
 800b668:	2101      	movs	r1, #1
 800b66a:	f7ff ff07 	bl	800b47c <_Balloc>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d107      	bne.n	800b682 <__i2b+0x1e>
 800b672:	2146      	movs	r1, #70	; 0x46
 800b674:	4c05      	ldr	r4, [pc, #20]	; (800b68c <__i2b+0x28>)
 800b676:	0002      	movs	r2, r0
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <__i2b+0x2c>)
 800b67a:	0020      	movs	r0, r4
 800b67c:	31ff      	adds	r1, #255	; 0xff
 800b67e:	f7fe ff27 	bl	800a4d0 <__assert_func>
 800b682:	2301      	movs	r3, #1
 800b684:	6144      	str	r4, [r0, #20]
 800b686:	6103      	str	r3, [r0, #16]
 800b688:	bd10      	pop	{r4, pc}
 800b68a:	46c0      	nop			; (mov r8, r8)
 800b68c:	0800c8d7 	.word	0x0800c8d7
 800b690:	0800c8c6 	.word	0x0800c8c6

0800b694 <__multiply>:
 800b694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b696:	0015      	movs	r5, r2
 800b698:	690a      	ldr	r2, [r1, #16]
 800b69a:	692b      	ldr	r3, [r5, #16]
 800b69c:	000c      	movs	r4, r1
 800b69e:	b08b      	sub	sp, #44	; 0x2c
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	da01      	bge.n	800b6a8 <__multiply+0x14>
 800b6a4:	002c      	movs	r4, r5
 800b6a6:	000d      	movs	r5, r1
 800b6a8:	6927      	ldr	r7, [r4, #16]
 800b6aa:	692e      	ldr	r6, [r5, #16]
 800b6ac:	6861      	ldr	r1, [r4, #4]
 800b6ae:	19bb      	adds	r3, r7, r6
 800b6b0:	9303      	str	r3, [sp, #12]
 800b6b2:	68a3      	ldr	r3, [r4, #8]
 800b6b4:	19ba      	adds	r2, r7, r6
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	da00      	bge.n	800b6bc <__multiply+0x28>
 800b6ba:	3101      	adds	r1, #1
 800b6bc:	f7ff fede 	bl	800b47c <_Balloc>
 800b6c0:	9002      	str	r0, [sp, #8]
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d106      	bne.n	800b6d4 <__multiply+0x40>
 800b6c6:	21b1      	movs	r1, #177	; 0xb1
 800b6c8:	4b48      	ldr	r3, [pc, #288]	; (800b7ec <__multiply+0x158>)
 800b6ca:	4849      	ldr	r0, [pc, #292]	; (800b7f0 <__multiply+0x15c>)
 800b6cc:	9a02      	ldr	r2, [sp, #8]
 800b6ce:	0049      	lsls	r1, r1, #1
 800b6d0:	f7fe fefe 	bl	800a4d0 <__assert_func>
 800b6d4:	9b02      	ldr	r3, [sp, #8]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	3314      	adds	r3, #20
 800b6da:	469c      	mov	ip, r3
 800b6dc:	19bb      	adds	r3, r7, r6
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4463      	add	r3, ip
 800b6e2:	9304      	str	r3, [sp, #16]
 800b6e4:	4663      	mov	r3, ip
 800b6e6:	9904      	ldr	r1, [sp, #16]
 800b6e8:	428b      	cmp	r3, r1
 800b6ea:	d32a      	bcc.n	800b742 <__multiply+0xae>
 800b6ec:	0023      	movs	r3, r4
 800b6ee:	00bf      	lsls	r7, r7, #2
 800b6f0:	3314      	adds	r3, #20
 800b6f2:	3514      	adds	r5, #20
 800b6f4:	9308      	str	r3, [sp, #32]
 800b6f6:	00b6      	lsls	r6, r6, #2
 800b6f8:	19db      	adds	r3, r3, r7
 800b6fa:	9305      	str	r3, [sp, #20]
 800b6fc:	19ab      	adds	r3, r5, r6
 800b6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b700:	2304      	movs	r3, #4
 800b702:	9306      	str	r3, [sp, #24]
 800b704:	0023      	movs	r3, r4
 800b706:	9a05      	ldr	r2, [sp, #20]
 800b708:	3315      	adds	r3, #21
 800b70a:	9501      	str	r5, [sp, #4]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d305      	bcc.n	800b71c <__multiply+0x88>
 800b710:	1b13      	subs	r3, r2, r4
 800b712:	3b15      	subs	r3, #21
 800b714:	089b      	lsrs	r3, r3, #2
 800b716:	3301      	adds	r3, #1
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	9306      	str	r3, [sp, #24]
 800b71c:	9b01      	ldr	r3, [sp, #4]
 800b71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b720:	4293      	cmp	r3, r2
 800b722:	d310      	bcc.n	800b746 <__multiply+0xb2>
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	dd05      	ble.n	800b736 <__multiply+0xa2>
 800b72a:	9b04      	ldr	r3, [sp, #16]
 800b72c:	3b04      	subs	r3, #4
 800b72e:	9304      	str	r3, [sp, #16]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d056      	beq.n	800b7e4 <__multiply+0x150>
 800b736:	9b02      	ldr	r3, [sp, #8]
 800b738:	9a03      	ldr	r2, [sp, #12]
 800b73a:	0018      	movs	r0, r3
 800b73c:	611a      	str	r2, [r3, #16]
 800b73e:	b00b      	add	sp, #44	; 0x2c
 800b740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b742:	c304      	stmia	r3!, {r2}
 800b744:	e7cf      	b.n	800b6e6 <__multiply+0x52>
 800b746:	9b01      	ldr	r3, [sp, #4]
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	b280      	uxth	r0, r0
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d01e      	beq.n	800b78e <__multiply+0xfa>
 800b750:	4667      	mov	r7, ip
 800b752:	2500      	movs	r5, #0
 800b754:	9e08      	ldr	r6, [sp, #32]
 800b756:	ce02      	ldmia	r6!, {r1}
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	9307      	str	r3, [sp, #28]
 800b75c:	b28b      	uxth	r3, r1
 800b75e:	4343      	muls	r3, r0
 800b760:	001a      	movs	r2, r3
 800b762:	466b      	mov	r3, sp
 800b764:	8b9b      	ldrh	r3, [r3, #28]
 800b766:	18d3      	adds	r3, r2, r3
 800b768:	195b      	adds	r3, r3, r5
 800b76a:	0c0d      	lsrs	r5, r1, #16
 800b76c:	4345      	muls	r5, r0
 800b76e:	9a07      	ldr	r2, [sp, #28]
 800b770:	0c11      	lsrs	r1, r2, #16
 800b772:	1869      	adds	r1, r5, r1
 800b774:	0c1a      	lsrs	r2, r3, #16
 800b776:	188a      	adds	r2, r1, r2
 800b778:	b29b      	uxth	r3, r3
 800b77a:	0c15      	lsrs	r5, r2, #16
 800b77c:	0412      	lsls	r2, r2, #16
 800b77e:	431a      	orrs	r2, r3
 800b780:	9b05      	ldr	r3, [sp, #20]
 800b782:	c704      	stmia	r7!, {r2}
 800b784:	42b3      	cmp	r3, r6
 800b786:	d8e6      	bhi.n	800b756 <__multiply+0xc2>
 800b788:	4663      	mov	r3, ip
 800b78a:	9a06      	ldr	r2, [sp, #24]
 800b78c:	509d      	str	r5, [r3, r2]
 800b78e:	9b01      	ldr	r3, [sp, #4]
 800b790:	6818      	ldr	r0, [r3, #0]
 800b792:	0c00      	lsrs	r0, r0, #16
 800b794:	d020      	beq.n	800b7d8 <__multiply+0x144>
 800b796:	4663      	mov	r3, ip
 800b798:	0025      	movs	r5, r4
 800b79a:	4661      	mov	r1, ip
 800b79c:	2700      	movs	r7, #0
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3514      	adds	r5, #20
 800b7a2:	682a      	ldr	r2, [r5, #0]
 800b7a4:	680e      	ldr	r6, [r1, #0]
 800b7a6:	b292      	uxth	r2, r2
 800b7a8:	4342      	muls	r2, r0
 800b7aa:	0c36      	lsrs	r6, r6, #16
 800b7ac:	1992      	adds	r2, r2, r6
 800b7ae:	19d2      	adds	r2, r2, r7
 800b7b0:	0416      	lsls	r6, r2, #16
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	431e      	orrs	r6, r3
 800b7b6:	600e      	str	r6, [r1, #0]
 800b7b8:	cd40      	ldmia	r5!, {r6}
 800b7ba:	684b      	ldr	r3, [r1, #4]
 800b7bc:	0c36      	lsrs	r6, r6, #16
 800b7be:	4346      	muls	r6, r0
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	0c12      	lsrs	r2, r2, #16
 800b7c4:	18f3      	adds	r3, r6, r3
 800b7c6:	189b      	adds	r3, r3, r2
 800b7c8:	9a05      	ldr	r2, [sp, #20]
 800b7ca:	0c1f      	lsrs	r7, r3, #16
 800b7cc:	3104      	adds	r1, #4
 800b7ce:	42aa      	cmp	r2, r5
 800b7d0:	d8e7      	bhi.n	800b7a2 <__multiply+0x10e>
 800b7d2:	4662      	mov	r2, ip
 800b7d4:	9906      	ldr	r1, [sp, #24]
 800b7d6:	5053      	str	r3, [r2, r1]
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	3304      	adds	r3, #4
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	2304      	movs	r3, #4
 800b7e0:	449c      	add	ip, r3
 800b7e2:	e79b      	b.n	800b71c <__multiply+0x88>
 800b7e4:	9b03      	ldr	r3, [sp, #12]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	9303      	str	r3, [sp, #12]
 800b7ea:	e79b      	b.n	800b724 <__multiply+0x90>
 800b7ec:	0800c8c6 	.word	0x0800c8c6
 800b7f0:	0800c8d7 	.word	0x0800c8d7

0800b7f4 <__pow5mult>:
 800b7f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	0015      	movs	r5, r2
 800b7fa:	0007      	movs	r7, r0
 800b7fc:	000e      	movs	r6, r1
 800b7fe:	401a      	ands	r2, r3
 800b800:	421d      	tst	r5, r3
 800b802:	d008      	beq.n	800b816 <__pow5mult+0x22>
 800b804:	4925      	ldr	r1, [pc, #148]	; (800b89c <__pow5mult+0xa8>)
 800b806:	3a01      	subs	r2, #1
 800b808:	0092      	lsls	r2, r2, #2
 800b80a:	5852      	ldr	r2, [r2, r1]
 800b80c:	2300      	movs	r3, #0
 800b80e:	0031      	movs	r1, r6
 800b810:	f7ff fe9c 	bl	800b54c <__multadd>
 800b814:	0006      	movs	r6, r0
 800b816:	10ad      	asrs	r5, r5, #2
 800b818:	d03d      	beq.n	800b896 <__pow5mult+0xa2>
 800b81a:	69fc      	ldr	r4, [r7, #28]
 800b81c:	2c00      	cmp	r4, #0
 800b81e:	d10f      	bne.n	800b840 <__pow5mult+0x4c>
 800b820:	2010      	movs	r0, #16
 800b822:	f7ff fd5b 	bl	800b2dc <malloc>
 800b826:	1e02      	subs	r2, r0, #0
 800b828:	61f8      	str	r0, [r7, #28]
 800b82a:	d105      	bne.n	800b838 <__pow5mult+0x44>
 800b82c:	21b4      	movs	r1, #180	; 0xb4
 800b82e:	4b1c      	ldr	r3, [pc, #112]	; (800b8a0 <__pow5mult+0xac>)
 800b830:	481c      	ldr	r0, [pc, #112]	; (800b8a4 <__pow5mult+0xb0>)
 800b832:	31ff      	adds	r1, #255	; 0xff
 800b834:	f7fe fe4c 	bl	800a4d0 <__assert_func>
 800b838:	6044      	str	r4, [r0, #4]
 800b83a:	6084      	str	r4, [r0, #8]
 800b83c:	6004      	str	r4, [r0, #0]
 800b83e:	60c4      	str	r4, [r0, #12]
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	689c      	ldr	r4, [r3, #8]
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	2c00      	cmp	r4, #0
 800b848:	d108      	bne.n	800b85c <__pow5mult+0x68>
 800b84a:	0038      	movs	r0, r7
 800b84c:	4916      	ldr	r1, [pc, #88]	; (800b8a8 <__pow5mult+0xb4>)
 800b84e:	f7ff ff09 	bl	800b664 <__i2b>
 800b852:	9b01      	ldr	r3, [sp, #4]
 800b854:	0004      	movs	r4, r0
 800b856:	6098      	str	r0, [r3, #8]
 800b858:	2300      	movs	r3, #0
 800b85a:	6003      	str	r3, [r0, #0]
 800b85c:	2301      	movs	r3, #1
 800b85e:	421d      	tst	r5, r3
 800b860:	d00a      	beq.n	800b878 <__pow5mult+0x84>
 800b862:	0031      	movs	r1, r6
 800b864:	0022      	movs	r2, r4
 800b866:	0038      	movs	r0, r7
 800b868:	f7ff ff14 	bl	800b694 <__multiply>
 800b86c:	0031      	movs	r1, r6
 800b86e:	9001      	str	r0, [sp, #4]
 800b870:	0038      	movs	r0, r7
 800b872:	f7ff fe47 	bl	800b504 <_Bfree>
 800b876:	9e01      	ldr	r6, [sp, #4]
 800b878:	106d      	asrs	r5, r5, #1
 800b87a:	d00c      	beq.n	800b896 <__pow5mult+0xa2>
 800b87c:	6820      	ldr	r0, [r4, #0]
 800b87e:	2800      	cmp	r0, #0
 800b880:	d107      	bne.n	800b892 <__pow5mult+0x9e>
 800b882:	0022      	movs	r2, r4
 800b884:	0021      	movs	r1, r4
 800b886:	0038      	movs	r0, r7
 800b888:	f7ff ff04 	bl	800b694 <__multiply>
 800b88c:	2300      	movs	r3, #0
 800b88e:	6020      	str	r0, [r4, #0]
 800b890:	6003      	str	r3, [r0, #0]
 800b892:	0004      	movs	r4, r0
 800b894:	e7e2      	b.n	800b85c <__pow5mult+0x68>
 800b896:	0030      	movs	r0, r6
 800b898:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b89a:	46c0      	nop			; (mov r8, r8)
 800b89c:	0800ca20 	.word	0x0800ca20
 800b8a0:	0800c857 	.word	0x0800c857
 800b8a4:	0800c8d7 	.word	0x0800c8d7
 800b8a8:	00000271 	.word	0x00000271

0800b8ac <__lshift>:
 800b8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ae:	000c      	movs	r4, r1
 800b8b0:	0017      	movs	r7, r2
 800b8b2:	6923      	ldr	r3, [r4, #16]
 800b8b4:	1155      	asrs	r5, r2, #5
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	18eb      	adds	r3, r5, r3
 800b8ba:	9302      	str	r3, [sp, #8]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	9301      	str	r3, [sp, #4]
 800b8c0:	6849      	ldr	r1, [r1, #4]
 800b8c2:	68a3      	ldr	r3, [r4, #8]
 800b8c4:	9004      	str	r0, [sp, #16]
 800b8c6:	9a01      	ldr	r2, [sp, #4]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	db10      	blt.n	800b8ee <__lshift+0x42>
 800b8cc:	9804      	ldr	r0, [sp, #16]
 800b8ce:	f7ff fdd5 	bl	800b47c <_Balloc>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	0002      	movs	r2, r0
 800b8d6:	0006      	movs	r6, r0
 800b8d8:	0019      	movs	r1, r3
 800b8da:	3214      	adds	r2, #20
 800b8dc:	4298      	cmp	r0, r3
 800b8de:	d10c      	bne.n	800b8fa <__lshift+0x4e>
 800b8e0:	31df      	adds	r1, #223	; 0xdf
 800b8e2:	0032      	movs	r2, r6
 800b8e4:	4b26      	ldr	r3, [pc, #152]	; (800b980 <__lshift+0xd4>)
 800b8e6:	4827      	ldr	r0, [pc, #156]	; (800b984 <__lshift+0xd8>)
 800b8e8:	31ff      	adds	r1, #255	; 0xff
 800b8ea:	f7fe fdf1 	bl	800a4d0 <__assert_func>
 800b8ee:	3101      	adds	r1, #1
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	e7e8      	b.n	800b8c6 <__lshift+0x1a>
 800b8f4:	0098      	lsls	r0, r3, #2
 800b8f6:	5011      	str	r1, [r2, r0]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	42ab      	cmp	r3, r5
 800b8fc:	dbfa      	blt.n	800b8f4 <__lshift+0x48>
 800b8fe:	43eb      	mvns	r3, r5
 800b900:	17db      	asrs	r3, r3, #31
 800b902:	401d      	ands	r5, r3
 800b904:	211f      	movs	r1, #31
 800b906:	0023      	movs	r3, r4
 800b908:	0038      	movs	r0, r7
 800b90a:	00ad      	lsls	r5, r5, #2
 800b90c:	1955      	adds	r5, r2, r5
 800b90e:	6922      	ldr	r2, [r4, #16]
 800b910:	3314      	adds	r3, #20
 800b912:	0092      	lsls	r2, r2, #2
 800b914:	4008      	ands	r0, r1
 800b916:	4684      	mov	ip, r0
 800b918:	189a      	adds	r2, r3, r2
 800b91a:	420f      	tst	r7, r1
 800b91c:	d02a      	beq.n	800b974 <__lshift+0xc8>
 800b91e:	3101      	adds	r1, #1
 800b920:	1a09      	subs	r1, r1, r0
 800b922:	9105      	str	r1, [sp, #20]
 800b924:	2100      	movs	r1, #0
 800b926:	9503      	str	r5, [sp, #12]
 800b928:	4667      	mov	r7, ip
 800b92a:	6818      	ldr	r0, [r3, #0]
 800b92c:	40b8      	lsls	r0, r7
 800b92e:	4308      	orrs	r0, r1
 800b930:	9903      	ldr	r1, [sp, #12]
 800b932:	c101      	stmia	r1!, {r0}
 800b934:	9103      	str	r1, [sp, #12]
 800b936:	9805      	ldr	r0, [sp, #20]
 800b938:	cb02      	ldmia	r3!, {r1}
 800b93a:	40c1      	lsrs	r1, r0
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d8f3      	bhi.n	800b928 <__lshift+0x7c>
 800b940:	0020      	movs	r0, r4
 800b942:	3015      	adds	r0, #21
 800b944:	2304      	movs	r3, #4
 800b946:	4282      	cmp	r2, r0
 800b948:	d304      	bcc.n	800b954 <__lshift+0xa8>
 800b94a:	1b13      	subs	r3, r2, r4
 800b94c:	3b15      	subs	r3, #21
 800b94e:	089b      	lsrs	r3, r3, #2
 800b950:	3301      	adds	r3, #1
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	50e9      	str	r1, [r5, r3]
 800b956:	2900      	cmp	r1, #0
 800b958:	d002      	beq.n	800b960 <__lshift+0xb4>
 800b95a:	9b02      	ldr	r3, [sp, #8]
 800b95c:	3302      	adds	r3, #2
 800b95e:	9301      	str	r3, [sp, #4]
 800b960:	9b01      	ldr	r3, [sp, #4]
 800b962:	9804      	ldr	r0, [sp, #16]
 800b964:	3b01      	subs	r3, #1
 800b966:	0021      	movs	r1, r4
 800b968:	6133      	str	r3, [r6, #16]
 800b96a:	f7ff fdcb 	bl	800b504 <_Bfree>
 800b96e:	0030      	movs	r0, r6
 800b970:	b007      	add	sp, #28
 800b972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b974:	cb02      	ldmia	r3!, {r1}
 800b976:	c502      	stmia	r5!, {r1}
 800b978:	429a      	cmp	r2, r3
 800b97a:	d8fb      	bhi.n	800b974 <__lshift+0xc8>
 800b97c:	e7f0      	b.n	800b960 <__lshift+0xb4>
 800b97e:	46c0      	nop			; (mov r8, r8)
 800b980:	0800c8c6 	.word	0x0800c8c6
 800b984:	0800c8d7 	.word	0x0800c8d7

0800b988 <__mcmp>:
 800b988:	b530      	push	{r4, r5, lr}
 800b98a:	690b      	ldr	r3, [r1, #16]
 800b98c:	6904      	ldr	r4, [r0, #16]
 800b98e:	0002      	movs	r2, r0
 800b990:	1ae0      	subs	r0, r4, r3
 800b992:	429c      	cmp	r4, r3
 800b994:	d10e      	bne.n	800b9b4 <__mcmp+0x2c>
 800b996:	3214      	adds	r2, #20
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	3114      	adds	r1, #20
 800b99c:	0014      	movs	r4, r2
 800b99e:	18c9      	adds	r1, r1, r3
 800b9a0:	18d2      	adds	r2, r2, r3
 800b9a2:	3a04      	subs	r2, #4
 800b9a4:	3904      	subs	r1, #4
 800b9a6:	6815      	ldr	r5, [r2, #0]
 800b9a8:	680b      	ldr	r3, [r1, #0]
 800b9aa:	429d      	cmp	r5, r3
 800b9ac:	d003      	beq.n	800b9b6 <__mcmp+0x2e>
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	429d      	cmp	r5, r3
 800b9b2:	d303      	bcc.n	800b9bc <__mcmp+0x34>
 800b9b4:	bd30      	pop	{r4, r5, pc}
 800b9b6:	4294      	cmp	r4, r2
 800b9b8:	d3f3      	bcc.n	800b9a2 <__mcmp+0x1a>
 800b9ba:	e7fb      	b.n	800b9b4 <__mcmp+0x2c>
 800b9bc:	4240      	negs	r0, r0
 800b9be:	e7f9      	b.n	800b9b4 <__mcmp+0x2c>

0800b9c0 <__mdiff>:
 800b9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9c2:	000e      	movs	r6, r1
 800b9c4:	0007      	movs	r7, r0
 800b9c6:	0011      	movs	r1, r2
 800b9c8:	0030      	movs	r0, r6
 800b9ca:	b087      	sub	sp, #28
 800b9cc:	0014      	movs	r4, r2
 800b9ce:	f7ff ffdb 	bl	800b988 <__mcmp>
 800b9d2:	1e05      	subs	r5, r0, #0
 800b9d4:	d110      	bne.n	800b9f8 <__mdiff+0x38>
 800b9d6:	0001      	movs	r1, r0
 800b9d8:	0038      	movs	r0, r7
 800b9da:	f7ff fd4f 	bl	800b47c <_Balloc>
 800b9de:	1e02      	subs	r2, r0, #0
 800b9e0:	d104      	bne.n	800b9ec <__mdiff+0x2c>
 800b9e2:	4b3f      	ldr	r3, [pc, #252]	; (800bae0 <__mdiff+0x120>)
 800b9e4:	483f      	ldr	r0, [pc, #252]	; (800bae4 <__mdiff+0x124>)
 800b9e6:	4940      	ldr	r1, [pc, #256]	; (800bae8 <__mdiff+0x128>)
 800b9e8:	f7fe fd72 	bl	800a4d0 <__assert_func>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	6145      	str	r5, [r0, #20]
 800b9f0:	6103      	str	r3, [r0, #16]
 800b9f2:	0010      	movs	r0, r2
 800b9f4:	b007      	add	sp, #28
 800b9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	9301      	str	r3, [sp, #4]
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	db04      	blt.n	800ba0a <__mdiff+0x4a>
 800ba00:	0023      	movs	r3, r4
 800ba02:	0034      	movs	r4, r6
 800ba04:	001e      	movs	r6, r3
 800ba06:	2300      	movs	r3, #0
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	0038      	movs	r0, r7
 800ba0c:	6861      	ldr	r1, [r4, #4]
 800ba0e:	f7ff fd35 	bl	800b47c <_Balloc>
 800ba12:	1e02      	subs	r2, r0, #0
 800ba14:	d103      	bne.n	800ba1e <__mdiff+0x5e>
 800ba16:	4b32      	ldr	r3, [pc, #200]	; (800bae0 <__mdiff+0x120>)
 800ba18:	4832      	ldr	r0, [pc, #200]	; (800bae4 <__mdiff+0x124>)
 800ba1a:	4934      	ldr	r1, [pc, #208]	; (800baec <__mdiff+0x12c>)
 800ba1c:	e7e4      	b.n	800b9e8 <__mdiff+0x28>
 800ba1e:	9b01      	ldr	r3, [sp, #4]
 800ba20:	2700      	movs	r7, #0
 800ba22:	60c3      	str	r3, [r0, #12]
 800ba24:	6920      	ldr	r0, [r4, #16]
 800ba26:	3414      	adds	r4, #20
 800ba28:	0083      	lsls	r3, r0, #2
 800ba2a:	18e3      	adds	r3, r4, r3
 800ba2c:	0021      	movs	r1, r4
 800ba2e:	9401      	str	r4, [sp, #4]
 800ba30:	0034      	movs	r4, r6
 800ba32:	9302      	str	r3, [sp, #8]
 800ba34:	6933      	ldr	r3, [r6, #16]
 800ba36:	3414      	adds	r4, #20
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	18e3      	adds	r3, r4, r3
 800ba3c:	9303      	str	r3, [sp, #12]
 800ba3e:	0013      	movs	r3, r2
 800ba40:	3314      	adds	r3, #20
 800ba42:	469c      	mov	ip, r3
 800ba44:	9305      	str	r3, [sp, #20]
 800ba46:	9104      	str	r1, [sp, #16]
 800ba48:	9b04      	ldr	r3, [sp, #16]
 800ba4a:	cc02      	ldmia	r4!, {r1}
 800ba4c:	cb20      	ldmia	r3!, {r5}
 800ba4e:	9304      	str	r3, [sp, #16]
 800ba50:	b2ab      	uxth	r3, r5
 800ba52:	19df      	adds	r7, r3, r7
 800ba54:	b28b      	uxth	r3, r1
 800ba56:	1afb      	subs	r3, r7, r3
 800ba58:	0c09      	lsrs	r1, r1, #16
 800ba5a:	0c2d      	lsrs	r5, r5, #16
 800ba5c:	1a6d      	subs	r5, r5, r1
 800ba5e:	1419      	asrs	r1, r3, #16
 800ba60:	1869      	adds	r1, r5, r1
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	140f      	asrs	r7, r1, #16
 800ba66:	0409      	lsls	r1, r1, #16
 800ba68:	4319      	orrs	r1, r3
 800ba6a:	4663      	mov	r3, ip
 800ba6c:	c302      	stmia	r3!, {r1}
 800ba6e:	469c      	mov	ip, r3
 800ba70:	9b03      	ldr	r3, [sp, #12]
 800ba72:	42a3      	cmp	r3, r4
 800ba74:	d8e8      	bhi.n	800ba48 <__mdiff+0x88>
 800ba76:	0031      	movs	r1, r6
 800ba78:	9c03      	ldr	r4, [sp, #12]
 800ba7a:	3115      	adds	r1, #21
 800ba7c:	2304      	movs	r3, #4
 800ba7e:	428c      	cmp	r4, r1
 800ba80:	d304      	bcc.n	800ba8c <__mdiff+0xcc>
 800ba82:	1ba3      	subs	r3, r4, r6
 800ba84:	3b15      	subs	r3, #21
 800ba86:	089b      	lsrs	r3, r3, #2
 800ba88:	3301      	adds	r3, #1
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	9901      	ldr	r1, [sp, #4]
 800ba8e:	18cd      	adds	r5, r1, r3
 800ba90:	9905      	ldr	r1, [sp, #20]
 800ba92:	002e      	movs	r6, r5
 800ba94:	18cb      	adds	r3, r1, r3
 800ba96:	469c      	mov	ip, r3
 800ba98:	9902      	ldr	r1, [sp, #8]
 800ba9a:	428e      	cmp	r6, r1
 800ba9c:	d310      	bcc.n	800bac0 <__mdiff+0x100>
 800ba9e:	9e02      	ldr	r6, [sp, #8]
 800baa0:	1ee9      	subs	r1, r5, #3
 800baa2:	2400      	movs	r4, #0
 800baa4:	428e      	cmp	r6, r1
 800baa6:	d304      	bcc.n	800bab2 <__mdiff+0xf2>
 800baa8:	0031      	movs	r1, r6
 800baaa:	3103      	adds	r1, #3
 800baac:	1b49      	subs	r1, r1, r5
 800baae:	0889      	lsrs	r1, r1, #2
 800bab0:	008c      	lsls	r4, r1, #2
 800bab2:	191b      	adds	r3, r3, r4
 800bab4:	3b04      	subs	r3, #4
 800bab6:	6819      	ldr	r1, [r3, #0]
 800bab8:	2900      	cmp	r1, #0
 800baba:	d00f      	beq.n	800badc <__mdiff+0x11c>
 800babc:	6110      	str	r0, [r2, #16]
 800babe:	e798      	b.n	800b9f2 <__mdiff+0x32>
 800bac0:	ce02      	ldmia	r6!, {r1}
 800bac2:	b28c      	uxth	r4, r1
 800bac4:	19e4      	adds	r4, r4, r7
 800bac6:	0c0f      	lsrs	r7, r1, #16
 800bac8:	1421      	asrs	r1, r4, #16
 800baca:	1879      	adds	r1, r7, r1
 800bacc:	b2a4      	uxth	r4, r4
 800bace:	140f      	asrs	r7, r1, #16
 800bad0:	0409      	lsls	r1, r1, #16
 800bad2:	4321      	orrs	r1, r4
 800bad4:	4664      	mov	r4, ip
 800bad6:	c402      	stmia	r4!, {r1}
 800bad8:	46a4      	mov	ip, r4
 800bada:	e7dd      	b.n	800ba98 <__mdiff+0xd8>
 800badc:	3801      	subs	r0, #1
 800bade:	e7e9      	b.n	800bab4 <__mdiff+0xf4>
 800bae0:	0800c8c6 	.word	0x0800c8c6
 800bae4:	0800c8d7 	.word	0x0800c8d7
 800bae8:	00000237 	.word	0x00000237
 800baec:	00000245 	.word	0x00000245

0800baf0 <__d2b>:
 800baf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baf2:	2101      	movs	r1, #1
 800baf4:	0014      	movs	r4, r2
 800baf6:	001d      	movs	r5, r3
 800baf8:	9f08      	ldr	r7, [sp, #32]
 800bafa:	f7ff fcbf 	bl	800b47c <_Balloc>
 800bafe:	1e06      	subs	r6, r0, #0
 800bb00:	d105      	bne.n	800bb0e <__d2b+0x1e>
 800bb02:	0032      	movs	r2, r6
 800bb04:	4b24      	ldr	r3, [pc, #144]	; (800bb98 <__d2b+0xa8>)
 800bb06:	4825      	ldr	r0, [pc, #148]	; (800bb9c <__d2b+0xac>)
 800bb08:	4925      	ldr	r1, [pc, #148]	; (800bba0 <__d2b+0xb0>)
 800bb0a:	f7fe fce1 	bl	800a4d0 <__assert_func>
 800bb0e:	032b      	lsls	r3, r5, #12
 800bb10:	006d      	lsls	r5, r5, #1
 800bb12:	0b1b      	lsrs	r3, r3, #12
 800bb14:	0d6d      	lsrs	r5, r5, #21
 800bb16:	d125      	bne.n	800bb64 <__d2b+0x74>
 800bb18:	9301      	str	r3, [sp, #4]
 800bb1a:	2c00      	cmp	r4, #0
 800bb1c:	d028      	beq.n	800bb70 <__d2b+0x80>
 800bb1e:	4668      	mov	r0, sp
 800bb20:	9400      	str	r4, [sp, #0]
 800bb22:	f7ff fd71 	bl	800b608 <__lo0bits>
 800bb26:	9b01      	ldr	r3, [sp, #4]
 800bb28:	9900      	ldr	r1, [sp, #0]
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d01e      	beq.n	800bb6c <__d2b+0x7c>
 800bb2e:	2220      	movs	r2, #32
 800bb30:	001c      	movs	r4, r3
 800bb32:	1a12      	subs	r2, r2, r0
 800bb34:	4094      	lsls	r4, r2
 800bb36:	0022      	movs	r2, r4
 800bb38:	40c3      	lsrs	r3, r0
 800bb3a:	430a      	orrs	r2, r1
 800bb3c:	6172      	str	r2, [r6, #20]
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	9c01      	ldr	r4, [sp, #4]
 800bb42:	61b4      	str	r4, [r6, #24]
 800bb44:	1e63      	subs	r3, r4, #1
 800bb46:	419c      	sbcs	r4, r3
 800bb48:	3401      	adds	r4, #1
 800bb4a:	6134      	str	r4, [r6, #16]
 800bb4c:	2d00      	cmp	r5, #0
 800bb4e:	d017      	beq.n	800bb80 <__d2b+0x90>
 800bb50:	2435      	movs	r4, #53	; 0x35
 800bb52:	4b14      	ldr	r3, [pc, #80]	; (800bba4 <__d2b+0xb4>)
 800bb54:	18ed      	adds	r5, r5, r3
 800bb56:	182d      	adds	r5, r5, r0
 800bb58:	603d      	str	r5, [r7, #0]
 800bb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5c:	1a24      	subs	r4, r4, r0
 800bb5e:	601c      	str	r4, [r3, #0]
 800bb60:	0030      	movs	r0, r6
 800bb62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb64:	2280      	movs	r2, #128	; 0x80
 800bb66:	0352      	lsls	r2, r2, #13
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	e7d5      	b.n	800bb18 <__d2b+0x28>
 800bb6c:	6171      	str	r1, [r6, #20]
 800bb6e:	e7e7      	b.n	800bb40 <__d2b+0x50>
 800bb70:	a801      	add	r0, sp, #4
 800bb72:	f7ff fd49 	bl	800b608 <__lo0bits>
 800bb76:	9b01      	ldr	r3, [sp, #4]
 800bb78:	2401      	movs	r4, #1
 800bb7a:	6173      	str	r3, [r6, #20]
 800bb7c:	3020      	adds	r0, #32
 800bb7e:	e7e4      	b.n	800bb4a <__d2b+0x5a>
 800bb80:	4b09      	ldr	r3, [pc, #36]	; (800bba8 <__d2b+0xb8>)
 800bb82:	18c0      	adds	r0, r0, r3
 800bb84:	4b09      	ldr	r3, [pc, #36]	; (800bbac <__d2b+0xbc>)
 800bb86:	6038      	str	r0, [r7, #0]
 800bb88:	18e3      	adds	r3, r4, r3
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	18f3      	adds	r3, r6, r3
 800bb8e:	6958      	ldr	r0, [r3, #20]
 800bb90:	f7ff fd20 	bl	800b5d4 <__hi0bits>
 800bb94:	0164      	lsls	r4, r4, #5
 800bb96:	e7e0      	b.n	800bb5a <__d2b+0x6a>
 800bb98:	0800c8c6 	.word	0x0800c8c6
 800bb9c:	0800c8d7 	.word	0x0800c8d7
 800bba0:	0000030f 	.word	0x0000030f
 800bba4:	fffffbcd 	.word	0xfffffbcd
 800bba8:	fffffbce 	.word	0xfffffbce
 800bbac:	3fffffff 	.word	0x3fffffff

0800bbb0 <__ascii_wctomb>:
 800bbb0:	0003      	movs	r3, r0
 800bbb2:	1e08      	subs	r0, r1, #0
 800bbb4:	d005      	beq.n	800bbc2 <__ascii_wctomb+0x12>
 800bbb6:	2aff      	cmp	r2, #255	; 0xff
 800bbb8:	d904      	bls.n	800bbc4 <__ascii_wctomb+0x14>
 800bbba:	228a      	movs	r2, #138	; 0x8a
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	601a      	str	r2, [r3, #0]
 800bbc0:	4240      	negs	r0, r0
 800bbc2:	4770      	bx	lr
 800bbc4:	2001      	movs	r0, #1
 800bbc6:	700a      	strb	r2, [r1, #0]
 800bbc8:	e7fb      	b.n	800bbc2 <__ascii_wctomb+0x12>
	...

0800bbcc <__ssputs_r>:
 800bbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	9301      	str	r3, [sp, #4]
 800bbd2:	9203      	str	r2, [sp, #12]
 800bbd4:	688e      	ldr	r6, [r1, #8]
 800bbd6:	9a01      	ldr	r2, [sp, #4]
 800bbd8:	0007      	movs	r7, r0
 800bbda:	000c      	movs	r4, r1
 800bbdc:	680b      	ldr	r3, [r1, #0]
 800bbde:	4296      	cmp	r6, r2
 800bbe0:	d831      	bhi.n	800bc46 <__ssputs_r+0x7a>
 800bbe2:	898a      	ldrh	r2, [r1, #12]
 800bbe4:	2190      	movs	r1, #144	; 0x90
 800bbe6:	00c9      	lsls	r1, r1, #3
 800bbe8:	420a      	tst	r2, r1
 800bbea:	d029      	beq.n	800bc40 <__ssputs_r+0x74>
 800bbec:	2003      	movs	r0, #3
 800bbee:	6921      	ldr	r1, [r4, #16]
 800bbf0:	1a5b      	subs	r3, r3, r1
 800bbf2:	9302      	str	r3, [sp, #8]
 800bbf4:	6963      	ldr	r3, [r4, #20]
 800bbf6:	4343      	muls	r3, r0
 800bbf8:	0fdd      	lsrs	r5, r3, #31
 800bbfa:	18ed      	adds	r5, r5, r3
 800bbfc:	9b01      	ldr	r3, [sp, #4]
 800bbfe:	9802      	ldr	r0, [sp, #8]
 800bc00:	3301      	adds	r3, #1
 800bc02:	181b      	adds	r3, r3, r0
 800bc04:	106d      	asrs	r5, r5, #1
 800bc06:	42ab      	cmp	r3, r5
 800bc08:	d900      	bls.n	800bc0c <__ssputs_r+0x40>
 800bc0a:	001d      	movs	r5, r3
 800bc0c:	0552      	lsls	r2, r2, #21
 800bc0e:	d529      	bpl.n	800bc64 <__ssputs_r+0x98>
 800bc10:	0029      	movs	r1, r5
 800bc12:	0038      	movs	r0, r7
 800bc14:	f7ff fb8e 	bl	800b334 <_malloc_r>
 800bc18:	1e06      	subs	r6, r0, #0
 800bc1a:	d02d      	beq.n	800bc78 <__ssputs_r+0xac>
 800bc1c:	9a02      	ldr	r2, [sp, #8]
 800bc1e:	6921      	ldr	r1, [r4, #16]
 800bc20:	f7fe fc4c 	bl	800a4bc <memcpy>
 800bc24:	89a2      	ldrh	r2, [r4, #12]
 800bc26:	4b19      	ldr	r3, [pc, #100]	; (800bc8c <__ssputs_r+0xc0>)
 800bc28:	401a      	ands	r2, r3
 800bc2a:	2380      	movs	r3, #128	; 0x80
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	81a3      	strh	r3, [r4, #12]
 800bc30:	9b02      	ldr	r3, [sp, #8]
 800bc32:	6126      	str	r6, [r4, #16]
 800bc34:	18f6      	adds	r6, r6, r3
 800bc36:	6026      	str	r6, [r4, #0]
 800bc38:	6165      	str	r5, [r4, #20]
 800bc3a:	9e01      	ldr	r6, [sp, #4]
 800bc3c:	1aed      	subs	r5, r5, r3
 800bc3e:	60a5      	str	r5, [r4, #8]
 800bc40:	9b01      	ldr	r3, [sp, #4]
 800bc42:	429e      	cmp	r6, r3
 800bc44:	d900      	bls.n	800bc48 <__ssputs_r+0x7c>
 800bc46:	9e01      	ldr	r6, [sp, #4]
 800bc48:	0032      	movs	r2, r6
 800bc4a:	9903      	ldr	r1, [sp, #12]
 800bc4c:	6820      	ldr	r0, [r4, #0]
 800bc4e:	f000 fb8f 	bl	800c370 <memmove>
 800bc52:	2000      	movs	r0, #0
 800bc54:	68a3      	ldr	r3, [r4, #8]
 800bc56:	1b9b      	subs	r3, r3, r6
 800bc58:	60a3      	str	r3, [r4, #8]
 800bc5a:	6823      	ldr	r3, [r4, #0]
 800bc5c:	199b      	adds	r3, r3, r6
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	b005      	add	sp, #20
 800bc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc64:	002a      	movs	r2, r5
 800bc66:	0038      	movs	r0, r7
 800bc68:	f000 fc00 	bl	800c46c <_realloc_r>
 800bc6c:	1e06      	subs	r6, r0, #0
 800bc6e:	d1df      	bne.n	800bc30 <__ssputs_r+0x64>
 800bc70:	0038      	movs	r0, r7
 800bc72:	6921      	ldr	r1, [r4, #16]
 800bc74:	f7ff fae8 	bl	800b248 <_free_r>
 800bc78:	230c      	movs	r3, #12
 800bc7a:	2001      	movs	r0, #1
 800bc7c:	603b      	str	r3, [r7, #0]
 800bc7e:	89a2      	ldrh	r2, [r4, #12]
 800bc80:	3334      	adds	r3, #52	; 0x34
 800bc82:	4313      	orrs	r3, r2
 800bc84:	81a3      	strh	r3, [r4, #12]
 800bc86:	4240      	negs	r0, r0
 800bc88:	e7ea      	b.n	800bc60 <__ssputs_r+0x94>
 800bc8a:	46c0      	nop			; (mov r8, r8)
 800bc8c:	fffffb7f 	.word	0xfffffb7f

0800bc90 <_svfiprintf_r>:
 800bc90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc92:	b0a1      	sub	sp, #132	; 0x84
 800bc94:	9003      	str	r0, [sp, #12]
 800bc96:	001d      	movs	r5, r3
 800bc98:	898b      	ldrh	r3, [r1, #12]
 800bc9a:	000f      	movs	r7, r1
 800bc9c:	0016      	movs	r6, r2
 800bc9e:	061b      	lsls	r3, r3, #24
 800bca0:	d511      	bpl.n	800bcc6 <_svfiprintf_r+0x36>
 800bca2:	690b      	ldr	r3, [r1, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10e      	bne.n	800bcc6 <_svfiprintf_r+0x36>
 800bca8:	2140      	movs	r1, #64	; 0x40
 800bcaa:	f7ff fb43 	bl	800b334 <_malloc_r>
 800bcae:	6038      	str	r0, [r7, #0]
 800bcb0:	6138      	str	r0, [r7, #16]
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d105      	bne.n	800bcc2 <_svfiprintf_r+0x32>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	9a03      	ldr	r2, [sp, #12]
 800bcba:	3801      	subs	r0, #1
 800bcbc:	6013      	str	r3, [r2, #0]
 800bcbe:	b021      	add	sp, #132	; 0x84
 800bcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcc2:	2340      	movs	r3, #64	; 0x40
 800bcc4:	617b      	str	r3, [r7, #20]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	ac08      	add	r4, sp, #32
 800bcca:	6163      	str	r3, [r4, #20]
 800bccc:	3320      	adds	r3, #32
 800bcce:	7663      	strb	r3, [r4, #25]
 800bcd0:	3310      	adds	r3, #16
 800bcd2:	76a3      	strb	r3, [r4, #26]
 800bcd4:	9507      	str	r5, [sp, #28]
 800bcd6:	0035      	movs	r5, r6
 800bcd8:	782b      	ldrb	r3, [r5, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d001      	beq.n	800bce2 <_svfiprintf_r+0x52>
 800bcde:	2b25      	cmp	r3, #37	; 0x25
 800bce0:	d148      	bne.n	800bd74 <_svfiprintf_r+0xe4>
 800bce2:	1bab      	subs	r3, r5, r6
 800bce4:	9305      	str	r3, [sp, #20]
 800bce6:	42b5      	cmp	r5, r6
 800bce8:	d00b      	beq.n	800bd02 <_svfiprintf_r+0x72>
 800bcea:	0032      	movs	r2, r6
 800bcec:	0039      	movs	r1, r7
 800bcee:	9803      	ldr	r0, [sp, #12]
 800bcf0:	f7ff ff6c 	bl	800bbcc <__ssputs_r>
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	d100      	bne.n	800bcfa <_svfiprintf_r+0x6a>
 800bcf8:	e0af      	b.n	800be5a <_svfiprintf_r+0x1ca>
 800bcfa:	6963      	ldr	r3, [r4, #20]
 800bcfc:	9a05      	ldr	r2, [sp, #20]
 800bcfe:	189b      	adds	r3, r3, r2
 800bd00:	6163      	str	r3, [r4, #20]
 800bd02:	782b      	ldrb	r3, [r5, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d100      	bne.n	800bd0a <_svfiprintf_r+0x7a>
 800bd08:	e0a7      	b.n	800be5a <_svfiprintf_r+0x1ca>
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	4252      	negs	r2, r2
 800bd10:	6062      	str	r2, [r4, #4]
 800bd12:	a904      	add	r1, sp, #16
 800bd14:	3254      	adds	r2, #84	; 0x54
 800bd16:	1852      	adds	r2, r2, r1
 800bd18:	1c6e      	adds	r6, r5, #1
 800bd1a:	6023      	str	r3, [r4, #0]
 800bd1c:	60e3      	str	r3, [r4, #12]
 800bd1e:	60a3      	str	r3, [r4, #8]
 800bd20:	7013      	strb	r3, [r2, #0]
 800bd22:	65a3      	str	r3, [r4, #88]	; 0x58
 800bd24:	4b55      	ldr	r3, [pc, #340]	; (800be7c <_svfiprintf_r+0x1ec>)
 800bd26:	2205      	movs	r2, #5
 800bd28:	0018      	movs	r0, r3
 800bd2a:	7831      	ldrb	r1, [r6, #0]
 800bd2c:	9305      	str	r3, [sp, #20]
 800bd2e:	f7fe fbba 	bl	800a4a6 <memchr>
 800bd32:	1c75      	adds	r5, r6, #1
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d11f      	bne.n	800bd78 <_svfiprintf_r+0xe8>
 800bd38:	6822      	ldr	r2, [r4, #0]
 800bd3a:	06d3      	lsls	r3, r2, #27
 800bd3c:	d504      	bpl.n	800bd48 <_svfiprintf_r+0xb8>
 800bd3e:	2353      	movs	r3, #83	; 0x53
 800bd40:	a904      	add	r1, sp, #16
 800bd42:	185b      	adds	r3, r3, r1
 800bd44:	2120      	movs	r1, #32
 800bd46:	7019      	strb	r1, [r3, #0]
 800bd48:	0713      	lsls	r3, r2, #28
 800bd4a:	d504      	bpl.n	800bd56 <_svfiprintf_r+0xc6>
 800bd4c:	2353      	movs	r3, #83	; 0x53
 800bd4e:	a904      	add	r1, sp, #16
 800bd50:	185b      	adds	r3, r3, r1
 800bd52:	212b      	movs	r1, #43	; 0x2b
 800bd54:	7019      	strb	r1, [r3, #0]
 800bd56:	7833      	ldrb	r3, [r6, #0]
 800bd58:	2b2a      	cmp	r3, #42	; 0x2a
 800bd5a:	d016      	beq.n	800bd8a <_svfiprintf_r+0xfa>
 800bd5c:	0035      	movs	r5, r6
 800bd5e:	2100      	movs	r1, #0
 800bd60:	200a      	movs	r0, #10
 800bd62:	68e3      	ldr	r3, [r4, #12]
 800bd64:	782a      	ldrb	r2, [r5, #0]
 800bd66:	1c6e      	adds	r6, r5, #1
 800bd68:	3a30      	subs	r2, #48	; 0x30
 800bd6a:	2a09      	cmp	r2, #9
 800bd6c:	d94e      	bls.n	800be0c <_svfiprintf_r+0x17c>
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	d111      	bne.n	800bd96 <_svfiprintf_r+0x106>
 800bd72:	e017      	b.n	800bda4 <_svfiprintf_r+0x114>
 800bd74:	3501      	adds	r5, #1
 800bd76:	e7af      	b.n	800bcd8 <_svfiprintf_r+0x48>
 800bd78:	9b05      	ldr	r3, [sp, #20]
 800bd7a:	6822      	ldr	r2, [r4, #0]
 800bd7c:	1ac0      	subs	r0, r0, r3
 800bd7e:	2301      	movs	r3, #1
 800bd80:	4083      	lsls	r3, r0
 800bd82:	4313      	orrs	r3, r2
 800bd84:	002e      	movs	r6, r5
 800bd86:	6023      	str	r3, [r4, #0]
 800bd88:	e7cc      	b.n	800bd24 <_svfiprintf_r+0x94>
 800bd8a:	9b07      	ldr	r3, [sp, #28]
 800bd8c:	1d19      	adds	r1, r3, #4
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	9107      	str	r1, [sp, #28]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	db01      	blt.n	800bd9a <_svfiprintf_r+0x10a>
 800bd96:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd98:	e004      	b.n	800bda4 <_svfiprintf_r+0x114>
 800bd9a:	425b      	negs	r3, r3
 800bd9c:	60e3      	str	r3, [r4, #12]
 800bd9e:	2302      	movs	r3, #2
 800bda0:	4313      	orrs	r3, r2
 800bda2:	6023      	str	r3, [r4, #0]
 800bda4:	782b      	ldrb	r3, [r5, #0]
 800bda6:	2b2e      	cmp	r3, #46	; 0x2e
 800bda8:	d10a      	bne.n	800bdc0 <_svfiprintf_r+0x130>
 800bdaa:	786b      	ldrb	r3, [r5, #1]
 800bdac:	2b2a      	cmp	r3, #42	; 0x2a
 800bdae:	d135      	bne.n	800be1c <_svfiprintf_r+0x18c>
 800bdb0:	9b07      	ldr	r3, [sp, #28]
 800bdb2:	3502      	adds	r5, #2
 800bdb4:	1d1a      	adds	r2, r3, #4
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	9207      	str	r2, [sp, #28]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	db2b      	blt.n	800be16 <_svfiprintf_r+0x186>
 800bdbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc0:	4e2f      	ldr	r6, [pc, #188]	; (800be80 <_svfiprintf_r+0x1f0>)
 800bdc2:	2203      	movs	r2, #3
 800bdc4:	0030      	movs	r0, r6
 800bdc6:	7829      	ldrb	r1, [r5, #0]
 800bdc8:	f7fe fb6d 	bl	800a4a6 <memchr>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d006      	beq.n	800bdde <_svfiprintf_r+0x14e>
 800bdd0:	2340      	movs	r3, #64	; 0x40
 800bdd2:	1b80      	subs	r0, r0, r6
 800bdd4:	4083      	lsls	r3, r0
 800bdd6:	6822      	ldr	r2, [r4, #0]
 800bdd8:	3501      	adds	r5, #1
 800bdda:	4313      	orrs	r3, r2
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	7829      	ldrb	r1, [r5, #0]
 800bde0:	2206      	movs	r2, #6
 800bde2:	4828      	ldr	r0, [pc, #160]	; (800be84 <_svfiprintf_r+0x1f4>)
 800bde4:	1c6e      	adds	r6, r5, #1
 800bde6:	7621      	strb	r1, [r4, #24]
 800bde8:	f7fe fb5d 	bl	800a4a6 <memchr>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d03c      	beq.n	800be6a <_svfiprintf_r+0x1da>
 800bdf0:	4b25      	ldr	r3, [pc, #148]	; (800be88 <_svfiprintf_r+0x1f8>)
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d125      	bne.n	800be42 <_svfiprintf_r+0x1b2>
 800bdf6:	2207      	movs	r2, #7
 800bdf8:	9b07      	ldr	r3, [sp, #28]
 800bdfa:	3307      	adds	r3, #7
 800bdfc:	4393      	bics	r3, r2
 800bdfe:	3308      	adds	r3, #8
 800be00:	9307      	str	r3, [sp, #28]
 800be02:	6963      	ldr	r3, [r4, #20]
 800be04:	9a04      	ldr	r2, [sp, #16]
 800be06:	189b      	adds	r3, r3, r2
 800be08:	6163      	str	r3, [r4, #20]
 800be0a:	e764      	b.n	800bcd6 <_svfiprintf_r+0x46>
 800be0c:	4343      	muls	r3, r0
 800be0e:	0035      	movs	r5, r6
 800be10:	2101      	movs	r1, #1
 800be12:	189b      	adds	r3, r3, r2
 800be14:	e7a6      	b.n	800bd64 <_svfiprintf_r+0xd4>
 800be16:	2301      	movs	r3, #1
 800be18:	425b      	negs	r3, r3
 800be1a:	e7d0      	b.n	800bdbe <_svfiprintf_r+0x12e>
 800be1c:	2300      	movs	r3, #0
 800be1e:	200a      	movs	r0, #10
 800be20:	001a      	movs	r2, r3
 800be22:	3501      	adds	r5, #1
 800be24:	6063      	str	r3, [r4, #4]
 800be26:	7829      	ldrb	r1, [r5, #0]
 800be28:	1c6e      	adds	r6, r5, #1
 800be2a:	3930      	subs	r1, #48	; 0x30
 800be2c:	2909      	cmp	r1, #9
 800be2e:	d903      	bls.n	800be38 <_svfiprintf_r+0x1a8>
 800be30:	2b00      	cmp	r3, #0
 800be32:	d0c5      	beq.n	800bdc0 <_svfiprintf_r+0x130>
 800be34:	9209      	str	r2, [sp, #36]	; 0x24
 800be36:	e7c3      	b.n	800bdc0 <_svfiprintf_r+0x130>
 800be38:	4342      	muls	r2, r0
 800be3a:	0035      	movs	r5, r6
 800be3c:	2301      	movs	r3, #1
 800be3e:	1852      	adds	r2, r2, r1
 800be40:	e7f1      	b.n	800be26 <_svfiprintf_r+0x196>
 800be42:	aa07      	add	r2, sp, #28
 800be44:	9200      	str	r2, [sp, #0]
 800be46:	0021      	movs	r1, r4
 800be48:	003a      	movs	r2, r7
 800be4a:	4b10      	ldr	r3, [pc, #64]	; (800be8c <_svfiprintf_r+0x1fc>)
 800be4c:	9803      	ldr	r0, [sp, #12]
 800be4e:	f7fd fcd3 	bl	80097f8 <_printf_float>
 800be52:	9004      	str	r0, [sp, #16]
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	3301      	adds	r3, #1
 800be58:	d1d3      	bne.n	800be02 <_svfiprintf_r+0x172>
 800be5a:	89bb      	ldrh	r3, [r7, #12]
 800be5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800be5e:	065b      	lsls	r3, r3, #25
 800be60:	d400      	bmi.n	800be64 <_svfiprintf_r+0x1d4>
 800be62:	e72c      	b.n	800bcbe <_svfiprintf_r+0x2e>
 800be64:	2001      	movs	r0, #1
 800be66:	4240      	negs	r0, r0
 800be68:	e729      	b.n	800bcbe <_svfiprintf_r+0x2e>
 800be6a:	aa07      	add	r2, sp, #28
 800be6c:	9200      	str	r2, [sp, #0]
 800be6e:	0021      	movs	r1, r4
 800be70:	003a      	movs	r2, r7
 800be72:	4b06      	ldr	r3, [pc, #24]	; (800be8c <_svfiprintf_r+0x1fc>)
 800be74:	9803      	ldr	r0, [sp, #12]
 800be76:	f7fd ff85 	bl	8009d84 <_printf_i>
 800be7a:	e7ea      	b.n	800be52 <_svfiprintf_r+0x1c2>
 800be7c:	0800cb2d 	.word	0x0800cb2d
 800be80:	0800cb33 	.word	0x0800cb33
 800be84:	0800cb37 	.word	0x0800cb37
 800be88:	080097f9 	.word	0x080097f9
 800be8c:	0800bbcd 	.word	0x0800bbcd

0800be90 <__sfputc_r>:
 800be90:	6893      	ldr	r3, [r2, #8]
 800be92:	b510      	push	{r4, lr}
 800be94:	3b01      	subs	r3, #1
 800be96:	6093      	str	r3, [r2, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	da04      	bge.n	800bea6 <__sfputc_r+0x16>
 800be9c:	6994      	ldr	r4, [r2, #24]
 800be9e:	42a3      	cmp	r3, r4
 800bea0:	db07      	blt.n	800beb2 <__sfputc_r+0x22>
 800bea2:	290a      	cmp	r1, #10
 800bea4:	d005      	beq.n	800beb2 <__sfputc_r+0x22>
 800bea6:	6813      	ldr	r3, [r2, #0]
 800bea8:	1c58      	adds	r0, r3, #1
 800beaa:	6010      	str	r0, [r2, #0]
 800beac:	7019      	strb	r1, [r3, #0]
 800beae:	0008      	movs	r0, r1
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	f7fe f9cb 	bl	800a24c <__swbuf_r>
 800beb6:	0001      	movs	r1, r0
 800beb8:	e7f9      	b.n	800beae <__sfputc_r+0x1e>

0800beba <__sfputs_r>:
 800beba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebc:	0006      	movs	r6, r0
 800bebe:	000f      	movs	r7, r1
 800bec0:	0014      	movs	r4, r2
 800bec2:	18d5      	adds	r5, r2, r3
 800bec4:	42ac      	cmp	r4, r5
 800bec6:	d101      	bne.n	800becc <__sfputs_r+0x12>
 800bec8:	2000      	movs	r0, #0
 800beca:	e007      	b.n	800bedc <__sfputs_r+0x22>
 800becc:	7821      	ldrb	r1, [r4, #0]
 800bece:	003a      	movs	r2, r7
 800bed0:	0030      	movs	r0, r6
 800bed2:	f7ff ffdd 	bl	800be90 <__sfputc_r>
 800bed6:	3401      	adds	r4, #1
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d1f3      	bne.n	800bec4 <__sfputs_r+0xa>
 800bedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bee0 <_vfiprintf_r>:
 800bee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bee2:	b0a1      	sub	sp, #132	; 0x84
 800bee4:	000f      	movs	r7, r1
 800bee6:	0015      	movs	r5, r2
 800bee8:	001e      	movs	r6, r3
 800beea:	9003      	str	r0, [sp, #12]
 800beec:	2800      	cmp	r0, #0
 800beee:	d004      	beq.n	800befa <_vfiprintf_r+0x1a>
 800bef0:	6a03      	ldr	r3, [r0, #32]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <_vfiprintf_r+0x1a>
 800bef6:	f7fe f8e5 	bl	800a0c4 <__sinit>
 800befa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800befc:	07db      	lsls	r3, r3, #31
 800befe:	d405      	bmi.n	800bf0c <_vfiprintf_r+0x2c>
 800bf00:	89bb      	ldrh	r3, [r7, #12]
 800bf02:	059b      	lsls	r3, r3, #22
 800bf04:	d402      	bmi.n	800bf0c <_vfiprintf_r+0x2c>
 800bf06:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bf08:	f7fe facb 	bl	800a4a2 <__retarget_lock_acquire_recursive>
 800bf0c:	89bb      	ldrh	r3, [r7, #12]
 800bf0e:	071b      	lsls	r3, r3, #28
 800bf10:	d502      	bpl.n	800bf18 <_vfiprintf_r+0x38>
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d113      	bne.n	800bf40 <_vfiprintf_r+0x60>
 800bf18:	0039      	movs	r1, r7
 800bf1a:	9803      	ldr	r0, [sp, #12]
 800bf1c:	f7fe f9d8 	bl	800a2d0 <__swsetup_r>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d00d      	beq.n	800bf40 <_vfiprintf_r+0x60>
 800bf24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf26:	07db      	lsls	r3, r3, #31
 800bf28:	d503      	bpl.n	800bf32 <_vfiprintf_r+0x52>
 800bf2a:	2001      	movs	r0, #1
 800bf2c:	4240      	negs	r0, r0
 800bf2e:	b021      	add	sp, #132	; 0x84
 800bf30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf32:	89bb      	ldrh	r3, [r7, #12]
 800bf34:	059b      	lsls	r3, r3, #22
 800bf36:	d4f8      	bmi.n	800bf2a <_vfiprintf_r+0x4a>
 800bf38:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bf3a:	f7fe fab3 	bl	800a4a4 <__retarget_lock_release_recursive>
 800bf3e:	e7f4      	b.n	800bf2a <_vfiprintf_r+0x4a>
 800bf40:	2300      	movs	r3, #0
 800bf42:	ac08      	add	r4, sp, #32
 800bf44:	6163      	str	r3, [r4, #20]
 800bf46:	3320      	adds	r3, #32
 800bf48:	7663      	strb	r3, [r4, #25]
 800bf4a:	3310      	adds	r3, #16
 800bf4c:	76a3      	strb	r3, [r4, #26]
 800bf4e:	9607      	str	r6, [sp, #28]
 800bf50:	002e      	movs	r6, r5
 800bf52:	7833      	ldrb	r3, [r6, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d001      	beq.n	800bf5c <_vfiprintf_r+0x7c>
 800bf58:	2b25      	cmp	r3, #37	; 0x25
 800bf5a:	d148      	bne.n	800bfee <_vfiprintf_r+0x10e>
 800bf5c:	1b73      	subs	r3, r6, r5
 800bf5e:	9305      	str	r3, [sp, #20]
 800bf60:	42ae      	cmp	r6, r5
 800bf62:	d00b      	beq.n	800bf7c <_vfiprintf_r+0x9c>
 800bf64:	002a      	movs	r2, r5
 800bf66:	0039      	movs	r1, r7
 800bf68:	9803      	ldr	r0, [sp, #12]
 800bf6a:	f7ff ffa6 	bl	800beba <__sfputs_r>
 800bf6e:	3001      	adds	r0, #1
 800bf70:	d100      	bne.n	800bf74 <_vfiprintf_r+0x94>
 800bf72:	e0af      	b.n	800c0d4 <_vfiprintf_r+0x1f4>
 800bf74:	6963      	ldr	r3, [r4, #20]
 800bf76:	9a05      	ldr	r2, [sp, #20]
 800bf78:	189b      	adds	r3, r3, r2
 800bf7a:	6163      	str	r3, [r4, #20]
 800bf7c:	7833      	ldrb	r3, [r6, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d100      	bne.n	800bf84 <_vfiprintf_r+0xa4>
 800bf82:	e0a7      	b.n	800c0d4 <_vfiprintf_r+0x1f4>
 800bf84:	2201      	movs	r2, #1
 800bf86:	2300      	movs	r3, #0
 800bf88:	4252      	negs	r2, r2
 800bf8a:	6062      	str	r2, [r4, #4]
 800bf8c:	a904      	add	r1, sp, #16
 800bf8e:	3254      	adds	r2, #84	; 0x54
 800bf90:	1852      	adds	r2, r2, r1
 800bf92:	1c75      	adds	r5, r6, #1
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	60e3      	str	r3, [r4, #12]
 800bf98:	60a3      	str	r3, [r4, #8]
 800bf9a:	7013      	strb	r3, [r2, #0]
 800bf9c:	65a3      	str	r3, [r4, #88]	; 0x58
 800bf9e:	4b59      	ldr	r3, [pc, #356]	; (800c104 <_vfiprintf_r+0x224>)
 800bfa0:	2205      	movs	r2, #5
 800bfa2:	0018      	movs	r0, r3
 800bfa4:	7829      	ldrb	r1, [r5, #0]
 800bfa6:	9305      	str	r3, [sp, #20]
 800bfa8:	f7fe fa7d 	bl	800a4a6 <memchr>
 800bfac:	1c6e      	adds	r6, r5, #1
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	d11f      	bne.n	800bff2 <_vfiprintf_r+0x112>
 800bfb2:	6822      	ldr	r2, [r4, #0]
 800bfb4:	06d3      	lsls	r3, r2, #27
 800bfb6:	d504      	bpl.n	800bfc2 <_vfiprintf_r+0xe2>
 800bfb8:	2353      	movs	r3, #83	; 0x53
 800bfba:	a904      	add	r1, sp, #16
 800bfbc:	185b      	adds	r3, r3, r1
 800bfbe:	2120      	movs	r1, #32
 800bfc0:	7019      	strb	r1, [r3, #0]
 800bfc2:	0713      	lsls	r3, r2, #28
 800bfc4:	d504      	bpl.n	800bfd0 <_vfiprintf_r+0xf0>
 800bfc6:	2353      	movs	r3, #83	; 0x53
 800bfc8:	a904      	add	r1, sp, #16
 800bfca:	185b      	adds	r3, r3, r1
 800bfcc:	212b      	movs	r1, #43	; 0x2b
 800bfce:	7019      	strb	r1, [r3, #0]
 800bfd0:	782b      	ldrb	r3, [r5, #0]
 800bfd2:	2b2a      	cmp	r3, #42	; 0x2a
 800bfd4:	d016      	beq.n	800c004 <_vfiprintf_r+0x124>
 800bfd6:	002e      	movs	r6, r5
 800bfd8:	2100      	movs	r1, #0
 800bfda:	200a      	movs	r0, #10
 800bfdc:	68e3      	ldr	r3, [r4, #12]
 800bfde:	7832      	ldrb	r2, [r6, #0]
 800bfe0:	1c75      	adds	r5, r6, #1
 800bfe2:	3a30      	subs	r2, #48	; 0x30
 800bfe4:	2a09      	cmp	r2, #9
 800bfe6:	d94e      	bls.n	800c086 <_vfiprintf_r+0x1a6>
 800bfe8:	2900      	cmp	r1, #0
 800bfea:	d111      	bne.n	800c010 <_vfiprintf_r+0x130>
 800bfec:	e017      	b.n	800c01e <_vfiprintf_r+0x13e>
 800bfee:	3601      	adds	r6, #1
 800bff0:	e7af      	b.n	800bf52 <_vfiprintf_r+0x72>
 800bff2:	9b05      	ldr	r3, [sp, #20]
 800bff4:	6822      	ldr	r2, [r4, #0]
 800bff6:	1ac0      	subs	r0, r0, r3
 800bff8:	2301      	movs	r3, #1
 800bffa:	4083      	lsls	r3, r0
 800bffc:	4313      	orrs	r3, r2
 800bffe:	0035      	movs	r5, r6
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	e7cc      	b.n	800bf9e <_vfiprintf_r+0xbe>
 800c004:	9b07      	ldr	r3, [sp, #28]
 800c006:	1d19      	adds	r1, r3, #4
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	9107      	str	r1, [sp, #28]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	db01      	blt.n	800c014 <_vfiprintf_r+0x134>
 800c010:	930b      	str	r3, [sp, #44]	; 0x2c
 800c012:	e004      	b.n	800c01e <_vfiprintf_r+0x13e>
 800c014:	425b      	negs	r3, r3
 800c016:	60e3      	str	r3, [r4, #12]
 800c018:	2302      	movs	r3, #2
 800c01a:	4313      	orrs	r3, r2
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	7833      	ldrb	r3, [r6, #0]
 800c020:	2b2e      	cmp	r3, #46	; 0x2e
 800c022:	d10a      	bne.n	800c03a <_vfiprintf_r+0x15a>
 800c024:	7873      	ldrb	r3, [r6, #1]
 800c026:	2b2a      	cmp	r3, #42	; 0x2a
 800c028:	d135      	bne.n	800c096 <_vfiprintf_r+0x1b6>
 800c02a:	9b07      	ldr	r3, [sp, #28]
 800c02c:	3602      	adds	r6, #2
 800c02e:	1d1a      	adds	r2, r3, #4
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	9207      	str	r2, [sp, #28]
 800c034:	2b00      	cmp	r3, #0
 800c036:	db2b      	blt.n	800c090 <_vfiprintf_r+0x1b0>
 800c038:	9309      	str	r3, [sp, #36]	; 0x24
 800c03a:	4d33      	ldr	r5, [pc, #204]	; (800c108 <_vfiprintf_r+0x228>)
 800c03c:	2203      	movs	r2, #3
 800c03e:	0028      	movs	r0, r5
 800c040:	7831      	ldrb	r1, [r6, #0]
 800c042:	f7fe fa30 	bl	800a4a6 <memchr>
 800c046:	2800      	cmp	r0, #0
 800c048:	d006      	beq.n	800c058 <_vfiprintf_r+0x178>
 800c04a:	2340      	movs	r3, #64	; 0x40
 800c04c:	1b40      	subs	r0, r0, r5
 800c04e:	4083      	lsls	r3, r0
 800c050:	6822      	ldr	r2, [r4, #0]
 800c052:	3601      	adds	r6, #1
 800c054:	4313      	orrs	r3, r2
 800c056:	6023      	str	r3, [r4, #0]
 800c058:	7831      	ldrb	r1, [r6, #0]
 800c05a:	2206      	movs	r2, #6
 800c05c:	482b      	ldr	r0, [pc, #172]	; (800c10c <_vfiprintf_r+0x22c>)
 800c05e:	1c75      	adds	r5, r6, #1
 800c060:	7621      	strb	r1, [r4, #24]
 800c062:	f7fe fa20 	bl	800a4a6 <memchr>
 800c066:	2800      	cmp	r0, #0
 800c068:	d043      	beq.n	800c0f2 <_vfiprintf_r+0x212>
 800c06a:	4b29      	ldr	r3, [pc, #164]	; (800c110 <_vfiprintf_r+0x230>)
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d125      	bne.n	800c0bc <_vfiprintf_r+0x1dc>
 800c070:	2207      	movs	r2, #7
 800c072:	9b07      	ldr	r3, [sp, #28]
 800c074:	3307      	adds	r3, #7
 800c076:	4393      	bics	r3, r2
 800c078:	3308      	adds	r3, #8
 800c07a:	9307      	str	r3, [sp, #28]
 800c07c:	6963      	ldr	r3, [r4, #20]
 800c07e:	9a04      	ldr	r2, [sp, #16]
 800c080:	189b      	adds	r3, r3, r2
 800c082:	6163      	str	r3, [r4, #20]
 800c084:	e764      	b.n	800bf50 <_vfiprintf_r+0x70>
 800c086:	4343      	muls	r3, r0
 800c088:	002e      	movs	r6, r5
 800c08a:	2101      	movs	r1, #1
 800c08c:	189b      	adds	r3, r3, r2
 800c08e:	e7a6      	b.n	800bfde <_vfiprintf_r+0xfe>
 800c090:	2301      	movs	r3, #1
 800c092:	425b      	negs	r3, r3
 800c094:	e7d0      	b.n	800c038 <_vfiprintf_r+0x158>
 800c096:	2300      	movs	r3, #0
 800c098:	200a      	movs	r0, #10
 800c09a:	001a      	movs	r2, r3
 800c09c:	3601      	adds	r6, #1
 800c09e:	6063      	str	r3, [r4, #4]
 800c0a0:	7831      	ldrb	r1, [r6, #0]
 800c0a2:	1c75      	adds	r5, r6, #1
 800c0a4:	3930      	subs	r1, #48	; 0x30
 800c0a6:	2909      	cmp	r1, #9
 800c0a8:	d903      	bls.n	800c0b2 <_vfiprintf_r+0x1d2>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d0c5      	beq.n	800c03a <_vfiprintf_r+0x15a>
 800c0ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c0b0:	e7c3      	b.n	800c03a <_vfiprintf_r+0x15a>
 800c0b2:	4342      	muls	r2, r0
 800c0b4:	002e      	movs	r6, r5
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	1852      	adds	r2, r2, r1
 800c0ba:	e7f1      	b.n	800c0a0 <_vfiprintf_r+0x1c0>
 800c0bc:	aa07      	add	r2, sp, #28
 800c0be:	9200      	str	r2, [sp, #0]
 800c0c0:	0021      	movs	r1, r4
 800c0c2:	003a      	movs	r2, r7
 800c0c4:	4b13      	ldr	r3, [pc, #76]	; (800c114 <_vfiprintf_r+0x234>)
 800c0c6:	9803      	ldr	r0, [sp, #12]
 800c0c8:	f7fd fb96 	bl	80097f8 <_printf_float>
 800c0cc:	9004      	str	r0, [sp, #16]
 800c0ce:	9b04      	ldr	r3, [sp, #16]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	d1d3      	bne.n	800c07c <_vfiprintf_r+0x19c>
 800c0d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0d6:	07db      	lsls	r3, r3, #31
 800c0d8:	d405      	bmi.n	800c0e6 <_vfiprintf_r+0x206>
 800c0da:	89bb      	ldrh	r3, [r7, #12]
 800c0dc:	059b      	lsls	r3, r3, #22
 800c0de:	d402      	bmi.n	800c0e6 <_vfiprintf_r+0x206>
 800c0e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c0e2:	f7fe f9df 	bl	800a4a4 <__retarget_lock_release_recursive>
 800c0e6:	89bb      	ldrh	r3, [r7, #12]
 800c0e8:	065b      	lsls	r3, r3, #25
 800c0ea:	d500      	bpl.n	800c0ee <_vfiprintf_r+0x20e>
 800c0ec:	e71d      	b.n	800bf2a <_vfiprintf_r+0x4a>
 800c0ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c0f0:	e71d      	b.n	800bf2e <_vfiprintf_r+0x4e>
 800c0f2:	aa07      	add	r2, sp, #28
 800c0f4:	9200      	str	r2, [sp, #0]
 800c0f6:	0021      	movs	r1, r4
 800c0f8:	003a      	movs	r2, r7
 800c0fa:	4b06      	ldr	r3, [pc, #24]	; (800c114 <_vfiprintf_r+0x234>)
 800c0fc:	9803      	ldr	r0, [sp, #12]
 800c0fe:	f7fd fe41 	bl	8009d84 <_printf_i>
 800c102:	e7e3      	b.n	800c0cc <_vfiprintf_r+0x1ec>
 800c104:	0800cb2d 	.word	0x0800cb2d
 800c108:	0800cb33 	.word	0x0800cb33
 800c10c:	0800cb37 	.word	0x0800cb37
 800c110:	080097f9 	.word	0x080097f9
 800c114:	0800bebb 	.word	0x0800bebb

0800c118 <__sflush_r>:
 800c118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c11a:	898b      	ldrh	r3, [r1, #12]
 800c11c:	0005      	movs	r5, r0
 800c11e:	000c      	movs	r4, r1
 800c120:	071a      	lsls	r2, r3, #28
 800c122:	d45c      	bmi.n	800c1de <__sflush_r+0xc6>
 800c124:	684a      	ldr	r2, [r1, #4]
 800c126:	2a00      	cmp	r2, #0
 800c128:	dc04      	bgt.n	800c134 <__sflush_r+0x1c>
 800c12a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c12c:	2a00      	cmp	r2, #0
 800c12e:	dc01      	bgt.n	800c134 <__sflush_r+0x1c>
 800c130:	2000      	movs	r0, #0
 800c132:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c134:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c136:	2f00      	cmp	r7, #0
 800c138:	d0fa      	beq.n	800c130 <__sflush_r+0x18>
 800c13a:	2200      	movs	r2, #0
 800c13c:	2080      	movs	r0, #128	; 0x80
 800c13e:	682e      	ldr	r6, [r5, #0]
 800c140:	602a      	str	r2, [r5, #0]
 800c142:	001a      	movs	r2, r3
 800c144:	0140      	lsls	r0, r0, #5
 800c146:	6a21      	ldr	r1, [r4, #32]
 800c148:	4002      	ands	r2, r0
 800c14a:	4203      	tst	r3, r0
 800c14c:	d034      	beq.n	800c1b8 <__sflush_r+0xa0>
 800c14e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	075b      	lsls	r3, r3, #29
 800c154:	d506      	bpl.n	800c164 <__sflush_r+0x4c>
 800c156:	6863      	ldr	r3, [r4, #4]
 800c158:	1ac0      	subs	r0, r0, r3
 800c15a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <__sflush_r+0x4c>
 800c160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c162:	1ac0      	subs	r0, r0, r3
 800c164:	0002      	movs	r2, r0
 800c166:	2300      	movs	r3, #0
 800c168:	0028      	movs	r0, r5
 800c16a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c16c:	6a21      	ldr	r1, [r4, #32]
 800c16e:	47b8      	blx	r7
 800c170:	89a2      	ldrh	r2, [r4, #12]
 800c172:	1c43      	adds	r3, r0, #1
 800c174:	d106      	bne.n	800c184 <__sflush_r+0x6c>
 800c176:	6829      	ldr	r1, [r5, #0]
 800c178:	291d      	cmp	r1, #29
 800c17a:	d82c      	bhi.n	800c1d6 <__sflush_r+0xbe>
 800c17c:	4b2a      	ldr	r3, [pc, #168]	; (800c228 <__sflush_r+0x110>)
 800c17e:	410b      	asrs	r3, r1
 800c180:	07db      	lsls	r3, r3, #31
 800c182:	d428      	bmi.n	800c1d6 <__sflush_r+0xbe>
 800c184:	2300      	movs	r3, #0
 800c186:	6063      	str	r3, [r4, #4]
 800c188:	6923      	ldr	r3, [r4, #16]
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	04d2      	lsls	r2, r2, #19
 800c18e:	d505      	bpl.n	800c19c <__sflush_r+0x84>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <__sflush_r+0x82>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d100      	bne.n	800c19c <__sflush_r+0x84>
 800c19a:	6560      	str	r0, [r4, #84]	; 0x54
 800c19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c19e:	602e      	str	r6, [r5, #0]
 800c1a0:	2900      	cmp	r1, #0
 800c1a2:	d0c5      	beq.n	800c130 <__sflush_r+0x18>
 800c1a4:	0023      	movs	r3, r4
 800c1a6:	3344      	adds	r3, #68	; 0x44
 800c1a8:	4299      	cmp	r1, r3
 800c1aa:	d002      	beq.n	800c1b2 <__sflush_r+0x9a>
 800c1ac:	0028      	movs	r0, r5
 800c1ae:	f7ff f84b 	bl	800b248 <_free_r>
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	6360      	str	r0, [r4, #52]	; 0x34
 800c1b6:	e7bc      	b.n	800c132 <__sflush_r+0x1a>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	0028      	movs	r0, r5
 800c1bc:	47b8      	blx	r7
 800c1be:	1c43      	adds	r3, r0, #1
 800c1c0:	d1c6      	bne.n	800c150 <__sflush_r+0x38>
 800c1c2:	682b      	ldr	r3, [r5, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d0c3      	beq.n	800c150 <__sflush_r+0x38>
 800c1c8:	2b1d      	cmp	r3, #29
 800c1ca:	d001      	beq.n	800c1d0 <__sflush_r+0xb8>
 800c1cc:	2b16      	cmp	r3, #22
 800c1ce:	d101      	bne.n	800c1d4 <__sflush_r+0xbc>
 800c1d0:	602e      	str	r6, [r5, #0]
 800c1d2:	e7ad      	b.n	800c130 <__sflush_r+0x18>
 800c1d4:	89a2      	ldrh	r2, [r4, #12]
 800c1d6:	2340      	movs	r3, #64	; 0x40
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	81a3      	strh	r3, [r4, #12]
 800c1dc:	e7a9      	b.n	800c132 <__sflush_r+0x1a>
 800c1de:	690e      	ldr	r6, [r1, #16]
 800c1e0:	2e00      	cmp	r6, #0
 800c1e2:	d0a5      	beq.n	800c130 <__sflush_r+0x18>
 800c1e4:	680f      	ldr	r7, [r1, #0]
 800c1e6:	600e      	str	r6, [r1, #0]
 800c1e8:	1bba      	subs	r2, r7, r6
 800c1ea:	9201      	str	r2, [sp, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	079b      	lsls	r3, r3, #30
 800c1f0:	d100      	bne.n	800c1f4 <__sflush_r+0xdc>
 800c1f2:	694a      	ldr	r2, [r1, #20]
 800c1f4:	60a2      	str	r2, [r4, #8]
 800c1f6:	9b01      	ldr	r3, [sp, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	dd99      	ble.n	800c130 <__sflush_r+0x18>
 800c1fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c1fe:	0032      	movs	r2, r6
 800c200:	001f      	movs	r7, r3
 800c202:	0028      	movs	r0, r5
 800c204:	9b01      	ldr	r3, [sp, #4]
 800c206:	6a21      	ldr	r1, [r4, #32]
 800c208:	47b8      	blx	r7
 800c20a:	2800      	cmp	r0, #0
 800c20c:	dc06      	bgt.n	800c21c <__sflush_r+0x104>
 800c20e:	2340      	movs	r3, #64	; 0x40
 800c210:	2001      	movs	r0, #1
 800c212:	89a2      	ldrh	r2, [r4, #12]
 800c214:	4240      	negs	r0, r0
 800c216:	4313      	orrs	r3, r2
 800c218:	81a3      	strh	r3, [r4, #12]
 800c21a:	e78a      	b.n	800c132 <__sflush_r+0x1a>
 800c21c:	9b01      	ldr	r3, [sp, #4]
 800c21e:	1836      	adds	r6, r6, r0
 800c220:	1a1b      	subs	r3, r3, r0
 800c222:	9301      	str	r3, [sp, #4]
 800c224:	e7e7      	b.n	800c1f6 <__sflush_r+0xde>
 800c226:	46c0      	nop			; (mov r8, r8)
 800c228:	dfbffffe 	.word	0xdfbffffe

0800c22c <_fflush_r>:
 800c22c:	690b      	ldr	r3, [r1, #16]
 800c22e:	b570      	push	{r4, r5, r6, lr}
 800c230:	0005      	movs	r5, r0
 800c232:	000c      	movs	r4, r1
 800c234:	2b00      	cmp	r3, #0
 800c236:	d102      	bne.n	800c23e <_fflush_r+0x12>
 800c238:	2500      	movs	r5, #0
 800c23a:	0028      	movs	r0, r5
 800c23c:	bd70      	pop	{r4, r5, r6, pc}
 800c23e:	2800      	cmp	r0, #0
 800c240:	d004      	beq.n	800c24c <_fflush_r+0x20>
 800c242:	6a03      	ldr	r3, [r0, #32]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d101      	bne.n	800c24c <_fflush_r+0x20>
 800c248:	f7fd ff3c 	bl	800a0c4 <__sinit>
 800c24c:	220c      	movs	r2, #12
 800c24e:	5ea3      	ldrsh	r3, [r4, r2]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d0f1      	beq.n	800c238 <_fflush_r+0xc>
 800c254:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c256:	07d2      	lsls	r2, r2, #31
 800c258:	d404      	bmi.n	800c264 <_fflush_r+0x38>
 800c25a:	059b      	lsls	r3, r3, #22
 800c25c:	d402      	bmi.n	800c264 <_fflush_r+0x38>
 800c25e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c260:	f7fe f91f 	bl	800a4a2 <__retarget_lock_acquire_recursive>
 800c264:	0028      	movs	r0, r5
 800c266:	0021      	movs	r1, r4
 800c268:	f7ff ff56 	bl	800c118 <__sflush_r>
 800c26c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c26e:	0005      	movs	r5, r0
 800c270:	07db      	lsls	r3, r3, #31
 800c272:	d4e2      	bmi.n	800c23a <_fflush_r+0xe>
 800c274:	89a3      	ldrh	r3, [r4, #12]
 800c276:	059b      	lsls	r3, r3, #22
 800c278:	d4df      	bmi.n	800c23a <_fflush_r+0xe>
 800c27a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c27c:	f7fe f912 	bl	800a4a4 <__retarget_lock_release_recursive>
 800c280:	e7db      	b.n	800c23a <_fflush_r+0xe>
	...

0800c284 <fiprintf>:
 800c284:	b40e      	push	{r1, r2, r3}
 800c286:	b517      	push	{r0, r1, r2, r4, lr}
 800c288:	4c05      	ldr	r4, [pc, #20]	; (800c2a0 <fiprintf+0x1c>)
 800c28a:	ab05      	add	r3, sp, #20
 800c28c:	cb04      	ldmia	r3!, {r2}
 800c28e:	0001      	movs	r1, r0
 800c290:	6820      	ldr	r0, [r4, #0]
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	f7ff fe24 	bl	800bee0 <_vfiprintf_r>
 800c298:	bc1e      	pop	{r1, r2, r3, r4}
 800c29a:	bc08      	pop	{r3}
 800c29c:	b003      	add	sp, #12
 800c29e:	4718      	bx	r3
 800c2a0:	2000024c 	.word	0x2000024c

0800c2a4 <__swhatbuf_r>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	000e      	movs	r6, r1
 800c2a8:	001d      	movs	r5, r3
 800c2aa:	230e      	movs	r3, #14
 800c2ac:	5ec9      	ldrsh	r1, [r1, r3]
 800c2ae:	0014      	movs	r4, r2
 800c2b0:	b096      	sub	sp, #88	; 0x58
 800c2b2:	2900      	cmp	r1, #0
 800c2b4:	da0c      	bge.n	800c2d0 <__swhatbuf_r+0x2c>
 800c2b6:	89b2      	ldrh	r2, [r6, #12]
 800c2b8:	2380      	movs	r3, #128	; 0x80
 800c2ba:	0011      	movs	r1, r2
 800c2bc:	4019      	ands	r1, r3
 800c2be:	421a      	tst	r2, r3
 800c2c0:	d013      	beq.n	800c2ea <__swhatbuf_r+0x46>
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	3b40      	subs	r3, #64	; 0x40
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	6029      	str	r1, [r5, #0]
 800c2ca:	6023      	str	r3, [r4, #0]
 800c2cc:	b016      	add	sp, #88	; 0x58
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	466a      	mov	r2, sp
 800c2d2:	f000 f861 	bl	800c398 <_fstat_r>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	dbed      	blt.n	800c2b6 <__swhatbuf_r+0x12>
 800c2da:	23f0      	movs	r3, #240	; 0xf0
 800c2dc:	9901      	ldr	r1, [sp, #4]
 800c2de:	021b      	lsls	r3, r3, #8
 800c2e0:	4019      	ands	r1, r3
 800c2e2:	4b03      	ldr	r3, [pc, #12]	; (800c2f0 <__swhatbuf_r+0x4c>)
 800c2e4:	18c9      	adds	r1, r1, r3
 800c2e6:	424b      	negs	r3, r1
 800c2e8:	4159      	adcs	r1, r3
 800c2ea:	2380      	movs	r3, #128	; 0x80
 800c2ec:	00db      	lsls	r3, r3, #3
 800c2ee:	e7ea      	b.n	800c2c6 <__swhatbuf_r+0x22>
 800c2f0:	ffffe000 	.word	0xffffe000

0800c2f4 <__smakebuf_r>:
 800c2f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2f6:	2602      	movs	r6, #2
 800c2f8:	898b      	ldrh	r3, [r1, #12]
 800c2fa:	0005      	movs	r5, r0
 800c2fc:	000c      	movs	r4, r1
 800c2fe:	4233      	tst	r3, r6
 800c300:	d006      	beq.n	800c310 <__smakebuf_r+0x1c>
 800c302:	0023      	movs	r3, r4
 800c304:	3347      	adds	r3, #71	; 0x47
 800c306:	6023      	str	r3, [r4, #0]
 800c308:	6123      	str	r3, [r4, #16]
 800c30a:	2301      	movs	r3, #1
 800c30c:	6163      	str	r3, [r4, #20]
 800c30e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c310:	466a      	mov	r2, sp
 800c312:	ab01      	add	r3, sp, #4
 800c314:	f7ff ffc6 	bl	800c2a4 <__swhatbuf_r>
 800c318:	9900      	ldr	r1, [sp, #0]
 800c31a:	0007      	movs	r7, r0
 800c31c:	0028      	movs	r0, r5
 800c31e:	f7ff f809 	bl	800b334 <_malloc_r>
 800c322:	2800      	cmp	r0, #0
 800c324:	d108      	bne.n	800c338 <__smakebuf_r+0x44>
 800c326:	220c      	movs	r2, #12
 800c328:	5ea3      	ldrsh	r3, [r4, r2]
 800c32a:	059a      	lsls	r2, r3, #22
 800c32c:	d4ef      	bmi.n	800c30e <__smakebuf_r+0x1a>
 800c32e:	2203      	movs	r2, #3
 800c330:	4393      	bics	r3, r2
 800c332:	431e      	orrs	r6, r3
 800c334:	81a6      	strh	r6, [r4, #12]
 800c336:	e7e4      	b.n	800c302 <__smakebuf_r+0xe>
 800c338:	2380      	movs	r3, #128	; 0x80
 800c33a:	89a2      	ldrh	r2, [r4, #12]
 800c33c:	6020      	str	r0, [r4, #0]
 800c33e:	4313      	orrs	r3, r2
 800c340:	81a3      	strh	r3, [r4, #12]
 800c342:	9b00      	ldr	r3, [sp, #0]
 800c344:	6120      	str	r0, [r4, #16]
 800c346:	6163      	str	r3, [r4, #20]
 800c348:	9b01      	ldr	r3, [sp, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00c      	beq.n	800c368 <__smakebuf_r+0x74>
 800c34e:	0028      	movs	r0, r5
 800c350:	230e      	movs	r3, #14
 800c352:	5ee1      	ldrsh	r1, [r4, r3]
 800c354:	f000 f832 	bl	800c3bc <_isatty_r>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d005      	beq.n	800c368 <__smakebuf_r+0x74>
 800c35c:	2303      	movs	r3, #3
 800c35e:	89a2      	ldrh	r2, [r4, #12]
 800c360:	439a      	bics	r2, r3
 800c362:	3b02      	subs	r3, #2
 800c364:	4313      	orrs	r3, r2
 800c366:	81a3      	strh	r3, [r4, #12]
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	433b      	orrs	r3, r7
 800c36c:	81a3      	strh	r3, [r4, #12]
 800c36e:	e7ce      	b.n	800c30e <__smakebuf_r+0x1a>

0800c370 <memmove>:
 800c370:	b510      	push	{r4, lr}
 800c372:	4288      	cmp	r0, r1
 800c374:	d902      	bls.n	800c37c <memmove+0xc>
 800c376:	188b      	adds	r3, r1, r2
 800c378:	4298      	cmp	r0, r3
 800c37a:	d303      	bcc.n	800c384 <memmove+0x14>
 800c37c:	2300      	movs	r3, #0
 800c37e:	e007      	b.n	800c390 <memmove+0x20>
 800c380:	5c8b      	ldrb	r3, [r1, r2]
 800c382:	5483      	strb	r3, [r0, r2]
 800c384:	3a01      	subs	r2, #1
 800c386:	d2fb      	bcs.n	800c380 <memmove+0x10>
 800c388:	bd10      	pop	{r4, pc}
 800c38a:	5ccc      	ldrb	r4, [r1, r3]
 800c38c:	54c4      	strb	r4, [r0, r3]
 800c38e:	3301      	adds	r3, #1
 800c390:	429a      	cmp	r2, r3
 800c392:	d1fa      	bne.n	800c38a <memmove+0x1a>
 800c394:	e7f8      	b.n	800c388 <memmove+0x18>
	...

0800c398 <_fstat_r>:
 800c398:	2300      	movs	r3, #0
 800c39a:	b570      	push	{r4, r5, r6, lr}
 800c39c:	4d06      	ldr	r5, [pc, #24]	; (800c3b8 <_fstat_r+0x20>)
 800c39e:	0004      	movs	r4, r0
 800c3a0:	0008      	movs	r0, r1
 800c3a2:	0011      	movs	r1, r2
 800c3a4:	602b      	str	r3, [r5, #0]
 800c3a6:	f7f7 f8b8 	bl	800351a <_fstat>
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	d103      	bne.n	800c3b6 <_fstat_r+0x1e>
 800c3ae:	682b      	ldr	r3, [r5, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d000      	beq.n	800c3b6 <_fstat_r+0x1e>
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	bd70      	pop	{r4, r5, r6, pc}
 800c3b8:	200007ac 	.word	0x200007ac

0800c3bc <_isatty_r>:
 800c3bc:	2300      	movs	r3, #0
 800c3be:	b570      	push	{r4, r5, r6, lr}
 800c3c0:	4d06      	ldr	r5, [pc, #24]	; (800c3dc <_isatty_r+0x20>)
 800c3c2:	0004      	movs	r4, r0
 800c3c4:	0008      	movs	r0, r1
 800c3c6:	602b      	str	r3, [r5, #0]
 800c3c8:	f7f7 f8b5 	bl	8003536 <_isatty>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d103      	bne.n	800c3d8 <_isatty_r+0x1c>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d000      	beq.n	800c3d8 <_isatty_r+0x1c>
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	bd70      	pop	{r4, r5, r6, pc}
 800c3da:	46c0      	nop			; (mov r8, r8)
 800c3dc:	200007ac 	.word	0x200007ac

0800c3e0 <_sbrk_r>:
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	b570      	push	{r4, r5, r6, lr}
 800c3e4:	4d06      	ldr	r5, [pc, #24]	; (800c400 <_sbrk_r+0x20>)
 800c3e6:	0004      	movs	r4, r0
 800c3e8:	0008      	movs	r0, r1
 800c3ea:	602b      	str	r3, [r5, #0]
 800c3ec:	f7f7 f8b8 	bl	8003560 <_sbrk>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d103      	bne.n	800c3fc <_sbrk_r+0x1c>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d000      	beq.n	800c3fc <_sbrk_r+0x1c>
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	bd70      	pop	{r4, r5, r6, pc}
 800c3fe:	46c0      	nop			; (mov r8, r8)
 800c400:	200007ac 	.word	0x200007ac

0800c404 <abort>:
 800c404:	2006      	movs	r0, #6
 800c406:	b510      	push	{r4, lr}
 800c408:	f000 f88a 	bl	800c520 <raise>
 800c40c:	2001      	movs	r0, #1
 800c40e:	f7f7 f835 	bl	800347c <_exit>

0800c412 <_calloc_r>:
 800c412:	b570      	push	{r4, r5, r6, lr}
 800c414:	0c0b      	lsrs	r3, r1, #16
 800c416:	0c15      	lsrs	r5, r2, #16
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d11e      	bne.n	800c45a <_calloc_r+0x48>
 800c41c:	2d00      	cmp	r5, #0
 800c41e:	d10c      	bne.n	800c43a <_calloc_r+0x28>
 800c420:	b289      	uxth	r1, r1
 800c422:	b294      	uxth	r4, r2
 800c424:	434c      	muls	r4, r1
 800c426:	0021      	movs	r1, r4
 800c428:	f7fe ff84 	bl	800b334 <_malloc_r>
 800c42c:	1e05      	subs	r5, r0, #0
 800c42e:	d01b      	beq.n	800c468 <_calloc_r+0x56>
 800c430:	0022      	movs	r2, r4
 800c432:	2100      	movs	r1, #0
 800c434:	f7fd ffb0 	bl	800a398 <memset>
 800c438:	e016      	b.n	800c468 <_calloc_r+0x56>
 800c43a:	1c2b      	adds	r3, r5, #0
 800c43c:	1c0c      	adds	r4, r1, #0
 800c43e:	b289      	uxth	r1, r1
 800c440:	b292      	uxth	r2, r2
 800c442:	434a      	muls	r2, r1
 800c444:	b2a1      	uxth	r1, r4
 800c446:	b29c      	uxth	r4, r3
 800c448:	434c      	muls	r4, r1
 800c44a:	0c13      	lsrs	r3, r2, #16
 800c44c:	18e4      	adds	r4, r4, r3
 800c44e:	0c23      	lsrs	r3, r4, #16
 800c450:	d107      	bne.n	800c462 <_calloc_r+0x50>
 800c452:	0424      	lsls	r4, r4, #16
 800c454:	b292      	uxth	r2, r2
 800c456:	4314      	orrs	r4, r2
 800c458:	e7e5      	b.n	800c426 <_calloc_r+0x14>
 800c45a:	2d00      	cmp	r5, #0
 800c45c:	d101      	bne.n	800c462 <_calloc_r+0x50>
 800c45e:	1c14      	adds	r4, r2, #0
 800c460:	e7ed      	b.n	800c43e <_calloc_r+0x2c>
 800c462:	230c      	movs	r3, #12
 800c464:	2500      	movs	r5, #0
 800c466:	6003      	str	r3, [r0, #0]
 800c468:	0028      	movs	r0, r5
 800c46a:	bd70      	pop	{r4, r5, r6, pc}

0800c46c <_realloc_r>:
 800c46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c46e:	0007      	movs	r7, r0
 800c470:	000e      	movs	r6, r1
 800c472:	0014      	movs	r4, r2
 800c474:	2900      	cmp	r1, #0
 800c476:	d105      	bne.n	800c484 <_realloc_r+0x18>
 800c478:	0011      	movs	r1, r2
 800c47a:	f7fe ff5b 	bl	800b334 <_malloc_r>
 800c47e:	0005      	movs	r5, r0
 800c480:	0028      	movs	r0, r5
 800c482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c484:	2a00      	cmp	r2, #0
 800c486:	d103      	bne.n	800c490 <_realloc_r+0x24>
 800c488:	f7fe fede 	bl	800b248 <_free_r>
 800c48c:	0025      	movs	r5, r4
 800c48e:	e7f7      	b.n	800c480 <_realloc_r+0x14>
 800c490:	f000 f866 	bl	800c560 <_malloc_usable_size_r>
 800c494:	9001      	str	r0, [sp, #4]
 800c496:	4284      	cmp	r4, r0
 800c498:	d803      	bhi.n	800c4a2 <_realloc_r+0x36>
 800c49a:	0035      	movs	r5, r6
 800c49c:	0843      	lsrs	r3, r0, #1
 800c49e:	42a3      	cmp	r3, r4
 800c4a0:	d3ee      	bcc.n	800c480 <_realloc_r+0x14>
 800c4a2:	0021      	movs	r1, r4
 800c4a4:	0038      	movs	r0, r7
 800c4a6:	f7fe ff45 	bl	800b334 <_malloc_r>
 800c4aa:	1e05      	subs	r5, r0, #0
 800c4ac:	d0e8      	beq.n	800c480 <_realloc_r+0x14>
 800c4ae:	9b01      	ldr	r3, [sp, #4]
 800c4b0:	0022      	movs	r2, r4
 800c4b2:	429c      	cmp	r4, r3
 800c4b4:	d900      	bls.n	800c4b8 <_realloc_r+0x4c>
 800c4b6:	001a      	movs	r2, r3
 800c4b8:	0031      	movs	r1, r6
 800c4ba:	0028      	movs	r0, r5
 800c4bc:	f7fd fffe 	bl	800a4bc <memcpy>
 800c4c0:	0031      	movs	r1, r6
 800c4c2:	0038      	movs	r0, r7
 800c4c4:	f7fe fec0 	bl	800b248 <_free_r>
 800c4c8:	e7da      	b.n	800c480 <_realloc_r+0x14>

0800c4ca <_raise_r>:
 800c4ca:	b570      	push	{r4, r5, r6, lr}
 800c4cc:	0004      	movs	r4, r0
 800c4ce:	000d      	movs	r5, r1
 800c4d0:	291f      	cmp	r1, #31
 800c4d2:	d904      	bls.n	800c4de <_raise_r+0x14>
 800c4d4:	2316      	movs	r3, #22
 800c4d6:	6003      	str	r3, [r0, #0]
 800c4d8:	2001      	movs	r0, #1
 800c4da:	4240      	negs	r0, r0
 800c4dc:	bd70      	pop	{r4, r5, r6, pc}
 800c4de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d004      	beq.n	800c4ee <_raise_r+0x24>
 800c4e4:	008a      	lsls	r2, r1, #2
 800c4e6:	189b      	adds	r3, r3, r2
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	d108      	bne.n	800c500 <_raise_r+0x36>
 800c4ee:	0020      	movs	r0, r4
 800c4f0:	f000 f832 	bl	800c558 <_getpid_r>
 800c4f4:	002a      	movs	r2, r5
 800c4f6:	0001      	movs	r1, r0
 800c4f8:	0020      	movs	r0, r4
 800c4fa:	f000 f81b 	bl	800c534 <_kill_r>
 800c4fe:	e7ed      	b.n	800c4dc <_raise_r+0x12>
 800c500:	2000      	movs	r0, #0
 800c502:	2a01      	cmp	r2, #1
 800c504:	d0ea      	beq.n	800c4dc <_raise_r+0x12>
 800c506:	1c51      	adds	r1, r2, #1
 800c508:	d103      	bne.n	800c512 <_raise_r+0x48>
 800c50a:	2316      	movs	r3, #22
 800c50c:	3001      	adds	r0, #1
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	e7e4      	b.n	800c4dc <_raise_r+0x12>
 800c512:	2400      	movs	r4, #0
 800c514:	0028      	movs	r0, r5
 800c516:	601c      	str	r4, [r3, #0]
 800c518:	4790      	blx	r2
 800c51a:	0020      	movs	r0, r4
 800c51c:	e7de      	b.n	800c4dc <_raise_r+0x12>
	...

0800c520 <raise>:
 800c520:	b510      	push	{r4, lr}
 800c522:	4b03      	ldr	r3, [pc, #12]	; (800c530 <raise+0x10>)
 800c524:	0001      	movs	r1, r0
 800c526:	6818      	ldr	r0, [r3, #0]
 800c528:	f7ff ffcf 	bl	800c4ca <_raise_r>
 800c52c:	bd10      	pop	{r4, pc}
 800c52e:	46c0      	nop			; (mov r8, r8)
 800c530:	2000024c 	.word	0x2000024c

0800c534 <_kill_r>:
 800c534:	2300      	movs	r3, #0
 800c536:	b570      	push	{r4, r5, r6, lr}
 800c538:	4d06      	ldr	r5, [pc, #24]	; (800c554 <_kill_r+0x20>)
 800c53a:	0004      	movs	r4, r0
 800c53c:	0008      	movs	r0, r1
 800c53e:	0011      	movs	r1, r2
 800c540:	602b      	str	r3, [r5, #0]
 800c542:	f7f6 ff8b 	bl	800345c <_kill>
 800c546:	1c43      	adds	r3, r0, #1
 800c548:	d103      	bne.n	800c552 <_kill_r+0x1e>
 800c54a:	682b      	ldr	r3, [r5, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d000      	beq.n	800c552 <_kill_r+0x1e>
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	bd70      	pop	{r4, r5, r6, pc}
 800c554:	200007ac 	.word	0x200007ac

0800c558 <_getpid_r>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	f7f6 ff79 	bl	8003450 <_getpid>
 800c55e:	bd10      	pop	{r4, pc}

0800c560 <_malloc_usable_size_r>:
 800c560:	1f0b      	subs	r3, r1, #4
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	1f18      	subs	r0, r3, #4
 800c566:	2b00      	cmp	r3, #0
 800c568:	da01      	bge.n	800c56e <_malloc_usable_size_r+0xe>
 800c56a:	580b      	ldr	r3, [r1, r0]
 800c56c:	18c0      	adds	r0, r0, r3
 800c56e:	4770      	bx	lr

0800c570 <_init>:
 800c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c572:	46c0      	nop			; (mov r8, r8)
 800c574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c576:	bc08      	pop	{r3}
 800c578:	469e      	mov	lr, r3
 800c57a:	4770      	bx	lr

0800c57c <_fini>:
 800c57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57e:	46c0      	nop			; (mov r8, r8)
 800c580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c582:	bc08      	pop	{r3}
 800c584:	469e      	mov	lr, r3
 800c586:	4770      	bx	lr
